uint64_t sub_100004AE4()
{
  if (qword_100141A20 != -1)
    dispatch_once(&qword_100141A20, &stru_1001238C0);
  return qword_100141A28;
}

void sub_100004B24(id a1)
{
  const __CFURL *v1;
  const __CFURL *v2;

  qword_100141A28 = (uint64_t)CFBundleGetBundleWithIdentifier(CFSTR("com.apple.Sharing"));
  if (!qword_100141A28)
  {
    v1 = CFURLCreateWithFileSystemPath(0, CFSTR("/System/Library/PrivateFrameworks/Sharing.framework"), kCFURLPOSIXPathStyle, 1u);
    if (v1)
    {
      v2 = v1;
      qword_100141A28 = (uint64_t)CFBundleCreate(0, v1);
      CFRelease(v2);
    }
  }
}

CFStringRef sub_100004B90(const __CFString *a1)
{
  return sub_100004B9C(a1, CFSTR("Localizable"));
}

CFStringRef sub_100004B9C(const __CFString *cf, CFStringRef tableName)
{
  const __CFAllocator *v5;

  if (qword_100141A20 != -1)
    dispatch_once(&qword_100141A20, &stru_1001238C0);
  if (qword_100141A28)
    return CFBundleCopyLocalizedString((CFBundleRef)qword_100141A28, cf, cf, tableName);
  v5 = CFGetAllocator(cf);
  return CFStringCreateCopy(v5, cf);
}

__CFSet *sub_100004C14(const __CFAllocator *a1, CFIndex a2, CFBagRef theBag)
{
  CFIndex Count;
  uint64_t v7;
  size_t v8;
  const void **v9;
  __CFSet *Mutable;
  const void *v11;
  uint64_t v13;

  if (!theBag)
    return 0;
  Count = CFBagGetCount(theBag);
  if (!Count)
    return 0;
  v7 = Count;
  __chkstk_darwin();
  v9 = (const void **)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v9, v8);
  CFBagGetValues(theBag, v9);
  Mutable = CFSetCreateMutable(a1, a2, &kCFTypeSetCallBacks);
  if (v7 >= 1)
  {
    do
    {
      v11 = *v9++;
      CFSetSetValue(Mutable, v11);
      --v7;
    }
    while (v7);
  }
  return Mutable;
}

CFArrayRef sub_100004D14(const __CFAllocator *a1, CFSetRef theSet)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  uint64_t v8;

  if (!theSet)
    return 0;
  result = (CFArrayRef)CFSetGetCount(theSet);
  if (result)
  {
    v5 = (CFIndex)result;
    __chkstk_darwin();
    v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFSetGetValues(theSet, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

CFArrayRef sub_100004DF0(const __CFAllocator *a1, CFBagRef theBag)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  uint64_t v8;

  if (!theBag)
    return 0;
  result = (CFArrayRef)CFBagGetCount(theBag);
  if (result)
  {
    v5 = (CFIndex)result;
    __chkstk_darwin();
    v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFBagGetValues(theBag, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

__CFBag *sub_100004ECC(const __CFAllocator *a1, CFArrayRef theArray)
{
  uint64_t Count;
  __CFBag *Mutable;
  CFIndex i;
  const void *ValueAtIndex;

  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  Mutable = CFBagCreateMutable(a1, Count, &kCFTypeBagCallBacks);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFBagSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

__CFSet *sub_100004F58(const __CFAllocator *a1, CFArrayRef theArray)
{
  uint64_t Count;
  __CFSet *Mutable;
  CFIndex i;
  const void *ValueAtIndex;

  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  Mutable = CFSetCreateMutable(a1, Count, &kCFTypeSetCallBacks);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFSetSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

__CFSet *sub_100004FE4(const __CFAllocator *a1, xpc_object_t xarray)
{
  int64_t count;
  __CFSet *Mutable;
  size_t i;
  int64_t int64;
  const void *ValueAtIndex;

  if (!xarray)
    return 0;
  count = xpc_array_get_count(xarray);
  Mutable = CFSetCreateMutable(a1, count, (const CFSetCallBacks *)&unk_1001238E0);
  if (count >= 1)
  {
    for (i = 0; i != count; ++i)
    {
      int64 = xpc_array_get_int64(xarray, i);
      if (qword_100141A88 != -1)
        dispatch_once(&qword_100141A88, &stru_100123A60);
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_100141A90, int64);
      CFSetSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

xpc_object_t sub_1000050CC(const __CFSet *a1)
{
  CFIndex Count;
  uint64_t v3;
  size_t v4;
  const void **v5;
  xpc_object_t v6;
  const void *v7;
  const void *Value;
  uint64_t v10;

  if (!a1)
    return 0;
  Count = CFSetGetCount(a1);
  if (!Count)
    return 0;
  v3 = Count;
  __chkstk_darwin();
  v5 = (const void **)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v5, v4);
  v6 = xpc_array_create(0, 0);
  CFSetGetValues(a1, v5);
  if (v3 >= 1)
  {
    do
    {
      v7 = *v5;
      if (qword_100141A88 != -1)
        dispatch_once(&qword_100141A88, &stru_100123AA0);
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_100141A98, v7);
      xpc_array_set_int64(v6, 0xFFFFFFFFFFFFFFFFLL, (int64_t)Value);
      ++v5;
      --v3;
    }
    while (v3);
  }
  return v6;
}

CFArrayRef sub_100005218(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  uint64_t v8;

  if (!theDict)
    return 0;
  result = (CFArrayRef)CFDictionaryGetCount(theDict);
  if (result)
  {
    v5 = (CFIndex)result;
    __chkstk_darwin();
    v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFDictionaryGetKeysAndValues(theDict, (const void **)v7, 0);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

CFArrayRef sub_1000052F8(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  CFArrayRef result;
  CFIndex v5;
  size_t v6;
  char *v7;
  uint64_t v8;

  if (!theDict)
    return 0;
  result = (CFArrayRef)CFDictionaryGetCount(theDict);
  if (result)
  {
    v5 = (CFIndex)result;
    __chkstk_darwin();
    v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFDictionaryGetKeysAndValues(theDict, 0, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

void sub_1000053D8(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (value)
    CFDictionarySetValue(theDict, key, value);
  else
    CFDictionaryRemoveValue(theDict, key);
}

uint64_t sub_1000053E4()
{
  return 0;
}

uint64_t sub_1000053EC(const void *a1)
{
  if (CFEqual(a1, kSFNodeProtocolAFP))
    return 548;
  if (CFEqual(a1, kSFNodeProtocolSMB))
    return 445;
  if (CFEqual(a1, kSFNodeProtocolVNC))
    return 5900;
  if (CFEqual(a1, kSFNodeProtocolODisk) || CFEqual(a1, kSFNodeProtocolWebDAV))
    return 80;
  if (CFEqual(a1, kSFNodeProtocolWebDAVS))
    return 443;
  if (CFEqual(a1, kSFNodeProtocolNFS))
    return 2049;
  if (CFEqual(a1, kSFNodeProtocolFTP))
    return 21;
  if (CFEqual(a1, kSFNodeProtocolFTPS))
    return 990;
  if (CFEqual(a1, kSFNodeProtocolHTTP))
    return 80;
  if (CFEqual(a1, kSFNodeProtocolHTTPS))
    return 443;
  if (CFEqual(a1, kSFNodeProtocolADisk))
    return 548;
  else
    return 0xFFFFFFFFLL;
}

const __CFString *sub_10000556C(const __CFString *originalString, CFStringRef legalURLCharactersToBeEscaped)
{
  if (originalString)
    return CFURLCreateStringByAddingPercentEscapes(0, originalString, 0, legalURLCharactersToBeEscaped, 0x8000100u);
  return originalString;
}

const __CFURL *sub_100005590(const void *a1, const __CFString *a2, const __CFString *a3, __CFString *MutableCopy, int a5, const __CFString *a6, const __CFDictionary *a7, int a8)
{
  const void **v16;
  const void *v17;
  int v18;
  CFIndex Length;
  CFMutableStringRef Mutable;
  int v21;
  const __CFString *v22;
  const __CFString *v23;
  CFStringRef v24;
  CFIndex Count;
  uint64_t v26;
  size_t v27;
  const void **v28;
  __CFString *v29;
  uint64_t v30;
  const void *v31;
  const void *Value;
  const __CFURL *v33;
  const __CFURL *v34;
  char v35;
  NSObject *v36;
  const void *v38;
  uint64_t v39;
  int v40;
  const __CFString *v41;
  int v42;
  CFErrorRef error;
  CFRange v44;
  CFRange v45;

  if (CFEqual(a1, kSFNodeProtocolWebDAV) || CFEqual(a1, kSFNodeProtocolODisk))
  {
    v16 = (const void **)&kSFNodeProtocolHTTP;
LABEL_4:
    v17 = *v16;
    goto LABEL_5;
  }
  v38 = (const void *)kSFNodeProtocolAirDrop;
  CFEqual(a1, kSFNodeProtocolAirDrop);
  if (CFEqual(a1, kSFNodeProtocolWebDAVS) || (v17 = a1, CFEqual(a1, v38)))
  {
    v16 = (const void **)&kSFNodeProtocolHTTPS;
    goto LABEL_4;
  }
LABEL_5:
  v18 = sub_1000053EC(a1);
  if (a2)
    a2 = CFURLCreateStringByAddingPercentEscapes(0, a2, 0, CFSTR(";:@?/"), 0x8000100u);
  if (a3)
    a3 = CFURLCreateStringByAddingPercentEscapes(0, a3, 0, CFSTR(";:@?/"), 0x8000100u);
  if (CFStringHasPrefix(MutableCopy, CFSTR("[")) && CFStringHasSuffix(MutableCopy, CFSTR("]")))
  {
    Length = CFStringGetLength(MutableCopy);
    MutableCopy = CFStringCreateMutableCopy(0, Length, MutableCopy);
    v45.length = CFStringGetLength(MutableCopy);
    v45.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("%"), CFSTR("%25"), v45, 0);
  }
  else if (MutableCopy)
  {
    MutableCopy = (__CFString *)CFURLCreateStringByAddingPercentEscapes(0, MutableCopy, 0, CFSTR(";:@?/"),
                                  0x8000100u);
  }
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@://"), v17);
  if (!a2)
  {
    if (!a3)
    {
      v21 = 1;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  CFStringAppend(Mutable, a2);
  if (a3)
  {
LABEL_18:
    CFStringAppendFormat(Mutable, 0, CFSTR(":%@"), a3);
    v21 = 0;
    goto LABEL_19;
  }
  v21 = 1;
LABEL_19:
  CFStringAppend(Mutable, CFSTR("@"));
LABEL_20:
  CFStringAppend(Mutable, MutableCopy);
  if (a5 >= 1 && v18 != a5)
    CFStringAppendFormat(Mutable, 0, CFSTR(":%ld"), a5);
  if (a6)
  {
    if (CFStringHasPrefix(a6, CFSTR("/")))
    {
      v44.length = CFStringGetLength(a6) - 1;
      v44.location = 1;
      v22 = CFStringCreateWithSubstring(0, a6, v44);
    }
    else
    {
      v22 = (const __CFString *)CFRetain(a6);
    }
    v23 = v22;
    if (v22)
      v24 = CFURLCreateStringByAddingPercentEscapes(0, v22, 0, 0, 0x8000100u);
    else
      v24 = 0;
    CFStringAppendFormat(Mutable, 0, CFSTR("/%@"), v24);
    CFRelease(v23);
    CFRelease(v24);
  }
  if (a7)
  {
    Count = CFDictionaryGetCount(a7);
    if (Count)
    {
      v26 = Count;
      v40 = v21;
      v41 = a3;
      v42 = a8;
      v39 = (uint64_t)&v39;
      __chkstk_darwin(Count, 8 * Count);
      v28 = (const void **)((char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v28, v27);
      v29 = CFStringCreateMutable(0, 0);
      CFDictionaryGetKeysAndValues(a7, v28, 0);
      v30 = v26 - 1;
      if (v26 >= 1)
      {
        while (1)
        {
          v31 = *v28;
          Value = CFDictionaryGetValue(a7, *v28);
          CFStringAppendFormat(v29, 0, CFSTR("%@=%@"), v31, Value);
          if (!v30)
            break;
          CFStringAppend(v29, CFSTR("&"));
          --v30;
          ++v28;
        }
      }
      CFStringAppendFormat(Mutable, 0, CFSTR("?%@"), v29);
      CFRelease(v29);
      a8 = v42;
      a3 = v41;
      LOBYTE(v21) = v40;
    }
  }
  v33 = CFURLCreateWithString(0, Mutable, 0);
  v34 = v33;
  if (a8)
  {
    error = 0;
    if (!CFURLSetResourcePropertyForKey(v33, kCFURLIsDirectoryKey, kCFBooleanTrue, &error))
    {
      v35 = v21;
      v36 = utilities_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        sub_1000DD0F4((uint64_t *)&error, v36);
      CFRelease(error);
      LOBYTE(v21) = v35;
    }
  }
  CFRelease(Mutable);
  CFRelease(MutableCopy);
  if (a2)
    CFRelease(a2);
  if ((v21 & 1) == 0)
    CFRelease(a3);
  return v34;
}

uint64_t sub_100005AA0()
{
  return 0;
}

CGImageRef sub_100005AA8(const __CFURL *a1)
{
  CGImageSource *v1;
  CGImageSource *v2;
  CGImageRef ImageAtIndex;
  NSObject *v4;
  NSObject *v5;

  v1 = CGImageSourceCreateWithURL(a1, 0);
  if (v1)
  {
    v2 = v1;
    if (CGImageSourceGetCount(v1))
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v2, 0, 0);
    }
    else
    {
      v5 = utilities_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1000DD198();
      ImageAtIndex = 0;
    }
    CFRelease(v2);
  }
  else
  {
    v4 = utilities_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000DD16C();
    return 0;
  }
  return ImageAtIndex;
}

CGImageRef sub_100005B48(const __CFData *a1)
{
  return sub_100005B50(a1, 0);
}

CGImageRef sub_100005B50(const __CFData *a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  CGImageSource *v6;
  CGImageSource *v7;
  CFStringRef Type;
  CGImageRef ImageAtIndex;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;

  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v5 = Mutable;
  if (a2)
  {
    CFDictionarySetValue(Mutable, kCGImageSourceTypeIdentifierHint, kUTTypeJPEG2000);
    CFDictionarySetValue(v5, kCGImageSourceFailForDataNotMatchingHint, kCFBooleanTrue);
  }
  v6 = CGImageSourceCreateWithData(a1, v5);
  if (v6)
  {
    v7 = v6;
    if (!CGImageSourceGetCount(v6))
    {
      v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1000DD1F0();
      goto LABEL_20;
    }
    if (a2)
    {
      Type = CGImageSourceGetType(v7);
      if (!CFEqual(Type, kUTTypeJPEG2000))
      {
        v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_1000DD21C();
        goto LABEL_20;
      }
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        v10 = utilities_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1000DD248();
LABEL_20:
        ImageAtIndex = 0;
      }
    }
    else
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        v13 = utilities_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1000DD274();
        goto LABEL_20;
      }
    }
    CFRelease(v7);
    goto LABEL_22;
  }
  v11 = utilities_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    sub_1000DD1C4();
  ImageAtIndex = 0;
LABEL_22:
  CFRelease(v5);
  return ImageAtIndex;
}

CGImageRef sub_100005D04(const __CFData *a1)
{
  return sub_100005B50(a1, 1);
}

CGImageRef sub_100005D0C(const void *a1)
{
  CFTypeID v2;
  CGImageSource *v3;
  CGImageSource *v4;
  CGImageRef ImageAtIndex;
  NSObject *v6;
  NSObject *v7;

  v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
  {
    v3 = CGImageSourceCreateWithURL((CFURLRef)a1, 0);
  }
  else
  {
    if (v2 != CFDataGetTypeID())
      goto LABEL_8;
    v3 = CGImageSourceCreateWithData((CFDataRef)a1, 0);
  }
  v4 = v3;
  if (v3)
  {
    if (CGImageSourceGetCount(v3))
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    }
    else
    {
      v7 = utilities_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1000DD2CC();
      ImageAtIndex = 0;
    }
    CFRelease(v4);
    return ImageAtIndex;
  }
LABEL_8:
  v6 = utilities_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1000DD2A0();
  return 0;
}

__CFData *sub_100005DE8(void *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFData *Mutable;
  __CFDictionary *v6;
  CFNumberRef v7;
  const void **v8;
  CGImageDestination *v9;
  CGImageDestination *v10;
  NSObject *v11;
  NSObject *v12;
  int v14;
  uint64_t valuePtr;

  v4 = CFGetAllocator(a1);
  Mutable = CFDataCreateMutable(v4, 0);
  valuePtr = a2;
  v6 = CFDictionaryCreateMutable(v4, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    v7 = CFNumberCreate(v4, kCFNumberLongType, &valuePtr);
    v8 = (const void **)&kCGImageDestinationRequestedFileSize;
  }
  else
  {
    v14 = 1065353216;
    v7 = CFNumberCreate(v4, kCFNumberFloatType, &v14);
    v8 = (const void **)&kCGImageDestinationLossyCompressionQuality;
  }
  CFDictionarySetValue(v6, *v8, v7);
  CFRelease(v7);
  v9 = CGImageDestinationCreateWithData(Mutable, kUTTypeJPEG2000, 1uLL, 0);
  if (v9)
  {
    v10 = v9;
    CGImageDestinationAddImage(v9, (CGImageRef)a1, v6);
    if (!CGImageDestinationFinalize(v10))
    {
      v11 = utilities_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1000DD324();
      CFRelease(Mutable);
      Mutable = 0;
    }
    CFRelease(v10);
  }
  else
  {
    v12 = utilities_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1000DD2F8();
  }
  CFRelease(v6);
  return Mutable;
}

__CFData *sub_100005F58(uint64_t a1, uint64_t a2)
{
  CGColorSpaceRef DeviceRGB;
  CGColorSpaceRef v5;
  CGImage *v6;
  CGImage *v7;
  size_t Width;
  size_t Height;
  void *Thumb;
  NSObject *v11;
  __CFData *v12;
  NSObject *v13;
  const void *v14;
  NSObject *v15;

  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (DeviceRGB)
  {
    v5 = DeviceRGB;
    v6 = (CGImage *)CGImageCreateByMatchingToColorSpace(a1, DeviceRGB);
    if (v6)
    {
      v7 = v6;
      Width = CGImageGetWidth(v6);
      Height = CGImageGetHeight(v7);
      if (Width > 0x21C || Height >= 0x21D)
        Thumb = (void *)CGImageCreateThumb(v7, 540);
      else
        Thumb = (void *)CFRetain(v7);
      v14 = Thumb;
      if (Thumb)
      {
        v12 = sub_100005DE8(Thumb, a2);
        CFRelease(v14);
      }
      else
      {
        v15 = utilities_log();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_1000DD3A8();
        v12 = 0;
      }
      CFRelease(v7);
    }
    else
    {
      v13 = utilities_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1000DD37C();
      v12 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    v11 = utilities_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1000DD350();
    return 0;
  }
  return v12;
}

uint64_t sub_100006084()
{
  const __CFBoolean *v0;
  uint64_t v1;
  int v2;
  const CFBooleanRef *v3;

  v0 = (const __CFBoolean *)qword_100141A30;
  if (!qword_100141A30)
  {
    if ((SFDeviceIsVirtualMachine() & 1) != 0)
      v1 = 1;
    else
      v1 = sub_100006108(CFSTR("EnableDemoMode"), 0);
    v2 = sub_100006108(CFSTR("BrowseAllInterfaces"), v1);
    v3 = &kCFBooleanTrue;
    if (!v2)
      v3 = &kCFBooleanFalse;
    v0 = *v3;
    qword_100141A30 = (uint64_t)*v3;
  }
  return CFBooleanGetValue(v0);
}

uint64_t sub_1000060F8()
{
  return sub_100006108(CFSTR("EnableDemoMode"), 0);
}

uint64_t sub_100006108(const __CFString *a1, uint64_t a2)
{
  const __CFBoolean *v3;
  const __CFBoolean *v4;
  CFTypeID v5;
  uint64_t Value;

  v3 = (const __CFBoolean *)sub_100006334(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFBooleanGetTypeID())
    {
      Value = CFBooleanGetValue(v4);
    }
    else
    {
      if (v5 != CFStringGetTypeID())
      {
LABEL_7:
        CFRelease(v4);
        return a2;
      }
      Value = sub_10000640C((const __CFString *)v4);
    }
    a2 = Value;
    goto LABEL_7;
  }
  return a2;
}

uint64_t sub_10000617C()
{
  return sub_100006108(CFSTR("ForceOldMode"), 0);
}

uint64_t sub_10000618C()
{
  const __CFBoolean *v0;
  int v1;
  const CFBooleanRef *v2;

  v0 = (const __CFBoolean *)qword_100141A38;
  if (!qword_100141A38)
  {
    v1 = sub_100006108(CFSTR("DisableAirDrop"), 0);
    v2 = &kCFBooleanTrue;
    if (!v1)
      v2 = &kCFBooleanFalse;
    v0 = *v2;
    qword_100141A38 = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

uint64_t sub_1000061E0()
{
  const __CFBoolean *v0;
  int v1;
  const CFBooleanRef *v2;

  v0 = (const __CFBoolean *)qword_100141A40;
  if (!qword_100141A40)
  {
    v1 = sub_100006108(CFSTR("EnableSimulator"), 0);
    v2 = &kCFBooleanTrue;
    if (!v1)
      v2 = &kCFBooleanFalse;
    v0 = *v2;
    qword_100141A40 = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

uint64_t sub_100006234()
{
  const __CFBoolean *v0;
  int v1;
  const CFBooleanRef *v2;

  v0 = (const __CFBoolean *)qword_100141A48;
  if (!qword_100141A48)
  {
    v1 = sub_100006108(CFSTR("EnableDeviceImages"), 0);
    v2 = &kCFBooleanTrue;
    if (!v1)
      v2 = &kCFBooleanFalse;
    v0 = *v2;
    qword_100141A48 = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

uint64_t sub_100006288()
{
  const __CFBoolean *v0;
  int v1;
  const CFBooleanRef *v2;

  v0 = (const __CFBoolean *)qword_100141A50;
  if (!qword_100141A50)
  {
    v1 = sub_100006108(CFSTR("EnableDirectIP"), 0);
    v2 = &kCFBooleanTrue;
    if (!v1)
      v2 = &kCFBooleanFalse;
    v0 = *v2;
    qword_100141A50 = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

BOOL sub_1000062DC(CFTypeRef cf1, CFTypeRef cf2)
{
  if (cf1 && cf2)
  {
    if (!CFEqual(cf1, cf2))
      return 1;
  }
  else if (cf1 && !cf2)
  {
    return 1;
  }
  return cf2 && cf1 == 0;
}

CFPropertyListRef sub_100006334(const __CFString *a1)
{
  CFPropertyListRef result;

  result = CFPreferencesCopyAppValue(a1, CFSTR("/private/var/Managed Preferences/mobile/com.apple.Sharing"));
  if (!result)
    return CFPreferencesCopyAppValue(a1, CFSTR("com.apple.Sharing"));
  return result;
}

uint64_t sub_100006378(const __CFString *a1, uint64_t a2)
{
  uint64_t v2;
  const __CFNumber *v3;
  const __CFNumber *v4;
  CFTypeID v5;
  CFTypeID v6;
  uint64_t valuePtr;

  v2 = a2;
  valuePtr = a2;
  v3 = (const __CFNumber *)sub_100006334(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongType, &valuePtr);
    }
    else
    {
      v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
        valuePtr = CFStringGetIntValue((CFStringRef)v4);
    }
    CFRelease(v4);
    return valuePtr;
  }
  return v2;
}

BOOL sub_10000640C(const __CFString *a1)
{
  _BOOL8 v2;

  CFRetain(a1);
  if (CFEqual(a1, CFSTR("1")))
  {
    v2 = 1;
  }
  else
  {
    v2 = 1;
    if (CFStringCompare(a1, CFSTR("true"), 1uLL))
    {
      v2 = 1;
      if (CFStringCompare(a1, CFSTR("yes"), 1uLL))
      {
        v2 = 1;
        if (CFStringCompare(a1, CFSTR("y"), 1uLL))
          v2 = CFStringCompare(a1, CFSTR("on"), 1uLL) == kCFCompareEqualTo;
      }
    }
  }
  CFRelease(a1);
  return v2;
}

CFStringRef sub_1000064C8(const __CFAllocator *a1)
{
  timeval v3;
  tm v4;

  memset(&v4, 0, sizeof(v4));
  v3.tv_sec = 0;
  *(_QWORD *)&v3.tv_usec = 0;
  gettimeofday(&v3, 0);
  localtime_r(&v3.tv_sec, &v4);
  return CFStringCreateWithFormat(a1, 0, CFSTR("%02d:%02d:%02d.%03d"), v4.tm_hour, v4.tm_min, v4.tm_sec, (v3.tv_usec / 1000));
}

const __CFString *sub_100006558()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  const __CFString *v3;
  CFStringRef v4;
  CFTypeID v6;
  void *v7;
  const void *v8;
  CFStringRef v9;
  CFRange v10;

  v0 = (const __CFBoolean *)sub_100006334(CFSTR("AlternateService"));
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v1))
        v3 = CFSTR("_airdrop-alt._tcp.");
      else
        v3 = CFSTR("_airdrop._tcp.");
      goto LABEL_14;
    }
    v6 = CFGetTypeID(v1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFEqual(v1, CFSTR("1")))
      {
        v3 = CFSTR("_airdrop-alt._tcp.");
LABEL_14:
        CFRelease(v1);
        return v3;
      }
      if (!CFEqual(v1, CFSTR("0")))
      {
        if (CFStringGetLength((CFStringRef)v1) < 8)
        {
          v7 = (void *)CFRetain(v1);
        }
        else
        {
          v10.location = 0;
          v10.length = 7;
          v7 = (void *)CFStringCreateWithSubstring(0, (CFStringRef)v1, v10);
        }
        v8 = v7;
        v9 = CFStringCreateWithFormat(0, 0, CFSTR("_airdrop-%@._tcp."), v7);
        v3 = (const __CFString *)CFAutorelease(v9);
        CFRelease(v8);
        goto LABEL_14;
      }
    }
    v3 = CFSTR("_airdrop._tcp.");
    goto LABEL_14;
  }
  if (sub_100006108(CFSTR("EnableDemoMode"), 0))
  {
    v4 = CFStringCreateWithFormat(0, 0, CFSTR("_airdrop-%@._tcp."), CFSTR("demo"));
    return (const __CFString *)CFAutorelease(v4);
  }
  return CFSTR("_airdrop._tcp.");
}

uint64_t sub_1000066E0()
{
  if (qword_100141A58 != -1)
    dispatch_once(&qword_100141A58, &stru_100123930);
  return qword_100141A60;
}

CFArrayRef sub_100006724()
{
  uint64_t v0;
  uint64_t v1;
  CFArrayRef result;
  void *values;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;

  v14 = CFSTR("_adisk._tcp.");
  v15 = CFSTR("_afpovertcp._tcp.");
  v16 = CFSTR("_smb._tcp.");
  v17 = CFSTR("_rfb._tcp.");
  v18 = CFSTR("_odisk._tcp.");
  v19 = CFSTR("_http._tcp.");
  v20 = sub_100006558();
  v21 = CFSTR("_file._tcp.");
  v22 = CFSTR("_netbios._udp.");
  v23 = CFSTR("_workgroups._udp.");
  v24 = CFSTR("_nwnode._tcp.");
  v0 = kSFNodeProtocolAFP;
  values = (void *)kSFNodeProtocolADisk;
  v4 = kSFNodeProtocolAFP;
  v1 = kSFNodeProtocolSMB;
  v5 = kSFNodeProtocolSMB;
  v6 = kSFNodeProtocolVNC;
  v7 = kSFNodeProtocolODisk;
  v8 = kSFNodeProtocolHTTP;
  v9 = kSFNodeProtocolAirDrop;
  v10 = kSFNodeProtocolFile;
  v11 = kSFNodeProtocolNetBIOS;
  v12 = kSFNodeProtocolWorkgroups;
  v13 = kSFNodeProtocolNWNode;
  if (sub_100006108(CFSTR("PreferSMBFileSharing"), 0))
  {
    v15 = CFSTR("_smb._tcp.");
    v16 = CFSTR("_afpovertcp._tcp.");
    v4 = v1;
    v5 = v0;
  }
  qword_100141A68 = (uint64_t)CFArrayCreate(0, (const void **)&values, 11, &kCFTypeArrayCallBacks);
  result = CFArrayCreate(0, (const void **)&v14, 11, &kCFTypeArrayCallBacks);
  qword_100141A60 = (uint64_t)result;
  return result;
}

uint64_t sub_1000068DC()
{
  if (qword_100141A58 != -1)
    dispatch_once(&qword_100141A58, &stru_100123970);
  return qword_100141A68;
}

const void *sub_100006920(void *key)
{
  if (qword_100141A70 != -1)
    dispatch_once(&qword_100141A70, &stru_1001239B0);
  return CFDictionaryGetValue((CFDictionaryRef)qword_100141A78, key);
}

CFDictionaryRef sub_100006974()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  size_t v4;
  char *v5;
  size_t v6;
  char *v7;
  CFDictionaryRef result;
  uint64_t v9;
  CFRange v10;
  CFRange v11;

  if (qword_100141A58 != -1)
    dispatch_once(&qword_100141A58, &stru_100123930);
  v0 = (const __CFArray *)qword_100141A60;
  v1 = (const __CFArray *)qword_100141A68;
  Count = CFArrayGetCount((CFArrayRef)qword_100141A60);
  v3 = CFArrayGetCount(v1);
  __chkstk_darwin();
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, v4);
  __chkstk_darwin();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v7, v6);
  v10.location = 0;
  v10.length = Count;
  CFArrayGetValues(v0, v10, (const void **)v5);
  v11.location = 0;
  v11.length = v3;
  CFArrayGetValues(v1, v11, (const void **)v7);
  qword_100141A78 = (uint64_t)CFDictionaryCreate(kCFAllocatorDefault, (const void **)v7, (const void **)v5, Count, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  result = CFDictionaryCreate(kCFAllocatorDefault, (const void **)v5, (const void **)v7, v3, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_100141A80 = (uint64_t)result;
  return result;
}

const void *sub_100006B14(void *key)
{
  if (qword_100141A70 != -1)
    dispatch_once(&qword_100141A70, &stru_1001239F0);
  return CFDictionaryGetValue((CFDictionaryRef)qword_100141A80, key);
}

uint64_t sub_100006B68()
{
  return ((uint64_t (*)(void))kCFTypeSetCallBacks.retain)();
}

uint64_t sub_100006B78()
{
  return ((uint64_t (*)(void))kCFTypeSetCallBacks.release)();
}

uint64_t sub_100006B88()
{
  return ((uint64_t (*)(void))kCFTypeSetCallBacks.copyDescription)();
}

uint64_t sub_100006B98()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.retain)();
}

uint64_t sub_100006BA8()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.release)();
}

uint64_t sub_100006BB8()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.copyDescription)();
}

CFDictionaryRef sub_100006BCC()
{
  uint64_t v0;
  int64x2_t v1;
  int64x2_t v2;
  CFDictionaryRef result;
  _OWORD v4[12];
  void *values[24];

  v0 = 0;
  values[0] = (void *)kSFNodeKindRoot;
  values[1] = (void *)kSFNodeKindBonjour;
  values[2] = (void *)kSFNodeKindWindows;
  values[3] = (void *)kSFNodeKindDomain;
  values[4] = (void *)kSFNodeKindWorkgroup;
  values[5] = (void *)kSFNodeKindVolume;
  values[6] = (void *)kSFNodeKindPrinter;
  values[7] = (void *)kSFNodeKindADisk;
  values[8] = (void *)kSFNodeKindODisk;
  values[9] = (void *)kSFNodeKindPerson;
  values[10] = (void *)kSFNodeKindMe;
  values[11] = (void *)kSFNodeKindDisabled;
  values[12] = (void *)kSFNodeKindUnknown;
  values[13] = (void *)kSFNodeKindMonogram;
  values[14] = (void *)kSFNodeKindRecent;
  values[15] = (void *)kSFNodeKindConnected;
  values[16] = (void *)kSFNodeKindManaged;
  values[17] = (void *)kSFNodeKindAirDrop;
  values[18] = (void *)kSFNodeKindClassroom;
  values[19] = (void *)kSFNodeKindClassroomGroup;
  values[20] = (void *)kSFNodeKindClassroomCourse;
  values[21] = (void *)kSFNodeKindSuggestion;
  values[22] = (void *)kSFNodeKindRapport;
  values[23] = (void *)kSFNodeKindAll;
  memset(v4, 0, sizeof(v4));
  v1 = (int64x2_t)xmmword_1000E87C0;
  v2 = vdupq_n_s64(2uLL);
  do
  {
    v4[v0] = v1;
    v1 = vaddq_s64(v1, v2);
    ++v0;
  }
  while (v0 != 12);
  qword_100141A90 = (uint64_t)CFArrayCreate(0, (const void **)values, 24, &kCFTypeArrayCallBacks);
  result = CFDictionaryCreate(0, (const void **)values, (const void **)v4, 24, (const CFDictionaryKeyCallBacks *)&unk_100123A10, 0);
  qword_100141A98 = (uint64_t)result;
  return result;
}

void sub_100006E04(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id sub_100006EE0()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  double v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  objc_super v23;

  v1 = &v0[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  v2 = &v0[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureLayoutModeCustomFrameInScreen];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v3 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_screenWidth;
  v4 = (void *)objc_opt_self(UIScreen);
  v5 = v0;
  v6 = objc_msgSend(v4, "mainScreen");
  objc_msgSend(v6, "bounds");
  v8 = v7;

  *(_QWORD *)&v0[v3] = v8;
  v9 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_animationPositionTransformYOffset;
  v10 = objc_msgSend(v4, "mainScreen");
  objc_msgSend(v10, "bounds");
  v12 = v11;

  *(double *)&v5[v9] = v12 / 3.0;
  v13 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_cornerRadius;
  v14 = (void *)objc_opt_self(SBUISystemApertureLayoutMetrics);
  v15 = objc_msgSend(v14, "sharedInstanceForEmbeddedDisplay");
  objc_msgSend(v15, "maximumContinuousCornerRadius");
  v17 = v16;

  *(_QWORD *)&v5[v13] = v17;
  v18 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureEdgeInset;
  v19 = objc_msgSend(v14, "sharedInstanceForEmbeddedDisplay");
  objc_msgSend(v19, "minimumScreenEdgeInsets");
  v21 = v20;

  *(_QWORD *)&v5[v18] = v21;
  v23.receiver = v5;
  v23.super_class = (Class)type metadata accessor for SystemApertureElementTransitionCoordinator();
  return objc_msgSendSuper2(&v23, "init");
}

id sub_100007094(uint64_t a1)
{
  return sub_10000795C(a1, type metadata accessor for SystemApertureElementTransitionCoordinator);
}

uint64_t type metadata accessor for SystemApertureElementTransitionCoordinator()
{
  return objc_opt_self(_TtC9AirDropUI42SystemApertureElementTransitionCoordinator);
}

void sub_1000070DC(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char **v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  id v43;
  _BYTE *v44;
  id v45;
  id v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  id v50;
  _BYTE *v51;
  char *v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  void **aBlock;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  _QWORD *v63;

  v3 = objc_msgSend(a1, "viewControllerForKey:", UITransitionContextFromViewControllerKey);
  if (!v3)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = v3;
  v5 = objc_msgSend(a1, "viewControllerForKey:", UITransitionContextToViewControllerKey);
  if (!v5)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return;
  }
  v6 = v5;
  v7 = OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay;
  if (*((_BYTE *)v1
       + OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay))
    v8 = v5;
  else
    v8 = v4;
  v9 = v8;
  v10 = objc_msgSend(v9, "view");
  if (!v10)
    goto LABEL_27;
  v11 = v10;
  v52 = (char *)OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator;
  v12 = (double *)(*(_QWORD *)((char *)v1
                             + OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator)
                 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureLayoutModeCustomFrameInScreen);
  v13 = *v12;
  v14 = v12[1];
  v16 = v12[2];
  v15 = v12[3];
  v17 = &selRef_initialFrameForViewController_;
  if (*((_BYTE *)v1 + v7))
    v17 = &selRef_finalFrameForViewController_;
  objc_msgSend(a1, *v17, v9);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 8);
  v27 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
  objc_msgSend(v27, "setFrame:", v19, v21, v23, v25);
  objc_msgSend(v27, "setAutoresizingMask:", 18);
  v57 = v6;
  v56 = v9;
  v54 = v26;
  if (*((_BYTE *)v1 + v7) == 1)
    v28 = v26;
  else
    v28 = 0;
  objc_msgSend(v27, "setEffect:", v28);

  v29 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v30 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  objc_msgSend(v29, "setBackgroundColor:", v30);

  objc_msgSend(v29, "setClipsToBounds:", 1);
  v31 = objc_msgSend(v29, "layer");
  objc_msgSend(v31, "setCornerRadius:", *(double *)(*(_QWORD *)&v52[(_QWORD)v1]+ OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_cornerRadius));

  v32 = objc_msgSend(v29, "layer");
  objc_msgSend(v32, "setCornerCurve:", kCACornerCurveID0);

  v33 = objc_msgSend(a1, "containerView");
  objc_msgSend(v33, "addSubview:", v11);

  v34 = objc_msgSend(a1, "containerView");
  objc_msgSend(v34, "addSubview:", v27);

  objc_msgSend(v11, "setFrame:", v19, v21, v23, v25);
  objc_msgSend(v11, "frame");
  objc_msgSend(v11, "setFrame:");
  v35 = objc_msgSend(a1, "containerView");
  objc_msgSend(v35, "setMaskView:", v29);

  if (*((_BYTE *)v1 + v7))
    v36 = v13;
  else
    v36 = v19;
  if (*((_BYTE *)v1 + v7))
    v37 = v14;
  else
    v37 = v21;
  if (*((_BYTE *)v1 + v7))
    v38 = v16;
  else
    v38 = v23;
  if (*((_BYTE *)v1 + v7))
    v39 = v15;
  else
    v39 = v25;
  objc_msgSend(v29, "setFrame:", v36, v37, v38, v39);
  v53 = (id)objc_opt_self(UIView);
  v40 = swift_allocObject(&unk_100123FB8, 120, 7);
  *(_QWORD *)(v40 + 16) = v27;
  *(_QWORD *)(v40 + 24) = v1;
  *(_QWORD *)(v40 + 32) = v26;
  *(_QWORD *)(v40 + 40) = v11;
  *(double *)(v40 + 48) = v19;
  *(double *)(v40 + 56) = v21;
  *(double *)(v40 + 64) = v23;
  *(double *)(v40 + 72) = v25;
  *(_QWORD *)(v40 + 80) = v29;
  *(double *)(v40 + 88) = v13;
  *(double *)(v40 + 96) = v14;
  *(double *)(v40 + 104) = v16;
  *(double *)(v40 + 112) = v15;
  v62 = sub_100008EC8;
  v63 = (_QWORD *)v40;
  aBlock = _NSConcreteStackBlock;
  v59 = 1107296256;
  v60 = sub_1000DA060;
  v61 = &unk_100123FD0;
  v41 = _Block_copy(&aBlock);
  v42 = v63;
  v55 = v54;
  v43 = v27;
  v44 = v1;
  v45 = v11;
  v46 = v29;
  swift_release(v42);
  v47 = (_QWORD *)swift_allocObject(&unk_100124008, 40, 7);
  v47[2] = v43;
  v47[3] = a1;
  v47[4] = v44;
  v62 = sub_100008F34;
  v63 = v47;
  aBlock = _NSConcreteStackBlock;
  v59 = 1107296256;
  v60 = sub_1000A656C;
  v61 = &unk_100124020;
  v48 = _Block_copy(&aBlock);
  v49 = v63;
  v50 = v43;
  v51 = v44;
  swift_unknownObjectRetain(a1);
  swift_release(v49);
  objc_msgSend(v53, "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", 0, v41, v48, 0.8, 0.0, 2.0, 300.0, 50.0, 0.0);

  _Block_release(v48);
  _Block_release(v41);
}

id sub_100007680(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v23 = OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay;
  if (*(_BYTE *)(a2
                + OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay))
    a3 = 0;
  objc_msgSend(a1, "setEffect:", a3);
  objc_msgSend(a4, "setFrame:", a6, a7, a8, a9);
  objc_msgSend(a4, "frame");
  objc_msgSend(a4, "setFrame:");
  if (*(_BYTE *)(a2 + v23))
    v24 = a6;
  else
    v24 = a10;
  if (*(_BYTE *)(a2 + v23))
    v25 = a7;
  else
    v25 = a11;
  if (*(_BYTE *)(a2 + v23))
    v26 = a8;
  else
    v26 = a12;
  v27 = a13;
  if (*(_BYTE *)(a2 + v23))
    v27 = a9;
  return objc_msgSend(a5, "setFrame:", v24, v25, v26, v27);
}

void sub_1000077A4(char a1, id a2, void *a3, uint64_t a4)
{
  id v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  char v16[24];
  _BYTE v17[24];
  uint64_t v18;

  objc_msgSend(a2, "removeFromSuperview");
  v7 = objc_msgSend(a3, "containerView");
  objc_msgSend(v7, "setMaskView:", 0);

  objc_msgSend(a3, "completeTransition:", a1 & 1);
  v8 = *(char **)(a4
                + OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator);
  v9 = (uint64_t)&v8[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate];
  swift_beginAccess(&v8[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate], v16, 0, 0);
  sub_100008F40(v9, (uint64_t)v17);
  if (v18)
  {
    sub_100009008((uint64_t)v17, (uint64_t)v13);
    v10 = v8;
    sub_100008FC8((uint64_t)v17);
    v11 = v14;
    v12 = v15;
    sub_10000904C(v13, v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    sub_100009070(v13);

  }
  else
  {
    sub_100008FC8((uint64_t)v17);
  }
}

id sub_10000794C()
{
  return sub_10000795C(0, type metadata accessor for SystemApertureElementTransition);
}

id sub_10000795C(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for SystemApertureElementTransition()
{
  return objc_opt_self(_TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition);
}

void type metadata accessor for SBUISystemAperturePresentationBehaviors(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B0E0, (uint64_t)&unk_100123DE0);
}

void type metadata accessor for CHHapticPatternLibraryKey(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B0E8, (uint64_t)&unk_100123E08);
}

__n128 initializeWithTake for AirDropActivityAttributes(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AirDropActivityAttributes.ContentState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AirDropActivityAttributes.ContentState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B0F0, (uint64_t)&unk_100123E88);
}

void type metadata accessor for SBUISystemApertureElementIdentifier(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B0F8, (uint64_t)&unk_100123EB0);
}

void type metadata accessor for SBUISystemApertureContentRole(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B100, (uint64_t)&unk_100123ED8);
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B108, (uint64_t)&unk_100123EF8);
}

void type metadata accessor for _UIBackgroundLuminanceLevel(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B110, (uint64_t)&unk_100123F18);
}

__n128 initializeWithTake for SystemApertureLayoutMode(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100007AAC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100007ACC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B118, (uint64_t)&unk_100123F90);
}

void sub_100007B0C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100007B18()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_100008E40();
  EnvironmentValues.subscript.getter(&v2, &type metadata for RemoteAlertTransitioningDelegateKey, &type metadata for RemoteAlertTransitioningDelegateKey, v0);
  return v2;
}

void sub_100007B50(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  id v23;
  _QWORD aBlock[5];
  uint64_t v25;
  uint64_t v26;

  if (*a2 == 1 && (*a1 & 1) == 0)
  {
    v4 = *(_QWORD *)(a3 + 48);
    v5 = (id)(*(uint64_t (**)(void))(a3 + 40))();
    v6 = *(_QWORD *)a3;
    v7 = *(_BYTE *)(a3 + 8);
    sub_1000091A4(*(_QWORD *)a3, v7);
    v8 = sub_100054D98(v6, v7);
    sub_1000091EC(v6, v7);
    if (v8)
    {
      objc_msgSend(v5, "setModalPresentationStyle:", 4);
      objc_msgSend(v5, "setTransitioningDelegate:", v8);
      swift_unknownObjectRelease(v8);
      if ((*(_BYTE *)(a3 + 33) & 1) == 0)
      {
LABEL_5:
        type metadata accessor for AUIRemoteAlertPresentationManager(0);
        v9 = sub_100069274();
        v10 = *(_QWORD *)(a3 + 24);
        aBlock[0] = *(_QWORD *)(a3 + 16);
        v11 = swift_allocObject(&unk_100124210, 72, 7);
        v12 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)a3;
        *(_OWORD *)(v11 + 32) = v12;
        *(_OWORD *)(v11 + 48) = *(_OWORD *)(a3 + 32);
        *(_QWORD *)(v11 + 64) = *(_QWORD *)(a3 + 48);
        sub_1000091A4(v6, v7);
        swift_retain(v4);
        sub_100009498(aBlock);
        swift_retain(v10);
        dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:onDismiss:)(v5, 1, 0, 2, 0, sub_100009554, v11);

        swift_release(v11);
LABEL_12:

        return;
      }
    }
    else
    {
      objc_msgSend(v5, "setModalPresentationStyle:", 0);
      if ((*(_BYTE *)(a3 + 33) & 1) == 0)
        goto LABEL_5;
    }
    v13 = objc_msgSend(objc_allocWithZone((Class)SBSLockScreenService), "init");
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v14 = type metadata accessor for Logger(0);
    sub_100009558(v14, (uint64_t)qword_100148040);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Requesting device unlock if necessary", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = *(_QWORD *)(a3 + 24);
    v26 = *(_QWORD *)(a3 + 16);
    v19 = swift_allocObject(&unk_100124238, 88, 7);
    v20 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v19 + 24) = *(_OWORD *)a3;
    *(_QWORD *)(v19 + 16) = v5;
    *(_OWORD *)(v19 + 40) = v20;
    *(_OWORD *)(v19 + 56) = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(v19 + 72) = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(v19 + 80) = v13;
    aBlock[4] = sub_1000095C0;
    v25 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A656C;
    aBlock[3] = &unk_100124250;
    v21 = _Block_copy(aBlock);
    v22 = v25;
    sub_1000091A4(v6, v7);
    v23 = v5;
    sub_100009498(&v26);
    swift_retain(v18);
    swift_retain(v4);
    v5 = v13;
    objc_msgSend(v5, "requestPasscodeUnlockUIWithOptions:withCompletion:", 0, v21, swift_release(v22).n128_f64[0]);

    _Block_release(v21);
    goto LABEL_12;
  }
}

id sub_100007E88(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if ((a1 & 1) != 0)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v7 = type metadata accessor for Logger(0);
    sub_100009558(v7, (uint64_t)qword_100148040);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Device was unlocked", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    type metadata accessor for AUIRemoteAlertPresentationManager(0);
    v11 = sub_100069274();
    *(_QWORD *)&v23 = *(_QWORD *)a3;
    BYTE8(v23) = *(_BYTE *)(a3 + 8);
    v12 = *(_QWORD *)(a3 + 24);
    v25 = *(_QWORD *)(a3 + 16);
    v13 = *(_QWORD *)(a3 + 48);
    v14 = swift_allocObject(&unk_100124288, 72, 7);
    v15 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v14 + 32) = v15;
    *(_OWORD *)(v14 + 48) = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(v14 + 64) = *(_QWORD *)(a3 + 48);
    sub_10000946C((uint64_t)&v23);
    sub_100009498(&v25);
    swift_retain(v12);
    swift_retain(v13);
    dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:onDismiss:)(a2, 1, 0, 2, 0, sub_100009554, v14);

    *(_QWORD *)&v16 = swift_release(v14).n128_u64[0];
  }
  else
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v17 = type metadata accessor for Logger(0);
    sub_100009558(v17, (uint64_t)qword_100148040);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Device was not unlocked", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v23 = *(_OWORD *)(a3 + 16);
    LOBYTE(v24) = *(_BYTE *)(a3 + 32);
    LOBYTE(v25) = 0;
    v21 = sub_100008F88(&qword_10013B370);
    Binding.wrappedValue.setter(&v25, v21);
  }
  return objc_msgSend(a4, "invalidate", v16, v23, v24, v25);
}

uint64_t sub_10000811C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

double sub_100008134()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;

  v2 = v0[2];
  v1 = v0[3];
  v3 = *((_BYTE *)v0 + 32);
  v5 = v0[5];
  v4 = v0[6];
  v15 = v2;
  v11 = v2;
  v12 = v1;
  LOBYTE(v13) = v3;
  v6 = sub_100008F88(&qword_10013B370);
  Binding.wrappedValue.getter(&v14, v6);
  v11 = *v0;
  LOBYTE(v12) = *((_BYTE *)v0 + 8);
  v7 = swift_allocObject(&unk_1001241E8, 72, 7);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)v0;
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = v1;
  *(_BYTE *)(v7 + 48) = v3;
  *(_DWORD *)(v7 + 49) = *(_DWORD *)((char *)v0 + 33);
  *(_DWORD *)(v7 + 52) = *((_DWORD *)v0 + 9);
  *(_QWORD *)(v7 + 56) = v5;
  *(_QWORD *)(v7 + 64) = v4;
  sub_10000946C((uint64_t)&v11);
  sub_100009498(&v15);
  swift_retain(v1);
  swift_retain(v4);
  v8 = sub_100008F88(&qword_10013B378);
  v9 = sub_1000094C0();
  ((void (*)(char *, _QWORD, void (*)(_BYTE *, _BYTE *), uint64_t, uint64_t, void *, unint64_t, void *, uint64_t, uint64_t, int))View.onChange<A>(of:initial:_:))(&v14, 0, sub_100009464, v7, v8, &type metadata for Bool, v9, &protocol witness table for Bool, v11, v12, v13);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

BOOL sub_100008278(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000828C(uint64_t a1, uint64_t a2)
{
  return sub_100008868(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000082AC(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100008320(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10000839C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *sub_1000083DC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000083EC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_1000083FC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100008410(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100008440(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100008454(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100008468@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10000847C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_100008490@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000084BC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000084E0(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000084F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100008508(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10000851C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100008530(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100008544()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100008554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_10000856C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100008580@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *sub_1000085A8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000085B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100008694(&qword_10013B180, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_1000E8AAC);
  v3 = sub_100008694(&qword_10013B188, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_1000E8A54);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000863C()
{
  return sub_100008694(&qword_10013B120, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_1000E8A1C);
}

uint64_t sub_100008668()
{
  return sub_100008694(&qword_10013B128, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_1000E89F4);
}

uint64_t sub_100008694(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000086D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100008694(&qword_10013B350, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000E8FF0);
  v3 = sub_100008694(&qword_10013B358, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000E8F00);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100008758@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000879C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100008694(&qword_10013B170, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternLibraryKey, (uint64_t)&unk_1000E8BEC);
  v3 = sub_100008694(&qword_10013B178, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternLibraryKey, (uint64_t)&unk_1000E8B94);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100008820@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100008E08(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10000885C(uint64_t a1, uint64_t a2)
{
  return sub_100008868(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100008868(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000088A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000088E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100008954()
{
  return sub_100008694(&qword_10013B130, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_1000E8A84);
}

uint64_t sub_100008980()
{
  return sub_100008694(&qword_10013B138, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternLibraryKey, (uint64_t)&unk_1000E8B5C);
}

uint64_t sub_1000089AC()
{
  return sub_100008694(&qword_10013B140, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternLibraryKey, (uint64_t)&unk_1000E8B34);
}

uint64_t sub_1000089D8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100008A60()
{
  return sub_100008694(&qword_10013B148, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternLibraryKey, (uint64_t)&unk_1000E8BC4);
}

uint64_t sub_100008A8C()
{
  return sub_100008694(&qword_10013B150, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_1000E8CA4);
}

uint64_t sub_100008AB8()
{
  return sub_100008694(&qword_10013B158, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_1000E8C74);
}

uint64_t sub_100008AE4()
{
  return sub_100008694(&qword_10013B160, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_1000E8CCC);
}

uint64_t sub_100008B10()
{
  return sub_100008694(&qword_10013B168, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_1000E8D04);
}

void sub_100008B3C(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat Width;
  uint64_t v16;
  uint64_t v17;
  CGRect v18;

  if (objc_msgSend(a1, "activeLayoutMode") == (id)4)
  {
    v4 = objc_msgSend(a1, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "frame");
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;

      v14 = *(double *)(a2 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_screenWidth) * 0.5;
      v18.origin.x = v7;
      v18.origin.y = v9;
      v18.size.width = v11;
      v18.size.height = v13;
      Width = CGRectGetWidth(v18);
      v16 = *(_QWORD *)(a2
                      + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureEdgeInset);
      v17 = a2
          + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureLayoutModeCustomFrameInScreen;
      *(double *)v17 = v14 - Width * 0.5;
      *(_QWORD *)(v17 + 8) = v16;
      *(CGFloat *)(v17 + 16) = v11;
      *(CGFloat *)(v17 + 24) = v13;
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_100008C1C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  _BYTE *v6;
  id v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  objc_super v12;
  _BYTE v13[24];
  _BYTE v14[24];
  uint64_t v15;

  v1 = v0;
  v2 = (uint64_t)v0 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate;
  swift_beginAccess(v2, v13, 0, 0);
  sub_100008F40(v2, (uint64_t)v14);
  if (v15)
  {
    sub_100009008((uint64_t)v14, (uint64_t)v9);
    sub_100008FC8((uint64_t)v14);
    v3 = v10;
    v4 = v11;
    sub_10000904C(v9, v10);
    (*(void (**)(void *, uint64_t, uint64_t))(v4 + 8))(v1, v3, v4);
    sub_100009070(v9);
  }
  else
  {
    sub_100008FC8((uint64_t)v14);
  }
  v5 = (objc_class *)type metadata accessor for SystemApertureElementTransition();
  v6 = objc_allocWithZone(v5);
  v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay] = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator] = v1;
  v12.receiver = v6;
  v12.super_class = v5;
  v7 = v1;
  return objc_msgSendSuper2(&v12, "init");
}

id sub_100008D14()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  _BYTE *v6;
  id v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  objc_super v12;
  _BYTE v13[24];
  _BYTE v14[24];
  uint64_t v15;

  v1 = v0;
  v2 = (uint64_t)v0 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate;
  swift_beginAccess(v2, v13, 0, 0);
  sub_100008F40(v2, (uint64_t)v14);
  if (v15)
  {
    sub_100009008((uint64_t)v14, (uint64_t)v9);
    sub_100008FC8((uint64_t)v14);
    v3 = v10;
    v4 = v11;
    sub_10000904C(v9, v10);
    (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v1, v3, v4);
    sub_100009070(v9);
  }
  else
  {
    sub_100008FC8((uint64_t)v14);
  }
  v5 = (objc_class *)type metadata accessor for SystemApertureElementTransition();
  v6 = objc_allocWithZone(v5);
  v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator] = v1;
  v12.receiver = v6;
  v12.super_class = v5;
  v7 = v1;
  return objc_msgSendSuper2(&v12, "init");
}

uint64_t sub_100008E08(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_100008E40()
{
  unint64_t result;

  result = qword_10013B1F0;
  if (!qword_10013B1F0)
  {
    result = swift_getWitnessTable(&unk_1000E8FB8, &type metadata for RemoteAlertTransitioningDelegateKey);
    atomic_store(result, (unint64_t *)&qword_10013B1F0);
  }
  return result;
}

uint64_t sub_100008E84()
{
  id *v0;

  return swift_deallocObject(v0, 120, 7);
}

id sub_100008EC8()
{
  uint64_t v0;

  return sub_100007680(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 80), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104), *(double *)(v0 + 112));
}

uint64_t sub_100008EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008EF8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008F00()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100008F34(char a1)
{
  uint64_t v1;

  sub_1000077A4(a1, *(id *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100008F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013C1D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008F88(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100008FC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008F88(&qword_10013C1D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100009008(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_10000904C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100009070(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

ValueMetadata *type metadata accessor for RemoteAlertTransitioningDelegateKey()
{
  return &type metadata for RemoteAlertTransitioningDelegateKey;
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B2C0, (uint64_t)&unk_100124078);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B2C8, (uint64_t)&unk_1001240F8);
}

uint64_t sub_1000090C8()
{
  return sub_100008694(&qword_10013B2D0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000E8EC4);
}

uint64_t sub_1000090F4()
{
  return sub_100008694(&qword_10013B2D8, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000E8E98);
}

uint64_t sub_100009120()
{
  return sub_100008694((unint64_t *)&unk_10013B2E0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000E8F34);
}

void type metadata accessor for SNAInvalidationReason(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B360, (uint64_t)&unk_100124120);
}

void type metadata accessor for SNAAssertionState(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B368, (uint64_t)&unk_100124140);
}

uint64_t initializeBufferWithCopyOfBuffer for RemoteAlertViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000091A4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_unknownObjectRetain();
  else
    return swift_retain(a1);
}

double destroy for RemoteAlertViewModifier(uint64_t a1)
{
  double result;

  sub_1000091EC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 24));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 48)).n128_u64[0];
  return result;
}

uint64_t sub_1000091EC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_unknownObjectRelease(a1);
  else
    return swift_release(a1);
}

uint64_t initializeWithCopy for RemoteAlertViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000091A4(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v9);
  return a1;
}

uint64_t assignWithCopy for RemoteAlertViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000091A4(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1000091EC(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v13 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v12;
  swift_retain(v12);
  swift_release(v14);
  return a1;
}

__n128 initializeWithTake for RemoteAlertViewModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RemoteAlertViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1000091EC(v6, v7);
  swift_release(*(_QWORD *)(a1 + 16));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release(v8);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteAlertViewModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteAlertViewModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteAlertViewModifier()
{
  return &type metadata for RemoteAlertViewModifier;
}

uint64_t sub_100009450(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112374, 1);
}

void sub_100009464(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;

  sub_100007B50(a1, a2, v2 + 16);
}

uint64_t sub_10000946C(uint64_t a1)
{
  sub_1000091A4(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

_QWORD *sub_100009498(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

unint64_t sub_1000094C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B380;
  if (!qword_10013B380)
  {
    v1 = sub_10000950C(&qword_10013B378);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B380);
  }
  return result;
}

uint64_t sub_10000950C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100009558(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100009570()
{
  uint64_t v0;

  sub_1000091EC(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 72));

  return swift_deallocObject(v0, 88, 7);
}

id sub_1000095C0(char a1)
{
  uint64_t v1;

  return sub_100007E88(a1, *(_QWORD *)(v1 + 16), v1 + 24, *(void **)(v1 + 80));
}

uint64_t sub_1000095D4()
{
  uint64_t v0;

  sub_1000091EC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100009614()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 48);
  v3 = 0;
  v1 = sub_100008F88(&qword_10013B370);
  return Binding.wrappedValue.setter(&v3, v1);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_100009678(a1, &qword_10013B388, (uint64_t)&unk_1001242B0);
}

void sub_100009678(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000096BC()
{
  _QWORD v1[4];

  v1[0] = sub_10000950C(&qword_10013B378);
  v1[1] = &type metadata for Bool;
  v1[2] = sub_1000094C0();
  v1[3] = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for AirDropUIButtonStyle.Style(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AirDropUIButtonStyle()
{
  return &type metadata for AirDropUIButtonStyle;
}

uint64_t sub_100009790(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001123FC, 1);
}

uint64_t sub_1000097A0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a2 != 1)
      __asm { BR              X9 }
    v7 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray2Color");
    v8 = Color.init(_:)(v7);
    v9 = Color.opacity(_:)(0.75);
    swift_release(v8);
    return v9;
  }
  else
  {
    (*(void (**)(char *, _QWORD))(v4 + 104))(v6, enum case for Color.RGBColorSpace.sRGB(_:));
    return Color.init(_:red:green:blue:opacity:)(v6, 0.251, 0.251, 0.251, 1.0);
  }
}

uint64_t sub_100009948(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v9;

  type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a2 != 1)
      __asm { BR              X9 }
    v7 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    return Color.init(_:)(v7);
  }
  else
  {
    (*(void (**)(char *, _QWORD))(v4 + 104))(v6, enum case for Color.RGBColorSpace.sRGB(_:));
    return Color.init(_:red:green:blue:opacity:)(v6, 1.0, 1.0, 1.0, 1.0);
  }
}

void sub_100009A38()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t, _QWORD))(v0 + 104))(v1, enum case for Color.RGBColorSpace.sRGB(_:));
  JUMPOUT(0x100009A18);
}

void sub_100009A6C()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t, _QWORD))(v0 + 104))(v1, enum case for Color.RGBColorSpace.sRGB(_:));
  JUMPOUT(0x100009A18);
}

uint64_t sub_100009AB4(uint64_t a1, uint64_t a2)
{
  return sub_10000CC98(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_100009ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t KeyPath;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD v146[2];
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _OWORD v208[3];

  v206 = a1;
  v207 = a2;
  v204 = a4;
  v187 = a3;
  v4 = a3;
  v205 = sub_100008F88(&qword_10013B510);
  v6 = __chkstk_darwin(v205, v5);
  v156 = (char *)v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v157 = (char *)v146 - v9;
  v172 = sub_100008F88(&qword_10013B518);
  v11 = __chkstk_darwin(v172, v10);
  v153 = (char *)v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v152 = (char *)v146 - v14;
  v173 = sub_100008F88(&qword_10013B520);
  v16 = __chkstk_darwin(v173, v15);
  v154 = (char *)v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v151 = (char *)v146 - v19;
  v191 = sub_100008F88(&qword_10013B528);
  v21 = __chkstk_darwin(v191, v20);
  v150 = (char *)v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  v155 = (char *)v146 - v24;
  v189 = sub_100008F88(&qword_10013B530);
  __chkstk_darwin(v189, v25);
  v190 = (uint64_t)v146 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100008F88(&qword_10013B538);
  __chkstk_darwin(v196, v27);
  v192 = (char *)v146 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100008F88(&qword_10013B540);
  __chkstk_darwin(v193, v29);
  v194 = (uint64_t)v146 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100008F88(&qword_10013B548);
  __chkstk_darwin(v180, v31);
  v182 = (uint64_t)v146 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100008F88(&qword_10013B550);
  __chkstk_darwin(v179, v33);
  v181 = (char *)v146 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100008F88(&qword_10013B558);
  __chkstk_darwin(v184, v35);
  v185 = (uint64_t)v146 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100008F88(&qword_10013B560);
  v38 = __chkstk_darwin(v188, v37);
  v183 = (uint64_t)v146 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v40);
  v186 = (uint64_t)v146 - v41;
  v42 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v42, v43);
  v159 = (char *)v146 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100008F88(&qword_10013B568);
  __chkstk_darwin(v200, v45);
  v47 = (char *)v146 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100008F88(&qword_10013B570);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164, v48);
  v162 = (char *)v146 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100008F88((uint64_t *)&unk_100141150);
  __chkstk_darwin(v160, v50);
  v165 = (char *)v146 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008F88(&qword_10013B578);
  __chkstk_darwin(v52, v53);
  v166 = (char *)v146 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100008F88(&qword_10013B580);
  __chkstk_darwin(v161, v55);
  v178 = (char *)v146 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100008F88(&qword_10013B588);
  __chkstk_darwin(v167, v57);
  v158 = (char *)v146 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100008F88(&qword_10013B590);
  v60 = __chkstk_darwin(v174, v59);
  v169 = (char *)v146 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60, v62);
  v171 = (char *)v146 - v63;
  v202 = sub_100008F88(&qword_10013B598);
  __chkstk_darwin(v202, v64);
  v201 = (char *)v146 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100008F88(&qword_10013B5A0);
  __chkstk_darwin(v197, v66);
  v199 = (uint64_t)v146 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100008F88(&qword_10013B5A8);
  __chkstk_darwin(v175, v68);
  v176 = (char *)v146 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100008F88(&qword_10013B5B0);
  __chkstk_darwin(v198, v70);
  v177 = (char *)v146 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100008F88(&qword_10013B5B8);
  __chkstk_darwin(v203, v72);
  v195 = (char *)v146 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v168, v74);
  v170 = (char *)v146 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v77 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76, v78);
  v80 = (char *)v146 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146[0] = sub_100008F88(&qword_10013B5C0);
  __chkstk_darwin(v146[0], v81);
  v82 = sub_100008F88((uint64_t *)&unk_100141140);
  __chkstk_darwin(v82, v83);
  v84 = sub_100008F88(&qword_10013B5C8);
  __chkstk_darwin(v84, v85);
  v146[1] = (char *)v146 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100008F88(&qword_10013B5D0);
  __chkstk_darwin(v87, v88);
  v148 = (char *)v146 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100008F88(&qword_10013B5D8);
  __chkstk_darwin(v147, v90);
  v149 = (char *)v146 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100008F88(&qword_10013B5E0);
  v94 = __chkstk_darwin(v92, v93);
  v96 = __chkstk_darwin(v94, v95);
  if (v4 >= 2)
    __asm { BR              X9 }
  v97 = v206;
  v98 = ButtonStyleConfiguration.label.getter(v96);
  v99 = static Font.title2.getter(v98);
  KeyPath = swift_getKeyPath(&unk_1000E9230);
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v47, v80, v76);
  v101 = (uint64_t *)&v47[*(int *)(v200 + 36)];
  *v101 = KeyPath;
  v101[1] = v99;
  v102 = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v80, v76);
  LOBYTE(v99) = static Edge.Set.all.getter(v102);
  v103 = v194;
  sub_10000CC18((uint64_t)v47, v194, &qword_10013B568);
  v104 = v103 + *(int *)(v193 + 36);
  *(_BYTE *)v104 = v99;
  __asm { FMOV            V0.2D, #10.0 }
  *(_OWORD *)(v104 + 8) = _Q0;
  *(_OWORD *)(v104 + 24) = xmmword_1000E91B0;
  *(_BYTE *)(v104 + 40) = 0;
  v110 = sub_10000CC5C((uint64_t)v47, &qword_10013B568);
  v111 = static Alignment.center.getter(v110);
  v112 = v207;
  _FrameLayout.init(width:height:alignment:)(v208, v207, 0, v207, 0, v111, v113);
  v114 = v182;
  sub_10000CC18(v103, v182, &qword_10013B540);
  v115 = (_OWORD *)(v114 + *(int *)(v180 + 36));
  v116 = v208[1];
  *v115 = v208[0];
  v115[1] = v116;
  v115[2] = v208[2];
  sub_10000CC5C(v103, &qword_10013B540);
  v117 = (uint64_t)v181;
  v118 = &v181[*(int *)(v179 + 36)];
  v119 = &v118[*(int *)(type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier(0) + 20)];
  v120 = type metadata accessor for ButtonStyleConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v119, v97, v120);
  *(_QWORD *)v118 = v112;
  v121 = v187;
  v118[8] = v187;
  v122 = sub_10000CBD4(v114, v117, &qword_10013B548);
  v123 = v117;
  if ((ButtonStyleConfiguration.isPressed.getter(v122) & 1) != 0)
    v124 = sub_1000097A0(v112, v121);
  else
    v124 = sub_100009948(v112, v121);
  v125 = v124;
  v126 = (uint64_t)v201;
  v127 = v202;
  v128 = v196;
  v129 = (uint64_t)v195;
  v130 = swift_getKeyPath(&unk_1000E9260);
  v131 = v185;
  sub_10000CC18(v123, v185, &qword_10013B550);
  v132 = (uint64_t *)(v131 + *(int *)(v184 + 36));
  *v132 = v130;
  v132[1] = v125;
  sub_10000CC5C(v123, &qword_10013B550);
  v133 = v183;
  sub_10000CC18(v131, v183, &qword_10013B558);
  v134 = v188;
  *(_WORD *)(v133 + *(int *)(v188 + 36)) = 256;
  sub_10000CC5C(v131, &qword_10013B558);
  v135 = v186;
  sub_10000CBD4(v133, v186, &qword_10013B560);
  v136 = v190;
  sub_10000CC18(v135, v190, &qword_10013B560);
  swift_storeEnumTagMultiPayload(v136, v189, 0);
  v137 = sub_10000C03C();
  v138 = sub_10000C274();
  v139 = (uint64_t)v192;
  _ConditionalContent<>.init(storage:)(v136, v134, v191, v137, v138);
  v140 = v199;
  sub_10000CC18(v139, v199, &qword_10013B538);
  swift_storeEnumTagMultiPayload(v140, v197, 1);
  v141 = sub_10000BAC4();
  v142 = sub_10000C018();
  _ConditionalContent<>.init(storage:)(v140, v198, v128, v141, v142);
  sub_10000CC5C(v139, &qword_10013B538);
  sub_10000CC18(v129, v126, &qword_10013B5B8);
  swift_storeEnumTagMultiPayload(v126, v127, 0);
  v143 = sub_10000BAA0();
  v144 = sub_10000C400();
  _ConditionalContent<>.init(storage:)(v126, v203, v205, v143, v144);
  sub_10000CC5C(v129, &qword_10013B5B8);
  return sub_10000CC5C(v135, &qword_10013B560);
}

uint64_t sub_10000B614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v58 = a1;
  v62 = a2;
  v63 = sub_100008F88(&qword_10013B788);
  v4 = __chkstk_darwin(v63, v3);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v56 - v8;
  v60 = sub_100008F88(&qword_10013B790);
  __chkstk_darwin(v60, v10);
  v61 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Material(0);
  v12 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56, v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88(&qword_10013B798);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100008F88(&qword_10013B7A0);
  v21 = __chkstk_darwin(v59, v20);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  v57 = (uint64_t)&v56 - v25;
  v26 = *(_QWORD *)v2;
  v27 = *(unsigned __int8 *)(v2 + 8);
  type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier(0);
  if ((ButtonStyleConfiguration.isPressed.getter() & 1) == 0
    && (v27 == 1 || v27 == 2 && (unint64_t)(v26 - 3) <= 1))
  {
    v28 = static Material.thin.getter();
    v29 = static Edge.Set.all.getter(v28);
    v30 = &v19[*(int *)(v16 + 36)];
    v31 = v56;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v30, v15, v56);
    v30[*(int *)(sub_100008F88(&qword_10013B7D0) + 36)] = v29;
    v32 = sub_100008F88(&qword_10013B7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v19, v58, v32);
    v33 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v31);
    v34 = static Edge.Set.all.getter(v33);
    sub_10000CC18((uint64_t)v19, (uint64_t)v23, &qword_10013B798);
    v35 = v59;
    v36 = &v23[*(int *)(v59 + 36)];
    *(_QWORD *)v36 = 2;
    v36[8] = v34;
    sub_10000CC5C((uint64_t)v19, &qword_10013B798);
    v37 = v57;
    sub_10000CBD4((uint64_t)v23, v57, &qword_10013B7A0);
    v38 = v61;
    sub_10000CC18(v37, v61, &qword_10013B7A0);
    swift_storeEnumTagMultiPayload(v38, v60, 0);
    v39 = sub_10000CA50();
    v40 = sub_10000CAF4(&qword_10013B7E8, &qword_10013B788, (unint64_t *)&unk_1001406D0, &qword_10013B7F0);
    _ConditionalContent<>.init(storage:)(v38, v35, v63, v39, v40);
    v41 = v37;
    v42 = &qword_10013B7A0;
  }
  else
  {
    if ((ButtonStyleConfiguration.isPressed.getter() & 1) != 0)
      v43 = sub_100009948(v26, v27);
    else
      v43 = sub_1000097A0(v26, v27);
    v44 = v43;
    v45 = v63;
    v47 = v60;
    v46 = v61;
    v49 = v58;
    v48 = v59;
    v50 = ((uint64_t (*)(void))static Edge.Set.all.getter)();
    v51 = sub_100008F88(&qword_10013B7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v6, v49, v51);
    v52 = &v6[*(int *)(v45 + 36)];
    *(_QWORD *)v52 = v44;
    v52[8] = v50;
    sub_10000CBD4((uint64_t)v6, (uint64_t)v9, &qword_10013B788);
    sub_10000CC18((uint64_t)v9, v46, &qword_10013B788);
    swift_storeEnumTagMultiPayload(v46, v47, 1);
    v53 = sub_10000CA50();
    v54 = sub_10000CAF4(&qword_10013B7E8, &qword_10013B788, (unint64_t *)&unk_1001406D0, &qword_10013B7F0);
    _ConditionalContent<>.init(storage:)(v46, v48, v45, v53, v54);
    v41 = (uint64_t)v9;
    v42 = &qword_10013B788;
  }
  return sub_10000CC5C(v41, v42);
}

uint64_t sub_10000BA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100009ACC(a1, *(_QWORD *)v2, *(unsigned __int8 *)(v2 + 8), a2);
}

uint64_t type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_10013B740;
  if (!qword_10013B740)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirDropUIButtonStyle.BackgroundStyleModifier);
  return result;
}

uint64_t sub_10000BAA0()
{
  return sub_10000C9D0(&qword_10013B5F0, &qword_10013B5B8, (void (*)(void))sub_10000BAC4, (void (*)(void))sub_10000C018);
}

uint64_t sub_10000BAC4()
{
  return sub_10000C9D0(&qword_10013B5F8, &qword_10013B5B0, (void (*)(void))sub_10000BAE8, (void (*)(void))sub_10000BD3C);
}

unint64_t sub_10000BAE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B600;
  if (!qword_10013B600)
  {
    v1 = sub_10000950C(&qword_10013B5E0);
    sub_10000BB6C();
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B600);
  }
  return result;
}

unint64_t sub_10000BB6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B608;
  if (!qword_10013B608)
  {
    v1 = sub_10000950C(&qword_10013B5D8);
    sub_10000BBF0();
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B608);
  }
  return result;
}

unint64_t sub_10000BBF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B610;
  if (!qword_10013B610)
  {
    v1 = sub_10000950C(&qword_10013B5D0);
    sub_10000C20C(&qword_10013B618, &qword_10013B5C8, (void (*)(void))sub_10000BC94);
    sub_100008694(&qword_10013B630, type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier, (uint64_t)&unk_1000E92F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B610);
  }
  return result;
}

unint64_t sub_10000BC94()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10013B620;
  if (!qword_10013B620)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100141140);
    v2[0] = type metadata accessor for ButtonStyleConfiguration.Label(255);
    v2[1] = sub_100008694(&qword_10013B628, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B620);
  }
  return result;
}

unint64_t sub_10000BD3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B640;
  if (!qword_10013B640)
  {
    v1 = sub_10000950C(&qword_10013B590);
    sub_10000BDC0();
    sub_10000CB94(&qword_10013B678, &qword_10013B680, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B640);
  }
  return result;
}

unint64_t sub_10000BDC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B648;
  if (!qword_10013B648)
  {
    v1 = sub_10000950C(&qword_10013B588);
    sub_10000BE44();
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B648);
  }
  return result;
}

unint64_t sub_10000BE44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B650;
  if (!qword_10013B650)
  {
    v1 = sub_10000950C(&qword_10013B580);
    sub_10000C20C(&qword_10013B658, &qword_10013B578, (void (*)(void))sub_10000BEE8);
    sub_100008694(&qword_10013B630, type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier, (uint64_t)&unk_1000E92F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B650);
  }
  return result;
}

unint64_t sub_10000BEE8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10013B660;
  if (!qword_10013B660)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100141150);
    v2[0] = sub_10000950C(&qword_10013B568);
    v2[1] = sub_10000BF7C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B660);
  }
  return result;
}

unint64_t sub_10000BF7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B668;
  if (!qword_10013B668)
  {
    v1 = sub_10000950C(&qword_10013B568);
    sub_100008694(&qword_10013B628, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_10000CB94(&qword_10013B670, &qword_100140940, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B668);
  }
  return result;
}

uint64_t sub_10000C018()
{
  return sub_10000C9D0(&qword_10013B688, &qword_10013B538, (void (*)(void))sub_10000C03C, (void (*)(void))sub_10000C274);
}

unint64_t sub_10000C03C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B690;
  if (!qword_10013B690)
  {
    v1 = sub_10000950C(&qword_10013B560);
    sub_10000C0C0();
    sub_10000CB94(&qword_10013B6B8, &qword_10013B6C0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B690);
  }
  return result;
}

unint64_t sub_10000C0C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B698;
  if (!qword_10013B698)
  {
    v1 = sub_10000950C(&qword_10013B558);
    sub_10000C144();
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B698);
  }
  return result;
}

unint64_t sub_10000C144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B6A0;
  if (!qword_10013B6A0)
  {
    v1 = sub_10000950C(&qword_10013B550);
    sub_10000C20C(&qword_10013B6A8, &qword_10013B548, (void (*)(void))sub_10000C1E8);
    sub_100008694(&qword_10013B630, type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier, (uint64_t)&unk_1000E92F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B6A0);
  }
  return result;
}

uint64_t sub_10000C1E8()
{
  return sub_10000C20C(&qword_10013B6B0, &qword_10013B540, (void (*)(void))sub_10000BF7C);
}

uint64_t sub_10000C20C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000950C(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000C274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B6C8;
  if (!qword_10013B6C8)
  {
    v1 = sub_10000950C(&qword_10013B528);
    sub_10000C2F8();
    sub_10000CB94(&qword_10013B6B8, &qword_10013B6C0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B6C8);
  }
  return result;
}

unint64_t sub_10000C2F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B6D0;
  if (!qword_10013B6D0)
  {
    v1 = sub_10000950C(&qword_10013B520);
    sub_10000C37C();
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B6D0);
  }
  return result;
}

unint64_t sub_10000C37C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B6D8;
  if (!qword_10013B6D8)
  {
    v1 = sub_10000950C(&qword_10013B518);
    sub_10000C1E8();
    sub_100008694(&qword_10013B630, type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier, (uint64_t)&unk_1000E92F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B6D8);
  }
  return result;
}

unint64_t sub_10000C400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B6E0;
  if (!qword_10013B6E0)
  {
    v1 = sub_10000950C(&qword_10013B510);
    sub_10000C2F8();
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B6E0);
  }
  return result;
}

uint64_t sub_10000C484(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000C4C8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *sub_10000C504(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 20);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for ButtonStyleConfiguration(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10000C594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for ButtonStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_10000C5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for ButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_10000C630(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for ButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_10000C694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for ButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10000C6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for ButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10000C75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000C768);
}

uint64_t sub_10000C768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 2)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for ButtonStyleConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10000C7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000C7E8);
}

uint64_t sub_10000C7E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for ButtonStyleConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10000C858(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\t";
  result = type metadata accessor for ButtonStyleConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VisualEffectView.Effect(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualEffectView.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10000C958(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10000C974(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AirDropUIButtonStyle.Style()
{
  return &type metadata for AirDropUIButtonStyle.Style;
}

uint64_t sub_10000C99C()
{
  return sub_10000C9D0(&qword_10013B778, &qword_10013B780, (void (*)(void))sub_10000BAA0, (void (*)(void))sub_10000C400);
}

uint64_t sub_10000C9D0(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000CA40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112424, 1);
}

unint64_t sub_10000CA50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B7B0;
  if (!qword_10013B7B0)
  {
    v1 = sub_10000950C(&qword_10013B7A0);
    sub_10000CAF4(&qword_10013B7B8, &qword_10013B798, &qword_10013B7C8, &qword_10013B7D0);
    sub_10000CB94(&qword_10013B7D8, &qword_10013B7E0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B7B0);
  }
  return result;
}

uint64_t sub_10000CAF4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    sub_10000CB94(&qword_10013B7C0, &qword_10013B7A8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000CB94(a3, a4, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000CB94(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000950C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000CBD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008F88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000CC18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008F88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000CC5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100008F88(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000CC98(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double v4;
  double v5;

  if (!a2)
  {
    if (!a4)
    {
      v4 = *(double *)&a1;
      v5 = *(double *)&a3;
      return v4 == v5;
    }
    return 0;
  }
  if (a2 != 1)
    return ((uint64_t (*)(void))((char *)&loc_10000CCE8 + 4 * byte_1000E91CA[a1]))();
  if (a4 != 1)
    return 0;
  v4 = *(double *)&a1;
  v5 = *(double *)&a3;
  return v4 == v5;
}

unint64_t sub_10000CD8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013B7F8;
  if (!qword_10013B7F8)
  {
    v1 = sub_10000950C((uint64_t *)&unk_10013B800);
    sub_10000CA50();
    sub_10000CAF4(&qword_10013B7E8, &qword_10013B788, (unint64_t *)&unk_1001406D0, &qword_10013B7F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013B7F8);
  }
  return result;
}

void destroy for ActionableShareableContent(uint64_t a1)
{
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  sub_100009070((_QWORD *)a1);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 40), v2, v3, v4, v5, v6, v7, v8);
}

uint64_t initializeWithCopy for ActionableShareableContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ActionableShareableContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000CEC4(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

_QWORD *sub_10000CEC4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for ActionableShareableContent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ActionableShareableContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  sub_100009070((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionableShareableContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionableShareableContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionableShareableContent()
{
  return &type metadata for ActionableShareableContent;
}

uint64_t sub_10000D124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013B810);
  v1 = sub_100009558(v0, (uint64_t)qword_10013B810);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v2 = sub_100009558(v0, (uint64_t)qword_100148040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10000D1B4(uint64_t a1)
{
  uint64_t v1;

  return swift_getDynamicType(v1, a1, 0);
}

uint64_t sub_10000D1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v8 = sub_100008F88(&qword_10013BBC0);
  v7[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000D22C, 0, 0);
}

uint64_t sub_10000D22C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[9];
  v2 = v0[7];
  v3 = type metadata accessor for UTType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v4 = *(int **)(v2 + 32);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_10000D2C4;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v7)(v0[2], v0[3], v0[4], v0[5], v0[9], v0[6], v0[7]);
}

uint64_t sub_10000D2C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v1 + 72);
  v2 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  *(_QWORD *)(v4 + 88) = v0;
  swift_task_dealloc(v2);
  sub_10000CC5C(v3, &qword_10013BBC0);
  if (v0)
    return swift_task_switch(sub_10000D354, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v4 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10000D354()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_10000D388(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

id sub_10000D3FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v2 = a2;
  v3 = a1;
  v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_50:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v2);
    if (v5 == v32)
      goto LABEL_4;
LABEL_54:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (a1 < 0)
    v30 = a1;
  else
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v3);
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_50;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_54;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_60;
  v33 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_61;
  for (result = *(id *)(v3 + 32); ; result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
LABEL_21:
    v14 = v13;
    sub_100018D44(0, &qword_10013B858, SFAirDropAction_ptr);
    v15 = static NSObject.== infix(_:_:)(v12, v14);

    if ((v15 & 1) == 0)
      goto LABEL_54;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v17 = 0;
      v18 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v33)
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v3);
        else
          v19 = *(id *)(v3 + 40 + 8 * v17);
        v20 = v19;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v8 + 16))
            goto LABEL_59;
          v21 = *(id *)(v2 + 40 + 8 * v17);
        }
        v22 = v21;
        v5 = static NSObject.== infix(_:_:)(v20, v21);

        if ((v5 & 1) != 0 && v18 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24 <= 1)
        v24 = 1;
      v25 = v24 - 1;
      v26 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v25)
          goto LABEL_58;
        v28 = *v26++;
        v27 = v28;
        v29 = *(void **)v8;
        v8 += 8;
        v2 = v27;
        v3 = v29;
        v5 = static NSObject.== infix(_:_:)(v2, v3);

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000D6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  BOOL v23;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for URL(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v20 = 1;
    }
    else
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v25 = *(_QWORD *)(v10 + 72);
      v26 = v10;
      v15 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      v16 = v13 - 1;
      do
      {
        v17 = a1;
        v15(v12, a1 + v14, v4);
        v18 = a2;
        v15(v8, a2 + v14, v4);
        v19 = sub_100008694(&qword_10013B850, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v20 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v8, v4, v19);
        v21 = *(void (**)(char *, uint64_t))(v26 + 8);
        v21(v8, v4);
        v21(v12, v4);
        v23 = v16-- != 0;
        if ((v20 & 1) == 0)
          break;
        v14 += v25;
        a2 = v18;
        a1 = v17;
      }
      while (v23);
    }
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_10000D878(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  uint64_t result;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v1 = a1[3];
  v2 = (_QWORD *)a1[4];
  sub_10000904C(a1, v1);
  v3 = v2[8];
  v4 = ((uint64_t (*)(uint64_t, _QWORD *))v3)(v1, v2);
  if ((unint64_t)v4 >> 62)
    goto LABEL_37;
  for (i = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = _CocoaArrayWrapper.endIndex.getter(v27))
  {
    swift_bridgeObjectRelease(v4);
    if (i < 1)
    {
      if (qword_10013ABC0 == -1)
      {
LABEL_27:
        v21 = type metadata accessor for Logger(0);
        sub_100009558(v21, (uint64_t)qword_10013B810);
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v24 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "no item providers", v24, 2u);
          swift_slowDealloc(v24, -1, -1);
        }

        return 0;
      }
LABEL_49:
      swift_once(&qword_10013ABC0, sub_10000D124);
      goto LABEL_27;
    }
    v6 = ((uint64_t (*)(uint64_t, _QWORD *))v3)(v1, v2);
    v1 = v6;
    if ((unint64_t)v6 >> 62)
      break;
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      goto LABEL_44;
LABEL_6:
    v31 = v1 & 0xC000000000000001;
    if ((v1 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v8 = *(id *)(v1 + 32);
        goto LABEL_9;
      }
      __break(1u);
      goto LABEL_49;
    }
LABEL_47:
    v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
LABEL_9:
    v4 = (uint64_t)v8;
    type metadata accessor for SFAirDropUtilities(0);
    v3 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
    v9 = *(_QWORD *)(v3 + 16);
    if (!v9)
    {
      v20 = v1;
LABEL_32:
      swift_bridgeObjectRelease(v20);

      v25 = v3;
LABEL_33:
      swift_bridgeObjectRelease(v25);
      return 0;
    }
    v29 = v1 & 0xFFFFFFFFFFFFFF8;
    v30 = v1;
    v28 = v1 + 32;
    v10 = 1;
    while (1)
    {
      v11 = v7;
      v12 = *(_QWORD *)(v3 + 40);
      swift_bridgeObjectRetain(v12);
      v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      LOBYTE(v12) = objc_msgSend((id)v4, "hasItemConformingToTypeIdentifier:", v13);

      if ((v12 & 1) == 0)
        break;
LABEL_12:

      result = swift_bridgeObjectRelease(v3);
      if (v10 == v11)
      {
        v26 = v30;
        goto LABEL_45;
      }
      v7 = v11;
      if (v31)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v30);
      }
      else
      {
        if (v10 >= *(_QWORD *)(v29 + 16))
        {
          __break(1u);
          return result;
        }
        v15 = *(id *)(v28 + 8 * v10);
      }
      v4 = (uint64_t)v15;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_47;
      }
      v3 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
      v9 = *(_QWORD *)(v3 + 16);
      if (!v9)
      {
        v20 = v30;
        goto LABEL_32;
      }
    }
    if (v9 == 1)
    {
LABEL_30:

      swift_bridgeObjectRelease(v3);
      v25 = v30;
      goto LABEL_33;
    }
    v2 = (_QWORD *)(v3 + 56);
    v1 = 1;
    while (1)
    {
      v16 = v1 + 1;
      if (__OFADD__(v1, 1))
        break;
      v17 = *v2;
      swift_bridgeObjectRetain(*v2);
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v17);
      LOBYTE(v17) = objc_msgSend((id)v4, "hasItemConformingToTypeIdentifier:", v18);

      if ((v17 & 1) != 0)
        goto LABEL_12;
      ++v1;
      v2 += 2;
      if (v16 == v9)
        goto LABEL_30;
    }
    __break(1u);
LABEL_37:
    if (v4 < 0)
      v27 = v4;
    else
      v27 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  if (v6 >= 0)
    v6 &= 0xFFFFFFFFFFFFFF8uLL;
  v7 = _CocoaArrayWrapper.endIndex.getter(v6);
  if (v7)
    goto LABEL_6;
LABEL_44:
  v26 = v1;
LABEL_45:
  swift_bridgeObjectRelease(v26);
  return 1;
}

_QWORD *sub_10000DBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  NSString v74;
  id v75;
  char *v76;
  Class isa;
  unsigned __int8 v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  __n128 v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  id v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD v122[5];

  v111 = a2;
  v3 = type metadata accessor for SFAirDropSend.ItemPromise(0);
  v109 = *(_QWORD *)(v3 - 8);
  v110 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDropSend.ItemMetadata(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v108 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v118 = (char *)&v95 - v13;
  v14 = type metadata accessor for UTType(0);
  v113 = *(_QWORD *)(v14 - 8);
  v114 = v14;
  __chkstk_darwin(v14, v15);
  v112 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013BBC0);
  __chkstk_darwin(v17, v18);
  v103 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for UUID(0);
  v106 = *(_QWORD *)(v107 - 8);
  v20 = *(_QWORD *)(v106 + 64);
  __chkstk_darwin(v107, v21);
  v105 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v22, v23);
  v117 = (uint64_t)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SFAirDropUtilities(0);
  v26 = static SFAirDropUtilities.suggestedAirDropThumbnailSize()();
  v28 = v27;
  v104 = v25;
  v119 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
  if (!((unint64_t)a1 >> 62))
  {
    v29 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v29)
      goto LABEL_3;
LABEL_37:
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }
  if (a1 < 0)
    v92 = a1;
  else
    v92 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v29 = _CocoaArrayWrapper.endIndex.getter(v92);
  if (!v29)
    goto LABEL_37;
LABEL_3:
  result = (_QWORD *)objc_opt_self(UTType);
  v102 = result;
  if (v29 < 1)
  {
    __break(1u);
  }
  else
  {
    v31 = 0;
    v98 = a1 & 0xC000000000000001;
    v97 = v20 + 7;
    v121 = &_swiftEmptyArrayStorage;
    v96 = a1;
    v101 = v6;
    v100 = v7;
    v99 = v8;
    v95 = v29;
    do
    {
      v120 = v31;
      if (v98)
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, a1);
      else
        v32 = *(id *)(a1 + 8 * v31 + 32);
      v33 = v32;
      v115 = v32;
      v34 = type metadata accessor for TaskPriority(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = v117;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v117, 1, 1, v34);
      v37 = v106;
      v38 = v105;
      v39 = v107;
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v105, v111, v107);
      v40 = *(unsigned __int8 *)(v37 + 80);
      v41 = (v40 + 64) & ~v40;
      v42 = (v97 + v41) & 0xFFFFFFFFFFFFFFF8;
      v43 = (_QWORD *)swift_allocObject(&unk_100124850, v42 + 8, v40 | 7);
      v43[2] = 0;
      v116 = v43 + 2;
      v43[3] = 0;
      v43[4] = v33;
      v44 = v119;
      v43[5] = v119;
      *((double *)v43 + 6) = v26;
      v43[7] = v28;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))((char *)v43 + v41, v38, v39);
      *(_QWORD *)((char *)v43 + v42) = v120;
      LODWORD(v41) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v36, 1, v34);
      v45 = v115;
      v46 = swift_bridgeObjectRetain(v44);
      if ((_DWORD)v41 == 1)
      {
        sub_10000CC5C(v117, &qword_10013BCC0);
        v47 = 0;
      }
      else
      {
        v48 = v117;
        v49 = TaskPriority.rawValue.getter(v46);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v48, v34);
        v47 = v49;
      }
      v50 = *v116;
      if (*v116)
      {
        v51 = v43[3];
        ObjectType = swift_getObjectType(*v116);
        swift_unknownObjectRetain(v50);
        v53 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v51);
        v55 = v54;
        swift_unknownObjectRelease(v50);
      }
      else
      {
        v53 = 0;
        v55 = 0;
      }
      v56 = (uint64_t)v103;
      v57 = type metadata accessor for SFAirDropSend.Item(0);
      if (v55 | v53)
      {
        v122[0] = 0;
        v122[1] = 0;
        v58 = v122;
        v122[2] = v53;
        v122[3] = v55;
      }
      else
      {
        v58 = 0;
      }
      v59 = v114;
      v60 = swift_task_create(v47 | 0x1C00, v58, v57, &unk_10013BCD0, v43);
      v61 = objc_msgSend(v45, "_sanitizedSuggestedName");
      if (v61)
      {
        v62 = v61;
        v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        v65 = v64;

      }
      else
      {
        v63 = 0;
        v65 = 0xE000000000000000;
      }
      v66 = v113;
      v116 = v45;
      v67 = static SFAirDropUtilities.guessedDataType(for:dataTypesToTry:)(v45, v119);
      v69 = v68;
      swift_bridgeObjectRetain(v68);
      UTType.init(_:)(v67, v69);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v56, 1, v59) == 1)
      {
        sub_10000CC5C(v56, &qword_10013BBC0);
        v70 = 0;
      }
      else
      {
        v71 = v112;
        static UTType.directory.getter();
        v72 = v56;
        v70 = UTType.conforms(to:)(v71);
        v73 = *(void (**)(char *, uint64_t))(v66 + 8);
        v73(v71, v59);
        v73((char *)v72, v59);
      }
      swift_bridgeObjectRetain(v69);
      v74 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v69);
      v75 = objc_msgSend(v102, "_typeWithIdentifier:allowUndeclared:", v74, 1);

      if (v75)
      {
        v76 = v112;
        static UTType.plainText.getter();
        isa = UTType._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v113 + 8))(v76, v114);
        v78 = objc_msgSend(v75, "conformsToType:", isa);

      }
      else
      {
        v78 = 0;
      }
      LOBYTE(v94) = v78;
      LOBYTE(v93) = v70 & 1;
      v79 = v118;
      SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)(v63, v65, v67, v69, 0, 0, 0, 0, 0, v93, 0, 0, 0, 0xF000000000000000, v94);
      v80 = v99;
      v81 = v108;
      v82 = v100;
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v108, v79, v100);
      v83 = swift_retain(v60);
      v84 = v101;
      SFAirDropSend.ItemPromise.init(task:metadata:)(v83, v81);
      if ((swift_isUniquelyReferenced_nonNull_native(v121) & 1) != 0)
      {
        a1 = v96;
        v85 = v95;
        v87 = v120;
        v86 = (unint64_t)v121;
      }
      else
      {
        v86 = sub_100087658(0, v121[2] + 1, 1, (unint64_t)v121);
        a1 = v96;
        v85 = v95;
        v87 = v120;
      }
      v89 = *(_QWORD *)(v86 + 16);
      v88 = *(_QWORD *)(v86 + 24);
      if (v89 >= v88 >> 1)
        v86 = sub_100087658(v88 > 1, v89 + 1, 1, v86);
      v31 = v87 + 1;
      *(_QWORD *)(v86 + 16) = v89 + 1;
      v90 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
      v121 = (_QWORD *)v86;
      (*(void (**)(unint64_t, char *, uint64_t))(v109 + 32))(v86 + v90 + *(_QWORD *)(v109 + 72) * v89, v84, v110);

      v91 = swift_release(v60);
      (*(void (**)(char *, uint64_t, __n128))(v80 + 8))(v118, v82, v91);
    }
    while (v85 != v31);
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease(a1);
    return v121;
  }
  return result;
}

uint64_t sub_10000E3C8(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  *(_QWORD *)(v9 + 176) = a8;
  *(_QWORD *)(v9 + 184) = a9;
  *(double *)(v9 + 160) = a2;
  *(double *)(v9 + 168) = a3;
  *(_QWORD *)(v9 + 144) = a6;
  *(_QWORD *)(v9 + 152) = a7;
  *(_QWORD *)(v9 + 136) = a1;
  v10 = type metadata accessor for SFAirDropUtilities.FileLoadResult(0);
  *(_QWORD *)(v9 + 192) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 200) = v11;
  *(_QWORD *)(v9 + 208) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SFSecurityScopedURL(0);
  *(_QWORD *)(v9 + 216) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 224) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 232) = swift_task_alloc(v14);
  *(_QWORD *)(v9 + 240) = swift_task_alloc(v14);
  *(_QWORD *)(v9 + 248) = swift_task_alloc(v14);
  v15 = sub_100008F88(&qword_10013CB20);
  *(_QWORD *)(v9 + 256) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SFAirDropSend.ItemMetadata(0);
  *(_QWORD *)(v9 + 264) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 272) = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 280) = swift_task_alloc(v18);
  *(_QWORD *)(v9 + 288) = swift_task_alloc(v18);
  *(_QWORD *)(v9 + 296) = swift_task_alloc(v18);
  v19 = type metadata accessor for URL(0);
  *(_QWORD *)(v9 + 304) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v9 + 312) = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 320) = swift_task_alloc(v21);
  *(_QWORD *)(v9 + 328) = swift_task_alloc(v21);
  *(_QWORD *)(v9 + 336) = swift_task_alloc(v21);
  *(_QWORD *)(v9 + 344) = swift_task_alloc(v21);
  *(_QWORD *)(v9 + 352) = swift_task_alloc(v21);
  return swift_task_switch(sub_10000E53C, 0, 0);
}

uint64_t sub_10000E53C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = (void *)objc_opt_self(SFCollaborationUtilities);
  if (objc_msgSend(v2, "hasiWorkSendCopyRepresentationForItemProvider:", v1))
  {
    v3 = v0 + 16;
    v4 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10000E6EC;
    v5 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v6 = (_QWORD *)(v0 + 80);
    v6[1] = 0x40000000;
    v6[2] = sub_10000F444;
    v6[3] = &unk_100124868;
    v6[4] = v5;
    objc_msgSend(v2, "loadiWorkCopyRepresentationURLForItemProvider:completionHandler:", v4, v6);
    return swift_continuation_await(v3);
  }
  else
  {
    v8 = objc_msgSend(*(id *)(v0 + 144), "_sanitizedSuggestedName");
    if (v8)
    {
      v9 = v8;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)(v0 + 368) = v11;
    *(_QWORD *)(v0 + 376) = type metadata accessor for SFAirDropUtilities(0);
    UUID.uuidString.getter();
    *(_QWORD *)(v0 + 384) = v12;
    v13 = (_QWORD *)swift_task_alloc(async function pointer to static SFAirDropUtilities.loadFile(from:dataTypesToTry:customDataType:acceptOtherFileRepresentations:ignoreStrings:generatePreviewImage:renameURLs:suggestedThumbnailSize:filename:sessionID:fileIndex:)[1]);
    *(_QWORD *)(v0 + 392) = v13;
    *v13 = v0;
    v13[1] = sub_10000EC20;
    return static SFAirDropUtilities.loadFile(from:dataTypesToTry:customDataType:acceptOtherFileRepresentations:ignoreStrings:generatePreviewImage:renameURLs:suggestedThumbnailSize:filename:sessionID:fileIndex:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), 0, 0, 0, 0, 1, *(double *)(v0 + 160), *(double *)(v0 + 168));
  }
}

uint64_t sub_10000E6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 360) = v1;
  if (v1)
    v2 = sub_10000EF28;
  else
    v2 = sub_10000E74C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000E74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 344), v1);
  URL.baseURL.getter(v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v5 = sub_10000CC5C(*(_QWORD *)(v0 + 256), &qword_10013CB20);
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 312);
    v10 = *(_QWORD *)(v0 + 256);
    v6 = URL.lastPathComponent.getter();
    v7 = v11;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
  }
  v12 = *(_QWORD *)(v0 + 352);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 312);
  v35 = URL.hasDirectoryPath.getter(v5) & 1;
  SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)(v6, v7, 0, 0, 0, 0, 0, 0, 0, v35, 0, 0, 0, 0xF000000000000000, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
  SFSecurityScopedURL.init(_:readWrite:)(v13, 0);
  v16 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 288);
  v39 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 216);
  v23 = *(_QWORD *)(v0 + 224);
  v37 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t))(v23 + 16))(v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
  SFAirDropSend.Item.init(url:metadata:)(v22, v19);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v37, v24);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v39, v16);
  v25 = *(_QWORD *)(v0 + 344);
  v27 = *(_QWORD *)(v0 + 328);
  v26 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD *)(v0 + 320);
  v30 = *(_QWORD *)(v0 + 288);
  v29 = *(_QWORD *)(v0 + 296);
  v31 = *(_QWORD *)(v0 + 280);
  v33 = *(_QWORD *)(v0 + 248);
  v32 = *(_QWORD *)(v0 + 256);
  v36 = *(_QWORD *)(v0 + 240);
  v38 = *(_QWORD *)(v0 + 232);
  v40 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000EC20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10000F1B0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 368);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 384));
    swift_bridgeObjectRelease(v5);
    v4 = sub_10000EC98;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10000EC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 328);
  v36 = *(_QWORD *)(v0 + 312);
  v38 = *(_QWORD *)(v0 + 304);
  v43 = *(_QWORD *)(v0 + 320);
  v44 = *(_QWORD *)(v0 + 288);
  v45 = *(_QWORD *)(v0 + 272);
  v46 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  v47 = *(_QWORD *)(v0 + 264);
  v49 = *(_QWORD *)(v0 + 200);
  v51 = *(_QWORD *)(v0 + 192);
  v7 = (void *)SFAirDropUtilities.FileLoadResult.previewImage.getter();
  v8 = static SFAirDropUtilities.imageData(for:)(v7);
  v41 = v9;
  v42 = v8;

  v10 = ((uint64_t (*)(void))SFAirDropUtilities.FileLoadResult.url.getter)();
  SFSecurityScopedURL.url.getter(v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v12 = v11(v3, v5);
  v13 = URL.lastPathComponent.getter(v12);
  v39 = v14;
  v40 = v13;
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8);
  v16 = v15(v1, v38);
  v17 = SFAirDropUtilities.FileLoadResult.dataType.getter(v16);
  v35 = v18;
  v37 = v17;
  v19 = ((uint64_t (*)(void))SFAirDropUtilities.FileLoadResult.url.getter)();
  SFSecurityScopedURL.url.getter(v19);
  v20 = v11(v2, v5);
  LOBYTE(v11) = URL.hasDirectoryPath.getter(v20);
  v15(v43, v38);
  v21 = sub_1000182AC(v42, v41);
  v34 = SFAirDropUtilities.FileLoadResult.wasString.getter(v21) & 1;
  v33 = v11 & 1;
  v22 = SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)(v40, v39, v37, v35, 0, 0, 0, 0, 0, v33, 0, 0, v42, v41, v34);
  SFAirDropUtilities.FileLoadResult.url.getter(v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v46, v44, v47);
  SFAirDropSend.Item.init(url:metadata:)(v3, v46);
  sub_1000180AC(v42, v41);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v47);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v6, v51);
  v23 = *(_QWORD *)(v0 + 344);
  v25 = *(_QWORD *)(v0 + 328);
  v24 = *(_QWORD *)(v0 + 336);
  v26 = *(_QWORD *)(v0 + 320);
  v28 = *(_QWORD *)(v0 + 288);
  v27 = *(_QWORD *)(v0 + 296);
  v29 = *(_QWORD *)(v0 + 280);
  v31 = *(_QWORD *)(v0 + 248);
  v30 = *(_QWORD *)(v0 + 256);
  v48 = *(_QWORD *)(v0 + 240);
  v50 = *(_QWORD *)(v0 + 232);
  v52 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000EF28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 360);
  if (qword_10013ABC0 != -1)
    swift_once(&qword_10013ABC0, sub_10000D124);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013B810);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 184);
    v7 = v4;
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 134218242;
    *(_QWORD *)(v0 + 120) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v1);
    v10 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 128) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    *v9 = v10;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v5, "Failed to load item %ld: %@", (uint8_t *)v8, 0x16u);
    v11 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    v12 = v8;
    v4 = v7;
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v14 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 352);
  v16 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 336);
  v17 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 296);
  v21 = *(_QWORD *)(v0 + 280);
  v22 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 208);

  swift_willThrow();
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 384));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 400);
  if (qword_10013ABC0 != -1)
    swift_once(&qword_10013ABC0, sub_10000D124);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_10013B810);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 184);
    v8 = v5;
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 134218242;
    *(_QWORD *)(v0 + 120) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v2);
    v11 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 128) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    *v10 = v11;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v6, "Failed to load item %ld: %@", (uint8_t *)v9, 0x16u);
    v12 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    v13 = v9;
    v5 = v8;
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v15 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 288);
  v19 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 248);
  v25 = *(_QWORD *)(v0 + 240);
  v26 = *(_QWORD *)(v0 + 232);
  v27 = *(_QWORD *)(v0 + 208);

  swift_willThrow();
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F444(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v17;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v12 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v13 = swift_allocError(v12, &protocol self-conformance witness table for Error, 0, 0);
    *v14 = a3;
    v15 = a3;
    return swift_continuation_throwingResumeWithError(v11, v13);
  }
  else
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
    (*(void (**)(_QWORD, char *, uint64_t))(v7 + 32))(*(_QWORD *)(*(_QWORD *)(v11 + 64) + 40), v10, v6);
    return swift_continuation_throwingResume(v11);
  }
}

uint64_t sub_10000F538(_QWORD *a1)
{
  return sub_10000D878(a1) & 1;
}

uint64_t sub_10000F550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = v5;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a1;
  return swift_task_switch(sub_10000F570, 0, 0);
}

uint64_t sub_10000F570()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_10000904C(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v2, v3);
  v0[7] = v4;
  v5 = v1[3];
  v6 = v1[4];
  sub_10000904C(v1, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(v5, v6);
  v0[8] = v7;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10013BC58 + dword_10013BC58);
  v8 = (_QWORD *)swift_task_alloc(unk_10013BC5C);
  v0[9] = v8;
  *v8 = v0;
  v8[1] = sub_10000F644;
  return v10(v4, v0[3], v0[4], v0[5], v7);
}

uint64_t sub_10000F644()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10000F6C0, 0, 0);
  v5 = *(void **)(v3 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 56));

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10000F6C0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F6F8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL sub_10000F700(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10000F718()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000F75C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000F784(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10000F7D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  uint64_t v22;
  id v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v23 = a2;
  v3 = sub_100008F88(&qword_10013BC10);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  v7 = type metadata accessor for UTType(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static UTType._groupActivity.getter(v10);
  UTType.identifier.getter(v13);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_1001247B0, v18 + v5, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v19 + v18, (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  aBlock[4] = sub_100016FEC;
  v25 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000FEFC;
  aBlock[3] = &unk_1001247C8;
  v20 = _Block_copy(aBlock);
  *(_QWORD *)&v21 = swift_release(v25).n128_u64[0];
  objc_msgSend(v23, "loadItemForTypeIdentifier:options:completionHandler:", v16, 0, v20, v21);
  _Block_release(v20);

}

uint64_t sub_10000F98C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  id v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v22;
  id v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  if (a1)
  {
    v38 = a1;
    swift_unknownObjectRetain_n();
    v3 = sub_100008F88(&qword_10013BC20);
    if ((swift_dynamicCast(&v39, &v38, v3, &type metadata for Data, 6) & 1) != 0)
    {
      v5 = v39;
      v4 = v40;
      sub_100018D44(0, &qword_10013BC28, NSKeyedUnarchiver_ptr);
      v6 = sub_100018D44(0, &qword_10013BC08, TUConversationActivity_ptr);
      v10 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v6, v5, v4, v6);
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v22 = type metadata accessor for Logger(0);
      sub_100009558(v22, (uint64_t)qword_100148040);
      v23 = v10;
      v13 = Logger.logObject.getter(v23);
      v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v25 = 138412290;
        if (v10)
        {
          v39 = (uint64_t)v23;
          v36 = &v40;
          v26 = v23;
        }
        else
        {
          v39 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
        *v37 = v10;

        _os_log_impl((void *)&_mh_execute_header, v13, v24, "Unarchiving activity from item provider data: %@", v25, 0xCu);
        v28 = sub_100008F88(&qword_10013BC00);
        swift_arrayDestroy(v37, 1, v28);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v25, -1, -1);
        sub_100017098(v5, v4);
        goto LABEL_28;
      }

      sub_100017098(v5, v4);
      if (!v10)
        goto LABEL_31;
    }
    else
    {
      v9 = objc_opt_self(TUConversationActivity);
      v10 = (void *)swift_dynamicCastObjCClass(a1, v9);
      if (v10)
        swift_unknownObjectRetain(a1);
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v11 = type metadata accessor for Logger(0);
      sub_100009558(v11, (uint64_t)qword_100148040);
      v12 = v10;
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v15 = 138412290;
        if (v10)
        {
          v39 = (uint64_t)v12;
          v17 = v12;
        }
        else
        {
          v39 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
        *v16 = v10;

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received activity object from item provider: %@", v15, 0xCu);
        v27 = sub_100008F88(&qword_10013BC00);
        swift_arrayDestroy(v16, 1, v27);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);
LABEL_28:

        if (!v10)
          goto LABEL_31;
        goto LABEL_29;
      }

      if (!v10)
        goto LABEL_31;
    }
LABEL_29:
    v29 = objc_msgSend(v10, "sanitizedCopy", v36);
    if (v29)
    {
      v39 = (uint64_t)v29;
      v30 = v29;
      v31 = sub_100008F88(&qword_10013BC10);
      CheckedContinuation.resume(returning:)(&v39, v31);

      return swift_unknownObjectRelease(a1);
    }
LABEL_31:
    v32 = sub_100017054();
    v33 = swift_allocError(&_s31TUConversationActivityLoadErrorON, v32, 0, 0);
    *v34 = 0;
    v39 = v33;
    v35 = sub_100008F88(&qword_10013BC10);
    CheckedContinuation.resume(throwing:)(&v39, v35);

    return swift_unknownObjectRelease(a1);
  }
  if (a2)
  {
    v8 = a2;
  }
  else
  {
    v18 = sub_100017054();
    v8 = swift_allocError(&_s31TUConversationActivityLoadErrorON, v18, 0, 0);
    *v19 = 1;
  }
  v39 = v8;
  swift_errorRetain(a2);
  v20 = sub_100008F88(&qword_10013BC10);
  return CheckedContinuation.resume(throwing:)(&v39, v20);
}

uint64_t sub_10000FEFC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10000FF64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v2 = a1[3];
  v3 = a1[4];
  sub_10000904C(a1, v2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 56))(v17, v2, v3);
  v4 = v18;
  v19 = v18;
  swift_bridgeObjectRetain(v18);
  sub_100016F3C(v17);
  if (*(_QWORD *)(v4 + 16)
    && (Hasher.init(_seed:)(v14, *(_QWORD *)(v4 + 40)),
        String.hash(into:)(v14, 0xD000000000000021, 0x80000001000EFFC0),
        v5 = Hasher._finalize()(),
        v6 = -1 << *(_BYTE *)(v4 + 32),
        v7 = v5 & ~v6,
        ((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0))
  {
    v8 = ~v6;
    while ((*(_BYTE *)(*(_QWORD *)(v4 + 48) + v7) & 1) != 0)
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000031, 0x80000001000EFFF0, 0xD000000000000021, 0x80000001000EFFC0, 0);
      swift_bridgeObjectRelease(0x80000001000EFFF0);
      if ((v9 & 1) != 0)
        goto LABEL_9;
      v7 = (v7 + 1) & v8;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease(0x80000001000EFFC0);
LABEL_9:
    sub_1000170DC(&v19);
    sub_100009008((uint64_t)a1, (uint64_t)v14);
    v11 = v15;
    v12 = v16;
    sub_10000904C(v14, v15);
    v10 = sub_100010128(v11, v12) ^ 1;
  }
  else
  {
LABEL_7:
    sub_1000170DC(&v19);
    sub_100009008((uint64_t)a1, (uint64_t)v14);
    v10 = 0;
  }
  sub_100009070(v14);
  return v10 & 1;
}

uint64_t sub_100010128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1, a2);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100010670(v6, v9, &qword_10013ABC8, (uint64_t)qword_100147D40, (uint64_t)sub_10001052C);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if ((v10 & 1) != 0)
    v11 = 1;
  else
    v11 = sub_100010670(a1, a2, &qword_10013ABD0, (uint64_t)qword_100147D58, (uint64_t)sub_100010550);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v11 & 1;
}

uint64_t sub_100010208(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;

  if ((unint64_t)a1 >> 62)
    goto LABEL_33;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v3 = (char *)&_swiftEmptyArrayStorage;
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, "registeredTypeIdentifiers");
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v10 = *(_QWORD *)(v9 + 16);
      v11 = *((_QWORD *)v3 + 2);
      v12 = v11 + v10;
      if (__OFADD__(v11, v10))
        goto LABEL_29;
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v3);
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v12 <= *((_QWORD *)v3 + 3) >> 1)
      {
        if (*(_QWORD *)(v9 + 16))
          goto LABEL_19;
      }
      else
      {
        if (v11 <= v12)
          v14 = v11 + v10;
        else
          v14 = v11;
        v3 = sub_100087998(isUniquelyReferenced_nonNull_native, v14, 1, v3);
        if (*(_QWORD *)(v9 + 16))
        {
LABEL_19:
          v15 = *((_QWORD *)v3 + 2);
          if ((*((_QWORD *)v3 + 3) >> 1) - v15 < v10)
            goto LABEL_31;
          v16 = (unint64_t)&v3[16 * v15 + 32];
          if (v9 + 32 < v16 + 16 * v10 && v16 < v9 + 32 + 16 * v10)
          {
            v23 = 2;
            result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v23, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v16);
          if (v10)
          {
            v18 = *((_QWORD *)v3 + 2);
            v19 = __OFADD__(v18, v10);
            v20 = v18 + v10;
            if (v19)
              goto LABEL_32;
            *((_QWORD *)v3 + 2) = v20;
          }
          goto LABEL_5;
        }
      }
      if (v10)
        goto LABEL_30;
LABEL_5:
      swift_bridgeObjectRelease(v9);
      ++v4;
      if (v7 == v2)
        goto LABEL_38;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  v3 = (char *)&_swiftEmptyArrayStorage;
LABEL_38:
  swift_bridgeObjectRelease(a1);
  return (uint64_t)v3;
}

uint64_t sub_100010444(_QWORD *a1)
{
  return sub_10000FF64(a1) & 1;
}

uint64_t sub_10001045C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10013BBC8 + dword_10013BBC8);
  v8 = (_QWORD *)swift_task_alloc(unk_10013BBCC);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1000104E4;
  return v10(a1, a3, a4);
}

uint64_t sub_1000104E4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001052C(uint64_t a1)
{
  return sub_100010574(a1, qword_100147D40, 0xD000000000000017, 0x80000001000F02F0);
}

uint64_t sub_100010550(uint64_t a1)
{
  return sub_100010574(a1, qword_100147D58, 0xD00000000000001ELL, 0x80000001000F02D0);
}

uint64_t sub_100010574(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = sub_100008F88(&qword_10013BBC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UTType(0);
  sub_100017104(v11, a2);
  sub_100009558(v11, (uint64_t)a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return UTType.init(exportedAs:conformingTo:)(a3, a4, v10);
}

id sub_100010638(uint64_t a1, uint64_t a2)
{
  return sub_100010670(a1, a2, &qword_10013ABC8, (uint64_t)qword_100147D40, (uint64_t)sub_10001052C);
}

id sub_100010654(uint64_t a1, uint64_t a2)
{
  return sub_100010670(a1, a2, &qword_10013ABD0, (uint64_t)qword_100147D58, (uint64_t)sub_100010550);
}

id sub_100010670(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v21;

  v8 = (*(uint64_t (**)(void))(a2 + 64))();
  v9 = v8;
  if (v8 >> 62)
    goto LABEL_14;
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v8);
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v21 = a5;
    v11 = 4;
    while (1)
    {
      v12 = (v9 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v9)
          : *(id *)(v9 + 8 * v11);
      v13 = v12;
      a5 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      if (*a3 != -1)
        swift_once(a3, v21);
      v14 = type metadata accessor for UTType(0);
      sub_100009558(v14, a4);
      UTType.identifier.getter();
      v16 = v15;
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
      v18 = objc_msgSend(v13, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v17, 0);

      if ((v18 & 1) == 0)
      {
        ++v11;
        if (a5 != v10)
          continue;
      }
      goto LABEL_19;
    }
    __break(1u);
LABEL_14:
    if (v9 < 0)
      v19 = v9;
    else
      v19 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
  }
  v18 = 0;
LABEL_19:
  swift_bridgeObjectRelease_n(v9, 2);
  return v18;
}

uint64_t sub_1000107D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v5 = *(_QWORD *)(a2 - 8);
  v4[27] = v5;
  v4[28] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001085C, 0, 0);
}

uint64_t sub_10001085C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  NSString v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v42 = v0;
  if ((sub_100010670(v0[24], v0[25], &qword_10013ABC8, (uint64_t)qword_100147D40, (uint64_t)sub_10001052C) & 1) != 0)
  {
    if (qword_10013ABC8 != -1)
      swift_once(&qword_10013ABC8, sub_10001052C);
    v1 = qword_100147D40;
  }
  else
  {
    if ((sub_100010670(v0[24], v0[25], &qword_10013ABD0, (uint64_t)qword_100147D58, (uint64_t)sub_100010550) & 1) == 0)goto LABEL_19;
    if (qword_10013ABD0 != -1)
      swift_once(&qword_10013ABD0, sub_100010550);
    v1 = qword_100147D58;
  }
  v2 = v0[25];
  v3 = v0[24];
  v4 = type metadata accessor for UTType(0);
  v5 = sub_100009558(v4, (uint64_t)v1);
  v6 = UTType.identifier.getter(v5);
  v8 = v7;
  v0[29] = v7;
  v0[30] = v6;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v3, v2);
  v10 = v9;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v41 = v9;
    else
      v41 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v41);
    if (v11)
    {
LABEL_11:
      v12 = 0;
      while (1)
      {
        v13 = (v10 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10)
            : *(id *)(v10 + 8 * v12 + 32);
        v14 = v13;
        v0[31] = v13;
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        v16 = String._bridgeToObjectiveC()();
        v17 = objc_msgSend(v14, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v16, 0);

        if ((v17 & 1) != 0)
        {
          swift_bridgeObjectRelease_n(v10, 2);
          swift_bridgeObjectRelease(v8);
          v39 = String._bridgeToObjectiveC()();
          v42[32] = v39;
          v42[7] = v42 + 17;
          v42[2] = v42;
          v42[3] = sub_100010D5C;
          v40 = swift_continuation_init(v42 + 2, 1);
          v42[10] = _NSConcreteStackBlock;
          v42[11] = 0x40000000;
          v42[12] = sub_1000112B8;
          v42[13] = &unk_100124880;
          v42[14] = v40;
          objc_msgSend(v14, "loadItemForTypeIdentifier:options:completionHandler:", v39, 0, v42 + 10);
          return swift_continuation_await(v42 + 2);
        }

        ++v12;
        v0 = v42;
        if (v15 == v11)
          goto LABEL_18;
      }
      __break(1u);
      goto LABEL_26;
    }
  }
  else
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    if (v11)
      goto LABEL_11;
  }
LABEL_18:
  swift_bridgeObjectRelease_n(v10, 2);
  swift_bridgeObjectRelease_n(v8, 2);
LABEL_19:
  if (qword_10013AD60 != -1)
LABEL_26:
    swift_once(&qword_10013AD60, sub_100092254);
  v19 = v0[27];
  v18 = v0[28];
  v20 = v0[26];
  v21 = v0[24];
  v22 = type metadata accessor for Logger(0);
  sub_100009558(v22, (uint64_t)qword_100148040);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v20, v21);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  v26 = os_log_type_enabled(v24, v25);
  v28 = v0[27];
  v27 = v0[28];
  v29 = v0[24];
  if (v26)
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v43 = v31;
    *(_DWORD *)v30 = 136315138;
    v32 = sub_100021148(v27, v29);
    v34 = v33;
    v42[19] = sub_10003A834(v32, v33, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v42 + 20);
    v0 = v42;
    swift_bridgeObjectRelease(v34);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Could not find a nearby SharePlay URL on content: %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v28 + 8))(v0[28], v0[24]);
  }

  v35 = v0[28];
  v36 = v0[23];
  v37 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  swift_task_dealloc(v35);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100010D5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 264) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 232));
    v3 = sub_100011230;
  }
  else
  {
    v3 = sub_100010E08;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100010E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  Class isa;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 136);

  v2 = objc_opt_self(NSURL);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    v4 = (id)v3;
    v5 = *(_QWORD *)(v0 + 232);
    swift_unknownObjectRetain(v1);
    swift_bridgeObjectRelease(v5);
LABEL_3:
    v6 = *(void **)(v0 + 248);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v4);
    swift_unknownObjectRelease(v1);

    v7 = 0;
    goto LABEL_4;
  }
  *(_QWORD *)(v0 + 144) = v1;
  swift_unknownObjectRetain(v1);
  v34 = sub_100008F88(&qword_10013BC20);
  if ((swift_dynamicCast(v0 + 120, v0 + 144, v34, &type metadata for Data, 6) & 1) != 0)
  {
    v12 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 128);
    v15 = (void *)objc_opt_self(NSURL);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 176) = 0;
    v4 = objc_msgSend(v15, "objectWithItemProviderData:typeIdentifier:error:", isa, v17, v0 + 176);

    v18 = *(id *)(v0 + 176);
    if (v4)
    {
      sub_100017098(v14, v13);
      goto LABEL_3;
    }
    v30 = v18;
    v31 = _convertNSErrorToError(_:)(v18);

    swift_willThrow();
    swift_errorRelease(v31);
    sub_100018D44(0, &qword_10013BC28, NSKeyedUnarchiver_ptr);
    v32 = sub_100018D44(0, &qword_10013BCD8, NSURL_ptr);
    v4 = (id)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v32, v14, v13, v32);
    sub_100017098(v14, v13);
    if (v4)
      goto LABEL_3;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
  }
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v19 = type metadata accessor for Logger(0);
  sub_100009558(v19, (uint64_t)qword_100148040);
  v20 = swift_unknownObjectRetain_n(v1, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(void **)(v0 + 248);
  if (v23)
  {
    v33 = *(void **)(v0 + 248);
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v35 = v26;
    *(_DWORD *)v25 = 136315138;
    *(_QWORD *)(v0 + 160) = v1;
    swift_unknownObjectRetain(v1);
    v27 = String.init<A>(reflecting:)(v0 + 160, v34);
    v29 = v28;
    *(_QWORD *)(v0 + 168) = sub_10003A834(v27, v28, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
    swift_bridgeObjectRelease(v29);
    swift_unknownObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to coerce nearby SharePlay item to an NSURL: %s", v25, 0xCu);
    v7 = 1;
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    swift_unknownObjectRelease(v1);
  }
  else
  {
    swift_unknownObjectRelease_n(v1, 3);

    v7 = 1;
  }
LABEL_4:
  v8 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, v7, 1, v10);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011230()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 256);
  v2 = *(void **)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  swift_willThrow();

  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000112B8(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    swift_unknownObjectRetain(a2);
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100011348(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10000904C(a1, v1);
  return sub_100010128(v1, v2) & 1;
}

uint64_t sub_100011384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10013BC30 + dword_10013BC30);
  v10 = (_QWORD *)swift_task_alloc(unk_10013BC34);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100018F40;
  return v12(a1, a3, a4, a5);
}

id sub_10001140C(uint64_t a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v10;
  _BYTE v11[40];

  sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
  v2 = (void *)static NSUserDefaults.airdrop.getter();
  v3 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  if ((v3 & 1) == 0)
    return 0;
  sub_100009008(a1, (uint64_t)v11);
  v4 = sub_100008F88((uint64_t *)&unk_1001403A0);
  v5 = sub_100018D44(0, (unint64_t *)&unk_10013EBF0, &off_100122DA0);
  if (!swift_dynamicCast(&v10, v11, v4, v5, 6))
    return 0;
  v6 = v10;
  v7 = objc_msgSend(v10, "content");
  v8 = objc_msgSend(v7, "hasPossibleCollaborationRepresentation");

  return v8;
}

uint64_t sub_100011500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  v6 = type metadata accessor for UUID(0);
  v5[16] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[17] = v7;
  v5[18] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100011568, 0, 0);
}

uint64_t sub_100011568()
{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
  v1 = (void *)static NSUserDefaults.airdrop.getter();
  v2 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  if ((v2 & 1) != 0)
  {
    v3 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
    *(_QWORD *)(v0 + 152) = v3;
    *(_QWORD *)(v0 + 160) = v4;
    if (v4)
    {
      v5 = v3;
      v6 = v4;
      *(_QWORD *)(v0 + 168) = type metadata accessor for StartCollaborationAction(0);
      v7 = (_QWORD *)swift_task_alloc(dword_10013DDFC);
      *(_QWORD *)(v0 + 176) = v7;
      *v7 = v0;
      v7[1] = sub_100011810;
      return sub_10006226C(v5, v6);
    }
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v10 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 112);
    v13 = type metadata accessor for Logger(0);
    sub_100009558(v13, (uint64_t)qword_100148040);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    v17 = os_log_type_enabled(v15, v16);
    v19 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 144);
    v20 = *(_QWORD *)(v0 + 128);
    if (v17)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v27 = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
      v26 = v25;
      *(_QWORD *)(v0 + 56) = sub_10003A834(v24, v25, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
      swift_bridgeObjectRelease(v26);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Cannot start Collaboration on nearby sharing interaction with ID as it's an unknown contact: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v19 + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011810(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 176);
  *(_QWORD *)(v3 + 184) = a1;
  *(_QWORD *)(v3 + 192) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10001186C, 0, 0);
}

uint64_t sub_10001186C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Class isa;
  uint64_t v33;

  v1 = v0 + 72;
  v2 = *(_QWORD *)(v0 + 192);
  if (v2)
  {
    v3 = v0 + 16;
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v4 = type metadata accessor for Logger(0);
    sub_100009558(v4, (uint64_t)qword_100148040);
    v5 = swift_bridgeObjectRetain_n(v2, 2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = *(_QWORD *)(v0 + 184);
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v33 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)(v0 + 80) = sub_10003A834(v8, v2, &v33);
      v1 = v0 + 72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease_n(v2, 3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "starting Collaboration with iMessage-able handle: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      v11 = v9;
      v3 = v0 + 16;
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);
    }

    sub_100009008(*(_QWORD *)(v0 + 88), v3);
    v22 = sub_100008F88((uint64_t *)&unk_1001403A0);
    v23 = sub_100018D44(0, (unint64_t *)&unk_10013EBF0, &off_100122DA0);
    if ((swift_dynamicCast(v1, v3, v22, v23, 6) & 1) != 0)
    {
      v24 = *(_QWORD *)(v0 + 184);
      v25 = *(_QWORD *)(v0 + 96);
      v26 = *(void **)(v0 + 72);
      v27 = *(void **)(*(_QWORD *)(v0 + 120) + *(int *)(*(_QWORD *)(v0 + 168) + 24));
      v28 = objc_msgSend(v26, "content");
      v29 = sub_100008F88((uint64_t *)&unk_10013B860);
      v30 = swift_allocObject(v29, 48, 7);
      *(_OWORD *)(v30 + 16) = xmmword_1000E9370;
      *(_QWORD *)(v30 + 32) = v24;
      *(_QWORD *)(v30 + 40) = v2;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v30);
      objc_msgSend(v27, "initiateBackgroundCollaborationForContent:shareOptions:recipients:faceTimeConversationUUID:", v28, v25, isa, 0);

    }
    else
    {
      swift_bridgeObjectRelease(v2);
    }
  }
  else
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v12 = *(_QWORD *)(v0 + 160);
    v13 = type metadata accessor for Logger(0);
    sub_100009558(v13, (uint64_t)qword_100148040);
    v14 = swift_bridgeObjectRetain(v12);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(_QWORD *)(v0 + 160);
    if (v17)
    {
      v19 = *(_QWORD *)(v0 + 152);
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v33 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(v18);
      *(_QWORD *)(v0 + 64) = sub_10003A834(v19, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Cannot start Collaboration on nearby sharing interaction with ID as the contact with identifier does not contain a iMessage-able handle: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
    }
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100011CBC(uint64_t a1)
{
  return (unint64_t)sub_10001140C(a1) & 1;
}

uint64_t sub_100011CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_10013BCEC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100018F40;
  return sub_100011500(a1, a2, a3, a4);
}

uint64_t sub_100011D48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LocalizedStringResource(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100011D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v6[3];
  _BYTE v7[40];

  sub_100009008(a1, (uint64_t)v7);
  v1 = sub_100008F88((uint64_t *)&unk_1001403A0);
  v2 = swift_dynamicCast(v6, v7, v1, &type metadata for ActiveSharePlaySessionInvite, 6);
  if ((_DWORD)v2)
  {
    v3 = (void *)v6[0];
    v4 = (void *)v6[2];

  }
  return v2;
}

uint64_t sub_100011DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10013BCE0 + dword_10013BCE0);
  v8 = (_QWORD *)swift_task_alloc(unk_10013BCE4);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_100018F40;
  return v10(a1, a3, a4);
}

uint64_t sub_100011E80(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100011F7C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100011E9C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000120D8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_100011EB8(char a1, int64_t a2, char a3)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v3;
  uint64_t result;

  result = sub_100012224(a1, a2, a3, *v3);
  *v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)result;
  return result;
}

uint64_t sub_100011ED4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10001240C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100011EF0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100012574(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100011F0C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000126FC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100011F28(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10001289C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100011F44(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100012A08(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100011F60(char a1, int64_t a2, char a3)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v3;
  uint64_t result;

  result = sub_100012B80(a1, a2, a3, *v3);
  *v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)result;
  return result;
}

uint64_t sub_100011F7C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88(&qword_10013B828);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000120D8(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  size_t v12;
  unsigned __int8 *airDropClient;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88(&qword_10013B880);
    v11 = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *(_QWORD *)v11->connection = v8;
    *(_QWORD *)v11->airdropClient = 2 * v12 - 64;
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  airDropClient = v11->airDropClient;
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (_TtC9AirDropUI33AirDropTransferSessionsController *)a4 || airDropClient >= (unsigned __int8 *)&v14[v8])
      memmove(airDropClient, v14, v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_28;
  }
  if (v14 >= (char *)&airDropClient[v8] || airDropClient >= (unsigned __int8 *)&v14[v8])
  {
    memcpy(airDropClient, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100012224(char a1, int64_t a2, char a3, _TtC9AirDropUI33AirDropTransferSessionsController *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->airdropClient;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->connection;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->connection;
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100008F88(&qword_10013BD08);
  v11 = *(_QWORD *)(sub_100008F88((uint64_t *)&unk_10013BD10) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  *(_QWORD *)v15->connection = v8;
  *(_QWORD *)v15->airdropClient = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    *(_QWORD *)a4->connection = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001240C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88((uint64_t *)&unk_10013B860);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100012574(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88(&qword_10013B870);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100008F88(&qword_10013B878);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000126FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88(&qword_10013B840);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_100008F88(&qword_10013B848);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001289C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88((uint64_t *)&unk_10013B830);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100012A08(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88(&qword_10013F0B0);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100012B80(char a1, int64_t a2, char a3, _TtC9AirDropUI33AirDropTransferSessionsController *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)a4->airdropClient;
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)a4->connection;
  if (v7 <= v8)
    v9 = *(_QWORD *)a4->connection;
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100008F88((uint64_t *)&unk_10013F260);
  v11 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  *(_QWORD *)v15->connection = v8;
  *(_QWORD *)v15->airdropClient = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    *(_QWORD *)a4->connection = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

BOOL sub_100012D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t DynamicType;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  _QWORD v23[3];
  uint64_t v24;
  _QWORD *v25;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = &_swiftEmptyArrayStorage;
  if (v4)
  {
    v25 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v3);
    sub_100011E80(0, v4, 0);
    v6 = v3 + 32;
    v5 = &_swiftEmptyArrayStorage;
    do
    {
      sub_100009008(v6, (uint64_t)v23);
      v7 = v24;
      v8 = sub_10000904C(v23, v24);
      DynamicType = swift_getDynamicType(v8, v7, 0);
      sub_100009070(v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_100011E80(0, v5[2] + 1, 1);
        v5 = v25;
      }
      v11 = v5[2];
      v10 = v5[3];
      if (v11 >= v10 >> 1)
      {
        sub_100011E80(v10 > 1, v11 + 1, 1);
        v5 = v25;
      }
      v5[2] = v11 + 1;
      v5[v11 + 4] = DynamicType;
      v6 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = &_swiftEmptyArrayStorage;
  if (v13)
  {
    v25 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v12);
    sub_100011E80(0, v13, 0);
    v15 = v12 + 32;
    v14 = v25;
    do
    {
      sub_100009008(v15, (uint64_t)v23);
      v16 = v24;
      v17 = sub_10000904C(v23, v24);
      v18 = swift_getDynamicType(v17, v16, 0);
      sub_100009070(v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_100011E80(0, v14[2] + 1, 1);
        v14 = v25;
      }
      v20 = v14[2];
      v19 = v14[3];
      if (v20 >= v19 >> 1)
      {
        sub_100011E80(v19 > 1, v20 + 1, 1);
        v14 = v25;
      }
      v14[2] = v20 + 1;
      v14[v20 + 4] = v18;
      v15 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(v12);
  }
  v21 = sub_10000D388(v5, v14);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v14);
  return v21;
}

uint64_t sub_100012FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012FC8);
}

uint64_t sub_100012FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012FD8);
}

uint64_t type metadata accessor for StartCollaborationAction(uint64_t a1)
{
  return sub_1000138D0(a1, qword_10013B8E0, (uint64_t)&nominal type descriptor for StartCollaborationAction);
}

uint64_t *sub_100012FF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for LocalizedStringResource(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    swift_retain(v10);
    v12 = v11;
  }
  return a1;
}

void sub_10001308C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));

}

uint64_t sub_1000130DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  swift_retain(v9);
  v11 = v10;
  return a1;
}

uint64_t sub_100013148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(a3 + 24);
  v11 = *(void **)(a2 + v10);
  v12 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v13 = v11;

  return a1;
}

uint64_t sub_1000131CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100013230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = *(int *)(a3 + 24);
  v10 = *(void **)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);

  return a1;
}

uint64_t sub_1000132A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000132B4);
}

uint64_t sub_1000132B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000132C4);
}

uint64_t type metadata accessor for AddToActiveSharePlaySessionAction(uint64_t a1)
{
  return sub_1000138D0(a1, qword_10013B978, (uint64_t)&nominal type descriptor for AddToActiveSharePlaySessionAction);
}

uint64_t sub_1000132DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for LocalizedStringResource(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100013360(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocalizedStringResource(0);
    v8 = *(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), v11, v7);
    v12 = *(int *)(type metadata accessor for SendOverAirDropAction(0) + 20);
    v13 = *(_QWORD *)&v11[v12];
    *(_QWORD *)&v10[v12] = v13;
  }
  swift_retain(v13);
  return a1;
}

uint64_t type metadata accessor for SendOverAirDropAction(uint64_t a1)
{
  return sub_1000138D0(a1, qword_10013BB30, (uint64_t)&nominal type descriptor for SendOverAirDropAction);
}

double sub_10001342C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = type metadata accessor for LocalizedStringResource(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v5(v6, v4);
  v7 = *(_QWORD *)(v6 + *(int *)(type metadata accessor for SendOverAirDropAction(0) + 20));
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_100013498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = *(int *)(type metadata accessor for SendOverAirDropAction(0) + 20);
  v12 = *(_QWORD *)(v10 + v11);
  *(_QWORD *)(v9 + v11) = v12;
  swift_retain(v12);
  return a1;
}

uint64_t sub_100013528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = *(int *)(type metadata accessor for SendOverAirDropAction(0) + 20);
  v12 = *(_QWORD *)(v10 + v11);
  v13 = *(_QWORD *)(v9 + v11);
  *(_QWORD *)(v9 + v11) = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_1000135C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = type metadata accessor for SendOverAirDropAction(0);
  *(_QWORD *)(v9 + *(int *)(v11 + 20)) = *(_QWORD *)(v10 + *(int *)(v11 + 20));
  return a1;
}

uint64_t sub_100013650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = *(int *)(type metadata accessor for SendOverAirDropAction(0) + 20);
  v12 = *(_QWORD *)(v9 + v11);
  *(_QWORD *)(v9 + v11) = *(_QWORD *)(v10 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_1000136E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000136F0);
}

uint64_t sub_1000136F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SendOverAirDropAction(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100013764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100013770);
}

uint64_t sub_100013770(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SendOverAirDropAction(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for StartNearbySharePlayAction(uint64_t a1)
{
  return sub_1000138D0(a1, qword_10013BA10, (uint64_t)&nominal type descriptor for StartNearbySharePlayAction);
}

uint64_t sub_100013800(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for LocalizedStringResource(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SendOverAirDropAction(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10001389C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000138A8);
}

uint64_t sub_1000138AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000138B8);
}

uint64_t type metadata accessor for StartSharePlayAction(uint64_t a1)
{
  return sub_1000138D0(a1, qword_10013BAA0, (uint64_t)&nominal type descriptor for StartSharePlayAction);
}

uint64_t sub_1000138D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t *sub_100013908(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocalizedStringResource(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_100013990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1000139D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_100013A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_100013AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100013AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_100013B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100013B6C);
}

uint64_t sub_100013B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100013BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100013BF8);
}

uint64_t sub_100013BFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100013C74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for LocalizedStringResource(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void *sub_100013CE8()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_100013CF4(uint64_t a1)
{
  uint64_t result;

  result = sub_100008694(&qword_10013BB70, type metadata accessor for StartCollaborationAction, (uint64_t)&unk_1000E95A8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100013D30(uint64_t a1)
{
  uint64_t result;

  result = sub_100008694(&qword_10013BB80, type metadata accessor for SendOverAirDropAction, (uint64_t)&unk_1000E94C8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100013D6C(uint64_t a1)
{
  uint64_t result;

  result = sub_100008694(&qword_10013BB90, type metadata accessor for AddToActiveSharePlaySessionAction, (uint64_t)&unk_1000E9570);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100013DA8(uint64_t a1)
{
  uint64_t result;

  result = sub_100008694(&qword_10013BBA0, type metadata accessor for StartNearbySharePlayAction, (uint64_t)&unk_1000E9538);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100013DE4(uint64_t a1)
{
  uint64_t result;

  result = sub_100008694(&qword_10013BBB0, type metadata accessor for StartSharePlayAction, (uint64_t)&unk_1000E9500);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100013E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v6[20] = a5;
  v6[21] = v5;
  v6[18] = a2;
  v6[19] = a3;
  v6[17] = a1;
  v7 = type metadata accessor for SFAirDropSend.Failure(0);
  v6[22] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[23] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[24] = swift_task_alloc(v9);
  v6[25] = swift_task_alloc(v9);
  v10 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v6[26] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[27] = v11;
  v6[28] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SFAirDropSend.Transfer(0);
  v6[29] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[30] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[31] = swift_task_alloc(v14);
  v6[32] = swift_task_alloc(v14);
  v15 = sub_100008F88(&qword_10013BC60);
  v6[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88(&qword_10013BC68);
  v6[34] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v6[35] = v17;
  v6[36] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008F88((uint64_t *)&unk_10013BC70);
  v6[37] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v6[38] = v19;
  v6[39] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88((uint64_t *)&unk_1001405D0);
  v6[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SFAirDropSend.ItemMetadata(0);
  v6[41] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v6[42] = v22;
  v6[43] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SFSecurityScopedURL(0);
  v6[44] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v6[45] = v24;
  v6[46] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100008F88(&qword_10013CB20);
  v6[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for URL(0);
  v6[48] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v6[49] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[50] = swift_task_alloc(v28);
  v6[51] = swift_task_alloc(v28);
  v29 = type metadata accessor for SFAirDropSend.Item(0);
  v6[52] = v29;
  v30 = *(_QWORD *)(v29 - 8);
  v6[53] = v30;
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[54] = swift_task_alloc(v31);
  v6[55] = swift_task_alloc(v31);
  v32 = type metadata accessor for UUID(0);
  v6[56] = v32;
  v33 = *(_QWORD *)(v32 - 8);
  v6[57] = v33;
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[58] = swift_task_alloc(v34);
  v6[59] = swift_task_alloc(v34);
  v6[60] = swift_task_alloc(v34);
  v6[61] = swift_task_alloc(v34);
  v6[62] = swift_task_alloc(v34);
  v6[63] = swift_task_alloc(v34);
  return swift_task_switch(sub_1000140E4, 0, 0);
}

uint64_t sub_1000140E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;

  if (qword_10013ABC0 != -1)
    swift_once(&qword_10013ABC0, sub_10000D124);
  v1 = v0[63];
  v2 = v0[56];
  v3 = v0[57];
  v4 = v0[19];
  v5 = type metadata accessor for Logger(0);
  v0[64] = sub_100009558(v5, (uint64_t)qword_10013B810);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[65] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[63];
  v12 = v0[56];
  v13 = v0[57];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v19 = v18;
    v0[16] = sub_10003A834(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17);
    swift_bridgeObjectRelease(v19);
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "performing AirDrop action for interactionID:%s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v0[63], v0[56]);
  }

  v0[66] = v20;
  v21 = sub_10000DBE8(v0[17], v0[19]);
  v0[67] = v21;
  v22 = (_QWORD *)swift_task_alloc(async function pointer to static SFAirDropSend.loadItemPromises(_:customPayload:)[1]);
  v0[68] = v22;
  *v22 = v0;
  v22[1] = sub_100014324;
  return static SFAirDropSend.loadItemPromises(_:customPayload:)(v21, 0, 0xF000000000000000);
}

uint64_t sub_100014324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 544);
  v3[69] = a1;
  v3[70] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100015AB0;
  }
  else
  {
    swift_bridgeObjectRelease(v3[67]);
    v5 = sub_10001439C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001439C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  _BOOL4 v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t typeb;
  os_log_type_t typec[8];
  unint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  os_log_type_t v148;
  os_log_type_t v149[8];
  uint64_t v150;

  v125 = v0 + 112;
  v127 = (_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 424);
    v131 = *(_QWORD *)(v0 + 360);
    v133 = *(_QWORD *)(v0 + 392);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v135 = v3;
    v138 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)type = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    v5 = &_swiftEmptyArrayStorage;
    v123 = v4;
    v129 = v2;
    do
    {
      v145 = (unint64_t)v5;
      v6 = *(_QWORD *)(v0 + 440);
      v7 = *(_QWORD *)(v0 + 416);
      v9 = *(_QWORD *)(v0 + 376);
      v8 = *(_QWORD *)(v0 + 384);
      v10 = *(_QWORD *)(v0 + 368);
      v11 = *(_QWORD *)(v0 + 352);
      v12 = v138(v6, v4, v7);
      v13 = SFAirDropSend.Item.url.getter(v12);
      SFSecurityScopedURL.url.getter(v13);
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v10, v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v133 + 56))(v9, 0, 1, v8);
      v14 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
      v14(v6, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v9, 1, v8) == 1)
      {
        sub_10000CC5C(*(_QWORD *)(v0 + 376), &qword_10013CB20);
        v5 = (_QWORD *)v145;
      }
      else
      {
        v15 = *(_QWORD *)(v0 + 400);
        v16 = *(_QWORD *)(v0 + 408);
        v17 = *(_QWORD *)(v0 + 384);
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 32);
        v18(v16, *(_QWORD *)(v0 + 376), v17);
        v18(v15, v16, v17);
        v5 = (_QWORD *)v145;
        if ((swift_isUniquelyReferenced_nonNull_native(v145) & 1) == 0)
          v5 = (_QWORD *)sub_100087778(0, *(_QWORD *)(v145 + 16) + 1, 1, v145);
        v20 = v5[2];
        v19 = v5[3];
        if (v20 >= v19 >> 1)
          v5 = (_QWORD *)sub_100087778(v19 > 1, v20 + 1, 1, (unint64_t)v5);
        v21 = *(_QWORD *)(v0 + 400);
        v22 = *(_QWORD *)(v0 + 384);
        v5[2] = v20 + 1;
        v18((uint64_t)v5+ ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80))+ *(_QWORD *)(v133 + 72) * v20, v21, v22);
      }
      v4 += *(_QWORD *)type;
      --v2;
    }
    while (v2);
    v23 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
    *(_QWORD *)(v0 + 96) = &_swiftEmptyArrayStorage;
    v1 = *(_QWORD *)(v0 + 552);
    if (v23)
    {
      v24 = *(void **)(v0 + 160);
LABEL_14:
      v25 = v24;
      swift_bridgeObjectRelease(v1);
      v26 = sub_100008F88(&qword_10013BCB8);
      v27 = (char *)swift_allocObject(v26, 48, 7);
      *((_OWORD *)v27 + 1) = xmmword_1000E9370;
      type metadata accessor for SFAirDropUtilities(0);
      v28 = v25;
      v29 = static SFAirDropUtilities.imageData(for:)(v24);
      v31 = v30;

      *((_QWORD *)v27 + 4) = v29;
      *((_QWORD *)v27 + 5) = v31;

      goto LABEL_24;
    }
    v146 = v14;
    v136 = *(_QWORD *)(v0 + 336);
    swift_bridgeObjectRetain(v1);
    v27 = (char *)&_swiftEmptyArrayStorage;
    v32 = v123;
    do
    {
      v33 = *(_QWORD *)(v0 + 432);
      v34 = *(_QWORD *)(v0 + 416);
      v35 = *(_QWORD *)(v0 + 344);
      v36 = *(_QWORD *)(v0 + 328);
      v37 = v32;
      v38 = ((uint64_t (*)(uint64_t))v138)(v33);
      v39 = SFAirDropSend.Item.metadata.getter(v38);
      v40 = SFAirDropSend.ItemMetadata.previewImageData.getter(v39);
      v42 = v41;
      (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v35, v36);
      v146(v33, v34);
      if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
        v27 = sub_10008766C(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
      v44 = *((_QWORD *)v27 + 2);
      v43 = *((_QWORD *)v27 + 3);
      if (v44 >= v43 >> 1)
        v27 = sub_10008766C((char *)(v43 > 1), v44 + 1, 1, v27);
      *((_QWORD *)v27 + 2) = v44 + 1;
      v45 = &v27[16 * v44];
      *((_QWORD *)v45 + 4) = v40;
      *((_QWORD *)v45 + 5) = v42;
      v32 = v37 + *(_QWORD *)type;
      --v129;
    }
    while (v129);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 552), 2);
  }
  else
  {
    v5 = &_swiftEmptyArrayStorage;
    v24 = *(void **)(v0 + 160);
    *(_QWORD *)(v0 + 96) = &_swiftEmptyArrayStorage;
    if (v24)
      goto LABEL_14;
    swift_bridgeObjectRelease(v1);
    v27 = (char *)&_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(*v127);
LABEL_24:
  *(_QWORD *)(v0 + 568) = v5;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  v47 = *(_QWORD *)(v0 + 496);
  v48 = *(_QWORD *)(v0 + 448);
  v49 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 96) = v27;
  v46(v47, v49, v48);
  v50 = swift_bridgeObjectRetain_n(v5, 2);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter();
  v53 = os_log_type_enabled(v51, v52);
  v54 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v55 = *(_QWORD *)(v0 + 496);
  v56 = *(_QWORD *)(v0 + 448);
  if (v53)
  {
    v139 = *(_QWORD *)(v0 + 384);
    v57 = swift_slowAlloc(22, -1);
    v147 = swift_slowAlloc(64, -1);
    v150 = v147;
    *(_DWORD *)v57 = 136315394;
    v58 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v59 = dispatch thunk of CustomStringConvertible.description.getter(v56, v58);
    typea = v52;
    v61 = v60;
    *(_QWORD *)(v0 + 112) = sub_10003A834(v59, v60, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, v0 + 120);
    swift_bridgeObjectRelease(v61);
    v54(v55, v56);
    *(_WORD *)(v57 + 12) = 2080;
    v62 = swift_bridgeObjectRetain(v5);
    v63 = Array.description.getter(v62, v139);
    v65 = v64;
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 120) = sub_10003A834(v63, v65, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v51, typea, "%s: loaded items = %s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v147, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v147, -1, -1);
    swift_slowDealloc(v57, -1, -1);
  }
  else
  {
    v54(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 448));
    swift_bridgeObjectRelease_n(v5, 2);
  }

  v66 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 520))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 448));
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.default.getter();
  v69 = os_log_type_enabled(v67, v68);
  v70 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v71 = *(_QWORD *)(v0 + 488);
  v72 = *(_QWORD *)(v0 + 448);
  if (v69)
  {
    v148 = v68;
    v73 = swift_slowAlloc(22, -1);
    typeb = swift_slowAlloc(64, -1);
    v150 = typeb;
    *(_DWORD *)v73 = 136315394;
    v74 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v72, v74);
    v76 = v5;
    v78 = v77;
    *(_QWORD *)(v0 + 88) = sub_10003A834(v75, v77, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v127);
    v79 = v78;
    v5 = v76;
    swift_bridgeObjectRelease(v79);
    v70(v71, v72);
    *(_WORD *)(v73 + 12) = 2080;
    swift_beginAccess(v127, v0 + 16, 0, 0);
    v80 = *v127;
    swift_bridgeObjectRetain(*v127);
    v81 = sub_100008F88(&qword_10013BCB0);
    v82 = Array.description.getter(v80, v81);
    v84 = v83;
    swift_bridgeObjectRelease(v80);
    *(_QWORD *)(v0 + 104) = sub_10003A834(v82, v84, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v125);
    swift_bridgeObjectRelease(v84);
    _os_log_impl((void *)&_mh_execute_header, v67, v148, "%s: item preview data = %s", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy(typeb, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(typeb, -1, -1);
    swift_slowDealloc(v73, -1, -1);
  }
  else
  {
    v70(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
  }

  v85 = *(_QWORD *)(v0 + 448);
  v86 = *(_QWORD *)(v0 + 456);
  v87 = *(_QWORD *)(v0 + 320);
  SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v87, 1, v85) == 1)
  {
    v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
    v89 = *(_QWORD *)(v0 + 464);
    v90 = *(_QWORD *)(v0 + 448);
    v91 = *(_QWORD *)(v0 + 320);
    v92 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease(v5);
    sub_10000CC5C(v91, (uint64_t *)&unk_1001405D0);
    v93 = v88(v89, v92, v90);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.error.getter();
    v96 = os_log_type_enabled(v94, v95);
    v97 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    v98 = *(_QWORD *)(v0 + 464);
    v99 = *(_QWORD *)(v0 + 448);
    if (v96)
    {
      v100 = (uint8_t *)swift_slowAlloc(12, -1);
      v101 = swift_slowAlloc(32, -1);
      v150 = v101;
      *(_DWORD *)v100 = 136315138;
      v102 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v103 = dispatch thunk of CustomStringConvertible.description.getter(v99, v102);
      v105 = v104;
      *(_QWORD *)(v0 + 64) = sub_10003A834(v103, v104, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
      swift_bridgeObjectRelease(v105);
      v97(v98, v99);
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "%s: context.endpointIdentifier is nil.", v100, 0xCu);
      swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v100, -1, -1);

      v106 = *(_QWORD *)(v0 + 96);
    }
    else
    {
      v97(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 448));

      v106 = *v127;
    }
    swift_bridgeObjectRelease(v106);
    v110 = *(_QWORD *)(v0 + 496);
    v112 = *(_QWORD *)(v0 + 480);
    v111 = *(_QWORD *)(v0 + 488);
    v114 = *(_QWORD *)(v0 + 464);
    v113 = *(_QWORD *)(v0 + 472);
    v116 = *(_QWORD *)(v0 + 432);
    v115 = *(_QWORD *)(v0 + 440);
    v117 = *(_QWORD *)(v0 + 400);
    v118 = *(_QWORD *)(v0 + 408);
    v121 = *(_QWORD *)(v0 + 376);
    v122 = *(_QWORD *)(v0 + 368);
    v124 = *(_QWORD *)(v0 + 344);
    v126 = *(_QWORD *)(v0 + 320);
    v128 = *(_QWORD *)(v0 + 312);
    v130 = *(_QWORD *)(v0 + 288);
    v132 = *(_QWORD *)(v0 + 264);
    v134 = *(_QWORD *)(v0 + 256);
    v137 = *(_QWORD *)(v0 + 248);
    v140 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)typec = *(_QWORD *)(v0 + 200);
    *(_QWORD *)v149 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v117);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    swift_task_dealloc(v134);
    swift_task_dealloc(v137);
    swift_task_dealloc(v140);
    swift_task_dealloc(*(_QWORD *)typec);
    swift_task_dealloc(*(_QWORD *)v149);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 32))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 448));
    type metadata accessor for SendOverAirDropAction(0);
    swift_beginAccess(v127, v0 + 40, 0, 0);
    v107 = *(_QWORD **)(v0 + 96);
    if (v107[2] && (v108 = v107[5], v108 >> 60 != 15))
    {
      v109 = v107[4];
      sub_10001810C(v109, v107[5]);
    }
    else
    {
      v109 = 0;
      v108 = 0xF000000000000000;
    }
    *(_QWORD *)(v0 + 584) = v108;
    *(_QWORD *)(v0 + 576) = v109;
    v120 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:)[1]);
    *(_QWORD *)(v0 + 592) = v120;
    *v120 = v0;
    v120[1] = sub_100014F30;
    return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:)(*(_QWORD *)(v0 + 312), v5, *(_QWORD *)(v0 + 480), v109, v108, 0, 0, 0);
  }
}

uint64_t sub_100014F30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  *(_QWORD *)(*(_QWORD *)v1 + 600) = v0;
  swift_task_dealloc(v3);
  v4 = v2[73];
  v5 = v2[72];
  v6 = v2[71];
  if (v0)
  {
    sub_1000180AC(v5, v4);
    swift_bridgeObjectRelease(v6);
    v7 = sub_100015C14;
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    sub_1000180AC(v5, v4);
    v7 = sub_100014FD0;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100014FD0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 520))(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 448));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    v4 = *(_QWORD *)(v0 + 472);
    v5 = *(_QWORD *)(v0 + 448);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 80) = sub_10003A834(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_bridgeObjectRelease(v11);
    v15(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: starting AirDrop send", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 528))(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 448));
  }

  SFXPCProgressTask.makeAsyncIterator()(*(_QWORD *)(v0 + 296));
  v12 = sub_1000180C0();
  *(_QWORD *)(v0 + 608) = v12;
  v13 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 616) = v13;
  *v13 = v0;
  v13[1] = sub_1000151C0;
  return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), v12);
}

uint64_t sub_1000151C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 616));
  if (v0)
  {
    *(_QWORD *)(v2 + 624) = v0;
    v3 = sub_10001584C;
  }
  else
  {
    *(_DWORD *)(v2 + 640) = enum case for SFAirDropSend.Transfer.State.transferring(_:);
    *(_DWORD *)(v2 + 644) = enum case for SFAirDropSend.Transfer.State.transferFailed(_:);
    v3 = sub_100015244;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100015244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    v5 = *(_QWORD *)(v0 + 480);
    v6 = *(_QWORD *)(v0 + 448);
    v8 = *(_QWORD *)(v0 + 304);
    v7 = *(_QWORD *)(v0 + 312);
    v9 = *(_QWORD *)(v0 + 296);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v4(v5, v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
    v10 = *(_QWORD *)(v0 + 496);
    v12 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 464);
    v13 = *(_QWORD *)(v0 + 472);
    v16 = *(_QWORD *)(v0 + 432);
    v15 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 400);
    v18 = *(_QWORD *)(v0 + 408);
    v77 = *(_QWORD *)(v0 + 376);
    v78 = *(_QWORD *)(v0 + 368);
    v79 = *(_QWORD *)(v0 + 344);
    v80 = *(_QWORD *)(v0 + 320);
    v81 = *(_QWORD *)(v0 + 312);
    v82 = *(_QWORD *)(v0 + 288);
    v83 = *(_QWORD *)(v0 + 264);
    v84 = *(_QWORD *)(v0 + 256);
    v85 = *(_QWORD *)(v0 + 248);
    v86 = *(_QWORD *)(v0 + 224);
    v87 = *(_QWORD *)(v0 + 200);
    v88 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    swift_task_dealloc(v17);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v21 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v20, v1, v2);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v21, v20, v2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v27 = *(_QWORD *)(v0 + 240);
  v26 = *(_QWORD *)(v0 + 248);
  v28 = *(_QWORD *)(v0 + 232);
  if (v25)
  {
    v29 = swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v90 = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = sub_100008694(&qword_10013BCA8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Transfer);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v28, v31);
    v34 = v33;
    *(_QWORD *)(v29 + 4) = sub_10003A834(v32, v33, &v90);
    swift_bridgeObjectRelease(v34);
    v35 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v35(v26, v28);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "AirDrop send updated:%s", (uint8_t *)v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v35(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  }

  v36 = *(_DWORD *)(v0 + 640);
  v38 = *(_QWORD *)(v0 + 216);
  v37 = *(_QWORD *)(v0 + 224);
  v39 = *(_QWORD *)(v0 + 208);
  SFAirDropSend.Transfer.state.getter();
  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 88))(v37, v39);
  if (v40 == v36)
  {
    v41 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 208);
    v43 = *(_QWORD *)(v0 + 216);
    v35(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
    (*(void (**)(uint64_t, uint64_t))(v43 + 96))(v41, v42);
    swift_bridgeObjectRelease(*(_QWORD *)(v41 + 8));
    v44 = (int *)sub_100008F88(&qword_10013BCA0);
    v45 = v41 + v44[12];
    swift_bridgeObjectRelease(*(_QWORD *)(v41 + 8 + v44[16]));
    v46 = v41 + v44[20];
    v47 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
    v48 = type metadata accessor for SFAirDrop.Progress(0);
LABEL_14:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v45, v48);
    goto LABEL_15;
  }
  if (v40 == *(_DWORD *)(v0 + 644))
  {
    v49 = *(_QWORD *)(v0 + 224);
    v50 = *(_QWORD *)(v0 + 200);
    v52 = *(_QWORD *)(v0 + 184);
    v51 = *(_QWORD *)(v0 + 192);
    v53 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 96))(v49, *(_QWORD *)(v0 + 208));
    v54 = sub_100008F88(&qword_10013BC90);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v50, v49 + *(int *)(v54 + 48), v53);
    v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
    v56 = v55(v51, v50, v53);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    v59 = os_log_type_enabled(v57, v58);
    v60 = *(_QWORD *)(v0 + 184);
    v61 = *(_QWORD *)(v0 + 192);
    v62 = *(_QWORD *)(v0 + 176);
    if (v59)
    {
      v89 = *(_QWORD *)(v0 + 184);
      v63 = swift_slowAlloc(12, -1);
      v64 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v63 = 138412290;
      v65 = sub_100008694(&qword_10013BC98, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
      v66 = swift_allocError(v62, v65, 0, 0);
      v55(v67, v61, v62);
      v68 = _swift_stdlib_bridgeErrorToNSError(v66);
      *(_QWORD *)(v63 + 4) = v68;
      *v64 = v68;
      v69 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
      v69(v61, v62);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "AirDrop transfer failed with failure: %@", (uint8_t *)v63, 0xCu);
      v70 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(v64, 1, v70);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);

    }
    else
    {

      v69 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
      v69(v61, v62);
    }
    v74 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 224);
    v75 = *(_QWORD *)(v0 + 232);
    v69(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
    v35(v74, v75);
    v48 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
    goto LABEL_14;
  }
  v71 = *(_QWORD *)(v0 + 224);
  v72 = *(_QWORD *)(v0 + 208);
  v73 = *(_QWORD *)(v0 + 216);
  v35(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
LABEL_15:
  v76 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 632) = v76;
  *v76 = v0;
  v76[1] = sub_100015A4C;
  return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 608));
}

uint64_t sub_10001584C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 624);
  v1 = sub_100008F88((uint64_t *)&unk_10013CB30);
  swift_willThrowTypedImpl(v0 + 72, v1, &protocol self-conformance witness table for Error);
  return swift_task_switch(sub_1000158AC, 0, 0);
}

uint64_t sub_1000158AC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 296);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  v7 = *(_QWORD *)(v0 + 496);
  v9 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 488);
  v11 = *(_QWORD *)(v0 + 464);
  v10 = *(_QWORD *)(v0 + 472);
  v13 = *(_QWORD *)(v0 + 432);
  v12 = *(_QWORD *)(v0 + 440);
  v15 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 288);
  v23 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 248);
  v26 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 504));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015A4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 632));
  if (v0)
  {
    *(_QWORD *)(v2 + 624) = v0;
    v3 = sub_10001584C;
  }
  else
  {
    v3 = sub_100015244;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100015AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 536));
  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 472);
  v7 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v11 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 504));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(_QWORD, _QWORD))(v0 + 528))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 448));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 472);
  v7 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v11 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 504));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[28] = a3;
  v4[29] = v3;
  v4[26] = a1;
  v4[27] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[30] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[31] = v6;
  v4[32] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UTType(0);
  v4[33] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[34] = v8;
  v4[35] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015E14, 0, 0);
}

uint64_t sub_100015E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
  *(_QWORD *)(v0 + 288) = v1;
  *(_QWORD *)(v0 + 296) = v2;
  if (v2)
  {
    v3 = v1;
    v4 = v2;
    type metadata accessor for StartSharePlayAction(0);
    v5 = (_QWORD *)swift_task_alloc(dword_10013DDF4);
    *(_QWORD *)(v0 + 304) = v5;
    *v5 = v0;
    v5[1] = sub_100016090;
    return sub_100061898(v3, v4);
  }
  else
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v8 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = type metadata accessor for Logger(0);
    sub_100009558(v11, (uint64_t)qword_100148040);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    v15 = os_log_type_enabled(v13, v14);
    v17 = *(_QWORD *)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 240);
    if (v15)
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v26 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
      v24 = v23;
      *(_QWORD *)(v0 + 168) = sub_10003A834(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
      swift_bridgeObjectRelease(v24);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cannot start SharePlay on nearby sharing interaction with ID as it's an unknown contact: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v17 + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
    }

    v25 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100016090(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 304);
  *(_QWORD *)(v3 + 312) = a1;
  *(_QWORD *)(v3 + 320) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000160EC, 0, 0);
}

uint64_t sub_1000160EC()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  void *v3;
  NSString v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  Class isa;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  _QWORD *v64;
  id v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  os_log_t log;
  NSObject *loga;
  uint64_t v88;
  uint64_t v89[2];

  v1 = v0;
  v2 = v0[40];
  if (!v2)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v13 = v0[37];
    v14 = type metadata accessor for Logger(0);
    sub_100009558(v14, (uint64_t)qword_100148040);
    v15 = swift_bridgeObjectRetain(v13);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = v0[37];
    if (!v18)
    {

      swift_bridgeObjectRelease_n(v19, 2);
      goto LABEL_37;
    }
    v20 = v0[36];
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v89[0] = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain(v19);
    v0[20] = sub_10003A834(v20, v19, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Cannot start SharePlay on nearby sharing interaction with ID as the contact with identifier does not contain a FaceTime-able handle: %s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v21;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v0[37]);
  v3 = (void *)objc_opt_self(TUHandle);
  swift_bridgeObjectRetain(v2);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "normalizedHandleWithDestinationID:", v4);
  v0[41] = v5;

  if (!v5)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v24 = type metadata accessor for Logger(0);
    sub_100009558(v24, (uint64_t)qword_100148040);
    v25 = swift_bridgeObjectRetain(v2);
    v16 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v16, v26))
    {
      swift_bridgeObjectRelease_n(v2, 2);

      goto LABEL_37;
    }
    v27 = v0[39];
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v89[0] = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain(v2);
    v0[19] = sub_10003A834(v27, v2, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20);
    swift_bridgeObjectRelease_n(v2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v26, "Unable to create a normalized handle with destination ID: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v23 = v28;
LABEL_14:
    swift_slowDealloc(v23, -1, -1);

    goto LABEL_37;
  }
  swift_bridgeObjectRelease(v2);
  v6 = objc_msgSend(objc_allocWithZone((Class)TUConversationMember), "initWithHandle:", v5);
  v0[42] = v6;
  v7 = sub_100008F88((uint64_t *)&unk_10013DF40);
  inited = swift_initStackObject(v7, v0 + 14);
  *(_OWORD *)(inited + 16) = xmmword_1000E9380;
  *(_QWORD *)(inited + 32) = v6;
  v89[0] = inited;
  specialized Array._endMutation()();
  if ((unint64_t)v89[0] >> 62)
  {
    if (v89[0] < 0)
      v30 = v89[0];
    else
      v30 = v89[0] & 0xFFFFFFFFFFFFFF8;
    v31 = v6;
    swift_bridgeObjectRetain(v89[0]);
    v32 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v89[0]);
    if (v32)
      goto LABEL_5;
LABEL_21:
    v12 = &_swiftEmptySetSingleton;
    goto LABEL_22;
  }
  v9 = *(_QWORD *)((v89[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  v10 = v6;
  if (!v9)
    goto LABEL_21;
LABEL_5:
  sub_1000B6388(v89[0]);
  v12 = v11;
LABEL_22:
  v33 = (_QWORD *)v0[26];
  swift_bridgeObjectRelease(v89[0]);
  v34 = objc_allocWithZone((Class)TUJoinConversationRequest);
  sub_100018D44(0, &qword_10013BBE0, TUConversationMember_ptr);
  sub_100016EF4(&qword_10013BBE8, &qword_10013BBE0, TUConversationMember_ptr);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  v36 = objc_msgSend(v34, "initWithRemoteMembers:", isa);
  v1[43] = v36;

  v37 = objc_msgSend((id)objc_opt_self(TUConversationInvitationPreference), "invitationPreferencesForAllHandlesWithStyles:", 1);
  v38 = sub_100018D44(0, &qword_10013BBF0, TUConversationInvitationPreference_ptr);
  v39 = sub_100016EF4(&qword_10013BBF8, &qword_10013BBF0, TUConversationInvitationPreference_ptr);
  v40 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v37, v38, v39);

  v41 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40);
  objc_msgSend(v36, "setInvitationPreferences:", v41);

  v85 = v36;
  objc_msgSend(v36, "setAvMode:", 0);
  v42 = v33[3];
  v43 = v33[4];
  sub_10000904C(v33, v42);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 64))(v42, v43);
  v45 = v44;
  if (v44 >> 62)
    goto LABEL_40;
  v46 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v44);
  for (; v46; v46 = _CocoaArrayWrapper.endIndex.getter(v84))
  {
    v47 = 0;
    log = (os_log_t)v1[34];
    while (1)
    {
      v48 = (v45 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45)
          : *(id *)(v45 + 8 * v47 + 32);
      v49 = v48;
      v1[44] = v48;
      v50 = v47 + 1;
      if (__OFADD__(v47, 1))
        break;
      v51 = v1[35];
      v52 = v1;
      v53 = v1[33];
      v54 = static UTType._groupActivity.getter(v48);
      UTType.identifier.getter(v54);
      v56 = v55;
      ((void (*)(uint64_t, uint64_t))log[1].isa)(v51, v53);
      v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v56);
      LOBYTE(v53) = objc_msgSend(v49, "hasItemConformingToTypeIdentifier:", v57);

      if ((v53 & 1) != 0)
      {
        swift_bridgeObjectRelease_n(v45, 2);
        v81 = swift_task_alloc(32);
        v52[45] = v81;
        *(_QWORD *)(v81 + 16) = v49;
        v82 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
        v52[46] = v82;
        v83 = sub_100018D44(0, &qword_10013BC08, TUConversationActivity_ptr);
        *v82 = v52;
        v82[1] = sub_100016B54;
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v52 + 24, 0, 0, 0xD00000000000001CLL, 0x80000001000F0280, sub_100016F34, v81, v83);
      }

      ++v47;
      v1 = v52;
      if (v50 == v46)
        goto LABEL_31;
    }
    __break(1u);
LABEL_40:
    if (v45 < 0)
      v84 = v45;
    else
      v84 = v45 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v45);
  }
LABEL_31:
  swift_bridgeObjectRelease_n(v45, 2);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v58 = v1[26];
  v59 = type metadata accessor for Logger(0);
  sub_100009558(v59, (uint64_t)qword_100148040);
  sub_100009008(v58, (uint64_t)(v1 + 9));
  v60 = v85;
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = swift_slowAlloc(22, -1);
    loga = v61;
    v64 = (_QWORD *)swift_slowAlloc(8, -1);
    v88 = swift_slowAlloc(32, -1);
    v89[0] = v88;
    *(_DWORD *)v63 = 138412546;
    v1[22] = v60;
    v65 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 22, v1 + 23);
    v66 = v64;
    *v64 = v60;

    *(_WORD *)(v63 + 12) = 2080;
    v67 = v1[12];
    v68 = v1[13];
    sub_10000904C(v1 + 9, v67);
    v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 64))(v67, v68);
    v70 = sub_100010208(v69);
    swift_bridgeObjectRelease(v69);
    v71 = Array.description.getter(v70, &type metadata for String);
    v73 = v72;
    swift_bridgeObjectRelease(v70);
    v1[23] = sub_10003A834(v71, v73, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 23, v1 + 24);
    swift_bridgeObjectRelease(v73);
    sub_100009070(v1 + 9);
    _os_log_impl((void *)&_mh_execute_header, loga, v62, "Starting SharePlay via Messages with request without an activity: %@ item provider registered types: %s", (uint8_t *)v63, 0x16u);
    v74 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v66, 1, v74);
    swift_slowDealloc(v66, -1, -1);
    swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v63, -1, -1);

  }
  else
  {

    sub_100009070(v1 + 9);
  }
  v76 = (void *)v1[42];
  v75 = (void *)v1[43];
  v77 = (void *)v1[41];
  v78 = objc_msgSend((id)objc_opt_self(TUCallCenter), "sharedInstance");
  objc_msgSend(v78, "launchAppForJoinRequest:", v75);

LABEL_37:
  v79 = v1[32];
  swift_task_dealloc(v1[35]);
  swift_task_dealloc(v79);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_100016B54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  *(_QWORD *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100016E80;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 360));
    v4 = sub_100016BC0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100016BC0()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  NSObject *v14;
  uint8_t *v15;
  _QWORD *v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  NSObject *log;
  void *v27;

  v1 = *(_QWORD **)(v0 + 208);
  v2 = *(void **)(v0 + 344);
  v3 = *(NSObject **)(v0 + 192);
  v4 = v1[3];
  v5 = v1[4];
  sub_10000904C(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 56))(v4, v5);
  v6 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(v6);
  sub_100016F3C((_QWORD *)(v0 + 16));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  -[NSObject setBundleIdentifier:](v3, "setBundleIdentifier:", v7);

  -[NSObject setStartWhenStaged:](v3, "setStartWhenStaged:", 1);
  objc_msgSend(v2, "setActivity:", v3);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v8 = *(void **)(v0 + 344);
  v9 = type metadata accessor for Logger(0);
  sub_100009558(v9, (uint64_t)qword_100148040);
  v10 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(void **)(v0 + 344);
  v14 = *(NSObject **)(v0 + 352);
  if (v12)
  {
    log = v10;
    v27 = *(void **)(v0 + 352);
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v15 = 138412290;
    *(_QWORD *)(v0 + 200) = v13;
    v17 = v13;
    v18 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
    *v16 = v13;

    _os_log_impl((void *)&_mh_execute_header, log, v11, "Starting SharePlay via Messages with request using an advertised activity: %@", v15, 0xCu);
    v19 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v16, 1, v19);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
    v13 = v27;
    v14 = log;
  }
  else
  {

    v18 = v10;
  }

  v21 = *(void **)(v0 + 336);
  v20 = *(void **)(v0 + 344);
  v22 = *(void **)(v0 + 328);
  v23 = objc_msgSend((id)objc_opt_self(TUCallCenter), "sharedInstance");
  objc_msgSend(v23, "launchAppForJoinRequest:", v20);

  v24 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100016E80()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 352);
  v3 = *(void **)(v0 + 336);
  v2 = *(void **)(v0 + 344);
  v4 = *(void **)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));

  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100016EF4(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100018D44(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100016F34(uint64_t a1)
{
  uint64_t v1;

  sub_10000F7D4(a1, *(void **)(v1 + 16));
}

_QWORD *sub_100016F3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = (void *)a1[4];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);

  return a1;
}

uint64_t sub_100016F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100008F88(&qword_10013BC10);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100016FEC(uint64_t a1, uint64_t a2)
{
  sub_100008F88(&qword_10013BC10);
  return sub_10000F98C(a1, a2);
}

uint64_t sub_10001703C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001704C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100017054()
{
  unint64_t result;

  result = qword_10013BC18;
  if (!qword_10013BC18)
  {
    result = swift_getWitnessTable(&unk_1000E9708, &_s31TUConversationActivityLoadErrorON);
    atomic_store(result, (unint64_t *)&qword_10013BC18);
  }
  return result;
}

uint64_t sub_100017098(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_1000170DC(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t *sub_100017104(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100017144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5[30] = a4;
  v5[31] = v4;
  v5[28] = a2;
  v5[29] = a3;
  v5[27] = a1;
  v6 = type metadata accessor for UTType(0);
  v5[32] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[33] = v7;
  v5[34] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008F88(&qword_10013CB20);
  v5[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v5[36] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[37] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[38] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[39] = swift_task_alloc(v12);
  v5[40] = swift_task_alloc(v12);
  v5[41] = swift_task_alloc(v12);
  v5[42] = swift_task_alloc(v12);
  v5[43] = swift_task_alloc(v12);
  return swift_task_switch(sub_100017230, 0, 0);
}

uint64_t sub_100017230()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[27];
  v3 = v1[3];
  v2 = v1[4];
  sub_10000904C(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(dword_10013BC44);
  v0[44] = v4;
  *v4 = v0;
  v4[1] = sub_1000172A4;
  return sub_1000107D8(v0[35], v3, v2);
}

uint64_t sub_1000172A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100017F48;
  else
    v3 = sub_100017308;
  return swift_task_switch(v3, 0, 0);
}

id sub_100017308()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD **v15;
  _QWORD *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSString v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t inited;
  uint64_t v81;
  uint64_t v82;
  id v83;
  _QWORD *v84;
  NSURL *v85;
  void *v86;
  void *v87;
  void *v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t *v112;
  uint64_t (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v119;

  v2 = v0[36];
  v1 = v0[37];
  v3 = v0[35];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000CC5C(v3, &qword_10013CB20);
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v4 = v0[27];
    v5 = type metadata accessor for Logger(0);
    sub_100009558(v5, (uint64_t)qword_100148040);
    v6 = sub_100009008(v4, (uint64_t)(v0 + 8));
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v119 = v10;
      *(_DWORD *)v9 = 136315138;
      sub_100009008((uint64_t)(v0 + 8), (uint64_t)(v0 + 13));
      v11 = sub_100008F88((uint64_t *)&unk_1001403A0);
      v12 = String.init<A>(reflecting:)(v0 + 13, v11);
      v14 = v13;
      v0[25] = sub_10003A834(v12, v13, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26);
      swift_bridgeObjectRelease(v14);
      sub_100009070(v0 + 8);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not find a URL to start nearby SharePlay from content: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_100009070(v0 + 8);
    }

    goto LABEL_13;
  }
  v15 = (_QWORD **)(v0 + 27);
  v16 = (_QWORD *)v0[27];
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
  v17(v0[43], v3, v2);
  v18 = v16[3];
  v19 = v16[4];
  sub_10000904C(v16, v18);
  if ((sub_100010670(v18, v19, &qword_10013ABC8, (uint64_t)qword_100147D40, (uint64_t)sub_10001052C) & 1) != 0)
  {
    v116 = v17;
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v20 = v0[42];
    v21 = v0[43];
    v23 = v0[36];
    v22 = v0[37];
    v24 = type metadata accessor for Logger(0);
    sub_100009558(v24, (uint64_t)qword_100148040);
    v113 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    v25 = v113(v20, v21, v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = v0[42];
    v30 = v0[36];
    if (v28)
    {
      v108 = v0[37];
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v111 = swift_slowAlloc(32, -1);
      v119 = v111;
      *(_DWORD *)v31 = 136315138;
      v32 = sub_100008694(&qword_10013BC50, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v30, v32);
      v35 = v34;
      v0[26] = sub_10003A834(v33, v34, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27);
      swift_bridgeObjectRelease(v35);
      v36 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      v36(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Starting nearby SharePlay for host using URL: %s", v31, 0xCu);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      v36 = *(void (**)(uint64_t, uint64_t))(v0[37] + 8);
      v36(v0[42], v0[36]);
    }

    v0[46] = v36;
    v64 = v0[43];
    v65 = v0[41];
    v66 = v0[36];
    v105 = v0[37];
    v107 = v0[38];
    v67 = v0[33];
    v68 = v0[34];
    v69 = v0[32];
    v70 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
    v0[47] = v70;
    v71 = static UTType.url.getter();
    UTType.identifier.getter(v71);
    v73 = v72;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
    v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v73);
    v113(v65, v64, v66);
    v75 = *(unsigned __int8 *)(v105 + 80);
    v76 = (v75 + 16) & ~v75;
    v77 = swift_allocObject(&unk_100124800, v76 + v107, v75 | 7);
    v116(v77 + v76, v65, v66);
    v0[6] = sub_100018030;
    v0[7] = v77;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1000BAA98;
    v0[5] = &unk_100124818;
    v78 = _Block_copy(v0 + 2);
    objc_msgSend(v70, "registerItemForTypeIdentifier:loadHandler:", v74, v78, swift_release(v0[7]).n128_f64[0]);
    _Block_release(v78);

    type metadata accessor for StartNearbySharePlayAction(0);
    v79 = sub_100008F88((uint64_t *)&unk_10013DF40);
    inited = swift_initStackObject(v79, v0 + 18);
    v0[48] = inited;
    *(_OWORD *)(inited + 16) = xmmword_1000E9380;
    *(_QWORD *)(inited + 32) = v70;
    v119 = inited;
    specialized Array._endMutation()();
    v81 = v119;
    v0[49] = v119;
    v82 = unk_10013BC5C;
    v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10013BC58
                                                                               + dword_10013BC58);
    v83 = v70;
    v84 = (_QWORD *)swift_task_alloc(v82);
    v0[50] = v84;
    *v84 = v0;
    v84[1] = sub_100017D9C;
    return (id)v118(v81, v0[28], v0[29], v0[30], 0);
  }
  else
  {
    v44 = (*v15)[3];
    v45 = (*v15)[4];
    sub_10000904C(*v15, v44);
    if ((sub_100010670(v44, v45, &qword_10013ABD0, (uint64_t)qword_100147D58, (uint64_t)sub_100010550) & 1) == 0)
    {
      (*(void (**)(_QWORD, _QWORD))(v0[37] + 8))(v0[43], v0[36]);
LABEL_13:
      v37 = v0[42];
      v39 = v0[40];
      v38 = v0[41];
      v40 = v0[39];
      v42 = v0[34];
      v41 = v0[35];
      swift_task_dealloc(v0[43]);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      return (id)((uint64_t (*)(void))v0[1])();
    }
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v46 = v0[43];
    v47 = v0[40];
    v49 = v0[36];
    v48 = v0[37];
    v50 = type metadata accessor for Logger(0);
    sub_100009558(v50, (uint64_t)qword_100148040);
    v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
    v52 = v51(v47, v46, v49);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter();
    v55 = os_log_type_enabled(v53, v54);
    v56 = v0[40];
    v57 = v0[36];
    v112 = v0 + 24;
    v114 = v50;
    v117 = v51;
    if (v55)
    {
      v106 = v0[37];
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      v119 = v109;
      *(_DWORD *)v58 = 136315138;
      v59 = sub_100008694(&qword_10013BC50, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v57, v59);
      v62 = v61;
      v0[23] = sub_10003A834(v60, v61, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24);
      swift_bridgeObjectRelease(v62);
      v63 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
      v63(v56, v57);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Starting nearby SharePlay for participant using URL: %s", v58, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      v63 = *(void (**)(uint64_t, uint64_t))(v0[37] + 8);
      v63(v56, v57);
    }

    result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
    if (result)
    {
      v86 = result;
      URL._bridgeToObjectiveC()(v85);
      v88 = v87;
      v89 = objc_msgSend(v86, "openURL:withOptions:", v87, 0);

      if ((v89 & 1) != 0)
      {
        v63(v0[43], v0[36]);
      }
      else
      {
        if (qword_10013ABC0 != -1)
          swift_once(&qword_10013ABC0, sub_10000D124);
        v90 = v0[43];
        v91 = v0[39];
        v92 = v0[36];
        sub_100009558(v114, (uint64_t)qword_10013B810);
        v93 = v117(v91, v90, v92);
        v94 = Logger.logObject.getter(v93);
        v95 = static os_log_type_t.error.getter();
        v96 = os_log_type_enabled(v94, v95);
        v97 = v0[43];
        v98 = v0[39];
        v99 = v0[36];
        if (v96)
        {
          v115 = v0[36];
          v100 = (uint8_t *)swift_slowAlloc(12, -1);
          v110 = v63;
          v101 = swift_slowAlloc(32, -1);
          v119 = v101;
          *(_DWORD *)v100 = 136315138;
          v102 = URL.absoluteString.getter();
          v104 = v103;
          *v112 = sub_10003A834(v102, v103, &v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v0 + 25);
          swift_bridgeObjectRelease(v104);
          v110(v98, v115);
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "Failed to open nearby SharePlay URL: %s", v100, 0xCu);
          swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v101, -1, -1);
          swift_slowDealloc(v100, -1, -1);

          v110(v97, v115);
        }
        else
        {

          v63(v98, v99);
          v63(v97, v99);
        }
      }
      goto LABEL_13;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100017D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  if (v0)
    v4 = sub_100017EA4;
  else
    v4 = sub_100017E08;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100017E08()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 288);

  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017EA4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 288);

  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100018030(void (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = type metadata accessor for URL(0);
  if (a1)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
    URL._bridgeToObjectiveC()((NSURL *)((v3 + 16) & ~v3));
    v5 = v4;
    a1();

  }
}

uint64_t sub_1000180AC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100017098(result, a2);
  return result;
}

unint64_t sub_1000180C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BC80;
  if (!qword_10013BC80)
  {
    v1 = sub_10000950C(&qword_10013BC68);
    result = swift_getWitnessTable(&protocol conformance descriptor for SFXPCAsyncSequence<A>.AsyncIterator, v1);
    atomic_store(result, (unint64_t *)&qword_10013BC80);
  }
  return result;
}

uint64_t sub_10001810C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100018150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000181E0(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v8 = *((_QWORD *)v1 + 4);
  v9 = *((_QWORD *)v1 + 5);
  v10 = v1[6];
  v11 = v1[7];
  v12 = (uint64_t)v1 + v5;
  v13 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_10013BCCC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000104E4;
  return sub_10000E3C8(a1, v10, v11, v6, v7, v8, v9, v12, v13);
}

uint64_t sub_1000182AC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001810C(result, a2);
  return result;
}

uint64_t sub_1000182C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[28] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[29] = v6;
  v4[30] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100018324, 0, 0);
}

uint64_t sub_100018324()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t DynamicType;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *log;
  uint64_t v43;
  uint64_t v44;

  sub_100009008(*(_QWORD *)(v0 + 192), v0 + 16);
  v1 = sub_100008F88((uint64_t *)&unk_1001403A0);
  if (swift_dynamicCast(v0 + 136, v0 + 16, v1, &type metadata for ActiveSharePlaySessionInvite, 6))
  {
    v3 = *(void **)(v0 + 136);
    v2 = *(void **)(v0 + 144);
    *(_QWORD *)(v0 + 248) = v3;
    *(_QWORD *)(v0 + 256) = v2;
    v4 = *(void **)(v0 + 152);
    *(_QWORD *)(v0 + 264) = v4;
    v5 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
    *(_QWORD *)(v0 + 272) = v5;
    *(_QWORD *)(v0 + 280) = v6;
    if (v6)
    {
      v7 = v5;
      v8 = v6;
      *(_QWORD *)(v0 + 288) = type metadata accessor for AddToActiveSharePlaySessionAction(0);
      v9 = (_QWORD *)swift_task_alloc(dword_10013DDF4);
      *(_QWORD *)(v0 + 296) = v9;
      *v9 = v0;
      v9[1] = sub_1000187A0;
      return sub_100061898(v7, v8);
    }
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v25 = *(_QWORD *)(v0 + 232);
    v24 = *(_QWORD *)(v0 + 240);
    v26 = *(_QWORD *)(v0 + 224);
    v27 = *(_QWORD *)(v0 + 208);
    v28 = type metadata accessor for Logger(0);
    sub_100009558(v28, (uint64_t)qword_100148040);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v27, v26);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    v32 = os_log_type_enabled(v30, v31);
    v34 = *(_QWORD *)(v0 + 232);
    v33 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 224);
    if (v32)
    {
      v41 = *(_QWORD *)(v0 + 232);
      log = v30;
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v44 = v43;
      *(_DWORD *)v36 = 136315138;
      v37 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v35, v37);
      v40 = v39;
      *(_QWORD *)(v0 + 184) = sub_10003A834(v38, v39, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192);
      swift_bridgeObjectRelease(v40);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v33, v35);
      _os_log_impl((void *)&_mh_execute_header, log, v31, "Cannot add to SharePlay on nearby sharing interaction with ID as it's an unknown contact: %s", v36, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
  }
  else
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v11 = *(_QWORD *)(v0 + 192);
    v12 = type metadata accessor for Logger(0);
    sub_100009558(v12, (uint64_t)qword_100148040);
    v13 = sub_100009008(v11, v0 + 96);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v44 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = *(_QWORD *)(v0 + 120);
      v19 = sub_10000904C((_QWORD *)(v0 + 96), v18);
      DynamicType = swift_getDynamicType(v19, v18, 1);
      v21 = _typeName(_:qualified:)(DynamicType, 0);
      v23 = v22;
      *(_QWORD *)(v0 + 160) = sub_10003A834(v21, v22, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168);
      swift_bridgeObjectRelease(v23);
      sub_100009070((_QWORD *)(v0 + 96));
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unsupported content type for add to SharePlay action: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_100009070((_QWORD *)(v0 + 96));
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000187A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 296);
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000187FC, 0, 0);
}

uint64_t sub_1000187FC()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  Class isa;
  void *v42;
  void *v43;
  id v44;
  id v45;
  unint64_t v46;

  v1 = *(_QWORD *)(v0 + 312);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    v2 = (void *)objc_opt_self(TUHandle);
    swift_bridgeObjectRetain(v1);
    v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v1);
    v4 = objc_msgSend(v2, "normalizedHandleWithDestinationID:", v3);

    if (v4)
    {
      v5 = *(_QWORD *)(v0 + 288);
      v6 = *(_QWORD *)(v0 + 216);
      swift_bridgeObjectRelease(v1);
      v7 = objc_msgSend(objc_allocWithZone((Class)TUConversationMember), "initWithHandle:", v4);
      v44 = *(id *)(v6 + *(int *)(v5 + 24));
      v8 = sub_100008F88((uint64_t *)&unk_10013DF40);
      inited = swift_initStackObject(v8, v0 + 56);
      *(_OWORD *)(inited + 16) = xmmword_1000E9380;
      *(_QWORD *)(inited + 32) = v7;
      v46 = inited;
      specialized Array._endMutation()();
      if (v46 >> 62)
      {
        if ((v46 & 0x8000000000000000) != 0)
          v34 = v46;
        else
          v34 = v46 & 0xFFFFFFFFFFFFFF8;
        v35 = v7;
        swift_bridgeObjectRetain(v46);
        v36 = _CocoaArrayWrapper.endIndex.getter(v34);
        swift_bridgeObjectRelease(v46);
        if (v36)
          goto LABEL_5;
      }
      else
      {
        v10 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
        v11 = v7;
        if (v10)
        {
LABEL_5:
          sub_1000B6388(v46);
          v13 = v12;
LABEL_23:
          v37 = *(void **)(v0 + 256);
          v38 = *(void **)(v0 + 264);
          v39 = *(void **)(v0 + 248);
          swift_bridgeObjectRelease(v46);
          sub_100018D44(0, &qword_10013BBE0, TUConversationMember_ptr);
          sub_100016EF4(&qword_10013BBE8, &qword_10013BBE0, TUConversationMember_ptr);
          isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v13);
          objc_msgSend(v44, "addRemoteMembers:toConversation:", isa, v39);

          goto LABEL_24;
        }
      }
      v13 = &_swiftEmptySetSingleton;
      goto LABEL_23;
    }
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v25 = type metadata accessor for Logger(0);
    sub_100009558(v25, (uint64_t)qword_100148040);
    v26 = swift_bridgeObjectRetain(v1);
    v17 = Logger.logObject.getter(v26);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v27))
    {
      v28 = *(_QWORD *)(v0 + 304);
      v43 = *(void **)(v0 + 256);
      v45 = *(id *)(v0 + 264);
      v42 = *(void **)(v0 + 248);
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v46 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain(v1);
      *(_QWORD *)(v0 + 176) = sub_10003A834(v28, v1, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184);
      swift_bridgeObjectRelease_n(v1, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v27, "Unable to create a normalized handle with destination ID: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      v24 = v29;
      goto LABEL_14;
    }
    v33 = *(void **)(v0 + 256);
    v31 = *(void **)(v0 + 264);

    swift_bridgeObjectRelease_n(v1, 2);
LABEL_17:

    goto LABEL_24;
  }
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = type metadata accessor for Logger(0);
  sub_100009558(v15, (uint64_t)qword_100148040);
  v16 = swift_bridgeObjectRetain(v14);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(_QWORD *)(v0 + 280);
  if (!v19)
  {
    v32 = *(void **)(v0 + 256);
    v31 = *(void **)(v0 + 264);

    swift_bridgeObjectRelease_n(v20, 2);
    goto LABEL_17;
  }
  v21 = *(_QWORD *)(v0 + 272);
  v43 = *(void **)(v0 + 256);
  v45 = *(id *)(v0 + 264);
  v42 = *(void **)(v0 + 248);
  v22 = (uint8_t *)swift_slowAlloc(12, -1);
  v23 = swift_slowAlloc(32, -1);
  v46 = v23;
  *(_DWORD *)v22 = 136315138;
  swift_bridgeObjectRetain(v20);
  *(_QWORD *)(v0 + 168) = sub_10003A834(v21, v20, (uint64_t *)&v46);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
  swift_bridgeObjectRelease_n(v20, 3);
  _os_log_impl((void *)&_mh_execute_header, v17, v18, "Cannot start SharePlay on nearby sharing interaction with ID as the contact with identifier does not contain a FaceTime-able handle: %s", v22, 0xCu);
  swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v23, -1, -1);
  v24 = v22;
LABEL_14:
  swift_slowDealloc(v24, -1, -1);

LABEL_24:
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018D44(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

_BYTE *_s31TUConversationActivityLoadErrorOwCP(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s31TUConversationActivityLoadErrorOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s31TUConversationActivityLoadErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100018E64 + 4 * byte_1000E9395[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100018E98 + 4 * byte_1000E9390[v4]))();
}

uint64_t sub_100018E98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018EA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100018EA8);
  return result;
}

uint64_t sub_100018EB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100018EBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100018EC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018EC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018ED4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100018EDC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *_s31TUConversationActivityLoadErrorOMa()
{
  return &_s31TUConversationActivityLoadErrorON;
}

unint64_t sub_100018EFC()
{
  unint64_t result;

  result = qword_10013BD00;
  if (!qword_10013BD00)
  {
    result = swift_getWitnessTable(&unk_1000E96E0, &_s31TUConversationActivityLoadErrorON);
    atomic_store(result, (unint64_t *)&qword_10013BD00);
  }
  return result;
}

void destroy for AirDropPlatter(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

}

uint64_t initializeWithCopy for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_retain(v3);
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  v8 = v6;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropPlatter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropPlatter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropPlatter()
{
  return &type metadata for AirDropPlatter;
}

uint64_t sub_100019130(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001125DC, 1);
}

void sub_100019140(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  int v103;
  int *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  __int16 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  uint64_t (*v147)(_QWORD *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __n128 v152;
  uint64_t v153;
  void *v154;
  char v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unsigned __int16 v166;
  unsigned __int8 v167;
  char v168;
  _OWORD *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _OWORD *v202;
  char *v203;
  _OWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int16 v211;
  __int16 v212;
  __int128 v213;
  unsigned __int16 v214;
  unsigned __int8 v215;
  char v216;
  _OWORD v217[2];

  v208 = a2;
  v194 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a1);
  v192 = *(_QWORD *)(v194 - 8);
  v4 = __chkstk_darwin(v194, v3);
  v193 = (char *)&v188 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v189 = (char **)((char *)&v188 - v7);
  v190 = type metadata accessor for AirDropAskRequestView(0);
  __chkstk_darwin(v190, v8);
  v10 = (char **)((char *)&v188 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v199 = sub_100008F88(&qword_10013BD20);
  v12 = __chkstk_darwin(v199, v11);
  v191 = (uint64_t)&v188 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v195 = (uint64_t)&v188 - v15;
  v205 = sub_100008F88(&qword_10013BD28);
  __chkstk_darwin(v205, v16);
  v207 = (uint64_t *)((char *)&v188 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v200 = sub_100008F88(&qword_10013BD30);
  __chkstk_darwin(v200, v18);
  v202 = (_OWORD *)((char *)&v188 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v197 = sub_100008F88(&qword_10013BD38);
  __chkstk_darwin(v197, v20);
  v196 = (uint64_t *)((char *)&v188 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v201 = sub_100008F88(&qword_10013BD40);
  __chkstk_darwin(v201, v22);
  v198 = (char *)&v188 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100008F88(&qword_10013BD48);
  __chkstk_darwin(v206, v24);
  v203 = (char *)&v188 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v26, v27);
  v29 = (char **)((char *)&v188 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v31 = *(_QWORD *)(v30 - 8);
  v33 = __chkstk_darwin(v30, v32);
  v35 = (char *)&v188 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v36);
  v38 = (char *)&v188 - v37;
  v204 = v2;
  v217[0] = *v2;
  v39 = *((_QWORD *)&v217[0] + 1);
  KeyPath = swift_getKeyPath(&unk_1000E97D8);
  v41 = swift_getKeyPath(&unk_1000E9800);
  v42 = swift_retain(v39);
  static Published.subscript.getter(v29, v42, KeyPath, v41);
  swift_release(KeyPath);
  swift_release(v41);
  sub_10001AAF0((uint64_t)v217);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_10000CC5C((uint64_t)v29, &qword_10013C9E0);
    if ((sub_10001AB94(v39, v43) & 1) != 0)
    {
      v44 = *((_BYTE *)v204 + 16);
      *v10 = swift_getKeyPath(&unk_1000E9868);
      v45 = sub_100008F88(&qword_10013BDE8);
      swift_storeEnumTagMultiPayload(v10, v45, 0);
      v46 = (int *)v190;
      v47 = (_QWORD *)((char *)v10 + *(int *)(v190 + 20));
      v48 = type metadata accessor for AirDropTransferSession(0);
      v49 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
      v50 = swift_retain(v39);
      *v47 = ObservedObject.init(wrappedValue:)(v50, v48, v49);
      v47[1] = v51;
      *((_BYTE *)v10 + v46[6]) = v44;
      v52 = v46[7];
      *(_QWORD *)((char *)v10 + v52) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.043, 0.608, 1.0, 1.0);
      v53 = v46[8];
      if (qword_10013ABE0 != -1)
        swift_once(&qword_10013ABE0, sub_100023E74);
      v54 = qword_100147D90;
      v55 = swift_getKeyPath(&unk_1000E9898);
      v56 = swift_getKeyPath(&unk_1000E98C0);
      static Published.subscript.getter(&v213, v54, v55, v56);
      swift_release(v55);
      swift_release(v56);
      *((_BYTE *)v10 + v53) = v213;
      v57 = v191;
      sub_10001B390((uint64_t)v10, v191);
      v58 = v199;
      v59 = (_BYTE *)(v57 + *(int *)(v199 + 36));
      *v59 = v44;
      v59[1] = 1;
      sub_10001B3D4((uint64_t)v10);
      v60 = v195;
      sub_10000CBD4(v57, v195, &qword_10013BD20);
      v61 = v196;
      sub_10000CC18(v60, (uint64_t)v196, &qword_10013BD20);
      swift_storeEnumTagMultiPayload(v61, v197, 1);
      v62 = sub_100008F88(&qword_10013BD70);
      v63 = sub_10001AFB4();
      v64 = sub_10001B1C4();
      v65 = (uint64_t)v198;
      _ConditionalContent<>.init(storage:)(v61, v62, v58, v63, v64);
      v66 = v202;
      sub_10000CC18(v65, (uint64_t)v202, &qword_10013BD40);
      swift_storeEnumTagMultiPayload(v66, v200, 0);
      v67 = sub_100008F88(&qword_10013BDC0);
      v68 = sub_10001AF48();
      v69 = sub_10001B248();
      v70 = (uint64_t)v203;
      _ConditionalContent<>.init(storage:)(v66, v201, v67, v68, v69);
      sub_10000CC5C(v65, &qword_10013BD40);
      v71 = v207;
      sub_10000CC18(v70, (uint64_t)v207, &qword_10013BD48);
      swift_storeEnumTagMultiPayload(v71, v205, 0);
      v72 = sub_100008F88(&qword_10013BD50);
      v73 = sub_10001AEDC();
      v74 = sub_10001B114();
      _ConditionalContent<>.init(storage:)(v71, v206, v72, v73, v74);
      sub_10000CC5C(v70, &qword_10013BD48);
      sub_10000CC5C(v60, &qword_10013BD20);
      return;
    }
    sub_10001AE98();
    v94 = (void *)((uint64_t (*)(void))static NSUserDefaults.airdrop.getter)();
    v95 = SFAirDropUserDefaults.moveToAppEnabled.getter();

    v96 = v194;
    v97 = v193;
    v98 = v192;
    if ((v95 & 1) != 0)
    {
      v99 = swift_getKeyPath(&unk_1000E9820);
      v100 = swift_getKeyPath(&unk_1000E9848);
      v101 = swift_retain(v39);
      v102 = v189;
      static Published.subscript.getter(v189, v101, v99, v100);
      swift_release(v99);
      swift_release(v100);
      sub_10001AAF0((uint64_t)v217);
      v103 = (*(uint64_t (**)(_QWORD *, uint64_t))(v98 + 88))(v102, v96);
      if (v103 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:)
        || v103 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:))
      {
        (*(void (**)(_QWORD *, uint64_t))(v98 + 96))(v102, v96);
        v104 = (int *)sub_100008F88(&qword_10013BDE0);
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v102 + v104[12]));
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v102 + v104[16]));
        v105 = (char *)v102 + v104[20];
        v106 = sub_100008F88(&qword_10013CA70);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v105, v106);
        v107 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v107 - 8) + 8))(v102, v107);
        v108 = *((unsigned __int8 *)v204 + 16);
        v109 = type metadata accessor for AirDropTransferSession(0);
        v110 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
        v111 = swift_retain(v39);
        v112 = ObservedObject.init(wrappedValue:)(v111, v109, v110);
        v114 = v113;
        if (v108)
          v115 = 256;
        else
          v115 = 0;
        v209 = v112;
        v210 = v113;
        v211 = v115 | v108;
        v116 = 1;
        goto LABEL_32;
      }
      (*(void (**)(_QWORD *, uint64_t))(v98 + 8))(v102, v96);
    }
    v142 = swift_getKeyPath(&unk_1000E9820);
    v143 = swift_getKeyPath(&unk_1000E9848);
    v144 = swift_retain(v39);
    static Published.subscript.getter(v97, v144, v142, v143);
    swift_release(v142);
    swift_release(v143);
    sub_10001AAF0((uint64_t)v217);
    v146 = SFAirDropReceive.Transfer.State.sfTransferState.getter(v145);
    v147 = *(uint64_t (**)(_QWORD *, uint64_t))(v98 + 8);
    v148 = v147(v97, v96);
    if (v146 != 3)
    {
      v149 = swift_getKeyPath(&unk_1000E9820);
      v150 = swift_getKeyPath(&unk_1000E9848);
      v151 = swift_retain(v39);
      static Published.subscript.getter(v97, v151, v149, v150);
      swift_release(v149);
      swift_release(v150);
      sub_10001AAF0((uint64_t)v217);
      v153 = SFAirDropReceive.Transfer.State.sfTransferState.getter(v152);
      v148 = v147(v97, v96);
      if (v153 != 9)
        goto LABEL_33;
    }
    v154 = (void *)static NSUserDefaults.airdrop.getter(v148);
    v155 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

    if ((v155 & 1) == 0)
    {
LABEL_33:
      v178 = *((_BYTE *)v204 + 16);
      v179 = type metadata accessor for AirDropTransferSession(0);
      v180 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
      v181 = swift_retain(v39);
      v182 = ObservedObject.init(wrappedValue:)(v181, v179, v180);
      v183 = v207;
      *v207 = v182;
      v183[1] = v184;
      *((_BYTE *)v183 + 16) = v178;
      *((_BYTE *)v183 + 17) = v178;
      *((_BYTE *)v183 + 18) = 1;
      swift_storeEnumTagMultiPayload(v183, v205, 1);
      v185 = sub_100008F88(&qword_10013BD50);
      v186 = sub_10001AEDC();
      v187 = sub_10001B114();
      _ConditionalContent<>.init(storage:)(v183, v206, v185, v186, v187);
      return;
    }
    v156 = *((unsigned __int8 *)v204 + 16);
    v157 = type metadata accessor for AirDropTransferSession(0);
    v158 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
    v159 = swift_retain(v39);
    v160 = ObservedObject.init(wrappedValue:)(v159, v157, v158);
    v114 = v113;
    if (v156)
      v161 = 256;
    else
      v161 = 0;
    v209 = v160;
    v210 = v113;
    v211 = v161 | v156;
    v116 = 257;
LABEL_32:
    v212 = v116;
    swift_retain(v113);
    v162 = sub_100008F88(&qword_10013BDD0);
    v163 = sub_100008F88(&qword_10013BD80);
    v164 = sub_10001B2B4();
    v165 = sub_10001B020();
    _ConditionalContent<>.init(storage:)(&v209, v162, v163, v164, v165);
    v166 = v214;
    v167 = v215;
    v168 = v216;
    v169 = v202;
    *v202 = v213;
    *((_BYTE *)v169 + 18) = v167;
    *((_WORD *)v169 + 8) = v166;
    *((_BYTE *)v169 + 19) = v168;
    swift_storeEnumTagMultiPayload(v169, v200, 1);
    v170 = sub_100008F88(&qword_10013BDC0);
    v171 = sub_10001AF48();
    v172 = sub_10001B248();
    v173 = (uint64_t)v203;
    _ConditionalContent<>.init(storage:)(v169, v201, v170, v171, v172);
    v174 = v207;
    sub_10000CC18(v173, (uint64_t)v207, &qword_10013BD48);
    swift_storeEnumTagMultiPayload(v174, v205, 0);
    v175 = sub_100008F88(&qword_10013BD50);
    v176 = sub_10001AEDC();
    v177 = sub_10001B114();
    _ConditionalContent<>.init(storage:)(v174, v206, v175, v176, v177);
    sub_10000CC5C(v173, &qword_10013BD48);
    swift_release(v114);
    return;
  }
  (*(void (**)(char *, _QWORD *, uint64_t))(v31 + 32))(v38, v29, v30);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v35, v38, v30);
  v75 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v35, v30);
  v188 = v38;
  if (v75 == enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
  {
    (*(void (**)(char *, uint64_t))(v31 + 96))(v35, v30);
    v76 = &v35[*(int *)(sub_100008F88(&qword_10013BC90) + 48)];
    v77 = *((unsigned __int8 *)v204 + 16);
    v78 = type metadata accessor for AirDropTransferSession(0);
    v79 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
    v80 = swift_retain(v39);
    v81 = ObservedObject.init(wrappedValue:)(v80, v78, v79);
    if (v77)
      v83 = 256;
    else
      v83 = 0;
    v209 = v81;
    v210 = v82;
    v211 = v83 | v77;
    v212 = 1;
    v84 = sub_100008F88(&qword_10013BD80);
    v85 = sub_100008F88(&qword_10013BD50);
    v86 = sub_10001B020();
    v87 = sub_10001B114();
    _ConditionalContent<>.init(storage:)(&v209, v84, v85, v86, v87);
    v89 = *((_QWORD *)&v213 + 1);
    v88 = v213;
    v90 = v214 | (v215 << 16);
    v91 = v216;
    v92 = type metadata accessor for SFAirDropSend.Failure(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v92 - 8) + 8))(v76, v92);
    v93 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v93 - 8) + 8))(v35, v93);
  }
  else
  {
    v117 = *((unsigned __int8 *)v204 + 16);
    v118 = type metadata accessor for AirDropTransferSession(0);
    v119 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
    v120 = swift_retain(v39);
    v121 = ObservedObject.init(wrappedValue:)(v120, v118, v119);
    if (v117)
      v123 = 256;
    else
      v123 = 0;
    v209 = v121;
    v210 = v122;
    v211 = v123 | v117;
    v212 = 257;
    v124 = sub_100008F88(&qword_10013BD80);
    v125 = sub_100008F88(&qword_10013BD50);
    v126 = sub_10001B020();
    v127 = sub_10001B114();
    _ConditionalContent<>.init(storage:)(&v209, v124, v125, v126, v127);
    v89 = *((_QWORD *)&v213 + 1);
    v88 = v213;
    v90 = v214 | (v215 << 16);
    v91 = v216;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v30);
  }
  v195 = v89;
  v204 = (_OWORD *)v88;
  v128 = v196;
  *v196 = v88;
  v128[1] = v89;
  *((_WORD *)v128 + 8) = v90;
  *((_BYTE *)v128 + 18) = BYTE2(v90);
  *((_BYTE *)v128 + 19) = v91;
  swift_storeEnumTagMultiPayload(v128, v197, 0);
  sub_10001B410(v88, v89);
  v129 = sub_100008F88(&qword_10013BD70);
  v130 = sub_10001AFB4();
  v131 = sub_10001B1C4();
  v132 = (uint64_t)v198;
  _ConditionalContent<>.init(storage:)(v128, v129, v199, v130, v131);
  v133 = v202;
  sub_10000CC18(v132, (uint64_t)v202, &qword_10013BD40);
  swift_storeEnumTagMultiPayload(v133, v200, 0);
  v134 = sub_100008F88(&qword_10013BDC0);
  v135 = sub_10001AF48();
  v136 = sub_10001B248();
  v137 = (uint64_t)v203;
  _ConditionalContent<>.init(storage:)(v133, v201, v134, v135, v136);
  sub_10000CC5C(v132, &qword_10013BD40);
  v138 = v207;
  sub_10000CC18(v137, (uint64_t)v207, &qword_10013BD48);
  swift_storeEnumTagMultiPayload(v138, v205, 0);
  v139 = sub_100008F88(&qword_10013BD50);
  v140 = sub_10001AEDC();
  v141 = sub_10001B114();
  _ConditionalContent<>.init(storage:)(v138, v206, v139, v140, v141);
  sub_10001B418((uint64_t)v204, v195);
  sub_10000CC5C(v137, &qword_10013BD48);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v188, v30);
}

uint64_t sub_10001A100()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10001A11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  double v67;
  CGFloat v68;
  uint64_t v69;
  double Width;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void (*v84)(char *, _QWORD, uint64_t);
  uint64_t v85;
  uint64_t result;
  uint64_t v87;
  char *v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  void (*v92)(char *, char *, uint64_t);
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[3];
  CGRect v136;

  v129 = a1;
  v133 = a2;
  v134 = sub_100008F88(&qword_10013BE10);
  __chkstk_darwin(v134, v2);
  v4 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008F88(&qword_10013BE18);
  v6 = __chkstk_darwin(v118, v5);
  v8 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v116 = (char *)&v114 - v10;
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = *(_QWORD **)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v114 - v18;
  v123 = sub_100008F88(&qword_10013BE20);
  v21 = __chkstk_darwin(v123, v20);
  v115 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  v120 = (uint64_t)&v114 - v24;
  v122 = sub_100008F88(&qword_10013BE28);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122, v25);
  v119 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100008F88(&qword_10013BE30);
  v28 = __chkstk_darwin(v127, v27);
  v117 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  v124 = (uint64_t)&v114 - v31;
  v130 = sub_100008F88(&qword_10013BE38);
  __chkstk_darwin(v130, v32);
  v132 = (uint64_t)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100008F88(&qword_10013BE40);
  __chkstk_darwin(v125, v34);
  v126 = (uint64_t)&v114 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100008F88(&qword_10013BE48);
  __chkstk_darwin(v131, v36);
  v128 = (char *)&v114 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100008F88(&qword_10013BE50);
  __chkstk_darwin(v38, v39);
  v41 = (char *)&v114 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100008F88(&qword_10013BE58);
  v44 = __chkstk_darwin(v42, v43);
  v46 = (char *)&v114 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v44, v47);
  v51 = (char *)&v114 - v50;
  if ((v49 & 1) != 0)
  {
    v59 = v48;
    v60 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v60, "bounds");
    v62 = v61;
    v64 = v63;
    v66 = v65;
    v68 = v67;

    v136.origin.x = v62;
    v136.origin.y = v64;
    v136.size.width = v66;
    v136.size.height = v68;
    Width = CGRectGetWidth(v136);
    if (qword_10013AC38 != -1)
      v69 = swift_once(&qword_10013AC38, sub_10005EF88);
    v71 = Width - (*(double *)&qword_100147E18 + *(double *)&qword_100147E18);
    v72 = static Alignment.center.getter(v69);
    _FrameLayout.init(width:height:alignment:)(v135, *(_QWORD *)&v71, 0, 0, 1, v72, v73);
    v74 = sub_100008F88(&qword_10013BE60);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v41, v129, v74);
    v75 = &v41[*(int *)(v38 + 36)];
    v76 = v135[1];
    *(_OWORD *)v75 = v135[0];
    *((_OWORD *)v75 + 1) = v76;
    *((_OWORD *)v75 + 2) = v135[2];
    sub_10000CC18((uint64_t)v41, (uint64_t)v46, &qword_10013BE50);
    *(_WORD *)&v46[*(int *)(v59 + 36)] = 256;
    sub_10000CC5C((uint64_t)v41, &qword_10013BE50);
    v54 = &qword_10013BE58;
    sub_10000CBD4((uint64_t)v46, (uint64_t)v51, &qword_10013BE58);
    v77 = v126;
    sub_10000CC18((uint64_t)v51, v126, &qword_10013BE58);
    swift_storeEnumTagMultiPayload(v77, v125, 0);
    v78 = sub_10001B688();
    v79 = sub_10001B788();
    v80 = (uint64_t)v128;
    _ConditionalContent<>.init(storage:)(v77, v59, v127, v78, v79);
    v81 = v132;
    sub_10000CC18(v80, v132, &qword_10013BE48);
    swift_storeEnumTagMultiPayload(v81, v130, 0);
    v82 = sub_10001B61C();
    v83 = sub_10001B70C(&qword_10013BE98, &qword_10013BE10);
    _ConditionalContent<>.init(storage:)(v81, v131, v134, v82, v83);
    sub_10000CC5C(v80, &qword_10013BE48);
    v58 = (uint64_t)v51;
    return sub_10000CC5C(v58, v54);
  }
  if ((v49 & 0x100) == 0)
  {
    v52 = sub_100008F88(&qword_10013BE60);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v4, v129, v52);
    v53 = v134;
    *(_WORD *)&v4[*(int *)(v134 + 36)] = 256;
    v54 = &qword_10013BE10;
    v55 = v132;
    sub_10000CC18((uint64_t)v4, v132, &qword_10013BE10);
    swift_storeEnumTagMultiPayload(v55, v130, 1);
    v56 = sub_10001B61C();
    v57 = sub_10001B70C(&qword_10013BE98, &qword_10013BE10);
    _ConditionalContent<>.init(storage:)(v55, v131, v53, v56, v57);
    v58 = (uint64_t)v4;
    return sub_10000CC5C(v58, v54);
  }
  v114 = v48;
  v84 = (void (*)(char *, _QWORD, uint64_t))v12[13];
  v84(v19, enum case for DynamicTypeSize.xSmall(_:), v11);
  v84(v16, enum case for DynamicTypeSize.large(_:), v11);
  v85 = sub_100008694(&qword_10013BEA0, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v19, v16, v11, v85);
  if ((result & 1) != 0)
  {
    v87 = v118;
    v88 = v116;
    v89 = &v116[*(int *)(v118 + 48)];
    v90 = (void (*)(char *, char *, uint64_t))v12[4];
    v90(v116, v19, v11);
    v90(v89, v16, v11);
    v91 = &v8[*(int *)(v87 + 48)];
    v92 = (void (*)(char *, char *, uint64_t))v12[2];
    v92(v8, v88, v11);
    v92(v91, v89, v11);
    v93 = (uint64_t)v115;
    v90(v115, v8, v11);
    v94 = (void (*)(char *, uint64_t))v12[1];
    v94(v91, v11);
    v95 = &v8[*(int *)(v87 + 48)];
    v90(v8, v88, v11);
    v90(v95, v89, v11);
    v96 = v123;
    v90((char *)(v93 + *(int *)(v123 + 36)), v95, v11);
    v94(v8, v11);
    v97 = v120;
    sub_10000CBD4(v93, v120, &qword_10013BE20);
    v98 = sub_100008F88(&qword_10013BE60);
    v99 = sub_10000CB94(&qword_10013BE80, &qword_10013BE60, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v100 = sub_10000CB94(&qword_10013BE90, &qword_10013BE20, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v101 = v119;
    View.dynamicTypeSize<A>(_:)(v97, v98, v96, v99, v100);
    sub_10000CC5C(v97, &qword_10013BE20);
    v102 = v121;
    v103 = (uint64_t)v117;
    v104 = v122;
    (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v117, v101, v122);
    v105 = v127;
    *(_WORD *)(v103 + *(int *)(v127 + 36)) = 256;
    (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v104);
    v54 = &qword_10013BE30;
    v106 = v124;
    sub_10000CBD4(v103, v124, &qword_10013BE30);
    v107 = v126;
    sub_10000CC18(v106, v126, &qword_10013BE30);
    swift_storeEnumTagMultiPayload(v107, v125, 1);
    v108 = sub_10001B688();
    v109 = sub_10001B788();
    v110 = (uint64_t)v128;
    _ConditionalContent<>.init(storage:)(v107, v114, v105, v108, v109);
    v111 = v132;
    sub_10000CC18(v110, v132, &qword_10013BE48);
    swift_storeEnumTagMultiPayload(v111, v130, 0);
    v112 = sub_10001B61C();
    v113 = sub_10001B70C(&qword_10013BE98, &qword_10013BE10);
    _ConditionalContent<>.init(storage:)(v111, v131, v134, v112, v113);
    sub_10000CC5C(v110, &qword_10013BE48);
    v58 = v106;
    return sub_10000CC5C(v58, v54);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001AACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001A11C(a1, a2);
}

uint64_t sub_10001AAF0(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10001AB18(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for DynamicTypeSize(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.dynamicTypeSize.setter(v3);
}

uint64_t sub_10001AB94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  int v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v34;

  v3 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6, v9);
  v11 = (uint64_t *)((char *)&v34 - v10);
  KeyPath = swift_getKeyPath(&unk_1000E9820);
  v13 = swift_getKeyPath(&unk_1000E9848);
  v14 = swift_retain(a1);
  static Published.subscript.getter(v11, v14, KeyPath, v13);
  swift_release(a1);
  swift_release(KeyPath);
  v15 = swift_release(v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v4 + 88))(v11, v3, v15);
  if (v16 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v11, v3);
    v17 = (uint64_t *)&unk_10013BDF8;
  }
  else
  {
    if (v16 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v11, v3);
      v22 = sub_100008F88(&qword_10013CAD0);
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + *(int *)(v22 + 48)));
      v23 = (char *)v11 + *(int *)(v22 + 64);
      v24 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
      v21 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
      goto LABEL_7;
    }
    if (v16 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v11, v3);
      v18 = (char *)v11 + *(int *)(sub_100008F88(&qword_10013BDF0) + 48);
      v19 = &qword_10013CA70;
      goto LABEL_4;
    }
    if (v16 != enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v11, v3);
      v25 = 0;
      goto LABEL_8;
    }
    (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v11, v3);
    v17 = (uint64_t *)&unk_10013DCE0;
  }
  v18 = (char *)v11 + *(int *)(sub_100008F88(v17) + 48);
  v19 = (uint64_t *)&unk_10013DC90;
LABEL_4:
  v20 = sub_100008F88(v19);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  v21 = type metadata accessor for SFAirDrop.ContactInfo(0);
LABEL_7:
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v11, v21);
  v25 = 1;
LABEL_8:
  v26 = swift_getKeyPath(&unk_1000E9820);
  v27 = swift_getKeyPath(&unk_1000E9848);
  v28 = swift_retain(a1);
  static Published.subscript.getter(v8, v28, v26, v27);
  swift_release(a1);
  swift_release(v26);
  v29 = swift_release(v27);
  v30 = SFAirDropReceive.Transfer.State.sfTransferState.getter(v29);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v8, v3);
  if ((v25 & 1) != 0 || v30 == 1)
  {
    sub_10001AE98();
    v32 = (void *)static NSUserDefaults.airdrop.getter();
    v31 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

  }
  else
  {
    v31 = 0;
  }
  return v31 & 1;
}

unint64_t sub_10001AE98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BCF0;
  if (!qword_10013BCF0)
  {
    v1 = objc_opt_self(NSUserDefaults);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013BCF0);
  }
  return result;
}

unint64_t sub_10001AEDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BD58;
  if (!qword_10013BD58)
  {
    v1 = sub_10000950C(&qword_10013BD48);
    sub_10001AF48();
    sub_10001B248();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BD58);
  }
  return result;
}

unint64_t sub_10001AF48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BD60;
  if (!qword_10013BD60)
  {
    v1 = sub_10000950C(&qword_10013BD40);
    sub_10001AFB4();
    sub_10001B1C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BD60);
  }
  return result;
}

unint64_t sub_10001AFB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BD68;
  if (!qword_10013BD68)
  {
    v1 = sub_10000950C(&qword_10013BD70);
    sub_10001B020();
    sub_10001B114();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BD68);
  }
  return result;
}

unint64_t sub_10001B020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BD78;
  if (!qword_10013BD78)
  {
    v1 = sub_10000950C(&qword_10013BD80);
    sub_10001B08C();
    sub_10001B0D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BD78);
  }
  return result;
}

unint64_t sub_10001B08C()
{
  unint64_t result;

  result = qword_10013BD88;
  if (!qword_10013BD88)
  {
    result = swift_getWitnessTable(&unk_1000EF71C, &type metadata for AirDropCancelledFailedView);
    atomic_store(result, (unint64_t *)&qword_10013BD88);
  }
  return result;
}

unint64_t sub_10001B0D0()
{
  unint64_t result;

  result = qword_10013BD90;
  if (!qword_10013BD90)
  {
    result = swift_getWitnessTable(&unk_1000E98FC, &type metadata for PlatterEnvironmentModifier);
    atomic_store(result, (unint64_t *)&qword_10013BD90);
  }
  return result;
}

unint64_t sub_10001B114()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BD98;
  if (!qword_10013BD98)
  {
    v1 = sub_10000950C(&qword_10013BD50);
    sub_10001B180();
    sub_10001B0D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BD98);
  }
  return result;
}

unint64_t sub_10001B180()
{
  unint64_t result;

  result = qword_10013BDA0;
  if (!qword_10013BDA0)
  {
    result = swift_getWitnessTable(&unk_1000EAD04, &type metadata for AirDropProgressView);
    atomic_store(result, (unint64_t *)&qword_10013BDA0);
  }
  return result;
}

unint64_t sub_10001B1C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BDA8;
  if (!qword_10013BDA8)
  {
    v1 = sub_10000950C(&qword_10013BD20);
    sub_100008694(&qword_10013BDB0, type metadata accessor for AirDropAskRequestView, (uint64_t)&unk_1000EDA98);
    sub_10001B0D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BDA8);
  }
  return result;
}

unint64_t sub_10001B248()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BDB8;
  if (!qword_10013BDB8)
  {
    v1 = sub_10000950C(&qword_10013BDC0);
    sub_10001B2B4();
    sub_10001B020();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BDB8);
  }
  return result;
}

unint64_t sub_10001B2B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BDC8;
  if (!qword_10013BDC8)
  {
    v1 = sub_10000950C(&qword_10013BDD0);
    sub_10001B320();
    sub_10001B0D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BDC8);
  }
  return result;
}

unint64_t sub_10001B320()
{
  unint64_t result;

  result = qword_10013BDD8;
  if (!qword_10013BDD8)
  {
    result = swift_getWitnessTable(&unk_1000EC500, &type metadata for AirDropModernReadyForOpenView);
    atomic_store(result, (unint64_t *)&qword_10013BDD8);
  }
  return result;
}

uint64_t sub_10001B364()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_10001B390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirDropAskRequestView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001B3D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirDropAskRequestView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001B410(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_10001B418(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

_WORD *initializeBufferWithCopyOfBuffer for PlatterEnvironmentModifier(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PlatterEnvironmentModifier(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatterEnvironmentModifier(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001B51C + 4 * byte_1000E9765[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_10001B550 + 4 * byte_1000E9760[v4]))();
}

uint64_t sub_10001B550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10001B558(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x10001B560);
  return result;
}

uint64_t sub_10001B56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x10001B574);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001B578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10001B580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlatterEnvironmentModifier()
{
  return &type metadata for PlatterEnvironmentModifier;
}

unint64_t sub_10001B5A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BE00;
  if (!qword_10013BE00)
  {
    v1 = sub_10000950C(&qword_10013BE08);
    sub_10001AEDC();
    sub_10001B114();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BE00);
  }
  return result;
}

uint64_t sub_10001B60C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112604, 1);
}

unint64_t sub_10001B61C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BE68;
  if (!qword_10013BE68)
  {
    v1 = sub_10000950C(&qword_10013BE48);
    sub_10001B688();
    sub_10001B788();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BE68);
  }
  return result;
}

unint64_t sub_10001B688()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BE70;
  if (!qword_10013BE70)
  {
    v1 = sub_10000950C(&qword_10013BE58);
    sub_10001B70C(&qword_10013BE78, &qword_10013BE50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BE70);
  }
  return result;
}

uint64_t sub_10001B70C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000950C(a2);
    sub_10000CB94(&qword_10013BE80, &qword_10013BE60, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001B788()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10013BE88;
  if (!qword_10013BE88)
  {
    v1 = sub_10000950C(&qword_10013BE30);
    v2[0] = sub_10000950C(&qword_10013BE60);
    v2[1] = sub_10000950C(&qword_10013BE20);
    v2[2] = sub_10000CB94(&qword_10013BE80, &qword_10013BE60, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v2[3] = sub_10000CB94(&qword_10013BE90, &qword_10013BE20, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BE88);
  }
  return result;
}

unint64_t sub_10001B87C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BEA8;
  if (!qword_10013BEA8)
  {
    v1 = sub_10000950C(&qword_10013BEB0);
    sub_10001B61C();
    sub_10001B70C(&qword_10013BE98, &qword_10013BE10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BEA8);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for InteractiveSwipeModifier.DragState(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for InteractiveSwipeModifier.DragState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractiveSwipeModifier.DragState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractiveSwipeModifier.DragState()
{
  return &type metadata for InteractiveSwipeModifier.DragState;
}

uint64_t destroy for InteractiveSwipeModifier(_QWORD *a1)
{
  swift_release(a1[5]);
  swift_release(a1[9]);
  return swift_release(a1[11]);
}

uint64_t initializeWithCopy for InteractiveSwipeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 88) = v4;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for InteractiveSwipeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  swift_retain(v7);
  swift_release(v6);
  v9 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

__n128 initializeWithTake for InteractiveSwipeModifier(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for InteractiveSwipeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v4);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release(*(_QWORD *)(a1 + 72));
  v5 = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractiveSwipeModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractiveSwipeModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractiveSwipeModifier()
{
  return &type metadata for InteractiveSwipeModifier;
}

uint64_t sub_10001BC64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011266C, 1);
}

BOOL sub_10001BC74(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  if (a1[2] == a2[2])
    return a1[1] == a2[1];
  return 0;
}

uint64_t sub_10001BCA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t (**v40)(uint64_t, uint64_t, uint64_t);
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v3 = v2;
  *(_QWORD *)&v54 = a1;
  v61 = a2;
  v4 = type metadata accessor for LocalCoordinateSpace(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DragGesture(0);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57, v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013BEB8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100008F88(&qword_10013BEC0);
  v60 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59, v15);
  v58 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013BEC8);
  v56 = v17;
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v2[4];
  v68 = v2[3];
  v69 = v21;
  v23 = v2[3];
  v22 = v2[4];
  v70 = v2[5];
  v65 = v23;
  v66 = v22;
  v67 = v2[5];
  v24 = sub_100008F88(&qword_10013BED0);
  GestureState.wrappedValue.getter(&v62);
  v25 = *((_QWORD *)&v62 + 1);
  v26 = v63;
  v27 = sub_100008F88(&qword_10013BED8);
  v28 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v20, v54, v27);
  v29 = &v20[*(int *)(v17 + 36)];
  *(_QWORD *)v29 = v25;
  *((_QWORD *)v29 + 1) = v26;
  static CoordinateSpaceProtocol<>.local.getter(v28);
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v7, v4, &protocol witness table for LocalCoordinateSpace, 0.0);
  v62 = v68;
  v63 = v69;
  v64 = v70;
  GestureState.projectedValue.getter(&v65, v24);
  v30 = v65;
  v31 = *((_QWORD *)&v65 + 1);
  v32 = v66;
  v54 = v67;
  v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_allocObject(&unk_100124C60, 112, 7);
  v34 = v3[3];
  *((_OWORD *)v33 + 3) = v3[2];
  *((_OWORD *)v33 + 4) = v34;
  v35 = v3[5];
  *((_OWORD *)v33 + 5) = v3[4];
  *((_OWORD *)v33 + 6) = v35;
  v36 = v3[1];
  *((_OWORD *)v33 + 1) = *v3;
  *((_OWORD *)v33 + 2) = v36;
  v37 = v55;
  v38 = v57;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v14, v10, v57);
  v39 = &v14[*(int *)(v11 + 44)];
  *v39 = v30;
  *((_QWORD *)v39 + 1) = v31;
  *((_OWORD *)v39 + 1) = v32;
  *((_OWORD *)v39 + 2) = v54;
  v40 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v14[*(int *)(v11 + 48)];
  *v40 = sub_10001C260;
  v40[1] = v33;
  sub_10001C268(v3);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
  v41 = (_OWORD *)swift_allocObject(&unk_100124C88, 112, 7);
  v42 = v3[3];
  v41[3] = v3[2];
  v41[4] = v42;
  v43 = v3[5];
  v41[5] = v3[4];
  v41[6] = v43;
  v44 = v3[1];
  v41[1] = *v3;
  v41[2] = v44;
  sub_10001C268(v3);
  v45 = sub_10000CB94(&qword_10013BEE0, &qword_10013BEB8, (uint64_t)&protocol conformance descriptor for GestureStateGesture<A, B>);
  v46 = v58;
  Gesture.onEnded(_:)(sub_10001C2E8, v41, v11, v45);
  swift_release(v41);
  v47 = sub_10000CC5C((uint64_t)v14, &qword_10013BEB8);
  v48 = static GestureMask.all.getter(v47);
  v49 = sub_10001C2F0();
  v50 = sub_10000CB94(&qword_10013BEF8, &qword_10013BEC0, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v51 = v48;
  v52 = v59;
  View.gesture<A>(_:including:)(v46, v51, v56, v59, v49, v50);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v52);
  return sub_10000CC5C((uint64_t)v20, &qword_10013BEC8);
}

uint64_t sub_10001C0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v11;
  uint64_t v12;

  v6 = DragGesture.Value.translation.getter();
  if (v7 > 0.0)
  {
    v8 = *(double *)(a4 + 8);
    v9 = fabs(v8);
    if (fabs(v7) >= 2.22044605e-16 && v9 >= 2.22044605e-16)
    {
      if (v7 >= 0.0)
        v11 = 1.0;
      else
        v11 = -1.0;
      v7 = v11 * (v8 * (-1.0 / (v11 * (v7 / v8) * *(double *)(a4 + 16) + 1.0) + 1.0));
    }
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = v7;
  v12 = static Animation.interactiveSpring(response:dampingFraction:blendDuration:)(v6, 0.05, 0.86, 0.25);
  return Transaction.animation.setter(v12);
}

uint64_t sub_10001C198(uint64_t a1, uint64_t a2)
{
  int v3;
  double v4;
  uint64_t result;
  double v6;
  double v7;

  v3 = Edge.rawValue.getter(*(unsigned __int8 *)(a2 + 24));
  if (v3 == Edge.rawValue.getter(0))
    v4 = -1.0;
  else
    v4 = 1.0;
  result = DragGesture.Value.predictedEndTranslation.getter();
  if (*(double *)a2 < v6 * v4)
    return (*(uint64_t (**)(uint64_t))(a2 + 32))(result);
  result = DragGesture.Value.translation.getter(result);
  if (*(double *)(a2 + 8) < v4 * v7)
    return (*(uint64_t (**)(uint64_t))(a2 + 32))(result);
  return result;
}

uint64_t sub_10001C21C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001BCA8(a1, a2);
}

uint64_t sub_10001C260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10001C0DC(a1, a2, a3, v3 + 16);
}

_QWORD *sub_10001C268(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5];
  v3 = a1[11];
  swift_retain(a1[9]);
  swift_retain(v3);
  swift_retain(v2);
  return a1;
}

uint64_t sub_10001C2B4()
{
  _QWORD *v0;

  swift_release(v0[7]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10001C2E8(uint64_t a1)
{
  uint64_t v1;

  return sub_10001C198(a1, v1 + 16);
}

unint64_t sub_10001C2F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BEE8;
  if (!qword_10013BEE8)
  {
    v1 = sub_10000950C(&qword_10013BEC8);
    sub_10000CB94(&qword_10013BEF0, &qword_10013BED8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013BEE8);
  }
  return result;
}

uint64_t sub_10001C374()
{
  _QWORD v1[4];

  v1[0] = sub_10000950C(&qword_10013BEC8);
  v1[1] = sub_10000950C(&qword_10013BEC0);
  v1[2] = sub_10001C2F0();
  v1[3] = sub_10000CB94(&qword_10013BEF8, &qword_10013BEC0, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
}

uint64_t sub_10001C3FC(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_10001E03C(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v2 + qword_100147D80) - 8) + 8))(a1);
  return v5;
}

uint64_t sub_10001C45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013BF00);
  v1 = sub_100009558(v0, (uint64_t)qword_10013BF00);
  if (qword_10013AD40 != -1)
    swift_once(&qword_10013AD40, sub_1000921BC);
  v2 = sub_100009558(v0, (uint64_t)qword_100147FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10001C798()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SessionSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SessionSceneDelegate()
{
  return objc_opt_self(_TtC9AirDropUI20SessionSceneDelegate);
}

uint64_t sub_10001C824()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10001C864()
{
  return 1;
}

uint64_t sub_10001C86C()
{
  return 1;
}

uint64_t sub_10001C874()
{
  return 1;
}

void *sub_10001C87C(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_10001C8BC(a1, a2);
}

void *sub_10001C8BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  uint64_t v13;

  v5 = *(_QWORD *)((swift_isaMask & *v2) + qword_100147D80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *))(v6 + 16))((char *)&v13 - v7);
  v9 = (void *)UIHostingController.init(coder:rootView:)(a1, v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11 = v9;
  v10(a2, v5);
  if (v9)

  return v9;
}

id sub_10001C97C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  id v7;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for SecureHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_100147D80), *(_QWORD *)((swift_isaMask & *v4) + qword_100147D80 + 8), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

id sub_10001C9F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  return sub_10001C97C(v3, v4, v5, v6);
}

id sub_10001CA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for SecureHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_100147D80), *(_QWORD *)((swift_isaMask & *v4) + qword_100147D80 + 8), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t type metadata accessor for SecureHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002111C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureHostingController);
}

uint64_t sub_10001CA78(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

double sub_10001CABC(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  sub_10001CAFC();
  v3 = v2;

  return v3;
}

id sub_10001CAFC()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + qword_10013C030), "preferredContentSize");
}

void sub_10001CB14(void *a1)
{
  id v1;

  v1 = a1;
  sub_10001CB60();

}

id sub_10001CB60()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + qword_10013C030), "setPreferredContentSize:");
}

void sub_10001CB78()
{
  sub_100020B8C();
}

uint64_t sub_10001CBA4(uint64_t a1)
{
  void *v1;
  id v3;

  v3 = v1;
  return a1;
}

uint64_t sub_10001CBBC()
{
  return 1;
}

uint64_t sub_10001CBC4()
{
  return 1;
}

void sub_10001CBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  Class isa;
  objc_super v39;

  v5 = (objc_class *)type metadata accessor for LiveActivitiesHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v39.receiver = v4;
  v39.super_class = v5;
  objc_msgSendSuper2(&v39, "viewWillLayoutSubviews");
  v6 = sub_100008F88((uint64_t *)&unk_10013DF40);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000E9A20;
  v8 = *(void **)((char *)v4 + qword_10013C030);
  v9 = objc_msgSend(v8, "view");
  if (!v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "topAnchor");

  v12 = objc_msgSend(v4, "view");
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "topAnchor");

  v15 = objc_msgSend(v11, "constraintEqualToAnchor:", v14);
  *(_QWORD *)(v7 + 32) = v15;
  v16 = objc_msgSend(v8, "view");
  if (!v16)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v17 = v16;
  v18 = objc_msgSend(v16, "leadingAnchor");

  v19 = objc_msgSend(v4, "view");
  if (!v19)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v20 = v19;
  v21 = objc_msgSend(v19, "leadingAnchor");

  v22 = objc_msgSend(v18, "constraintEqualToAnchor:", v21);
  *(_QWORD *)(v7 + 40) = v22;
  v23 = objc_msgSend(v8, "view");
  if (!v23)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, "trailingAnchor");

  v26 = objc_msgSend(v4, "view");
  if (!v26)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, "trailingAnchor");

  v29 = objc_msgSend(v25, "constraintEqualToAnchor:", v28);
  *(_QWORD *)(v7 + 48) = v29;
  v30 = objc_msgSend(v8, "view");
  if (!v30)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v31 = v30;
  v32 = objc_msgSend(v30, "bottomAnchor");

  v33 = objc_msgSend(v4, "view");
  if (v33)
  {
    v34 = v33;
    v35 = (void *)objc_opt_self(NSLayoutConstraint);
    v36 = objc_msgSend(v34, "bottomAnchor");

    v37 = objc_msgSend(v32, "constraintEqualToAnchor:", v36);
    *(_QWORD *)(v7 + 56) = v37;
    specialized Array._endMutation()();
    sub_100018D44(0, &qword_10013C100, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    objc_msgSend(v35, "activateConstraints:", isa);

    return;
  }
LABEL_17:
  __break(1u);
}

void sub_10001CF50(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_10001CBCC((uint64_t)v4, v1, v2, v3);

}

void sub_10001CF84(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  objc_super v7;

  v6 = (objc_class *)type metadata accessor for LiveActivitiesHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v6;
  objc_msgSendSuper2(&v7, "viewIsAppearing:", a1 & 1);
  sub_10001D070();
}

void sub_10001CFE4(void *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  sub_10001CF84(a3, (uint64_t)v6, v4, v5);

}

void sub_10001D024(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  swift_unknownObjectRetain(a3);
  v5 = a1;
  sub_100020BE4();
  swift_unknownObjectRelease(a3);

}

void sub_10001D070()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *oslog;
  double v27;
  uint64_t v28;

  objc_msgSend(v0, "preferredContentSize");
  v3 = v2;
  v4 = v1;
  if (v2 == 0.0 && v1 == 0.0)
  {
    if (qword_10013AD40 != -1)
      swift_once(&qword_10013AD40, sub_1000921BC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100009558(v5, (uint64_t)qword_100147FE0);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "LiveActivitiesHostingController: skipping setMetrics because content size is 0", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
LABEL_23:

    return;
  }
  v9 = objc_msgSend(v0, "view");
  if (!v9)
  {
    __break(1u);
    return;
  }
  v10 = v9;
  oslog = objc_msgSend(v9, "window");

  if (oslog)
  {
    v11 = -[NSObject windowScene](oslog, "windowScene");
    if (v11)
    {
      v12 = v11;
      v13 = type metadata accessor for ActivityScene(0);
      if (swift_dynamicCastClass(v12, v13))
      {
        if (qword_10013AD40 != -1)
          swift_once(&qword_10013AD40, sub_1000921BC);
        v14 = type metadata accessor for Logger(0);
        v15 = sub_100009558(v14, (uint64_t)qword_100147FE0);
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = swift_slowAlloc(22, -1);
          *(_DWORD *)v18 = 134218240;
          v27 = v3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
          *(_WORD *)(v18 + 12) = 2048;
          v27 = v4;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "LiveActivitiesHostingController: setMetrics with size {%f, %f}", (uint8_t *)v18, 0x16u);
          swift_slowDealloc(v18, -1, -1);
        }

        v19 = objc_allocWithZone((Class)type metadata accessor for ActivitySceneMetrics(0));
        v20 = ActivitySceneMetrics.init(size:cornerRadius:)(v3, v4, 18.0);
        dispatch thunk of ActivityScene.resolvedMetrics.setter(v20);

        return;
      }

    }
    if (qword_10013AD40 != -1)
      swift_once(&qword_10013AD40, sub_1000921BC);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100009558(v21, (uint64_t)qword_100147FE0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "LiveActivitiesHostingController used in a scene that's not an ActivityScene", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    goto LABEL_23;
  }
}

void sub_10001D3F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  sub_100020BE8();
}

id sub_10001D430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for LiveActivitiesHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_10001D47C(uint64_t a1)
{

}

uint64_t type metadata accessor for LiveActivitiesHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002111C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LiveActivitiesHostingController);
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewControllerFactory()
{
  return &type metadata for NearbySharingInteractionViewControllerFactory;
}

ValueMetadata *type metadata accessor for AirDropTransferSessionViewControllerFactory()
{
  return &type metadata for AirDropTransferSessionViewControllerFactory;
}

char *sub_10001D4B8(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  objc_class *v53;
  id v54;
  char *v55;
  void *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *result;
  char *v63;
  char *v64;
  id v65;
  uint64_t v66;
  char *v67;
  void *v68;
  char *v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  char *v74;
  char *v75;
  id v76;
  uint64_t v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  void *v82;
  id v83;
  char *v84;
  char *v85;
  id v86;
  uint64_t v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  void *v92;
  id v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  objc_class *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[24];
  char *v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  void *v128;
  objc_super v129;

  v3 = sub_100008F88(&qword_100140B40);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[qword_100141740] = 0;
  *(_QWORD *)&v1[qword_100141748] = 2;
  *(_QWORD *)&v1[qword_100141750] = 4;
  *(_QWORD *)&v1[qword_100141758] = 4;
  v7 = &v1[qword_100141760];
  *v7 = 0;
  v7[1] = 0;
  v8 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(_QWORD *)&v1[qword_100141768] = SBUISystemApertureElementIdentifierAirDrop;
  v1[qword_100141770] = 1;
  v9 = qword_100141778;
  v10 = objc_allocWithZone((Class)type metadata accessor for SystemApertureElementTransitionCoordinator());
  v11 = v1;
  v12 = v8;
  *(_QWORD *)&v1[v9] = objc_msgSend(v10, "init");
  *(_QWORD *)&v11[qword_100141780] = 0;
  v13 = qword_100141788;
  v14 = type metadata accessor for SystemApertureLayoutState(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v117 = 0;
  v118 = 0;
  __asm { FMOV            V0.2D, #20.0 }
  v119 = _Q0;
  v120 = _Q0;
  Published.init(initialValue:)(&v117, &type metadata for SystemApertureLayoutState.Metrics);
  v117 = 0;
  v118 = 0;
  LOBYTE(v119) = 0;
  Published.init(initialValue:)(&v117, &type metadata for SystemApertureLayoutState.Context);
  *(_QWORD *)&v11[v13] = v15;
  *(_QWORD *)&v11[qword_100141790] = 0;
  *(_QWORD *)&v11[qword_100141798] = 0;
  *(_QWORD *)&v11[qword_1001417A0] = 0;
  *(_QWORD *)&v11[qword_1001417A8] = 0;
  *(_QWORD *)&v11[qword_1001417B0] = 0;
  *(_QWORD *)&v11[qword_1001417B8] = 0;
  *(_QWORD *)&v11[qword_1001417C0] = 1;

  v21 = (objc_class *)sub_100008F88((uint64_t *)&unk_10013C110);
  v129.receiver = v11;
  v129.super_class = v21;
  v112 = v21;
  v22 = objc_msgSendSuper2(&v129, "initWithNibName:bundle:", 0, 0);
  v23 = sub_100008694((unint64_t *)&qword_10013C120, type metadata accessor for SystemApertureLayoutState, (uint64_t)&unk_1000EA18C);
  v111 = (char *)v22;
  v109 = v23;
  v24 = EnvironmentObject.init()(v14, v23);
  v110 = v25;
  sub_1000C6454(a1, (uint64_t)v6);
  v26 = sub_100020D04(&qword_100140B50, &qword_100140B40, (void (*)(void))sub_100020C3C);
  v27 = AnyView.init<A>(_:)(v6, v3, v26);
  v28 = 0;
  if (a1)
  {
    v29 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v30 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    v28 = ObservedObject.init(wrappedValue:)(a1, v29, v30);
  }
  else
  {
    v31 = 0;
  }
  v117 = (char *)v28;
  v118 = v31;
  v32 = sub_100008F88(&qword_10013C150);
  v33 = sub_100020D04(&qword_10013C158, &qword_10013C150, (void (*)(void))sub_100020D68);
  v115 = AnyView.init<A>(_:)(&v117, v32, v33);
  v114 = AnyView.init<A>(_:)(v115, &type metadata for EmptyView, &protocol witness table for EmptyView);
  v108 = a1;
  v113 = v27;
  v34 = 0;
  if (a1)
  {
    v35 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v36 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    v34 = ObservedObject.init(wrappedValue:)(a1, v35, v36);
  }
  else
  {
    v37 = 0;
  }
  v117 = (char *)v34;
  v118 = v37;
  v38 = AnyView.init<A>(_:)(&v117, v32, v33);
  v39 = v111;
  v40 = *(_QWORD *)&v111[qword_100141788];
  swift_retain(v40);
  v41 = static ObservableObject.environmentStore.getter(v14, v109);
  KeyPath = swift_getKeyPath(&unk_1000E9C38);
  v43 = swift_getKeyPath(&unk_1000E9C68);
  v109 = qword_100141778;
  v44 = *(void **)&v39[qword_100141778];
  v45 = v24;
  v117 = (char *)v24;
  v118 = v110;
  v46 = v113;
  v47 = v114;
  v48 = v115;
  *(_QWORD *)&v119 = v113;
  *((_QWORD *)&v119 + 1) = v115;
  *(_QWORD *)&v120 = v114;
  *((_QWORD *)&v120 + 1) = v38;
  v121 = 1;
  v122 = 4;
  v123 = v41;
  v124 = v40;
  v125 = KeyPath;
  v126 = 1;
  v127 = v43;
  v128 = v44;
  v107 = v45;
  ((void (*)(void))swift_retain_n)();
  swift_retain_n(v46, 2);
  swift_retain_n(v48, 2);
  swift_retain_n(v47, 2);
  v110 = v38;
  swift_retain_n(v38, 2);
  v105 = v41;
  swift_retain(v41);
  v106 = v40;
  swift_retain(v40);
  v104 = KeyPath;
  swift_retain(KeyPath);
  v103 = v43;
  swift_retain(v43);
  swift_unknownObjectRetain(v44);
  v49 = v44;
  v50 = sub_100008F88(&qword_10013C168);
  v51 = sub_100020E90();
  v52 = AnyView.init<A>(_:)(&v117, v50, v51);
  v53 = (objc_class *)type metadata accessor for SystemApertureAccessoryViewController();
  v54 = objc_allocWithZone(v53);
  v55 = sub_1000DB378(v52);
  v56 = *(void **)&v39[qword_100141780];
  *(_QWORD *)&v39[qword_100141780] = v55;
  v57 = v55;

  v58 = *(char **)&v39[v109];
  *((_QWORD *)&v119 + 1) = v112;
  *(_QWORD *)&v120 = &off_10012A260;
  v117 = v39;
  v59 = (uint64_t)&v58[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate];
  swift_beginAccess(&v58[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate], v116, 33, 0);
  v60 = v39;
  v61 = v58;
  sub_100021060((uint64_t)&v117, v59);
  swift_endAccess(v116);

  objc_msgSend(v60, "addChildViewController:", v57);
  result = (char *)objc_msgSend(v60, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_21;
  }
  v63 = result;
  result = (char *)objc_msgSend(v57, "view");
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v64 = result;
  objc_msgSend(v63, "addSubview:", result);

  objc_msgSend(v57, "didMoveToParentViewController:", v60);
  v65 = objc_allocWithZone(v53);
  v66 = swift_retain(v115);
  v67 = sub_1000DB378(v66);
  v68 = *(void **)&v60[qword_100141798];
  *(_QWORD *)&v60[qword_100141798] = v67;
  v69 = v67;

  v70 = *(void **)&v69[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view];
  v71 = *(void **)&v60[qword_100141790];
  *(_QWORD *)&v60[qword_100141790] = v70;
  v72 = v70;

  objc_msgSend(v60, "addChildViewController:", v69);
  result = (char *)objc_msgSend(v60, "view");
  v73 = v110;
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v74 = result;
  result = (char *)objc_msgSend(v69, "view");
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v75 = result;
  objc_msgSend(v74, "addSubview:", result);

  objc_msgSend(v69, "didMoveToParentViewController:", v60);
  v76 = objc_allocWithZone(v53);
  v77 = swift_retain(v114);
  v78 = sub_1000DB378(v77);
  v79 = *(void **)&v60[qword_1001417A8];
  *(_QWORD *)&v60[qword_1001417A8] = v78;
  v80 = v78;

  v81 = *(void **)&v80[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view];
  v82 = *(void **)&v60[qword_1001417A0];
  *(_QWORD *)&v60[qword_1001417A0] = v81;
  v83 = v81;

  objc_msgSend(v60, "addChildViewController:", v80);
  result = (char *)objc_msgSend(v60, "view");
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v84 = result;
  result = (char *)objc_msgSend(v80, "view");
  if (!result)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v85 = result;
  objc_msgSend(v84, "addSubview:", result);

  objc_msgSend(v80, "didMoveToParentViewController:", v60);
  v86 = objc_allocWithZone(v53);
  v87 = swift_retain(v73);
  v88 = sub_1000DB378(v87);
  v89 = *(void **)&v60[qword_1001417B8];
  *(_QWORD *)&v60[qword_1001417B8] = v88;
  v90 = v88;

  v91 = *(void **)&v90[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view];
  v92 = *(void **)&v60[qword_1001417B0];
  *(_QWORD *)&v60[qword_1001417B0] = v91;
  v93 = v91;

  objc_msgSend(v60, "addChildViewController:", v90);
  result = (char *)objc_msgSend(v60, "view");
  if (!result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v94 = result;
  result = (char *)objc_msgSend(v90, "view");
  if (!result)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v95 = result;
  objc_msgSend(v94, "addSubview:", result);

  v96 = v60;
  objc_msgSend(v90, "didMoveToParentViewController:", v96);

  swift_unknownObjectRelease(v49);
  swift_release(v103);
  swift_release(v104);
  swift_release(v106);
  swift_release(v105);
  swift_release(v73);
  swift_release(v114);
  swift_release(v115);
  v97 = v113;
  swift_release(v113);
  v98 = v107;
  swift_release(v107);
  v99 = *(_QWORD *)&v96[qword_1001417C0];
  if ((v99 & 8) == 0)
    *(_QWORD *)&v96[qword_1001417C0] = v99 | 8;

  v100 = qword_100141750;
  v101 = *(_QWORD *)&v96[qword_100141750];
  swift_release(v73);
  swift_release(v114);
  swift_release(v115);
  swift_release(v97);
  swift_release(v98);
  if (v101 != 4)
    *(_QWORD *)&v96[v100] = 4;
  return v96;
}

_QWORD *sub_10001DF00@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000210A8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for HostedBySystemAperture, &type metadata for HostedBySystemAperture, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10001DF4C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000210A8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for HostedBySystemAperture, &type metadata for HostedBySystemAperture, v1);
}

_QWORD *sub_10001DF94@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_100008E40();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for RemoteAlertTransitioningDelegateKey, &type metadata for RemoteAlertTransitioningDelegateKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_10001DFE0(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_100008E40();
  swift_unknownObjectRetain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for RemoteAlertTransitioningDelegateKey, &type metadata for RemoteAlertTransitioningDelegateKey, v1);
}

uint64_t sub_10001E03C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  __chkstk_darwin(a1, a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return UIHostingController.init(rootView:)(v2);
}

id sub_10001E0B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_10013ABD8 != -1)
    swift_once(&qword_10013ABD8, sub_10001C45C);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013BF00);
  v3 = swift_retain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain(v9);
    v14 = sub_10003A834(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    swift_release(a1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating AirDropTransfer system aperture view controller for transfer ID: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  v10 = objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureViewController());
  v11 = swift_retain(a1);
  v12 = sub_10005BAB8(v11);
  swift_release(a1);
  return v12;
}

char *sub_10001E294(__int128 *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  __int128 v10;
  id v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  objc_class *v20;
  char *v21;
  char *result;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  id v28;
  char *v29;
  id v30;
  char *v31;
  char *v32;
  objc_super v33;
  _OWORD v34[2];
  char v35;
  __int128 v36;

  v3 = type metadata accessor for UIHostingControllerSizingOptions(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *a1;
  v8 = (void *)*((_QWORD *)a1 + 3);
  v9 = objc_allocWithZone((Class)sub_100008F88((uint64_t *)&unk_10013C220));
  v10 = a1[1];
  v34[0] = *a1;
  v34[1] = v10;
  v35 = *((_BYTE *)a1 + 32);
  sub_1000210F4((uint64_t)&v36);
  v11 = v8;
  v12 = v1;
  v13 = (void *)UIHostingController.init(rootView:)(v34);
  v14 = sub_100008F88((uint64_t *)&unk_10013C1F0);
  v15 = swift_allocObject(v14, ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72), *(unsigned __int8 *)(v4 + 80) | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1000E9370;
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  *(_QWORD *)&v34[0] = v15;
  v16 = sub_100008694((unint64_t *)&unk_1001418C0, (uint64_t (*)(uint64_t))&type metadata accessor for UIHostingControllerSizingOptions, (uint64_t)&protocol conformance descriptor for UIHostingControllerSizingOptions);
  v17 = sub_100008F88((uint64_t *)&unk_10013C200);
  v18 = sub_10000CB94((unint64_t *)&unk_1001418D0, (uint64_t *)&unk_10013C200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v34, v17, v18, v3, v16);
  dispatch thunk of UIHostingController.sizingOptions.setter(v7);
  *(_QWORD *)&v12[qword_10013C030] = v13;
  v19 = v13;

  v20 = (objc_class *)sub_100008F88(&qword_10013C218);
  v33.receiver = v12;
  v33.super_class = v20;
  v21 = (char *)objc_msgSendSuper2(&v33, "initWithNibName:bundle:", 0, 0);
  result = (char *)objc_msgSend(v21, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v23 = result;
  v24 = qword_10013C030;
  result = (char *)objc_msgSend(*(id *)&v21[qword_10013C030], "view");
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v25 = result;
  objc_msgSend(v23, "addSubview:", result);

  objc_msgSend(v21, "addChildViewController:", *(_QWORD *)&v21[v24]);
  result = (char *)objc_msgSend(v21, "view");
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v26 = result;
  v27 = (void *)objc_opt_self(UIColor);
  v28 = objc_msgSend(v27, "clearColor");
  objc_msgSend(v26, "setBackgroundColor:", v28);

  result = (char *)objc_msgSend(v19, "view");
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v29 = result;
  v30 = objc_msgSend(v27, "clearColor");
  objc_msgSend(v29, "setBackgroundColor:", v30);

  result = (char *)objc_msgSend(v21, "view");
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v31 = result;
  objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  result = (char *)objc_msgSend(v19, "view");
  if (result)
  {
    v32 = result;
    objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    return v21;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *sub_10001E600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  char v20;
  id v21;
  char *v22;
  uint64_t v24;
  __int128 v25;
  char v26;
  id v27;
  char v28;

  if (qword_10013ABD8 != -1)
    swift_once(&qword_10013ABD8, sub_10001C45C);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013BF00);
  v3 = swift_retain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v25 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain(v9);
    v24 = sub_10003A834(v8, v9, (uint64_t *)&v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_release(a1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating AirDropTransfer hosting controller for transfer ID: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  v10 = type metadata accessor for AirDropTransferSession(0);
  v11 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
  v12 = swift_retain(a1);
  v13 = ObservedObject.init(wrappedValue:)(v12, v10, v11);
  v15 = v14;
  v16 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.043, 0.608, 1.0, 1.0);
  if (qword_10013ABE0 != -1)
    swift_once(&qword_10013ABE0, sub_100023E74);
  v17 = qword_100147D90;
  KeyPath = swift_getKeyPath(&unk_1000E9C90);
  v19 = swift_getKeyPath(&unk_1000E9CB8);
  static Published.subscript.getter(&v25, v17, KeyPath, v19);
  swift_release(KeyPath);
  swift_release(v19);
  v20 = v25;
  *(_QWORD *)&v25 = v13;
  *((_QWORD *)&v25 + 1) = v15;
  v26 = 0;
  v27 = v16;
  v28 = v20;
  v21 = objc_allocWithZone((Class)sub_100008F88(&qword_10013C218));
  v22 = sub_10001E294(&v25);

  swift_release(v15);
  return v22;
}

char *sub_10001E8E4(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_10013ABD8 != -1)
    swift_once(&qword_10013ABD8, sub_10001C45C);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013BF00);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v17 = v7;
    v8 = type metadata accessor for UUID(0);
    v9 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    v12 = v11;
    v16 = sub_10003A834(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);

    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating system aperture view controller for nearby sharing interaction with ID: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v13 = objc_allocWithZone((Class)sub_100008F88((uint64_t *)&unk_10013C110));
  v14 = v3;
  return sub_10001D4B8(v3);
}

char *sub_10001EADC(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  objc_class *v18;
  char *v19;
  char *result;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  id v26;
  char *v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  objc_super v32;
  uint64_t v33;

  v3 = type metadata accessor for UIHostingControllerSizingOptions(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone((Class)sub_100008F88(&qword_10013C1E8));
  v33 = (uint64_t)a1;
  v9 = a1;
  v10 = v1;
  v11 = (void *)UIHostingController.init(rootView:)(&v33);
  v12 = sub_100008F88((uint64_t *)&unk_10013C1F0);
  v13 = swift_allocObject(v12, ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72), *(unsigned __int8 *)(v4 + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_1000E9370;
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  v33 = v13;
  v14 = sub_100008694((unint64_t *)&unk_1001418C0, (uint64_t (*)(uint64_t))&type metadata accessor for UIHostingControllerSizingOptions, (uint64_t)&protocol conformance descriptor for UIHostingControllerSizingOptions);
  v15 = sub_100008F88((uint64_t *)&unk_10013C200);
  v16 = sub_10000CB94((unint64_t *)&unk_1001418D0, (uint64_t *)&unk_10013C200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v15, v16, v3, v14);
  dispatch thunk of UIHostingController.sizingOptions.setter(v7);
  *(_QWORD *)&v10[qword_10013C030] = v11;
  v17 = v11;

  v18 = (objc_class *)sub_100008F88(&qword_10013C108);
  v32.receiver = v10;
  v32.super_class = v18;
  v19 = (char *)objc_msgSendSuper2(&v32, "initWithNibName:bundle:", 0, 0);
  result = (char *)objc_msgSend(v19, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v21 = result;
  v22 = qword_10013C030;
  result = (char *)objc_msgSend(*(id *)&v19[qword_10013C030], "view");
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v23 = result;
  objc_msgSend(v21, "addSubview:", result);

  objc_msgSend(v19, "addChildViewController:", *(_QWORD *)&v19[v22]);
  result = (char *)objc_msgSend(v19, "view");
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v24 = result;
  v25 = (void *)objc_opt_self(UIColor);
  v26 = objc_msgSend(v25, "clearColor");
  objc_msgSend(v24, "setBackgroundColor:", v26);

  result = (char *)objc_msgSend(v17, "view");
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v27 = result;
  v28 = objc_msgSend(v25, "clearColor");
  objc_msgSend(v27, "setBackgroundColor:", v28);

  result = (char *)objc_msgSend(v19, "view");
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v29 = result;
  objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  result = (char *)objc_msgSend(v17, "view");
  if (result)
  {
    v30 = result;
    objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    return v19;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *sub_10001EE24(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_10013ABD8 != -1)
    swift_once(&qword_10013ABD8, sub_10001C45C);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013BF00);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v18 = v7;
    v8 = type metadata accessor for UUID(0);
    v9 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    v12 = v11;
    v17 = sub_10003A834(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);

    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating live activities view controller for nearby sharing interaction with ID: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v13 = objc_allocWithZone((Class)sub_100008F88(&qword_10013C108));
  v14 = v3;
  v15 = sub_10001EADC(v3);

  return v15;
}

double sub_10001F02C(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  double result;
  char v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __objc2_class *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  uint8_t *v64;
  _QWORD *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  NSObject *v76;
  uint64_t v77;
  uint8_t *v78;
  id v79;
  int v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  id v95;
  char *v96;
  __n128 v97;
  id v98;
  id v99;
  uint64_t v100;
  uint32_t *p_cb;
  void *v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint8_t *v106;
  id v107;
  void *v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint8_t *v112;
  id v113;
  id v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint8_t *v123;
  uint64_t v124;
  void *v125;
  char v126;
  uint64_t v127;
  id v128;
  char *v129;
  id v130;
  void *v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint8_t *v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint8_t *v140;
  NSObject *v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  _QWORD *v145;
  void *v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t ObjectType;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  _QWORD *v153;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v155;
  id v156;
  os_log_type_t v157;
  uint8_t *v158;
  _QWORD *v159;
  id v160;
  uint64_t v161;
  id v162;
  id v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE v180[16];
  uint64_t v181;
  _QWORD v182[2];

  if (qword_10013ABD8 != -1)
    swift_once(&qword_10013ABD8, sub_10001C45C);
  v4 = type metadata accessor for Logger(0);
  sub_100009558(v4, (uint64_t)qword_10013BF00);
  v5 = a2;
  v6 = a1;
  v7 = v5;
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v179 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = objc_msgSend(v7, "role");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v181 = sub_10003A834(v14, v16, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2080;
    v17 = type metadata accessor for ActivityScene(0);
    if (swift_dynamicCastClass(v8, v17)
      && (KeyPath = swift_getKeyPath(&unk_1000E9BC0),
          dispatch thunk of ActivityScene.subscript.getter(&v181, KeyPath, &protocol witness table for SceneSettingScopes.ActivitySettings.ActivityIdentifierKey), swift_release(KeyPath), (v19 = v182[0]) != 0))
    {
      v20 = v181;
    }
    else
    {
      swift_bridgeObjectRelease(0);
      v19 = 0xE500000000000000;
      v20 = 0x3E6C696E3CLL;
    }
    v181 = sub_10003A834(v20, v19, &v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SessionSceneDelegate: Scene will connect called with role: %s, activity identifier: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  v21 = type metadata accessor for ActivityScene(0);
  v22 = swift_dynamicCastClass(v8, v21);
  if (!v22)
  {
    v34 = Logger.logObject.getter(0);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "SessionSceneDelegate: Received a UIScene that is not of type SessionScene.", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }
    goto LABEL_16;
  }
  v23 = (void *)v22;
  v24 = v8;
  v25 = objc_msgSend(v24, "session");
  v26 = objc_msgSend(v25, "role");

  v27 = (void *)static UISceneSessionRole.activityBanner.getter();
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v30 = v29;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v33 = v31;
  if (v28 == v32 && v30 == v31)
  {

    swift_bridgeObjectRelease_n(v30, 2);
  }
  else
  {
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0);

    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v33);
    if ((v38 & 1) == 0)
      goto LABEL_21;
  }
  if (qword_10013ADA0 != -1)
    swift_once(&qword_10013ADA0, sub_1000CF1D4);
  *(_BYTE *)(qword_100148088 + 48) = 1;
LABEL_21:
  v39 = v24;
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v181 = v43;
    *(_DWORD *)v42 = 136315138;
    v44 = objc_msgSend(v23, "description");
    v45 = v23;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v48 = v47;

    v49 = v46;
    v23 = v45;
    v179 = sub_10003A834(v49, v48, &v181);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180);

    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "SessionSceneDelegate: Connecting session scene: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

  }
  v50 = swift_getKeyPath(&unk_1000E9BC0);
  dispatch thunk of ActivityScene.subscript.getter(&v181, v50, &protocol witness table for SceneSettingScopes.ActivitySettings.ActivityIdentifierKey);
  swift_release(v50);
  v51 = v182[0];
  v52 = _TtC9AirDropUI29CNSecureContactViewController;
  v53 = &unk_100147000;
  if (v182[0])
  {
    v54 = v181;
    if (qword_10013ABF0 != -1)
      swift_once(&qword_10013ABF0, sub_100028C8C);
    v55 = qword_100147DA0;
    v56 = sub_100028874(v54, v51);
    v57 = objc_retain(*(id *)(v55
                            + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator));
    v58 = v54;
    v59 = v56;
    v53 = &unk_100147000;
    v60 = (unint64_t)sub_1000835FC(v58, v51);

    swift_bridgeObjectRelease(v51);
    if (v59 | v60)
      goto LABEL_39;
LABEL_35:
    v72 = v39;
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v175 = v60;
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v174 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v75 = 138412290;
      v181 = (uint64_t)v23;
      v76 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182);
      *v174 = v23;

      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Unable to find an AirDrop transfer, nearby sharing interaction, or background activity to represent with session scene: %@", v75, 0xCu);
      v77 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(v174, 1, v77);
      swift_slowDealloc(v174, -1, -1);
      v78 = v75;
      v60 = v175;
      swift_slowDealloc(v78, -1, -1);
    }
    else
    {

      v73 = v72;
    }

    goto LABEL_39;
  }
  v61 = v39;
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, (os_log_type_t)v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v64 = 138412290;
    v181 = (uint64_t)v23;
    v66 = v61;
    v52 = _TtC9AirDropUI29CNSecureContactViewController;
    v53 = (_QWORD *)&unk_100147000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182);
    *v65 = v23;

    _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v63, "Falling back to first AirDrop transfer for session scene with missing activity ID: %@", v64, 0xCu);
    v67 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v65, 1, v67);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);
  }
  else
  {

    v62 = v61;
  }

  if (v52[76].cache != (void *)-1)
    swift_once(&qword_10013ABF0, sub_100028C8C);
  v68 = v53[436];
  v69 = swift_getKeyPath(&unk_1000E9BF0);
  v70 = swift_getKeyPath(&unk_1000E9C18);
  static Published.subscript.getter(&v181, v68, v69, v70);
  swift_release(v69);
  swift_release(v70);
  v71 = v181;
  v59 = sub_1000CEDFC(v181);
  swift_bridgeObjectRelease(v71);
  v60 = 0;
  if (!v59)
    goto LABEL_35;
LABEL_39:
  v79 = objc_msgSend(v23, "SBUI_isHostedBySystemAperture");
  v80 = (int)v79;
  v81 = Logger.logObject.getter(v79);
  v82 = static os_log_type_t.default.getter();
  v83 = os_log_type_enabled(v81, v82);
  if (v80)
  {
    v176 = (void *)v60;
    if (v83)
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "SessionSceneDelegate: Received ActivityKit scene hosted by system aperture", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }

    v85 = swift_getKeyPath(&unk_1000E9BC0);
    dispatch thunk of ActivityScene.subscript.getter(&v181, v85, &protocol witness table for SceneSettingScopes.ActivitySettings.ActivityIdentifierKey);
    *(_QWORD *)&v87 = swift_release(v85).n128_u64[0];
    v88 = v182[0];
    if (v182[0])
    {
      v89 = v181;
    }
    else
    {
      v98 = objc_msgSend(v23, "session", v87);
      v99 = objc_msgSend(v98, "persistentIdentifier");

      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
      v88 = v100;

    }
    if (qword_10013ABF0 != -1)
      v86 = swift_once(&qword_10013ABF0, sub_100028C8C);
    p_cb = &OBJC_PROTOCOL___SFCollaborationItem.cb;
    if (*(_QWORD *)(*(_QWORD *)(v53[436]
                               + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                   + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity))
    {
      v102 = v23;
      v103 = Logger.logObject.getter(v86);
      v104 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v103, v104))
      {
        v105 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v105 = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "Creating system aperture view controller for nearby sharing interaction failure", v105, 2u);
        v106 = v105;
        p_cb = &OBJC_PROTOCOL___SFCollaborationItem.cb;
        swift_slowDealloc(v106, -1, -1);
      }

      v107 = objc_allocWithZone((Class)sub_100008F88((uint64_t *)&unk_10013C110));
      v108 = sub_10001D4B8(0);
      v109 = Logger.logObject.getter(v108);
      v110 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v109, v110))
      {
        v111 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v111 = 0;
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "SessionSceneDelegate: using boop failure", v111, 2u);
        v112 = v111;
        p_cb = &OBJC_PROTOCOL___SFCollaborationItem.cb;
        swift_slowDealloc(v112, -1, -1);
      }

      goto LABEL_85;
    }
    v114 = v39;
    v115 = (uint64_t *)(v177 + OBJC_IVAR____TtC9AirDropUI20SessionSceneDelegate_systemApertureElementProvidersByID);
    swift_beginAccess(v177 + OBJC_IVAR____TtC9AirDropUI20SessionSceneDelegate_systemApertureElementProvidersByID, &v181, 0, 0);
    v116 = *v115;
    if (*(_QWORD *)(*v115 + 16))
    {
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v116);
      v117 = sub_10003AF58(v89, v88);
      if ((v118 & 1) != 0)
      {
        v102 = v23;
        v108 = *(void **)(*(_QWORD *)(v116 + 56) + 8 * v117);
        swift_unknownObjectRetain_n(v108, 2);
        swift_bridgeObjectRelease(v88);
        v119 = swift_bridgeObjectRelease(v116);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v120, v121))
        {

          swift_unknownObjectRelease(v108);
          goto LABEL_84;
        }
        v122 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v122 = 0;
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "SessionSceneDelegate: using cachedSystemApertureElementProvider", v122, 2u);
        v123 = v122;
        p_cb = &OBJC_PROTOCOL___SFCollaborationItem.cb;
        swift_slowDealloc(v123, -1, -1);
        swift_unknownObjectRelease(v108);
LABEL_76:

LABEL_84:
        v39 = v114;
LABEL_85:
        ObjectType = swift_getObjectType(v108);
        v150 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for AirDropTransferSessionUpdateDelegate);
        if (v150)
          v151 = v150;
        else
          v151 = 0;
        if (v150)
          v152 = v108;
        else
          v152 = 0;
        if (v59)
        {
          if (v152)
          {
            *(_QWORD *)(v59 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate + 8) = v151;
            swift_unknownObjectWeakAssign();
          }
        }
        swift_unknownObjectRetain(v108);
        objc_msgSend(v102, "setSystemApertureElementViewControllerProvider:", v108);
        v153 = (_QWORD *)(v177 + *((_QWORD *)p_cb + 484));
        swift_beginAccess(v153, &v179, 33, 0);
        swift_unknownObjectRetain(v108);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v153);
        v178 = *v153;
        *v153 = 0x8000000000000000;
        sub_1000892A8((uint64_t)v108, v89, v88, isUniquelyReferenced_nonNull_native);
        v155 = *v153;
        *v153 = v178;
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease(v155);
        swift_endAccess(&v179);
        swift_release(v59);

        swift_unknownObjectRelease_n(v108, 2);
        return result;
      }
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease(v116);
    }
    if (v176)
    {
      v102 = v23;
      v120 = v176;
      v108 = sub_10001E8E4(v120);
      v132 = Logger.logObject.getter(v108);
      v133 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v132, v133))
      {
        v134 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v134 = 0;
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "SessionSceneDelegate: using nearbySharingInteractionViewModel", v134, 2u);
        v135 = v134;
        p_cb = (_DWORD *)(&OBJC_PROTOCOL___SFCollaborationItem + 64);
        swift_slowDealloc(v135, -1, -1);
      }

      goto LABEL_76;
    }
    v102 = v23;
    if (v59)
    {
      v136 = swift_retain(v59);
      v108 = sub_10001E0B8(v136);
      v137 = Logger.logObject.getter(v108);
      v138 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v137, v138))
      {
        v139 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v139 = 0;
        _os_log_impl((void *)&_mh_execute_header, v137, v138, "SessionSceneDelegate: using airDropTransferSession", v139, 2u);
        v140 = v139;
        p_cb = &OBJC_PROTOCOL___SFCollaborationItem.cb;
        swift_slowDealloc(v140, -1, -1);
      }

      swift_release(v59);
      goto LABEL_85;
    }
    swift_bridgeObjectRelease(v88);
    v156 = v39;
    v34 = Logger.logObject.getter(v156);
    v157 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v157))
    {
      v158 = (uint8_t *)swift_slowAlloc(12, -1);
      v159 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v158 = 138412290;
      v179 = (uint64_t)v23;
      v160 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180);
      *v159 = v23;

      _os_log_impl((void *)&_mh_execute_header, v34, v157, "Unable to find an AirDrop transfer or a nearby sharing interaction to show in system aperture scene: %@", v158, 0xCu);
      v161 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(v159, 1, v161);
      swift_slowDealloc(v159, -1, -1);
      swift_slowDealloc(v158, -1, -1);

    }
    else
    {

    }
LABEL_16:

    return result;
  }
  if (v83)
  {
    v90 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v90 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "SessionSceneDelegate: Received ActivityKit scene not hosted in system aperture", v90, 2u);
    swift_slowDealloc(v90, -1, -1);
  }

  if (qword_10013ABF0 != -1)
    v91 = swift_once(&qword_10013ABF0, sub_100028C8C);
  if (*(_QWORD *)(*(_QWORD *)(v53[436]
                             + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity))
  {
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v94 = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Creating live activities view controller for nearby sharing interaction failure", v94, 2u);
      swift_slowDealloc(v94, -1, -1);
    }

    v95 = objc_allocWithZone((Class)sub_100008F88(&qword_10013C108));
    v96 = sub_10001EADC(0);
    goto LABEL_70;
  }
  if (v60)
  {
    v113 = (id)v60;
    v96 = sub_10001EE24(v113);

LABEL_70:
    v128 = objc_allocWithZone((Class)type metadata accessor for SFSecureWindow(0, v97));
    v129 = v96;
    v130 = objc_msgSend(v128, "initWithWindowScene:", v23);
    objc_msgSend(v130, "setRootViewController:", v129);
    objc_msgSend(v130, "makeKeyAndVisible");
    v131 = *(void **)(v177 + OBJC_IVAR____TtC9AirDropUI20SessionSceneDelegate_window);
    *(_QWORD *)(v177 + OBJC_IVAR____TtC9AirDropUI20SessionSceneDelegate_window) = v130;

    *(_QWORD *)&result = swift_release(v59).n128_u64[0];
    return result;
  }
  v124 = sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
  v125 = (void *)static NSUserDefaults.airdrop.getter(v124);
  v126 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

  if (v59 && (v126 & 1) != 0)
  {
    v127 = swift_retain(v59);
    v96 = sub_10001E600(v127);
    v97 = swift_release(v59);
    goto LABEL_70;
  }
  v141 = v39;
  v142 = Logger.logObject.getter(v141);
  v143 = static os_log_type_t.error.getter();
  v173 = v59;
  if (os_log_type_enabled(v142, v143))
  {
    v144 = (uint8_t *)swift_slowAlloc(12, -1);
    v145 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v144 = 138412290;
    v181 = (uint64_t)v23;
    v146 = v23;
    v147 = v141;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182);
    *v145 = v146;

    _os_log_impl((void *)&_mh_execute_header, v142, v143, "Unable to find an AirDrop transfer or a nearby sharing interaction to represent with session scene: %@", v144, 0xCu);
    v148 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v145, 1, v148);
    swift_slowDealloc(v145, -1, -1);
    swift_slowDealloc(v144, -1, -1);
  }
  else
  {

    v142 = v141;
  }

  v162 = -[NSObject session](v141, "session");
  v163 = objc_msgSend(v162, "role");

  v164 = (void *)static UISceneSessionRole.activityBanner.getter();
  v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
  v167 = v166;
  v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
  v170 = v168;
  if (v165 == v169 && v167 == v168)
  {

    swift_bridgeObjectRelease_n(v167, 2);
  }
  else
  {
    v171 = _stringCompareWithSmolCheck(_:_:expecting:)(v165, v167, v169, v168, 0);

    swift_bridgeObjectRelease(v167);
    swift_bridgeObjectRelease(v170);
    if ((v171 & 1) == 0)
    {

      *(_QWORD *)&result = swift_release(v173).n128_u64[0];
      return result;
    }
  }
  if (qword_10013ADA0 != -1)
    swift_once(&qword_10013ADA0, sub_1000CF1D4);
  v172 = qword_100148088;
  swift_retain(qword_100148088);
  sub_1000D2504(0);
  swift_release(v172);

  *(_QWORD *)&result = swift_release(v173).n128_u64[0];
  return result;
}

void sub_1000204A4(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  if (qword_10013ABD8 != -1)
    swift_once(&qword_10013ABD8, sub_10001C45C);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013BF00);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v36 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = objc_msgSend(v3, "session");
    v9 = objc_msgSend(v8, "role");

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v37 = sub_10003A834(v10, v12, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v6 + 12) = 2080;
    v13 = type metadata accessor for ActivityScene(0);
    if (swift_dynamicCastClass(v3, v13)
      && (KeyPath = swift_getKeyPath(&unk_1000E9BC0),
          dispatch thunk of ActivityScene.subscript.getter(&v37, KeyPath, &protocol witness table for SceneSettingScopes.ActivitySettings.ActivityIdentifierKey), swift_release(KeyPath), (v15 = v38) != 0))
    {
      v16 = v37;
    }
    else
    {
      swift_bridgeObjectRelease(0);
      v15 = 0xE500000000000000;
      v16 = 0x3E6C696E3CLL;
    }
    v37 = sub_10003A834(v16, v15, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SessionSceneDelegate: sceneDidDisconnect with role: %s, activity identifier: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v17 = objc_msgSend(v3, "session");
  v18 = objc_msgSend(v17, "role");

  v19 = (void *)static UISceneSessionRole.activityBanner.getter();
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v25 = v23;
  if (v20 == v24 && v22 == v23)
  {

    swift_bridgeObjectRelease_n(v22, 2);
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v23, 0);

    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v25);
    if ((v26 & 1) == 0)
      goto LABEL_17;
  }
  if (qword_10013ADA0 != -1)
    swift_once(&qword_10013ADA0, sub_1000CF1D4);
  v27 = qword_100148088;
  swift_retain(qword_100148088);
  sub_1000D2504(0);
  swift_release(v27);
LABEL_17:
  v28 = type metadata accessor for ActivityScene(0);
  if (swift_dynamicCastClass(v3, v28))
  {
    v29 = swift_getKeyPath(&unk_1000E9BC0);
    v30 = v3;
    dispatch thunk of ActivityScene.subscript.getter(&v37, v29, &protocol witness table for SceneSettingScopes.ActivitySettings.ActivityIdentifierKey);
    swift_release(v29);
    v31 = v38;
    if (v38)
    {
      v32 = v37;
      if (qword_10013ABF0 != -1)
        swift_once(&qword_10013ABF0, sub_100028C8C);
      v33 = objc_retain(*(id *)(qword_100147DA0
                              + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator));
      sub_10007FBA8(v32, v31);
      swift_bridgeObjectRelease(v31);

    }
  }
  else
  {
    v30 = Logger.logObject.getter(0);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v34, "SessionSceneDelegate: Received a UIScene that is not of type SessionScene.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }
  }

}

void sub_10002097C(void *a1, const char *a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_10013ABD8 != -1)
    swift_once(&qword_10013ABD8, sub_10001C45C);
  v4 = type metadata accessor for Logger(0);
  sub_100009558(v4, (uint64_t)qword_10013BF00);
  v14 = a1;
  v5 = Logger.logObject.getter(v14);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = objc_msgSend(v14, "session");
    v10 = objc_msgSend(v9, "role");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v15 = sub_10003A834(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);

    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
}

void sub_100020B8C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000F05A0, "AirDropUI/SessionSceneDelegate.swift", 36, 2, 280, 0);
  __break(1u);
}

void sub_100020BE8()
{
  _swift_stdlib_reportUnimplementedInitializer("AirDropUI.LiveActivitiesHostingController", 41, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

uint64_t sub_100020C14()
{
  return SceneSettingScopes.ActivitySettings.activityIdentifier.getter();
}

unint64_t sub_100020C3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C130;
  if (!qword_10013C130)
  {
    v1 = sub_10000950C(&qword_10013C138);
    sub_100020CC0();
    sub_100008694(&qword_10013C148, type metadata accessor for NearbySharingInteractionFailureView, (uint64_t)&unk_1000EEAF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C130);
  }
  return result;
}

unint64_t sub_100020CC0()
{
  unint64_t result;

  result = qword_10013C140;
  if (!qword_10013C140)
  {
    result = swift_getWitnessTable(&unk_1000EEB40, &type metadata for NearbySharingInteractionBannerContent);
    atomic_store(result, (unint64_t *)&qword_10013C140);
  }
  return result;
}

uint64_t sub_100020D04(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000950C(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100020D68()
{
  unint64_t result;

  result = qword_10013C160;
  if (!qword_10013C160)
  {
    result = swift_getWitnessTable(&unk_1000EEAA0, &type metadata for NearbySharingInteractionStatusIndicator);
    atomic_store(result, (unint64_t *)&qword_10013C160);
  }
  return result;
}

_QWORD *sub_100020DAC@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1000210A8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for HostedBySystemAperture, &type metadata for HostedBySystemAperture, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_100020DF8(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1000210A8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for HostedBySystemAperture, &type metadata for HostedBySystemAperture, v1);
}

_QWORD *sub_100020E40@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_100008E40();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for RemoteAlertTransitioningDelegateKey, &type metadata for RemoteAlertTransitioningDelegateKey, v2);
  *a1 = v4;
  return result;
}

unint64_t sub_100020E90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C170;
  if (!qword_10013C170)
  {
    v1 = sub_10000950C(&qword_10013C168);
    sub_100020F14();
    sub_10000CB94(&qword_10013C1C0, &qword_10013C1C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C170);
  }
  return result;
}

unint64_t sub_100020F14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C178;
  if (!qword_10013C178)
  {
    v1 = sub_10000950C(&qword_10013C180);
    sub_100020F98();
    sub_10000CB94(&qword_10013C1B0, &qword_10013C1B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C178);
  }
  return result;
}

unint64_t sub_100020F98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C188;
  if (!qword_10013C188)
  {
    v1 = sub_10000950C(&qword_10013C190);
    sub_10002101C();
    sub_10000CB94(&qword_10013C1A0, &qword_10013C1A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C188);
  }
  return result;
}

unint64_t sub_10002101C()
{
  unint64_t result;

  result = qword_10013C198;
  if (!qword_10013C198)
  {
    result = swift_getWitnessTable(&unk_1000EF9C8, &type metadata for SystemApertureElement);
    atomic_store(result, (unint64_t *)&qword_10013C198);
  }
  return result;
}

uint64_t sub_100021060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013C1D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000210A8()
{
  unint64_t result;

  result = qword_10013C1D8;
  if (!qword_10013C1D8)
  {
    result = swift_getWitnessTable(&unk_1000EFA88, &type metadata for HostedBySystemAperture);
    atomic_store(result, (unint64_t *)&qword_10013C1D8);
  }
  return result;
}

uint64_t sub_1000210F4(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10002111C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100021148(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  __chkstk_darwin(a1, a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  return String.init<A>(reflecting:)(v4, a2);
}

uint64_t destroy for AirDropIncomingPreviewImage(uint64_t a1)
{
  uint64_t result;

  swift_release(*(_QWORD *)(a1 + 8));
  result = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  swift_retain(v4);
  if ((unint64_t)(v6 - 1) >= 2)
  {
    *(_QWORD *)(a1 + 24) = *v5;
    *(_QWORD *)(a1 + 32) = v6;
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 32) - 1;
  if ((unint64_t)(v6 - 1) >= 2)
  {
    if (v7 >= 2)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v6);
      goto LABEL_8;
    }
    sub_10000CC5C(a1 + 24, &qword_10013B878);
    goto LABEL_6;
  }
  if (v7 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
LABEL_8:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v7 - 1) >= 2)
  {
    v8 = *(_QWORD *)(a2 + 32);
    if ((unint64_t)(v8 - 1) >= 2)
    {
      *(_QWORD *)(a1 + 24) = *v6;
      *(_QWORD *)(a1 + 32) = v8;
      swift_bridgeObjectRelease(v7);
      goto LABEL_6;
    }
    sub_10000CC5C(a1 + 24, &qword_10013B878);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
LABEL_6:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropIncomingPreviewImage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropIncomingPreviewImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropIncomingPreviewImage()
{
  return &type metadata for AirDropIncomingPreviewImage;
}

uint64_t sub_1000214B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112898, 1);
}

uint64_t sub_1000214C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  double v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD v38[3];
  __int128 v39;
  __int128 v40;
  _BYTE v41[16];

  v1 = sub_100008F88(&qword_10013C290);
  __chkstk_darwin(v1, v2);
  v4 = (_QWORD *)((char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100008F88(&qword_10013C298);
  v7 = __chkstk_darwin(v5, v6);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)v38 - v11;
  v13 = sub_100008F88(&qword_10013C2A0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013C2A8);
  __chkstk_darwin(v17, v18);
  v20 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    {
      if (qword_10013AC68 != -1)
        swift_once(&qword_10013AC68, sub_10005F004);
      v21 = &qword_100147E78;
    }
    else
    {
      if (qword_10013AC60 != -1)
        swift_once(&qword_10013AC60, sub_10005EFF0);
      v21 = &qword_100147E70;
    }
  }
  else
  {
    if (qword_10013AC70 != -1)
      swift_once(&qword_10013AC70, sub_10005F018);
    v21 = &qword_100147E80;
  }
  v22 = *(double *)v21;
  sub_100022EDC((_OWORD *)(v0 + 24), &v39);
  v23 = (uint64_t)sub_100022EDC(&v39, &v40);
  if (*((_QWORD *)&v40 + 1) == 2)
    goto LABEL_16;
  if (*((_QWORD *)&v40 + 1) != 1)
  {
    v23 = sub_10000CBD4((uint64_t)&v40, (uint64_t)v41, &qword_10013B878);
LABEL_16:
    *v4 = static Alignment.bottomTrailing.getter(v23);
    v4[1] = v28;
    v29 = sub_100008F88(&qword_10013C2B0);
    v30 = sub_100022940((uint64_t *)v0, (uint64_t)v4 + *(int *)(v29 + 44), v22);
    v31 = static Alignment.center.getter(v30);
    _FrameLayout.init(width:height:alignment:)(v38, *(_QWORD *)&v22, 0, *(_QWORD *)&v22, 0, v31, v32);
    sub_10000CC18((uint64_t)v4, (uint64_t)v9, &qword_10013C290);
    v33 = &v9[*(int *)(v5 + 36)];
    v34 = v38[1];
    *(_OWORD *)v33 = v38[0];
    *((_OWORD *)v33 + 1) = v34;
    *((_OWORD *)v33 + 2) = v38[2];
    sub_10000CC5C((uint64_t)v4, &qword_10013C290);
    v24 = &qword_10013C298;
    sub_10000CBD4((uint64_t)v9, (uint64_t)v12, &qword_10013C298);
    sub_10000CC18((uint64_t)v12, (uint64_t)v16, &qword_10013C298);
    swift_storeEnumTagMultiPayload(v16, v13, 1);
    v35 = sub_100022EEC();
    v36 = sub_100023444();
    _ConditionalContent<>.init(storage:)(v16, v17, v5, v35, v36);
    v27 = (uint64_t)v12;
    return sub_10000CC5C(v27, v24);
  }
  sub_10002185C((uint64_t)v20, v22);
  v24 = &qword_10013C2A8;
  sub_10000CC18((uint64_t)v20, (uint64_t)v16, &qword_10013C2A8);
  swift_storeEnumTagMultiPayload(v16, v13, 0);
  v25 = sub_100022EEC();
  v26 = sub_100023444();
  _ConditionalContent<>.init(storage:)(v16, v17, v5, v25, v26);
  v27 = (uint64_t)v20;
  return sub_10000CC5C(v27, v24);
}

uint64_t sub_10002185C@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  void *v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  id v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _OWORD *v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  __int128 v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;

  v189 = a1;
  v177 = (id)sub_100008F88(&qword_10013C3B8);
  __chkstk_darwin(v177, v4);
  v6 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013C3A0);
  __chkstk_darwin(v7, v8);
  v178 = (char *)&v163 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100008F88(&qword_10013C390);
  __chkstk_darwin(v190, v10);
  v176 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100008F88(&qword_10013C3C0);
  __chkstk_darwin(v186, v12);
  v188 = (uint64_t)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100008F88(&qword_10013C3C8);
  __chkstk_darwin(v180, v14);
  v181 = (uint64_t)&v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100008F88(&qword_10013C2C8);
  __chkstk_darwin(v187, v16);
  v182 = (char *)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for RoundedRectangle(0);
  v19 = __chkstk_darwin(v185, v18);
  v175 = (char *)&v163 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  v169 = (char *)&v163 - v22;
  v167 = sub_100008F88(&qword_10013C360);
  __chkstk_darwin(v167, v23);
  v25 = (char *)&v163 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Image.ResizingMode(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  v30 = (char *)&v163 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100008F88(&qword_10013C328);
  __chkstk_darwin(v164, v31);
  v33 = (char *)&v163 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100008F88(&qword_10013C318);
  __chkstk_darwin(v165, v34);
  v168 = (uint64_t)&v163 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100008F88(&qword_10013C308);
  __chkstk_darwin(v166, v36);
  v183 = (uint64_t)&v163 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100008F88(&qword_10013C2F8);
  __chkstk_darwin(v170, v38);
  v184 = (uint64_t)&v163 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100008F88(&qword_10013C2E8);
  __chkstk_darwin(v173, v40);
  v172 = (char *)&v163 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100008F88(&qword_10013C2D8);
  v43 = __chkstk_darwin(v179, v42);
  v171 = (char *)&v163 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43, v45);
  v174 = (uint64_t)&v163 - v46;
  v191 = v2;
  v206 = *v2;
  v47 = *((_QWORD *)&v206 + 1);
  KeyPath = swift_getKeyPath(&unk_1000E9D60);
  v49 = swift_getKeyPath(&unk_1000E9D88);
  v50 = swift_retain(v47);
  static Published.subscript.getter(&v192, v50, KeyPath, v49);
  swift_release(KeyPath);
  swift_release(v49);
  sub_10001AAF0((uint64_t)&v206);
  if (v192 == 1)
  {
    v51 = swift_getKeyPath(&unk_1000E9DF0);
    v52 = swift_getKeyPath(&unk_1000E9E18);
    v53 = swift_retain(v47);
    static Published.subscript.getter(&v192, v53, v51, v52);
    swift_release(v51);
    swift_release(v52);
    sub_10001AAF0((uint64_t)&v206);
    if (v192)
    {
      v178 = (char *)v7;
      v177 = v192;
      v54 = Image.init(uiImage:)();
      (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v30, enum case for Image.ResizingMode.stretch(_:), v26);
      v176 = (char *)Image.resizable(capInsets:resizingMode:)(v30, v54, 0.0, 0.0, 0.0, 0.0);
      v55 = swift_release(v54);
      v56 = (*(uint64_t (**)(char *, uint64_t, __n128))(v27 + 8))(v30, v26, v55);
      v57 = static Alignment.center.getter(v56);
      _FrameLayout.init(width:height:alignment:)(&v192, *(_QWORD *)&a2, 0, *(_QWORD *)&a2, 0, v57, v58);
      v59 = v192;
      v60 = v193;
      v61 = v194;
      v62 = LOBYTE(v195);
      v63 = v196;
      v64 = v197;
      v66 = sub_1000234E0(v47, v65);
      if ((v66 & 1) != 0)
        v67 = 15.0;
      else
        v67 = 0.0;
      v68 = static Alignment.center.getter(v66);
      v70 = v69;
      sub_100022BBC((uint64_t)v191, (uint64_t)v25);
      v71 = (uint64_t *)&v25[*(int *)(v167 + 36)];
      *v71 = v68;
      v71[1] = v70;
      sub_10000CC18((uint64_t)v25, (uint64_t)&v33[*(int *)(v164 + 36)], &qword_10013C360);
      *(_QWORD *)v33 = v176;
      *((_QWORD *)v33 + 1) = 0;
      *((_WORD *)v33 + 8) = 257;
      *((_QWORD *)v33 + 3) = v59;
      v33[32] = v60;
      *((_QWORD *)v33 + 5) = v61;
      v33[48] = v62;
      *((_QWORD *)v33 + 7) = v63;
      *((_QWORD *)v33 + 8) = v64;
      *((double *)v33 + 9) = v67;
      v33[80] = 0;
      sub_10000CC5C((uint64_t)v25, &qword_10013C360);
      v72 = v168;
      sub_10000CC18((uint64_t)v33, v168, &qword_10013C328);
      *(_WORD *)(v72 + *(int *)(v165 + 36)) = 0;
      sub_10000CC5C((uint64_t)v33, &qword_10013C328);
      v73 = v169;
      v74 = &v169[*(int *)(v185 + 20)];
      v75 = enum case for RoundedCornerStyle.continuous(_:);
      v76 = type metadata accessor for RoundedCornerStyle(0);
      v77 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 104);
      LODWORD(v176) = v75;
      v77(v74, v75, v76);
      __asm { FMOV            V0.2D, #11.0 }
      *v73 = _Q0;
      v83 = v183;
      v84 = v183 + *(int *)(v166 + 36);
      sub_10000C484((uint64_t)v73, v84, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      v85 = sub_100008F88(&qword_10013B5E8);
      *(_WORD *)(v84 + *(int *)(v85 + 36)) = 256;
      sub_10000CC18(v72, v83, &qword_10013C318);
      sub_10000C4C8((uint64_t)v73, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      sub_10000CC5C(v72, &qword_10013C318);
      if (qword_10013ABE0 != -1)
        swift_once(&qword_10013ABE0, sub_100023E74);
      v86 = qword_100147D90;
      v87 = swift_getKeyPath(&unk_1000E9E38);
      v88 = swift_getKeyPath(&unk_1000E9E60);
      static Published.subscript.getter(&v200, v86, v87, v88);
      swift_release(v87);
      v89 = swift_release(v88);
      if (LOBYTE(v200) == 1)
        v90 = static Color.green.getter(v89);
      else
        v90 = static Color.clear.getter(v89);
      v132 = v90;
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v200, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
      v133 = v200;
      v134 = v202;
      v135 = v203;
      v136 = v204;
      v137 = swift_retain(v132);
      v138 = static Alignment.center.getter(v137);
      v140 = v139;
      v141 = v183;
      v142 = v184;
      sub_10000CC18(v183, v184, &qword_10013C308);
      swift_release(v132);
      v143 = v142 + *(int *)(v170 + 36);
      *(double *)v143 = v133 * 0.5;
      *(double *)(v143 + 8) = v133;
      *(_QWORD *)(v143 + 16) = v201;
      *(_QWORD *)(v143 + 24) = v134;
      *(_QWORD *)(v143 + 32) = v135;
      *(_QWORD *)(v143 + 40) = v136;
      *(_QWORD *)(v143 + 48) = v132;
      *(_WORD *)(v143 + 56) = 256;
      *(_QWORD *)(v143 + 64) = v138;
      *(_QWORD *)(v143 + 72) = v140;
      sub_10000CC5C(v141, &qword_10013C308);
      if ((*((_BYTE *)v191 + 40) & 1) != 0 && (v191[1] & 1) != 0)
      {
        v144 = v178;
        if (qword_10013AC78 != -1)
          swift_once(&qword_10013AC78, sub_10005F028);
        v145 = &qword_100147E88;
      }
      else
      {
        v144 = v178;
        if (qword_10013AC80 != -1)
          swift_once(&qword_10013AC80, sub_10005F038);
        v145 = &qword_100147E90;
      }
      v146 = *v145;
      v147 = (uint64_t *)v175;
      v77(&v175[*(int *)(v185 + 20)], v176, v76);
      *v147 = v146;
      v147[1] = v146;
      v148 = v173;
      v149 = (uint64_t)v172;
      v150 = (uint64_t)&v172[*(int *)(v173 + 36)];
      sub_10000C484((uint64_t)v147, v150, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      *(_WORD *)(v150 + *(int *)(v85 + 36)) = 256;
      v151 = v184;
      sub_10000CC18(v184, v149, &qword_10013C2F8);
      sub_10000C4C8((uint64_t)v147, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      sub_10000CC5C(v151, &qword_10013C2F8);
      v152 = sub_100022FE8();
      v153 = (uint64_t)v171;
      View.accessibilityHidden(_:)(1, v148, v152);
      sub_10000CC5C(v149, &qword_10013C2E8);
      v128 = &qword_10013C2D8;
      v154 = v174;
      sub_10000CBD4(v153, v174, &qword_10013C2D8);
      v155 = v181;
      sub_10000CC18(v154, v181, &qword_10013C2D8);
      swift_storeEnumTagMultiPayload(v155, v180, 0);
      v156 = sub_100022F7C();
      v157 = sub_10002336C();
      v158 = (uint64_t)v182;
      _ConditionalContent<>.init(storage:)(v155, v179, v190, v156, v157);
      v159 = v188;
      sub_10000CC18(v158, v188, &qword_10013C2C8);
      swift_storeEnumTagMultiPayload(v159, v186, 0);
      v160 = sub_100022F10();
      v161 = sub_1000233D8();
      _ConditionalContent<>.init(storage:)(v159, v187, v144, v160, v161);

      sub_10000CC5C(v158, &qword_10013C2C8);
      v114 = v154;
      goto LABEL_27;
    }
  }
  v91 = swift_getKeyPath(&unk_1000E9D60);
  v92 = swift_getKeyPath(&unk_1000E9D88);
  v93 = swift_retain(v47);
  static Published.subscript.getter(&v192, v93, v91, v92);
  swift_release(v91);
  swift_release(v92);
  sub_10001AAF0((uint64_t)&v206);
  if (v192 != 1
    || (v94 = swift_getKeyPath(&unk_1000E9DA8),
        v95 = swift_getKeyPath(&unk_1000E9DD0),
        v96 = swift_retain(v47),
        static Published.subscript.getter(&v192, v96, v94, v95),
        swift_release(v94),
        swift_release(v95),
        sub_10001AAF0((uint64_t)&v206),
        !v192))
  {
    sub_100022EDC((_OWORD *)((char *)v191 + 24), &v205);
    sub_100022EDC(&v205, &v207);
    if (*((_QWORD *)&v207 + 1) == 1)
    {
      swift_storeEnumTagMultiPayload(v6, v177, 0);
      v116 = sub_10002336C();
      v117 = (uint64_t)v178;
      _ConditionalContent<>.init(storage:)(v6, &type metadata for EmptyView, v190, &protocol witness table for EmptyView, v116);
    }
    else
    {
      v118 = Image.init(systemName:)(6516580, 0xE300000000000000);
      (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v30, enum case for Image.ResizingMode.stretch(_:), v26);
      v119 = (void *)Image.resizable(capInsets:resizingMode:)(v30, v118, 0.0, 0.0, 0.0, 0.0);
      v120 = swift_release(v118);
      v121 = (*(uint64_t (**)(char *, uint64_t, __n128))(v27 + 8))(v30, v26, v120);
      v122 = static Alignment.center.getter(v121);
      _FrameLayout.init(width:height:alignment:)(&v200, *(_QWORD *)&a2, 0, *(_QWORD *)&a2, 0, v122, v123);
      v192 = v119;
      v193 = 0;
      LOWORD(v194) = 1;
      v195 = v200;
      LOBYTE(v196) = v201;
      v197 = v202;
      v198 = v203;
      v199 = v204;
      v124 = sub_100008F88(&qword_10013C348);
      v125 = sub_10002329C();
      v126 = (uint64_t)v176;
      View.accessibilityHidden(_:)(1, v124, v125);
      swift_release(v119);
      sub_10000CC18(v126, (uint64_t)v6, &qword_10013C390);
      swift_storeEnumTagMultiPayload(v6, v177, 1);
      v127 = sub_10002336C();
      v117 = (uint64_t)v178;
      _ConditionalContent<>.init(storage:)(v6, &type metadata for EmptyView, v190, &protocol witness table for EmptyView, v127);
      sub_10000CC5C(v126, &qword_10013C390);
    }
    v128 = &qword_10013C3A0;
    v129 = v188;
    sub_10000CC18(v117, v188, &qword_10013C3A0);
    swift_storeEnumTagMultiPayload(v129, v186, 1);
    v130 = sub_100022F10();
    v131 = sub_1000233D8();
    _ConditionalContent<>.init(storage:)(v129, v187, v7, v130, v131);
    v114 = v117;
LABEL_27:
    v115 = v128;
    return sub_10000CC5C(v114, v115);
  }
  v97 = v192;
  v98 = Image.init(uiImage:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v30, enum case for Image.ResizingMode.stretch(_:), v26);
  v99 = (void *)Image.resizable(capInsets:resizingMode:)(v30, v98, 0.0, 0.0, 0.0, 0.0);
  v100 = swift_release(v98);
  v101 = (*(uint64_t (**)(char *, uint64_t, __n128))(v27 + 8))(v30, v26, v100);
  v102 = static Alignment.center.getter(v101);
  _FrameLayout.init(width:height:alignment:)(&v200, *(_QWORD *)&a2, 0, *(_QWORD *)&a2, 0, v102, v103);
  v192 = v99;
  v193 = 0;
  LOWORD(v194) = 1;
  v195 = v200;
  LOBYTE(v196) = v201;
  v197 = v202;
  v198 = v203;
  v199 = v204;
  v104 = sub_100008F88(&qword_10013C348);
  v105 = sub_10002329C();
  v106 = (uint64_t)v176;
  View.accessibilityHidden(_:)(1, v104, v105);
  swift_release(v99);
  v107 = v181;
  sub_10000CC18(v106, v181, &qword_10013C390);
  swift_storeEnumTagMultiPayload(v107, v180, 1);
  v108 = sub_100022F7C();
  v109 = sub_10002336C();
  v110 = (uint64_t)v182;
  _ConditionalContent<>.init(storage:)(v107, v179, v190, v108, v109);
  v111 = v188;
  sub_10000CC18(v110, v188, &qword_10013C2C8);
  swift_storeEnumTagMultiPayload(v111, v186, 0);
  v112 = sub_100022F10();
  v113 = sub_1000233D8();
  _ConditionalContent<>.init(storage:)(v111, v187, v7, v112, v113);

  sub_10000CC5C(v110, &qword_10013C2C8);
  v114 = v106;
  v115 = &qword_10013C390;
  return sub_10000CC5C(v114, v115);
}

uint64_t sub_100022940@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a2;
  v5 = type metadata accessor for Image.ResizingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_10013C2A8);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v35 - v16;
  sub_10002185C((uint64_t)&v35 - v16, a3);
  v18 = sub_100023788(a1[3], a1[4], a1[1]);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v5);
  v19 = Image.resizable(capInsets:resizingMode:)(v9, v18, 0.0, 0.0, 0.0, 0.0);
  v20 = swift_release(v18);
  v21 = (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v9, v5, v20);
  if (qword_10013AC88 != -1)
    v21 = swift_once(&qword_10013AC88, sub_10005F048);
  v22 = qword_100147E98;
  v23 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(&v37, v22, 0, v22, 0, v23, v24);
  v25 = v37;
  v26 = v38;
  v27 = v39;
  v28 = v40;
  v29 = v41;
  v35 = v42;
  if (qword_10013AC90 != -1)
    swift_once(&qword_10013AC90, sub_10005F058);
  v30 = qword_100147EA0;
  sub_10000CC18((uint64_t)v17, (uint64_t)v14, &qword_10013C2A8);
  v31 = v36;
  sub_10000CC18((uint64_t)v14, v36, &qword_10013C2A8);
  v32 = v31 + *(int *)(sub_100008F88(&qword_10013C3D8) + 48);
  *(_QWORD *)v32 = v19;
  *(_QWORD *)(v32 + 8) = 0;
  *(_WORD *)(v32 + 16) = 257;
  *(_QWORD *)(v32 + 24) = v25;
  *(_BYTE *)(v32 + 32) = v26;
  *(_QWORD *)(v32 + 40) = v27;
  *(_BYTE *)(v32 + 48) = v28;
  v33 = v35;
  *(_QWORD *)(v32 + 56) = v29;
  *(_QWORD *)(v32 + 64) = v33;
  *(_QWORD *)(v32 + 72) = v30;
  *(_QWORD *)(v32 + 80) = v30;
  swift_retain(v19);
  sub_10000CC5C((uint64_t)v17, &qword_10013C2A8);
  swift_release(v19);
  return sub_10000CC5C((uint64_t)v14, &qword_10013C2A8);
}

uint64_t sub_100022BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v3 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Color.RGBColorSpace(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013C3D0);
  v31 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v20 = (uint64_t *)((char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((sub_1000234E0(*(_QWORD *)(a1 + 8), v21) & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v32, 1, 1, v17);
  v30 = Image.init(systemName:)(0x73616C732E657965, 0xEE006C6C69662E68);
  v29 = static Font.title.getter();
  KeyPath = swift_getKeyPath(&unk_1000E9E80);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for Color.RGBColorSpace.sRGB(_:), v12);
  v23 = Color.init(_:white:opacity:)(v16, 0.5, 0.9);
  v24 = swift_getKeyPath(&unk_1000E9EB0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for BlendMode.multiply(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v11, v7);
  sub_10000C484((uint64_t)v6, (uint64_t)v20 + *(int *)(v17 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v26 = v29;
  v25 = v30;
  *v20 = v30;
  v20[1] = KeyPath;
  v20[2] = v26;
  v20[3] = v24;
  v20[4] = v23;
  swift_retain(v25);
  swift_retain(KeyPath);
  swift_retain(v26);
  swift_retain(v24);
  swift_retain(v23);
  sub_10000C4C8((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_release(v23);
  swift_release(v24);
  swift_release(v26);
  swift_release(KeyPath);
  swift_release(v30);
  v27 = v32;
  sub_10000CBD4((uint64_t)v20, v32, &qword_10013C3D0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v17);
}

uint64_t sub_100022EA4()
{
  return sub_1000214C0();
}

_OWORD *sub_100022EDC(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t sub_100022EEC()
{
  return sub_10000C9D0(&qword_10013C2B8, &qword_10013C2A8, (void (*)(void))sub_100022F10, (void (*)(void))sub_1000233D8);
}

unint64_t sub_100022F10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C2C0;
  if (!qword_10013C2C0)
  {
    v1 = sub_10000950C(&qword_10013C2C8);
    sub_100022F7C();
    sub_10002336C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C2C0);
  }
  return result;
}

unint64_t sub_100022F7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C2D0;
  if (!qword_10013C2D0)
  {
    v1 = sub_10000950C(&qword_10013C2D8);
    sub_100022FE8();
    sub_100023324();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C2D0);
  }
  return result;
}

unint64_t sub_100022FE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C2E0;
  if (!qword_10013C2E0)
  {
    v1 = sub_10000950C(&qword_10013C2E8);
    sub_10002306C();
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C2E0);
  }
  return result;
}

unint64_t sub_10002306C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C2F0;
  if (!qword_10013C2F0)
  {
    v1 = sub_10000950C(&qword_10013C2F8);
    sub_1000230F0();
    sub_10000CB94(&qword_10013C370, &qword_10013C378, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C2F0);
  }
  return result;
}

unint64_t sub_1000230F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C300;
  if (!qword_10013C300)
  {
    v1 = sub_10000950C(&qword_10013C308);
    sub_100023174();
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C300);
  }
  return result;
}

unint64_t sub_100023174()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C310;
  if (!qword_10013C310)
  {
    v1 = sub_10000950C(&qword_10013C318);
    sub_1000231F8();
    sub_10000CB94((unint64_t *)&unk_1001410B0, &qword_10013C368, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C310);
  }
  return result;
}

unint64_t sub_1000231F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C320;
  if (!qword_10013C320)
  {
    v1 = sub_10000950C(&qword_10013C328);
    sub_10000C20C(&qword_10013C330, &qword_10013C338, (void (*)(void))sub_10002329C);
    sub_10000CB94(&qword_10013C358, &qword_10013C360, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C320);
  }
  return result;
}

uint64_t sub_10002329C()
{
  return sub_10000C20C(&qword_10013C340, &qword_10013C348, (void (*)(void))sub_1000232C0);
}

unint64_t sub_1000232C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C350;
  if (!qword_10013C350)
  {
    v1 = sub_10000950C(&qword_100140870);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C350);
  }
  return result;
}

unint64_t sub_100023324()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C380;
  if (!qword_10013C380)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_10013C380);
  }
  return result;
}

unint64_t sub_10002336C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C388;
  if (!qword_10013C388)
  {
    v1 = sub_10000950C(&qword_10013C390);
    sub_10002329C();
    sub_100023324();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C388);
  }
  return result;
}

unint64_t sub_1000233D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C398;
  if (!qword_10013C398)
  {
    v1 = sub_10000950C(&qword_10013C3A0);
    sub_10002336C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C398);
  }
  return result;
}

unint64_t sub_100023444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C3A8;
  if (!qword_10013C3A8)
  {
    v1 = sub_10000950C(&qword_10013C298);
    sub_10000CB94(&qword_10013C3B0, &qword_10013C290, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C3A8);
  }
  return result;
}

uint64_t sub_1000234E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_1000E9EE0);
  v9 = swift_getKeyPath(&unk_1000E9F08);
  v10 = swift_retain(a1);
  static Published.subscript.getter(v7, v10, KeyPath, v9);
  swift_release(a1);
  swift_release(KeyPath);
  v11 = swift_release(v9);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, __n128))(v4 + 88))(v7, v3, v11) == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v7, v3);
    v12 = sub_100008F88(&qword_10013CAD0);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + *(int *)(v12 + 48)));
    v13 = (char *)v7 + *(int *)(v12 + 64);
    v14 = swift_getKeyPath(&unk_1000E9F70);
    v15 = swift_getKeyPath(&unk_1000E9F98);
    v16 = swift_retain(a1);
    static Published.subscript.getter(&v28, v16, v14, v15);
    swift_release(a1);
    swift_release(v14);
    swift_release(v15);
    v17 = v28 ^ 1;
    v18 = sub_100008F88(&qword_10013CA70);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v13, v18);
    v19 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v7, v19);
  }
  else
  {
    v20 = swift_getKeyPath(&unk_1000E9F28);
    v21 = swift_getKeyPath(&unk_1000E9F50);
    v22 = swift_retain(a1);
    static Published.subscript.getter((uint64_t *)((char *)&v28 + 2), v22, v20, v21);
    swift_release(a1);
    swift_release(v20);
    swift_release(v21);
    if (BYTE2(v28) == 1)
    {
      v23 = swift_getKeyPath(&unk_1000E9F70);
      v24 = swift_getKeyPath(&unk_1000E9F98);
      v25 = swift_retain(a1);
      static Published.subscript.getter((uint64_t *)((char *)&v28 + 1), v25, v23, v24);
      swift_release(a1);
      swift_release(v23);
      swift_release(v24);
      v17 = BYTE1(v28) ^ 1;
    }
    else
    {
      v17 = 0;
    }
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v17 & 1;
}

uint64_t sub_100023788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  id v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;

  v5 = type metadata accessor for ImageResource(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    KeyPath = swift_getKeyPath(&unk_1000E9FB8);
    v14 = swift_getKeyPath(&unk_1000E9FE0);
    v15 = swift_retain(a3);
    static Published.subscript.getter(&v30, v15, KeyPath, v14);
    swift_release(a3);
    swift_release(KeyPath);
    v12 = swift_release(v14);
    if (!v30)
      goto LABEL_14;
    return Image.init(uiImage:)(v12);
  }
  if (a2 == 2)
  {
    v9 = swift_getKeyPath(&unk_1000E9FB8);
    v10 = swift_getKeyPath(&unk_1000E9FE0);
    v11 = swift_retain(a3);
    static Published.subscript.getter(&v30, v11, v9, v10);
    swift_release(a3);
    swift_release(v9);
    v12 = swift_release(v10);
    if (!v30)
    {
LABEL_14:
      v25 = type metadata accessor for AirDropSystemApertureIconView(0);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v25);
      v27 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
      ImageResource.init(name:bundle:)(0x2D706F7264726961, 0xEC0000006E6F6369, v27);
      v24 = Image.init(_:)(v8);

      return v24;
    }
    return Image.init(uiImage:)(v12);
  }
  if (a2 != 1)
  {
    if (qword_10013AD40 != -1)
      swift_once(&qword_10013AD40, sub_1000921BC);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100009558(v16, (uint64_t)qword_100147FE0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Corner icon for apps on preview image is not yet implemented!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = swift_getKeyPath(&unk_1000E9FB8);
    v22 = swift_getKeyPath(&unk_1000E9FE0);
    v23 = swift_retain(a3);
    static Published.subscript.getter(&v30, v23, v21, v22);
    swift_release(a3);
    swift_release(v21);
    v12 = swift_release(v22);
    if (!v30)
      goto LABEL_14;
    return Image.init(uiImage:)(v12);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003CLL, 0x80000001000F0600, "AirDropUI/AirDropIncomingPreviewImage.swift", 43, 2, 92, 0);
  __break(1u);
  return result;
}

unint64_t destroy for AirDropIncomingPreviewImage.CornerIcon(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if ((v2 + 1) <= 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s9AirDropUI27AirDropIncomingPreviewImageV10CornerIconOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for AirDropIncomingPreviewImage.CornerIcon(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[1];
  v7 = v6 + 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v5 = a2[1];
  v8 = v5 + 1;
  if (v7 > 1)
  {
    if (v8 <= 1)
    {
      *a1 = *a2;
      v10 = a2[1];
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v8 > 1)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_12;
  }
  *a1 = *a2;
  v9 = a2[1];
  a1[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for AirDropIncomingPreviewImage.CornerIcon(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if ((v5 + 1) > 1)
    goto LABEL_9;
  v6 = *(_QWORD *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF)
    v7 = *(_QWORD *)(a2 + 8);
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease(v4);
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropIncomingPreviewImage.CornerIcon(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 3)
    return (v3 - 2);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AirDropIncomingPreviewImage.CornerIcon(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t sub_100023D50(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *sub_100023D70(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    result[1] = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropIncomingPreviewImage.CornerIcon()
{
  return &type metadata for AirDropIncomingPreviewImage.CornerIcon;
}

uint64_t sub_100023DB0()
{
  return sub_10000C9D0(&qword_10013C3E0, &qword_10013C3E8, (void (*)(void))sub_100022EEC, (void (*)(void))sub_100023444);
}

uint64_t sub_100023DE4()
{
  return sub_100023E0C((uint64_t)&unk_1000EA0B8, (uint64_t)&unk_1000EA0E0);
}

uint64_t sub_100023DF8()
{
  return sub_100023E0C((uint64_t)&unk_1000EA070, (uint64_t)&unk_1000EA098);
}

uint64_t sub_100023E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v7;

  v4 = ((uint64_t (*)(void))swift_getKeyPath)();
  KeyPath = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, v4, KeyPath);
  swift_release(v4);
  swift_release(KeyPath);
  return v7;
}

uint64_t sub_100023E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3;
  char v4;

  v0 = type metadata accessor for AirDropUISettings(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v4 = 1;
  Published.init(initialValue:)(&v4, &type metadata for Bool);
  v3 = 0;
  result = Published.init(initialValue:)(&v3, &type metadata for Bool);
  qword_100147D90 = v1;
  return result;
}

uint64_t sub_100023EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC9AirDropUI17AirDropUISettings__expandWhenCancelled;
  v2 = sub_100008F88(&qword_10013C4C0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC9AirDropUI17AirDropUISettings__showsDebugBackgrounds, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100023F6C()
{
  return type metadata accessor for AirDropUISettings(0);
}

uint64_t type metadata accessor for AirDropUISettings(uint64_t a1)
{
  uint64_t result;

  result = qword_10013C428;
  if (!qword_10013C428)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirDropUISettings);
  return result;
}

void sub_100023FB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10002401C();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_10002401C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_10013C438)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_10013C438);
  }
}

void *sub_100024070()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10002407C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000240B4(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) ^ 1u;
  return 0;
}

double sub_1000240F0@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_1000EA210);
  v4 = swift_getKeyPath(&unk_1000EA238);
  static Published.subscript.getter(v8, v1, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  result = *(double *)v8;
  v6 = v8[1];
  v7 = v8[2];
  *a1 = v8[0];
  a1[1] = v6;
  a1[2] = v7;
  return result;
}

uint64_t sub_100024170(double *a1, double *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return static EdgeInsets.== infix(_:_:)(a1[2], a1[3], a1[4], a1[5], a2[2], a2[3], a2[4], a2[5]);
  else
    return 0;
}

uint64_t sub_1000241A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000EA1C8);
  v2 = swift_getKeyPath(&unk_1000EA1F0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100024214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC9AirDropUI25SystemApertureLayoutState__metrics;
  v2 = sub_100008F88(&qword_10013C608);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC9AirDropUI25SystemApertureLayoutState__context;
  v4 = sub_100008F88(&qword_10013C610);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100024294()
{
  return type metadata accessor for SystemApertureLayoutState(0);
}

uint64_t type metadata accessor for SystemApertureLayoutState(uint64_t a1)
{
  uint64_t result;

  result = qword_10013C500;
  if (!qword_10013C500)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SystemApertureLayoutState);
  return result;
}

void sub_1000242D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_100024380(319, &qword_10013C510, (uint64_t)&type metadata for SystemApertureLayoutState.Metrics);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100024380(319, (unint64_t *)&unk_10013C518, (uint64_t)&type metadata for SystemApertureLayoutState.Context);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_100024380(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

__n128 initializeBufferWithCopyOfBuffer for SystemApertureLayoutState.Context(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SystemApertureLayoutState.Context(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemApertureLayoutState.Context(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureLayoutState.Context()
{
  return &type metadata for SystemApertureLayoutState.Context;
}

uint64_t getEnumTagSinglePayload for SystemApertureLayoutState.Metrics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SystemApertureLayoutState.Metrics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureLayoutState.Metrics()
{
  return &type metadata for SystemApertureLayoutState.Metrics;
}

uint64_t sub_1000244E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SystemApertureLayoutState(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100024524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

uint64_t sub_10002453C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  ValueMetadata *v24;
  char v25;
  char v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t OpaqueTypeConformance2;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  __n128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  ValueMetadata *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char v78;

  v68 = a1;
  v69 = a2;
  v3 = sub_100008F88(&qword_10013C618);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013C620);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100008F88(&qword_10013C628);
  v11 = *(_QWORD *)(v67 - 8);
  v13 = __chkstk_darwin(v67, v12);
  v66 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v60 - v16;
  v18 = *(_QWORD *)v2;
  v19 = *(_BYTE *)(v2 + 8);
  sub_1000254D0(*(_QWORD *)v2, v19);
  v20 = sub_100054F60(v18, v19);
  sub_10002551C(v18, v19);
  if ((v20 & 1) == 0)
  {
    v32 = *(_OWORD *)(v2 + 32);
    v74 = *(_OWORD *)(v2 + 16);
    v75 = v32;
    v77 = *(_QWORD *)(v2 + 16);
    v78 = *(_BYTE *)(v2 + 24);
    v76 = v32;
    v33 = *(_QWORD *)(v2 + 56);
    v34 = (_OWORD *)swift_allocObject(&unk_1001252B8, 80, 7);
    v35 = *(_OWORD *)(v2 + 16);
    v34[1] = *(_OWORD *)v2;
    v34[2] = v35;
    v36 = *(_OWORD *)(v2 + 48);
    v34[3] = *(_OWORD *)(v2 + 32);
    v34[4] = v36;
    v37 = sub_100008F88(&qword_10013C630);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v6, v68, v37);
    v38 = &v6[*(int *)(v3 + 36)];
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0;
    *((_QWORD *)v38 + 2) = sub_1000257E8;
    *((_QWORD *)v38 + 3) = v34;
    sub_10000CC18((uint64_t)v6, (uint64_t)v10, &qword_10013C618);
    swift_storeEnumTagMultiPayload(v10, v7, 1);
    sub_1000254D0(v18, v19);
    sub_100025808((uint64_t)&v77);
    sub_100009498(&v76);
    v39 = sub_10000CB94(&qword_10013C638, &qword_10013C630, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v40 = sub_100025834();
    swift_retain(v33);
    v70 = v37;
    v71 = &type metadata for SystemApertureLayoutState.Context;
    v72 = v39;
    v73 = v40;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v42 = sub_100025878();
    _ConditionalContent<>.init(storage:)(v10, v67, v3, OpaqueTypeConformance2, v42);
    return sub_10000CC5C((uint64_t)v6, &qword_10013C618);
  }
  v62 = v17;
  v63 = v11;
  v64 = v7;
  v61 = v10;
  v21 = v67;
  v22 = *(_QWORD *)(v2 + 16);
  v23 = *(_QWORD *)(v2 + 32);
  v24 = *(ValueMetadata **)(v2 + 40);
  v25 = *(_BYTE *)(v2 + 24) & 1;
  sub_1000254D0(v22, v25);
  v26 = sub_100054F60(v22, v25);
  sub_10002551C(v22, v25);
  v65 = v3;
  if ((v26 & 1) != 0)
  {
    if (!v23)
    {
      v58 = type metadata accessor for SystemApertureLayoutState(0);
      v59 = sub_100025978();
      result = EnvironmentObject.error()(0, v24, v58, v59);
      __break(1u);
      return result;
    }
    KeyPath = swift_getKeyPath(&unk_1000EA1C8);
    v28 = swift_getKeyPath(&unk_1000EA1F0);
    v29 = swift_retain(v23);
    static Published.subscript.getter(&v74, v29, KeyPath, v28);
    swift_release(v23);
    swift_release(KeyPath);
    swift_release(v28);
    v30 = v74;
    v31 = v75;
  }
  else
  {
    v31 = 0;
    v30 = 0uLL;
  }
  v74 = v30;
  LOBYTE(v75) = v31;
  v70 = v23;
  v71 = v24;
  v44 = *(_QWORD *)(v2 + 56);
  v45 = (_OWORD *)swift_allocObject(&unk_1001252E0, 80, 7);
  v46 = *(_OWORD *)(v2 + 16);
  v45[1] = *(_OWORD *)v2;
  v45[2] = v46;
  v47 = *(_OWORD *)(v2 + 48);
  v45[3] = *(_OWORD *)(v2 + 32);
  v45[4] = v47;
  sub_1000254D0(v18, v19);
  sub_1000254D0(v22, v25);
  sub_100009498(&v70);
  swift_retain(v44);
  v48 = sub_100008F88(&qword_10013C630);
  v49 = sub_10000CB94(&qword_10013C638, &qword_10013C630, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v50 = sub_100025834();
  v51 = v66;
  View.onChange<A>(of:initial:_:)(&v74, 0, sub_100025944, v45, v48, &type metadata for SystemApertureLayoutState.Context, v49, v50, v60, v61, (_DWORD)v62, v63);
  v52 = swift_release(v45);
  v54 = v62;
  v53 = v63;
  (*(void (**)(char *, char *, uint64_t, __n128))(v63 + 32))(v62, v51, v21, v52);
  v55 = v61;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v61, v54, v21);
  swift_storeEnumTagMultiPayload(v55, v64, 0);
  *(_QWORD *)&v74 = v48;
  *((_QWORD *)&v74 + 1) = &type metadata for SystemApertureLayoutState.Context;
  *(_QWORD *)&v75 = v49;
  *((_QWORD *)&v75 + 1) = v50;
  v56 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v57 = sub_100025878();
  _ConditionalContent<>.init(storage:)(v55, v21, v65, v56, v57);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v21);
}

uint64_t sub_100024A38(uint64_t a1, char a2, double a3, double a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  _BYTE v29[32];

  v12 = sub_100008F88(&qword_10013C6B8);
  __chkstk_darwin(v12, v13);
  v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for LayoutSubview(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = &v29[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000CEE60((uint64_t)v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    return sub_10000CC5C((uint64_t)v15, &qword_10013C6B8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v20, v15, v16);
  v29[24] = a2 & 1;
  v29[16] = a6 & 1;
  v22 = LayoutSubview.sizeThatFits(_:)(a1);
  v23 = *(double *)(v6 + 8) - *(double *)(v6 + 16) + a4;
  v24 = v22;
  v26 = v25;
  v27 = static UnitPoint.topLeading.getter();
  v29[8] = 0;
  v29[0] = 0;
  LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v24, 0, v26, 0, a3, v23, v27, v28);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v20, v16);
}

double sub_100024BE8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_100025E5C(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_100024C00(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  return sub_100024A38(a1, a2 & 1, a5, a6, a3, a4 & 1);
}

uint64_t sub_100024C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100024C70(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100024C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100024C70(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100024C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_100024CAC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100024D08;
}

void sub_100024D08(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_100024D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  __n128 v22;
  __n128 v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t result;
  void (*v36)(char *, uint64_t, uint64_t, __n128, __n128);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[3];

  v41 = a5;
  v42 = a1;
  v44 = a6;
  v9 = sub_100008F88(&qword_10013C650);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008F88(&qword_10013C658);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100008F88(&qword_10013C660);
  __chkstk_darwin(v43, v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 &= 1u;
  sub_1000254D0(a2, a3);
  v21 = sub_100054F60(a2, a3);
  sub_10002551C(a2, a3);
  if ((v21 & 1) != 0)
  {
    if (!a4)
    {
      v39 = type metadata accessor for SystemApertureLayoutState(0);
      v40 = sub_100025978();
      result = EnvironmentObject.error()(0, v41, v39, v40);
      __break(1u);
      return result;
    }
    KeyPath = swift_getKeyPath(&unk_1000EA210);
    v25 = swift_getKeyPath(&unk_1000EA238);
    v26 = swift_retain(a4);
    static Published.subscript.getter(v45, v26, KeyPath, v25);
    swift_release(a4);
    swift_release(KeyPath);
    v22 = swift_release(v25);
    v23.n128_u64[0] = *(_QWORD *)&v45[0];
    v22.n128_u64[0] = 1.0;
    if (*(double *)v45 >= 1.0)
    {
      v23.n128_u64[0] = *((_QWORD *)&v45[0] + 1);
      if (*((double *)v45 + 1) >= 1.0)
      {
        v27 = swift_getKeyPath(&unk_1000EA210);
        v28 = swift_getKeyPath(&unk_1000EA238);
        v29 = swift_retain(a4);
        static Published.subscript.getter(v45, v29, v27, v28);
        swift_release(a4);
        swift_release(v27);
        swift_release(v28);
        v30 = v45[1];
        v31 = v45[2];
        *(_OWORD *)v20 = v45[0];
        *((_OWORD *)v20 + 1) = v30;
        *((_OWORD *)v20 + 2) = v31;
        v32 = v43;
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(&v20[*(int *)(v43 + 44)], v42, v9);
        sub_10000CC18((uint64_t)v20, (uint64_t)v17, &qword_10013C660);
        swift_storeEnumTagMultiPayload(v17, v14, 0);
        v33 = sub_1000259C0();
        v34 = sub_10000CB94(&qword_10013C680, &qword_10013C650, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
        _ConditionalContent<>.init(storage:)(v17, v32, v9, v33, v34);
        return sub_10000CC5C((uint64_t)v20, &qword_10013C660);
      }
    }
  }
  v36 = *(void (**)(char *, uint64_t, uint64_t, __n128, __n128))(v10 + 16);
  v36(v13, v42, v9, v22, v23);
  ((void (*)(char *, char *, uint64_t))v36)(v17, v13, v9);
  swift_storeEnumTagMultiPayload(v17, v14, 1);
  v37 = sub_1000259C0();
  v38 = sub_10000CB94(&qword_10013C680, &qword_10013C650, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  _ConditionalContent<>.init(storage:)(v17, v43, v9, v37, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_100025078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100024D38(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

double sub_100025090@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  double result;
  __int128 v8;
  char v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EA1C8);
  v5 = swift_getKeyPath(&unk_1000EA1F0);
  static Published.subscript.getter(&v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v9;
  result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_100025114(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v9[2];
  char v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EA1C8);
  v7 = swift_getKeyPath(&unk_1000EA1F0);
  v9[0] = v2;
  v9[1] = v3;
  v10 = v4;
  swift_retain(v5);
  return static Published.subscript.setter(v9, v5, KeyPath, v7);
}

id sub_100025194(void *a1, uint64_t a2)
{
  id v4;
  id result;
  void *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(double *, _QWORD);
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(double *, _QWORD);
  _QWORD *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(double *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(double *, _QWORD);
  uint64_t v35;
  double v36[6];

  v4 = objc_msgSend(a1, "activeLayoutMode");
  result = objc_msgSend(a1, "view");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "SBUISA_systemApertureObstructedAreaLayoutGuide");

    objc_msgSend(v7, "layoutFrame");
    v9 = v8;
    v11 = v10;

    if (v4 == (id)4)
    {
      KeyPath = swift_getKeyPath(&unk_1000EA210);
      v13 = swift_getKeyPath(&unk_1000EA238);
      static Published.subscript.getter(v36, a2, KeyPath, v13);
      swift_release(KeyPath);
      swift_release(v13);
      if (v36[0] != v9 || v36[1] != v11)
      {
        v15 = swift_getKeyPath(&unk_1000EA210);
        v16 = swift_getKeyPath(&unk_1000EA238);
        v17 = (void (*)(double *, _QWORD))static Published.subscript.modify(v36, a2, v15, v16);
        *v18 = v9;
        v18[1] = v11;
        v17(v36, 0);
        swift_release(v15);
        swift_release(v16);
      }
    }
    v19 = swift_getKeyPath(&unk_1000EA1C8);
    v20 = swift_getKeyPath(&unk_1000EA1F0);
    static Published.subscript.getter(v36, a2, v19, v20);
    swift_release(v19);
    result = (id)swift_release(v20);
    if (*(id *)&v36[0] != v4)
    {
      v21 = swift_getKeyPath(&unk_1000EA1C8);
      v22 = swift_getKeyPath(&unk_1000EA1F0);
      v23 = (void (*)(double *, _QWORD))static Published.subscript.modify(v36, a2, v21, v22);
      *v24 = v4;
      v23(v36, 0);
      swift_release(v21);
      swift_release(v22);
      v25 = objc_msgSend(a1, "systemApertureElementContext");
      v26 = objc_msgSend(v25, "transitionContext");
      result = (id)swift_unknownObjectRelease(v25);
      if (v26)
      {
        v27 = objc_msgSend(v26, "fromLayoutMode");
        v28 = swift_getKeyPath(&unk_1000EA1C8);
        v29 = swift_getKeyPath(&unk_1000EA1F0);
        v30 = (void (*)(double *, _QWORD))static Published.subscript.modify(v36, a2, v28, v29);
        *(_QWORD *)(v31 + 8) = v27;
        v30(v36, 0);
        swift_release(v28);
        swift_release(v29);
        LOBYTE(v27) = objc_msgSend(v26, "isUserInitiated");
        v32 = swift_getKeyPath(&unk_1000EA1C8);
        v33 = swift_getKeyPath(&unk_1000EA1F0);
        v34 = (void (*)(double *, _QWORD))static Published.subscript.modify(v36, a2, v32, v33);
        *(_BYTE *)(v35 + 16) = (_BYTE)v27;
        v34(v36, 0);

        swift_release(v32);
        return (id)swift_release(v33);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000254D0(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

double destroy for SystemApertureDismissalModifier(uint64_t a1)
{
  double result;

  sub_10002551C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_10002551C(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 56)).n128_u64[0];
  return result;
}

uint64_t sub_10002551C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t initializeWithCopy for SystemApertureDismissalModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000254D0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_1000254D0(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  swift_retain(v8);
  swift_retain(v11);
  return a1;
}

uint64_t assignWithCopy for SystemApertureDismissalModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000254D0(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10002551C(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_1000254D0(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  sub_10002551C(v10, v11);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  swift_retain(v14);
  swift_release(v16);
  return a1;
}

__n128 initializeWithTake for SystemApertureDismissalModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SystemApertureDismissalModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10002551C(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  sub_10002551C(v9, v10);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_release(v11);
  *(_QWORD *)(a1 + 40) = a2[5];
  v12 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  swift_release(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemApertureDismissalModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemApertureDismissalModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureDismissalModifier()
{
  return &type metadata for SystemApertureDismissalModifier;
}

ValueMetadata *type metadata accessor for SystemApertureVerticalPlacementViewModifier()
{
  return &type metadata for SystemApertureVerticalPlacementViewModifier;
}

uint64_t sub_1000257C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112A88, 1);
}

uint64_t sub_1000257D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112A60, 1);
}

uint64_t sub_1000257E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 64))();
}

uint64_t sub_100025808(uint64_t a1)
{
  sub_1000254D0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

unint64_t sub_100025834()
{
  unint64_t result;

  result = qword_10013C640;
  if (!qword_10013C640)
  {
    result = swift_getWitnessTable(&unk_1000EA164, &type metadata for SystemApertureLayoutState.Context);
    atomic_store(result, (unint64_t *)&qword_10013C640);
  }
  return result;
}

unint64_t sub_100025878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C648;
  if (!qword_10013C648)
  {
    v1 = sub_10000950C(&qword_10013C618);
    sub_10000CB94(&qword_10013C638, &qword_10013C630, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C648);
  }
  return result;
}

uint64_t sub_100025900()
{
  uint64_t v0;

  sub_10002551C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  sub_10002551C(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100025944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)a2 == 3 && *(_BYTE *)(a2 + 16) != 0)
    return (*(uint64_t (**)(void))(v2 + 64))();
  return result;
}

unint64_t sub_100025978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C120;
  if (!qword_10013C120)
  {
    v1 = type metadata accessor for SystemApertureLayoutState(255);
    result = swift_getWitnessTable(&unk_1000EA18C, v1);
    atomic_store(result, (unint64_t *)&qword_10013C120);
  }
  return result;
}

unint64_t sub_1000259C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C668;
  if (!qword_10013C668)
  {
    v1 = sub_10000950C(&qword_10013C660);
    sub_10000CB94(&qword_10013C670, &qword_10013C678, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_10000CB94(&qword_10013C680, &qword_10013C650, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C668);
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureVerticalPlacementLayout()
{
  return &type metadata for SystemApertureVerticalPlacementLayout;
}

double _s9AirDropUI24SystemApertureLayoutModeVwxx_0(uint64_t a1)
{
  double result;

  sub_10002551C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 16)).n128_u64[0];
  return result;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000254D0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  swift_retain(v6);
  return a1;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000254D0(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10002551C(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwta_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10002551C(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release(v8);
  *(_QWORD *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwet_0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureLayoutMode()
{
  return &type metadata for SystemApertureLayoutMode;
}

unint64_t sub_100025C7C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10013C688;
  if (!qword_10013C688)
  {
    v1 = sub_10000950C(&qword_10013C690);
    v2[0] = sub_10000950C(&qword_10013C630);
    v2[1] = &type metadata for SystemApertureLayoutState.Context;
    v2[2] = sub_10000CB94(&qword_10013C638, &qword_10013C630, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v2[3] = sub_100025834();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_100025878();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C688);
  }
  return result;
}

unint64_t sub_100025D48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C698;
  if (!qword_10013C698)
  {
    v1 = sub_10000950C(&qword_10013C6A0);
    sub_1000259C0();
    sub_10000CB94(&qword_10013C680, &qword_10013C650, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C698);
  }
  return result;
}

unint64_t sub_100025DD0()
{
  unint64_t result;

  result = qword_10013C6A8;
  if (!qword_10013C6A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_10013C6A8);
  }
  return result;
}

unint64_t sub_100025E18()
{
  unint64_t result;

  result = qword_10013C6B0;
  if (!qword_10013C6B0)
  {
    result = swift_getWitnessTable(&unk_1000EA3D4, &type metadata for SystemApertureVerticalPlacementLayout);
    atomic_store(result, (unint64_t *)&qword_10013C6B0);
  }
  return result;
}

double sub_100025E5C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  double v16;
  _BYTE v18[16];

  v7 = sub_100008F88(&qword_10013C6B8);
  __chkstk_darwin(v7, v8);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for LayoutSubview(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = &v18[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000CEE60((uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10000CC5C((uint64_t)v10, &qword_10013C6B8);
    return 0.0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v15, v10, v11);
    v18[8] = a2 & 1;
    v18[0] = a4 & 1;
    v16 = LayoutSubview.sizeThatFits(_:)(a1);
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
  }
  return v16;
}

void sub_100026110(void *a1, uint64_t a2, void *a3, const char *a4)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;

  v6 = qword_10013AD58;
  v13 = a3;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100009558(v8, (uint64_t)qword_100148028);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a4, v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

}

id sub_100026284()
{
  return sub_100026EB0(type metadata accessor for RemoteAlertSceneDelegate);
}

uint64_t sub_1000262C8()
{
  return type metadata accessor for RemoteAlertSceneDelegate(0);
}

uint64_t type metadata accessor for RemoteAlertSceneDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_10013C6F0;
  if (!qword_10013C6F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoteAlertSceneDelegate);
  return result;
}

void sub_10002630C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  sub_100026384(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100026384(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10013C700)
  {
    v2 = type metadata accessor for SFRemoteAlertPresentationRequest(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10013C700);
  }
}

void sub_1000264E0(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD v32[4];
  void *v33;
  uint64_t v34;
  uint64_t aBlock[5];
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for SFRemoteAlertPresentationRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100009558(v9, (uint64_t)qword_100148028);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v32[3] = a1;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    aBlock[0] = v16;
    v33 = v2;
    *(_DWORD *)v15 = 136315138;
    v32[1] = v15 + 4;
    v32[2] = v10;
    v17 = SFRemoteAlertPresentationRequest.id.getter();
    v19 = v18;
    v34 = sub_10003A834(v17, v18, aBlock);
    v2 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, aBlock);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Presenting view controller in remote alert for request: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  v20 = objc_msgSend(v2, "view");
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v20, "window");

    if (v22)
    {
      v24 = SFRemoteAlertPresentationRequest.viewControllerToPresent.getter();
      v25 = SFRemoteAlertPresentationRequest.animated.getter();
      v26 = swift_allocObject(&unk_100125530, 24, 7);
      *(_QWORD *)(v26 + 16) = v22;
      aBlock[4] = (uint64_t)sub_100026F3C;
      v36 = v26;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000DA060;
      aBlock[3] = (uint64_t)&unk_100125548;
      v27 = _Block_copy(aBlock);
      v28 = v36;
      v29 = v22;
      objc_msgSend(v2, "presentViewController:animated:completion:", v24, v25 & 1, v27, swift_release(v28).n128_f64[0]);
      _Block_release(v27);

    }
    else
    {
      v24 = Logger.logObject.getter(v23);
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v30, "Attempting to present without window", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_100026840(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_100148028);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v10 = v3;
    v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    *v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Keeping window: %@ alive until presented", v6, 0xCu);
    v9 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
}

void sub_1000269E4(char a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  void *v8;
  id v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *oslog;
  objc_super v20;
  _QWORD aBlock[5];
  _QWORD *v22;

  v7 = objc_msgSend(v3, "view");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, "window");

    if (v9)
    {
      v10 = (_QWORD *)swift_allocObject(&unk_1001255A8, 48, 7);
      v10[2] = v9;
      v10[3] = a2;
      v10[4] = a3;
      v10[5] = v3;
      aBlock[4] = sub_100026FF8;
      v22 = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000DA060;
      aBlock[3] = &unk_1001255C0;
      v11 = _Block_copy(aBlock);
      v12 = v22;
      v13 = v9;
      sub_100027028(a2, a3);
      v14 = v3;
      swift_release(v12);
      v20.receiver = v14;
      v20.super_class = (Class)type metadata accessor for RemoteAlertRootViewController();
      objc_msgSendSuper2(&v20, "dismissViewControllerAnimated:completion:", a1 & 1, v11);
      _Block_release(v11);

    }
    else
    {
      if (qword_10013AD58 != -1)
        swift_once(&qword_10013AD58, sub_100092228);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_100009558(v15, (uint64_t)qword_100148028);
      oslog = Logger.logObject.getter(v16);
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v17, "Attempting to dismiss without window", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100026BEC(void (*a1)(void), uint64_t a2, uint64_t a3, void *a4)
{
  void *Strong;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  if (a1)
    a1();
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a3+ OBJC_IVAR____TtC9AirDropUIP33_C1270FA1C3C759CC3C2C305DD7D2022129RemoteAlertRootViewController_remoteAlertScene);
  objc_msgSend(Strong, "invalidate");

  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v7 = type metadata accessor for Logger(0);
  sub_100009558(v7, (uint64_t)qword_100148028);
  v8 = a4;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    v15 = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    *v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Keeping window: %@ alive until dismissal ends", v11, 0xCu);
    v14 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
}

id sub_100026EA4()
{
  return sub_100026EB0((uint64_t (*)(_QWORD))type metadata accessor for RemoteAlertRootViewController);
}

id sub_100026EB0(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for RemoteAlertRootViewController()
{
  return objc_opt_self(_TtC9AirDropUIP33_C1270FA1C3C759CC3C2C305DD7D2022129RemoteAlertRootViewController);
}

uint64_t sub_100026F18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100026F3C()
{
  uint64_t v0;

  sub_100026840(*(void **)(v0 + 16));
}

uint64_t sub_100026F68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100026F78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100026F80(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100026F90()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100026FB4()
{
  uint64_t v0;

  return sub_1000A6810(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100026FBC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100026FF8()
{
  uint64_t v0;

  sub_100026BEC(*(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 16));
}

uint64_t sub_100027028(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

unint64_t sub_100027038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C7A0;
  if (!qword_10013C7A0)
  {
    v1 = objc_opt_self(SBUIRemoteAlertButtonAction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013C7A0);
  }
  return result;
}

unint64_t sub_100027074()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10013C7A8;
  if (!qword_10013C7A8)
  {
    v1 = sub_100027038();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10013C7A8);
  }
  return result;
}

uint64_t sub_1000270BC(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _typeName(_:qualified:)(v1, 0);
}

void sub_1000270E0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  __n128 v73;
  id v74;
  objc_class *v75;
  char *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  os_log_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  objc_super v96;
  uint64_t v97;
  uint64_t v98;

  v3 = sub_100008F88((uint64_t *)&unk_10013C7B0);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v84 - v9;
  v11 = type metadata accessor for SFRemoteAlertPresentationRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v84 - v18;
  v20 = objc_opt_self(SBSUIRemoteAlertScene);
  v21 = swift_dynamicCastObjCClass(a1, v20);
  if (!v21)
  {
    if (qword_10013AD58 != -1)
      swift_once(&qword_10013AD58, sub_100092228);
    v36 = type metadata accessor for Logger(0);
    sub_100009558(v36, (uint64_t)qword_100148028);
    v93 = a1;
    v37 = Logger.logObject.getter(v93);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v94 = v40;
      *(_DWORD *)v39 = 136315138;
      ObjectType = swift_getObjectType(v93);
      v42 = _typeName(_:qualified:)(ObjectType, 0);
      v44 = v43;
      v97 = sub_10003A834(v42, v43, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);

      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Cannot configure scene, expected a remote alert scene but got a scene of type: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      return;
    }

LABEL_22:
    return;
  }
  v22 = (void *)v21;
  v23 = a1;
  v24 = objc_msgSend(v22, "configurationIdentifier");
  if (!v24)
  {
    if (qword_10013AD58 != -1)
      swift_once(&qword_10013AD58, sub_100092228);
    v45 = type metadata accessor for Logger(0);
    sub_100009558(v45, (uint64_t)qword_100148028);
    v93 = v23;
    v46 = Logger.logObject.getter(v93);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 138412290;
      v94 = (uint64_t)v22;
      v50 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
      *v49 = v22;

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Could not find configuration identifier on remote alert scene: %@", v48, 0xCu);
      v51 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(v49, 1, v51);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      return;
    }

    goto LABEL_22;
  }
  v25 = v24;
  v92 = v1;
  v93 = v23;
  v91 = v7;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v28 = v27;

  type metadata accessor for AUIRemoteAlertPresentationManager(0);
  v29 = sub_100069274();
  dispatch thunk of SFRemoteAlertPresentationManager.presentationRequest(for:)(v26, v28);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000284B0((uint64_t)v10);
    if (qword_10013AD58 != -1)
      swift_once(&qword_10013AD58, sub_100092228);
    v30 = type metadata accessor for Logger(0);
    sub_100009558(v30, (uint64_t)qword_100148028);
    v31 = swift_bridgeObjectRetain(v28);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v94 = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(v28);
      v97 = sub_10003A834(v26, v28, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Could not find a remote alert presentation request for ID: %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v28, 2);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v10, v11);
    if (qword_10013AD58 != -1)
      swift_once(&qword_10013AD58, sub_100092228);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100009558(v52, (uint64_t)qword_100148028);
    v90 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v90(v16, v19, v11);
    v54 = v93;
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    v57 = v56;
    v58 = os_log_type_enabled(v55, v56);
    v93 = v54;
    if (v58)
    {
      v59 = swift_slowAlloc(22, -1);
      v87 = v57;
      v60 = v59;
      v61 = (_QWORD *)swift_slowAlloc(8, -1);
      v88 = swift_slowAlloc(32, -1);
      v94 = v88;
      *(_DWORD *)v60 = 138412546;
      v85 = v19;
      v86 = v55;
      v89 = v53;
      v97 = (uint64_t)v22;
      v62 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
      *v61 = v22;

      *(_WORD *)(v60 + 12) = 2080;
      v63 = SFRemoteAlertPresentationRequest.id.getter();
      v65 = v64;
      v97 = sub_10003A834(v63, v64, &v94);
      v19 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
      swift_bridgeObjectRelease(v65);
      v66 = *(void (**)(char *, uint64_t))(v12 + 8);
      v66(v16, v11);
      v55 = v86;
      _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v87, "Configuring remote alert scene: %@ for request with ID: %s", (uint8_t *)v60, 0x16u);
      v67 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(v61, 1, v67);
      swift_slowDealloc(v61, -1, -1);
      v68 = v88;
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {

      v66 = *(void (**)(char *, uint64_t))(v12 + 8);
      v66(v16, v11);
    }

    if ((SFRemoteAlertPresentationRequest.contentOverlaysStatusBar.getter() & 1) != 0)
    {
      v69 = objc_msgSend(v22, "respondsToSelector:", "setContentOverlaysStatusBar:animationSettings:");
      if ((_DWORD)v69)
      {
        objc_msgSend(v22, "setContentOverlaysStatusBar:animationSettings:", 1, 0);
      }
      else
      {
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, v71))
        {
          v72 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v72 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Wanted to set contentOverlaysStatusBar to true, but this version of SpringBoard does not support it.", v72, 2u);
          swift_slowDealloc(v72, -1, -1);
        }

      }
    }
    objc_msgSend(v22, "setAllowsAlertStacking:", 1);
    objc_msgSend(v22, "setOrientationChangedEventsDisabled:", 1);
    v74 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFSecureWindow(0, v73)), "initWithWindowScene:", v22);
    v75 = (objc_class *)type metadata accessor for RemoteAlertRootViewController();
    v76 = (char *)objc_allocWithZone(v75);
    v77 = swift_unknownObjectWeakInit(&v76[OBJC_IVAR____TtC9AirDropUIP33_C1270FA1C3C759CC3C2C305DD7D2022129RemoteAlertRootViewController_remoteAlertScene], 0);
    swift_unknownObjectWeakAssign(v77, v22);
    v96.receiver = v76;
    v96.super_class = v75;
    v78 = objc_msgSendSuper2(&v96, "initWithNibName:bundle:", 0, 0);
    objc_msgSend(v74, "setRootViewController:", v78);
    objc_msgSend(v74, "makeKeyAndVisible");
    v79 = v92;
    v80 = *(void **)(v92 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_window);
    *(_QWORD *)(v92 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_window) = v74;
    v81 = v74;

    v82 = (uint64_t)v91;
    v90(v91, v19, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v82, 0, 1, v11);
    v83 = v79 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_presentationRequest;
    swift_beginAccess(v79 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_presentationRequest, &v94, 33, 0);
    sub_1000284F0(v82, v83);
    swift_endAccess(&v94);

    v66(v19, v11);
  }
}

void sub_100027B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  _BYTE v23[24];

  v1 = v0;
  v2 = sub_100008F88((uint64_t *)&unk_10013C7B0);
  __chkstk_darwin(v2, v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for SFRemoteAlertPresentationRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100009558(v11, (uint64_t)qword_100148028);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RemoteAlertSceneDelegate: sceneDidBecomeActive", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_window);
  if (v16)
  {
    v17 = objc_msgSend(v16, "rootViewController");
    if (v17)
    {
      v22 = v17;
      v18 = type metadata accessor for RemoteAlertRootViewController();
      v19 = (void *)swift_dynamicCastClass(v22, v18);
      if (v19
        && (v20 = objc_msgSend(v19, "presentedViewController"),
            v20,
            !v20))
      {
        v21 = v1 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_presentationRequest;
        swift_beginAccess(v21, v23, 0, 0);
        sub_100028468(v21, (uint64_t)v5);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
        {

          sub_1000284B0((uint64_t)v5);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
          sub_1000264E0((uint64_t)v10);

          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        }
      }
      else
      {

      }
    }
  }
}

double sub_100027D80(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[4];

  if (qword_10013AD58 != -1)
LABEL_51:
    swift_once(&qword_10013AD58, sub_100092228);
  v4 = type metadata accessor for Logger(0);
  sub_100009558(v4, (uint64_t)qword_100148028);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v59 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = sub_100027038();
    v11 = sub_100027074();
    v12 = swift_bridgeObjectRetain(a2);
    v13 = Set.description.getter(v12, v10, v11);
    v15 = v14;
    swift_bridgeObjectRelease(a2);
    v58 = sub_10003A834(v13, v15, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RemoteAlertSceneDelegate: handle buttonActions: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v16 = objc_msgSend(a1, "configurationIdentifier");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    type metadata accessor for AUIRemoteAlertPresentationManager(0);
    v21 = sub_100069274();
    a1 = (void *)dispatch thunk of SFRemoteAlertPresentationManager.presentationHandle(for:)(v18, v20);

    if (a1)
    {
      swift_bridgeObjectRelease(v20);
      if ((a2 & 0xC000000000000001) != 0)
      {
        if (a2 < 0)
          v22 = a2;
        else
          v22 = a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
        v23 = __CocoaSet.makeIterator()(v22);
        v24 = sub_100027038();
        v25 = sub_100027074();
        v26 = Set.Iterator.init(_cocoa:)(&v59, v23, v24, v25);
        a2 = v59;
        v56 = v60[0];
        v27 = v60[1];
        v28 = v60[2];
        v29 = v60[3];
      }
      else
      {
        v42 = -1 << *(_BYTE *)(a2 + 32);
        v56 = a2 + 56;
        v27 = ~v42;
        v43 = -v42;
        if (v43 < 64)
          v44 = ~(-1 << v43);
        else
          v44 = -1;
        v29 = v44 & *(_QWORD *)(a2 + 56);
        v26 = (_QWORD *)swift_bridgeObjectRetain(a2);
        v28 = 0;
      }
      v45 = (unint64_t)(v27 + 64) >> 6;
      while (1)
      {
        if (a2 < 0)
        {
          v49 = __CocoaSet.Iterator.next()(v26);
          if (!v49)
            goto LABEL_49;
          v50 = v49;
          v57 = v49;
          v51 = sub_100027038();
          swift_unknownObjectRetain(v50);
          swift_dynamicCast(&v58, &v57, (char *)&type metadata for Swift.AnyObject + 8, v51, 7);
          v52 = (id)v58;
          swift_unknownObjectRelease(v50);
          v48 = v28;
          v46 = v29;
          if (!v52)
            goto LABEL_49;
        }
        else
        {
          if (v29)
          {
            v46 = (v29 - 1) & v29;
            v47 = __clz(__rbit64(v29)) | (v28 << 6);
            v48 = v28;
          }
          else
          {
            v53 = v28 + 1;
            if (__OFADD__(v28, 1))
            {
              __break(1u);
              goto LABEL_51;
            }
            if (v53 >= v45)
              goto LABEL_49;
            v54 = *(_QWORD *)(v56 + 8 * v53);
            v48 = v28 + 1;
            if (!v54)
            {
              v48 = v28 + 2;
              if (v28 + 2 >= v45)
                goto LABEL_49;
              v54 = *(_QWORD *)(v56 + 8 * v48);
              if (!v54)
              {
                v48 = v28 + 3;
                if (v28 + 3 >= v45)
                  goto LABEL_49;
                v54 = *(_QWORD *)(v56 + 8 * v48);
                if (!v54)
                {
                  v48 = v28 + 4;
                  if (v28 + 4 >= v45)
                    goto LABEL_49;
                  v54 = *(_QWORD *)(v56 + 8 * v48);
                  if (!v54)
                  {
                    v55 = v28 + 5;
                    while (v45 != v55)
                    {
                      v54 = *(_QWORD *)(v56 + 8 * v55++);
                      if (v54)
                      {
                        v48 = v55 - 1;
                        goto LABEL_44;
                      }
                    }
LABEL_49:
                    sub_100028460(a2);
                    *(_QWORD *)&result = swift_release(a1).n128_u64[0];
                    return result;
                  }
                }
              }
            }
LABEL_44:
            v46 = (v54 - 1) & v54;
            v47 = __clz(__rbit64(v54)) + (v48 << 6);
          }
          v52 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v47);
          if (!v52)
            goto LABEL_49;
        }
        if (objc_msgSend(v52, "events") == (id)16)
          dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)(1, 0, 0);
        else
          objc_msgSend(v52, "sendResponseWithUnHandledEvents:", objc_msgSend(v52, "events"));

        v28 = v48;
        v29 = v46;
      }
    }
    v38 = swift_bridgeObjectRetain(v20);
    v31 = Logger.logObject.getter(v38);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v39))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v59 = v40;
      *(_DWORD *)v33 = 136315138;
      swift_bridgeObjectRetain(v20);
      v58 = sub_10003A834(v18, v20, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v39, "Could not find a remote alert presentation request for ID: %s", v33, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      v37 = (_QWORD *)v40;
      goto LABEL_16;
    }

    swift_bridgeObjectRelease_n(v20, 2);
  }
  else
  {
    v30 = a1;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v59 = (uint64_t)v30;
      v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
      *v34 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Could not find configuration identifier on remote alert scene: %@", v33, 0xCu);
      v36 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(v34, 1, v36);
      v37 = v34;
LABEL_16:
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      return result;
    }

  }
  return result;
}

uint64_t sub_100028460(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100028468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88((uint64_t *)&unk_10013C7B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000284B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008F88((uint64_t *)&unk_10013C7B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000284F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88((uint64_t *)&unk_10013C7B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v3 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  __chkstk_darwin(v3, v4);
  v50 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  v8 = __chkstk_darwin(v6, v7);
  v47 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v46 = (char *)v40 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = &_swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v40[1] = v1;
  v55 = &_swiftEmptyArrayStorage;
  sub_100011ED4(0, v12, 0);
  result = sub_10003E79C(a1);
  v16 = result;
  v17 = 0;
  v18 = a1 + 64;
  v41 = a1 + 80;
  v42 = v12;
  v44 = a1 + 64;
  v45 = a1;
  v43 = v15;
  v20 = v47;
  v19 = v48;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
  {
    v22 = (unint64_t)v16 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
      goto LABEL_26;
    v23 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(v19 + 72) * v16;
    v24 = v46;
    v25 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v46, v23, v49);
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v20, v24, v25);
    v27 = v50;
    v28 = SFAirDrop.TransferIdentifier.id.getter(v26);
    v29 = UUID.uuidString.getter(v28);
    v53 = v30;
    v54 = v29;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v52);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v25);
    v13 = v55;
    result = swift_isUniquelyReferenced_nonNull_native(v55);
    if ((result & 1) == 0)
    {
      result = sub_100011ED4(0, v13[2] + 1, 1);
      v13 = v55;
    }
    v32 = v13[2];
    v31 = v13[3];
    if (v32 >= v31 >> 1)
    {
      result = sub_100011ED4(v31 > 1, v32 + 1, 1);
      v13 = v55;
    }
    v13[2] = v32 + 1;
    v33 = (char *)&v13[2 * v32];
    v34 = v53;
    *((_QWORD *)v33 + 4) = v54;
    *((_QWORD *)v33 + 5) = v34;
    a1 = v45;
    v21 = 1 << *(_BYTE *)(v45 + 32);
    if (v16 >= v21)
      goto LABEL_27;
    v18 = v44;
    v35 = *(_QWORD *)(v44 + 8 * v22);
    if ((v35 & (1 << v16)) == 0)
      goto LABEL_28;
    LODWORD(v15) = v43;
    if (*(_DWORD *)(v45 + 36) != (_DWORD)v43)
      goto LABEL_29;
    v36 = v35 & (-2 << (v16 & 0x3F));
    if (v36)
    {
      v21 = __clz(__rbit64(v36)) | v16 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = v22 + 1;
      v38 = (unint64_t)(v21 + 63) >> 6;
      if (v22 + 1 < v38)
      {
        v39 = *(_QWORD *)(v44 + 8 * v37);
        if (v39)
        {
LABEL_22:
          v21 = __clz(__rbit64(v39)) + (v37 << 6);
        }
        else
        {
          while (v38 - 2 != v22)
          {
            v39 = *(_QWORD *)(v41 + 8 * v22++);
            if (v39)
            {
              v37 = v22 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v17;
    v16 = v21;
    if (v17 == v42)
      return (uint64_t)v13;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100028874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  int64_t v37;
  uint64_t v38;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000EA5E8);
  v7 = swift_getKeyPath(&unk_1000EA610);
  static Published.subscript.getter(&v38, v3, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v8 = v38;
  if (!v38)
    goto LABEL_9;
  v9 = *(_QWORD *)(v38 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
  if (v9)
  {
    v10 = swift_retain(*(_QWORD *)(v38 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity));
    v11 = Activity.id.getter(v10);
    v13 = v12;
    swift_release(v9);
    if (v11 == a1 && v13 == a2)
    {
LABEL_39:
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, a1, a2, 0);
      swift_bridgeObjectRelease(v13);
      if ((v15 & 1) == 0)
        goto LABEL_8;
    }
    return v8;
  }
LABEL_8:
  swift_release(v8);
LABEL_9:
  v16 = swift_getKeyPath(&unk_1000EA630);
  v17 = swift_getKeyPath(&unk_1000EA658);
  static Published.subscript.getter(&v38, v3, v16, v17);
  swift_release(v16);
  result = swift_release(v17);
  v19 = 0;
  v20 = v38;
  v21 = v38 + 64;
  v22 = 1 << *(_BYTE *)(v38 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v38 + 64);
  v37 = (unint64_t)(v22 + 63) >> 6;
  while (v24)
  {
    v25 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    v26 = v25 | (v19 << 6);
LABEL_30:
    v8 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v26);
    v30 = *(_QWORD *)(v8 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
    if (v30)
    {
      swift_retain(v8);
      v31 = swift_retain(v30);
      v32 = Activity.id.getter(v31);
      v34 = v33;
      swift_release(v30);
      if (v32 == a1 && v34 == a2)
      {
        swift_release(v20);
        goto LABEL_39;
      }
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, a1, a2, 0);
      swift_bridgeObjectRelease(v34);
      if ((v36 & 1) != 0)
      {
        swift_release(v20);
        return v8;
      }
      result = swift_release(v8);
    }
  }
  v27 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v27 >= v37)
    goto LABEL_37;
  v28 = *(_QWORD *)(v21 + 8 * v27);
  ++v19;
  if (v28)
    goto LABEL_29;
  v19 = v27 + 1;
  if (v27 + 1 >= v37)
    goto LABEL_37;
  v28 = *(_QWORD *)(v21 + 8 * v19);
  if (v28)
    goto LABEL_29;
  v19 = v27 + 2;
  if (v27 + 2 >= v37)
    goto LABEL_37;
  v28 = *(_QWORD *)(v21 + 8 * v19);
  if (v28)
    goto LABEL_29;
  v19 = v27 + 3;
  if (v27 + 3 >= v37)
    goto LABEL_37;
  v28 = *(_QWORD *)(v21 + 8 * v19);
  if (v28)
  {
LABEL_29:
    v24 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v19 << 6);
    goto LABEL_30;
  }
  v29 = v27 + 4;
  if (v29 >= v37)
  {
LABEL_37:
    swift_release(v20);
    return 0;
  }
  v28 = *(_QWORD *)(v21 + 8 * v29);
  if (v28)
  {
    v19 = v29;
    goto LABEL_29;
  }
  while (1)
  {
    v19 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v19 >= v37)
      goto LABEL_37;
    v28 = *(_QWORD *)(v21 + 8 * v19);
    ++v29;
    if (v28)
      goto LABEL_29;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100028B8C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v2 = swift_getKeyPath(&unk_1000EA658);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_100028BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013C7C0);
  v1 = sub_100009558(v0, (uint64_t)qword_10013C7C0);
  if (qword_10013AD48 != -1)
    swift_once(&qword_10013AD48, sub_1000921E0);
  v2 = sub_100009558(v0, (uint64_t)qword_100147FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100028C8C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AirDropTransferSessionsController(0)), "init");
  qword_100147DA0 = (uint64_t)result;
  return result;
}

uint64_t sub_100028CBC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v5 = swift_getKeyPath(&unk_1000EA658);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_100028D38(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v5 = swift_getKeyPath(&unk_1000EA658);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100028DAC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000EA5E8);
  v2 = swift_getKeyPath(&unk_1000EA610);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_100028E1C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  double v38;
  id v39;
  id v40;
  objc_class *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  double v50;
  void *v51;
  id v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  __n128 v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void *v66;
  uint64_t result;
  int v68;
  char *v69;
  objc_class *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  objc_class *ObjectType;
  _QWORD aBlock[5];
  uint64_t v76;
  objc_super v77;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDropClient.Identifier(0);
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_10013CC18);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88(&qword_10013CC20);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = 0;
  v20 = &v1[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController__airDropSessionsByID];
  v21 = v1;
  aBlock[0] = sub_10007DBAC((uint64_t)&_swiftEmptyArrayStorage);
  v22 = sub_100008F88(&qword_10013C878);
  Published.init(initialValue:)(aBlock, v22);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v19, v15);
  v23 = &v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController__bannerAirDropSession];
  aBlock[0] = 0;
  v24 = sub_100008F88(&qword_10013C888);
  Published.init(initialValue:)(aBlock, v24);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v23, v14, v10);
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersBeingEnded] = &_swiftEmptyArrayStorage;
  v25 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "initWithBundleIdentifier:", v26);

  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_userNotificationsCenter] = v27;
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_interventionTasks] = sub_10007DCC4((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for SFAirDropClient(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v9, enum case for SFAirDropClient.Identifier.airdropUI(_:), v73);
  v28 = SFAirDropClient.__allocating_init(identifier:)(v9);
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airdropClient] = v28;
  v29 = type metadata accessor for TaskPriority(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v5, 1, 1, v29);
  v31 = (_QWORD *)swift_allocObject(&unk_100125938, 40, 7);
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = v28;
  swift_retain_n(v28, 2);
  v32 = (uint64_t)v5;
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersMonitorTask] = sub_1000A65A8((uint64_t)v5, (uint64_t)&unk_10013CC30, (uint64_t)v31);
  v33 = objc_allocWithZone((Class)type metadata accessor for NearbySharingInteractionCoordinator(0));
  v34 = swift_retain(v28);
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator] = sub_10007F4A4(v34);
  v35 = type metadata accessor for SFLockStateMonitor(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_lockStateMonitor] = SFLockStateMonitor.init()();
  v36 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v37 = (unint64_t)objc_msgSend(v36, "userInterfaceLayoutDirection");

  if ((v37 & 0x8000000000000000) != 0)
    goto LABEL_13;
  if (qword_10013ACF8 != -1)
    swift_once(&qword_10013ACF8, sub_10005F144);
  v38 = *(double *)&qword_100147F40;
  v39 = objc_allocWithZone((Class)type metadata accessor for SFUIContactIconProvider(0));
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_contactIconProvider] = SFUIContactIconProvider.init(diameter:layoutDirection:)(v37, v38);
  v40 = objc_msgSend(objc_allocWithZone((Class)SFUIPeopleSuggestionImageProvider), "initWithTargetSize:layoutDirection:", v37, 1.0, 1.0);
  *(_QWORD *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_appCornerIconProvider] = v40;

  v41 = ObjectType;
  v77.receiver = v21;
  v77.super_class = ObjectType;
  v42 = objc_msgSendSuper2(&v77, "init");
  v30((char *)v32, 1, 1, v29);
  v43 = swift_allocObject(&unk_100125640, 24, 7);
  swift_unknownObjectWeakInit(v43 + 16, v42);
  v44 = swift_allocObject(&unk_100125960, 32, 7);
  *(_QWORD *)(v44 + 16) = &unk_10013CC40;
  *(_QWORD *)(v44 + 24) = v43;
  v45 = (char *)v42;
  v46 = static Task<>.noThrow(priority:operation:)(v32, &unk_10013FD00, v44, (char *)&type metadata for () + 8);
  swift_release(v44);
  swift_release(v46);
  sub_10000CC5C(v32, &qword_10013BCC0);
  v47 = *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_lockStateMonitor];
  v48 = sub_100008694(&qword_10013CC50, type metadata accessor for AirDropTransferSessionsController, (uint64_t)&unk_1000EA578);
  v49 = v45;
  swift_retain(v47);
  dispatch thunk of SFLockStateMonitor.delegate.setter(v42, v48);
  *(_QWORD *)&v50 = swift_release(v47).n128_u64[0];
  v51 = *(void **)&v49[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_userNotificationsCenter];
  objc_msgSend(v51, "setDelegate:", v49, v50);
  v52 = objc_msgSend(v51, "setWantsNotificationResponsesDelivered");
  v53 = &v71;
  __chkstk_darwin(v52, v54);
  v69 = v49;
  v70 = v41;
  v55 = swift_allocObject(&unk_100125988, 32, 7);
  *(_QWORD *)(v55 + 16) = sub_100040D14;
  *(_QWORD *)(v55 + 24) = &v68;
  aBlock[4] = sub_100041454;
  v76 = v55;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002982C;
  aBlock[3] = &unk_1001259A0;
  v56 = _Block_copy(aBlock);
  v57 = (void *)objc_opt_self(BSServiceConnectionListener);
  swift_retain(v55);
  v58 = objc_msgSend(v57, "listenerWithConfigurator:", v56);
  _Block_release(v56);
  v59 = swift_release(v76);
  LOBYTE(v56) = swift_isEscapingClosureAtFileLocation(v55, "", 0, 0, 0, 1, v59);
  swift_release(v55);
  if ((v56 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v53 = (uint64_t *)OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener;
  v60 = *(void **)&v49[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener];
  *(_QWORD *)&v49[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener] = v58;

  if (qword_10013ABE8 != -1)
LABEL_11:
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v61 = type metadata accessor for Logger(0);
  v62 = sub_100009558(v61, (uint64_t)qword_10013C7C0);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "AirDropTransferSessionsController listener is activating...", v65, 2u);
    swift_slowDealloc(v65, -1, -1);
  }

  v66 = *(void **)((char *)v53 + (_QWORD)v49);
  if (v66)
  {
    objc_msgSend(v66, "activate");
    sub_100029830();

    swift_release(v28);
    return (uint64_t)v49;
  }
  __break(1u);
LABEL_13:
  LOBYTE(v68) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v68, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000295F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.registerTransfersMonitor()[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000104E4;
  return SFAirDropClient.registerTransfersMonitor()(a1);
}

uint64_t sub_10002964C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 40) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 48) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000296B8, v3, v4);
}

uint64_t sub_1000296B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    if (qword_10013ADA0 != -1)
      swift_once(&qword_10013ADA0, sub_1000CF1D4);
    v4 = qword_100148088;
    v5 = *(void **)&v3[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator];
    swift_retain(qword_100148088);
    v6 = v5;

    v7 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v6;
    swift_release(v4);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100029780(void *a1, uint64_t a2)
{
  NSString v4;
  NSString v5;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setDomain:", v4);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setService:", v5);

  return objc_msgSend(a1, "setDelegate:", a2);
}

uint64_t sub_100029830()
{
  void *v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  ObjectType = swift_getObjectType(v0);
  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject(&unk_1001259D8, 32, 7);
  *(_QWORD *)(v7 + 16) = v0;
  *(_QWORD *)(v7 + 24) = ObjectType;
  v8 = v0;
  v9 = static Task<>.noThrow(priority:operation:)(v5, &unk_10013CCC0, v7, (char *)&type metadata for () + 8);
  swift_release(v7);
  swift_release(v9);
  return sub_10000CC5C((uint64_t)v5, &qword_10013BCC0);
}

uint64_t sub_100029948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000299B4, v3, v4);
}

uint64_t sub_1000299B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_1000299E8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000299E8()
{
  void *v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void (*v10)(_QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *Strong;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  void (*v61)(_QWORD, _QWORD);
  uint64_t v62[2];
  uint64_t v63;
  uint64_t v64;

  v1 = v0;
  if (qword_10013ADA0 != -1)
    swift_once(&qword_10013ADA0, sub_1000CF1D4);
  v2 = &qword_100147FF8[1];
  v3 = qword_100148088;
  swift_retain(qword_100148088);
  v4 = sub_1000CF45C();
  swift_release(v3);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    v62[0] = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v62[1] = v6;
    swift_retain(v4);
    swift_bridgeObjectRetain(v6);
    v7._countAndFlagsBits = 45;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x732D72656E6E6162;
    v8._object = (void *)0xEE006E6F69737365;
    String.append(_:)(v8);
    v9 = v62[0];
    v10 = (void (*)(_QWORD, _QWORD))v6;
    if (qword_10013ABE8 != -1)
      swift_once(&qword_10013ABE8, sub_100028BFC);
    v11 = type metadata accessor for Logger(0);
    sub_100009558(v11, (uint64_t)qword_10013C7C0);
    v12 = swift_retain(v4);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = v10;
      v62[0] = swift_slowAlloc(32, -1);
      v16 = v62[0];
      *(_DWORD *)v15 = 136315138;
      v18 = *v5;
      v17 = v5[1];
      swift_bridgeObjectRetain(v17);
      v19 = v18;
      v2 = qword_100147FF8 + 8;
      v63 = sub_10003A834(v19, v17, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
      swift_bridgeObjectRelease(v17);
      swift_release(v4);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Banner session updated for transfer %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      v20 = v16;
      v10 = v61;
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_release(v4);
    }

    KeyPath = swift_getKeyPath(&unk_1000EA5E8);
    v33 = swift_getKeyPath(&unk_1000EA610);
    static Published.subscript.getter(v62, v1, KeyPath, v33);
    swift_release(v33);
    swift_release(KeyPath);
    v34 = v62[0];
    if (v62[0])
    {
      if ((sub_1000709D8(v4) & 1) != 0)
      {
        v35 = swift_bridgeObjectRelease(v10);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping update because session is the same", v38, 2u);
          swift_slowDealloc(v38, -1, -1);
          swift_release(v34);
LABEL_29:

LABEL_38:
          swift_release_n(v4, 2);
          return;
        }
      }
      else
      {
        Strong = (void *)swift_unknownObjectWeakLoadStrong(v34 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate);
        v55 = *(_QWORD *)(v2[17] + 32);
        swift_retain(v55);
        if (Strong)
        {
          sub_10005B3BC(v4, v9, (uint64_t)v10, v55, 0);

        }
        else
        {
          sub_10006E394(v4, v9, (uint64_t)v10, v55);
        }
        swift_bridgeObjectRelease(v10);
        swift_release(v55);
        v36 = Logger.logObject.getter(v58);
        v59 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v36, v59))
        {
          v60 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v60 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v59, "Banner session update(with:) run", v60, 2u);
          swift_slowDealloc(v60, -1, -1);

          swift_release(v34);
          goto LABEL_38;
        }
      }
      swift_release_n(v4, 2);
      swift_release(v34);
    }
    else
    {
      v39 = *(_QWORD *)(v2[17] + 32);
      v40 = type metadata accessor for AirDropTransferSession(0);
      swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
      swift_retain(v39);
      swift_retain(v4);
      swift_bridgeObjectRetain(v10);
      v41 = sub_1000730A0(v4, v9, v10, v39);
      swift_release(v39);
      swift_release(v4);
      v42 = swift_getKeyPath(&unk_1000EA5E8);
      v43 = swift_getKeyPath(&unk_1000EA610);
      v62[0] = v41;
      v44 = v1;
      static Published.subscript.setter(v62, v44, v42, v43);
      v45 = swift_getKeyPath(&unk_1000EA5E8);
      v46 = swift_getKeyPath(&unk_1000EA610);
      static Published.subscript.getter(v62, v44, v45, v46);
      swift_release(v46);
      swift_release(v45);
      v47 = v62[0];
      if (v62[0])
      {
        v48 = swift_unknownObjectWeakLoadStrong(v62[0] + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate);
        if (v48)
        {
          v49 = (void *)v48;
          v50 = *(_QWORD *)(qword_100148088 + 32);
          swift_retain(v50);
          sub_10005B3BC(v47, v9, (uint64_t)v10, v50, 1);
          swift_release(v50);

        }
        swift_release(v47);
      }
      v51 = swift_bridgeObjectRelease(v10);
      v36 = Logger.logObject.getter(v51);
      v52 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v52, "Banner session newly created", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
        goto LABEL_29;
      }
      swift_release_n(v4, 2);
    }

  }
  else
  {
    if (qword_10013ABE8 != -1)
      swift_once(&qword_10013ABE8, sub_100028BFC);
    v21 = type metadata accessor for Logger(0);
    sub_100009558(v21, (uint64_t)qword_10013C7C0);
    v22 = v1;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v62[0] = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = swift_getKeyPath(&unk_1000EA5E8);
      v28 = swift_getKeyPath(&unk_1000EA610);
      static Published.subscript.getter(&v63, v22, v27, v28);
      swift_release(v28);
      swift_release(v27);
      v29 = v63;
      swift_release(v63);
      if (v29)
        v30 = 0x6465766F6D6572;
      else
        v30 = 0x776F687320746F6ELL;
      if (v29)
        v31 = 0xE700000000000000;
      else
        v31 = 0xE90000000000006ELL;
      v63 = sub_10003A834(v30, v31, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
      swift_bridgeObjectRelease(v31);

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Banner session %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {

    }
    v56 = swift_getKeyPath(&unk_1000EA5E8);
    v57 = swift_getKeyPath(&unk_1000EA610);
    v62[0] = 0;
    static Published.subscript.setter(v62, v22, v56, v57);
  }
}

uint64_t sub_10002A224(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2[32] = a2;
  v3 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v2[33] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[34] = v4;
  v2[35] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropSend.Request(0);
  v2[36] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[37] = v6;
  v2[38] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88((uint64_t *)&unk_10013C9D0);
  v2[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v2[40] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[41] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v10);
  v2[43] = swift_task_alloc(v10);
  v12 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v11);
  v2[44] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[45] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[46] = swift_task_alloc(v14);
  v2[47] = swift_task_alloc(v14);
  v2[48] = swift_task_alloc(v14);
  v15 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v2[49] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[50] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[51] = swift_task_alloc(v17);
  v2[52] = swift_task_alloc(v17);
  v2[53] = swift_task_alloc(v17);
  v18 = type metadata accessor for SFAirDrop.TransferType(0);
  v2[54] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[55] = v19;
  v2[56] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2[57] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v2[58] = v21;
  v2[59] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SFAirDropSend.Transfer(0);
  v2[60] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v2[61] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[62] = swift_task_alloc(v24);
  v2[63] = swift_task_alloc(v24);
  v2[64] = swift_task_alloc(v24);
  v2[65] = swift_task_alloc(v24);
  v2[66] = swift_task_alloc(v24);
  v2[67] = swift_task_alloc(v24);
  v2[68] = swift_task_alloc(v24);
  v2[69] = swift_task_alloc(v24);
  v2[70] = swift_task_alloc(v24);
  v25 = type metadata accessor for SFAirDropClient.Identifier(0);
  v2[71] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v2[72] = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[73] = swift_task_alloc(v27);
  v2[74] = swift_task_alloc(v27);
  v28 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v2[75] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v2[76] = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[77] = swift_task_alloc(v30);
  v2[78] = swift_task_alloc(v30);
  v2[79] = swift_task_alloc(v30);
  v2[80] = swift_task_alloc(v30);
  v2[81] = swift_task_alloc(v30);
  v2[82] = swift_task_alloc(v30);
  v2[83] = swift_task_alloc(v30);
  v2[84] = swift_task_alloc(v30);
  v2[85] = swift_task_alloc(v30);
  v31 = type metadata accessor for SFAirDrop.Transfers(0);
  v2[86] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v2[87] = v32;
  v2[88] = swift_task_alloc((*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100008F88(&qword_10013CCC8);
  v2[89] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v33 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100008F88(&qword_10013CBA0);
  v2[90] = v34;
  v35 = *(_QWORD *)(v34 - 8);
  v2[91] = v35;
  v2[92] = swift_task_alloc((*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for MainActor(0);
  v2[93] = v36;
  v2[94] = static MainActor.shared.getter(v36);
  v37 = dispatch thunk of Actor.unownedExecutor.getter(v36, &protocol witness table for MainActor);
  v2[95] = v37;
  v2[96] = v38;
  return swift_task_switch(sub_10002A5E4, v37, v38);
}

uint64_t sub_10002A5E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0[32] + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersMonitorTask);
  v0[97] = v1;
  v2 = async function pointer to Task.value.getter[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[98] = v3;
  v4 = sub_100008F88((uint64_t *)&unk_10013CB30);
  v0[99] = v4;
  *v3 = v0;
  v3[1] = sub_10002A678;
  return Task.value.getter(v0[92], v1, v0[90], v4, &protocol self-conformance witness table for Error);
}

uint64_t sub_10002A678()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 784);
  *(_QWORD *)(*(_QWORD *)v1 + 800) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(v2[97]);
    v4 = v2[96];
    v5 = v2[95];
    v6 = sub_10002D658;
  }
  else
  {
    v4 = v2[96];
    v5 = v2[95];
    v6 = sub_10002A6EC;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_10002A6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 736);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = swift_release(*(_QWORD *)(v0 + 776));
  v5 = SFXPCResilientAsyncSequence.makeAsyncIterator()(v3, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_QWORD *)(v0 + 176) = v5;
  *(_QWORD *)(v0 + 808) = OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersBeingEnded;
  *(_DWORD *)(v0 + 840) = enum case for SFAirDropClient.Identifier.airdropUI(_:);
  *(_QWORD *)(v0 + 816) = static MainActor.shared.getter(v6);
  v7 = sub_100008F88(&qword_10013CCD0);
  v8 = sub_100040D90();
  v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 824) = v9;
  *v9 = v0;
  v9[1] = sub_10002A7C8;
  return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 712), v7, v8);
}

uint64_t sub_10002A7C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 824);
  *(_QWORD *)(*v1 + 832) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 816);
  if (v0)
  {
    if (v4)
    {
      ObjectType = swift_getObjectType(v4);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v11 = sub_10002D220;
  }
  else
  {
    if (v4)
    {
      v9 = swift_getObjectType(v4);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
      v8 = v10;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v11 = sub_10002A88C;
  }
  return swift_task_switch(v11, v6, v8);
}

uint64_t sub_10002A88C()
{
  _QWORD *v0;

  swift_release(v0[102]);
  return swift_task_switch(sub_10002A8C8, v0[95], v0[96]);
}

uint64_t sub_10002A8C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  void (*v33)(uint64_t, NSObject *);
  uint64_t v34;
  os_log_t v35;
  unint64_t v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _TtC9AirDropUI33AirDropTransferSessionsController *v78;
  _TtC9AirDropUI33AirDropTransferSessionsController *v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _TtC9AirDropUI33AirDropTransferSessionsController *v105;
  _TtC9AirDropUI33AirDropTransferSessionsController *v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  uint64_t (*v114)(uint64_t, NSObject *);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _TtC9AirDropUI33AirDropTransferSessionsController *v118;
  _TtC9AirDropUI33AirDropTransferSessionsController *v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _TtC9AirDropUI33AirDropTransferSessionsController *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _TtC9AirDropUI33AirDropTransferSessionsController *v134;
  _TtC9AirDropUI33AirDropTransferSessionsController *v135;
  const char *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  uint64_t v143;
  void (*v144)(uint64_t, unint64_t, uint64_t);
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  SEL v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  _BOOL4 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _TtC9AirDropUI33AirDropTransferSessionsController *v170;
  _TtC9AirDropUI33AirDropTransferSessionsController *v171;
  SEL v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  uint64_t (*v179)(uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _TtC9AirDropUI33AirDropTransferSessionsController *v183;
  _TtC9AirDropUI33AirDropTransferSessionsController *v184;
  void (*v185)(uint64_t, uint64_t);
  SEL v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  NSObject *v197;
  os_log_type_t v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  _TtC9AirDropUI33AirDropTransferSessionsController *v210;
  SEL v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t KeyPath;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(_QWORD *, uint64_t);
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  SEL v254;
  id v255;
  id v256;
  id v257;
  id v258;
  id v259;
  id v260;
  uint64_t v261;
  os_log_type_t v262;
  _BOOL4 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _TtC9AirDropUI33AirDropTransferSessionsController *v273;
  _TtC9AirDropUI33AirDropTransferSessionsController *v274;
  SEL v275;
  id v276;
  id v277;
  id v278;
  id v279;
  id v280;
  id v281;
  const char **lockStateMonitor;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  BOOL v286;
  __n128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  __n128 v293;
  int64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void (*v300)(uint64_t, uint64_t);
  unint64_t v301;
  int64_t v302;
  unint64_t v303;
  int64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void (*v315)(uint64_t, uint64_t);
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  NSObject *v328;
  os_log_type_t v329;
  _BOOL4 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  os_log_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _TtC9AirDropUI33AirDropTransferSessionsController *v342;
  _TtC9AirDropUI33AirDropTransferSessionsController *v343;
  SEL v344;
  id v345;
  id v346;
  id v347;
  id v348;
  id v349;
  id v350;
  void (*v351)(uint64_t, os_log_t);
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  NSObject *v355;
  os_log_type_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _TtC9AirDropUI33AirDropTransferSessionsController *v365;
  _TtC9AirDropUI33AirDropTransferSessionsController *v366;
  SEL v367;
  id v368;
  id v369;
  id v370;
  id v371;
  id v372;
  id v373;
  uint64_t (*v374)(uint64_t, uint64_t);
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _TtC9AirDropUI33AirDropTransferSessionsController *v378;
  _TtC9AirDropUI33AirDropTransferSessionsController *v379;
  SEL v380;
  id v381;
  id v382;
  id v383;
  id v384;
  id v385;
  id v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _TtC9AirDropUI33AirDropTransferSessionsController *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _TtC9AirDropUI33AirDropTransferSessionsController *v394;
  _TtC9AirDropUI33AirDropTransferSessionsController *v395;
  void (*v396)(uint64_t, uint64_t);
  const char *v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  uint64_t v404;
  void (*v405)(uint64_t, unint64_t, uint64_t, __n128);
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  SEL v410;
  id v411;
  id v412;
  id v413;
  id v414;
  id v415;
  id v416;
  uint64_t v417;
  NSObject *v418;
  os_log_type_t v419;
  _BOOL4 v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _TtC9AirDropUI33AirDropTransferSessionsController *v431;
  _TtC9AirDropUI33AirDropTransferSessionsController *v432;
  SEL v433;
  id v434;
  id v435;
  id v436;
  id v437;
  id v438;
  id v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  SEL v445;
  id v446;
  id v447;
  id v448;
  id v449;
  id v450;
  id v451;
  uint64_t v452;
  NSObject *v453;
  os_log_type_t v454;
  _BOOL4 v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _TtC9AirDropUI33AirDropTransferSessionsController *v465;
  _TtC9AirDropUI33AirDropTransferSessionsController *v466;
  SEL v467;
  id v468;
  id v469;
  id v470;
  id v471;
  id v472;
  id v473;
  NSObject *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _TtC9AirDropUI33AirDropTransferSessionsController *v478;
  _TtC9AirDropUI33AirDropTransferSessionsController *v479;
  SEL v480;
  id v481;
  id v482;
  id v483;
  id v484;
  id v485;
  id v486;
  uint64_t v487;
  NSObject *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  NSObject *v493;
  os_log_type_t v494;
  BOOL v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  _TtC9AirDropUI33AirDropTransferSessionsController *v504;
  _TtC9AirDropUI33AirDropTransferSessionsController *v505;
  uint64_t v506;
  SEL v507;
  id v508;
  id v509;
  id v510;
  id v511;
  id v512;
  id v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t (*v523)(uint64_t, uint64_t);
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  __n128 v527;
  uint64_t v528;
  const char **v529;
  uint64_t v530;
  void (*v531)(uint64_t, uint64_t);
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _TtC9AirDropUI33AirDropTransferSessionsController *v540;
  _TtC9AirDropUI33AirDropTransferSessionsController *v541;
  SEL v542;
  id v543;
  id v544;
  id v545;
  id v546;
  id v547;
  id v548;
  void *v549;
  SEL v550;
  id v551;
  id v552;
  id v553;
  id v554;
  id v555;
  id v556;
  __n128 v557;
  _TtC9AirDropUI33AirDropTransferSessionsController *v558;
  _TtC9AirDropUI33AirDropTransferSessionsController *v559;
  SEL v560;
  id v561;
  id v562;
  id v563;
  id v564;
  id v565;
  id v566;
  _QWORD *v567;
  SEL v568;
  id v569;
  id v570;
  id v571;
  id v572;
  id v573;
  id v574;
  int64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t i;
  int64_t v582;
  unint64_t v583;
  int64_t v584;
  uint64_t *v585;
  uint64_t v586;
  _TtC9AirDropUI33AirDropTransferSessionsController *v587;
  uint64_t v588;
  NSObject *v589;
  os_log_type_t v590;
  uint64_t v591;
  uint64_t v592;
  char **v593;
  uint64_t v594;
  uint64_t v595;
  SEL v596;
  id v597;
  id v598;
  id v599;
  id v600;
  id v601;
  id v602;
  int64_t v603;
  SEL v604;
  id v605;
  id v606;
  id v607;
  id v608;
  id v609;
  id v610;
  uint64_t v611;
  const char *v612;
  void *v613;
  void *v614;
  void *v615;
  void *v616;
  void *v617;
  void *v618;
  _TtC9AirDropUI33AirDropTransferSessionsController *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  _QWORD *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  os_log_type_t type[8];
  os_log_type_t typea;
  NSObject *typeb;
  os_log_type_t typec[8];
  NSObject *typed;
  os_log_type_t v657[8];
  os_log_type_t v658[8];
  uint64_t v659;
  os_log_type_t v660[8];
  os_log_type_t v661;
  uint64_t *v662;
  os_log_t loga;
  os_log_t logb;
  NSObject *logc;
  os_log_type_t logd;
  os_log_t loge;
  os_log_t logf;
  os_log_t logg;
  os_log_type_t logh;
  os_log_t logi;
  os_log_t logj;
  os_log_t log;
  uint64_t v674;
  NSObject *v675;
  uint64_t v676;
  void (*v677)(uint64_t, uint64_t);
  NSObject *v678;
  uint64_t v679;
  void (*v680)(uint64_t, uint64_t);
  void (*v681)(uint64_t, uint64_t);
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int64_t v690;
  int64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  int64_t v703;
  int64_t v704;
  uint64_t v705;
  void (*v706)(uint64_t, unint64_t, uint64_t);
  uint64_t v707;
  uint64_t v708;
  void (*v709)(uint64_t, uint64_t);
  void (*v710)(uint64_t, uint64_t);
  void (*v711)(uint64_t, unint64_t, uint64_t, __n128);
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  char *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  int64_t v725;
  uint64_t v726;
  uint64_t v727[3];

  v2 = v0[89];
  v3 = v0[87];
  v4 = v0[86];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) == 1)
  {
    v5 = *(_QWORD *)(v726 + 176);
    swift_release(*(_QWORD *)(v726 + 752));
    swift_release(v5);
    if (qword_10013ABE8 != -1)
      goto LABEL_185;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v726 + 704), v2, v4);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v698 = v726 + 16;
  v627 = v726 + 88;
  v626 = v726 + 152;
  v625 = v726 + 200;
  v634 = v726 + 208;
  v630 = (_QWORD *)(v726 + 224);
  v628 = v726 + 216;
  v21 = type metadata accessor for Logger(0);
  v718 = sub_100009558(v21, (uint64_t)qword_10013C7C0);
  v22 = Logger.logObject.getter(v718);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "AirDropTransferSessionController transfers CHANGED", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }
  v25 = *(_QWORD *)(v726 + 808);
  v26 = *(_QWORD *)(v726 + 256);

  v27 = v26 + v25;
  v28 = SFAirDrop.Transfers.receiveTransfers.getter();
  v687 = v28 + 64;
  v695 = v28;
  v29 = -1 << *(_BYTE *)(v28 + 32);
  if (-v29 < 64)
    v30 = ~(-1 << -(char)v29);
  else
    v30 = -1;
  v31 = v30 & *(_QWORD *)(v28 + 64);
  swift_beginAccess(v27, v726 + 112, 0, 0);
  v32 = 0;
  v690 = (unint64_t)(63 - v29) >> 6;
  v683 = *(_QWORD *)(v726 + 832);
  while (1)
  {
    v720 = v1;
    if (v31)
    {
      v700 = (v31 - 1) & v31;
      v703 = v32;
      v36 = __clz(__rbit64(v31)) | (v32 << 6);
      goto LABEL_33;
    }
    v37 = __OFADD__(v32, 1);
    v38 = v32 + 1;
    if (v37)
    {
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
      goto LABEL_181;
    }
    if (v38 >= v690)
      goto LABEL_79;
    v39 = *(_QWORD *)(v687 + 8 * v38);
    if (!v39)
      break;
LABEL_32:
    v700 = (v39 - 1) & v39;
    v703 = v38;
    v36 = __clz(__rbit64(v39)) + (v38 << 6);
LABEL_33:
    v41 = *(unsigned int *)(v726 + 840);
    v42 = *(_QWORD *)(v726 + 680);
    v43 = *(_QWORD *)(v726 + 672);
    v44 = *(_QWORD *)(v726 + 608);
    v45 = *(_QWORD *)(v726 + 600);
    v46 = *(_QWORD *)(v726 + 592);
    v47 = *(_QWORD *)(v726 + 584);
    v48 = *(_QWORD *)(v726 + 576);
    v49 = *(_QWORD *)(v726 + 568);
    v706 = *(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16);
    v706(v42, *(_QWORD *)(v695 + 56) + *(_QWORD *)(v44 + 72) * v36, v45);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v43, v42, v45);
    SFAirDropReceive.Transfer.presenter.getter(v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 104))(v47, v41, v49);
    LOBYTE(v41) = static SFAirDropClient.Identifier.== infix(_:_:)(v46, v47);
    v51 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v51(v47, v49);
    v52 = ((uint64_t (*)(uint64_t, uint64_t))v51)(v46, v49);
    v53 = *(_QWORD *)(v726 + 672);
    if ((v41 & 1) == 0)
    {
      v88 = *(_QWORD *)(v726 + 624);
      v89 = *(_QWORD *)(v726 + 600);
      v706(*(_QWORD *)(v726 + 632), *(_QWORD *)(v726 + 672), v89);
      v90 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v706)(v88, v53, v89);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter();
      v93 = os_log_type_enabled(v91, v92);
      v94 = *(_QWORD *)(v726 + 672);
      v95 = *(_QWORD *)(v726 + 632);
      v96 = *(_QWORD *)(v726 + 624);
      v97 = *(_QWORD *)(v726 + 608);
      v98 = *(NSObject **)(v726 + 600);
      if (!v93)
      {

        v33 = *(void (**)(uint64_t, NSObject *))(v97 + 8);
        v33(v96, v98);
        v33(v95, v98);
        v34 = v94;
        v35 = v98;
        goto LABEL_15;
      }
      *(_QWORD *)v658 = *(_QWORD *)(v726 + 568);
      v99 = *(_QWORD *)(v726 + 624);
      v100 = *(_QWORD *)(v726 + 416);
      v101 = *(_QWORD *)(v726 + 392);
      v643 = *(_QWORD *)(v726 + 400);
      v648 = *(_QWORD *)(v726 + 592);
      v708 = *(_QWORD *)(v726 + 672);
      v102 = swift_slowAlloc(22, -1);
      v676 = swift_slowAlloc(64, -1);
      v727[0] = v676;
      *(_DWORD *)v102 = 136315394;
      logc = v91;
      SFAirDropReceive.Transfer.id.getter(v676);
      v103 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      v104 = dispatch thunk of CustomStringConvertible.description.getter(v101, v103);
      typea = v92;
      v106 = v105;
      (*(void (**)(uint64_t, uint64_t))(v643 + 8))(v100, v101);
      *(_QWORD *)(v102 + 4) = sub_10003A834(v104, (unint64_t)v106, v727);
      swift_bridgeObjectRelease(v106, v107, v108, v109, v110, v111, v112, v113);
      v114 = *(uint64_t (**)(uint64_t, NSObject *))(v97 + 8);
      v115 = v114(v95, v98);
      *(_WORD *)(v102 + 12) = 2080;
      SFAirDropReceive.Transfer.presenter.getter(v115);
      v116 = sub_100008694(&qword_10013CCE8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropClient.Identifier, (uint64_t)&protocol conformance descriptor for SFAirDropClient.Identifier);
      v117 = dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)v658, v116);
      v119 = v118;
      v51(v648, *(_QWORD *)v658);
      *(_QWORD *)(v102 + 14) = sub_10003A834(v117, (unint64_t)v119, v727);
      swift_bridgeObjectRelease(v119, v120, v121, v122, v123, v124, v125, v126);
      v114(v99, v98);
      _os_log_impl((void *)&_mh_execute_header, logc, typea, "AirDropTransferSessionController transfer update for %s skipped, presenter is %s", (uint8_t *)v102, 0x16u);
      swift_arrayDestroy(v676, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v676, -1, -1);
      swift_slowDealloc(v102, -1, -1);

      v114(v708, v98);
LABEL_16:
      v1 = v720;
      goto LABEL_17;
    }
    v55 = *(_QWORD *)(v726 + 464);
    v54 = *(_QWORD *)(v726 + 472);
    v57 = *(_QWORD *)(v726 + 448);
    v56 = *(_QWORD *)(v726 + 456);
    v58 = *(_QWORD *)(v726 + 432);
    v59 = *(_QWORD *)(v726 + 440);
    v60 = SFAirDropReceive.Transfer.askRequest.getter(v52);
    SFAirDropReceive.AskRequest.type.getter(v60);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    v62 = SFAirDrop.TransferType.isOnlyExchange.getter(v61);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
    if ((v62 & 1) != 0)
    {
      v63 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v706)(*(_QWORD *)(v726 + 640), *(_QWORD *)(v726 + 672), *(_QWORD *)(v726 + 600));
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.default.getter();
      v66 = os_log_type_enabled(v64, v65);
      v67 = *(_QWORD *)(v726 + 672);
      v68 = *(_QWORD *)(v726 + 640);
      v69 = *(_QWORD *)(v726 + 608);
      v70 = *(os_log_t *)(v726 + 600);
      if (v66)
      {
        v71 = *(_QWORD *)(v726 + 416);
        logb = *(os_log_t *)(v726 + 400);
        v675 = *(NSObject **)(v726 + 600);
        v707 = *(_QWORD *)(v726 + 672);
        v72 = *(_QWORD *)(v726 + 392);
        v73 = swift_slowAlloc(12, -1);
        v74 = swift_slowAlloc(32, -1);
        v727[0] = v74;
        *(_DWORD *)v73 = 136315138;
        v75 = v69;
        SFAirDropReceive.Transfer.id.getter(v74);
        v76 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v72, v76);
        v79 = v78;
        ((void (*)(uint64_t, uint64_t))logb[1].isa)(v71, v72);
        *(_QWORD *)(v73 + 4) = sub_10003A834(v77, (unint64_t)v79, v727);
        swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
        v33 = *(void (**)(uint64_t, NSObject *))(v75 + 8);
        v70 = v675;
        v33(v68, v675);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "AirDropTransferSessionController transfers skipped, transfer is of type onlyExchange, not monitoring on AirDropUI {id: %s}", (uint8_t *)v73, 0xCu);
        swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1, -1);
        v87 = v73;
        goto LABEL_65;
      }

      v33 = *(void (**)(uint64_t, NSObject *))(v69 + 8);
      v33(v68, v70);
      goto LABEL_67;
    }
    v127 = *(_QWORD *)(v726 + 424);
    v128 = *(_QWORD *)(v726 + 392);
    v129 = *(_QWORD *)(v726 + 400);
    v130 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(*(_QWORD *)(v726 + 256) + *(_QWORD *)(v726 + 808));
    v131 = swift_bridgeObjectRetain(v130);
    v132 = SFAirDropReceive.Transfer.id.getter(v131);
    v133 = SFAirDrop.TransferIdentifier.stringValue.getter(v132);
    v135 = v134;
    v677 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
    v677(v127, v128);
    v143 = *(_QWORD *)v130->connection;
    v144 = v706;
    if (v143)
    {
      v145 = *(_QWORD *)v130->airDropClient;
      v136 = *(const char **)v130->transfersMonitorTask;
      if (v145 == v133 && v136 == (const char *)v135
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v145, v136, v133, v135, 0) & 1) != 0)
      {
LABEL_63:
        v251 = *(_QWORD *)(v726 + 672);
        v252 = *(_QWORD *)(v726 + 648);
        v253 = *(_QWORD *)(v726 + 600);
        swift_bridgeObjectRelease(v130, v136, v137, v138, v139, v140, v141, v142);
        swift_bridgeObjectRelease(v135, v254, v255, v256, v257, v258, v259, v260);
        v261 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v706)(v252, v251, v253);
        v64 = Logger.logObject.getter(v261);
        v262 = static os_log_type_t.default.getter();
        v263 = os_log_type_enabled(v64, v262);
        v67 = *(_QWORD *)(v726 + 672);
        v264 = *(_QWORD *)(v726 + 648);
        v265 = *(_QWORD *)(v726 + 608);
        v70 = *(os_log_t *)(v726 + 600);
        if (v263)
        {
          v266 = *(_QWORD *)(v726 + 416);
          logf = *(os_log_t *)(v726 + 600);
          v707 = *(_QWORD *)(v726 + 672);
          v267 = *(_QWORD *)(v726 + 392);
          v268 = swift_slowAlloc(12, -1);
          v269 = swift_slowAlloc(32, -1);
          v727[0] = v269;
          *(_DWORD *)v268 = 136315138;
          v270 = v265;
          SFAirDropReceive.Transfer.id.getter(v269);
          v271 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
          v272 = dispatch thunk of CustomStringConvertible.description.getter(v267, v271);
          v274 = v273;
          v677(v266, v267);
          *(_QWORD *)(v268 + 4) = sub_10003A834(v272, (unint64_t)v274, v727);
          swift_bridgeObjectRelease(v274, v275, v276, v277, v278, v279, v280, v281);
          v33 = *(void (**)(uint64_t, NSObject *))(v270 + 8);
          v70 = logf;
          v33(v264, logf);
          _os_log_impl((void *)&_mh_execute_header, v64, v262, "AirDropTransferSessionController transfer update for %s skipped, this transfer is being ended to save live activity space", (uint8_t *)v268, 0xCu);
          swift_arrayDestroy(v269, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v269, -1, -1);
          v87 = v268;
LABEL_65:
          swift_slowDealloc(v87, -1, -1);

          v34 = v707;
LABEL_68:
          v35 = v70;
LABEL_15:
          v33(v34, v35);
          goto LABEL_16;
        }

        v33 = *(void (**)(uint64_t, NSObject *))(v265 + 8);
        v33(v264, v70);
LABEL_67:
        v34 = v67;
        goto LABEL_68;
      }
      if (v143 != 1)
      {
        v250 = *(_QWORD *)v130->interventionTasks;
        v136 = *(const char **)v130->nearbySharingInteractionCoordinator;
        if (v250 == v133 && v136 == (const char *)v135
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v250, v136, v133, v135, 0) & 1) != 0)
        {
          goto LABEL_63;
        }
        if (v143 != 2)
        {
          lockStateMonitor = (const char **)v130->lockStateMonitor;
          v283 = 2;
          do
          {
            v284 = v283 + 1;
            if (__OFADD__(v283, 1))
              goto LABEL_183;
            v285 = (uint64_t)*(lockStateMonitor - 1);
            v136 = *lockStateMonitor;
            v286 = v285 == v133 && v136 == (const char *)v135;
            if (v286 || (_stringCompareWithSmolCheck(_:_:expecting:)(v285, v136, v133, v135, 0) & 1) != 0)
              goto LABEL_63;
            ++v283;
            lockStateMonitor += 2;
          }
          while (v284 != v143);
        }
      }
    }
    swift_bridgeObjectRelease(v130, v136, v137, v138, v139, v140, v141, v142);
    v146 = *(_QWORD *)(v726 + 672);
    v147 = *(_QWORD *)(v726 + 664);
    v148 = *(_QWORD *)(v726 + 656);
    v149 = *(_QWORD *)(v726 + 600);
    swift_bridgeObjectRelease(v135, v150, v151, v152, v153, v154, v155, v156);
    v706(v147, v146, v149);
    v157 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v706)(v148, v146, v149);
    v158 = Logger.logObject.getter(v157);
    v159 = static os_log_type_t.debug.getter();
    v160 = os_log_type_enabled(v158, v159);
    v161 = *(_QWORD *)(v726 + 664);
    v162 = *(_QWORD *)(v726 + 656);
    v163 = *(_QWORD *)(v726 + 608);
    v164 = *(_QWORD *)(v726 + 600);
    if (v160)
    {
      v165 = *(_QWORD *)(v726 + 416);
      logd = v159;
      v166 = *(_QWORD *)(v726 + 392);
      v639 = *(_QWORD *)(v726 + 384);
      v644 = *(_QWORD *)(v726 + 352);
      v649 = *(_QWORD *)(v726 + 360);
      v167 = swift_slowAlloc(22, -1);
      v659 = swift_slowAlloc(64, -1);
      v727[0] = v659;
      *(_DWORD *)v167 = 136315394;
      typeb = v158;
      SFAirDropReceive.Transfer.id.getter(v659);
      v168 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      v169 = dispatch thunk of CustomStringConvertible.description.getter(v166, v168);
      v171 = v170;
      v677(v165, v166);
      *(_QWORD *)(v726 + 168) = sub_10003A834(v169, (unint64_t)v171, v727);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v726 + 168, v726 + 176);
      swift_bridgeObjectRelease(v171, v172, v173, v174, v175, v176, v177, v178);
      v179 = *(uint64_t (**)(uint64_t, uint64_t))(v163 + 8);
      v180 = v179(v161, v164);
      *(_WORD *)(v167 + 12) = 2080;
      SFAirDropReceive.Transfer.state.getter(v180);
      v181 = sub_100008694(&qword_10013CCF8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
      v182 = dispatch thunk of CustomStringConvertible.description.getter(v644, v181);
      v184 = v183;
      (*(void (**)(uint64_t, uint64_t))(v649 + 8))(v639, v644);
      *(_QWORD *)(v726 + 248) = sub_10003A834(v182, (unint64_t)v184, v727);
      v185 = (void (*)(uint64_t, uint64_t))v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v726 + 248, v726 + 256);
      swift_bridgeObjectRelease(v184, v186, v187, v188, v189, v190, v191, v192);
      v179(v162, v164);
      v158 = typeb;
      _os_log_impl((void *)&_mh_execute_header, typeb, logd, "AirDropTransferSessionController receive transfer {id: %s, state: %s}", (uint8_t *)v167, 0x16u);
      swift_arrayDestroy(v659, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v659, -1, -1);
      v193 = v167;
      v144 = v706;
      swift_slowDealloc(v193, -1, -1);
    }
    else
    {
      v185 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
      v185(v161, v164);
      v185(v162, v164);
    }

    v194 = v683;
    v195 = sub_10002DAF0(*(void **)(v726 + 672), 0, 0);
    v1 = v683;
    if (!v683)
    {
      v220 = v195;
      v710 = v185;
      v720 = 0;
      v222 = *(_QWORD *)(v726 + 376);
      v221 = *(_QWORD **)(v726 + 384);
      v223 = *(_QWORD *)(v726 + 352);
      v224 = *(_QWORD *)(v726 + 360);
      SFAirDropReceive.Transfer.state.getter(v195);
      KeyPath = swift_getKeyPath(&unk_1000EA708);
      v226 = swift_getKeyPath(&unk_1000EA730);
      static Published.subscript.getter(v221, v220, KeyPath, v226);
      swift_release(KeyPath);
      swift_release(v226);
      v227 = sub_100008694(&qword_10013CCF0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
      LOBYTE(KeyPath) = dispatch thunk of static Equatable.== infix(_:_:)(v221, v222, v223, v227);
      v228 = *(void (**)(_QWORD *, uint64_t))(v224 + 8);
      v228(v221, v223);
      if ((KeyPath & 1) == 0)
      {
        v230 = *(_QWORD *)(v726 + 376);
        v229 = *(_QWORD **)(v726 + 384);
        v232 = *(_QWORD *)(v726 + 360);
        v231 = *(_QWORD *)(v726 + 368);
        v233 = *(_QWORD *)(v726 + 352);
        sub_10006C6BC(v230);
        v234 = *(void (**)(uint64_t, uint64_t, uint64_t))(v232 + 16);
        v234((uint64_t)v229, v230, v233);
        v235 = swift_getKeyPath(&unk_1000EA708);
        v236 = swift_getKeyPath(&unk_1000EA730);
        v234(v231, (uint64_t)v229, v233);
        swift_retain(v220);
        static Published.subscript.setter(v231, v220, v235, v236);
        v228(v229, v233);
      }
      v237 = *(_QWORD *)(v726 + 672);
      v238 = *(_QWORD *)(v726 + 600);
      v239 = *(_QWORD *)(v726 + 344);
      v240 = v220;
      v242 = *(_QWORD *)(v726 + 328);
      v241 = *(_QWORD *)(v726 + 336);
      v243 = *(_QWORD *)(v726 + 312);
      v244 = *(_QWORD *)(v726 + 320);
      v245 = ((uint64_t (*)(_QWORD, _QWORD))v228)(*(_QWORD *)(v726 + 376), *(_QWORD *)(v726 + 352));
      SFAirDropReceive.Transfer.displayPriority.getter(v245);
      v246 = swift_getKeyPath(&unk_1000EA880);
      v247 = swift_getKeyPath(&unk_1000EA8A8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v242 + 16))(v241, v239, v244);
      swift_retain(v240);
      static Published.subscript.setter(v241, v240, v246, v247);
      v248 = (*(uint64_t (**)(uint64_t, uint64_t))(v242 + 8))(v239, v244);
      SFAirDropReceive.Transfer.cancelAction.getter(v248);
      v710(v237, v238);
      v249 = v240 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction;
      swift_beginAccess(v240 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction, v627, 33, 0);
      sub_100040DE4(v243, v249, (uint64_t *)&unk_10013C9D0);
      swift_endAccess(v627);
      swift_release(v240);
      v683 = 0;
      goto LABEL_16;
    }
    v144(*(_QWORD *)(v726 + 616), *(_QWORD *)(v726 + 672), *(_QWORD *)(v726 + 600));
    swift_errorRetain(v683);
    v196 = swift_errorRetain(v683);
    v197 = Logger.logObject.getter(v196);
    v198 = static os_log_type_t.error.getter();
    v199 = os_log_type_enabled(v197, v198);
    v200 = *(_QWORD *)(v726 + 672);
    v201 = *(_QWORD *)(v726 + 616);
    v202 = *(_QWORD *)(v726 + 600);
    if (v199)
    {
      v203 = *(_QWORD *)(v726 + 416);
      v204 = *(_QWORD *)(v726 + 392);
      v709 = v185;
      v205 = swift_slowAlloc(22, -1);
      loge = (os_log_t)swift_slowAlloc(8, -1);
      v684 = swift_slowAlloc(32, -1);
      v727[0] = v684;
      *(_DWORD *)v205 = 136315394;
      v721 = v200;
      SFAirDropReceive.Transfer.id.getter(v684);
      v206 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      v207 = dispatch thunk of CustomStringConvertible.description.getter(v204, v206);
      v209 = v208;
      v677(v203, v204);
      *(_QWORD *)(v726 + 144) = sub_10003A834(v207, v209, v727);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v726 + 144, v626);
      v210 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v209;
      v1 = v194;
      swift_bridgeObjectRelease(v210, v211, v212, v213, v214, v215, v216, v217);
      v709(v201, v202);
      *(_WORD *)(v205 + 12) = 2112;
      swift_errorRetain(v194);
      v218 = _swift_stdlib_bridgeErrorToNSError(v194);
      *(_QWORD *)(v726 + 152) = v218;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v626, v726 + 160);
      loge->isa = (Class)v218;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v197, v198, "Failed to update transfer %s: %@", (uint8_t *)v205, 0x16u);
      v219 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(loge, 1, v219);
      swift_slowDealloc(loge, -1, -1);
      swift_arrayDestroy(v684, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v684, -1, -1);
      swift_slowDealloc(v205, -1, -1);

      swift_errorRelease(v1);
      v709(v721, v202);
    }
    else
    {

      swift_errorRelease(v683);
      swift_errorRelease(v683);
      v185(v201, v202);
      swift_errorRelease(v683);
      v185(v200, v202);
    }
    v683 = 0;
LABEL_17:
    v31 = v700;
    v32 = v703;
  }
  v40 = v38 + 1;
  if (v38 + 1 >= v690)
    goto LABEL_79;
  v39 = *(_QWORD *)(v687 + 8 * v40);
  if (v39)
    goto LABEL_31;
  v40 = v38 + 2;
  if (v38 + 2 >= v690)
    goto LABEL_79;
  v39 = *(_QWORD *)(v687 + 8 * v40);
  if (v39)
    goto LABEL_31;
  v40 = v38 + 3;
  if (v38 + 3 >= v690)
    goto LABEL_79;
  v39 = *(_QWORD *)(v687 + 8 * v40);
  if (v39)
  {
LABEL_31:
    v38 = v40;
    goto LABEL_32;
  }
  v40 = v38 + 4;
  if (v38 + 4 < v690)
  {
    v39 = *(_QWORD *)(v687 + 8 * v40);
    if (!v39)
    {
      while (1)
      {
        v38 = v40 + 1;
        if (__OFADD__(v40, 1))
          break;
        if (v38 >= v690)
          goto LABEL_79;
        v39 = *(_QWORD *)(v687 + 8 * v38);
        ++v40;
        if (v39)
          goto LABEL_32;
      }
LABEL_181:
      __break(1u);
      goto LABEL_182;
    }
    goto LABEL_31;
  }
LABEL_79:
  v287 = swift_release(v695);
  v288 = *(_QWORD *)(v726 + 256) + *(_QWORD *)(v726 + 808);
  v289 = SFAirDrop.Transfers.sendTransfers.getter(v287);
  v688 = v289 + 64;
  v696 = v289;
  v290 = -1 << *(_BYTE *)(v289 + 32);
  if (-v290 < 64)
    v291 = ~(-1 << -(char)v290);
  else
    v291 = -1;
  v292 = v291 & *(_QWORD *)(v289 + 64);
  v293 = swift_beginAccess(v288, v726 + 40, 0, 0);
  v294 = 0;
  v691 = (unint64_t)(63 - v290) >> 6;
  while (2)
  {
    if (v292)
    {
      v722 = v1;
      v701 = (v292 - 1) & v292;
      v704 = v294;
      v301 = __clz(__rbit64(v292)) | (v294 << 6);
      goto LABEL_101;
    }
    v37 = __OFADD__(v294, 1);
    v302 = v294 + 1;
    if (v37)
      goto LABEL_178;
    if (v302 >= v691)
    {
LABEL_146:
      swift_release(v696);
      v535 = *(_QWORD *)(v726 + 256);
      v536 = swift_getKeyPath(&unk_1000EA630);
      v537 = swift_getKeyPath(&unk_1000EA658);
      static Published.subscript.getter(v630, v535, v536, v537);
      swift_release(v536);
      swift_release(v537);
      sub_10007E0C4(*(_QWORD *)(v726 + 224));
      v539 = v538;
      v540 = (_TtC9AirDropUI33AirDropTransferSessionsController *)SFAirDrop.Transfers.receiveTransfers.getter();
      v541 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_100028540((uint64_t)v540);
      swift_bridgeObjectRelease(v540, v542, v543, v544, v545, v546, v547, v548);
      v549 = sub_10008A1EC(v541, v539);
      swift_bridgeObjectRelease(v541, v550, v551, v552, v553, v554, v555, v556);
      v558 = (_TtC9AirDropUI33AirDropTransferSessionsController *)SFAirDrop.Transfers.sendTransfers.getter(v557);
      v559 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_100028540((uint64_t)v558);
      swift_bridgeObjectRelease(v558, v560, v561, v562, v563, v564, v565, v566);
      v567 = sub_10008A1EC(v559, (uint64_t)v549);
      swift_bridgeObjectRelease(v559, v568, v569, v570, v571, v572, v573, v574);
      v575 = 0;
      v576 = v567[7];
      v716 = (char *)(v567 + 7);
      v577 = -1;
      v578 = -1 << *((_BYTE *)v567 + 32);
      if (-v578 < 64)
        v577 = ~(-1 << -(char)v578);
      v579 = v577 & v576;
      v725 = (unint64_t)(63 - v578) >> 6;
      if ((v577 & v576) == 0)
        goto LABEL_150;
LABEL_149:
      v580 = __clz(__rbit64(v579));
      v579 &= v579 - 1;
      for (i = v580 | (v575 << 6); ; i = __clz(__rbit64(v583)) + (v575 << 6))
      {
        v585 = (uint64_t *)(v567[6] + 16 * i);
        v586 = *v585;
        v587 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v585[1];
        v588 = swift_bridgeObjectRetain_n(v587, 3);
        v589 = Logger.logObject.getter(v588);
        v590 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v589, v590))
        {
          v591 = swift_slowAlloc(12, -1);
          v592 = swift_slowAlloc(32, -1);
          v727[0] = v592;
          *(_DWORD *)v591 = 136315138;
          swift_bridgeObjectRetain(v587);
          *(_QWORD *)(v591 + 4) = sub_10003A834(v586, (unint64_t)v587, v727);
          swift_bridgeObjectRelease_n(v587, 3);
          _os_log_impl((void *)&_mh_execute_header, v589, v590, "AirDropTransferSessionController transfers removing %s", (uint8_t *)v591, 0xCu);
          swift_arrayDestroy(v592, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v592, -1, -1);
          swift_slowDealloc(v591, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v587, 2);
        }
        v593 = (char **)(*(_QWORD *)(v726 + 256) + *(_QWORD *)(v726 + 808));
        sub_10002F300(v586, (unint64_t)v587);
        swift_beginAccess(v593, v698, 33, 0);
        swift_bridgeObjectRetain(v587);
        sub_10003EC08(v593, v586, (uint64_t)v587);
        v595 = v594;
        swift_bridgeObjectRelease(v587, v596, v597, v598, v599, v600, v601, v602);
        v603 = *((_QWORD *)*v593 + 2);
        if (v603 < v595)
        {
          __break(1u);
          goto LABEL_177;
        }
        sub_10003EDB8(v595, v603);
        swift_endAccess(v698);
        swift_bridgeObjectRelease(v587, v604, v605, v606, v607, v608, v609, v610);
        if (v579)
          goto LABEL_149;
LABEL_150:
        v582 = v575 + 1;
        if (__OFADD__(v575, 1))
          goto LABEL_179;
        if (v582 >= v725)
        {
LABEL_170:
          swift_release(v567);
          sub_1000299E8();
          sub_100008F88(&qword_10013CD08);
          v611 = static Activity.activities.getter();
          v619 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v611;
          if ((unint64_t)v611 >> 62)
          {
            if (v611 >= 0)
              v611 &= 0xFFFFFFFFFFFFFF8uLL;
            v620 = _CocoaArrayWrapper.endIndex.getter(v611);
          }
          else
          {
            v620 = *(_QWORD *)((v611 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v619, v612, v613, v614, v615, v616, v617, v618);
          if (v620 > 8)
            sub_10002FA08();
          v621 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v726 + 696) + 8))(*(_QWORD *)(v726 + 704), *(_QWORD *)(v726 + 688));
          *(_QWORD *)(v726 + 816) = static MainActor.shared.getter(v621);
          v622 = sub_100008F88(&qword_10013CCD0);
          v623 = sub_100040D90();
          v624 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
          *(_QWORD *)(v726 + 824) = v624;
          *v624 = v726;
          v624[1] = sub_10002A7C8;
          return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v726 + 712), v622, v623);
        }
        v583 = *(_QWORD *)&v716[8 * v582];
        ++v575;
        if (!v583)
        {
          v575 = v582 + 1;
          if (v582 + 1 >= v725)
            goto LABEL_170;
          v583 = *(_QWORD *)&v716[8 * v575];
          if (!v583)
          {
            v575 = v582 + 2;
            if (v582 + 2 >= v725)
              goto LABEL_170;
            v583 = *(_QWORD *)&v716[8 * v575];
            if (!v583)
            {
              v584 = v582 + 3;
              if (v584 >= v725)
                goto LABEL_170;
              v583 = *(_QWORD *)&v716[8 * v584];
              if (!v583)
              {
                while (1)
                {
                  v575 = v584 + 1;
                  if (__OFADD__(v584, 1))
                    goto LABEL_180;
                  if (v575 >= v725)
                    goto LABEL_170;
                  v583 = *(_QWORD *)&v716[8 * v575];
                  ++v584;
                  if (v583)
                    goto LABEL_163;
                }
              }
              v575 = v584;
            }
          }
        }
LABEL_163:
        v579 = (v583 - 1) & v583;
      }
    }
    v303 = *(_QWORD *)(v688 + 8 * v302);
    if (v303)
    {
LABEL_100:
      v722 = v1;
      v701 = (v303 - 1) & v303;
      v704 = v302;
      v301 = __clz(__rbit64(v303)) + (v302 << 6);
LABEL_101:
      v305 = *(unsigned int *)(v726 + 840);
      v306 = *(_QWORD *)(v726 + 592);
      v307 = *(_QWORD *)(v726 + 584);
      v308 = *(_QWORD *)(v726 + 576);
      v309 = *(_QWORD *)(v726 + 568);
      v310 = *(_QWORD *)(v726 + 560);
      v311 = *(_QWORD *)(v726 + 552);
      v312 = *(_QWORD *)(v726 + 480);
      v313 = *(_QWORD *)(v726 + 488);
      v711 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v313 + 16);
      v711(v310, *(_QWORD *)(v696 + 56) + *(_QWORD *)(v313 + 72) * v301, v312, v293);
      v314 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v313 + 32))(v311, v310, v312);
      SFAirDropSend.Transfer.presenter.getter(v314);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v308 + 104))(v307, v305, v309);
      LOBYTE(v305) = static SFAirDropClient.Identifier.== infix(_:_:)(v306, v307);
      v315 = *(void (**)(uint64_t, uint64_t))(v308 + 8);
      v315(v307, v309);
      v316 = ((uint64_t (*)(uint64_t, uint64_t))v315)(v306, v309);
      v317 = *(_QWORD *)(v726 + 552);
      if ((v305 & 1) == 0)
      {
        v352 = *(_QWORD *)(v726 + 504);
        v353 = *(_QWORD *)(v726 + 480);
        ((void (*)(_QWORD, _QWORD, uint64_t))v711)(*(_QWORD *)(v726 + 512), *(_QWORD *)(v726 + 552), v353);
        v354 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v711)(v352, v317, v353);
        v355 = Logger.logObject.getter(v354);
        v356 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v355, v356))
        {
          v357 = *(_QWORD *)(v726 + 592);
          *(_QWORD *)v660 = *(_QWORD *)(v726 + 568);
          v713 = *(_QWORD *)(v726 + 552);
          v358 = *(_QWORD *)(v726 + 512);
          v359 = *(_QWORD *)(v726 + 480);
          v650 = *(_QWORD *)(v726 + 488);
          *(_QWORD *)typec = *(_QWORD *)(v726 + 504);
          v360 = *(_QWORD *)(v726 + 416);
          v361 = *(_QWORD *)(v726 + 392);
          v645 = *(_QWORD *)(v726 + 400);
          v362 = swift_slowAlloc(22, -1);
          v679 = swift_slowAlloc(64, -1);
          v727[0] = v679;
          *(_DWORD *)v362 = 136315394;
          logh = v356;
          SFAirDropSend.Transfer.id.getter(v679);
          v363 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
          v364 = dispatch thunk of CustomStringConvertible.description.getter(v361, v363);
          v366 = v365;
          (*(void (**)(uint64_t, uint64_t))(v645 + 8))(v360, v361);
          *(_QWORD *)(v362 + 4) = sub_10003A834(v364, (unint64_t)v366, v727);
          swift_bridgeObjectRelease(v366, v367, v368, v369, v370, v371, v372, v373);
          v374 = *(uint64_t (**)(uint64_t, uint64_t))(v650 + 8);
          v375 = v374(v358, v359);
          *(_WORD *)(v362 + 12) = 2080;
          SFAirDropSend.Transfer.presenter.getter(v375);
          v376 = sub_100008694(&qword_10013CCE8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropClient.Identifier, (uint64_t)&protocol conformance descriptor for SFAirDropClient.Identifier);
          v377 = dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)v660, v376);
          v379 = v378;
          v315(v357, *(_QWORD *)v660);
          *(_QWORD *)(v362 + 14) = sub_10003A834(v377, (unint64_t)v379, v727);
          swift_bridgeObjectRelease(v379, v380, v381, v382, v383, v384, v385, v386);
          v374(*(_QWORD *)typec, v359);
          _os_log_impl((void *)&_mh_execute_header, v355, logh, "AirDropTransferSessionController transfer update for %s skipped, presenter is %s", (uint8_t *)v362, 0x16u);
          swift_arrayDestroy(v679, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v679, -1, -1);
          swift_slowDealloc(v362, -1, -1);

          v374(v713, v359);
        }
        else
        {
          v295 = *(_QWORD *)(v726 + 552);
          v297 = *(_QWORD *)(v726 + 504);
          v296 = *(_QWORD *)(v726 + 512);
          v298 = *(_QWORD *)(v726 + 480);
          v299 = *(_QWORD *)(v726 + 488);

          v300 = *(void (**)(uint64_t, uint64_t))(v299 + 8);
          v300(v297, v298);
          v300(v296, v298);
          v300(v295, v298);
        }
        goto LABEL_84;
      }
      v319 = *(_QWORD *)(v726 + 440);
      v318 = *(_QWORD *)(v726 + 448);
      v320 = *(_QWORD *)(v726 + 432);
      v322 = *(_QWORD *)(v726 + 296);
      v321 = *(_QWORD *)(v726 + 304);
      v323 = *(_QWORD *)(v726 + 288);
      v324 = SFAirDropSend.Transfer.sendRequest.getter(v316);
      SFAirDropSend.Request.type.getter(v324);
      v325 = (*(uint64_t (**)(uint64_t, uint64_t))(v322 + 8))(v321, v323);
      v326 = SFAirDrop.TransferType.isOnlyExchange.getter(v325);
      (*(void (**)(uint64_t, uint64_t))(v319 + 8))(v318, v320);
      if ((v326 & 1) != 0)
      {
        v327 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v711)(*(_QWORD *)(v726 + 520), *(_QWORD *)(v726 + 552), *(_QWORD *)(v726 + 480));
        v328 = Logger.logObject.getter(v327);
        v329 = static os_log_type_t.default.getter();
        v330 = os_log_type_enabled(v328, v329);
        v331 = *(_QWORD *)(v726 + 552);
        v332 = *(_QWORD *)(v726 + 520);
        v334 = *(os_log_t *)(v726 + 480);
        v333 = *(_QWORD *)(v726 + 488);
        if (!v330)
        {

          v351 = *(void (**)(uint64_t, os_log_t))(v333 + 8);
          v351(v332, v334);
          v440 = v331;
          goto LABEL_116;
        }
        v335 = *(_QWORD *)(v726 + 416);
        logg = *(os_log_t *)(v726 + 400);
        v678 = *(NSObject **)(v726 + 480);
        v712 = *(_QWORD *)(v726 + 552);
        v336 = *(_QWORD *)(v726 + 392);
        v337 = swift_slowAlloc(12, -1);
        v338 = swift_slowAlloc(32, -1);
        v727[0] = v338;
        *(_DWORD *)v337 = 136315138;
        v339 = v333;
        SFAirDropSend.Transfer.id.getter(v338);
        v340 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
        v341 = dispatch thunk of CustomStringConvertible.description.getter(v336, v340);
        v343 = v342;
        ((void (*)(uint64_t, uint64_t))logg[1].isa)(v335, v336);
        *(_QWORD *)(v337 + 4) = sub_10003A834(v341, (unint64_t)v343, v727);
        swift_bridgeObjectRelease(v343, v344, v345, v346, v347, v348, v349, v350);
        v351 = *(void (**)(uint64_t, os_log_t))(v339 + 8);
        v334 = v678;
        v351(v332, v678);
        _os_log_impl((void *)&_mh_execute_header, v328, v329, "AirDropTransferSessionController transfers skipped, transfer is of type onlyExchange, not monitoring on AirDropUI {id: %s}", (uint8_t *)v337, 0xCu);
        swift_arrayDestroy(v338, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v338, -1, -1);
        swift_slowDealloc(v337, -1, -1);

LABEL_113:
        v440 = v712;
LABEL_116:
        v351(v440, v334);
LABEL_84:
        v1 = v722;
LABEL_85:
        v292 = v701;
        v294 = v704;
        continue;
      }
      v388 = *(_QWORD *)(v726 + 400);
      v387 = *(_QWORD *)(v726 + 408);
      v389 = *(_QWORD *)(v726 + 392);
      v390 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(*(_QWORD *)(v726 + 256) + *(_QWORD *)(v726 + 808));
      v391 = swift_bridgeObjectRetain(v390);
      v392 = SFAirDropSend.Transfer.id.getter(v391);
      v393 = SFAirDrop.TransferIdentifier.stringValue.getter(v392);
      v395 = v394;
      v396 = *(void (**)(uint64_t, uint64_t))(v388 + 8);
      v396(v387, v389);
      v404 = *(_QWORD *)v390->connection;
      v405 = v711;
      if (v404)
      {
        v406 = *(_QWORD *)v390->airDropClient;
        v397 = *(const char **)v390->transfersMonitorTask;
        if (v406 == v393 && v397 == (const char *)v395
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v406, v397, v393, v395, 0) & 1) != 0)
        {
          goto LABEL_111;
        }
        if (v404 != 1)
        {
          v528 = *(_QWORD *)v390->interventionTasks;
          v397 = *(const char **)v390->nearbySharingInteractionCoordinator;
          if (v528 == v393 && v397 == (const char *)v395
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v528, v397, v393, v395, 0) & 1) != 0)
          {
LABEL_111:
            v407 = *(_QWORD *)(v726 + 552);
            v408 = *(_QWORD *)(v726 + 528);
            v409 = *(_QWORD *)(v726 + 480);
            swift_bridgeObjectRelease(v390, v397, v398, v399, v400, v401, v402, v403);
            swift_bridgeObjectRelease(v395, v410, v411, v412, v413, v414, v415, v416);
            v417 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v711)(v408, v407, v409);
            v418 = Logger.logObject.getter(v417);
            v419 = static os_log_type_t.default.getter();
            v420 = os_log_type_enabled(v418, v419);
            v421 = *(_QWORD *)(v726 + 552);
            v422 = *(_QWORD *)(v726 + 528);
            v334 = *(os_log_t *)(v726 + 480);
            v423 = *(_QWORD *)(v726 + 488);
            if (!v420)
            {

              v351 = *(void (**)(uint64_t, os_log_t))(v423 + 8);
              v351(v422, v334);
              v440 = v421;
              goto LABEL_116;
            }
            v680 = v396;
            v424 = *(_QWORD *)(v726 + 416);
            logi = *(os_log_t *)(v726 + 480);
            v712 = *(_QWORD *)(v726 + 552);
            v425 = *(_QWORD *)(v726 + 392);
            v426 = swift_slowAlloc(12, -1);
            v427 = swift_slowAlloc(32, -1);
            v727[0] = v427;
            *(_DWORD *)v426 = 136315138;
            v428 = v423;
            SFAirDropSend.Transfer.id.getter(v427);
            v429 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
            v430 = dispatch thunk of CustomStringConvertible.description.getter(v425, v429);
            v432 = v431;
            v680(v424, v425);
            *(_QWORD *)(v426 + 4) = sub_10003A834(v430, (unint64_t)v432, v727);
            swift_bridgeObjectRelease(v432, v433, v434, v435, v436, v437, v438, v439);
            v351 = *(void (**)(uint64_t, os_log_t))(v428 + 8);
            v334 = logi;
            v351(v422, logi);
            _os_log_impl((void *)&_mh_execute_header, v418, v419, "AirDropTransferSessionController transfer update for %s skipped, this transfer is being ended to save live activity space", (uint8_t *)v426, 0xCu);
            swift_arrayDestroy(v427, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v427, -1, -1);
            swift_slowDealloc(v426, -1, -1);

            goto LABEL_113;
          }
          if (v404 != 2)
          {
            v529 = (const char **)v390->lockStateMonitor;
            v530 = 2;
            do
            {
              v531 = v396;
              v532 = v530 + 1;
              if (__OFADD__(v530, 1))
                goto LABEL_184;
              v533 = (uint64_t)*(v529 - 1);
              v397 = *v529;
              v534 = v533 == v393 && v397 == (const char *)v395;
              if (v534 || (_stringCompareWithSmolCheck(_:_:expecting:)(v533, v397, v393, v395, 0) & 1) != 0)
              {
                v396 = v531;
                goto LABEL_111;
              }
              ++v530;
              v529 += 2;
              v286 = v532 == v404;
              v396 = v531;
            }
            while (!v286);
          }
        }
      }
      v681 = v396;
      swift_bridgeObjectRelease(v390, v397, v398, v399, v400, v401, v402, v403);
      v441 = *(_QWORD *)(v726 + 552);
      v442 = *(_QWORD *)(v726 + 544);
      v443 = *(_QWORD *)(v726 + 536);
      v444 = *(_QWORD *)(v726 + 480);
      swift_bridgeObjectRelease(v395, v445, v446, v447, v448, v449, v450, v451);
      ((void (*)(uint64_t, uint64_t, uint64_t))v711)(v442, v441, v444);
      v452 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v711)(v443, v441, v444);
      v453 = Logger.logObject.getter(v452);
      v454 = static os_log_type_t.debug.getter();
      v455 = os_log_type_enabled(v453, v454);
      v456 = *(_QWORD *)(v726 + 544);
      v457 = *(_QWORD *)(v726 + 536);
      v459 = *(_QWORD *)(v726 + 480);
      v458 = *(_QWORD *)(v726 + 488);
      if (v455)
      {
        v637 = *(_QWORD *)(v726 + 480);
        v646 = *(_QWORD *)(v726 + 536);
        v460 = *(_QWORD *)(v726 + 416);
        v461 = *(_QWORD *)(v726 + 392);
        v640 = *(_QWORD *)(v726 + 280);
        logj = *(os_log_t *)(v726 + 272);
        v651 = *(_QWORD *)(v726 + 264);
        v462 = swift_slowAlloc(22, -1);
        v723 = swift_slowAlloc(64, -1);
        v727[0] = v723;
        *(_DWORD *)v462 = 136315394;
        v661 = v454;
        SFAirDropSend.Transfer.id.getter(v723);
        v463 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
        v464 = dispatch thunk of CustomStringConvertible.description.getter(v461, v463);
        typed = v453;
        v466 = v465;
        v681(v460, v461);
        *(_QWORD *)(v726 + 208) = sub_10003A834(v464, (unint64_t)v466, v727);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v634, v628);
        swift_bridgeObjectRelease(v466, v467, v468, v469, v470, v471, v472, v473);
        v474 = *(NSObject **)(v458 + 8);
        v475 = ((uint64_t (*)(uint64_t, uint64_t))v474)(v456, v459);
        *(_WORD *)(v462 + 12) = 2080;
        SFAirDropSend.Transfer.state.getter(v475);
        v476 = sub_100008694(&qword_10013CD00, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Transfer.State);
        v477 = dispatch thunk of CustomStringConvertible.description.getter(v651, v476);
        v479 = v478;
        ((void (*)(uint64_t, uint64_t))logj[1].isa)(v640, v651);
        *(_QWORD *)(v726 + 216) = sub_10003A834(v477, (unint64_t)v479, v727);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v628, v630);
        swift_bridgeObjectRelease(v479, v480, v481, v482, v483, v484, v485, v486);
        log = v474;
        ((void (*)(uint64_t, uint64_t))v474)(v646, v637);
        _os_log_impl((void *)&_mh_execute_header, typed, v661, "AirDropTransferSessionController send transfer {id: %s, state: %s}", (uint8_t *)v462, 0x16u);
        swift_arrayDestroy(v723, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v723, -1, -1);
        v487 = v462;
        v405 = v711;
        swift_slowDealloc(v487, -1, -1);

      }
      else
      {
        v488 = *(NSObject **)(v458 + 8);
        ((void (*)(_QWORD, _QWORD))v488)(*(_QWORD *)(v726 + 544), *(_QWORD *)(v726 + 480));
        log = v488;
        ((void (*)(uint64_t, uint64_t))v488)(v457, v459);

      }
      v489 = v683;
      v490 = sub_10002EB80(*(_QWORD *)(v726 + 552), 0, 0);
      v1 = v683;
      v491 = *(_QWORD *)(v726 + 552);
      if (v683)
      {
        ((void (*)(_QWORD, uint64_t, _QWORD))v405)(*(_QWORD *)(v726 + 496), v491, *(_QWORD *)(v726 + 480));
        swift_errorRetain(v683);
        v492 = swift_errorRetain(v683);
        v493 = Logger.logObject.getter(v492);
        v494 = static os_log_type_t.error.getter();
        v495 = os_log_type_enabled(v493, v494);
        v496 = *(_QWORD *)(v726 + 552);
        v497 = *(_QWORD *)(v726 + 496);
        v498 = *(_QWORD *)(v726 + 480);
        if (v495)
        {
          v499 = *(_QWORD *)(v726 + 416);
          v500 = *(_QWORD *)(v726 + 392);
          v501 = swift_slowAlloc(22, -1);
          v662 = (uint64_t *)swift_slowAlloc(8, -1);
          v685 = swift_slowAlloc(32, -1);
          v727[0] = v685;
          *(_DWORD *)v501 = 136315394;
          SFAirDropSend.Transfer.id.getter(v685);
          v502 = sub_100008694(&qword_10013CCE0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
          v503 = dispatch thunk of CustomStringConvertible.description.getter(v500, v502);
          v714 = v496;
          v505 = v504;
          v506 = v500;
          v1 = v489;
          v681(v499, v506);
          *(_QWORD *)(v726 + 192) = sub_10003A834(v503, (unint64_t)v505, v727);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v726 + 192, v625);
          swift_bridgeObjectRelease(v505, v507, v508, v509, v510, v511, v512, v513);
          ((void (*)(uint64_t, uint64_t))log)(v497, v498);
          *(_WORD *)(v501 + 12) = 2112;
          swift_errorRetain(v489);
          v514 = _swift_stdlib_bridgeErrorToNSError(v489);
          *(_QWORD *)(v726 + 200) = v514;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v625, v634);
          *v662 = v514;
          swift_errorRelease(v489);
          swift_errorRelease(v489);
          _os_log_impl((void *)&_mh_execute_header, v493, v494, "Failed to update transfer %s: %@", (uint8_t *)v501, 0x16u);
          v515 = sub_100008F88(&qword_10013BC00);
          swift_arrayDestroy(v662, 1, v515);
          swift_slowDealloc(v662, -1, -1);
          swift_arrayDestroy(v685, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v685, -1, -1);
          swift_slowDealloc(v501, -1, -1);

          swift_errorRelease(v489);
          ((void (*)(uint64_t, uint64_t))log)(v714, v498);
        }
        else
        {

          swift_errorRelease(v683);
          swift_errorRelease(v683);
          ((void (*)(uint64_t, uint64_t))log)(v497, v498);
          swift_errorRelease(v683);
          ((void (*)(uint64_t, uint64_t))log)(v496, v498);
        }
        v683 = 0;
      }
      else
      {
        v516 = v490;
        v724 = *(_QWORD *)(v726 + 480);
        v518 = *(_QWORD *)(v726 + 336);
        v517 = *(_QWORD *)(v726 + 344);
        v519 = *(_QWORD *)(v726 + 328);
        v715 = *(_QWORD *)(v726 + 320);
        v520 = *(_QWORD *)(v726 + 272);
        v521 = *(_QWORD *)(v726 + 280);
        v522 = *(_QWORD *)(v726 + 264);
        SFAirDropSend.Transfer.state.getter(v490);
        sub_10006D6F4(v521);
        v523 = *(uint64_t (**)(uint64_t, uint64_t))(v520 + 8);
        v1 = 0;
        v524 = v523(v521, v522);
        SFAirDropSend.Transfer.displayPriority.getter(v524);
        v525 = swift_getKeyPath(&unk_1000EA880);
        v526 = swift_getKeyPath(&unk_1000EA8A8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v519 + 16))(v518, v517, v715);
        swift_retain(v516);
        static Published.subscript.setter(v518, v516, v525, v526);
        (*(void (**)(uint64_t, uint64_t))(v519 + 8))(v517, v715);
        v527 = swift_release(v516);
        ((void (*)(uint64_t, uint64_t, __n128))log)(v491, v724, v527);
        v683 = 0;
      }
      goto LABEL_85;
    }
    break;
  }
  v304 = v302 + 1;
  if (v302 + 1 >= v691)
    goto LABEL_146;
  v303 = *(_QWORD *)(v688 + 8 * v304);
  if (v303)
    goto LABEL_99;
  v304 = v302 + 2;
  if (v302 + 2 >= v691)
    goto LABEL_146;
  v303 = *(_QWORD *)(v688 + 8 * v304);
  if (v303)
    goto LABEL_99;
  v304 = v302 + 3;
  if (v302 + 3 >= v691)
    goto LABEL_146;
  v303 = *(_QWORD *)(v688 + 8 * v304);
  if (v303)
    goto LABEL_99;
  v304 = v302 + 4;
  if (v302 + 4 >= v691)
    goto LABEL_146;
  v303 = *(_QWORD *)(v688 + 8 * v304);
  if (v303)
  {
LABEL_99:
    v302 = v304;
    goto LABEL_100;
  }
  while (1)
  {
    v302 = v304 + 1;
    if (__OFADD__(v304, 1))
      break;
    if (v302 >= v691)
      goto LABEL_146;
    v303 = *(_QWORD *)(v688 + 8 * v302);
    ++v304;
    if (v303)
      goto LABEL_100;
  }
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  swift_once(&qword_10013ABE8, sub_100028BFC);
LABEL_3:
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100009558(v6, (uint64_t)qword_10013C7C0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "AirDropTransferSessionController transfers ENDED", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(_QWORD *)(v726 + 712);
  v12 = *(_QWORD *)(v726 + 704);
  v13 = *(_QWORD *)(v726 + 680);
  v14 = *(_QWORD *)(v726 + 672);
  v15 = *(_QWORD *)(v726 + 664);
  v16 = *(_QWORD *)(v726 + 656);
  v17 = *(_QWORD *)(v726 + 648);
  v18 = *(_QWORD *)(v726 + 640);
  v19 = *(_QWORD *)(v726 + 632);
  v629 = *(_QWORD *)(v726 + 624);
  v631 = *(_QWORD *)(v726 + 616);
  v632 = *(_QWORD *)(v726 + 592);
  v633 = *(_QWORD *)(v726 + 584);
  v635 = *(_QWORD *)(v726 + 560);
  v636 = *(_QWORD *)(v726 + 552);
  v638 = *(_QWORD *)(v726 + 544);
  v641 = *(_QWORD *)(v726 + 536);
  v642 = *(_QWORD *)(v726 + 528);
  v647 = *(_QWORD *)(v726 + 520);
  *(_QWORD *)type = *(_QWORD *)(v726 + 512);
  *(_QWORD *)v657 = *(_QWORD *)(v726 + 504);
  loga = *(os_log_t *)(v726 + 496);
  v674 = *(_QWORD *)(v726 + 472);
  v682 = *(_QWORD *)(v726 + 448);
  v686 = *(_QWORD *)(v726 + 424);
  v689 = *(_QWORD *)(v726 + 416);
  v692 = *(_QWORD *)(v726 + 408);
  v693 = *(_QWORD *)(v726 + 384);
  v694 = *(_QWORD *)(v726 + 376);
  v697 = *(_QWORD *)(v726 + 368);
  v699 = *(_QWORD *)(v726 + 344);
  v702 = *(_QWORD *)(v726 + 336);
  v705 = *(_QWORD *)(v726 + 312);
  v717 = *(_QWORD *)(v726 + 304);
  v719 = *(_QWORD *)(v726 + 280);
  swift_task_dealloc(*(_QWORD *)(v726 + 736));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v629);
  swift_task_dealloc(v631);
  swift_task_dealloc(v632);
  swift_task_dealloc(v633);
  swift_task_dealloc(v635);
  swift_task_dealloc(v636);
  swift_task_dealloc(v638);
  swift_task_dealloc(v641);
  swift_task_dealloc(v642);
  swift_task_dealloc(v647);
  swift_task_dealloc(*(_QWORD *)type);
  swift_task_dealloc(*(_QWORD *)v657);
  swift_task_dealloc(loga);
  swift_task_dealloc(v674);
  swift_task_dealloc(v682);
  swift_task_dealloc(v686);
  swift_task_dealloc(v689);
  swift_task_dealloc(v692);
  swift_task_dealloc(v693);
  swift_task_dealloc(v694);
  swift_task_dealloc(v697);
  swift_task_dealloc(v699);
  swift_task_dealloc(v702);
  swift_task_dealloc(v705);
  swift_task_dealloc(v717);
  swift_task_dealloc(v719);
  return (*(uint64_t (**)(void))(v726 + 8))();
}

uint64_t sub_10002D220()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[102];
  v2 = v0[99];
  v0[17] = v0[104];
  swift_willThrowTypedImpl(v0 + 17, v2, &protocol self-conformance witness table for Error);
  swift_release(v1);
  return swift_task_switch(sub_10002D27C, v0[95], v0[96]);
}

uint64_t sub_10002D27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  swift_release(*(_QWORD *)(v0 + 752));
  swift_release(*(_QWORD *)(v0 + 176));
  v1 = *(_QWORD *)(v0 + 832);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013C7C0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v54 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v1, v0 + 184, v0 + 64);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    v10 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v9;
    *(_QWORD *)(v0 + 160) = sub_10003A834(v8, v9, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168);
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirDropTransferSessionController transfers FAILED {error: %s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v18 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 704);
  v20 = *(_QWORD *)(v0 + 680);
  v21 = *(_QWORD *)(v0 + 672);
  v22 = *(_QWORD *)(v0 + 664);
  v23 = *(_QWORD *)(v0 + 656);
  v24 = *(_QWORD *)(v0 + 648);
  v25 = *(_QWORD *)(v0 + 640);
  v26 = *(_QWORD *)(v0 + 632);
  v28 = *(_QWORD *)(v0 + 624);
  v29 = *(_QWORD *)(v0 + 616);
  v30 = *(_QWORD *)(v0 + 592);
  v31 = *(_QWORD *)(v0 + 584);
  v32 = *(_QWORD *)(v0 + 560);
  v33 = *(_QWORD *)(v0 + 552);
  v34 = *(_QWORD *)(v0 + 544);
  v35 = *(_QWORD *)(v0 + 536);
  v36 = *(_QWORD *)(v0 + 528);
  v37 = *(_QWORD *)(v0 + 520);
  v38 = *(_QWORD *)(v0 + 512);
  v39 = *(_QWORD *)(v0 + 504);
  v40 = *(_QWORD *)(v0 + 496);
  v41 = *(_QWORD *)(v0 + 472);
  v42 = *(_QWORD *)(v0 + 448);
  v43 = *(_QWORD *)(v0 + 424);
  v44 = *(_QWORD *)(v0 + 416);
  v45 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 384);
  v47 = *(_QWORD *)(v0 + 376);
  v48 = *(_QWORD *)(v0 + 368);
  v49 = *(_QWORD *)(v0 + 344);
  v50 = *(_QWORD *)(v0 + 336);
  v51 = *(_QWORD *)(v0 + 312);
  v52 = *(_QWORD *)(v0 + 304);
  v53 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 736));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002D658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  swift_release(*(_QWORD *)(v0 + 752));
  v1 = *(_QWORD *)(v0 + 800);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013C7C0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v54 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v1, v0 + 184, v0 + 64);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    v10 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v9;
    *(_QWORD *)(v0 + 160) = sub_10003A834(v8, v9, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168);
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirDropTransferSessionController transfers FAILED {error: %s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v18 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 704);
  v20 = *(_QWORD *)(v0 + 680);
  v21 = *(_QWORD *)(v0 + 672);
  v22 = *(_QWORD *)(v0 + 664);
  v23 = *(_QWORD *)(v0 + 656);
  v24 = *(_QWORD *)(v0 + 648);
  v25 = *(_QWORD *)(v0 + 640);
  v26 = *(_QWORD *)(v0 + 632);
  v28 = *(_QWORD *)(v0 + 624);
  v29 = *(_QWORD *)(v0 + 616);
  v30 = *(_QWORD *)(v0 + 592);
  v31 = *(_QWORD *)(v0 + 584);
  v32 = *(_QWORD *)(v0 + 560);
  v33 = *(_QWORD *)(v0 + 552);
  v34 = *(_QWORD *)(v0 + 544);
  v35 = *(_QWORD *)(v0 + 536);
  v36 = *(_QWORD *)(v0 + 528);
  v37 = *(_QWORD *)(v0 + 520);
  v38 = *(_QWORD *)(v0 + 512);
  v39 = *(_QWORD *)(v0 + 504);
  v40 = *(_QWORD *)(v0 + 496);
  v41 = *(_QWORD *)(v0 + 472);
  v42 = *(_QWORD *)(v0 + 448);
  v43 = *(_QWORD *)(v0 + 424);
  v44 = *(_QWORD *)(v0 + 416);
  v45 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 384);
  v47 = *(_QWORD *)(v0 + 376);
  v48 = *(_QWORD *)(v0 + 368);
  v49 = *(_QWORD *)(v0 + 344);
  v50 = *(_QWORD *)(v0 + 336);
  v51 = *(_QWORD *)(v0 + 312);
  v52 = *(_QWORD *)(v0 + 304);
  v53 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 736));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002DA2C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002DAF0(void *a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t), _TtC9AirDropUI33AirDropTransferSessionsController *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t (*v68)(char *, id, uint64_t);
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  uint64_t KeyPath;
  uint64_t v74;
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  void *v76;
  const char *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  _TtC9AirDropUI33AirDropTransferSessionsController *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  _TtC9AirDropUI33AirDropTransferSessionsController *v105;
  _TtC9AirDropUI33AirDropTransferSessionsController *v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t (*v113)(char *, char *, uint64_t);
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  void *v118;
  uint64_t (*v119)(char *, id, uint64_t);
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t (*v132)(char *, uint64_t);
  uint64_t v133;
  char *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  id v144;
  void (*v145)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  SEL v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  uint64_t v155;
  void *v156;
  _TtC9AirDropUI33AirDropTransferSessionsController *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  void (*v165)(_TtC9AirDropUI33AirDropTransferSessionsController **, _QWORD);
  void **v166;
  void **v167;
  char isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v169;
  SEL v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  SEL v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  _TtC9AirDropUI33AirDropTransferSessionsController *v186;
  uint64_t v187;
  _TtC9AirDropUI33AirDropTransferSessionsController *v188;
  void (*v189)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  SEL v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  _TtC9AirDropUI33AirDropTransferSessionsController *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (**v216)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  void (*v224)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v225;
  SEL v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _TtC9AirDropUI33AirDropTransferSessionsController *v245;
  _TtC9AirDropUI33AirDropTransferSessionsController *v246;
  void (*v247)(char *, uint64_t);
  uint64_t v248;
  uint64_t v249;
  char v250;
  SEL v251;
  id v252;
  id v253;
  id v254;
  id v255;
  id v256;
  id v257;
  SEL v258;
  id v259;
  id v260;
  id v261;
  id v262;
  id v263;
  id v264;
  void (*v265)(char *, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  void *v274;
  id v275;
  uint64_t v276;
  __n128 v277;
  uint64_t v279;
  void (*v280)(char *, char *, uint64_t);
  int v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  void (*v300)(char *, uint64_t);
  void (*v301)(char *, uint64_t);
  char *v302;
  uint64_t (*v303)(char *, id, uint64_t);
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  void *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  void (*v316)(char *, uint64_t, uint64_t, uint64_t);
  id v317;
  char *v318;
  _TtC9AirDropUI33AirDropTransferSessionsController *v319;
  _TtC9AirDropUI33AirDropTransferSessionsController *v320;
  _TtC9AirDropUI33AirDropTransferSessionsController *v321;
  _TtC9AirDropUI33AirDropTransferSessionsController *v322;
  uint64_t v323;

  v316 = a2;
  v290 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v289 = *(_QWORD *)(v290 - 8);
  v6 = __chkstk_darwin(v290, v5);
  v287 = (char *)&v280 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v288 = (char *)&v280 - v9;
  v294 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v293 = *(_QWORD *)(v294 - 8);
  __chkstk_darwin(v294, v10);
  v299 = (char *)&v280 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v292 = *(_QWORD *)(v286 - 8);
  __chkstk_darwin(v286, v12);
  v291 = (char *)&v280 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008F88(&qword_10013CD40);
  __chkstk_darwin(v14, v15);
  v296 = (void (**)(char *, char *, uint64_t))((char *)&v280 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v297 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v298 = *(_QWORD *)(v297 - 8);
  v18 = __chkstk_darwin(v297, v17);
  v283 = (char *)&v280 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = v19;
  __chkstk_darwin(v18, v20);
  v295 = (char *)&v280 - v21;
  v22 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v22, v23);
  v302 = (char *)&v280 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  __chkstk_darwin(v25, v26);
  v311 = (char *)&v280 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DeviceLockState(0);
  __chkstk_darwin(v28, v29);
  v310 = (char *)&v280 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v31, v32);
  v309 = (char *)&v280 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v34);
  v304 = *(_QWORD *)(v35 - 8);
  v305 = v35;
  v37 = __chkstk_darwin(v35, v36);
  v308 = (char *)&v280 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v37, v39);
  v307 = (char *)&v280 - v41;
  __chkstk_darwin(v40, v42);
  v313 = (uint64_t)&v280 - v43;
  v44 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v314 = *(_QWORD **)(v44 - 8);
  v315 = v44;
  v46 = __chkstk_darwin(v44, v45);
  v285 = (char *)&v280 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v46, v48);
  v306 = (char *)&v280 - v50;
  v284 = v51;
  __chkstk_darwin(v49, v52);
  v318 = (char *)&v280 - v53;
  v54 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v55 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54, v56);
  v58 = (char *)&v280 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v60 = *(_QWORD *)(v59 - 8);
  v62 = __chkstk_darwin(v59, v61);
  v64 = (char *)&v280 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62, v65);
  v67 = (char *)&v280 - v66;
  v68 = *(uint64_t (**)(char *, id, uint64_t))(v60 + 16);
  v317 = a1;
  v303 = v68;
  v69 = v68((char *)&v280 - v66, a1, v59);
  if (a3)
  {
    v70 = *(void (**)(char *, uint64_t))(v60 + 8);
    swift_bridgeObjectRetain(a3);
  }
  else
  {
    v71 = SFAirDropReceive.Transfer.id.getter(v69);
    v316 = (void (*)(char *, uint64_t, uint64_t, uint64_t))SFAirDrop.TransferIdentifier.stringValue.getter(v71);
    a3 = v72;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v58, v54);
    v70 = *(void (**)(char *, uint64_t))(v60 + 8);
  }
  v70(v67, v59);
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v74 = swift_getKeyPath(&unk_1000EA658);
  v75 = a3;
  swift_bridgeObjectRetain(a3);
  v76 = v312;
  static Published.subscript.getter(&v321, v312, KeyPath, v74);
  swift_release(v74);
  swift_release(KeyPath);
  v84 = v321;
  v85 = v315;
  v86 = v318;
  if (!*(_QWORD *)v321->connection
    || (v87 = sub_10003AF58((uint64_t)v316, (uint64_t)v75), (v77 & 1) == 0))
  {
    v301 = v70;
    v96 = v76;
    swift_bridgeObjectRelease(v84, v77, v78, v79, v80, v81, v82, v83);
    swift_bridgeObjectRelease(v75, v97, v98, v99, v100, v101, v102, v103);
    v104 = SFAirDropReceive.Transfer.askRequest.getter();
    SFAirDropReceive.AskRequest.contactIdentifier.getter(v104);
    v106 = v105;
    swift_bridgeObjectRelease(v105, (SEL)v105, v107, v108, v109, v110, v111, v112);
    v113 = (uint64_t (*)(char *, char *, uint64_t))v314[2];
    v114 = v306;
    v115 = v113(v306, v86, v85);
    v280 = (void (*)(char *, char *, uint64_t))v113;
    if (v106)
      LOBYTE(v116) = 1;
    else
      v116 = SFAirDropReceive.AskRequest.senderIsMe.getter(v115);
    v117 = v114;
    v118 = v96;
    v119 = v303;
    v120 = (void (*)(char *, uint64_t))v314[1];
    v120(v117, v85);
    v121 = v119(v64, v317, v59);
    v300 = v120;
    if ((v116 & 1) != 0)
      v281 = 1;
    else
      v281 = SFAirDropReceive.Transfer.isPreviewSensitive.getter(v121);
    v122 = v304;
    v123 = v305;
    v301(v64, v59);
    v124 = swift_bridgeObjectRetain(v75);
    LODWORD(v306) = SFAirDropReceive.AskRequest.senderIsMe.getter(v124);
    v125 = SFAirDropReceive.AskRequest.senderCompositeName.getter();
    v304 = v126;
    v305 = v125;
    ((void (*)(void))SFAirDropReceive.Transfer.state.getter)();
    v127 = type metadata accessor for SFAirDropSend.Transfer.State(0);
    v128 = v309;
    v129 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v309, 1, 1, v127);
    v130 = v307;
    v131 = SFAirDropReceive.Transfer.state.getter(v129);
    v303 = (uint64_t (*)(char *, id, uint64_t))SFAirDropReceive.Transfer.State.currentProgressCount.getter(v131);
    v132 = *(uint64_t (**)(char *, uint64_t))(v122 + 8);
    v133 = v132(v130, v123);
    v134 = v308;
    v135 = SFAirDropReceive.Transfer.state.getter(v133);
    v136 = (void *)SFAirDropReceive.Transfer.State.totalProgressCount.getter(v135);
    v137 = v132(v134, v123);
    v138 = v310;
    v139 = dispatch thunk of SFLockStateMonitor.lockState.getter(v137);
    v140 = v311;
    v141 = SFAirDropReceive.Transfer.displayPriority.getter(v139);
    v142 = SFAirDropReceive.Transfer.isPreviewSensitive.getter(v141);
    v143 = type metadata accessor for AirDropTransferSession(0);
    v88 = swift_allocObject(v143, *(unsigned int *)(v143 + 48), *(unsigned __int16 *)(v143 + 52));
    v144 = v118;
    v279 = (uint64_t)v128;
    v145 = v316;
    v146 = v323;
    v147 = sub_10006A548((uint64_t)v316, (uint64_t)v75, v306 & 1, v305, v304, 0, 0, v313, v279, v303, v136, v138, v140, v144, (uint64_t)&off_1001255E8, v142 & 1);
    v323 = v146;
    if (v146)
    {
      v300(v318, v315);
      swift_bridgeObjectRelease(v75, v148, v149, v150, v151, v152, v153, v154);
      return v88;
    }
    v88 = v147;
    v317 = v144;
    v155 = SFAirDropReceive.AskRequest.previewImage.getter();
    if (v155)
    {
      v156 = (void *)v155;
      v157 = (_TtC9AirDropUI33AirDropTransferSessionsController *)objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:", v155);
      v158 = swift_getKeyPath(&unk_1000EA798);
      v159 = swift_getKeyPath(&unk_1000EA7C0);
      v321 = v157;
      swift_retain(v88);
      static Published.subscript.setter(&v321, v88, v158, v159);

    }
    v160 = swift_getKeyPath(&unk_1000EA8C8);
    v161 = swift_getKeyPath(&unk_1000EA8F0);
    LOBYTE(v321) = v281 & 1;
    swift_retain(v88);
    static Published.subscript.setter(&v321, v88, v160, v161);
    v162 = swift_getKeyPath(&unk_1000EA630);
    v163 = swift_getKeyPath(&unk_1000EA658);
    swift_bridgeObjectRetain(v75);
    swift_retain(v88);
    v164 = v317;
    v165 = (void (*)(_TtC9AirDropUI33AirDropTransferSessionsController **, _QWORD))static Published.subscript.modify(&v321, v317, v162, v163);
    v167 = v166;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v166);
    v319 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v167;
    *v167 = (void *)0x8000000000000000;
    sub_100089404(v88, (uint64_t)v145, (uint64_t)v75, isUniquelyReferenced_nonNull_native);
    v169 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v167;
    *v167 = v319;
    swift_bridgeObjectRelease(v169, v170, v171, v172, v173, v174, v175, v176);
    swift_bridgeObjectRelease(v75, v177, v178, v179, v180, v181, v182, v183);
    v165(&v321, 0);
    swift_release(v163);
    swift_release(v162);
    v185 = SFAirDropReceive.AskRequest.contactIdentifier.getter(v184);
    if (v186)
    {
      v187 = v185;
      v188 = v186;
      v189 = v145;
      v190 = type metadata accessor for TaskPriority(0);
      v191 = (uint64_t)v302;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v190 - 8) + 56))(v302, 1, 1, v190);
      v192 = swift_allocObject(&unk_100125640, 24, 7);
      swift_unknownObjectWeakInit(v192 + 16, v164);
      v193 = (_QWORD *)swift_allocObject(&unk_100125AC8, 56, 7);
      v193[2] = v192;
      v193[3] = v187;
      v193[4] = v188;
      v193[5] = v189;
      v193[6] = v75;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v188);
      v194 = static Task<>.noThrow(priority:operation:)(v191, &unk_10013CD88, v193, (char *)&type metadata for () + 8);
      swift_release(v193);
      swift_release(v194);
      sub_10000CC5C(v191, &qword_10013BCC0);
      swift_bridgeObjectRelease(v188, v195, v196, v197, v198, v199, v200, v201);
    }
    v202 = swift_getKeyPath(&unk_1000EA798);
    v203 = swift_getKeyPath(&unk_1000EA7C0);
    static Published.subscript.getter(&v321, v88, v202, v203);
    swift_release(v203);
    swift_release(v202);
    v204 = v321;

    v205 = v299;
    if (!v204)
    {
      v206 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v206 - 8) + 56))(v302, 1, 1, v206);
      v207 = swift_allocObject(&unk_100125640, 24, 7);
      swift_unknownObjectWeakInit(v207 + 16, v317);
      v208 = v285;
      v209 = v315;
      v280(v285, v318, v315);
      v210 = v314;
      v211 = *((unsigned __int8 *)v314 + 80);
      v212 = (v211 + 24) & ~v211;
      v213 = (v284 + v212 + 7) & 0xFFFFFFFFFFFFFFF8;
      v214 = swift_allocObject(&unk_100125AA0, v213 + 16, v211 | 7);
      *(_QWORD *)(v214 + 16) = v207;
      v215 = v209;
      v205 = v299;
      ((void (*)(uint64_t, char *, uint64_t))v210[4])(v214 + v212, v208, v215);
      v216 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v214 + v213);
      *v216 = v316;
      v216[1] = (void (*)(char *, uint64_t, uint64_t, uint64_t))v75;
      swift_bridgeObjectRetain(v75);
      v217 = (uint64_t)v302;
      v218 = static Task<>.noThrow(priority:operation:)(v302, &unk_10013CD78, v214, (char *)&type metadata for () + 8);
      swift_release(v214);
      swift_release(v218);
      sub_10000CC5C(v217, &qword_10013BCC0);
    }
    v219 = type metadata accessor for TaskPriority(0);
    v220 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v219 - 8) + 56);
    v221 = (uint64_t)v302;
    v220(v302, 1, 1, v219);
    v222 = swift_allocObject(&unk_100125640, 24, 7);
    swift_unknownObjectWeakInit(v222 + 16, v317);
    v223 = (_QWORD *)swift_allocObject(&unk_100125A50, 40, 7);
    v224 = v316;
    v223[2] = v222;
    v223[3] = v224;
    v223[4] = v75;
    swift_bridgeObjectRetain(v75);
    v225 = static Task<>.noThrow(priority:operation:)(v221, &unk_10013CD50, v223, (char *)&type metadata for () + 8);
    swift_release(v223);
    swift_release(v225);
    sub_10000CC5C(v221, &qword_10013BCC0);
    swift_bridgeObjectRelease(v75, v226, v227, v228, v229, v230, v231, v232);
    v233 = v296;
    sub_10007FEF8(v296);
    v234 = v298;
    v235 = v297;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v298 + 48))(v233, 1, v297) == 1)
    {
      v300(v318, v315);
      sub_10000CC5C((uint64_t)v233, &qword_10013CD40);
      return v88;
    }
    v316 = v220;
    v236 = *(_QWORD **)(v234 + 32);
    v237 = v295;
    v238 = ((uint64_t (*)(char *, _QWORD *, uint64_t))v236)(v295, v233, v235);
    SFAirDrop.NearbySharingInteraction.state.getter(v238);
    v239 = v293;
    v240 = v294;
    if ((*(unsigned int (**)(char *, uint64_t))(v293 + 88))(v205, v294) != enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
    {
      (*(void (**)(char *, uint64_t))(v234 + 8))(v237, v235);
      v300(v318, v315);
      (*(void (**)(char *, uint64_t))(v239 + 8))(v205, v240);
      return v88;
    }
    v314 = v236;
    (*(void (**)(char *, uint64_t))(v239 + 96))(v205, v240);
    v241 = v286;
    v242 = (*(uint64_t (**)(char *, char *, uint64_t))(v292 + 32))(v291, v205, v286);
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v242);
    v243 = v290;
    (*(void (**)(char *, _QWORD, uint64_t))(v289 + 104))(v287, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:), v290);
    v244 = sub_100008694(&qword_10013D270, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
    dispatch thunk of RawRepresentable.rawValue.getter(&v321, v243, v244);
    dispatch thunk of RawRepresentable.rawValue.getter(&v319, v243, v244);
    v245 = v322;
    v246 = v320;
    if (v321 == v319 && v322 == v320)
    {
      swift_bridgeObjectRelease_n(v322, 2);
      v247 = *(void (**)(char *, uint64_t))(v289 + 8);
      v248 = v290;
      v247(v287, v290);
      v247(v288, v248);
      v249 = v297;
    }
    else
    {
      v250 = _stringCompareWithSmolCheck(_:_:expecting:)(v321, v322, v319, v320, 0);
      swift_bridgeObjectRelease(v246, v251, v252, v253, v254, v255, v256, v257);
      swift_bridgeObjectRelease(v245, v258, v259, v260, v261, v262, v263, v264);
      v265 = *(void (**)(char *, uint64_t))(v289 + 8);
      v266 = v290;
      v265(v287, v290);
      v265(v288, v266);
      v249 = v297;
      if ((v250 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v292 + 8))(v291, v241);
        (*(void (**)(char *, uint64_t))(v298 + 8))(v295, v249);
        goto LABEL_31;
      }
    }
    v267 = (uint64_t)v302;
    v316(v302, 1, 1, v219);
    v268 = v298;
    v269 = v283;
    v270 = v295;
    (*(void (**)(char *, char *, uint64_t))(v298 + 16))(v283, v295, v249);
    v271 = *(unsigned __int8 *)(v268 + 80);
    v272 = (v271 + 40) & ~v271;
    v273 = (_QWORD *)swift_allocObject(&unk_100125A78, v272 + v282, v271 | 7);
    v273[2] = 0;
    v273[3] = 0;
    v274 = v317;
    v273[4] = v317;
    ((void (*)(char *, char *, uint64_t))v314)((char *)v273 + v272, v269, v249);
    v275 = v274;
    v276 = sub_1000A66DC(v267, (uint64_t)&unk_10013CD68, (uint64_t)v273);
    v277 = swift_release(v276);
    (*(void (**)(char *, uint64_t, __n128))(v292 + 8))(v291, v286, v277);
    (*(void (**)(char *, uint64_t))(v268 + 8))(v270, v249);
LABEL_31:
    v300(v318, v315);
    return v88;
  }
  v88 = *(_QWORD *)(*(_QWORD *)v84->nearbySharingInteractionCoordinator + 8 * v87);
  swift_retain(v88);
  swift_bridgeObjectRelease(v84, v89, v90, v91, v92, v93, v94, v95);
  swift_bridgeObjectRelease_n(v75, 2);
  return v88;
}

uint64_t sub_10002EB80(uint64_t a1, uint64_t a2, _TtC9AirDropUI33AirDropTransferSessionsController *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  uint64_t KeyPath;
  uint64_t v47;
  const char *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _TtC9AirDropUI33AirDropTransferSessionsController *v55;
  unint64_t v56;
  uint64_t v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  _TtC9AirDropUI33AirDropTransferSessionsController *v79;
  uint64_t (*v80)(char *, _TtC9AirDropUI33AirDropTransferSessionsController *);
  char *v81;
  _TtC9AirDropUI33AirDropTransferSessionsController *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _TtC9AirDropUI33AirDropTransferSessionsController *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  char *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  void (*v111)(id *, _QWORD);
  _TtC9AirDropUI33AirDropTransferSessionsController **v112;
  _TtC9AirDropUI33AirDropTransferSessionsController **v113;
  char isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v115;
  SEL v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  SEL v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _TtC9AirDropUI33AirDropTransferSessionsController *v145;
  uint64_t v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(char *, uint64_t, uint64_t);
  void (*v162)(char *, uint64_t, uint64_t);
  char *v163;
  uint64_t v164;
  char *v165;
  _TtC9AirDropUI33AirDropTransferSessionsController *v166;
  char *v167;
  char *v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  _TtC9AirDropUI33AirDropTransferSessionsController *v172;
  uint64_t v173;
  id v174[5];
  _TtC9AirDropUI33AirDropTransferSessionsController *v175;

  v173 = a2;
  v5 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v5, v6);
  v158 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDropSend.Request(0);
  v159 = *(_QWORD *)(v8 - 8);
  v160 = v8;
  v10 = __chkstk_darwin(v8, v9);
  v157 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = v11;
  __chkstk_darwin(v10, v12);
  v163 = (char *)&v155 - v13;
  v14 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  __chkstk_darwin(v14, v15);
  v169 = (void (*)(char *, uint64_t))((char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for DeviceLockState(0);
  __chkstk_darwin(v17, v18);
  v168 = (char *)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = (_TtC9AirDropUI33AirDropTransferSessionsController *)type metadata accessor for SFAirDropSend.Transfer.State(0);
  v164 = *(_QWORD *)v166[-1].transfersBeingEnded;
  v21 = __chkstk_darwin(v166, v20);
  v165 = (char *)&v155 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v155 - v25;
  __chkstk_darwin(v24, v27);
  v167 = (char *)&v155 - v28;
  v29 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  v33 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for SFAirDropSend.Transfer(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34, v36);
  v38 = (char *)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v170 = a1;
  v40 = v39(v38, a1, v34);
  if (a3)
  {
    v41 = *(void (**)(char *, uint64_t))(v35 + 8);
    v42 = a3;
    swift_bridgeObjectRetain(a3);
  }
  else
  {
    v43 = SFAirDropSend.Transfer.id.getter(v40);
    v173 = SFAirDrop.TransferIdentifier.stringValue.getter(v43);
    v44 = *(void (**)(char *, uint64_t))(v30 + 8);
    v42 = v45;
    v44(v33, v29);
    v41 = *(void (**)(char *, uint64_t))(v35 + 8);
  }
  v41(v38, v34);
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v47 = swift_getKeyPath(&unk_1000EA658);
  swift_bridgeObjectRetain(v42);
  static Published.subscript.getter(v174, v172, KeyPath, v47);
  swift_release(v47);
  swift_release(KeyPath);
  v55 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v174[0];
  if (*((_QWORD *)v174[0] + 2) && (v56 = sub_10003AF58(v173, (uint64_t)v42), (v48 & 1) != 0))
  {
    v57 = *(_QWORD *)(*(_QWORD *)v55->nearbySharingInteractionCoordinator + 8 * v56);
    swift_retain(v57);
    swift_bridgeObjectRelease(v55, v58, v59, v60, v61, v62, v63, v64);
    swift_bridgeObjectRelease_n(v42, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v55, v48, v49, v50, v51, v52, v53, v54);
    swift_bridgeObjectRelease(v42, v65, v66, v67, v68, v69, v70, v71);
    v72 = swift_bridgeObjectRetain(v42);
    v73 = (void (*)(char *, uint64_t, uint64_t))SFAirDropSend.Transfer.receiverName.getter(v72);
    v161 = v74;
    v162 = v73;
    v75 = (uint64_t)v167;
    v76 = ((uint64_t (*)(void))SFAirDropSend.Transfer.state.getter)();
    v77 = SFAirDropSend.Transfer.state.getter(v76);
    v78 = (void *)SFAirDropSend.Transfer.State.currentProgressCount.getter(v77);
    v79 = v42;
    v80 = *(uint64_t (**)(char *, _TtC9AirDropUI33AirDropTransferSessionsController *))(v164 + 8);
    v81 = v26;
    v82 = v166;
    v83 = v80(v81, v166);
    v84 = v165;
    v85 = SFAirDropSend.Transfer.state.getter(v83);
    v86 = (void *)SFAirDropSend.Transfer.State.totalProgressCount.getter(v85);
    v87 = v80(v84, v82);
    v88 = v172;
    v89 = (uint64_t)v168;
    v90 = dispatch thunk of SFLockStateMonitor.lockState.getter(v87);
    v57 = (uint64_t)v169;
    SFAirDropSend.Transfer.displayPriority.getter(v90);
    v166 = v88;
    v91 = v173;
    v172 = v79;
    v92 = v171;
    v93 = sub_1000745F0(v173, (uint64_t)v79, v162, v161, v75, v78, v86, v89, v57, v166, (uint64_t)&off_1001255E8);
    if (v92)
      goto LABEL_8;
    v57 = v93;
    v171 = 0;
    v101 = v163;
    v102 = v91;
    SFAirDropSend.Transfer.sendRequest.getter();
    v103 = sub_10003E85C();
    v169 = *(void (**)(char *, uint64_t))(v159 + 8);
    v169(v101, v160);
    v104 = swift_getKeyPath(&unk_1000EA798);
    v105 = swift_getKeyPath(&unk_1000EA7C0);
    v174[0] = v103;
    swift_retain(v57);
    static Published.subscript.setter(v174, v57, v104, v105);
    v106 = swift_getKeyPath(&unk_1000EA8C8);
    v107 = swift_getKeyPath(&unk_1000EA8F0);
    LOBYTE(v174[0]) = 1;
    swift_retain(v57);
    static Published.subscript.setter(v174, v57, v106, v107);
    v108 = swift_getKeyPath(&unk_1000EA630);
    v109 = swift_getKeyPath(&unk_1000EA658);
    v110 = v172;
    swift_bridgeObjectRetain(v172);
    swift_retain(v57);
    v111 = (void (*)(id *, _QWORD))static Published.subscript.modify(v174, v166, v108, v109);
    v113 = v112;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v112);
    v175 = *v113;
    *v113 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
    v173 = v102;
    sub_100089404(v57, v102, (uint64_t)v110, isUniquelyReferenced_nonNull_native);
    v115 = *v113;
    *v113 = v175;
    swift_bridgeObjectRelease(v115, v116, v117, v118, v119, v120, v121, v122);
    swift_bridgeObjectRelease(v110, v123, v124, v125, v126, v127, v128, v129);
    v111(v174, 0);
    swift_release(v109);
    swift_release(v108);
    v130 = swift_getKeyPath(&unk_1000EA798);
    v131 = swift_getKeyPath(&unk_1000EA7C0);
    static Published.subscript.getter(v174, v57, v130, v131);
    swift_release(v131);
    swift_release(v130);
    v132 = v174[0];

    if (v132)
    {
LABEL_8:
      swift_bridgeObjectRelease(v172, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      v133 = v163;
      SFAirDropSend.Transfer.sendRequest.getter();
      v134 = type metadata accessor for TaskPriority(0);
      v135 = (uint64_t)v158;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 56))(v158, 1, 1, v134);
      v136 = swift_allocObject(&unk_100125640, 24, 7);
      swift_unknownObjectWeakInit(v136 + 16, v166);
      v137 = v159;
      v138 = v160;
      v139 = v157;
      (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v157, v133, v160);
      v140 = *(unsigned __int8 *)(v137 + 80);
      v141 = (v140 + 24) & ~v140;
      v142 = (v156 + v141 + 7) & 0xFFFFFFFFFFFFFFF8;
      v143 = swift_allocObject(&unk_100125A28, v142 + 16, v140 | 7);
      *(_QWORD *)(v143 + 16) = v136;
      (*(void (**)(uint64_t, char *, uint64_t))(v137 + 32))(v143 + v141, v139, v138);
      v144 = (_QWORD *)(v143 + v142);
      v145 = v172;
      *v144 = v173;
      v144[1] = v145;
      swift_bridgeObjectRetain(v145);
      v146 = static Task<>.noThrow(priority:operation:)(v135, &unk_10013CD38, v143, (char *)&type metadata for () + 8);
      swift_release(v143);
      swift_release(v146);
      sub_10000CC5C(v135, &qword_10013BCC0);
      swift_bridgeObjectRelease(v145, v147, v148, v149, v150, v151, v152, v153);
      v169(v163, v138);
    }
  }
  return v57;
}

void sub_10002F300(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *, _QWORD, __n128);
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58[4];
  uint64_t v59;
  uint64_t v60;

  v3 = v2;
  v6 = sub_100008F88(&qword_10013CA28);
  __chkstk_darwin(v6, v7);
  v56 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100009558(v14, (uint64_t)qword_10013C7C0);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v55 = v13;
    v19 = swift_slowAlloc(12, -1);
    v57 = v15;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v54 = v3;
    v22 = v21;
    v58[0] = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v59 = sub_10003A834(a1, a2, v58);
    v13 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "End session for transfer identifier: %s.", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v23 = v22;
    v3 = v54;
    swift_slowDealloc(v23, -1, -1);
    v24 = v20;
    v15 = v57;
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v26 = swift_getKeyPath(&unk_1000EA658);
  swift_bridgeObjectRetain(a2);
  static Published.subscript.getter(v58, v3, KeyPath, v26);
  swift_release(v26);
  swift_release(KeyPath);
  v27 = v58[0];
  if (!*(_QWORD *)(v58[0] + 16) || (v28 = sub_10003AF58(a1, a2), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(a2);
    v38 = swift_bridgeObjectRetain_n(a2, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v58[0] = v42;
      *(_DWORD *)v41 = 136315138;
      swift_bridgeObjectRetain(a2);
      v59 = sub_10003A834(a1, a2, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "AirDrop transfer session not active for ID: %s, returning", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
LABEL_16:

      return;
    }
LABEL_15:
    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_16;
  }
  v57 = v15;
  v30 = *(char **)(*(_QWORD *)(v27 + 56) + 8 * v28);
  swift_retain(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(a2);
  v55 = v30;
  sub_10006FEC8();
  v31 = swift_getKeyPath(&unk_1000EA630);
  v32 = swift_getKeyPath(&unk_1000EA658);
  v33 = v3;
  v34 = (void (*)(uint64_t *, _QWORD, __n128))static Published.subscript.modify(v58, v3, v31, v32);
  v35 = sub_10003B54C(a1, a2);
  v36 = swift_release(v35);
  v34(v58, 0, v36);
  swift_release(v32);
  swift_release(v31);
  swift_bridgeObjectRetain(a2);
  v37 = (uint64_t)v56;
  SFAirDrop.TransferIdentifier.init(_:)(a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v37, 1, v9) == 1)
  {
    sub_10000CC5C(v37, &qword_10013CA28);
    v43 = swift_bridgeObjectRetain_n(a2, 2);
    v39 = Logger.logObject.getter(v43);
    v44 = static os_log_type_t.fault.getter(v39);
    if (os_log_type_enabled(v39, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v58[0] = v46;
      *(_DWORD *)v45 = 136315138;
      swift_bridgeObjectRetain(a2);
      v59 = sub_10003A834(a1, a2, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v44, "Failed to parse transfer id {tranferIdentifier: %s}", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
      swift_release(v55);
      goto LABEL_16;
    }
    swift_release(v55);
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, v37, v9);
  v47 = (uint64_t *)(v33 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_interventionTasks);
  swift_beginAccess(v33 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_interventionTasks, v58, 32, 0);
  v48 = *v47;
  if (*(_QWORD *)(*v47 + 16) && (v49 = sub_10003AFBC((uint64_t)v13), (v50 & 1) != 0))
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v49);
    swift_endAccess(v58);
    swift_retain(v51);
    Task.cancel()();
    swift_release(v51);
  }
  else
  {
    swift_endAccess(v58);
  }
  swift_beginAccess(v47, v58, 33, 0);
  v52 = sub_10003B618((uint64_t)v13);
  swift_endAccess(v58);
  swift_release(v55);
  v53 = swift_release(v52);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v13, v9, v53);
}

void sub_10002FA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _TtC9AirDropUI33AirDropTransferSessionsController **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  Swift::Int v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  __n128 v91;
  uint64_t v92;
  int v93;
  int *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _TtC9AirDropUI33AirDropTransferSessionsController **v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  SEL v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  _TtC9AirDropUI33AirDropTransferSessionsController *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __n128 v137;
  SEL v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  unint64_t v145;
  char *v146;
  int v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _TtC9AirDropUI33AirDropTransferSessionsController *v165;
  SEL v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  __n128 v173;
  void (*v174)(char *, uint64_t, __n128);
  uint64_t v175;
  uint64_t v176;
  __n128 v177;
  unint64_t v178;
  char *v179;
  void (*v180)(unint64_t, uint64_t, __n128);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  SEL v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  int v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  _TtC9AirDropUI33AirDropTransferSessionsController **v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225[4];

  v0 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v0, v1);
  v202 = (char *)&v196 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100008F88(&qword_10013CA50);
  v200 = *(_QWORD *)(v201 - 8);
  v4 = __chkstk_darwin(v201, v3);
  v198 = (char *)&v196 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = v5;
  __chkstk_darwin(v4, v6);
  v207 = (char *)&v196 - v7;
  v8 = sub_100008F88((uint64_t *)&unk_10013CA58);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v196 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v205 = *(_QWORD *)(v210 - 8);
  v13 = __chkstk_darwin(v210, v12);
  v15 = (char *)&v196 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (unint64_t)&v196 - v17;
  v19 = sub_100008F88(&qword_10013CA68);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)&v196 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v216 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v24);
  v223 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216, v25);
  v222 = (char *)&v196 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100008F88(&qword_10013CA70);
  v218 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v217 = v30;
  v219 = v27;
  v212 = v23;
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100009558(v31, (uint64_t)qword_10013C7C0);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "We have too many live activities. Transitioning oldest transfers in .waitingForOpenResponse state to completed successfully", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v37 = swift_getKeyPath(&unk_1000EA658);
  static Published.subscript.getter(v225, v208, KeyPath, v37);
  swift_release(v37);
  swift_release(KeyPath);
  v38 = 0;
  sub_100034054(v225[0]);
  v40 = v39;
  if (v39 < 0 || (v39 & 0x4000000000000000) != 0)
    goto LABEL_80;
  v41 = v39 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v39);
  while (1)
  {
    v209 = v18;
    v225[0] = v41;
    sub_10003CB40(v225);
    if (v38)
      goto LABEL_87;
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v40, v42, v43, v44, v45, v46, v47, v48);
    v40 = v225[0];
    if (v225[0] < 0)
      v18 = 1;
    else
      v18 = ((unint64_t)v225[0] >> 62) & 1;
    v206 = v15;
    v213 = v20;
    v214 = v19;
    if ((_DWORD)v18 != 1)
    {
      if (*(uint64_t *)(v225[0] + 16) >= 5)
        v20 = 5;
      else
        v20 = *(_QWORD *)(v225[0] + 16);
LABEL_16:
      if ((v40 & 0xC000000000000001) != 0 && v20)
      {
        type metadata accessor for AirDropTransferSession(0);
        v49 = 0;
        do
        {
          v50 = v49 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v49);
          v49 = v50;
        }
        while (v20 != v50);
      }
      if ((_DWORD)v18)
      {
        swift_bridgeObjectRetain(v40);
        v51 = _CocoaArrayWrapper.subscript.getter(0, v20, v40);
        v53 = v52;
        v55 = v54;
        v57 = v56;
        swift_release_n(v40, 2);
        v40 = v51;
        v58 = v216;
        if ((v57 & 1) == 0)
          goto LABEL_24;
      }
      else
      {
        v55 = 0;
        v53 = v40 + 32;
        v57 = (2 * v20) | 1;
        v58 = v216;
        if ((v57 & 1) == 0)
          goto LABEL_24;
      }
      v59 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v60 = swift_unknownObjectRetain_n(v40, 2);
      v61 = (_QWORD *)swift_dynamicCastClass(v60, v59);
      if (!v61)
      {
        swift_unknownObjectRelease(v40);
        v61 = _swiftEmptyArrayStorage;
      }
      v62 = v61[2];
      swift_release(v61);
      if (__OFSUB__(v57 >> 1, v55))
        goto LABEL_84;
      v63 = v40;
      if (v62 != (v57 >> 1) - v55)
        goto LABEL_85;
      v55 = swift_dynamicCastClass(v40, v59);
      v58 = v216;
      if (!v55)
      {
        swift_unknownObjectRelease(v40);
        v55 = (uint64_t)_swiftEmptyArrayStorage;
      }
      while (1)
      {
        swift_unknownObjectRelease(v40);
        v64 = v55 < 0 || (v55 & 0x4000000000000000) != 0;
        v204 = v11;
        if (v64)
        {
          v195 = swift_bridgeObjectRetain(v55);
          v53 = _CocoaArrayWrapper.endIndex.getter(v195);
          swift_release(v55);
        }
        else
        {
          v53 = *(_QWORD *)(v55 + 16);
        }
        v11 = (char *)_swiftEmptyArrayStorage;
        v224 = v55;
        if (v53)
        {
          v225[0] = (uint64_t)_swiftEmptyArrayStorage;
          v40 = (uint64_t)v225;
          v63 = sub_100011ED4(0, v53 & ~(v53 >> 63), 0);
          if (v53 < 0)
          {
            __break(1u);
            goto LABEL_83;
          }
          v57 = 0;
          v11 = (char *)v225[0];
          v65 = v55 & 0xC000000000000001;
          do
          {
            if (v65)
            {
              v66 = specialized _ArrayBuffer._getElementSlowPath(_:)(v57, v55);
            }
            else
            {
              v66 = *(_QWORD *)(v55 + 8 * v57 + 32);
              swift_retain(v66);
            }
            v67 = *(_QWORD *)(v66 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
            v68 = *(_QWORD *)(v66 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
            swift_bridgeObjectRetain(v68);
            swift_release(v66);
            v225[0] = (uint64_t)v11;
            v70 = *((_QWORD *)v11 + 2);
            v69 = *((_QWORD *)v11 + 3);
            if (v70 >= v69 >> 1)
            {
              sub_100011ED4(v69 > 1, v70 + 1, 1);
              v11 = (char *)v225[0];
            }
            ++v57;
            *((_QWORD *)v11 + 2) = v70 + 1;
            v71 = &v11[16 * v70];
            *((_QWORD *)v71 + 4) = v67;
            *((_QWORD *)v71 + 5) = v68;
            v55 = v224;
          }
          while (v53 != v57);
          v58 = v216;
        }
        v40 = v208 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersBeingEnded;
        swift_beginAccess(v208 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersBeingEnded, v225, 1, 0);
        v72 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)v40;
        *(_QWORD *)v40 = v11;
        swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
        if (v64)
        {
          v80 = swift_bridgeObjectRetain(v55);
          v81 = _CocoaArrayWrapper.endIndex.getter(v80);
          swift_release(v55);
        }
        else
        {
          v81 = *(_QWORD *)(v55 + 16);
        }
        v82 = (uint64_t)v204;
        v83 = v205;
        if (!v81)
        {
LABEL_70:
          swift_release(v55);
          return;
        }
        if (v81 >= 1)
        {
          v84 = 0;
          v221 = v55 & 0xC000000000000001;
          v220 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
          v211 = enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:);
          v203 = enum case for SFAirDrop.AcceptAction.single<A>(_:);
          v197 = (char *)&type metadata for () + 8;
          v215 = v81;
          while (1)
          {
            v86 = v82;
            if (v221)
            {
              v87 = specialized _ArrayBuffer._getElementSlowPath(_:)(v84, v55);
            }
            else
            {
              v87 = *(_QWORD *)(v55 + 8 * v84 + 32);
              swift_retain(v87);
            }
            v88 = swift_getKeyPath(&unk_1000EA708);
            v89 = swift_getKeyPath(&unk_1000EA730);
            v90 = v222;
            static Published.subscript.getter(v222, v87, v88, v89);
            swift_release(v89);
            v91 = swift_release(v88);
            v92 = v223;
            v93 = (*(uint64_t (**)(char *, uint64_t, __n128))(v223 + 88))(v90, v58, v91);
            if (v93 == v220)
            {
              (*(void (**)(char *, uint64_t))(v92 + 96))(v90, v58);
              v94 = (int *)sub_100008F88(&qword_10013BDE0);
              swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v90[v94[12]], v95, v96, v97, v98, v99, v100, v101);
              swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v90[v94[16]], v102, v103, v104, v105, v106, v107, v108);
              v110 = v217;
              v109 = v218;
              v111 = v219;
              (*(void (**)(char *, char *, uint64_t))(v218 + 32))(v217, &v90[v94[20]], v219);
              v112 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
              (*(void (**)(char *, uint64_t))(*(_QWORD *)(v112 - 8) + 8))(v90, v112);
              v113 = v212;
              SFAirDrop.PermissionRequest.style.getter(v111);
              v115 = v213;
              v114 = v214;
              v116 = (*(uint64_t (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v213 + 88))(v113, v214);
              if (v116 == v211)
              {
                (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v115 + 96))(v113, v114);
                swift_bridgeObjectRelease(v113[1], v117, v118, v119, v120, v121, v122, v123);
                swift_bridgeObjectRelease(v113[3], v124, v125, v126, v127, v128, v129, v130);
                v131 = v113[4];
                v132 = (char *)v113 + *(int *)(sub_100008F88(&qword_10013CA90) + 80);
                v133 = type metadata accessor for SFAirDrop.DeclineAction(0);
                (*(void (**)(char *, uint64_t))(*(_QWORD *)(v133 - 8) + 8))(v132, v133);
                if (*(_QWORD *)v131->connection)
                {
                  v82 = v86;
                  v134 = v86;
                  v135 = v210;
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(v83 + 16))(v134, (unint64_t)v131+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80)), v210);
                  v136 = 0;
                  v81 = v215;
                  v58 = v216;
                  v55 = v224;
                }
                else
                {
                  v136 = 1;
                  v81 = v215;
                  v58 = v216;
                  v55 = v224;
                  v82 = v86;
                  v135 = v210;
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v82, v136, 1, v135);
                swift_bridgeObjectRelease(v131, v138, v139, v140, v141, v142, v143, v144);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v82, 1, v135) == 1)
                {
                  (*(void (**)(char *, uint64_t))(v218 + 8))(v217, v219);
                  swift_release(v87);
                  sub_10000CC5C(v82, (uint64_t *)&unk_10013CA58);
                }
                else
                {
                  v145 = v209;
                  (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v209, v82, v135);
                  v146 = v206;
                  (*(void (**)(char *, unint64_t, uint64_t))(v83 + 16))(v206, v145, v135);
                  v147 = (*(uint64_t (**)(char *, uint64_t))(v83 + 88))(v146, v135);
                  if (v147 == v203)
                  {
                    (*(void (**)(char *, uint64_t))(v83 + 96))(v146, v135);
                    v148 = sub_100008F88(&qword_10013CA98);
                    v149 = v146;
                    v150 = &v146[*(int *)(v148 + 48)];
                    v151 = v200;
                    v152 = *(void (**)(char *, char *, uint64_t))(v200 + 32);
                    v153 = v207;
                    v154 = v201;
                    v152(v207, v149, v201);
                    v155 = type metadata accessor for UUID(0);
                    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v155 - 8) + 8))(v150, v155);
                    v156 = type metadata accessor for TaskPriority(0);
                    v157 = (uint64_t)v202;
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56))(v202, 1, 1, v156);
                    v158 = v198;
                    (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v198, v153, v154);
                    v159 = *(unsigned __int8 *)(v151 + 80);
                    v160 = (v159 + 16) & ~v159;
                    v161 = swift_allocObject(&unk_100125A00, v160 + v199, v159 | 7);
                    v162 = v161 + v160;
                    v55 = v224;
                    v152((char *)v162, v158, v154);
                    v163 = static Task<>.noThrow(priority:operation:)(v157, &unk_10013CD18, v161, v197);
                    swift_release(v161);
                    swift_release(v163);
                    sub_10000CC5C(v157, &qword_10013BCC0);
                    v164 = *(_QWORD *)(v87 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
                    v165 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v87
                                                                                 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                                                 + 8);
                    swift_bridgeObjectRetain(v165);
                    sub_10002F300(v164, (unint64_t)v165);
                    swift_bridgeObjectRelease(v165, v166, v167, v168, v169, v170, v171, v172);
                    v173 = swift_release(v87);
                    v174 = *(void (**)(char *, uint64_t, __n128))(v151 + 8);
                    v83 = v205;
                    v175 = v210;
                    v82 = (uint64_t)v204;
                    v176 = v154;
                    v58 = v216;
                    v174(v207, v176, v173);
                    (*(void (**)(unint64_t, uint64_t))(v83 + 8))(v209, v175);
                    (*(void (**)(char *, uint64_t))(v218 + 8))(v217, v219);
                  }
                  else
                  {
                    v177 = swift_release(v87);
                    v178 = v145;
                    v179 = v146;
                    v180 = *(void (**)(unint64_t, uint64_t, __n128))(v83 + 8);
                    v180(v178, v135, v177);
                    (*(void (**)(char *, uint64_t))(v218 + 8))(v217, v219);
                    ((void (*)(char *, uint64_t))v180)(v179, v135);
                  }
                  v81 = v215;
                }
                goto LABEL_54;
              }
              (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v111);
              v137 = swift_release(v87);
              (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t, __n128))(v115 + 8))(v113, v114, v137);
              v81 = v215;
              v58 = v216;
              v55 = v224;
            }
            else
            {
              v85 = swift_release(v87);
              (*(void (**)(char *, uint64_t, __n128))(v92 + 8))(v90, v58, v85);
            }
            v82 = v86;
LABEL_54:
            if (v81 == ++v84)
              goto LABEL_70;
          }
        }
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        swift_unknownObjectRelease(v63);
        v58 = v216;
LABEL_24:
        v55 = (uint64_t)sub_10008DDF8(v40, v53, v55, v57);
      }
    }
    v181 = swift_bridgeObjectRetain(v225[0]);
    v182 = _CocoaArrayWrapper.endIndex.getter(v181);
    swift_release(v40);
    v183 = swift_bridgeObjectRetain(v40);
    v184 = _CocoaArrayWrapper.endIndex.getter(v183);
    swift_release(v40);
    if (v184 < 0)
      break;
    if (v182 >= 5)
      v185 = 5;
    else
      v185 = v182;
    if (v182 >= 0)
      v20 = v185;
    else
      v20 = 5;
    v186 = swift_bridgeObjectRetain(v40);
    v38 = _CocoaArrayWrapper.endIndex.getter(v186);
    swift_release(v40);
    if (v38 >= v20)
      goto LABEL_16;
    __break(1u);
LABEL_80:
    v187 = swift_bridgeObjectRetain(v40);
    v41 = (uint64_t)sub_10008DF78(v187);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v40, v188, v189, v190, v191, v192, v193, v194);
  }
  __break(1u);
LABEL_87:
  swift_release(v225[0]);
  __break(1u);
}

id sub_10003069C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100030800()
{
  return type metadata accessor for AirDropTransferSessionsController(0);
}

uint64_t type metadata accessor for AirDropTransferSessionsController(uint64_t a1)
{
  uint64_t result;

  result = qword_10013C860;
  if (!qword_10013C860)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirDropTransferSessionsController);
  return result;
}

void sub_100030844(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[14];

  v6[0] = "\b";
  v6[1] = "\b";
  v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[3] = "\b";
  v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100030940(319, &qword_10013C870, &qword_10013C878);
  if (v3 <= 0x3F)
  {
    v6[7] = *(_QWORD *)(v2 - 8) + 64;
    sub_100030940(319, &qword_10013C880, &qword_10013C888);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      v6[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[10] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 14, v6, a1 + 80);
    }
  }
}

void sub_100030940(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10000950C(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10003098C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t result;

  ObjectType = swift_getObjectType(v1);
  result = ObservableObject<>.objectWillChange.getter(ObjectType);
  *a1 = result;
  return result;
}

void sub_1000309C8(void *a1, uint64_t a2)
{
  NSString v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  void *v20;
  uint64_t v21;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend((id)objc_opt_self(BSMutableServiceInterface), "interfaceWithIdentifier:", v4);

  v6 = (void *)objc_opt_self(BSObjCProtocol);
  v7 = objc_msgSend(v6, "protocolForProtocol:", &OBJC_PROTOCOL___SFAirDropUIServer);
  objc_msgSend(v5, "setServer:", v7);

  v8 = objc_msgSend(v6, "protocolForProtocol:", &OBJC_PROTOCOL___SFAirDropUIClient);
  objc_msgSend(v5, "setClient:", v8);

  objc_msgSend(v5, "setClientMessagingExpectation:", 0);
  sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  objc_msgSend(a1, "setTargetQueue:", v9);

  v10 = objc_msgSend((id)objc_opt_self(BSServiceQuality), "userInitiated");
  objc_msgSend(a1, "setServiceQuality:", v10);

  objc_msgSend(a1, "setInterface:", v5);
  objc_msgSend(a1, "setInterfaceTarget:", a2);
  v11 = swift_allocObject(&unk_100125640, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, a2);
  v20 = sub_100040B74;
  v21 = v11;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100030EBC;
  v19 = &unk_100125888;
  v12 = _Block_copy(&v16);
  objc_msgSend(a1, "setActivationHandler:", v12, swift_release(v21).n128_f64[0]);
  _Block_release(v12);
  v20 = sub_100030F0C;
  v21 = 0;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100030EBC;
  v19 = &unk_1001258B0;
  v13 = _Block_copy(&v16);
  objc_msgSend(a1, "setInterruptionHandler:", v13);
  _Block_release(v13);
  v14 = swift_allocObject(&unk_1001258E8, 24, 7);
  swift_unknownObjectUnownedInit(v14 + 16, a2);
  v20 = sub_100040BA0;
  v21 = v14;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100030EBC;
  v19 = &unk_100125900;
  v15 = _Block_copy(&v16);
  objc_msgSend(a1, "setInvalidationHandler:", v15, swift_release(v21).n128_f64[0]);
  _Block_release(v15);

}

void sub_100030CD8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t Strong;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  _BYTE v19[24];

  v3 = a2 + 16;
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100009558(v4, (uint64_t)qword_10013C7C0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AirDropTransferSessionsController: connection activated from client!", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_beginAccess(v3, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v10 = (char *)Strong;
    v11 = objc_msgSend(a1, "remoteTarget");
    if (v11)
    {
      v12 = v11;
      _bridgeAnyObjectToAny(_:)(&v16);
      swift_unknownObjectRelease(v12);
    }
    else
    {
      v16 = 0u;
      v17 = 0u;
    }
    sub_10000CBD4((uint64_t)&v16, (uint64_t)v18, &qword_10013CB40);
    sub_10000CBD4((uint64_t)v18, (uint64_t)&v16, &qword_10013CB40);
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = sub_100008F88(&qword_10013CC08);
      if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v13, 6) & 1) != 0)
      {
        v14 = *(_QWORD *)&v10[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient];
        *(_QWORD *)&v10[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = v15;

        swift_unknownObjectRelease(v14);
      }
      else
      {

      }
    }
    else
    {

      sub_10000CC5C((uint64_t)&v16, &qword_10013CB40);
    }
  }
}

void sub_100030EBC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

id sub_100030F0C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100009558(v2, (uint64_t)qword_10013C7C0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirDropTransferSessionsController: connection interrupted, reconnecting", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return objc_msgSend(a1, "activate");
}

uint64_t sub_100030FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  char *Strong;
  void *v10;
  char *v11;
  uint64_t v12;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100009558(v3, (uint64_t)qword_10013C7C0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AirDropTransferSessionsController: connection invalidated", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = a2 + 16;
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(v8);
  v10 = *(void **)&Strong[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection];
  *(_QWORD *)&Strong[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection] = 0;

  v11 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
  v12 = *(_QWORD *)&v11[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient];
  *(_QWORD *)&v11[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = 0;

  return swift_unknownObjectRelease(v12);
}

uint64_t sub_1000310FC(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1000311B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = sub_100008F88(&qword_10013CBA0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003121C, 0, 0);
}

uint64_t sub_10003121C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100009558(v1, (uint64_t)qword_10013C7C0);
  v0[6] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "waiting for userInteractionmodels START", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[2];

  v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersMonitorTask);
  v0[7] = v7;
  v8 = async function pointer to Task.value.getter[1];
  swift_retain(v7);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[8] = v9;
  v10 = sub_100008F88((uint64_t *)&unk_10013CB30);
  *v9 = v0;
  v9[1] = sub_100031364;
  return Task.value.getter(v0[5], v7, v0[3], v10, &protocol self-conformance witness table for Error);
}

uint64_t sub_100031364()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v3);
  v4 = v2[7];
  if (v0)
  {
    swift_release(v2[7]);
    v5 = sub_1000314A4;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
    swift_release(v4);
    v5 = sub_1000313F4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000313F4()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "waiting for userInteractionmodels END", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 40);

  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000314A4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000315F4(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10013CB9C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100031654;
  return sub_1000311B8();
}

uint64_t sub_100031654()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *(void **)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);

  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

id sub_1000316F4(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  _QWORD *v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unsigned __int8 v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t *, _QWORD);
  uint64_t *v88;
  uint64_t *v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  id v95;
  const __CFData *isa;
  CGImageRef v97;
  double SizeAfterOrientation;
  double v99;
  double v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  id result;
  void *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  os_log_t v122;
  _QWORD *v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  id v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147[6];

  v13 = v12;
  v128 = a8;
  v141 = a6;
  v142 = a7;
  v132 = a4;
  v145 = a2;
  v17 = type metadata accessor for Logger(0);
  v131 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138, v21);
  v140 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DeviceLockState(0);
  __chkstk_darwin(v23, v24);
  v139 = (char *)&v121 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v26, v27);
  v137 = (char *)&v121 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v29);
  v133 = *(_QWORD *)(v30 - 8);
  v134 = v30;
  __chkstk_darwin(v30, v31);
  v135 = (uint64_t *)((char *)&v121 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v33 = sub_100009558(v17, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain_n(v145, 2);
  v34 = a5;
  v130 = v33;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, v36);
  v126 = v20;
  v143 = a1;
  if (v37)
  {
    v38 = swift_slowAlloc(22, -1);
    v125 = v13;
    v39 = v38;
    v123 = (_QWORD *)swift_slowAlloc(8, -1);
    v124 = swift_slowAlloc(32, -1);
    v147[0] = v124;
    *(_DWORD *)v39 = 136315394;
    v129 = a3;
    v122 = v35;
    v40 = v145;
    swift_bridgeObjectRetain(v145);
    v146 = sub_10003A834(a1, v40, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147);
    swift_bridgeObjectRelease_n(v40, 3);
    *(_WORD *)(v39 + 12) = 2112;
    v146 = (uint64_t)v34;
    v41 = v17;
    v42 = v34;
    a3 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147);
    v43 = v34;
    v44 = v123;
    *v123 = v34;

    v17 = v41;
    v45 = v122;
    _os_log_impl((void *)&_mh_execute_header, v122, v36, "Start session with identifier: %s, itemCount: %@", (uint8_t *)v39, 0x16u);
    v46 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v44, 1, v46);
    swift_slowDealloc(v44, -1, -1);
    v47 = v124;
    swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    v48 = v39;
    v13 = v125;
    swift_slowDealloc(v48, -1, -1);

  }
  else
  {

    v43 = v34;
    swift_bridgeObjectRelease_n(v145, 2);
  }
  v127 = v17;
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v50 = swift_getKeyPath(&unk_1000EA658);
  swift_bridgeObjectRetain(v145);
  static Published.subscript.getter(v147, v13, KeyPath, v50);
  swift_release(KeyPath);
  swift_release(v50);
  v51 = v147[0];
  v52 = *(_QWORD *)(v147[0] + 16);
  v144 = a12;
  if (v52)
  {
    v53 = v143;
    v54 = v145;
    sub_10003AF58(v143, v145);
    v56 = v55;
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v51);
    if ((v56 & 1) != 0)
    {
      v57 = swift_bridgeObjectRetain_n(v145, 2);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v129 = a3;
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v147[0] = v61;
        v62 = v13;
        v63 = v145;
        v64 = v43;
        *(_DWORD *)v60 = 136315138;
        swift_bridgeObjectRetain(v63);
        v146 = sub_10003A834(v53, v63, v147);
        a3 = v129;
        v65 = v63;
        v13 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147);
        v66 = v65;
        v43 = v64;
        swift_bridgeObjectRelease_n(v66, 3);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Tried to start a session with an existing transfer: %s. Ending existing session, and starting new one", v60, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v145, 2);
      }
      sub_10002F300(v53, v145);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v145);
    swift_bridgeObjectRelease(v51);
    v53 = v143;
  }
  v67 = objc_msgSend(v132, "unsignedIntegerValue");
  swift_bridgeObjectRetain(v145);
  LODWORD(v132) = objc_msgSend(a3, "BOOLValue");
  v68 = v134;
  v69 = (uint64_t)v135;
  *v135 = v67;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v133 + 104))(v69, enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:), v68);
  v70 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v71 = (uint64_t)v137;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v137, 1, 1, v70);
  v72 = v142;
  swift_bridgeObjectRetain(v142);
  v73 = objc_msgSend(v43, "integerValue");
  v74 = v139;
  dispatch thunk of SFLockStateMonitor.lockState.getter();
  v75 = v53;
  v76 = v140;
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v140, enum case for SFAirDrop.DisplayPriority.normal(_:), v138);
  v77 = objc_msgSend(v144, "BOOLValue");
  v78 = type metadata accessor for AirDropTransferSession(0);
  swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
  v79 = v13;
  v120 = v76;
  v80 = v75;
  v81 = sub_10006A548(v75, v145, (int)v132, v141, v72, 0, 0, v69, v71, 0, v73, v74, v120, v79, (uint64_t)&off_1001255E8, v77);
  v82 = v131;
  v142 = a11;
  v83 = swift_getKeyPath(&unk_1000EA630);
  v84 = v145;
  v85 = v83;
  v86 = swift_getKeyPath(&unk_1000EA658);
  swift_bridgeObjectRetain(v84);
  swift_retain(v81);
  v87 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify(v147, v79, v85, v86);
  v89 = v88;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v88);
  v146 = *v89;
  *v89 = 0x8000000000000000;
  sub_100089404(v81, v80, v84, isUniquelyReferenced_nonNull_native);
  v91 = *v89;
  *v89 = v146;
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v91);
  v87(v147, 0);
  swift_release(v85);
  swift_release(v86);
  if (a9)
  {
    v92 = swift_getKeyPath(&unk_1000EA750);
    v93 = swift_getKeyPath(&unk_1000EA778);
    v147[0] = v128;
    v147[1] = a9;
    swift_bridgeObjectRetain(a9);
    swift_retain(v81);
    static Published.subscript.setter(v147, v81, v92, v93);
  }
  v94 = v142;
  v95 = v144;
  if (v142 >> 60 == 15)
    goto LABEL_23;
  sub_10001810C(a10, v142);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v97 = sub_100005B48(isa);

  if (!v97)
  {
    sub_1000180AC(a10, v94);
LABEL_23:
    v117 = objc_msgSend(v95, "BOOLValue");
    v118 = swift_getKeyPath(&unk_1000EA828);
    v119 = swift_getKeyPath(&unk_1000EA850);
    LOBYTE(v147[0]) = v117;
    return (id)static Published.subscript.setter(v147, v81, v118, v119);
  }
  SizeAfterOrientation = CGImageGetSizeAfterOrientation(v97);
  v100 = v99;
  v101 = v126;
  v102 = v127;
  v103 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 16))(v126, v130, v127);
  v104 = Logger.logObject.getter(v103);
  v105 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v104, v105))
  {

    (*(void (**)(char *, uint64_t))(v82 + 8))(v101, v102);
    goto LABEL_22;
  }
  v106 = (uint8_t *)swift_slowAlloc(12, -1);
  v107 = swift_slowAlloc(32, -1);
  v147[0] = v107;
  *(_DWORD *)v106 = 136315138;
  result = (id)BSNSStringFromCGSize(SizeAfterOrientation, v100);
  if (result)
  {
    v109 = result;
    v145 = (unint64_t)(v106 + 4);
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v112 = v111;

    v146 = sub_10003A834(v110, v112, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147);
    swift_bridgeObjectRelease(v112);
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "Transfer session contains preview image of size: %s", v106, 0xCu);
    swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v107, -1, -1);
    swift_slowDealloc(v106, -1, -1);

    (*(void (**)(char *, uint64_t))(v131 + 8))(v126, v127);
    v95 = v144;
LABEL_22:
    v113 = v142;
    v114 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:", v97);
    v115 = swift_getKeyPath(&unk_1000EA798);
    v116 = swift_getKeyPath(&unk_1000EA7C0);
    v147[0] = (uint64_t)v114;
    swift_retain(v81);
    static Published.subscript.setter(v147, v81, v115, v116);
    sub_1000180AC(a10, v113);

    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000323B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for UUID(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100032410, 0, 0);
}

uint64_t sub_100032410()
{
  uint64_t v0;
  _QWORD *v1;

  SFAirDrop.NearbySharingInteraction.id.getter();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.endNearbySharingInteraction(_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_10003247C;
  return SFAirDropClient.endNearbySharingInteraction(_:)(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10003247C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 48);
  v2 = *(_QWORD *)(*v1 + 56);
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *(_QWORD *)(*v1 + 40);
  v6 = *v1;
  *(_QWORD *)(v6 + 64) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_10003251C, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 48));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10003251C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[7] = a2;
  v7 = type metadata accessor for MainActor(0);
  v6[12] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[13] = v8;
  v6[14] = v9;
  return swift_task_switch(sub_1000325C4, v8, v9);
}

uint64_t sub_1000325C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  __n128 v7;
  char *v8;

  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 120) = Strong;
  if (Strong)
  {
    v3 = *(void **)(Strong + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_contactIconProvider);
    *(_QWORD *)(v0 + 128) = v3;
    v4 = *((unsigned int *)&async function pointer to dispatch thunk of SFUIContactIconProvider.icon(for:) + 1);
    v8 = (char *)&async function pointer to dispatch thunk of SFUIContactIconProvider.icon(for:)
       + async function pointer to dispatch thunk of SFUIContactIconProvider.icon(for:);
    v3;
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 136) = v5;
    *v5 = v0;
    v5[1] = sub_100032694;
    return ((uint64_t (*)(_QWORD, _QWORD))v8)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  }
  else
  {
    v7 = swift_release(*(_QWORD *)(v0 + 96));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v7);
  }
}

uint64_t sub_100032694(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 104);
    v7 = *(_QWORD *)(v4 + 112);
    v8 = sub_100032790;
  }
  else
  {

    *(_QWORD *)(v4 + 152) = a1;
    v6 = *(_QWORD *)(v4 + 104);
    v7 = *(_QWORD *)(v4 + 112);
    v8 = sub_100032710;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100032710()
{
  uint64_t v0;
  _TtC9AirDropUI33AirDropTransferSessionsController *v1;
  void *v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;

  v1 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 152);
  v2 = *(void **)(v0 + 120);
  v3 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 96));
  v5 = v1;
  sub_100033654(v1, v4, v3, (uint64_t)&unk_1000EA958, (uint64_t)&unk_1000EA980);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032790()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 96));

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = type metadata accessor for Logger(0);
  sub_100009558(v4, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain(v3);
  swift_errorRetain(v2);
  swift_bridgeObjectRetain(v3);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 72);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 64);
    v18 = *(void **)(v0 + 120);
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 40) = sub_10003A834(v11, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(v9);
    v15 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 48) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    *v13 = v15;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to get contact image for %s: %@", (uint8_t *)v12, 0x16u);
    v16 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v13, 1, v16);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {

    swift_errorRelease(v9);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[9] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[10] = v6;
  v4[11] = v7;
  return swift_task_switch(sub_100032A9C, v6, v7);
}

uint64_t sub_100032A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v10;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 96) = Strong;
  if (Strong)
  {
    v3 = *(void **)(Strong + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_appCornerIconProvider);
    *(_QWORD *)(v0 + 104) = v3;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIActivityTypeAirDrop);
    v6 = v5;
    *(_QWORD *)(v0 + 112) = v5;
    v7 = async function pointer to SFUIPeopleSuggestionImageProvider.previewCornerIcon(for:)[1];
    v3;
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 120) = v8;
    *v8 = v0;
    v8[1] = sub_100032B7C;
    return SFUIPeopleSuggestionImageProvider.previewCornerIcon(for:)(v4, v6);
  }
  else
  {
    v10 = swift_release(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v10);
  }
}

uint64_t sub_100032B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  _TtC9AirDropUI33AirDropTransferSessionsController *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    v8 = sub_100032C80;
  }
  else
  {
    v9 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 112);

    swift_bridgeObjectRelease(v9, v10, v11, v12, v13, v14, v15, v16);
    *(_QWORD *)(v4 + 136) = a1;
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    v8 = sub_100032C00;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100032C00()
{
  uint64_t v0;
  _TtC9AirDropUI33AirDropTransferSessionsController *v1;
  void *v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;

  v1 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 136);
  v2 = *(void **)(v0 + 96);
  v3 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  v5 = v1;
  sub_100033654(v1, v4, v3, (uint64_t)&unk_1000EA9A0, (uint64_t)&unk_1000EA9C8);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032C80()
{
  uint64_t v0;
  void *v1;
  _TtC9AirDropUI33AirDropTransferSessionsController *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;

  v1 = *(void **)(v0 + 104);
  v2 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v10 = *(_QWORD *)(v0 + 128);
  v11 = type metadata accessor for Logger(0);
  sub_100009558(v11, (uint64_t)qword_10013C7C0);
  swift_errorRetain(v10);
  v12 = swift_errorRetain(v10);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 128);
  if (v15)
  {
    v22 = *(void **)(v0 + 96);
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 138412290;
    swift_errorRetain(v16);
    v19 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(_QWORD *)(v0 + 40) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    *v18 = v19;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to get image for AirDrop: %@", v17, 0xCu);
    v20 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v18, 1, v20);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v16);
  }
  else
  {

    swift_errorRelease(v16);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v5[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[12] = v7;
  v5[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[14] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[15] = v9;
  v5[16] = v10;
  return swift_task_switch(sub_100032F10, v9, v10);
}

uint64_t sub_100032F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  double v62;
  _QWORD *v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  uint64_t (*v66)(uint64_t, char *, uint64_t);
  uint64_t (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 136) = Strong;
  if (Strong)
  {
    v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)SFAirDropReceive.AskRequest.files.getter();
    v11 = v3;
    v12 = *(_QWORD *)v3->connection;
    if (v12)
    {
      v13 = *(_QWORD *)(v0 + 96);
      sub_100011EF0(0, v12, 0);
      v14 = (char *)v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v68 = *(_QWORD *)(v13 + 72);
      v15 = v13;
      v64 = v11;
      v66 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 16);
      do
      {
        v16 = *(_QWORD *)(v0 + 104);
        v17 = *(_QWORD *)(v0 + 88);
        v18 = v66(v16, v14, v17);
        v19 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v18);
        v21 = v20;
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_100011EF0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v30 = _swiftEmptyArrayStorage[2];
        v29 = _swiftEmptyArrayStorage[3];
        if (v30 >= v29 >> 1)
          sub_100011EF0(v29 > 1, v30 + 1, 1);
        _swiftEmptyArrayStorage[2] = v30 + 1;
        v31 = &_swiftEmptyArrayStorage[2 * v30];
        v31[4] = v19;
        v31[5] = v21;
        v14 += v68;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease(v64, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      swift_bridgeObjectRelease(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    *(_QWORD *)(v0 + 144) = _swiftEmptyArrayStorage;
    v33 = (_TtC9AirDropUI33AirDropTransferSessionsController *)SFAirDropReceive.AskRequest.files.getter();
    v41 = v33;
    v42 = *(_QWORD *)v33->connection;
    if (v42)
    {
      v43 = *(_QWORD *)(v0 + 96);
      sub_100011EF0(0, v42, 0);
      v65 = v41;
      v44 = (char *)v41 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
      v45 = v43;
      v67 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v43 + 16);
      v69 = *(_QWORD *)(v43 + 72);
      do
      {
        v46 = *(_QWORD *)(v0 + 104);
        v47 = *(_QWORD *)(v0 + 88);
        v48 = v67(v46, v44, v47);
        v49 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter(v48);
        v51 = v50;
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_100011EF0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v60 = _swiftEmptyArrayStorage[2];
        v59 = _swiftEmptyArrayStorage[3];
        if (v60 >= v59 >> 1)
          sub_100011EF0(v59 > 1, v60 + 1, 1);
        _swiftEmptyArrayStorage[2] = v60 + 1;
        v61 = &_swiftEmptyArrayStorage[2 * v60];
        v61[4] = v49;
        v61[5] = v51;
        v44 += v69;
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease(v65, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    *(_QWORD *)(v0 + 152) = _swiftEmptyArrayStorage;
    type metadata accessor for SFAirDropUtilities(0);
    if (qword_10013AC68 != -1)
      swift_once(&qword_10013AC68, sub_10005F004);
    v62 = *(double *)&qword_100147E78;
    v63 = (_QWORD *)swift_task_alloc(async function pointer to static SFAirDropUtilities.generatePreviewIcon(for:fileTypes:fileSubTypes:size:)[1]);
    *(_QWORD *)(v0 + 160) = v63;
    *v63 = v0;
    v63[1] = sub_100033298;
    return static SFAirDropUtilities.generatePreviewIcon(for:fileTypes:fileSubTypes:size:)(0, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v62, v62);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100033298(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  _TtC9AirDropUI33AirDropTransferSessionsController *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v13 = *(_QWORD *)(v4 + 120);
    v14 = *(_QWORD *)(v4 + 128);
    v15 = sub_1000333A4;
  }
  else
  {
    v16 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 152);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 144), v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    *(_QWORD *)(v4 + 176) = a1;
    v13 = *(_QWORD *)(v4 + 120);
    v14 = *(_QWORD *)(v4 + 128);
    v15 = sub_10003331C;
  }
  return swift_task_switch(v15, v13, v14);
}

uint64_t sub_10003331C()
{
  uint64_t v0;
  _TtC9AirDropUI33AirDropTransferSessionsController *v1;
  void *v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;

  v1 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 176);
  v2 = *(void **)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 112));
  v5 = v1;
  sub_100033654(v1, v4, v3, (uint64_t)&unk_1000EA910, (uint64_t)&unk_1000EA938);

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000333A4()
{
  uint64_t v0;
  _TtC9AirDropUI33AirDropTransferSessionsController *v1;
  _TtC9AirDropUI33AirDropTransferSessionsController *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  uint64_t v34;

  v1 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 144);
  v2 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease(v1, v10, v11, v12, v13, v14, v15, v16);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = type metadata accessor for Logger(0);
  sub_100009558(v19, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain(v18);
  swift_errorRetain(v17);
  swift_bridgeObjectRetain(v18);
  v20 = swift_errorRetain(v17);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 80);
  if (v23)
  {
    v26 = *(_QWORD *)(v0 + 72);
    v33 = *(void **)(v0 + 136);
    v27 = swift_slowAlloc(22, -1);
    v28 = (uint64_t *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v34 = v29;
    *(_DWORD *)v27 = 136315394;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v0 + 40) = sub_10003A834(v26, v25, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease_n(v25, 3);
    *(_WORD *)(v27 + 12) = 2112;
    swift_errorRetain(v24);
    v30 = _swift_stdlib_bridgeErrorToNSError(v24);
    *(_QWORD *)(v0 + 48) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    *v28 = v30;
    swift_errorRelease(v24);
    swift_errorRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to get fallback preview image for transfer %s: %@", (uint8_t *)v27, 0x16u);
    v31 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v28, 1, v31);
    swift_slowDealloc(v28, -1, -1);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    swift_errorRelease(v24);
  }
  else
  {

    swift_errorRelease(v24);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100033654(_TtC9AirDropUI33AirDropTransferSessionsController *a1, uint64_t a2, _TtC9AirDropUI33AirDropTransferSessionsController *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v13;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _TtC9AirDropUI33AirDropTransferSessionsController *v21;
  unint64_t v22;
  uint64_t v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  double result;
  _TtC9AirDropUI33AirDropTransferSessionsController *v51;
  _TtC9AirDropUI33AirDropTransferSessionsController *v52;
  Swift::String v53;
  Swift::Bool v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;

  v8 = v5;
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v13 = swift_getKeyPath(&unk_1000EA658);
  swift_bridgeObjectRetain(a3);
  static Published.subscript.getter(&v65, v8, KeyPath, v13);
  swift_release(v13);
  swift_release(KeyPath);
  v21 = v65;
  if (*(_QWORD *)v65->connection && (v22 = sub_10003AF58(a2, (uint64_t)a3), (v14 & 1) != 0))
  {
    v23 = *(_QWORD *)(*(_QWORD *)v21->nearbySharingInteractionCoordinator + 8 * v22);
    swift_retain(v23);
    swift_bridgeObjectRelease(v21, v24, v25, v26, v27, v28, v29, v30);
    swift_bridgeObjectRelease(a3, v31, v32, v33, v34, v35, v36, v37);
    v38 = swift_getKeyPath(a4);
    v39 = swift_getKeyPath(a5);
    v65 = a1;
    v40 = a1;
    static Published.subscript.setter(&v65, v23, v38, v39);
  }
  else
  {
    swift_bridgeObjectRelease(v21, v14, v15, v16, v17, v18, v19, v20);
    swift_bridgeObjectRelease(a3, v41, v42, v43, v44, v45, v46, v47);
  }
  v48 = swift_getKeyPath(&unk_1000EA5E8);
  v49 = swift_getKeyPath(&unk_1000EA610);
  static Published.subscript.getter(&v65, v8, v48, v49);
  swift_release(v49);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  v51 = v65;
  if (v65)
  {
    v52 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v65->listener[OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier];
    swift_bridgeObjectRetain(v52);
    v53._countAndFlagsBits = a2;
    v53._object = a3;
    v54 = String.hasPrefix(_:)(v53);
    swift_bridgeObjectRelease(v52, v55, v56, v57, v58, v59, v60, v61);
    if (v54)
    {
      v62 = swift_getKeyPath(a4);
      v63 = swift_getKeyPath(a5);
      v65 = a1;
      v64 = a1;
      static Published.subscript.setter(&v65, v51, v62, v63);
    }
    else
    {
      *(_QWORD *)&result = swift_release(v51).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_100033848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v6 = type metadata accessor for SFAirDropSend.ItemMetadata(0);
  v5[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[12] = v7;
  v5[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[14] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[15] = v9;
  v5[16] = v10;
  return swift_task_switch(sub_1000338E0, v9, v10);
}

uint64_t sub_1000338E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  const char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v34;
  const char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  double v63;
  _QWORD *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  _TtC9AirDropUI33AirDropTransferSessionsController *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, char *, uint64_t);
  uint64_t (*v70)(uint64_t, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 136) = Strong;
  if (Strong)
  {
    v3 = SFAirDropSend.Request.urls.getter();
    *(_QWORD *)(v0 + 144) = v3;
    v4 = (_TtC9AirDropUI33AirDropTransferSessionsController *)SFAirDropSend.Request.urlsMetadata.getter();
    if (v4)
    {
      v12 = v4;
      v13 = *(_QWORD *)v4->connection;
      if (v13)
      {
        v67 = v3;
        v14 = *(_QWORD *)(v0 + 96);
        sub_100011EF0(0, v13, 0);
        v65 = v12;
        v15 = (char *)v12
            + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
        v16 = v14;
        v69 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 16);
        v71 = *(_QWORD *)(v14 + 72);
        do
        {
          v17 = *(_QWORD *)(v0 + 104);
          v18 = *(_QWORD *)(v0 + 88);
          v19 = v69(v17, v15, v18);
          v20 = SFAirDropSend.ItemMetadata.fileType.getter(v19);
          v22 = v21;
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
            sub_100011EF0(0, _swiftEmptyArrayStorage[2] + 1, 1);
          v31 = _swiftEmptyArrayStorage[2];
          v30 = _swiftEmptyArrayStorage[3];
          if (v31 >= v30 >> 1)
            sub_100011EF0(v30 > 1, v31 + 1, 1);
          _swiftEmptyArrayStorage[2] = v31 + 1;
          v32 = &_swiftEmptyArrayStorage[2 * v31];
          v32[4] = v20;
          v32[5] = v22;
          v15 += v71;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease(v65, v23, v24, v25, v26, v27, v28, v29);
        v3 = v67;
      }
      else
      {
        swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
      }
    }
    *(_QWORD *)(v0 + 152) = _swiftEmptyArrayStorage;
    v34 = (_TtC9AirDropUI33AirDropTransferSessionsController *)SFAirDropSend.Request.urlsMetadata.getter();
    if (v34)
    {
      v42 = v34;
      v43 = *(_QWORD *)v34->connection;
      if (v43)
      {
        v68 = v3;
        v44 = *(_QWORD *)(v0 + 96);
        sub_100011EF0(0, v43, 0);
        v66 = v42;
        v45 = (char *)v42
            + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
        v46 = v44;
        v70 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 16);
        v72 = *(_QWORD *)(v44 + 72);
        do
        {
          v47 = *(_QWORD *)(v0 + 104);
          v48 = *(_QWORD *)(v0 + 88);
          v49 = v70(v47, v45, v48);
          v50 = SFAirDropSend.ItemMetadata.fileSubType.getter(v49);
          v52 = v51;
          (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
            sub_100011EF0(0, _swiftEmptyArrayStorage[2] + 1, 1);
          v61 = _swiftEmptyArrayStorage[2];
          v60 = _swiftEmptyArrayStorage[3];
          if (v61 >= v60 >> 1)
            sub_100011EF0(v60 > 1, v61 + 1, 1);
          _swiftEmptyArrayStorage[2] = v61 + 1;
          v62 = &_swiftEmptyArrayStorage[2 * v61];
          v62[4] = v50;
          v62[5] = v52;
          v45 += v72;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease(v66, v53, v54, v55, v56, v57, v58, v59);
        v3 = v68;
      }
      else
      {
        swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    *(_QWORD *)(v0 + 160) = _swiftEmptyArrayStorage;
    type metadata accessor for SFAirDropUtilities(0);
    if (qword_10013AC68 != -1)
      swift_once(&qword_10013AC68, sub_10005F004);
    v63 = *(double *)&qword_100147E78;
    v64 = (_QWORD *)swift_task_alloc(async function pointer to static SFAirDropUtilities.generatePreviewIcon(for:fileTypes:fileSubTypes:size:)[1]);
    *(_QWORD *)(v0 + 168) = v64;
    *v64 = v0;
    v64[1] = sub_100033C7C;
    return static SFAirDropUtilities.generatePreviewIcon(for:fileTypes:fileSubTypes:size:)(v3, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v63, v63);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100033C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _TtC9AirDropUI33AirDropTransferSessionsController *v13;
  _TtC9AirDropUI33AirDropTransferSessionsController *v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(*v2 + 176) = v1;
  swift_task_dealloc(v5);
  v14 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 152);
  v13 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 160);
  v15 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 144);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 152), v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v13, v16, v17, v18, v19, v20, v21, v22);
    swift_bridgeObjectRelease(v15, v23, v24, v25, v26, v27, v28, v29);
    v30 = *(_QWORD *)(v4 + 120);
    v31 = *(_QWORD *)(v4 + 128);
    v32 = sub_100033DB8;
  }
  else
  {
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v4 + 160), v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v14, v33, v34, v35, v36, v37, v38, v39);
    *(_QWORD *)(v4 + 184) = a1;
    swift_bridgeObjectRelease(v15, v40, v41, v42, v43, v44, v45, v46);
    v30 = *(_QWORD *)(v4 + 120);
    v31 = *(_QWORD *)(v4 + 128);
    v32 = sub_100033D30;
  }
  return swift_task_switch(v32, v30, v31);
}

uint64_t sub_100033D30()
{
  uint64_t v0;
  _TtC9AirDropUI33AirDropTransferSessionsController *v1;
  void *v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;

  v1 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 184);
  v2 = *(void **)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 112));
  v5 = v1;
  sub_100033654(v1, v4, v3, (uint64_t)&unk_1000EA910, (uint64_t)&unk_1000EA938);

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;

  swift_release(*(_QWORD *)(v0 + 112));
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 72);
    v17 = *(void **)(v0 + 136);
    v11 = swift_slowAlloc(22, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    v13 = swift_slowAlloc(32, -1);
    v18 = v13;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 40) = sub_10003A834(v10, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain(v8);
    v14 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 48) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    *v12 = v14;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get fallback preview image for transfer %s: %@", (uint8_t *)v11, 0x16u);
    v15 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v12, 1, v15);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {

    swift_errorRelease(v8);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100034054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  int v36;
  int *v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  double v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  int v76;
  uint64_t v77;
  char v78[24];
  _QWORD *v79;

  v2 = sub_100008F88(&qword_10013CD20);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  v8 = __chkstk_darwin(v6, v7);
  v70 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v68 = (char *)&v66 - v11;
  v13 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (uint64_t *)((char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = 0;
  v79 = &_swiftEmptyArrayStorage;
  v77 = a1;
  v22 = *(_QWORD *)(a1 + 64);
  v21 = a1 + 64;
  v20 = v22;
  v23 = 1 << *(_BYTE *)(v21 - 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v20;
  v74 = v21;
  v75 = (unint64_t)(v23 + 63) >> 6;
  v76 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
  v69 = v5;
  v67 = v16;
  v71 = v14;
  while (v25)
  {
    v26 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    v27 = v26 | (v19 << 6);
LABEL_23:
    v31 = *(_QWORD *)(*(_QWORD *)(v77 + 56) + 8 * v27);
    KeyPath = swift_getKeyPath(&unk_1000EA708);
    v33 = swift_getKeyPath(&unk_1000EA730);
    v34 = swift_retain(v31);
    static Published.subscript.getter(v18, v34, KeyPath, v33);
    swift_release(KeyPath);
    v35 = swift_release(v33);
    v36 = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v14 + 88))(v18, v13, v35);
    if (v36 == v76)
    {
      (*(void (**)(_QWORD *, uint64_t))(v14 + 96))(v18, v13);
      v37 = (int *)sub_100008F88(&qword_10013BDE0);
      swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)v18 + v37[12]), v38, v39, v40, v41, v42, v43, v44);
      swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)v18 + v37[16]), v45, v46, v47, v48, v49, v50, v51);
      v52 = (char *)v18 + v37[20];
      v53 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
      v54 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v18, v54);
      v55 = v31 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v31 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v78, 0, 0);
      sub_10000CC18(v55, (uint64_t)v5, &qword_10013CD20);
      v57 = v72;
      v56 = v73;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v5, 1, v73) == 1)
      {
        sub_10000CC5C((uint64_t)v5, &qword_10013CD20);
        swift_release(v31);
        v14 = v71;
      }
      else
      {
        v58 = v68;
        v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v57 + 32))(v68, v5, v56);
        v60 = v70;
        static Date.now.getter(v59);
        v61 = Date.timeIntervalSince(_:)(v58);
        v62 = *(void (**)(char *, uint64_t))(v57 + 8);
        v62(v60, v56);
        v63 = ((uint64_t (*)(char *, uint64_t))v62)(v58, v56);
        if (v61 <= 7.0)
        {
          swift_release(v31);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v63);
          v64 = v79[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v64);
          v65 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v31);
          specialized ContiguousArray._endMutation()(v65);
        }
        v5 = v69;
        v13 = v67;
        v14 = v71;
      }
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v18, v13);
      swift_release(v31);
    }
  }
  v28 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v28 >= v75)
    goto LABEL_30;
  v29 = *(_QWORD *)(v74 + 8 * v28);
  ++v19;
  if (v29)
    goto LABEL_22;
  v19 = v28 + 1;
  if (v28 + 1 >= v75)
    goto LABEL_30;
  v29 = *(_QWORD *)(v74 + 8 * v19);
  if (v29)
    goto LABEL_22;
  v19 = v28 + 2;
  if (v28 + 2 >= v75)
    goto LABEL_30;
  v29 = *(_QWORD *)(v74 + 8 * v19);
  if (v29)
    goto LABEL_22;
  v19 = v28 + 3;
  if (v28 + 3 >= v75)
    goto LABEL_30;
  v29 = *(_QWORD *)(v74 + 8 * v19);
  if (v29)
  {
LABEL_22:
    v25 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v19 << 6);
    goto LABEL_23;
  }
  v30 = v28 + 4;
  if (v30 >= v75)
  {
LABEL_30:
    swift_release(v77);
    return;
  }
  v29 = *(_QWORD *)(v74 + 8 * v30);
  if (v29)
  {
    v19 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v19 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v19 >= v75)
      goto LABEL_30;
    v29 = *(_QWORD *)(v74 + 8 * v19);
    ++v30;
    if (v29)
      goto LABEL_22;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_1000344F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[4] = a2;
  v3 = sub_100008F88(&qword_10013CA50);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100034584, 0, 0);
}

uint64_t sub_100034584()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[9] + 104))(v0[10], enum case for SFAirDropReceive.ItemDestination.noItem(_:), v0[8]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.AcceptAction.Single.accept(with:)[1]);
  v0[11] = v1;
  *v1 = v0;
  v1[1] = sub_1000345F4;
  return SFAirDrop.AcceptAction.Single.accept(with:)(v0[10], v0[5]);
}

uint64_t sub_1000345F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *(_QWORD *)(*v1 + 72);
  v6 = *v1;
  *(_QWORD *)(v6 + 96) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_1000346A0, 0, 0);
  v8 = *(_QWORD *)(v6 + 56);
  swift_task_dealloc(*(_QWORD *)(v6 + 80));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000346A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *log;
  uint64_t *v31;
  os_log_type_t type;
  uint64_t v33;
  uint64_t v34;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = type metadata accessor for Logger(0);
  sub_100009558(v6, (uint64_t)qword_10013C7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 40);
  if (v10)
  {
    type = v9;
    v15 = swift_slowAlloc(22, -1);
    v31 = (uint64_t *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v34 = v33;
    *(_DWORD *)v15 = 136315394;
    log = v8;
    v16 = SFAirDrop.AcceptAction.Single.id.getter(v14);
    v18 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v17;
    *(_QWORD *)(v0 + 16) = sub_10003A834(v16, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v11);
    v26 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 24) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v31 = v26;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, type, "AirDrop ReadyForOpen action %s failed with error %@", (uint8_t *)v15, 0x16u);
    v27 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v31, 1, v27);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v28 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100034960(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  _TtC9AirDropUI33AirDropTransferSessionsController *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  _QWORD *v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _TtC9AirDropUI33AirDropTransferSessionsController *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _TtC9AirDropUI33AirDropTransferSessionsController *v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _TtC9AirDropUI33AirDropTransferSessionsController *v81;
  uint64_t v82;
  _TtC9AirDropUI33AirDropTransferSessionsController *v83;
  Swift::String v84;
  Swift::Bool v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113[3];

  v3 = v2;
  v6 = sub_100008F88((uint64_t *)&unk_10013C9D0);
  __chkstk_darwin(v6, v7);
  v109 = (uint64_t)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v9);
  v107 = *(_QWORD *)(v10 - 8);
  v108 = v10;
  __chkstk_darwin(v10, v11);
  v106 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v13, v14);
  v110 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v16, v17);
  v111 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v19 = type metadata accessor for Logger(0);
  sub_100009558(v19, (uint64_t)qword_10013C7C0);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v113[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a2);
    v112 = sub_10003A834(a1, a2, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Scene session discarded for activity %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v25 = sub_100028874(a1, a2);
  if (v25)
  {
    v27 = v25;
    v28 = swift_retain(v25);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      *(_DWORD *)v31 = 136315138;
      v113[0] = v32;
      v33 = v3;
      v34 = *(_QWORD *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      v35 = *(_QWORD *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_bridgeObjectRetain(v35);
      v112 = sub_10003A834(v34, v35, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113);
      swift_release(v27);
      v36 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v35;
      v3 = v33;
      swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Ending transfer %s because scene session was discarded", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_release(v27);
    }
    v44 = v111;
    KeyPath = swift_getKeyPath(&unk_1000EA6C0);
    v46 = swift_getKeyPath(&unk_1000EA6E8);
    static Published.subscript.getter(v44, v27, KeyPath, v46);
    swift_release(KeyPath);
    swift_release(v46);
    v47 = type metadata accessor for SFAirDropSend.Transfer.State(0);
    LODWORD(KeyPath) = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v44, 1, v47);
    sub_10000CC5C((uint64_t)v44, &qword_10013C9E0);
    if ((_DWORD)KeyPath == 1)
    {
      v48 = *(_QWORD *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      v49 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v27
                                                                  + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                                  + 8);
      v50 = swift_getKeyPath(&unk_1000EA708);
      v51 = swift_getKeyPath(&unk_1000EA730);
      swift_bridgeObjectRetain(v49);
      v52 = v106;
      static Published.subscript.getter(v106, v27, v50, v51);
      swift_release(v50);
      swift_release(v51);
      v53 = v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction;
      swift_beginAccess(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction, v113, 0, 0);
      v54 = v53;
      v55 = v109;
      sub_10000CC18(v54, v109, (uint64_t *)&unk_10013C9D0);
      sub_10003F2C0(v48, (uint64_t)v49, v52, v55);
      swift_bridgeObjectRelease(v49, v56, v57, v58, v59, v60, v61, v62);
      sub_10000CC5C(v55, (uint64_t *)&unk_10013C9D0);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v52, v108);
    }
    else
    {
      v63 = type metadata accessor for TaskPriority(0);
      v64 = (uint64_t)v110;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v110, 1, 1, v63);
      v65 = swift_allocObject(&unk_100125690, 32, 7);
      *(_QWORD *)(v65 + 16) = v3;
      *(_QWORD *)(v65 + 24) = v27;
      swift_retain(v27);
      v66 = v3;
      v67 = static Task<>.noThrow(priority:operation:)(v64, &unk_10013CA18, v65, (char *)&type metadata for () + 8);
      swift_release(v67);
      swift_release(v65);
      sub_10000CC5C(v64, &qword_10013BCC0);
    }
    v68 = (uint64_t *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v69 = *(_QWORD *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v70 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v27
                                                                + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                                + 8);
    swift_bridgeObjectRetain(v70);
    sub_10002F300(v69, (unint64_t)v70);
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
    v78 = swift_getKeyPath(&unk_1000EA5E8);
    v79 = swift_getKeyPath(&unk_1000EA610);
    static Published.subscript.getter(&v112, v3, v78, v79);
    swift_release(v78);
    swift_release(v79);
    v80 = v112;
    if (v112)
    {
      v81 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v112
                                                                  + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                                  + 8);
      v82 = *v68;
      v83 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v68[1];
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v83);
      v84._countAndFlagsBits = v82;
      v84._object = v83;
      v85 = String.hasPrefix(_:)(v84);
      swift_bridgeObjectRelease(v81, v86, v87, v88, v89, v90, v91, v92);
      swift_bridgeObjectRelease(v83, v93, v94, v95, v96, v97, v98, v99);
      if (v85)
      {
        v100 = type metadata accessor for TaskPriority(0);
        v101 = (uint64_t)v110;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v110, 1, 1, v100);
        v102 = swift_allocObject(&unk_100125640, 24, 7);
        swift_unknownObjectWeakInit(v102 + 16, v3);
        v103 = swift_allocObject(&unk_100125668, 32, 7);
        *(_QWORD *)(v103 + 16) = &unk_10013C9F0;
        *(_QWORD *)(v103 + 24) = v102;
        v104 = sub_100008F88(&qword_10013CA08);
        v105 = static Task<>.noThrow(priority:operation:)(v101, &unk_10013CA00, v103, v104);
        swift_release(v27);
        swift_release(v80);
        swift_release(v105);
        swift_release(v103);
        sub_10000CC5C(v101, &qword_10013BCC0);
        return result;
      }
      swift_release(v80);
    }
    *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000350EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = a3;
  v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003514C, 0, 0);
}

uint64_t sub_10003514C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier;
  v0[9] = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier;
  v3 = (uint64_t *)(v1 + v2);
  v4 = *v3;
  v5 = v3[1];
  swift_bridgeObjectRetain(v5);
  SFAirDrop.TransferIdentifier.init(_:)(v4, v5);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.cancelTransfer(_:)[1]);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_100035484;
  return SFAirDropClient.cancelTransfer(_:)(v0[8]);
}

uint64_t sub_100035484()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 + 56) + 8))(*(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 48));
  if (v0)
    return swift_task_switch(sub_100035508, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100035508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 88);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_10013C7C0);
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 40);
    v8 = (uint64_t *)(v7 + *(_QWORD *)(v0 + 72));
    v9 = swift_slowAlloc(22, -1);
    v23 = (uint64_t *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v25 = v24;
    *(_DWORD *)v9 = 136315394;
    v11 = *v8;
    v10 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v8[1];
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 16) = sub_10003A834(v11, (unint64_t)v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
    swift_release_n(v7, 2);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v1);
    v19 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v23 = v19;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to cancel transfer %s: %@", (uint8_t *)v9, 0x16u);
    v20 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v23, 1, v20);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 40);
    swift_errorRelease(v1);
    swift_release_n(v21, 2);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000357A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 40) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 48) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_10003580C, v3, v4);
}

uint64_t sub_10003580C()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    sub_1000299E8();

  }
  return (*(uint64_t (**)(BOOL))(v0 + 8))(Strong == 0);
}

uint64_t sub_100035878(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1000358D0;
  return v5();
}

uint64_t sub_1000358D0(char a1)
{
  uint64_t *v1;
  _BYTE *v3;
  uint64_t v5;

  v3 = *(_BYTE **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  *v3 = a1 & 1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100035924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v5 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100035988, 0, 0);
}

uint64_t sub_100035988()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[8] + 104))(v0[9], enum case for SFAirDropReceive.ItemDestination.noItem(_:), v0[7]);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to SFAirDrop.AcceptAction.Single.accept(with:)
                                  + 1));
  v0[10] = v1;
  v2 = sub_100008F88(&qword_10013CA50);
  *v1 = v0;
  v1[1] = sub_100035A08;
  return SFAirDrop.AcceptAction.Single.accept(with:)(v0[9], v2);
}

uint64_t sub_100035A08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 72);
  v2 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 88) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_100035AA8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 72));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100035AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v16 = *(_QWORD *)(v0 + 40);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v17 = v12;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 16) = sub_10003A834(v16, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 24) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v11 = v13;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to decline ask for %s: %@", (uint8_t *)v10, 0x16u);
    v14 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v11, 1, v14);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  v5 = sub_100008F88((uint64_t *)&unk_10013C9D0);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100035D88, 0, 0);
}

uint64_t sub_100035D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 56);
  sub_10000CC18(*(_QWORD *)(v0 + 32), v1, (uint64_t *)&unk_10013C9D0);
  v2 = type metadata accessor for SFAirDrop.DeclineAction(0);
  *(_QWORD *)(v0 + 64) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 72) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_10000CC5C(*(_QWORD *)(v0 + 56), (uint64_t *)&unk_10013C9D0);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.DeclineAction.decline()[1]);
    *(_QWORD *)(v0 + 80) = v5;
    *v5 = v0;
    v5[1] = sub_100035E48;
    return SFAirDrop.DeclineAction.decline()();
  }
}

uint64_t sub_100035E48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100035ECC, 0, 0);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 + 72) + 8))(*(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64));
  swift_task_dealloc(*(_QWORD *)(v3 + 56));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100035ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v16 = *(_QWORD *)(v0 + 40);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v17 = v12;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 16) = sub_10003A834(v16, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 24) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v11 = v13;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to cancel transfer for %s: %@", (uint8_t *)v10, 0x16u);
    v14 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v11, 1, v14);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003615C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[4] = a3;
  v4[5] = a4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.DeclineAction.decline()[1]);
  v4[6] = v5;
  *v5 = v4;
  v5[1] = sub_1000361AC;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_1000361AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100036218, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100036218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 40);
  if (v7)
  {
    v15 = *(_QWORD *)(v0 + 32);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v16 = swift_slowAlloc(32, -1);
    v17 = v16;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 16) = sub_10003A834(v15, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v12 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 24) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v11 = v12;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to decline ask for %s: %@", (uint8_t *)v10, 0x16u);
    v13 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100036494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[4] = a3;
  v4[5] = a4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.DeclineAction.decline()[1]);
  v4[6] = v5;
  *v5 = v4;
  v5[1] = sub_1000364E4;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_1000364E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100036550, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100036550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 40);
  if (v7)
  {
    v15 = *(_QWORD *)(v0 + 32);
    v10 = swift_slowAlloc(22, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v16 = swift_slowAlloc(32, -1);
    v17 = v16;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 16) = sub_10003A834(v15, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v12 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 24) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v11 = v12;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to cancel transfer for %s: %@", (uint8_t *)v10, 0x16u);
    v13 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000367CC(uint64_t a1, _TtC9AirDropUI33AirDropTransferSessionsController *a2, _TtC9AirDropUI33AirDropTransferSessionsController *a3, void *a4, void *a5, void *a6, uint64_t a7, _TtC9AirDropUI33AirDropTransferSessionsController *a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  id v35;
  os_log_t v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  void *v40;
  uint64_t KeyPath;
  uint64_t v42;
  const char *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _TtC9AirDropUI33AirDropTransferSessionsController *v50;
  unint64_t v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  double result;
  uint64_t v80;
  int v81;
  _TtC9AirDropUI33AirDropTransferSessionsController *v82;
  void *v83;
  uint64_t v84;
  _TtC9AirDropUI33AirDropTransferSessionsController *v85;
  _TtC9AirDropUI33AirDropTransferSessionsController *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  _TtC9AirDropUI33AirDropTransferSessionsController *v94;
  uint64_t v95;
  SEL v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  _TtC9AirDropUI33AirDropTransferSessionsController *v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint8_t *v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  os_log_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _TtC9AirDropUI33AirDropTransferSessionsController *v138;
  void *v139;
  _TtC9AirDropUI33AirDropTransferSessionsController *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145[3];
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v144 = a1;
  v139 = a4;
  v140 = a3;
  v17 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v141 = (id *)((char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100009558(v21, (uint64_t)qword_10013C7C0);
  swift_bridgeObjectRetain_n(a2, 2);
  v23 = a5;
  v24 = a6;
  v25 = v23;
  v26 = v24;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  v138 = a8;
  v137 = v18;
  v142 = a7;
  if (v29)
  {
    v30 = swift_slowAlloc(32, -1);
    v133 = v27;
    v31 = v30;
    v32 = swift_slowAlloc(16, -1);
    v135 = v17;
    v33 = (_QWORD *)v32;
    v134 = (id)swift_slowAlloc(32, -1);
    v145[0] = (uint64_t)v134;
    *(_DWORD *)v31 = 136315650;
    swift_bridgeObjectRetain(a2);
    v147 = sub_10003A834(v144, (unint64_t)a2, v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v31 + 12) = 2112;
    v136 = v22;
    v147 = (uint64_t)v25;
    v34 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
    *v33 = v25;

    *(_WORD *)(v31 + 22) = 2112;
    v147 = (uint64_t)v26;
    v35 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
    v33[1] = v26;

    v36 = v133;
    _os_log_impl((void *)&_mh_execute_header, v133, v28, "Update transfer %s. Completed unit count: %@. Total unit count: %@", (uint8_t *)v31, 0x20u);
    v37 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v33, 2, v37);
    v38 = v33;
    v17 = v135;
    swift_slowDealloc(v38, -1, -1);
    v39 = v134;
    swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v40 = v25;
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v42 = swift_getKeyPath(&unk_1000EA658);
  swift_bridgeObjectRetain(a2);
  static Published.subscript.getter(v145, v143, KeyPath, v42);
  swift_release(KeyPath);
  swift_release(v42);
  v50 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v145[0];
  if (*(_QWORD *)(v145[0] + 16) && (v51 = sub_10003AF58(v144, (uint64_t)a2), (v43 & 1) != 0))
  {
    v134 = v26;
    v144 = *(_QWORD *)(*(_QWORD *)v50->nearbySharingInteractionCoordinator + 8 * v51);
    swift_retain(v144);
    swift_bridgeObjectRelease(a2, v52, v53, v54, v55, v56, v57, v58);
    swift_bridgeObjectRelease(v50, v59, v60, v61, v62, v63, v64, v65);
    v66 = -[AirDropTransferSessionsController unsignedIntegerValue](v140, "unsignedIntegerValue");
    v132 = v40;
    if (a10 >> 60 == 15)
    {
      v140 = 0;
    }
    else
    {
      sub_100018D44(0, &qword_10013BC28, NSKeyedUnarchiver_ptr);
      sub_10001810C(a9, a10);
      static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(v145, a9, a10);
      sub_1000180AC(a9, a10);
      if (v146)
      {
        v80 = sub_100008F88(&qword_10013CB50);
        v81 = swift_dynamicCast(&v147, v145, (char *)&type metadata for Any + 8, v80, 6);
        v82 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v147;
        if (!v81)
          v82 = 0;
        v140 = v82;
      }
      else
      {
        sub_10000CC5C((uint64_t)v145, &qword_10013CB40);
        v140 = 0;
      }
    }
    if (a12 >> 60 == 15)
    {
      v85 = 0;
      v86 = v138;
      v83 = v139;
    }
    else
    {
      sub_100018D44(0, &qword_10013BC28, NSKeyedUnarchiver_ptr);
      sub_10001810C(a11, a12);
      static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)(v145, a11, a12);
      sub_1000180AC(a11, a12);
      v83 = v139;
      if (v146)
      {
        v84 = sub_100008F88(&qword_10013CB48);
        if (swift_dynamicCast(&v147, v145, (char *)&type metadata for Any + 8, v84, 6))
          v85 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v147;
        else
          v85 = 0;
      }
      else
      {
        sub_10000CC5C((uint64_t)v145, &qword_10013CB40);
        v85 = 0;
      }
      v86 = v138;
    }
    v87 = v137;
    v88 = (uint64_t)v141;
    *v141 = v66;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v87 + 104))(v88, enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:), v17);
    v89 = objc_msgSend(v83, "BOOLValue");
    v90 = v66;
    v91 = objc_msgSend(v132, "integerValue");
    v92 = objc_msgSend(v134, "integerValue");
    v93 = (uint64_t)v91;
    v94 = v140;
    v95 = v144;
    sub_10006F16C(v88, v89, v93, (uint64_t)v92, v142, v86, v140, v85);
    swift_bridgeObjectRelease(v85, v96, v97, v98, v99, v100, v101, v102);
    swift_bridgeObjectRelease(v94, v103, v104, v105, v106, v107, v108, v109);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v17);
    if (qword_10013ABE0 != -1)
      swift_once(&qword_10013ABE0, sub_100023E74);
    v110 = qword_100147D90;
    v111 = swift_getKeyPath(&unk_1000EA7E0);
    v112 = swift_getKeyPath(&unk_1000EA808);
    static Published.subscript.getter(v145, v110, v111, v112);
    swift_release(v111);
    swift_release(v112);
    if (v90 == (id)3 && (v145[0] & 1) == 0)
    {
      v114 = Logger.logObject.getter(v113);
      v115 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v114, v115))
      {
        v116 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v116 = 0;
        _os_log_impl((void *)&_mh_execute_header, v114, v115, "Transfer was cancelled by sender. Ending our session locally.", v116, 2u);
        swift_slowDealloc(v116, -1, -1);
      }

      v118 = *(_QWORD *)(v95 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      v117 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v95
                                                                   + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                                   + 8);
      v119 = swift_bridgeObjectRetain_n(v117, 3);
      v120 = Logger.logObject.getter(v119);
      v121 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v120, v121))
      {
        v122 = (uint8_t *)swift_slowAlloc(12, -1);
        v123 = swift_slowAlloc(32, -1);
        v145[0] = v123;
        *(_DWORD *)v122 = 136315138;
        swift_bridgeObjectRetain(v117);
        v147 = sub_10003A834(v118, (unint64_t)v117, v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
        swift_bridgeObjectRelease_n(v117, 3);
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "After opening URLs for transfer %s. Ending session locally.", v122, 0xCu);
        swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v123, -1, -1);
        v124 = v122;
        v95 = v144;
        swift_slowDealloc(v124, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v117, 2);
      }
      sub_10002F300(v118, (unint64_t)v117);
      swift_bridgeObjectRelease(v117, v125, v126, v127, v128, v129, v130, v131);
    }
    *(_QWORD *)&result = swift_release(v95).n128_u64[0];
  }
  else
  {
    swift_bridgeObjectRelease(a2, v43, v44, v45, v46, v47, v48, v49);
    swift_bridgeObjectRelease(v50, v67, v68, v69, v70, v71, v72, v73);
    v74 = swift_bridgeObjectRetain_n(a2, 2);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = swift_slowAlloc(32, -1);
      v145[0] = v78;
      *(_DWORD *)v77 = 136315138;
      swift_bridgeObjectRetain(a2);
      v147 = sub_10003A834(v144, (unint64_t)a2, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "AirDrop transfer session not active for ID: %s, returning", v77, 0xCu);
      swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  return result;
}

void sub_100037630(uint64_t a1, _TtC9AirDropUI33AirDropTransferSessionsController *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _TtC9AirDropUI33AirDropTransferSessionsController *v26;
  unint64_t v27;
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _TtC9AirDropUI33AirDropTransferSessionsController *v53;
  uint64_t v54;
  _TtC9AirDropUI33AirDropTransferSessionsController *v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  SEL v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95[2];
  uint64_t v96;
  uint64_t v97;

  v3 = v2;
  v94 = a1;
  v5 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v93 = (uint64_t *)((char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v9 = type metadata accessor for Logger(0);
  sub_100009558(v9, (uint64_t)qword_10013C7C0);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v91 = v5;
    v92 = v6;
    v15 = v14;
    v95[0] = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(a2);
    v96 = sub_10003A834(v94, (unint64_t)a2, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accept transfer for transfer identifier: %s.", v13, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v16 = v15;
    v5 = v91;
    v6 = v92;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  KeyPath = swift_getKeyPath(&unk_1000EA630);
  v18 = swift_getKeyPath(&unk_1000EA658);
  swift_bridgeObjectRetain(a2);
  static Published.subscript.getter(v95, v3, KeyPath, v18);
  swift_release(KeyPath);
  swift_release(v18);
  v26 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v95[0];
  if (*(_QWORD *)(v95[0] + 16) && (v27 = sub_10003AF58(v94, (uint64_t)a2), (v19 & 1) != 0))
  {
    v28 = *(_QWORD *)(*(_QWORD *)v26->nearbySharingInteractionCoordinator + 8 * v27);
    swift_retain(v28);
    swift_bridgeObjectRelease(a2, v29, v30, v31, v32, v33, v34, v35);
    swift_bridgeObjectRelease(v26, v36, v37, v38, v39, v40, v41, v42);
    v43 = (uint64_t)v93;
    *v93 = 2;
    v44 = v5;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v43, enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:), v5);
    v45 = swift_getKeyPath(&unk_1000EA9E8);
    v46 = swift_getKeyPath(&unk_1000EAA10);
    static Published.subscript.getter(v95, v28, v45, v46);
    swift_release(v45);
    swift_release(v46);
    v47 = v95[0];
    v48 = swift_getKeyPath(&unk_1000EAA30);
    v49 = swift_getKeyPath(&unk_1000EAA58);
    static Published.subscript.getter(v95, v28, v48, v49);
    swift_release(v48);
    swift_release(v49);
    v50 = v95[0];
    v51 = swift_getKeyPath(&unk_1000EA750);
    v52 = swift_getKeyPath(&unk_1000EA778);
    static Published.subscript.getter(v95, v28, v51, v52);
    swift_release(v51);
    swift_release(v52);
    v53 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v28
                                                                + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
    v54 = v95[0];
    v55 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v95[1];
    v56 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v28
                                                                + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v56);
    sub_10006F16C(v43, 1, v47, v50, v54, v55, v53, v56);
    swift_release(v28);
    swift_bridgeObjectRelease(v53, v57, v58, v59, v60, v61, v62, v63);
    swift_bridgeObjectRelease(v56, v64, v65, v66, v67, v68, v69, v70);
    swift_bridgeObjectRelease(v55, v71, v72, v73, v74, v75, v76, v77);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v43, v44);
  }
  else
  {
    swift_bridgeObjectRelease(a2, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v26, v78, v79, v80, v81, v82, v83, v84);
    v85 = swift_bridgeObjectRetain_n(a2, 2);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(12, -1);
      v89 = swift_slowAlloc(32, -1);
      v95[0] = v89;
      *(_DWORD *)v88 = 136315138;
      swift_bridgeObjectRetain(a2);
      v96 = sub_10003A834(v94, (unint64_t)a2, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "AirDrop transfer session not active for ID: %s, returning", v88, 0xCu);
      swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v88, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
}

void sub_100037BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _TtC9AirDropUI33AirDropTransferSessionsController *v8;
  uint64_t v9;
  void *v10;
  NSString v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100009558(v3, (uint64_t)qword_10013C7C0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received cancellation request by the AirDropTransfer session", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v8 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1
                                                             + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                             + 8);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient);
  if (v10)
  {
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v10);
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "cancellationWasRequestedForTransferIdentifier:", v11);

    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Notified AirDropUIClient of cancellation. Ending session locally for faster feedback to the user.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    sub_10002F300(v9, (unint64_t)v8);
    swift_bridgeObjectRelease(v8, v16, v17, v18, v19, v20, v21, v22);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v23 = swift_bridgeObjectRetain(v8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "AirDropUIClient is nil. Ending session locally.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    sub_10002F300(v9, (unint64_t)v8);
    swift_bridgeObjectRelease(v8, v27, v28, v29, v30, v31, v32, v33);
  }
}

void sub_100037E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _TtC9AirDropUI33AirDropTransferSessionsController *v8;
  uint64_t v9;
  void *v10;
  NSString v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  NSObject *oslog;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100009558(v3, (uint64_t)qword_10013C7C0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received accepted request by the AirDropTransfer session", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v8 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1
                                                             + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                             + 8);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient);
  if (v10)
  {
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v10);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8, v12, v13, v14, v15, v16, v17, v18);
    objc_msgSend(v10, "acceptWasRequestedForTransferIdentifier:", v11);

    oslog = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v20, "Notified AirDropUIClient of transfer accept.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
      swift_unknownObjectRelease(v10);

    }
    else
    {

      swift_unknownObjectRelease(v10);
    }
  }
  else
  {
    v22 = swift_bridgeObjectRetain(v8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "AirDropUIClient is nil, accepting local session.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    sub_100037630(v9, v8);
    swift_bridgeObjectRelease(v8, v26, v27, v28, v29, v30, v31, v32);
  }
}

uint64_t sub_1000380A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[7] = a2;
  v3[8] = a3;
  v4 = type metadata accessor for SFInterventionWorkflow(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFInterventionResponse(0);
  v3[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[13] = v7;
  v3[14] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003812C, 0, 0);
}

uint64_t sub_10003812C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  sub_100008F88(&qword_10013CA70);
  SFAirDrop.PermissionRequest.cancel()();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for SFInterventionWorkflow.moreInfo(_:), v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.showIntervention(workflow:)[1]);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_1000381C4;
  return SFAirDropClient.showIntervention(workflow:)(v0[14], v0[11]);
}

uint64_t sub_1000381C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    v7 = sub_10003829C;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
    v7 = sub_100038260;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100038260()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v22;

  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013C7C0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 128);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v11;
    *(_QWORD *)(v0 + 48) = sub_10003A834(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to show more info {error: %s}", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 128));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v20 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000384A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  uint64_t v29;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  id v31;
  uint64_t KeyPath;
  uint64_t v33;
  UIImage *v34;
  _TtC9AirDropUI33AirDropTransferSessionsController *v35;
  uint64_t v36;
  _TtC9AirDropUI33AirDropTransferSessionsController *v37;
  uint64_t v38;
  NSString v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  UIImage *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  UIImage *v58;
  UIImage *v59;
  char *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  _TtC9AirDropUI33AirDropTransferSessionsController *v71;
  id v72;
  Class isa;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  char *v81;
  uint64_t v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  NSURL *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  NSString v96;
  id v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  _TtC9AirDropUI33AirDropTransferSessionsController *v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  _QWORD v113[4];
  uint64_t v114;
  _TtC9AirDropUI33AirDropTransferSessionsController *v115;
  id v116;
  char *v117;
  char *v118;
  uint64_t v119;
  UIImage *aBlock;
  uint64_t v121;
  void (*v122)(uint64_t, void *);
  void *v123;
  void (*v124)(uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v2 = sub_100008F88(&qword_10013CB20);
  v4 = __chkstk_darwin(v2, v3);
  v118 = (char *)v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v113 - v7;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v113[3] = (char *)v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)v113 - v16;
  __chkstk_darwin(v15, v18);
  v117 = (char *)v113 - v19;
  v20 = type metadata accessor for Locale(0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1
                                                              + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
  v29 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v30 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1
                                                              + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                              + 8);
  if (*(_QWORD *)v28->connection)
  {
    v114 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v31 = objc_allocWithZone((Class)UNMutableNotificationContent);
    swift_bridgeObjectRetain(v28);
    v115 = v30;
    swift_bridgeObjectRetain(v30);
    v116 = objc_msgSend(v31, "init");
    KeyPath = swift_getKeyPath(&unk_1000EA750);
    v33 = swift_getKeyPath(&unk_1000EA778);
    static Published.subscript.getter(&aBlock, a1, KeyPath, v33);
    swift_release(KeyPath);
    swift_release(v33);
    v34 = aBlock;
    v35 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v121;
    if (!v121)
    {
      v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001000F0CF0);
      static Locale.current.getter(v36);
      String.init(localized:table:bundle:locale:comment:)(v27, v34, 0, 0, v23, 0, 0, 256);
      v35 = v37;
    }
    v38 = v119;
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35, v40, v41, v42, v43, v44, v45, v46);
    v47 = v116;
    objc_msgSend(v116, "setBody:", v39);

    v48 = swift_getKeyPath(&unk_1000EA798);
    v49 = swift_getKeyPath(&unk_1000EA7C0);
    static Published.subscript.getter(&aBlock, a1, v48, v49);
    swift_release(v48);
    swift_release(v49);
    v50 = aBlock;
    if (aBlock)
    {
      sub_100038FB0(aBlock, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {

        sub_10000CC5C((uint64_t)v8, &qword_10013CB20);
        if (!*(_QWORD *)v28->connection)
          goto LABEL_17;
        goto LABEL_16;
      }
      v60 = v117;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v117, v8, v9);
      sub_100018D44(0, &qword_10013CB28, UNNotificationAttachment_ptr);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v60, v9);
      v68 = sub_100039760(0xD000000000000015, 0x80000001000F0D60, (uint64_t)v17, 0);
      v69 = sub_100008F88((uint64_t *)&unk_10013DF40);
      v70 = swift_allocObject(v69, 40, 7);
      *(_OWORD *)(v70 + 16) = xmmword_1000E9380;
      *(_QWORD *)(v70 + 32) = v68;
      aBlock = (UIImage *)v70;
      specialized Array._endMutation()();
      v71 = (_TtC9AirDropUI33AirDropTransferSessionsController *)aBlock;
      v72 = v68;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71, v74, v75, v76, v77, v78, v79, v80);
      v47 = v116;
      objc_msgSend(v116, "setAttachments:", isa);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v117, v9);
      v38 = v119;
    }
    if (!*(_QWORD *)v28->connection)
    {
LABEL_17:
      v82 = 1;
      v81 = v118;
      goto LABEL_18;
    }
LABEL_16:
    v81 = v118;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v118, (unint64_t)v28+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
    v82 = 0;
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v81, v82, 1, v9);
    swift_bridgeObjectRelease(v28, v83, v84, v85, v86, v87, v88, v89);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v81, 1, v9) == 1)
    {
      v91 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v90);
      v91 = v92;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v81, v9);
    }
    objc_msgSend(v47, "setDefaultActionURL:", v91);

    objc_msgSend(v47, "setShouldBackgroundDefaultAction:", 1);
    v93 = objc_msgSend((id)objc_opt_self(UNTimeIntervalNotificationTrigger), "triggerWithTimeInterval:repeats:", 0, 0.1);
    v94 = v47;
    v95 = v93;
    v96 = String._bridgeToObjectiveC()();
    v97 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:", v96, v94, v95);

    v98 = *(void **)(v38 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_userNotificationsCenter);
    v124 = sub_1000398E0;
    v125 = 0;
    aBlock = (UIImage *)_NSConcreteStackBlock;
    v121 = 1107296256;
    v122 = sub_100039AD0;
    v123 = &unk_100125748;
    v99 = _Block_copy(&aBlock);
    objc_msgSend(v98, "addNotificationRequest:withCompletionHandler:", v97, v99);
    _Block_release(v99);
    if (qword_10013ABE8 != -1)
      swift_once(&qword_10013ABE8, sub_100028BFC);
    v100 = type metadata accessor for Logger(0);
    v101 = sub_100009558(v100, (uint64_t)qword_10013C7C0);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v104 = 0;
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Notification hopefully shown for transfer. Ending session.", v104, 2u);
      swift_slowDealloc(v104, -1, -1);
    }

    v105 = v115;
    sub_10002F300(v114, (unint64_t)v115);
    swift_bridgeObjectRelease(v105, v106, v107, v108, v109, v110, v111, v112);

    return;
  }
  v51 = qword_10013ABE8;
  swift_bridgeObjectRetain(v30);
  if (v51 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v52 = type metadata accessor for Logger(0);
  sub_100009558(v52, (uint64_t)qword_10013C7C0);
  v53 = swift_bridgeObjectRetain_n(v30, 2);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = v29;
    v58 = (UIImage *)swift_slowAlloc(32, -1);
    aBlock = v58;
    *(_DWORD *)v56 = 136315138;
    swift_bridgeObjectRetain(v30);
    v126 = sub_10003A834(v57, (unint64_t)v30, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127);
    swift_bridgeObjectRelease_n(v30, 3);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "AirDropTransfer %s has no completed URLs, so nothing to present to user. Ending session.", v56, 0xCu);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    v59 = v58;
    v29 = v57;
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v56, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v30, 2);
  }
  sub_10002F300(v29, (unint64_t)v30);
  swift_bridgeObjectRelease(v30, v61, v62, v63, v64, v65, v66, v67);
}

uint64_t sub_100038FB0@<X0>(UIImage *a1@<X0>, id a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSData *v34;
  NSData *v35;
  unint64_t v36;
  NSString *v37;
  uint64_t v38;
  _TtC9AirDropUI33AirDropTransferSessionsController *v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  _TtC9AirDropUI33AirDropTransferSessionsController *v58;
  Swift::String v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  _TtC9AirDropUI33AirDropTransferSessionsController *v67;
  _TtC9AirDropUI33AirDropTransferSessionsController *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  void (*v76)(char *, uint64_t);
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _TtC9AirDropUI33AirDropTransferSessionsController *v90;
  _TtC9AirDropUI33AirDropTransferSessionsController *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  void (*v99)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char *v101;
  id v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  _QWORD v113[4];
  void (*v114)(char *, uint64_t, uint64_t, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v115;

  v106 = type metadata accessor for Logger(0);
  v103 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v4);
  v109 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v107 = *(_QWORD *)(v6 - 8);
  v108 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD **)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v101 - v17;
  v19 = sub_100008F88(&qword_10013CB20);
  v21 = __chkstk_darwin(v19, v20);
  v101 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v101 - v25;
  v28 = __chkstk_darwin(v24, v27);
  v30 = (char *)&v101 - v29;
  __chkstk_darwin(v28, v31);
  v33 = (char *)&v101 - v32;
  v111 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v11[7];
  v111((char *)&v101 - v32, 1, 1, v10);
  v34 = UIImageJPEGRepresentation(a1, 1.0);
  if (!v34)
    goto LABEL_9;
  v35 = v34;
  v102 = a2;
  v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v104 = v36;

  v37 = NSTemporaryDirectory();
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v105 = v33;
  v40 = v39;

  URL.init(fileURLWithPath:)(v38, v40);
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47, v101, v102);
  v114 = 0;
  v115 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(v115, v48, v49, v50, v51, v52, v53, v54, v101, v102);
  v114 = (void (*)(char *, uint64_t, uint64_t, uint64_t))0xD000000000000017;
  v115 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F0D80;
  v55 = UUID.init()();
  v56 = UUID.uuidString.getter(v55);
  v58 = v57;
  (*(void (**)(char *, uint64_t))(v107 + 8))(v9, v108);
  v59._countAndFlagsBits = v56;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v58, v60, v61, v62, v63, v64, v65, v66, v101, v102);
  v67 = v115;
  URL.appendingPathComponent(_:)(v114, v115);
  v68 = v67;
  v33 = v105;
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75, v101, v102);
  v76 = (void (*)(char *, uint64_t))v11[1];
  v76(v15, v10);
  URL.appendingPathExtension(_:)(1734701162, 0xE400000000000000);
  v76(v18, v10);
  v111(v30, 0, 1, v10);
  sub_100040DE4((uint64_t)v30, (uint64_t)v33, &qword_10013CB20);
  sub_10000CC18((uint64_t)v33, (uint64_t)v26, &qword_10013CB20);
  v77 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
  if (v77(v26, 1, v10) == 1)
  {
    __break(1u);
  }
  else
  {
    v78 = v104;
    Data.write(to:options:)(v26, 0, v110, v104);
    v79 = v106;
    v80 = v109;
    v76(v26, v10);
    if (qword_10013ABE8 != -1)
      swift_once(&qword_10013ABE8, sub_100028BFC);
    v81 = sub_100009558(v79, (uint64_t)qword_10013C7C0);
    v82 = v103;
    v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v103 + 16))(v80, v81, v79);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v84, v85))
    {
      sub_100017098(v110, v78);

      (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v79);
      a2 = v102;
      goto LABEL_9;
    }
    v86 = (uint8_t *)swift_slowAlloc(12, -1);
    v111 = (void (*)(char *, uint64_t, uint64_t, uint64_t))swift_slowAlloc(32, -1);
    v114 = v111;
    *(_DWORD *)v86 = 136315138;
    swift_beginAccess(v33, v113, 0, 0);
    v87 = v101;
    sub_10000CC18((uint64_t)v33, (uint64_t)v101, &qword_10013CB20);
    if (v77(v87, 1, v10) != 1)
    {
      v88 = v10;
      v89 = URL.absoluteString.getter();
      v91 = v90;
      v76(v87, v88);
      v112 = sub_10003A834(v89, (unint64_t)v91, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113);
      swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98, v101, v102);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Saved temporary image URL to: %s", v86, 0xCu);
      v99 = v111;
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v86, -1, -1);
      sub_100017098(v110, v104);

      (*(void (**)(char *, uint64_t))(v103 + 8))(v109, v79);
      a2 = v102;
      v33 = v105;
LABEL_9:
      swift_beginAccess(v33, &v114, 0, 0);
      sub_10000CC18((uint64_t)v33, (uint64_t)a2, &qword_10013CB20);
      return sub_10000CC5C((uint64_t)v33, &qword_10013CB20);
    }
  }
  result = sub_10000CC5C((uint64_t)v105, &qword_10013CB20);
  __break(1u);
  return result;
}

id sub_100039760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  NSString v9;
  NSURL *v10;
  void *v11;
  void *v12;
  NSDictionary v13;
  id v14;
  id v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  id v18;
  id v19;
  uint64_t v20;
  id v22;

  v5 = v4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  if (a4)
  {
    v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v13.super.isa = 0;
  }
  v22 = 0;
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "attachmentWithIdentifier:URL:options:error:", v9, v12, v13.super.isa, &v22);

  v15 = v22;
  if (v14)
  {
    v16 = type metadata accessor for URL(0);
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
    v18 = v15;
    v17(a3, v16);
  }
  else
  {
    v19 = v22;
    _convertNSErrorToError(_:)(v15);

    swift_willThrow();
    v20 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a3, v20);
  }
  return v14;
}

void sub_1000398E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _TtC9AirDropUI33AirDropTransferSessionsController *v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *oslog;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10013ABE8 != -1)
      swift_once(&qword_10013ABE8, sub_100028BFC);
    v2 = type metadata accessor for Logger(0);
    sub_100009558(v2, (uint64_t)qword_10013C7C0);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v21 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_getErrorValue(a1, v20, v19);
      v7 = Error.localizedDescription.getter(v19[1], v19[2]);
      v9 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v8;
      v18 = sub_10003A834(v7, v8, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19);
      swift_bridgeObjectRelease(v9, v10, v11, v12, v13, v14, v15, v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Couldn't post notification: %s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

void sub_100039AD0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

double sub_100039BA8(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD *, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _TtC9AirDropUI33AirDropTransferSessionsController *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void (*v42)(char *, _QWORD *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(char *, _QWORD *, uint64_t);
  uint64_t v69;
  void *v70;
  char *v71;
  char *v72;
  double result;
  void (*v74)(char *, _QWORD *, uint64_t);
  char *v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v2 = v1;
  v4 = type metadata accessor for DeviceLockState(0);
  v5 = *(unint64_t **)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v75 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v74 - v11;
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v74 - v14;
  if (qword_10013ABE8 != -1)
LABEL_36:
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v16 = type metadata accessor for Logger(0);
  sub_100009558(v16, (uint64_t)qword_10013C7C0);
  v17 = (void (*)(char *, _QWORD *, uint64_t))v5[2];
  v79 = a1;
  v74 = v17;
  v18 = ((uint64_t (*)(char *, _QWORD *, uint64_t))v17)(v15, a1, v4);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v81 = swift_slowAlloc(32, -1);
    v83 = v81;
    *(_DWORD *)v21 = 136315138;
    v80 = (uint64_t)(v21 + 4);
    v22 = sub_100008694(&qword_10013C9B8, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceLockState, (uint64_t)&protocol conformance descriptor for DeviceLockState);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v4, v22);
    v25 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v24;
    v82 = sub_10003A834(v23, v24, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
    a1 = (_QWORD *)v5[1];
    ((void (*)(char *, uint64_t))a1)(v15, v4);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Lock state changed to %s", v21, 0xCu);
    v33 = v81;
    swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    a1 = (_QWORD *)v5[1];
    ((void (*)(char *, uint64_t))a1)(v15, v4);
  }

  KeyPath = swift_getKeyPath(&unk_1000EA5E8);
  v35 = swift_getKeyPath(&unk_1000EA610);
  static Published.subscript.getter(&v83, v2, KeyPath, v35);
  swift_release(v35);
  swift_release(KeyPath);
  v36 = v83;
  v37 = v79;
  if (v83)
  {
    v38 = swift_getKeyPath(&unk_1000EA678);
    v39 = swift_getKeyPath(&unk_1000EA6A0);
    static Published.subscript.getter(v12, v36, v38, v39);
    swift_release(v39);
    swift_release(v38);
    v40 = sub_100008694(&qword_10013C9B0, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceLockState, (uint64_t)&protocol conformance descriptor for DeviceLockState);
    LOBYTE(v38) = dispatch thunk of static Equatable.== infix(_:_:)(v37, v12, v4, v40);
    ((void (*)(char *, uint64_t))a1)(v12, v4);
    if ((v38 & 1) == 0)
    {
      v41 = v2;
      v42 = v74;
      v74(v12, v37, v4);
      v43 = swift_getKeyPath(&unk_1000EA678);
      v44 = swift_getKeyPath(&unk_1000EA6A0);
      v45 = v75;
      v42(v75, v12, v4);
      v2 = v41;
      swift_retain(v36);
      static Published.subscript.setter(v45, v36, v43, v44);
      ((void (*)(char *, uint64_t))a1)(v12, v4);
    }
    swift_release(v36);
  }
  v46 = swift_getKeyPath(&unk_1000EA630);
  v47 = swift_getKeyPath(&unk_1000EA658);
  static Published.subscript.getter(&v83, v2, v46, v47);
  swift_release(v47);
  swift_release(v46);
  v48 = 0;
  v49 = v83;
  v50 = *(_QWORD *)(v83 + 64);
  v76 = v83 + 64;
  v51 = 1 << *(_BYTE *)(v83 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & v50;
  v77 = (unint64_t)(v51 + 63) >> 6;
  v2 = &unk_1000EA678;
  v5 = &qword_10013C9B0;
  v15 = (char *)&type metadata accessor for DeviceLockState;
  while (1)
  {
    if (v53)
    {
      v80 = (v53 - 1) & v53;
      v81 = v48;
      v54 = __clz(__rbit64(v53)) | (v48 << 6);
      goto LABEL_31;
    }
    v55 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v55 >= v77)
      goto LABEL_33;
    v56 = *(_QWORD *)(v76 + 8 * v55);
    v57 = v48 + 1;
    if (!v56)
    {
      v57 = v48 + 2;
      if (v48 + 2 >= v77)
        goto LABEL_33;
      v56 = *(_QWORD *)(v76 + 8 * v57);
      if (!v56)
      {
        v57 = v48 + 3;
        if (v48 + 3 >= v77)
          goto LABEL_33;
        v56 = *(_QWORD *)(v76 + 8 * v57);
        if (!v56)
        {
          v57 = v48 + 4;
          if (v48 + 4 >= v77)
            goto LABEL_33;
          v56 = *(_QWORD *)(v76 + 8 * v57);
          if (!v56)
            break;
        }
      }
    }
LABEL_30:
    v80 = (v56 - 1) & v56;
    v81 = v57;
    v54 = __clz(__rbit64(v56)) + (v57 << 6);
LABEL_31:
    v59 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v54);
    v60 = swift_getKeyPath(v2);
    v61 = swift_getKeyPath(&unk_1000EA6A0);
    v62 = swift_retain(v59);
    static Published.subscript.getter(v12, v62, v60, v61);
    swift_release(v61);
    swift_release(v60);
    v63 = sub_100008694(v5, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceLockState, (uint64_t)&protocol conformance descriptor for DeviceLockState);
    v64 = v79;
    LOBYTE(v60) = dispatch thunk of static Equatable.== infix(_:_:)(v79, v12, v4, v63);
    ((void (*)(char *, uint64_t))a1)(v12, v4);
    if ((v60 & 1) == 0)
    {
      v65 = v5;
      v66 = v49;
      v67 = (void (*)(_QWORD, _QWORD))a1;
      v68 = v74;
      v74(v12, v64, v4);
      v78 = swift_getKeyPath(v2);
      v69 = swift_getKeyPath(&unk_1000EA6A0);
      v70 = v2;
      v71 = v75;
      v68(v75, v12, v4);
      a1 = v67;
      v49 = v66;
      v5 = v65;
      v15 = (char *)&type metadata accessor for DeviceLockState;
      swift_retain(v59);
      v72 = v71;
      v2 = v70;
      static Published.subscript.setter(v72, v59, v78, v69);
      ((void (*)(char *, uint64_t))a1)(v12, v4);
    }
    swift_release(v59);
    v53 = v80;
    v48 = v81;
  }
  v58 = v48 + 5;
  if (v48 + 5 < v77)
  {
    v56 = *(_QWORD *)(v76 + 8 * v58);
    if (!v56)
    {
      while (1)
      {
        v57 = v58 + 1;
        if (__OFADD__(v58, 1))
          goto LABEL_35;
        if (v57 >= v77)
          goto LABEL_33;
        v56 = *(_QWORD *)(v76 + 8 * v57);
        ++v58;
        if (v56)
          goto LABEL_30;
      }
    }
    v57 = v48 + 5;
    goto LABEL_30;
  }
LABEL_33:
  *(_QWORD *)&result = swift_release(v49).n128_u64[0];
  return result;
}

uint64_t sub_10003A248@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EA5E8);
  v5 = swift_getKeyPath(&unk_1000EA610);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_10003A2C8(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EA5E8);
  v5 = swift_getKeyPath(&unk_1000EA610);
  v7 = v2;
  swift_retain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10003A348@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EA678);
  v5 = swift_getKeyPath(&unk_1000EA6A0);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_10003A3B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for DeviceLockState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v18 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13((char *)&v18 - v11, a1, v4);
  v14 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EA678);
  v16 = swift_getKeyPath(&unk_1000EA6A0);
  v13(v9, (uint64_t)v12, v4);
  swift_retain(v14);
  static Published.subscript.setter(v9, v14, KeyPath, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
}

uint64_t sub_10003A4BC(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_10003A4CC(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10003A500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100018F40;
  return v6();
}

uint64_t sub_10003A554(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100018F40;
  return v7();
}

uint64_t sub_10003A5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10000CC5C(a1, &qword_10013BCC0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1001257F8, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_10013CB90, v17);
}

uint64_t sub_10003A6F4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10003A758;
  return v6(a1);
}

uint64_t sub_10003A758()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003A7A4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10003A7C4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  _TtC9AirDropUI33AirDropTransferSessionsController *v8;
  uint64_t v9;
  uint64_t v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a4();
  v8 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v7;
  v9 = sub_10003A834(v6, v7, a3);
  v10 = *a1 + 8;
  v18 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
  swift_bridgeObjectRelease(v8, v11, v12, v13, v14, v15, v16, v17);
  *a1 = v10;
}

uint64_t sub_10003A834(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10003A904(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10003AE84((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10003AE84((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100009070(v12);
  return v7;
}

uint64_t sub_10003A904(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10003AABC(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003AABC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10003AB50(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10003AD28(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10003AD28(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10003AB50(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10003ACC4(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10003ACC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100008F88(&qword_10013C9C0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10003AD28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008F88(&qword_10013C9C0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_10003AE74(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_10003AE84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10003AEC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10003B1E4(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&unk_10013CAF0, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10003AF58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10003B104(a1, a2, v5);
}

unint64_t sub_10003AFBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v6 = sub_100008694((unint64_t *)&unk_10013CA30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10003B1E4(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (unint64_t *)&unk_10013CA40, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

unint64_t sub_10003B054(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10003B314(a1, v4);
}

unint64_t sub_10003B084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  Swift::Int v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v16[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v16, v3);
  String.hash(into:)(v16, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  return sub_10003B3D8(a1, v7);
}

unint64_t sub_10003B104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10003B1E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  unint64_t *v23;
  uint64_t v24;

  v23 = a4;
  v24 = a5;
  v6 = v5;
  v21 = a1;
  v22 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v21 - v11;
  v13 = -1 << *(_BYTE *)(v6 + 32);
  v14 = a2 & ~v13;
  if (((*(_QWORD *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    v16 = *(_QWORD *)(v9 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v17(v12, *(_QWORD *)(v6 + 48) + v16 * v14, v8);
      v18 = sub_100008694(v23, v22, v24);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v21, v8, v18);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_10003B314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000413A0(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000413DC((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10003B3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_10003B54C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10003AF58(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10003C0BC();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_10003B7F0(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10003B618(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10003AFBC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10003C270();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_10003B9C4(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10003B6F0(uint64_t a1)
{
  return sub_10003B708(a1, (uint64_t *)&unk_10013CB00);
}

uint64_t sub_10003B6FC(uint64_t a1)
{
  return sub_10003B708(a1, &qword_10013F1B0);
}

uint64_t sub_10003B708(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  unint64_t v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;

  v4 = v2;
  v6 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v4;
  swift_bridgeObjectRetain(*v4);
  v7 = sub_10003AEC0(a1);
  LOBYTE(a1) = (_BYTE)v8;
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v16 = *v4;
  v29 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10003C910(a2);
    v16 = (uint64_t)v29;
  }
  v17 = *(_QWORD *)(v16 + 48);
  v18 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v7, v18);
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v7);
  sub_10003BC64(v7, v16);
  v20 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v4;
  *v4 = v16;
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  return v19;
}

unint64_t sub_10003B7F0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10003B9C4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4, v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 64;
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    v12 = ~v10;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v10);
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v38 = (result + 1) & v12;
      v13 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v14 = v12;
      do
      {
        v15 = v9;
        v16 = v13;
        v17 = v13 * v11;
        v18 = v14;
        v37(v8, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
        v19 = *(_QWORD *)(a2 + 40);
        v20 = sub_100008694((unint64_t *)&unk_10013CA30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
        v14 = v18;
        v22 = v21 & v18;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            result = v25 + v16 * a1;
            v26 = v25 + v17;
            v9 = v15;
            if (v16 * a1 < v17 || (v13 = v16, result >= v26 + v16))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v26, 1, v4);
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = (_QWORD *)(v27 + 8 * a1);
            v29 = (_QWORD *)(v27 + 8 * v11);
            if (a1 != v11 || (a1 = v11, v28 >= v29 + 1))
            {
              *v28 = *v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v9 = v15;
        v13 = v16;
LABEL_5:
        v11 = (v11 + 1) & v14;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10003BC64(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v39 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v40 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v38(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        v19 = *(_QWORD *)(a2 + 40);
        v20 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        v14 = v18;
        v22 = v21 & v18;
        if (a1 >= (uint64_t)v39)
        {
          if (v22 >= v39 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            v26 = v25 + v16 * a1;
            v27 = v25 + v17;
            v8 = v15;
            if (v16 * a1 < v17 || (v13 = v16, v26 >= v27 + v16))
            {
              swift_arrayInitWithTakeFrontToBack(v26, v27, 1, v4);
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront(v26);
              goto LABEL_21;
            }
            v28 = *(_QWORD *)(a2 + 56);
            v29 = (_QWORD *)(v28 + 8 * a1);
            v30 = (_QWORD *)(v28 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v29 >= v30 + 1))
            {
              *v29 = *v30;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v39 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10003BF08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100008F88((uint64_t *)&unk_10013CD90);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_unknownObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10003C0BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100008F88((uint64_t *)&unk_10013F2A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10003C270()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008F88((uint64_t *)&unk_10013F320);
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    swift_release(v6);
    *v25 = v8;
    return;
  }
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    swift_retain(v20);
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10003C4A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008F88((uint64_t *)&unk_10013F170);
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    swift_release(v6);
    *v25 = v8;
    return;
  }
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v20);
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10003C6D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008F88(&qword_10013CB10);
  v26 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    swift_release(v6);
    *v26 = v8;
    return;
  }
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v27 = v6 + 64;
  v28 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v17 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(void **)(*(_QWORD *)(v6 + 56) + v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    v21 = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10003C8F8()
{
  sub_10003C910((uint64_t *)&unk_10013CB00);
}

void sub_10003C904()
{
  sub_10003C910(&qword_10013F1B0);
}

void sub_10003C910(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008F88(a1);
  v27 = v1;
  v8 = *v1;
  v9 = static _DictionaryStorage.copy(original:)(*v1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    swift_release(v8);
    *v27 = v10;
    return;
  }
  v11 = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)v11 >= v8 + 64 + 8 * v12)
    memmove(v11, (const void *)(v8 + 64), 8 * v12);
  v28 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v4 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v3);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v3);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
    swift_retain(v22);
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10003CB40(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  char *v4;
  uint64_t v5;
  char *v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10003E774(v2);
    *a1 = v2;
  }
  v4 = *(char **)(v2 + 16);
  v7[0] = (char *)(v2 + 32);
  v7[1] = v4;
  sub_10003CBB8(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_10003CBB8(char **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  const char *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char *v88;
  char v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  _TtC9AirDropUI33AirDropTransferSessionsController *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  int v106;
  _QWORD *v107;
  uint64_t v108;
  Swift::Int v109;
  unsigned int (*v110)(uint64_t, uint64_t, uint64_t);
  void (*v111)(char *, uint64_t, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  void (*v118)(char *, uint64_t);
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  void (*v127)(char *, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  char *v132;
  _QWORD *v133;
  void (*v134)(char *, uint64_t);
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  Swift::Int v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char *v157;
  char *v158;
  char v159;
  void (*v160)(char *, uint64_t);
  char *v161;
  unint64_t v162;
  unint64_t v163;
  unsigned __int8 *airDropClient;
  unsigned __int8 *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  unsigned __int8 *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  unint64_t v178;
  unsigned __int8 *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t v186;
  BOOL v187;
  uint64_t v188;
  char v189;
  unsigned __int8 *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _TtC9AirDropUI33AirDropTransferSessionsController *v206;
  unsigned __int8 *v207;
  uint64_t v208;
  unsigned __int8 *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _TtC9AirDropUI33AirDropTransferSessionsController *v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  unsigned __int8 *v225;
  unint64_t v226;
  SEL v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  char **v240;
  Swift::Int v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  _TtC9AirDropUI33AirDropTransferSessionsController *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t (*v255)(uint64_t, uint64_t, uint64_t);
  char *v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  char v263[24];
  char v264[8];
  char v265[8];
  char v266[8];
  char v267[8];
  char v268[8];
  unint64_t v269;

  v2 = v1;
  v4 = sub_100008F88(&qword_10013CD20);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v234 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v6, v9);
  v259 = (uint64_t)&v234 - v11;
  v13 = __chkstk_darwin(v10, v12);
  v254 = (uint64_t)&v234 - v14;
  v16 = __chkstk_darwin(v13, v15);
  v256 = (char *)&v234 - v17;
  v19 = __chkstk_darwin(v16, v18);
  v243 = (uint64_t)&v234 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v246 = (uint64_t)&v234 - v23;
  v25 = __chkstk_darwin(v22, v24);
  v27 = (char *)&v234 - v26;
  __chkstk_darwin(v25, v28);
  v30 = (char *)&v234 - v29;
  v31 = type metadata accessor for Date(0);
  v260 = *(_QWORD *)(v31 - 8);
  v33 = __chkstk_darwin(v31, v32);
  v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v234 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = __chkstk_darwin(v33, v35);
  v258 = (char *)&v234 - v37;
  v39 = __chkstk_darwin(v36, v38);
  v253 = (char *)&v234 - v40;
  v42 = __chkstk_darwin(v39, v41);
  v257 = (char *)&v234 - v43;
  v45 = __chkstk_darwin(v42, v44);
  v242 = (char *)&v234 - v46;
  v48 = __chkstk_darwin(v45, v47);
  v50 = (char *)&v234 - v49;
  v52 = __chkstk_darwin(v48, v51);
  v54 = (char *)&v234 - v53;
  __chkstk_darwin(v52, v55);
  v239 = (char *)&v234 - v56;
  v240 = a1;
  v57 = (Swift::Int)a1[1];
  v241 = _minimumMergeRunLength(_:)(v57);
  v250 = (char *)v57;
  if (v241 < v57)
  {
    if (v57 >= 0)
      v65 = v57;
    else
      v65 = v57 + 1;
    if (v57 < -1)
      goto LABEL_176;
    v234 = v54;
    v245 = v50;
    v238 = v30;
    v237 = v27;
    if (v57 < 2)
    {
      v94 = (_TtC9AirDropUI33AirDropTransferSessionsController *)_swiftEmptyArrayStorage;
      v269 = (unint64_t)_swiftEmptyArrayStorage;
      v251 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
      v69 = (_QWORD *)v260;
      if (v57 != 1)
      {
        v97 = _swiftEmptyArrayStorage[2];
        if (v97 < 2)
          goto LABEL_144;
        goto LABEL_132;
      }
    }
    else
    {
      v66 = v65 >> 1;
      v67 = type metadata accessor for AirDropTransferSession(0);
      v68 = static Array._allocateBufferUninitialized(minimumCapacity:)(v66, v67);
      *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) = v66;
      v251 = (char *)((v68 & 0xFFFFFFFFFFFFFF8) + 32);
      v269 = v68;
      v69 = (_QWORD *)v260;
    }
    v262 = v31;
    v252 = v1;
    v95 = 0;
    v96 = *v240;
    v236 = (uint64_t)(*v240 + 16);
    v235 = v96 - 8;
    v94 = (_TtC9AirDropUI33AirDropTransferSessionsController *)_swiftEmptyArrayStorage;
    v258 = v96;
LABEL_28:
    v98 = v95 + 1;
    v247 = v94;
    v248 = v95;
    if (v95 + 1 >= v57)
    {
      v109 = v241;
      goto LABEL_58;
    }
    v99 = *(_QWORD *)&v96[8 * v98];
    v259 = *(_QWORD *)&v96[8 * v95];
    v100 = v69;
    v101 = v99 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
    swift_beginAccess(v99 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v266, 0, 0);
    v102 = v101;
    v103 = (uint64_t)v238;
    sub_10000CC18(v102, (uint64_t)v238, &qword_10013CD20);
    v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v100[6];
    v105 = v262;
    v106 = v104(v103, 1, v262);
    v255 = v104;
    if (v106 == 1)
    {
      v107 = v100;
      swift_retain(v99);
      v108 = v259;
      swift_retain(v259);
    }
    else
    {
      v110 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v104;
      v111 = (void (*)(char *, uint64_t, uint64_t))v100[4];
      v112 = v239;
      v111(v239, v103, v105);
      v113 = v259 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v259 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v263, 0, 0);
      v114 = v113;
      v103 = (uint64_t)v237;
      sub_10000CC18(v114, (uint64_t)v237, &qword_10013CD20);
      if (v110(v103, 1, v105) != 1)
      {
        v116 = v234;
        v111(v234, v103, v105);
        swift_retain(v99);
        v108 = v259;
        swift_retain(v259);
        LODWORD(v261) = static Date.< infix(_:_:)(v112, v116);
        v117 = v112;
        v107 = v100;
        v118 = (void (*)(char *, uint64_t))v100[1];
        v118(v116, v105);
        v118(v117, v105);
        v57 = (Swift::Int)v250;
        v95 = v248;
        v94 = v247;
        goto LABEL_36;
      }
      swift_retain(v99);
      v108 = v259;
      swift_retain(v259);
      v115 = v112;
      v107 = v100;
      ((void (*)(char *, uint64_t))v100[1])(v115, v105);
      v94 = v247;
    }
    sub_10000CC5C(v103, &qword_10013CD20);
    LODWORD(v261) = static Date.< infix(_:_:)(v99 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v108 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
    v57 = (Swift::Int)v250;
    v95 = v248;
LABEL_36:
    swift_release(v99);
    swift_release(v108);
    v98 = v95 + 2;
    if (v95 + 2 >= v57)
      goto LABEL_49;
    v119 = (uint64_t *)(v236 + 8 * v95);
    while (1)
    {
      v259 = v98;
      v121 = *(v119 - 1);
      v120 = *v119;
      v122 = *v119 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v122, v265, 0, 0);
      v123 = v122;
      v124 = v246;
      sub_10000CC18(v123, v246, &qword_10013CD20);
      v125 = v262;
      v126 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v255;
      if (v255(v124, 1, v262) == 1)
        break;
      v127 = (void (*)(char *, uint64_t, uint64_t))v107[4];
      v127(v245, v124, v125);
      v128 = v121 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v121 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v264, 0, 0);
      v129 = v128;
      v124 = v243;
      sub_10000CC18(v129, v243, &qword_10013CD20);
      if (v126(v124, 1, v125) == 1)
      {
        swift_retain(v120);
        swift_retain(v121);
        v107 = (_QWORD *)v260;
        (*(void (**)(char *, uint64_t))(v260 + 8))(v245, v125);
        goto LABEL_42;
      }
      v131 = v242;
      v127(v242, v124, v125);
      swift_retain(v120);
      swift_retain(v121);
      v132 = v245;
      v130 = static Date.< infix(_:_:)(v245, v131);
      v133 = (_QWORD *)v260;
      v134 = *(void (**)(char *, uint64_t))(v260 + 8);
      v134(v131, v125);
      v134(v132, v125);
      v107 = v133;
      v94 = v247;
LABEL_44:
      swift_release(v120);
      swift_release(v121);
      if (((v261 ^ v130) & 1) != 0)
      {
        v57 = (Swift::Int)v250;
        v98 = v259;
LABEL_48:
        v95 = v248;
LABEL_49:
        v109 = v241;
        v96 = v258;
        if ((v261 & 1) != 0)
        {
          if (v98 < v95)
            goto LABEL_168;
          if (v95 < v98)
          {
            v135 = &v235[8 * v98];
            v136 = v98;
            v137 = v95;
            v138 = &v258[8 * v95];
            do
            {
              if (v137 != --v136)
              {
                if (!v96)
                  goto LABEL_174;
                v139 = *(_QWORD *)v138;
                *(_QWORD *)v138 = *(_QWORD *)v135;
                *(_QWORD *)v135 = v139;
              }
              ++v137;
              v135 -= 8;
              v138 += 8;
            }
            while (v137 < v136);
          }
        }
LABEL_58:
        if (v98 >= v57)
          goto LABEL_82;
        if (__OFSUB__(v98, v95))
          goto LABEL_166;
        if (v98 - v95 >= v109)
          goto LABEL_82;
        if (__OFADD__(v95, v109))
          goto LABEL_169;
        if (v95 + v109 >= v57)
          v140 = v57;
        else
          v140 = v95 + v109;
        if (v140 >= v95)
        {
          if (v98 == v140)
            goto LABEL_82;
          v141 = &v235[8 * v98];
          v244 = v140;
          while (2)
          {
            v142 = *(_QWORD *)&v96[8 * v98];
            v143 = v248;
            v249 = v141;
            v259 = v98;
            while (2)
            {
              v261 = *(char **)v141;
              v144 = v142 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
              swift_beginAccess(v142 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v268, 0, 0);
              v145 = v144;
              v146 = (uint64_t)v256;
              sub_10000CC18(v145, (uint64_t)v256, &qword_10013CD20);
              v147 = v260;
              v148 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v260 + 48);
              v149 = v262;
              if (v148(v146, 1, v262) == 1)
              {
                swift_retain(v142);
                v150 = v261;
                swift_retain(v261);
                v151 = v146;
LABEL_75:
                v155 = v259;
                sub_10000CC5C(v151, &qword_10013CD20);
                v156 = static Date.< infix(_:_:)(v142 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, &v150[OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime]);
                swift_release(v142);
                swift_release(v150);
                if ((v156 & 1) == 0)
                  break;
                goto LABEL_78;
              }
              v255 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 32);
              v255((uint64_t)v257, v146, v149);
              v152 = (uint64_t)&v261[OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime];
              swift_beginAccess(&v261[OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime], v267, 0, 0);
              v153 = v152;
              v154 = v254;
              sub_10000CC18(v153, v254, &qword_10013CD20);
              if (v148(v154, 1, v149) == 1)
              {
                swift_retain(v142);
                v150 = v261;
                swift_retain(v261);
                (*(void (**)(char *, uint64_t))(v147 + 8))(v257, v149);
                v151 = v154;
                goto LABEL_75;
              }
              v157 = v253;
              v255((uint64_t)v253, v154, v149);
              swift_retain(v142);
              v158 = v261;
              swift_retain(v261);
              v159 = static Date.< infix(_:_:)(v257, v157);
              v160 = *(void (**)(char *, uint64_t))(v147 + 8);
              v160(v157, v149);
              v160(v257, v149);
              swift_release(v142);
              swift_release(v158);
              v155 = v259;
              if ((v159 & 1) != 0)
              {
LABEL_78:
                v96 = v258;
                if (!v258)
                  goto LABEL_172;
                v161 = *(char **)v141;
                v142 = *((_QWORD *)v141 + 1);
                *(_QWORD *)v141 = v142;
                *((_QWORD *)v141 + 1) = v161;
                v141 -= 8;
                if (v155 == ++v143)
                  goto LABEL_69;
                continue;
              }
              break;
            }
            v96 = v258;
LABEL_69:
            v98 = v155 + 1;
            v141 = v249 + 8;
            if (v98 != v244)
              continue;
            break;
          }
          v98 = v244;
          v94 = v247;
          v95 = v248;
LABEL_82:
          if (v98 < v95)
            goto LABEL_161;
          v95 = v98;
          if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
            v94 = sub_10003E5C0(0, *(_QWORD *)v94->connection + 1, (void *)1, v94, v61, v62, v63, v64);
          v163 = *(_QWORD *)v94->connection;
          v162 = *(_QWORD *)v94->airdropClient;
          v97 = v163 + 1;
          v96 = v258;
          if (v163 >= v162 >> 1)
          {
            v213 = sub_10003E5C0((_TtC9AirDropUI33AirDropTransferSessionsController *)(v162 > 1), v163 + 1, (void *)1, v94, v61, v62, v63, v64);
            v96 = v258;
            v94 = v213;
          }
          *(_QWORD *)v94->connection = v97;
          airDropClient = v94->airDropClient;
          v165 = &v94->airDropClient[16 * v163];
          *(_QWORD *)v165 = v248;
          *((_QWORD *)v165 + 1) = v95;
          if (v163)
          {
            while (2)
            {
              v166 = v97 - 1;
              if (v97 >= 4)
              {
                v171 = &airDropClient[16 * v97];
                v172 = *((_QWORD *)v171 - 8);
                v173 = *((_QWORD *)v171 - 7);
                v177 = __OFSUB__(v173, v172);
                v174 = v173 - v172;
                if (v177)
                  goto LABEL_150;
                v176 = *((_QWORD *)v171 - 6);
                v175 = *((_QWORD *)v171 - 5);
                v177 = __OFSUB__(v175, v176);
                v169 = v175 - v176;
                v170 = v177;
                if (v177)
                  goto LABEL_151;
                v178 = v97 - 2;
                v179 = &airDropClient[16 * v97 - 32];
                v181 = *(_QWORD *)v179;
                v180 = *((_QWORD *)v179 + 1);
                v177 = __OFSUB__(v180, v181);
                v182 = v180 - v181;
                if (v177)
                  goto LABEL_153;
                v177 = __OFADD__(v169, v182);
                v183 = v169 + v182;
                if (v177)
                  goto LABEL_156;
                if (v183 >= v174)
                {
                  v201 = &airDropClient[16 * v166];
                  v203 = *(_QWORD *)v201;
                  v202 = *((_QWORD *)v201 + 1);
                  v177 = __OFSUB__(v202, v203);
                  v204 = v202 - v203;
                  if (v177)
                    goto LABEL_160;
                  v194 = v169 < v204;
                }
                else
                {
LABEL_101:
                  if ((v170 & 1) != 0)
                    goto LABEL_152;
                  v178 = v97 - 2;
                  v184 = &airDropClient[16 * v97 - 32];
                  v186 = *(_QWORD *)v184;
                  v185 = *((_QWORD *)v184 + 1);
                  v187 = __OFSUB__(v185, v186);
                  v188 = v185 - v186;
                  v189 = v187;
                  if (v187)
                    goto LABEL_155;
                  v190 = &airDropClient[16 * v166];
                  v192 = *(_QWORD *)v190;
                  v191 = *((_QWORD *)v190 + 1);
                  v177 = __OFSUB__(v191, v192);
                  v193 = v191 - v192;
                  if (v177)
                    goto LABEL_158;
                  if (__OFADD__(v188, v193))
                    goto LABEL_159;
                  if (v188 + v193 < v169)
                    goto LABEL_113;
                  v194 = v169 < v193;
                }
                if (v194)
                  v166 = v178;
              }
              else
              {
                if (v97 == 3)
                {
                  v168 = *(_QWORD *)v94->airDropClient;
                  v167 = *(_QWORD *)v94->transfersMonitorTask;
                  v177 = __OFSUB__(v167, v168);
                  v169 = v167 - v168;
                  v170 = v177;
                  goto LABEL_101;
                }
                v195 = *(_QWORD *)v94->airDropClient;
                v196 = *(_QWORD *)v94->transfersMonitorTask;
                v177 = __OFSUB__(v196, v195);
                v188 = v196 - v195;
                v189 = v177;
LABEL_113:
                if ((v189 & 1) != 0)
                  goto LABEL_154;
                v197 = &airDropClient[16 * v166];
                v199 = *(_QWORD *)v197;
                v198 = *((_QWORD *)v197 + 1);
                v177 = __OFSUB__(v198, v199);
                v200 = v198 - v199;
                if (v177)
                  goto LABEL_157;
                if (v200 < v188)
                  goto LABEL_27;
              }
              v205 = v166 - 1;
              if (v166 - 1 >= v97)
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
                goto LABEL_170;
              }
              if (!v96)
                goto LABEL_173;
              v206 = v94;
              v207 = &airDropClient[16 * v205];
              v208 = *(_QWORD *)v207;
              v209 = &airDropClient[16 * v166];
              v210 = *((_QWORD *)v209 + 1);
              v211 = v252;
              sub_10003DE18(&v96[8 * *(_QWORD *)v207], &v96[8 * *(_QWORD *)v209], (unint64_t)&v96[8 * v210], v251);
              v252 = v211;
              if (v211)
              {
                v94 = v206;
                goto LABEL_144;
              }
              if (v210 < v208)
                goto LABEL_147;
              if (v166 > *(_QWORD *)v206->connection)
                goto LABEL_148;
              *(_QWORD *)v207 = v208;
              *(_QWORD *)&airDropClient[16 * v205 + 8] = v210;
              v212 = *(_QWORD *)v206->connection;
              if (v166 >= v212)
                goto LABEL_149;
              v94 = v206;
              v97 = v212 - 1;
              memmove(&airDropClient[16 * v166], v209 + 16, 16 * (v212 - 1 - v166));
              *(_QWORD *)v206->connection = v212 - 1;
              v96 = v258;
              if (v212 <= 2)
                goto LABEL_27;
              continue;
            }
          }
          v97 = 1;
LABEL_27:
          v57 = (Swift::Int)v250;
          v69 = (_QWORD *)v260;
          if (v95 >= (uint64_t)v250)
          {
            v2 = v252;
            if (v97 < 2)
            {
LABEL_144:
              swift_bridgeObjectRelease(v94, v58, v59, v60, v61, v62, v63, v64);
              *(_QWORD *)((v269 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
              specialized Array._endMutation()();
              swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v269, v227, v228, v229, v230, v231, v232, v233);
              return;
            }
LABEL_132:
            v214 = *v240;
            while (1)
            {
              v215 = v97 - 2;
              if (v97 < 2)
                goto LABEL_162;
              if (!v214)
                goto LABEL_175;
              v216 = *(_QWORD *)&v94->airDropClient[16 * v215];
              v217 = *(_QWORD *)&v94->airdropClient[16 * v97];
              sub_10003DE18(&v214[8 * v216], &v214[8 * *(_QWORD *)&v94->connection[16 * v97]], (unint64_t)&v214[8 * v217], v251);
              if (v2)
                goto LABEL_144;
              if (v217 < v216)
                goto LABEL_163;
              if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
                v94 = sub_10003E760((uint64_t)v94, v218, v219, v220, v221, v222, v223, v224);
              if (v215 >= *(_QWORD *)v94->connection)
                goto LABEL_164;
              v225 = &v94->airDropClient[16 * v215];
              *(_QWORD *)v225 = v216;
              *((_QWORD *)v225 + 1) = v217;
              v226 = *(_QWORD *)v94->connection;
              if (v97 > v226)
                goto LABEL_165;
              memmove(&v94->connection[16 * v97], &v94->airDropClient[16 * v97], 16 * (v226 - v97));
              *(_QWORD *)v94->connection = v226 - 1;
              v97 = v226 - 1;
              if (v226 <= 2)
                goto LABEL_144;
            }
          }
          goto LABEL_28;
        }
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
        __break(1u);
        return;
      }
      v98 = v259 + 1;
      ++v119;
      v57 = (Swift::Int)v250;
      if (v250 == (char *)(v259 + 1))
      {
        v98 = (uint64_t)v250;
        goto LABEL_48;
      }
    }
    swift_retain(v120);
    swift_retain(v121);
LABEL_42:
    v94 = v247;
    sub_10000CC5C(v124, &qword_10013CD20);
    v130 = static Date.< infix(_:_:)(v120 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v121 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
    goto LABEL_44;
  }
  if (v57 < 0)
    goto LABEL_167;
  if ((unint64_t)v57 >= 2)
  {
    v262 = v31;
    v256 = v8;
    v252 = v1;
    v70 = *v240;
    v71 = -1;
    v72 = 1;
    v261 = *v240;
    v73 = v260;
    do
    {
      v253 = (char *)v72;
      v74 = *(_QWORD *)&v261[8 * v72];
      v254 = v71;
      v251 = v70;
      do
      {
        v75 = *(_QWORD *)v70;
        v76 = v74 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
        swift_beginAccess(v74 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v268, 0, 0);
        v77 = v76;
        v78 = v259;
        sub_10000CC18(v77, v259, &qword_10013CD20);
        v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
        v80 = v262;
        if (v79(v78, 1, v262) == 1)
        {
          swift_retain(v74);
          swift_retain(v75);
          goto LABEL_17;
        }
        v81 = *(char **)(v73 + 32);
        v82 = v258;
        v257 = v81;
        ((void (*)(char *, uint64_t, uint64_t))v81)(v258, v78, v80);
        v83 = v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
        swift_beginAccess(v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v267, 0, 0);
        v84 = v83;
        v78 = (uint64_t)v256;
        sub_10000CC18(v84, (uint64_t)v256, &qword_10013CD20);
        if (v79(v78, 1, v80) == 1)
        {
          swift_retain(v74);
          swift_retain(v75);
          v85 = v260;
          (*(void (**)(char *, uint64_t))(v260 + 8))(v82, v80);
          v73 = v85;
LABEL_17:
          sub_10000CC5C(v78, &qword_10013CD20);
          v86 = static Date.< infix(_:_:)(v74 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
          swift_release(v74);
          swift_release(v75);
          if ((v86 & 1) == 0)
            break;
          goto LABEL_20;
        }
        v87 = v75;
        v88 = (char *)v255;
        ((void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v257)(v255, v78, v80);
        swift_retain(v74);
        swift_retain(v87);
        v89 = static Date.< infix(_:_:)(v258, v88);
        v90 = v260;
        v91 = *(void (**)(char *, uint64_t))(v260 + 8);
        v91(v88, v80);
        v91(v258, v80);
        swift_release(v74);
        swift_release(v87);
        v73 = v90;
        if ((v89 & 1) == 0)
          break;
LABEL_20:
        if (!v261)
          goto LABEL_171;
        v92 = *(_QWORD *)v70;
        v74 = *((_QWORD *)v70 + 1);
        *(_QWORD *)v70 = v74;
        *((_QWORD *)v70 + 1) = v92;
        v70 -= 8;
      }
      while (!__CFADD__(v71++, 1));
      v72 = (uint64_t)(v253 + 1);
      v70 = v251 + 8;
      v71 = v254 - 1;
    }
    while (v253 + 1 != v250);
  }
}

uint64_t sub_10003DE18(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  char *v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char v83;
  _BYTE *v84;
  _BYTE *v85;
  void (*v86)(_BYTE *, uint64_t);
  char *v87;
  char *v88;
  unint64_t v89;
  uint64_t result;
  _BYTE v91[16];
  _BYTE *v92;
  char *v93;
  _BYTE *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  _BYTE v105[24];
  _BYTE v106[24];
  char *v107;
  char *v108;
  char *v109;

  v8 = sub_100008F88(&qword_10013CD20);
  v10 = __chkstk_darwin(v8, v9);
  v12 = &v91[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v10, v13);
  v96 = &v91[-v15];
  v17 = __chkstk_darwin(v14, v16);
  v19 = &v91[-v18];
  __chkstk_darwin(v17, v20);
  v98 = &v91[-v21];
  v102 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v102 - 8);
  v23 = __chkstk_darwin(v102, v22);
  v92 = &v91[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = __chkstk_darwin(v23, v25);
  v94 = &v91[-v27];
  v29 = __chkstk_darwin(v26, v28);
  v93 = &v91[-v30];
  __chkstk_darwin(v29, v31);
  v33 = a2 - a1;
  v34 = a2 - a1 + 7;
  if (a2 - a1 >= 0)
    v34 = a2 - a1;
  v35 = v34 >> 3;
  v100 = a3;
  v101 = a4;
  v36 = a3 - (_QWORD)a2;
  v37 = v36 / 8;
  v109 = a1;
  v108 = a4;
  if (v34 >> 3 >= v36 / 8)
  {
    v93 = v12;
    if (v36 < -7)
      goto LABEL_54;
    v63 = v101;
    if (v101 != a2 || &a2[8 * v37] <= v101)
      memmove(v101, a2, 8 * v37);
    v64 = &v63[8 * v37];
    v107 = v64;
    v109 = a2;
    v65 = v36 < 8;
    v66 = v100;
    if (v65 || a1 >= a2)
    {
LABEL_53:
      sub_10003E6B8((void **)&v109, (const void **)&v108, &v107);
      return 1;
    }
    v67 = a2;
    v103 = a1;
    while (1)
    {
      v104 = a2;
      v98 = v64;
      v68 = *((_QWORD *)v64 - 1);
      v97 = v64 - 8;
      v70 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      v69 = v70;
      v71 = v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v106, 0, 0);
      v72 = v71;
      v73 = v96;
      sub_10000CC18(v72, (uint64_t)v96, &qword_10013CD20);
      v74 = v99;
      v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
      v76 = v102;
      if (v75(v73, 1, v102) == 1)
        break;
      v100 = v66;
      v79 = v94;
      v95 = *(char **)(v74 + 32);
      ((void (*)(_BYTE *, char *, uint64_t))v95)(v94, v73, v76);
      v80 = v69 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v69 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v105, 0, 0);
      v81 = v80;
      v82 = v93;
      sub_10000CC18(v81, (uint64_t)v93, &qword_10013CD20);
      if (v75(v82, 1, v76) == 1)
      {
        swift_retain(v68);
        swift_retain(v69);
        (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v79, v76);
        v77 = (uint64_t)v82;
        v66 = v100;
        v78 = v101;
        goto LABEL_41;
      }
      v84 = v79;
      v85 = v92;
      ((void (*)(_BYTE *, char *, uint64_t))v95)(v92, v82, v76);
      swift_retain(v68);
      swift_retain(v69);
      v83 = static Date.< infix(_:_:)(v84, v85);
      v86 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
      v86(v85, v76);
      v86(v84, v76);
      swift_release(v68);
      swift_release(v69);
      v66 = v100;
      v78 = v101;
LABEL_43:
      v87 = (char *)(v66 - 8);
      v89 = (unint64_t)v103;
      v88 = v104;
      if ((v83 & 1) != 0)
      {
        if ((char *)v66 != v104 || v87 >= v104)
          *(_QWORD *)v87 = *(_QWORD *)v67;
        v109 = v67;
        v64 = v98;
LABEL_35:
        if (v64 <= v78)
          goto LABEL_53;
        goto LABEL_36;
      }
      v64 = v97;
      v107 = v97;
      if (v66 < (unint64_t)v98 || v87 >= v98)
      {
        *(_QWORD *)v87 = *(_QWORD *)v97;
        v67 = v88;
        goto LABEL_35;
      }
      if ((char *)v66 != v98)
        *(_QWORD *)v87 = *(_QWORD *)v97;
      v67 = v88;
      if (v64 <= v78)
        goto LABEL_53;
LABEL_36:
      a2 = v67;
      v66 -= 8;
      if ((unint64_t)v67 <= v89)
        goto LABEL_53;
    }
    swift_retain(v68);
    swift_retain(v69);
    v77 = (uint64_t)v73;
    v78 = v101;
LABEL_41:
    sub_10000CC5C(v77, &qword_10013CD20);
    v83 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v69 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
    swift_release(v68);
    swift_release(v69);
    goto LABEL_43;
  }
  v97 = &v91[-v32];
  if (v33 >= -7)
  {
    v38 = v101;
    if (v101 != a1 || &a1[8 * v35] <= v101)
      memmove(v101, a1, 8 * v35);
    v96 = &v38[8 * v35];
    v107 = v96;
    if (v33 >= 8 && (unint64_t)a2 < v100)
    {
      v39 = v38;
      v95 = v19;
      while (1)
      {
        v103 = a1;
        v104 = a2;
        v40 = *(_QWORD *)a2;
        v41 = *(_QWORD *)v39;
        v42 = *(_QWORD *)a2 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
        swift_beginAccess(v42, v106, 0, 0);
        v43 = v42;
        v44 = v98;
        sub_10000CC18(v43, (uint64_t)v98, &qword_10013CD20);
        v45 = v99;
        v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
        v47 = v102;
        if (v46(v44, 1, v102) == 1)
          break;
        v101 = v39;
        v50 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
        v50(v97, v44, v47);
        v51 = v41 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
        swift_beginAccess(v41 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v105, 0, 0);
        v52 = v51;
        v53 = v102;
        v54 = v95;
        sub_10000CC18(v52, (uint64_t)v95, &qword_10013CD20);
        if (v46(v54, 1, v53) == 1)
        {
          swift_retain(v40);
          swift_retain(v41);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v97, v53);
          v48 = (uint64_t)v54;
          v49 = v100;
          v39 = v101;
LABEL_15:
          sub_10000CC5C(v48, &qword_10013CD20);
          v55 = static Date.< infix(_:_:)(v40 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v41 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
          swift_release(v40);
          swift_release(v41);
          v57 = v103;
          v56 = v104;
          if ((v55 & 1) == 0)
            goto LABEL_21;
          goto LABEL_16;
        }
        v59 = v93;
        v50(v93, v54, v53);
        swift_retain(v40);
        swift_retain(v41);
        v60 = v97;
        v61 = static Date.< infix(_:_:)(v97, v59);
        v62 = *(void (**)(_BYTE *, uint64_t))(v45 + 8);
        v62(v59, v53);
        v62(v60, v53);
        swift_release(v40);
        swift_release(v41);
        v49 = v100;
        v39 = v101;
        v57 = v103;
        v56 = v104;
        if ((v61 & 1) == 0)
        {
LABEL_21:
          if (v57 != v39)
            *(_QWORD *)v57 = *(_QWORD *)v39;
          v39 += 8;
          v108 = v39;
          v58 = v56;
          goto LABEL_24;
        }
LABEL_16:
        v58 = v56 + 8;
        if (v57 < v56 || v57 >= v58 || v57 != v56)
          *(_QWORD *)v57 = *(_QWORD *)v56;
LABEL_24:
        a1 = v57 + 8;
        v109 = a1;
        if (v39 < v96)
        {
          a2 = v58;
          if ((unint64_t)v58 < v49)
            continue;
        }
        goto LABEL_53;
      }
      swift_retain(v40);
      swift_retain(v41);
      v48 = (uint64_t)v44;
      v49 = v100;
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_54:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_TtC9AirDropUI33AirDropTransferSessionsController *sub_10003E5C0(_TtC9AirDropUI33AirDropTransferSessionsController *result, int64_t a2, void *a3, _TtC9AirDropUI33AirDropTransferSessionsController *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  int64_t v16;
  uint64_t v17;
  unsigned __int8 *airDropClient;
  unsigned __int8 *v19;

  v9 = (char)result;
  if ((a3 & 1) != 0)
  {
    v10 = *(_QWORD *)a4->airdropClient;
    v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = a2;
    }
  }
  else
  {
    v11 = a2;
  }
  v12 = *(_QWORD *)a4->connection;
  if (v11 <= v12)
    v13 = *(_QWORD *)a4->connection;
  else
    v13 = v11;
  if (v13)
  {
    v14 = sub_100008F88(&qword_10013CD28);
    v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_allocObject(v14, 16 * v13 + 32, 7);
    v16 = j__malloc_size(v15);
    v17 = v16 - 32;
    if (v16 < 32)
      v17 = v16 - 17;
    *(_QWORD *)v15->connection = v12;
    *(_QWORD *)v15->airdropClient = 2 * (v17 >> 4);
  }
  else
  {
    v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)&_swiftEmptyArrayStorage;
  }
  airDropClient = v15->airDropClient;
  v19 = a4->airDropClient;
  if ((v9 & 1) != 0)
  {
    if (v15 != a4 || airDropClient >= &v19[16 * v12])
      memmove(airDropClient, v19, 16 * v12);
    *(_QWORD *)a4->connection = 0;
  }
  else
  {
    memcpy(airDropClient, v19, 16 * v12);
  }
  swift_bridgeObjectRelease(a4, (SEL)v19, a3, a4, a5, a6, a7, a8);
  return v15;
}

char *sub_10003E6B8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

_TtC9AirDropUI33AirDropTransferSessionsController *sub_10003E760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_10003E5C0(0, *(_QWORD *)(a1 + 16), 0, (_TtC9AirDropUI33AirDropTransferSessionsController *)a1, a5, a6, a7, a8);
}

uint64_t sub_10003E774(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

char *sub_10003E788(uint64_t a1)
{
  return sub_100087998(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10003E79C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

id sub_10003E85C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  const __CFData *isa;
  CGImageRef v11;
  id v12;
  Class v13;
  id v14;
  void *v15;
  Class v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _TtC9AirDropUI33AirDropTransferSessionsController *v25;
  _TtC9AirDropUI33AirDropTransferSessionsController *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;

  v0 = SFAirDropSend.Request.itemPreviewData.getter();
  if (v1 >> 60 != 15)
  {
    v8 = v0;
    v9 = v1;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v11 = sub_100005B48(isa);

    if (v11)
    {
      v12 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:", v11);
    }
    else
    {
      v13 = Data._bridgeToObjectiveC()().super.isa;
      v11 = (CGImageRef)SFCreateCGImageFromData();

      v14 = objc_allocWithZone((Class)UIImage);
      v15 = v14;
      if (!v11)
      {
        sub_10001810C(v8, v9);
        v17 = Data._bridgeToObjectiveC()().super.isa;
        v7 = objc_msgSend(v15, "initWithData:", v17);
        sub_1000180AC(v8, v9);

        if (!v7)
        {
          if (qword_10013ABE8 != -1)
            swift_once(&qword_10013ABE8, sub_100028BFC);
          v18 = type metadata accessor for Logger(0);
          sub_100009558(v18, (uint64_t)qword_10013C7C0);
          sub_10001810C(v8, v9);
          v19 = sub_10001810C(v8, v9);
          v20 = Logger.logObject.getter(v19);
          v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc(12, -1);
            v23 = swift_slowAlloc(32, -1);
            v35 = v23;
            *(_DWORD *)v22 = 136315138;
            sub_10001810C(v8, v9);
            v24 = Data.description.getter(v8, v9);
            v26 = v25;
            sub_1000180AC(v8, v9);
            v34 = sub_10003A834(v24, (unint64_t)v26, &v35);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
            swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
            sub_1000180AC(v8, v9);
            sub_1000180AC(v8, v9);
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to create image from preview image data: %s", v22, 0xCu);
            swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v23, -1, -1);
            swift_slowDealloc(v22, -1, -1);

            sub_1000180AC(v8, v9);
          }
          else
          {
            sub_1000180AC(v8, v9);
            sub_1000180AC(v8, v9);
            sub_100017098(v8, v9);

          }
          return 0;
        }
LABEL_13:
        sub_1000180AC(v8, v9);
        return v7;
      }
      v12 = objc_msgSend(v14, "initWithCGImage:", v11);
    }
    v7 = v12;

    goto LABEL_13;
  }
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100009558(v2, (uint64_t)qword_10013C7C0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing preview image data", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 0;
}

void sub_10003EC08(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char *v30;
  _TtC9AirDropUI33AirDropTransferSessionsController *v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char *v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  uint64_t v41;

  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 2);
  if (v4)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)&v3[v7 + 32];
      v10 = *(_QWORD *)&v3[v7 + 40];
      v11 = v9 == a2 && v10 == a3;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0) & 1) != 0)
        break;
      ++v8;
      v7 += 16;
      if (v4 == v8)
        return;
    }
    v12 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
      if (v12 == v4)
        return;
      while (1)
      {
        v14 = *((_QWORD *)v3 + 2);
        if (v12 >= v14)
          break;
        v15 = &v3[v7];
        v16 = *(_QWORD *)&v3[v7 + 48];
        v17 = *(_QWORD *)&v3[v7 + 56];
        v18 = v16 == a2 && v17 == a3;
        if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a2, a3, 0) & 1) == 0)
        {
          if (v12 != v8)
          {
            if (v8 >= v14)
              goto LABEL_30;
            v19 = &v3[16 * v8 + 32];
            v20 = *((_QWORD *)v19 + 1);
            v41 = *(_QWORD *)v19;
            v21 = *((_QWORD *)v15 + 6);
            v22 = *((_QWORD *)v15 + 7);
            swift_bridgeObjectRetain(v20);
            swift_bridgeObjectRetain(v22);
            if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
              v3 = sub_10003E788((uint64_t)v3);
            v30 = &v3[16 * v8];
            v31 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v30 + 5);
            *((_QWORD *)v30 + 4) = v21;
            *((_QWORD *)v30 + 5) = v22;
            swift_bridgeObjectRelease(v31, v23, v24, v25, v26, v27, v28, v29);
            if (v12 >= *((_QWORD *)v3 + 2))
              goto LABEL_31;
            v39 = &v3[v7];
            v40 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v3[v7 + 56];
            *((_QWORD *)v39 + 6) = v41;
            *((_QWORD *)v39 + 7) = v20;
            swift_bridgeObjectRelease(v40, v32, v33, v34, v35, v36, v37, v38);
            *a1 = v3;
          }
          if (__OFADD__(v8++, 1))
            goto LABEL_29;
        }
        ++v12;
        v7 += 16;
        if (v12 == *((_QWORD *)v3 + 2))
          return;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
    }
    __break(1u);
  }
}

void *sub_10003EDB8(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100087998(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[16 * a1 + 32], v7, &type metadata for String);
  if (!v7)
    goto LABEL_20;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15])
      result = memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    v17 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

void sub_10003EF20(void *a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;
  void **v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void ***v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  double v19;
  void *v20;
  void **v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  void **aBlock;
  _QWORD v31[4];
  uint64_t v32;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v5 = type metadata accessor for Logger(0);
  sub_100009558(v5, (uint64_t)qword_10013C7C0);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v26 = ObjectType;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    aBlock = v6;
    v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v31);
    *v10 = v6;

    ObjectType = v26;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "AirDropTransferSessionsController received a connection! %@", v9, 0xCu);
    v12 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  v13 = swift_allocObject(&unk_100125820, 32, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = ObjectType;
  v14 = swift_allocObject(&unk_100125848, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100040B3C;
  *(_QWORD *)(v14 + 24) = v13;
  v31[3] = sub_100040B54;
  v32 = v14;
  aBlock = _NSConcreteStackBlock;
  v31[0] = 1107296256;
  v31[1] = sub_10002982C;
  v31[2] = &unk_100125860;
  v15 = _Block_copy(&aBlock);
  v16 = v32;
  v17 = v2;
  swift_retain(v14);
  objc_msgSend(v6, "configureConnection:", v15, swift_release(v16).n128_f64[0]);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v14, "", 107, 277, 34, 1, v18);
  *(_QWORD *)&v19 = swift_release(v14).n128_u64[0];
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v6, "activate", v19);
    v20 = *(void **)&v17[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection];
    *(_QWORD *)&v17[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection] = v6;
    v21 = v6;

    v22 = objc_msgSend(v21, "remoteTarget");
    if (v22)
    {
      v23 = v22;
      _bridgeAnyObjectToAny(_:)(&v28);
      swift_unknownObjectRelease(v23);
    }
    else
    {
      v28 = 0u;
      v29 = 0u;
    }
    sub_10000CBD4((uint64_t)&v28, (uint64_t)&aBlock, &qword_10013CB40);
    sub_10000CBD4((uint64_t)&aBlock, (uint64_t)&v28, &qword_10013CB40);
    if (*((_QWORD *)&v29 + 1))
    {
      v24 = sub_100008F88(&qword_10013CC08);
      if ((swift_dynamicCast(&v27, &v28, (char *)&type metadata for Any + 8, v24, 6) & 1) != 0)
      {
        v25 = *(_QWORD *)&v17[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient];
        *(_QWORD *)&v17[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = v27;
        swift_release(v13);
        swift_unknownObjectRelease(v25);
        return;
      }
    }
    else
    {
      sub_10000CC5C((uint64_t)&v28, &qword_10013CB40);
    }
    swift_release(v13);
  }
}

uint64_t sub_10003F2C0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC9AirDropUI33AirDropTransferSessionsController **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _TtC9AirDropUI33AirDropTransferSessionsController **v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  void (*v87)(_TtC9AirDropUI33AirDropTransferSessionsController **, char *, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController **v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  int *v106;
  char *v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, char *, uint64_t);
  char *v119;
  uint64_t v120;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  SEL v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  char *v157;
  int *v158;
  SEL v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  SEL v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  SEL v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  SEL v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  _TtC9AirDropUI33AirDropTransferSessionsController *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  void (*v196)(char *, char *, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  SEL v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  char *v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  void (*v226)(char *, char *, uint64_t);
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  void (*v241)(char *, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _TtC9AirDropUI33AirDropTransferSessionsController **v260;
  uint64_t v261;
  uint64_t v262;
  _TtC9AirDropUI33AirDropTransferSessionsController **v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;

  v258 = a4;
  v272 = a2;
  v273 = a3;
  v270 = a1;
  v4 = sub_100008F88((uint64_t *)&unk_10013C9D0);
  v256 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v257 = v6;
  v259 = (uint64_t)&v243 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = sub_100008F88(&qword_10013CA50);
  v253 = *(_QWORD *)(v249 - 8);
  v7 = *(_QWORD *)(v253 + 64);
  __chkstk_darwin(v249, v8);
  v254 = (char *)&v243 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v250 = (char *)&v243 - v11;
  v12 = sub_100008F88((uint64_t *)&unk_10013CA58);
  __chkstk_darwin(v12, v13);
  v252 = (char *)&v243 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v16 = *(_QWORD *)(v15 - 8);
  v261 = v15;
  v262 = v16;
  __chkstk_darwin(v15, v17);
  v251 = (char *)&v243 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v255 = (char *)&v243 - v21;
  v22 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v22, v23);
  v271 = (char *)&v243 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100008F88(&qword_10013CA68);
  v264 = *(_QWORD *)(v25 - 8);
  v265 = v25;
  __chkstk_darwin(v25, v26);
  v28 = (_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)&v243 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29, v30);
  v263 = (_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)&v243 - v31);
  v33 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v32);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  v37 = (char *)&v243 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v268 = *(_QWORD *)(v38 - 8);
  v269 = v38;
  __chkstk_darwin(v38, v39);
  v267 = (char *)&v243 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41, v42);
  v260 = (_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)&v243 - v43);
  v266 = v44;
  __chkstk_darwin(v45, v46);
  v48 = (char *)&v243 - v47;
  v49 = sub_100008F88(&qword_10013CA70);
  v50 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49, v51);
  v53 = (char *)&v243 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __chkstk_darwin(v54, v55);
  v58 = (char *)&v243 - v57;
  (*(void (**)(char *, char *, uint64_t, __n128))(v34 + 16))(v37, v273, v33, v56);
  v59 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v37, v33);
  if (v59 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v58, v37, v49);
    v60 = v50;
LABEL_3:
    v62 = v264;
    v61 = v265;
    v63 = v263;
    SFAirDrop.PermissionRequest.style.getter(v49);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v49);
    if ((*(unsigned int (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v62 + 88))(v63, v61) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
    {
      v99 = *(uint64_t (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v62 + 8);
      v100 = v63;
      v101 = v61;
      return v99(v100, v101);
    }
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v62 + 96))(v63, v61);
    swift_bridgeObjectRelease(v63[1], v64, v65, v66, v67, v68, v69, v70);
    swift_bridgeObjectRelease(v63[3], v71, v72, v73, v74, v75, v76, v77);
    swift_bridgeObjectRelease(v63[4], v78, v79, v80, v81, v82, v83, v84);
    v85 = (char *)v63 + *(int *)(sub_100008F88(&qword_10013CA90) + 80);
    v86 = v268;
    v33 = v269;
    v87 = *(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, char *, uint64_t))(v268 + 32);
    v88 = v260;
    v87(v260, v85, v269);
    v89 = type metadata accessor for TaskPriority(0);
    v90 = (uint64_t)v271;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v271, 1, 1, v89);
    v91 = v267;
    (*(void (**)(char *, _TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v86 + 16))(v267, v88, v33);
    v92 = *(unsigned __int8 *)(v86 + 80);
    v93 = (v92 + 16) & ~v92;
    v94 = (v266 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
    v95 = swift_allocObject(&unk_100125730, v94 + 16, v92 | 7);
    v87((_TtC9AirDropUI33AirDropTransferSessionsController **)(v95 + v93), v91, v33);
    v96 = (_QWORD *)(v95 + v94);
    v97 = v272;
    *v96 = v270;
    v96[1] = v97;
    swift_bridgeObjectRetain(v97);
    v98 = static Task<>.noThrow(priority:operation:)(v90, &unk_10013CAE0, v95, (char *)&type metadata for () + 8);
    swift_release(v98);
    swift_release(v95);
    sub_10000CC5C(v90, &qword_10013BCC0);
    v99 = *(uint64_t (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v86 + 8);
    v100 = v88;
LABEL_5:
    v101 = v33;
    return v99(v100, v101);
  }
  v273 = v48;
  v245 = v53;
  v247 = v50;
  v246 = v49;
  v244 = v7;
  v103 = v261;
  v102 = v262;
  v248 = v37;
  if (v59 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    v104 = *(void (**)(char *, uint64_t))(v34 + 96);
    v105 = v248;
    v104(v248, v33);
    v106 = (int *)sub_100008F88((uint64_t *)&unk_10013DC80);
    v107 = &v105[v106[12]];
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v105[v106[16] + 8], v108, v109, v110, v111, v112, v113, v114);
    v115 = &v105[v106[20]];
    v117 = v268;
    v116 = v269;
    v118 = *(void (**)(char *, char *, uint64_t))(v268 + 32);
    v119 = v273;
    v118(v273, v115, v269);
    v120 = type metadata accessor for SFAirDrop.Progress(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v120 - 8) + 8))(v107, v120);
LABEL_13:
    v132 = v266;
    v133 = v267;
    v134 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v134 - 8) + 8))(v105, v134);
    v135 = type metadata accessor for TaskPriority(0);
    v136 = (uint64_t)v271;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v271, 1, 1, v135);
    v118(v133, v119, v116);
    v137 = *(unsigned __int8 *)(v117 + 80);
    v138 = (v137 + 16) & ~v137;
    v139 = (v132 + v138 + 7) & 0xFFFFFFFFFFFFFFF8;
    v140 = swift_allocObject(&unk_100125708, v139 + 16, v137 | 7);
    v118((char *)(v140 + v138), v133, v116);
    v141 = (_QWORD *)(v140 + v139);
    v142 = v272;
    *v141 = v270;
    v141[1] = v142;
    swift_bridgeObjectRetain(v142);
    v143 = static Task<>.noThrow(priority:operation:)(v136, &unk_10013CAC0, v140, (char *)&type metadata for () + 8);
    swift_release(v143);
    swift_release(v140);
    return sub_10000CC5C(v136, &qword_10013BCC0);
  }
  if (v59 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    v122 = *(void (**)(char *, uint64_t))(v34 + 96);
    v105 = v248;
    v122(v248, v33);
    v123 = sub_100008F88(&qword_10013CAB0);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v105[*(int *)(v123 + 48)], v124, v125, v126, v127, v128, v129, v130);
    v131 = &v105[*(int *)(v123 + 80)];
    v117 = v268;
    v116 = v269;
    v118 = *(void (**)(char *, char *, uint64_t))(v268 + 32);
    v119 = v273;
    v118(v273, v131, v269);
    goto LABEL_13;
  }
  if (v59 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    v144 = v248;
    (*(void (**)(char *, uint64_t))(v34 + 96))(v248, v33);
    v145 = sub_100008F88(&qword_10013CAD0);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v144[*(int *)(v145 + 48)], v146, v147, v148, v149, v150, v151, v152);
    v153 = &v144[*(int *)(v145 + 64)];
    v60 = v247;
    v49 = v246;
    (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v58, v153, v246);
    v154 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v154 - 8) + 8))(v144, v154);
    goto LABEL_3;
  }
  v155 = v265;
  if (v59 != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    v204 = type metadata accessor for TaskPriority(0);
    v205 = (uint64_t)v271;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v204 - 8) + 56))(v271, 1, 1, v204);
    v206 = v259;
    sub_10000CC18(v258, v259, (uint64_t *)&unk_10013C9D0);
    v207 = *(unsigned __int8 *)(v256 + 80);
    v208 = (v207 + 16) & ~v207;
    v209 = (v257 + v208 + 7) & 0xFFFFFFFFFFFFFFF8;
    v210 = swift_allocObject(&unk_1001256B8, v209 + 16, v207 | 7);
    sub_10000CBD4(v206, v210 + v208, (uint64_t *)&unk_10013C9D0);
    v211 = (_QWORD *)(v210 + v209);
    v212 = v272;
    *v211 = v270;
    v211[1] = v212;
    swift_bridgeObjectRetain(v212);
    v213 = static Task<>.noThrow(priority:operation:)(v205, &unk_10013CA80, v210, (char *)&type metadata for () + 8);
    swift_release(v213);
    swift_release(v210);
    sub_10000CC5C(v205, &qword_10013BCC0);
    v99 = *(uint64_t (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v34 + 8);
    v100 = (_TtC9AirDropUI33AirDropTransferSessionsController **)v248;
    goto LABEL_5;
  }
  v156 = *(void (**)(char *, uint64_t))(v34 + 96);
  v157 = v248;
  v156(v248, v33);
  v158 = (int *)sub_100008F88(&qword_10013BDE0);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v157[v158[12]], v159, v160, v161, v162, v163, v164, v165);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v157[v158[16]], v166, v167, v168, v169, v170, v171, v172);
  v173 = &v157[v158[20]];
  v174 = v247;
  v175 = v245;
  v176 = v246;
  (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v245, v173, v246);
  SFAirDrop.PermissionRequest.style.getter(v176);
  v177 = v264;
  if ((*(unsigned int (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v264 + 88))(v28, v155) == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v177 + 96))(v28, v155);
    swift_bridgeObjectRelease(v28[1], v178, v179, v180, v181, v182, v183, v184);
    swift_bridgeObjectRelease(v28[3], v185, v186, v187, v188, v189, v190, v191);
    v192 = v28[4];
    v193 = sub_100008F88(&qword_10013CA90);
    (*(void (**)(char *, uint64_t))(v268 + 8))((char *)v28 + *(int *)(v193 + 80), v269);
    if (*(_QWORD *)v192->connection)
    {
      v194 = v102;
      v195 = (char *)v192
           + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
      v196 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
      v197 = (uint64_t)v252;
      v198 = v103;
      v196(v252, v195, v103);
      v199 = 0;
      v201 = v253;
      v200 = v254;
      v202 = v255;
      v203 = v247;
    }
    else
    {
      v199 = 1;
      v198 = v103;
      v194 = v102;
      v201 = v253;
      v200 = v254;
      v202 = v255;
      v203 = v247;
      v197 = (uint64_t)v252;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v197, v199, 1, v198);
    swift_bridgeObjectRelease(v192, v214, v215, v216, v217, v218, v219, v220);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v197, 1, v198) == 1)
    {
      (*(void (**)(char *, uint64_t))(v203 + 8))(v245, v176);
      sub_10000CC5C(v197, (uint64_t *)&unk_10013CA58);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v194 + 32))(v202, v197, v198);
      v221 = v251;
      (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v251, v202, v198);
      if ((*(unsigned int (**)(char *, uint64_t))(v194 + 88))(v221, v198) == enum case for SFAirDrop.AcceptAction.single<A>(_:))
      {
        (*(void (**)(char *, uint64_t))(v194 + 96))(v221, v198);
        v222 = sub_100008F88(&qword_10013CA98);
        v223 = v221;
        v224 = &v221[*(int *)(v222 + 48)];
        v225 = v201;
        v226 = *(void (**)(char *, char *, uint64_t))(v201 + 32);
        v227 = v250;
        v228 = v249;
        v226(v250, v223, v249);
        v229 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v229 - 8) + 8))(v224, v229);
        v230 = type metadata accessor for TaskPriority(0);
        v231 = (uint64_t)v271;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v230 - 8) + 56))(v271, 1, 1, v230);
        (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v200, v227, v228);
        v232 = *(unsigned __int8 *)(v225 + 80);
        v233 = (v232 + 16) & ~v232;
        v234 = (v244 + v233 + 7) & 0xFFFFFFFFFFFFFFF8;
        v235 = swift_allocObject(&unk_1001256E0, v234 + 16, v232 | 7);
        v226((char *)(v235 + v233), v200, v228);
        v236 = (_QWORD *)(v235 + v234);
        v237 = v272;
        *v236 = v270;
        v236[1] = v237;
        swift_bridgeObjectRetain(v237);
        v238 = static Task<>.noThrow(priority:operation:)(v231, &unk_10013CAA8, v235, (char *)&type metadata for () + 8);
        swift_release(v238);
        swift_release(v235);
        sub_10000CC5C(v231, &qword_10013BCC0);
        (*(void (**)(char *, uint64_t))(v225 + 8))(v227, v228);
        (*(void (**)(char *, uint64_t))(v262 + 8))(v255, v198);
        (*(void (**)(char *, uint64_t))(v247 + 8))(v245, v246);
        v239 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
        return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v239 - 8) + 8))(v248, v239);
      }
      v240 = v221;
      v241 = *(void (**)(char *, uint64_t))(v194 + 8);
      v241(v202, v198);
      (*(void (**)(char *, uint64_t))(v203 + 8))(v245, v176);
      v241(v240, v198);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v174 + 8))(v175, v176);
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v177 + 8))(v28, v155);
  }
  v242 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v242 - 8) + 8))(v157, v242);
}

uint64_t sub_10003FFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_10003FFE4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10013C9EC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10004002C;
  return sub_1000357A0(v0);
}

uint64_t sub_10004002C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_10004007C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10013C9FC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100018F40;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10013C9F8 + dword_10013C9F8))(a1, v4);
}

uint64_t sub_1000400EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10013CA14);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100018F40;
  return sub_1000350EC(a1, v5, v4);
}

uint64_t sub_10004017C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(sub_100008F88((uint64_t *)&unk_10013C9D0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  v14 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v14 + 16;
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v14 + 8), v7, v8, v9, v10, v11, v12, v13);
  return swift_deallocObject(v0, v15, v2 | 7);
}

uint64_t sub_100040234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_100008F88((uint64_t *)&unk_10013C9D0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc(dword_10013CA7C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100018F40;
  return sub_100035D28(a1, v6, v8, v9);
}

uint64_t sub_1000402D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v1 = sub_100008F88(&qword_10013CA50);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v6 + 8), v7, v8, v9, v10, v11, v12, v13);
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10004034C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_100008F88(&qword_10013CA50) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc(dword_10013CAA4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100018F40;
  return sub_100035924(a1, v6, v8, v9);
}

uint64_t sub_1000403EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for SFAirDrop.DeclineAction(0) - 8);
  v3 = (uint64_t *)(v0
                 + ((*(_QWORD *)(v2 + 64)
                   + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
                   + 7) & 0xFFFFFFFFFFFFFFF8));
  v4 = *v3;
  v5 = v3[1];
  v6 = (_QWORD *)swift_task_alloc(dword_10013CABC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100018F40;
  v6[4] = v4;
  v6[5] = v5;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.DeclineAction.decline()[1]);
  v6[6] = v7;
  *v7 = v6;
  v7[1] = sub_1000364E4;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_10004049C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100040514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for SFAirDrop.DeclineAction(0) - 8);
  v3 = (uint64_t *)(v0
                 + ((*(_QWORD *)(v2 + 64)
                   + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
                   + 7) & 0xFFFFFFFFFFFFFFF8));
  v4 = *v3;
  v5 = v3[1];
  v6 = (_QWORD *)swift_task_alloc(dword_10013CADC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100018F40;
  v6[4] = v4;
  v6[5] = v5;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.DeclineAction.decline()[1]);
  v6[6] = v7;
  *v7 = v6;
  v7[1] = sub_1000361AC;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_1000405D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000405E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000405E8(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *v16;
  uint64_t v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  char v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v46;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013CB20);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, "actionIdentifier");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(UNNotificationDefaultActionIdentifier);
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v20, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(v16, v29, v30, v31, v32, v33, v34, v35);
    if ((v21 & 1) == 0)
      return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  }
  if (qword_10013ABE8 != -1)
    swift_once(&qword_10013ABE8, sub_100028BFC);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100009558(v36, (uint64_t)qword_10013C7C0);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Notification was tapped, they navigated to the completed url", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

  v41 = objc_msgSend(a1, "notification");
  v42 = objc_msgSend(v41, "request");

  v43 = objc_msgSend(v42, "content");
  v44 = objc_msgSend(v43, "defaultActionURL");

  if (v44)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v44);

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v8, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v12, 1, 1, v4);
  }
  sub_10000CC5C((uint64_t)v12, &qword_10013CB20);
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1000408E8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040914()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10013CB5C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100018F40;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10013CB58 + dword_10013CB58))(v2, v3);
}

uint64_t sub_10004097C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10013CB6C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100018F40;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10013CB68 + dword_10013CB68))(v2, v3, v4);
}

uint64_t sub_1000409F8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100040A24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013CB7C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10013CB78 + dword_10013CB78))(a1, v4, v5, v6);
}

uint64_t sub_100040AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10013CB8C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100018F40;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10013CB88 + dword_10013CB88))(a1, v4);
}

uint64_t sub_100040B18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100040B3C(void *a1)
{
  uint64_t v1;

  sub_1000309C8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100040B44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040B54()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100040B74(void *a1)
{
  uint64_t v1;

  sub_100030CD8(a1, v1);
}

uint64_t sub_100040B7C()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100040BA0(uint64_t a1)
{
  uint64_t v1;

  return sub_100030FE8(a1, v1);
}

uint64_t sub_100040BA8()
{
  return sub_100040FD8((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100040BBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_10013CC2C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100018F40;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.registerTransfersMonitor()[1]);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1000104E4;
  return SFAirDropClient.registerTransfersMonitor()(a1);
}

uint64_t sub_100040C38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10013CC3C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100018F40;
  return sub_10002964C(v0);
}

uint64_t sub_100040C80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100141694);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100018F40;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100141690 + dword_100141690))(a1, v4);
}

id sub_100040D14(void *a1)
{
  uint64_t v1;

  return sub_100029780(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100040D1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10013CCBC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100018F40;
  return sub_10002A224(a1, v4);
}

unint64_t sub_100040D90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CCD8;
  if (!qword_10013CCD8)
  {
    v1 = sub_10000950C(&qword_10013CCD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for SFXPCResilientAsyncSequence<A>.AsyncIterator, v1);
    atomic_store(result, (unint64_t *)&qword_10013CCD8);
  }
  return result;
}

uint64_t sub_100040DE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008F88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100040E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100008F88(&qword_10013CA50);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100040E8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(&qword_10013CA50) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10013CD14);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100018F40;
  return sub_1000344F8(a1, v5);
}

uint64_t sub_100040F08()
{
  return sub_10004119C((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Request);
}

uint64_t sub_100040F14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for SFAirDropSend.Request(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = *v8;
  v10 = v8[1];
  v11 = (_QWORD *)swift_task_alloc(dword_10013CD34);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100018F40;
  return sub_100033848(a1, v6, v7, v9, v10);
}

uint64_t sub_100040FC4()
{
  return sub_100040FD8((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100040FD8(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_100041014(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013CD4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000104E4;
  return sub_100032A2C(a1, v4, v5, v6);
}

uint64_t sub_100041080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000410FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10013CD64);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000104E4;
  return sub_1000323B0(a1, v5, v6, v7, v8);
}

uint64_t sub_100041190()
{
  return sub_10004119C((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.AskRequest);
}

uint64_t sub_10004119C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v4 | 7;
  v7 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v7 + 8));
  return swift_deallocObject(v1, v7 + 16, v6);
}

uint64_t sub_100041234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for SFAirDropReceive.AskRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = *v8;
  v10 = v8[1];
  v11 = (_QWORD *)swift_task_alloc(dword_10013CD74);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100018F40;
  return sub_100032E78(a1, v6, v7, v9, v10);
}

uint64_t sub_1000412DC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100041310(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10013CD84);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100018F40;
  return sub_100032550(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000413A0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000413DC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

void sub_100041468(void *a1, const char *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  BOOL v12;

  v9 = (_QWORD *)(v8 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState);
  v10 = *(void **)(v8 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState);
  v11 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v8
                                                              + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState
                                                              + 8);
  *v9 = a1;
  v9[1] = a2;
  if (a2)
  {
    if (v11)
    {
      v12 = v10 == a1 && v11 == (_TtC9AirDropUI33AirDropTransferSessionsController *)a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v10, v11, 0) & 1) != 0)
        goto LABEL_12;
    }
  }
  else if (!v11)
  {
    return;
  }
  if (*(_BYTE *)(v8 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_hasSetInitialState) == 1)
    sub_100041BEC(1);
LABEL_12:
  swift_bridgeObjectRelease(v11, a2, v10, a4, a5, a6, a7, a8);
}

void sub_1000414EC(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  void *v7;
  _TtC9AirDropUI33AirDropTransferSessionsController *v8;
  _TtC9AirDropUI33AirDropTransferSessionsController *v9;
  objc_class *v10;
  uint64_t ObjCClassFromMetadata;
  id v12;
  id v13;
  NSString v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  id v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  id v49;
  void *v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double Height;
  id v60;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  id v64;
  void *v65;
  double v66;
  double v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  CGFloat Width;
  id v76;
  void *v77;
  id v78;
  CGFloat ty;
  CGFloat tx;
  CGFloat a;
  CGAffineTransform v82;
  CGAffineTransform v83;
  objc_super v84;
  CGRect v85;
  CGRect v86;

  v2[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_hasSetInitialState] = 0;
  v3 = &v2[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState];
  v4 = type metadata accessor for ShockwaveEffectState(0, a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v2[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState];
  sub_10001AE98();
  *v5 = 0;
  v5[1] = 0;
  v6 = v2;
  v7 = (void *)static NSUserDefaults.airdrop.getter(v6);
  SFAirDropUserDefaults.shockwaveEffectVariant.getter();
  v9 = v8;

  v10 = (objc_class *)type metadata accessor for ShockwaveEffectViewController(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v13 = objc_allocWithZone((Class)BSUICAPackageView);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9, v15, v16, v17, v18, v19, v20, v21);
  v22 = objc_msgSend(v13, "initWithPackageName:inBundle:", v14, v12);

  if (!v22)
  {
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)&v6[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView] = v22;

  v84.receiver = v6;
  v84.super_class = v10;
  v23 = (char *)objc_msgSendSuper2(&v84, "initWithNibName:bundle:", 0, 0);
  v24 = objc_msgSend(v23, "view");
  if (!v24)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v25 = v24;
  v26 = (void *)objc_opt_self(UIColor);
  v27 = objc_msgSend(v26, "clearColor");
  objc_msgSend(v25, "setBackgroundColor:", v27);

  v28 = OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView;
  v29 = *(id *)&v23[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView];
  v30 = objc_msgSend(v26, "clearColor");
  objc_msgSend(v29, "setBackgroundColor:", v30);

  v31 = *(void **)&v23[v28];
  objc_msgSend(v31, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v32 = v31;
  v33 = objc_msgSend(v23, "view");
  if (!v33)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v34 = v33;
  objc_msgSend(v33, "frame");
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v42 = v41;

  objc_msgSend(v32, "setFrame:", v36, v38, v40, v42);
  v43 = objc_msgSend(v23, "view");
  if (!v43)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v44 = v43;
  objc_msgSend(v43, "addSubview:", *(_QWORD *)&v23[v28]);

  objc_msgSend(*(id *)&v23[v28], "sizeThatFits:", 0.0, 0.0);
  v46 = v45;
  v48 = v47;
  v49 = objc_msgSend(v23, "view");
  if (!v49)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v50 = v49;
  objc_msgSend(v49, "frame");
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v58 = v57;

  v85.origin.x = v52;
  v85.origin.y = v54;
  v85.size.width = v56;
  v85.size.height = v58;
  Height = CGRectGetHeight(v85);
  v60 = *(id *)&v23[v28];
  objc_msgSend(v60, "transform");
  b = v83.b;
  c = v83.c;
  d = v83.d;
  tx = v83.tx;
  a = v83.a;
  ty = v83.ty;
  v64 = objc_msgSend(v23, "view");
  if (!v64)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v65 = v64;
  v66 = v46 / v48 * Height;
  objc_msgSend(v64, "frame");
  v68 = v67;
  v70 = v69;
  v72 = v71;
  v74 = v73;

  v86.origin.x = v68;
  v86.origin.y = v70;
  v86.size.width = v72;
  v86.size.height = v74;
  Width = CGRectGetWidth(v86);
  v83.a = a;
  v83.b = b;
  v83.c = c;
  v83.d = d;
  v83.tx = tx;
  v83.ty = ty;
  CGAffineTransformScale(&v82, &v83, Width / v66, 1.0);
  v83 = v82;
  objc_msgSend(v60, "setTransform:", &v83);

  v76 = objc_msgSend(v23, "view");
  if (v76)
  {
    v77 = v76;
    objc_msgSend(v76, "setUserInteractionEnabled:", 0);

    v78 = *(id *)&v23[v28];
    objc_msgSend(v78, "bs_setHitTestingDisabled:", 1);

    return;
  }
LABEL_15:
  __break(1u);
}

void sub_100041BEC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  void *v60;
  char v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  _TtC9AirDropUI33AirDropTransferSessionsController *v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _TtC9AirDropUI33AirDropTransferSessionsController *v94;
  SEL v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  void *v103;
  char v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  __n128 v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _TtC9AirDropUI33AirDropTransferSessionsController *v129;
  SEL v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[16];
  uint64_t v147;
  _BYTE v148[16];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151[3];
  unsigned __int8 v152[10];

  v2 = v1;
  v4 = sub_100008F88(&qword_10013CDF0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v138 - v10;
  v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013CD40);
  __chkstk_darwin(v17, v18);
  v20 = (uint64_t *)((char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v144 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21, v22);
  v25 = __chkstk_darwin(v23, v24);
  v27 = __chkstk_darwin(v25, v26);
  v143 = (char *)&v138 - v30;
  v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState + 8);
  if (!v31)
    return;
  v138 = v29;
  v139 = v28;
  v141 = v11;
  v142 = v27;
  v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState);
  v33 = *(void **)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView);
  swift_bridgeObjectRetain(v31);
  v140 = v32;
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v33, "setState:animated:transitionSpeed:completion:", v34, a1 & 1, 0, 0.7);

  if (qword_10013ABF0 != -1)
    swift_once(&qword_10013ABF0, sub_100028C8C);
  v35 = objc_retain(*(id *)(qword_100147DA0
                          + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator));
  sub_10007FEF8(v20);

  v36 = v144;
  v37 = v142;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v144 + 48))(v20, 1, v142) != 1)
  {
    v44 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v36 + 32))(v143, v20, v37);
    *(_WORD *)v152 = 0;
    SFAirDrop.NearbySharingInteraction.state.getter(v44);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
    if (v45 == enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:))
    {
      v152[1] = 1;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      v46 = (uint64_t)v141;
    }
    else
    {
      v46 = (uint64_t)v141;
      if (v45 == enum case for SFAirDrop.NearbySharingInteraction.State.connecting(_:))
        v152[0] = 1;
      else
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    }
    v47 = v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState;
    swift_beginAccess(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState, v151, 0, 0);
    sub_100043008(v47, v46);
    v49 = type metadata accessor for ShockwaveEffectState(0, v48);
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v46, 1, v49) == 1)
      goto LABEL_16;
    sub_100043008(v46, (uint64_t)v8);
    v58 = (*(uint64_t (**)(char *, uint64_t))(v50 + 88))(v8, v49);
    if (v58 != enum case for ShockwaveEffectState.connectionHint(_:))
    {
      if (v58 == enum case for ShockwaveEffectState.shockwave(_:))
      {
        if (qword_10013AD60 != -1)
          swift_once(&qword_10013AD60, sub_100092254);
        v63 = type metadata accessor for Logger(0);
        sub_100009558(v63, (uint64_t)qword_100148040);
        v64 = v144;
        v65 = v138;
        (*(void (**)(uint64_t, char *, uint64_t))(v144 + 16))(v138, v143, v37);
        v66 = swift_bridgeObjectRetain(v31);
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = swift_slowAlloc(22, -1);
          v70 = swift_slowAlloc(64, -1);
          v147 = v70;
          *(_DWORD *)v69 = 136315394;
          v71 = ((uint64_t (*)(void))SFAirDrop.NearbySharingInteraction.isInitiator.getter)();
          v72 = (v71 & 1) == 0;
          if ((v71 & 1) != 0)
            v73 = 0x6F74616974696E69;
          else
            v73 = 0x7265766965636572;
          if (v72)
            v74 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE800000000000000;
          else
            v74 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE900000000000072;
          v145 = sub_10003A834(v73, (unint64_t)v74, &v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
          swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
          v82 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
          v82(v65, v142);
          *(_WORD *)(v69 + 12) = 2080;
          swift_bridgeObjectRetain(v31);
          v145 = sub_10003A834(v140, v31, &v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
          swift_bridgeObjectRelease_n(v31, 3);
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Playing shockwave haptics as %s for ShockwaveEffectState: %s", (uint8_t *)v69, 0x16u);
          swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
          v83 = v70;
          v37 = v142;
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v69, -1, -1);

        }
        else
        {
          v82 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
          v82(v65, v37);

          v84 = swift_bridgeObjectRelease_n(v31, 2);
        }
        if ((SFAirDrop.NearbySharingInteraction.isInitiator.getter(v84) & 1) != 0)
        {
          if (qword_10013AD90 != -1)
            swift_once(&qword_10013AD90, sub_1000CDCC8);
          v120.n128_f64[0] = sub_1000CE030();
        }
        else
        {
          if (qword_10013AD90 != -1)
            swift_once(&qword_10013AD90, sub_1000CDCC8);
          v120.n128_f64[0] = sub_1000CE298();
        }
        ((void (*)(char *, uint64_t, __n128))v82)(v143, v37, v120);
        v46 = (uint64_t)v141;
        goto LABEL_49;
      }
      if (v58 == enum case for ShockwaveEffectState.cleaningUp(_:))
      {
        if (qword_10013AD60 != -1)
          swift_once(&qword_10013AD60, sub_100092254);
        v107 = type metadata accessor for Logger(0);
        sub_100009558(v107, (uint64_t)qword_100148040);
        v108 = swift_bridgeObjectRetain(v31);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v109, v110))
        {
          v111 = (uint8_t *)swift_slowAlloc(12, -1);
          v112 = swift_slowAlloc(32, -1);
          v147 = v112;
          *(_DWORD *)v111 = 136315138;
          swift_bridgeObjectRetain(v31);
          v145 = sub_10003A834(v140, v31, &v147);
          v37 = v142;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
          swift_bridgeObjectRelease_n(v31, 3);
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "Cleaning up haptics for ShockwaveEffectState: %s", v111, 0xCu);
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          v113 = v112;
          v46 = (uint64_t)v141;
          swift_slowDealloc(v113, -1, -1);
          swift_slowDealloc(v111, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v31, 2);
        }
        if (qword_10013AD90 != -1)
          swift_once(&qword_10013AD90, sub_1000CDCC8);
        sub_1000CE3CC();
        goto LABEL_25;
      }
      (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v49);
LABEL_16:
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v51 = type metadata accessor for Logger(0);
      sub_100009558(v51, (uint64_t)qword_100148040);
      v52 = swift_bridgeObjectRetain(v31);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        v147 = v56;
        *(_DWORD *)v55 = 136315138;
        swift_bridgeObjectRetain(v31);
        v145 = sub_10003A834(v140, v31, &v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146);
        swift_bridgeObjectRelease_n(v31, 3);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Not playing haptics for ShockwaveEffectState: %s", v55, 0xCu);
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        v57 = v56;
        v46 = (uint64_t)v141;
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v55, -1, -1);

        (*(void (**)(char *, uint64_t))(v144 + 8))(v143, v37);
LABEL_49:
        sub_10000CC5C(v46, &qword_10013CDF0);
        return;
      }
      swift_bridgeObjectRelease_n(v31, 2);

LABEL_25:
      (*(void (**)(char *, uint64_t))(v144 + 8))(v143, v37);
      goto LABEL_49;
    }
    v59 = sub_10001AE98();
    v60 = (void *)static NSUserDefaults.airdrop.getter(v59);
    v61 = SFAirDropUserDefaults.shockwaveHapticsPlayerStartsEarly.getter();

    if ((v61 & 1) != 0 && (v152[1] & 1) != 0)
      v62 = 1;
    else
      v62 = v152[0];
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v85 = type metadata accessor for Logger(0);
    v86 = sub_100009558(v85, (uint64_t)qword_100148040);
    v87 = swift_bridgeObjectRetain(v31);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = swift_slowAlloc(40, -1);
      v91 = swift_slowAlloc(64, -1);
      v138 = v86;
      v92 = v91;
      v150 = v91;
      *(_DWORD *)v90 = 136316162;
      swift_bridgeObjectRetain(v31);
      v147 = sub_10003A834(v140, v31, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease_n(v31, 3);
      *(_WORD *)(v90 + 12) = 2080;
      if (v62)
        v93 = 5457241;
      else
        v93 = 20302;
      if (v62)
        v94 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE300000000000000;
      else
        v94 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE200000000000000;
      v147 = sub_10003A834(v93, (unint64_t)v94, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease(v94, v95, v96, v97, v98, v99, v100, v101);
      *(_WORD *)(v90 + 22) = 1024;
      v103 = (void *)static NSUserDefaults.airdrop.getter(v102);
      v104 = SFAirDropUserDefaults.shockwaveHapticsPlayerStartsEarly.getter();

      v105 = v104 & 1;
      v46 = (uint64_t)v141;
      LODWORD(v147) = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, (char *)&v147 + 4);
      *(_WORD *)(v90 + 28) = 1024;
      swift_beginAccess(&v152[1], &v147, 0, 0);
      LODWORD(v145) = v152[1];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 4);
      *(_WORD *)(v90 + 34) = 1024;
      swift_beginAccess(v152, &v145, 0, 0);
      LODWORD(v149) = v152[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 4);
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Should play haptics for ShockwaveEffectState: %s? %s , shockwaveHapticsPlayerStartsEarly:%{BOOL}d, isInteractionStatePresenceDetected:%{BOOL}d, isInteractionStateConnecting:%{BOOL}d", (uint8_t *)v90, 0x28u);
      swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v90, -1, -1);

      if (!v62)
        goto LABEL_48;
    }
    else
    {

      v106 = swift_bridgeObjectRelease_n(v31, 2);
      if (!v62)
      {
LABEL_48:
        (*(void (**)(char *, uint64_t))(v144 + 8))(v143, v142);
        goto LABEL_49;
      }
    }
    v114 = v143;
    v115 = SFAirDrop.NearbySharingInteraction.isInitiator.getter(v106);
    v116 = v139;
    v117 = v142;
    v118 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v144 + 16))(v139, v114, v142);
    if ((v115 & 1) != 0)
      v119 = 1;
    else
      v119 = SFAirDrop.NearbySharingInteraction.isInitiatorRoleExpected.getter(v118);
    v121 = *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8);
    v122 = v121(v116, v117);
    v123 = Logger.logObject.getter(v122);
    v124 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v123, v124))
    {
      v125 = (uint8_t *)swift_slowAlloc(12, -1);
      v126 = swift_slowAlloc(32, -1);
      *(_DWORD *)v125 = 136315138;
      v150 = v126;
      if ((v119 & 1) != 0)
        v127 = 0x6F74616974696E69;
      else
        v127 = 0x7265766965636572;
      if ((v119 & 1) != 0)
        v128 = 0xE900000000000072;
      else
        v128 = 0xE800000000000000;
      v149 = sub_10003A834(v127, v128, &v150);
      v46 = (uint64_t)v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      v129 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v128;
      v117 = v142;
      swift_bridgeObjectRelease(v129, v130, v131, v132, v133, v134, v135, v136);
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "Playing hinting haptics as %s", v125, 0xCu);
      swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1, -1);
      swift_slowDealloc(v125, -1, -1);
    }

    if ((v119 & 1) != 0)
    {
      if (qword_10013AD90 != -1)
        swift_once(&qword_10013AD90, sub_1000CDCC8);
      v137.n128_f64[0] = sub_1000CDEFC();
    }
    else
    {
      if (qword_10013AD90 != -1)
        swift_once(&qword_10013AD90, sub_1000CDCC8);
      v137.n128_f64[0] = sub_1000CE164();
    }
    ((void (*)(char *, uint64_t, __n128))v121)(v143, v117, v137);
    goto LABEL_49;
  }
  sub_10000CC5C((uint64_t)v20, &qword_10013CD40);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v38 = type metadata accessor for Logger(0);
  sub_100009558(v38, (uint64_t)qword_100148040);
  v39 = swift_bridgeObjectRetain(v31);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v151[0] = v43;
    *(_DWORD *)v42 = 136315138;
    swift_bridgeObjectRetain(v31);
    v147 = sub_10003A834(v140, v31, v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    swift_bridgeObjectRelease_n(v31, 3);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping playing Haptics with ShockwaveEffectView's state change to %s, currentNearbyInteraction was nil", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v31, 2);
  }
}

id sub_100042BCC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShockwaveEffectViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100042C54()
{
  return type metadata accessor for ShockwaveEffectViewController(0);
}

uint64_t type metadata accessor for ShockwaveEffectViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_10013CDD8;
  if (!qword_10013CDD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShockwaveEffectViewController);
  return result;
}

void sub_100042C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = &unk_1000EAAB0;
  sub_100042D24(319, a2);
  if (v4 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(v3 - 8) + 64;
    v5[3] = &unk_1000EAAC8;
    swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
  }
}

void sub_100042D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_10013CDE8)
  {
    v3 = type metadata accessor for ShockwaveEffectState(255, a2);
    v4 = type metadata accessor for Optional(a1, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_10013CDE8);
  }
}

void sub_100042D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _BYTE v30[24];

  v6 = type metadata accessor for ShockwaveEffectState(0, a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = sub_100008F88(&qword_10013CDF0);
  __chkstk_darwin(v11, v12);
  v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = swift_retain(a4);
  dispatch thunk of ShockwaveAnimationCoordinator.state.getter(v15);
  v16 = swift_release(a4);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56))(v14, 0, 1, v6, v16);
  v17 = a1 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState;
  swift_beginAccess(a1 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState, v30, 33, 0);
  sub_100043220((uint64_t)v14, v17);
  swift_endAccess(v30);
  v18 = swift_retain(a4);
  dispatch thunk of ShockwaveAnimationCoordinator.state.getter(v18);
  v19 = swift_release(a4);
  v20 = (void *)ShockwaveEffectState.assetState.getter(v19);
  v22 = v21;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  sub_100041468(v20, v22, v23, v24, v25, v26, v27, v28);
}

id sub_100042ED4()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ShockwaveEffectViewController(0)), "init");
}

void sub_100042EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100042D78(a1, a2, a3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_100042F0C(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_100042F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000431DC();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100042F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000431DC();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100042FE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000431DC();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_100043008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013CDF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for ShockwaveEffectView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ShockwaveEffectView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for ShockwaveEffectView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for ShockwaveEffectView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropActivityAttributes(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropActivityAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShockwaveEffectView()
{
  return &type metadata for ShockwaveEffectView;
}

unint64_t sub_10004318C()
{
  unint64_t result;

  result = qword_10013CDF8;
  if (!qword_10013CDF8)
  {
    result = swift_getWitnessTable(&unk_1000EAB6C, &type metadata for ShockwaveEffectView);
    atomic_store(result, (unint64_t *)&qword_10013CDF8);
  }
  return result;
}

void *sub_1000431D0()
{
  return &protocol witness table for Never;
}

unint64_t sub_1000431DC()
{
  unint64_t result;

  result = qword_10013CE00;
  if (!qword_10013CE00)
  {
    result = swift_getWitnessTable(&unk_1000EAAF4, &type metadata for ShockwaveEffectView);
    atomic_store(result, (unint64_t *)&qword_10013CE00);
  }
  return result;
}

uint64_t sub_100043220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013CDF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004326C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if ((a5 >> 6) - 1 >= 2)
  {
    if (a5 >> 6)
      return result;
    swift_retain(a3);
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for AirDropDescriptionView.Subtitle(uint64_t a1)
{
  return sub_1000432C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_1000432C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  int v5;
  uint64_t result;

  v5 = a5 >> 6;
  if (v5 == 2 || v5 == 1)
    return swift_bridgeObjectRelease(a2);
  if (!(a5 >> 6))
  {
    swift_bridgeObjectRelease(a2);
    return swift_release(a3);
  }
  return result;
}

uint64_t initializeWithCopy for AirDropDescriptionView.Subtitle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10004326C(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AirDropDescriptionView.Subtitle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10004326C(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1000432C8(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AirDropDescriptionView.Subtitle(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1000432C8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropDescriptionView.Subtitle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 125);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirDropDescriptionView.Subtitle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 125;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_1000434DC(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 32) >> 6;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_1000434F8(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x3Fu;
  return result;
}

uint64_t sub_100043508(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropDescriptionView.Subtitle()
{
  return &type metadata for AirDropDescriptionView.Subtitle;
}

uint64_t *sub_100043548(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_100008F88(&qword_10013CE08);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v15 = *(uint64_t *)((char *)a2 + v9);
    v16 = *((_QWORD *)v14 + 1);
    v17 = *((_QWORD *)v14 + 2);
    v18 = *((_QWORD *)v14 + 3);
    v19 = v14[32];
    swift_bridgeObjectRetain(v12);
    sub_10004326C(v15, v16, v17, v18, v19);
    *(_QWORD *)v13 = v15;
    *((_QWORD *)v13 + 1) = v16;
    *((_QWORD *)v13 + 2) = v17;
    *((_QWORD *)v13 + 3) = v18;
    v13[32] = v19;
  }
  return a1;
}

uint64_t sub_100043628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v4 = sub_100008F88(&qword_10013CE08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + *(int *)(a2 + 20) + 8), v5, v6, v7, v8, v9, v10, v11);
  v12 = a1 + *(int *)(a2 + 24);
  return sub_1000432C8(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_BYTE *)(v12 + 32));
}

uint64_t sub_10004368C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v6 = sub_100008F88(&qword_10013CE08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = *(_QWORD *)(a2 + v8);
  v15 = *(_QWORD *)(a2 + v8 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(_BYTE *)(v13 + 32);
  swift_bridgeObjectRetain(v11);
  sub_10004326C(v14, v15, v16, v17, v18);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 24) = v17;
  *(_BYTE *)(v12 + 32) = v18;
  return a1;
}

uint64_t sub_100043740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;

  v6 = sub_100008F88(&qword_10013CE08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  v19 = *(int *)(a3 + 24);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_QWORD *)(v21 + 16);
  v25 = *(_QWORD *)(v21 + 24);
  v26 = *(_BYTE *)(v21 + 32);
  sub_10004326C(*(_QWORD *)v21, v23, v24, v25, v26);
  v27 = *(_QWORD *)v20;
  v28 = *(_QWORD *)(v20 + 8);
  v29 = *(_QWORD *)(v20 + 16);
  v30 = *(_QWORD *)(v20 + 24);
  *(_QWORD *)v20 = v22;
  *(_QWORD *)(v20 + 8) = v23;
  *(_QWORD *)(v20 + 16) = v24;
  *(_QWORD *)(v20 + 24) = v25;
  v31 = *(_BYTE *)(v20 + 32);
  *(_BYTE *)(v20 + 32) = v26;
  sub_1000432C8(v27, v28, v29, v30, v31);
  return a1;
}

uint64_t sub_10004381C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v6 = sub_100008F88(&qword_10013CE08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  return a1;
}

uint64_t sub_100043894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unsigned __int8 v29;

  v6 = sub_100008F88(&qword_10013CE08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_BYTE *)(v22 + 32);
  v24 = *(_QWORD *)v21;
  v25 = *(_QWORD *)(v21 + 8);
  v26 = *(_QWORD *)(v21 + 16);
  v27 = *(_QWORD *)(v21 + 24);
  v28 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v28;
  v29 = *(_BYTE *)(v21 + 32);
  *(_BYTE *)(v21 + 32) = v23;
  sub_1000432C8(v24, v25, v26, v27, v29);
  return a1;
}

uint64_t sub_100043930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004393C);
}

uint64_t sub_10004393C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100008F88(&qword_10013CE08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000439CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000439D8);
}

uint64_t sub_1000439D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100008F88(&qword_10013CE08);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AirDropDescriptionView(uint64_t a1)
{
  uint64_t result;

  result = qword_10013CE68;
  if (!qword_10013CE68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirDropDescriptionView);
  return result;
}

void sub_100043A94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100043B10(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000EABF8;
    v4[2] = &unk_1000EAC10;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100043B10(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10013CE78)
  {
    v2 = sub_100043B68();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for CGFloat, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10013CE78);
  }
}

unint64_t sub_100043B68()
{
  unint64_t result;

  result = qword_10013CE80;
  if (!qword_10013CE80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10013CE80);
  }
  return result;
}

uint64_t sub_100043BAC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112CDC, 1);
}

uint64_t sub_100043BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v19;
  double v20;

  v1 = sub_100008F88((uint64_t *)&unk_100140CC0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AirDropDescriptionView(0);
  v7 = __chkstk_darwin(v5, v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + *(int *)(v7 + 24);
  if (*(unsigned __int8 *)(v10 + 32) > 0x3Fu)
  {
    v12 = sub_100008F88(&qword_10013CE08);
    ScaledMetric.wrappedValue.getter(&v20, v12);
    v13 = v20;
    v14 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
    v11 = static Font.system(size:weight:design:)(0, 1, v4, v13);
    sub_10000CC5C((uint64_t)v4, (uint64_t *)&unk_100140CC0);
  }
  else
  {
    v11 = *(_QWORD *)(v10 + 16);
    sub_1000452FC(v0, (uint64_t)v9);
    if (v11)
    {
      swift_retain(v11);
    }
    else
    {
      v15 = sub_100008F88(&qword_10013CE08);
      ScaledMetric.wrappedValue.getter(&v20, v15);
      v16 = v20;
      v17 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 1, 1, v17);
      v11 = static Font.system(size:weight:design:)(0, 1, v4, v16);
      sub_10000CC5C((uint64_t)v4, (uint64_t *)&unk_100140CC0);
    }
    sub_100045340((uint64_t)v9);
  }
  return v11;
}

void sub_100043D68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v2 = sub_100008F88(&qword_10013CEC0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = __chkstk_darwin(v4, v5);
  __chkstk_darwin(v6, v7);
  v8 = sub_100008F88(&qword_10013CEC8);
  v10 = __chkstk_darwin(v8, v9);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v15 - v12;
  if (qword_10013AD00 != -1)
    swift_once(&qword_10013AD00, sub_10005F154);
  sub_100043FA8(qword_100147F48, (uint64_t)v13);
  sub_100043BBC();
  v14 = (char *)&loc_100043EAC
      + 4
      * byte_1000EABC0[*(unsigned __int8 *)(a1
                                          + *(int *)(type metadata accessor for AirDropDescriptionView(0) + 24)
                                          + 32) >> 6];
  __asm { BR              X12 }
}

uint64_t sub_100043FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _TtC9AirDropUI33AirDropTransferSessionsController *v36;
  _TtC9AirDropUI33AirDropTransferSessionsController *v37;
  char v38;
  uint64_t v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _TtC9AirDropUI33AirDropTransferSessionsController *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t KeyPath;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _TtC9AirDropUI33AirDropTransferSessionsController *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  _TtC9AirDropUI33AirDropTransferSessionsController *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD v86[3];

  v85 = a2;
  v80 = sub_100008F88(&qword_10013CEE0);
  __chkstk_darwin(v80, v4);
  v84 = (uint64_t *)((char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Text.TruncationMode(0);
  v82 = *(_QWORD *)(v6 - 8);
  v83 = v6;
  __chkstk_darwin(v6, v7);
  v81 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100008F88((uint64_t *)&unk_100141170);
  __chkstk_darwin(v79, v9);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t *)(v2 + *(int *)(type metadata accessor for AirDropDescriptionView(0) + 20));
  v21 = v20[1];
  if (v21)
  {
    v22 = *v20;
    v23 = v20[1];
  }
  else
  {
    v24 = String.LocalizationValue.init(stringLiteral:)(0x706F7244726941, 0xE700000000000000);
    static Locale.current.getter(v24);
    v22 = String.init(localized:table:bundle:locale:comment:)(v19, 0xD000000000000011, 0x80000001000F10B0, 0, v15, 0, 0, 256);
  }
  v86[0] = v22;
  v86[1] = v23;
  v25 = sub_100044F4C();
  swift_bridgeObjectRetain(v21);
  v26 = Text.init<A>(_:)(v86, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = Text.font(_:)(a1, v26, v27, v32, v29);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_100044F90(v26, v28, v32);
  swift_bridgeObjectRelease(v30, v40, v41, v42, v43, v44, v45, v46);
  v47 = static Color.primary.getter();
  v48 = Text.foregroundColor(_:)(v47, v33, v35, v39, v37);
  v50 = v49;
  LOBYTE(v30) = v51;
  v78 = v52;
  swift_release(v47);
  LOBYTE(v47) = v30 & 1;
  sub_100044F90(v33, v35, v39);
  swift_bridgeObjectRelease(v37, v53, v54, v55, v56, v57, v58, v59);
  KeyPath = swift_getKeyPath(&unk_1000EAC78);
  v62 = v81;
  v61 = v82;
  v63 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, enum case for Text.TruncationMode.tail(_:), v83);
  v64 = swift_getKeyPath(&unk_1000EACA8);
  v65 = v84;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))((char *)v84 + *(int *)(v80 + 28), v62, v63);
  *v65 = v64;
  sub_10000CC18((uint64_t)v65, (uint64_t)&v11[*(int *)(v79 + 36)], &qword_10013CEE0);
  *(_QWORD *)v11 = v48;
  *((_QWORD *)v11 + 1) = v50;
  v11[16] = v47;
  v66 = v78;
  *((_QWORD *)v11 + 3) = v78;
  *((_QWORD *)v11 + 4) = KeyPath;
  *((_QWORD *)v11 + 5) = 1;
  v11[48] = 0;
  sub_1000452A8(v48, v50, v47);
  swift_bridgeObjectRetain(v66);
  swift_retain(KeyPath);
  sub_10000CC5C((uint64_t)v65, &qword_10013CEE0);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
  sub_100044F90(v48, v50, v47);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v66, v67, v68, v69, v70, v71, v72, v73);
  v74 = static Alignment.leading.getter();
  sub_1000BFB48(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v85, 0.0, 1, 0.0, 1, v74, v75);
  return sub_10000CC5C((uint64_t)v11, (uint64_t *)&unk_100141170);
}

void sub_1000443B4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;

  v35 = a3;
  v33 = a2;
  v36 = a1;
  v39 = sub_100008F88(&qword_10013CED8);
  __chkstk_darwin(v39, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100008F88(&qword_10013CEE0);
  __chkstk_darwin(v25, v7);
  v31 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Text.TruncationMode(0);
  v28 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30, v9);
  v27 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100008F88((uint64_t *)&unk_100141170);
  __chkstk_darwin(v24, v11);
  v26 = sub_100008F88((uint64_t *)&unk_100141160);
  __chkstk_darwin(v26, v12);
  v32 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100008F88(&qword_10013CEE8);
  v15 = __chkstk_darwin(v37, v14);
  v29 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v34 = (char *)&v24 - v18;
  v43 = sub_100008F88(&qword_10013CEF0);
  __chkstk_darwin(v43, v19);
  v38 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100008F88(&qword_10013CEF8);
  __chkstk_darwin(v41, v21);
  v42 = (char *)&v24 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (char *)sub_10004463C
      + 4
      * word_1000EABC4[*(unsigned __int8 *)(v3
                                          + *(int *)(type metadata accessor for AirDropDescriptionView(0) + 24)
                                          + 32) >> 6];
  v40 = v6;
  __asm { BR              X10 }
}

uint64_t sub_10004463C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _TtC9AirDropUI33AirDropTransferSessionsController *v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  char v19;
  uint64_t v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _TtC9AirDropUI33AirDropTransferSessionsController *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _TtC9AirDropUI33AirDropTransferSessionsController *v77;
  _TtC9AirDropUI33AirDropTransferSessionsController *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _TtC9AirDropUI33AirDropTransferSessionsController *v84;
  _TtC9AirDropUI33AirDropTransferSessionsController *v85;
  char v86;
  uint64_t v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _TtC9AirDropUI33AirDropTransferSessionsController *v100;
  _TtC9AirDropUI33AirDropTransferSessionsController *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  swift_bridgeObjectRetain(v1);
  *(_QWORD *)(v0 + 88) = v2;
  if ((*(_DWORD *)(v0 + 96) & 1) != 0)
  {
    *(_QWORD *)(v0 + 352) = v4;
    *(_QWORD *)(v0 + 360) = v1;
    v73 = sub_100044F4C();
    v74 = Text.init<A>(_:)(v0 + 352, &type metadata for String, v73);
    v76 = v75;
    v78 = v77;
    v80 = v79 & 1;
    v81 = Text.font(_:)(*(_QWORD *)(v0 + 104), v74, v75, v80, v77);
    v83 = v82;
    v85 = v84;
    v87 = v86 & 1;
    sub_100044F90(v74, v76, v80);
    swift_bridgeObjectRelease(v78, v88, v89, v90, v91, v92, v93, v94);
    v95 = static Color.primary.getter();
    v96 = Text.foregroundColor(_:)(v95, v81, v83, v87, v85);
    v98 = v97;
    LOBYTE(v78) = v99;
    v101 = v100;
    swift_release(v95);
    LOBYTE(v78) = v78 & 1;
    sub_100044F90(v81, v83, v87);
    swift_bridgeObjectRelease(v85, v102, v103, v104, v105, v106, v107, v108);
    *(_QWORD *)(v5 - 136) = v96;
    *(_QWORD *)(v5 - 128) = v98;
    *(_BYTE *)(v5 - 120) = (_BYTE)v78;
    *(_QWORD *)(v5 - 112) = v101;
    *(_QWORD *)(v5 - 104) = 0x3FE0000000000000;
    v109 = static Alignment.leading.getter();
    sub_1000BFBF8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v0 + 200, 0.0, 1, 0.0, 1, v109, v110);
    sub_100044F90(v96, v98, (char)v78);
    swift_bridgeObjectRelease(v101, v111, v112, v113, v114, v115, v116, v117);
    v118 = *(_OWORD *)(v0 + 296);
    v119 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 448) = v118;
    *(_OWORD *)(v0 + 464) = v119;
    *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 496) = *(_QWORD *)(v0 + 344);
    v120 = *(_OWORD *)(v0 + 232);
    v121 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 384) = v120;
    *(_OWORD *)(v0 + 400) = v121;
    v122 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 432) = v122;
    v123 = *(_OWORD *)(v0 + 216);
    *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 200);
    *(_OWORD *)(v0 + 368) = v123;
    v124 = *(_OWORD *)(v0 + 464);
    v125 = *(_OWORD *)(v0 + 480);
    v126 = *(_QWORD *)(v0 + 128);
    v127 = *(_QWORD *)(v0 + 136);
    *(_OWORD *)(v127 + 96) = v118;
    *(_OWORD *)(v127 + 112) = v124;
    *(_OWORD *)(v127 + 128) = v125;
    *(_QWORD *)(v127 + 144) = *(_QWORD *)(v0 + 496);
    v128 = *(_OWORD *)(v0 + 400);
    v129 = *(_OWORD *)(v0 + 416);
    *(_OWORD *)(v127 + 32) = v120;
    *(_OWORD *)(v127 + 48) = v128;
    v130 = *(_OWORD *)(v0 + 432);
    *(_OWORD *)(v127 + 64) = v129;
    *(_OWORD *)(v127 + 80) = v130;
    v131 = *(_OWORD *)(v0 + 368);
    *(_OWORD *)v127 = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v127 + 16) = v131;
    *(_WORD *)(v127 + 152) = 256;
    swift_storeEnumTagMultiPayload(v127, v126, 1);
    v132 = sub_100008F88(&qword_10013CF00);
    v133 = sub_10000C20C(&qword_10013CF08, &qword_10013CEE8, (void (*)(void))sub_100044FA0);
    v134 = sub_10000C20C(&qword_10013CF48, &qword_10013CF00, (void (*)(void))sub_1000450CC);
    v72 = *(_QWORD *)(v0 + 120);
    _ConditionalContent<>.init(storage:)(v127, *(_QWORD *)(v0 + 112), v132, v133, v134);
  }
  else
  {
    *(_QWORD *)(v0 + 352) = v4;
    *(_QWORD *)(v0 + 360) = v1;
    v6 = sub_100044F4C();
    v7 = Text.init<A>(_:)(v0 + 352, &type metadata for String, v6);
    v9 = v8;
    v11 = v10;
    v13 = v12 & 1;
    v14 = Text.font(_:)(*(_QWORD *)(v0 + 104), v7, v8, v13, v10);
    v16 = v15;
    v18 = v17;
    v20 = v19 & 1;
    sub_100044F90(v7, v9, v13);
    swift_bridgeObjectRelease(v11, v21, v22, v23, v24, v25, v26, v27);
    v28 = static Color.primary.getter();
    v29 = Text.foregroundColor(_:)(v28, v14, v16, v20, v18);
    *(_QWORD *)(v0 + 96) = v30;
    *(_QWORD *)(v0 + 104) = v29;
    v32 = v31;
    LOBYTE(v7) = v33;
    swift_release(v28);
    LOBYTE(v28) = v7 & 1;
    sub_100044F90(v14, v16, v20);
    swift_bridgeObjectRelease(v18, v34, v35, v36, v37, v38, v39, v40);
    KeyPath = swift_getKeyPath(&unk_1000EAC78);
    v42 = *(_QWORD *)(v0 + 24);
    v43 = *(_QWORD *)(v0 + 32);
    v44 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v42, enum case for Text.TruncationMode.tail(_:), v44);
    v45 = swift_getKeyPath(&unk_1000EACA8);
    v46 = *(uint64_t **)(v0 + 56);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))((char *)v46 + *(int *)(*(_QWORD *)(v0 + 8) + 28), v42, v44);
    *v46 = v45;
    sub_10000CC18((uint64_t)v46, v3 + *(int *)(*(_QWORD *)v0 + 36), &qword_10013CEE0);
    v48 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 96);
    v47 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)v3 = v47;
    *(_QWORD *)(v3 + 8) = v32;
    v49 = v32;
    v50 = v28;
    *(_BYTE *)(v3 + 16) = v28;
    *(_QWORD *)(v3 + 24) = v48;
    *(_QWORD *)(v3 + 32) = KeyPath;
    v51 = KeyPath;
    *(_QWORD *)(v3 + 40) = *(_QWORD *)(v0 + 72);
    *(_BYTE *)(v3 + 48) = 0;
    v52 = v49;
    v53 = v3;
    v54 = v50;
    sub_1000452A8(v47, v49, v50);
    swift_bridgeObjectRetain(v48);
    swift_retain(v51);
    sub_10000CC5C((uint64_t)v46, &qword_10013CEE0);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    sub_100044F90(*(_QWORD *)(v0 + 104), v52, v54);
    swift_release(v51);
    swift_bridgeObjectRelease(v48, v55, v56, v57, v58, v59, v60, v61);
    v62 = *(_QWORD *)(v0 + 64);
    sub_10000CC18(v53, v62, (uint64_t *)&unk_100141170);
    *(_QWORD *)(v62 + *(int *)(*(_QWORD *)(v0 + 16) + 36)) = 0x3FE0000000000000;
    v63 = sub_10000CC5C(v53, (uint64_t *)&unk_100141170);
    v64 = ((uint64_t (*)(uint64_t))static Alignment.leading.getter)(v63);
    v65 = *(_QWORD *)(v0 + 40);
    sub_1000BFBA0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v65, 0.0, 1, 0.0, 1, v64, v66);
    sub_10000CC5C(v62, (uint64_t *)&unk_100141160);
    v67 = *(_QWORD *)(v0 + 80);
    sub_10000CBD4(v65, v67, &qword_10013CEE8);
    v68 = *(_QWORD *)(v0 + 136);
    sub_10000CC18(v67, v68, &qword_10013CEE8);
    swift_storeEnumTagMultiPayload(v68, *(_QWORD *)(v0 + 128), 0);
    v69 = sub_100008F88(&qword_10013CF00);
    v70 = sub_10000C20C(&qword_10013CF08, &qword_10013CEE8, (void (*)(void))sub_100044FA0);
    v71 = sub_10000C20C(&qword_10013CF48, &qword_10013CF00, (void (*)(void))sub_1000450CC);
    v72 = *(_QWORD *)(v0 + 120);
    _ConditionalContent<>.init(storage:)(v68, *(_QWORD *)(v0 + 112), v69, v70, v71);
    sub_10000CC5C(v67, &qword_10013CEE8);
  }
  v135 = *(_QWORD *)(v0 + 152);
  sub_10000CC18(v72, v135, &qword_10013CEF0);
  swift_storeEnumTagMultiPayload(v135, *(_QWORD *)(v0 + 144), 1);
  v136 = sub_100045154();
  _ConditionalContent<>.init(storage:)(v135, &type metadata for EmptyView, *(_QWORD *)(v0 + 160), &protocol witness table for EmptyView, v136);
  return sub_10000CC5C(v72, &qword_10013CEF0);
}

void sub_100044CC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (!(v1 | v3 | v5 | v2) && v4 == 192)
  {
    v6 = v0[19];
    swift_storeEnumTagMultiPayload(v6, v0[18], 0);
    v7 = sub_100045154();
    _ConditionalContent<>.init(storage:)(v6, &type metadata for EmptyView, v0[20], &protocol witness table for EmptyView, v7);
    JUMPOUT(0x100044CA4);
  }
  JUMPOUT(0x1000446CCLL);
}

uint64_t sub_100044D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  _TtC9AirDropUI33AirDropTransferSessionsController *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  _BYTE v41[16];

  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8, v9);
  v11 = &v41[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12, v13);
  v15 = &v41[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = String.LocalizationValue.init(stringLiteral:)(a3, a4);
  static Locale.current.getter(v16);
  v17 = String.init(localized:table:bundle:locale:comment:)(v15, 0xD000000000000011, 0x80000001000F10B0, 0, v11, 0, 0, 256);
  v19 = v18;
  if (a2)
  {
    v20 = a2;
  }
  else
  {
    v21 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000F10D0);
    static Locale.current.getter(v21);
    a1 = String.init(localized:table:bundle:locale:comment:)(v15, 0xD000000000000011, 0x80000001000F10B0, 0, v11, 0, 0, 256);
    v20 = v22;
  }
  v23 = sub_100008F88((uint64_t *)&unk_10013EBE0);
  v24 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1000E9370;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_1000452B8();
  *(_QWORD *)(v24 + 32) = a1;
  *(_QWORD *)(v24 + 40) = v20;
  swift_bridgeObjectRetain(a2);
  v25 = static String.localizedStringWithFormat(_:_:)(v17, v19, v24);
  swift_bridgeObjectRelease(v19, v26, v27, v28, v29, v30, v31, v32);
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v24, v33, v34, v35, v36, v37, v38, v39);
  return v25;
}

void sub_100044F08(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_100008F88(&qword_10013CEB8);
  sub_100043D68(v1);
}

unint64_t sub_100044F4C()
{
  unint64_t result;

  result = qword_10013FC90;
  if (!qword_10013FC90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10013FC90);
  }
  return result;
}

uint64_t sub_100044F90(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100044FA0()
{
  return sub_10000C20C(&qword_10013CF10, (uint64_t *)&unk_100141160, (void (*)(void))sub_100044FC4);
}

unint64_t sub_100044FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CF18;
  if (!qword_10013CF18)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100141170);
    sub_100045048();
    sub_10000CB94(&qword_10013CF40, &qword_10013CEE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013CF18);
  }
  return result;
}

unint64_t sub_100045048()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CF20;
  if (!qword_10013CF20)
  {
    v1 = sub_10000950C(&qword_10013CF28);
    sub_10000CB94(&qword_10013CF30, &qword_10013CF38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013CF20);
  }
  return result;
}

uint64_t sub_1000450CC()
{
  return sub_10000C20C(&qword_10013CF50, &qword_10013CF58, (void (*)(void))sub_1000450F0);
}

unint64_t sub_1000450F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CF60;
  if (!qword_10013CF60)
  {
    v1 = sub_10000950C(&qword_10013CF68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013CF60);
  }
  return result;
}

unint64_t sub_100045154()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CF70;
  if (!qword_10013CF70)
  {
    v1 = sub_10000950C(&qword_10013CEF0);
    sub_10000C20C(&qword_10013CF08, &qword_10013CEE8, (void (*)(void))sub_100044FA0);
    sub_10000C20C(&qword_10013CF48, &qword_10013CF00, (void (*)(void))sub_1000450CC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013CF70);
  }
  return result;
}

uint64_t sub_100045208()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_100045228(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for Text.TruncationMode(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  return EnvironmentValues.truncationMode.setter(v5);
}

uint64_t sub_1000452A8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

unint64_t sub_1000452B8()
{
  unint64_t result;

  result = qword_10013CF78;
  if (!qword_10013CF78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10013CF78);
  }
  return result;
}

uint64_t sub_1000452FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirDropDescriptionView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045340(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirDropDescriptionView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004537C()
{
  return sub_10000CB94(&qword_10013CF80, &qword_10013CF88, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_1000453AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for AirDropProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AirDropProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropProgressView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropProgressView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropProgressView()
{
  return &type metadata for AirDropProgressView;
}

uint64_t sub_100045508(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100112D20, 1);
}

uint64_t sub_100045518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;

  v8 = sub_100008F88(&qword_10013CF90);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    if (qword_10013AC50 != -1)
      swift_once(&qword_10013AC50, sub_10005EFBC);
    v12 = &xmmword_100147E30;
  }
  else
  {
    if (qword_10013AC58 != -1)
      swift_once(&qword_10013AC58, sub_10005EFDC);
    v12 = &xmmword_100147E50;
  }
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  v16 = *(_QWORD *)v12;
  v15 = *((_QWORD *)v12 + 1);
  v17 = static VerticalAlignment.center.getter();
  if (qword_10013ACA0 != -1)
    swift_once(&qword_10013ACA0, sub_10005F078);
  v18 = qword_100147EB0;
  *(_QWORD *)v11 = v17;
  *((_QWORD *)v11 + 1) = v18;
  v11[16] = 0;
  v19 = sub_100008F88(&qword_10013CF98);
  v20 = sub_1000456C0(a1, a2, a3 & 1, &v11[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.all.getter(v20);
  sub_10000CC18((uint64_t)v11, a4, &qword_10013CF90);
  v22 = a4 + *(int *)(sub_100008F88(&qword_10013CFA0) + 36);
  *(_BYTE *)v22 = v21;
  *(_QWORD *)(v22 + 8) = v16;
  *(_QWORD *)(v22 + 16) = v15;
  *(_QWORD *)(v22 + 24) = v14;
  *(_QWORD *)(v22 + 32) = v13;
  *(_BYTE *)(v22 + 40) = 0;
  return sub_10000CC5C((uint64_t)v11, &qword_10013CF90);
}

uint64_t sub_1000456C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double (*v58)(char *, uint64_t, uint64_t, __n128);
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  double (*v75)(char *, uint64_t, uint64_t, __n128);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  double (*v82)(char *, uint64_t, uint64_t, __n128);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  double (*v94)(char *, uint64_t, uint64_t, __n128);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;

  v89 = a4;
  v90 = a1;
  v6 = sub_100008F88(&qword_10013CFA8);
  v8 = __chkstk_darwin(v6, v7);
  v92 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v98 = (uint64_t *)((char *)&v84 - v11);
  v12 = type metadata accessor for DeviceLockState(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v84 - v19;
  KeyPath = swift_getKeyPath(&unk_1000EAD58);
  v22 = swift_getKeyPath(&unk_1000EAD80);
  v23 = swift_retain(a2);
  static Published.subscript.getter(v20, v23, KeyPath, v22);
  swift_release(a2);
  swift_release(KeyPath);
  v24 = swift_release(v22);
  v25 = enum case for DeviceLockState.unlocked(_:);
  v94 = *(double (**)(char *, uint64_t, uint64_t, __n128))(v13 + 104);
  v26.n128_f64[0] = v94(v17, enum case for DeviceLockState.unlocked(_:), v12, v24);
  LOBYTE(KeyPath) = static DeviceLockState.== infix(_:_:)(v20, v17, v26);
  v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v17, v12);
  v27(v20, v12);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  if ((KeyPath & 1) != 0)
  {
    v32 = type metadata accessor for AirDropTransferSession(0);
    v33 = sub_1000469E0();
    v34 = swift_retain(a2);
    v28 = ObservedObject.init(wrappedValue:)(v34, v32, v33);
    v30 = a3 & 1;
    v31 = 2;
  }
  v95 = v31;
  v96 = v29;
  v91 = v30;
  v97 = v28;
  v35 = static HorizontalAlignment.leading.getter();
  v36 = v98;
  *v98 = v35;
  v36[1] = 0;
  *((_BYTE *)v36 + 16) = 0;
  v37 = (uint64_t)v36 + *(int *)(sub_100008F88(&qword_10013CFB0) + 44);
  v88 = a3;
  v38 = a3 & 1;
  v39 = v90;
  sub_100045CBC(v90, a2, v38, v37);
  v40 = swift_getKeyPath(&unk_1000EAD58);
  v41 = swift_getKeyPath(&unk_1000EAD80);
  v42 = swift_retain(a2);
  static Published.subscript.getter(v20, v42, v40, v41);
  swift_release(a2);
  swift_release(v40);
  v43 = swift_release(v41);
  v44.n128_f64[0] = v94(v17, v25, v12, v43);
  v45 = static DeviceLockState.== infix(_:_:)(v20, v17, v44);
  v27(v17, v12);
  v27(v20, v12);
  v46 = 0;
  v93 = 0;
  v94 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if ((v45 & 1) != 0)
  {
    if ((sub_1000464A8(v39, a2) & 1) != 0)
    {
      v46 = 0;
      v93 = 0;
      v94 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
    }
    else
    {
      v55 = type metadata accessor for AirDropTransferSession(0);
      v56 = sub_1000469E0();
      v57 = swift_retain(a2);
      v46 = ObservedObject.init(wrappedValue:)(v57, v55, v56);
      v94 = v58;
      sub_100046A28();
      if (qword_10013AD10 != -1)
        swift_once(&qword_10013AD10, sub_10005F238);
      v59 = swift_retain(qword_100147F58);
      v93 = (void *)UIColor.init(_:)(v59);
      v60 = v88;
      if (qword_10013ABE0 != -1)
        swift_once(&qword_10013ABE0, sub_100023E74);
      v61 = qword_100147D90;
      v62 = swift_getKeyPath(&unk_1000EADA0);
      v63 = swift_getKeyPath(&unk_1000EADC8);
      static Published.subscript.getter(&v99, v61, v62, v63);
      swift_release(v62);
      swift_release(v63);
      v48 = v99;
      if (qword_10013AC98 != -1)
        swift_once(&qword_10013AC98, sub_10005F068);
      v64 = qword_100147EA8;
      v65 = static Alignment.trailing.getter();
      _FrameLayout.init(width:height:alignment:)(&v99, v64, 0, v64, 0, v65, v66);
      v49 = v99;
      v50 = v100;
      v51 = v101;
      v52 = v102;
      v47 = v60 & 1;
      v53 = v103;
      v54 = v104;
    }
  }
  v84 = v47;
  v85 = v49;
  v86 = v53;
  v87 = v50;
  v90 = v54;
  v88 = v51;
  v67 = v92;
  v68 = v52;
  sub_10000CC18((uint64_t)v98, v92, &qword_10013CFA8);
  v69 = v46;
  v70 = v89;
  v71 = v96;
  *v89 = v97;
  v70[1] = v71;
  v72 = v91;
  v70[2] = v91;
  v70[3] = 0;
  v70[4] = v95;
  *((_BYTE *)v70 + 40) = 0;
  v73 = sub_100008F88(&qword_10013CFB8);
  sub_10000CC18(v67, (uint64_t)v70 + *(int *)(v73 + 48), &qword_10013CFA8);
  v74 = (_QWORD *)((char *)v70 + *(int *)(v73 + 64));
  v75 = v94;
  *v74 = v46;
  v74[1] = (uint64_t)v75;
  v77 = v84;
  v76 = v85;
  v78 = (uint64_t)v93;
  v74[2] = v84;
  v74[3] = v78;
  v74[4] = v48;
  v74[5] = v76;
  v79 = v88;
  v74[6] = v87;
  v74[7] = v79;
  v80 = v86;
  v74[8] = v68;
  v74[9] = v80;
  v74[10] = v90;
  sub_1000468E0(v97, v96, v72, 0, v95);
  v81 = v93;
  v82 = v94;
  sub_100046930(v69, (uint64_t)v94, v77, v93);
  sub_10000CC5C((uint64_t)v98, &qword_10013CFA8);
  sub_100046960(v69, (uint64_t)v82, v77, v81);
  sub_10000CC5C(v92, &qword_10013CFA8);
  return sub_100046990(v97, v96, v91, 0, v95);
}

uint64_t sub_100045CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[48];

  v64 = a2;
  v62 = a1;
  v65 = type metadata accessor for Font.TextStyle(0);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65, v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AirDropDescriptionView(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008F88((uint64_t *)&unk_100140F90);
  v23 = __chkstk_darwin(v21, v22);
  v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v23, v26);
  v29 = (char *)&v55 - v28;
  v66 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = a3;
  if ((a3 & 1) != 0)
  {
    if (qword_10013AC30 != -1)
      v27 = swift_once(&qword_10013AC30, sub_10005EF78);
    v37 = qword_100147E10;
    v38 = static Alignment.center.getter(v27);
    v66 = 1;
    _FrameLayout.init(width:height:alignment:)(&v68, 0, 1, v37, 0, v38, v39);
    v30 = v68;
    v31 = v69;
    v32 = v70;
    v33 = v71;
    v34 = v72;
    v35 = v73;
  }
  v56 = v31;
  v57 = v32;
  v58 = v33;
  v59 = v34;
  v60 = v30;
  v61 = v35;
  v40 = String.LocalizationValue.init(stringLiteral:)(0x706F7244726941, 0xE700000000000000);
  static Locale.current.getter(v40);
  v41 = String.init(localized:table:bundle:locale:comment:)(v16, 0xD000000000000011, 0x80000001000F10B0, 0, v12, 0, 0, 256);
  v43 = v42;
  sub_1000460BC(v64, (uint64_t)v74);
  v67 = 0x402C000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v8, enum case for Font.TextStyle.subheadline(_:), v65);
  v44 = sub_100043B68();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v67, v8, &type metadata for CGFloat, v44);
  v45 = (uint64_t *)&v20[*(int *)(v17 + 20)];
  *v45 = v41;
  v45[1] = v43;
  v46 = sub_100046A7C((uint64_t)v74, (uint64_t)&v20[*(int *)(v17 + 24)]);
  v47 = static Alignment.leading.getter(v46);
  sub_1000BFDC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v25, 0.0, 1, 0.0, 1, v47, v48);
  sub_100045340((uint64_t)v20);
  sub_100046AB8((uint64_t)v25, (uint64_t)v29);
  sub_10000CC18((uint64_t)v29, (uint64_t)v25, (uint64_t *)&unk_100140F90);
  v49 = v66;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v49;
  v50 = v56;
  *(_QWORD *)(a4 + 16) = v60;
  *(_QWORD *)(a4 + 24) = v50;
  v51 = v58;
  *(_QWORD *)(a4 + 32) = v57;
  *(_QWORD *)(a4 + 40) = v51;
  v52 = v61;
  *(_QWORD *)(a4 + 48) = v59;
  *(_QWORD *)(a4 + 56) = v52;
  *(_BYTE *)(a4 + 64) = (v36 & 1) == 0;
  v53 = sub_100008F88(&qword_10013CFD8);
  sub_10000CC18((uint64_t)v25, a4 + *(int *)(v53 + 48), (uint64_t *)&unk_100140F90);
  sub_10000CC5C((uint64_t)v29, (uint64_t *)&unk_100140F90);
  return sub_10000CC5C((uint64_t)v25, (uint64_t *)&unk_100140F90);
}

uint64_t sub_1000460BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  int *v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  char v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  int *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = a2;
  v56 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a1);
  v3 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56, v4);
  v6 = (uint64_t *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v56 - v18;
  KeyPath = swift_getKeyPath(&unk_1000EADE8);
  v21 = swift_getKeyPath(&unk_1000EAE10);
  v22 = swift_retain(a1);
  static Published.subscript.getter(v10, v22, KeyPath, v21);
  swift_release(a1);
  swift_release(KeyPath);
  v23 = swift_release(v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1, v11, v23) != 1)
  {
    v41 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v41(v19, v10, v11);
    v41(v16, v19, v11);
    if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v16, v11) == enum case for SFAirDropSend.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v16, v11);
      swift_bridgeObjectRelease(*((_TtC9AirDropUI33AirDropTransferSessionsController **)v16 + 1), v42, v43, v44, v45, v46, v47, v48);
      v49 = (int *)sub_100008F88(&qword_10013BCA0);
      v50 = &v16[v49[12]];
      v51 = &v16[v49[16]];
      v32 = *(_QWORD *)v51;
      v33 = *((_QWORD *)v51 + 1);
      v52 = &v16[v49[20]];
      v53 = type metadata accessor for SFAirDrop.DeclineAction(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
      v54 = type metadata accessor for SFAirDrop.Progress(0);
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v50, v54);
      v55 = v57;
      if (v33)
      {
        v39 = 0;
        v40 = 1;
        goto LABEL_11;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      v55 = v57;
    }
    v32 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
    v33 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
    result = swift_bridgeObjectRetain(v33);
    v40 = 0;
    v39 = 0x80;
    goto LABEL_11;
  }
  sub_10000CC5C((uint64_t)v10, &qword_10013C9E0);
  v24 = swift_getKeyPath(&unk_1000EAE30);
  v25 = swift_getKeyPath(&unk_1000EAE58);
  v26 = swift_retain(a1);
  static Published.subscript.getter(v6, v26, v24, v25);
  swift_release(a1);
  swift_release(v24);
  v27 = swift_release(v25);
  v28 = v56;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, __n128))(v3 + 88))(v6, v56, v27) == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v3 + 96))(v6, v28);
    v29 = (int *)sub_100008F88((uint64_t *)&unk_10013DC80);
    v30 = (char *)v6 + v29[12];
    v31 = (_QWORD *)((char *)v6 + v29[16]);
    v32 = *v31;
    v33 = v31[1];
    v34 = (char *)v6 + v29[20];
    v35 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
    v36 = type metadata accessor for SFAirDrop.Progress(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v30, v36);
    v37 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v6, v37);
    v39 = 0;
    v40 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v28);
    v32 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
    v33 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
    result = swift_bridgeObjectRetain(v33);
    v40 = 0;
    v39 = 64;
  }
  v55 = v57;
LABEL_11:
  *(_QWORD *)v55 = v32;
  *(_QWORD *)(v55 + 8) = v33;
  *(_QWORD *)(v55 + 16) = 0;
  *(_QWORD *)(v55 + 24) = v40;
  *(_BYTE *)(v55 + 32) = v39;
  return result;
}

uint64_t sub_1000464A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _TtC9AirDropUI33AirDropTransferSessionsController **v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  int v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  int v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  char *v43;
  uint64_t v44;
  int v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;

  v55 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v3 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55, v4);
  v6 = (uint64_t *)((char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v54 - v18;
  KeyPath = swift_getKeyPath(&unk_1000EADE8);
  v21 = swift_getKeyPath(&unk_1000EAE10);
  v22 = swift_retain(a2);
  static Published.subscript.getter(v10, v22, KeyPath, v21);
  swift_release(a2);
  swift_release(KeyPath);
  v23 = swift_release(v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1, v11, v23) == 1)
  {
    sub_10000CC5C((uint64_t)v10, &qword_10013C9E0);
    v24 = swift_getKeyPath(&unk_1000EAE30);
    v25 = swift_getKeyPath(&unk_1000EAE58);
    v26 = swift_retain(a2);
    static Published.subscript.getter(v6, v26, v24, v25);
    swift_release(a2);
    swift_release(v24);
    v27 = swift_release(v25);
    v28 = v55;
    v29 = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v3 + 88))(v6, v55, v27);
    if (v29 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
      goto LABEL_11;
    v30 = v29;
    if (v29 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v3 + 96))(v6, v28);
      v31 = (char *)v6 + *(int *)(sub_100008F88(&qword_10013BDF8) + 48);
      v32 = sub_100008F88((uint64_t *)&unk_10013DC90);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
      v33 = type metadata accessor for SFAirDrop.ContactInfo(0);
LABEL_12:
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v6, v33);
      return 1;
    }
    if (v29 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
    {
LABEL_11:
      (*(void (**)(_QWORD *, uint64_t))(v3 + 96))(v6, v28);
      v33 = sub_100008F88(&qword_10013CA70);
      goto LABEL_12;
    }
    result = 1;
    if (v30 != enum case for SFAirDropReceive.Transfer.State.created(_:)
      && v30 != enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
      && v30 != enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v28);
      return 0;
    }
    return result;
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v34(v19, v10, v11);
  v34((char *)v16, v19, v11);
  v35 = (*(uint64_t (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v12 + 88))(v16, v11);
  if (v35 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v12 + 96))(v16, v11);
    swift_bridgeObjectRelease(*v16, v36, v37, v38, v39, v40, v41, v42);
    v43 = (char *)v16 + *(int *)(sub_100008F88(&qword_10013CFD0) + 64);
    v44 = type metadata accessor for SFAirDrop.DeclineAction(0);
LABEL_9:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v43, v44);
    return 1;
  }
  v45 = v35;
  if (v35 == enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v12 + 96))(v16, v11);
    swift_bridgeObjectRelease(*v16, v46, v47, v48, v49, v50, v51, v52);
    v43 = (char *)v16 + *(int *)(sub_100008F88(&qword_10013CFC8) + 48);
    v44 = sub_100008F88((uint64_t *)&unk_10013DCA0);
    goto LABEL_9;
  }
  result = 1;
  if (v45 != enum case for SFAirDropSend.Transfer.State.created(_:)
    && v45 != enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v12 + 8))(v16, v11);
    return 0;
  }
  return result;
}

uint64_t sub_1000468CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100045518(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_1000468E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_retain(a2);
    return sub_100046918(a4, a5);
  }
  return result;
}

uint64_t sub_100046918(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

id sub_100046930(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id result;

  if (a2)
  {
    swift_retain(a2);
    return a4;
  }
  return result;
}

void sub_100046960(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    swift_release(a2);

  }
}

uint64_t sub_100046990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_release(a2);
    return sub_1000469C8(a4, a5);
  }
  return result;
}

uint64_t sub_1000469C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_1000469E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013C210;
  if (!qword_10013C210)
  {
    v1 = type metadata accessor for AirDropTransferSession(255);
    result = swift_getWitnessTable(&unk_1000EC8E4, v1);
    atomic_store(result, (unint64_t *)&qword_10013C210);
  }
  return result;
}

unint64_t sub_100046A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CFC0;
  if (!qword_10013CFC0)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013CFC0);
  }
  return result;
}

uint64_t sub_100046A7C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AirDropPlatter(a2, a1);
  return a2;
}

uint64_t sub_100046AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88((uint64_t *)&unk_100140F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100046B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CFE0;
  if (!qword_10013CFE0)
  {
    v1 = sub_10000950C(&qword_10013CFA0);
    sub_100046B70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013CFE0);
  }
  return result;
}

unint64_t sub_100046B70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013CFE8;
  if (!qword_10013CFE8)
  {
    v1 = sub_10000950C(&qword_10013CF90);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013CFE8);
  }
  return result;
}

uint64_t sub_100046BBC@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046D90((uint64_t)&unk_1000EB120, (uint64_t)&unk_1000EB148, a1);
}

uint64_t sub_100046BD0@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046D90((uint64_t)&unk_1000EAFB8, (uint64_t)&unk_1000EAFE0, a1);
}

uint64_t sub_100046BE4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000EB048);
  v4 = swift_getKeyPath(&unk_1000EB070);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(v4);
  return swift_release(KeyPath);
}

uint64_t sub_100046C48()
{
  return sub_100046C84((uint64_t)&unk_1000EB0D8, (uint64_t)&unk_1000EB100);
}

uint64_t sub_100046C5C()
{
  return sub_100046C84((uint64_t)&unk_1000EB168, (uint64_t)&unk_1000EB190);
}

uint64_t sub_100046C70()
{
  return sub_100046C84((uint64_t)&unk_1000EB090, (uint64_t)&unk_1000EB0B8);
}

uint64_t sub_100046C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  return v7;
}

double sub_100046CEC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[6];
  int v13;

  KeyPath = swift_getKeyPath(&unk_1000EB000);
  v4 = swift_getKeyPath(&unk_1000EB028);
  static Published.subscript.getter(v12, v1, KeyPath, v4);
  swift_release(v4);
  swift_release(KeyPath);
  v5 = v13;
  result = *(double *)v12;
  v7 = v12[1];
  v8 = v12[2];
  v9 = v12[3];
  v10 = v12[4];
  v11 = v12[5];
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(_DWORD *)(a1 + 96) = v5;
  return result;
}

uint64_t sub_100046D7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046D90((uint64_t)&unk_1000EB1B0, (uint64_t)&unk_1000EB1D8, a1);
}

uint64_t sub_100046D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  static Published.subscript.getter(a3, v3, KeyPath, v7);
  swift_release(v7);
  return swift_release(KeyPath);
}

void (*sub_100046DEC())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback);
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback);
  v3 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback
                 + 8);
  if (v2)
  {
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v0
                                                                                    + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback);
  }
  else
  {
    v5 = swift_allocObject(&unk_100125EB0, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v6 = *v1;
    v7 = v1[1];
    v4 = sub_10004E324;
    *v1 = (uint64_t)sub_10004E324;
    v1[1] = v5;
    swift_retain(v5);
    sub_100026F80(v6, v7);
  }
  sub_100027028(v2, v3);
  return v4;
}

void sub_100046E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  _BYTE v19[24];

  v8 = a7 + 16;
  swift_beginAccess(a7 + 16, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    v10 = (void *)Strong;
    KeyPath = swift_getKeyPath(&unk_1000EB168);
    v12 = swift_getKeyPath(&unk_1000EB190);
    v18 = a6;
    v13 = a6;
    v14 = v10;
    static Published.subscript.setter(&v18, v14, KeyPath, v12);
    v15 = swift_getKeyPath(&unk_1000EB0D8);
    v16 = swift_getKeyPath(&unk_1000EB100);
    static Published.subscript.getter(&v18, v14, v15, v16);
    swift_release(v16);
    swift_release(v15);
    v17 = v18;
    if (v18)
    {
      objc_msgSend(v18, "setShareOptions:", v13);
      swift_unknownObjectRelease(v17);
    }

  }
}

id sub_100046FA8()
{
  char *v0;
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask];
  if (v1)
  {
    swift_retain(*(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask]);
    Task.cancel()();
    swift_release(v1);
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for NearbySharingInteractionViewModel(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000472EC()
{
  return type metadata accessor for NearbySharingInteractionViewModel(0);
}

uint64_t type metadata accessor for NearbySharingInteractionViewModel(uint64_t a1)
{
  return sub_1000138D0(a1, (uint64_t *)&unk_10013D140, (uint64_t)&nominal type descriptor for NearbySharingInteractionViewModel);
}

void sub_100047308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, uint64_t, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  uint64_t v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_BYTE *, uint64_t);
  uint64_t KeyPath;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  void (*v74)(_BYTE *, uint64_t);
  uint64_t v75;
  _BYTE *v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _TtC9AirDropUI33AirDropTransferSessionsController *v86;
  _TtC9AirDropUI33AirDropTransferSessionsController *v87;
  SEL v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _TtC9AirDropUI33AirDropTransferSessionsController *v101;
  SEL v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  void (*v116)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE v120[12];
  int v121;
  os_log_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  void (*v130)(_BYTE *, uint64_t);
  void (*v131)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v132;
  uint64_t v133;
  id v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;

  v133 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v129 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133, v2);
  v132 = &v120[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4, v5);
  v135 = &v120[-v6];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = &v120[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v128 = &v120[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16, v17);
  v127 = &v120[-v18];
  __chkstk_darwin(v19, v20);
  v125 = &v120[-v21];
  __chkstk_darwin(v22, v23);
  v25 = &v120[-v24];
  __chkstk_darwin(v26, v27);
  v29 = &v120[-v28];
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100009558(v30, (uint64_t)qword_100148040);
  v32 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16);
  v32(v29, a1, v12);
  v131 = v32;
  v33 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v32)(v25, a1, v12);
  v124 = v31;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter();
  v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    v37 = swift_slowAlloc(22, -1);
    v126 = a1;
    v38 = v37;
    v123 = swift_slowAlloc(64, -1);
    v137 = v123;
    *(_DWORD *)v38 = 136315394;
    v130 = (void (*)(_BYTE *, uint64_t))(v38 + 4);
    v122 = v34;
    SFAirDrop.NearbySharingInteraction.id.getter();
    v39 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v7, v39);
    v121 = v36;
    v42 = v41;
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
    v136 = sub_10003A834(v40, (unint64_t)v42, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
    swift_bridgeObjectRelease(v42, v43, v44, v45, v46, v47, v48, v49);
    v50 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    v51 = ((uint64_t (*)(_BYTE *, uint64_t))v50)(v29, v12);
    *(_WORD *)(v38 + 12) = 2080;
    v130 = (void (*)(_BYTE *, uint64_t))(v38 + 14);
    v52 = v135;
    SFAirDrop.NearbySharingInteraction.state.getter(v51);
    v53 = sub_100008694((unint64_t *)&unk_1001405E0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
    v54 = v133;
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v133, v53);
    v57 = v56;
    v58 = v129;
    (*(void (**)(_QWORD *, uint64_t))(v129 + 8))(v52, v54);
    v136 = sub_10003A834(v55, (unint64_t)v57, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
    swift_bridgeObjectRelease(v57, v59, v60, v61, v62, v63, v64, v65);
    v130 = v50;
    v50(v25, v12);
    v66 = v122;
    _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v121, "Updating nearby sharing interaction ID: %s with state: %s", (uint8_t *)v38, 0x16u);
    v67 = v123;
    swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    v68 = v38;
    a1 = v126;
    swift_slowDealloc(v68, -1, -1);

  }
  else
  {
    v69 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    v69(v29, v12);
    v130 = v69;
    v69(v25, v12);

    v54 = v133;
    v52 = v135;
    v58 = v129;
  }
  KeyPath = swift_getKeyPath(&unk_1000EAFB8);
  v71 = swift_getKeyPath(&unk_1000EAFE0);
  static Published.subscript.getter(v52, v134, KeyPath, v71);
  swift_release(v71);
  swift_release(KeyPath);
  v72 = v132;
  SFAirDrop.NearbySharingInteraction.state.getter(v73);
  LOBYTE(KeyPath) = static SFAirDrop.NearbySharingInteraction.State.< infix(_:_:)(v52, v72);
  v74 = *(void (**)(_BYTE *, uint64_t))(v58 + 8);
  v74(v72, v54);
  v74(v52, v54);
  if ((KeyPath & 1) != 0)
  {
    v75 = v58;
    v76 = v125;
    v131(v125, a1, v12);
    v77 = v134;
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.default.getter();
    v80 = v79;
    if (os_log_type_enabled(v78, v79))
    {
      v81 = swift_slowAlloc(22, -1);
      v82 = swift_slowAlloc(64, -1);
      v124 = v82;
      v137 = v82;
      *(_DWORD *)v81 = 136315394;
      v122 = (os_log_t)(v81 + 4);
      LODWORD(v123) = v80;
      SFAirDrop.NearbySharingInteraction.state.getter(v82);
      v83 = sub_100008694((unint64_t *)&unk_1001405E0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
      v84 = dispatch thunk of CustomStringConvertible.description.getter(v133, v83);
      v85 = v76;
      v87 = v86;
      v74(v135, v133);
      v136 = sub_10003A834(v84, (unint64_t)v87, &v137);
      v126 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
      swift_bridgeObjectRelease(v87, v88, v89, v90, v91, v92, v93, v94);
      v130(v85, v12);
      *(_WORD *)(v81 + 12) = 2080;
      v95 = swift_getKeyPath(&unk_1000EAFB8);
      v96 = swift_getKeyPath(&unk_1000EAFE0);
      static Published.subscript.getter(v135, v77, v95, v96);
      v97 = v96;
      v54 = v133;
      swift_release(v97);
      swift_release(v95);
      v98 = dispatch thunk of CustomStringConvertible.description.getter(v54, v83);
      v100 = v99;
      v74(v135, v54);
      v136 = sub_10003A834(v98, v100, &v137);
      a1 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
      v101 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v100;
      v75 = v129;
      swift_bridgeObjectRelease(v101, v102, v103, v104, v105, v106, v107, v108);

      _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v123, "Nearby sharing interaction new state < previousState: %s < %s", (uint8_t *)v81, 0x16u);
      v109 = v124;
      swift_arrayDestroy(v124, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      v110 = v81;
      v52 = v135;
      swift_slowDealloc(v110, -1, -1);
    }
    else
    {
      v130(v76, v12);

    }
    SFAirDrop.NearbySharingInteraction.state.getter(v111);
    v112 = swift_getKeyPath(&unk_1000EAFB8);
    v113 = swift_getKeyPath(&unk_1000EAFE0);
    v114 = v132;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v75 + 16))(v132, v52, v54);
    static Published.subscript.setter(v114, v77, v112, v113);
    v74(v52, v54);
  }
  v115 = v127;
  v116 = (void (*)(_BYTE *, _BYTE *, uint64_t))v131;
  v131(v127, a1, v12);
  v117 = swift_getKeyPath(&unk_1000EB120);
  v118 = swift_getKeyPath(&unk_1000EB148);
  v119 = v128;
  v116(v128, v115, v12);
  static Published.subscript.setter(v119, v134, v117, v118);
  v130(v115, v12);
  dispatch thunk of ShockwaveAnimationCoordinator.update(using:)(a1);
  sub_100048A54();
}

uint64_t sub_100047B3C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t KeyPath;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t result;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _TtC9AirDropUI33AirDropTransferSessionsController *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint8_t *v44;
  uint64_t v45;
  int v46;
  os_log_t v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, _QWORD, uint64_t, __n128);
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (_QWORD *)((char *)v43 - v9);
  KeyPath = swift_getKeyPath(&unk_1000EAFB8);
  v12 = swift_getKeyPath(&unk_1000EAFE0);
  static Published.subscript.getter(v10, v0, KeyPath, v12);
  swift_release(v12);
  v13 = swift_release(KeyPath);
  v14 = enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:);
  v49 = *(void (**)(char *, _QWORD, uint64_t, __n128))(v3 + 104);
  v49(v7, enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:), v2, v13);
  v15 = sub_100008694((unint64_t *)&unk_10013D328, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v2, v15);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v7, v2);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v17)(v10, v2);
  if ((v16 & 1) == 0)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v19 = type metadata accessor for Logger(0);
    sub_100009558(v19, (uint64_t)qword_100148040);
    v20 = v1;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      v47 = v21;
      v24 = swift_slowAlloc(12, -1);
      v46 = v23;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v45 = v26;
      v48 = v17;
      *(_DWORD *)v25 = 136315138;
      v51 = v26;
      v43[1] = v25 + 4;
      v44 = v25;
      v27 = type metadata accessor for UUID(0);
      v28 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
      v31 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v30;
      v50 = sub_10003A834(v29, v30, &v51);
      v17 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);

      v21 = v47;
      v39 = v44;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v46, "Ending interaction with ID: %s", v44, 0xCu);
      v40 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {

    }
    ((void (*)(_QWORD *, uint64_t, uint64_t))v49)(v10, v14, v2);
    v41 = swift_getKeyPath(&unk_1000EAFB8);
    v42 = swift_getKeyPath(&unk_1000EAFE0);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 16))(v7, v10, v2);
    static Published.subscript.setter(v7, v20, v41, v42);
    return ((uint64_t (*)(_QWORD *, uint64_t))v17)(v10, v2);
  }
  return result;
}

uint64_t sub_100047EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[49] = a4;
  v5 = sub_100008F88(&qword_10013CB20);
  v4[50] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v4[51] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v4[52] = v7;
  v4[53] = v8;
  return swift_task_switch(sub_100047F40, v7, v8);
}

uint64_t sub_100047F40()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10013EC34);
  *(_QWORD *)(v0 + 432) = v1;
  *v1 = v0;
  v1[1] = sub_100047FA4;
  return sub_10007B00C(v0 + 16, 2);
}

uint64_t sub_100047FA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000487B8;
  else
    v4 = sub_100048004;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 416), *(_QWORD *)(v2 + 424));
}

uint64_t sub_100048004()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _TtC9AirDropUI33AirDropTransferSessionsController *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _TtC9AirDropUI33AirDropTransferSessionsController *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t KeyPath;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0 + 16;
  v46 = v0 + 160;
  v47 = v0 + 112;
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v2 = (__int128 *)(v0 + 256);
  v3 = *(void **)(v0 + 392);
  v4 = type metadata accessor for Logger(0);
  sub_100009558(v4, (uint64_t)qword_100148040);
  sub_10000CC18(v0 + 16, v0 + 64, &qword_10013D168);
  v5 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 392);
  if (v7)
  {
    type = v6;
    v9 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(64, -1);
    v48 = v44;
    *(_DWORD *)v9 = 136315394;
    sub_10000CC18(v0 + 64, v0 + 304, &qword_10013D168);
    v10 = sub_100008F88(&qword_10013D168);
    v11 = String.init<A>(describing:)(v0 + 304, v10);
    v13 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v12;
    *(_QWORD *)(v0 + 376) = sub_10003A834(v11, v12, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384);
    swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
    v1 = v0 + 16;
    sub_10000CC5C(v0 + 64, &qword_10013D168);
    *(_WORD *)(v9 + 12) = 2080;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    v25 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v24;
    *(_QWORD *)(v0 + 384) = sub_10003A834(v23, v24, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392);
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);

    _os_log_impl((void *)&_mh_execute_header, v5, type, "Suggesting content to be be shared with the nearby interaction: %s for interaction ID: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    v33 = v9;
    v2 = (__int128 *)(v0 + 256);
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    sub_10000CC5C(v0 + 64, &qword_10013D168);

  }
  v34 = *(void **)(v0 + 392);
  sub_10000CC18(v1, v47, &qword_10013D168);
  KeyPath = swift_getKeyPath(&unk_1000EB048);
  v36 = swift_getKeyPath(&unk_1000EB070);
  sub_10000CC18(v47, v46, &qword_10013D168);
  static Published.subscript.setter(v46, v34, KeyPath, v36);
  sub_10000CC5C(v47, &qword_10013D168);
  sub_10000CC18(v1, (uint64_t)v2, &qword_10013D168);
  if (*(_QWORD *)(v0 + 280))
  {
    v37 = v2[2];
    v38 = *v2;
    *(_OWORD *)(v0 + 224) = v2[1];
    *(_OWORD *)(v0 + 240) = v37;
    *(_OWORD *)(v0 + 208) = v38;
    v40 = *(_QWORD *)(v0 + 232);
    v39 = *(_QWORD *)(v0 + 240);
    sub_10004E098(v0 + 208, v40);
    v41 = (_QWORD *)swift_task_alloc(dword_10013EB1C);
    *(_QWORD *)(v0 + 448) = v41;
    *v41 = v0;
    v41[1] = sub_1000483E0;
    return sub_1000757B0(v40, v39);
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 408);
    sub_10000CC5C(v1, &qword_10013D168);
    swift_release(v43);
    sub_10000CC5C((uint64_t)v2, &qword_10013D168);
    swift_task_dealloc(*(_QWORD *)(v0 + 400));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000483E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100048438, *(_QWORD *)(v2 + 416), *(_QWORD *)(v2 + 424));
}

void sub_100048438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _TtC9AirDropUI33AirDropTransferSessionsController *v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSArray v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  int v29;
  NSURL *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(void **)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 408));
  KeyPath = swift_getKeyPath(&unk_1000EB090);
  v5 = swift_getKeyPath(&unk_1000EB0B8);
  *(_QWORD *)(v0 + 368) = v1;
  v6 = v3;
  static Published.subscript.setter(v0 + 368, v6, KeyPath, v5);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 240);
  sub_10000904C((_QWORD *)(v0 + 208), v7);
  v9 = (_TtC9AirDropUI33AirDropTransferSessionsController *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  v10 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_1000487F4((uint64_t)v9);
  swift_bridgeObjectRelease(v9, v11, v12, v13, v14, v15, v16, v17);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v2, 1, 1, v18);
  v20 = v6;
  v21.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10, v22, v23, v24, v25, v26, v27, v28);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v2, 1, v18);
  v31 = 0;
  if (v29 != 1)
  {
    v32 = *(_QWORD *)(v0 + 400);
    URL._bridgeToObjectiveC()(v30);
    v31 = v33;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v32, v18);
  }
  v34 = *(char **)(v0 + 392);
  v35 = objc_msgSend(objc_allocWithZone((Class)SFCollaborationItemsProvider), "initWithActivityItems:delegate:managedFileURL:isURLProviderSupported:", v21.super.isa, v34, v31, 0);

  v36 = OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider;
  v37 = *(void **)&v34[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider];
  *(_QWORD *)&v34[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider] = v35;

  v38 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PlaceholderSFCollaborationService()), "init");
  v39 = *(void **)&v34[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationService];
  *(_QWORD *)&v34[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationService] = v38;

  v40 = *(void **)&v34[v36];
  if (!v40)
  {
    v41 = 0;
    goto LABEL_12;
  }
  v41 = objc_msgSend(v40, "collaborationItems");
  if (v41)
  {
    v42 = sub_100008F88((uint64_t *)&unk_10013D2E0);
    v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

    if ((unint64_t)v43 >> 62)
    {
      if (v43 < 0)
        v59 = v43;
      else
        v59 = v43 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v43);
      v41 = (id)_CocoaArrayWrapper.endIndex.getter(v59);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v43, v60, v61, v62, v63, v64, v65, v66);
      if (v41)
      {
LABEL_7:
        if ((v43 & 0xC000000000000001) != 0)
        {
          v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
        }
        else
        {
          if (!*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v41 = *(id *)(v43 + 32);
          swift_unknownObjectRetain(v41);
        }
      }
    }
    else
    {
      v41 = *(id *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v41)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v43, v44, v45, v46, v47, v48, v49, v50);
  }
LABEL_12:
  v51 = *(void **)(v0 + 392);
  v52 = swift_getKeyPath(&unk_1000EB0D8);
  v53 = swift_getKeyPath(&unk_1000EB100);
  *(_QWORD *)(v0 + 352) = v41;
  v54 = v51;
  static Published.subscript.setter(v0 + 352, v54, v52, v53);
  v55 = swift_getKeyPath(&unk_1000EB0D8);
  v56 = swift_getKeyPath(&unk_1000EB100);
  static Published.subscript.getter((_QWORD *)(v0 + 360), v54, v55, v56);
  swift_release(v56);
  *(_QWORD *)&v57 = swift_release(v55).n128_u64[0];
  v58 = *(_QWORD *)(v0 + 360);
  if (v58)
  {
    objc_msgSend(*(id *)(v0 + 360), "registerChangeObserver:", *(_QWORD *)(v0 + 392), v57);
    swift_unknownObjectRelease(v58);
  }
  sub_10000CC5C(v0 + 16, &qword_10013D168);
  sub_10004D4EC(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  (*(void (**)(void))(v0 + 8))();
}

uint64_t sub_1000487B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000487F4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _OWORD v23[2];
  _QWORD *v24;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a1, v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v24 = _swiftEmptyArrayStorage;
  result = sub_100011F28(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v6 = sub_100018D44(0, (unint64_t *)&unk_10013D2F0, NSItemProvider_ptr);
        swift_dynamicCast(v23, &v22, v6, (char *)&type metadata for Any + 8, 7);
        v3 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
        {
          sub_100011F28(0, v3[2] + 1, 1);
          v3 = v24;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_100011F28(v7 > 1, v8 + 1, 1);
          v3 = v24;
        }
        v3[2] = v8 + 1;
        sub_10004E130(v23, &v3[4 * v8 + 4]);
      }
    }
    else
    {
      v9 = (id *)(a1 + 32);
      v10 = sub_100018D44(0, (unint64_t *)&unk_10013D2F0, NSItemProvider_ptr);
      do
      {
        v22 = *v9;
        v11 = v22;
        swift_dynamicCast(v23, &v22, v10, (char *)&type metadata for Any + 8, 7);
        v3 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
        {
          sub_100011F28(0, v3[2] + 1, 1);
          v3 = v24;
        }
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_100011F28(v12 > 1, v13 + 1, 1);
          v3 = v24;
        }
        v3[2] = v13 + 1;
        sub_10004E130(v23, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void sub_100048A54()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _TtC9AirDropUI33AirDropTransferSessionsController *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  _TtC9AirDropUI33AirDropTransferSessionsController *v60;
  uint64_t v61;
  _TtC9AirDropUI33AirDropTransferSessionsController *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  void (*v90)(char *, uint64_t);
  void *v91;
  uint64_t v92;
  _TtC9AirDropUI33AirDropTransferSessionsController *v93;
  uint64_t v94;
  _TtC9AirDropUI33AirDropTransferSessionsController *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void *v107;
  char *v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  SEL v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  char *v124;
  uint8_t *v125;
  uint8_t *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _TtC9AirDropUI33AirDropTransferSessionsController *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  void *v153;
  char v154[8];

  v1 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v1, v2);
  v138 = (uint64_t)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100008F88((uint64_t *)&unk_10013D300);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131, v4);
  v132 = (uint64_t *)((char *)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v137 = sub_100008F88(&qword_10013DED0);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137, v6);
  v134 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = v7;
  __chkstk_darwin(v8, v9);
  v136 = (char *)&v123 - v10;
  v11 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v139 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v141 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = (uint64_t *)((char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v123 - v21);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100009558(v23, (uint64_t)qword_100148040);
  v25 = v0;
  v140 = v24;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v129 = v11;
    v127 = v29;
    v142 = v29;
    v126 = v28;
    *(_DWORD *)v28 = 136315138;
    v125 = v28 + 4;
    KeyPath = swift_getKeyPath(&unk_1000EAFB8);
    v31 = swift_getKeyPath(&unk_1000EAFE0);
    v128 = v14;
    v32 = v31;
    static Published.subscript.getter(v22, v25, KeyPath, v31);
    swift_release(v32);
    swift_release(KeyPath);
    v33 = sub_100008694((unint64_t *)&unk_1001405E0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v15, v33);
    v36 = v35;
    v37 = v141;
    (*(void (**)(_QWORD *, uint64_t))(v141 + 8))(v22, v15);
    v153 = (void *)sub_10003A834(v34, v36, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154);
    v38 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v36;
    v14 = v128;
    swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);

    v46 = v27;
    v47 = v126;
    _os_log_impl((void *)&_mh_execute_header, v26, v46, "resolveContactDetailsIfNecessary: state: %s", v126, 0xCu);
    v48 = v127;
    swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
    v11 = v129;
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    v37 = v141;
  }
  v49 = swift_getKeyPath(&unk_1000EAFB8);
  v50 = swift_getKeyPath(&unk_1000EAFE0);
  static Published.subscript.getter(v18, v25, v49, v50);
  swift_release(v50);
  v51 = swift_release(v49);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, __n128))(v37 + 88))(v18, v15, v51) != enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
  {
    v55 = (*(uint64_t (**)(_QWORD *, uint64_t))(v37 + 8))(v18, v15);
    goto LABEL_10;
  }
  (*(void (**)(_QWORD *, uint64_t))(v37 + 96))(v18, v15);
  v52 = v139;
  v53 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v139 + 32))(v14, v18, v11);
  v54 = OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask;
  if (*(_QWORD *)&v25[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask])
  {
    v55 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v14, v11);
LABEL_10:
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Can not resolve remote person details without a connectionContext or a non-nil contactDetailsResolvingTask", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    return;
  }
  v59 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter(v53);
  if (v60)
  {
    v61 = v59;
    v62 = v60;
    v124 = v25;
    v63 = v132;
    *v132 = 1;
    v64 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v130 + 104))(v63, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v131);
    __chkstk_darwin(v64, v65);
    *(&v123 - 4) = v66;
    *(&v123 - 3) = v61;
    *(&v123 - 2) = (uint64_t)v62;
    *(&v123 - 1) = v67;
    v68 = v136;
    AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for ContactDetails, v63, sub_10004E140, &v123 - 6, &type metadata for ContactDetails);
    swift_bridgeObjectRelease(v62, v69, v70, v71, v72, v73, v74, v75);
    v76 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v138, 1, 1, v76);
    v77 = swift_allocObject(&unk_100125EB0, 24, 7);
    swift_unknownObjectWeakInit(v77 + 16, v25);
    v78 = v135;
    v79 = v134;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v134, v68, v137);
    type metadata accessor for MainActor(0);
    v80 = swift_retain(v77);
    v81 = static MainActor.shared.getter(v80);
    v82 = *(unsigned __int8 *)(v78 + 80);
    v83 = (v82 + 32) & ~v82;
    v84 = (v133 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
    v85 = swift_allocObject(&unk_100125ED8, v84 + 8, v82 | 7);
    *(_QWORD *)(v85 + 16) = v81;
    *(_QWORD *)(v85 + 24) = &protocol witness table for MainActor;
    v86 = v137;
    (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v85 + v83, v79, v137);
    *(_QWORD *)(v85 + v84) = v77;
    swift_release(v77);
    v87 = sub_1000CB748(v138, (uint64_t)&unk_10013D318, v85);
    v88 = *(_QWORD *)&v124[v54];
    *(_QWORD *)&v124[v54] = v87;
    v89 = swift_release(v88);
    (*(void (**)(char *, uint64_t, __n128))(v78 + 8))(v136, v86, v89);
    v90 = *(void (**)(char *, uint64_t))(v139 + 8);
LABEL_24:
    v90(v14, v11);
    return;
  }
  v91 = v25;
  v92 = SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceName.getter(v59);
  if (!v93)
  {
LABEL_21:
    v120 = Logger.logObject.getter(v92);
    v121 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v120, v121))
    {
      v122 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v122 = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "Can not resolve remote person details without a provided contact identifier or device model and identifier, is this a boop to meet?", v122, 2u);
      swift_slowDealloc(v122, -1, -1);
    }

    v90 = *(void (**)(char *, uint64_t))(v52 + 8);
    goto LABEL_24;
  }
  v94 = v92;
  v95 = v93;
  v96 = SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceModel.getter();
  if (!v97)
  {
    swift_bridgeObjectRelease(v95, 0, v98, v99, v100, v101, v102, v103);
    v52 = v139;
    goto LABEL_21;
  }
  v104 = v96;
  v105 = v97;
  v106 = v14;
  v107 = &_swiftEmptySetSingleton;
  v153 = &_swiftEmptySetSingleton;
  v108 = v106;
  v109 = SFAirDrop.NearbySharingInteraction.ConnectionContext.accountID.getter();
  if (v110)
  {
    sub_100089C58((uint64_t)&v142, v109, v110, 0);
    swift_bridgeObjectRelease(v143, v111, v112, v113, v114, v115, v116, v117);
    v107 = v153;
  }
  v118 = swift_getKeyPath(&unk_1000EB000);
  v119 = swift_getKeyPath(&unk_1000EB028);
  v142 = v94;
  v143 = v95;
  v144 = v104;
  v145 = v105;
  v146 = v107;
  v147 = 0u;
  v148 = 0u;
  v150 = 0;
  v151 = 0;
  v149 = 0x8000000000000000;
  v152 = 0;
  static Published.subscript.setter(&v142, v91, v118, v119);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v108, v11);
}

uint64_t sub_1000492EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[31] = a4;
  v5[32] = a5;
  v6 = sub_100008F88(&qword_10013D320);
  v5[33] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[34] = v7;
  v5[35] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v5[36] = v8;
  v5[37] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v5[38] = v9;
  v5[39] = v10;
  return swift_task_switch(sub_100049388, v9, v10);
}

uint64_t sub_100049388()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[32] + 16;
  v2 = sub_100008F88(&qword_10013DED0);
  AsyncStream.makeAsyncIterator()(v2);
  swift_beginAccess(v1, v0 + 28, 0, 0);
  v4 = static MainActor.shared.getter(v3);
  v0[40] = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[41] = v5;
  *v5 = v0;
  v5[1] = sub_100049448;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v4, &protocol witness table for MainActor, v0[33]);
}

uint64_t sub_100049448()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 320);
  swift_task_dealloc(*(_QWORD *)(*v0 + 328));
  swift_release(v2);
  return swift_task_switch(sub_10004949C, *(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 312));
}

uint64_t sub_10004949C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v18 = *(_QWORD *)(v0 + 32);
    v19 = *(_QWORD *)(v0 + 40);
    v20 = *(_QWORD *)(v0 + 48);
    v21 = *(_QWORD *)(v0 + 56);
    v22 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 80);
    v23 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = *(_DWORD *)(v0 + 112);
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 256) + 16);
    if (Strong)
    {
      v9 = Strong;
      KeyPath = swift_getKeyPath(&unk_1000EB000);
      v10 = swift_getKeyPath(&unk_1000EB028);
      *(_QWORD *)(v0 + 120) = v2;
      *(_QWORD *)(v0 + 128) = v1;
      *(_QWORD *)(v0 + 136) = v18;
      *(_QWORD *)(v0 + 144) = v19;
      *(_QWORD *)(v0 + 152) = v20;
      *(_QWORD *)(v0 + 160) = v21;
      *(_QWORD *)(v0 + 168) = v22;
      *(_QWORD *)(v0 + 176) = v23;
      *(_QWORD *)(v0 + 184) = v3;
      *(_QWORD *)(v0 + 192) = v5;
      *(_QWORD *)(v0 + 200) = v4;
      *(_QWORD *)(v0 + 208) = v6;
      *(_DWORD *)(v0 + 216) = v7;
      v11 = static Published.subscript.setter(v0 + 120, v9, KeyPath, v10);
    }
    else
    {
      v11 = sub_10004E2AC(v2, v1, v18, v19, v20, v21, v22, v23, v3, v5, v4, v6);
    }
    v15 = static MainActor.shared.getter(v11);
    *(_QWORD *)(v0 + 320) = v15;
    v16 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 328) = v16;
    *v16 = v0;
    v16[1] = sub_100049448;
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, v15, &protocol witness table for MainActor, *(_QWORD *)(v0 + 264));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 280);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(v13, *(_QWORD *)(v0 + 264));
    swift_release(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void sub_100049878(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[18];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v22[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100049AB8(319, &qword_10013D150, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v5 <= 0x3F)
    {
      v22[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100049AB8(319, &qword_10013D158, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v7 <= 0x3F)
      {
        v22[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100030940(319, &qword_10013D160, &qword_10013D168);
        if (v9 <= 0x3F)
        {
          v22[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100030940(319, &qword_10013D170, &qword_10013D178);
          if (v11 <= 0x3F)
          {
            v22[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100030940(319, &qword_10013D180, &qword_10013D188);
            if (v13 <= 0x3F)
            {
              v22[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100030940(319, (unint64_t *)&unk_10013D190, (uint64_t *)&unk_10013EB30);
              if (v15 <= 0x3F)
              {
                v22[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_100030940(319, &qword_10013D1A0, &qword_10013D1A8);
                if (v17 <= 0x3F)
                {
                  v22[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_100030940(319, (unint64_t *)&unk_10013D1B0, &qword_10013FE60);
                  if (v19 <= 0x3F)
                  {
                    v22[8] = *(_QWORD *)(v18 - 8) + 64;
                    v22[9] = (char *)&value witness table for Builtin.NativeObject + 64;
                    v22[10] = (char *)&value witness table for Builtin.NativeObject + 64;
                    v22[11] = (char *)&value witness table for Builtin.NativeObject + 64;
                    sub_100049AB8(319, &qword_10013D1C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                    if (v21 <= 0x3F)
                    {
                      v22[12] = *(_QWORD *)(v20 - 8) + 64;
                      v22[13] = &unk_1000EAEF0;
                      v22[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
                      v22[15] = &unk_1000EAEF0;
                      v22[16] = &unk_1000EAEF0;
                      v22[17] = &unk_1000EAF08;
                      swift_updateClassMetadata2(a1, 256, 18, v22, a1 + 80);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_100049AB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_100049B10@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100049B58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for NearbySharingInteractionViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

id sub_100049BD4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceholderSFCollaborationService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlaceholderSFCollaborationService()
{
  return objc_opt_self(_TtC9AirDropUI33PlaceholderSFCollaborationService);
}

uint64_t sub_100049C24()
{
  return sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100049C50@<X0>(char *a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t KeyPath;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v80;
  uint64_t v81;
  uint64_t (*v82)(_QWORD *, uint64_t);
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  __n128 v93;
  void (*v94)(_QWORD, _QWORD, uint64_t, __n128);
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  __n128 v107;
  _QWORD *v108;
  uint64_t v109;
  id v110;
  NSObject *v111;
  os_log_type_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(_QWORD, _QWORD, _QWORD);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char *v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t (*v144)(char *, char *, uint64_t);
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  __n128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __n128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void (*v197)(_QWORD, _QWORD, _QWORD);
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  _QWORD *v222;
  char *v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;

  v2 = v1;
  v223 = a1;
  v209 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v216 = *(_QWORD *)(v209 - 8);
  v4 = __chkstk_darwin(v209, v3);
  v200 = (char *)&v199 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4, v6);
  v201 = (char *)&v199 - v8;
  v10 = __chkstk_darwin(v7, v9);
  v202 = (char *)&v199 - v11;
  v13 = __chkstk_darwin(v10, v12);
  v203 = (char *)&v199 - v14;
  v16 = __chkstk_darwin(v13, v15);
  v205 = (char *)&v199 - v17;
  v19 = __chkstk_darwin(v16, v18);
  v204 = (char *)&v199 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v207 = (char *)&v199 - v23;
  v25 = __chkstk_darwin(v22, v24);
  v208 = (char *)&v199 - v26;
  v28 = __chkstk_darwin(v25, v27);
  v215 = (uint64_t)&v199 - v29;
  __chkstk_darwin(v28, v30);
  v214 = (uint64_t)&v199 - v31;
  v32 = sub_100008F88(&qword_10013D258);
  __chkstk_darwin(v32, v33);
  v213 = (uint64_t)&v199 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v218 = *(_QWORD *)(v219 - 8);
  v36 = __chkstk_darwin(v219, v35);
  v210 = (char *)&v199 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v36, v38);
  v211 = (char *)&v199 - v40;
  v42 = __chkstk_darwin(v39, v41);
  v206 = (char *)&v199 - v43;
  __chkstk_darwin(v42, v44);
  v217 = (char *)&v199 - v45;
  v222 = (_QWORD *)type metadata accessor for ShockwaveEffectState(0, v46);
  v221 = *(v222 - 1);
  __chkstk_darwin(v222, v47);
  v49 = (char *)&v199 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v51 = *(_QWORD *)(v50 - 8);
  v53 = __chkstk_darwin(v50, v52);
  v212 = (uint64_t *)((char *)&v199 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = __chkstk_darwin(v53, v55);
  *(_QWORD *)&v220 = (char *)&v199 - v57;
  v59 = __chkstk_darwin(v56, v58);
  *((_QWORD *)&v220 + 1) = (char *)&v199 - v60;
  __chkstk_darwin(v59, v61);
  v63 = (uint64_t *)((char *)&v199 - v62);
  v64 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v65 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64, v66);
  v68 = (char *)&v199 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000EAFB8);
  v70 = swift_getKeyPath(&unk_1000EAFE0);
  static Published.subscript.getter(v63, v2, KeyPath, v70);
  v71 = KeyPath;
  v72 = v50;
  swift_release(v71);
  v73 = swift_release(v70);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, __n128))(v51 + 88))(v63, v50, v73) == enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v51 + 96))(v63, v50);
    v74 = *(void (**)(char *, _QWORD *, uint64_t))(v65 + 32);
    v74(v68, v63, v64);
    v75 = v223;
    v74(v223, v68, v64);
    v76 = type metadata accessor for NearbySharingInteractionViewState(0);
    v77 = v75;
    v78 = 1;
    return swift_storeEnumTagMultiPayload(v77, v76, v78);
  }
  v80 = v223;
  v81 = v51;
  v82 = *(uint64_t (**)(_QWORD *, uint64_t))(v51 + 8);
  v83 = v82(v63, v50);
  v84 = v2;
  v85 = *(_QWORD *)&v2[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_animationCoordinator];
  v86 = v49;
  v87 = dispatch thunk of ShockwaveAnimationCoordinator.state.getter(v83);
  v88 = ShockwaveEffectState.isLogicallyComplete.getter(v87);
  (*(void (**)(char *, _QWORD *))(v221 + 8))(v86, v222);
  if ((v88 & 1) == 0)
    goto LABEL_18;
  v89 = v84;
  v90 = swift_getKeyPath(&unk_1000EAFB8);
  v91 = swift_getKeyPath(&unk_1000EAFE0);
  v92 = (_QWORD *)*((_QWORD *)&v220 + 1);
  static Published.subscript.getter(*((_QWORD **)&v220 + 1), v89, v90, v91);
  swift_release(v90);
  v93 = swift_release(v91);
  v94 = *(void (**)(_QWORD, _QWORD, uint64_t, __n128))(v81 + 104);
  v95 = (_QWORD *)v220;
  v94(v220, enum case for SFAirDrop.NearbySharingInteraction.State.connecting(_:), v72, v93);
  v96 = sub_100008694((unint64_t *)&unk_10013D260, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
  LOBYTE(v90) = dispatch thunk of static Comparable.< infix(_:_:)(v95, v92, v72, v96);
  v82(v95, v72);
  v82(v92, v72);
  if ((v90 & 1) != 0)
  {
    v97 = swift_getKeyPath(&unk_1000EAFB8);
    v98 = swift_getKeyPath(&unk_1000EAFE0);
    v99 = v212;
    static Published.subscript.getter(v212, v89, v97, v98);
    swift_release(v97);
    v100 = swift_release(v98);
    v101 = v213;
    SFAirDrop.NearbySharingInteraction.State.connectionContext.getter(v100);
    v82(v99, v72);
    v102 = v218;
    v103 = v219;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v101, 1, v219) == 1)
    {
      sub_10000CC5C(v101, &qword_10013D258);
      v104 = swift_getKeyPath(&unk_1000EAFB8);
      v105 = swift_getKeyPath(&unk_1000EAFE0);
      v106 = (_QWORD *)*((_QWORD *)&v220 + 1);
      static Published.subscript.getter(*((_QWORD **)&v220 + 1), v89, v104, v105);
      swift_release(v104);
      v107 = swift_release(v105);
      v108 = (_QWORD *)v220;
      v94(v220, enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:), v72, v107);
      LOBYTE(v104) = static SFAirDrop.NearbySharingInteraction.State.== infix(_:_:)(v106, v108);
      v82(v108, v72);
      v82(v106, v72);
      if ((v104 & 1) == 0)
      {
        if (qword_10013AD60 != -1)
          swift_once(&qword_10013AD60, sub_100092254);
        v109 = type metadata accessor for Logger(0);
        sub_100009558(v109, (uint64_t)qword_100148040);
        v110 = v89;
        v111 = Logger.logObject.getter(v110);
        v112 = static os_log_type_t.error.getter();
        v113 = v112;
        if (os_log_type_enabled(v111, v112))
        {
          v114 = swift_slowAlloc(32, -1);
          v222 = (_QWORD *)swift_slowAlloc(96, -1);
          *(_QWORD *)&v224 = v222;
          *(_DWORD *)v114 = 136315650;
          v115 = swift_getKeyPath(&unk_1000EAFB8);
          LODWORD(v221) = v113;
          v116 = v115;
          v117 = v72;
          v118 = swift_getKeyPath(&unk_1000EAFE0);
          v119 = (_QWORD *)*((_QWORD *)&v220 + 1);
          static Published.subscript.getter(*((_QWORD **)&v220 + 1), v110, v116, v118);
          swift_release(v116);
          swift_release(v118);
          v120 = sub_100008694((unint64_t *)&unk_1001405E0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
          v121 = dispatch thunk of CustomStringConvertible.description.getter(v117, v120);
          v123 = v122;
          v82(v119, v117);
          *(_QWORD *)&v227 = sub_10003A834(v121, v123, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, (char *)&v227 + 8);

          swift_bridgeObjectRelease(v123);
          *(_WORD *)(v114 + 12) = 2080;
          v124 = swift_getKeyPath(&unk_1000EB000);
          v125 = swift_getKeyPath(&unk_1000EB028);
          static Published.subscript.getter(&v227, v110, v124, v125);
          swift_release(v124);
          swift_release(v125);
          v126 = v233;
          sub_10004BC38(v227, *((uint64_t *)&v227 + 1), v228, *((uint64_t *)&v228 + 1), v229, *((uint64_t *)&v229 + 1), (uint64_t)v230, (uint64_t)v231, v232, v233, v234, v235);
          if (v126 <= 0xFFFFFFFEFFFFFFFFLL)
            v127 = 1701670771;
          else
            v127 = 1701736302;
          *(_QWORD *)&v227 = sub_10003A834(v127, 0xE400000000000000, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, (char *)&v227 + 8);

          swift_bridgeObjectRelease(0xE400000000000000);
          *(_WORD *)(v114 + 22) = 2080;
          v128 = swift_getKeyPath(&unk_1000EB048);
          v129 = swift_getKeyPath(&unk_1000EB070);
          static Published.subscript.getter(&v227, v110, v128, v129);
          swift_release(v128);
          swift_release(v129);
          v130 = *((_QWORD *)&v228 + 1);
          sub_10000CC5C((uint64_t)&v227, &qword_10013D168);
          if (v130)
            v131 = 1701670771;
          else
            v131 = 1701736302;
          *(_QWORD *)&v227 = sub_10003A834(v131, 0xE400000000000000, (uint64_t *)&v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, (char *)&v227 + 8);

          swift_bridgeObjectRelease(0xE400000000000000);
          _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v221, "Encountered unknown state not represented by a view: %s resolvedRemotePerson: %s shareableContent: %s", (uint8_t *)v114, 0x20u);
          v132 = (void (*)(_QWORD, _QWORD, _QWORD))v222;
          swift_arrayDestroy(v222, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v132, -1, -1);
          swift_slowDealloc(v114, -1, -1);

        }
        else
        {

        }
      }
      goto LABEL_31;
    }
    v135 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 32))(v217, v101, v103);
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v135);
    v136 = v209;
    v222 = *(_QWORD **)(v216 + 104);
    ((void (*)(uint64_t, _QWORD, uint64_t))v222)(v215, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.generic(_:), v209);
    v137 = sub_100008694(&qword_10013D270, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
    dispatch thunk of RawRepresentable.rawValue.getter(&v227, v136, v137);
    dispatch thunk of RawRepresentable.rawValue.getter(&v224, v136, v137);
    v138 = *((_QWORD *)&v227 + 1);
    v139 = *((_QWORD *)&v224 + 1);
    v221 = (uint64_t)v89;
    v199 = v85;
    if (v227 == v224)
    {
      v140 = 1;
      v139 = *((_QWORD *)&v227 + 1);
    }
    else
    {
      v140 = _stringCompareWithSmolCheck(_:_:expecting:)(v227, *((_QWORD *)&v227 + 1), v224, *((_QWORD *)&v224 + 1), 0);
    }
    v141 = v206;
    swift_bridgeObjectRelease(v138);
    swift_bridgeObjectRelease(v139);
    v142 = *(void (**)(uint64_t, uint64_t))(v216 + 8);
    v142(v215, v136);
    v142(v214, v136);
    v143 = v102;
    v144 = *(uint64_t (**)(char *, char *, uint64_t))(v102 + 16);
    v145 = v217;
    v146 = v219;
    v147 = v144(v141, v217, v219);
    if ((v140 & 1) != 0)
      goto LABEL_26;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v147);
    ((void (*)(char *, _QWORD, uint64_t))v222)(v207, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:), v136);
    dispatch thunk of RawRepresentable.rawValue.getter(&v227, v136, v137);
    dispatch thunk of RawRepresentable.rawValue.getter(&v224, v136, v137);
    v148 = *((_QWORD *)&v227 + 1);
    v149 = *((_QWORD *)&v224 + 1);
    if (v227 == v224)
    {
      swift_bridgeObjectRelease_n(*((_QWORD *)&v227 + 1), 2);
      v142((uint64_t)v207, v136);
      v142((uint64_t)v208, v136);
      v146 = v219;
      v143 = v218;
LABEL_26:
      v150 = *(void (**)(char *, uint64_t))(v143 + 8);
      v150(v141, v146);
      v151 = v211;
      v144(v211, v145, v146);
LABEL_27:
      v150(v151, v146);
      v152 = v210;
      v144(v210, v145, v146);
LABEL_28:
      v150(v152, v146);
LABEL_29:
      v150(v145, v146);
LABEL_31:
      v76 = type metadata accessor for NearbySharingInteractionViewState(0);
      v77 = v80;
      v78 = 5;
      return swift_storeEnumTagMultiPayload(v77, v76, v78);
    }
    DWORD2(v220) = _stringCompareWithSmolCheck(_:_:expecting:)(v227, *((_QWORD *)&v227 + 1), v224, *((_QWORD *)&v224 + 1), 0);
    swift_bridgeObjectRelease(v148);
    swift_bridgeObjectRelease(v149);
    v142((uint64_t)v207, v136);
    v142((uint64_t)v208, v136);
    v150 = *(void (**)(char *, uint64_t))(v218 + 8);
    v146 = v219;
    v150(v141, v219);
    v151 = v211;
    v153 = v144(v211, v145, v146);
    if ((BYTE8(v220) & 1) != 0)
    {
      v145 = v217;
      goto LABEL_27;
    }
    v154 = v204;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v153);
    ((void (*)(char *, _QWORD, uint64_t))v222)(v205, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.unknown(_:), v136);
    dispatch thunk of RawRepresentable.rawValue.getter(&v227, v136, v137);
    dispatch thunk of RawRepresentable.rawValue.getter(&v224, v136, v137);
    v155 = *((_QWORD *)&v227 + 1);
    v156 = *((_QWORD *)&v224 + 1);
    if (v227 == v224)
    {
      swift_bridgeObjectRelease_n(*((_QWORD *)&v227 + 1), 2);
      v142((uint64_t)v205, v136);
      v142((uint64_t)v154, v136);
      v146 = v219;
      v145 = v217;
      v151 = v211;
      goto LABEL_27;
    }
    v157 = _stringCompareWithSmolCheck(_:_:expecting:)(v227, *((_QWORD *)&v227 + 1), v224, *((_QWORD *)&v224 + 1), 0);
    swift_bridgeObjectRelease(v155);
    swift_bridgeObjectRelease(v156);
    v142((uint64_t)v205, v136);
    v142((uint64_t)v154, v136);
    v146 = v219;
    v150(v211, v219);
    v152 = v210;
    v158 = v144(v210, v217, v146);
    if ((v157 & 1) != 0)
    {
      v145 = v217;
      goto LABEL_28;
    }
    v159 = v203;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v158);
    v160 = v202;
    ((void (*)(char *, _QWORD, uint64_t))v222)(v202, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.peerPayment(_:), v136);
    dispatch thunk of RawRepresentable.rawValue.getter(&v227, v136, v137);
    dispatch thunk of RawRepresentable.rawValue.getter(&v224, v136, v137);
    v161 = *((_QWORD *)&v227 + 1);
    v162 = *((_QWORD *)&v224 + 1);
    if (v227 == v224)
    {
      swift_bridgeObjectRelease_n(*((_QWORD *)&v227 + 1), 2);
      v142((uint64_t)v160, v136);
      v142((uint64_t)v159, v136);
      v146 = v219;
      v145 = v217;
      v152 = v210;
      goto LABEL_28;
    }
    v163 = _stringCompareWithSmolCheck(_:_:expecting:)(v227, *((_QWORD *)&v227 + 1), v224, *((_QWORD *)&v224 + 1), 0);
    swift_bridgeObjectRelease(v161);
    swift_bridgeObjectRelease(v162);
    v142((uint64_t)v160, v136);
    v142((uint64_t)v159, v136);
    v146 = v219;
    v164 = ((uint64_t (*)(char *, uint64_t))v150)(v210, v219);
    if ((v163 & 1) != 0)
    {
      v145 = v217;
      goto LABEL_29;
    }
    v165 = v201;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v164);
    v166 = v200;
    ((void (*)(char *, _QWORD, uint64_t))v222)(v200, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:), v136);
    dispatch thunk of RawRepresentable.rawValue.getter(&v227, v136, v137);
    dispatch thunk of RawRepresentable.rawValue.getter(&v224, v136, v137);
    v167 = *((_QWORD *)&v227 + 1);
    v168 = *((_QWORD *)&v224 + 1);
    if (v227 == v224)
    {
      swift_bridgeObjectRelease_n(*((_QWORD *)&v227 + 1), 2);
      v142((uint64_t)v166, v136);
      v169 = ((uint64_t (*)(char *, uint64_t))v142)(v165, v136);
LABEL_45:
      v171 = v217;
      SFAirDrop.NearbySharingInteraction.ConnectionContext.transactionIdentifier.getter(v169);
      v150(v171, v219);
      v76 = type metadata accessor for NearbySharingInteractionViewState(0);
      v77 = v80;
      v78 = 2;
      return swift_storeEnumTagMultiPayload(v77, v76, v78);
    }
    v170 = _stringCompareWithSmolCheck(_:_:expecting:)(v227, *((_QWORD *)&v227 + 1), v224, *((_QWORD *)&v224 + 1), 0);
    swift_bridgeObjectRelease(v167);
    swift_bridgeObjectRelease(v168);
    v142((uint64_t)v166, v136);
    v169 = ((uint64_t (*)(char *, uint64_t))v142)(v165, v136);
    if ((v170 & 1) != 0)
      goto LABEL_45;
    v172 = swift_getKeyPath(&unk_1000EB000);
    v173 = swift_getKeyPath(&unk_1000EB028);
    v174 = v221;
    static Published.subscript.getter(&v227, v221, v172, v173);
    swift_release(v172);
    swift_release(v173);
    v175 = v233;
    if (v233 <= 0xFFFFFFFEFFFFFFFFLL)
    {
      v218 = *((_QWORD *)&v227 + 1);
      v215 = v227;
      v216 = *((_QWORD *)&v228 + 1);
      v214 = v228;
      v220 = v229;
      v176 = (uint64_t)v231;
      v222 = v230;
      v213 = v232;
      v177 = v234;
      v178 = v235;
      v179 = v236;
      v180 = swift_getKeyPath(&unk_1000EB048);
      v181 = swift_getKeyPath(&unk_1000EB070);
      static Published.subscript.getter(&v224, v174, v180, v181);
      swift_release(v180);
      v182 = swift_release(v181);
      if (*((_QWORD *)&v225 + 1))
      {
        ((void (*)(char *, uint64_t, __n128))v150)(v217, v219, v182);
        v227 = v224;
        v228 = v225;
        v229 = v226;
        v183 = v225;
        *(_OWORD *)(v80 + 104) = v224;
        v184 = v218;
        *(_QWORD *)v80 = v215;
        *((_QWORD *)v80 + 1) = v184;
        v185 = v216;
        *((_QWORD *)v80 + 2) = v214;
        *((_QWORD *)v80 + 3) = v185;
        v186 = *((_QWORD *)&v220 + 1);
        *((_QWORD *)v80 + 4) = v220;
        *((_QWORD *)v80 + 5) = v186;
        *((_QWORD *)v80 + 6) = v222;
        *((_QWORD *)v80 + 7) = v176;
        *((_QWORD *)v80 + 8) = v213;
        *((_QWORD *)v80 + 9) = v175;
        *((_QWORD *)v80 + 10) = v177;
        *((_QWORD *)v80 + 11) = v178;
        *((_DWORD *)v80 + 24) = v179;
        *(_OWORD *)(v80 + 120) = v183;
        *(_OWORD *)(v80 + 136) = v229;
        v76 = type metadata accessor for NearbySharingInteractionViewState(0);
        v77 = v80;
        v78 = 4;
        return swift_storeEnumTagMultiPayload(v77, v76, v78);
      }
      sub_10004BC38(v215, v218, v214, v216, v220, *((uint64_t *)&v220 + 1), (uint64_t)v222, v176, v213, v175, v177, v178);
      sub_10000CC5C((uint64_t)&v224, &qword_10013D168);
      v174 = v221;
    }
    v187 = swift_getKeyPath(&unk_1000EB000);
    v188 = swift_getKeyPath(&unk_1000EB028);
    static Published.subscript.getter(&v227, v174, v187, v188);
    swift_release(v187);
    v189 = swift_release(v188);
    v190 = v227;
    v191 = v228;
    v192 = v229;
    v193 = (uint64_t)v230;
    v222 = v231;
    v194 = v233;
    v221 = v232;
    *((_QWORD *)&v220 + 1) = v234;
    *(_QWORD *)&v220 = v235;
    LODWORD(v218) = v236;
    ((void (*)(char *, uint64_t, __n128))v150)(v217, v219, v189);
    if (v194 <= 0xFFFFFFFEFFFFFFFFLL)
    {
      *(_OWORD *)v80 = v190;
      *((_OWORD *)v80 + 1) = v191;
      *((_OWORD *)v80 + 2) = v192;
      v197 = (void (*)(_QWORD, _QWORD, _QWORD))v222;
      *((_QWORD *)v80 + 6) = v193;
      *((_QWORD *)v80 + 7) = v197;
      *((_QWORD *)v80 + 8) = v221;
      *((_QWORD *)v80 + 9) = v194;
      v198 = v220;
      *((_QWORD *)v80 + 10) = *((_QWORD *)&v220 + 1);
      *((_QWORD *)v80 + 11) = v198;
      *((_DWORD *)v80 + 24) = v218;
      v76 = type metadata accessor for NearbySharingInteractionViewState(0);
      v77 = v80;
      v78 = 3;
      return swift_storeEnumTagMultiPayload(v77, v76, v78);
    }
    v195 = v199;
    *(_QWORD *)v80 = v199;
    v196 = type metadata accessor for NearbySharingInteractionViewState(0);
    swift_storeEnumTagMultiPayload(v80, v196, 0);
    v134 = v195;
  }
  else
  {
LABEL_18:
    *(_QWORD *)v80 = v85;
    v133 = type metadata accessor for NearbySharingInteractionViewState(0);
    swift_storeEnumTagMultiPayload(v80, v133, 0);
    v134 = v85;
  }
  return swift_retain(v134);
}

void sub_10004B10C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v0 = type metadata accessor for NearbySharingInteractionViewState(0);
  v2 = __chkstk_darwin(v0, v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v5);
  v7 = (char *)&v13 - v6;
  v8 = sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
  v9 = (void *)static NSUserDefaults.airdrop.getter(v8);
  v10 = SFAirDropUserDefaults.shockwaveEffectEnabled.getter();

  if ((v10 & 1) != 0)
  {
    sub_100049C50(v7);
    v11 = (char *)&loc_10004B1E8 + 4 * byte_1000EAE86[swift_getEnumCaseMultiPayload(v7, v0)];
    __asm { BR              X10 }
  }
  sub_100049C50(v4);
  v12 = (char *)sub_10004B22C + 4 * byte_1000EAE80[swift_getEnumCaseMultiPayload(v4, v0)];
  __asm { BR              X10 }
}

uint64_t sub_10004B23C()
{
  uint64_t v0;

  sub_10004D520(v0);
  return 0;
}

uint64_t sub_10004B24C()
{
  uint64_t *v0;

  sub_10004BC68(*v0, v0[1], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11]);
  sub_10004D4EC((uint64_t)(v0 + 13));
  return 0;
}

void sub_10004B290()
{
  uint64_t v0;

  sub_10004D520(v0);
  JUMPOUT(0x10004B29CLL);
}

void sub_10004B2B4()
{
  uint64_t *v0;

  sub_10004BC68(*v0, v0[1], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11]);
  sub_10004D4EC((uint64_t)(v0 + 13));
  JUMPOUT(0x10004B234);
}

uint64_t sub_10004B2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[9] = v10;
  v8[10] = v11;
  return swift_task_switch(sub_10004B368, v10, v11);
}

uint64_t sub_10004B368()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[7];
  v2 = (_QWORD *)v0[3];
  v4 = v2[3];
  v3 = v2[4];
  sub_10000904C(v2, v4);
  v5 = v1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
  v6 = (_QWORD *)swift_task_alloc(dword_10013BBBC);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_10004B3F4;
  return sub_10000D1C4(v0[4], v0[5], v0[6], v5, v4, v3);
}

uint64_t sub_10004B3F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10004B48C;
  else
    v4 = sub_10004B454;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_10004B454()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  sub_100047B3C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_100148040);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error sending shareable content: %@", v8, 0xCu);
    v11 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  sub_100047B3C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B668@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EAFB8);
  v5 = swift_getKeyPath(&unk_1000EAFE0);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(v5);
  return swift_release(KeyPath);
}

uint64_t sub_10004B6D0(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void *v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v18 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13((char *)&v18 - v11, a1, v4);
  v14 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EAFB8);
  v16 = swift_getKeyPath(&unk_1000EAFE0);
  v13(v9, (uint64_t)v12, v4);
  static Published.subscript.setter(v9, v14, KeyPath, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
}

uint64_t sub_10004B7D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EB048);
  v5 = swift_getKeyPath(&unk_1000EB070);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(v5);
  return swift_release(KeyPath);
}

uint64_t sub_10004B838(uint64_t a1, void **a2)
{
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  _BYTE v7[48];
  _BYTE v8[48];

  sub_10000CC18(a1, (uint64_t)v8, &qword_10013D168);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EB048);
  v5 = swift_getKeyPath(&unk_1000EB070);
  sub_10000CC18((uint64_t)v8, (uint64_t)v7, &qword_10013D168);
  static Published.subscript.setter(v7, v3, KeyPath, v5);
  return sub_10000CC5C((uint64_t)v8, &qword_10013D168);
}

uint64_t sub_10004B8D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004B994(a1, (uint64_t)&unk_1000EB0D8, (uint64_t)&unk_1000EB100, a2);
}

uint64_t sub_10004B8E4(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EB0D8);
  v5 = swift_getKeyPath(&unk_1000EB100);
  v7 = v2;
  swift_unknownObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10004B958@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004B994(a1, (uint64_t)&unk_1000EB168, (uint64_t)&unk_1000EB190, a2);
}

uint64_t sub_10004B96C(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BA20(a1, a2, a3, a4, (uint64_t)&unk_1000EB168, (uint64_t)&unk_1000EB190);
}

uint64_t sub_10004B980@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004B994(a1, (uint64_t)&unk_1000EB090, (uint64_t)&unk_1000EB0B8, a2);
}

uint64_t sub_10004B994@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(v8);
  result = swift_release(KeyPath);
  *a4 = v10;
  return result;
}

uint64_t sub_10004BA0C(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BA20(a1, a2, a3, a4, (uint64_t)&unk_1000EB090, (uint64_t)&unk_1000EB0B8);
}

uint64_t sub_10004BA20(void **a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  void *v13;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v13 = v7;
  v11 = v7;
  return static Published.subscript.setter(&v13, v8, KeyPath, v10);
}

double sub_10004BA8C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[6];
  int v14;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EB000);
  v5 = swift_getKeyPath(&unk_1000EB028);
  static Published.subscript.getter(v13, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = v14;
  result = *(double *)v13;
  v8 = v13[1];
  v9 = v13[2];
  v10 = v13[3];
  v11 = v13[4];
  v12 = v13[5];
  *(_OWORD *)a2 = v13[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 80) = v12;
  *(_DWORD *)(a2 + 96) = v6;
  return result;
}

uint64_t sub_10004BB20(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  _QWORD v19[12];
  int v20;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(a1 + 96);
  v17 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EB000);
  v16 = swift_getKeyPath(&unk_1000EB028);
  v19[0] = v15;
  v19[1] = v14;
  v19[2] = v13;
  v19[3] = v2;
  v19[4] = v3;
  v19[5] = v4;
  v19[6] = v5;
  v19[7] = v6;
  v19[8] = v7;
  v19[9] = v8;
  v19[10] = v9;
  v19[11] = v10;
  v20 = v11;
  sub_10004BCEC(v15, v14, v13, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return static Published.subscript.setter(v19, v17, KeyPath, v16);
}

uint64_t type metadata accessor for NearbySharingInteractionViewState(uint64_t a1)
{
  return sub_1000138D0(a1, qword_10013D3C0, (uint64_t)&nominal type descriptor for NearbySharingInteractionViewState);
}

uint64_t sub_10004BC38(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10 <= 0xFFFFFFFEFFFFFFFFLL)
    return sub_10004BC68(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_10004BC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  if ((a10 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    a5 = a12;
  }
  return swift_bridgeObjectRelease(a5);
}

uint64_t sub_10004BCEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10 <= 0xFFFFFFFEFFFFFFFFLL)
    return sub_10004BD1C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_10004BD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10 < 0)
  {
    a9 = a5;
  }
  else
  {
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    a2 = a6;
    a4 = a7;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  return swift_bridgeObjectRetain(a9);
}

uint64_t sub_10004BD9C(char *a1, uint64_t a2, void *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t KeyPath;
  uint64_t v43;
  __n128 v44;
  uint64_t (*v45)(char *, char *, _QWORD *);
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  __n128 v55;
  void (*v56)(_QWORD *, uint64_t);
  uint64_t v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _TtC9AirDropUI33AirDropTransferSessionsController *v67;
  _TtC9AirDropUI33AirDropTransferSessionsController *v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  id v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  __n128 v101;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  id v108;
  _QWORD *v109;
  _QWORD *v110;
  uint8_t *v111;
  char *v112;
  __int128 v113[2];
  __int128 v114[2];
  _QWORD v115[6];

  v107 = a2;
  v108 = a3;
  v112 = a1;
  v9 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v9, v10);
  v111 = (uint8_t *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v12, v13);
  v104 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v103 = (char *)&v103 - v17;
  __chkstk_darwin(v18, v19);
  v109 = (char **)((char *)&v103 - v20);
  v21 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v110 = (char **)((char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29, v30);
  v32 = (char **)((char *)&v103 - v31);
  v33 = (_QWORD *)type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v34 = *(v33 - 1);
  __chkstk_darwin(v33, v35);
  v106 = (char *)&v103 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = v36;
  __chkstk_darwin(v37, v38);
  v40 = (char *)&v103 - v39;
  v115[3] = a5;
  v115[4] = a6;
  v41 = sub_10004EECC(v115);
  (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v41, v112, a5);
  KeyPath = swift_getKeyPath(&unk_1000EAFB8);
  v43 = swift_getKeyPath(&unk_1000EAFE0);
  v112 = a4;
  static Published.subscript.getter(v32, a4, KeyPath, v43);
  swift_release(KeyPath);
  v44 = swift_release(v43);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, __n128))(v26 + 88))(v32, v25, v44) == enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v26 + 96))(v32, v25);
    v45 = *(uint64_t (**)(char *, _QWORD *, _QWORD *))(v34 + 32);
    v46 = v45(v40, v32, v33);
    SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter(v46);
    v47 = type metadata accessor for UUID(0);
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v24, 1, v47);
    sub_10000CC5C((uint64_t)v24, (uint64_t *)&unk_1001405D0);
    v49 = v40;
    if (v48 == 1)
    {
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v50 = type metadata accessor for Logger(0);
      v51 = sub_100009558(v50, (uint64_t)qword_100148040);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Can not share content: we don't have a resolved endpoint.", v54, 2u);
        swift_slowDealloc(v54, -1, -1);
      }

      goto LABEL_14;
    }
    v77 = swift_getKeyPath(&unk_1000EB1B0);
    v78 = swift_getKeyPath(&unk_1000EB1D8);
    v79 = v109;
    v80 = v112;
    static Published.subscript.getter(v109, v112, v77, v78);
    swift_release(v77);
    swift_release(v78);
    v81 = type metadata accessor for ContinuousClock.Instant(0);
    v82 = *(_QWORD *)(v81 - 8);
    LODWORD(v78) = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v82 + 48))(v79, 1, v81);
    v83 = sub_10000CC5C((uint64_t)v79, &qword_10013FE60);
    if ((_DWORD)v78 != 1)
    {
LABEL_14:
      (*(void (**)(char *, _QWORD *, __n128))(v34 + 8))(v40, v33, v55);
      return sub_100009070(v115);
    }
    v84 = (uint64_t)v103;
    static ContinuousClock.Instant.now.getter(v83);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v81);
    v85 = swift_getKeyPath(&unk_1000EB1B0);
    v86 = swift_getKeyPath(&unk_1000EB1D8);
    v110 = v33;
    v87 = v104;
    sub_10000CC18(v84, v104, &qword_10013FE60);
    v88 = v80;
    static Published.subscript.setter(v87, v88, v85, v86);
    sub_10000CC5C(v84, &qword_10013FE60);
    v89 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v111, 1, 1, v89);
    sub_100009008((uint64_t)v115, (uint64_t)v114);
    sub_100009008(v107, (uint64_t)v113);
    v90 = v106;
    v91 = v110;
    (*(void (**)(char *, char *, _QWORD *))(v34 + 16))(v106, v49, v110);
    type metadata accessor for MainActor(0);
    v92 = v108;
    v93 = v108;
    v94 = v88;
    v95 = static MainActor.shared.getter(v94);
    v96 = *(unsigned __int8 *)(v34 + 80);
    v112 = v49;
    v97 = (v96 + 120) & ~v96;
    v98 = (v105 + v97 + 7) & 0xFFFFFFFFFFFFFFF8;
    v99 = (char *)swift_allocObject(&unk_100125F00, v98 + 8, v96 | 7);
    *((_QWORD *)v99 + 2) = v95;
    *((_QWORD *)v99 + 3) = &protocol witness table for MainActor;
    sub_10004EFB0(v114, (uint64_t)(v99 + 32));
    sub_10004EFB0(v113, (uint64_t)(v99 + 72));
    *((_QWORD *)v99 + 14) = v92;
    v45(&v99[v97], v90, v91);
    *(_QWORD *)&v99[v98] = v94;
    v100 = sub_1000CB748((uint64_t)v111, (uint64_t)&unk_10013D408, (uint64_t)v99);
    v101 = swift_release(v100);
    (*(void (**)(char *, _QWORD *, __n128))(v34 + 8))(v112, v91, v101);
  }
  else
  {
    v56 = *(void (**)(_QWORD *, uint64_t))(v26 + 8);
    v56(v32, v25);
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v57 = type metadata accessor for Logger(0);
    sub_100009558(v57, (uint64_t)qword_100148040);
    v58 = v112;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = (char *)swift_slowAlloc(32, -1);
      *(_QWORD *)&v114[0] = v112;
      *(_DWORD *)v61 = 136315138;
      v111 = v61 + 4;
      v62 = swift_getKeyPath(&unk_1000EAFB8);
      v63 = swift_getKeyPath(&unk_1000EAFE0);
      v64 = v110;
      static Published.subscript.getter(v110, v58, v62, v63);
      swift_release(v62);
      swift_release(v63);
      v65 = sub_100008694((unint64_t *)&unk_1001405E0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v25, v65);
      v68 = v67;
      v56(v64, v25);
      *(_QWORD *)&v113[0] = sub_10003A834(v66, (unint64_t)v68, (uint64_t *)v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v113, (char *)v113 + 8);

      swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Can not share content as the state of the interaction is not connected: %s", v61, 0xCu);
      v76 = v112;
      swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {

    }
  }
  return sub_100009070(v115);
}

void sub_10004C5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD v26[25];
  uint64_t v27;

  v27 = a2;
  v3 = type metadata accessor for UUID(0);
  v26[23] = *(_QWORD *)(v3 - 8);
  v26[24] = v3;
  __chkstk_darwin(v3, v4);
  v26[20] = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v26[21] = *(_QWORD *)(v6 - 8);
  v26[22] = v6;
  __chkstk_darwin(v6, v7);
  v8 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v8, v9);
  __chkstk_darwin(v10, v11);
  __chkstk_darwin(v12, v13);
  __chkstk_darwin(v14, v15);
  __chkstk_darwin(v16, v17);
  v18 = sub_100008F88((uint64_t *)&unk_10013D278);
  __chkstk_darwin(v18, v19);
  v22 = (char *)v26 + *(int *)(v21 + 48) - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1;
  v24 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D4A8(v23, (uint64_t)v24);
  sub_10004D4A8(v27, (uint64_t)v22);
  v25 = (char *)sub_10004C770 + 4 * word_1000EAE8C[swift_getEnumCaseMultiPayload(v24, v8)];
  __asm { BR              X10 }
}

uint64_t sub_10004C770()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  sub_10004D4A8(v3, (uint64_t)v0);
  v4 = *v0;
  if (swift_getEnumCaseMultiPayload(v2, v1))
  {
    swift_release(v4);
    sub_10000CC5C(v3, (uint64_t *)&unk_10013D278);
    v5 = 0;
  }
  else
  {
    v6 = *v2;
    type metadata accessor for ShockwaveAnimationCoordinator(0);
    v5 = ((uint64_t (*)(uint64_t, uint64_t))static ShockwaveAnimationCoordinator.== infix(_:_:))(v4, v6);
    swift_release(v4);
    swift_release(v6);
    sub_10004D520(v3);
  }
  return v5 & 1;
}

uint64_t sub_10004D4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NearbySharingInteractionViewState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D4EC(uint64_t a1)
{
  destroy for ActionableShareableContent(a1);
  return a1;
}

uint64_t sub_10004D520(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NearbySharingInteractionViewState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10004D55C(char *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  __n128 v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  __n128 v81;
  uint64_t v82;
  char *v83;
  objc_class *v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  objc_super v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char v140[8];

  v4 = v3;
  v102 = a3;
  v101 = a2;
  v104 = a1;
  v5 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v5, v6);
  v127 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v125 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103, v8);
  v124 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v123 = (char *)&v100 - v12;
  v128 = type metadata accessor for UUID(0);
  v129 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128, v13);
  v122 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v121 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126, v15);
  v120 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v119 = (char *)&v100 - v19;
  v118 = sub_100008F88(&qword_10013D288);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118, v20);
  v116 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v115, v22);
  v114 = (uint64_t)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v113 = (char *)&v100 - v26;
  v112 = sub_100008F88(&qword_10013D290);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112, v27);
  v110 = (char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100008F88(&qword_10013D298);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109, v29);
  v107 = (char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100008F88(&qword_10013D2A0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v31);
  v33 = (char *)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100008F88(&qword_10013D2A8);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34, v36);
  v38 = (char *)&v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100008F88(&qword_10013D2B0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v41);
  v43 = (char *)&v100 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = &v4[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContent];
  v132 = 0u;
  v133 = 0u;
  v131 = 0u;
  sub_10000CC18((uint64_t)&v131, (uint64_t)v140, &qword_10013D168);
  v45 = v4;
  v46 = sub_100008F88(&qword_10013D168);
  Published.init(initialValue:)(v140, v46);
  sub_10000CC5C((uint64_t)&v131, &qword_10013D168);
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v44, v43, v39);
  v47 = &v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__collaborationItem];
  *(_QWORD *)&v131 = 0;
  v48 = sub_100008F88(&qword_10013D178);
  Published.init(initialValue:)(&v131, v48);
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v47, v38, v34);
  v49 = &v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__collaborationItemOptions];
  *(_QWORD *)&v131 = 0;
  v50 = sub_100008F88(&qword_10013D188);
  Published.init(initialValue:)(&v131, v50);
  (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v49, v33, v106);
  v51 = &v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__previewImage];
  *(_QWORD *)&v131 = 0;
  v52 = sub_100008F88((uint64_t *)&unk_10013EB30);
  v53 = v107;
  Published.init(initialValue:)(&v131, v52);
  (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v51, v53, v109);
  v54 = &v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__resolvedRemotePerson];
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v135 = 0;
  v136 = 0xFFFFFFFF00000000;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v55 = sub_100008F88(&qword_10013D1A8);
  v56 = v110;
  Published.init(initialValue:)(&v131, v55);
  (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v54, v56, v112);
  v57 = &v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContentActionBeginTime];
  v58 = type metadata accessor for ContinuousClock.Instant(0);
  v59 = (uint64_t)v113;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v113, 1, 1, v58);
  v60 = v114;
  sub_10000CC18(v59, v114, &qword_10013FE60);
  v61 = v116;
  Published.init(initialValue:)(v60, v115);
  sub_10000CC5C(v59, &qword_10013FE60);
  (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v57, v61, v118);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v129 + 56))(&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_interactionAssertionID], 1, 1, v128);
  *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask] = 0;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_1000B6884((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v62 = &_swiftEmptySetSingleton;
  }
  v63 = v104;
  v64 = v103;
  v65 = v102;
  v66 = v101;
  *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_subscriptions] = v62;
  *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationService] = 0;
  *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider] = 0;
  v67 = &v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback];
  *(_QWORD *)v67 = 0;
  *((_QWORD *)v67 + 1) = 0;
  *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contentResolver] = v66;
  *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsProvider] = v65;
  v68 = type metadata accessor for ShockwaveAnimationCoordinator(0);
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  swift_retain(v66);
  v69 = swift_retain(v65);
  *(_QWORD *)&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_animationCoordinator] = ShockwaveAnimationCoordinator.init()(v69);
  v70 = v121;
  v71 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 16);
  v72 = v119;
  v73 = v126;
  v71(v119, (uint64_t)v63, v126);
  v74 = swift_beginAccess(&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__interaction], &v131, 33, 0);
  v75 = v120;
  ((void (*)(char *, char *, uint64_t, __n128))v71)(v120, v72, v73, v74);
  Published.init(initialValue:)(v75, v73);
  v76 = *(void (**)(char *, uint64_t))(v70 + 8);
  v76(v72, v73);
  v77 = swift_endAccess(&v131);
  v78 = v122;
  SFAirDrop.NearbySharingInteraction.id.getter(v77);
  v79 = (*(uint64_t (**)(char *, char *, uint64_t))(v129 + 32))(&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id], v78, v128);
  v80 = v123;
  SFAirDrop.NearbySharingInteraction.state.getter(v79);
  v81 = swift_beginAccess(&v45[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__state], &v131, 33, 0);
  v82 = v125;
  v83 = v124;
  (*(void (**)(char *, char *, uint64_t, __n128))(v125 + 16))(v124, v80, v64, v81);
  Published.init(initialValue:)(v83, v64);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v64);
  swift_endAccess(&v131);

  v84 = (objc_class *)type metadata accessor for NearbySharingInteractionViewModel(0);
  v130.receiver = v45;
  v130.super_class = v84;
  v85 = objc_msgSendSuper2(&v130, "init");
  sub_100008694(&qword_10013D2B8, (uint64_t (*)(uint64_t))&type metadata accessor for ShockwaveAnimationCoordinator, (uint64_t)&protocol conformance descriptor for ShockwaveAnimationCoordinator);
  v86 = (char *)v85;
  *(_QWORD *)&v131 = ObservableObject<>.objectWillChange.getter(v68);
  sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
  v87 = ObservableObject<>.objectWillChange.getter(v84);
  v88 = swift_allocObject(&unk_100125E60, 32, 7);
  *(_QWORD *)(v88 + 16) = j___s7Combine25ObservableObjectPublisherC4sendyyF;
  *(_QWORD *)(v88 + 24) = v87;
  v89 = type metadata accessor for ObservableObjectPublisher(0);
  v90 = Publisher<>.sink(receiveValue:)(sub_10004DFF8, v88, v89, &protocol witness table for ObservableObjectPublisher);
  swift_release(v88);
  swift_release(v131);
  v91 = &v86[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_subscriptions];
  v92 = swift_beginAccess(&v86[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_subscriptions], &v131, 33, 0);
  AnyCancellable.store(in:)(v91, v92);
  swift_endAccess(&v131);
  swift_release(v90);
  v93 = type metadata accessor for TaskPriority(0);
  v94 = (uint64_t)v127;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v127, 1, 1, v93);
  type metadata accessor for MainActor(0);
  v95 = v86;
  v96 = static MainActor.shared.getter(v95);
  v97 = (_QWORD *)swift_allocObject(&unk_100125E88, 40, 7);
  v97[2] = v96;
  v97[3] = &protocol witness table for MainActor;
  v97[4] = v95;
  v98 = sub_1000A66DC(v94, (uint64_t)&unk_10013D2D0, (uint64_t)v97);
  swift_release(v98);
  sub_100048A54();

  v76(v63, v73);
  return v95;
}

uint64_t sub_10004DFD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004DFF8(uint64_t a1)
{
  uint64_t v1;

  return sub_10007E524(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10004E000()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004E02C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013D2CC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000104E4;
  return sub_100047EB0(a1, v4, v5, v6);
}

uint64_t sub_10004E098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10004E0C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004B994(a1, (uint64_t)&unk_1000EB090, (uint64_t)&unk_1000EB0B8, a2);
}

uint64_t sub_10004E0E4(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BA20(a1, a2, a3, a4, (uint64_t)&unk_1000EB090, (uint64_t)&unk_1000EB0B8);
}

uint64_t sub_10004E108@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004B994(a1, (uint64_t)&unk_1000EB0D8, (uint64_t)&unk_1000EB100, a2);
}

_OWORD *sub_10004E130(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10004E140(uint64_t a1)
{
  uint64_t v1;

  sub_100060C78(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10004E14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_10004E170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100008F88(&qword_10013DED0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10004E204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(sub_100008F88(&qword_10013DED0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10013D314);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000104E4;
  return sub_1000492EC(a1, v6, v7, v8, v9);
}

uint64_t sub_10004E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a12);
  }
  return result;
}

void sub_10004E324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6;

  sub_100046E98(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_10004E32C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10004B994(a1, (uint64_t)&unk_1000EB168, (uint64_t)&unk_1000EB190, a2);
}

uint64_t sub_10004E350(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BA20(a1, a2, a3, a4, (uint64_t)&unk_1000EB168, (uint64_t)&unk_1000EB190);
}

uint64_t *sub_10004E37C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *(_QWORD *)a2;
        *a1 = *(_QWORD *)a2;
        swift_retain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v12 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v13 = *(_QWORD *)a2;
        v14 = *(_QWORD *)(a2 + 8);
        v15 = *(_QWORD *)(a2 + 16);
        v16 = *(_QWORD *)(a2 + 24);
        v17 = *(_QWORD *)(a2 + 32);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = *(_QWORD *)(a2 + 48);
        v32 = *(_QWORD *)(a2 + 64);
        v34 = *(_QWORD *)(a2 + 72);
        v36 = *(_QWORD *)(a2 + 80);
        v38 = *(_QWORD *)(a2 + 88);
        v40 = *(_DWORD *)(a2 + 96);
        v20 = *(_QWORD *)a2;
        v21 = *(_QWORD *)(a2 + 56);
        sub_10004BD1C(v20, v14, v15, v16, v17, v18, v19, v21, v32, v34, v36, v38);
        *a1 = v13;
        a1[1] = v14;
        a1[2] = v15;
        a1[3] = v16;
        a1[4] = v17;
        a1[5] = v18;
        a1[6] = v19;
        a1[7] = v21;
        a1[8] = v32;
        a1[9] = v34;
        a1[10] = v36;
        a1[11] = v38;
        *((_DWORD *)a1 + 24) = v40;
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v22 = *(_QWORD *)a2;
        v23 = *(_QWORD *)(a2 + 8);
        v24 = *(_QWORD *)(a2 + 16);
        v25 = *(_QWORD *)(a2 + 24);
        v26 = *(_QWORD *)(a2 + 32);
        v27 = *(_QWORD *)(a2 + 40);
        v28 = *(_QWORD *)(a2 + 56);
        v31 = *(_QWORD *)(a2 + 48);
        v33 = *(_QWORD *)(a2 + 64);
        v35 = *(_QWORD *)(a2 + 72);
        v37 = *(_QWORD *)(a2 + 80);
        v39 = *(_QWORD *)(a2 + 88);
        v41 = *(_DWORD *)(a2 + 96);
        sub_10004BD1C(*(_QWORD *)a2, v23, v24, v25, v26, v27, v31, v28, v33, v35, v37, v39);
        *a1 = v22;
        a1[1] = v23;
        a1[2] = v24;
        a1[3] = v25;
        a1[4] = v26;
        a1[5] = v27;
        a1[6] = v31;
        a1[7] = v28;
        a1[8] = v33;
        a1[9] = v35;
        a1[10] = v37;
        a1[11] = v39;
        *((_DWORD *)a1 + 24) = v41;
        v29 = *(_OWORD *)(a2 + 128);
        *((_OWORD *)a1 + 8) = v29;
        (**(void (***)(uint64_t, uint64_t))(v29 - 8))((uint64_t)(a1 + 13), a2 + 104);
        v30 = *(_QWORD *)(a2 + 144);
        a1[18] = v30;
        swift_bridgeObjectRetain(v30);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      default:
        memcpy(a1, (const void *)a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void sub_10004E638(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      swift_release(*a1);
      break;
    case 1u:
      v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
      goto LABEL_5;
    case 2u:
      v3 = type metadata accessor for UUID(0);
LABEL_5:
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 3u:
      sub_10004BC68(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
      break;
    case 4u:
      sub_10004BC68(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
      sub_100009070(a1 + 13);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a1[18], v4, v5, v6, v7, v8, v9, v10);
      break;
    default:
      return;
  }
}

uint64_t *sub_10004E740(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *(_QWORD *)a2;
      *a1 = *(_QWORD *)a2;
      swift_retain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_8;
    case 1u:
      v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_8;
    case 2u:
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_8;
    case 3u:
      v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(_QWORD *)(a2 + 48);
      v32 = *(_QWORD *)(a2 + 64);
      v34 = *(_QWORD *)(a2 + 72);
      v36 = *(_QWORD *)(a2 + 80);
      v38 = *(_QWORD *)(a2 + 88);
      v40 = *(_DWORD *)(a2 + 96);
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)(a2 + 56);
      sub_10004BD1C(v19, v13, v14, v15, v16, v17, v18, v20, v32, v34, v36, v38);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v14;
      a1[3] = v15;
      a1[4] = v16;
      a1[5] = v17;
      a1[6] = v18;
      a1[7] = v20;
      a1[8] = v32;
      a1[9] = v34;
      a1[10] = v36;
      a1[11] = v38;
      *((_DWORD *)a1 + 24) = v40;
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_8;
    case 4u:
      v21 = *(_QWORD *)a2;
      v22 = *(_QWORD *)(a2 + 8);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = *(_QWORD *)(a2 + 40);
      v27 = *(_QWORD *)(a2 + 56);
      v31 = *(_QWORD *)(a2 + 48);
      v33 = *(_QWORD *)(a2 + 64);
      v35 = *(_QWORD *)(a2 + 72);
      v37 = *(_QWORD *)(a2 + 80);
      v39 = *(_QWORD *)(a2 + 88);
      v41 = *(_DWORD *)(a2 + 96);
      sub_10004BD1C(*(_QWORD *)a2, v22, v23, v24, v25, v26, v31, v27, v33, v35, v37, v39);
      *a1 = v21;
      a1[1] = v22;
      a1[2] = v23;
      a1[3] = v24;
      a1[4] = v25;
      a1[5] = v26;
      a1[6] = v31;
      a1[7] = v27;
      a1[8] = v33;
      a1[9] = v35;
      a1[10] = v37;
      a1[11] = v39;
      *((_DWORD *)a1 + 24) = v41;
      v28 = *(_OWORD *)(a2 + 128);
      *((_OWORD *)a1 + 8) = v28;
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 13), a2 + 104);
      v29 = *(_QWORD *)(a2 + 144);
      a1[18] = v29;
      swift_bridgeObjectRetain(v29);
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_8:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_10004E9C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;

  if (a1 != (uint64_t *)a2)
  {
    sub_10004D520((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *(_QWORD *)a2;
        *a1 = *(_QWORD *)a2;
        swift_retain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_9;
      case 1u:
        v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_9;
      case 2u:
        v11 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_9;
      case 3u:
        v12 = *(_QWORD *)a2;
        v13 = *(_QWORD *)(a2 + 8);
        v14 = *(_QWORD *)(a2 + 16);
        v15 = *(_QWORD *)(a2 + 24);
        v16 = *(_QWORD *)(a2 + 32);
        v17 = *(_QWORD *)(a2 + 40);
        v18 = *(_QWORD *)(a2 + 48);
        v32 = *(_QWORD *)(a2 + 64);
        v34 = *(_QWORD *)(a2 + 72);
        v36 = *(_QWORD *)(a2 + 80);
        v38 = *(_QWORD *)(a2 + 88);
        v40 = *(_DWORD *)(a2 + 96);
        v19 = *(_QWORD *)a2;
        v20 = *(_QWORD *)(a2 + 56);
        sub_10004BD1C(v19, v13, v14, v15, v16, v17, v18, v20, v32, v34, v36, v38);
        *a1 = v12;
        a1[1] = v13;
        a1[2] = v14;
        a1[3] = v15;
        a1[4] = v16;
        a1[5] = v17;
        a1[6] = v18;
        a1[7] = v20;
        a1[8] = v32;
        a1[9] = v34;
        a1[10] = v36;
        a1[11] = v38;
        *((_DWORD *)a1 + 24) = v40;
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_9;
      case 4u:
        v21 = *(_QWORD *)a2;
        v22 = *(_QWORD *)(a2 + 8);
        v23 = *(_QWORD *)(a2 + 16);
        v24 = *(_QWORD *)(a2 + 24);
        v25 = *(_QWORD *)(a2 + 32);
        v26 = *(_QWORD *)(a2 + 40);
        v27 = *(_QWORD *)(a2 + 56);
        v31 = *(_QWORD *)(a2 + 48);
        v33 = *(_QWORD *)(a2 + 64);
        v35 = *(_QWORD *)(a2 + 72);
        v37 = *(_QWORD *)(a2 + 80);
        v39 = *(_QWORD *)(a2 + 88);
        v41 = *(_DWORD *)(a2 + 96);
        sub_10004BD1C(*(_QWORD *)a2, v22, v23, v24, v25, v26, v31, v27, v33, v35, v37, v39);
        *a1 = v21;
        a1[1] = v22;
        a1[2] = v23;
        a1[3] = v24;
        a1[4] = v25;
        a1[5] = v26;
        a1[6] = v31;
        a1[7] = v27;
        a1[8] = v33;
        a1[9] = v35;
        a1[10] = v37;
        a1[11] = v39;
        *((_DWORD *)a1 + 24) = v41;
        v28 = *(_QWORD *)(a2 + 128);
        a1[16] = v28;
        a1[17] = *(_QWORD *)(a2 + 136);
        (**(void (***)(uint64_t, uint64_t))(v28 - 8))((uint64_t)(a1 + 13), a2 + 104);
        v29 = *(_QWORD *)(a2 + 144);
        a1[18] = v29;
        swift_bridgeObjectRetain(v29);
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10004EC5C(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10004ED24(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10004D520((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10004EDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10004EE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10004EE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10004EE28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = "d";
      v5[4] = &unk_1000EB240;
      swift_initEnumMetadataMultiPayload(a1, 256, 5, v5);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10004EECC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10004EF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 120) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100009070((_QWORD *)(v0 + 32));
  sub_100009070((_QWORD *)(v0 + 72));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10004EFB0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10004EFC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (uint64_t)(v1 + 4);
  v9 = (uint64_t)(v1 + 9);
  v10 = v1[14];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_10013D3FC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100018F40;
  return sub_10004B2F4(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10004F08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055C58();
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10004F0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055C58();
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10004F16C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  uint64_t v10;
  uint64_t v12;

  v5 = sub_100008F88(&qword_10013DA80);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v2 <= 0.75)
    v9 = 0.0;
  else
    v9 = (*v2 + -0.75) * 4.0;
  v10 = sub_100008F88(&qword_10013DA88);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, a1, v10);
  *(double *)&v8[*(int *)(v5 + 36)] = v9;
  return sub_10000CBD4((uint64_t)v8, a2, &qword_10013DA80);
}

double sub_10004F248@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double sub_10004F254(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

double (*sub_10004F260(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_10004F27C;
}

double sub_10004F27C(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)a1;
  return result;
}

uint64_t sub_10004F290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  char *v11;
  double v12;
  double v13;
  uint64_t v15;

  v5 = sub_100008F88(&qword_10013D940);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v10 = sub_100008F88(&qword_10013D948);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, a1, v10);
  v11 = &v8[*(int *)(v5 + 36)];
  v12 = 80.0;
  if (v9)
  {
    v13 = 0.0;
  }
  else
  {
    v12 = 0.0;
    v13 = 1.0;
  }
  *(double *)v11 = v12;
  v11[8] = 0;
  sub_10000CC18((uint64_t)v8, a2, &qword_10013D940);
  *(double *)(a2 + *(int *)(sub_100008F88(&qword_10013D950) + 36)) = v13;
  return sub_10000CC5C((uint64_t)v8, &qword_10013D940);
}

uint64_t sub_10004F390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v0 = sub_100008F88(&qword_10013D660);
  sub_100017104(v0, qword_10013D410);
  sub_100009558(v0, (uint64_t)qword_10013D410);
  v13 = xmmword_1000EB280;
  v14 = 0x4032000000000000;
  v1 = sub_100008F88(&qword_10013D668);
  v2 = sub_10000950C(&qword_10013D670);
  v3 = sub_10000950C(&qword_10013D678);
  v8 = &type metadata for SwoopTransitionViewModifier.Value;
  v9 = sub_10000950C(&qword_10013D680);
  v10 = sub_10000950C(&qword_10013D688);
  v11 = sub_10000CB94(&qword_10013D690, &qword_10013D680, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v12 = sub_10000CB94(&qword_10013D698, &qword_10013D688, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v5 = sub_10000CB94(&qword_10013D6A0, &qword_10013D678, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v8 = &type metadata for SwoopTransitionViewModifier.Value;
  v9 = v2;
  v10 = v3;
  v11 = OpaqueTypeConformance2;
  v12 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  return KeyframeTimeline.init<A>(initialValue:content:)(&v13, sub_10004F528, 0, &type metadata for SwoopTransitionViewModifier.Value, v1, v6);
}

uint64_t sub_10004F528@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  ValueMetadata *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v73 = a1;
  v1 = sub_100008F88(&qword_10013D668);
  v2 = *(_QWORD *)(v1 - 8);
  v71 = v1;
  v72 = v2;
  __chkstk_darwin(v1, v3);
  v69 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100008F88(&qword_10013D670);
  v70 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v5);
  v67 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013D678);
  v8 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  v66 = v8;
  __chkstk_darwin(v7, v9);
  v63 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v64 = (char *)&v59 - v13;
  v14 = sub_100008F88(&qword_10013D688);
  v61 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v75 = (char *)&v59 - v20;
  v21 = sub_100008F88(&qword_10013D680);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v76 = (char *)&v59 - v28;
  KeyPath = swift_getKeyPath(&unk_1000EB4D8);
  v30 = sub_100008F88(&qword_10013D6A8);
  v31 = sub_10000CB94(&qword_10013D6B0, &qword_10013D6A8, (uint64_t)&protocol conformance descriptor for SpringKeyframe<A>);
  KeyframeTrack.init(_:content:)(KeyPath, sub_10004FAC8, 0, v30, v31);
  v60 = sub_10000CB94(&qword_10013D690, &qword_10013D680, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  static KeyframesBuilder.buildExpression<A>(_:)(v25, &type metadata for SwoopTransitionViewModifier.Value, v21, v60);
  v62 = *(void (**)(char *, uint64_t))(v22 + 8);
  v62(v25, v21);
  v32 = swift_getKeyPath(&unk_1000EB4F8);
  v33 = sub_100008F88(&qword_10013D6B8);
  v34 = sub_10000950C(&qword_10013D6C0);
  v35 = sub_10000CB94(&qword_10013D6C8, &qword_10013D6C0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  v77 = (ValueMetadata *)&type metadata for Double;
  v78 = v34;
  v79 = v30;
  v80 = v35;
  v81 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  KeyframeTrack.init(_:content:)(v32, sub_10004FAE8, 0, v33, OpaqueTypeConformance2);
  v37 = sub_10000CB94(&qword_10013D698, &qword_10013D688, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v38 = v75;
  v74 = v14;
  static KeyframesBuilder.buildExpression<A>(_:)(v17, &type metadata for SwoopTransitionViewModifier.Value, v14, v37);
  v61 = *(_QWORD *)(v61 + 8);
  ((void (*)(char *, uint64_t))v61)(v17, v14);
  v39 = swift_getKeyPath(&unk_1000EB518);
  v40 = sub_100008F88(&qword_10013D6D0);
  v77 = (ValueMetadata *)&type metadata for Double;
  v78 = v34;
  v79 = v34;
  v80 = v35;
  v81 = v35;
  v41 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v42 = v63;
  KeyframeTrack.init(_:content:)(v39, sub_10004FDF4, 0, v40, v41);
  v43 = sub_10000CB94(&qword_10013D6A0, &qword_10013D678, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v44 = v64;
  v45 = v65;
  static KeyframesBuilder.buildExpression<A>(_:)(v42, &type metadata for SwoopTransitionViewModifier.Value, v65, v43);
  v66 = *(_QWORD *)(v66 + 8);
  ((void (*)(char *, uint64_t))v66)(v42, v45);
  v59 = v25;
  v46 = v60;
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v76, &type metadata for SwoopTransitionViewModifier.Value, v21, v60);
  v47 = v67;
  v48 = v38;
  v49 = v74;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(v25, v48, &type metadata for SwoopTransitionViewModifier.Value, v21, v74, v46, v37);
  v77 = &type metadata for SwoopTransitionViewModifier.Value;
  v78 = v21;
  v79 = v49;
  v80 = v46;
  v81 = v37;
  v50 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v51 = v69;
  v52 = v44;
  v53 = v44;
  v54 = v68;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(v47, v52, &type metadata for SwoopTransitionViewModifier.Value, v68, v45, v50, v43);
  v77 = &type metadata for SwoopTransitionViewModifier.Value;
  v78 = v54;
  v79 = v45;
  v80 = v50;
  v81 = v43;
  v55 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v56 = v71;
  static KeyframesBuilder.buildFinalResult<A>(_:)(v51, &type metadata for SwoopTransitionViewModifier.Value, v71, v55);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v56);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v54);
  v57 = (uint64_t (*)(char *, uint64_t))v62;
  v62(v59, v21);
  ((void (*)(char *, uint64_t))v66)(v53, v45);
  ((void (*)(char *, uint64_t))v61)(v75, v74);
  return v57(v76, v21);
}

uint64_t sub_10004FAC8()
{
  return sub_10005201C(0.0, 2.0, 631.0, 60.0);
}

uint64_t sub_10004FAE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v39 = a1;
  v1 = type metadata accessor for Spring(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008F88(&qword_10013D6A8);
  v6 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  v37 = v6;
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10, v11);
  v38 = (char *)&v35 - v13;
  v14 = type metadata accessor for UnitCurve(0, v12);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008F88(&qword_10013D6C0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23, v24);
  v35 = (char *)&v35 - v26;
  v40 = 0x3FDCCCCCCCCCCCCDLL;
  static UnitCurve.linear.getter(v25);
  LinearKeyframe.init(_:duration:timingCurve:)(&v40, v17, &type metadata for Double, &protocol witness table for Double, 0.1);
  v27 = sub_10000CB94(&qword_10013D6C8, &qword_10013D6C0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v22, &type metadata for Double, v18, v27);
  v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  v28(v22, v18);
  v42 = 0x3FF0000000000000;
  Spring.init(mass:stiffness:damping:allowOverDamping:)(0, 2.0, 631.0, 60.0);
  v40 = 0;
  v41 = 1;
  SpringKeyframe.init(_:duration:spring:startVelocity:)(&v42, 0, 1, v4, &v40, &type metadata for Double, &protocol witness table for Double);
  v29 = sub_10000CB94(&qword_10013D6B0, &qword_10013D6A8, (uint64_t)&protocol conformance descriptor for SpringKeyframe<A>);
  v30 = v38;
  v31 = v36;
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v9, &type metadata for Double, v36, v29);
  v32 = *(void (**)(char *, uint64_t))(v37 + 8);
  v32(v9, v31);
  v33 = v35;
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)(v35, &type metadata for Double, v18, v27);
  static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)(v22, v30, &type metadata for Double, v18, v31, v27, v29);
  v28(v22, v18);
  v32(v30, v31);
  return ((uint64_t (*)(char *, uint64_t))v28)(v33, v18);
}

uint64_t sub_10004FDF4@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  a2.n128_u64[0] = 18.0;
  return sub_100053370((void (*)(uint64_t))&static UnitCurve.easeOut.getter, a1, a2, 0.05);
}

void sub_10004FE0C()
{
  uint64_t v0;

  if (qword_10013ABF8 != -1)
    swift_once(&qword_10013ABF8, sub_10004F390);
  v0 = sub_100008F88(&qword_10013D660);
  sub_100009558(v0, (uint64_t)qword_10013D410);
  qword_100147DF0 = KeyframeTimeline.duration.getter(v0);
}

uint64_t sub_10004FE7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double MidY;
  double v36;
  double v37;
  uint64_t OpaqueTypeConformance2;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CGRect v47;

  v41 = a1;
  v44 = a2;
  v8 = type metadata accessor for GlobalCoordinateSpace(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013D998);
  v42 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013D990);
  v43 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = static UnitPoint.center.getter(v19);
  v24 = v23;
  v25 = type metadata accessor for EmptyVisualEffect(0);
  v26 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  v27 = VisualEffect.scale(_:anchor:)(v25, v26, a4, v22, v24);
  static CoordinateSpaceProtocol<>.global.getter(v27);
  v28 = GeometryProxy.frame<A>(in:)(v12, v8, &protocol witness table for GlobalCoordinateSpace);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v47.origin.x = v28;
  v47.origin.y = v30;
  v47.size.width = v32;
  v47.size.height = v34;
  MidY = CGRectGetMidY(v47);
  GeometryProxy.size.getter();
  v37 = -((MidY + v36 * 0.5 * 0.4) * a3);
  v45 = v25;
  v46 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of VisualEffect.scale(_:anchor:)>>, 1);
  VisualEffect.offset(x:y:)(v13, OpaqueTypeConformance2, 0.0, v37);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v13);
  v45 = v13;
  v46 = OpaqueTypeConformance2;
  v39 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  VisualEffect.blur(radius:opaque:)(0, v17, v39, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v21, v17);
}

uint64_t sub_100050104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055390();
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100050174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055390();
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

void sub_1000501E4()
{
  double *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *v0;
  if (qword_10013ABF8 != -1)
    swift_once(&qword_10013ABF8, sub_10004F390);
  v2 = sub_100008F88(&qword_10013D660);
  sub_100009558(v2, (uint64_t)qword_10013D410);
  KeyframeTimeline.value(time:)(&v16, v2, v1);
  v15 = v16;
  v3 = v17;
  v4 = swift_allocObject(&unk_100126248, 40, 7);
  *(_OWORD *)(v4 + 16) = v15;
  *(_QWORD *)(v4 + 32) = v3;
  v5 = sub_100008F88(&qword_10013D978);
  v6 = sub_100008F88(&qword_10013D980);
  v7 = sub_10000CB94(&qword_10013D988, &qword_10013D978, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8 = sub_10000950C(&qword_10013D990);
  v9 = sub_10000950C(&qword_10013D998);
  v10 = type metadata accessor for EmptyVisualEffect(255);
  v11 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  *(_QWORD *)&v16 = v10;
  *((_QWORD *)&v16 + 1) = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.scale(_:anchor:)>>, 1);
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = OpaqueTypeConformance2;
  v13 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  *(_QWORD *)&v16 = v8;
  *((_QWORD *)&v16 + 1) = v13;
  v14 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.blur(radius:opaque:)>>, 1);
  View.visualEffect<A>(_:)(sub_100055384, v4, v5, v6, v7, v14);
  swift_release(v4);
}

double (*sub_1000503C4(_QWORD *a1))(uint64_t)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_100055E68;
}

void sub_1000503E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  double v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;

  v55 = a2;
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7, v8);
  v10 = (double *)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100008F88(&qword_10013D630);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100008F88(&qword_10013D638);
  __chkstk_darwin(v56, v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100008F88(&qword_10013D640);
  __chkstk_darwin(v57, v18);
  v58 = (uint64_t)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v54 - v22;
  v26 = __chkstk_darwin(v24, v25);
  v28 = (char *)&v54 - v27;
  v59 = a1;
  if ((TransitionPhase.isIdentity.getter(a1, v26) & 1) != 0)
  {
    v29 = sub_100008F88(&qword_10013D658);
    v30 = (_QWORD *)swift_allocObject(v29, 48, 7);
    *((_OWORD *)v30 + 1) = xmmword_1000E9370;
    v31 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithBlurRadius:", 25.0);
    if (!v31)
    {
      __break(1u);
      return;
    }
    v32 = a3;
    v30[4] = v31;
    *((_BYTE *)v30 + 40) = 1;
  }
  else
  {
    v32 = a3;
    v30 = _swiftEmptyArrayStorage;
  }
  v33 = a4 * 0.75;
  v34 = (char *)v10 + *(int *)(v7 + 20);
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v34, v35, v36);
  *v10 = v33;
  v10[1] = v33;
  v37 = (uint64_t)&v14[*(int *)(v11 + 36)];
  sub_10000C484((uint64_t)v10, v37, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v37 + *(int *)(sub_100008F88(&qword_10013B5E8) + 36)) = 256;
  v38 = sub_100008F88(&qword_10013D648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v14, v55, v38);
  sub_100053FDC((uint64_t)v10);
  v40 = 0;
  if ((TransitionPhase.isIdentity.getter(v59, v39) & 1) != 0)
  {
    if (qword_10013AC00 != -1)
      swift_once(&qword_10013AC00, sub_10004FE0C);
    v40 = qword_100147DF0;
  }
  sub_10000CC18((uint64_t)v14, (uint64_t)v17, &qword_10013D630);
  *(_QWORD *)&v17[*(int *)(v56 + 36)] = v40;
  sub_10000CC5C((uint64_t)v14, &qword_10013D630);
  if (qword_10013AC00 != -1)
    swift_once(&qword_10013AC00, sub_10004FE0C);
  v41 = static Animation.linear(duration:)(*(double *)&qword_100147DF0);
  v42 = Animation.speed(_:)(0.6);
  v43 = swift_release(v41);
  LOBYTE(v41) = TransitionPhase.isIdentity.getter(v59, v43);
  sub_10000CC18((uint64_t)v17, (uint64_t)v23, &qword_10013D638);
  v44 = &v23[*(int *)(v57 + 36)];
  *(_QWORD *)v44 = v42;
  v44[8] = v41 & 1;
  sub_10000CC5C((uint64_t)v17, &qword_10013D638);
  sub_10000CBD4((uint64_t)v23, (uint64_t)v28, &qword_10013D640);
  v45 = v58;
  sub_10000CC18((uint64_t)v28, v58, &qword_10013D640);
  *(_QWORD *)v32 = v30;
  *(_OWORD *)(v32 + 8) = xmmword_1000EB290;
  v46 = sub_100008F88(&qword_10013D650);
  sub_10000CC18(v45, v32 + *(int *)(v46 + 48), &qword_10013D640);
  swift_bridgeObjectRetain(v30);
  sub_10000CC5C((uint64_t)v28, &qword_10013D640);
  sub_10000CC5C(v45, &qword_10013D640);
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v30, v47, v48, v49, v50, v51, v52, v53);
}

void sub_10005080C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double *v3;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *v3;
  *a3 = static Alignment.center.getter(a1);
  a3[1] = v8;
  v9 = sub_100008F88(&qword_10013D628);
  sub_1000503E0(a2, a1, (uint64_t)a3 + *(int *)(v9 + 44), v7);
}

uint64_t sub_100050904()
{
  uint64_t v0;

  sub_100026F80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for LumaTrackingBackdropView.Coordinator()
{
  return objc_opt_self(_TtCV9AirDropUIP33_433F1AD73341E061D4D68AA46B05C22624LumaTrackingBackdropView11Coordinator);
}

ValueMetadata *type metadata accessor for SwoopTransition()
{
  return &type metadata for SwoopTransition;
}

uint64_t *sub_100050958(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100008F88(&qword_10013D578);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 28);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

double sub_1000509EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = *(_QWORD *)(a1 + *(int *)(sub_100008F88(&qword_10013D578) + 28));
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_100050A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = *(int *)(sub_100008F88(&qword_10013D578) + 28);
  v6 = *(_QWORD *)(a2 + v5);
  *(_QWORD *)(a1 + v5) = v6;
  swift_retain(v6);
  return a1;
}

uint64_t sub_100050A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = *(int *)(sub_100008F88(&qword_10013D578) + 28);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a2 + v5);
  *(_QWORD *)(a1 + v5) = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t sub_100050B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = sub_100008F88(&qword_10013D578);
  *(_QWORD *)(a1 + *(int *)(v5 + 28)) = *(_QWORD *)(a2 + *(int *)(v5 + 28));
  return a1;
}

uint64_t sub_100050B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = *(int *)(sub_100008F88(&qword_10013D578) + 28);
  v6 = *(_QWORD *)(a1 + v5);
  *(_QWORD *)(a1 + v5) = *(_QWORD *)(a2 + v5);
  swift_release(v6);
  return a1;
}

uint64_t sub_100050BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100050BD8);
}

uint64_t sub_100050BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054A8C(a1, a2, a3, &qword_10013D578);
}

uint64_t sub_100050BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050BF0);
}

uint64_t sub_100050BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100054AE0(a1, a2, a3, a4, &qword_10013D578);
}

uint64_t type metadata accessor for LumaTrackingViewModifier(uint64_t a1)
{
  return sub_1000138D0(a1, (uint64_t *)&unk_10013D5D8, (uint64_t)&nominal type descriptor for LumaTrackingViewModifier);
}

void sub_100050C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100054574(a1, a2, a3, (unint64_t *)&unk_10013D5E8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
}

uint64_t sub_100050C24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100113228, 1);
}

uint64_t sub_100050C34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v20 - v10;
  if (a1 == 1)
  {
LABEL_9:
    v12 = (unsigned int *)&enum case for ColorScheme.light(_:);
    goto LABEL_10;
  }
  if (a1 != 2)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100009558(v13, (uint64_t)qword_100148040);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v17 = 134217984;
      v21 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unknown background luminance level: %lu", v17, 0xCu);
      swift_slowDealloc(v17, -1, -1);
    }

    goto LABEL_9;
  }
  v12 = (unsigned int *)&enum case for ColorScheme.dark(_:);
LABEL_10:
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v3 + 104))(v11, *v12, v2, v9);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v11, v2);
  v18 = sub_100008F88(&qword_10013D7A0);
  Binding.wrappedValue.setter(v6, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

id sub_100050E1C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;

  v0 = sub_100008F88(&qword_10013D9A8);
  UIViewRepresentableContext.coordinator.getter(&v4, v0);
  v1 = v4;
  v2 = objc_msgSend(objc_allocWithZone((Class)_UILumaTrackingBackdropView), "initWithTransitionBoundaries:delegate:frame:", v4, 0.4, 0.6, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, "setPaused:", 0, swift_release(v1).n128_f64[0]);
  return v2;
}

double sub_100050EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1, a2);
  v7 = sub_100008F88(&qword_10013D9A8);
  UIViewRepresentableContext.coordinator.getter(&v16, v7);
  v8 = v16;
  sub_10000C484(v4, (uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LumaTrackingBackdropView);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100126298, v10 + v6, v9 | 7);
  sub_1000553D8((uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  v12 = *(_QWORD *)(v8 + 16);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 16) = sub_10005541C;
  *(_QWORD *)(v8 + 24) = v11;
  sub_100026F80(v12, v13);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_100050FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1, a2);
  v7 = type metadata accessor for LumaTrackingBackdropView.Coordinator();
  v8 = swift_allocObject(v7, 32, 7);
  sub_10000C484(v3, (uint64_t)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LumaTrackingBackdropView);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100126270, v10 + v6, v9 | 7);
  sub_1000553D8((uint64_t)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  *(_QWORD *)(v8 + 16) = sub_10005541C;
  *(_QWORD *)(v8 + 24) = v11;
  result = sub_100026F80(0, 0);
  *a3 = v8;
  return result;
}

uint64_t sub_100051078(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_1000510B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100008694(&qword_10013D9B0, type metadata accessor for LumaTrackingBackdropView, (uint64_t)&unk_1000EB69C);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100051120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100008694(&qword_10013D9B0, type metadata accessor for LumaTrackingBackdropView, (uint64_t)&unk_1000EB69C);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100051188(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008694(&qword_10013D9B0, type metadata accessor for LumaTrackingBackdropView, (uint64_t)&unk_1000EB69C);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_1000511C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013D6D8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000EB538);
  v14 = sub_100008F88(&qword_10013D578);
  State.wrappedValue.getter();
  v15 = (uint64_t *)&v12[*(int *)(v9 + 36)];
  v16 = sub_100008F88(&qword_10013D6E0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v15 + *(int *)(v16 + 28), v8, v4);
  *v15 = KeyPath;
  v17 = sub_100008F88(&qword_10013D6E8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, a1, v17);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v19 = static Alignment.center.getter(v18);
  v21 = v20;
  v22 = a2 + *(int *)(sub_100008F88(&qword_10013D6F0) + 36);
  State.projectedValue.getter(v14);
  v23 = (uint64_t *)(v22 + *(int *)(sub_100008F88(&qword_10013D6F8) + 36));
  *v23 = v19;
  v23[1] = v21;
  return sub_10000CBD4((uint64_t)v12, a2, &qword_10013D6D8);
}

uint64_t sub_100051360(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100113200, 1);
}

uint64_t sub_100051370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  _DWORD v24[15];
  __int128 v25;
  int v26;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)v24 - v11;
  sub_100055118((_DWORD *)((char *)v24 - v11));
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ColorScheme.light(_:), v4);
  v13 = static ColorScheme.== infix(_:_:)(v12, v8);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v12, v4);
  v15 = 1.718;
  if ((v13 & 1) != 0)
    v15 = 1.287;
  v16 = -1.107;
  if ((v13 & 1) != 0)
    v16 = -0.715;
  *(float *)v24 = v15;
  *(float *)&v24[1] = v16;
  v17 = -0.112;
  if ((v13 & 1) != 0)
    v17 = -0.072;
  *(float *)&v24[2] = v17;
  v24[3] = 0;
  v18 = -0.329;
  if ((v13 & 1) != 0)
    v18 = -0.213;
  v19 = 0.5;
  if ((v13 & 1) != 0)
    v19 = 0.0;
  *(float *)&v24[4] = v19;
  *(float *)&v24[5] = v18;
  v20 = 0.941;
  if ((v13 & 1) != 0)
    v20 = 0.785;
  v21 = 1.935;
  if ((v13 & 1) != 0)
    v21 = 1.428;
  *(float *)&v24[6] = v20;
  *(float *)&v24[7] = v17;
  v24[8] = 0;
  *(float *)&v24[9] = v19;
  *(float *)&v24[10] = v18;
  *(float *)&v24[11] = v16;
  *(float *)&v24[12] = v21;
  v24[13] = 0;
  *(float *)&v24[14] = v19;
  v25 = xmmword_1000EB2A0;
  v26 = 0;
  sub_100008F88(&qword_10013D930);
  View._colorMatrix(_:)(v24, &type metadata for _BackdropEffectPlaceholder, &protocol witness table for _BackdropEffectPlaceholder);
  v22 = sub_100008F88(&qword_10013D938);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a2, a1, v22);
}

id sub_100051594@<X0>(id result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _OWORD v7[10];

  if ((result & 1) == 0)
  {
    v6 = _swiftEmptyArrayStorage;
    v4 = _swiftEmptyArrayStorage;
    goto LABEL_6;
  }
  v3 = sub_100008F88(&qword_10013D658);
  v4 = (_QWORD *)swift_allocObject(v3, 80, 7);
  *((_OWORD *)v4 + 1) = xmmword_1000EB2B0;
  v5 = (void *)objc_opt_self(UIBlurEffect);
  result = objc_msgSend(v5, "effectWithBlurRadius:", 35.0);
  if (result)
  {
    v4[4] = result;
    *((_BYTE *)v4 + 40) = 1;
    v4[6] = 0xBFC3333333333333;
    *((_BYTE *)v4 + 56) = 2;
    v7[0] = xmmword_1000EB2C0;
    v7[1] = xmmword_1000EB2D0;
    v7[2] = xmmword_1000EB2E0;
    v7[3] = xmmword_1000EB2D0;
    v7[4] = xmmword_1000EB2F0;
    v7[5] = xmmword_1000EB300;
    v7[6] = xmmword_1000EB310;
    v7[7] = xmmword_1000EB320;
    v7[8] = vdupq_n_s64(0x3FABA5E353F7CED9uLL);
    v7[9] = xmmword_1000EB330;
    v4[8] = objc_msgSend((id)objc_opt_self(UIColorEffect), "colorEffectMatrix:", v7);
    *((_BYTE *)v4 + 72) = 0;
    v6 = (_QWORD *)swift_allocObject(v3, 48, 7);
    *((_OWORD *)v6 + 1) = xmmword_1000E9370;
    result = objc_msgSend(v5, "effectWithBlurRadius:", 72.0);
    if (result)
    {
      v6[4] = result;
      *((_BYTE *)v6 + 40) = 1;
LABEL_6:
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_1000EB340;
      *(_QWORD *)(a2 + 24) = v6;
      *(_OWORD *)(a2 + 32) = xmmword_1000EB350;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__n128 sub_10005175C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __int128 v15;

  v4 = (void *)*v2;
  v5 = static Alignment.center.getter(a1);
  v7 = v6;
  sub_100051594(v4, (uint64_t)&v12);
  v8 = v12;
  v9 = v14;
  result = v13;
  v11 = v15;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 48) = v11;
  return result;
}

uint64_t sub_1000517C8(double a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v6 = type metadata accessor for GlobalCoordinateSpace(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0.0;
  if ((a4 & 1) != 0)
  {
    v13 = GeometryProxy.size.getter(v9);
    v15 = v14;
    static CoordinateSpaceProtocol<>.global.getter(v13);
    v16 = GeometryProxy.frame<A>(in:)(v11, v6, &protocol witness table for GlobalCoordinateSpace);
    v18 = v17;
    (*(void (**)(char *, uint64_t, double))(v7 + 8))(v11, v6, v16);
    v12 = -(v15 + v18 + a1);
  }
  v19 = type metadata accessor for EmptyVisualEffect(0);
  v20 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  return VisualEffect.offset(x:y:)(v19, v20, 0.0, v12);
}

void sub_1000518E8()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  _QWORD v8[2];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = swift_allocObject(&unk_100126220, 32, 7);
  *(_BYTE *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = sub_100008F88(&qword_10013D958);
  v5 = sub_100008F88(&qword_10013D960);
  v6 = sub_10000CB94(&qword_10013D968, &qword_10013D958, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8[0] = type metadata accessor for EmptyVisualEffect(255);
  v8[1] = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  View.visualEffect<A>(_:)(sub_100055368, v3, v4, v5, v6, OpaqueTypeConformance2);
  swift_release(v3);
}

uint64_t sub_100051A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v0 = sub_100008F88(&qword_10013D8F8);
  sub_100017104(v0, qword_10013D428);
  sub_100009558(v0, (uint64_t)qword_10013D428);
  v13 = xmmword_1000EB360;
  v14 = 0;
  v1 = sub_100008F88(&qword_10013D900);
  v2 = sub_10000950C(&qword_10013D908);
  v3 = sub_10000950C(&qword_10013D910);
  v8 = &type metadata for SwapOutTransitionViewModifier.Value;
  v9 = sub_10000950C(&qword_10013D918);
  v10 = v9;
  v11 = sub_10000CB94(&qword_10013D920, &qword_10013D918, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v12 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v5 = sub_10000CB94(&qword_10013D928, &qword_10013D910, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v8 = &type metadata for SwapOutTransitionViewModifier.Value;
  v9 = v2;
  v10 = v3;
  v11 = OpaqueTypeConformance2;
  v12 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  return KeyframeTimeline.init<A>(initialValue:content:)(&v13, sub_100051B70, 0, &type metadata for SwapOutTransitionViewModifier.Value, v1, v6);
}

uint64_t sub_100051B70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  ValueMetadata *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v57 = a1;
  v1 = sub_100008F88(&qword_10013D900);
  v2 = *(_QWORD *)(v1 - 8);
  v55 = v1;
  v56 = v2;
  __chkstk_darwin(v1, v3);
  v53 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008F88(&qword_10013D908);
  v54 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52, v5);
  v51 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013D910);
  v8 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  v50 = v8;
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v58 = (char *)&v47 - v14;
  v15 = sub_100008F88(&qword_10013D918);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v47 - v22;
  __chkstk_darwin(v24, v25);
  v59 = (char *)&v47 - v26;
  KeyPath = swift_getKeyPath(&unk_1000EBA00);
  v28 = sub_100008F88(&qword_10013D6A8);
  v29 = sub_10000CB94(&qword_10013D6B0, &qword_10013D6A8, (uint64_t)&protocol conformance descriptor for SpringKeyframe<A>);
  KeyframeTrack.init(_:content:)(KeyPath, sub_100051FF8, 0, v28, v29);
  v30 = sub_10000CB94(&qword_10013D920, &qword_10013D918, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  static KeyframesBuilder.buildExpression<A>(_:)(v23, &type metadata for SwapOutTransitionViewModifier.Value, v15, v30);
  v31 = *(void (**)(char *, uint64_t))(v16 + 8);
  v31(v23, v15);
  v48 = v31;
  v32 = swift_getKeyPath(&unk_1000EBA20);
  KeyframeTrack.init(_:content:)(v32, sub_1000521C8, 0, v28, v29);
  v47 = v23;
  static KeyframesBuilder.buildExpression<A>(_:)(v19, &type metadata for SwapOutTransitionViewModifier.Value, v15, v30);
  v31(v19, v15);
  v33 = swift_getKeyPath(&unk_1000EBA40);
  v34 = sub_100008F88(&qword_10013D6C0);
  v35 = sub_10000CB94(&qword_10013D6C8, &qword_10013D6C0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  KeyframeTrack.init(_:content:)(v33, sub_1000521F0, 0, v34, v35);
  v36 = sub_10000CB94(&qword_10013D928, &qword_10013D910, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v37 = v58;
  v38 = v49;
  static KeyframesBuilder.buildExpression<A>(_:)(v11, &type metadata for SwapOutTransitionViewModifier.Value, v49, v36);
  v50 = *(_QWORD *)(v50 + 8);
  ((void (*)(char *, uint64_t))v50)(v11, v38);
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v59, &type metadata for SwapOutTransitionViewModifier.Value, v15, v30);
  v39 = v51;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(v19, v23, &type metadata for SwapOutTransitionViewModifier.Value, v15, v15, v30, v30);
  v60 = &type metadata for SwapOutTransitionViewModifier.Value;
  v61 = v15;
  v62 = v15;
  v63 = v30;
  v64 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v42 = v52;
  v41 = v53;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(v39, v37, &type metadata for SwapOutTransitionViewModifier.Value, v52, v38, OpaqueTypeConformance2, v36);
  v60 = &type metadata for SwapOutTransitionViewModifier.Value;
  v61 = v42;
  v62 = v38;
  v63 = OpaqueTypeConformance2;
  v64 = v36;
  v43 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v44 = v55;
  static KeyframesBuilder.buildFinalResult<A>(_:)(v41, &type metadata for SwapOutTransitionViewModifier.Value, v55, v43);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v44);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v42);
  v45 = v48;
  v48(v19, v15);
  ((void (*)(char *, uint64_t))v50)(v58, v38);
  v45(v47, v15);
  return ((uint64_t (*)(char *, uint64_t))v45)(v59, v15);
}

uint64_t sub_100051FF8()
{
  return sub_10005201C(1.0, 3.0, 180.0, 45.0);
}

uint64_t sub_10005201C(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  double v27;

  v8 = type metadata accessor for Spring(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_10013D6A8);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = ((uint64_t (*)(uint64_t, uint64_t))__chkstk_darwin)(v12, v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v24 - v19;
  v27 = a1;
  Spring.init(mass:stiffness:damping:allowOverDamping:)(0, a2, a3, a4);
  v25 = 0;
  v26 = 1;
  SpringKeyframe.init(_:duration:spring:startVelocity:)(&v27, 0, 1, v11, &v25, &type metadata for Double, &protocol witness table for Double);
  v21 = sub_10000CB94(&qword_10013D6B0, &qword_10013D6A8, (uint64_t)&protocol conformance descriptor for SpringKeyframe<A>);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v17, &type metadata for Double, v12, v21);
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v17, v12);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)(v20, &type metadata for Double, v12, v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v12);
}

uint64_t sub_1000521C8()
{
  return sub_10005201C(0.6, 2.0, 375.0, 50.0);
}

uint64_t sub_1000521F0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for UnitCurve(0, a1);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008F88(&qword_10013D6C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v18 - v13;
  v19 = 0x4028000000000000;
  static UnitCurve.linear.getter(v12);
  LinearKeyframe.init(_:duration:timingCurve:)(&v19, v4, &type metadata for Double, &protocol witness table for Double, 0.2);
  v15 = sub_10000CB94(&qword_10013D6C8, &qword_10013D6C0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v9, &type metadata for Double, v5, v15);
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)(v14, &type metadata for Double, v5, v15);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v5);
}

void sub_100052360()
{
  uint64_t v0;

  if (qword_10013AC08 != -1)
    swift_once(&qword_10013AC08, sub_100051A08);
  v0 = sub_100008F88(&qword_10013D8F8);
  sub_100009558(v0, (uint64_t)qword_10013D428);
  qword_100147DF8 = KeyframeTimeline.duration.getter(v0);
}

uint64_t sub_1000523D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055C14();
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100052440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055C14();
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

void sub_1000524B0()
{
  double *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *v0;
  if (qword_10013AC08 != -1)
    swift_once(&qword_10013AC08, sub_100051A08);
  v2 = sub_100008F88(&qword_10013D8F8);
  sub_100009558(v2, (uint64_t)qword_10013D428);
  KeyframeTimeline.value(time:)(&v16, v2, v1);
  v15 = v16;
  v3 = v17;
  v4 = swift_allocObject(&unk_100126470, 40, 7);
  *(_OWORD *)(v4 + 16) = v15;
  *(_QWORD *)(v4 + 32) = v3;
  v5 = sub_100008F88(&qword_10013DA68);
  v6 = sub_100008F88(&qword_10013D980);
  v7 = sub_10000CB94(&qword_10013DA70, &qword_10013DA68, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8 = sub_10000950C(&qword_10013D990);
  v9 = sub_10000950C(&qword_10013D998);
  v10 = type metadata accessor for EmptyVisualEffect(255);
  v11 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  *(_QWORD *)&v16 = v10;
  *((_QWORD *)&v16 + 1) = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.scale(_:anchor:)>>, 1);
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = OpaqueTypeConformance2;
  v13 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  *(_QWORD *)&v16 = v8;
  *((_QWORD *)&v16 + 1) = v13;
  v14 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.blur(radius:opaque:)>>, 1);
  View.visualEffect<A>(_:)(sub_100055E74, v4, v5, v6, v7, v14);
  swift_release(v4);
}

uint64_t sub_100052690@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  char v34;
  _BYTE *v35;
  _BYTE v37[4];
  unsigned int v38;
  uint64_t v39;

  v38 = a2;
  v39 = a3;
  v6 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v6, v7);
  v9 = (double *)&v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100008F88(&qword_10013D8D8);
  __chkstk_darwin(v10, v11);
  v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100008F88(&qword_10013D8E0);
  __chkstk_darwin(v14, v15);
  v17 = &v37[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = sub_100008F88(&qword_10013D8E8);
  __chkstk_darwin(v18, v19);
  v21 = &v37[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = a4 * 0.75;
  v23 = (char *)v9 + *(int *)(v6 + 20);
  v24 = enum case for RoundedCornerStyle.continuous(_:);
  v25 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  *v9 = v22;
  v9[1] = v22;
  v26 = (uint64_t)&v13[*(int *)(v10 + 36)];
  sub_10000C484((uint64_t)v9, v26, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v26 + *(int *)(sub_100008F88(&qword_10013B5E8) + 36)) = 256;
  v27 = sub_100008F88(&qword_10013D8F0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v13, a1, v27);
  v28 = (uint64_t)v9;
  v29 = v38;
  sub_100053FDC(v28);
  v31 = 0;
  if ((TransitionPhase.isIdentity.getter(v29, v30) & 1) == 0)
  {
    if (qword_10013AC10 != -1)
      swift_once(&qword_10013AC10, sub_100052360);
    v31 = qword_100147DF8;
  }
  sub_10000CC18((uint64_t)v13, (uint64_t)v17, &qword_10013D8D8);
  *(_QWORD *)&v17[*(int *)(v14 + 36)] = v31;
  sub_10000CC5C((uint64_t)v13, &qword_10013D8D8);
  if (qword_10013AC10 != -1)
    swift_once(&qword_10013AC10, sub_100052360);
  v32 = static Animation.timingCurve(_:_:_:_:duration:)(0.103670001, 0.0153059997, 0.579999983, 1.0, *(double *)&qword_100147DF8);
  v34 = TransitionPhase.isIdentity.getter(v29, v33);
  sub_10000CC18((uint64_t)v17, (uint64_t)v21, &qword_10013D8E0);
  v35 = &v21[*(int *)(v18 + 36)];
  *(_QWORD *)v35 = v32;
  v35[8] = v34 & 1;
  sub_10000CC5C((uint64_t)v17, &qword_10013D8E0);
  return sub_10000CBD4((uint64_t)v21, v39, &qword_10013D8E8);
}

uint64_t sub_100052988@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double *v3;

  return sub_100052690(a1, a2, a3, *v3);
}

uint64_t sub_100052990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v0 = sub_100008F88(&qword_10013D8A0);
  sub_100017104(v0, qword_10013D440);
  sub_100009558(v0, (uint64_t)qword_10013D440);
  v13 = xmmword_1000EB370;
  v14 = 0x4028000000000000;
  v1 = sub_100008F88(&qword_10013D8A8);
  v2 = sub_10000950C(&qword_10013D8B0);
  v3 = sub_10000950C(&qword_10013D8B8);
  v8 = &type metadata for SwapInTransitionViewModifier.Value;
  v9 = sub_10000950C(&qword_10013D8C0);
  v10 = v9;
  v11 = sub_10000CB94(&qword_10013D8C8, &qword_10013D8C0, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v12 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v5 = sub_10000CB94(&qword_10013D8D0, &qword_10013D8B8, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v8 = &type metadata for SwapInTransitionViewModifier.Value;
  v9 = v2;
  v10 = v3;
  v11 = OpaqueTypeConformance2;
  v12 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  return KeyframeTimeline.init<A>(initialValue:content:)(&v13, sub_100052AFC, 0, &type metadata for SwapInTransitionViewModifier.Value, v1, v6);
}

uint64_t sub_100052AFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  ValueMetadata *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v68 = a1;
  v1 = sub_100008F88(&qword_10013D8A8);
  v2 = *(_QWORD *)(v1 - 8);
  v66 = v1;
  v67 = v2;
  __chkstk_darwin(v1, v3);
  v64 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100008F88(&qword_10013D8B0);
  v65 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63, v5);
  v62 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013D8B8);
  v8 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  v61 = v8;
  __chkstk_darwin(v7, v9);
  v58 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v59 = (char *)&v55 - v13;
  v14 = sub_100008F88(&qword_10013D8C0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v70 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v55 - v20;
  __chkstk_darwin(v22, v23);
  v69 = (char *)&v55 - v24;
  KeyPath = swift_getKeyPath(&unk_1000EB9A0);
  v26 = sub_100008F88(&qword_10013D6B8);
  v27 = sub_10000950C(&qword_10013D6C0);
  v28 = sub_10000950C(&qword_10013D6A8);
  v29 = sub_10000CB94(&qword_10013D6C8, &qword_10013D6C0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  v30 = sub_10000CB94(&qword_10013D6B0, &qword_10013D6A8, (uint64_t)&protocol conformance descriptor for SpringKeyframe<A>);
  v71 = (ValueMetadata *)&type metadata for Double;
  v72 = v27;
  v73 = v28;
  v74 = v29;
  v75 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  KeyframeTrack.init(_:content:)(KeyPath, sub_100053014, 0, v26, OpaqueTypeConformance2);
  v32 = sub_10000CB94(&qword_10013D8C8, &qword_10013D8C0, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v33 = v69;
  static KeyframesBuilder.buildExpression<A>(_:)(v21, &type metadata for SwapInTransitionViewModifier.Value, v14, v32);
  v34 = *(void (**)(char *, uint64_t))(v15 + 8);
  v56 = v21;
  v34(v21, v14);
  v57 = v34;
  v35 = swift_getKeyPath(&unk_1000EB9C0);
  v36 = v70;
  KeyframeTrack.init(_:content:)(v35, sub_100053028, 0, v26, OpaqueTypeConformance2);
  static KeyframesBuilder.buildExpression<A>(_:)(v36, &type metadata for SwapInTransitionViewModifier.Value, v14, v32);
  v34(v36, v14);
  v37 = swift_getKeyPath(&unk_1000EB9E0);
  v38 = sub_100008F88(&qword_10013D6D0);
  v71 = (ValueMetadata *)&type metadata for Double;
  v72 = v27;
  v73 = v27;
  v74 = v29;
  v75 = v29;
  v39 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v40 = v58;
  KeyframeTrack.init(_:content:)(v37, sub_10005335C, 0, v38, v39);
  v41 = sub_10000CB94(&qword_10013D8D0, &qword_10013D8B8, (uint64_t)&protocol conformance descriptor for KeyframeTrack<A, B, C>);
  v42 = v59;
  v43 = v60;
  static KeyframesBuilder.buildExpression<A>(_:)(v40, &type metadata for SwapInTransitionViewModifier.Value, v60, v41);
  v61 = *(_QWORD *)(v61 + 8);
  ((void (*)(char *, uint64_t))v61)(v40, v43);
  v44 = v70;
  static KeyframesBuilder.buildPartialBlock<A>(first:)(v33, &type metadata for SwapInTransitionViewModifier.Value, v14, v32);
  v45 = v62;
  v46 = v44;
  v47 = v56;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(v46, v56, &type metadata for SwapInTransitionViewModifier.Value, v14, v14, v32, v32);
  v71 = &type metadata for SwapInTransitionViewModifier.Value;
  v72 = v14;
  v73 = v14;
  v74 = v32;
  v75 = v32;
  v48 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v50 = v63;
  v49 = v64;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(v45, v42, &type metadata for SwapInTransitionViewModifier.Value, v63, v43, v48, v41);
  v71 = &type metadata for SwapInTransitionViewModifier.Value;
  v72 = v50;
  v73 = v43;
  v74 = v48;
  v75 = v41;
  v51 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)>>, 1);
  v52 = v66;
  static KeyframesBuilder.buildFinalResult<A>(_:)(v49, &type metadata for SwapInTransitionViewModifier.Value, v66, v51);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v52);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v45, v50);
  v53 = v57;
  v57(v70, v14);
  ((void (*)(char *, uint64_t))v61)(v42, v43);
  v53(v47, v14);
  return ((uint64_t (*)(char *, uint64_t))v53)(v69, v14);
}

uint64_t sub_100053014@<X0>(uint64_t a1@<X8>)
{
  return sub_100053044(a1, 1.0, 0.45, 0.0);
}

uint64_t sub_100053028@<X0>(uint64_t a1@<X8>)
{
  return sub_100053044(a1, 0.6, 0.65, 1.0);
}

uint64_t sub_100053044@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  double v46;
  char v47;
  double v48;

  v45 = a1;
  v7 = type metadata accessor for Spring(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013D6A8);
  v12 = *(_QWORD *)(v11 - 8);
  v42 = v11;
  v43 = v12;
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16, v17);
  v44 = (char *)&v41 - v19;
  v20 = type metadata accessor for UnitCurve(0, v18);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100008F88(&qword_10013D6C0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  v28 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29, v30);
  v41 = (char *)&v41 - v32;
  v46 = a2;
  static UnitCurve.linear.getter(v31);
  LinearKeyframe.init(_:duration:timingCurve:)(&v46, v23, &type metadata for Double, &protocol witness table for Double, a3);
  v33 = sub_10000CB94(&qword_10013D6C8, &qword_10013D6C0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v28, &type metadata for Double, v24, v33);
  v34 = *(void (**)(char *, uint64_t))(v25 + 8);
  v34(v28, v24);
  v48 = a4;
  Spring.init(mass:stiffness:damping:allowOverDamping:)(0, 3.0, 180.0, 45.0);
  v46 = 0.0;
  v47 = 1;
  SpringKeyframe.init(_:duration:spring:startVelocity:)(&v48, 0, 1, v10, &v46, &type metadata for Double, &protocol witness table for Double);
  v35 = sub_10000CB94(&qword_10013D6B0, &qword_10013D6A8, (uint64_t)&protocol conformance descriptor for SpringKeyframe<A>);
  v36 = v44;
  v37 = v42;
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v15, &type metadata for Double, v42, v35);
  v38 = *(void (**)(char *, uint64_t))(v43 + 8);
  v38(v15, v37);
  v39 = v41;
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)(v41, &type metadata for Double, v24, v33);
  static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)(v28, v36, &type metadata for Double, v24, v37, v33, v35);
  v34(v28, v24);
  v38(v36, v37);
  return ((uint64_t (*)(char *, uint64_t))v34)(v39, v24);
}

uint64_t sub_10005335C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  a2.n128_u64[0] = 12.0;
  return sub_100053370((void (*)(uint64_t))&static UnitCurve.linear.getter, a1, a2, 0.5);
}

uint64_t sub_100053370@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, double a4@<D1>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;

  v6 = a3.n128_u64[0];
  v29 = a2;
  v7 = type metadata accessor for UnitCurve(0, a3);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013D6C0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v29 - v18;
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v29 - v23;
  v30 = v6;
  static UnitCurve.linear.getter(v22);
  LinearKeyframe.init(_:duration:timingCurve:)(&v30, v10, &type metadata for Double, &protocol witness table for Double, a4);
  v25 = sub_10000CB94(&qword_10013D6C8, &qword_10013D6C0, (uint64_t)&protocol conformance descriptor for LinearKeyframe<A>);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v19, &type metadata for Double, v11, v25);
  v26 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v27 = v26(v19, v11);
  v30 = 0;
  a1(v27);
  LinearKeyframe.init(_:duration:timingCurve:)(&v30, v10, &type metadata for Double, &protocol witness table for Double, 0.2);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v15, &type metadata for Double, v11, v25);
  v26(v15, v11);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)(v24, &type metadata for Double, v11, v25);
  static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)(v15, v19, &type metadata for Double, v11, v11, v25, v25);
  v26(v15, v11);
  v26(v19, v11);
  return v26(v24, v11);
}

void sub_1000535A0()
{
  uint64_t v0;

  if (qword_10013AC18 != -1)
    swift_once(&qword_10013AC18, sub_100052990);
  v0 = sub_100008F88(&qword_10013D8A0);
  sub_100009558(v0, (uint64_t)qword_10013D440);
  qword_100147E00 = KeyframeTimeline.duration.getter(v0);
}

uint64_t sub_100053610@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  __n128 v35;
  double v36;
  double v37;
  double v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CGRect v48;

  v42 = a1;
  v45 = a2;
  v8 = type metadata accessor for GlobalCoordinateSpace(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013D998);
  v43 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013D990);
  v44 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = static UnitPoint.center.getter(v19);
  v24 = v23;
  v25 = type metadata accessor for EmptyVisualEffect(0);
  v26 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  v27 = VisualEffect.scale(_:anchor:)(v25, v26, a4, v22, v24);
  static CoordinateSpaceProtocol<>.global.getter(v27);
  v28 = GeometryProxy.frame<A>(in:)(v12, v8, &protocol witness table for GlobalCoordinateSpace);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v48.origin.x = v28;
  v48.origin.y = v30;
  v48.size.width = v32;
  v48.size.height = v34;
  v35.n128_f64[0] = CGRectGetMidY(v48);
  v36 = v35.n128_f64[0];
  GeometryProxy.size.getter(v35);
  v38 = -((v36 + v37 * 0.5 * 0.7) * a3);
  v46 = v25;
  v47 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of VisualEffect.scale(_:anchor:)>>, 1);
  VisualEffect.offset(x:y:)(v13, OpaqueTypeConformance2, 0.0, v38);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v13);
  v46 = v13;
  v47 = OpaqueTypeConformance2;
  v40 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  VisualEffect.blur(radius:opaque:)(0, v17, v40, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v21, v17);
}

uint64_t sub_10005389C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055BC0();
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10005390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100055BC0();
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

void sub_10005397C()
{
  double *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *v0;
  if (qword_10013AC18 != -1)
    swift_once(&qword_10013AC18, sub_100052990);
  v2 = sub_100008F88(&qword_10013D8A0);
  sub_100009558(v2, (uint64_t)qword_10013D440);
  KeyframeTimeline.value(time:)(&v16, v2, v1);
  v15 = v16;
  v3 = v17;
  v4 = swift_allocObject(&unk_100126448, 40, 7);
  *(_OWORD *)(v4 + 16) = v15;
  *(_QWORD *)(v4 + 32) = v3;
  v5 = sub_100008F88(&qword_10013DA50);
  v6 = sub_100008F88(&qword_10013D980);
  v7 = sub_10000CB94(&qword_10013DA58, &qword_10013DA50, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8 = sub_10000950C(&qword_10013D990);
  v9 = sub_10000950C(&qword_10013D998);
  v10 = type metadata accessor for EmptyVisualEffect(255);
  v11 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  *(_QWORD *)&v16 = v10;
  *((_QWORD *)&v16 + 1) = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.scale(_:anchor:)>>, 1);
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = OpaqueTypeConformance2;
  v13 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  *(_QWORD *)&v16 = v8;
  *((_QWORD *)&v16 + 1) = v13;
  v14 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of VisualEffect.blur(radius:opaque:)>>, 1);
  View.visualEffect<A>(_:)(sub_100055BA4, v4, v5, v6, v7, v14);
  swift_release(v4);
}

uint64_t sub_100053B5C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  double v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  char v34;
  _BYTE *v35;
  _BYTE v37[4];
  unsigned int v38;
  uint64_t v39;

  v38 = a2;
  v39 = a3;
  v6 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v6, v7);
  v9 = (double *)&v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100008F88(&qword_10013D880);
  __chkstk_darwin(v10, v11);
  v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100008F88(&qword_10013D888);
  __chkstk_darwin(v14, v15);
  v17 = &v37[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = sub_100008F88(&qword_10013D890);
  __chkstk_darwin(v18, v19);
  v21 = &v37[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = a4 * 0.75;
  v23 = (char *)v9 + *(int *)(v6 + 20);
  v24 = enum case for RoundedCornerStyle.continuous(_:);
  v25 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  *v9 = v22;
  v9[1] = v22;
  v26 = (uint64_t)&v13[*(int *)(v10 + 36)];
  sub_10000C484((uint64_t)v9, v26, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v26 + *(int *)(sub_100008F88(&qword_10013B5E8) + 36)) = 256;
  v27 = sub_100008F88(&qword_10013D898);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v13, a1, v27);
  v28 = (uint64_t)v9;
  v29 = v38;
  sub_100053FDC(v28);
  v31 = 0;
  if ((TransitionPhase.isIdentity.getter(v29, v30) & 1) != 0)
  {
    if (qword_10013AC20 != -1)
      swift_once(&qword_10013AC20, sub_1000535A0);
    v31 = qword_100147E00;
  }
  sub_10000CC18((uint64_t)v13, (uint64_t)v17, &qword_10013D880);
  *(_QWORD *)&v17[*(int *)(v14 + 36)] = v31;
  sub_10000CC5C((uint64_t)v13, &qword_10013D880);
  if (qword_10013AC20 != -1)
    swift_once(&qword_10013AC20, sub_1000535A0);
  v32 = static Animation.timingCurve(_:_:_:_:duration:)(0.103670001, 0.0153059997, 0.579999983, 1.0, *(double *)&qword_100147E00);
  v34 = TransitionPhase.isIdentity.getter(v29, v33);
  sub_10000CC18((uint64_t)v17, (uint64_t)v21, &qword_10013D888);
  v35 = &v21[*(int *)(v18 + 36)];
  *(_QWORD *)v35 = v32;
  v35[8] = v34 & 1;
  sub_10000CC5C((uint64_t)v17, &qword_10013D888);
  return sub_10000CBD4((uint64_t)v21, v39, &qword_10013D890);
}

uint64_t sub_100053E54@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double *v3;

  return sub_100053B5C(a1, a2, a3, *v3);
}

uint64_t sub_100053E5C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = (void *)objc_opt_self(UITraitCollection);
  v1 = objc_msgSend(v0, "currentTraitCollection");
  objc_msgSend(v1, "displayCornerRadius");
  v3 = v2;

  v13 = v3;
  v4 = sub_100053F54();
  v5 = AnyTransition.init<A>(_:)(&v13, &type metadata for SwapInTransition, v4);
  v6 = objc_msgSend(v0, "currentTraitCollection");
  objc_msgSend(v6, "displayCornerRadius");
  v8 = v7;

  v13 = v8;
  v9 = sub_100053F98();
  v10 = AnyTransition.init<A>(_:)(&v13, &type metadata for SwapOutTransition, v9);
  v11 = static AnyTransition.asymmetric(insertion:removal:)(v5, v10);
  swift_release(v5);
  swift_release(v10);
  return v11;
}

unint64_t sub_100053F54()
{
  unint64_t result;

  result = qword_10013D618;
  if (!qword_10013D618)
  {
    result = swift_getWitnessTable(&unk_1000EB954, &type metadata for SwapInTransition);
    atomic_store(result, (unint64_t *)&qword_10013D618);
  }
  return result;
}

unint64_t sub_100053F98()
{
  unint64_t result;

  result = qword_10013D620;
  if (!qword_10013D620)
  {
    result = swift_getWitnessTable(&unk_1000EB90C, &type metadata for SwapOutTransition);
    atomic_store(result, (unint64_t *)&qword_10013D620);
  }
  return result;
}

uint64_t sub_100053FDC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for JindoBlurEffectModifier()
{
  return &type metadata for JindoBlurEffectModifier;
}

uint64_t getEnumTagSinglePayload for SwoopTransitionViewModifier.Value(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SwoopTransitionViewModifier.Value(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SwoopTransitionViewModifier.Value()
{
  return &type metadata for SwoopTransitionViewModifier.Value;
}

ValueMetadata *type metadata accessor for SwapOutTransition()
{
  return &type metadata for SwapOutTransition;
}

ValueMetadata *type metadata accessor for SwapInTransition()
{
  return &type metadata for SwapInTransition;
}

uint64_t getEnumTagSinglePayload for MoveUpEffectModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MoveUpEffectModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MoveUpEffectModifier()
{
  return &type metadata for MoveUpEffectModifier;
}

uint64_t *sub_100054158(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100008F88(&qword_1001403B0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

double sub_100054220(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100008F88(&qword_1001403B0);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  }
  return result;
}

uint64_t *sub_100054284(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100008F88(&qword_1001403B0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_100054320(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10000CC5C((uint64_t)a1, &qword_1001403B0);
    v4 = sub_100008F88(&qword_1001403B0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *sub_1000543D4(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100008F88(&qword_1001403B0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_10005446C(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_10000CC5C((uint64_t)a1, &qword_1001403B0);
    v4 = sub_100008F88(&qword_1001403B0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005451C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054528);
}

uint64_t sub_100054528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054A8C(a1, a2, a3, &qword_10013D700);
}

uint64_t sub_100054534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054540);
}

uint64_t sub_100054540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100054AE0(a1, a2, a3, a4, &qword_10013D700);
}

uint64_t type metadata accessor for VibrancyEffectModifier(uint64_t a1)
{
  return sub_1000138D0(a1, (uint64_t *)&unk_10013D760, (uint64_t)&nominal type descriptor for VibrancyEffectModifier);
}

void sub_100054560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100054574(a1, a2, a3, (unint64_t *)&unk_10013D770, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
}

void sub_100054574(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  sub_100054B48(319, a4, a5);
  if (v7 <= 0x3F)
  {
    v8 = *(_QWORD *)(v6 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v8, a1 + 16);
  }
}

uint64_t _s9AirDropUI23JindoBlurEffectModifierVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s9AirDropUI23JindoBlurEffectModifierVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000546D0 + 4 * byte_1000EB3C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100054704 + 4 * byte_1000EB3C0[v4]))();
}

uint64_t sub_100054704(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005470C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100054714);
  return result;
}

uint64_t sub_100054720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100054728);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10005472C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100054734(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundMaterialView()
{
  return &type metadata for BackgroundMaterialView;
}

ValueMetadata *type metadata accessor for SwoopTransitionViewModifier()
{
  return &type metadata for SwoopTransitionViewModifier;
}

uint64_t *sub_100054760(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v4 = sub_100008F88(&qword_10013D7A0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v6);
  }
  else
  {
    v7 = a2[1];
    a1[1] = v7;
    v8 = *(int *)(v4 + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ColorScheme(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain(v6);
    swift_retain(v7);
    v12(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100054820(_QWORD *a1)
{
  char *v2;
  uint64_t v3;

  swift_release(*a1);
  swift_release(a1[1]);
  v2 = (char *)a1 + *(int *)(sub_100008F88(&qword_10013D7A0) + 32);
  v3 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t *sub_100054878(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain(v4);
  swift_retain(v5);
  v6 = *(int *)(sub_100008F88(&qword_10013D7A0) + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  return a1;
}

uint64_t *sub_1000548F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(sub_100008F88(&qword_10013D7A0) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_100054984(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(sub_100008F88(&qword_10013D7A0) + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000549F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  v6 = *(int *)(sub_100008F88(&qword_10013D7A0) + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100054A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054A80);
}

uint64_t sub_100054A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054A8C(a1, a2, a3, &qword_10013D7A0);
}

uint64_t sub_100054A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = sub_100008F88(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t sub_100054AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054AD4);
}

uint64_t sub_100054AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100054AE0(a1, a2, a3, a4, &qword_10013D7A0);
}

uint64_t sub_100054AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = sub_100008F88(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for LumaTrackingBackdropView(uint64_t a1)
{
  return sub_1000138D0(a1, (uint64_t *)&unk_10013D800, (uint64_t)&nominal type descriptor for LumaTrackingBackdropView);
}

void sub_100054B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100054574(a1, a2, a3, (unint64_t *)&unk_10013D810, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
}

void sub_100054B48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ColorScheme(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_100054BA0()
{
  return sub_10000CB94(&qword_10013D840, &qword_10013D848, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

unint64_t sub_100054BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013D850;
  if (!qword_10013D850)
  {
    v1 = sub_10000950C(&qword_10013D6F0);
    sub_100054C54();
    sub_10000CB94(&qword_10013D870, &qword_10013D6F8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D850);
  }
  return result;
}

unint64_t sub_100054C54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013D858;
  if (!qword_10013D858)
  {
    v1 = sub_10000950C(&qword_10013D6D8);
    sub_10000CB94(&qword_10013D860, &qword_10013D6E8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000CB94(&qword_10013D868, &qword_10013D6E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D858);
  }
  return result;
}

uint64_t sub_100054CF0()
{
  return sub_100008694(&qword_10013D878, type metadata accessor for LumaTrackingBackdropView, (uint64_t)&unk_1000EB64C);
}

void *sub_100054D1C()
{
  return &protocol witness table for Double;
}

uint64_t sub_100054D28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001133DC, 1);
}

uint64_t sub_100054D38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001133B4, 1);
}

uint64_t sub_100054D48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011338C, 1);
}

uint64_t sub_100054D58(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100113364, 1);
}

uint64_t sub_100054D68(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011333C, 1);
}

uint64_t sub_100054D78(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100113314, 1);
}

uint64_t sub_100054D88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001132EC, 1);
}

uint64_t sub_100054D98(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain(a1);
  }
  else
  {
    v9 = swift_retain(a1);
    v10 = static os_log_type_t.fault.getter(v9);
    v11 = static Log.runtimeIssuesLog.getter();
    v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v17 = v14;
      *(_DWORD *)v13 = 136315138;
      v16 = sub_10003A834(0xD00000000000002FLL, 0x80000001000F1440, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v17, v8, a1);
    sub_1000091EC(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return v17;
  }
  return a1;
}

uint64_t sub_100054F60(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v9 = swift_retain(a1);
  v10 = static os_log_type_t.fault.getter(v9);
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v17 = v14;
    *(_DWORD *)v13 = 136315138;
    v16 = sub_10003A834(1819242306, 0xE400000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v17, v8, a1);
  sub_10002551C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v17;
}

uint64_t sub_100055118@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v16;
  os_log_type_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_1001403B0);
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000CC18(v2, (uint64_t)v12, &qword_1001403B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v9);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v14 = type metadata accessor for ColorScheme(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, v12, v14);
  }
  else
  {
    v16 = *v12;
    v17 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v18 = static Log.runtimeIssuesLog.getter();
    v19 = v17;
    if (os_log_type_enabled(v18, v17))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v26 = a1;
      v22 = v21;
      v28 = v21;
      *(_DWORD *)v20 = 136315138;
      v27 = sub_10003A834(0x686353726F6C6F43, 0xEB00000000656D65, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v23 = v22;
      a1 = v26;
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a1, v8, v16);
    v24 = swift_release(v16);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v24);
  }
}

uint64_t sub_100055358()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100055368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000517C8(*(double *)(v2 + 24), a1, a2, *(_BYTE *)(v2 + 16));
}

uint64_t sub_100055374()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100055384@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double *v2;

  return sub_10004FE7C(a1, a2, v2[2], v2[3], v2[4]);
}

unint64_t sub_100055390()
{
  unint64_t result;

  result = qword_10013D9A0;
  if (!qword_10013D9A0)
  {
    result = swift_getWitnessTable(&unk_1000EB72C, &type metadata for SwoopTransitionViewModifier);
    atomic_store(result, (unint64_t *)&qword_10013D9A0);
  }
  return result;
}

uint64_t sub_1000553D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LumaTrackingBackdropView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for LumaTrackingBackdropView(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  swift_release(*(_QWORD *)(v0 + v3));
  swift_release(*(_QWORD *)(v6 + 8));
  v7 = v6 + *(int *)(sub_100008F88(&qword_10013D7A0) + 32);
  v8 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000554B8(uint64_t a1)
{
  type metadata accessor for LumaTrackingBackdropView(0);
  return sub_100050C34(a1);
}

ValueMetadata *type metadata accessor for SwapOutTransitionViewModifier.Value()
{
  return &type metadata for SwapOutTransitionViewModifier.Value;
}

ValueMetadata *type metadata accessor for SwapInTransitionViewModifier.Value()
{
  return &type metadata for SwapInTransitionViewModifier.Value;
}

ValueMetadata *type metadata accessor for SwapInTransitionViewModifier()
{
  return &type metadata for SwapInTransitionViewModifier;
}

ValueMetadata *type metadata accessor for SwapOutTransitionViewModifier()
{
  return &type metadata for SwapOutTransitionViewModifier;
}

ValueMetadata *type metadata accessor for JindoOpacityEffectModifier()
{
  return &type metadata for JindoOpacityEffectModifier;
}

unint64_t sub_100055548()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013D9B8;
  if (!qword_10013D9B8)
  {
    v1 = sub_10000950C(&qword_10013D890);
    sub_100055774(&qword_10013D9C0, &qword_10013D888, (void (*)(void))sub_1000555EC, (void (*)(void))sub_100055688);
    sub_10000CB94((unint64_t *)&unk_100140300, &qword_10013D9E0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D9B8);
  }
  return result;
}

unint64_t sub_1000555EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013D9C8;
  if (!qword_10013D9C8)
  {
    v1 = sub_10000950C(&qword_10013D880);
    sub_10000CB94(&qword_10013D9D0, &qword_10013D898, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D9C8);
  }
  return result;
}

unint64_t sub_100055688()
{
  unint64_t result;

  result = qword_10013D9D8;
  if (!qword_10013D9D8)
  {
    result = swift_getWitnessTable(&unk_1000EBC4C, &type metadata for SwapInTransitionViewModifier);
    atomic_store(result, (unint64_t *)&qword_10013D9D8);
  }
  return result;
}

unint64_t sub_1000556D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013D9E8;
  if (!qword_10013D9E8)
  {
    v1 = sub_10000950C(&qword_10013D8E8);
    sub_100055774(&qword_10013D9F0, &qword_10013D8E0, (void (*)(void))sub_1000557E4, (void (*)(void))sub_100055880);
    sub_10000CB94((unint64_t *)&unk_100140300, &qword_10013D9E0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D9E8);
  }
  return result;
}

uint64_t sub_100055774(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000557E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013D9F8;
  if (!qword_10013D9F8)
  {
    v1 = sub_10000950C(&qword_10013D8D8);
    sub_10000CB94(&qword_10013DA00, &qword_10013D8F0, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D9F8);
  }
  return result;
}

unint64_t sub_100055880()
{
  unint64_t result;

  result = qword_10013DA08;
  if (!qword_10013DA08)
  {
    result = swift_getWitnessTable(&unk_1000EBBAC, &type metadata for SwapOutTransitionViewModifier);
    atomic_store(result, (unint64_t *)&qword_10013DA08);
  }
  return result;
}

uint64_t sub_1000558C4()
{
  return sub_10000CB94(&qword_10013DA10, &qword_10013DA18, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

unint64_t sub_1000558F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013DA20;
  if (!qword_10013DA20)
  {
    v1 = sub_10000950C(&qword_10013D930);
    sub_10000CB94(&qword_10013DA28, &qword_10013D938, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000CB94((unint64_t *)&unk_100140930, &qword_1001408B0, (uint64_t)&protocol conformance descriptor for _BackdropEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013DA20);
  }
  return result;
}

uint64_t sub_100055990()
{
  return sub_100055774(&qword_10013DA30, &qword_10013D950, (void (*)(void))sub_1000559C4, (void (*)(void))sub_100055A48);
}

unint64_t sub_1000559C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013DA38;
  if (!qword_10013DA38)
  {
    v1 = sub_10000950C(&qword_10013D940);
    sub_10000CB94(&qword_10013DA40, &qword_10013D948, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013DA38);
  }
  return result;
}

unint64_t sub_100055A48()
{
  unint64_t result;

  result = qword_10013DA48;
  if (!qword_10013DA48)
  {
    result = swift_getWitnessTable(&unk_1000EBB0C, &type metadata for JindoOpacityEffectModifier);
    atomic_store(result, (unint64_t *)&qword_10013DA48);
  }
  return result;
}

uint64_t sub_100055A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_10000950C(&qword_10013D958);
  v1 = sub_10000950C(&qword_10013D960);
  v2 = sub_10000CB94(&qword_10013D968, &qword_10013D958, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v5 = type metadata accessor for EmptyVisualEffect(255);
  v6 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  v5 = v0;
  v6 = v1;
  v7 = v2;
  v8 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.visualEffect<A>(_:)>>, 1);
}

uint64_t sub_100055B50(uint64_t a1)
{
  return sub_100055CC4(a1, &qword_10013D978, &qword_10013D988);
}

uint64_t sub_100055B64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100113454, 1);
}

uint64_t sub_100055B74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011342C, 1);
}

uint64_t sub_100055B84(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100113404, 1);
}

uint64_t sub_100055B94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100055BA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double *v2;

  return sub_100053610(a1, a2, v2[2], v2[3], v2[4]);
}

unint64_t sub_100055BC0()
{
  unint64_t result;

  result = qword_10013DA60;
  if (!qword_10013DA60)
  {
    result = swift_getWitnessTable(&unk_1000EBBFC, &type metadata for SwapInTransitionViewModifier);
    atomic_store(result, (unint64_t *)&qword_10013DA60);
  }
  return result;
}

uint64_t sub_100055C04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_100055C14()
{
  unint64_t result;

  result = qword_10013DA78;
  if (!qword_10013DA78)
  {
    result = swift_getWitnessTable(&unk_1000EBB5C, &type metadata for SwapOutTransitionViewModifier);
    atomic_store(result, (unint64_t *)&qword_10013DA78);
  }
  return result;
}

unint64_t sub_100055C58()
{
  unint64_t result;

  result = qword_10013DA90;
  if (!qword_10013DA90)
  {
    result = swift_getWitnessTable(&unk_1000EBABC, &type metadata for JindoOpacityEffectModifier);
    atomic_store(result, (unint64_t *)&qword_10013DA90);
  }
  return result;
}

uint64_t sub_100055C9C(uint64_t a1)
{
  return sub_100055CC4(a1, &qword_10013DA50, &qword_10013DA58);
}

uint64_t sub_100055CB0(uint64_t a1)
{
  return sub_100055CC4(a1, &qword_10013DA68, &qword_10013DA70);
}

uint64_t sub_100055CC4(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_10000950C(a2);
  v6 = sub_10000950C(&qword_10013D980);
  v7 = sub_10000CB94(a3, a2, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v8 = sub_10000950C(&qword_10013D990);
  v9 = sub_10000950C(&qword_10013D998);
  v14 = type metadata accessor for EmptyVisualEffect(255);
  v15 = sub_100008694(&qword_10013D970, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of VisualEffect.scale(_:anchor:)>>, 1);
  v14 = v9;
  v15 = OpaqueTypeConformance2;
  v11 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of VisualEffect.offset(x:y:)>>, 1);
  v14 = v8;
  v15 = v11;
  v12 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of VisualEffect.blur(radius:opaque:)>>, 1);
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = v12;
  return swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.visualEffect<A>(_:)>>, 1);
}

unint64_t sub_100055DE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013DA98;
  if (!qword_10013DA98)
  {
    v1 = sub_10000950C(&qword_10013DA80);
    sub_10000CB94(&qword_10013DAA0, &qword_10013DA88, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013DA98);
  }
  return result;
}

uint64_t sub_100055E80()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for ContactAvatarView.Coordinator()
{
  return objc_opt_self(_TtCV9AirDropUI17ContactAvatarView11Coordinator);
}

uint64_t destroy for AirDropActivityAttributes(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *_s9AirDropUI16DeviceAvatarViewVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for DeviceAvatarView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for DeviceAvatarView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceAvatarView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceAvatarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceAvatarView()
{
  return &type metadata for DeviceAvatarView;
}

_QWORD *initializeBufferWithCopyOfBuffer for AirDropActivityAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for AirDropActivityAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for AirDropActivityAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactAvatarView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactAvatarView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactAvatarView()
{
  return &type metadata for ContactAvatarView;
}

unint64_t sub_100056190()
{
  unint64_t result;

  result = qword_100140710;
  if (!qword_100140710)
  {
    result = swift_getWitnessTable(&unk_1000EBDE4, &type metadata for ContactAvatarView);
    atomic_store(result, (unint64_t *)&qword_100140710);
  }
  return result;
}

id sub_1000561D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10;

  v3 = *v1;
  v4 = v1[1];
  v5 = sub_100008F88(&qword_10013DB60);
  UIViewRepresentableContext.coordinator.getter(&v10, v5);
  v6 = v10;
  v7 = *(id *)(v10 + 24);
  v8 = objc_msgSend(v7, "view", swift_release(v6).n128_f64[0]);

  sub_100056B88(a1, v3, v4);
  return v8;
}

void sub_100056270(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100056B88(a2, *v2, v2[1]);
}

void sub_10005627C(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;

  v2 = type metadata accessor for ContactAvatarView.Coordinator();
  v3 = swift_allocObject(v2, 32, 7);
  v4 = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  *(_QWORD *)(v3 + 16) = v4;
  v5 = objc_msgSend((id)objc_opt_self(CNAvatarViewControllerSettings), "settingsWithContactStore:threeDTouchEnabled:", v4, 0);
  v6 = objc_msgSend(objc_allocWithZone((Class)CNAvatarViewController), "initWithSettings:", v5);

  *(_QWORD *)(v3 + 24) = v6;
  *a1 = v3;
}

uint64_t sub_10005632C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011350C, 1);
}

uint64_t sub_10005633C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100056824();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10005638C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100056824();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000563DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100056824();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_100056400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  unsigned __int8 v75;
  __int128 v76;

  *(_QWORD *)&v55 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55, v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_10013DB58);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for iosmacHardware(0, v14);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = __chkstk_darwin(v17, v19);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = static Color.white.getter(v20);
  v23 = a4;
  v24 = static Alignment.center.getter(v62);
  _FrameLayout.init(width:height:alignment:)(&v66, *(_QWORD *)&a4, 0, *(_QWORD *)&a4, 0, v24, v25);
  v61 = v66;
  v60 = v67;
  v59 = v68;
  v58 = v69;
  v57 = v70;
  v56 = v71;
  swift_bridgeObjectRetain(a2);
  iosmacHardware.init(_:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    result = sub_100056868((uint64_t)v16);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0uLL;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
  }
  else
  {
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v22, v16, v17);
    v40 = iosmacHardware.image.getter(v39);
    v41 = v55;
    (*(void (**)(char *, _QWORD, _QWORD))(v8 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v55);
    v27 = Image.resizable(capInsets:resizingMode:)(v11, v40, 0.0, 0.0, 0.0, 0.0);
    v42 = swift_release(v40);
    v43 = (*(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8))(v11, v41, v42);
    v44 = static Edge.Set.all.getter(v43);
    v45 = EdgeInsets.init(_all:)(a4 / 10.0);
    v35 = v46;
    v36 = v47;
    v37 = v48;
    v38 = v49;
    v50 = static Alignment.center.getter(v45);
    _FrameLayout.init(width:height:alignment:)(&v72, *(_QWORD *)&v23, 0, *(_QWORD *)&v23, 0, v50, v51);
    v65 = 0;
    v30 = v72;
    v64 = v73;
    v32 = v74;
    v63 = v75;
    v55 = v76;
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    v34 = v55;
    v29 = v65;
    v31 = v64;
    v28 = v44;
    v33 = v63;
  }
  v52 = v60;
  v53 = v58;
  *(_QWORD *)a3 = v62;
  *(_WORD *)(a3 + 8) = 256;
  *(_QWORD *)(a3 + 16) = v61;
  *(_BYTE *)(a3 + 24) = v52;
  *(_QWORD *)(a3 + 32) = v59;
  *(_BYTE *)(a3 + 40) = v53;
  v54 = v56;
  *(_QWORD *)(a3 + 48) = v57;
  *(_QWORD *)(a3 + 56) = v54;
  *(_QWORD *)(a3 + 64) = v27;
  *(_QWORD *)(a3 + 72) = v28;
  *(_QWORD *)(a3 + 80) = v35;
  *(_QWORD *)(a3 + 88) = v36;
  *(_QWORD *)(a3 + 96) = v37;
  *(_QWORD *)(a3 + 104) = v38;
  *(_QWORD *)(a3 + 112) = v29;
  *(_QWORD *)(a3 + 120) = v30;
  *(_QWORD *)(a3 + 128) = v31;
  *(_QWORD *)(a3 + 136) = v32;
  *(_QWORD *)(a3 + 144) = v33;
  *(_OWORD *)(a3 + 152) = v34;
  return result;
}

__n128 sub_100056778@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  _OWORD v15[10];
  uint64_t v16;

  v4 = *v2;
  v5 = v2[1];
  v6 = *((double *)v2 + 2);
  v7 = static Alignment.center.getter(a1);
  v9 = v8;
  sub_100056400(v4, v5, (uint64_t)v15, v6);
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  v10 = v15[9];
  *(_OWORD *)(a2 + 144) = v15[8];
  *(_OWORD *)(a2 + 160) = v10;
  *(_QWORD *)(a2 + 176) = v16;
  v11 = v15[5];
  *(_OWORD *)(a2 + 80) = v15[4];
  *(_OWORD *)(a2 + 96) = v11;
  v12 = v15[7];
  *(_OWORD *)(a2 + 112) = v15[6];
  *(_OWORD *)(a2 + 128) = v12;
  v13 = v15[1];
  *(_OWORD *)(a2 + 16) = v15[0];
  *(_OWORD *)(a2 + 32) = v13;
  result = (__n128)v15[3];
  *(_OWORD *)(a2 + 48) = v15[2];
  *(__n128 *)(a2 + 64) = result;
  return result;
}

unint64_t sub_100056824()
{
  unint64_t result;

  result = qword_10013DB50;
  if (!qword_10013DB50)
  {
    result = swift_getWitnessTable(&unk_1000EBD04, &type metadata for ContactAvatarView);
    atomic_store(result, (unint64_t *)&qword_10013DB50);
  }
  return result;
}

uint64_t sub_100056868(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008F88(&qword_10013DB58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000568A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  __int128 v42;
  __int128 v43[6];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100057150((__int128 *)a1, (uint64_t)v43);
  sub_100057150(v43, (uint64_t)&v44);
  if (v48 < 0)
  {
    v48 &= ~0x8000000000000000;
    v9 = v47;
    v34 = v46;
    v35 = v47;
    v36 = 0x4049000000000000;
    v37 = 1;
  }
  else
  {
    v9 = v45;
    v34 = v44;
    v35 = v45;
    v36 = 0;
    v37 = 0;
  }
  v10 = sub_100056190();
  v11 = sub_10005718C();
  swift_bridgeObjectRetain(v9);
  _ConditionalContent<>.init(storage:)(&v34, &type metadata for ContactAvatarView, &type metadata for DeviceAvatarView, v10, v11);
  v12 = v38;
  v13 = v39;
  v14 = v40;
  v15 = v41;
  v16 = *(_QWORD *)(a1 + 104);
  if (v16)
  {
    v33 = (id)v16;
    v18 = v5;
    v19 = Image.init(uiImage:)(v17);
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    v32 = Image.resizable(capInsets:resizingMode:)(v8, v19, 0.0, 0.0, 0.0, 0.0);
    v20 = swift_release(v19);
    v21 = (*(uint64_t (**)(char *, uint64_t, __n128))(v18 + 8))(v8, v4, v20);
    v22 = static Alignment.center.getter(v21);
    _FrameLayout.init(width:height:alignment:)(&v38, 0x4030000000000000, 0, 0x4030000000000000, 0, v22, v23);
    v24 = v38;
    v25 = v39;
    v26 = v40;
    v27 = v41;
    v31 = v42;

    v28 = v31;
    v29 = v32;
    v16 = 0x3FF0000000000000;
  }
  else
  {
    v29 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0uLL;
  }
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v25;
  *(_QWORD *)(a2 + 56) = v26;
  *(_QWORD *)(a2 + 64) = v27;
  *(_OWORD *)(a2 + 72) = v28;
  *(_QWORD *)(a2 + 88) = v16;
  *(_QWORD *)(a2 + 96) = v16;
  sub_1000571D0(v12, v13);
  return sub_1000571D8(v12, v13);
}

__n128 sub_100056AF0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[7];

  v4 = v2[5];
  v26[4] = v2[4];
  v26[5] = v4;
  v26[6] = v2[6];
  v5 = v2[1];
  v26[0] = *v2;
  v26[1] = v5;
  v6 = v2[3];
  v26[2] = v2[2];
  v26[3] = v6;
  v7 = static Alignment.bottomTrailing.getter(a1);
  v9 = v8;
  sub_1000568A8((uint64_t)v26, (uint64_t)&v18);
  v10 = v19;
  v11 = v20;
  v12 = v25;
  result = v18;
  v14 = v21;
  v15 = v22;
  v16 = v23;
  v17 = v24;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 40) = v11;
  *(_OWORD *)(a2 + 48) = v14;
  *(_OWORD *)(a2 + 64) = v15;
  *(_OWORD *)(a2 + 80) = v16;
  *(_OWORD *)(a2 + 96) = v17;
  *(_QWORD *)(a2 + 112) = v12;
  return result;
}

void sub_100056B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class isa;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  uint64_t v23;

  if (!a3)
    goto LABEL_3;
  v3 = sub_100008F88(&qword_10013DB60);
  UIViewRepresentableContext.coordinator.getter(&v23, v3);
  v4 = v23;
  v5 = *(id *)(v23 + 16);
  swift_release(v4);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "contactForIdentifier:", v6);

  if (!v7)
LABEL_3:
    v7 = objc_msgSend(objc_allocWithZone((Class)CNMutableContact), "init");
  v8 = sub_100008F88(&qword_10013DB60);
  UIViewRepresentableContext.coordinator.getter(&v23, v8);
  v9 = v23;
  v10 = *(id *)(v23 + 24);
  swift_release(v9);
  v11 = sub_100008F88((uint64_t *)&unk_10013DF40);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000E9380;
  *(_QWORD *)(v12 + 32) = v7;
  v22 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v12;
  specialized Array._endMutation()();
  sub_100056CFC();
  v13 = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22, v15, v16, v17, v18, v19, v20, v21);
  objc_msgSend(v10, "setContacts:", isa);

}

unint64_t sub_100056CFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013DB68;
  if (!qword_10013DB68)
  {
    v1 = objc_opt_self(CNContact);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013DB68);
  }
  return result;
}

void destroy for BadgingAvatarView(uint64_t a1)
{
  sub_10004BC68(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));

}

uint64_t initializeWithCopy for BadgingAvatarView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a2 + 88);
  v19 = *(_DWORD *)(a2 + 96);
  sub_10004BD1C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v15, v16, v17, v18);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 88) = v18;
  *(_DWORD *)(a1 + 96) = v19;
  v12 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = v12;
  return a1;
}

uint64_t assignWithCopy for BadgingAvatarView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v27 = *(_QWORD *)(a2 + 64);
  v28 = *(_QWORD *)(a2 + 72);
  v29 = *(_QWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(a2 + 96);
  sub_10004BD1C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v27;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  *(_DWORD *)(a1 + 96) = v31;
  sub_10004BC68(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22);
  v23 = *(void **)(a1 + 104);
  v24 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v24;
  v25 = v24;

  return a1;
}

__n128 initializeWithTake for BadgingAvatarView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for BadgingAvatarView(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;

  v4 = *(_DWORD *)(a2 + 96);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 96) = v4;
  sub_10004BC68(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, v15);
  v19 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  return a1;
}

uint64_t getEnumTagSinglePayload for BadgingAvatarView(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  HIDWORD(v3) = *(_DWORD *)(a1 + 76);
  LODWORD(v3) = HIDWORD(v3);
  v2 = v3 >> 31;
  if (v2 > 0x80000000)
    v4 = ~v2;
  else
    v4 = -1;
  return (v4 + 1);
}

double storeEnumTagSinglePayload for BadgingAvatarView(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = (unint64_t)(v4 >> 1) << 32;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BadgingAvatarView()
{
  return &type metadata for BadgingAvatarView;
}

uint64_t sub_10005711C()
{
  return sub_100057204(&qword_10013DB70, &qword_10013DB78);
}

uint64_t sub_100057140(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100113534, 1);
}

uint64_t sub_100057150(__int128 *a1, uint64_t a2)
{
  initializeWithTake for ContactDetails(a2, a1);
  return a2;
}

unint64_t sub_10005718C()
{
  unint64_t result;

  result = qword_10013DB80;
  if (!qword_10013DB80)
  {
    result = swift_getWitnessTable(&unk_1000EBD94, &type metadata for DeviceAvatarView);
    atomic_store(result, (unint64_t *)&qword_10013DB80);
  }
  return result;
}

uint64_t sub_1000571D0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000571D8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000571E0()
{
  return sub_100057204(&qword_10013DB88, (uint64_t *)&unk_10013DB90);
}

uint64_t sub_100057204(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000950C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005724C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000EC028, (uint64_t)&unk_1000EC050, a2);
}

uint64_t sub_100057260(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000EC028, (uint64_t)&unk_1000EC050);
}

uint64_t sub_100057274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013DBA0);
  v1 = sub_100009558(v0, (uint64_t)qword_10013DBA0);
  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v2 = sub_100009558(v0, (uint64_t)qword_100148028);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100057358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode) = a1;
  v2 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v4, "setHidden:", sub_10005A200((uint64_t)v4, v5) & 1);

    v6 = *(void **)(v1 + v2);
    if (v6)
    {
      v8 = v6;
      objc_msgSend(*(id *)&v8[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView], "setHidden:", sub_10005A200((uint64_t)v8, v7) & 1);

    }
  }
}

uint64_t sub_1000574A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v2 = sub_100008F88(&qword_10013CD20);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v6);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v11, v12);
  v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000EBF08);
  v21 = swift_getKeyPath(&unk_1000EBF30);
  static Published.subscript.getter(v14, a1, KeyPath, v21);
  swift_release(KeyPath);
  v22 = swift_release(v21);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v16 + 48))(v14, 1, v15, v22) == 1)
  {
    sub_10000CC5C((uint64_t)v14, &qword_10013C9E0);
    v23 = swift_getKeyPath(&unk_1000EBF50);
    v24 = swift_getKeyPath(&unk_1000EBF78);
    static Published.subscript.getter(v10, a1, v23, v24);
    swift_release(v23);
    swift_release(v24);
    v25 = a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
    swift_beginAccess(v25, v31, 0, 0);
    sub_10005CBDC(v25, (uint64_t)v5);
    v26 = sub_10005770C((uint64_t)v10, (uint64_t)v5);
    sub_10000CC5C((uint64_t)v5, &qword_10013CD20);
    (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v10, v30);
  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v16 + 32))(v19, v14, v15);
    v26 = sub_10005BC5C((uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  return v26;
}

uint64_t sub_10005770C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t (*v31)(char *, uint64_t);
  int v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  int v36;
  void (*v37)(char *, uint64_t);
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t result;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  int *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  int *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  int *v74;
  uint64_t v75;
  double v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  void (*v85)(char *, uint64_t);
  void (*v86)(char *, uint64_t);
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, uint64_t);
  int *v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  Swift::String v111;
  uint64_t v112;
  Swift::String v113;
  void *object;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;

  v122 = a2;
  v121 = type metadata accessor for SFAirDropReceive.Failure(0);
  v119 = *(_QWORD *)(v121 - 8);
  v4 = __chkstk_darwin(v121, v3);
  v118 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v120 = (char *)&v115 - v7;
  v8 = sub_100008F88(&qword_10013CD20);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v115 - v19;
  v22 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v21);
  v23 = *(_QWORD **)(v22 - 8);
  v25 = __chkstk_darwin(v22, v24);
  v116 = (char *)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  v29 = (char *)&v115 - v28;
  v30 = (void (*)(char *, uint64_t, uint64_t))v23[2];
  v117 = a1;
  v30((char *)&v115 - v28, a1, v22);
  v31 = (uint64_t (*)(char *, uint64_t))v23[11];
  v123 = v29;
  v32 = v31(v29, v22);
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    v33 = (void (*)(char *, uint64_t))v23[12];
    v34 = v123;
    v33(v123, v22);
    v35 = sub_100008F88(&qword_10013CA70);
LABEL_7:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
    return 4;
  }
  v36 = v32;
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    v37 = (void (*)(char *, uint64_t))v23[12];
    v34 = v123;
    v37(v123, v22);
    v38 = (uint64_t *)&unk_10013BDF8;
LABEL_5:
    v39 = &v34[*(int *)(sub_100008F88(v38) + 48)];
    v40 = (uint64_t *)&unk_10013DC90;
LABEL_6:
    v41 = sub_100008F88(v40);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v39, v41);
    v35 = type metadata accessor for SFAirDrop.ContactInfo(0);
    goto LABEL_7;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
  {
    v43 = (void (*)(char *, uint64_t))v23[12];
    v44 = v123;
    v43(v123, v22);
    v45 = sub_100008F88(&qword_10013CA70);
LABEL_12:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
    return 2;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    v46 = (void (*)(char *, uint64_t))v23[12];
    v47 = v123;
    v46(v123, v22);
    v48 = (int *)sub_100008F88((uint64_t *)&unk_10013DC80);
    v49 = &v47[v48[12]];
    swift_bridgeObjectRelease(*(_QWORD *)&v47[v48[16] + 8]);
    v50 = &v47[v48[20]];
    v51 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v50, v51);
    v52 = type metadata accessor for SFAirDrop.Progress(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v49, v52);
LABEL_18:
    v57 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
LABEL_19:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v47, v57);
    return 3;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    v53 = (void (*)(char *, uint64_t))v23[12];
    v47 = v123;
    v53(v123, v22);
    v54 = sub_100008F88(&qword_10013CAB0);
    swift_bridgeObjectRelease(*(_QWORD *)&v47[*(int *)(v54 + 48)]);
    v55 = &v47[*(int *)(v54 + 80)];
    v56 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
    goto LABEL_18;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    v58 = (void (*)(char *, uint64_t))v23[12];
    v34 = v123;
    v58(v123, v22);
    v59 = sub_100008F88(&qword_10013CAD0);
    swift_bridgeObjectRelease(*(_QWORD *)&v34[*(int *)(v59 + 48)]);
    v60 = &v34[*(int *)(v59 + 64)];
    v61 = sub_100008F88(&qword_10013CA70);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v60, v61);
    v35 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    goto LABEL_7;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    v62 = (void (*)(char *, uint64_t))v23[12];
    v44 = v123;
    v62(v123, v22);
    v63 = sub_100008F88(&qword_10013CAD0);
    swift_bridgeObjectRelease(*(_QWORD *)&v44[*(int *)(v63 + 48)]);
    v64 = *(int *)(v63 + 64);
LABEL_25:
    v65 = &v44[v64];
    v66 = sub_100008F88(&qword_10013CA70);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v65, v66);
    v45 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    goto LABEL_12;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    v67 = (void (*)(char *, uint64_t))v23[12];
    v47 = v123;
    v67(v123, v22);
    v68 = *(int *)(sub_100008F88((uint64_t *)&unk_10013DC70) + 48);
LABEL_28:
    swift_bridgeObjectRelease(*(_QWORD *)&v47[v68]);
    goto LABEL_18;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    v69 = (void (*)(char *, uint64_t))v23[12];
    v70 = v123;
    v69(v123, v22);
    v71 = (int *)sub_100008F88(&qword_10013BDE0);
    swift_bridgeObjectRelease(*(_QWORD *)&v70[v71[12]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v70[v71[16]]);
    v72 = &v70[v71[20]];
    sub_10005CBDC(v122, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_10000CC5C((uint64_t)v11, &qword_10013CD20);
LABEL_37:
      v80 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v72, v80);
      v81 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
LABEL_38:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v81 - 8) + 8))(v123, v81);
      return 4;
    }
    v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v20, v11, v12);
    static Date.now.getter(v75);
    v76 = Date.timeIntervalSince(_:)(v20);
    v77 = *(void (**)(char *, uint64_t))(v13 + 8);
    v77(v17, v12);
    v77(v20, v12);
    if (v76 <= 7.0)
      goto LABEL_37;
    v78 = sub_100008F88(&qword_10013CA70);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v72, v78);
    v79 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
LABEL_36:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v123, v79);
    return 2;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:))
  {
    v73 = (void (*)(char *, uint64_t))v23[12];
    v44 = v123;
    v73(v123, v22);
    v74 = (int *)sub_100008F88(&qword_10013BDE0);
    swift_bridgeObjectRelease(*(_QWORD *)&v44[v74[12]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v44[v74[16]]);
    v64 = v74[20];
    goto LABEL_25;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.opening(_:))
  {
    v82 = (void (*)(char *, uint64_t))v23[12];
    v47 = v123;
    v82(v123, v22);
    v83 = sub_100008F88((uint64_t *)&unk_10013DCF0);
    swift_bridgeObjectRelease(*(_QWORD *)&v47[*(int *)(v83 + 48)]);
    v68 = *(int *)(v83 + 64);
    goto LABEL_28;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
  {
    v84 = (void (*)(char *, uint64_t))v23[12];
    v34 = v123;
    v84(v123, v22);
    v39 = &v34[*(int *)(sub_100008F88(&qword_10013BDF0) + 48)];
    v40 = &qword_10013CA70;
    goto LABEL_6;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.importingReceivedContact(_:))
  {
    v85 = (void (*)(char *, uint64_t))v23[12];
    v47 = v123;
    v85(v123, v22);
    v57 = type metadata accessor for SFAirDrop.ContactInfo(0);
    goto LABEL_19;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
  {
    v86 = (void (*)(char *, uint64_t))v23[12];
    v34 = v123;
    v86(v123, v22);
    v38 = (uint64_t *)&unk_10013DCE0;
    goto LABEL_5;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:))
  {
    v87 = v123;
    ((void (*)(char *, uint64_t))v23[12])(v123, v22);
    v88 = &v87[*(int *)(sub_100008F88(&qword_10013DCD8) + 48)];
    v89 = type metadata accessor for SFAirDrop.ContactRequest(0);
    v90 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8);
    v90(v88, v89);
    v90(v87, v89);
    return 3;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    v91 = (void (*)(char *, uint64_t))v23[12];
    v47 = v123;
    v91(v123, v22);
    v92 = (int *)sub_100008F88(&qword_10013DCD0);
    v93 = &v47[v92[12]];
    swift_bridgeObjectRelease(*(_QWORD *)&v47[v92[16] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v47[v92[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v47[v92[24]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v47[v92[28]]);
    v94 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v94 - 8) + 8))(v93, v94);
    v57 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
    goto LABEL_19;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    v95 = (void (*)(char *, uint64_t))v23[12];
    v96 = v123;
    v95(v123, v22);
    v97 = &v96[*(int *)(sub_100008F88(&qword_10013DCC0) + 48)];
    v99 = v119;
    v98 = v120;
    v100 = v121;
    (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v120, v97, v121);
    v101 = v118;
    (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v118, v98, v100);
    v102 = (*(uint64_t (**)(char *, uint64_t))(v99 + 88))(v101, v100);
    if (v102 == enum case for SFAirDropReceive.Failure.unsupportedType(_:))
    {
      v103 = v119;
      v104 = v121;
      (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
      v105 = *(void (**)(char *, uint64_t))(v103 + 96);
      v106 = v118;
      v105(v118, v104);
      swift_bridgeObjectRelease(*((_QWORD *)v106 + 1));
      v107 = &v106[*(int *)(sub_100008F88(&qword_10013DCC8) + 48)];
      v108 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v108 - 8) + 8))(v107, v108);
LABEL_58:
      v81 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      goto LABEL_38;
    }
    if (v102 == enum case for SFAirDropReceive.Failure.unexpected(_:))
    {
      v109 = *(void (**)(char *, uint64_t))(v119 + 8);
      v110 = v121;
      v109(v120, v121);
      v109(v118, v110);
      goto LABEL_58;
    }
    if (v102 == enum case for SFAirDropReceive.Failure.declined(_:)
      || v102 == enum case for SFAirDropReceive.Failure.askDismissed(_:))
    {
LABEL_66:
      (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
      v79 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      goto LABEL_36;
    }
    if (v102 == enum case for SFAirDropReceive.Failure.senderCancelled(_:))
      goto LABEL_68;
    if (v102 == enum case for SFAirDropReceive.Failure.receiverCancelled(_:)
      || v102 == enum case for SFAirDropReceive.Failure.mixedTypes(_:))
    {
      goto LABEL_66;
    }
    if (v102 == enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:))
      goto LABEL_68;
    if (v102 == enum case for SFAirDropReceive.Failure.missingOwnContact(_:))
      goto LABEL_66;
    if (v102 == enum case for SFAirDropReceive.Failure.streamError(_:)
      || v102 == enum case for SFAirDropReceive.Failure.askNotHandled(_:)
      || v102 == enum case for SFAirDropReceive.Failure.incompleteTransfer(_:)
      || v102 == enum case for SFAirDropReceive.Failure.badRequest(_:)
      || v102 == enum case for SFAirDropReceive.Failure.moveToAppFailed(_:)
      || v102 == enum case for SFAirDropReceive.Failure.insufficientStorage(_:))
    {
LABEL_68:
      (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
      goto LABEL_58;
    }
    v124 = 0;
    v125 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    v111._countAndFlagsBits = 0xD00000000000002ALL;
    v111._object = (void *)0x80000001000F19D0;
    String.append(_:)(v111);
    _print_unlocked<A, B>(_:_:)(v120, &v124, v121, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v124, v125, "AirDropUI/AirDropSystemApertureViewController.swift", 51, 2, 198, 0);
LABEL_81:
    __break(1u);
    return result;
  }
  if (v32 == enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:))
    return sub_1000583F4();
  result = 3;
  if (v36 != enum case for SFAirDropReceive.Transfer.State.created(_:)
    && v36 != enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
    && v36 != enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
  {
    if (v36 == enum case for SFAirDropReceive.Transfer.State.waitingForContactExchangeRequest(_:))
      return 2;
    v30(v116, v117, v22);
    v124 = 0;
    v125 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(v125);
    v124 = 0xD00000000000001CLL;
    v125 = 0x80000001000F19B0;
    v112 = sub_100008694(&qword_10013CCF8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v112);
    object = v113._object;
    String.append(_:)(v113);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v124, v125, "AirDropUI/AirDropSystemApertureViewController.swift", 51, 2, 203, 0);
    goto LABEL_81;
  }
  return result;
}

uint64_t sub_1000583F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  int v22;
  __n128 v23;
  void *v24;
  int v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _BYTE v32[15];
  uint64_t v33;

  v1 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  __chkstk_darwin(v1, v2);
  v4 = &v32[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession);
  KeyPath = swift_getKeyPath(&unk_1000EBF50);
  v13 = swift_getKeyPath(&unk_1000EBF78);
  v14 = swift_retain(v11);
  static Published.subscript.getter(v10, v14, KeyPath, v13);
  swift_release(v11);
  swift_release(KeyPath);
  swift_release(v13);
  v15 = sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
  v16 = (void *)static NSUserDefaults.airdrop.getter(v15);
  v17 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

  if (qword_10013ABE0 != -1)
    swift_once(&qword_10013ABE0, sub_100023E74);
  v18 = qword_100147D90;
  v19 = swift_getKeyPath(&unk_1000EBFE0);
  v20 = swift_getKeyPath(&unk_1000EC008);
  static Published.subscript.getter(&v33, v18, v19, v20);
  swift_release(v19);
  v21 = swift_release(v20);
  v22 = v33;
  if (SFAirDropReceive.Transfer.State.sfTransferState.getter(v21) == 9)
  {
    v24 = (void *)static NSUserDefaults.airdrop.getter(9);
    v25 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

  }
  else
  {
    v25 = 0;
  }
  if (SFAirDropReceive.Transfer.State.sfTransferState.getter(v23) != 3)
    v22 &= v25;
  v27 = SFAirDropReceive.Transfer.State.sfTransferState.getter(v26);
  SFAirDropReceive.Transfer.State.permissionRequest.getter();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  v28 = sub_100008F88(&qword_10013CA70);
  v29 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v4, 1, v28);
  sub_10000CC5C((uint64_t)v4, (uint64_t *)&unk_10013DCB0);
  if (v27 == 7)
    v30 = 1;
  else
    v30 = v22;
  if (v29 == 1)
  {
    if ((v30 & 1) == 0)
      return 3;
  }
  else if (((v30 | v17) & 1) == 0)
  {
    return 3;
  }
  return 4;
}

void sub_100058798()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  char v22;
  id v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  objc_class *v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  char *v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  char *v61;
  uint64_t v62;
  UIAccessibilityNotifications v63;
  char *v64;
  uint64_t v65;
  _TtC9AirDropUI33AirDropTransferSessionsController *v66;
  _TtC9AirDropUI33AirDropTransferSessionsController *v67;
  NSString v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  void *v81;
  uint8_t *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  id v87;
  id v88;
  NSObject *v89;
  char *v90;
  char *v91;
  _QWORD v92[2];
  char v93;
  id v94;
  char v95;
  objc_super v96;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v6, v7);
  v91 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (objc_class *)type metadata accessor for AirDropSystemApertureViewController();
  v96.receiver = v0;
  v96.super_class = v9;
  objc_msgSendSuper2(&v96, "viewDidLoad");
  v10 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.043, 0.608, 1.0, 1.0);
  v11 = *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession];
  v12 = type metadata accessor for AirDropTransferSession(0);
  v13 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
  v14 = swift_retain(v11);
  v15 = ObservedObject.init(wrappedValue:)(v14, v12, v13);
  v17 = v16;
  v18 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.043, 0.608, 1.0, 1.0);
  if (qword_10013ABE0 != -1)
    swift_once(&qword_10013ABE0, sub_100023E74);
  v19 = qword_100147D90;
  KeyPath = swift_getKeyPath(&unk_1000EC028);
  v21 = swift_getKeyPath(&unk_1000EC050);
  static Published.subscript.getter(v92, v19, KeyPath, v21);
  swift_release(KeyPath);
  swift_release(v21);
  v22 = v92[0];
  v23 = objc_allocWithZone((Class)sub_100008F88((uint64_t *)&unk_10013C220));
  v92[0] = v15;
  v92[1] = v17;
  v93 = 1;
  v94 = v18;
  v95 = v22;
  v24 = UIHostingController.init(rootView:)(v92);
  v25 = -[NSObject view](v24, "view");
  if (v25)
  {
    v26 = v25;
    objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v27 = objc_msgSend(v1, "view");
    if (!v27)
    {
LABEL_23:
      __break(1u);
      return;
    }
    v28 = v27;
    objc_msgSend(v27, "addSubview:", v26);

    v29 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView];
    *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView] = v26;

  }
  v89 = v24;
  v30 = (objc_class *)type metadata accessor for AirDropSystemApertureIconView(0);
  v31 = objc_allocWithZone(v30);
  v32 = v10;
  sub_1000C95A8(v32, 2, 0x3FF0000000000000, 0);
  v34 = v33;
  objc_msgSend(v33, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v35 = objc_msgSend(v1, "view");
  if (!v35)
  {
    __break(1u);
    goto LABEL_20;
  }
  v36 = v35;
  v90 = v5;
  objc_msgSend(v35, "addSubview:", v34);

  v37 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView] = v34;
  v88 = v34;

  v38 = objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureProgressView());
  v39 = v32;
  sub_1000DC36C(v39, 8, 1, 0, 0x3FF0000000000000, 0);
  v41 = v40;
  objc_msgSend(v40, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v42 = objc_msgSend(v1, "view");
  if (!v42)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v43 = v42;
  objc_msgSend(v42, "addSubview:", v41);

  v44 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView;
  v45 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView] = v41;
  v87 = v41;

  v46 = objc_allocWithZone(v30);
  v47 = v39;
  sub_1000C95A8(v47, 2, 0x3FF0000000000000, 0);
  v49 = v48;
  objc_msgSend(v48, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v50 = objc_msgSend(v1, "view");
  if (!v50)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v51 = v50;
  objc_msgSend(v50, "addSubview:", v49);

  v52 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView] = v49;
  v53 = v49;

  v54 = objc_msgSend(v1, "view");
  v55 = v90;
  if (!v54)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v56 = v54;
  objc_msgSend(v54, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v57 = *(void **)&v1[v44];
  if (v57)
  {
    v58 = v57;
    objc_msgSend(v58, "setHidden:", sub_10005A200((uint64_t)v58, v59) & 1);

    v60 = *(void **)&v1[v44];
    if (v60)
    {
      v61 = v60;
      objc_msgSend(*(id *)&v61[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView], "setHidden:", sub_10005A200((uint64_t)v61, v62) & 1);

    }
  }
  v63 = UIAccessibilityAnnouncementNotification;
  v64 = v91;
  v65 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000F1A30);
  static Locale.current.getter(v65);
  String.init(localized:table:bundle:locale:comment:)(v64, 0, 0, 0, v55, 0, 0, 256);
  v67 = v66;
  v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v67, v69, v70, v71, v72, v73, v74, v75);
  UIAccessibilityPostNotification(v63, v68);

  if (qword_10013AC28 != -1)
    swift_once(&qword_10013AC28, sub_100057274);
  v76 = type metadata accessor for Logger(0);
  v77 = sub_100009558(v76, (uint64_t)qword_10013DBA0);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter();
  v80 = os_log_type_enabled(v78, v79);
  v81 = v87;
  if (v80)
  {
    v82 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v82 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "View did load", v82, 2u);
    swift_slowDealloc(v82, -1, -1);
    v84 = v88;
    v83 = v89;
    v85 = v47;
  }
  else
  {
    v83 = v78;
    v85 = v53;
    v84 = v87;
    v81 = v88;
    v78 = v89;
    v53 = v47;
  }

}

void sub_100058E14()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  double v52;
  void *v53;
  uint64_t v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  _TtC9AirDropUI33AirDropTransferSessionsController *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  id v91;
  double v92;
  void *v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  _TtC9AirDropUI33AirDropTransferSessionsController *v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  double v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  SEL v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  uint64_t v148;
  SEL v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  SEL v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  id v181;
  uint64_t v182;
  _TtC9AirDropUI33AirDropTransferSessionsController *v183;
  SEL v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  id v194;
  double v195;
  void *v196;
  uint64_t v197;
  SEL v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView];
  if (v2)
  {
    v3 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints;
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints];
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints];
      else
        v7 = v4 & 0xFFFFFFFFFFFFFF8;
      v8 = v2;
      swift_bridgeObjectRetain(v4);
      v9 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v4, v10, v11, v12, v13, v14, v15, v16);
      if (v9)
        goto LABEL_4;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      v6 = v2;
      if (v5)
      {
LABEL_4:

        goto LABEL_26;
      }
    }
    v17 = sub_100008F88((uint64_t *)&unk_10013DF40);
    v18 = swift_allocObject(v17, 64, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1000E9A20;
    v19 = objc_msgSend(v2, "leadingAnchor");
    v20 = objc_msgSend(v1, "view");
    if (!v20)
    {
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    v21 = v20;
    v22 = objc_msgSend(v20, "leadingAnchor");

    v23 = objc_msgSend(v19, "constraintEqualToAnchor:", v22);
    *(_QWORD *)(v18 + 32) = v23;
    v24 = objc_msgSend(v2, "trailingAnchor");
    v25 = objc_msgSend(v1, "view");
    if (!v25)
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    v26 = v25;
    v27 = objc_msgSend(v25, "trailingAnchor");

    v28 = objc_msgSend(v24, "constraintEqualToAnchor:", v27);
    *(_QWORD *)(v18 + 40) = v28;
    v29 = objc_msgSend(v2, "topAnchor");
    v30 = objc_msgSend(v1, "view");
    if (!v30)
    {
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    v31 = v30;
    v32 = objc_msgSend(v30, "topAnchor");

    v33 = objc_msgSend(v29, "constraintEqualToAnchor:", v32);
    *(_QWORD *)(v18 + 48) = v33;
    v34 = objc_msgSend(v2, "bottomAnchor");
    v35 = objc_msgSend(v1, "view");
    if (!v35)
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    v36 = v35;
    v37 = objc_msgSend(v35, "bottomAnchor");

    v38 = objc_msgSend(v34, "constraintEqualToAnchor:", v37);
    *(_QWORD *)(v18 + 56) = v38;
    specialized Array._endMutation()(v39);
    v40 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v1[v3];
    *(_QWORD *)&v1[v3] = v18;
    swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
    v48 = *(_QWORD *)&v1[v3];
    if ((unint64_t)v48 >> 62)
    {
      if (v48 < 0)
        v54 = *(_QWORD *)&v1[v3];
      else
        v54 = v48 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)&v1[v3]);
      v49 = _CocoaArrayWrapper.endIndex.getter(v54);
      if (v49)
        goto LABEL_15;
    }
    else
    {
      v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)&v1[v3]);
      if (v49)
      {
LABEL_15:
        if (v49 < 1)
        {
          __break(1u);
          goto LABEL_47;
        }
        v50 = 0;
        do
        {
          if ((v48 & 0xC000000000000001) != 0)
            v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v48);
          else
            v51 = *(id *)(v48 + 8 * v50 + 32);
          v53 = v51;
          ++v50;
          LODWORD(v52) = 1144750080;
          objc_msgSend(v51, "setPriority:", v52);

        }
        while (v49 != v50);
      }
    }

    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v48, v55, v56, v57, v58, v59, v60, v61);
  }
LABEL_26:
  v49 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView];
  if (v49)
  {
    if (*(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView])
    {
      v2 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView];
      if (v2)
      {
        v205 = *(id *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView];
        v3 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints;
        v62 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints];
        if ((unint64_t)v62 >> 62)
        {
          if (v62 < 0)
            v94 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints];
          else
            v94 = v62 & 0xFFFFFFFFFFFFFF8;
          v95 = (id)v49;
          v96 = v205;
          v97 = v2;
          swift_bridgeObjectRetain(v62);
          v98 = _CocoaArrayWrapper.endIndex.getter(v94);
          swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v62, v99, v100, v101, v102, v103, v104, v105);
          v67 = v205;
          if (v98)
          {
LABEL_53:
            v107 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints;
            v108 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints];
            if ((unint64_t)v108 >> 62)
            {
              if (v108 < 0)
                v139 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints];
              else
                v139 = v108 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints]);
              v140 = _CocoaArrayWrapper.endIndex.getter(v139);
              swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v108, v141, v142, v143, v144, v145, v146, v147);
              v67 = v205;
              if (v140)
              {
LABEL_76:
                v156 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints;
                v157 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints];
                if ((unint64_t)v157 >> 62)
                {
                  if (v157 < 0)
                    v159 = *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints];
                  else
                    v159 = v157 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints]);
                  v160 = _CocoaArrayWrapper.endIndex.getter(v159);
                  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v157, v161, v162, v163, v164, v165, v166, v167);
                  v67 = v205;
                  if (v160)
                    goto LABEL_78;
                }
                else if (*(_QWORD *)((v157 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
LABEL_78:
                  v158 = v2;
                  v2 = v67;
                  v205 = (id)v49;
LABEL_99:

                  return;
                }
                v168 = objc_msgSend(v1, "view");
                if (!v168)
                  goto LABEL_108;
                v169 = v168;
                v158 = objc_msgSend(v168, "SBUISA_systemApertureTrailingConcentricContentLayoutGuide");

                v170 = sub_100008F88((uint64_t *)&unk_10013DF40);
                v171 = swift_allocObject(v170, 64, 7);
                *(_OWORD *)(v171 + 16) = xmmword_1000E9A20;
                v172 = objc_msgSend(v205, "centerXAnchor");
                v173 = objc_msgSend(v158, "centerXAnchor");
                v174 = objc_msgSend(v172, "constraintEqualToAnchor:", v173);

                *(_QWORD *)(v171 + 32) = v174;
                v175 = objc_msgSend(v205, "centerYAnchor");
                v176 = objc_msgSend(v158, "centerYAnchor");
                v177 = objc_msgSend(v175, "constraintEqualToAnchor:", v176);

                *(_QWORD *)(v171 + 40) = v177;
                v178 = objc_msgSend(v205, "widthAnchor");
                if (qword_10013AC40 != -1)
                  swift_once(&qword_10013AC40, sub_10005EF98);
                v179 = objc_msgSend(v178, "constraintEqualToConstant:", *(double *)&qword_100147E20);

                *(_QWORD *)(v171 + 48) = v179;
                v180 = objc_msgSend(v205, "heightAnchor");
                v181 = objc_msgSend(v180, "constraintEqualToConstant:", *(double *)&qword_100147E20);

                *(_QWORD *)(v171 + 56) = v181;
                specialized Array._endMutation()(v182);
                v183 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v1[v156];
                *(_QWORD *)&v1[v156] = v171;
                swift_bridgeObjectRelease(v183, v184, v185, v186, v187, v188, v189, v190);
                v191 = *(_QWORD *)&v1[v156];
                if ((unint64_t)v191 >> 62)
                {
                  if (v191 < 0)
                    v197 = v191;
                  else
                    v197 = v191 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(v191);
                  v192 = _CocoaArrayWrapper.endIndex.getter(v197);
                  if (v192)
                  {
LABEL_88:
                    if (v192 >= 1)
                    {
                      v193 = 0;
                      do
                      {
                        if ((v191 & 0xC000000000000001) != 0)
                          v194 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v193, v191);
                        else
                          v194 = *(id *)(v191 + 8 * v193 + 32);
                        v196 = v194;
                        ++v193;
                        LODWORD(v195) = 1144750080;
                        objc_msgSend(v194, "setPriority:", v195);

                      }
                      while (v192 != v193);
                      goto LABEL_98;
                    }
                    goto LABEL_102;
                  }
                }
                else
                {
                  v192 = *(_QWORD *)((v191 & 0xFFFFFFFFFFFFF8) + 0x10);
                  swift_bridgeObjectRetain(v191);
                  if (v192)
                    goto LABEL_88;
                }
LABEL_98:

                swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v191, v198, v199, v200, v201, v202, v203, v204);
                goto LABEL_99;
              }
            }
            else if (*(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_76;
            }
            v109 = objc_msgSend(v1, "view");
            if (!v109)
            {
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              return;
            }
            v110 = v109;
            v111 = objc_msgSend(v109, "SBUISA_systemApertureLeadingConcentricContentLayoutGuide");

            v112 = sub_100008F88((uint64_t *)&unk_10013DF40);
            v113 = swift_allocObject(v112, 64, 7);
            *(_OWORD *)(v113 + 16) = xmmword_1000E9A20;
            v114 = objc_msgSend((id)v49, "centerXAnchor");
            v115 = objc_msgSend(v111, "centerXAnchor");
            v116 = objc_msgSend(v114, "constraintEqualToAnchor:", v115);

            *(_QWORD *)(v113 + 32) = v116;
            v117 = objc_msgSend((id)v49, "centerYAnchor");
            v118 = objc_msgSend(v111, "centerYAnchor");
            v119 = objc_msgSend(v117, "constraintEqualToAnchor:", v118);

            *(_QWORD *)(v113 + 40) = v119;
            v120 = objc_msgSend((id)v49, "widthAnchor");
            if (qword_10013AC40 != -1)
              swift_once(&qword_10013AC40, sub_10005EF98);
            v121 = objc_msgSend(v120, "constraintEqualToConstant:", *(double *)&qword_100147E20);

            *(_QWORD *)(v113 + 48) = v121;
            v122 = objc_msgSend((id)v49, "heightAnchor");
            v123 = objc_msgSend(v122, "constraintEqualToConstant:", *(double *)&qword_100147E20);

            *(_QWORD *)(v113 + 56) = v123;
            specialized Array._endMutation()(v124);
            v125 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v1[v107];
            *(_QWORD *)&v1[v107] = v113;
            swift_bridgeObjectRelease(v125, v126, v127, v128, v129, v130, v131, v132);
            v133 = *(_QWORD *)&v1[v107];
            if ((unint64_t)v133 >> 62)
            {
              if (v133 < 0)
                v148 = *(_QWORD *)&v1[v107];
              else
                v148 = v133 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(*(_QWORD *)&v1[v107]);
              v134 = _CocoaArrayWrapper.endIndex.getter(v148);
              if (v134)
              {
LABEL_60:
                if (v134 >= 1)
                {
                  v135 = 0;
                  do
                  {
                    if ((v133 & 0xC000000000000001) != 0)
                      v136 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v135, v133);
                    else
                      v136 = *(id *)(v133 + 8 * v135 + 32);
                    v138 = v136;
                    ++v135;
                    LODWORD(v137) = 1144750080;
                    objc_msgSend(v136, "setPriority:", v137);

                  }
                  while (v134 != v135);
                  goto LABEL_75;
                }
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
                goto LABEL_103;
              }
            }
            else
            {
              v134 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(*(_QWORD *)&v1[v107]);
              if (v134)
                goto LABEL_60;
            }
LABEL_75:

            swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v133, v149, v150, v151, v152, v153, v154, v155);
            v67 = v205;
            goto LABEL_76;
          }
        }
        else
        {
          v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
          v64 = (id)v49;
          v65 = v205;
          v66 = v2;
          v67 = v205;
          if (v63)
            goto LABEL_53;
        }
        v68 = sub_100008F88((uint64_t *)&unk_10013DF40);
        v48 = swift_allocObject(v68, 48, 7);
        *(_OWORD *)(v48 + 16) = xmmword_1000EBEB0;
        v38 = objc_msgSend(v2, "widthAnchor");
        if (qword_10013AC40 == -1)
        {
LABEL_32:
          v69 = objc_msgSend(v38, "constraintEqualToConstant:", *(double *)&qword_100147E20);

          *(_QWORD *)(v48 + 32) = v69;
          v70 = objc_msgSend(v2, "heightAnchor");
          v71 = objc_msgSend(v70, "constraintEqualToConstant:", *(double *)&qword_100147E20);

          *(_QWORD *)(v48 + 40) = v71;
          specialized Array._endMutation()(v72);
          v73 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v1[v3];
          *(_QWORD *)&v1[v3] = v48;
          swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
          v81 = *(_QWORD *)&v1[v3];
          if ((unint64_t)v81 >> 62)
          {
            if (v81 < 0)
              v106 = *(_QWORD *)&v1[v3];
            else
              v106 = v81 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(*(_QWORD *)&v1[v3]);
            v82 = _CocoaArrayWrapper.endIndex.getter(v106);
            if (v82)
              goto LABEL_34;
          }
          else
          {
            v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(*(_QWORD *)&v1[v3]);
            if (v82)
            {
LABEL_34:
              if (v82 < 1)
              {
                __break(1u);
                goto LABEL_101;
              }
              v90 = 0;
              do
              {
                if ((v81 & 0xC000000000000001) != 0)
                  v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v90, v81);
                else
                  v91 = *(id *)(v81 + 8 * v90 + 32);
                v93 = v91;
                ++v90;
                LODWORD(v92) = 1144750080;
                objc_msgSend(v91, "setPriority:", v92);

              }
              while (v82 != v90);
            }
          }
          swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v81, v83, v84, v85, v86, v87, v88, v89);
          v67 = v205;
          goto LABEL_53;
        }
LABEL_47:
        swift_once(&qword_10013AC40, sub_10005EF98);
        goto LABEL_32;
      }
    }
  }
}

void sub_100059A30(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  objc_super v19;

  v2 = v1;
  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for AirDropSystemApertureViewController();
  objc_msgSendSuper2(&v19, "viewWillAppear:", a1 & 1);
  if (qword_10013AC28 != -1)
    swift_once(&qword_10013AC28, sub_100057274);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100009558(v4, (uint64_t)qword_10013DBA0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "View will appear", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = *(void **)&v2[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView];
  if (v9)
  {
    v10 = *(_QWORD *)&v2[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession];
    KeyPath = swift_getKeyPath(&unk_1000EBF98);
    v12 = swift_getKeyPath(&unk_1000EBFC0);
    v13 = v9;
    v14 = swift_retain(v10);
    static Published.subscript.getter(&v18, v14, KeyPath, v12);
    swift_release(v10);
    swift_release(KeyPath);
    swift_release(v12);
    v15 = v18;
    v16 = *(void **)&v13[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress];
    *(_QWORD *)&v13[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress] = v18;
    v17 = v15;

    sub_1000DBFB4();
  }
}

void sub_100059C10(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void *v9;
  void (*v10)(uint64_t);
  uint64_t v11;

  v3 = swift_allocObject(&unk_100126838, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, v1);
  v10 = sub_10005CB8C;
  v11 = v3;
  v6 = _NSConcreteStackBlock;
  v7 = 1107296256;
  v8 = sub_1000DA08C;
  v9 = &unk_100126990;
  v4 = _Block_copy(&v6);
  swift_release(v11);
  v10 = (void (*)(uint64_t))nullsub_1;
  v11 = 0;
  v6 = _NSConcreteStackBlock;
  v7 = 1107296256;
  v8 = sub_1000DA08C;
  v9 = &unk_1001269B8;
  v5 = _Block_copy(&v6);
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v4, v5);
  _Block_release(v5);
  _Block_release(v4);
}

void sub_100059D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _TtC9AirDropUI33AirDropTransferSessionsController *v14;
  Class v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  Class v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v32;
  Class v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  NSArray v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  _TtC9AirDropUI33AirDropTransferSessionsController *v51;
  Class v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  _TtC9AirDropUI33AirDropTransferSessionsController *v60;
  Class v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  _TtC9AirDropUI33AirDropTransferSessionsController *v69;
  NSArray v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  _TtC9AirDropUI33AirDropTransferSessionsController *v78;
  Class isa;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  _TtC9AirDropUI33AirDropTransferSessionsController *v87;
  Class v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  _TtC9AirDropUI33AirDropTransferSessionsController *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  _TtC9AirDropUI33AirDropTransferSessionsController *v104;
  SEL v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  void *v113;
  _BYTE v114[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v114, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    if (qword_10013AC28 != -1)
      swift_once(&qword_10013AC28, sub_100057274);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100009558(v5, (uint64_t)qword_10013DBA0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Updating views in viewWillLayoutSubviews(with:) coordinator animation block", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView], "invalidateIntrinsicContentSize");
    sub_10005A948((uint64_t)v10, v11);
    sub_100058E14();
    v12 = *(_QWORD *)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode];
    switch(v12)
    {
      case 2:
        v50 = (void *)objc_opt_self(NSLayoutConstraint);
        v78 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints];
        sub_100018D44(0, &qword_10013C100, NSLayoutConstraint_ptr);
        swift_bridgeObjectRetain(v78);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v78, v80, v81, v82, v83, v84, v85, v86);
        objc_msgSend(v50, "activateConstraints:", isa);

        v87 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints];
        swift_bridgeObjectRetain(v87);
        v88 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v87, v89, v90, v91, v92, v93, v94, v95);
        objc_msgSend(v50, "deactivateConstraints:", v88);

        v96 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints];
        swift_bridgeObjectRetain(v96);
        v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);
        objc_msgSend(v50, "deactivateConstraints:", v70.super.isa);
        break;
      case 3:
        v50 = (void *)objc_opt_self(NSLayoutConstraint);
        v51 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints];
        sub_100018D44(0, &qword_10013C100, NSLayoutConstraint_ptr);
        swift_bridgeObjectRetain(v51);
        v52 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v51, v53, v54, v55, v56, v57, v58, v59);
        objc_msgSend(v50, "deactivateConstraints:", v52);

        v60 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints];
        swift_bridgeObjectRetain(v60);
        v61 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v60, v62, v63, v64, v65, v66, v67, v68);
        objc_msgSend(v50, "activateConstraints:", v61);

        v69 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints];
        swift_bridgeObjectRetain(v69);
        v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v69, v71, v72, v73, v74, v75, v76, v77);
        objc_msgSend(v50, "activateConstraints:", v70.super.isa);
        break;
      case 4:
        v13 = (void *)objc_opt_self(NSLayoutConstraint);
        v14 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints];
        sub_100018D44(0, &qword_10013C100, NSLayoutConstraint_ptr);
        swift_bridgeObjectRetain(v14);
        v15 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
        objc_msgSend(v13, "deactivateConstraints:", v15);

        v23 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints];
        swift_bridgeObjectRetain(v23);
        v24 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v23, v25, v26, v27, v28, v29, v30, v31);
        objc_msgSend(v13, "deactivateConstraints:", v24);

        v32 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints];
        swift_bridgeObjectRetain(v32);
        v33 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v32, v34, v35, v36, v37, v38, v39, v40);
        objc_msgSend(v13, "deactivateConstraints:", v33);

        v41 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints];
        swift_bridgeObjectRetain(v41);
        v42.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v41, v43, v44, v45, v46, v47, v48, v49);
        objc_msgSend(v13, "activateConstraints:", v42.super.isa);
LABEL_13:

LABEL_14:
        v112 = objc_msgSend(v4, "view");
        if (v112)
        {
          v113 = v112;
          objc_msgSend(v112, "setNeedsLayout");

        }
        else
        {
          __break(1u);
        }
        return;
      default:
        goto LABEL_14;
    }

    v104 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v4[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints];
    swift_bridgeObjectRetain(v104);
    v42.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
    objc_msgSend(v50, "deactivateConstraints:", v42.super.isa);
    goto LABEL_13;
  }
}

uint64_t sub_10005A200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _TtC9AirDropUI33AirDropTransferSessionsController **v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  int v58;
  _TtC9AirDropUI33AirDropTransferSessionsController **v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _TtC9AirDropUI33AirDropTransferSessionsController **v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  char *v82;
  int *v83;
  char *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  SEL v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  int *v107;
  uint64_t v108;
  SEL v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  _TtC9AirDropUI33AirDropTransferSessionsController **v125;
  char *v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;

  v3 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v123 - v10;
  __chkstk_darwin(v12, v13);
  v15 = (char **)((char *)&v123 - v14);
  v16 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  __chkstk_darwin(v23, v24);
  __chkstk_darwin(v25, v26);
  __chkstk_darwin(v27, v28);
  v33 = (char *)&v123 - v32;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode) == 4)
    return 1;
  v124 = v31;
  v125 = v30;
  v126 = v11;
  v127 = v29;
  v123 = v7;
  v128 = v15;
  v129 = v4;
  v130 = v3;
  v34 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession;
  v35 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession);
  v36 = v20;
  v37 = v21;
  KeyPath = swift_getKeyPath(&unk_1000EBF08);
  v39 = swift_getKeyPath(&unk_1000EBF30);
  v40 = swift_retain(v35);
  static Published.subscript.getter(v19, v40, KeyPath, v39);
  swift_release(v35);
  v41 = KeyPath;
  v42 = v37;
  v43 = v36;
  swift_release(v41);
  v44 = swift_release(v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v42 + 48))(v19, 1, v36, v44) != 1)
  {
    v56 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v56(v33, v19, v36);
    v57 = v127;
    v56(v127, v33, v43);
    v58 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v57, v43);
    if (v58 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
    {
      v59 = v125;
      (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, char *, uint64_t))(v42 + 16))(v125, v57, v43);
      (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v42 + 96))(v59, v43);
      swift_bridgeObjectRelease(*v59, v60, v61, v62, v63, v64, v65, v66);
      v67 = (char *)v59 + *(int *)(sub_100008F88(&qword_10013CFD0) + 64);
      v68 = type metadata accessor for SFAirDrop.DeclineAction(0);
    }
    else
    {
      if (v58 != enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
      {
        if (v58 == enum case for SFAirDropSend.Transfer.State.transferring(_:))
        {
          v99 = v124;
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v124, v57, v43);
          (*(void (**)(uint64_t, uint64_t))(v42 + 96))(v99, v43);
          swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v99 + 8), v100, v101, v102, v103, v104, v105, v106);
          v107 = (int *)sub_100008F88(&qword_10013BCA0);
          v108 = v99 + v107[12];
          swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v99 + v107[16] + 8), v109, v110, v111, v112, v113, v114, v115);
          v116 = v99 + v107[20];
          v117 = type metadata accessor for SFAirDrop.Progress(0);
          v118 = *(_QWORD *)(v117 - 8);
          v119 = (*(uint64_t (**)(uint64_t, uint64_t))(v118 + 88))(v108, v117);
          v120 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
          v121 = type metadata accessor for SFAirDrop.DeclineAction(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 8))(v116, v121);
          if (v119 == v120)
            goto LABEL_13;
          (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v108, v117);
        }
        else if (v58 == enum case for SFAirDropSend.Transfer.State.created(_:)
               || v58 == enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
        {
          goto LABEL_13;
        }
        (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v43);
        return 0;
      }
      v73 = v125;
      (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, char *, uint64_t))(v42 + 16))(v125, v57, v43);
      (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v42 + 96))(v73, v43);
      swift_bridgeObjectRelease(*v73, v74, v75, v76, v77, v78, v79, v80);
      v67 = (char *)v73 + *(int *)(sub_100008F88(&qword_10013CFC8) + 48);
      v68 = sub_100008F88((uint64_t *)&unk_10013DCA0);
    }
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v67, v68);
LABEL_13:
    (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v43);
    return 1;
  }
  sub_10000CC5C((uint64_t)v19, &qword_10013C9E0);
  v45 = *(_QWORD *)(v2 + v34);
  v46 = swift_getKeyPath(&unk_1000EBF50);
  v47 = swift_getKeyPath(&unk_1000EBF78);
  v48 = swift_retain(v45);
  v49 = v128;
  static Published.subscript.getter(v128, v48, v46, v47);
  swift_release(v45);
  swift_release(v46);
  v50 = swift_release(v47);
  v52 = v129;
  v51 = v130;
  v53 = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v129 + 88))(v49, v130, v50);
  if (v53 != enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    if (v53 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
    {
      v69 = v126;
      (*(void (**)(char *, _QWORD *, uint64_t))(v52 + 16))(v126, v49, v51);
      (*(void (**)(char *, uint64_t))(v52 + 96))(v69, v51);
      v70 = &v69[*(int *)(sub_100008F88(&qword_10013BDF8) + 48)];
      v71 = sub_100008F88((uint64_t *)&unk_10013DC90);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v70, v71);
      v72 = type metadata accessor for SFAirDrop.ContactInfo(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v72 - 8) + 8))(v69, v72);
      goto LABEL_9;
    }
    if (v53 != enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
    {
      if (v53 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
      {
        v82 = v123;
        (*(void (**)(char *, _QWORD *, uint64_t))(v52 + 16))(v123, v49, v51);
        (*(void (**)(char *, uint64_t))(v52 + 96))(v82, v51);
        v83 = (int *)sub_100008F88((uint64_t *)&unk_10013DC80);
        v84 = &v82[v83[12]];
        swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v82[v83[16] + 8], v85, v86, v87, v88, v89, v90, v91);
        v92 = &v82[v83[20]];
        v93 = type metadata accessor for SFAirDrop.Progress(0);
        v94 = *(_QWORD *)(v93 - 8);
        v95 = (*(uint64_t (**)(char *, uint64_t))(v94 + 88))(v84, v93);
        v96 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
        v97 = type metadata accessor for SFAirDrop.DeclineAction(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v92, v97);
        if (v95 == v96)
        {
          v98 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v98 - 8) + 8))(v82, v98);
          goto LABEL_9;
        }
        (*(void (**)(char *, uint64_t))(v94 + 8))(v84, v93);
        v122 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v122 - 8) + 8))(v82, v122);
      }
      else if (v53 == enum case for SFAirDropReceive.Transfer.State.created(_:)
             || v53 == enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
             || v53 == enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
      {
        goto LABEL_9;
      }
      (*(void (**)(_QWORD *, uint64_t))(v52 + 8))(v49, v51);
      return 0;
    }
  }
  v54 = v126;
  (*(void (**)(char *, _QWORD *, uint64_t))(v52 + 16))(v126, v49, v51);
  (*(void (**)(char *, uint64_t))(v52 + 96))(v54, v51);
  v55 = sub_100008F88(&qword_10013CA70);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
LABEL_9:
  (*(void (**)(_QWORD *, uint64_t))(v52 + 8))(v49, v51);
  return 1;
}

uint64_t sub_10005A948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  char *v43;
  int *v44;
  uint64_t v45;
  void (*v46)(char *, char *, int *, __n128);
  char *v47;
  void (*v48)(char *, char *, int *);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  double v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v110)(char *, uint64_t);
  int v111;
  int *v112;
  char *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  SEL v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  double v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  int *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  id v170;
  void *v171;
  id v172;
  uint64_t v173;
  SEL v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  uint64_t (*v181)(char *, int *);
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  int *v186;
  char *v187;
  uint64_t v188;
  id v189[3];

  v3 = v2;
  v4 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v185 = *(_QWORD *)(v4 - 8);
  v186 = (int *)v4;
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v182 - v10;
  __chkstk_darwin(v12, v13);
  v187 = (char *)&v182 - v14;
  v15 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v15, v16);
  v18 = (uint64_t *)((char *)&v182 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v183 = (char *)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v184 = (char *)&v182 - v25;
  v188 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView;
  v26 = *(void **)(v2 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView);
  if (v26)
  {
    v27 = v26;
    objc_msgSend(v27, "setHidden:", sub_10005A200((uint64_t)v27, v28) & 1);

    v29 = *(void **)(v2 + v188);
    if (v29)
    {
      v30 = v29;
      objc_msgSend(*(id *)&v30[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView], "setHidden:", sub_10005A200((uint64_t)v30, v31) & 1);

    }
  }
  v32 = (_QWORD *)OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession;
  v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession);
  KeyPath = swift_getKeyPath(&unk_1000EBF08);
  v35 = swift_getKeyPath(&unk_1000EBF30);
  v36 = swift_retain(v33);
  static Published.subscript.getter(v18, v36, KeyPath, v35);
  swift_release(v33);
  swift_release(KeyPath);
  v37 = swift_release(v35);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v20 + 48))(v18, 1, v19, v37) == 1)
  {
    sub_10000CC5C((uint64_t)v18, &qword_10013C9E0);
    v38 = *(_QWORD *)((char *)v32 + v3);
    v39 = swift_getKeyPath(&unk_1000EBF50);
    v40 = swift_getKeyPath(&unk_1000EBF78);
    swift_retain(v38);
    v41 = v187;
    static Published.subscript.getter(v187, v38, v39, v40);
    swift_release(v38);
    swift_release(v39);
    v42 = swift_release(v40);
    v43 = *(char **)(v3 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView);
    v184 = (char *)OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView;
    if (v43)
    {
      v45 = v185;
      v44 = v186;
      v46 = *(void (**)(char *, char *, int *, __n128))(v185 + 16);
      v46(v11, v187, v186, v42);
      v47 = &v43[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState];
      swift_beginAccess(&v43[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState], v189, 33, 0);
      v48 = *(void (**)(char *, char *, int *))(v45 + 24);
      v49 = v43;
      v48(v47, v11, v44);
      v50 = swift_endAccess(v189);
      sub_1000C9DB0(v50, v51);
      v52 = v45;
      v41 = v187;
      (*(void (**)(char *, int *))(v52 + 8))(v11, v44);

    }
    else
    {
      v52 = v185;
      v44 = v186;
      v46 = *(void (**)(char *, char *, int *, __n128))(v185 + 16);
    }
    ((void (*)(char *, char *, int *))v46)(v7, v41, v44);
    v111 = (*(uint64_t (**)(char *, int *))(v52 + 88))(v7, v44);
    if (v111 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, int *))(v52 + 96))(v7, v44);
      v112 = (int *)sub_100008F88((uint64_t *)&unk_10013DC80);
      v113 = &v7[v112[12]];
      swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v7[v112[16] + 8], v114, v115, v116, v117, v118, v119, v120);
      v121 = &v7[v112[20]];
      v122 = type metadata accessor for SFAirDrop.DeclineAction(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v122 - 8) + 8))(v121, v122);
      v123 = type metadata accessor for SFAirDrop.Progress(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v123 - 8) + 8))(v113, v123);
    }
    else if (v111 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
    {
      (*(void (**)(char *, int *))(v52 + 96))(v7, v44);
      v124 = sub_100008F88(&qword_10013CAB0);
      swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v7[*(int *)(v124 + 48)], v125, v126, v127, v128, v129, v130, v131);
      v132 = &v7[*(int *)(v124 + 80)];
      v133 = type metadata accessor for SFAirDrop.DeclineAction(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v133 - 8) + 8))(v132, v133);
    }
    else
    {
      if (v111 != enum case for SFAirDropReceive.Transfer.State.importing(_:))
      {
        v181 = *(uint64_t (**)(char *, int *))(v52 + 8);
        v181(v41, v44);
        return v181(v7, v44);
      }
      (*(void (**)(char *, int *))(v52 + 96))(v7, v44);
      v173 = sub_100008F88((uint64_t *)&unk_10013DC70);
      swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v7[*(int *)(v173 + 48)], v174, v175, v176, v177, v178, v179, v180);
    }
    v134 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    v135 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v134 - 8) + 8))(v7, v134);
    v136 = SFAirDropReceive.Transfer.State.currentProgressCount.getter(v135);
    v137 = SFAirDropReceive.Transfer.State.totalProgressCount.getter(v136);
    v138 = *(_QWORD *)((char *)v32 + v3);
    v139 = v32;
    v140 = swift_getKeyPath(&unk_1000EBF98);
    v141 = swift_getKeyPath(&unk_1000EBFC0);
    v142 = swift_retain(v138);
    static Published.subscript.getter(v189, v142, v140, v141);
    swift_release(v138);
    swift_release(v140);
    *(_QWORD *)&v143 = swift_release(v141).n128_u64[0];
    v144 = v189[0];
    objc_msgSend(v189[0], "setCompletedUnitCount:", v136, v143);

    v145 = *(_QWORD *)((char *)v139 + v3);
    v146 = swift_getKeyPath(&unk_1000EBF98);
    v147 = swift_getKeyPath(&unk_1000EBFC0);
    v148 = swift_retain(v145);
    static Published.subscript.getter(v189, v148, v146, v147);
    swift_release(v145);
    swift_release(v146);
    *(_QWORD *)&v149 = swift_release(v147).n128_u64[0];
    v150 = v189[0];
    objc_msgSend(v189[0], "setTotalUnitCount:", v137, v149);

    v151 = *(void **)&v184[v3];
    if (v151)
    {
      v152 = *(_QWORD *)((char *)v139 + v3);
      v153 = swift_getKeyPath(&unk_1000EBF98);
      v154 = swift_getKeyPath(&unk_1000EBFC0);
      v155 = v151;
      v156 = swift_retain(v152);
      static Published.subscript.getter(v189, v156, v153, v154);
      swift_release(v152);
      swift_release(v153);
      *(_QWORD *)&v157 = swift_release(v154).n128_u64[0];
      v158 = v189[0];
      objc_msgSend(v189[0], "fractionCompleted", v157);
      v160 = v159;

      *(_QWORD *)&v155[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress] = v160;
      sub_1000C9DB0(v161, v162);

    }
    v163 = *(void **)(v3 + v188);
    v164 = v186;
    if (v163)
    {
      v165 = *(_QWORD *)((char *)v139 + v3);
      v166 = swift_getKeyPath(&unk_1000EBF98);
      v167 = swift_getKeyPath(&unk_1000EBFC0);
      v168 = v163;
      v169 = swift_retain(v165);
      static Published.subscript.getter(v189, v169, v166, v167);
      swift_release(v165);
      swift_release(v166);
      swift_release(v167);
      v170 = v189[0];
      v171 = *(void **)&v168[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress];
      *(id *)&v168[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress] = v189[0];
      v172 = v170;

      sub_1000DBFB4();
    }
    return (*(uint64_t (**)(char *, int *))(v185 + 8))(v41, v164);
  }
  else
  {
    v187 = (char *)v32;
    v53 = v184;
    (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 32))(v184, v18, v19);
    v54 = v183;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v183, v53, v19);
    if ((*(unsigned int (**)(char *, uint64_t))(v20 + 88))(v54, v19) == enum case for SFAirDropSend.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, uint64_t))(v20 + 96))(v54, v19);
      swift_bridgeObjectRelease(*((_TtC9AirDropUI33AirDropTransferSessionsController **)v54 + 1), v55, v56, v57, v58, v59, v60, v61);
      v186 = (int *)sub_100008F88(&qword_10013BCA0);
      swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v54[v186[16] + 8], v62, v63, v64, v65, v66, v67, v68);
      v70 = SFAirDropSend.Transfer.State.currentProgressCount.getter(v69);
      v185 = SFAirDropSend.Transfer.State.totalProgressCount.getter(v70);
      v71 = v187;
      v72 = *(_QWORD *)&v187[v3];
      v73 = swift_getKeyPath(&unk_1000EBF98);
      v74 = swift_getKeyPath(&unk_1000EBFC0);
      v75 = swift_retain(v72);
      static Published.subscript.getter(v189, v75, v73, v74);
      swift_release(v72);
      swift_release(v73);
      *(_QWORD *)&v76 = swift_release(v74).n128_u64[0];
      v77 = v189[0];
      objc_msgSend(v189[0], "setCompletedUnitCount:", v70, v76);

      v78 = *(_QWORD *)((char *)v71 + v3);
      v79 = swift_getKeyPath(&unk_1000EBF98);
      v80 = swift_getKeyPath(&unk_1000EBFC0);
      v81 = swift_retain(v78);
      static Published.subscript.getter(v189, v81, v79, v80);
      swift_release(v78);
      swift_release(v79);
      *(_QWORD *)&v82 = swift_release(v80).n128_u64[0];
      v83 = v189[0];
      objc_msgSend(v189[0], "setTotalUnitCount:", v185, v82);

      v84 = *(void **)(v3 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView);
      if (v84)
      {
        v85 = *(_QWORD *)((char *)v71 + v3);
        v86 = swift_getKeyPath(&unk_1000EBF98);
        v87 = swift_getKeyPath(&unk_1000EBFC0);
        v88 = v84;
        v89 = swift_retain(v85);
        static Published.subscript.getter(v189, v89, v86, v87);
        swift_release(v85);
        swift_release(v86);
        *(_QWORD *)&v90 = swift_release(v87).n128_u64[0];
        v91 = v189[0];
        objc_msgSend(v189[0], "fractionCompleted", v90);
        v93 = v92;

        *(_QWORD *)&v88[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress] = v93;
        sub_1000C9DB0(v94, v95);

      }
      v96 = *(void **)(v3 + v188);
      if (v96)
      {
        v97 = *(_QWORD *)&v187[v3];
        v98 = swift_getKeyPath(&unk_1000EBF98);
        v99 = swift_getKeyPath(&unk_1000EBFC0);
        v100 = v96;
        v101 = swift_retain(v97);
        static Published.subscript.getter(v189, v101, v98, v99);
        swift_release(v97);
        swift_release(v98);
        swift_release(v99);
        v102 = v189[0];
        v103 = *(void **)&v100[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress];
        *(id *)&v100[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress] = v189[0];
        v104 = v102;

        sub_1000DBFB4();
      }
      v105 = &v54[v186[12]];
      v106 = &v54[v186[20]];
      (*(void (**)(char *, uint64_t))(v20 + 8))(v184, v19);
      v107 = type metadata accessor for SFAirDrop.DeclineAction(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v107 - 8) + 8))(v106, v107);
      v108 = type metadata accessor for SFAirDrop.Progress(0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v108 - 8) + 8))(v105, v108);
    }
    else
    {
      v110 = *(void (**)(char *, uint64_t))(v20 + 8);
      v110(v53, v19);
      return ((uint64_t (*)(char *, uint64_t))v110)(v54, v19);
    }
  }
}

double sub_10005B3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  void *v5;
  uint64_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  Swift::Bool v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double result;
  uint64_t v44;
  uint64_t v48;
  uint64_t v49;

  if (qword_10013AC28 != -1)
    swift_once(&qword_10013AC28, sub_100057274);
  v8 = type metadata accessor for Logger(0);
  sub_100009558(v8, (uint64_t)qword_10013DBA0);
  v9 = v5;
  swift_retain_n(a1, 2);
  v10 = (char *)v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  v13 = &OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContent;
  if (os_log_type_enabled(v11, v12))
  {
    v44 = a4;
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v49 = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = *(_QWORD *)&v10[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession];
    v17 = swift_retain(v16);
    v19 = sub_10006A1D4(v17, v18);
    v21 = v20;
    swift_release(v16);
    v48 = sub_10003A834(v19, v21, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v14 + 12) = 2080;
    v22 = swift_retain(a1);
    v24 = sub_10006A1D4(v22, v23);
    v26 = v25;
    swift_release(a1);
    v48 = sub_10003A834(v24, v26, &v49);
    v13 = &OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContent;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Transitioning SystemAperture session %s -> %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    v27 = v14;
    a4 = v44;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v28 = v13[375];
  v29 = *(_QWORD *)(*(_QWORD *)&v10[v28] + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  v30 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v31 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v31);
  v32._countAndFlagsBits = v30;
  v32._object = v31;
  v33 = String.hasPrefix(_:)(v32);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  if (v33)
  {
    v34 = *(_QWORD *)&v10[v28];
    swift_retain(v34);
    v36 = sub_1000705EC(a1, v35);
    swift_release(v34);
    v37 = v36 ^ 1;
  }
  else
  {
    v37 = 1;
  }
  if (v10[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode + 8] == 1)
  {
    v38 = *(_QWORD *)&v10[v28];
    v39 = swift_retain(v38);
    v40 = sub_1000574A0(v39);
    swift_release(v38);
  }
  else
  {
    v40 = *(_QWORD *)&v10[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode];
  }
  v41 = sub_1000574A0(a1);
  v42 = swift_allocObject(&unk_100126838, 24, 7);
  swift_unknownObjectWeakInit(v42 + 16, v10);
  swift_retain(a4);
  swift_retain(a1);
  swift_bridgeObjectRetain(a3);
  sub_10005C3B4(v40, v41, a5 & 1, v37 & 1, v10, v42, a1, a2, a3, a4);
  swift_release(v42);
  swift_release(a1);
  swift_bridgeObjectRelease(a3);
  *(_QWORD *)&result = swift_release(a4).n128_u64[0];
  return result;
}

double sub_10005B780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t Strong;
  double result;
  void *v12;
  uint64_t v13;
  _BYTE v14[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession);
    swift_retain(v13);

    sub_10006E394(a2, a3, a4, a5);
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  return result;
}

id sub_10005B860()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AirDropSystemApertureViewController()
{
  return objc_opt_self(_TtC9AirDropUI35AirDropSystemApertureViewController);
}

uint64_t sub_10005B988(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_10005B9AC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000EBFE0, (uint64_t)&unk_1000EC008, a2);
}

uint64_t sub_10005B9C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10005BA38(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000EBFE0, (uint64_t)&unk_1000EC008);
}

uint64_t sub_10005BA4C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

id sub_10005BAB8(uint64_t a1)
{
  _BYTE *v1;
  char *v3;
  void *v4;
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  objc_super v10;

  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_cancellableObservers] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_contentRole] = 2;
  v3 = &v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_maximumLayoutMode] = 4;
  v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_preventsInteractiveDismissal] = 0;
  v4 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_elementIdentifier] = SBUISystemApertureElementIdentifierAirDrop;
  v5 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_keyColor;
  v6 = objc_allocWithZone((Class)UIColor);
  v7 = v1;
  v8 = v4;
  *(_QWORD *)&v1[v5] = objc_msgSend(v6, "initWithRed:green:blue:alpha:", 0.246, 0.6, 1.0, 1.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession] = a1;
  swift_retain(a1);

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for AirDropSystemApertureViewController();
  return objc_msgSendSuper2(&v10, "initWithNibName:bundle:", 0, 0);
}

uint64_t sub_10005BC5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  int *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;

  v2 = type metadata accessor for SFAirDropSend.Failure(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)v50 - v9;
  v11 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)v50 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)v50 - v18, a1, v11);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v19, v11);
  if (v21 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    swift_bridgeObjectRelease(*(_QWORD *)v19);
    v19 += *(int *)(sub_100008F88(&qword_10013CFD0) + 64);
    v22 = type metadata accessor for SFAirDrop.DeclineAction(0);
LABEL_5:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v19, v22);
    return 3;
  }
  if (v21 == enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    swift_bridgeObjectRelease(*(_QWORD *)v19);
    v19 += *(int *)(sub_100008F88(&qword_10013CFC8) + 48);
    v22 = sub_100008F88((uint64_t *)&unk_10013DCA0);
    goto LABEL_5;
  }
  if (v21 == enum case for SFAirDropSend.Transfer.State.transferring(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    swift_bridgeObjectRelease(*((_QWORD *)v19 + 1));
    v24 = (int *)sub_100008F88(&qword_10013BCA0);
    v25 = &v19[v24[12]];
    swift_bridgeObjectRelease(*(_QWORD *)&v19[v24[16] + 8]);
    v26 = &v19[v24[20]];
    v27 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
    v28 = type metadata accessor for SFAirDrop.Progress(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v25, v28);
    return 3;
  }
  if (v21 == enum case for SFAirDropSend.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    v29 = &v19[*(int *)(sub_100008F88(&qword_10013DD20) + 48)];
    v30 = (uint64_t *)&unk_10013DC90;
LABEL_11:
    v31 = sub_100008F88(v30);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v29, v31);
    v32 = type metadata accessor for SFAirDrop.ContactInfo(0);
LABEL_14:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v19, v32);
    return 2;
  }
  if (v21 == enum case for SFAirDropSend.Transfer.State.exchanging(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    v32 = type metadata accessor for SFAirDrop.ContactRequest(0);
    goto LABEL_14;
  }
  if (v21 == enum case for SFAirDropSend.Transfer.State.waitingForImportContactResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
    v29 = &v19[*(int *)(sub_100008F88(&qword_10013DD10) + 48)];
    v30 = (uint64_t *)&unk_10013DD18;
    goto LABEL_11;
  }
  if (v21 != enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
  {
    if (v21 == enum case for SFAirDropSend.Transfer.State.completedSuccessfully(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
      v37 = sub_100008F88((uint64_t *)&unk_10013DD00);
      swift_bridgeObjectRelease(*(_QWORD *)&v19[*(int *)(v37 + 48) + 8]);
      v22 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
      goto LABEL_5;
    }
    if (v21 == enum case for SFAirDropSend.Transfer.State.created(_:)
      || v21 == enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
    {
      return 3;
    }
    if (qword_10013AC28 == -1)
    {
LABEL_30:
      v39 = type metadata accessor for Logger(0);
      sub_100009558(v39, (uint64_t)qword_10013DBA0);
      v40 = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v16, a1, v11);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        v52 = v44;
        *(_DWORD *)v43 = 136315138;
        v50[1] = v43 + 4;
        v45 = sub_100008694(&qword_10013CD00, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Transfer.State);
        v46 = dispatch thunk of CustomStringConvertible.description.getter(v11, v45);
        v48 = v47;
        v51 = sub_10003A834(v46, v47, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
        swift_bridgeObjectRelease(v48);
        v49 = *(void (**)(char *, uint64_t))(v12 + 8);
        v49(v16, v11);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unknown send state value %s", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);
      }
      else
      {
        v49 = *(void (**)(char *, uint64_t))(v12 + 8);
        v49(v16, v11);
      }

      v49(v19, v11);
      return 3;
    }
LABEL_48:
    swift_once(&qword_10013AC28, sub_100057274);
    goto LABEL_30;
  }
  (*(void (**)(char *, uint64_t))(v12 + 96))(v19, v11);
  v33 = sub_100008F88(&qword_10013BC90);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, &v19[*(int *)(v33 + 48)], v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v7, v2);
  if (v34 != enum case for SFAirDropSend.Failure.missingEndpoint(_:))
  {
    if (v34 == enum case for SFAirDropSend.Failure.resolveFailure(_:))
      goto LABEL_24;
    if (v34 == enum case for SFAirDropSend.Failure.unexpected(_:))
      goto LABEL_19;
    if (v34 == enum case for SFAirDropSend.Failure.receiverDeclined(_:)
      || v34 == enum case for SFAirDropSend.Failure.cancelled(_:))
    {
      goto LABEL_24;
    }
    if (v34 == enum case for SFAirDropSend.Failure.unsupportedConnection(_:)
      || v34 == enum case for SFAirDropSend.Failure.badRequest(_:)
      || v34 == enum case for SFAirDropSend.Failure.badResponse(_:)
      || v34 == enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:)
      || v34 == enum case for SFAirDropSend.Failure.streamError(_:)
      || v34 == enum case for SFAirDropSend.Failure.missingOwnContact(_:)
      || v34 == enum case for SFAirDropSend.Failure.missingRecordData(_:)
      || v34 == enum case for SFAirDropSend.Failure.serverError(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
      goto LABEL_20;
    }
    if (v34 == enum case for SFAirDropSend.Failure.insufficientStorage(_:))
    {
LABEL_24:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
      v32 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
      goto LABEL_14;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)(v2, v2);
    __break(1u);
    goto LABEL_48;
  }
LABEL_19:
  v35 = *(void (**)(char *, uint64_t))(v3 + 8);
  v35(v10, v2);
  v35(v7, v2);
LABEL_20:
  v36 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v19, v36);
  return 4;
}

uint64_t sub_10005C3B4(uint64_t a1, uint64_t a2, char a3, char a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  void **v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t Strong;
  double v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *log;
  os_log_type_t type;
  void **v64;
  uint64_t v65;
  void **aBlock;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  uint64_t (*v71)();
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[16];

  v17 = (_QWORD *)swift_allocObject(&unk_100126860, 56, 7);
  v17[2] = a6;
  v17[3] = a7;
  v65 = a8;
  v17[4] = a8;
  v17[5] = a9;
  v17[6] = a10;
  if (a1 != a2 || (a3 & 1) != 0)
  {
    v29 = qword_10013AC28;
    swift_retain(a6);
    swift_retain(a7);
    swift_bridgeObjectRetain(a9);
    swift_retain(a10);
    if (v29 != -1)
      swift_once(&qword_10013AC28, sub_100057274);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100009558(v30, (uint64_t)qword_10013DBA0);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      type = v33;
      v34 = swift_slowAlloc(22, -1);
      v64 = (void **)swift_slowAlloc(64, -1);
      aBlock = v64;
      *(_DWORD *)v34 = 136315394;
      v35 = (id)SBUISystemApertureLayoutModeDescription(a1);
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      log = v32;
      v38 = v37;

      v73 = sub_10003A834(v36, v38, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
      swift_bridgeObjectRelease(v38);
      *(_WORD *)(v34 + 12) = 2080;
      v39 = (id)SBUISystemApertureLayoutModeDescription(a2);
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      v73 = sub_10003A834(v40, v42, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
      swift_bridgeObjectRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Transitioning layout mode %s -> %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
    swift_beginAccess(a6 + 16, &v73, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(a6 + 16);
    if (Strong)
    {
      v57 = (void *)Strong;
      v58 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession);
      swift_retain(v58);

      sub_10006E394(a7, v65, a9, a10);
      *(_QWORD *)&v56 = swift_release(v58).n128_u64[0];
    }
    v24 = objc_msgSend(a5, "systemApertureElementContext", v56);
    v71 = nullsub_1;
    v72 = 0;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v69 = sub_1000DA060;
    v70 = &unk_100126878;
    v26 = _Block_copy(&aBlock);
    goto LABEL_23;
  }
  v18 = qword_10013AC28;
  swift_retain(a6);
  swift_retain(a7);
  swift_bridgeObjectRetain(a9);
  swift_retain(a10);
  if (a1 != 4)
  {
    if (v18 != -1)
      swift_once(&qword_10013AC28, sub_100057274);
    v43 = type metadata accessor for Logger(0);
    v44 = sub_100009558(v43, (uint64_t)qword_10013DBA0);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (void **)swift_slowAlloc(32, -1);
      aBlock = v48;
      *(_DWORD *)v47 = 136315138;
      v49 = (id)SBUISystemApertureLayoutModeDescription(a1);
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;

      v73 = sub_10003A834(v50, v52, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
      swift_bridgeObjectRelease(v52);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Updating layout between %s mode views", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }

    v24 = objc_msgSend(a5, "systemApertureElementContext");
    v53 = swift_allocObject(&unk_1001268B0, 32, 7);
    *(_QWORD *)(v53 + 16) = sub_10005CB28;
    *(_QWORD *)(v53 + 24) = v17;
    v71 = sub_100041454;
    v72 = v53;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v54 = &unk_1001268C8;
    goto LABEL_25;
  }
  if (v18 != -1)
    swift_once(&qword_10013AC28, sub_100057274);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100009558(v19, (uint64_t)qword_10013DBA0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updating layout between custom mode views", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = objc_msgSend(a5, "systemApertureElementContext");
  if ((a4 & 1) == 0)
  {
    v59 = swift_allocObject(&unk_100126900, 32, 7);
    *(_QWORD *)(v59 + 16) = sub_10005CB28;
    *(_QWORD *)(v59 + 24) = v17;
    v71 = sub_100041454;
    v72 = v59;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v54 = &unk_100126918;
LABEL_25:
    v69 = sub_1000DA060;
    v70 = v54;
    v26 = _Block_copy(&aBlock);
    v60 = v72;
    swift_retain(v17);
    objc_msgSend(v24, "setElementNeedsUpdateWithCoordinatedAnimations:", v26, swift_release(v60).n128_f64[0]);
    goto LABEL_26;
  }
  v25 = swift_allocObject(&unk_100126950, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005CB28;
  *(_QWORD *)(v25 + 24) = v17;
  v71 = sub_100040B54;
  v72 = v25;
  aBlock = _NSConcreteStackBlock;
  v68 = 1107296256;
  v69 = sub_1000DA060;
  v70 = &unk_100126968;
  v26 = _Block_copy(&aBlock);
  v27 = v72;
  swift_retain(v17);
  *(_QWORD *)&v28 = swift_release(v27).n128_u64[0];
LABEL_23:
  objc_msgSend(v24, "setElementNeedsLayoutUpdateWithOptions:coordinatedAnimations:", 1, v26, v28);
LABEL_26:
  _Block_release(v26);
  swift_release(v17);
  return swift_unknownObjectRelease(v24);
}

uint64_t sub_10005CAEC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

double sub_10005CB28()
{
  uint64_t *v0;

  return sub_10005B780(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10005CB38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005CB48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005CB50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10005CB8C(uint64_t a1)
{
  uint64_t v1;

  sub_100059D08(a1, v1);
}

uint64_t sub_10005CB94@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000EBFE0, (uint64_t)&unk_1000EC008, a2);
}

uint64_t sub_10005CBB8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000EBFE0, (uint64_t)&unk_1000EC008);
}

uint64_t sub_10005CBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013CD20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005CC24@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000EC028, (uint64_t)&unk_1000EC050, a2);
}

uint64_t sub_10005CC48(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000EC028, (uint64_t)&unk_1000EC050);
}

void sub_10005CC6C()
{
  _BYTE *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_cancellableObservers] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_contentRole] = 2;
  v1 = &v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode];
  *(_QWORD *)v1 = 0;
  v1[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_maximumLayoutMode] = 4;
  v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_preventsInteractiveDismissal] = 0;
  v2 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_elementIdentifier] = SBUISystemApertureElementIdentifierAirDrop;
  v3 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_keyColor;
  v4 = objc_allocWithZone((Class)UIColor);
  v5 = v2;
  *(_QWORD *)&v0[v3] = objc_msgSend(v4, "initWithRed:green:blue:alpha:", 0.246, 0.6, 1.0, 1.0);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000050, 0x80000001000F1A50, "AirDropUI/AirDropSystemApertureViewController.swift", 51, 2, 266, 0);
  __break(1u);
}

ValueMetadata *type metadata accessor for DefaultView()
{
  return &type metadata for DefaultView;
}

uint64_t sub_10005CE40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001137DC, 1);
}

uint64_t sub_10005CE50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

void *sub_10005CEB4()
{
  return &protocol witness table for Text;
}

uint64_t destroy for ContactDetails(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for ContactDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for ContactDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  return a1;
}

__n128 initializeWithTake for ContactDetails(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ContactDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDetails(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 100))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 100) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 100) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactDetails()
{
  return &type metadata for ContactDetails;
}

uint64_t destroy for RemotePerson(uint64_t *a1)
{
  return sub_10004BC68(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
}

uint64_t initializeWithCopy for RemotePerson(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_DWORD *)(a2 + 96);
  sub_10004BD1C(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_DWORD *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for RemotePerson(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 88);
  v27 = *(_DWORD *)(a2 + 96);
  sub_10004BD1C(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  *(_DWORD *)(a1 + 96) = v27;
  sub_10004BC68(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22);
  return a1;
}

uint64_t assignWithTake for RemotePerson(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_DWORD *)(a2 + 96);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(_DWORD *)(a1 + 96) = v3;
  sub_10004BC68(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemotePerson(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 100))
    return *(_DWORD *)a1 + 0x80000000;
  HIDWORD(v3) = *(_DWORD *)(a1 + 76);
  LODWORD(v3) = HIDWORD(v3);
  v2 = v3 >> 31;
  if (v2 > 0x80000000)
    v4 = ~v2;
  else
    v4 = -1;
  return (v4 + 1);
}

double storeEnumTagSinglePayload for RemotePerson(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 96) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 100) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = (unint64_t)(v4 >> 1) << 32;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 100) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10005D5C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72) >> 63;
}

uint64_t sub_10005D5CC(uint64_t result)
{
  *(_QWORD *)(result + 72) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_10005D5DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2 << 31;
  return result;
}

ValueMetadata *type metadata accessor for RemotePerson()
{
  return &type metadata for RemotePerson;
}

Swift::Int sub_10005D5F8()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  __int128 v26[4];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;

  Hasher.init(_seed:)(v26, 0);
  sub_100057150(v0, (uint64_t)&v27);
  if ((*((_QWORD *)&v31 + 1) & 0x8000000000000000) != 0)
  {
    *((_QWORD *)&v31 + 1) &= ~0x8000000000000000;
    v1 = v27;
    v2 = v28;
    v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v29;
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(*((_QWORD *)&v1 + 1));
    String.hash(into:)(v26, v1, *((_QWORD *)&v1 + 1));
    swift_bridgeObjectRelease(*((_TtC9AirDropUI33AirDropTransferSessionsController **)&v1 + 1), v4, v5, v6, v7, v8, v9, v10);
    swift_bridgeObjectRetain(*((_QWORD *)&v2 + 1));
    String.hash(into:)(v26, v2, *((_QWORD *)&v2 + 1));
    swift_bridgeObjectRelease(*((_TtC9AirDropUI33AirDropTransferSessionsController **)&v2 + 1), v11, v12, v13, v14, v15, v16, v17);
    swift_bridgeObjectRetain(v3);
    sub_10005E4F8(v26, (uint64_t)v3);
    swift_bridgeObjectRelease(v3, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    v38 = v31;
    v39 = v32;
    v40 = v33;
    v34 = v27;
    v35 = v28;
    v36 = v29;
    v37 = v30;
    Hasher._combine(_:)(0);
    sub_10005DCEC(v26);
  }
  return Hasher._finalize()();
}

void sub_10005D71C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(a1, a2, a3);
  swift_bridgeObjectRelease(a3);
  Hasher._combine(_:)(a4 & 1);
  Hasher._combine(_:)(BYTE1(a4) & 1);
  Hasher._combine(_:)(BYTE2(a4) & 1);
  Hasher._combine(_:)(HIBYTE(a4) & 1);
}

Swift::Int sub_10005D78C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v7, a1, a2);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(a3 & 1);
  Hasher._combine(_:)(BYTE1(a3) & 1);
  Hasher._combine(_:)(BYTE2(a3) & 1);
  Hasher._combine(_:)(HIBYTE(a3) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_10005D824()
{
  __int128 *v0;
  _BYTE v2[104];

  sub_100057150(v0, (uint64_t)v2);
  return sub_10005D5F8();
}

void sub_10005D858(__int128 *a1)
{
  uint64_t *v1;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  uint64_t v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  v4 = *v1;
  v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[1];
  v6 = v1[2];
  v5 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[3];
  v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[4];
  if (v1[9] < 0)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3, v8, v9, v10, v11, v12, v13, v14);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v6, v5);
    swift_bridgeObjectRelease(v5, v15, v16, v17, v18, v19, v20, v21);
    swift_bridgeObjectRetain(v7);
    sub_10005E4F8(a1, (uint64_t)v7);
    swift_bridgeObjectRelease(v7, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    Hasher._combine(_:)(0);
    sub_10005DCEC(a1);
  }
}

Swift::Int sub_10005D96C(uint64_t a1)
{
  uint64_t *v1;
  _TtC9AirDropUI33AirDropTransferSessionsController *v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  _TtC9AirDropUI33AirDropTransferSessionsController *v36;
  __int128 v37[4];
  uint64_t v38;
  _TtC9AirDropUI33AirDropTransferSessionsController *v39;
  uint64_t v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v2 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[1];
  v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[3];
  v34 = *v1;
  v35 = v1[2];
  v4 = v1[5];
  v36 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[4];
  v6 = v1[6];
  v5 = v1[7];
  v7 = v1[8];
  v8 = v1[9];
  v9 = v1[10];
  v10 = v1[11];
  v11 = *((_DWORD *)v1 + 24);
  Hasher.init(_seed:)(v37, a1);
  if (v8 < 0)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(v2);
    String.hash(into:)(v37, v34, v2);
    swift_bridgeObjectRelease(v2, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(v37, v35, v3);
    swift_bridgeObjectRelease(v3, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRetain(v36);
    sub_10005E4F8(v37, (uint64_t)v36);
    swift_bridgeObjectRelease(v36, v26, v27, v28, v29, v30, v31, v32);
  }
  else
  {
    v38 = v34;
    v39 = v2;
    v40 = v35;
    v41 = v3;
    v42 = v36;
    v43 = v4;
    v44 = v6;
    v45 = v5;
    v46 = v7;
    v47 = v8;
    v48 = v9;
    v49 = v10;
    v50 = v11;
    Hasher._combine(_:)(0);
    sub_10005DCEC(v37);
  }
  return Hasher._finalize()();
}

uint64_t sub_10005DA98(__int128 *a1, __int128 *a2)
{
  __int128 v4[6];
  __int128 v5[6];

  sub_100057150(a1, (uint64_t)v4);
  sub_100057150(a2, (uint64_t)v5);
  return sub_10005E894(v4, v5) & 1;
}

unint64_t sub_10005DAE4()
{
  unint64_t result;

  result = qword_10013DD28;
  if (!qword_10013DD28)
  {
    result = swift_getWitnessTable(&unk_1000EC100, &type metadata for RemotePerson);
    atomic_store(result, (unint64_t *)&qword_10013DD28);
  }
  return result;
}

Swift::Int sub_10005DB28()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  if (*(_BYTE *)(v0 + 17))
    v1 = 256;
  else
    v1 = 0;
  v2 = v1 | *(unsigned __int8 *)(v0 + 16);
  if (*(_BYTE *)(v0 + 18))
    v3 = 0x10000;
  else
    v3 = 0;
  if (*(_BYTE *)(v0 + 19))
    v4 = 0x1000000;
  else
    v4 = 0;
  return sub_10005D78C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), v2 | v3 | v4);
}

void sub_10005DB70(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(v1 + 16);
  if (*(_BYTE *)(v1 + 18))
    v4 = 0x10000;
  else
    v4 = 0;
  if (*(_BYTE *)(v1 + 19))
    v5 = 0x1000000;
  else
    v5 = 0;
  sub_10005D71C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), v3 | v4 | v5);
}

Swift::Int sub_10005DBB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  v5 = *((_BYTE *)v1 + 17);
  v6 = *((_BYTE *)v1 + 18);
  v7 = *((_BYTE *)v1 + 19);
  Hasher.init(_seed:)(v9, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t sub_10005DC64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 18);
  v6 = *(unsigned __int8 *)(a1 + 19);
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned __int8 *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 17);
  v11 = *(unsigned __int8 *)(a2 + 18);
  v12 = *(unsigned __int8 *)(a2 + 19);
  if (*(_BYTE *)(a1 + 17))
    v13 = 256;
  else
    v13 = 0;
  v14 = v13 | v4;
  if (v5)
    v15 = 0x10000;
  else
    v15 = 0;
  if (v6)
    v16 = 0x1000000;
  else
    v16 = 0;
  v17 = v14 | v15 | v16;
  if (v10)
    v18 = 256;
  else
    v18 = 0;
  v19 = v18 | v9;
  if (v11)
    v20 = 0x10000;
  else
    v20 = 0;
  if (v12)
    v21 = 0x1000000;
  else
    v21 = 0;
  return sub_10005EA9C(v2, v3, v17, v7, v8, v19 | v20 | v21);
}

void sub_10005DCEC(__int128 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  _TtC9AirDropUI33AirDropTransferSessionsController *v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _TtC9AirDropUI33AirDropTransferSessionsController *v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _TtC9AirDropUI33AirDropTransferSessionsController *v39;
  int v40;
  uint64_t v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  _TtC9AirDropUI33AirDropTransferSessionsController *v49;
  int v50;
  uint64_t v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;

  v2 = v1;
  v4 = *v2;
  v5 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  v13 = v2[2];
  v14 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v2[3];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = v2[4];
  v23 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v2[5];
  swift_bridgeObjectRetain(v23);
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  v31 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v2[6];
  swift_bridgeObjectRetain(v31);
  sub_10005E4F8(a1, (uint64_t)v31);
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v2[8];
  if (v39)
  {
    v40 = *((_DWORD *)v2 + 18);
    v41 = v2[7];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v39);
    String.hash(into:)(a1, v41, v39);
    Hasher._combine(_:)(v40 & 1);
    Hasher._combine(_:)(BYTE1(v40) & 1);
    Hasher._combine(_:)(BYTE2(v40) & 1);
    Hasher._combine(_:)(HIBYTE(v40) & 1);
    swift_bridgeObjectRelease(v39, v42, v43, v44, v45, v46, v47, v48);
    v49 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v2[11];
    if (v49)
    {
LABEL_3:
      v50 = *((_DWORD *)v2 + 24);
      v51 = v2[10];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v49);
      String.hash(into:)(a1, v51, v49);
      Hasher._combine(_:)(v50 & 1);
      Hasher._combine(_:)(BYTE1(v50) & 1);
      Hasher._combine(_:)(BYTE2(v50) & 1);
      Hasher._combine(_:)(HIBYTE(v50) & 1);
      swift_bridgeObjectRelease(v49, v52, v53, v54, v55, v56, v57, v58);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v49 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v2[11];
    if (v49)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

Swift::Int sub_10005DE80()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1, 0);
  sub_10005DCEC(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10005DEC0(uint64_t a1)
{
  __int128 v2[4];

  Hasher.init(_seed:)(v2, a1);
  sub_10005DCEC(v2);
  return Hasher._finalize()();
}

uint64_t sub_10005DEF8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  int v12;
  _OWORD v13[6];
  int v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_DWORD *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_DWORD *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return sub_10005E6D8((uint64_t *)v11, (uint64_t)v13) & 1;
}

unint64_t sub_10005DF64()
{
  unint64_t result;

  result = qword_10013DD30;
  if (!qword_10013DD30)
  {
    result = swift_getWitnessTable(&unk_1000EC168, &type metadata for ContactDetails);
    atomic_store(result, (unint64_t *)&qword_10013DD30);
  }
  return result;
}

Swift::Int sub_10005DFA8()
{
  uint64_t *v0;
  uint64_t v1;
  _TtC9AirDropUI33AirDropTransferSessionsController *v2;
  uint64_t v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  __int128 v28[4];

  v1 = *v0;
  v2 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v0[1];
  v3 = v0[2];
  v4 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v0[3];
  v5 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v0[4];
  Hasher.init(_seed:)(v28, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v28, v1, v2);
  swift_bridgeObjectRelease(v2, v6, v7, v8, v9, v10, v11, v12);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v28, v3, v4);
  swift_bridgeObjectRelease(v4, v13, v14, v15, v16, v17, v18, v19);
  swift_bridgeObjectRetain(v5);
  sub_10005E4F8(v28, (uint64_t)v5);
  swift_bridgeObjectRelease(v5, v20, v21, v22, v23, v24, v25, v26);
  return Hasher._finalize()();
}

void sub_10005E054(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  uint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  v3 = *v1;
  v4 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[1];
  v5 = v1[2];
  v6 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[3];
  v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[4];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4, v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6, v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRetain(v7);
  sub_10005E4F8(a1, (uint64_t)v7);
  swift_bridgeObjectRelease(v7, v22, v23, v24, v25, v26, v27, v28);
}

Swift::Int sub_10005E0E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  __int128 v29[4];

  v2 = *v1;
  v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[1];
  v4 = v1[2];
  v5 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[3];
  v6 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[4];
  Hasher.init(_seed:)(v29, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v29, v2, v3);
  swift_bridgeObjectRelease(v3, v7, v8, v9, v10, v11, v12, v13);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v29, v4, v5);
  swift_bridgeObjectRelease(v5, v14, v15, v16, v17, v18, v19, v20);
  swift_bridgeObjectRetain(v6);
  sub_10005E4F8(v29, (uint64_t)v6);
  swift_bridgeObjectRelease(v6, v21, v22, v23, v24, v25, v26, v27);
  return Hasher._finalize()();
}

uint64_t sub_10005E18C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10005EA20((uint64_t *)v5, v7) & 1;
}

uint64_t sub_10005E1D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _QWORD v42[9];

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v32 = result;
  v33 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v34 = (unint64_t)(v4 + 63) >> 6;
  v41 = a2 + 56;
  if (v6)
    goto LABEL_7;
LABEL_9:
  v8 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v8 >= v34)
    return 1;
  v9 = *(_QWORD *)(v33 + 8 * v8);
  v10 = v3 + 1;
  if (!v9)
  {
    v10 = v8 + 1;
    if (v8 + 1 >= v34)
      return 1;
    v9 = *(_QWORD *)(v33 + 8 * v10);
    if (!v9)
    {
      v10 = v8 + 2;
      if (v8 + 2 >= v34)
        return 1;
      v9 = *(_QWORD *)(v33 + 8 * v10);
      if (!v9)
      {
        v11 = v8 + 3;
        if (v11 < v34)
        {
          v9 = *(_QWORD *)(v33 + 8 * v11);
          if (v9)
          {
            v10 = v11;
            goto LABEL_22;
          }
          while (1)
          {
            v10 = v11 + 1;
            if (__OFADD__(v11, 1))
              break;
            if (v10 >= v34)
              return 1;
            v9 = *(_QWORD *)(v33 + 8 * v10);
            ++v11;
            if (v9)
              goto LABEL_22;
          }
LABEL_39:
          __break(1u);
          return result;
        }
        return 1;
      }
    }
  }
LABEL_22:
  v35 = (v9 - 1) & v9;
  v36 = v10;
  for (i = __clz(__rbit64(v9)) + (v10 << 6); ; i = __clz(__rbit64(v6)) | (v3 << 6))
  {
    v12 = *(_QWORD *)(result + 48) + 24 * i;
    v14 = *(_QWORD *)v12;
    v13 = *(_QWORD *)(v12 + 8);
    v15 = *(unsigned __int8 *)(v12 + 16);
    v16 = *(unsigned __int8 *)(v12 + 17);
    v17 = *(unsigned __int8 *)(v12 + 18);
    v18 = *(unsigned __int8 *)(v12 + 19);
    Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
    swift_bridgeObjectRetain_n(v13, 2);
    String.hash(into:)(v42, v14, v13);
    swift_bridgeObjectRelease(v13);
    v40 = v15;
    Hasher._combine(_:)(v15);
    v39 = v16;
    Hasher._combine(_:)(v16);
    v19 = v17;
    Hasher._combine(_:)(v17);
    v38 = v18;
    Hasher._combine(_:)(v18);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v2 + 32);
    v22 = v20 & ~v21;
    if (((*(_QWORD *)(v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      break;
    v23 = ~v21;
    v24 = *(_QWORD *)(a2 + 48);
    while (1)
    {
      v25 = v24 + 24 * v22;
      v26 = *(_QWORD *)(v25 + 8);
      v27 = *(unsigned __int8 *)(v25 + 16);
      v28 = *(unsigned __int8 *)(v25 + 17);
      v29 = *(unsigned __int8 *)(v25 + 19);
      v30 = v19 ^ *(unsigned __int8 *)(v25 + 18);
      if (*(_QWORD *)v25 != v14 || v26 != v13)
        break;
      if (((v40 ^ v27 | v39 ^ v28 | v30) & 1) == 0)
        goto LABEL_26;
LABEL_27:
      v22 = (v22 + 1) & v23;
      if (((*(_QWORD *)(v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        goto LABEL_35;
    }
    if ((v40 ^ v27) & 1 | ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v25, v26, v14, v13, 0) & 1) == 0) | ((v39 ^ v28) | v30) & 1)
      goto LABEL_27;
LABEL_26:
    if (((v38 ^ v29) & 1) != 0)
      goto LABEL_27;
    swift_bridgeObjectRelease(v13);
    v3 = v36;
    v2 = a2;
    result = v32;
    v6 = v35;
    if (!v35)
      goto LABEL_9;
LABEL_7:
    v35 = (v6 - 1) & v6;
    v36 = v3;
  }
LABEL_35:
  swift_bridgeObjectRelease(v13);
  return 0;
}

void sub_10005E4F8(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  Swift::UInt v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt8 v17;
  Swift::UInt8 v18;
  Swift::UInt8 v19;
  Swift::UInt8 v20;
  Swift::Int v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  _QWORD v28[9];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v29 = *a1;
  v30 = v4;
  v5 = a1[3];
  v31 = a1[2];
  v32 = v5;
  v33 = v3;
  v25 = a2 + 56;
  v26 = Hasher._finalize()();
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v27 = a2;
  swift_bridgeObjectRetain(a2);
  v10 = 0;
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_19;
    if (v11 >= v9)
    {
LABEL_17:
      swift_release(v27);
      Hasher._combine(_:)(v10);
      return;
    }
    v23 = *(_QWORD *)(v25 + 8 * v11);
    if (!v23)
      break;
LABEL_16:
    v8 = (v23 - 1) & v23;
    v13 = __clz(__rbit64(v23)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(v27 + 48) + 24 * v13;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_BYTE *)(v14 + 16);
    v18 = *(_BYTE *)(v14 + 17);
    v19 = *(_BYTE *)(v14 + 18);
    v20 = *(_BYTE *)(v14 + 19);
    Hasher.init(_seed:)(v28, v26);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v28, v15, v16);
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    swift_bridgeObjectRelease(v16);
    v10 ^= v21;
  }
  v24 = v11 + 1;
  if (v11 + 1 >= v9)
    goto LABEL_17;
  v23 = *(_QWORD *)(v25 + 8 * v24);
  if (v23)
  {
    ++v11;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v11 >= v9)
      goto LABEL_17;
    v23 = *(_QWORD *)(v25 + 8 * v11);
    ++v24;
    if (v23)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_10005E6D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      if ((v16 = a1[4], v17 = a1[5], v18 = *(_QWORD *)(a2 + 32), v19 = *(_QWORD *)(a2 + 40), v16 == v18) && v17 == v19
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0), result = 0, (v20 & 1) != 0))
      {
        if ((sub_10005E1D4(a1[6], *(_QWORD *)(a2 + 48)) & 1) == 0)
          return 0;
        v21 = a1[8];
        v22 = *(_QWORD *)(a2 + 64);
        if (!v21)
        {
          if (v22)
            return 0;
LABEL_27:
          v29 = a1[11];
          v30 = *(_QWORD *)(a2 + 88);
          if (v29)
          {
            if (v30)
            {
              v31 = a1[10];
              v32 = *((_DWORD *)a1 + 24);
              v33 = *(_QWORD *)(a2 + 80);
              v34 = *(_DWORD *)(a2 + 96);
              if (v31 == v33 && v29 == v30)
              {
                v35 = v32 ^ v34;
                if (((v32 ^ v34) & 1) != 0 || ((v35 >> 8) & 1) != 0 || (v35 & 0x10000) != 0 || (v35 & 0x1000000) != 0)
                  return 0;
              }
              else
              {
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v31, v29, v33, v30, 0) & 1) == 0)
                  return 0;
                v36 = v32 ^ v34;
                if (((v32 ^ v34) & 1) != 0 || ((v36 >> 8) & 1) != 0 || (v36 & 0x10000) != 0 || (v36 & 0x1000000) != 0)
                  return 0;
              }
              return 1;
            }
          }
          else if (!v30)
          {
            return 1;
          }
          return 0;
        }
        if (!v22)
          return 0;
        v23 = a1[7];
        v24 = *((_DWORD *)a1 + 18);
        v25 = *(_QWORD *)(a2 + 56);
        v26 = *(_DWORD *)(a2 + 72);
        if (v23 == v25 && v21 == v22)
        {
          result = 0;
        }
        else
        {
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, v25, v22, 0);
          result = 0;
          if ((v27 & 1) == 0)
            return result;
        }
        v28 = v24 ^ v26;
        if (((v24 ^ v26) & 1) == 0 && ((v28 >> 8) & 1) == 0 && (v28 & 0x10000) == 0 && (v28 & 0x1000000) == 0)
          goto LABEL_27;
      }
    }
  }
  return result;
}

uint64_t sub_10005E894(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[4];
  __int128 v11;
  __int128 v12;
  int v13;
  _OWORD v14[6];
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;

  sub_100057150(a1, (uint64_t)&v16);
  if ((*((_QWORD *)&v20 + 1) & 0x8000000000000000) != 0)
  {
    *((_QWORD *)&v20 + 1) &= ~0x8000000000000000;
    v4 = v16;
    v5 = v17;
    v6 = v18;
    sub_100057150(a2, (uint64_t)&v23);
    if ((*((_QWORD *)&v27 + 1) & 0x8000000000000000) != 0)
    {
      *((_QWORD *)&v27 + 1) &= ~0x8000000000000000;
      v8 = v24;
      v9 = v25;
      if ((v4 == v23
         || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, *((_QWORD *)&v4 + 1), v23, *((_QWORD *)&v23 + 1), 0) & 1) != 0)
        && (v5 == v8
         || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, *((_QWORD *)&v5 + 1), v8, *((_QWORD *)&v8 + 1), 0) & 1) != 0)
        && (sub_10005E1D4(v6, v9) & 1) != 0)
      {
        v3 = 1;
        return v3 & 1;
      }
    }
    goto LABEL_5;
  }
  v27 = v20;
  v28 = v21;
  v29 = v22;
  v23 = v16;
  v24 = v17;
  v25 = v18;
  v26 = v19;
  sub_100057150(a2, (uint64_t)v10);
  if ((*((_QWORD *)&v11 + 1) & 0x8000000000000000) != 0)
  {
LABEL_5:
    v3 = 0;
    return v3 & 1;
  }
  v14[4] = v11;
  v14[5] = v12;
  v15 = v13;
  v14[0] = v10[0];
  v14[1] = v10[1];
  v14[2] = v10[2];
  v14[3] = v10[3];
  v3 = sub_10005E6D8((uint64_t *)&v23, (uint64_t)v14);
  return v3 & 1;
}

uint64_t sub_10005EA20(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if ((v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0) & 1) != 0)
    && ((v8 = a1[2], v9 = a1[3], v10 = a2[2], v11 = a2[3], v8 == v10) ? (v12 = v9 == v11) : (v12 = 0),
        v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0) & 1) != 0))
  {
    return sub_10005E1D4(a1[4], a2[4]);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10005EA9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  __int16 v8;
  unsigned int v9;
  uint64_t result;
  char v11;

  v8 = a3 ^ a6;
  v9 = ((a3 ^ a6) >> 16) & 1;
  if (a1 == a4 && a2 == a5)
  {
    if ((a3 ^ a6 | (((a3 ^ a6) & 0x100) >> 8)) & 1 | ((a3 ^ a6) >> 16) & 1)
      return 0;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
    result = 0;
    if (v8 & 1 | ((v11 & 1) == 0) | ((unsigned __int16)(v8 & 0x100) >> 8) & 1 | v9 & 1)
      return result;
  }
  return ((a3 & 0x1000000) == 0) ^ ((a6 & 0x1000000) >> 24);
}

uint64_t sub_10005EB38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for Handle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1;
}

__n128 initializeWithTake for Handle(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Handle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1;
}

uint64_t getEnumTagSinglePayload for Handle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Handle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Handle()
{
  return &type metadata for Handle;
}

uint64_t destroy for DeviceDetails(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for DeviceDetails(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for DeviceDetails(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DeviceDetails(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for DeviceDetails(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceDetails(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceDetails()
{
  return &type metadata for DeviceDetails;
}

unint64_t sub_10005EEEC()
{
  unint64_t result;

  result = qword_10013DD38;
  if (!qword_10013DD38)
  {
    result = swift_getWitnessTable(&unk_1000EC1E8, &type metadata for DeviceDetails);
    atomic_store(result, (unint64_t *)&qword_10013DD38);
  }
  return result;
}

unint64_t sub_10005EF34()
{
  unint64_t result;

  result = qword_10013DD40;
  if (!qword_10013DD40)
  {
    result = swift_getWitnessTable(&unk_1000EC250, &type metadata for Handle);
    atomic_store(result, (unint64_t *)&qword_10013DD40);
  }
  return result;
}

void sub_10005EF78()
{
  qword_100147E10 = 0x4032000000000000;
}

void sub_10005EF88()
{
  qword_100147E18 = 0x4028000000000000;
}

void sub_10005EF98()
{
  qword_100147E20 = 0x4038000000000000;
}

void sub_10005EFA8()
{
  qword_100147E28 = 0x405B800000000000;
}

double sub_10005EFBC()
{
  double result;

  result = 15.0;
  xmmword_100147E30 = xmmword_1000EC2C0;
  *(_OWORD *)&qword_100147E40 = xmmword_1000EC2D0;
  return result;
}

__n128 sub_10005EFDC()
{
  __n128 result;

  __asm { FMOV            V0.2D, #16.0 }
  xmmword_100147E50 = (__int128)result;
  *(__n128 *)&qword_100147E60 = result;
  return result;
}

void sub_10005EFF0()
{
  qword_100147E70 = 0x4051800000000000;
}

void sub_10005F004()
{
  qword_100147E78 = 0x405A800000000000;
}

void sub_10005F018()
{
  qword_100147E80 = 0x4049000000000000;
}

void sub_10005F028()
{
  qword_100147E88 = 0x4030000000000000;
}

void sub_10005F038()
{
  qword_100147E90 = 0x4026000000000000;
}

void sub_10005F048()
{
  qword_100147E98 = 0x4034000000000000;
}

void sub_10005F058()
{
  qword_100147EA0 = 0x4000000000000000;
}

void sub_10005F068()
{
  qword_100147EA8 = 0x4049000000000000;
}

void sub_10005F078()
{
  qword_100147EB0 = 0x4028000000000000;
}

void sub_10005F088()
{
  qword_100147EB8 = 0x407F400000000000;
}

void sub_10005F09C()
{
  qword_100147EC0 = 0x4064000000000000;
}

double sub_10005F0AC()
{
  double result;

  result = 24.0;
  xmmword_100147ED0 = xmmword_1000EC2E0;
  *(_OWORD *)&qword_100147EE0 = xmmword_1000EC2F0;
  return result;
}

__n128 sub_10005F0CC()
{
  __n128 result;

  __asm { FMOV            V0.2D, #16.0 }
  xmmword_100147EF0 = (__int128)result;
  *(__n128 *)&qword_100147F00 = result;
  return result;
}

void sub_10005F0E0()
{
  qword_100147F10 = 0x402E000000000000;
}

void sub_10005F0F0()
{
  qword_100147F18 = 0x4030000000000000;
}

void sub_10005F100()
{
  qword_100147F20 = 0x4047000000000000;
}

void sub_10005F110()
{
  qword_100147F28 = 0x4048000000000000;
}

void sub_10005F120()
{
  qword_100147F30 = 0x4044800000000000;
}

void sub_10005F134()
{
  qword_100147F38 = 0x4047000000000000;
}

void sub_10005F144()
{
  qword_100147F40 = 0x4036000000000000;
}

uint64_t sub_10005F154(uint64_t a1)
{
  return sub_10005F17C(a1, (uint64_t (*)(uint64_t))&static Font.headline.getter, &qword_100147F48);
}

uint64_t sub_10005F168(uint64_t a1)
{
  return sub_10005F17C(a1, (uint64_t (*)(uint64_t))&static Font.subheadline.getter, &qword_100147F50);
}

uint64_t sub_10005F17C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = type metadata accessor for Font.Leading(0);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5, v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2(v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, enum case for Font.Leading.tight(_:), v5);
  v12 = Font.leading(_:)(v10, v11);
  swift_release(v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  *a3 = v12;
  return result;
}

uint64_t sub_10005F238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v4 + 104))(v3, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v3, 0.043, 0.608, 1.0, 1.0);
  qword_100147F58 = result;
  return result;
}

void sub_10005F2CC(void *a1, double a2, double a3, uint64_t a4, _TtC9AirDropUI33AirDropTransferSessionsController *a5)
{
  uint64_t v8;
  unsigned __int8 *transfersMonitorTask;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  objc_class *v24;
  char *v25;
  void **v26;
  Class isa;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  char v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  objc_super v41;
  void **aBlock;
  uint64_t v43;
  void *v44;
  void *v45;
  id (*v46)();
  uint64_t v47;

  v8 = *(_QWORD *)a5->connection;
  if (v8)
  {
    aBlock = (void **)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a5);
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    transfersMonitorTask = a5->transfersMonitorTask;
    v11 = v8;
    do
    {
      v23 = (void *)*((_QWORD *)transfersMonitorTask - 1);
      if (!*transfersMonitorTask || *transfersMonitorTask == 1)
      {
        v12 = v23;
      }
      else
      {
        v24 = (objc_class *)type metadata accessor for ZoomEffect();
        v25 = (char *)objc_allocWithZone(v24);
        *(_QWORD *)&v25[OBJC_IVAR____TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A10ZoomEffect_magnitude] = v23;
        v41.receiver = v25;
        v41.super_class = v24;
        v12 = objc_msgSendSuper2(&v41, "init");
      }
      v13 = v12;
      transfersMonitorTask += 16;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = aBlock[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
      specialized ContiguousArray._endMutation()(v15);
      --v11;
    }
    while (v11);
    v26 = aBlock;
    swift_bridgeObjectRelease(a5, v16, v17, v18, v19, v20, v21, v22);
    sub_10005FEA8();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v26);
    v28 = objc_msgSend((id)objc_opt_self(UIVisualEffect), "effectCombiningEffects:", isa);

  }
  else
  {
    v28 = 0;
  }
  v29 = objc_msgSend(a1, "effect");
  if (v29)
  {
    v30 = v29;
    if (v28)
    {
      sub_10005FEA8();
      v31 = v28;
      v32 = v30;
      v33 = static NSObject.== infix(_:_:)(v32, v31);

      if ((v33 & 1) != 0)
      {

        return;
      }
    }
    else
    {

    }
  }
  else if (!v28)
  {
    return;
  }
  if (v8)
    a3 = a2;
  v34 = (void *)objc_opt_self(UIView);
  v35 = swift_allocObject(&unk_100126E00, 32, 7);
  *(_QWORD *)(v35 + 16) = a1;
  *(_QWORD *)(v35 + 24) = v28;
  v46 = sub_10005FF10;
  v47 = v35;
  aBlock = _NSConcreteStackBlock;
  v43 = 1107296256;
  v44 = sub_1000DA060;
  v45 = &unk_100126E18;
  v36 = _Block_copy(&aBlock);
  v37 = v47;
  v38 = v28;
  v39 = a1;
  swift_release(v37);
  v46 = (id (*)())nullsub_1;
  v47 = 0;
  aBlock = _NSConcreteStackBlock;
  v43 = 1107296256;
  v44 = sub_1000A656C;
  v45 = &unk_100126E40;
  v40 = _Block_copy(&aBlock);
  objc_msgSend(v34, "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", 0, v36, v40, 1.0, a3, 2.0, 630.0, 50.0, 0.0);

  _Block_release(v40);
  _Block_release(v36);
}

id sub_10005F5D0()
{
  return objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
}

void sub_10005F5F4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10005F2CC(a1, *(double *)(v2 + 8), *(double *)(v2 + 16), a2, *(_TtC9AirDropUI33AirDropTransferSessionsController **)v2);
}

uint64_t sub_10005F604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10005FF38();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10005F654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10005FF38();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10005F6A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005FF38();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

BOOL sub_10005F7CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  char *v5;
  _BYTE v6[24];
  uint64_t v7;

  sub_10005FB8C(a1, (uint64_t)v6);
  if (v7)
  {
    v2 = type metadata accessor for ZoomEffect();
    if ((swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
    {
      v3 = *(double *)&v5[OBJC_IVAR____TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A10ZoomEffect_magnitude];

      return v3 == *(double *)(v1 + OBJC_IVAR____TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A10ZoomEffect_magnitude);
    }
  }
  else
  {
    sub_10005FB4C((uint64_t)v6);
  }
  return 0;
}

id sub_10005F904()
{
  return sub_100026EB0((uint64_t (*)(_QWORD))type metadata accessor for ZoomEffect);
}

uint64_t type metadata accessor for ZoomEffect()
{
  return objc_opt_self(_TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A10ZoomEffect);
}

id sub_10005FB20()
{
  return sub_100026EB0((uint64_t (*)(_QWORD))type metadata accessor for ZoomEffectViewEntry);
}

uint64_t type metadata accessor for ZoomEffectViewEntry()
{
  return objc_opt_self(_TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A19ZoomEffectViewEntry);
}

uint64_t sub_10005FB4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008F88(&qword_10013CB40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005FB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013CB40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for VisualEffectView.Effect(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10005FC18(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_10005FC18(id result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return result;
  return result;
}

void destroy for VisualEffectView.Effect(uint64_t a1)
{
  sub_10005FC3C(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_10005FC3C(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u)

}

uint64_t assignWithCopy for VisualEffectView.Effect(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10005FC18(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_10005FC3C(v5, v6);
  return a1;
}

uint64_t assignWithTake for VisualEffectView.Effect(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10005FC3C(v4, v5);
  return a1;
}

uint64_t sub_10005FCDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10005FCE4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VisualEffectView.Effect()
{
  return &type metadata for VisualEffectView.Effect;
}

uint64_t initializeBufferWithCopyOfBuffer for VisualEffectView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for VisualEffectView(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for VisualEffectView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for VisualEffectView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisualEffectView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualEffectView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualEffectView()
{
  return &type metadata for VisualEffectView;
}

unint64_t sub_10005FE64()
{
  unint64_t result;

  result = qword_10013DDA8;
  if (!qword_10013DDA8)
  {
    result = swift_getWitnessTable(&unk_1000EC354, &type metadata for VisualEffectView);
    atomic_store(result, (unint64_t *)&qword_10013DDA8);
  }
  return result;
}

unint64_t sub_10005FEA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013DDB0;
  if (!qword_10013DDB0)
  {
    v1 = objc_opt_self(UIVisualEffect);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013DDB0);
  }
  return result;
}

uint64_t sub_10005FEE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10005FF10()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setEffect:", *(_QWORD *)(v0 + 24));
}

uint64_t sub_10005FF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005FF30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10005FF38()
{
  unint64_t result;

  result = qword_10013DDB8;
  if (!qword_10013DDB8)
  {
    result = swift_getWitnessTable(&unk_1000EC3A4, &type metadata for VisualEffectView);
    atomic_store(result, (unint64_t *)&qword_10013DDB8);
  }
  return result;
}

NSString *sub_10005FF8C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString *v3;

  v0 = sub_100008F88((uint64_t *)&unk_10013DF40);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000E9A20;
  v2 = (void *)objc_opt_self(CNContactFormatter);
  *(_QWORD *)(v1 + 32) = objc_msgSend(v2, "descriptorForRequiredKeysForStyle:", 1);
  *(_QWORD *)(v1 + 40) = objc_msgSend(v2, "descriptorForRequiredKeysForStyle:", 0);
  *(_QWORD *)(v1 + 48) = CNContactPhoneNumbersKey;
  *(_QWORD *)(v1 + 56) = CNContactEmailAddressesKey;
  specialized Array._endMutation()(CNContactEmailAddressesKey);
  qword_10013DDC0 = v1;
  v3 = CNContactPhoneNumbersKey;
  return CNContactEmailAddressesKey;
}

void sub_100060060(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  NSString v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31[5];
  __int128 v32;
  __int128 v33;
  unsigned int v34;
  __int128 v35;
  int v36;

  v4 = v3;
  v8 = String._bridgeToObjectiveC()();
  if (qword_10013AD18 != -1)
    swift_once(&qword_10013AD18, sub_10005FF8C);
  sub_100008F88(&qword_10013DF30);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v4, "contactForIdentifier:keysToFetch:", v8, isa);

  if (v10)
  {
    sub_100063600(v10, (uint64_t)v31);
    v11 = v31[0];
    v12 = v31[1];
    v13 = v31[2];
    v14 = v31[3];
    v15 = v31[4];
    v28 = v33;
    v29 = v32;
    v16 = v34;
    v27 = v35;
    v17 = v36;

    v19 = v27;
    v18 = v28;
    v20 = v29;
  }
  else
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v21 = type metadata accessor for Logger(0);
    sub_100009558(v21, (uint64_t)qword_100148040);
    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v31[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain(a2);
      v30 = sub_10003A834(a1, a2, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to fetch contact with identifier: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v20 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
  }
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = v14;
  *(_QWORD *)(a3 + 32) = v15;
  *(_OWORD *)(a3 + 40) = v20;
  *(_OWORD *)(a3 + 56) = v18;
  *(_QWORD *)(a3 + 72) = v16;
  *(_OWORD *)(a3 + 80) = v19;
  *(_DWORD *)(a3 + 96) = v17;
}

uint64_t sub_10006031C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v5[104];

  sub_100060060(a1, a2, (uint64_t)v5);
  return sub_100062D64((uint64_t)v5, a3);
}

void sub_100060358(uint64_t a1)
{
  void *v1;
  int64_t v2;
  int64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  char *v44;
  Class isa;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100011ED4(0, v2, 0);
    v4 = sub_100063094(a1);
    v6 = v5;
    v8 = v7 & 1;
    v44 = (char *)(a1 + 56);
    v9 = a1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v9 + 32))
    {
      if (((*(_QWORD *)&v44[((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8] >> v4) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(v9 + 36) != v6)
        goto LABEL_15;
      v10 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(*(_QWORD *)(v9 + 48) + 24 * v4 + 8);
      swift_bridgeObjectRetain(v10);
      v11 = String._bridgeToObjectiveC()();
      v12 = (id)TUCopyIDSCanonicalAddressForDestinationID();

      if (!v12)
        goto LABEL_16;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;
      swift_bridgeObjectRelease(v10, v14, v16, v17, v18, v19, v20, v21);

      v23 = *(_QWORD *)_swiftEmptyArrayStorage.connection;
      v22 = *(_QWORD *)_swiftEmptyArrayStorage.airdropClient;
      if (v23 >= v22 >> 1)
        sub_100011ED4(v22 > 1, v23 + 1, 1);
      *(_QWORD *)_swiftEmptyArrayStorage.connection = v23 + 1;
      v24 = (char *)&_swiftEmptyArrayStorage + 16 * v23;
      *((_QWORD *)v24 + 4) = v13;
      *((_QWORD *)v24 + 5) = v15;
      v25 = sub_100063134(v4, v6, v8 & 1, v9);
      v4 = v25;
      v6 = v26;
      v8 = v27 & 1;
      if (!--v2)
      {
        sub_100063218(v25, v26, v27 & 1);
        v1 = v43;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_12:
    v28 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10008F154((uint64_t)&_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v29, v30, v31, v32, v33, v34, v35);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v28, v36, v37, v38, v39, v40, v41, v42);
    objc_msgSend(v1, "beginQueryWithDestinations:", isa);

  }
}

void sub_10006056C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  id v4;
  uint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  _TtC9AirDropUI33AirDropTransferSessionsController *v38;
  unsigned __int8 v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  _TtC9AirDropUI33AirDropTransferSessionsController *v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  char v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  SEL v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  const char *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  int v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  unsigned __int8 v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v2 = v1;
  v3 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v1 + 48);
  v4 = a1;
  v5 = swift_bridgeObjectRetain(v3);
  v6 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_100063224(v5, v4);
  swift_bridgeObjectRelease(v3, v7, v8, v9, v10, v11, v12, v13);

  if (qword_10013AD60 != -1)
    goto LABEL_54;
  while (1)
  {
    v14 = type metadata accessor for Logger(0);
    sub_100009558(v14, (uint64_t)qword_100148040);
    v15 = swift_bridgeObjectRetain_n(v6, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v108 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = swift_bridgeObjectRetain(v6);
      v21 = Array.description.getter(v20, &type metadata for Handle);
      v23 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v22;
      swift_bridgeObjectRelease(v6, v22, v24, v25, v26, v27, v28, v29);
      v107 = sub_10003A834(v21, (unint64_t)v23, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease(v23, v30, v31, v32, v33, v34, v35, v36);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Updated resolved IDS capabilities for handles: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      v37 = *(_QWORD *)v6->connection;
      if (!v37)
        goto LABEL_9;
    }
    else
    {

      swift_bridgeObjectRelease_n(v6, 2);
      v37 = *(_QWORD *)v6->connection;
      if (!v37)
      {
LABEL_9:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v106 = 0;
        v40 = 0;
        v105 = 0;
        goto LABEL_47;
      }
    }
    v38 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)v6->transfersMonitorTask;
    v39 = v6->interventionTasks[1];
    v40 = v38;
    v41 = v6->interventionTasks[3];
    v106 = *(_QWORD *)v6->airDropClient;
    v42 = v6->interventionTasks[0];
    v43 = v39;
    v44 = v41;
    v104 = v106;
    v102 = v6->interventionTasks[2];
    v103 = v42;
    if ((v102 & 1) != 0)
      break;
    if (v37 == 1)
    {
      v105 = 0;
      v40 = 0;
      v106 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v101 = v6->interventionTasks[3];
      if ((v6->interventionTasks[1] & 1) == 0)
        goto LABEL_47;
      goto LABEL_32;
    }
    v48 = &v6->lockStateMonitor[3];
    v49 = 1;
    while (1)
    {
      v50 = v49 + 1;
      if (__OFADD__(v49, 1))
        break;
      if ((*(v48 - 1) & 1) != 0)
      {
        v106 = *(_QWORD *)(v48 - 19);
        v40 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v48 - 11);
        v42 = *(v48 - 3);
        v43 = *(v48 - 2);
        v44 = *v48;
        goto LABEL_23;
      }
      ++v49;
      v48 += 24;
      if (v50 == v37)
      {
        v106 = 0;
        v40 = 0;
        v105 = 0;
        if ((v6->interventionTasks[1] & 1) != 0)
          goto LABEL_30;
        goto LABEL_15;
      }
    }
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once(&qword_10013AD60, sub_100092254);
  }
LABEL_23:
  swift_bridgeObjectRetain(v40);
  if (v43)
    v54 = 256;
  else
    v54 = 0;
  if (v44)
    v55 = 0x1000000;
  else
    v55 = 0;
  v105 = v54 | v42 | v55 | 0x10000;
  if ((v39 & 1) != 0)
  {
LABEL_30:
    v101 = v41;
LABEL_32:
    swift_bridgeObjectRetain(v38);
    if (v102)
      v56 = 0x10000;
    else
      v56 = 0;
    v57 = v56 | v103;
    if (v41)
      v58 = 0x1000000;
    else
      v58 = 0;
    v47 = v57 | v58 | 0x100;
    v45 = v104;
    v46 = v38;
    LOBYTE(v41) = v101;
LABEL_39:
    if (v37 == 1)
      v59 = 1;
    else
      v59 = v41;
    if ((v59 & 1) != 0)
      goto LABEL_47;
    v60 = &v6->lockStateMonitor[3];
    v61 = 1;
    while (!__OFADD__(v61, 1))
    {
      if (v61 + 1 != v37)
      {
        v62 = *v60;
        v60 += 24;
        ++v61;
        if ((v62 & 1) == 0)
          continue;
      }
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_52;
  }
LABEL_15:
  if (v37 != 1)
  {
    v51 = &v6->lockStateMonitor[3];
    v52 = 1;
    while (1)
    {
      v53 = v52 + 1;
      if (__OFADD__(v52, 1))
        goto LABEL_53;
      if ((*(v51 - 2) & 1) != 0)
      {
        v104 = *(_QWORD *)(v51 - 19);
        v38 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v51 - 11);
        v103 = *(v51 - 3);
        v101 = v41;
        v102 = *(v51 - 1);
        v41 = *v51;
        goto LABEL_32;
      }
      ++v52;
      v51 += 24;
      if (v53 == v37)
      {
        v45 = 0;
        v46 = 0;
        v47 = 0;
        goto LABEL_39;
      }
    }
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
LABEL_47:
  v63 = sub_10008F06C((uint64_t)v6);
  swift_bridgeObjectRelease(v6, v64, v65, v66, v67, v68, v69, v70);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v2 + 48), v71, v72, v73, v74, v75, v76, v77);
  *(_QWORD *)(v2 + 48) = v63;
  if (v40)
  {
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRelease(v46, v85, v86, v87, v88, v89, v90, v91);
    v92 = v106;
    v45 = v106;
    v46 = v40;
    v93 = v105;
    v47 = v105;
  }
  else
  {
    v92 = v106;
    v93 = v105;
  }
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v2 + 64), v78, v79, v80, v81, v82, v83, v84);
  *(_QWORD *)(v2 + 56) = v45;
  *(_QWORD *)(v2 + 64) = v46;
  *(_DWORD *)(v2 + 72) = v47;
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v2 + 88), v94, v95, v96, v97, v98, v99, v100);
  *(_QWORD *)(v2 + 80) = v92;
  *(_QWORD *)(v2 + 88) = v40;
  *(_DWORD *)(v2 + 96) = v93;
}

void sub_1000609D4(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  Class v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  unsigned __int8 v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  Class v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  unsigned __int8 v43;
  uint64_t inited;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  Class v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  _BYTE v56[48];

  v5 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain(v6);
  v7 = String._bridgeToObjectiveC()();
  v8 = (id)TUCopyIDSCanonicalAddressForDestinationID();

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = sub_100008F88((uint64_t *)&unk_10013B860);
    v13 = swift_allocObject(v12, 48, 7);
    *(_OWORD *)(v13 + 16) = xmmword_1000E9370;
    *(_QWORD *)(v13 + 32) = v9;
    *(_QWORD *)(v13 + 40) = v11;
    swift_bridgeObjectRetain(v11);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v13, v15, v16, v17, v18, v19, v20, v21);
    v55 = objc_msgSend(a2, "isFaceTimeVideoAvailableForAnyDestinationInDestinations:", isa);

    v22 = swift_allocObject(v12, 48, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1000E9370;
    *(_QWORD *)(v22 + 32) = v9;
    *(_QWORD *)(v22 + 40) = v11;
    swift_bridgeObjectRetain(v11);
    v23 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v22, v24, v25, v26, v27, v28, v29, v30);
    v31 = objc_msgSend(a2, "isFaceTimeMultiwayAvailableForAnyDestinationInDestinations:", v23);

    v32 = sub_10001AE98();
    v33 = (void *)static NSUserDefaults.airdrop.getter(v32);
    LOBYTE(v23) = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

    if ((v23 & 1) != 0)
    {
      v34 = swift_allocObject(v12, 48, 7);
      *(_OWORD *)(v34 + 16) = xmmword_1000E9370;
      *(_QWORD *)(v34 + 32) = v9;
      *(_QWORD *)(v34 + 40) = v11;
      swift_bridgeObjectRetain(v11);
      v35 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v34, v36, v37, v38, v39, v40, v41, v42);
      v43 = objc_msgSend(a2, "isiMessageAvailableForAnyDestinationInDestinations:", v35);

    }
    else
    {
      v43 = 0;
    }
    inited = swift_initStackObject(v12, v56);
    *(_OWORD *)(inited + 16) = xmmword_1000E9370;
    *(_QWORD *)(inited + 32) = v9;
    *(_QWORD *)(inited + 40) = v11;
    v45 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_1000B66E4(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    v46 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45, v47, v48, v49, v50, v51, v52, v53);
    v54 = objc_msgSend(a2, "isAVLessSharePlayCapableForAnyDestinationInDestinations:", v46);

    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = v55;
    *(_BYTE *)(a3 + 17) = v31;
    *(_BYTE *)(a3 + 18) = v54;
    *(_BYTE *)(a3 + 19) = v43;
  }
  else
  {
    __break(1u);
  }
}

void sub_100060C78(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[6];
  int v67;
  _QWORD v68[13];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;

  v63 = a5;
  v64 = a1;
  v8 = sub_100008F88(&qword_10013DEE8);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8, v9);
  v58 = v10;
  v59 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88(&qword_10013DEF0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2[3];
  v21 = a2[4];
  sub_10000904C(a2, v20);
  v22 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v21 + 8);
  v57 = a3;
  v62 = a4;
  v22(v68, a3, a4, v20, v21);
  sub_100062D64((uint64_t)v68, (uint64_t)&v69);
  if (*((_QWORD *)&v69 + 1))
  {
    v80 = v73;
    v81 = v74;
    v82 = v75;
    v76 = v69;
    v77 = v70;
    v78 = v71;
    v79 = v72;
    v66[4] = v73;
    v66[5] = v74;
    v67 = v75;
    v66[0] = v69;
    v66[1] = v70;
    v66[2] = v71;
    v66[3] = v72;
    sub_100062DAC(&v76);
    sub_10006056C(v63);
    v23 = v61;
    v24 = v64;
    AsyncStream.Continuation.yield(_:)(v66, v61);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v26 = (uint64_t)v14;
    static TaskPriority.userInitiated.getter(v25);
    v27 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v14, 0, 1, v27);
    v28 = v59;
    v29 = v60;
    v30 = v23;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v24, v23);
    v31 = *(unsigned __int8 *)(v29 + 80);
    v32 = (v31 + 32) & ~v31;
    v33 = (v58 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v33 + 107) & 0xFFFFFFFFFFFFFFF8;
    v35 = swift_allocObject(&unk_100126F60, v34 + 8, v31 | 7);
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v35 + v32, v28, v30);
    v36 = v35 + v33;
    v37 = v81;
    *(_OWORD *)(v36 + 64) = v80;
    *(_OWORD *)(v36 + 80) = v37;
    *(_DWORD *)(v36 + 96) = v82;
    v38 = v77;
    *(_OWORD *)v36 = v76;
    *(_OWORD *)(v36 + 16) = v38;
    v39 = v79;
    *(_OWORD *)(v36 + 32) = v78;
    *(_OWORD *)(v36 + 48) = v39;
    v40 = v63;
    *(_QWORD *)(v35 + v34) = v63;
    sub_100063038((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_100062FA4);
    v40;
    v41 = sub_100061708(v26, (uint64_t)&unk_10013DF00, v35);
    sub_10000CC5C(v26, &qword_10013BCC0);
    swift_retain(v41);
    AsyncStream.Continuation.onTermination.setter(sub_100063014, v41, v30);
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v42 = type metadata accessor for Logger(0);
    sub_100009558(v42, (uint64_t)qword_100148040);
    v43 = v62;
    v44 = swift_bridgeObjectRetain_n(v62, 2);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v66[0] = v48;
      *(_DWORD *)v47 = 136315138;
      swift_bridgeObjectRetain(v43);
      v65 = sub_10003A834(v57, v43, (uint64_t *)v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
      swift_bridgeObjectRelease_n(v43, 3);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Attempting to resolve IDS capabilities for contact with identifier: %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v43, 2);
    }
    sub_100060358(v79);
    swift_release(v41);
    sub_100063038((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_10004E2AC);
  }
  else
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v49 = type metadata accessor for Logger(0);
    sub_100009558(v49, (uint64_t)qword_100148040);
    v50 = v62;
    v51 = swift_bridgeObjectRetain_n(v62, 2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v76 = v55;
      *(_DWORD *)v54 = 136315138;
      swift_bridgeObjectRetain(v50);
      *(_QWORD *)&v66[0] = sub_10003A834(v57, v50, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, (char *)v66 + 8);
      swift_bridgeObjectRelease_n(v50, 3);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Could not find contact details for contact identifier: %s", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v50, 2);
    }
    AsyncStream.Continuation.finish()();
  }
}

uint64_t sub_1000612C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[30] = a5;
  v6[31] = a6;
  v6[29] = a4;
  v7 = sub_100008F88(&qword_10013DEF0);
  v6[32] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[33] = v8;
  v6[34] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013DF10);
  v6[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v6[36] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[37] = v11;
  v6[38] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006137C, 0, 0);
}

uint64_t sub_10006137C()
{
  _QWORD *v0;
  id v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.notifications(named:object:)(TUIDSLookupManagerStatusChangedNotification, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  v2 = sub_10006351C();
  v0[39] = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[40] = v3;
  *v3 = v0;
  v3[1] = sub_100061438;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[35], v0[36], v2);
}

uint64_t sub_100061438()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 320));
  if (v0)
  {
    *(_QWORD *)(v2 + 328) = v0;
    v3 = sub_100061644;
  }
  else
  {
    v3 = sub_10006149C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006149C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = type metadata accessor for Notification(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD *)(v0 + 304);
    v4 = *(_QWORD *)(v0 + 272);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(v3, *(_QWORD *)(v0 + 288));
    swift_task_dealloc(v3);
    swift_task_dealloc(v1);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 272);
    v9 = *(void **)(v0 + 248);
    v8 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 240);
    v12 = *(_OWORD *)(v10 + 16);
    v11 = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)v10;
    *(_OWORD *)(v0 + 32) = v12;
    *(_OWORD *)(v0 + 48) = v11;
    v14 = *(_OWORD *)(v10 + 64);
    v13 = *(_OWORD *)(v10 + 80);
    v15 = *(_OWORD *)(v10 + 48);
    *(_DWORD *)(v0 + 112) = *(_DWORD *)(v10 + 96);
    *(_OWORD *)(v0 + 80) = v14;
    *(_OWORD *)(v0 + 96) = v13;
    *(_OWORD *)(v0 + 64) = v15;
    sub_100062DAC((_QWORD *)v10);
    sub_10006056C(v9);
    v16 = *(_OWORD *)(v0 + 32);
    v17 = *(_QWORD *)(v0 + 48);
    v18 = *(_DWORD *)(v0 + 88);
    v19 = *(_DWORD *)(v0 + 112);
    v20 = *(_OWORD *)(v0 + 56);
    v21 = *(_OWORD *)(v0 + 72);
    v22 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 136) = v16;
    *(_QWORD *)(v0 + 152) = v17;
    *(_OWORD *)(v0 + 160) = v20;
    *(_OWORD *)(v0 + 176) = v21;
    *(_DWORD *)(v0 + 192) = v18;
    *(_OWORD *)(v0 + 200) = v22;
    *(_DWORD *)(v0 + 216) = v19;
    v23 = sub_100008F88(&qword_10013DEE8);
    AsyncStream.Continuation.yield(_:)(v0 + 120, v23);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_10000CC5C(v1, &qword_10013DF10);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 336) = v24;
    *v24 = v0;
    v24[1] = sub_1000616A4;
    return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 312));
  }
}

uint64_t sub_100061644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 328);
  v1 = sub_100008F88((uint64_t *)&unk_10013CB30);
  v2 = swift_dynamicCast(v1, v0 + 224, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_1000616A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 336));
  if (v0)
  {
    *(_QWORD *)(v2 + 328) = v0;
    v3 = sub_100061644;
  }
  else
  {
    v3 = sub_10006149C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100061708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v24[4];

  v6 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063440(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if ((_DWORD)v12 == 1)
  {
    sub_10000CC5C((uint64_t)v9, &qword_10013BCC0);
    v13 = 4096;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14)
    {
LABEL_3:
      v15 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v14);
      swift_unknownObjectRetain(v14);
      v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      v19 = v18;
      swift_unknownObjectRelease(v14);
      goto LABEL_6;
    }
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v13 = v20 | 0x1000;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14)
      goto LABEL_3;
  }
  v17 = 0;
  v19 = 0;
LABEL_6:
  v21 = swift_allocObject(&unk_100126F88, 32, 7);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  if (v19 | v17)
  {
    v24[0] = 0;
    v24[1] = 0;
    v22 = v24;
    v24[2] = v17;
    v24[3] = v19;
  }
  else
  {
    v22 = 0;
  }
  return swift_task_create(v13, v22, (char *)&type metadata for () + 8, &unk_10013F240, v21);
}

uint64_t sub_100061898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_100008F88(&qword_10013BCC0);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008F88((uint64_t *)&unk_10013DEA8);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100061934, 0, 0);
}

uint64_t sub_100061934()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject(&unk_100126FB0, 40, 7);
  v0[11] = v6;
  v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  v7 = async function pointer to withOperationTimeout<A>(_:priority:operation:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v3);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[12] = v8;
  v9 = sub_100008F88(&qword_10013DEC8);
  *v8 = v0;
  v8[1] = sub_100061A20;
  return withOperationTimeout<A>(_:priority:operation:)(v0[10], 5000000000000000000, 0, v0[6], &unk_10013DF28, v6, v9);
}

uint64_t sub_100061A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release(v1);
  sub_10000CC5C(v2, &qword_10013BCC0);
  return swift_task_switch(sub_100061A90, 0, 0);
}

uint64_t sub_100061A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, *(_QWORD *)(v0 + 80), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD **)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  if (v4 == enum case for OperationTimeoutResult.success<A>(_:))
  {
    (*(void (**)(_QWORD, uint64_t))(v5 + 96))(*(_QWORD *)(v0 + 72), v7);
    v8 = v6[1];
    if (v8)
    {
      v10 = v6[7];
      v9 = v6[8];
      v11 = *(uint64_t **)(v0 + 72);
      v13 = v11[10];
      v12 = v11[11];
      v14 = v11[9];
      v35 = v11[5];
      v37 = v11[6];
      v15 = v11[2];
      v33 = v11[3];
      v34 = v11[4];
      v16 = *v11;
      swift_bridgeObjectRetain(v9);
      sub_10004E2AC(v16, v8, v15, v33, v34, v35, v37, v10, v9, v14, v13, v12);
      if (v9)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
        goto LABEL_12;
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(v0 + 72), v7);
  }
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v17 = *(_QWORD *)(v0 + 32);
  v18 = type metadata accessor for Logger(0);
  sub_100009558(v18, (uint64_t)qword_100148040);
  v19 = swift_bridgeObjectRetain_n(v17, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 56);
  v25 = *(_QWORD *)(v0 + 64);
  v26 = *(_QWORD *)(v0 + 32);
  if (v22)
  {
    v27 = *(_QWORD *)(v0 + 24);
    v38 = *(_QWORD *)(v0 + 56);
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = v23;
    v29 = swift_slowAlloc(32, -1);
    v39 = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain(v26);
    *(_QWORD *)(v0 + 16) = sub_10003A834(v27, v26, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v26, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Timed out attempting to resolve a FaceTime-able handle for contact with identifier: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v36, v38);
  }
  else
  {

    swift_bridgeObjectRelease_n(v26, 2);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  }
  v10 = 0;
  v9 = 0;
  v14 = 0;
LABEL_12:
  v30 = *(_QWORD *)(v0 + 72);
  v31 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v10, v9, v14);
}

uint64_t sub_100061D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  v5 = sub_100008F88(&qword_10013D320);
  v4[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[20] = v6;
  v4[21] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88((uint64_t *)&unk_10013D300);
  v4[22] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[23] = v8;
  v4[24] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013DED0);
  v4[25] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[26] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v11);
  v4[28] = swift_task_alloc(v11);
  return swift_task_switch(sub_100061E5C, 0, 0);
}

uint64_t sub_100061E5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = v0[27];
  v2 = v0[28];
  v3 = v0[25];
  v17 = v0[26];
  v4 = v0[23];
  v5 = (_QWORD *)v0[24];
  v6 = v0[22];
  v7 = v0[17];
  v8 = v0[18];
  v9 = v0[16];
  *v5 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v6);
  v10 = v9 + 16;
  v11 = *(_QWORD *)(v9 + 56);
  v12 = (_QWORD *)swift_task_alloc(48);
  v12[2] = v10;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v11;
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for ContactDetails, v5, sub_100063A60, v12, &type metadata for ContactDetails);
  swift_task_dealloc(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v2, v3);
  v13 = sub_10000CB94(&qword_10013DED8, &qword_10013DED0, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v13);
  v14 = sub_10000CB94(&qword_10013DEE0, &qword_10013D320, (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v0[29] = v14;
  v15 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[30] = v15;
  *v15 = v0;
  v15[1] = sub_100061FCC;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 2, v0[19], v14);
}

uint64_t sub_100061FCC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 240));
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
  else
    return swift_task_switch(sub_10006203C, 0, 0);
}

uint64_t sub_10006203C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_DWORD *)(v0 + 112);
  if (!v2)
  {
    v23 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    *(_QWORD *)v9 = v1;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = v4;
    *(_QWORD *)(v9 + 24) = v3;
    *(_QWORD *)(v9 + 32) = v5;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 48) = v20;
    *(_QWORD *)(v9 + 56) = v22;
    *(_QWORD *)(v9 + 64) = v6;
    *(_QWORD *)(v9 + 72) = v7;
    goto LABEL_5;
  }
  if (v6)
  {
    v23 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 64);
    v21 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    *(_QWORD *)v9 = v1;
    *(_QWORD *)(v9 + 8) = v2;
    *(_QWORD *)(v9 + 16) = v4;
    *(_QWORD *)(v9 + 24) = v3;
    *(_QWORD *)(v9 + 32) = v5;
    *(_QWORD *)(v9 + 40) = v10;
    *(_QWORD *)(v9 + 48) = v19;
    *(_QWORD *)(v9 + 56) = v21;
    *(_QWORD *)(v9 + 64) = v6;
    *(_QWORD *)(v9 + 72) = v18;
LABEL_5:
    *(_QWORD *)(v9 + 80) = v24;
    *(_QWORD *)(v9 + 88) = v23;
    *(_DWORD *)(v9 + 96) = v8;
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(v13, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_10004E2AC(v1, v2, v4, v3, v5, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), 0, v7, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  v17 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 248) = v17;
  *v17 = v0;
  v17[1] = sub_1000621FC;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 232));
}

uint64_t sub_1000621FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 248));
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
  else
    return swift_task_switch(sub_10006203C, 0, 0);
}

uint64_t sub_10006226C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_100008F88(&qword_10013BCC0);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008F88((uint64_t *)&unk_10013DEA8);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100062308, 0, 0);
}

uint64_t sub_100062308()
{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_10001AE98();
  v1 = (void *)static NSUserDefaults.airdrop.getter();
  v2 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v0 + 32);
    v7 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    v8 = (_QWORD *)swift_allocObject(&unk_100126F38, 40, 7);
    *(_QWORD *)(v0 + 88) = v8;
    v8[2] = v3;
    v8[3] = v6;
    v8[4] = v5;
    v9 = async function pointer to withOperationTimeout<A>(_:priority:operation:)[1];
    swift_retain(v3);
    swift_bridgeObjectRetain(v5);
    v10 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 96) = v10;
    v11 = sub_100008F88(&qword_10013DEC8);
    *v10 = v0;
    v10[1] = sub_100062458;
    return withOperationTimeout<A>(_:priority:operation:)(*(_QWORD *)(v0 + 80), 5000000000000000000, 0, *(_QWORD *)(v0 + 48), &unk_10013DEC0, v8, v11);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(0, 0, 0);
  }
}

uint64_t sub_100062458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release(v1);
  sub_10000CC5C(v2, &qword_10013BCC0);
  return swift_task_switch(sub_1000624C8, 0, 0);
}

uint64_t sub_1000624C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, *(_QWORD *)(v0 + 80), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  if (v4 == enum case for OperationTimeoutResult.success<A>(_:))
  {
    (*(void (**)(_QWORD, uint64_t))(v5 + 96))(*(_QWORD *)(v0 + 72), v7);
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v10 = *(_QWORD *)(v6 + 80);
      v9 = *(_QWORD *)(v6 + 88);
      v11 = *(unsigned int *)(v6 + 96);
      v12 = *(uint64_t **)(v0 + 72);
      v14 = v12[8];
      v13 = v12[9];
      v36 = v12[6];
      v38 = v12[7];
      v15 = v12[3];
      v34 = v12[4];
      v35 = v12[5];
      v16 = v12[2];
      v17 = *v12;
      swift_bridgeObjectRetain(v9);
      sub_10004E2AC(v17, v8, v16, v15, v34, v35, v36, v38, v14, v13, v10, v9);
      if (v9)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
        goto LABEL_12;
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(v0 + 72), v7);
  }
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v18 = *(_QWORD *)(v0 + 32);
  v19 = type metadata accessor for Logger(0);
  sub_100009558(v19, (uint64_t)qword_100148040);
  v20 = swift_bridgeObjectRetain_n(v18, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 56);
  v26 = *(_QWORD *)(v0 + 64);
  v27 = *(_QWORD *)(v0 + 32);
  if (v23)
  {
    v28 = *(_QWORD *)(v0 + 24);
    v39 = *(_QWORD *)(v0 + 56);
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = v24;
    v30 = swift_slowAlloc(32, -1);
    v40 = v30;
    *(_DWORD *)v29 = 136315138;
    swift_bridgeObjectRetain(v27);
    *(_QWORD *)(v0 + 16) = sub_10003A834(v28, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v27, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Timed out attempting to resolve a iMessageHandle-able handle for contact with identifier: %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v37, v39);
  }
  else
  {

    swift_bridgeObjectRelease_n(v27, 2);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  }
  v10 = 0;
  v9 = 0;
  v11 = 0;
LABEL_12:
  v31 = *(_QWORD *)(v0 + 72);
  v32 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v10, v9, v11);
}

uint64_t sub_1000627C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  v5 = sub_100008F88(&qword_10013D320);
  v4[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[20] = v6;
  v4[21] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88((uint64_t *)&unk_10013D300);
  v4[22] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[23] = v8;
  v4[24] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013DED0);
  v4[25] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[26] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v11);
  v4[28] = swift_task_alloc(v11);
  return swift_task_switch(sub_100062894, 0, 0);
}

uint64_t sub_100062894()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = v0[27];
  v2 = v0[28];
  v3 = v0[25];
  v17 = v0[26];
  v4 = v0[23];
  v5 = (_QWORD *)v0[24];
  v6 = v0[22];
  v7 = v0[17];
  v8 = v0[18];
  v9 = v0[16];
  *v5 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v6);
  v10 = v9 + 16;
  v11 = *(_QWORD *)(v9 + 56);
  v12 = (_QWORD *)swift_task_alloc(48);
  v12[2] = v10;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v11;
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for ContactDetails, v5, sub_10004E140, v12, &type metadata for ContactDetails);
  swift_task_dealloc(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v2, v3);
  v13 = sub_10000CB94(&qword_10013DED8, &qword_10013DED0, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v13);
  v14 = sub_10000CB94(&qword_10013DEE0, &qword_10013D320, (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v0[29] = v14;
  v15 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[30] = v15;
  *v15 = v0;
  v15[1] = sub_100062A04;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 2, v0[19], v14);
}

uint64_t sub_100062A04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 240));
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
  else
    return swift_task_switch(sub_100062A74, 0, 0);
}

uint64_t sub_100062A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_DWORD *)(v0 + 112);
  if (!v2)
  {
    v23 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    *(_QWORD *)v9 = v1;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = v4;
    *(_QWORD *)(v9 + 24) = v3;
    *(_QWORD *)(v9 + 32) = v5;
    *(_QWORD *)(v9 + 40) = v11;
    *(_QWORD *)(v9 + 48) = v20;
    *(_QWORD *)(v9 + 56) = v22;
    *(_QWORD *)(v9 + 64) = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v23 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 64);
    v21 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    *(_QWORD *)v9 = v1;
    *(_QWORD *)(v9 + 8) = v2;
    *(_QWORD *)(v9 + 16) = v4;
    *(_QWORD *)(v9 + 24) = v3;
    *(_QWORD *)(v9 + 32) = v5;
    *(_QWORD *)(v9 + 40) = v10;
    *(_QWORD *)(v9 + 48) = v19;
    *(_QWORD *)(v9 + 56) = v21;
    *(_QWORD *)(v9 + 64) = v18;
LABEL_5:
    *(_QWORD *)(v9 + 72) = v24;
    *(_QWORD *)(v9 + 80) = v23;
    *(_QWORD *)(v9 + 88) = v7;
    *(_DWORD *)(v9 + 96) = v8;
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(v13, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_10004E2AC(v1, v2, v4, v3, v5, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v6, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), 0);
  v17 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 248) = v17;
  *v17 = v0;
  v17[1] = sub_100062C38;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 232));
}

uint64_t sub_100062C38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 248));
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
  else
    return swift_task_switch(sub_100062A74, 0, 0);
}

uint64_t sub_100062CA8()
{
  uint64_t v0;

  sub_100009070((_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ContactDetailsProvider()
{
  return objc_opt_self(_TtC9AirDropUI22ContactDetailsProvider);
}

uint64_t sub_100062CF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013DEBC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_1000627C4(a1, v4, v5, v6);
}

uint64_t sub_100062D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013DEC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100062DAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[8];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_100062E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;

  v1 = sub_100008F88(&qword_10013DEE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 107) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v6 + 8), v8, v9, v10, v11, v12, v13, v14);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v6 + 24), v15, v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v6 + 40), v22, v23, v24, v25, v26, v27, v28);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v6 + 48), v29, v30, v31, v32, v33, v34, v35);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v6 + 64), v36, v37, v38, v39, v40, v41, v42);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + v6 + 88), v43, v44, v45, v46, v47, v48, v49);

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100062EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_100008F88(&qword_10013DEE8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = v1 + v6;
  v11 = *(_QWORD *)(v1 + ((v6 + 107) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_10013DEFC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000104E4;
  return sub_1000612C8(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_100062FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    return swift_bridgeObjectRetain(a9);
  }
  return result;
}

void sub_100063014()
{
  Task.cancel()();
}

uint64_t sub_100063038(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 96));
  return a1;
}

uint64_t sub_100063094(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_100063134(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100063218(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100063224(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  int v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  char v16;
  char v17;
  char v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  int v49;
  int64_t v50;
  uint64_t v51[2];
  char v52;
  char v53;
  char v54;
  char v55;
  _QWORD v56[2];
  char v57;
  char v58;
  char v59;
  char v60;
  _TtC9AirDropUI33AirDropTransferSessionsController *v61;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = &_swiftEmptyArrayStorage;
  if (!v4)
    return (uint64_t)v5;
  v6 = a1;
  v61 = &_swiftEmptyArrayStorage;
  sub_100011F44(0, v4, 0);
  v5 = &_swiftEmptyArrayStorage;
  result = sub_100063094(v6);
  v8 = result;
  v10 = v9;
  v12 = v11 & 1;
  v45 = v6;
  v46 = v6 + 56;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(v6 + 32))
  {
    if (((*(_QWORD *)(v46 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(v6 + 36) != v10)
      goto LABEL_16;
    v13 = *(_QWORD *)(v6 + 48) + 24 * v8;
    v14 = *(_QWORD *)v13;
    v15 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v13 + 8);
    v16 = *(_BYTE *)(v13 + 16);
    v17 = *(_BYTE *)(v13 + 17);
    v18 = *(_BYTE *)(v13 + 18);
    LOBYTE(v13) = *(_BYTE *)(v13 + 19);
    v51[0] = v14;
    v51[1] = (uint64_t)v15;
    v52 = v16;
    v53 = v17;
    v54 = v18;
    v55 = v13;
    swift_bridgeObjectRetain(v15);
    sub_1000609D4(v51, a2, (uint64_t)v56);
    if (v3)
    {
      swift_release(v5);
      swift_bridgeObjectRelease(v15, v37, v38, v39, v40, v41, v42, v43);
      return (uint64_t)v5;
    }
    v48 = v12;
    v49 = v10;
    v50 = v4;
    swift_bridgeObjectRelease(v15, v19, v20, v21, v22, v23, v24, v25);
    v26 = v56[0];
    v27 = v56[1];
    v28 = v57;
    v29 = v58;
    v30 = v59;
    v31 = v60;
    v61 = v5;
    v33 = *(_QWORD *)v5->connection;
    v32 = *(_QWORD *)v5->airdropClient;
    if (v33 >= v32 >> 1)
    {
      v44 = v57;
      sub_100011F44(v32 > 1, v33 + 1, 1);
      v28 = v44;
      v5 = v61;
    }
    *(_QWORD *)v5->connection = v33 + 1;
    v34 = (char *)v5 + 24 * v33;
    *((_QWORD *)v34 + 4) = v26;
    *((_QWORD *)v34 + 5) = v27;
    v34[48] = v28;
    v34[49] = v29;
    v34[50] = v30;
    v34[51] = v31;
    v6 = v45;
    result = sub_100063134(v8, v49, v48 & 1, v45);
    v8 = result;
    v10 = v35;
    v12 = v36 & 1;
    v3 = 0;
    v4 = v50 - 1;
    if (v50 == 1)
    {
      sub_100063218(result, v35, v36 & 1);
      return (uint64_t)v5;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100063440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013BCC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100063488()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000634AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100141494);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100018F40;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100141490 + dword_100141490))(a1, v4);
}

unint64_t sub_10006351C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013DF18;
  if (!qword_10013DF18)
  {
    v1 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator, v1);
    atomic_store(result, &qword_10013DF18);
  }
  return result;
}

uint64_t sub_100063568()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100063594(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013DF24);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000104E4;
  return sub_100061D8C(a1, v4, v5, v6);
}

void sub_100063600(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  objc_class *v28;
  objc_class *v29;
  const char *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  Class *v39;
  uint64_t v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _TtC9AirDropUI33AirDropTransferSessionsController *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v2 = a1;
  v3 = objc_msgSend(a1, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v82 = v5;
  v83 = v4;

  v6 = objc_msgSend(v2, "givenName");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v80 = v8;
  v81 = v7;

  v9 = objc_msgSend(v2, "displayName");
  if (!v9)
    v9 = objc_msgSend(v2, "givenName");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v78 = v11;

  v12 = objc_msgSend(v2, "emailAddresses");
  v13 = sub_100008F88(&qword_10013DF38);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v40 = v14;
    else
      v40 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v22 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v14, v41, v42, v43, v44, v45, v46, v47);
    v79 = v10;
    if (v22)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v14, v15, v16, v17, v18, v19, v20, v21);
    goto LABEL_19;
  }
  v22 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  v79 = v10;
  if (!v22)
    goto LABEL_18;
LABEL_5:
  sub_100011F44(0, v22 & ~(v22 >> 63), 0);
  if (v22 < 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  v76 = v13;
  v77 = v2;
  v23 = 0;
  do
  {
    if ((v14 & 0xC000000000000001) != 0)
      v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v14);
    else
      v24 = *(id *)(v14 + 8 * v23 + 32);
    v25 = v24;
    v26 = objc_msgSend(v24, "value", v76, v77);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v38 = *(_QWORD *)_swiftEmptyArrayStorage.connection;
    v37 = *(_QWORD *)_swiftEmptyArrayStorage.airdropClient;
    if (v38 >= v37 >> 1)
      sub_100011F44(v37 > 1, v38 + 1, 1);
    ++v23;
    *(_QWORD *)_swiftEmptyArrayStorage.connection = v38 + 1;
    v39 = &_swiftEmptyArrayStorage.super.isa + 3 * v38;
    v39[4] = (Class)v27;
    v39[5] = v29;
    *((_DWORD *)v39 + 12) = 0;
  }
  while (v22 != v23);
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v14, v30, v31, v32, v33, v34, v35, v36);
  v13 = v76;
  v2 = v77;
LABEL_19:
  v48 = objc_msgSend(v2, "phoneNumbers");
  v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v13);

  if (!((unint64_t)v49 >> 62))
  {
    v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v49);
    if (v50)
      goto LABEL_21;
LABEL_38:
    v52 = &_swiftEmptyArrayStorage;
LABEL_39:
    swift_bridgeObjectRelease_n(v49, 2);
    sub_100087BC4(v52);
    v68 = sub_10008F06C((uint64_t)&_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v69, v70, v71, v72, v73, v74, v75);
    *(_QWORD *)a2 = v83;
    *(_QWORD *)(a2 + 8) = v82;
    *(_QWORD *)(a2 + 16) = v81;
    *(_QWORD *)(a2 + 24) = v80;
    *(_QWORD *)(a2 + 32) = v79;
    *(_QWORD *)(a2 + 40) = v78;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = v68;
    *(_DWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_DWORD *)(a2 + 96) = 0;
    return;
  }
  if (v49 < 0)
    v67 = v49;
  else
    v67 = v49 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v49);
  v50 = _CocoaArrayWrapper.endIndex.getter(v67);
  if (!v50)
    goto LABEL_38;
LABEL_21:
  if (v50 >= 1)
  {
    v51 = 0;
    v52 = &_swiftEmptyArrayStorage;
    do
    {
      if ((v49 & 0xC000000000000001) != 0)
        v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v49);
      else
        v53 = *(id *)(v49 + 8 * v51 + 32);
      v54 = v53;
      v55 = objc_msgSend(v53, "value");
      v56 = objc_msgSend(v55, "unformattedInternationalStringValue");

      if (v56)
      {
        v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        v59 = v58;

        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
          v52 = sub_100087AA4(0, *(_QWORD *)v52->connection + 1, 1, v52, v60, v61, v62, v63);
        v65 = *(_QWORD *)v52->connection;
        v64 = *(_QWORD *)v52->airdropClient;
        if (v65 >= v64 >> 1)
          v52 = sub_100087AA4((_TtC9AirDropUI33AirDropTransferSessionsController *)(v64 > 1), v65 + 1, 1, v52, v60, v61, v62, v63);
        *(_QWORD *)v52->connection = v65 + 1;
        v66 = (char *)v52 + 24 * v65;
        *((_QWORD *)v66 + 4) = v57;
        *((_QWORD *)v66 + 5) = v59;
        *((_DWORD *)v66 + 12) = 0;
      }
      else
      {

      }
      ++v51;
    }
    while (v50 != v51);
    goto LABEL_39;
  }
LABEL_41:
  __break(1u);
}

ValueMetadata *type metadata accessor for AirDropModernReadyForOpenView()
{
  return &type metadata for AirDropModernReadyForOpenView;
}

uint64_t sub_100063A74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001139F4, 1);
}

uint64_t sub_100063A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013DF50);
  v1 = sub_100009558(v0, (uint64_t)qword_10013DF50);
  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v2 = sub_100009558(v0, (uint64_t)qword_100148028);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100063B14@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  _TtC9AirDropUI33AirDropTransferSessionsController *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _TtC9AirDropUI33AirDropTransferSessionsController *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;

  v93 = a4;
  v7 = type metadata accessor for TapGesture(0);
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  __chkstk_darwin(v7, v8);
  v87 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_10013DF68);
  v91 = *(_QWORD *)(v10 - 8);
  v92 = v10;
  __chkstk_darwin(v10, v11);
  v90 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013DF70);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013DF78);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008F88(&qword_10013DF80);
  v84 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  v85 = v23;
  v86 = (uint64_t)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v75 - v26;
  if ((a3 & 1) != 0)
  {
    if (qword_10013AC50 != -1)
      swift_once(&qword_10013AC50, sub_10005EFBC);
    v28 = &xmmword_100147E30;
  }
  else
  {
    if (qword_10013AC58 != -1)
      swift_once(&qword_10013AC58, sub_10005EFDC);
    v28 = &xmmword_100147E50;
  }
  v78 = *((_QWORD *)v28 + 3);
  v77 = *((_QWORD *)v28 + 2);
  v30 = v28;
  v29 = *(_QWORD *)v28;
  v76 = *((_QWORD *)v30 + 1);
  v75 = v29;
  v31 = a3 & 1;
  sub_100064004((uint64_t)a2, (uint64_t)&v95);
  v32 = v95;
  v33 = v96;
  v82 = v98;
  v83 = v97;
  v95 = v97;
  v96 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v98;
  v81 = v99;
  v97 = v99;
  v98 = v100;
  v80 = v100;
  v79 = v101;
  LOBYTE(v99) = v101;
  v34 = sub_1000643C4(a1, (uint64_t)a2);
  v35 = sub_100064834((uint64_t)a2, (uint64_t)v27);
  v36 = static VerticalAlignment.center.getter(v35);
  v94 = v27;
  v37 = (char *)a1;
  v38 = v36;
  if (qword_10013ACA0 != -1)
    swift_once(&qword_10013ACA0, sub_10005F078);
  v39 = qword_100147EB0;
  *(_QWORD *)v16 = v38;
  *((_QWORD *)v16 + 1) = v39;
  v16[16] = 0;
  v40 = sub_100008F88(&qword_10013DF88);
  sub_100064D84(v37, a2, v31, v32, (uint64_t)v33, (uint64_t)&v95, (uint64_t)v34, (uint64_t)&v16[*(int *)(v40 + 44)]);
  swift_bridgeObjectRelease(v34, v41, v42, v43, v44, v45, v46, v47);
  swift_bridgeObjectRelease(v33, v48, v49, v50, v51, v52, v53, v54);
  v56 = static Edge.Set.all.getter(v55);
  sub_10000CC18((uint64_t)v16, (uint64_t)v20, &qword_10013DF70);
  v57 = &v20[*(int *)(v17 + 36)];
  *v57 = v56;
  v58 = v76;
  *((_QWORD *)v57 + 1) = v75;
  *((_QWORD *)v57 + 2) = v58;
  v59 = v78;
  *((_QWORD *)v57 + 3) = v77;
  *((_QWORD *)v57 + 4) = v59;
  v57[40] = 0;
  sub_10000CC5C((uint64_t)v16, &qword_10013DF70);
  v60 = v87;
  TapGesture.init(count:)(1);
  v61 = v86;
  sub_10000CC18((uint64_t)v94, v86, &qword_10013DF80);
  v62 = *(unsigned __int8 *)(v84 + 80);
  v63 = (v62 + 33) & ~v62;
  v64 = swift_allocObject(&unk_100127058, v63 + v85, v62 | 7);
  *(_QWORD *)(v64 + 16) = v37;
  *(_QWORD *)(v64 + 24) = a2;
  *(_BYTE *)(v64 + 32) = v31;
  sub_10000CBD4(v61, v64 + v63, &qword_10013DF80);
  swift_retain(a2);
  v66 = v89;
  v65 = v90;
  Gesture.onEnded(_:)(sub_100068460, v64, v89, &protocol witness table for TapGesture);
  v67 = swift_release(v64);
  v68 = (*(uint64_t (**)(char *, uint64_t, __n128))(v88 + 8))(v60, v66, v67);
  v69 = static GestureMask.all.getter(v68);
  v70 = sub_1000684A8();
  v71 = sub_10000CB94(&qword_10013DFA0, &qword_10013DF68, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v72 = v69;
  v73 = v92;
  View.gesture<A>(_:including:)(v65, v72, v17, v92, v70, v71);
  sub_1000432C8(v83, v82, v81, v80, v79);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v65, v73);
  sub_10000CC5C((uint64_t)v20, &qword_10013DF78);
  return sub_10000CC5C((uint64_t)v94, &qword_10013DF80);
}

uint64_t sub_100064004@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  int *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t result;
  char v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4, v5);
  v72 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7, v8);
  v71 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_10013CA68);
  v69 = *(_QWORD *)(v10 - 8);
  v70 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_10013CA70);
  v68 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000EC598);
  v25 = swift_getKeyPath(&unk_1000EC5C0);
  v26 = swift_retain(a1);
  static Published.subscript.getter(v19, v26, KeyPath, v25);
  v73 = a1;
  swift_release(a1);
  swift_release(KeyPath);
  v27 = swift_release(v25);
  if ((*(unsigned int (**)(char *, uint64_t, __n128))(v16 + 88))(v19, v15, v27) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_6:
    v63 = v71;
    v64 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001000F1C60);
    v65 = v72;
    static Locale.current.getter(v64);
    v47 = String.init(localized:table:bundle:locale:comment:)(v63, 0xD000000000000011, 0x80000001000F10B0, 0, v65, 0, 0, 256);
    v48 = v66;
    v50 = *(_QWORD *)(v73 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
    v49 = *(_QWORD *)(v73 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
    result = swift_bridgeObjectRetain(v49);
    v62 = 0;
    v61 = 64;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t))(v16 + 96))(v19, v15);
  v28 = (int *)sub_100008F88(&qword_10013BDE0);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v19[v28[12]], v29, v30, v31, v32, v33, v34, v35);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v19[v28[16]], v36, v37, v38, v39, v40, v41, v42);
  v43 = v68;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v23, &v19[v28[20]], v20);
  v44 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v19, v44);
  SFAirDrop.PermissionRequest.style.getter(v20);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v23, v20);
  v46 = v69;
  v45 = v70;
  if ((*(unsigned int (**)(char *, uint64_t))(v69 + 88))(v13, v70) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v45);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v46 + 96))(v13, v45);
  v47 = *(_QWORD *)v13;
  v48 = *((_QWORD *)v13 + 1);
  v50 = *((_QWORD *)v13 + 2);
  v49 = *((_QWORD *)v13 + 3);
  swift_bridgeObjectRelease(*((_TtC9AirDropUI33AirDropTransferSessionsController **)v13 + 4), v51, v52, v53, v54, v55, v56, v57);
  v58 = &v13[*(int *)(sub_100008F88(&qword_10013CA90) + 80)];
  v59 = type metadata accessor for SFAirDrop.DeclineAction(0);
  result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
  v61 = 0;
  v62 = 1;
LABEL_7:
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v48;
  *(_QWORD *)(a2 + 16) = v50;
  *(_QWORD *)(a2 + 24) = v49;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v62;
  *(_BYTE *)(a2 + 48) = v61;
  return result;
}

_TtC9AirDropUI33AirDropTransferSessionsController *sub_1000643C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  int *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _TtC9AirDropUI33AirDropTransferSessionsController **v44;
  uint64_t v45;
  uint64_t v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  _TtC9AirDropUI33AirDropTransferSessionsController *v61;
  char *v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *result;
  const char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  unint64_t v73;
  _TtC9AirDropUI33AirDropTransferSessionsController *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  _TtC9AirDropUI33AirDropTransferSessionsController *v92;

  v3 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v90 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v89 = (char *)&v85 - v9;
  v88 = sub_100008F88(&qword_10013CA68);
  v86 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88, v10);
  v91 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v12);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char **)((char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_100008F88(&qword_10013CA70);
  v87 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000EC598);
  v23 = swift_getKeyPath(&unk_1000EC5C0);
  v24 = swift_retain(a2);
  static Published.subscript.getter(v17, v24, KeyPath, v23);
  swift_release(a2);
  swift_release(KeyPath);
  v25 = swift_release(v23);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, __n128))(v14 + 88))(v17, v13, v25) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
    return &_swiftEmptyArrayStorage;
  }
  (*(void (**)(_QWORD *, uint64_t))(v14 + 96))(v17, v13);
  v26 = (int *)sub_100008F88(&qword_10013BDE0);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)v17 + v26[12]), v27, v28, v29, v30, v31, v32, v33);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)v17 + v26[16]), v34, v35, v36, v37, v38, v39, v40);
  v41 = (char *)v17 + v26[20];
  v42 = v87;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v21, v41, v18);
  v43 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v17, v43);
  v44 = (_TtC9AirDropUI33AirDropTransferSessionsController **)v91;
  SFAirDrop.PermissionRequest.style.getter(v18);
  v45 = v86;
  v46 = v88;
  if ((*(unsigned int (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v86 + 88))(v44, v88) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v18);
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v45 + 8))(v44, v46);
    return &_swiftEmptyArrayStorage;
  }
  (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))(v45 + 96))(v44, v46);
  swift_bridgeObjectRelease(v44[1], v47, v48, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease(v44[3], v54, v55, v56, v57, v58, v59, v60);
  v61 = v44[4];
  v62 = (char *)v44 + *(int *)(sub_100008F88(&qword_10013CA90) + 80);
  v63 = type metadata accessor for SFAirDrop.DeclineAction(0);
  result = (_TtC9AirDropUI33AirDropTransferSessionsController *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v62, v63);
  v72 = &_swiftEmptyArrayStorage;
  v91 = *(char **)v61->connection;
  v92 = &_swiftEmptyArrayStorage;
  if (!v91)
  {
LABEL_18:
    swift_bridgeObjectRelease(v61, v65, v66, v67, v68, v69, v70, v71);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v18);
    return v72;
  }
  v85 = v21;
  v86 = v18;
  v73 = 0;
  v74 = &_swiftEmptyArrayStorage;
  v75 = v89;
  v76 = v90;
  v88 = (uint64_t)v61;
  while (v73 < *(_QWORD *)v61->connection)
  {
    v77 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v78 = *(_QWORD *)(v4 + 72);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v75, (char *)v61 + v77 + v78 * v73, v3);
    if ((SFAirDrop.AcceptAction.hidden.getter(v3) & 1) != 0)
    {
      result = (_TtC9AirDropUI33AirDropTransferSessionsController *)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v75, v3);
    }
    else
    {
      v79 = v4;
      v80 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v81 = v3;
      v80(v76, v75, v3);
      if ((swift_isUniquelyReferenced_nonNull_native(v74) & 1) == 0)
        sub_100011EB8(0, *(_QWORD *)v74->connection + 1, 1);
      v74 = v92;
      v83 = *(_QWORD *)v92->connection;
      v82 = *(_QWORD *)v92->airdropClient;
      if (v83 >= v82 >> 1)
      {
        sub_100011EB8(v82 > 1, v83 + 1, 1);
        v74 = v92;
      }
      *(_QWORD *)v74->connection = v83 + 1;
      v84 = (char *)v74 + v77 + v83 * v78;
      v76 = v90;
      v3 = v81;
      result = (_TtC9AirDropUI33AirDropTransferSessionsController *)((uint64_t (*)(char *, char *, uint64_t))v80)(v84, v90, v81);
      v4 = v79;
      v61 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v88;
      v75 = v89;
    }
    if (v91 == (char *)++v73)
    {
      v72 = v92;
      v18 = v86;
      v42 = v87;
      v21 = v85;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100064834@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  int *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _TtC9AirDropUI33AirDropTransferSessionsController **v47;
  uint64_t v48;
  _TtC9AirDropUI33AirDropTransferSessionsController *v49;
  uint64_t v50;
  char *v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  _TtC9AirDropUI33AirDropTransferSessionsController *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  const char *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  const char *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  uint64_t v101;
  const char *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;

  v119 = a2;
  v3 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v4 = *(_QWORD *)(v3 - 8);
  v124 = v3;
  v125 = v4;
  __chkstk_darwin(v3, v5);
  v123 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013CA50);
  v120 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  __chkstk_darwin(v7, v8);
  v122 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_10013DF80);
  __chkstk_darwin(v10, v11);
  v117 = (uint64_t)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013CA68);
  v114 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v13 - 8);
  v115 = v13;
  __chkstk_darwin(v13, v14);
  v116 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008F88(&qword_10013CA70);
  v118 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000EC598);
  v27 = swift_getKeyPath(&unk_1000EC5C0);
  v28 = swift_retain(a1);
  static Published.subscript.getter(v21, v28, KeyPath, v27);
  swift_release(a1);
  swift_release(KeyPath);
  v29 = swift_release(v27);
  if ((*(unsigned int (**)(char *, uint64_t, __n128))(v18 + 88))(v21, v17, v29) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v119, 1, 1, v121);
  }
  (*(void (**)(char *, uint64_t))(v18 + 96))(v21, v17);
  v30 = (int *)sub_100008F88(&qword_10013BDE0);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v21[v30[12]], v31, v32, v33, v34, v35, v36, v37);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v21[v30[16]], v38, v39, v40, v41, v42, v43, v44);
  v45 = v118;
  (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v25, &v21[v30[20]], v22);
  v46 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v21, v46);
  v47 = (_TtC9AirDropUI33AirDropTransferSessionsController **)v116;
  SFAirDrop.PermissionRequest.style.getter(v22);
  v49 = v114;
  v48 = v115;
  v50 = v45;
  v51 = v25;
  if ((*(unsigned int (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))v114->appCornerIconProvider)(v47, v115) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v22);
    (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))v49->listener)(v47, v48);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v119, 1, 1, v121);
  }
  (*(void (**)(_TtC9AirDropUI33AirDropTransferSessionsController **, uint64_t))v49->transfersBeingEnded)(v47, v48);
  swift_bridgeObjectRelease(v47[1], v52, v53, v54, v55, v56, v57, v58);
  swift_bridgeObjectRelease(v47[3], v59, v60, v61, v62, v63, v64, v65);
  v66 = v47[4];
  v67 = (char *)v47 + *(int *)(sub_100008F88(&qword_10013CA90) + 80);
  v68 = type metadata accessor for SFAirDrop.DeclineAction(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v67, v68);
  v70 = v120;
  v69 = v121;
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56);
  v71(v117, 1, 1, v121);
  v79 = *(_QWORD *)v66->connection;
  if (v79)
  {
    v113 = v71;
    v115 = (uint64_t)v51;
    v116 = (char *)v22;
    v81 = v124;
    v80 = v125;
    v82 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
    v114 = v66;
    v83 = (char *)v66 + v82;
    v84 = enum case for SFAirDrop.AcceptAction.single<A>(_:);
    v85 = *(_QWORD *)(v125 + 72);
    v86 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
    v87 = v123;
    v86(v123, v83, v124);
    while (1)
    {
      if ((*(unsigned int (**)(char *, uint64_t))(v80 + 88))(v87, v81) == v84)
      {
        (*(void (**)(char *, uint64_t))(v80 + 96))(v87, v81);
        v95 = sub_100008F88(&qword_10013CA98);
        v96 = v69;
        v97 = v87;
        v98 = &v87[*(int *)(v95 + 48)];
        v99 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
        v100 = v122;
        v99(v122, v97, v96);
        v101 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v101 - 8) + 8))(v98, v101);
        if ((SFAirDrop.AcceptAction.Single.hidden.getter(v96) & 1) != 0)
        {
          swift_bridgeObjectRelease(v114, v102, v103, v104, v105, v106, v107, v108);
          v111 = v117;
          sub_10000CC5C(v117, &qword_10013DF80);
          (*(void (**)(uint64_t, char *))(v118 + 8))(v115, v116);
          v99((char *)v111, v100, v96);
          v113(v111, 0, 1, v96);
          v110 = v119;
          return sub_10000CBD4(v117, v110, &qword_10013DF80);
        }
        (*(void (**)(char *, uint64_t))(v70 + 8))(v100, v96);
        v69 = v96;
        v81 = v124;
        v80 = v125;
        v87 = v123;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v80 + 8))(v87, v81);
      }
      v83 += v85;
      if (!--v79)
      {
        swift_bridgeObjectRelease(v114, v88, v89, v90, v91, v92, v93, v94);
        v50 = v118;
        v110 = v119;
        v51 = (char *)v115;
        v22 = (uint64_t)v116;
        goto LABEL_16;
      }
      v86(v87, v83, v81);
    }
  }
  swift_bridgeObjectRelease(v66, v72, v73, v74, v75, v76, v77, v78);
  v110 = v119;
LABEL_16:
  (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v22);
  return sub_10000CBD4(v117, v110, &qword_10013DF80);
}

uint64_t sub_100064D84@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  __n128 v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  double (*v94)(char *, uint64_t, uint64_t, __n128);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  _OWORD v101[3];

  v87 = a7;
  v96 = a5;
  v97 = a6;
  v95 = a4;
  v99 = a1;
  v93 = a8;
  v10 = sub_100008F88(&qword_10013DFB8);
  __chkstk_darwin(v10, v11);
  v86 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013DFC0);
  v88 = *(_QWORD *)(v13 - 8);
  v89 = v13;
  __chkstk_darwin(v13, v14);
  v85 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88(&qword_10013DFC8);
  __chkstk_darwin(v16, v17);
  v92 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v91 = (char *)&v84 - v21;
  v22 = sub_100008F88(&qword_10013CFA8);
  __chkstk_darwin(v22, v23);
  v90 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  v100 = (uint64_t *)((char *)&v84 - v27);
  v28 = type metadata accessor for DeviceLockState(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  v32 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v84 - v35;
  KeyPath = swift_getKeyPath(&unk_1000EC550);
  v38 = swift_getKeyPath(&unk_1000EC578);
  v39 = swift_retain(a2);
  static Published.subscript.getter(v36, v39, KeyPath, v38);
  swift_release(a2);
  swift_release(KeyPath);
  v40 = swift_release(v38);
  v41 = enum case for DeviceLockState.unlocked(_:);
  v94 = *(double (**)(char *, uint64_t, uint64_t, __n128))(v29 + 104);
  v42.n128_f64[0] = v94(v32, enum case for DeviceLockState.unlocked(_:), v28, v40);
  v43 = static DeviceLockState.== infix(_:_:)(v36, v32, v42);
  v44 = *(void (**)(char *, uint64_t))(v29 + 8);
  v44(v32, v28);
  v44(v36, v28);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if ((v43 & 1) != 0)
  {
    v48 = type metadata accessor for AirDropTransferSession(0);
    v49 = sub_1000469E0();
    v50 = swift_retain(a2);
    v45 = ObservedObject.init(wrappedValue:)(v50, v48, v49);
    v46 = v51;
    v47 = a3 & 1;
  }
  v98 = v45;
  v52 = static HorizontalAlignment.leading.getter();
  v53 = v100;
  *v100 = v52;
  v53[1] = 0;
  *((_BYTE *)v53 + 16) = 0;
  v54 = (uint64_t)v53 + *(int *)(sub_100008F88(&qword_10013CFB0) + 44);
  v84 = a3;
  sub_10006536C(a3 & 1, v95, v96, v97, v54);
  v55 = swift_getKeyPath(&unk_1000EC550);
  v56 = swift_getKeyPath(&unk_1000EC578);
  v57 = swift_retain(a2);
  static Published.subscript.getter(v36, v57, v55, v56);
  swift_release(a2);
  swift_release(v55);
  v58 = swift_release(v56);
  v59.n128_f64[0] = v94(v32, v41, v28, v58);
  v60 = static DeviceLockState.== infix(_:_:)(v36, v32, v59);
  v44(v32, v28);
  v44(v36, v28);
  if ((v60 & 1) != 0)
  {
    v61 = v87;
    v62 = v88;
    v64 = (uint64_t)v92;
    v63 = v93;
    if (*(_QWORD *)(v87 + 16))
    {
      v65 = v92;
      v66 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88((uint64_t *)&unk_10013BD10) - 8) + 80);
      v67 = v86;
      v68 = sub_100065694(v61 + ((v66 + 32) & ~v66), 1, v99, a2, v84 & 1, v86);
      v69 = (uint64_t)v91;
      v70 = v89;
      if (qword_10013AC98 != -1)
        v68 = swift_once(&qword_10013AC98, sub_10005F068);
      v71 = qword_100147EA8;
      v72 = static Alignment.center.getter(v68);
      _FrameLayout.init(width:height:alignment:)(v101, v71, 0, v71, 0, v72, v73);
      v74 = v85;
      sub_10000CC18(v67, v85, &qword_10013DFB8);
      v75 = (_OWORD *)(v74 + *(int *)(v70 + 36));
      v76 = v101[1];
      *v75 = v101[0];
      v75[1] = v76;
      v75[2] = v101[2];
      sub_10000CC5C(v67, &qword_10013DFB8);
      sub_10000CBD4(v74, v69, &qword_10013DFC0);
      v77 = 0;
      v78 = (uint64_t)v90;
      v64 = (uint64_t)v65;
    }
    else
    {
      v77 = 1;
      v78 = (uint64_t)v90;
      v69 = (uint64_t)v91;
      v70 = v89;
    }
  }
  else
  {
    v77 = 1;
    v64 = (uint64_t)v92;
    v63 = v93;
    v78 = (uint64_t)v90;
    v69 = (uint64_t)v91;
    v62 = v88;
    v70 = v89;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v69, v77, 1, v70);
  v79 = v100;
  sub_10000CC18((uint64_t)v100, v78, &qword_10013CFA8);
  sub_10000CC18(v69, v64, &qword_10013DFC8);
  v80 = v64;
  v81 = v98;
  *(_QWORD *)v63 = v98;
  *(_QWORD *)(v63 + 8) = v46;
  *(_QWORD *)(v63 + 24) = 0;
  *(_QWORD *)(v63 + 32) = 0;
  *(_QWORD *)(v63 + 16) = v47;
  *(_BYTE *)(v63 + 40) = 0;
  v82 = sub_100008F88(&qword_10013DFD0);
  sub_10000CC18(v78, v63 + *(int *)(v82 + 48), &qword_10013CFA8);
  sub_10000CC18(v80, v63 + *(int *)(v82 + 64), &qword_10013DFC8);
  sub_1000468E0(v81, v46, v47, 0, 0);
  sub_10000CC5C(v69, &qword_10013DFC8);
  sub_10000CC5C((uint64_t)v79, &qword_10013CFA8);
  sub_10000CC5C(v80, &qword_10013DFC8);
  sub_10000CC5C(v78, &qword_10013CFA8);
  return sub_100046990(v81, v46, v47, 0, 0);
}

uint64_t sub_10006536C@<X0>(int a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;

  v52 = a3;
  v53 = a4;
  v51 = a2;
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AirDropDescriptionView(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88((uint64_t *)&unk_100140F90);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20, v21);
  v25 = (char *)&v45 - v24;
  v55 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v54 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_10013AC30 != -1)
      v22 = swift_once(&qword_10013AC30, sub_10005EF78);
    v32 = qword_100147E10;
    v33 = static Alignment.center.getter(v22);
    v55 = 1;
    _FrameLayout.init(width:height:alignment:)(&v57, 0, 1, v32, 0, v33, v34);
    v26 = v57;
    v27 = v58;
    v28 = v59;
    v29 = v60;
    v30 = v61;
    v31 = v62;
  }
  v46 = v28;
  v47 = v29;
  v48 = v30;
  v49 = v31;
  v50 = v26;
  v56 = 0x402C000000000000;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, enum case for Font.TextStyle.subheadline(_:), v7, v23);
  v35 = v53;
  sub_100069128(v53);
  v36 = sub_100043B68();
  v37 = v52;
  swift_bridgeObjectRetain(v52);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v56, v11, &type metadata for CGFloat, v36);
  v38 = &v15[*(int *)(v12 + 20)];
  *(_QWORD *)v38 = v51;
  *((_QWORD *)v38 + 1) = v37;
  v39 = sub_100046A7C(v35, (uint64_t)&v15[*(int *)(v12 + 24)]);
  v40 = static Alignment.leading.getter(v39);
  sub_1000BFDC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v40, v41);
  sub_100045340((uint64_t)v15);
  sub_10000CBD4((uint64_t)v19, (uint64_t)v25, (uint64_t *)&unk_100140F90);
  sub_10000CC18((uint64_t)v25, (uint64_t)v19, (uint64_t *)&unk_100140F90);
  v42 = v55;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = v42;
  *(_QWORD *)(a5 + 16) = v50;
  *(_QWORD *)(a5 + 24) = v27;
  *(_QWORD *)(a5 + 32) = v46;
  *(_QWORD *)(a5 + 40) = v47;
  *(_QWORD *)(a5 + 48) = v48;
  *(_QWORD *)(a5 + 56) = v49;
  *(_BYTE *)(a5 + 64) = (v54 & 1) == 0;
  v43 = sub_100008F88(&qword_10013CFD8);
  sub_10000CC18((uint64_t)v19, a5 + *(int *)(v43 + 48), (uint64_t *)&unk_100140F90);
  sub_10000CC5C((uint64_t)v25, (uint64_t *)&unk_100140F90);
  return sub_10000CC5C((uint64_t)v19, (uint64_t *)&unk_100140F90);
}

uint64_t sub_100065694@<X0>(uint64_t a1@<X0>, int a2@<W1>, char *a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  char *v66;
  int v67;
  char v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t OpaqueTypeConformance2;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  char *v81;
  char v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  _OWORD *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t result;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  int v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  ValueMetadata *v213;
  unint64_t v214;
  unint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;

  v205 = a5;
  v202 = a4;
  v201 = a3;
  v200 = a2;
  v199 = a1;
  v210 = a6;
  v196 = sub_100008F88(&qword_10013DFD8);
  __chkstk_darwin(v196, v6);
  v181 = (uint64_t)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100008F88(&qword_10013DFE0);
  v183 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197, v8);
  v180 = (char *)&v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v182 = (char *)&v167 - v12;
  v192 = sub_100008F88(&qword_10013DFE8);
  __chkstk_darwin(v192, v13);
  v194 = (char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100008F88(&qword_10013DFF0);
  __chkstk_darwin(v191, v15);
  v178 = (uint64_t)&v167 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v172 = (uint64_t)&v167 - v19;
  v193 = sub_100008F88(&qword_10013DFF8);
  v176 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193, v20);
  v171 = (char *)&v167 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v175 = (char *)&v167 - v24;
  v209 = sub_100008F88(&qword_10013E000);
  __chkstk_darwin(v209, v25);
  v195 = (char *)&v167 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100008F88(&qword_10013E008);
  v203 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204, v27);
  v198 = (char *)&v167 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_100008F88(&qword_10013E010);
  __chkstk_darwin(v207, v29);
  v208 = (uint64_t)&v167 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100008F88(&qword_10013E018);
  __chkstk_darwin(v189, v31);
  v174 = (char *)&v167 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100008F88(&qword_10013E020);
  v179 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190, v33);
  v173 = (char *)&v167 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v36);
  v177 = (char *)&v167 - v37;
  v185 = sub_100008F88(&qword_10013E028);
  __chkstk_darwin(v185, v38);
  v187 = (char *)&v167 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100008F88(&qword_10013E030);
  __chkstk_darwin(v184, v40);
  v170 = (uint64_t)&v167 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  v45 = (char *)&v167 - v44;
  v186 = sub_100008F88(&qword_10013E038);
  v46 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186, v47);
  v49 = (char *)&v167 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v51);
  v53 = (char *)&v167 - v52;
  v206 = sub_100008F88(&qword_10013E040);
  __chkstk_darwin(v206, v54);
  v188 = (char *)&v167 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100008F88(&qword_10013CA50);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56, v58);
  v60 = (char *)&v167 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v62 = *(_QWORD *)(v61 - 8);
  v64 = __chkstk_darwin(v61, v63);
  v66 = (char *)&v167 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v62 + 16))(v66, v199, v61, v64);
  v67 = (*(uint64_t (**)(char *, uint64_t))(v62 + 88))(v66, v61);
  v211 = v66;
  if (v67 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v66, v61);
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v60, v66, v56);
    v168 = v60;
    v169 = v56;
    v167 = v57;
    if ((v200 & 1) != 0)
    {
      v68 = v205;
      sub_100066A98((uint64_t)v60, (uint64_t)v201, (uint64_t)v202, v205 & 1, (uint64_t)v45);
      v69 = (v68 & 1) == 0;
      if (qword_10013AC98 != -1)
        swift_once(&qword_10013AC98, sub_10005F068);
      *(_QWORD *)&v216 = qword_100147EA8;
      BYTE8(v216) = v69;
      v70 = sub_100068C04();
      v71 = sub_100068AB4();
      v72 = v184;
      View.buttonStyle<A>(_:)(&v216, v184, &type metadata for AirDropUIButtonStyle, v70, v71);
      sub_10000CC5C((uint64_t)v45, &qword_10013E030);
      v73 = v186;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v53, v49, v186);
      v74 = v187;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v187, v53, v73);
      swift_storeEnumTagMultiPayload(v74, v185, 0);
      *(_QWORD *)&v216 = v72;
      *((_QWORD *)&v216 + 1) = &type metadata for AirDropUIButtonStyle;
      *(_QWORD *)&v217 = v70;
      *((_QWORD *)&v217 + 1) = v71;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v76 = sub_100068920(&qword_10013E0E8, &qword_10013E018, (void (*)(void))sub_100068C04);
      *(_QWORD *)&v216 = v189;
      *((_QWORD *)&v216 + 1) = &type metadata for AirDropUIButtonStyle;
      *(_QWORD *)&v217 = v76;
      *((_QWORD *)&v217 + 1) = v71;
      v77 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v78 = (uint64_t)v188;
      _ConditionalContent<>.init(storage:)(v74, v73, v190, OpaqueTypeConformance2, v77);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v73);
    }
    else
    {
      v98 = v205;
      v99 = v170;
      v100 = sub_100066A98((uint64_t)v60, (uint64_t)v201, (uint64_t)v202, v205 & 1, v170);
      if (qword_10013AC48 != -1)
        v100 = swift_once(&qword_10013AC48, sub_10005EFA8);
      v101 = *(double *)&qword_100147E28;
      v102 = static Alignment.center.getter(v100);
      v103 = v102;
      v105 = v104;
      v106 = v189;
      v107 = (uint64_t)v174;
      if (v101 > INFINITY)
      {
        v108 = static os_log_type_t.fault.getter(v102);
        v109 = (void *)static Log.runtimeIssuesLog.getter();
        os_log(_:dso:log:_:_:)(v108, &_mh_execute_header, v109, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

      }
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v216, *(_QWORD *)&v101, 0, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0, 1, v103, v105);
      sub_10000CC18(v99, v107, &qword_10013E030);
      v110 = (_OWORD *)(v107 + *(int *)(v106 + 36));
      v111 = v221;
      v110[4] = v220;
      v110[5] = v111;
      v110[6] = v222;
      v112 = v217;
      *v110 = v216;
      v110[1] = v112;
      v113 = v219;
      v110[2] = v218;
      v110[3] = v113;
      sub_10000CC5C(v99, &qword_10013E030);
      if ((v98 & 1) != 0)
        v114 = (SFAirDrop.AcceptAction.Single.prominent.getter(v169) & 1) == 0;
      else
        v114 = 3;
      v212 = v114;
      LOBYTE(v213) = 2;
      v148 = sub_100068920(&qword_10013E0E8, &qword_10013E018, (void (*)(void))sub_100068C04);
      v149 = sub_100068AB4();
      v150 = v173;
      View.buttonStyle<A>(_:)(&v212, v106, &type metadata for AirDropUIButtonStyle, v148, v149);
      sub_10000CC5C(v107, &qword_10013E018);
      v151 = v179;
      v152 = v177;
      v153 = v150;
      v154 = v190;
      (*(void (**)(char *, char *, uint64_t))(v179 + 32))(v177, v153, v190);
      v155 = v187;
      (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v187, v152, v154);
      swift_storeEnumTagMultiPayload(v155, v185, 1);
      v156 = sub_100068C04();
      v212 = v184;
      v213 = &type metadata for AirDropUIButtonStyle;
      v214 = v156;
      v215 = v149;
      v157 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v212 = v106;
      v213 = &type metadata for AirDropUIButtonStyle;
      v214 = v148;
      v215 = v149;
      v158 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v78 = (uint64_t)v188;
      _ConditionalContent<>.init(storage:)(v155, v186, v154, v157, v158);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v152, v154);
    }
    v159 = v167;
    v160 = v169;
    v161 = sub_100008F88(&qword_10013CA98);
    v144 = &v211[*(int *)(v161 + 48)];
    v162 = v208;
    sub_10000CC18(v78, v208, &qword_10013E040);
    swift_storeEnumTagMultiPayload(v162, v207, 0);
    v163 = sub_100068AF8();
    v164 = sub_100068D2C();
    _ConditionalContent<>.init(storage:)(v162, v206, v209, v163, v164);
    sub_10000CC5C(v78, &qword_10013E040);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v168, v160);
LABEL_28:
    v165 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v165 - 8) + 8))(v144, v165);
  }
  v79 = v200;
  if (v67 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    v80 = v211;
    (*(void (**)(char *, uint64_t))(v62 + 96))(v211, v61);
    v81 = v198;
    (*(void (**)(char *, char *, uint64_t))(v203 + 32))(v198, v80, v204);
    v82 = v205;
    v83 = v205 & 1;
    if ((v79 & 1) != 0)
    {
      v84 = v172;
      sub_1000672C0(v81, v201, v202, v83, v172);
      if (qword_10013AC98 != -1)
        swift_once(&qword_10013AC98, sub_10005F068);
      *(_QWORD *)&v216 = qword_100147EA8;
      BYTE8(v216) = (v82 & 1) == 0;
      v85 = sub_10006898C();
      v86 = sub_100068AB4();
      v87 = v171;
      v88 = v191;
      View.buttonStyle<A>(_:)(&v216, v191, &type metadata for AirDropUIButtonStyle, v85, v86);
      sub_10000CC5C(v84, &qword_10013DFF0);
      v89 = v176;
      v90 = v175;
      v91 = v87;
      v92 = v193;
      (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v175, v91, v193);
      v93 = v194;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v194, v90, v92);
      swift_storeEnumTagMultiPayload(v93, v192, 0);
      *(_QWORD *)&v216 = v88;
      *((_QWORD *)&v216 + 1) = &type metadata for AirDropUIButtonStyle;
      *(_QWORD *)&v217 = v85;
      *((_QWORD *)&v217 + 1) = v86;
      v94 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v95 = sub_100068920(&qword_10013E048, &qword_10013DFD8, (void (*)(void))sub_10006898C);
      *(_QWORD *)&v216 = v196;
      *((_QWORD *)&v216 + 1) = &type metadata for AirDropUIButtonStyle;
      *(_QWORD *)&v217 = v95;
      *((_QWORD *)&v217 + 1) = v86;
      v96 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v97 = (uint64_t)v195;
      _ConditionalContent<>.init(storage:)(v93, v92, v197, v94, v96);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v92);
    }
    else
    {
      v115 = v178;
      v116 = sub_1000672C0(v81, v201, v202, v83, v178);
      if (qword_10013AC48 != -1)
        v116 = swift_once(&qword_10013AC48, sub_10005EFA8);
      v117 = *(double *)&qword_100147E28;
      v118 = static Alignment.center.getter(v116);
      v119 = v118;
      v121 = v120;
      if (v117 > INFINITY)
      {
        v122 = static os_log_type_t.fault.getter(v118);
        v123 = (void *)static Log.runtimeIssuesLog.getter();
        os_log(_:dso:log:_:_:)(v122, &_mh_execute_header, v123, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

      }
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v216, *(_QWORD *)&v117, 0, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0, 1, v119, v121);
      v124 = v181;
      sub_10000CC18(v115, v181, &qword_10013DFF0);
      v125 = v196;
      v126 = (_OWORD *)(v124 + *(int *)(v196 + 36));
      v127 = v221;
      v126[4] = v220;
      v126[5] = v127;
      v126[6] = v222;
      v128 = v217;
      *v126 = v216;
      v126[1] = v128;
      v129 = v219;
      v126[2] = v218;
      v126[3] = v129;
      sub_10000CC5C(v115, &qword_10013DFF0);
      v130 = 3;
      if ((v82 & 1) != 0)
        v130 = 1;
      v212 = v130;
      LOBYTE(v213) = 2;
      v131 = sub_100068920(&qword_10013E048, &qword_10013DFD8, (void (*)(void))sub_10006898C);
      v132 = sub_100068AB4();
      v133 = v180;
      View.buttonStyle<A>(_:)(&v212, v125, &type metadata for AirDropUIButtonStyle, v131, v132);
      sub_10000CC5C(v124, &qword_10013DFD8);
      v134 = v183;
      v135 = v182;
      v136 = v133;
      v137 = v197;
      (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v182, v136, v197);
      v138 = v194;
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v194, v135, v137);
      swift_storeEnumTagMultiPayload(v138, v192, 1);
      v139 = sub_10006898C();
      v212 = v191;
      v213 = &type metadata for AirDropUIButtonStyle;
      v214 = v139;
      v215 = v132;
      v140 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v212 = v125;
      v213 = &type metadata for AirDropUIButtonStyle;
      v214 = v131;
      v215 = v132;
      v141 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v97 = (uint64_t)v195;
      _ConditionalContent<>.init(storage:)(v138, v193, v137, v140, v141);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v137);
      v81 = v198;
    }
    v142 = v211;
    v143 = v204;
    v144 = &v142[*(int *)(sub_100008F88(&qword_10013E0A0) + 48)];
    v145 = v208;
    sub_10000CC18(v97, v208, &qword_10013E000);
    swift_storeEnumTagMultiPayload(v145, v207, 1);
    v146 = sub_100068AF8();
    v147 = sub_100068D2C();
    _ConditionalContent<>.init(storage:)(v145, v206, v209, v146, v147);
    sub_10000CC5C(v97, &qword_10013E000);
    (*(void (**)(char *, uint64_t))(v203 + 8))(v81, v143);
    goto LABEL_28;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v61, v61);
  __break(1u);
  return result;
}

uint64_t sub_1000667C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  void (*v28)(char *, uint64_t);
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char *v36;
  uint64_t v37;

  v37 = a5;
  v6 = sub_100008F88(&qword_10013DF80);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_10013CA50);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v36 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v22 = (char **)((char *)&v36 - v21);
  KeyPath = swift_getKeyPath(&unk_1000EC550);
  v24 = swift_getKeyPath(&unk_1000EC578);
  v25 = swift_retain(a3);
  static Published.subscript.getter(v22, v25, KeyPath, v24);
  swift_release(a3);
  swift_release(KeyPath);
  v26 = swift_release(v24);
  v27.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DeviceLockState.unlocked(_:), v14, v26);
  LOBYTE(a3) = static DeviceLockState.== infix(_:_:)(v22, v18, v27);
  v28 = *(void (**)(char *, uint64_t))(v15 + 8);
  v28(v18, v14);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v28)(v22, v14);
  if ((a3 & 1) != 0)
  {
    sub_10000CC18(v37, (uint64_t)v9, &qword_10013DF80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      return sub_10000CC5C((uint64_t)v9, &qword_10013DF80);
    }
    else
    {
      v30 = (uint64_t)v36;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v9, v10);
      if (qword_10013AD20 != -1)
        swift_once(&qword_10013AD20, sub_100063A84);
      v31 = type metadata accessor for Logger(0);
      v32 = sub_100009558(v31, (uint64_t)qword_10013DF50);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Post-AirDrop ReadyForOpen view tapped", v35, 2u);
        swift_slowDealloc(v35, -1, -1);
      }

      sub_100068534(v30);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v30, v10);
    }
  }
  return result;
}

uint64_t sub_100066A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  _TtC9AirDropUI33AirDropTransferSessionsController *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _TtC9AirDropUI33AirDropTransferSessionsController *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _TtC9AirDropUI33AirDropTransferSessionsController *v82;
  uint64_t v83;
  _TtC9AirDropUI33AirDropTransferSessionsController *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  SEL v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  SEL v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v125 = a4;
  v122 = a3;
  v124 = a2;
  v130 = a5;
  v126 = sub_100008F88(&qword_10013E0E0);
  v116 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126, v6);
  v114 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100008F88(&qword_10013E0D0);
  v117 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123, v8);
  v115 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100008F88(&qword_10013E0F8);
  __chkstk_darwin(v127, v10);
  v129 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100008F88(&qword_10013E100);
  __chkstk_darwin(v120, v12);
  v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100008F88(&qword_10013E0C0);
  __chkstk_darwin(v128, v15);
  v121 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013CA50);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17, v20);
  v21 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008F88(&qword_100140040);
  v119 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22, v23);
  v118 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SFAirDrop.ButtonConfiguration(0, v24);
  v27 = *(_QWORD *)(v26 - 8);
  v29 = __chkstk_darwin(v26, v28);
  v31 = (uint64_t *)((char *)&v113 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  SFAirDrop.AcceptAction.Single.buttonConfiguration.getter(v17, v29);
  v32 = (*(uint64_t (**)(uint64_t *, uint64_t))(v27 + 88))(v31, v26);
  if (v32 == enum case for SFAirDrop.ButtonConfiguration.text(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v31, v26);
    v33 = *v31;
    v34 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v31[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17);
    v35 = *(unsigned __int8 *)(v18 + 80);
    v36 = (v35 + 33) & ~v35;
    v37 = swift_allocObject(&unk_1001270F8, v36 + v19, v35 | 7);
    v38 = v122;
    *(_QWORD *)(v37 + 16) = v124;
    *(_QWORD *)(v37 + 24) = v38;
    *(_BYTE *)(v37 + 32) = v125 & 1;
    v39 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v37 + v36, v21, v17);
    __chkstk_darwin(v39, v40);
    *(&v113 - 2) = v33;
    *(&v113 - 1) = (uint64_t)v34;
    swift_retain(v38);
    v41 = v118;
    Button.init(action:label:)(sub_100068E3C, v37, sub_100068E68, &v113 - 4, &type metadata for Text, &protocol witness table for Text);
    swift_bridgeObjectRelease(v34, v42, v43, v44, v45, v46, v47, v48);
    v49 = v119;
    (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v14, v41, v22);
    swift_storeEnumTagMultiPayload(v14, v120, 0);
    v50 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v51 = sub_10000CB94(&qword_10013E0C8, &qword_10013E0D0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v52 = (uint64_t)v121;
    _ConditionalContent<>.init(storage:)(v14, v22, v123, v50, v51);
    v53 = v129;
    sub_10000CC18(v52, v129, &qword_10013E0C0);
    swift_storeEnumTagMultiPayload(v53, v127, 0);
    v54 = sub_100068C88();
    v55 = sub_10000CB94(&qword_10013E0D8, &qword_10013E0E0, (uint64_t)&protocol conformance descriptor for Button<A>);
    _ConditionalContent<>.init(storage:)(v53, v128, v126, v54, v55);
    sub_10000CC5C(v52, &qword_10013E0C0);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v41, v22);
  }
  else
  {
    v118 = v14;
    v119 = v22;
    v58 = v122;
    v57 = v123;
    if (v32 == enum case for SFAirDrop.ButtonConfiguration.symbol(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v31, v26);
      v59 = *v31;
      v60 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v31[1];
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17);
      v61 = *(unsigned __int8 *)(v18 + 80);
      v62 = (v61 + 33) & ~v61;
      v63 = swift_allocObject(&unk_1001270D0, v62 + v19, v61 | 7);
      *(_QWORD *)(v63 + 16) = v124;
      *(_QWORD *)(v63 + 24) = v58;
      *(_BYTE *)(v63 + 32) = v125 & 1;
      v64 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v63 + v62, v21, v17);
      __chkstk_darwin(v64, v65);
      *(&v113 - 2) = v59;
      *(&v113 - 1) = (uint64_t)v60;
      swift_retain(v58);
      v66 = v115;
      Button.init(action:label:)(sub_100068E3C, v63, sub_100068E60, &v113 - 4, &type metadata for Image, &protocol witness table for Image);
      swift_bridgeObjectRelease(v60, v67, v68, v69, v70, v71, v72, v73);
      v75 = v117;
      v74 = v118;
      (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v118, v66, v57);
      swift_storeEnumTagMultiPayload(v74, v120, 1);
      v76 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
      v77 = sub_10000CB94(&qword_10013E0C8, &qword_10013E0D0, (uint64_t)&protocol conformance descriptor for Button<A>);
      v78 = (uint64_t)v121;
      _ConditionalContent<>.init(storage:)(v74, v119, v57, v76, v77);
      v79 = v129;
      sub_10000CC18(v78, v129, &qword_10013E0C0);
      swift_storeEnumTagMultiPayload(v79, v127, 0);
      v80 = sub_100068C88();
      v81 = sub_10000CB94(&qword_10013E0D8, &qword_10013E0E0, (uint64_t)&protocol conformance descriptor for Button<A>);
      _ConditionalContent<>.init(storage:)(v79, v128, v126, v80, v81);
      sub_10000CC5C(v78, &qword_10013E0C0);
      return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v66, v57);
    }
    else if (v32 == enum case for SFAirDrop.ButtonConfiguration.symbolText(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v31, v26);
      v83 = *v31;
      v82 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v31[1];
      v85 = v31[2];
      v84 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v31[3];
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17);
      v86 = *(unsigned __int8 *)(v18 + 80);
      v87 = (v86 + 33) & ~v86;
      v88 = swift_allocObject(&unk_1001270A8, v87 + v19, v86 | 7);
      *(_QWORD *)(v88 + 16) = v124;
      *(_QWORD *)(v88 + 24) = v58;
      *(_BYTE *)(v88 + 32) = v125 & 1;
      v89 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v88 + v87, v21, v17);
      __chkstk_darwin(v89, v90);
      *(&v113 - 4) = v83;
      *(&v113 - 3) = (uint64_t)v82;
      *(&v113 - 2) = v85;
      *(&v113 - 1) = (uint64_t)v84;
      swift_retain(v58);
      v91 = sub_100008F88(&qword_10013E108);
      v92 = sub_10000CB94(&qword_10013E110, &qword_10013E108, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v93 = v114;
      Button.init(action:label:)(sub_100068E3C, v88, sub_100068E40, &v113 - 6, v91, v92);
      swift_bridgeObjectRelease(v84, v94, v95, v96, v97, v98, v99, v100);
      swift_bridgeObjectRelease(v82, v101, v102, v103, v104, v105, v106, v107);
      v108 = v116;
      v109 = v129;
      v110 = v126;
      (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v129, v93, v126);
      swift_storeEnumTagMultiPayload(v109, v127, 1);
      v111 = sub_100068C88();
      v112 = sub_10000CB94(&qword_10013E0D8, &qword_10013E0E0, (uint64_t)&protocol conformance descriptor for Button<A>);
      _ConditionalContent<>.init(storage:)(v109, v128, v110, v111, v112);
      return (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v93, v110);
    }
    else
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v26, v26);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000672C0@<X0>(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t result;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _TtC9AirDropUI33AirDropTransferSessionsController *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _TtC9AirDropUI33AirDropTransferSessionsController *v80;
  _TtC9AirDropUI33AirDropTransferSessionsController *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  SEL v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v119 = a4;
  v116 = a2;
  v117 = a3;
  v124 = a5;
  v6 = sub_100008F88(&qword_10013E090);
  v113 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v111 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008F88(&qword_10013E080);
  v114 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118, v9);
  v112 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100008F88(&qword_10013E118);
  __chkstk_darwin(v121, v11);
  v123 = (uint64_t)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013E120);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100008F88(&qword_10013E060);
  __chkstk_darwin(v122, v17);
  v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_10013E070);
  v115 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SFAirDrop.ButtonConfiguration(0, v22);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = (char *)&v111 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100008F88(&qword_10013E008);
  SFAirDrop.AcceptAction.Composite.buttonConfiguration.getter(v30);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v29, v25);
  v120 = v6;
  if (v31 == enum case for SFAirDrop.ButtonConfiguration.text(_:))
  {
    v32 = (*(uint64_t (**)(char *, uint64_t))(v26 + 96))(v29, v25);
    v33 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v29 + 1);
    __chkstk_darwin(v32, v34);
    v35 = v116;
    *(&v111 - 4) = a1;
    *(&v111 - 3) = v35;
    *(&v111 - 2) = v117;
    *((_BYTE *)&v111 - 8) = v119 & 1;
    __chkstk_darwin(v36, v37);
    *(&v111 - 2) = v38;
    *(&v111 - 1) = (char *)v33;
    v39 = sub_100008F88(&qword_10013E128);
    v40 = sub_100068EB0();
    Menu.init(content:label:)(sub_100068F9C, &v111 - 6, sub_1000691F8, &v111 - 4, &type metadata for Text, v39, &protocol witness table for Text, v40);
    swift_bridgeObjectRelease(v33, v41, v42, v43, v44, v45, v46, v47);
    v48 = v115;
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v16, v24, v20);
    swift_storeEnumTagMultiPayload(v16, v13, 0);
    v49 = sub_10000CB94(&qword_10013E068, &qword_10013E070, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v50 = sub_10000CB94(&qword_10013E078, &qword_10013E080, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    _ConditionalContent<>.init(storage:)(v16, v20, v118, v49, v50);
    v51 = v123;
    sub_10000CC18((uint64_t)v19, v123, &qword_10013E060);
    swift_storeEnumTagMultiPayload(v51, v121, 0);
    v52 = sub_100068A10();
    v53 = sub_10000CB94(&qword_10013E088, &qword_10013E090, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    _ConditionalContent<>.init(storage:)(v51, v122, v120, v52, v53);
    sub_10000CC5C((uint64_t)v19, &qword_10013E060);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v24, v20);
  }
  else
  {
    v55 = v116;
    v115 = v20;
    v56 = v118;
    if (v31 == enum case for SFAirDrop.ButtonConfiguration.symbol(_:))
    {
      v57 = (*(uint64_t (**)(char *, uint64_t))(v26 + 96))(v29, v25);
      v58 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v29 + 1);
      __chkstk_darwin(v57, v59);
      *(&v111 - 4) = a1;
      *(&v111 - 3) = v55;
      *(&v111 - 2) = v117;
      *((_BYTE *)&v111 - 8) = v119 & 1;
      __chkstk_darwin(v60, v61);
      *(&v111 - 2) = v62;
      *(&v111 - 1) = (char *)v58;
      v63 = sub_100008F88(&qword_10013E128);
      v64 = sub_100068EB0();
      v65 = v112;
      Menu.init(content:label:)(sub_100068F2C, &v111 - 6, sub_100068E60, &v111 - 4, &type metadata for Image, v63, &protocol witness table for Image, v64);
      swift_bridgeObjectRelease(v58, v66, v67, v68, v69, v70, v71, v72);
      v73 = v114;
      (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v16, v65, v56);
      swift_storeEnumTagMultiPayload(v16, v13, 1);
      v74 = sub_10000CB94(&qword_10013E068, &qword_10013E070, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      v75 = sub_10000CB94(&qword_10013E078, &qword_10013E080, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      _ConditionalContent<>.init(storage:)(v16, v115, v56, v74, v75);
      v76 = v123;
      sub_10000CC18((uint64_t)v19, v123, &qword_10013E060);
      swift_storeEnumTagMultiPayload(v76, v121, 0);
      v77 = sub_100068A10();
      v78 = sub_10000CB94(&qword_10013E088, &qword_10013E090, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      _ConditionalContent<>.init(storage:)(v76, v122, v120, v77, v78);
      sub_10000CC5C((uint64_t)v19, &qword_10013E060);
      return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v65, v56);
    }
    else if (v31 == enum case for SFAirDrop.ButtonConfiguration.symbolText(_:))
    {
      v79 = (*(uint64_t (**)(char *, uint64_t))(v26 + 96))(v29, v25);
      v80 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v29 + 1);
      v81 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v29 + 3);
      __chkstk_darwin(v79, v82);
      *(&v111 - 4) = a1;
      *(&v111 - 3) = v55;
      *(&v111 - 2) = v117;
      *((_BYTE *)&v111 - 8) = v119 & 1;
      __chkstk_darwin(v83, v84);
      *(&v111 - 4) = v85;
      *(&v111 - 3) = (char *)v80;
      *(&v111 - 2) = v86;
      *(&v111 - 1) = (char *)v81;
      v87 = sub_100008F88(&qword_10013E108);
      v88 = sub_100008F88(&qword_10013E128);
      v89 = sub_10000CB94(&qword_10013E110, &qword_10013E108, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v90 = sub_100068EB0();
      v91 = v111;
      Menu.init(content:label:)(sub_100068E80, &v111 - 6, sub_1000691EC, &v111 - 6, v87, v88, v89, v90);
      swift_bridgeObjectRelease(v81, v92, v93, v94, v95, v96, v97, v98);
      swift_bridgeObjectRelease(v80, v99, v100, v101, v102, v103, v104, v105);
      v106 = v113;
      v107 = v123;
      v108 = v120;
      (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v123, v91, v120);
      swift_storeEnumTagMultiPayload(v107, v121, 1);
      v109 = sub_100068A10();
      v110 = sub_10000CB94(&qword_10013E088, &qword_10013E090, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
      _ConditionalContent<>.init(storage:)(v107, v122, v108, v109, v110);
      return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v91, v108);
    }
    else
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v25, v25);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100067A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v5 = sub_100044F4C();
  swift_bridgeObjectRetain(a2);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8 & 1;
  *(_QWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_100067AD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = sub_100008F88(&qword_10013E008);
  v19 = SFAirDrop.AcceptAction.Composite.actions.getter(v11);
  v12 = swift_allocObject(a5, 33, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  *(_BYTE *)(v12 + 32) = a4;
  swift_retain(a3);
  v13 = sub_100008F88(&qword_10013E138);
  v14 = sub_100008F88(&qword_100140040);
  v15 = sub_10000CB94(&qword_10013E140, &qword_10013E138, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
  v17 = sub_10000CB94(&qword_10013E148, &qword_10013CA50, (uint64_t)&protocol conformance descriptor for SFAirDrop.AcceptAction<A>.Single);
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))ForEach<>.init(_:content:))(&v19, a6, v12, v13, &type metadata for String, v14, v15, v16, v17);
}

uint64_t sub_100067C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v34 = a7;
  v35 = a6;
  v30 = a5;
  v31 = a2;
  v33 = a4;
  v32 = a3;
  v8 = sub_100008F88(&qword_10013CA50);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v13 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SFAirDrop.ButtonConfiguration(0, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = SFAirDrop.AcceptAction.Single.buttonConfiguration.getter(v8, v17);
  v21 = SFAirDrop.ButtonConfiguration.localizedTitle.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  v36[0] = v21;
  v36[1] = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v8);
  v24 = *(unsigned __int8 *)(v9 + 80);
  v25 = (v24 + 33) & ~v24;
  v26 = swift_allocObject(v30, v25 + v10, v24 | 7);
  v27 = v32;
  *(_QWORD *)(v26 + 16) = v31;
  *(_QWORD *)(v26 + 24) = v27;
  *(_BYTE *)(v26 + 32) = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v26 + v25, v13, v8);
  v28 = sub_100044F4C();
  swift_retain(v27);
  return Button<>.init<A>(_:action:)(v36, v35, v26, &type metadata for String, v28);
}

__n128 sub_100067D88@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  __n128 result;
  unint64_t v15;
  __n128 v16;
  unsigned __int8 v17;
  unint64_t v18;

  v10 = static VerticalAlignment.center.getter();
  sub_100067E18(a1, a2, a3, a4, (uint64_t)&v15);
  v11 = v15;
  v12 = v17;
  v13 = v18;
  result = v16;
  a5->n128_u64[0] = v10;
  a5->n128_u64[1] = 0;
  a5[1].n128_u8[0] = 1;
  a5[1].n128_u64[1] = v11;
  a5[2] = result;
  a5[3].n128_u8[0] = v12;
  a5[3].n128_u64[1] = v13;
  return result;
}

void sub_100067E18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *v16;
  char v17;
  char v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD v26[2];

  swift_bridgeObjectRetain(a2);
  v10 = Image.init(systemName:)(a1, a2);
  v26[0] = a3;
  v26[1] = a4;
  v11 = sub_100044F4C();
  swift_bridgeObjectRetain(a4);
  v12 = Text.init<A>(_:)(v26, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v12;
  v18 = v17 & 1;
  *(_QWORD *)(a5 + 16) = v13;
  *(_BYTE *)(a5 + 24) = v17 & 1;
  *(_QWORD *)(a5 + 32) = v15;
  swift_retain(v10);
  sub_1000452A8(v12, v14, v18);
  swift_bridgeObjectRetain(v16);
  sub_100044F90(v12, v14, v18);
  swift_release(v10);
  swift_bridgeObjectRelease(v16, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_100067EFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[4] = a2;
  v3 = sub_100008F88(&qword_10013CA50);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[12] = v8;
  v2[13] = v9;
  return swift_task_switch(sub_100067FBC, v8, v9);
}

uint64_t sub_100067FBC()
{
  _QWORD *v0;
  _QWORD *v1;

  SFAirDrop.AcceptAction.Single.defaultAnswer.getter(v0[5]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.AcceptAction.Single.accept(with:)[1]);
  v0[14] = v1;
  *v1 = v0;
  v1[1] = sub_10006801C;
  return SFAirDrop.AcceptAction.Single.accept(with:)(v0[10], v0[5]);
}

uint64_t sub_10006801C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1000680E8;
  else
    v7 = sub_1000680A4;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000680A4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000680E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *log;
  uint64_t *v31;
  os_log_type_t type;
  uint64_t v33;
  uint64_t v34;

  swift_release(*(_QWORD *)(v0 + 88));
  if (qword_10013AD20 != -1)
    swift_once(&qword_10013AD20, sub_100063A84);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = type metadata accessor for Logger(0);
  sub_100009558(v6, (uint64_t)qword_10013DF50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 40);
  if (v10)
  {
    type = v9;
    v15 = swift_slowAlloc(22, -1);
    v31 = (uint64_t *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v34 = v33;
    *(_DWORD *)v15 = 136315394;
    log = v8;
    v16 = SFAirDrop.AcceptAction.Single.id.getter(v14);
    v18 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v17;
    *(_QWORD *)(v0 + 16) = sub_10003A834(v16, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v11);
    v26 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 24) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v31 = v26;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, type, "AirDrop ReadyForOpen action %s failed with error %@", (uint8_t *)v15, 0x16u);
    v27 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v31, 1, v27);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v28 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000683B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100063B14(*(_QWORD *)v1, *(char **)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_1000683BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_100008F88(&qword_10013DF80) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 33) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v5 = sub_100008F88(&qword_10013CA50);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100068460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(&qword_10013DF80) - 8) + 80);
  return sub_1000667C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), v1 + ((v3 + 33) & ~v3));
}

unint64_t sub_1000684A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013DF90;
  if (!qword_10013DF90)
  {
    v1 = sub_10000950C(&qword_10013DF78);
    sub_10000CB94(&qword_10013DF98, &qword_10013DF70, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013DF90);
  }
  return result;
}

uint64_t sub_100068534(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _TtC9AirDropUI33AirDropTransferSessionsController *v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008F88(&qword_10013CA50);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  v10 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v41 - v13;
  if (qword_10013AD20 != -1)
    swift_once(&qword_10013AD20, sub_100063A84);
  v15 = type metadata accessor for Logger(0);
  sub_100009558(v15, (uint64_t)qword_10013DF50);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16 = v46(v14, a1, v6);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v44 = a1;
    v19 = swift_slowAlloc(12, -1);
    v43 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v45 = v5;
    v22 = v21;
    v48 = v21;
    v42 = v8;
    *(_DWORD *)v20 = 136315138;
    v23 = SFAirDrop.AcceptAction.Single.id.getter(v6);
    v25 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v24;
    v47 = sub_10003A834(v23, v24, &v48);
    a1 = v44;
    v8 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "AirDrop ReadyForOpen action button was tapped. Triggering action %s on AirDropTransferSession", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v33 = v22;
    v5 = v45;
    swift_slowDealloc(v33, -1, -1);
    v34 = v20;
    v10 = v43;
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }

  v35 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v5, 1, 1, v35);
  v46(v10, a1, v6);
  v36 = *(unsigned __int8 *)(v7 + 80);
  v37 = (v36 + 16) & ~v36;
  v38 = swift_allocObject(&unk_100127080, v37 + v8, v36 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v38 + v37, v10, v6);
  v39 = static Task<>.noThrow(priority:operation:)(v5, &unk_10013DFB0, v38, (char *)&type metadata for () + 8);
  swift_release(v39);
  swift_release(v38);
  return sub_10000CC5C((uint64_t)v5, &qword_10013BCC0);
}

uint64_t sub_100068848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100008F88(&qword_10013CA50);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000688AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(&qword_10013CA50) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10013DFAC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000104E4;
  return sub_100067EFC(a1, v5);
}

uint64_t sub_100068920(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000950C(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006898C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013E050;
  if (!qword_10013E050)
  {
    v1 = sub_10000950C(&qword_10013DFF0);
    sub_100068A10();
    sub_10000CB94(&qword_10013E088, &qword_10013E090, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E050);
  }
  return result;
}

unint64_t sub_100068A10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013E058;
  if (!qword_10013E058)
  {
    v1 = sub_10000950C(&qword_10013E060);
    sub_10000CB94(&qword_10013E068, &qword_10013E070, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_10000CB94(&qword_10013E078, &qword_10013E080, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E058);
  }
  return result;
}

unint64_t sub_100068AB4()
{
  unint64_t result;

  result = qword_10013E098;
  if (!qword_10013E098)
  {
    result = swift_getWitnessTable(&unk_1000E91F8, &type metadata for AirDropUIButtonStyle);
    atomic_store(result, (unint64_t *)&qword_10013E098);
  }
  return result;
}

unint64_t sub_100068AF8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;
  unint64_t v9;
  unint64_t v10;

  result = qword_10013E0A8;
  if (!qword_10013E0A8)
  {
    v1 = sub_10000950C(&qword_10013E040);
    v2 = sub_10000950C(&qword_10013E030);
    v3 = sub_100068C04();
    v4 = sub_100068AB4();
    v7 = v2;
    v8 = &type metadata for AirDropUIButtonStyle;
    v9 = v3;
    v10 = v4;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v5 = sub_10000950C(&qword_10013E018);
    v6 = sub_100068920(&qword_10013E0E8, &qword_10013E018, (void (*)(void))sub_100068C04);
    v7 = v5;
    v8 = &type metadata for AirDropUIButtonStyle;
    v9 = v6;
    v10 = v4;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E0A8);
  }
  return result;
}

unint64_t sub_100068C04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013E0B0;
  if (!qword_10013E0B0)
  {
    v1 = sub_10000950C(&qword_10013E030);
    sub_100068C88();
    sub_10000CB94(&qword_10013E0D8, &qword_10013E0E0, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E0B0);
  }
  return result;
}

unint64_t sub_100068C88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013E0B8;
  if (!qword_10013E0B8)
  {
    v1 = sub_10000950C(&qword_10013E0C0);
    sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000CB94(&qword_10013E0C8, &qword_10013E0D0, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E0B8);
  }
  return result;
}

unint64_t sub_100068D2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;
  unint64_t v9;
  unint64_t v10;

  result = qword_10013E0F0;
  if (!qword_10013E0F0)
  {
    v1 = sub_10000950C(&qword_10013E000);
    v2 = sub_10000950C(&qword_10013DFF0);
    v3 = sub_10006898C();
    v4 = sub_100068AB4();
    v7 = v2;
    v8 = &type metadata for AirDropUIButtonStyle;
    v9 = v3;
    v10 = v4;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v5 = sub_10000950C(&qword_10013DFD8);
    v6 = sub_100068920(&qword_10013E048, &qword_10013DFD8, (void (*)(void))sub_10006898C);
    v7 = v5;
    v8 = &type metadata for AirDropUIButtonStyle;
    v9 = v6;
    v10 = v4;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E0F0);
  }
  return result;
}

double sub_100068E40@<D0>(__n128 *a1@<X8>)
{
  uint64_t *v1;
  double result;

  *(_QWORD *)&result = sub_100067D88(v1[2], v1[3], v1[4], v1[5], a1).n128_u64[0];
  return result;
}

uint64_t sub_100068E68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100067A68(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100068E80()
{
  uint64_t v0;

  return sub_100067AD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), (uint64_t)&unk_1001271C0, (uint64_t)sub_100069050);
}

unint64_t sub_100068EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013E130;
  if (!qword_10013E130)
  {
    v1 = sub_10000950C(&qword_10013E128);
    sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E130);
  }
  return result;
}

uint64_t sub_100068F2C()
{
  uint64_t v0;

  return sub_100067AD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), (uint64_t)&unk_100127170, (uint64_t)sub_100069020);
}

uint64_t sub_100068F5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  result = Image.init(systemName:)(v4, v3);
  *a1 = result;
  return result;
}

uint64_t sub_100068F9C()
{
  uint64_t v0;

  return sub_100067AD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), (uint64_t)&unk_100127120, (uint64_t)sub_100068FF0);
}

uint64_t sub_100068FCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100068FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100067C08(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), (uint64_t)&unk_100127148, (uint64_t)sub_100068E3C, a2);
}

uint64_t sub_100069020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100067C08(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), (uint64_t)&unk_100127198, (uint64_t)sub_100068E3C, a2);
}

uint64_t sub_100069050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100067C08(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), (uint64_t)&unk_1001271E8, (uint64_t)sub_100068E3C, a2);
}

uint64_t sub_100069080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_100008F88(&qword_10013CA50);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 33) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000690F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(&qword_10013CA50) - 8) + 80);
  return sub_100068534(v0 + ((v1 + 33) & ~v1));
}

uint64_t sub_100069128(uint64_t a1)
{
  sub_10004326C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_100069164()
{
  _QWORD v1[4];

  v1[0] = sub_10000950C(&qword_10013DF78);
  v1[1] = sub_10000950C(&qword_10013DF68);
  v1[2] = sub_1000684A8();
  v1[3] = sub_10000CB94(&qword_10013DFA0, &qword_10013DF68, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
}

uint64_t type metadata accessor for AUIRemoteAlertPresentationManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10013E158;
  if (!qword_10013E158)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AUIRemoteAlertPresentationManager);
  return result;
}

uint64_t sub_100069238(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_100147F60);
}

id sub_100069274()
{
  uint64_t v0;

  if (qword_10013AD28 != -1)
    swift_once(&qword_10013AD28, sub_10006944C);
  return (id)swift_dynamicCastClassUnconditional(qword_10013E150, v0, 0, 0, 0);
}

void sub_1000692C8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SFRemoteAlertPresentationManager.remoteAlertHandleDidActivate(_:)(v4);

}

void sub_10006931C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SFRemoteAlertPresentationManager.remoteAlertHandleDidDeactivate(_:)(v4);

}

void sub_100069370(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a1;
  v8 = a4;
  SFRemoteAlertPresentationManager.remoteAlertHandle(_:didInvalidateWithError:)(v6, a4);

}

id sub_1000693D0(void *a1)
{
  objc_super v2;

  v2.receiver = a1;
  v2.super_class = (Class)type metadata accessor for AUIRemoteAlertPresentationManager(0);
  return objc_msgSendSuper2(&v2, "init");
}

id sub_100069410()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUIRemoteAlertPresentationManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100069444()
{
  return type metadata accessor for AUIRemoteAlertPresentationManager(0);
}

id sub_10006944C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AUIRemoteAlertPresentationManager(0)), "init");
  qword_10013E150 = (uint64_t)result;
  return result;
}

uint64_t sub_10006947C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000694E4, v2, v3);
}

uint64_t sub_1000694E4()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  swift_release(*(_QWORD *)(v0 + 16));
  if (qword_10013ADA0 != -1)
    swift_once(&qword_10013ADA0, sub_1000CF1D4);
  v1 = qword_100148088;
  swift_retain(qword_100148088);
  sub_1000D092C();
  v2 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_100069558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013E210);
  v1 = sub_100009558(v0, (uint64_t)qword_10013E210);
  if (qword_10013AD50 != -1)
    swift_once(&qword_10013AD50, sub_100092204);
  v2 = sub_100009558(v0, (uint64_t)qword_100148010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000695E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v7 = sub_100008F88(&qword_10013E9F8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000904C(a1, v12);
  v14 = sub_100074AE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirDropActivityAttributes.ContentState.CodingKeys, &type metadata for AirDropActivityAttributes.ContentState.CodingKeys, v14, v12, v13);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v18, v7);
  if (!v3)
  {
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_100069704()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x696E556C61746F74;
}

uint64_t sub_100069750@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100074880(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100069774()
{
  return 0;
}

void sub_100069780(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10006978C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100074AE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000697B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100074AE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000697DC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100074990(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100069804(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000695E8(a1, *v1, v1[1]);
}

Swift::Int sub_10006981C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100069874()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000698AC(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_100069900(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int sub_100069918()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100069958()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10006997C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t sub_1000699B8()
{
  return 0xD000000000000012;
}

uint64_t sub_1000699D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000755E8(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_1000699FC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100069A08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100074B24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069A30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100074B24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100069A58@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v5 = sub_100008F88(&qword_10013EA00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000904C(a1, v10);
  v12 = sub_100074B24();
  v13 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirDropActivityAttributes.CodingKeys, &type metadata for AirDropActivityAttributes.CodingKeys, v12, v10, v11);
  if (v2)
    return sub_100009070(a1);
  v14 = KeyedDecodingContainer.decode(_:forKey:)(v13, v5);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = sub_100009070(a1);
  *a2 = v14;
  a2[1] = v16;
  return result;
}

uint64_t sub_100069B7C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = sub_100008F88(&qword_10013EA10);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = a1[3];
  v11 = a1[4];
  sub_10000904C(a1, v10);
  v12 = sub_100074B24();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirDropActivityAttributes.CodingKeys, &type metadata for AirDropActivityAttributes.CodingKeys, v12, v10, v11);
  KeyedEncodingContainer.encode(_:forKey:)(v8, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_100069C68()
{
  return sub_100023E0C((uint64_t)&unk_1000EC920, (uint64_t)&unk_1000EC948);
}

uint64_t sub_100069C7C()
{
  return sub_100069CA4((uint64_t)&unk_1000EC968, (uint64_t)&unk_1000EC990);
}

uint64_t sub_100069C90()
{
  return sub_100069CA4((uint64_t)&unk_1000EC9B0, (uint64_t)&unk_1000EC9D8);
}

uint64_t sub_100069CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100069D0C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000EC9F8);
  v2 = swift_getKeyPath(&unk_1000ECA20);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100069D7C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000ECA40);
  v2 = swift_getKeyPath(&unk_1000ECA68);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100069DEC@<X0>(_QWORD *a1@<X8>)
{
  return sub_100069EDC((uint64_t)&unk_1000ECD58, (uint64_t)&unk_1000ECD80, a1);
}

uint64_t sub_100069E00@<X0>(_QWORD *a1@<X8>)
{
  return sub_100069EDC((uint64_t)&unk_1000ECDA0, (uint64_t)&unk_1000ECDC8, a1);
}

uint64_t sub_100069E14@<X0>(_QWORD *a1@<X8>)
{
  return sub_100069EDC((uint64_t)&unk_1000ECA88, (uint64_t)&unk_1000ECAB0, a1);
}

uint64_t sub_100069E28()
{
  return sub_100069CA4((uint64_t)&unk_1000ECAD0, (uint64_t)&unk_1000ECAF8);
}

uint64_t sub_100069E3C()
{
  return sub_100069CA4((uint64_t)&unk_1000ECB18, (uint64_t)&unk_1000ECB40);
}

uint64_t sub_100069E50()
{
  return sub_100023E0C((uint64_t)&unk_1000ECB60, (uint64_t)&unk_1000ECB88);
}

uint64_t sub_100069E64()
{
  return sub_100023E0C((uint64_t)&unk_1000ECBA8, (uint64_t)&unk_1000ECBD0);
}

uint64_t sub_100069E78()
{
  return sub_100023E0C((uint64_t)&unk_1000ECBF0, (uint64_t)&unk_1000ECC18);
}

uint64_t sub_100069E8C()
{
  return sub_100069CA4((uint64_t)&unk_1000ECC38, (uint64_t)&unk_1000ECC60);
}

uint64_t sub_100069EA0()
{
  return sub_100069CA4((uint64_t)&unk_1000ECC80, (uint64_t)&unk_1000ECCA8);
}

uint64_t sub_100069EB4@<X0>(_QWORD *a1@<X8>)
{
  return sub_100069EDC((uint64_t)&unk_1000ECCC8, (uint64_t)&unk_1000ECCF0, a1);
}

uint64_t sub_100069EC8@<X0>(_QWORD *a1@<X8>)
{
  return sub_100069EDC((uint64_t)&unk_1000ECD10, (uint64_t)&unk_1000ECD38, a1);
}

uint64_t sub_100069EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  static Published.subscript.getter(a3, v3, KeyPath, v7);
  swift_release(KeyPath);
  return swift_release(v7);
}

uint64_t sub_100069F38()
{
  uint64_t v0;
  uint64_t *v1;
  _TtC9AirDropUI33AirDropTransferSessionsController *v2;
  Swift::String v3;
  Swift::Bool v4;
  SEL v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _TtC9AirDropUI33AirDropTransferSessionsController *v27;
  unint64_t v28;
  uint64_t v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _TtC9AirDropUI33AirDropTransferSessionsController *v47;
  uint64_t v48;
  _TtC9AirDropUI33AirDropTransferSessionsController *v49;
  Swift::String v50;
  Swift::Bool v51;
  SEL v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  _QWORD v74[2];
  _QWORD v75[2];
  _QWORD v76[2];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v2 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0
                                                             + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                             + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = 0x732D72656E6E6162;
  v3._object = (void *)0xEE006E6F69737365;
  v4 = String.hasSuffix(_:)(v3);
  swift_bridgeObjectRelease(v2, v5, v6, v7, v8, v9, v10, v11);
  if (v4)
  {
    v12 = v1[1];
    v76[0] = *v1;
    v76[1] = v12;
    v75[0] = 0x2D72656E6E61622DLL;
    v75[1] = 0xEF6E6F6973736573;
    v74[0] = 0;
    v74[1] = 0xE000000000000000;
    v13 = sub_100044F4C();
    v14 = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, void *, void *, void *, unint64_t, unint64_t, unint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))(v75, v74, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v13, v13, v13);
    v16 = v15;
    if (qword_10013ABF0 != -1)
      swift_once(&qword_10013ABF0, sub_100028C8C);
    v17 = qword_100147DA0;
    KeyPath = swift_getKeyPath(&unk_1000ECE30);
    v19 = swift_getKeyPath(&unk_1000ECE58);
    static Published.subscript.getter(v76, v17, KeyPath, v19);
    swift_release(KeyPath);
    swift_release(v19);
    v27 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v76[0];
    if (*(_QWORD *)(v76[0] + 16))
    {
      v28 = sub_10003AF58(v14, (uint64_t)v16);
      if ((v20 & 1) != 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)v27->nearbySharingInteractionCoordinator + 8 * v28);
        swift_retain(v29);
        swift_bridgeObjectRelease(v16, v30, v31, v32, v33, v34, v35, v36);
        swift_bridgeObjectRelease(v27, v37, v38, v39, v40, v41, v42, v43);
        return v29;
      }
    }
    swift_bridgeObjectRelease(v16, v20, v21, v22, v23, v24, v25, v26);
    swift_bridgeObjectRelease(v27, v66, v67, v68, v69, v70, v71, v72);
    return 0;
  }
  if (qword_10013ABF0 != -1)
    swift_once(&qword_10013ABF0, sub_100028C8C);
  v44 = qword_100147DA0;
  v45 = swift_getKeyPath(&unk_1000ECDE8);
  v46 = swift_getKeyPath(&unk_1000ECE10);
  static Published.subscript.getter(v76, v44, v45, v46);
  swift_release(v45);
  swift_release(v46);
  v29 = v76[0];
  if (v76[0])
  {
    v47 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v76[0]
                                                                + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier
                                                                + 8);
    v48 = *v1;
    v49 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v1[1];
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
    v50._countAndFlagsBits = v48;
    v50._object = v49;
    v51 = String.hasPrefix(_:)(v50);
    swift_bridgeObjectRelease(v47, v52, v53, v54, v55, v56, v57, v58);
    swift_bridgeObjectRelease(v49, v59, v60, v61, v62, v63, v64, v65);
    if (!v51)
    {
      swift_release(v29);
      return 0;
    }
  }
  return v29;
}

unint64_t sub_10006A1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t KeyPath;
  uint64_t v24;
  __n128 v25;
  uint64_t (*v26)(_QWORD *, uint64_t, uint64_t, __n128);
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __n128 v38;
  uint64_t v39;
  void *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v3 = v2;
  v4 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4, v5);
  v49 = (char **)((char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v48 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013C9E0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char **)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  v18 = (char **)((char *)&v48 - v17);
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(v53);
  v52 = 0xD000000000000019;
  v53 = 0x80000001000F1FC0;
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v20 = *(void **)(v2 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain(v20);
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 10272;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  KeyPath = swift_getKeyPath(&unk_1000ECDA0);
  v24 = swift_getKeyPath(&unk_1000ECDC8);
  static Published.subscript.getter(v18, v3, KeyPath, v24);
  swift_release(KeyPath);
  v25 = swift_release(v24);
  v26 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(v8 + 48);
  v27 = v26(v18, 1, v7, v25);
  sub_10000CC5C((uint64_t)v18, &qword_10013C9E0);
  if (v27 == 1)
    v28 = 0x65766965636572;
  else
    v28 = 1684956531;
  if (v27 == 1)
    v29 = 0xE700000000000000;
  else
    v29 = 0xE400000000000000;
  v30 = v29;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease(v29);
  v31._countAndFlagsBits = 8233;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32 = swift_getKeyPath(&unk_1000ECDA0);
  v33 = swift_getKeyPath(&unk_1000ECDC8);
  static Published.subscript.getter(v15, v3, v32, v33);
  swift_release(v32);
  v34 = swift_release(v33);
  if (v26(v15, 1, v7, v34))
  {
    sub_10000CC5C((uint64_t)v15, &qword_10013C9E0);
    v35 = swift_getKeyPath(&unk_1000ECD58);
    v36 = swift_getKeyPath(&unk_1000ECD80);
    v37 = v49;
    static Published.subscript.getter(v49, v3, v35, v36);
    swift_release(v35);
    v38 = swift_release(v36);
    v39 = SFAirDropReceive.Transfer.State.shortDescription.getter(v38);
    v41 = v40;
    (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v37, v51);
  }
  else
  {
    v42 = v48;
    (*(void (**)(char *, _QWORD *, uint64_t))(v8 + 16))(v48, v15, v7);
    v43 = sub_10000CC5C((uint64_t)v15, &qword_10013C9E0);
    v39 = SFAirDropSend.Transfer.State.shortDescription.getter(v43);
    v41 = v44;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v42, v7);
  }
  v45._countAndFlagsBits = v39;
  v45._object = v41;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v41);
  v46._countAndFlagsBits = 93;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  return v52;
}

uint64_t sub_10006A548(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t, uint64_t), void (*a7)(char *, uint64_t, uint64_t), uint64_t a8, uint64_t a9, void *a10, void *a11, char *a12, char *a13, void *a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void (*v90)(uint64_t, char *, uint64_t);
  uint64_t v91;
  void (*v92)(uint64_t, char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(uint64_t, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, char *, uint64_t);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  void (**v116)(char *, uint64_t, uint64_t);
  void (*v117)(char *, uint64_t, uint64_t);
  void (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t, uint64_t);
  char *v135;
  uint64_t v136;
  char *v137;
  void (*v138)(char *, uint64_t);
  __n128 v139;
  id v140;
  uint64_t v141;
  void (**v142)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t KeyPath;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(_QWORD, _QWORD);
  double v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  id v164;
  void *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  void (**v173)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v179;
  char *v180;
  void (*v181)(uint64_t, char *, uint64_t);
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, char *, uint64_t);
  uint64_t v193;
  _QWORD *v194;
  void (**v195)(char *, uint64_t, uint64_t);
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t, uint64_t);
  char *v205;
  uint64_t v206;
  char *v207;
  void *v208;
  void (*v209)(char *, uint64_t, uint64_t);
  int v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(char *, uint64_t);
  void *v223;
  void (**v224)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v225)(_QWORD, _QWORD);
  uint64_t v226;
  uint64_t v227;
  id v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  id v234;
  id v235[2];

  v17 = v16;
  v232 = a8;
  v209 = (void (*)(char *, uint64_t, uint64_t))a7;
  v204 = a6;
  v203 = a5;
  v202 = a4;
  v201 = a3;
  v200 = a2;
  v199 = a1;
  v228 = a14;
  v229 = a13;
  v215 = a15;
  v210 = a16;
  v230 = a12;
  v208 = a11;
  v231 = a9;
  v223 = a10;
  v18 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v224 = *(void (***)(_QWORD, _QWORD, _QWORD, _QWORD))(v18 - 8);
  v225 = (void (*)(_QWORD, _QWORD))v18;
  __chkstk_darwin(v18, v19);
  v180 = (char *)&v179 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v213 = *(_QWORD *)(v227 - 8);
  v22 = __chkstk_darwin(v227, v21);
  v214 = (char *)&v179 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  v212 = (char *)&v179 - v25;
  v226 = type metadata accessor for DeviceLockState(0);
  v206 = *(_QWORD *)(v226 - 8);
  v27 = __chkstk_darwin(v226, v26);
  v207 = (char *)&v179 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v29);
  v205 = (char *)&v179 - v30;
  v233 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v31);
  v197 = *(_QWORD *)(v233 - 8);
  v33 = __chkstk_darwin(v233, v32);
  v216 = (char *)&v179 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33, v35);
  v198 = (char *)&v179 - v37;
  __chkstk_darwin(v36, v38);
  v196 = (char *)&v179 - v39;
  v193 = sub_100008F88(&qword_10013D298);
  v192 = *(void (**)(uint64_t, char *, uint64_t))(v193 - 8);
  __chkstk_darwin(v193, v40);
  v184 = (char *)&v179 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100008F88(&qword_10013EA18);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190, v42);
  v188 = (char *)&v179 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  v45 = __chkstk_darwin(v187, v44);
  v186 = (uint64_t)&v179 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45, v47);
  v185 = (char *)&v179 - v48;
  v49 = sub_100008F88(&qword_10013EA20);
  v221 = *(_QWORD *)(v49 - 8);
  v222 = (void (*)(char *, uint64_t))v49;
  __chkstk_darwin(v49, v50);
  v183 = (char *)&v179 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_100008F88(&qword_10013C9E0);
  v53 = __chkstk_darwin(v220, v52);
  v211 = (uint64_t)&v179 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __chkstk_darwin(v53, v55);
  v219 = (uint64_t)&v179 - v57;
  __chkstk_darwin(v56, v58);
  v218 = (uint64_t)&v179 - v59;
  v60 = sub_100008F88(&qword_10013EA28);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60, v62);
  v64 = (char *)&v179 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100008F88(&qword_10013C4C0);
  v66 = *(_QWORD *)(v65 - 8);
  v182 = v65;
  v68 = __chkstk_darwin(v65, v67);
  v70 = (char *)&v179 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v68);
  v71 = (_QWORD *)(v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v194 = (_QWORD *)(v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  *v71 = 0;
  v71[1] = 0;
  v72 = (_QWORD *)(v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v195 = (void (**)(char *, uint64_t, uint64_t))(v16
                                                        + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  *v72 = 0;
  v72[1] = 0;
  v73 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction;
  v74 = type metadata accessor for SFAirDrop.DeclineAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v73, 1, 1, v74);
  v75 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  LOBYTE(v235[0]) = 0;
  Published.init(initialValue:)(v235, &type metadata for Bool);
  v181 = *(void (**)(uint64_t, char *, uint64_t))(v66 + 32);
  v181(v75, v70, v65);
  v76 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  v235[0] = 0;
  v235[1] = 0;
  v77 = sub_100008F88(&qword_10013B878);
  Published.init(initialValue:)(v235, v77);
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v76, v64, v60);
  v78 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  v191 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  v79 = v218;
  ((void (**)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD)))v224)[7](v218, 1, 1, v225);
  v80 = v219;
  sub_10000CC18(v79, v219, &qword_10013C9E0);
  v81 = v183;
  Published.init(initialValue:)(v80, v220);
  sub_10000CC5C(v79, &qword_10013C9E0);
  (*(void (**)(uint64_t, char *, void (*)(char *, uint64_t)))(v221 + 32))(v78, v81, v222);
  v82 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  v83 = sub_100008F88(&qword_10013CA70);
  v84 = (uint64_t)v185;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v185, 1, 1, v83);
  v85 = v186;
  sub_10000CC18(v84, v186, (uint64_t *)&unk_10013DCB0);
  v86 = v188;
  Published.init(initialValue:)(v85, v187);
  sub_10000CC5C(v84, (uint64_t *)&unk_10013DCB0);
  (*(void (**)(uint64_t, char *, uint64_t))(v189 + 32))(v82, v86, v190);
  v87 = v17 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  v235[0] = 0;
  v88 = sub_100008F88((uint64_t *)&unk_10013EB30);
  v89 = v184;
  Published.init(initialValue:)(v235, v88);
  v90 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v192 + 4);
  v91 = v193;
  v90(v87, v89, v193);
  v92 = v90;
  v192 = v90;
  v93 = v17 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage;
  v94 = v17;
  v235[0] = 0;
  Published.init(initialValue:)(v235, v88);
  v92(v93, v89, v91);
  v95 = v17 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage;
  LOBYTE(v235[0]) = 0;
  Published.init(initialValue:)(v235, &type metadata for Bool);
  v96 = v70;
  v97 = v70;
  v98 = v182;
  v99 = v181;
  v181(v95, v96, v182);
  v100 = v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage;
  LOBYTE(v235[0]) = 1;
  Published.init(initialValue:)(v235, &type metadata for Bool);
  v99(v100, v97, v98);
  v101 = v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage;
  v235[0] = 0;
  Published.init(initialValue:)(v235, v88);
  v102 = v192;
  v192(v101, v89, v91);
  v103 = v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage;
  v235[0] = 0;
  Published.init(initialValue:)(v235, v88);
  v104 = v89;
  v105 = v94;
  v102(v103, v104, v91);
  *(_QWORD *)(v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs) = &_swiftEmptyArrayStorage;
  v106 = v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate;
  *(_QWORD *)(v106 + 8) = 0;
  swift_unknownObjectWeakInit(v106, 0);
  v107 = v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate;
  *(_QWORD *)(v107 + 8) = 0;
  swift_unknownObjectWeakInit(v107, 0);
  *(_QWORD *)(v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = 0;
  v108 = v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  v109 = type metadata accessor for Date(0);
  v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56);
  v110(v108, 1, 1, v109);
  v110(v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, 1, 1, v109);
  v111 = (_QWORD *)(v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v112 = v200;
  *v111 = v199;
  v111[1] = v112;
  *(_BYTE *)(v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) = v201;
  v113 = v194;
  v114 = v194[1];
  v115 = v203;
  *v194 = v202;
  v113[1] = v115;
  swift_bridgeObjectRelease(v114);
  v116 = v195;
  v117 = v195[1];
  v118 = v209;
  *v195 = v204;
  v116[1] = v118;
  swift_bridgeObjectRelease(v117);
  v119 = v197;
  v120 = *(void (**)(char *, uint64_t, uint64_t))(v197 + 16);
  v121 = v196;
  v122 = v233;
  v120(v196, v232, v233);
  swift_beginAccess(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferState, v235, 33, 0);
  v123 = v198;
  v204 = v120;
  v120(v198, (uint64_t)v121, v122);
  Published.init(initialValue:)(v123, v122);
  v209 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 8);
  ((void (*)(char *, uint64_t))v209)(v121, v122);
  swift_endAccess(v235);
  v124 = v218;
  sub_10000CC18(v231, v218, &qword_10013C9E0);
  v125 = v191;
  swift_beginAccess(v191, v235, 33, 0);
  (*(void (**)(uint64_t, _QWORD))(v221 + 8))(v125, v222);
  v126 = v219;
  sub_10000CC18(v124, v219, &qword_10013C9E0);
  Published.init(initialValue:)(v126, v220);
  sub_10000CC5C(v124, &qword_10013C9E0);
  swift_endAccess(v235);
  swift_beginAccess(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numCompletedItems, v235, 33, 0);
  v234 = v223;
  Published.init(initialValue:)(&v234, &type metadata for Int);
  swift_endAccess(v235);
  swift_beginAccess(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numTotalItems, v235, 33, 0);
  v127 = v208;
  v234 = v208;
  Published.init(initialValue:)(&v234, &type metadata for Int);
  swift_endAccess(v235);
  swift_beginAccess(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImageIsSensitive, v235, 33, 0);
  LOBYTE(v234) = v210;
  Published.init(initialValue:)(&v234, &type metadata for Bool);
  swift_endAccess(v235);
  v128 = v206;
  v129 = *(void (**)(char *, uint64_t, uint64_t))(v206 + 16);
  v130 = v205;
  v131 = v226;
  v129(v205, (uint64_t)v230, v226);
  swift_beginAccess(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__lockState, v235, 33, 0);
  v132 = v207;
  v129(v207, (uint64_t)v130, v131);
  Published.init(initialValue:)(v132, v131);
  v222 = *(void (**)(char *, uint64_t))(v128 + 8);
  v222(v130, v131);
  swift_endAccess(v235);
  v133 = v213;
  v134 = *(void (**)(char *, uint64_t, uint64_t))(v213 + 16);
  v135 = v212;
  v136 = v227;
  v134(v212, (uint64_t)v229, v227);
  swift_beginAccess(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__displayPriority, v235, 33, 0);
  v137 = v214;
  v134(v214, (uint64_t)v135, v136);
  Published.init(initialValue:)(v137, v136);
  v138 = *(void (**)(char *, uint64_t))(v133 + 8);
  v138(v135, v136);
  swift_endAccess(v235);
  *(_QWORD *)(v106 + 8) = v215;
  swift_unknownObjectWeakAssign(v106, v228);
  *(_BYTE *)(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) = SBUIIsSystemApertureEnabled(v139);
  v140 = objc_msgSend((id)objc_opt_self(NSProgress), "progressWithTotalUnitCount:", v127);
  swift_beginAccess(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__progress, v235, 33, 0);
  v234 = v140;
  v141 = sub_100018D44(0, &qword_10013E308, NSProgress_ptr);
  v142 = v224;
  Published.init(initialValue:)(&v234, v141);
  swift_endAccess(v235);
  KeyPath = swift_getKeyPath(&unk_1000ECA40);
  v144 = swift_getKeyPath(&unk_1000ECA68);
  static Published.subscript.getter(v235, v105, KeyPath, v144);
  swift_release(KeyPath);
  v145 = v144;
  v146 = v225;
  *(_QWORD *)&v147 = swift_release(v145).n128_u64[0];
  v148 = v235[0];
  objc_msgSend(v235[0], "setCompletedUnitCount:", v223, v147);

  v149 = v211;
  sub_10000CC18(v231, v211, &qword_10013C9E0);
  if (((unsigned int (*)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD)))v142[6])(v149, 1, v146) == 1)
  {
    sub_10000CC5C(v149, &qword_10013C9E0);
    sub_10006C6BC(v232);
  }
  else
  {
    v150 = (uint64_t)v180;
    ((void (*)(char *, uint64_t, void (*)(_QWORD, _QWORD)))v142[4])(v180, v149, v146);
    sub_10006DB0C(v150);
    ((void (*)(uint64_t, _QWORD))v142[1])(v150, v146);
  }
  v151 = v216;
  if (qword_10013AD30 != -1)
    swift_once(&qword_10013AD30, sub_100069558);
  v152 = type metadata accessor for Logger(0);
  sub_100009558(v152, (uint64_t)qword_10013E210);
  v204(v151, v232, v233);
  v153 = swift_retain_n(v105, 2);
  v154 = Logger.logObject.getter(v153);
  v155 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v154, v155))
  {
    v156 = swift_slowAlloc(32, -1);
    v224 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))swift_slowAlloc(64, -1);
    v235[0] = v224;
    *(_DWORD *)v156 = 136315650;
    v157 = *(_QWORD *)(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v158 = *(_QWORD *)(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain(v158);
    v234 = (id)sub_10003A834(v157, v158, (uint64_t *)v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, v235);
    swift_bridgeObjectRelease(v158);
    *(_WORD *)(v156 + 12) = 2048;
    v159 = swift_getKeyPath(&unk_1000ECA40);
    v160 = swift_getKeyPath(&unk_1000ECA68);
    v225 = (void (*)(_QWORD, _QWORD))v138;
    v161 = v233;
    v162 = v160;
    static Published.subscript.getter(&v234, v105, v159, v160);
    swift_release(v159);
    *(_QWORD *)&v163 = swift_release(v162).n128_u64[0];
    v164 = v234;
    objc_msgSend(v234, "fractionCompleted", v163);
    v166 = v165;

    v234 = v166;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, v235);
    swift_release_n(v105, 2);
    *(_WORD *)(v156 + 22) = 2080;
    v167 = sub_100008694(&qword_10013CCF8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
    v168 = dispatch thunk of CustomStringConvertible.description.getter(v161, v167);
    v170 = v169;
    v234 = (id)sub_10003A834(v168, v169, (uint64_t *)v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, v235);
    swift_bridgeObjectRelease(v170);
    v171 = v161;
    v138 = (void (*)(char *, uint64_t))v225;
    v172 = (void (*)(uint64_t, uint64_t))v209;
    ((void (*)(char *, uint64_t))v209)(v151, v171);
    _os_log_impl((void *)&_mh_execute_header, v154, v155, "Transfer session created for transfer %s with completed: %f, transferState: %s", (uint8_t *)v156, 0x20u);
    v173 = v224;
    swift_arrayDestroy(v224, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v173, -1, -1);
    swift_slowDealloc(v156, -1, -1);
  }
  else
  {
    swift_release_n(v105, 2);
    v172 = (void (*)(uint64_t, uint64_t))v209;
    ((void (*)(char *, uint64_t))v209)(v151, v233);
  }

  v174 = v217;
  v175 = sub_10006BEA8(0, 0);
  if (v174)
  {
    swift_release(v105);

    v138(v229, v227);
    v222(v230, v226);
    sub_10000CC5C(v231, &qword_10013C9E0);
    v172(v232, v233);
  }
  else
  {
    v176 = v175;

    v138(v229, v227);
    v222(v230, v226);
    sub_10000CC5C(v231, &qword_10013C9E0);
    v172(v232, v233);
    v177 = *(_QWORD *)(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
    *(_QWORD *)(v105 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = v176;
    swift_release(v177);
  }
  return v105;
}

uint64_t sub_10006B6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;

  v1 = v0;
  v2 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013EA30);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity;
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
  if (v12)
  {
    v13 = sub_100008F88(&qword_10013EA38);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
    v14 = swift_retain(v12);
    static ActivityUIDismissalPolicy.immediate.getter(v14);
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v10, v6);
    v15 = swift_release(v12);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v15);
    sub_10000CC5C((uint64_t)v10, &qword_10013EA30);
  }
  v16 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v1+ OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier+ 8), v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v1+ OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName+ 8), v25, v26, v27, v28, v29, v30, v31);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v1+ OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName+ 8), v32, v33, v34, v35, v36, v37, v38);
  sub_10000CC5C(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction, (uint64_t *)&unk_10013C9D0);
  v39 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  v40 = sub_100008F88(&qword_10013C4C0);
  v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
  v41(v39, v40);
  v42 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numTotalItems;
  v43 = sub_100008F88(&qword_10013EAB8);
  v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
  v44(v42, v43);
  v44(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numCompletedItems, v43);
  v45 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  v46 = sub_100008F88(&qword_10013EA28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v45, v46);
  v47 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__progress;
  v48 = sub_100008F88(&qword_10013EAC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v47, v48);
  v49 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferState;
  v50 = sub_100008F88(&qword_10013EAC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
  v51 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  v52 = sub_100008F88(&qword_10013EA20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v51, v52);
  v53 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  v54 = sub_100008F88(&qword_10013EA18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
  v55 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  v56 = sub_100008F88(&qword_10013D298);
  v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8);
  v57(v55, v56);
  v57(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage, v56);
  v41(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImageIsSensitive, v40);
  v41(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage, v40);
  v41(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage, v40);
  v57(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage, v56);
  v57(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage, v56);
  v58 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__lockState;
  v59 = sub_100008F88(&qword_10013EAD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v58, v59);
  v60 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__displayPriority;
  v61 = sub_100008F88(&qword_10013EAD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v60, v61);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v1+ OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions), v62, v63, v64, v65, v66, v67, v68);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v1+ OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs), v69, v70, v71, v72, v73, v74, v75);
  sub_100075248(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate, v76);
  sub_100075248(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate, v77);
  swift_release(*(_QWORD *)(v1 + v11));
  sub_10000CC5C(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, &qword_10013CD20);
  sub_10000CC5C(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, &qword_10013CD20);
  return v1;
}

uint64_t sub_10006BB54()
{
  uint64_t v0;

  sub_10006B6E8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10006BB78()
{
  return type metadata accessor for AirDropTransferSession(0);
}

uint64_t type metadata accessor for AirDropTransferSession(uint64_t a1)
{
  uint64_t result;

  result = qword_10013E2D8;
  if (!qword_10013E2D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirDropTransferSession);
  return result;
}

void sub_10006BBBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[7];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v29[0] = *(_QWORD *)(v2 - 8) + 64;
    v29[1] = &unk_1000EC6A8;
    v29[2] = &unk_1000EC6C0;
    v29[3] = &unk_1000EC6C0;
    v29[4] = &unk_1000EC6D8;
    sub_100049AB8(319, &qword_10013E2E8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.DeclineAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v29[5] = *(_QWORD *)(v4 - 8) + 64;
      sub_100024380(319, (unint64_t *)&qword_10013C438, (uint64_t)&type metadata for Bool);
      if (v7 <= 0x3F)
      {
        v8 = *(_QWORD *)(v6 - 8) + 64;
        v29[6] = v8;
        sub_100024380(319, &qword_10013E2F0, (uint64_t)&type metadata for Int);
        if (v10 <= 0x3F)
        {
          v30 = *(_QWORD *)(v9 - 8) + 64;
          v31 = v30;
          sub_100030940(319, &qword_10013E2F8, &qword_10013B878);
          if (v12 <= 0x3F)
          {
            v32 = *(_QWORD *)(v11 - 8) + 64;
            sub_100072510(319);
            if (v14 <= 0x3F)
            {
              v33 = *(_QWORD *)(v13 - 8) + 64;
              sub_100049AB8(319, &qword_10013E310, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
              if (v16 <= 0x3F)
              {
                v34 = *(_QWORD *)(v15 - 8) + 64;
                sub_100030940(319, &qword_10013E318, &qword_10013C9E0);
                if (v18 <= 0x3F)
                {
                  v35 = *(_QWORD *)(v17 - 8) + 64;
                  sub_100030940(319, &qword_10013E320, (uint64_t *)&unk_10013DCB0);
                  if (v20 <= 0x3F)
                  {
                    v36 = *(_QWORD *)(v19 - 8) + 64;
                    sub_100030940(319, (unint64_t *)&unk_10013D190, (uint64_t *)&unk_10013EB30);
                    if (v22 <= 0x3F)
                    {
                      v37 = *(_QWORD *)(v21 - 8) + 64;
                      v38 = v37;
                      v39 = v8;
                      v40 = v8;
                      v41 = v8;
                      v42 = v37;
                      v43 = v37;
                      sub_100049AB8(319, &qword_10013E328, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceLockState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
                      if (v24 <= 0x3F)
                      {
                        v44 = *(_QWORD *)(v23 - 8) + 64;
                        sub_100049AB8(319, &qword_10013E330, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.DisplayPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
                        if (v26 <= 0x3F)
                        {
                          v45 = *(_QWORD *)(v25 - 8) + 64;
                          v46 = (char *)&value witness table for Builtin.BridgeObject + 64;
                          v47 = (char *)&value witness table for Builtin.BridgeObject + 64;
                          v48 = &unk_1000EC6F0;
                          v49 = &unk_1000EC6F0;
                          v50 = &unk_1000EC6D8;
                          v51 = &unk_1000EC708;
                          sub_100049AB8(319, (unint64_t *)&unk_10013E338, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                          if (v28 <= 0x3F)
                          {
                            v52 = *(_QWORD *)(v27 - 8) + 64;
                            v53 = v52;
                            swift_updateClassMetadata2(a1, 256, 31, v29, a1 + 80);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10006BEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::Bool v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  char *v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[2];
  char v70[8];

  v3 = v2;
  v6 = type metadata accessor for ActivityPresentationOptions(0);
  v61 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013AD30 != -1)
    swift_once(&qword_10013AD30, sub_100069558);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100009558(v10, (uint64_t)qword_10013E210);
  v12 = swift_retain(v3);
  v63 = v11;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v65 = v9;
  if (v15)
  {
    v60 = a1;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v69[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain(v19);
    v67 = sub_10003A834(v18, v19, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
    swift_release(v3);
    v20 = v19;
    a1 = v60;
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Creating ActivityKit activity for transfer: %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    if (a2)
    {
LABEL_5:
      v21 = a2;
      goto LABEL_8;
    }
  }
  else
  {

    swift_release(v3);
    if (a2)
      goto LABEL_5;
  }
  a1 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v21 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain(v21);
LABEL_8:
  swift_bridgeObjectRetain(a2);
  v22._countAndFlagsBits = 0x732D72656E6E6162;
  v22._object = (void *)0xEE006E6F69737365;
  v23 = String.hasSuffix(_:)(v22);
  v24 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled);
  v25 = sub_100008F88(&qword_10013EAB0);
  v26 = a1;
  v27 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v25, v30 + *(_QWORD *)(v28 + 72), v29 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1000E9370;
  v32 = (unsigned int *)&enum case for ActivityPresentationOptions.ActivityPresentationDestination.systemAperture(_:);
  if (!v24)
    v32 = (unsigned int *)&enum case for ActivityPresentationOptions.ActivityPresentationDestination.banner(_:);
  if (!v23)
    v32 = (unsigned int *)&enum case for ActivityPresentationOptions.ActivityPresentationDestination.lockscreen(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v31 + v30, *v32, v27);
  v33 = v65;
  ActivityPresentationOptions.init(destinations:)(v31);
  KeyPath = swift_getKeyPath(&unk_1000EC968);
  v35 = swift_getKeyPath(&unk_1000EC990);
  static Published.subscript.getter(v69, v3, KeyPath, v35);
  swift_release(KeyPath);
  swift_release(v35);
  v36 = v69[0];
  v37 = swift_getKeyPath(&unk_1000EC9B0);
  v38 = swift_getKeyPath(&unk_1000EC9D8);
  static Published.subscript.getter(v69, v3, v37, v38);
  swift_release(v37);
  swift_release(v38);
  v39 = v69[0];
  sub_100008F88(&qword_10013CD08);
  v69[0] = v26;
  v69[1] = v21;
  v67 = v36;
  v68 = v39;
  v40 = v64;
  v41 = static Activity.request(attributes:contentState:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:)(v69, &v67, v33, 0xD00000000000001BLL, 0x80000001000F1FA0, 1, &_swiftEmptyArrayStorage, 1);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v33, v62);
    swift_bridgeObjectRelease(v21);
    swift_errorRetain(v40);
    v42 = swift_errorRetain(v40);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v69[0] = v46;
      *(_DWORD *)v45 = 136315138;
      swift_getErrorValue(v40, v70, v66);
      v47 = Error.localizedDescription.getter(v66[1], v66[2]);
      v49 = v48;
      v67 = sub_10003A834(v47, v48, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      swift_bridgeObjectRelease(v49);
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Error requesting activity %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      swift_errorRelease(v40);
      swift_errorRelease(v40);
    }

    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease(v21);
    v50 = swift_retain_n(v41, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v69[0] = v54;
      *(_DWORD *)v53 = 136315138;
      v55 = Activity.id.getter(v54);
      v57 = v56;
      v67 = sub_10003A834(v55, v56, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      swift_release_n(v41, 2);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Requested activity successfully: %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      swift_release_n(v41, 2);
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v65, v62);
  }
  return v41;
}

double sub_10006C548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity))
  {
    v2 = v0;
    KeyPath = swift_getKeyPath(&unk_1000EC920);
    v4 = swift_getKeyPath(&unk_1000EC948);
    static Published.subscript.getter(&v13, v2, KeyPath, v4);
    swift_release(KeyPath);
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
    if (v13 == 1)
    {
      if (qword_10013AD30 != -1)
        swift_once(&qword_10013AD30, sub_100069558);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_100009558(v6, (uint64_t)qword_10013E210);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting ActivityKit activity because incoming transfer was accepted", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
      }

      v11 = sub_10006BEA8(0, 0);
      v12 = *(_QWORD *)(v2 + v1);
      *(_QWORD *)(v2 + v1) = v11;
      *(_QWORD *)&result = swift_release(v12).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_10006C6BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  __n128 v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  void (**v120)(char *, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  _QWORD aBlock[5];
  uint64_t v131;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v123 = *(_QWORD *)(v3 - 8);
  v124 = (char *)v3;
  __chkstk_darwin(v3, v4);
  v122 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v120 = *(void (***)(char *, uint64_t))(v6 - 8);
  v121 = v6;
  __chkstk_darwin(v6, v7);
  v119 = (void (*)(char *, uint64_t))((char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v118 = type metadata accessor for DispatchTime(0);
  v116 = *(_QWORD *)(v118 - 8);
  v10 = __chkstk_darwin(v118, v9);
  v12 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v117 = (char *)&v115 - v14;
  v15 = sub_100008F88(&qword_10013CD20);
  v17 = __chkstk_darwin(v15, v16);
  v126 = (uint64_t)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v125 = (char *)&v115 - v20;
  v21 = type metadata accessor for SFAirDrop.Progress(0);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = __chkstk_darwin(v21, v23);
  v127 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  v28 = (char *)&v115 - v27;
  v30 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v29);
  v31 = *(_QWORD *)(v30 - 8);
  v33 = __chkstk_darwin(v30, v32);
  v128 = (char *)&v115 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33, v35);
  v38 = (char *)&v115 - v37;
  __chkstk_darwin(v36, v39);
  v41 = (char *)&v115 - v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))((char *)&v115 - v40, a1, v30);
  v129 = *(char **)(v31 + 88);
  v42 = ((uint64_t (*)(char *, uint64_t))v129)(v41, v30);
  if (v42 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    v119 = *(void (**)(char *, uint64_t))(v31 + 96);
    v119(v41, v30);
    v43 = sub_100008F88((uint64_t *)&unk_10013DC80);
    v44 = &v41[*(int *)(v43 + 48)];
    v123 = v43;
    v45 = *(int *)(v43 + 64);
    v120 = (void (**)(char *, uint64_t))v41;
    swift_bridgeObjectRelease(*(_QWORD *)&v41[v45 + 8]);
    v121 = v22;
    v122 = (char *)v21;
    v46 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v124 = v28;
    v46(v28, v44, v21);
    KeyPath = swift_getKeyPath(&unk_1000ECBF0);
    v48 = swift_getKeyPath(&unk_1000ECC18);
    LOBYTE(aBlock[0]) = 1;
    swift_retain(v1);
    static Published.subscript.setter(aBlock, v1, KeyPath, v48);
    sub_10006D6D0(a1);
    v49 = v1;
    v50 = v127;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) & 1) != 0)
    {
LABEL_14:
      v76 = v121;
      v75 = v122;
      v77 = v124;
      (*(void (**)(_QWORD *, char *, char *))(v121 + 16))(v50, v124, v122);
      if ((*(unsigned int (**)(_QWORD *, char *))(v76 + 88))(v50, v75) == enum case for SFAirDrop.Progress.completed(_:))
      {
        (*(void (**)(_QWORD *, char *))(v76 + 96))(v50, v75);
        swift_bridgeObjectRelease(*v50);
        v78 = swift_getKeyPath(&unk_1000ECB60);
        v79 = swift_getKeyPath(&unk_1000ECB88);
        LOBYTE(aBlock[0]) = 0;
        swift_retain(v49);
        static Published.subscript.setter(aBlock, v49, v78, v79);
      }
      else
      {
        (*(void (**)(_QWORD *, char *))(v76 + 8))(v50, v75);
      }
      v59 = (char *)v120;
      v80 = swift_getKeyPath(&unk_1000ECD58);
      v81 = swift_getKeyPath(&unk_1000ECD80);
      v82 = v128;
      static Published.subscript.getter(v128, v49, v80, v81);
      swift_release(v80);
      v83 = swift_release(v81);
      if (((unsigned int (*)(char *, uint64_t, __n128))v129)(v82, v30, v83) == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
      {
        v119(v82, v30);
        v84 = sub_100008F88(&qword_10013CA70);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(v82, v84);
        v85 = swift_getKeyPath(&unk_1000ECBA8);
        v86 = swift_getKeyPath(&unk_1000ECBD0);
        LOBYTE(aBlock[0]) = 1;
        swift_retain(v49);
        static Published.subscript.setter(aBlock, v49, v85, v86);
        (*(void (**)(char *, char *))(v76 + 8))(v77, v75);
      }
      else
      {
        (*(void (**)(char *, char *))(v76 + 8))(v77, v75);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v82, v30);
      }
      v87 = &v59[*(int *)(v123 + 80)];
      v88 = type metadata accessor for SFAirDrop.DeclineAction(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v87, v88);
      goto LABEL_21;
    }
    v51 = swift_getKeyPath(&unk_1000ECD58);
    v52 = swift_getKeyPath(&unk_1000ECD80);
    v53 = v49;
    v54 = v52;
    v55 = v53;
    static Published.subscript.getter(v38, v53, v51, v52);
    swift_release(v51);
    v56 = swift_release(v54);
    v57 = ((uint64_t (*)(char *, uint64_t, __n128))v129)(v38, v30, v56);
    if ((_DWORD)v57 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
    {
      v119(v38, v30);
      v58 = sub_100008F88(&qword_10013CA70);
    }
    else
    {
      if ((_DWORD)v57 != enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
      {
        v49 = v55;
        if ((_DWORD)v57 != enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
        {
          if ((_DWORD)v57 != enum case for SFAirDropReceive.Transfer.State.created(_:)
            && (_DWORD)v57 != enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
            && (_DWORD)v57 != enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
          {
            (*(void (**)(char *, uint64_t))(v31 + 8))(v38, v30);
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        v119(v38, v30);
        v70 = sub_100008F88(&qword_10013CA70);
LABEL_12:
        v57 = (*(uint64_t (**)(char *))(*(_QWORD *)(v70 - 8) + 8))(v38);
LABEL_13:
        v71 = (uint64_t)v125;
        static Date.now.getter(v57);
        v72 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v71, 0, 1, v72);
        v73 = v126;
        sub_1000750F0(v71, v126);
        v74 = v49 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
        swift_beginAccess(v49 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, aBlock, 33, 0);
        sub_100074E60(v73, v74);
        swift_endAccess(aBlock);
        goto LABEL_14;
      }
      v119(v38, v30);
      v68 = &v38[*(int *)(sub_100008F88(&qword_10013BDF8) + 48)];
      v69 = sub_100008F88((uint64_t *)&unk_10013DC90);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v68, v69);
      v58 = type metadata accessor for SFAirDrop.ContactInfo(0);
    }
    v70 = v58;
    v49 = v55;
    goto LABEL_12;
  }
  if (v42 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    v59 = v41;
    (*(void (**)(char *, uint64_t))(v31 + 96))(v41, v30);
    v60 = sub_100008F88(&qword_10013CAB0);
    swift_bridgeObjectRelease(*(_QWORD *)&v41[*(int *)(v60 + 48)]);
    v61 = &v41[*(int *)(v60 + 80)];
    v62 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v61, v62);
  }
  else
  {
    v59 = v41;
    if (v42 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v31 + 96))(v41, v30);
      v63 = sub_100008F88(&qword_10013CAD0);
      swift_bridgeObjectRelease(*(_QWORD *)&v41[*(int *)(v63 + 48)]);
      v64 = &v41[*(int *)(v63 + 64)];
      v65 = swift_getKeyPath(&unk_1000ECB60);
      v66 = swift_getKeyPath(&unk_1000ECB88);
      LOBYTE(aBlock[0]) = 1;
      swift_retain(v1);
      static Published.subscript.setter(aBlock, v1, v65, v66);
      v67 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v64, v67);
LABEL_21:
      v89 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v59, v89);
    }
    if (v42 != enum case for SFAirDropReceive.Transfer.State.importing(_:))
    {
      if (v42 != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
        return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v41, v30);
      (*(void (**)(char *, uint64_t))(v31 + 96))(v41, v30);
      v93 = (int *)sub_100008F88(&qword_10013BDE0);
      swift_bridgeObjectRelease(*(_QWORD *)&v41[v93[12]]);
      v94 = swift_bridgeObjectRelease(*(_QWORD *)&v41[v93[16]]);
      v129 = &v41[v93[20]];
      v95 = v125;
      static Date.now.getter(v94);
      v96 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v95, 0, 1, v96);
      v97 = (uint64_t)v95;
      v98 = v126;
      sub_1000750F0(v97, v126);
      v99 = v1;
      v100 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v100, aBlock, 33, 0);
      sub_100074E60(v98, v100);
      swift_endAccess(aBlock);
      sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
      v101 = (void *)static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      v102 = v117;
      + infix(_:_:)(v12, 7.0);
      v128 = *(char **)(v116 + 8);
      v103 = v118;
      ((void (*)(char *, uint64_t))v128)(v12, v118);
      v104 = swift_allocObject(&unk_100127338, 24, 7);
      swift_weakInit(v104 + 16, v99);
      aBlock[4] = sub_100075230;
      v131 = v104;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000DA060;
      aBlock[3] = &unk_1001273F0;
      v105 = _Block_copy(aBlock);
      v106 = swift_release(v131);
      v107 = (char *)v119;
      static DispatchQoS.unspecified.getter(v106);
      aBlock[0] = &_swiftEmptyArrayStorage;
      v108 = sub_100008694(&qword_10013EAA0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v109 = sub_100008F88(&qword_10013F110);
      v110 = sub_10000CB94(&qword_10013EAA8, &qword_10013F110, (uint64_t)&protocol conformance descriptor for [A]);
      v111 = v122;
      v112 = v109;
      v113 = v124;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v112, v110, v124, v108);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v102, v107, v111, v105);
      _Block_release(v105);

      (*(void (**)(char *, char *))(v123 + 8))(v111, v113);
      v120[1](v107, v121);
      ((void (*)(char *, uint64_t))v128)(v102, v103);
      v114 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v114 - 8) + 8))(v129, v114);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v31 + 96))(v41, v30);
    v91 = sub_100008F88((uint64_t *)&unk_10013DC70);
    swift_bridgeObjectRelease(*(_QWORD *)&v41[*(int *)(v91 + 48)]);
  }
  v92 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v92 - 8) + 8))(v59, v92);
  return sub_10006D6D0(a1);
}

double sub_10006D234(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t Strong;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::Bool v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v3 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  a1 += 16;
  swift_beginAccess(a1, v46, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v10 = Strong;
    if (qword_10013ABF0 != -1)
      swift_once(&qword_10013ABF0, sub_100028C8C);
    v11 = qword_100147DA0;
    KeyPath = swift_getKeyPath(&unk_1000ECDE8);
    v13 = swift_getKeyPath(&unk_1000ECE10);
    static Published.subscript.getter(&v45, v11, KeyPath, v13);
    swift_release(KeyPath);
    swift_release(v13);
    v14 = v45;
    if (v45)
    {
      v15 = *(_QWORD *)(v45 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      v16 = (uint64_t *)(v10 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      v17 = *(_QWORD *)(v10 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      v18 = *(void **)(v10 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v18);
      v19._countAndFlagsBits = v17;
      v19._object = v18;
      v20 = String.hasPrefix(_:)(v19);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v18);
      if (!v20)
      {
        swift_release(v10);
        v36 = v14;
LABEL_20:
        *(_QWORD *)&result = swift_release(v36).n128_u64[0];
        return result;
      }
      v21 = swift_getKeyPath(&unk_1000ECD58);
      v22 = swift_getKeyPath(&unk_1000ECD80);
      static Published.subscript.getter(v7, v10, v21, v22);
      swift_release(v21);
      v23 = swift_release(v22);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, __n128))(v4 + 88))(v7, v3, v23) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
      {
        swift_release(v14);
        v37 = swift_release(v10);
        (*(void (**)(_QWORD *, uint64_t, __n128))(v4 + 8))(v7, v3, v37);
        return result;
      }
      (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v7, v3);
      v24 = (int *)sub_100008F88(&qword_10013BDE0);
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v24[12]));
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v24[16]));
      v25 = (char *)v7 + v24[20];
      v26 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
      v27 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v7, v27);
      if (qword_10013AD30 != -1)
        swift_once(&qword_10013AD30, sub_100069558);
      v28 = type metadata accessor for Logger(0);
      sub_100009558(v28, (uint64_t)qword_10013E210);
      v29 = swift_retain(v10);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        v45 = v33;
        *(_DWORD *)v32 = 136315138;
        v34 = *v16;
        v35 = v16[1];
        swift_bridgeObjectRetain(v35);
        v44 = sub_10003A834(v34, v35, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        swift_release(v10);
        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Dismissing waitingForOpenResponse banner for transfer %s", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_release(v10);
      }
      v38 = qword_100147DA0;
      sub_1000299E8();
      v39 = swift_getKeyPath(&unk_1000ECDE8);
      v40 = swift_getKeyPath(&unk_1000ECE10);
      static Published.subscript.getter(&v45, v38, v39, v40);
      swift_release(v39);
      swift_release(v40);
      v41 = v45;
      swift_release(v45);
      if (!v41)
      {
        if (qword_10013ADA0 != -1)
          swift_once(&qword_10013ADA0, sub_1000CF1D4);
        v42 = qword_100148088;
        swift_retain(qword_100148088);
        sub_1000D092C();
        swift_release(v42);
      }
      swift_release(v14);
    }
    v36 = v10;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10006D6D0(uint64_t a1)
{
  return sub_10006E01C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&unk_1001273B0, (uint64_t)sub_1000751BC, (uint64_t)&unk_1001273C8);
}

uint64_t sub_10006D6F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t KeyPath;
  uint64_t v29;
  __n128 v30;
  void (*v31)(_BYTE *, uint64_t, uint64_t, __n128);
  void (*v32)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  void (*v35)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  void (*v39)(_BYTE *, uint64_t);
  _BYTE *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE v47[4];
  int v48;
  void (*v49)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;

  v3 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v4 = *(_QWORD **)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v50 = &v47[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100008F88(&qword_10013EA58);
  __chkstk_darwin(v7, v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100008F88(&qword_10013C9E0);
  v13 = __chkstk_darwin(v11, v12);
  v52 = &v47[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v13, v15);
  v51 = &v47[-v17];
  v19 = __chkstk_darwin(v16, v18);
  v55 = &v47[-v20];
  v22 = __chkstk_darwin(v19, v21);
  v24 = &v47[-v23];
  __chkstk_darwin(v22, v25);
  v27 = &v47[-v26];
  KeyPath = swift_getKeyPath(&unk_1000ECDA0);
  v29 = swift_getKeyPath(&unk_1000ECDC8);
  v54 = v1;
  static Published.subscript.getter(v27, v1, KeyPath, v29);
  swift_release(KeyPath);
  v30 = swift_release(v29);
  v31 = (void (*)(_BYTE *, uint64_t, uint64_t, __n128))v4[2];
  v53 = a1;
  v31(v24, a1, v3, v30);
  v32 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v4[7];
  v32(v24, 0, 1, v3);
  v33 = (uint64_t)&v10[*(int *)(v7 + 48)];
  sub_10000CC18((uint64_t)v27, (uint64_t)v10, &qword_10013C9E0);
  sub_10000CC18((uint64_t)v24, v33, &qword_10013C9E0);
  v34 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v4[6];
  if (v34((uint64_t)v10, 1, v3) == 1)
  {
    sub_10000CC5C((uint64_t)v24, &qword_10013C9E0);
    sub_10000CC5C((uint64_t)v27, &qword_10013C9E0);
    if (v34(v33, 1, v3) == 1)
      return sub_10000CC5C((uint64_t)v10, &qword_10013C9E0);
  }
  else
  {
    sub_10000CC18((uint64_t)v10, (uint64_t)v55, &qword_10013C9E0);
    if (v34(v33, 1, v3) != 1)
    {
      v35 = (void (*)(_BYTE *, uint64_t, uint64_t))v4[4];
      v49 = v32;
      v36 = v50;
      v35(v50, v33, v3);
      v37 = sub_100008694(&qword_10013EA80, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Transfer.State);
      v38 = v55;
      v48 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v36, v3, v37);
      v39 = (void (*)(_BYTE *, uint64_t))v4[1];
      v40 = v36;
      v32 = v49;
      v39(v40, v3);
      sub_10000CC5C((uint64_t)v24, &qword_10013C9E0);
      sub_10000CC5C((uint64_t)v27, &qword_10013C9E0);
      v39(v38, v3);
      result = sub_10000CC5C((uint64_t)v10, &qword_10013C9E0);
      if ((v48 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    sub_10000CC5C((uint64_t)v24, &qword_10013C9E0);
    sub_10000CC5C((uint64_t)v27, &qword_10013C9E0);
    ((void (*)(_BYTE *, uint64_t))v4[1])(v55, v3);
  }
  sub_10000CC5C((uint64_t)v10, &qword_10013EA58);
LABEL_8:
  v42 = v53;
  v43 = v54;
  sub_10006DB0C(v53);
  v10 = v51;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v31)(v51, v42, v3);
  v32(v10, 0, 1, v3);
  v44 = swift_getKeyPath(&unk_1000ECDA0);
  v45 = swift_getKeyPath(&unk_1000ECDC8);
  v46 = v52;
  sub_10000CC18((uint64_t)v10, (uint64_t)v52, &qword_10013C9E0);
  swift_retain(v43);
  static Published.subscript.setter(v46, v43, v44, v45);
  return sub_10000CC5C((uint64_t)v10, &qword_10013C9E0);
}

uint64_t sub_10006DB0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t (*v26)(char *, uint64_t);
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t KeyPath;
  uint64_t v35;
  _QWORD *v36;
  __n128 v37;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  int *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  _BYTE v58[24];

  v3 = sub_100008F88(&qword_10013CD20);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v55 = (char *)&v51 - v9;
  v10 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v10, v11);
  v57 = (char **)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v56 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)&v51 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v51 - v23;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25((char *)&v51 - v23, a1, v13);
  v26 = *(uint64_t (**)(char *, uint64_t))(v14 + 88);
  v27 = v26(v24, v13);
  v28 = enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:);
  if (v27 != enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    if (v27 != enum case for SFAirDropSend.Transfer.State.transferring(_:))
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v24, v13);
    v53 = *(void (**)(char *, uint64_t))(v14 + 96);
    v54 = v21;
    v53(v24, v13);
    swift_bridgeObjectRelease(*((_QWORD *)v24 + 1));
    v33 = (int *)sub_100008F88(&qword_10013BCA0);
    swift_bridgeObjectRelease(*(_QWORD *)&v24[v33[16] + 8]);
    sub_10006DFF8(a1);
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) & 1) != 0)
      goto LABEL_15;
    v51 = v7;
    v52 = v33;
    KeyPath = swift_getKeyPath(&unk_1000ECDA0);
    v35 = swift_getKeyPath(&unk_1000ECDC8);
    v36 = v57;
    static Published.subscript.getter(v57, v1, KeyPath, v35);
    swift_release(KeyPath);
    v37 = swift_release(v35);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v14 + 48))(v36, 1, v13, v37) == 1)
    {
      sub_10000CC5C((uint64_t)v36, &qword_10013C9E0);
LABEL_14:
      v33 = v52;
LABEL_15:
      v29 = &v24[v33[12]];
      v48 = &v24[v33[20]];
      v49 = type metadata accessor for SFAirDrop.DeclineAction(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
      v32 = type metadata accessor for SFAirDrop.Progress(0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v29, v32);
    }
    v39 = v54;
    (*(void (**)(char *, _QWORD *, uint64_t))(v14 + 32))(v54, v36, v13);
    v40 = v56;
    v25(v56, (uint64_t)v39, v13);
    v41 = v26(v40, v13);
    if ((_DWORD)v41 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
    {
      v53(v40, v13);
      swift_bridgeObjectRelease(*(_QWORD *)v40);
      v42 = &v40[*(int *)(sub_100008F88(&qword_10013CFD0) + 64)];
      v43 = type metadata accessor for SFAirDrop.DeclineAction(0);
    }
    else
    {
      if ((_DWORD)v41 != v28)
      {
        v44 = (uint64_t)v51;
        if ((_DWORD)v41 != enum case for SFAirDropSend.Transfer.State.created(_:)
          && (_DWORD)v41 != enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
        {
          v50 = *(void (**)(char *, uint64_t))(v14 + 8);
          v50(v54, v13);
          v50(v40, v13);
          goto LABEL_14;
        }
        goto LABEL_13;
      }
      v53(v40, v13);
      swift_bridgeObjectRelease(*(_QWORD *)v40);
      v42 = &v40[*(int *)(sub_100008F88(&qword_10013CFC8) + 48)];
      v43 = sub_100008F88((uint64_t *)&unk_10013DCA0);
    }
    v41 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
    v44 = (uint64_t)v51;
LABEL_13:
    v45 = (uint64_t)v55;
    static Date.now.getter(v41);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v54, v13);
    v46 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
    sub_1000750F0(v45, v44);
    v47 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
    swift_beginAccess(v47, v58, 33, 0);
    sub_100074E60(v44, v47);
    swift_endAccess(v58);
    goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v14 + 96))(v24, v13);
  swift_bridgeObjectRelease(*(_QWORD *)v24);
  v29 = &v24[*(int *)(sub_100008F88(&qword_10013CFC8) + 48)];
  v30 = swift_getKeyPath(&unk_1000ECB60);
  v31 = swift_getKeyPath(&unk_1000ECB88);
  v58[0] = 1;
  swift_retain(v1);
  static Published.subscript.setter(v58, v1, v30, v31);
  v32 = sub_100008F88((uint64_t *)&unk_10013DCA0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v29, v32);
}

uint64_t sub_10006DFF8(uint64_t a1)
{
  return sub_10006E01C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t)&unk_100127360, (uint64_t)sub_1000750BC, (uint64_t)&unk_100127378);
}

uint64_t sub_10006E01C(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[5];
  uint64_t v43;

  v37 = a4;
  v38 = a5;
  v35 = a3;
  v7 = v5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a2(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17, v20);
  v22 = (char *)&v34 - v21;
  sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
  v36 = static OS_dispatch_queue.main.getter();
  v23 = swift_allocObject(&unk_100127338, 24, 7);
  swift_weakInit(v23 + 16, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, a1, v17);
  v24 = *(unsigned __int8 *)(v18 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = swift_allocObject(v35, v25 + v19, v24 | 7);
  *(_QWORD *)(v26 + 16) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v26 + v25, v22, v17);
  aBlock[4] = v37;
  v43 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000DA060;
  aBlock[3] = v38;
  v27 = _Block_copy(aBlock);
  v28 = swift_release(v43);
  static DispatchQoS.unspecified.getter(v28);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v29 = sub_100008694(&qword_10013EAA0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_100008F88(&qword_10013F110);
  v31 = sub_10000CB94(&qword_10013EAA8, &qword_10013F110, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v9, v29);
  v32 = (void *)v36;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v16, v40);
}

uint64_t sub_10006E2BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  _BYTE v14[24];

  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    v9 = a3();
    v10 = objc_msgSend((id)objc_opt_self(NSProgress), "progressWithTotalUnitCount:", v9);
    objc_msgSend(v10, "setCompletedUnitCount:", a4());
    KeyPath = swift_getKeyPath(&unk_1000ECA40);
    v12 = swift_getKeyPath(&unk_1000ECA68);
    v13 = v10;
    return static Published.subscript.setter(&v13, v8, KeyPath, v12);
  }
  return result;
}

uint64_t sub_10006E394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t KeyPath;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _BYTE v170[24];
  _BYTE v171[24];
  uint64_t v172;
  uint64_t v173;

  v164 = a4;
  v8 = sub_100008F88(&qword_10013C9E0);
  v10 = __chkstk_darwin(v8, v9);
  v169 = (uint64_t)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v168 = (uint64_t *)((char *)&v154 - v13);
  v15 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v14);
  v166 = *(_QWORD *)(v15 - 8);
  v167 = v15;
  v17 = __chkstk_darwin(v15, v16);
  v165 = (char *)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v163 = (uint64_t *)((char *)&v154 - v20);
  v21 = sub_100008F88(&qword_10013CD20);
  __chkstk_darwin(v21, v22);
  v162 = (uint64_t)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v160 = *(_QWORD *)(v24 - 8);
  v161 = v24;
  v26 = __chkstk_darwin(v24, v25);
  v159 = (char *)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v28);
  v158 = (uint64_t *)((char *)&v154 - v29);
  v157 = type metadata accessor for DeviceLockState(0);
  v156 = *(_QWORD *)(v157 - 8);
  v31 = __chkstk_darwin(v157, v30);
  v155 = (char *)&v154 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v33);
  v35 = (uint64_t *)((char *)&v154 - v34);
  v36 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  v38 = __chkstk_darwin(v36, v37);
  v40 = (char *)&v154 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v41);
  v43 = (uint64_t *)((char *)&v154 - v42);
  v44 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v45 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  *v44 = a2;
  v44[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v45);
  v46 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  v47 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v48 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  *v47 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v47[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v48);
  v49 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  v50 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v51 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  *v50 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v50[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) = *(_BYTE *)(a1
                                                                                          + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe);
  KeyPath = swift_getKeyPath(&unk_1000EC920);
  v53 = swift_getKeyPath(&unk_1000EC948);
  static Published.subscript.getter(&v172, a1, KeyPath, v53);
  swift_release(KeyPath);
  swift_release(v53);
  LOBYTE(v53) = v172;
  v54 = swift_getKeyPath(&unk_1000EC920);
  v55 = swift_getKeyPath(&unk_1000EC948);
  LOBYTE(v172) = v53;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v54, v55);
  v56 = swift_getKeyPath(&unk_1000EC968);
  v57 = swift_getKeyPath(&unk_1000EC990);
  static Published.subscript.getter(&v172, a1, v56, v57);
  swift_release(v56);
  swift_release(v57);
  v58 = v172;
  v59 = swift_getKeyPath(&unk_1000EC968);
  v60 = swift_getKeyPath(&unk_1000EC990);
  v172 = v58;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v59, v60);
  v61 = swift_getKeyPath(&unk_1000EC9B0);
  v62 = swift_getKeyPath(&unk_1000EC9D8);
  static Published.subscript.getter(&v172, a1, v61, v62);
  swift_release(v61);
  swift_release(v62);
  v63 = v172;
  v64 = swift_getKeyPath(&unk_1000EC9B0);
  v65 = swift_getKeyPath(&unk_1000EC9D8);
  v172 = v63;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v64, v65);
  v66 = swift_getKeyPath(&unk_1000EC9F8);
  v67 = swift_getKeyPath(&unk_1000ECA20);
  static Published.subscript.getter(&v172, a1, v66, v67);
  swift_release(v66);
  swift_release(v67);
  v68 = v172;
  v69 = v173;
  v70 = swift_getKeyPath(&unk_1000EC9F8);
  v71 = swift_getKeyPath(&unk_1000ECA20);
  v172 = v68;
  v173 = v69;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v70, v71);
  v72 = swift_getKeyPath(&unk_1000ECA40);
  v73 = swift_getKeyPath(&unk_1000ECA68);
  static Published.subscript.getter(&v172, a1, v72, v73);
  swift_release(v72);
  swift_release(v73);
  v74 = v172;
  v75 = swift_getKeyPath(&unk_1000ECA40);
  v76 = swift_getKeyPath(&unk_1000ECA68);
  v172 = v74;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v75, v76);
  v77 = swift_getKeyPath(&unk_1000ECA88);
  v78 = swift_getKeyPath(&unk_1000ECAB0);
  static Published.subscript.getter(v43, a1, v77, v78);
  swift_release(v77);
  swift_release(v78);
  v79 = swift_getKeyPath(&unk_1000ECA88);
  v80 = swift_getKeyPath(&unk_1000ECAB0);
  sub_10000CC18((uint64_t)v43, (uint64_t)v40, (uint64_t *)&unk_10013DCB0);
  swift_retain(v4);
  static Published.subscript.setter(v40, v4, v79, v80);
  sub_10000CC5C((uint64_t)v43, (uint64_t *)&unk_10013DCB0);
  v81 = swift_getKeyPath(&unk_1000ECAD0);
  v82 = swift_getKeyPath(&unk_1000ECAF8);
  static Published.subscript.getter(&v172, a1, v81, v82);
  swift_release(v81);
  swift_release(v82);
  v83 = v172;
  v84 = swift_getKeyPath(&unk_1000ECAD0);
  v85 = swift_getKeyPath(&unk_1000ECAF8);
  v172 = v83;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v84, v85);
  v86 = swift_getKeyPath(&unk_1000ECB18);
  v87 = swift_getKeyPath(&unk_1000ECB40);
  static Published.subscript.getter(&v172, a1, v86, v87);
  swift_release(v86);
  swift_release(v87);
  v88 = v172;
  v89 = swift_getKeyPath(&unk_1000ECB18);
  v90 = swift_getKeyPath(&unk_1000ECB40);
  v172 = v88;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v89, v90);
  v91 = swift_getKeyPath(&unk_1000ECB60);
  v92 = swift_getKeyPath(&unk_1000ECB88);
  static Published.subscript.getter(&v172, a1, v91, v92);
  swift_release(v91);
  swift_release(v92);
  LOBYTE(v92) = v172;
  v93 = swift_getKeyPath(&unk_1000ECB60);
  v94 = swift_getKeyPath(&unk_1000ECB88);
  LOBYTE(v172) = v92;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v93, v94);
  v95 = swift_getKeyPath(&unk_1000ECBA8);
  v96 = swift_getKeyPath(&unk_1000ECBD0);
  static Published.subscript.getter(&v172, a1, v95, v96);
  swift_release(v95);
  swift_release(v96);
  LOBYTE(v96) = v172;
  v97 = swift_getKeyPath(&unk_1000ECBA8);
  v98 = swift_getKeyPath(&unk_1000ECBD0);
  LOBYTE(v172) = v96;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v97, v98);
  v99 = swift_getKeyPath(&unk_1000ECBF0);
  v100 = swift_getKeyPath(&unk_1000ECC18);
  static Published.subscript.getter(&v172, a1, v99, v100);
  swift_release(v99);
  swift_release(v100);
  LOBYTE(v100) = v172;
  v101 = swift_getKeyPath(&unk_1000ECBF0);
  v102 = swift_getKeyPath(&unk_1000ECC18);
  LOBYTE(v172) = v100;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v101, v102);
  v103 = swift_getKeyPath(&unk_1000ECC38);
  v104 = swift_getKeyPath(&unk_1000ECC60);
  static Published.subscript.getter(&v172, a1, v103, v104);
  swift_release(v103);
  swift_release(v104);
  v105 = v172;
  v106 = swift_getKeyPath(&unk_1000ECC38);
  v107 = swift_getKeyPath(&unk_1000ECC60);
  v172 = v105;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v106, v107);
  v108 = swift_getKeyPath(&unk_1000ECC80);
  v109 = swift_getKeyPath(&unk_1000ECCA8);
  static Published.subscript.getter(&v172, a1, v108, v109);
  swift_release(v108);
  swift_release(v109);
  v110 = v172;
  v111 = swift_getKeyPath(&unk_1000ECC80);
  v112 = swift_getKeyPath(&unk_1000ECCA8);
  v172 = v110;
  swift_retain(v4);
  static Published.subscript.setter(&v172, v4, v111, v112);
  v113 = swift_getKeyPath(&unk_1000ECCC8);
  v114 = swift_getKeyPath(&unk_1000ECCF0);
  static Published.subscript.getter(v35, a1, v113, v114);
  swift_release(v113);
  swift_release(v114);
  v115 = swift_getKeyPath(&unk_1000ECCC8);
  v116 = swift_getKeyPath(&unk_1000ECCF0);
  v117 = v156;
  v118 = v155;
  v119 = v157;
  (*(void (**)(char *, _QWORD *, uint64_t))(v156 + 16))(v155, v35, v157);
  swift_retain(v4);
  static Published.subscript.setter(v118, v4, v115, v116);
  (*(void (**)(_QWORD *, uint64_t))(v117 + 8))(v35, v119);
  v120 = swift_getKeyPath(&unk_1000ECD10);
  v121 = swift_getKeyPath(&unk_1000ECD38);
  v122 = v158;
  static Published.subscript.getter(v158, a1, v120, v121);
  swift_release(v120);
  swift_release(v121);
  v123 = swift_getKeyPath(&unk_1000ECD10);
  v124 = swift_getKeyPath(&unk_1000ECD38);
  v126 = v159;
  v125 = v160;
  v127 = v161;
  (*(void (**)(char *, _QWORD *, uint64_t))(v160 + 16))(v159, v122, v161);
  swift_retain(v4);
  static Published.subscript.setter(v126, v4, v123, v124);
  (*(void (**)(_QWORD *, uint64_t))(v125 + 8))(v122, v127);
  v128 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
  v129 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions) = v128;
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRelease(v129);
  v130 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
  v131 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs) = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v131);
  v132 = a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  swift_beginAccess(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, &v172, 0, 0);
  v133 = v162;
  sub_10000CC18(v132, v162, &qword_10013CD20);
  v134 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, v171, 33, 0);
  sub_100074E60(v133, v134);
  swift_endAccess(v171);
  v135 = a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
  swift_beginAccess(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v171, 0, 0);
  sub_10000CC18(v135, v133, &qword_10013CD20);
  v136 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v170, 33, 0);
  sub_100074E60(v133, v136);
  swift_endAccess(v170);
  v137 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
  v138 = v164;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = v164;
  swift_retain(v138);
  swift_release(v137);
  v139 = swift_getKeyPath(&unk_1000ECD58);
  v140 = swift_getKeyPath(&unk_1000ECD80);
  v141 = v163;
  static Published.subscript.getter(v163, a1, v139, v140);
  swift_release(v139);
  swift_release(v140);
  v142 = swift_getKeyPath(&unk_1000ECD58);
  v143 = swift_getKeyPath(&unk_1000ECD80);
  v145 = v165;
  v144 = v166;
  v146 = v167;
  (*(void (**)(char *, _QWORD *, uint64_t))(v166 + 16))(v165, v141, v167);
  swift_retain(v4);
  static Published.subscript.setter(v145, v4, v142, v143);
  (*(void (**)(_QWORD *, uint64_t))(v144 + 8))(v141, v146);
  v147 = swift_getKeyPath(&unk_1000ECDA0);
  v148 = swift_getKeyPath(&unk_1000ECDC8);
  v149 = v168;
  static Published.subscript.getter(v168, a1, v147, v148);
  swift_release(v147);
  swift_release(v148);
  v150 = swift_getKeyPath(&unk_1000ECDA0);
  v151 = swift_getKeyPath(&unk_1000ECDC8);
  v152 = v169;
  sub_10000CC18((uint64_t)v149, v169, &qword_10013C9E0);
  swift_retain(v4);
  static Published.subscript.setter(v152, v4, v150, v151);
  return sub_10000CC5C((uint64_t)v149, &qword_10013C9E0);
}

void sub_10006F16C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _TtC9AirDropUI33AirDropTransferSessionsController *a6, _TtC9AirDropUI33AirDropTransferSessionsController *a7, _TtC9AirDropUI33AirDropTransferSessionsController *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  _TtC9AirDropUI33AirDropTransferSessionsController *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  _TtC9AirDropUI33AirDropTransferSessionsController *v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  char v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  SEL v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  const char *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _TtC9AirDropUI33AirDropTransferSessionsController *v106;
  unsigned __int8 v107;
  SEL v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  _TtC9AirDropUI33AirDropTransferSessionsController *v122;
  _TtC9AirDropUI33AirDropTransferSessionsController *v123;
  SEL v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  _TtC9AirDropUI33AirDropTransferSessionsController *v132;
  char v133;
  SEL v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  SEL v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  _TtC9AirDropUI33AirDropTransferSessionsController *v148;
  _TtC9AirDropUI33AirDropTransferSessionsController *v149;
  SEL v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  uint64_t v157;
  void *v158;
  char v159;
  __n128 v160;
  uint64_t Strong;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint8_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _TtC9AirDropUI33AirDropTransferSessionsController *v182;
  SEL v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  uint64_t v190;
  _TtC9AirDropUI33AirDropTransferSessionsController *v191;
  uint64_t v192;
  double v193;
  id v194;
  void *v195;
  void *v196;
  uint64_t v197;
  _TtC9AirDropUI33AirDropTransferSessionsController *v198;
  SEL v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  _TtC9AirDropUI33AirDropTransferSessionsController *v220;
  _TtC9AirDropUI33AirDropTransferSessionsController *v221;
  uint64_t v222;
  uint64_t v223;
  _TtC9AirDropUI33AirDropTransferSessionsController *v224;
  uint64_t v225;
  void *v226;
  _TtC9AirDropUI33AirDropTransferSessionsController *v227;
  id v228;
  uint64_t v229;

  v9 = v8;
  v220 = a8;
  v221 = a6;
  v224 = a7;
  v225 = a3;
  v222 = a5;
  v219 = a4;
  v12 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v12, v13);
  v218 = (char *)&v217 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)&v217 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v217 - v23;
  KeyPath = swift_getKeyPath(&unk_1000ECD58);
  v26 = swift_getKeyPath(&unk_1000ECD80);
  static Published.subscript.getter(v24, v8, KeyPath, v26);
  swift_release(KeyPath);
  swift_release(v26);
  v27 = sub_100008694(&qword_10013CCF0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
  v223 = a1;
  v28 = dispatch thunk of static Equatable.== infix(_:_:)(v24, a1, v16, v27);
  v29 = *(void (**)(char *, uint64_t))(v17 + 8);
  v29(v24, v16);
  if ((v28 & 1) == 0)
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    v30(v24, v223, v16);
    v31 = swift_getKeyPath(&unk_1000ECD58);
    v32 = swift_getKeyPath(&unk_1000ECD80);
    v30(v21, (uint64_t)v24, v16);
    swift_retain(v9);
    static Published.subscript.setter(v21, v9, v31, v32);
    v29(v24, v16);
  }
  v33 = swift_getKeyPath(&unk_1000EC920);
  v34 = swift_getKeyPath(&unk_1000EC948);
  static Published.subscript.getter(&v226, v9, v33, v34);
  swift_release(v33);
  swift_release(v34);
  v35 = a2 & 1;
  if (v226 != (a2 & 1))
  {
    v36 = swift_getKeyPath(&unk_1000EC920);
    v37 = swift_getKeyPath(&unk_1000EC948);
    LOBYTE(v226) = v35;
    swift_retain(v9);
    static Published.subscript.setter(&v226, v9, v36, v37);
  }
  v38 = swift_getKeyPath(&unk_1000EC9B0);
  v39 = swift_getKeyPath(&unk_1000EC9D8);
  static Published.subscript.getter(&v226, v9, v38, v39);
  swift_release(v38);
  swift_release(v39);
  v40 = (uint64_t)v226;
  v41 = v220;
  v42 = v221;
  v43 = v224;
  v44 = v219;
  if (v226 != (void *)v225)
  {
    v45 = swift_getKeyPath(&unk_1000EC9B0);
    v46 = swift_getKeyPath(&unk_1000EC9D8);
    v226 = (void *)v225;
    swift_retain(v9);
    static Published.subscript.setter(&v226, v9, v45, v46);
  }
  v47 = swift_getKeyPath(&unk_1000EC968);
  v48 = swift_getKeyPath(&unk_1000EC990);
  static Published.subscript.getter(&v226, v9, v47, v48);
  swift_release(v47);
  swift_release(v48);
  if (v226 == (void *)v44)
  {
    if (v40 == v225)
    {
      if (!v42)
        goto LABEL_21;
      goto LABEL_13;
    }
  }
  else
  {
    v49 = swift_getKeyPath(&unk_1000EC968);
    v50 = swift_getKeyPath(&unk_1000EC990);
    v226 = (void *)v44;
    swift_retain(v9);
    static Published.subscript.setter(&v226, v9, v49, v50);
  }
  v51 = swift_getKeyPath(&unk_1000ECA40);
  v52 = swift_getKeyPath(&unk_1000ECA68);
  static Published.subscript.getter(&v226, v9, v51, v52);
  swift_release(v51);
  swift_release(v52);
  v53 = v226;
  v54 = swift_getKeyPath(&unk_1000EC9B0);
  v55 = swift_getKeyPath(&unk_1000EC9D8);
  static Published.subscript.getter(&v226, v9, v54, v55);
  v56 = v54;
  v43 = v224;
  swift_release(v56);
  *(_QWORD *)&v57 = swift_release(v55).n128_u64[0];
  objc_msgSend(v53, "setCompletedUnitCount:", v226, v57);

  v58 = swift_getKeyPath(&unk_1000ECA40);
  v59 = swift_getKeyPath(&unk_1000ECA68);
  static Published.subscript.getter(&v226, v9, v58, v59);
  swift_release(v58);
  swift_release(v59);
  v60 = v226;
  v61 = swift_getKeyPath(&unk_1000EC968);
  v62 = swift_getKeyPath(&unk_1000EC990);
  static Published.subscript.getter(&v226, v9, v61, v62);
  swift_release(v61);
  *(_QWORD *)&v63 = swift_release(v62).n128_u64[0];
  objc_msgSend(v60, "setTotalUnitCount:", v226, v63);

  if (!v42)
    goto LABEL_21;
LABEL_13:
  v64 = swift_getKeyPath(&unk_1000EC9F8);
  v65 = swift_getKeyPath(&unk_1000ECA20);
  swift_bridgeObjectRetain_n(v42, 2);
  static Published.subscript.getter(&v226, v9, v64, v65);
  swift_release(v64);
  swift_release(v65);
  v73 = v227;
  if (v227)
  {
    if (v226 == (void *)v222 && v227 == v42)
    {
      swift_bridgeObjectRelease_n(v42, 2);
      swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
      goto LABEL_21;
    }
    v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v222, v42, v226, v227, 0);
    swift_bridgeObjectRelease(v42, v82, v83, v84, v85, v86, v87, v88);
    swift_bridgeObjectRelease(v73, v89, v90, v91, v92, v93, v94, v95);
    if ((v81 & 1) != 0)
    {
      swift_bridgeObjectRelease(v42, v96, v97, v98, v99, v100, v101, v102);
      goto LABEL_21;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v42, v66, v67, v68, v69, v70, v71, v72);
  }
  v103 = swift_getKeyPath(&unk_1000EC9F8);
  v104 = swift_getKeyPath(&unk_1000ECA20);
  v226 = (void *)v222;
  v227 = v42;
  swift_retain(v9);
  static Published.subscript.setter(&v226, v9, v103, v104);
LABEL_21:
  v105 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions;
  if (!v43)
  {
    v122 = (_TtC9AirDropUI33AirDropTransferSessionsController *)&_swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  v106 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v9
                                                               + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v43);
  v107 = sub_10000D3FC((uint64_t)v106, (unint64_t)v43);
  swift_bridgeObjectRelease(v106, v108, v109, v110, v111, v112, v113, v114);
  swift_bridgeObjectRelease(v43, v115, v116, v117, v118, v119, v120, v121);
  v122 = v43;
  if ((v107 & 1) == 0)
  {
LABEL_25:
    v123 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v9 + v105);
    *(_QWORD *)(v9 + v105) = v122;
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRelease(v123, v124, v125, v126, v127, v128, v129, v130);
  }
  v131 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs;
  if (v41)
  {
    v132 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v9
                                                                 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
    swift_bridgeObjectRetain(v132);
    swift_bridgeObjectRetain(v41);
    v133 = sub_10000D6F0((uint64_t)v132, (uint64_t)v41);
    swift_bridgeObjectRelease(v132, v134, v135, v136, v137, v138, v139, v140);
    swift_bridgeObjectRelease(v41, v141, v142, v143, v144, v145, v146, v147);
    v148 = v41;
    if ((v133 & 1) != 0)
      goto LABEL_31;
  }
  else
  {
    v148 = (_TtC9AirDropUI33AirDropTransferSessionsController *)&_swiftEmptyArrayStorage;
  }
  v149 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v9 + v131);
  *(_QWORD *)(v9 + v131) = v148;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v149, v150, v151, v152, v153, v154, v155, v156);
LABEL_31:
  v157 = sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
  v158 = (void *)static NSUserDefaults.airdrop.getter(v157);
  v159 = SFAirDropUserDefaults.moveToAppEnabled.getter();

  if (SFAirDropReceive.Transfer.State.sfTransferState.getter(v160) == 7
    && (v159 & 1) == 0
    && (*(_BYTE *)(v9 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) & 1) == 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v9 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
    if (Strong)
    {
      v162 = (void *)Strong;
      if (qword_10013ABE8 != -1)
        swift_once(&qword_10013ABE8, sub_100028BFC);
      v163 = type metadata accessor for Logger(0);
      v164 = sub_100009558(v163, (uint64_t)qword_10013C7C0);
      v165 = Logger.logObject.getter(v164);
      v166 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v165, v166))
      {
        v167 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v167 = 0;
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "Received request from AirDropTransfer session to show a user notification for completed URLs", v167, 2u);
        swift_slowDealloc(v167, -1, -1);
      }

      sub_1000384A0(v9);
    }
  }
  sub_10006C548();
  v168 = *(_QWORD *)(v9 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
  if (v168)
  {
    v169 = sub_100008694(&qword_10013CCF8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Transfer.State);
    swift_retain(v168);
    v170 = dispatch thunk of CustomStringConvertible.description.getter(v16, v169);
    v172 = v171;
    if (qword_10013AD30 != -1)
      swift_once(&qword_10013AD30, sub_100069558);
    v173 = type metadata accessor for Logger(0);
    sub_100009558(v173, (uint64_t)qword_10013E210);
    swift_bridgeObjectRetain_n(v42, 2);
    swift_retain_n(v168, 2);
    swift_retain_n(v9, 2);
    v174 = swift_bridgeObjectRetain(v172);
    v175 = Logger.logObject.getter(v174);
    v176 = static os_log_type_t.default.getter();
    v177 = v176;
    if (os_log_type_enabled(v175, v176))
    {
      v178 = swift_slowAlloc(42, -1);
      v179 = swift_slowAlloc(96, -1);
      v225 = v179;
      v226 = (void *)v179;
      *(_DWORD *)v178 = 136315906;
      LODWORD(v224) = v177;
      v180 = Activity.id.getter(v179);
      v182 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v181;
      v228 = (id)sub_10003A834(v180, v181, (uint64_t *)&v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      swift_release_n(v168, 2);
      swift_bridgeObjectRelease(v182, v183, v184, v185, v186, v187, v188, v189);
      *(_WORD *)(v178 + 12) = 2048;
      v190 = swift_getKeyPath(&unk_1000ECA40);
      v191 = v42;
      v192 = swift_getKeyPath(&unk_1000ECA68);
      static Published.subscript.getter(&v228, v9, v190, v192);
      swift_release(v190);
      *(_QWORD *)&v193 = swift_release(v192).n128_u64[0];
      v194 = v228;
      objc_msgSend(v228, "fractionCompleted", v193);
      v196 = v195;

      v228 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      swift_release_n(v9, 2);
      *(_WORD *)(v178 + 22) = 2080;
      swift_bridgeObjectRetain(v172);
      v228 = (id)sub_10003A834(v170, v172, (uint64_t *)&v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      swift_bridgeObjectRelease_n(v172, 3);
      *(_WORD *)(v178 + 32) = 2080;
      if (v191)
        v197 = v222;
      else
        v197 = 0x3E656E6F6E3CLL;
      if (v191)
        v198 = v191;
      else
        v198 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE600000000000000;
      swift_bridgeObjectRetain(v191);
      v228 = (id)sub_10003A834(v197, (unint64_t)v198, (uint64_t *)&v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229);
      swift_bridgeObjectRelease_n(v191, 2);
      swift_bridgeObjectRelease(v198, v199, v200, v201, v202, v203, v204, v205);
      _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v224, "Updating ActivityKit activity %s with progress: %f, transferState: %s, description: %s", (uint8_t *)v178, 0x2Au);
      v206 = v225;
      swift_arrayDestroy(v225, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v206, -1, -1);
      swift_slowDealloc(v178, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v42, 2);
      swift_bridgeObjectRelease_n(v172, 2);
      swift_release_n(v9, 2);
      swift_release_n(v168, 2);
    }
    v207 = swift_getKeyPath(&unk_1000EC968);
    v208 = swift_getKeyPath(&unk_1000EC990);
    static Published.subscript.getter(&v226, v9, v207, v208);
    swift_release(v207);
    swift_release(v208);
    v209 = (uint64_t)v226;
    v210 = swift_getKeyPath(&unk_1000EC9B0);
    v211 = swift_getKeyPath(&unk_1000EC9D8);
    static Published.subscript.getter(&v226, v9, v210, v211);
    swift_release(v210);
    swift_release(v211);
    v212 = (uint64_t)v226;
    v213 = type metadata accessor for TaskPriority(0);
    v214 = (uint64_t)v218;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v213 - 8) + 56))(v218, 1, 1, v213);
    v215 = (_QWORD *)swift_allocObject(&unk_100127310, 40, 7);
    v215[2] = v168;
    v215[3] = v209;
    v215[4] = v212;
    swift_retain(v168);
    v216 = static Task<>.noThrow(priority:operation:)(v214, &unk_10013EA98, v215, (char *)&type metadata for () + 8);
    swift_release(v168);
    swift_release(v216);
    swift_release(v215);
    sub_10000CC5C(v214, &qword_10013BCC0);
  }
}

uint64_t sub_10006FE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD *);

  v4[2] = a3;
  v4[3] = a4;
  v7 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of Activity.update(using:)
                                        + async function pointer to dispatch thunk of Activity.update(using:));
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Activity.update(using:)
                                  + 1));
  v4[4] = v5;
  *v5 = v4;
  v5[1] = sub_10006FE80;
  return v7(v4 + 2);
}

uint64_t sub_10006FE80()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_10006FEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013EA30);
  __chkstk_darwin(v7, v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
  if (v12)
  {
    v34 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity;
    v13 = qword_10013AD30;
    swift_retain(v12);
    if (v13 != -1)
      swift_once(&qword_10013AD30, sub_100069558);
    v14 = type metadata accessor for Logger(0);
    sub_100009558(v14, (uint64_t)qword_10013E210);
    v15 = swift_retain_n(v12, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(12, -1);
      v33 = v0;
      v19 = (uint8_t *)v18;
      v20 = swift_slowAlloc(32, -1);
      v31 = v3;
      v21 = v20;
      v36 = v20;
      v32 = v2;
      *(_DWORD *)v19 = 136315138;
      v22 = Activity.id.getter(v20);
      v24 = v23;
      v35 = sub_10003A834(v22, v23, &v36);
      v2 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_release_n(v12, 2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Ending activity %s", v19, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      v25 = v21;
      v3 = v31;
      swift_slowDealloc(v25, -1, -1);
      v26 = v19;
      v1 = v33;
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_release_n(v12, 2);
    }
    v27 = sub_100008F88(&qword_10013EA38);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 1, 1, v27);
    static ActivityUIDismissalPolicy.immediate.getter(v28);
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v11, v6);
    v29 = swift_release(v12);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v29);
    sub_10000CC5C((uint64_t)v11, &qword_10013EA30);
    v30 = *(_QWORD *)(v1 + v34);
    *(_QWORD *)(v1 + v34) = 0;
    *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  }
  return result;
}

void sub_100070188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t KeyPath;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t Strong;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;

  v1 = v0;
  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v60 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100008F88(&qword_10013CA70);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15, v18);
  v59 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v62 = (char *)&v57 - v21;
  if (qword_10013AD30 != -1)
    swift_once(&qword_10013AD30, sub_100069558);
  v22 = type metadata accessor for Logger(0);
  v61 = sub_100009558(v22, (uint64_t)qword_10013E210);
  v23 = Logger.logObject.getter(v61);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    v58 = v8;
    v26 = v17;
    v27 = v11;
    v28 = v10;
    v29 = v1;
    v30 = v16;
    v31 = v15;
    v32 = v25;
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Requested 'showInterventionMoreInfo' on AirDropTransferSession", v25, 2u);
    v33 = v32;
    v15 = v31;
    v16 = v30;
    v1 = v29;
    v10 = v28;
    v11 = v27;
    v17 = v26;
    v8 = v58;
    swift_slowDealloc(v33, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1000ECD58);
  v35 = swift_getKeyPath(&unk_1000ECD80);
  static Published.subscript.getter(v14, v1, KeyPath, v35);
  swift_release(KeyPath);
  v36 = swift_release(v35);
  SFAirDropReceive.Transfer.State.permissionRequest.getter(v36);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v15) == 1)
  {
    v37 = sub_10000CC5C((uint64_t)v8, (uint64_t *)&unk_10013DCB0);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid transfer state for 'showInterventionMoreInfo'", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

  }
  else
  {
    v41 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v42 = v62;
    v41(v62, v8, v15);
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
    if (Strong)
    {
      v44 = (void *)Strong;
      v61 = *(_QWORD *)(Strong + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airdropClient);
      v45 = type metadata accessor for TaskPriority(0);
      v46 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v60, 1, 1, v45);
      v47 = v59;
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v59, v42, v15);
      v48 = *(unsigned __int8 *)(v16 + 80);
      v49 = v16;
      v50 = v15;
      v51 = (v48 + 16) & ~v48;
      v52 = (v17 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      v53 = swift_allocObject(&unk_1001272E8, v52 + 8, v48 | 7);
      v54 = v53 + v51;
      v15 = v50;
      v16 = v49;
      v41((char *)v54, v47, v15);
      v55 = v61;
      *(_QWORD *)(v53 + v52) = v61;
      swift_retain(v55);
      v56 = static Task<>.noThrow(priority:operation:)(v46, &unk_10013EA88, v53, (char *)&type metadata for () + 8);
      swift_release(v56);
      swift_release(v53);
      sub_10000CC5C(v46, &qword_10013BCC0);

    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v42, v15);
  }
}

uint64_t sub_1000705EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t KeyPath;
  uint64_t v31;
  __n128 v32;
  unsigned int (*v33)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __n128 v48;
  char v49;
  uint64_t v50;
  void (*v51)(_QWORD *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, _QWORD *, uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = a1;
  v3 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  v5 = __chkstk_darwin(v3, v4);
  v57 = (uint64_t *)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v7);
  v56 = (uint64_t *)((char *)&v54 - v8);
  v9 = sub_100008F88(&qword_10013C9E0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (uint64_t *)((char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v11, v14);
  v17 = (uint64_t *)((char *)&v54 - v16);
  __chkstk_darwin(v15, v18);
  v20 = (uint64_t *)((char *)&v54 - v19);
  v21 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  v29 = (char *)&v54 - v28;
  KeyPath = swift_getKeyPath(&unk_1000ECDA0);
  v31 = swift_getKeyPath(&unk_1000ECDC8);
  v60 = v2;
  static Published.subscript.getter(v20, v2, KeyPath, v31);
  swift_release(KeyPath);
  v32 = swift_release(v31);
  v33 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v22 + 48);
  if (v33(v20, 1, v21, v32) == 1)
  {
    v17 = v20;
    v34 = v61;
    goto LABEL_5;
  }
  v55 = *(void (**)(char *, _QWORD *, uint64_t))(v22 + 32);
  v55(v29, v20, v21);
  v35 = swift_getKeyPath(&unk_1000ECDA0);
  v36 = swift_getKeyPath(&unk_1000ECDC8);
  v34 = v61;
  static Published.subscript.getter(v17, v61, v35, v36);
  swift_release(v35);
  v37 = swift_release(v36);
  if (v33(v17, 1, v21, v37) == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
LABEL_5:
    sub_10000CC5C((uint64_t)v17, &qword_10013C9E0);
    v38 = swift_getKeyPath(&unk_1000ECDA0);
    v39 = swift_getKeyPath(&unk_1000ECDC8);
    v40 = v60;
    static Published.subscript.getter(v13, v60, v38, v39);
    swift_release(v38);
    v41 = swift_release(v39);
    LODWORD(v38) = v33(v13, 1, v21, v41);
    sub_10000CC5C((uint64_t)v13, &qword_10013C9E0);
    if ((_DWORD)v38 == 1)
    {
      v42 = swift_getKeyPath(&unk_1000ECD58);
      v43 = swift_getKeyPath(&unk_1000ECD80);
      v44 = v56;
      static Published.subscript.getter(v56, v40, v42, v43);
      swift_release(v42);
      swift_release(v43);
      v45 = swift_getKeyPath(&unk_1000ECD58);
      v46 = swift_getKeyPath(&unk_1000ECD80);
      v47 = v57;
      static Published.subscript.getter(v57, v34, v45, v46);
      swift_release(v45);
      v48 = swift_release(v46);
      v49 = SFAirDropReceive.Transfer.State.sameCase(as:)(v47, v48);
      v50 = v59;
      v51 = *(void (**)(_QWORD *, uint64_t))(v58 + 8);
      v51(v47, v59);
      v51(v44, v50);
    }
    else
    {
      v49 = 0;
    }
    return v49 & 1;
  }
  v55(v26, v17, v21);
  v49 = SFAirDropSend.Transfer.State.sameCase(as:)(v26);
  v52 = *(void (**)(char *, uint64_t))(v22 + 8);
  v52(v26, v21);
  v52(v29, v21);
  return v49 & 1;
}

uint64_t sub_1000709D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  void (*v79)(_QWORD *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char v95;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int (*v153)(uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char v160;
  void (*v161)(char *, uint64_t);
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  id v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  id v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  __n128 v206;
  void (*v207)(_QWORD *, uint64_t);
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  __n128 v216;
  void (*v217)(_QWORD *, uint64_t);
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int (*v231)(uint64_t, uint64_t, uint64_t);
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  void (*v238)(char *, uint64_t);
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  void (*v250)(char *, uint64_t);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  char v286[8];
  char v287[8];
  char v288[8];
  void *v289;
  uint64_t v290;

  v261 = type metadata accessor for Date(0);
  v259 = *(_QWORD *)(v261 - 8);
  __chkstk_darwin(v261, v3);
  v258 = (char *)&v251 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = sub_100008F88(&qword_10013EA48);
  v6 = __chkstk_darwin(v255, v5);
  v260 = (uint64_t)&v251 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v254 = (uint64_t)&v251 - v9;
  v10 = sub_100008F88(&qword_10013CD20);
  v12 = __chkstk_darwin(v10, v11);
  v257 = (uint64_t)&v251 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v256 = (uint64_t)&v251 - v16;
  v18 = __chkstk_darwin(v15, v17);
  v253 = (uint64_t)&v251 - v19;
  __chkstk_darwin(v18, v20);
  v252 = (uint64_t)&v251 - v21;
  v269 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v268 = *(_QWORD *)(v269 - 8);
  v23 = __chkstk_darwin(v269, v22);
  v267 = (uint64_t *)((char *)&v251 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23, v25);
  v266 = (uint64_t *)((char *)&v251 - v26);
  v265 = type metadata accessor for DeviceLockState(0);
  v264 = *(_QWORD *)(v265 - 8);
  v28 = __chkstk_darwin(v265, v27);
  v263 = (uint64_t *)((char *)&v251 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28, v30);
  v262 = (uint64_t *)((char *)&v251 - v31);
  v274 = sub_100008F88(&qword_10013CA70);
  v273 = *(_QWORD *)(v274 - 8);
  __chkstk_darwin(v274, v32);
  v270 = (char *)&v251 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = sub_100008F88(&qword_10013EA50);
  __chkstk_darwin(v272, v34);
  v277 = (uint64_t)&v251 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  v38 = __chkstk_darwin(v36, v37);
  v271 = (uint64_t)&v251 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v38, v40);
  v275 = (uint64_t *)((char *)&v251 - v42);
  __chkstk_darwin(v41, v43);
  v276 = (uint64_t *)((char *)&v251 - v44);
  v283 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v281 = *(_QWORD *)(v283 - 8);
  __chkstk_darwin(v283, v45);
  v278 = (char *)&v251 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = sub_100008F88(&qword_10013EA58);
  __chkstk_darwin(v280, v47);
  v282 = (uint64_t)&v251 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100008F88(&qword_10013C9E0);
  v51 = __chkstk_darwin(v49, v50);
  v279 = (uint64_t)&v251 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __chkstk_darwin(v51, v53);
  v284 = (uint64_t *)((char *)&v251 - v55);
  __chkstk_darwin(v54, v56);
  v285 = (uint64_t *)((char *)&v251 - v57);
  v59 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v58);
  v60 = *(_QWORD *)(v59 - 8);
  v62 = __chkstk_darwin(v59, v61);
  v64 = (uint64_t *)((char *)&v251 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v62, v65);
  v67 = (uint64_t *)((char *)&v251 - v66);
  v68 = v1;
  v69 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  v70 = a1;
  v72 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v71 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v71);
  v73._countAndFlagsBits = v72;
  v73._object = v71;
  LOBYTE(v72) = String.hasPrefix(_:)(v73);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v71);
  if ((v72 & 1) == 0)
    goto LABEL_10;
  KeyPath = swift_getKeyPath(&unk_1000ECD58);
  v75 = swift_getKeyPath(&unk_1000ECD80);
  static Published.subscript.getter(v67, v68, KeyPath, v75);
  swift_release(KeyPath);
  swift_release(v75);
  v76 = swift_getKeyPath(&unk_1000ECD58);
  v77 = swift_getKeyPath(&unk_1000ECD80);
  static Published.subscript.getter(v64, v70, v76, v77);
  swift_release(v76);
  v78 = swift_release(v77);
  LOBYTE(v76) = static SFAirDropReceive.Transfer.State.== infix(_:_:)(v67, v64, v78);
  v79 = *(void (**)(_QWORD *, uint64_t))(v60 + 8);
  v79(v64, v59);
  v79(v67, v59);
  if ((v76 & 1) == 0)
    goto LABEL_10;
  v80 = v70;
  v81 = swift_getKeyPath(&unk_1000ECDA0);
  v82 = swift_getKeyPath(&unk_1000ECDC8);
  v83 = v285;
  static Published.subscript.getter(v285, v68, v81, v82);
  swift_release(v81);
  swift_release(v82);
  v84 = swift_getKeyPath(&unk_1000ECDA0);
  v85 = swift_getKeyPath(&unk_1000ECDC8);
  v86 = v284;
  static Published.subscript.getter(v284, v80, v84, v85);
  swift_release(v84);
  swift_release(v85);
  v87 = v282;
  v88 = v282 + *(int *)(v280 + 48);
  sub_10000CC18((uint64_t)v83, v282, &qword_10013C9E0);
  sub_10000CC18((uint64_t)v86, v88, &qword_10013C9E0);
  v89 = v281;
  v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v281 + 48);
  v91 = v283;
  if (v90(v87, 1, v283) == 1)
  {
    sub_10000CC5C((uint64_t)v86, &qword_10013C9E0);
    sub_10000CC5C((uint64_t)v83, &qword_10013C9E0);
    if (v90(v88, 1, v91) == 1)
    {
      sub_10000CC5C(v87, &qword_10013C9E0);
      goto LABEL_13;
    }
LABEL_8:
    v93 = &qword_10013EA58;
    v94 = v87;
    goto LABEL_9;
  }
  v92 = v279;
  sub_10000CC18(v87, v279, &qword_10013C9E0);
  if (v90(v88, 1, v91) == 1)
  {
    sub_10000CC5C((uint64_t)v284, &qword_10013C9E0);
    sub_10000CC5C((uint64_t)v285, &qword_10013C9E0);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v92, v91);
    goto LABEL_8;
  }
  v97 = v68;
  v98 = v278;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v278, v88, v91);
  v99 = sub_100008694(&qword_10013EA80, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Transfer.State);
  v100 = dispatch thunk of static Equatable.== infix(_:_:)(v92, v98, v91, v99);
  v101 = *(void (**)(char *, uint64_t))(v89 + 8);
  v102 = v98;
  v68 = v97;
  v101(v102, v91);
  sub_10000CC5C((uint64_t)v284, &qword_10013C9E0);
  sub_10000CC5C((uint64_t)v285, &qword_10013C9E0);
  v101((char *)v92, v91);
  sub_10000CC5C(v87, &qword_10013C9E0);
  if ((v100 & 1) == 0)
    goto LABEL_10;
LABEL_13:
  v103 = (_QWORD *)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v104 = *(_QWORD *)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  v105 = (_QWORD *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v106 = *(_QWORD *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  if (v104)
  {
    if (!v106)
      goto LABEL_10;
    if (*v103 != *v105 || v104 != v106)
    {
      v107 = _stringCompareWithSmolCheck(_:_:expecting:)(*v103, v104, *v105, v106, 0);
      v95 = 0;
      if ((v107 & 1) == 0)
        return v95 & 1;
    }
  }
  else if (v106)
  {
    goto LABEL_10;
  }
  v108 = (_QWORD *)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v109 = *(_QWORD *)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  v110 = (_QWORD *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v111 = *(_QWORD *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  if (!v109)
  {
    if (v111)
      goto LABEL_10;
    goto LABEL_27;
  }
  if (!v111)
    goto LABEL_10;
  if (*v108 == *v110 && v109 == v111
    || (v112 = _stringCompareWithSmolCheck(_:_:expecting:)(*v108, v109, *v110, v111, 0), v95 = 0, (v112 & 1) != 0))
  {
LABEL_27:
    if (*(unsigned __int8 *)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) != *(unsigned __int8 *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe))
      goto LABEL_10;
    v113 = swift_getKeyPath(&unk_1000EC920);
    v114 = swift_getKeyPath(&unk_1000EC948);
    static Published.subscript.getter(&v289, v68, v113, v114);
    swift_release(v113);
    swift_release(v114);
    LODWORD(v114) = v289;
    v115 = swift_getKeyPath(&unk_1000EC920);
    v116 = swift_getKeyPath(&unk_1000EC948);
    static Published.subscript.getter(&v289, v80, v115, v116);
    swift_release(v115);
    swift_release(v116);
    if ((_DWORD)v114 != v289)
      goto LABEL_10;
    v117 = swift_getKeyPath(&unk_1000EC968);
    v118 = swift_getKeyPath(&unk_1000EC990);
    static Published.subscript.getter(&v289, v68, v117, v118);
    swift_release(v117);
    swift_release(v118);
    v119 = v289;
    v120 = swift_getKeyPath(&unk_1000EC968);
    v121 = swift_getKeyPath(&unk_1000EC990);
    static Published.subscript.getter(&v289, v80, v120, v121);
    swift_release(v120);
    swift_release(v121);
    if (v119 != v289)
      goto LABEL_10;
    v122 = swift_getKeyPath(&unk_1000EC9B0);
    v123 = swift_getKeyPath(&unk_1000EC9D8);
    static Published.subscript.getter(&v289, v68, v122, v123);
    swift_release(v122);
    swift_release(v123);
    v124 = v289;
    v125 = swift_getKeyPath(&unk_1000EC9B0);
    v126 = swift_getKeyPath(&unk_1000EC9D8);
    static Published.subscript.getter(&v289, v80, v125, v126);
    swift_release(v125);
    swift_release(v126);
    if (v124 != v289)
      goto LABEL_10;
    v127 = swift_getKeyPath(&unk_1000EC9F8);
    v128 = swift_getKeyPath(&unk_1000ECA20);
    static Published.subscript.getter(&v289, v68, v127, v128);
    swift_release(v127);
    swift_release(v128);
    v130 = v289;
    v129 = v290;
    v131 = swift_getKeyPath(&unk_1000EC9F8);
    v132 = swift_getKeyPath(&unk_1000ECA20);
    static Published.subscript.getter(&v289, v80, v131, v132);
    swift_release(v131);
    swift_release(v132);
    v133 = v290;
    if (v129)
    {
      if (v290)
      {
        if (v130 == v289 && v129 == v290)
        {
          swift_bridgeObjectRelease(v129);
          swift_bridgeObjectRelease(v133);
        }
        else
        {
          v135 = _stringCompareWithSmolCheck(_:_:expecting:)(v130, v129, v289, v290, 0);
          swift_bridgeObjectRelease(v129);
          swift_bridgeObjectRelease(v133);
          v95 = 0;
          if ((v135 & 1) == 0)
            return v95 & 1;
        }
LABEL_41:
        sub_100018D44(0, &qword_10013EA60, NSObject_ptr);
        v136 = swift_getKeyPath(&unk_1000ECA40);
        v137 = swift_getKeyPath(&unk_1000ECA68);
        static Published.subscript.getter(&v289, v68, v136, v137);
        swift_release(v136);
        swift_release(v137);
        v138 = v289;
        v139 = swift_getKeyPath(&unk_1000ECA40);
        v140 = swift_getKeyPath(&unk_1000ECA68);
        static Published.subscript.getter(&v289, v80, v139, v140);
        swift_release(v139);
        swift_release(v140);
        v141 = v289;
        v142 = static NSObject.== infix(_:_:)(v138, v289);

        if ((v142 & 1) == 0)
          goto LABEL_10;
        v143 = swift_getKeyPath(&unk_1000ECA88);
        v144 = swift_getKeyPath(&unk_1000ECAB0);
        v145 = v68;
        v146 = v276;
        static Published.subscript.getter(v276, v145, v143, v144);
        swift_release(v143);
        swift_release(v144);
        v147 = swift_getKeyPath(&unk_1000ECA88);
        v148 = swift_getKeyPath(&unk_1000ECAB0);
        v149 = v275;
        static Published.subscript.getter(v275, v80, v147, v148);
        swift_release(v147);
        swift_release(v148);
        v150 = v277;
        v151 = v277 + *(int *)(v272 + 48);
        sub_10000CC18((uint64_t)v146, v277, (uint64_t *)&unk_10013DCB0);
        sub_10000CC18((uint64_t)v149, v151, (uint64_t *)&unk_10013DCB0);
        v152 = v273;
        v153 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v273 + 48);
        v154 = v150;
        v155 = v274;
        v156 = v145;
        if (v153(v154, 1, v274) == 1)
        {
          sub_10000CC5C((uint64_t)v275, (uint64_t *)&unk_10013DCB0);
          sub_10000CC5C((uint64_t)v276, (uint64_t *)&unk_10013DCB0);
          if (v153(v151, 1, v155) == 1)
          {
            sub_10000CC5C(v277, (uint64_t *)&unk_10013DCB0);
            goto LABEL_49;
          }
        }
        else
        {
          v157 = v271;
          sub_10000CC18(v277, v271, (uint64_t *)&unk_10013DCB0);
          if (v153(v151, 1, v155) != 1)
          {
            v158 = v270;
            (*(void (**)(char *, uint64_t, uint64_t))(v152 + 32))(v270, v151, v155);
            v159 = sub_10000CB94(&qword_10013EA78, &qword_10013CA70, (uint64_t)&protocol conformance descriptor for SFAirDrop.PermissionRequest<A>);
            v160 = dispatch thunk of static Equatable.== infix(_:_:)(v157, v158, v155, v159);
            v161 = *(void (**)(char *, uint64_t))(v152 + 8);
            v161(v158, v155);
            sub_10000CC5C((uint64_t)v275, (uint64_t *)&unk_10013DCB0);
            sub_10000CC5C((uint64_t)v276, (uint64_t *)&unk_10013DCB0);
            v161((char *)v157, v155);
            sub_10000CC5C(v277, (uint64_t *)&unk_10013DCB0);
            if ((v160 & 1) == 0)
              goto LABEL_10;
LABEL_49:
            v162 = swift_getKeyPath(&unk_1000ECAD0);
            v163 = swift_getKeyPath(&unk_1000ECAF8);
            static Published.subscript.getter(&v289, v156, v162, v163);
            swift_release(v162);
            swift_release(v163);
            v164 = v289;
            v165 = swift_getKeyPath(&unk_1000ECAD0);
            v166 = swift_getKeyPath(&unk_1000ECAF8);
            static Published.subscript.getter(&v289, v80, v165, v166);
            swift_release(v165);
            swift_release(v166);
            v167 = v289;
            if (v164)
            {
              if (!v289)
                goto LABEL_72;
              sub_100018D44(0, &qword_10013EA70, UIImage_ptr);
              v168 = v164;
              v169 = static NSObject.== infix(_:_:)(v168, v167);

              if ((v169 & 1) == 0)
                goto LABEL_10;
            }
            else if (v289)
            {
              goto LABEL_59;
            }
            v170 = swift_getKeyPath(&unk_1000ECB18);
            v171 = swift_getKeyPath(&unk_1000ECB40);
            static Published.subscript.getter(&v289, v156, v170, v171);
            swift_release(v170);
            swift_release(v171);
            v164 = v289;
            v172 = swift_getKeyPath(&unk_1000ECB18);
            v173 = swift_getKeyPath(&unk_1000ECB40);
            static Published.subscript.getter(&v289, v80, v172, v173);
            swift_release(v172);
            swift_release(v173);
            v167 = v289;
            if (v164)
            {
              if (!v289)
                goto LABEL_72;
              sub_100018D44(0, &qword_10013EA70, UIImage_ptr);
              v174 = v164;
              v175 = static NSObject.== infix(_:_:)(v174, v167);

              if ((v175 & 1) == 0)
                goto LABEL_10;
            }
            else if (v289)
            {
              goto LABEL_59;
            }
            v176 = swift_getKeyPath(&unk_1000ECB60);
            v177 = swift_getKeyPath(&unk_1000ECB88);
            static Published.subscript.getter(&v289, v156, v176, v177);
            swift_release(v176);
            swift_release(v177);
            LODWORD(v177) = v289;
            v178 = swift_getKeyPath(&unk_1000ECB60);
            v179 = swift_getKeyPath(&unk_1000ECB88);
            static Published.subscript.getter(&v289, v80, v178, v179);
            swift_release(v178);
            swift_release(v179);
            if ((_DWORD)v177 != v289)
              goto LABEL_10;
            v180 = swift_getKeyPath(&unk_1000ECBA8);
            v181 = swift_getKeyPath(&unk_1000ECBD0);
            static Published.subscript.getter(&v289, v156, v180, v181);
            swift_release(v180);
            swift_release(v181);
            LODWORD(v181) = v289;
            v182 = swift_getKeyPath(&unk_1000ECBA8);
            v183 = swift_getKeyPath(&unk_1000ECBD0);
            static Published.subscript.getter(&v289, v80, v182, v183);
            swift_release(v182);
            swift_release(v183);
            if ((_DWORD)v181 != v289)
              goto LABEL_10;
            v184 = swift_getKeyPath(&unk_1000ECBF0);
            v185 = swift_getKeyPath(&unk_1000ECC18);
            static Published.subscript.getter(&v289, v156, v184, v185);
            swift_release(v184);
            swift_release(v185);
            LODWORD(v185) = v289;
            v186 = swift_getKeyPath(&unk_1000ECBF0);
            v187 = swift_getKeyPath(&unk_1000ECC18);
            static Published.subscript.getter(&v289, v80, v186, v187);
            swift_release(v186);
            swift_release(v187);
            if ((_DWORD)v185 != v289)
              goto LABEL_10;
            v188 = swift_getKeyPath(&unk_1000ECC38);
            v189 = swift_getKeyPath(&unk_1000ECC60);
            static Published.subscript.getter(&v289, v156, v188, v189);
            swift_release(v188);
            swift_release(v189);
            v164 = v289;
            v190 = swift_getKeyPath(&unk_1000ECC38);
            v191 = swift_getKeyPath(&unk_1000ECC60);
            static Published.subscript.getter(&v289, v80, v190, v191);
            swift_release(v190);
            swift_release(v191);
            v167 = v289;
            if (v164)
            {
              if (!v289)
                goto LABEL_72;
              sub_100018D44(0, &qword_10013EA70, UIImage_ptr);
              v192 = v164;
              v193 = static NSObject.== infix(_:_:)(v192, v167);

              if ((v193 & 1) == 0)
                goto LABEL_10;
            }
            else if (v289)
            {
              goto LABEL_59;
            }
            v194 = swift_getKeyPath(&unk_1000ECC80);
            v195 = swift_getKeyPath(&unk_1000ECCA8);
            static Published.subscript.getter(&v289, v156, v194, v195);
            swift_release(v194);
            swift_release(v195);
            v164 = v289;
            v196 = swift_getKeyPath(&unk_1000ECC80);
            v197 = swift_getKeyPath(&unk_1000ECCA8);
            static Published.subscript.getter(&v289, v80, v196, v197);
            swift_release(v196);
            swift_release(v197);
            v167 = v289;
            if (v164)
            {
              if (v289)
              {
                sub_100018D44(0, &qword_10013EA70, UIImage_ptr);
                v198 = v164;
                v199 = static NSObject.== infix(_:_:)(v198, v167);

                if ((v199 & 1) == 0)
                  goto LABEL_10;
                goto LABEL_74;
              }
LABEL_72:

              goto LABEL_10;
            }
            if (!v289)
            {
LABEL_74:
              v200 = swift_getKeyPath(&unk_1000ECCC8);
              v201 = swift_getKeyPath(&unk_1000ECCF0);
              v202 = v262;
              static Published.subscript.getter(v262, v156, v200, v201);
              swift_release(v200);
              swift_release(v201);
              v203 = swift_getKeyPath(&unk_1000ECCC8);
              v204 = swift_getKeyPath(&unk_1000ECCF0);
              v205 = v263;
              static Published.subscript.getter(v263, v80, v203, v204);
              swift_release(v203);
              v206 = swift_release(v204);
              LOBYTE(v203) = static DeviceLockState.== infix(_:_:)(v202, v205, v206);
              v207 = *(void (**)(_QWORD *, uint64_t))(v264 + 8);
              v208 = v205;
              v209 = v265;
              v207(v208, v265);
              v207(v202, v209);
              if ((v203 & 1) == 0)
                goto LABEL_10;
              v210 = swift_getKeyPath(&unk_1000ECD10);
              v211 = swift_getKeyPath(&unk_1000ECD38);
              v212 = v266;
              static Published.subscript.getter(v266, v156, v210, v211);
              swift_release(v210);
              swift_release(v211);
              v213 = swift_getKeyPath(&unk_1000ECD10);
              v214 = swift_getKeyPath(&unk_1000ECD38);
              v215 = v267;
              static Published.subscript.getter(v267, v80, v213, v214);
              swift_release(v213);
              v216 = swift_release(v214);
              LOBYTE(v213) = static SFAirDrop.DisplayPriority.== infix(_:_:)(v212, v215, v216);
              v217 = *(void (**)(_QWORD *, uint64_t))(v268 + 8);
              v218 = v215;
              v219 = v269;
              v217(v218, v269);
              v217(v212, v219);
              if ((v213 & 1) == 0)
                goto LABEL_10;
              v220 = *(_QWORD *)(v156 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
              v221 = *(_QWORD *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
              swift_bridgeObjectRetain(v220);
              swift_bridgeObjectRetain(v221);
              v222 = sub_10000D3FC(v220, v221);
              swift_bridgeObjectRelease(v220);
              swift_bridgeObjectRelease(v221);
              if ((v222 & 1) == 0)
                goto LABEL_10;
              v223 = *(_QWORD *)(v156 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
              v224 = *(_QWORD *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
              swift_bridgeObjectRetain(v223);
              swift_bridgeObjectRetain(v224);
              v225 = sub_10000D6F0(v223, v224);
              swift_bridgeObjectRelease(v223);
              swift_bridgeObjectRelease(v224);
              if ((v225 & 1) == 0)
                goto LABEL_10;
              v226 = v156 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
              swift_beginAccess(v156 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, &v289, 0, 0);
              v227 = v252;
              sub_10000CC18(v226, v252, &qword_10013CD20);
              v228 = v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
              swift_beginAccess(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, v288, 0, 0);
              v229 = v254;
              v230 = v254 + *(int *)(v255 + 48);
              sub_10000CC18(v227, v254, &qword_10013CD20);
              sub_10000CC18(v228, v230, &qword_10013CD20);
              v231 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v259 + 48);
              if (v231(v229, 1, v261) == 1)
              {
                sub_10000CC5C(v252, &qword_10013CD20);
                if (v231(v230, 1, v261) == 1)
                {
                  sub_10000CC5C(v254, &qword_10013CD20);
LABEL_85:
                  v239 = v156 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
                  swift_beginAccess(v156 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v287, 0, 0);
                  v240 = v256;
                  sub_10000CC18(v239, v256, &qword_10013CD20);
                  v241 = v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
                  swift_beginAccess(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v286, 0, 0);
                  v242 = v260;
                  v243 = v260 + *(int *)(v255 + 48);
                  sub_10000CC18(v240, v260, &qword_10013CD20);
                  sub_10000CC18(v241, v243, &qword_10013CD20);
                  if (v231(v242, 1, v261) == 1)
                  {
                    sub_10000CC5C(v256, &qword_10013CD20);
                    if (v231(v243, 1, v261) == 1)
                    {
                      sub_10000CC5C(v260, &qword_10013CD20);
LABEL_92:
                      v95 = *(_BYTE *)(v156 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) ^ *(_BYTE *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) ^ 1;
                      return v95 & 1;
                    }
                  }
                  else
                  {
                    sub_10000CC18(v260, v257, &qword_10013CD20);
                    if (v231(v243, 1, v261) != 1)
                    {
                      v244 = v259;
                      v245 = v258;
                      v246 = v261;
                      (*(void (**)(char *, uint64_t, uint64_t))(v259 + 32))(v258, v243, v261);
                      v247 = sub_100008694(&qword_10013EA68, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                      v248 = v257;
                      v249 = dispatch thunk of static Equatable.== infix(_:_:)(v257, v245, v246, v247);
                      v250 = *(void (**)(char *, uint64_t))(v244 + 8);
                      v250(v245, v246);
                      sub_10000CC5C(v256, &qword_10013CD20);
                      v250((char *)v248, v246);
                      sub_10000CC5C(v260, &qword_10013CD20);
                      if ((v249 & 1) != 0)
                        goto LABEL_92;
                      goto LABEL_10;
                    }
                    sub_10000CC5C(v256, &qword_10013CD20);
                    (*(void (**)(uint64_t, uint64_t))(v259 + 8))(v257, v261);
                  }
                  v93 = &qword_10013EA48;
                  v94 = v260;
                  goto LABEL_9;
                }
              }
              else
              {
                sub_10000CC18(v254, v253, &qword_10013CD20);
                if (v231(v230, 1, v261) != 1)
                {
                  v232 = v259;
                  v233 = v258;
                  v234 = v261;
                  (*(void (**)(char *, uint64_t, uint64_t))(v259 + 32))(v258, v230, v261);
                  v235 = sub_100008694(&qword_10013EA68, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                  v236 = v253;
                  v237 = dispatch thunk of static Equatable.== infix(_:_:)(v253, v233, v234, v235);
                  v238 = *(void (**)(char *, uint64_t))(v232 + 8);
                  v238(v233, v234);
                  sub_10000CC5C(v252, &qword_10013CD20);
                  v238((char *)v236, v234);
                  sub_10000CC5C(v254, &qword_10013CD20);
                  if ((v237 & 1) == 0)
                    goto LABEL_10;
                  goto LABEL_85;
                }
                sub_10000CC5C(v252, &qword_10013CD20);
                (*(void (**)(uint64_t, uint64_t))(v259 + 8))(v253, v261);
              }
              v93 = &qword_10013EA48;
              v94 = v254;
LABEL_9:
              sub_10000CC5C(v94, v93);
LABEL_10:
              v95 = 0;
              return v95 & 1;
            }
LABEL_59:

            goto LABEL_10;
          }
          sub_10000CC5C((uint64_t)v275, (uint64_t *)&unk_10013DCB0);
          sub_10000CC5C((uint64_t)v276, (uint64_t *)&unk_10013DCB0);
          (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v157, v155);
        }
        v93 = &qword_10013EA50;
        v94 = v277;
        goto LABEL_9;
      }
      v134 = v129;
    }
    else
    {
      if (!v290)
        goto LABEL_41;
      v134 = v290;
    }
    swift_bridgeObjectRelease(v134);
    goto LABEL_10;
  }
  return v95 & 1;
}

void sub_100072510(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10013E300)
  {
    v2 = sub_100018D44(255, &qword_10013E308, NSProgress_ptr);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10013E300);
  }
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes()
{
  return &type metadata for AirDropActivityAttributes;
}

unint64_t sub_100072588()
{
  unint64_t result;

  result = qword_10013E9B8;
  if (!qword_10013E9B8)
  {
    result = swift_getWitnessTable(&unk_1000EC764, &type metadata for AirDropActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_10013E9B8);
  }
  return result;
}

unint64_t sub_1000725D0()
{
  unint64_t result;

  result = qword_10013E9C0;
  if (!qword_10013E9C0)
  {
    result = swift_getWitnessTable(&unk_1000EC73C, &type metadata for AirDropActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_10013E9C0);
  }
  return result;
}

unint64_t sub_100072618()
{
  unint64_t result;

  result = qword_10013E9C8;
  if (!qword_10013E9C8)
  {
    result = swift_getWitnessTable(&unk_1000EC86C, &type metadata for AirDropActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013E9C8);
  }
  return result;
}

unint64_t sub_100072660()
{
  unint64_t result;

  result = qword_10013E9D0;
  if (!qword_10013E9D0)
  {
    result = swift_getWitnessTable(&unk_1000EC844, &type metadata for AirDropActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013E9D0);
  }
  return result;
}

unint64_t sub_1000726A8()
{
  unint64_t result;

  result = qword_10013E9D8;
  if (!qword_10013E9D8)
  {
    result = swift_getWitnessTable(&unk_1000EC7DC, &type metadata for AirDropActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013E9D8);
  }
  return result;
}

unint64_t sub_1000726F0()
{
  unint64_t result;

  result = qword_10013E9E0;
  if (!qword_10013E9E0)
  {
    result = swift_getWitnessTable(&unk_1000EC81C, &type metadata for AirDropActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013E9E0);
  }
  return result;
}

uint64_t sub_100072734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for AirDropTransferSession(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

unint64_t sub_100072770(uint64_t a1, uint64_t a2)
{
  return sub_10006A1D4(a1, a2);
}

uint64_t sub_100072790(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v2 = *a2;
  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v4 = v3[1];
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  v7 = *v3 == v5 && v4 == v6;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v3, v4, v5, v6, 0) & 1) != 0)
    return sub_1000709D8(v2) & 1;
  else
    return 0;
}

uint64_t sub_1000727F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000EC9B0, (uint64_t)&unk_1000EC9D8, a2);
}

uint64_t sub_100072808(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000728BC(a1, a2, a3, a4, (uint64_t)&unk_1000EC9B0, (uint64_t)&unk_1000EC9D8);
}

uint64_t sub_10007281C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000EC968, (uint64_t)&unk_1000EC990, a2);
}

uint64_t sub_100072830@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_1000728A8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000728BC(a1, a2, a3, a4, (uint64_t)&unk_1000EC968, (uint64_t)&unk_1000EC990);
}

uint64_t sub_1000728BC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_100072928@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000ECB60, (uint64_t)&unk_1000ECB88, a2);
}

uint64_t sub_10007293C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000ECB60, (uint64_t)&unk_1000ECB88);
}

uint64_t sub_100072950@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000ECA40);
  v5 = swift_getKeyPath(&unk_1000ECA68);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000729CC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000ECA40);
  v5 = swift_getKeyPath(&unk_1000ECA68);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

double sub_100072A40@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EC9F8);
  v5 = swift_getKeyPath(&unk_1000ECA20);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_100072ABC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EC9F8);
  v6 = swift_getKeyPath(&unk_1000ECA20);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_100072B3C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000ECA88);
  v5 = swift_getKeyPath(&unk_1000ECAB0);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100072BA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v16 - v10;
  sub_10000CC18(a1, (uint64_t)&v16 - v10, (uint64_t *)&unk_10013DCB0);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000ECA88);
  v14 = swift_getKeyPath(&unk_1000ECAB0);
  sub_10000CC18((uint64_t)v11, (uint64_t)v7, (uint64_t *)&unk_10013DCB0);
  swift_retain(v12);
  static Published.subscript.setter(v7, v12, KeyPath, v14);
  return sub_10000CC5C((uint64_t)v11, (uint64_t *)&unk_10013DCB0);
}

uint64_t sub_100072C9C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECAD0, (uint64_t)&unk_1000ECAF8, a2);
}

uint64_t sub_100072CB0(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECAD0, (uint64_t)&unk_1000ECAF8);
}

uint64_t sub_100072CC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECB18, (uint64_t)&unk_1000ECB40, a2);
}

uint64_t sub_100072CD8(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECB18, (uint64_t)&unk_1000ECB40);
}

uint64_t sub_100072CEC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000ECBA8, (uint64_t)&unk_1000ECBD0, a2);
}

uint64_t sub_100072D00(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000ECBA8, (uint64_t)&unk_1000ECBD0);
}

uint64_t sub_100072D14@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000ECBF0, (uint64_t)&unk_1000ECC18, a2);
}

uint64_t sub_100072D28(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000ECBF0, (uint64_t)&unk_1000ECC18);
}

uint64_t sub_100072D3C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECC38, (uint64_t)&unk_1000ECC60, a2);
}

uint64_t sub_100072D50(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECC38, (uint64_t)&unk_1000ECC60);
}

uint64_t sub_100072D64@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECC80, (uint64_t)&unk_1000ECCA8, a2);
}

uint64_t sub_100072D78(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECC80, (uint64_t)&unk_1000ECCA8);
}

uint64_t sub_100072D8C(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  void *v13;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v13 = v7;
  v11 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v13, v8, KeyPath, v10);
}

uint64_t sub_100072DFC(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5;
  uint64_t v6;
  uint64_t result;
  double v8;
  uint64_t v9;

  v5 = a4();
  v6 = *a1 + 8;
  v8 = v5;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
  *a1 = v6;
  return result;
}

uint64_t sub_100072E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v0 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013EA30);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008F88(&qword_10013CD08);
  result = static Activity.activities.getter();
  v21 = result;
  if (!((unint64_t)result >> 62))
  {
    v22 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v21, v14, v15, v16, v17, v18, v19, v20);
LABEL_14:
    v35 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v3, 1, 1, v35);
    v36 = static Task<>.noThrow(priority:operation:)(v3, &unk_10013EA40, 0, (char *)&type metadata for () + 8);
    swift_release(v36);
    return sub_10000CC5C((uint64_t)v3, &qword_10013BCC0);
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v22 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v22 >= 1)
  {
    v38 = v3;
    v23 = 0;
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
      {
        v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v21);
      }
      else
      {
        v24 = *(_QWORD *)(v21 + 8 * v23 + 32);
        swift_retain(v24);
      }
      ++v23;
      v25 = sub_100008F88(&qword_10013EA38);
      v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 1, 1, v25);
      static ActivityUIDismissalPolicy.immediate.getter(v26);
      dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v12, v8);
      v27 = swift_release(v24);
      (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v27);
      sub_10000CC5C((uint64_t)v12, &qword_10013EA30);
    }
    while (v22 != v23);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v21, v28, v29, v30, v31, v32, v33, v34);
    v3 = v38;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000730A0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, char *, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  _QWORD *v94;
  void (*v95)(_QWORD, _QWORD);
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t KeyPath;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *Strong;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  __n128 v190;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(_QWORD, _QWORD);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  void (*v215)(uint64_t, char *, uint64_t);
  char *v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244[8];
  _QWORD v245[2];
  uint64_t v246;
  uint64_t v247;

  v232 = a4;
  v204 = a3;
  v202 = a2;
  v203 = a1;
  v231 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v230 = *(_QWORD *)(v231 - 8);
  v6 = __chkstk_darwin(v231, v5);
  v229 = (char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v228 = (uint64_t *)((char *)&v192 - v9);
  v10 = sub_100008F88(&qword_10013CD20);
  __chkstk_darwin(v10, v11);
  v227 = (uint64_t)&v192 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v225 = *(_QWORD *)(v226 - 8);
  v14 = __chkstk_darwin(v226, v13);
  v224 = (char *)&v192 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  v223 = (uint64_t *)((char *)&v192 - v17);
  v222 = type metadata accessor for DeviceLockState(0);
  v221 = *(_QWORD *)(v222 - 8);
  v19 = __chkstk_darwin(v222, v18);
  v220 = (char *)&v192 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  v218 = (uint64_t *)((char *)&v192 - v22);
  v192 = sub_100008F88(&qword_10013D298);
  v239 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192, v23);
  v25 = (char *)&v192 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008F88(&qword_10013EA18);
  v237 = *(_QWORD *)(v26 - 8);
  v238 = v26;
  __chkstk_darwin(v26, v27);
  v216 = (char *)&v192 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  v30 = __chkstk_darwin(v236, v29);
  v235 = (uint64_t)&v192 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  v234 = (uint64_t *)((char *)&v192 - v33);
  v34 = sub_100008F88(&qword_10013EA20);
  v242 = *(_QWORD *)(v34 - 8);
  v243 = v34;
  __chkstk_darwin(v34, v35);
  v214 = (char *)&v192 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = sub_100008F88(&qword_10013C9E0);
  v38 = __chkstk_darwin(v241, v37);
  v240 = (uint64_t)&v192 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v40);
  v42 = (uint64_t *)((char *)&v192 - v41);
  v43 = sub_100008F88(&qword_10013EA28);
  v44 = *(_QWORD *)(v43 - 8);
  v198 = v43;
  v45 = v44;
  v199 = v44;
  __chkstk_darwin(v43, v46);
  v48 = (char *)&v192 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100008F88(&qword_10013C4C0);
  v50 = *(_QWORD *)(v49 - 8);
  v233 = v49;
  v51 = v50;
  v196 = v50;
  v53 = __chkstk_darwin(v49, v52);
  v55 = (char *)&v192 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v53);
  v56 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v193 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  *v56 = 0;
  v56[1] = 0;
  v57 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v194 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  *v57 = 0;
  v57[1] = 0;
  v58 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction;
  v59 = type metadata accessor for SFAirDrop.DeclineAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 1, 1, v59);
  v60 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  v195 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  LOBYTE(v246) = 0;
  Published.init(initialValue:)(&v246, &type metadata for Bool);
  v215 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
  v215(v60, v55, v49);
  v61 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  v197 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  v246 = 0;
  v247 = 0;
  v200 = sub_100008F88(&qword_10013B878);
  Published.init(initialValue:)(&v246, v200);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v61, v48, v43);
  v62 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  v217 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  v63 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v64 = (uint64_t)v42;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v42, 1, 1, v63);
  v65 = (uint64_t)v42;
  v219 = v42;
  v66 = v240;
  sub_10000CC18(v65, v240, &qword_10013C9E0);
  v67 = v214;
  Published.init(initialValue:)(v66, v241);
  sub_10000CC5C(v64, &qword_10013C9E0);
  (*(void (**)(uint64_t, char *, uint64_t))(v242 + 32))(v62, v67, v243);
  v68 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  v201 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  v69 = sub_100008F88(&qword_10013CA70);
  v70 = v234;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v234, 1, 1, v69);
  v71 = v235;
  sub_10000CC18((uint64_t)v70, v235, (uint64_t *)&unk_10013DCB0);
  v72 = v216;
  Published.init(initialValue:)(v71, v236);
  sub_10000CC5C((uint64_t)v70, (uint64_t *)&unk_10013DCB0);
  (*(void (**)(uint64_t, char *, uint64_t))(v237 + 32))(v68, v72, v238);
  v73 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  v205 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  v246 = 0;
  v74 = sub_100008F88((uint64_t *)&unk_10013EB30);
  Published.init(initialValue:)(&v246, v74);
  v75 = *(void (**)(uint64_t, char *, uint64_t))(v239 + 32);
  v76 = v192;
  v75(v73, v25, v192);
  v77 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage;
  v206 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage;
  v246 = 0;
  Published.init(initialValue:)(&v246, v74);
  v75(v77, v25, v76);
  v78 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage;
  v207 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage;
  LOBYTE(v246) = 0;
  Published.init(initialValue:)(&v246, &type metadata for Bool);
  v79 = v78;
  v80 = v233;
  v81 = v215;
  v215(v79, v55, v233);
  v82 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage;
  v208 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage;
  LOBYTE(v246) = 1;
  Published.init(initialValue:)(&v246, &type metadata for Bool);
  v83 = v55;
  v84 = v80;
  v81(v82, v83, v80);
  v85 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage;
  v209 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage;
  v246 = 0;
  Published.init(initialValue:)(&v246, v74);
  v75(v85, v25, v76);
  v86 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage;
  v210 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage;
  v246 = 0;
  v87 = v74;
  Published.init(initialValue:)(&v246, v74);
  v88 = v76;
  v75(v86, v25, v76);
  v211 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions) = &_swiftEmptyArrayStorage;
  v213 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs) = &_swiftEmptyArrayStorage;
  v89 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate;
  v216 = (char *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
  *(_QWORD *)(v89 + 8) = 0;
  swift_unknownObjectWeakInit(v89, 0);
  v90 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate;
  *(_QWORD *)(v90 + 8) = 0;
  swift_unknownObjectWeakInit(v90, 0);
  v215 = (void (*)(uint64_t, char *, uint64_t))OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = 0;
  v91 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  v212 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  v92 = type metadata accessor for Date(0);
  v93 = *(void (**)(void))(*(_QWORD *)(v92 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v93)(v91, 1, 1, v92);
  v214 = (char *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime);
  v93();
  v94 = (_QWORD *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v95 = v204;
  *v94 = v202;
  v94[1] = v95;
  v96 = v203;
  v97 = *(_QWORD *)(v203 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  v98 = v193;
  v99 = v193[1];
  *v193 = *(_QWORD *)(v203 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v98[1] = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v99);
  v100 = *(_QWORD *)(v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  v101 = v194;
  v102 = v194[1];
  *v194 = *(_QWORD *)(v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v101[1] = v100;
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRelease(v102);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) = *(_BYTE *)(v96
                                                                                          + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe);
  KeyPath = swift_getKeyPath(&unk_1000EC920);
  v104 = swift_getKeyPath(&unk_1000EC948);
  static Published.subscript.getter(&v246, v96, KeyPath, v104);
  swift_release(KeyPath);
  swift_release(v104);
  LOBYTE(KeyPath) = v246;
  v105 = v195;
  swift_beginAccess(v195, &v246, 33, 0);
  v204 = *(void (**)(_QWORD, _QWORD))(v196 + 8);
  v204(v105, v84);
  LOBYTE(v245[0]) = KeyPath;
  Published.init(initialValue:)(v245, &type metadata for Bool);
  swift_endAccess(&v246);
  v106 = swift_getKeyPath(&unk_1000EC968);
  v107 = swift_getKeyPath(&unk_1000EC990);
  static Published.subscript.getter(&v246, v96, v106, v107);
  swift_release(v106);
  swift_release(v107);
  v108 = v246;
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numTotalItems, &v246, 33, 0);
  v245[0] = v108;
  Published.init(initialValue:)(v245, &type metadata for Int);
  swift_endAccess(&v246);
  v109 = swift_getKeyPath(&unk_1000EC9B0);
  v110 = swift_getKeyPath(&unk_1000EC9D8);
  static Published.subscript.getter(&v246, v96, v109, v110);
  swift_release(v109);
  swift_release(v110);
  v111 = v246;
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numCompletedItems, &v246, 33, 0);
  v245[0] = v111;
  Published.init(initialValue:)(v245, &type metadata for Int);
  swift_endAccess(&v246);
  v112 = swift_getKeyPath(&unk_1000EC9F8);
  v113 = swift_getKeyPath(&unk_1000ECA20);
  static Published.subscript.getter(&v246, v96, v112, v113);
  swift_release(v112);
  swift_release(v113);
  v114 = v246;
  v115 = v247;
  v116 = v197;
  swift_beginAccess(v197, &v246, 33, 0);
  (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v116, v198);
  v245[0] = v114;
  v245[1] = v115;
  Published.init(initialValue:)(v245, v200);
  swift_endAccess(&v246);
  v117 = swift_getKeyPath(&unk_1000ECA40);
  v118 = swift_getKeyPath(&unk_1000ECA68);
  static Published.subscript.getter(&v246, v96, v117, v118);
  swift_release(v117);
  swift_release(v118);
  v119 = v246;
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__progress, &v246, 33, 0);
  v245[0] = v119;
  v120 = sub_100018D44(0, &qword_10013E308, NSProgress_ptr);
  Published.init(initialValue:)(v245, v120);
  swift_endAccess(&v246);
  v121 = swift_getKeyPath(&unk_1000ECA88);
  v122 = swift_getKeyPath(&unk_1000ECAB0);
  v123 = v234;
  static Published.subscript.getter(v234, v96, v121, v122);
  swift_release(v121);
  swift_release(v122);
  v124 = v201;
  swift_beginAccess(v201, &v246, 33, 0);
  (*(void (**)(uint64_t, uint64_t))(v237 + 8))(v124, v238);
  v125 = v235;
  sub_10000CC18((uint64_t)v123, v235, (uint64_t *)&unk_10013DCB0);
  Published.init(initialValue:)(v125, v236);
  sub_10000CC5C((uint64_t)v123, (uint64_t *)&unk_10013DCB0);
  swift_endAccess(&v246);
  v126 = swift_getKeyPath(&unk_1000ECAD0);
  v127 = swift_getKeyPath(&unk_1000ECAF8);
  static Published.subscript.getter(&v246, v96, v126, v127);
  swift_release(v126);
  swift_release(v127);
  v128 = v246;
  v129 = v205;
  swift_beginAccess(v205, &v246, 33, 0);
  v130 = *(void (**)(uint64_t, uint64_t))(v239 + 8);
  v130(v129, v76);
  v245[0] = v128;
  Published.init(initialValue:)(v245, v87);
  swift_endAccess(&v246);
  v131 = swift_getKeyPath(&unk_1000ECB18);
  v132 = swift_getKeyPath(&unk_1000ECB40);
  static Published.subscript.getter(&v246, v96, v131, v132);
  swift_release(v131);
  swift_release(v132);
  v133 = v246;
  v134 = v206;
  swift_beginAccess(v206, &v246, 33, 0);
  v130(v134, v76);
  v245[0] = v133;
  Published.init(initialValue:)(v245, v87);
  swift_endAccess(&v246);
  v135 = swift_getKeyPath(&unk_1000ECB60);
  v136 = swift_getKeyPath(&unk_1000ECB88);
  static Published.subscript.getter(&v246, v96, v135, v136);
  swift_release(v135);
  swift_release(v136);
  LOBYTE(v136) = v246;
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImageIsSensitive, &v246, 33, 0);
  LOBYTE(v245[0]) = v136;
  Published.init(initialValue:)(v245, &type metadata for Bool);
  swift_endAccess(&v246);
  v137 = swift_getKeyPath(&unk_1000ECBA8);
  v138 = swift_getKeyPath(&unk_1000ECBD0);
  static Published.subscript.getter(&v246, v96, v137, v138);
  swift_release(v137);
  swift_release(v138);
  LOBYTE(v137) = v246;
  v139 = v207;
  swift_beginAccess(v207, &v246, 33, 0);
  v140 = v233;
  v141 = v204;
  v204(v139, v233);
  LOBYTE(v245[0]) = v137;
  Published.init(initialValue:)(v245, &type metadata for Bool);
  swift_endAccess(&v246);
  v142 = swift_getKeyPath(&unk_1000ECBF0);
  v143 = swift_getKeyPath(&unk_1000ECC18);
  static Published.subscript.getter(&v246, v96, v142, v143);
  swift_release(v142);
  swift_release(v143);
  LOBYTE(v142) = v246;
  v144 = v208;
  swift_beginAccess(v208, &v246, 33, 0);
  v141(v144, v140);
  LOBYTE(v245[0]) = v142;
  Published.init(initialValue:)(v245, &type metadata for Bool);
  swift_endAccess(&v246);
  v145 = swift_getKeyPath(&unk_1000ECC38);
  v146 = swift_getKeyPath(&unk_1000ECC60);
  static Published.subscript.getter(&v246, v96, v145, v146);
  swift_release(v145);
  swift_release(v146);
  v147 = v246;
  v148 = v209;
  swift_beginAccess(v209, &v246, 33, 0);
  v130(v148, v88);
  v245[0] = v147;
  Published.init(initialValue:)(v245, v87);
  swift_endAccess(&v246);
  v149 = swift_getKeyPath(&unk_1000ECC80);
  v150 = swift_getKeyPath(&unk_1000ECCA8);
  static Published.subscript.getter(&v246, v96, v149, v150);
  swift_release(v149);
  swift_release(v150);
  v151 = v246;
  v152 = v210;
  swift_beginAccess(v210, &v246, 33, 0);
  v130(v152, v88);
  v245[0] = v151;
  Published.init(initialValue:)(v245, v87);
  swift_endAccess(&v246);
  v153 = swift_getKeyPath(&unk_1000ECCC8);
  v154 = swift_getKeyPath(&unk_1000ECCF0);
  v155 = v218;
  static Published.subscript.getter(v218, v96, v153, v154);
  swift_release(v153);
  swift_release(v154);
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__lockState, &v246, 33, 0);
  v156 = v221;
  v157 = v220;
  v158 = v222;
  (*(void (**)(char *, _QWORD *, uint64_t))(v221 + 16))(v220, v155, v222);
  Published.init(initialValue:)(v157, v158);
  (*(void (**)(_QWORD *, uint64_t))(v156 + 8))(v155, v158);
  swift_endAccess(&v246);
  v159 = swift_getKeyPath(&unk_1000ECD10);
  v160 = swift_getKeyPath(&unk_1000ECD38);
  v161 = v223;
  static Published.subscript.getter(v223, v96, v159, v160);
  swift_release(v159);
  swift_release(v160);
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__displayPriority, &v246, 33, 0);
  v162 = v225;
  v163 = v224;
  v164 = v226;
  (*(void (**)(char *, _QWORD *, uint64_t))(v225 + 16))(v224, v161, v226);
  Published.init(initialValue:)(v163, v164);
  (*(void (**)(_QWORD *, uint64_t))(v162 + 8))(v161, v164);
  swift_endAccess(&v246);
  v165 = *(_QWORD *)(v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
  v166 = *(_QWORD *)(v4 + v211);
  *(_QWORD *)(v4 + v211) = v165;
  swift_bridgeObjectRetain(v165);
  swift_bridgeObjectRelease(v166);
  v167 = *(_QWORD *)(v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
  v168 = *(_QWORD *)(v4 + v213);
  *(_QWORD *)(v4 + v213) = v167;
  swift_bridgeObjectRetain(v167);
  swift_bridgeObjectRelease(v168);
  v169 = v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  swift_beginAccess(v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, &v246, 0, 0);
  v170 = v227;
  sub_10000CC18(v169, v227, &qword_10013CD20);
  v171 = v212;
  swift_beginAccess(v212, v245, 33, 0);
  sub_100074E60(v170, v171);
  swift_endAccess(v245);
  v172 = v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
  swift_beginAccess(v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v245, 0, 0);
  sub_10000CC18(v172, v170, &qword_10013CD20);
  v173 = (uint64_t)v214;
  swift_beginAccess(v214, v244, 33, 0);
  sub_100074E60(v170, v173);
  swift_endAccess(v244);
  v174 = swift_getKeyPath(&unk_1000ECD58);
  v175 = swift_getKeyPath(&unk_1000ECD80);
  v176 = v228;
  static Published.subscript.getter(v228, v96, v174, v175);
  swift_release(v174);
  swift_release(v175);
  swift_beginAccess(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferState, v244, 33, 0);
  v177 = v230;
  v178 = v229;
  v179 = v231;
  (*(void (**)(char *, _QWORD *, uint64_t))(v230 + 16))(v229, v176, v231);
  Published.init(initialValue:)(v178, v179);
  (*(void (**)(_QWORD *, uint64_t))(v177 + 8))(v176, v179);
  swift_endAccess(v244);
  v180 = swift_getKeyPath(&unk_1000ECDA0);
  v181 = swift_getKeyPath(&unk_1000ECDC8);
  v182 = v219;
  static Published.subscript.getter(v219, v96, v180, v181);
  swift_release(v180);
  swift_release(v181);
  v183 = v217;
  swift_beginAccess(v217, v244, 33, 0);
  (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v183, v243);
  v184 = v240;
  sub_10000CC18((uint64_t)v182, v240, &qword_10013C9E0);
  Published.init(initialValue:)(v184, v241);
  sub_10000CC5C((uint64_t)v182, &qword_10013C9E0);
  swift_endAccess(v244);
  v185 = v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v96 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
  v187 = v216;
  *((_QWORD *)v216 + 1) = *(_QWORD *)(v185 + 8);
  swift_unknownObjectWeakAssign(v187, Strong);

  v188 = *(_QWORD *)((char *)v215 + v4);
  v189 = v232;
  *(_QWORD *)((char *)v215 + v4) = v232;
  swift_retain(v189);
  v190 = swift_release(v188);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) = SBUIIsSystemApertureEnabled(v190);
  return v4;
}

uint64_t sub_1000745F0(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a8;
  v46 = a7;
  v47 = a6;
  v54 = a5;
  v48 = a3;
  v49 = a4;
  v45 = a2;
  v52 = a9;
  v42 = a10;
  v43 = a1;
  v41 = a11;
  v11 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v40 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DeviceLockState(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v24);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v29 + 104))(v28, enum case for SFAirDropReceive.Transfer.State.created(_:));
  v30 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v23, v54, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v30);
  v44 = v16;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v50 = v15;
  v32(v19, v53, v15);
  v33 = v12;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v35 = v40;
  v51 = v11;
  v34(v40, v52, v11);
  v36 = type metadata accessor for AirDropTransferSession(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  sub_10006A548(v43, v45, 0, 0, 0, v48, v49, (uint64_t)v28, (uint64_t)v23, v47, v46, v19, v35, v42, v41, 0);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v52, v51);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v53, v50);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v54, v30);
  return v37;
}

uint64_t sub_100074880(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696E556C61746F74 && a2 == 0xEE00746E756F4374)
  {
    v5 = 0xEE00746E756F4374;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696E556C61746F74, 0xEE00746E756F4374, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001000F1FE0)
  {
    swift_bridgeObjectRelease(0x80000001000F1FE0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000F1FE0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100074990(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;

  v3 = sub_100008F88(&qword_10013E9E8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000904C(a1, v8);
  v10 = sub_100074AE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirDropActivityAttributes.ContentState.CodingKeys, &type metadata for AirDropActivityAttributes.ContentState.CodingKeys, v10, v8, v9);
  if (!v1)
  {
    v14 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  sub_100009070(a1);
  return v8;
}

unint64_t sub_100074AE0()
{
  unint64_t result;

  result = qword_10013E9F0;
  if (!qword_10013E9F0)
  {
    result = swift_getWitnessTable(&unk_1000ED050, &type metadata for AirDropActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013E9F0);
  }
  return result;
}

unint64_t sub_100074B24()
{
  unint64_t result;

  result = qword_10013EA08;
  if (!qword_10013EA08)
  {
    result = swift_getWitnessTable(&unk_1000ED000, &type metadata for AirDropActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013EA08);
  }
  return result;
}

uint64_t sub_100074B68@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000EC920, (uint64_t)&unk_1000EC948, a2);
}

uint64_t sub_100074B8C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000EC920, (uint64_t)&unk_1000EC948);
}

uint64_t sub_100074BB0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000EC968, (uint64_t)&unk_1000EC990, a2);
}

uint64_t sub_100074BD4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000728BC(a1, a2, a3, a4, (uint64_t)&unk_1000EC968, (uint64_t)&unk_1000EC990);
}

uint64_t sub_100074BF8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000EC9B0, (uint64_t)&unk_1000EC9D8, a2);
}

uint64_t sub_100074C1C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000728BC(a1, a2, a3, a4, (uint64_t)&unk_1000EC9B0, (uint64_t)&unk_1000EC9D8);
}

uint64_t sub_100074C58@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECAD0, (uint64_t)&unk_1000ECAF8, a2);
}

uint64_t sub_100074C7C(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECAD0, (uint64_t)&unk_1000ECAF8);
}

uint64_t sub_100074CA0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECB18, (uint64_t)&unk_1000ECB40, a2);
}

uint64_t sub_100074CC4(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECB18, (uint64_t)&unk_1000ECB40);
}

uint64_t sub_100074CE8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000ECB60, (uint64_t)&unk_1000ECB88, a2);
}

uint64_t sub_100074D0C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000ECB60, (uint64_t)&unk_1000ECB88);
}

uint64_t sub_100074D30@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000ECBA8, (uint64_t)&unk_1000ECBD0, a2);
}

uint64_t sub_100074D54(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000ECBA8, (uint64_t)&unk_1000ECBD0);
}

uint64_t sub_100074D78@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10005B9C0(a1, (uint64_t)&unk_1000ECBF0, (uint64_t)&unk_1000ECC18, a2);
}

uint64_t sub_100074D9C(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10005BA4C(a1, a2, a3, a4, (uint64_t)&unk_1000ECBF0, (uint64_t)&unk_1000ECC18);
}

uint64_t sub_100074DC0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECC38, (uint64_t)&unk_1000ECC60, a2);
}

uint64_t sub_100074DE4(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECC38, (uint64_t)&unk_1000ECC60);
}

uint64_t sub_100074E08@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100072830(a1, (uint64_t)&unk_1000ECC80, (uint64_t)&unk_1000ECCA8, a2);
}

uint64_t sub_100074E2C(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100072D8C(a1, a2, a3, a4, (uint64_t)&unk_1000ECC80, (uint64_t)&unk_1000ECCA8);
}

uint64_t sub_100074E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013CD20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100074EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100008F88(&qword_10013CA70);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100074F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(sub_100008F88(&qword_10013CA70) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_10013CB1C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100018F40;
  return sub_1000380A4(a1, v6, v7);
}

uint64_t sub_100074FC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100074FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD *);

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc(dword_10013EA94);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000104E4;
  v4[2] = v2;
  v4[3] = v3;
  v7 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of Activity.update(using:)
                                        + async function pointer to dispatch thunk of Activity.update(using:));
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Activity.update(using:)
                                  + 1));
  v4[4] = v5;
  *v5 = v4;
  v5[1] = sub_10006FE80;
  return v7(v4 + 2);
}

uint64_t sub_10007508C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000750B0()
{
  return sub_100075144((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer.State);
}

uint64_t sub_1000750BC()
{
  return sub_1000751D8((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t (*)(void))&SFAirDropSend.Transfer.State.totalProgressCount.getter, (uint64_t (*)(void))&SFAirDropSend.Transfer.State.currentProgressCount.getter);
}

uint64_t sub_1000750D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000750E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000750F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013CD20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075138()
{
  return sub_100075144((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer.State);
}

uint64_t sub_100075144(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000751BC()
{
  return sub_1000751D8((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t (*)(void))&SFAirDropReceive.Transfer.State.totalProgressCount.getter, (uint64_t (*)(void))&SFAirDropReceive.Transfer.State.currentProgressCount.getter);
}

uint64_t sub_1000751D8(uint64_t (*a1)(_QWORD), uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return sub_10006E2BC(*(_QWORD *)(v3 + 16), v3 + ((v6 + 24) & ~v6), a2, a3);
}

double sub_100075230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10006D234(v2, a2);
}

uint64_t sub_100075248(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakDestroy(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropActivityAttributes.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AirDropActivityAttributes.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100075300 + 4 * byte_1000EC620[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100075320 + 4 * byte_1000EC625[v4]))();
}

_BYTE *sub_100075300(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100075320(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100075328(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100075330(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100075338(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100075340(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes.CodingKeys()
{
  return &type metadata for AirDropActivityAttributes.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AirDropActivityAttributes.ContentState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000753A8 + 4 * byte_1000EC62F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000753DC + 4 * byte_1000EC62A[v4]))();
}

uint64_t sub_1000753DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000753E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000753ECLL);
  return result;
}

uint64_t sub_1000753F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100075400);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100075404(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007540C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes.ContentState.CodingKeys()
{
  return &type metadata for AirDropActivityAttributes.ContentState.CodingKeys;
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes.ContentState()
{
  return &type metadata for AirDropActivityAttributes.ContentState;
}

unint64_t sub_10007543C()
{
  unint64_t result;

  result = qword_10013EAE0;
  if (!qword_10013EAE0)
  {
    result = swift_getWitnessTable(&unk_1000ECF20, &type metadata for AirDropActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013EAE0);
  }
  return result;
}

unint64_t sub_100075484()
{
  unint64_t result;

  result = qword_10013EAE8;
  if (!qword_10013EAE8)
  {
    result = swift_getWitnessTable(&unk_1000ECFD8, &type metadata for AirDropActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013EAE8);
  }
  return result;
}

unint64_t sub_1000754CC()
{
  unint64_t result;

  result = qword_10013EAF0;
  if (!qword_10013EAF0)
  {
    result = swift_getWitnessTable(&unk_1000ECF48, &type metadata for AirDropActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013EAF0);
  }
  return result;
}

unint64_t sub_100075514()
{
  unint64_t result;

  result = qword_10013EAF8;
  if (!qword_10013EAF8)
  {
    result = swift_getWitnessTable(&unk_1000ECF70, &type metadata for AirDropActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013EAF8);
  }
  return result;
}

unint64_t sub_10007555C()
{
  unint64_t result;

  result = qword_10013EB00;
  if (!qword_10013EB00)
  {
    result = swift_getWitnessTable(&unk_1000ECE90, &type metadata for AirDropActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013EB00);
  }
  return result;
}

unint64_t sub_1000755A4()
{
  unint64_t result;

  result = qword_10013EB08;
  if (!qword_10013EB08)
  {
    result = swift_getWitnessTable(&unk_1000ECEB8, &type metadata for AirDropActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013EB08);
  }
  return result;
}

uint64_t sub_1000755E8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001000F1D00)
  {
    swift_bridgeObjectRelease(0x80000001000F1D00);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000F1D00, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_10007567C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000757B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  v4 = type metadata accessor for URL(0);
  v3[23] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[24] = v5;
  v3[25] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008F88(&qword_10013CB20);
  v3[26] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[27] = swift_task_alloc(v7);
  v3[28] = swift_task_alloc(v7);
  v8 = type metadata accessor for UTType(0);
  v3[29] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[30] = v9;
  v3[31] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000758A0, 0, 0);
}

uint64_t sub_1000758A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 168) + 80);
  *(_QWORD *)(v0 + 256) = v2;
  v3 = v2(v1);
  if (v3)
    goto LABEL_2;
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 168) + 64))(*(_QWORD *)(v0 + 160));
  v16 = v8;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 >= 0)
      v8 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v8))
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v16, v9, v10, v11, v12, v13, v14, v15);
LABEL_2:
    v5 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
  if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_16;
LABEL_5:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
  }
  else
  {
    if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v17 = *(id *)(v16 + 32);
  }
  *(_QWORD *)(v0 + 264) = v17;
  v25 = *(_QWORD *)(v0 + 168);
  v26 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v16, v18, v19, v20, v21, v22, v23, v24);
  v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 72))(v26, v25);
  if (v27)
  {
    v28 = v27;
    v29 = objc_msgSend(v27, "image");

    if (v29)
    {
      v30 = objc_msgSend(v29, "platformImage");

      if (v30)
        (*(void (**)(id, _QWORD))(*(_QWORD *)(v0 + 168) + 88))(v30, *(_QWORD *)(v0 + 160));
    }
  }
  v31 = objc_msgSend(objc_allocWithZone((Class)SWShareableContentExtractor), "init");
  *(_QWORD *)(v0 + 272) = v31;
  v32 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 280) = v32;
  *(_QWORD *)(v32 + 16) = v31;
  v33 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 288) = v33;
  v34 = sub_100008F88(&qword_10013EB28);
  *v33 = v0;
  v33[1] = sub_100075B14;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 128, 0, 0, 0xD00000000000001BLL, 0x80000001000F2000, sub_1000797C8, v32, v34);
}

uint64_t sub_100075B14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 288));
  v3 = *(_QWORD *)(v2 + 280);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    v4 = sub_1000769E0;
  }
  else
  {
    swift_task_dealloc(v3);
    v4 = sub_100075BDC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100075BDC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t (*v20)(id, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  void (*v25)(uint64_t, uint64_t);
  NSString v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  void (*v41)(uint64_t, uint64_t);
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _TtC9AirDropUI33AirDropTransferSessionsController *v46;
  _TtC9AirDropUI33AirDropTransferSessionsController *v47;
  NSString v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = *(void **)(v0 + 128);
  *(_QWORD *)(v0 + 296) = v1;
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_100148040);
  v3 = v1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    if (v1)
    {
      *(_QWORD *)(v0 + 152) = v3;
      v8 = v3;
      v9 = v0 + 152;
      v10 = v0 + 160;
    }
    else
    {
      v9 = v0 + 144;
      *(_QWORD *)(v0 + 144) = 0;
      v10 = v0 + 152;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10);
    *v7 = v1;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Asynchronous shareable content returned from asynchronousLPMetadataWithCompletionHandler - %@", v6, 0xCu);
    v11 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v7, 1, v11);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {

    v4 = v3;
  }
  v12 = *(void **)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 160);

  v18 = -[NSObject image](v3, "image");
  v19 = objc_msgSend(v18, "platformImage");

  v20 = *(uint64_t (**)(id, uint64_t, uint64_t))(v16 + 88);
  *(_QWORD *)(v0 + 304) = v20;
  v21 = v20(v19, v17, v16);
  v22 = static UTType.url.getter(v21);
  UTType.identifier.getter(v22);
  v24 = v23;
  v25 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  *(_QWORD *)(v0 + 312) = v25;
  v25(v13, v15);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24, v27, v28, v29, v30, v31, v32, v33);
  LODWORD(v24) = objc_msgSend(v12, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v26, 0);

  if ((_DWORD)v24)
  {
    v35 = *(_QWORD *)(v0 + 264);
    v36 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 320) = v36;
    *(_QWORD *)(v36 + 16) = v35;
    v37 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 328) = v37;
    *v37 = v0;
    v37[1] = sub_100076074;
    v38 = *(_QWORD *)(v0 + 224);
    v39 = *(_QWORD *)(v0 + 208);
    v40 = sub_1000797D8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v38, 0, 0, 0xD00000000000001BLL, 0x80000001000F2000, v40, v36, v39);
  }
  v41 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
  v42 = *(void **)(v0 + 264);
  v43 = *(_QWORD *)(v0 + 248);
  v44 = *(_QWORD *)(v0 + 232);
  v45 = static UTType.image.getter(v34);
  UTType.identifier.getter(v45);
  v47 = v46;
  v41(v43, v44);
  v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v47, v49, v50, v51, v52, v53, v54, v55);
  LODWORD(v42) = objc_msgSend(v42, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v48, 0);

  if ((_DWORD)v42)
  {
    v56 = *(_QWORD *)(v0 + 264);
    v36 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 384) = v36;
    *(_QWORD *)(v36 + 16) = v56;
    v57 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 392) = v57;
    v58 = sub_100008F88((uint64_t *)&unk_10013EB30);
    *v57 = v0;
    v57[1] = sub_10007684C;
    v39 = v58;
    v38 = v0 + 136;
    v40 = sub_1000797D0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v38, 0, 0, 0xD00000000000001BLL, 0x80000001000F2000, v40, v36, v39);
  }
  v60 = *(void **)(v0 + 296);
  v62 = *(void **)(v0 + 264);
  v61 = *(void **)(v0 + 272);
  v63 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));

  v65 = *(_QWORD *)(v0 + 216);
  v64 = *(_QWORD *)(v0 + 224);
  v66 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v63);
}

uint64_t sub_100076074()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 328));
  v3 = *(_QWORD *)(v2 + 320);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    v4 = sub_100076E30;
  }
  else
  {
    swift_task_dealloc(v3);
    v4 = sub_10007613C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10007613C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  NSURL *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  sub_10000CC18(*(_QWORD *)(v0 + 224), v1, &qword_10013CB20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(void **)(v0 + 296);
    v6 = *(void **)(v0 + 264);
    v5 = *(void **)(v0 + 272);
    v7 = *(_QWORD *)(v0 + 216);
    sub_10000CC5C(*(_QWORD *)(v0 + 224), &qword_10013CB20);

    sub_10000CC5C(v7, &qword_10013CB20);
    v8 = *(_QWORD *)(v0 + 216);
    v9 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v12 = v0 + 16;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 32))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184));
    v13 = objc_msgSend(objc_allocWithZone((Class)LPMetadataProvider), "init");
    *(_QWORD *)(v0 + 336) = v13;
    URL._bridgeToObjectiveC()(v14);
    v16 = v15;
    *(_QWORD *)(v0 + 344) = v15;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100076318;
    v17 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v18 = (_QWORD *)(v0 + 80);
    v18[1] = 0x40000000;
    v18[2] = sub_100078C90;
    v18[3] = &unk_1001276D0;
    v18[4] = v17;
    objc_msgSend(v13, "startFetchingMetadataForURL:completionHandler:", v16, v18);
    return swift_continuation_await(v12);
  }
}

uint64_t sub_100076318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 352) = v1;
  if (v1)
    v2 = sub_100077024;
  else
    v2 = sub_1000763BC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000763BC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 344);
  v2 = *(void **)(v0 + 120);
  *(_QWORD *)(v0 + 360) = v2;

  if (v2)
  {
    v3 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 368) = v3;
    *(_QWORD *)(v3 + 16) = v2;
    v4 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
    v5 = v2;
    v6 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 376) = v6;
    *v6 = v0;
    v6[1] = sub_10007653C;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    v8 = *(void **)(v0 + 296);
    v10 = *(void **)(v0 + 264);
    v9 = *(void **)(v0 + 272);

    v11 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    sub_10000CC5C(v11, &qword_10013CB20);
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_10007653C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 368);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000765C4, 0, 0);
}

uint64_t sub_1000765C4()
{
  uint64_t v0;
  void *v1;
  void (*v2)(id, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *v16;
  NSString v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(void **)(v0 + 360);
  v2 = *(void (**)(id, uint64_t, uint64_t))(v0 + 304);
  v39 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v37 = *(void **)(v0 + 336);
  v38 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = objc_msgSend(v1, "image");
  v8 = objc_msgSend(v7, "platformImage");

  v2(v8, v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v38, v4);
  v9 = sub_10000CC5C(v39, &qword_10013CB20);
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
  v11 = *(void **)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 232);
  v14 = static UTType.image.getter(v9);
  UTType.identifier.getter(v14);
  v16 = v15;
  v10(v12, v13);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16, v18, v19, v20, v21, v22, v23, v24);
  LODWORD(v11) = objc_msgSend(v11, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v17, 0);

  if ((_DWORD)v11)
  {
    v25 = *(_QWORD *)(v0 + 264);
    v26 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 384) = v26;
    *(_QWORD *)(v26 + 16) = v25;
    v27 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 392) = v27;
    v28 = sub_100008F88((uint64_t *)&unk_10013EB30);
    *v27 = v0;
    v27[1] = sub_10007684C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 136, 0, 0, 0xD00000000000001BLL, 0x80000001000F2000, sub_1000797D0, v26, v28);
  }
  else
  {
    v30 = *(void **)(v0 + 296);
    v32 = *(void **)(v0 + 264);
    v31 = *(void **)(v0 + 272);
    v33 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));

    v35 = *(_QWORD *)(v0 + 216);
    v34 = *(_QWORD *)(v0 + 224);
    v36 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v33);
  }
}

uint64_t sub_10007684C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 392));
  v3 = *(_QWORD *)(v2 + 384);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    v4 = sub_100077114;
  }
  else
  {
    swift_task_dealloc(v3);
    v4 = sub_100076914;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100076914()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  v1 = *(void **)(v0 + 296);
  v3 = *(void **)(v0 + 264);
  v2 = *(void **)(v0 + 272);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));

  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1000769E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t (*v16)(id, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _TtC9AirDropUI33AirDropTransferSessionsController *v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  void (*v21)(uint64_t, uint64_t);
  NSString v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  void (*v37)(uint64_t, uint64_t);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  _TtC9AirDropUI33AirDropTransferSessionsController *v43;
  NSString v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  *(_QWORD *)(v0 + 296) = 0;
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100009558(v1, (uint64_t)qword_100148040);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    *(_QWORD *)(v0 + 144) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    *v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Asynchronous shareable content returned from asynchronousLPMetadataWithCompletionHandler - %@", v5, 0xCu);
    v7 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v6, 1, v7);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {

    v3 = 0;
  }
  v8 = *(void **)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 160);

  v14 = objc_msgSend(0, "image");
  v15 = objc_msgSend(v14, "platformImage");

  v16 = *(uint64_t (**)(id, uint64_t, uint64_t))(v12 + 88);
  *(_QWORD *)(v0 + 304) = v16;
  v17 = v16(v15, v13, v12);
  v18 = static UTType.url.getter(v17);
  UTType.identifier.getter(v18);
  v20 = v19;
  v21 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  *(_QWORD *)(v0 + 312) = v21;
  v21(v9, v11);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20, v23, v24, v25, v26, v27, v28, v29);
  LODWORD(v8) = objc_msgSend(v8, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v22, 0);

  if ((_DWORD)v8)
  {
    v31 = *(_QWORD *)(v0 + 264);
    v32 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 320) = v32;
    *(_QWORD *)(v32 + 16) = v31;
    v33 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 328) = v33;
    *v33 = v0;
    v33[1] = sub_100076074;
    v34 = *(_QWORD *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 208);
    v36 = sub_1000797D8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v34, 0, 0, 0xD00000000000001BLL, 0x80000001000F2000, v36, v32, v35);
  }
  v37 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
  v38 = *(void **)(v0 + 264);
  v39 = *(_QWORD *)(v0 + 248);
  v40 = *(_QWORD *)(v0 + 232);
  v41 = static UTType.image.getter(v30);
  UTType.identifier.getter(v41);
  v43 = v42;
  v37(v39, v40);
  v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v43, v45, v46, v47, v48, v49, v50, v51);
  LODWORD(v38) = objc_msgSend(v38, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v44, 0);

  if ((_DWORD)v38)
  {
    v52 = *(_QWORD *)(v0 + 264);
    v32 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 384) = v32;
    *(_QWORD *)(v32 + 16) = v52;
    v53 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 392) = v53;
    v54 = sub_100008F88((uint64_t *)&unk_10013EB30);
    *v53 = v0;
    v53[1] = sub_10007684C;
    v35 = v54;
    v34 = v0 + 136;
    v36 = sub_1000797D0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v34, 0, 0, 0xD00000000000001BLL, 0x80000001000F2000, v36, v32, v35);
  }
  v56 = *(void **)(v0 + 296);
  v58 = *(void **)(v0 + 264);
  v57 = *(void **)(v0 + 272);
  v59 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));

  v61 = *(_QWORD *)(v0 + 216);
  v60 = *(_QWORD *)(v0 + 224);
  v62 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v59);
}

uint64_t sub_100076E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  NSURL *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(*(_QWORD *)(v0 + 224), 1, 1, *(_QWORD *)(v0 + 184));
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  sub_10000CC18(*(_QWORD *)(v0 + 224), v1, &qword_10013CB20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(void **)(v0 + 296);
    v6 = *(void **)(v0 + 264);
    v5 = *(void **)(v0 + 272);
    v7 = *(_QWORD *)(v0 + 216);
    sub_10000CC5C(*(_QWORD *)(v0 + 224), &qword_10013CB20);

    sub_10000CC5C(v7, &qword_10013CB20);
    v8 = *(_QWORD *)(v0 + 216);
    v9 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v12 = v0 + 16;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 32))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184));
    v13 = objc_msgSend(objc_allocWithZone((Class)LPMetadataProvider), "init");
    *(_QWORD *)(v0 + 336) = v13;
    URL._bridgeToObjectiveC()(v14);
    v16 = v15;
    *(_QWORD *)(v0 + 344) = v15;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100076318;
    v17 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v18 = (_QWORD *)(v0 + 80);
    v18[1] = 0x40000000;
    v18[2] = sub_100078C90;
    v18[3] = &unk_1001276D0;
    v18[4] = v17;
    objc_msgSend(v13, "startFetchingMetadataForURL:completionHandler:", v16, v18);
    return swift_continuation_await(v12);
  }
}

uint64_t sub_100077024()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(void **)(v0 + 336);
  v4 = *(void **)(v0 + 296);
  v6 = *(void **)(v0 + 264);
  v5 = *(void **)(v0 + 272);
  swift_willThrow();
  swift_errorRelease(v2);

  v7 = *(_QWORD *)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  sub_10000CC5C(v7, &qword_10013CB20);
  v8 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100077114()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 304))(0, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  v1 = *(void **)(v0 + 296);
  v3 = *(void **)(v0 + 264);
  v2 = *(void **)(v0 + 272);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));

  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1000771E0(char *a1, char *a2)
{
  return sub_10007CEF8(*a1, *a2);
}

uint64_t sub_1000771EC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100123C28, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100077248(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000031;
  else
    v2 = 0xD000000000000021;
  v3 = 0x80000001000EFFC0;
  if (*v1)
    v3 = 0x80000001000EFFF0;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_10007728C()
{
  char *v0;

  return sub_100077294(*v0);
}

Swift::Int sub_100077294(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000031;
  else
    v2 = 0xD000000000000021;
  if ((a1 & 1) != 0)
    v3 = 0x80000001000EFFF0;
  else
    v3 = 0x80000001000EFFC0;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100077318(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000031;
  else
    v2 = 0xD000000000000021;
  if (*v1)
    v3 = 0x80000001000EFFF0;
  else
    v3 = 0x80000001000EFFC0;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100077378(uint64_t a1)
{
  char *v1;

  return sub_10007E544(a1, *v1);
}

void sub_100077380(_QWORD *a1@<X8>)
{
  *a1 = &off_100123C78;
}

uint64_t sub_100077390()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_1000B66E4((uint64_t)&off_100123AC0);
  result = swift_arrayDestroy(&unk_100123AE0, 10, &type metadata for String);
  qword_10013EB10 = v0;
  return result;
}

uint64_t sub_1000773DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for LocalizedStringResource(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_100077418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  uint64_t v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t result;
  id v41;
  const char *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _TtC9AirDropUI33AirDropTransferSessionsController *v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _TtC9AirDropUI33AirDropTransferSessionsController *v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  uint64_t v76;
  uint64_t v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  SEL v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _TtC9AirDropUI33AirDropTransferSessionsController *v95;
  _TtC9AirDropUI33AirDropTransferSessionsController *v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_10013BBC0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for UTType(0);
  v16 = *(_QWORD *)(v106 - 8);
  v18 = __chkstk_darwin(v106, v17);
  v105 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64);
  v21 = v20(a1, a2, v18);
  v29 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v21;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 >= 0)
      v21 &= 0xFFFFFFFFFFFFFF8uLL;
    v30 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  else
  {
    v30 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v29, v22, v23, v24, v25, v26, v27, v28);
  if (v30 != 1)
  {
    v61 = String.LocalizationValue.init(stringLiteral:)(0x4F5F5245424D554ELL, 0xEF534D4554495F46);
    static Locale.current.getter(v61);
    v62 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, 0, v7, 0, 0, 256);
    v64 = v63;
    v65 = sub_100008F88((uint64_t *)&unk_10013EBE0);
    v66 = swift_allocObject(v65, 72, 7);
    *(_OWORD *)(v66 + 16) = xmmword_1000E9370;
    v67 = ((uint64_t (*)(uint64_t, uint64_t))v20)(a1, a2);
    v75 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v67;
    if ((unint64_t)v67 >> 62)
    {
      if (v67 >= 0)
        v67 &= 0xFFFFFFFFFFFFFF8uLL;
      v76 = _CocoaArrayWrapper.endIndex.getter(v67);
    }
    else
    {
      v76 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v75, v68, v69, v70, v71, v72, v73, v74);
    *(_QWORD *)(v66 + 56) = &type metadata for Int;
    *(_QWORD *)(v66 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v66 + 32) = v76;
    v77 = static String.localizedStringWithFormat(_:_:)(v62, v64, v66);
    swift_bridgeObjectRelease(v64, v78, v79, v80, v81, v82, v83, v84);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v66, v85, v86, v87, v88, v89, v90, v91);
    return v77;
  }
  v31 = ((uint64_t (*)(uint64_t, uint64_t))v20)(a1, a2);
  v39 = v31;
  if (!((unint64_t)v31 >> 62))
  {
    result = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_6;
LABEL_26:
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v39, v32, v33, v34, v35, v36, v37, v38);
    return 0;
  }
  if (v31 >= 0)
    v31 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v31);
  if (!result)
    goto LABEL_26;
LABEL_6:
  if ((v39 & 0xC000000000000001) != 0)
  {
    v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
LABEL_9:
    v49 = v41;
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v39, v42, v43, v44, v45, v46, v47, v48);
    type metadata accessor for SFAirDropUtilities(0);
    v50 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static SFAirDropUtilities.standardTypeIdentifiers.getter();
    v51 = static SFAirDropUtilities.highestFidelityDataType(for:conformingToDataTypes:)(v49, v50);
    v53 = v52;
    swift_bridgeObjectRelease(v50, v52, v54, v55, v56, v57, v58, v59);
    if (v53)
    {
      UTType.init(_:)(v51, v53);
      v60 = v106;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v106) != 1)
      {
        v92 = v105;
        v93 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v105, v15, v60);
        v94 = UTType.localizedDescription.getter(v93);
        v77 = v94;
        if (v95)
        {
          v96 = v95;
          v107 = 8241;
          v108 = 0xE200000000000000;
          String.append(_:)(*(Swift::String *)&v94);
          swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);

          v77 = v107;
        }
        else
        {

        }
        (*(void (**)(char *, uint64_t))(v16 + 8))(v92, v60);
        return v77;
      }

      sub_10000CC5C((uint64_t)v15, &qword_10013BBC0);
    }
    else
    {

    }
    return 0;
  }
  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v41 = *(id *)(v39 + 32);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100077814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(uint64_t, uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;
  char *v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;

  v83 = a1;
  v6 = type metadata accessor for LocalizedStringResource(0);
  v81 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  __chkstk_darwin(v6, v7);
  v84 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v85 = (char *)&v71 - v11;
  v12 = sub_100008F88((uint64_t *)&unk_10013EBD0);
  __chkstk_darwin(v12, v13);
  v78 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v79 = (uint64_t)&v71 - v17;
  __chkstk_darwin(v18, v19);
  v80 = (uint64_t)&v71 - v20;
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v71 - v23;
  v25 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v31);
  v33 = (char *)&v71 - v32;
  v36 = __chkstk_darwin(v34, v35);
  v38 = (char *)&v71 - v37;
  v39 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 8);
  v86 = a3;
  v40 = v39(a2, a3, v36);
  v42 = v41;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v43(v38, v3, a2);
  if (v42)
  {
    v44 = v40;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v38, a2);
  }
  else
  {
    v76 = v33;
    v77 = v43;
    v45 = v85;
    v72 = v29;
    v74 = v25;
    v75 = a2;
    (*(void (**)(uint64_t))(v86 + 16))(a2);
    v46 = v80;
    sub_10000CC18((uint64_t)v24, v80, (uint64_t *)&unk_10013EBD0);
    v47 = v81;
    v48 = v82;
    v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
    v49 = (uint64_t)v24;
    if (v73(v46, 1, v82) == 1)
    {
      v44 = 0;
      v50 = 0;
      v51 = v76;
      v52 = v84;
    }
    else
    {
      v53 = v46;
      v54 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v45, v53, v48);
      v52 = v84;
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v84, v54, v48);
      v44 = String.init(localized:)(v52);
      v50 = v55;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v54, v48);
      v51 = v76;
    }
    v56 = v83;
    v57 = (void (*)(char *, char *, uint64_t))v77;
    sub_10000CC5C(v49, (uint64_t *)&unk_10013EBD0);
    v58 = v75;
    v57(v51, v38, v75);
    if (v50)
    {
      v59 = *(void (**)(char *, uint64_t))(v74 + 8);
      v59(v51, v58);
    }
    else
    {
      v60 = v86;
      v61 = v79;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 40))(v56, v58, v86);
      v62 = v48;
      v63 = v78;
      sub_10000CC18(v61, v78, (uint64_t *)&unk_10013EBD0);
      if (v73(v63, 1, v62) == 1)
      {
        v44 = 0;
        v64 = 0;
      }
      else
      {
        v65 = v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v85, v63, v62);
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v52, v65, v62);
        v44 = String.init(localized:)(v52);
        v64 = v66;
        v67 = v65;
        v60 = v86;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v67, v62);
      }
      v68 = v74;
      v69 = v72;
      sub_10000CC5C(v79, (uint64_t *)&unk_10013EBD0);
      v77(v69, (uint64_t)v51, v58);
      if (!v64)
        v44 = sub_100077418(v58, v60);
      v59 = *(void (**)(char *, uint64_t))(v68 + 8);
      v59(v69, v58);
      v59(v51, v58);
    }
    v59(v38, v58);
  }
  return v44;
}

uint64_t sub_100077C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v70 = a1;
  v6 = type metadata accessor for LocalizedStringResource(0);
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  __chkstk_darwin(v6, v7);
  v71 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v75 = (char *)&v62 - v11;
  v12 = sub_100008F88((uint64_t *)&unk_10013EBD0);
  __chkstk_darwin(v12, v13);
  v69 = (uint64_t)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v62 - v17;
  __chkstk_darwin(v19, v20);
  v72 = (uint64_t)&v62 - v21;
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v62 - v24;
  v26 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31, v32);
  v35 = (char *)&v62 - v34;
  v36 = a3;
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 24))(a2, a3, v33);
  v39 = v38;
  v40 = v3;
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v41(v35, v40, a2);
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, a2);
  }
  else
  {
    v67 = (void (*)(char *, char *, uint64_t))v41;
    v68 = v30;
    v65 = v18;
    v66 = v26;
    v63 = v36;
    (*(void (**)(uint64_t, uint64_t))(v36 + 32))(a2, v36);
    v42 = v72;
    sub_10000CC18((uint64_t)v25, v72, (uint64_t *)&unk_10013EBD0);
    v44 = v73;
    v43 = v74;
    v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    v45 = v35;
    v46 = (uint64_t)v25;
    if (v64(v42, 1, v74) == 1)
    {
      v47 = 0;
      v48 = 0;
      v49 = v75;
    }
    else
    {
      v49 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v75, v42, v43);
      v50 = v71;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v71, v49, v43);
      v47 = String.init(localized:)(v50);
      v48 = v51;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v43);
    }
    v52 = v68;
    sub_10000CC5C(v46, (uint64_t *)&unk_10013EBD0);
    v67(v52, v45, a2);
    if (v48)
    {
      v53 = *(void (**)(char *, uint64_t))(v66 + 8);
      v53(v52, a2);
      v37 = v47;
      v53(v45, a2);
    }
    else
    {
      v54 = (uint64_t)v65;
      (*(void (**)(uint64_t, uint64_t))(v63 + 48))(v70, a2);
      v55 = v43;
      v56 = v69;
      sub_10000CC18(v54, v69, (uint64_t *)&unk_10013EBD0);
      v57 = v64(v56, 1, v55);
      v58 = v66;
      if (v57 == 1)
      {
        v37 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v49, v56, v55);
        v59 = v71;
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v71, v49, v55);
        v37 = String.init(localized:)(v59);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v55);
      }
      sub_10000CC5C(v54, (uint64_t *)&unk_10013EBD0);
      v60 = *(void (**)(char *, uint64_t))(v58 + 8);
      v60(v68, a2);
      v60(v45, a2);
    }
  }
  return v37;
}

uint64_t sub_100077FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  id v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  _TtC9AirDropUI33AirDropTransferSessionsController *v36;
  _TtC9AirDropUI33AirDropTransferSessionsController *v37;
  void (*v38)(char *, uint64_t);
  NSString v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _TtC9AirDropUI33AirDropTransferSessionsController *v50;
  _TtC9AirDropUI33AirDropTransferSessionsController *v51;
  NSString v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  _TtC9AirDropUI33AirDropTransferSessionsController *v62;
  _TtC9AirDropUI33AirDropTransferSessionsController *v63;
  NSString v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  unsigned int v72;
  uint64_t v73;
  Swift::Int v74;
  const char *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  _QWORD v97[9];
  _QWORD v98[5];
  uint64_t v99;
  _QWORD v100[2];

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1, a2);
  v8 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UTType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64))(a1, a2, v12);
  v23 = v15;
  if (!((unint64_t)v15 >> 62))
  {
    result = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v23, v16, v17, v18, v19, v20, v21, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
    v72 = 0;
    goto LABEL_17;
  }
  if (v15 >= 0)
    v15 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v15);
  if (!result)
    goto LABEL_16;
LABEL_3:
  v96 = v6;
  if ((v23 & 0xC000000000000001) != 0)
  {
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
LABEL_6:
    v33 = v25;
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v23, v26, v27, v28, v29, v30, v31, v32);
    v34 = v33;
    v35 = static UTType.url.getter(v34);
    UTType.identifier.getter(v35);
    v37 = v36;
    v38 = *(void (**)(char *, uint64_t))(v10 + 8);
    v38(v14, v9);
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37, v40, v41, v42, v43, v44, v45, v46);
    LODWORD(v37) = objc_msgSend(v34, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v39, 0);

    if ((_DWORD)v37)
    {

      v48 = 1802398060;
LABEL_32:

      return v48;
    }
    v49 = static UTType.image.getter(v47);
    UTType.identifier.getter(v49);
    v51 = v50;
    v38(v14, v9);
    v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51, v53, v54, v55, v56, v57, v58, v59);
    LODWORD(v51) = objc_msgSend(v34, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v52, 0);

    if ((_DWORD)v51)
    {

      v48 = 0x6F746F6870;
      goto LABEL_32;
    }
    v61 = static UTType._groupActivity.getter(v60);
    UTType.identifier.getter(v61);
    v63 = v62;
    v38(v14, v9);
    v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v63, v65, v66, v67, v68, v69, v70, v71);
    v72 = objc_msgSend(v34, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v64, 0);

    v6 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v8, v3, a1);
    if (v34)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
      if (!v72)
      {
        v48 = 0;
        goto LABEL_32;
      }
LABEL_31:
      v48 = 0x616C706572616873;
      goto LABEL_32;
    }
LABEL_17:
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 56))(v98, a1, a2);
    v73 = v99;
    v100[0] = v99;
    swift_bridgeObjectRetain(v99);
    sub_100016F3C(v98);
    if (*(_QWORD *)(v73 + 16))
    {
      v95 = v72;
      Hasher.init(_seed:)(v97, *(_QWORD *)(v73 + 40));
      v94 = (unint64_t)"shotservices.sirisharing";
      String.hash(into:)(v97, 0xD000000000000021, 0x80000001000EFFC0);
      v74 = Hasher._finalize()();
      v82 = -1 << *(_BYTE *)(v73 + 32);
      v83 = v74 & ~v82;
      if (((*(_QWORD *)(v73 + 56 + ((v83 >> 3) & 0xFFFFFFFFFFFFF8)) >> v83) & 1) != 0)
      {
        v96 = v6;
        v84 = ~v82;
        while ((*(_BYTE *)(*(_QWORD *)(v73 + 48) + v83) & 1) != 0)
        {
          v85 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000031, 0x80000001000EFFF0, 0xD000000000000021, 0x80000001000EFFC0, 0);
          swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFF0, v86, v87, v88, v89, v90, v91, v92);
          if ((v85 & 1) != 0)
            goto LABEL_30;
          v83 = (v83 + 1) & v84;
          if (((*(_QWORD *)(v73 + 56 + ((v83 >> 3) & 0xFFFFFFFFFFFFF8)) >> v83) & 1) == 0)
          {
            sub_1000170DC(v100);
            (*(void (**)(char *, uint64_t))(v96 + 8))(v8, a1);
            goto LABEL_27;
          }
        }
        swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)(v94 | 0x8000000000000000), v75, v76, v77, v78, v79, v80, v81);
LABEL_30:
        sub_1000170DC(v100);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v8, a1);
        v34 = 0;
      }
      else
      {
        sub_1000170DC(v100);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
LABEL_27:
        v34 = 0;
        v48 = 0;
        if ((v95 & 1) == 0)
          return v48;
      }
    }
    else
    {
      sub_1000170DC(v100);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
      v34 = 0;
      v48 = 0;
      if ((v72 & 1) == 0)
        return v48;
    }
    goto LABEL_31;
  }
  if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(v23 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000784B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t result;
  id v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  _TtC9AirDropUI33AirDropTransferSessionsController *v44;
  uint64_t countAndFlagsBits;
  _TtC9AirDropUI33AirDropTransferSessionsController *v46;
  Swift::String v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;

  v4 = sub_100008F88(&qword_10013BBC0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UTType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64))(a1, a2, v11);
  v22 = v14;
  if (!((unint64_t)v14 >> 62))
  {
    result = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v22, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  if (v14 >= 0)
    v14 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!result)
    goto LABEL_16;
LABEL_3:
  if ((v22 & 0xC000000000000001) != 0)
  {
    v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
LABEL_6:
    v32 = v24;
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v22, v25, v26, v27, v28, v29, v30, v31);
    type metadata accessor for SFAirDropUtilities(0);
    v33 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static SFAirDropUtilities.standardTypeIdentifiers.getter();
    v34 = static SFAirDropUtilities.highestFidelityDataType(for:conformingToDataTypes:)(v32, v33);
    v36 = v35;
    swift_bridgeObjectRelease(v33, v35, v37, v38, v39, v40, v41, v42);
    if (v36)
    {
      UTType.init(_:)(v34, v36);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
      {
        v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v13, v7, v8);
        countAndFlagsBits = UTType.preferredFilenameExtension.getter(v43);
        if (v44)
        {
          v46 = v44;
          v47 = String.uppercased()();
          countAndFlagsBits = v47._countAndFlagsBits;
          swift_bridgeObjectRelease(v46, (SEL)v47._object, v48, v49, v50, v51, v52, v53);

          (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);

        }
        return countAndFlagsBits;
      }

      sub_10000CC5C((uint64_t)v7, &qword_10013BBC0);
    }
    else
    {

    }
    return 0;
  }
  if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v24 = *(id *)(v22 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_1000786DC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString *v8;
  SEL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v4 = sub_100008F88(&qword_10013EB90);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (NSString *)String._bridgeToObjectiveC()();
  v9 = NSSelectorFromString(v8);

  if (objc_msgSend(a2, "respondsToSelector:", v9))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v10 = *(unsigned __int8 *)(v5 + 80);
    v11 = (v10 + 16) & ~v10;
    v12 = swift_allocObject(&unk_1001277E8, v11 + v6, v10 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = sub_100079984;
    v16 = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000788FC;
    aBlock[3] = &unk_100127800;
    v13 = _Block_copy(aBlock);
    swift_release(v16);
    objc_msgSend(objc_retainAutorelease(a2), "performSelector:withObject:", v9, v13);
    _Block_release(v13);
  }
  else
  {
    v14 = sub_1000798D8();
    aBlock[0] = swift_allocError(&type metadata for ShareableContentError, v14, 0, 0);
    CheckedContinuation.resume(throwing:)(aBlock, v4);
  }
}

uint64_t sub_10007888C(void *a1, void *a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    v6 = a2;
    swift_errorRetain(a2);
    v2 = sub_100008F88(&qword_10013EB90);
    return CheckedContinuation.resume(throwing:)(&v6, v2);
  }
  else
  {
    v6 = a1;
    v4 = a1;
    v5 = sub_100008F88(&qword_10013EB90);
    return CheckedContinuation.resume(returning:)(&v6, v5);
  }
}

void sub_1000788FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_100078970(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v4 = sub_100008F88((uint64_t *)&unk_10013EB50);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = sub_100018D44(0, &qword_10013BCD8, NSURL_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100127748, v11 + v6, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10007985C;
  v16 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000FEFC;
  aBlock[3] = &unk_100127760;
  v13 = _Block_copy(aBlock);
  v14 = objc_msgSend(a2, "loadObjectOfClass:completionHandler:", ObjCClassFromMetadata, v13, swift_release(v16).n128_f64[0]);
  _Block_release(v13);

}

uint64_t sub_100078AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for POSIXError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013CB20);
  __chkstk_darwin(v9, v10);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v31 = a1;
    swift_unknownObjectRetain(a1);
    v20 = sub_100008F88(&qword_10013EB68);
    v21 = type metadata accessor for URL(0);
    v22 = swift_dynamicCast(v19, &v31, v20, v21, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, v22 ^ 1u, 1, v21);
    v23 = sub_100008F88((uint64_t *)&unk_10013EB50);
    return CheckedContinuation.resume(returning:)(v19, v23);
  }
  else
  {
    if (a2)
    {
      v25 = a2;
    }
    else
    {
      LODWORD(v31) = 17;
      v26 = sub_1000794EC((_TtC9AirDropUI33AirDropTransferSessionsController *)_swiftEmptyArrayStorage, v11, v12, v13, v14, v15, v16, v17);
      v27 = sub_100079870();
      v28 = _BridgedStoredNSError.init(_:userInfo:)(&v31, v26, v4, v27);
      v25 = POSIXError._nsError.getter(v28);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v31 = v25;
    swift_errorRetain(a2);
    v29 = sub_100008F88((uint64_t *)&unk_10013EB50);
    return CheckedContinuation.resume(throwing:)(&v31, v29);
  }
}

uint64_t sub_100078C90(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100078D1C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v4 = sub_100008F88((uint64_t *)&unk_10013EB40);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1001276F8, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000797F4;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A656C;
  aBlock[3] = &unk_100127710;
  v11 = _Block_copy(aBlock);
  objc_msgSend(a2, "_loadAsynchronousFieldsWithUpdateHandler:", v11, swift_release(v13).n128_f64[0]);
  _Block_release(v11);
}

void sub_100078E4C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v4 = sub_100008F88((uint64_t *)&unk_10013EB80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = sub_100018D44(0, &qword_10013EA70, UIImage_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100127798, v11 + v6, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000798C4;
  v16 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000FEFC;
  aBlock[3] = &unk_1001277B0;
  v13 = _Block_copy(aBlock);
  v14 = objc_msgSend(a2, "loadObjectOfClass:completionHandler:", ObjCClassFromMetadata, v13, swift_release(v16).n128_f64[0]);
  _Block_release(v13);

}

uint64_t sub_100078FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for POSIXError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v16 = objc_opt_self(UIImage);
    v17 = swift_dynamicCastObjCClass(a1, v16);
    if (v17)
      swift_unknownObjectRetain(a1);
    v26 = v17;
    v18 = sub_100008F88((uint64_t *)&unk_10013EB80);
    return CheckedContinuation.resume(returning:)(&v26, v18);
  }
  else
  {
    if (a2)
    {
      v20 = a2;
    }
    else
    {
      LODWORD(v26) = 17;
      v21 = sub_1000794EC((_TtC9AirDropUI33AirDropTransferSessionsController *)_swiftEmptyArrayStorage, v7, v8, v9, v10, v11, v12, v13);
      v22 = sub_100079870();
      v23 = _BridgedStoredNSError.init(_:userInfo:)(&v26, v21, v4, v22);
      v20 = POSIXError._nsError.getter(v23);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
    }
    v26 = v20;
    swift_errorRetain(a2);
    v24 = sub_100008F88((uint64_t *)&unk_10013EB80);
    return CheckedContinuation.resume(throwing:)(&v26, v24);
  }
}

BOOL sub_1000790FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  id v12;
  id v13;
  unsigned __int8 v14;
  _BOOL8 result;
  uint64_t v16;
  id v17;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1, a2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
  v9 = (void *)static NSUserDefaults.airdrop.getter(v8);
  v10 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  result = 0;
  if ((v10 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a1);
    v11 = sub_100018D44(0, (unint64_t *)&unk_10013EBF0, &off_100122DA0);
    if ((swift_dynamicCast(&v17, v7, a1, v11, 6) & 1) != 0)
    {
      v12 = v17;
      v13 = objc_msgSend(v17, "content");
      v14 = objc_msgSend(v13, "hasPossibleCollaborationRepresentation");

      if ((v14 & 1) != 0)
        return 1;
    }
  }
  return result;
}

void sub_100079224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for SFAirDropUtilities(0);
  v4 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  if ((unint64_t)v5 >> 62)
  {
LABEL_19:
    if (v5 < 0)
      v17 = v5;
    else
      v17 = v5 & 0xFFFFFFFFFFFFFF8;
    v6 = _CocoaArrayWrapper.endIndex.getter(v17);
    if (!v6)
      goto LABEL_16;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v6)
      goto LABEL_16;
  }
  v7 = 0;
  v8 = v5 & 0xC000000000000001;
  v9 = *(_QWORD *)(v4 + 16);
  v10 = (_QWORD *)(v4 + 40);
  v18 = v6;
  while (1)
  {
LABEL_4:
    if (v8)
    {
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    }
    else
    {
      if (v7 >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      v11 = *(id *)(v5 + 32 + 8 * v7);
    }
    v12 = v11;
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    if (v9)
      break;

    if (v7 == v6)
      goto LABEL_16;
  }
  swift_bridgeObjectRetain(v4);
  v14 = v9;
  do
  {
    v15 = *v10;
    swift_bridgeObjectRetain(*v10);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    LODWORD(v15) = objc_msgSend(v12, "hasItemConformingToTypeIdentifier:", v16);

    if ((_DWORD)v15)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease_n(v4, 2);

      return;
    }
    v10 += 2;
    --v14;
  }
  while (v14);

  swift_bridgeObjectRelease(v4);
  v8 = v5 & 0xC000000000000001;
  v6 = v18;
  v10 = (_QWORD *)(v4 + 40);
  if (v7 != v18)
    goto LABEL_4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000793F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000773DC(a1);
}

uint64_t sub_100079408()
{
  return 0;
}

id sub_100079414(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

unint64_t sub_1000794EC(_TtC9AirDropUI33AirDropTransferSessionsController *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t airDropClient;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v9 = *(_QWORD *)a1->connection;
  if (!v9)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F88(&qword_10013EB70);
  v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)a1->connection;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  airDropClient = (uint64_t)a1->airDropClient;
  swift_retain(v10);
  while (1)
  {
    sub_10000CC18(airDropClient, (uint64_t)&v23, &qword_10013EB78);
    v15 = v23;
    v16 = v24;
    result = sub_100079620(v23, v24);
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v11[6] + 16 * result);
    *v19 = v15;
    v19[1] = v16;
    result = (unint64_t)sub_10004E130(&v25, (_OWORD *)(v11[7] + 32 * result));
    v20 = v11[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v11[2] = v22;
    airDropClient += 48;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100079620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100079684(a1, a2, v5);
}

unint64_t sub_100079684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void sub_1000797C8(uint64_t a1)
{
  uint64_t v1;

  sub_1000786DC(a1, *(void **)(v1 + 16));
}

void sub_1000797D0(uint64_t a1)
{
  uint64_t v1;

  sub_100078E4C(a1, *(void **)(v1 + 16));
}

void sub_1000797D8(uint64_t a1)
{
  uint64_t v1;

  sub_100078970(a1, *(void **)(v1 + 16));
}

void sub_1000797E0(uint64_t a1)
{
  uint64_t v1;

  sub_100078D1C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000797E8()
{
  return sub_100079928((uint64_t *)&unk_10013EB40);
}

uint64_t sub_1000797F4(uint64_t result)
{
  uint64_t v1;

  if ((result & 1) != 0)
  {
    v1 = sub_100008F88((uint64_t *)&unk_10013EB40);
    return CheckedContinuation.resume(returning:)(v1, v1);
  }
  return result;
}

uint64_t sub_100079838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100079848(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100079850()
{
  return sub_100079928((uint64_t *)&unk_10013EB50);
}

uint64_t sub_10007985C(uint64_t a1, uint64_t a2)
{
  return sub_100079998(a1, a2, (uint64_t *)&unk_10013EB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100078AD4);
}

unint64_t sub_100079870()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013EB60;
  if (!qword_10013EB60)
  {
    v1 = type metadata accessor for POSIXError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for POSIXError, v1);
    atomic_store(result, (unint64_t *)&qword_10013EB60);
  }
  return result;
}

uint64_t sub_1000798B8()
{
  return sub_100079928((uint64_t *)&unk_10013EB80);
}

uint64_t sub_1000798C4(uint64_t a1, uint64_t a2)
{
  return sub_100079998(a1, a2, (uint64_t *)&unk_10013EB80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100078FB0);
}

unint64_t sub_1000798D8()
{
  unint64_t result;

  result = qword_10013EB98;
  if (!qword_10013EB98)
  {
    result = swift_getWitnessTable(&unk_1000ED258, &type metadata for ShareableContentError);
    atomic_store(result, (unint64_t *)&qword_10013EB98);
  }
  return result;
}

uint64_t sub_10007991C()
{
  return sub_100079928(&qword_10013EB90);
}

uint64_t sub_100079928(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100008F88(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100079984(uint64_t a1, uint64_t a2)
{
  return sub_100079998(a1, a2, &qword_10013EB90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007888C);
}

uint64_t sub_100079998(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(a3) - 8) + 80);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

void sub_1000799F4(uint64_t a1, id a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  uint64_t v7;
  unint64_t v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  _TtC9AirDropUI33AirDropTransferSessionsController *v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  char v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  const char *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  NSString v53;
  uint64_t v54;
  id v55;
  id v56;
  unsigned __int8 v57;
  SEL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  _TtC9AirDropUI33AirDropTransferSessionsController *v76;
  id v77;
  _OWORD v78[2];
  _BYTE v79[24];
  uint64_t v80;
  _TtC9AirDropUI33AirDropTransferSessionsController *v81;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = 0;
    v5 = a1 + 32;
    v6 = &_swiftEmptyArrayStorage;
    v70 = a1 + 32;
    v71 = *(_QWORD *)(a1 + 16);
    do
    {
      v72 = v6;
      v7 = 0;
      if (v4 <= v2)
        v8 = v2;
      else
        v8 = v4;
      v73 = v4;
      v74 = v4 - v8;
      while (1)
      {
        if (!(v74 + v7))
        {
          __break(1u);
          return;
        }
        v75 = *(unsigned __int8 *)(v5 + v4);
        v16 = objc_msgSend(a2, "bundleIdentifier");
        if (!v16)
          goto LABEL_9;
        v17 = v16;
        v18 = a2;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v21 = v20;

        v28 = 0x80000001000EFFC0;
        if (v75)
          v28 = 0x80000001000EFFF0;
        v76 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v28;
        if (v75)
          break;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000001000EFFC0, 0xD000000000000031, 0x80000001000EFFF0, 0);
        swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFC0, v30, v31, v32, v33, v34, v35, v36);
        if ((v29 & 1) != 0)
          goto LABEL_17;
        swift_bridgeObjectRelease(v21, v37, v38, v39, v40, v41, v42, v43);
        a2 = v18;
        v4 = v73;
LABEL_22:
        v52 = objc_msgSend(a2, "entitlements", v70);
        v53 = String._bridgeToObjectiveC()();
        v54 = sub_100018D44(0, (unint64_t *)&unk_10013EBA0, NSNumber_ptr);
        v55 = objc_msgSend(v52, "objectForKey:ofClass:", v53, swift_getObjCClassFromMetadata(v54));

        if (v55)
        {
          _bridgeAnyObjectToAny(_:)(v78);
          swift_unknownObjectRelease(v55);
        }
        else
        {
          memset(v78, 0, sizeof(v78));
        }
        sub_10007A204((uint64_t)v78, (uint64_t)v79);
        if (!v80)
        {
          sub_10000CC5C((uint64_t)v79, &qword_10013CB40);
LABEL_8:

          swift_bridgeObjectRelease(v76, v9, v10, v11, v12, v13, v14, v15);
          goto LABEL_9;
        }
        if ((swift_dynamicCast(&v77, v79, (char *)&type metadata for Any + 8, v54, 6) & 1) == 0)
          goto LABEL_8;
        v56 = v77;
        v57 = objc_msgSend(v77, "BOOLValue");

        swift_bridgeObjectRelease(v76, v58, v59, v60, v61, v62, v63, v64);
        if ((v57 & 1) != 0)
          goto LABEL_28;
LABEL_9:
        ++v7;
        ++v5;
        if (v4 == --v2)
          return;
      }
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFF0, v22, (id)0xD000000000000031, v23, v24, v25, v26, v27);
LABEL_17:
      if (qword_10013AD38 != -1)
        swift_once(&qword_10013AD38, sub_100077390);
      v44 = sub_10007567C(v19, (uint64_t)v21, qword_10013EB10);
      swift_bridgeObjectRelease(v21, v45, v46, v47, v48, v49, v50, v51);
      a2 = v18;
      v4 = v73;
      if ((v44 & 1) == 0)
        goto LABEL_22;
LABEL_28:
      v6 = v72;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v72);
      v81 = v72;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100011E9C(0, *(_QWORD *)v72->connection + 1, 1);
        v6 = v81;
      }
      v5 = v70;
      v67 = *(_QWORD *)v6->connection;
      v66 = *(_QWORD *)v6->airdropClient;
      if (v67 >= v66 >> 1)
      {
        sub_100011E9C(v66 > 1, v67 + 1, 1);
        v6 = v81;
      }
      *(_QWORD *)v6->connection = v67 + 1;
      v68 = (char *)v6 + v67;
      v4 = v73 + 1 + v7;
      v68[32] = v75;
      v69 = v73 + 1 == v2;
      v2 = v71;
    }
    while (!v69);
  }
}

void sub_100079DA4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _TtC9AirDropUI33AirDropTransferSessionsController *v26;
  void *v27;
  NSString v28;
  id v29;
  double v30;
  double v31;
  id v32;
  void *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _TtC9AirDropUI33AirDropTransferSessionsController *v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  _TtC9AirDropUI33AirDropTransferSessionsController *v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _TtC9AirDropUI33AirDropTransferSessionsController *v58;
  _TtC9AirDropUI33AirDropTransferSessionsController *v59;
  uint64_t v60;
  char v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  char v76;
  void *v77;
  uint64_t v78;
  uint64_t v79[2];

  v6 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain(a2);
  v7 = sub_100079414(a1, a2, 1);
  v33 = v7;
  if (!v7)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v8 = type metadata accessor for Logger(0);
    sub_100009558(v8, (uint64_t)qword_100148040);
    v9 = swift_bridgeObjectRetain_n(a2, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v79[0] = v13;
      *(_DWORD *)v12 = 136315138;
      swift_bridgeObjectRetain(a2);
      v78 = sub_10003A834(a1, a2, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Fetched shareable content from %s, but could not find an associated application record", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0xE000000000000000;
    v77 = &_swiftEmptySetSingleton;
    goto LABEL_8;
  }
  v34 = objc_msgSend(v7, "localizedName");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v36 = v35;

  v16 = v33;
  sub_1000799F4((uint64_t)&off_100123B80, v16);
  v38 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v37;
  v77 = (void *)sub_10008EB04(v37);

  swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
  v46 = objc_msgSend(v16, "appTags");
  v47 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, &type metadata for String);

  v14 = sub_10002DA2C(0x6E6564646968, 0xE600000000000000, v47);
  swift_bridgeObjectRelease(v47, v48, v49, v50, v51, v52, v53, v54);
  v55 = objc_msgSend(v16, "compatibilityObject");
  v56 = objc_msgSend(v55, "bundleType");

  if (!v56)
  {
    v17 = v36;
LABEL_8:
    v18 = v15;
    static String._unconditionallyBridgeFromObjectiveC(_:)(LSHiddenAppType);
    v26 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v19;
LABEL_9:
    swift_bridgeObjectRelease(v26, v19, v20, v21, v22, v23, v24, v25);
    goto LABEL_10;
  }
  v76 = v14;
  v17 = v36;
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v59 = v58;

  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(LSHiddenAppType);
  v26 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v19;
  if (!v59)
  {
    v18 = v15;
    v14 = v76;
    goto LABEL_9;
  }
  v18 = v15;
  if (v57 == v60 && v59 == (_TtC9AirDropUI33AirDropTransferSessionsController *)v19)
  {
    swift_bridgeObjectRelease_n(v59, 2);
    v14 = 1;
  }
  else
  {
    v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v59, v60, v19, 0);
    swift_bridgeObjectRelease(v59, v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRelease(v26, v69, v70, v71, v72, v73, v74, v75);
    v14 = v76 | v61;
  }
LABEL_10:
  v27 = (void *)objc_opt_self(UIImage);
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v29, "scale");
  v31 = v30;

  v32 = objc_msgSend(v27, "_applicationIconImageForBundleIdentifier:format:scale:", v28, 2, v31);
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)(a3 + 24) = a2;
  *(_QWORD *)(a3 + 32) = v32;
  *(_QWORD *)(a3 + 40) = v77;
  *(_BYTE *)(a3 + 48) = v14 & 1;
}

uint64_t sub_10007A204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013CB40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SourceApplication(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for SourceApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(void **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v7 = v6;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for SourceApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 32);
  v9 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  v10 = v9;

  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for SourceApplication(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SourceApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SourceApplication(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SourceApplication(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SourceApplication()
{
  return &type metadata for SourceApplication;
}

uint64_t storeEnumTagSinglePayload for SourceApplication.Capabilities(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10007A500 + 4 * byte_1000ED0A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007A534 + 4 * byte_1000ED0A0[v4]))();
}

uint64_t sub_10007A534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007A53C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007A544);
  return result;
}

uint64_t sub_10007A550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007A558);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10007A55C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007A564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SourceApplication.Capabilities()
{
  return &type metadata for SourceApplication.Capabilities;
}

uint64_t storeEnumTagSinglePayload for ShareableContentError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10007A5C0 + 4 * byte_1000ED0AA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10007A5E0 + 4 * byte_1000ED0AF[v4]))();
}

_BYTE *sub_10007A5C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10007A5E0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007A5E8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007A5F0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007A5F8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007A600(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentError()
{
  return &type metadata for ShareableContentError;
}

unint64_t sub_10007A620()
{
  unint64_t result;

  result = qword_10013EBB0;
  if (!qword_10013EBB0)
  {
    result = swift_getWitnessTable(&unk_1000ED158, &type metadata for ShareableContentError);
    atomic_store(result, (unint64_t *)&qword_10013EBB0);
  }
  return result;
}

unint64_t sub_10007A668()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013EBB8;
  if (!qword_10013EBB8)
  {
    v1 = sub_10000950C(&qword_10013EBC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10013EBB8);
  }
  return result;
}

unint64_t sub_10007A6B8()
{
  unint64_t result;

  result = qword_10013EBC8;
  if (!qword_10013EBC8)
  {
    result = swift_getWitnessTable(&unk_1000ED1F0, &type metadata for SourceApplication.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10013EBC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentTitleFormattingContext()
{
  return &type metadata for ShareableContentTitleFormattingContext;
}

uint64_t sub_10007A724(uint64_t result, const char *a2, _TtC9AirDropUI33AirDropTransferSessionsController *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t (*v12)(__int128 *);
  uint64_t airDropClient;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t (*v26)(__int128 *);
  __int128 v27[2];
  __int128 v28[2];
  _QWORD *v29;

  v10 = _swiftEmptyArrayStorage;
  v29 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD **)a3->connection;
  if (v11)
  {
    v12 = (uint64_t (*)(__int128 *))result;
    v10 = 0;
    airDropClient = (uint64_t)a3->airDropClient;
    v14 = _swiftEmptyArrayStorage;
    v25 = *(_QWORD **)a3->connection;
    v26 = (uint64_t (*)(__int128 *))result;
    while ((unint64_t)v10 < *(_QWORD *)a3->connection)
    {
      sub_100009008(airDropClient, (uint64_t)v28);
      v15 = v12(v28);
      if (v8)
      {
        sub_100009070(v28);
        swift_release(v14);
        swift_bridgeObjectRelease(a3, v18, v19, v20, v21, v22, v23, v24);
        return (uint64_t)v10;
      }
      if ((v15 & 1) != 0)
      {
        sub_10004EFB0(v28, (uint64_t)v27);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          sub_100011F0C(0, v14[2] + 1, 1);
        v14 = v29;
        v17 = v29[2];
        v16 = v29[3];
        if (v17 >= v16 >> 1)
        {
          sub_100011F0C(v16 > 1, v17 + 1, 1);
          v14 = v29;
        }
        v14[2] = v17 + 1;
        result = sub_10004EFB0(v27, (uint64_t)&v14[5 * v17 + 4]);
        v11 = v25;
        v12 = v26;
      }
      else
      {
        result = sub_100009070(v28);
      }
      v10 = (_QWORD *)((char *)v10 + 1);
      airDropClient += 40;
      if (v11 == v10)
      {
        v10 = v29;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3, a2, a3, a4, a5, a6, a7, a8);
    return (uint64_t)v10;
  }
  return result;
}

uint64_t sub_10007A8A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = v1;
  return swift_task_switch(sub_10007A8C0, 0, 0);
}

uint64_t sub_10007A8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16);
  *(_QWORD *)(v0 + 152) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 160) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 168) = 0;
    v3 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    sub_100009008(v3, v0 + 16);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 176) = v4;
    *(_QWORD *)(v0 + 184) = v5;
    sub_10000904C((_QWORD *)(v0 + 16), v4);
    v6 = *(int **)(v5 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v4, &unk_100114974, &unk_100114984);
    *(_QWORD *)(v0 + 192) = AssociatedTypeWitness;
    v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
    *(_QWORD *)(v0 + 200) = v8;
    v9 = *(_QWORD *)(v8 - 8);
    *(_QWORD *)(v0 + 208) = v9;
    v10 = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(v0 + 216) = v10;
    v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    v11 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 224) = v11;
    *v11 = v0;
    v11[1] = sub_10007AA04;
    return v14(v10, v4, v5);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v13 + 32) = 0;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10007AA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10007AC98;
  else
    v3 = sub_10007AA68;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10007AA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *v16;
  uint64_t v17;
  _QWORD *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v15 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    v16 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 80) = v2;
    *(_QWORD *)(v0 + 88) = swift_getAssociatedConformanceWitness(v14, v15, v2, &unk_100114974, &unk_10011497C);
    v18 = sub_10004EECC((_QWORD *)(v0 + 56));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 32))(v18, v1, v2);
    swift_bridgeObjectRelease(v16, v19, v20, v21, v22, v23, v24, v25);
    swift_task_dealloc(v1);
    sub_10004EFB0((__int128 *)(v0 + 56), v17);
    sub_100009070((_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(v1, *(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  *(_QWORD *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  sub_10000CC5C(v0 + 56, &qword_10013ECE8);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168) + 1;
  sub_100009070((_QWORD *)(v0 + 16));
  if (v5 == v4)
  {
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 152), v6, v7, v8, v9, v10, v11, v12);
    v13 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v13 + 32) = 0;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v27 = *(_QWORD *)(v0 + 168) + 1;
  *(_QWORD *)(v0 + 168) = v27;
  sub_100009008(*(_QWORD *)(v0 + 152) + 40 * v27 + 32, v0 + 16);
  v28 = *(_QWORD *)(v0 + 40);
  v29 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 176) = v28;
  *(_QWORD *)(v0 + 184) = v29;
  sub_10000904C((_QWORD *)(v0 + 16), v28);
  v30 = *(int **)(v29 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v29, v28, &unk_100114974, &unk_100114984);
  *(_QWORD *)(v0 + 192) = AssociatedTypeWitness;
  v32 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  *(_QWORD *)(v0 + 200) = v32;
  v33 = *(_QWORD *)(v32 - 8);
  *(_QWORD *)(v0 + 208) = v33;
  v34 = swift_task_alloc((*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 216) = v34;
  v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v30 + *v30);
  v35 = (_QWORD *)swift_task_alloc(v30[1]);
  *(_QWORD *)(v0 + 224) = v35;
  *v35 = v0;
  v35[1] = sub_10007AA04;
  return v36(v34, v28, v29);
}

uint64_t sub_10007AC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t DynamicType;
  uint64_t v14;
  unint64_t v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;

  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v1 = *(_QWORD *)(v0 + 232);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_100148040);
  sub_100009008(v0 + 16, v0 + 96);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 232);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v47 = v10;
    *(_DWORD *)v8 = 136315394;
    v11 = *(_QWORD *)(v0 + 120);
    v12 = sub_10000904C((_QWORD *)(v0 + 96), v11);
    DynamicType = swift_getDynamicType(v12, v11, 1);
    v14 = _typeName(_:qualified:)(DynamicType, 1);
    v16 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v15;
    *(_QWORD *)(v8 + 4) = sub_10003A834(v14, v15, &v47);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    sub_100009070((_QWORD *)(v0 + 96));
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v7);
    v24 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v8 + 14) = v24;
    *v9 = v24;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error retrieving shareable content from %s: %@", (uint8_t *)v8, 0x16u);
    v25 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v9, 1, v25);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 232));
    sub_100009070((_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v26 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 168) + 1;
  sub_100009070((_QWORD *)(v0 + 16));
  if (v27 == v26)
  {
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 152), v28, v29, v30, v31, v32, v33, v34);
    v35 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v35 + 32) = 0;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 168) + 1;
    *(_QWORD *)(v0 + 168) = v37;
    sub_100009008(*(_QWORD *)(v0 + 152) + 40 * v37 + 32, v0 + 16);
    v38 = *(_QWORD *)(v0 + 40);
    v39 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 176) = v38;
    *(_QWORD *)(v0 + 184) = v39;
    sub_10000904C((_QWORD *)(v0 + 16), v38);
    v40 = *(int **)(v39 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v39, v38, &unk_100114974, &unk_100114984);
    *(_QWORD *)(v0 + 192) = AssociatedTypeWitness;
    v42 = type metadata accessor for Optional(0, AssociatedTypeWitness);
    *(_QWORD *)(v0 + 200) = v42;
    v43 = *(_QWORD *)(v42 - 8);
    *(_QWORD *)(v0 + 208) = v43;
    v44 = swift_task_alloc((*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(v0 + 216) = v44;
    v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v40 + *v40);
    v45 = (_QWORD *)swift_task_alloc(v40[1]);
    *(_QWORD *)(v0 + 224) = v45;
    *v45 = v0;
    v45[1] = sub_10007AA04;
    return v46(v44, v38, v39);
  }
}

uint64_t sub_10007B00C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  v4 = type metadata accessor for DeviceLockState(0);
  v3[31] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[32] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v6);
  v3[34] = swift_task_alloc(v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10013EC2C);
  v3[35] = v7;
  *v7 = v3;
  v7[1] = sub_10007B0B4;
  v7[17] = v3 + 7;
  v7[18] = v2;
  return swift_task_switch(sub_10007A8C0, 0, 0);
}

uint64_t sub_10007B0B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10007B504;
  else
    v3 = sub_10007B118;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10007B118()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char v8;
  void (*v9)(uint64_t, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _TtC9AirDropUI33AirDropTransferSessionsController *v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _TtC9AirDropUI33AirDropTransferSessionsController *v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v61;

  v1 = (__int128 *)(v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 264);
    v2 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 256);
    v6 = sub_10004EFB0(v1, v0 + 16);
    dispatch thunk of SFLockStateMonitor.lockState.getter(v6);
    v7.n128_f64[0] = (*(double (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for DeviceLockState.unlocked(_:), v4);
    v8 = static DeviceLockState.== infix(_:_:)(v2, v3, v7);
    v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v9(v3, v4);
    v9(v2, v4);
    if ((v8 & 1) != 0)
    {
      v10 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(*(_QWORD *)(v0 + 240) + 24);
      v11 = swift_task_alloc(32);
      *(_QWORD *)(v11 + 16) = v0 + 16;
      swift_bridgeObjectRetain(v10);
      v17 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10007A724((uint64_t)sub_10007B80C, (const char *)v11, v10, v12, v13, v14, v15, v16);
      swift_task_dealloc(v11);
      if (*(_QWORD *)v17->connection)
      {
        v26 = *(_QWORD *)(v0 + 224);
        v25 = *(_QWORD *)(v0 + 232);
        sub_100009008(v0 + 16, v0 + 176);
        v33 = sub_10007B540(v25, v17, v27, v28, v29, v30, v31, v32);
        sub_100009070((_QWORD *)(v0 + 16));
        sub_10004EFB0((__int128 *)(v0 + 176), v26);
        *(_QWORD *)(v26 + 40) = v33;
      }
      else
      {
        swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
        if (qword_10013AD60 != -1)
          swift_once(&qword_10013AD60, sub_100092254);
        v41 = type metadata accessor for Logger(0);
        sub_100009558(v41, (uint64_t)qword_100148040);
        v42 = sub_100009008(v0 + 16, v0 + 96);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc(12, -1);
          v46 = swift_slowAlloc(32, -1);
          v61 = v46;
          *(_DWORD *)v45 = 136315138;
          sub_100009008(v0 + 96, v0 + 136);
          v47 = sub_100008F88((uint64_t *)&unk_1001403A0);
          v48 = String.init<A>(reflecting:)(v0 + 136, v47);
          v50 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v49;
          *(_QWORD *)(v0 + 216) = sub_10003A834(v48, v49, &v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224);
          swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
          sub_100009070((_QWORD *)(v0 + 96));
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Could not find any supported actions for shareable content: %s", v45, 0xCu);
          swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v46, -1, -1);
          swift_slowDealloc(v45, -1, -1);

        }
        else
        {

          sub_100009070((_QWORD *)(v0 + 96));
        }
        sub_100009070((_QWORD *)(v0 + 16));
        v58 = *(_OWORD **)(v0 + 224);
        v58[1] = 0u;
        v58[2] = 0u;
        *v58 = 0u;
      }
    }
    else
    {
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v35 = type metadata accessor for Logger(0);
      v36 = sub_100009558(v35, (uint64_t)qword_100148040);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Not returning shareable content because device is locked", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }
      v40 = *(_OWORD **)(v0 + 224);

      sub_100009070((_QWORD *)(v0 + 16));
      v40[1] = 0u;
      v40[2] = 0u;
      *v40 = 0u;
    }
  }
  else
  {
    v34 = *(_OWORD **)(v0 + 224);
    sub_10000CC5C((uint64_t)v1, &qword_10013ECE8);
    *v34 = 0u;
    v34[1] = 0u;
    v34[2] = 0u;
  }
  v59 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007B504()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007B540(uint64_t result, _TtC9AirDropUI33AirDropTransferSessionsController *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  int64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t airDropClient;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  __int128 v43[2];
  _QWORD *v44;

  if (result < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v9 = result;
  if (!result)
  {
    swift_bridgeObjectRelease(a2, (SEL)a2, a3, a4, a5, a6, a7, a8);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  if (*(_QWORD *)a2->connection >= result)
    v10 = result;
  else
    v10 = *(_QWORD *)a2->connection;
  v44 = _swiftEmptyArrayStorage;
  sub_100011F0C(0, v10, 0);
  v18 = _swiftEmptyArrayStorage;
  v19 = *(_QWORD *)a2->connection;
  if (!v19)
  {
LABEL_28:
    swift_bridgeObjectRelease(a2, v11, v12, v13, v14, v15, v16, v17);
    return (uint64_t)v18;
  }
  airDropClient = (uint64_t)a2->airDropClient;
  swift_bridgeObjectRetain(a2);
  v21 = 0;
  v22 = 0;
  v23 = v19 - 1;
  while (1)
  {
    result = sub_100009008(airDropClient, (uint64_t)v43);
    v24 = v18[2];
    v44 = v18;
    if ((uint64_t)v24 >= v9)
    {
      if (v22 >= v24)
        goto LABEL_31;
      sub_100009070(&v18[5 * v22 + 4]);
      result = sub_10004EFB0(v43, (uint64_t)&v18[5 * v22 + 4]);
      v18 = v44;
      if ((uint64_t)++v22 < v9)
      {
        if (v23 == v21)
          break;
      }
      else
      {
        if (v23 == v21)
        {
          swift_bridgeObjectRelease_n(a2, 2);
          return (uint64_t)v18;
        }
        v22 = 0;
      }
      goto LABEL_19;
    }
    v25 = v18[3];
    if (v24 >= v25 >> 1)
    {
      sub_100011F0C(v25 > 1, v24 + 1, 1);
      v18 = v44;
    }
    v18[2] = v24 + 1;
    result = sub_10004EFB0(v43, (uint64_t)&v18[5 * v24 + 4]);
    if (v23 == v21)
      break;
LABEL_19:
    ++v21;
    airDropClient += 40;
    if (v21 >= *(_QWORD *)a2->connection)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease(a2, v26, v27, v28, v29, v30, v31, v32);
  if (!v22)
    goto LABEL_28;
  v33 = v18[2];
  *(_QWORD *)&v43[0] = _swiftEmptyArrayStorage;
  result = sub_100011F0C(0, v33, 0);
  if (v33 < (uint64_t)v22)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((v22 & 0x8000000000000000) != 0)
    goto LABEL_34;
  v34 = v18[2];
  if (v34 >= v22 && v34 >= v33)
  {
    v35 = swift_retain(v18);
    sub_10007B864(v35, (uint64_t)(v18 + 4), v22, (2 * v33) | 1);
    swift_bridgeObjectRelease(a2, v36, v37, v38, v39, v40, v41, v42);
    sub_10007B864((uint64_t)v18, (uint64_t)(v18 + 4), 0, (2 * v22) | 1);
    return *(_QWORD *)&v43[0];
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10007B7A8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for ShareableContentResolver()
{
  return objc_opt_self(_TtC9AirDropUI24ShareableContentResolver);
}

uint64_t sub_10007B80C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = a1[3];
  v4 = a1[4];
  sub_10000904C(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v2, v3, v4) & 1;
}

uint64_t sub_10007B864(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *v4 = v7;
  if (!isUniquelyReferenced_nonNull_native || (v14 = *(_QWORD *)(v7 + 24) >> 1, v14 < v9))
  {
    if (v8 <= v9)
      v15 = v8 + v6;
    else
      v15 = v8;
    sub_100011F0C(isUniquelyReferenced_nonNull_native, v15, 1);
    v7 = *v4;
    v14 = *(_QWORD *)(*v4 + 24) >> 1;
  }
  v16 = *(_QWORD *)(v7 + 16);
  v17 = v14 - v16;
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v18 = a3;
      if (v17)
        return swift_unknownObjectRelease(a1);
      goto LABEL_24;
    }
    goto LABEL_46;
  }
  if (v17 < v6)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v6 < 0)
  {
LABEL_49:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_50;
  }
  v20 = v7 + 40 * v16 + 32;
  v21 = a2 + 40 * a3;
  if (v21 < v20 + 40 * v6 && v20 < v21 + 40 * v6)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_50:
    __break(1u);
    return result;
  }
  sub_100008F88(&qword_10013B848);
  swift_arrayInitWithCopy(v20);
  if (v6)
  {
    v23 = *(_QWORD *)(v7 + 16);
    v24 = __OFADD__(v23, v6);
    v25 = v23 + v6;
    if (v24)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    *(_QWORD *)(v7 + 16) = v25;
  }
  v18 = v5;
  if (v6 != v17)
    return swift_unknownObjectRelease(a1);
LABEL_24:
  v31 = a1;
  v26 = *(_QWORD *)(v7 + 16);
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  sub_10007BC10((uint64_t)&v36, (uint64_t)&v34);
  while (v35)
  {
    sub_10000CC5C((uint64_t)&v34, &qword_10013ECF0);
    v28 = *v4;
    v29 = *(_QWORD *)(*v4 + 24);
    v27 = v29 >> 1;
    if ((uint64_t)(v29 >> 1) < v26 + 1)
    {
      sub_100011F0C(v29 > 1, v26 + 1, 1);
      v28 = *v4;
      v27 = *(_QWORD *)(*v4 + 24) >> 1;
    }
    swift_retain(v28);
    sub_10007BC10((uint64_t)&v36, (uint64_t)&v32);
    if (v33)
    {
      if (v26 > v27)
        v27 = v26;
      v30 = v28 + 40 * v26 + 32;
      do
      {
        sub_10004EFB0(&v32, (uint64_t)&v34);
        if (v27 == v26)
        {
          sub_100009070(&v34);
          swift_release(v28);
          v26 = v27;
          goto LABEL_27;
        }
        sub_10000CC5C((uint64_t)&v36, &qword_10013ECF0);
        sub_10004EFB0(&v34, v30);
        if (v18 == v5)
        {
          v38 = 0;
          v18 = v5;
          v36 = 0u;
          v37 = 0u;
        }
        else
        {
          if (v18 < a3 || v18 >= v5)
          {
            __break(1u);
            goto LABEL_44;
          }
          sub_100009008(a2 + 40 * v18++, (uint64_t)&v36);
        }
        sub_10007BC10((uint64_t)&v36, (uint64_t)&v32);
        v30 += 40;
        ++v26;
      }
      while (v33);
    }
    swift_release(v28);
    sub_10000CC5C((uint64_t)&v32, &qword_10013ECF0);
    v27 = v26;
LABEL_27:
    *(_QWORD *)(*v4 + 16) = v27;
    sub_10007BC10((uint64_t)&v36, (uint64_t)&v34);
  }
  sub_10000CC5C((uint64_t)&v36, &qword_10013ECF0);
  swift_unknownObjectRelease(v31);
  return sub_10000CC5C((uint64_t)&v34, &qword_10013ECF0);
}

uint64_t sub_10007BC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88(&qword_10013ECF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10007BC58(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t started;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t active;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;

  v3 = v2;
  v6 = type metadata accessor for SendOverAirDropAction(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFLockStateMonitor(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = SFLockStateMonitor.init()();
  v2[5] = a2;
  v2[6] = v11;
  v2[4] = a1;
  v12 = sub_100008F88(&qword_10013ECF8);
  v13 = swift_allocObject(v12, 192, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1000ED2D0;
  v14 = (void *)objc_opt_self(TUCallCenter);
  swift_retain(a1);
  swift_retain(a2);
  v15 = objc_msgSend(v14, "sharedInstance");
  v16 = objc_msgSend(v15, "conversationManager");

  *(_QWORD *)(v13 + 56) = &type metadata for ActiveSharePlaySessionProvider;
  *(_QWORD *)(v13 + 64) = &off_100140A80;
  *(_QWORD *)(v13 + 32) = v16;
  v17 = objc_msgSend(objc_allocWithZone((Class)SWShareableContentExtractor), "init");
  *(_QWORD *)(v13 + 96) = sub_10007C098();
  *(_QWORD *)(v13 + 104) = &off_1001409F8;
  *(_QWORD *)(v13 + 72) = v17;
  *(_QWORD *)(v13 + 136) = &type metadata for UserActivityShareableContentProvider;
  *(_QWORD *)(v13 + 144) = &off_100140A58;
  *(_QWORD *)(v13 + 176) = &type metadata for FrontmostAppShareableContentProvider;
  *(_QWORD *)(v13 + 184) = &off_100140A30;
  v3[2] = v13;
  swift_retain(a1);
  LocalizedStringResource.init(stringLiteral:)(0x4552414853, 0xE500000000000000);
  *(_QWORD *)&v9[*(int *)(v6 + 20)] = a1;
  v18 = sub_100008F88(&qword_10013B840);
  v19 = swift_allocObject(v18, 232, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000ED2E0;
  started = type metadata accessor for StartSharePlayAction(0);
  *(_QWORD *)(v19 + 56) = started;
  *(_QWORD *)(v19 + 64) = sub_100008694(&qword_10013ED08, type metadata accessor for StartSharePlayAction, (uint64_t)&unk_1000E9650);
  v21 = sub_10004EECC((_QWORD *)(v19 + 32));
  swift_retain(a2);
  LocalizedStringResource.init(stringLiteral:)(0x414C504552414853, 0xE900000000000059);
  *(_QWORD *)((char *)v21 + *(int *)(started + 20)) = a2;
  v22 = type metadata accessor for StartNearbySharePlayAction(0);
  *(_QWORD *)(v19 + 96) = v22;
  *(_QWORD *)(v19 + 104) = sub_100008694(&qword_10013ED10, type metadata accessor for StartNearbySharePlayAction, (uint64_t)&unk_1000E9634);
  v23 = sub_10004EECC((_QWORD *)(v19 + 72));
  LocalizedStringResource.init(stringLiteral:)(0x414C504552414853, 0xE900000000000059);
  sub_10007C0D4((uint64_t)v9, (uint64_t)v23 + *(int *)(v22 + 20));
  active = type metadata accessor for AddToActiveSharePlaySessionAction(0);
  *(_QWORD *)(v19 + 136) = active;
  *(_QWORD *)(v19 + 144) = sub_100008694(&qword_10013ED18, type metadata accessor for AddToActiveSharePlaySessionAction, (uint64_t)&unk_1000E9618);
  v25 = sub_10004EECC((_QWORD *)(v19 + 112));
  swift_retain(a2);
  LocalizedStringResource.init(stringLiteral:)(4473921, 0xE300000000000000);
  *(_QWORD *)((char *)v25 + *(int *)(active + 20)) = a2;
  v26 = *(int *)(active + 24);
  v27 = objc_msgSend(v14, "sharedInstance");
  v28 = objc_msgSend(v27, "conversationManager");

  *(_QWORD *)((char *)v25 + v26) = v28;
  *(_QWORD *)(v19 + 176) = v6;
  *(_QWORD *)(v19 + 184) = sub_100008694(&qword_10013ED20, type metadata accessor for SendOverAirDropAction, (uint64_t)&unk_1000E95FC);
  v29 = sub_10004EECC((_QWORD *)(v19 + 152));
  sub_10007C0D4((uint64_t)v9, (uint64_t)v29);
  v30 = type metadata accessor for StartCollaborationAction(0);
  *(_QWORD *)(v19 + 216) = v30;
  *(_QWORD *)(v19 + 224) = sub_100008694(&qword_10013ED28, type metadata accessor for StartCollaborationAction, (uint64_t)&unk_1000E95E0);
  v31 = sub_10004EECC((_QWORD *)(v19 + 192));
  swift_retain(a2);
  LocalizedStringResource.init(stringLiteral:)(0x4552414853, 0xE500000000000000);
  *(_QWORD *)((char *)v31 + *(int *)(v30 + 20)) = a2;
  v32 = *(int *)(v30 + 24);
  *(_QWORD *)((char *)v31 + v32) = objc_msgSend(objc_allocWithZone((Class)SWShareableContentExtractor), "init");
  sub_10007C118((uint64_t)v9);
  v3[3] = v19;
  return v3;
}

unint64_t sub_10007C098()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013ED00;
  if (!qword_10013ED00)
  {
    v1 = objc_opt_self(SWShareableContentExtractor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013ED00);
  }
  return result;
}

uint64_t sub_10007C0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SendOverAirDropAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007C118(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SendOverAirDropAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10007C244()
{
  return sub_10007C794(type metadata accessor for CNSecureContactViewController);
}

uint64_t type metadata accessor for CNSecureContactViewController()
{
  return objc_opt_self(_TtC9AirDropUI29CNSecureContactViewController);
}

void sub_10007C270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  id v13;
  id v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  id v34;
  id v35;
  Class v36;
  objc_super v37;
  uint64_t v38;
  UIAction_optional v39;
  UIMenu_optional v40;

  v4 = v3;
  v8 = &v4[OBJC_IVAR____TtC9AirDropUI28ContactDetailsViewController_contactDetails];
  v9 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v8 + 5) = v9;
  *((_DWORD *)v8 + 24) = *(_DWORD *)(a1 + 96);
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a1;
  *((_OWORD *)v8 + 1) = v10;
  v11 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v8 + 3) = v11;
  v12 = &v4[OBJC_IVAR____TtC9AirDropUI28ContactDetailsViewController_dismissHandler];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  v13 = objc_allocWithZone((Class)CNContactStore);
  swift_retain(a3);
  sub_100062DAC((_QWORD *)a1);
  v14 = objc_msgSend(v13, "init");
  v15 = String._bridgeToObjectiveC()();
  sub_10007CE2C((_QWORD *)a1);
  v16 = sub_100008F88((uint64_t *)&unk_10013DF40);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1000E9380;
  v18 = objc_msgSend((id)objc_opt_self(CNContactViewController), "descriptorForRequiredKeys");
  *(_QWORD *)(v17 + 32) = v18;
  v38 = v17;
  specialized Array._endMutation()(v18);
  sub_100008F88(&qword_10013DF30);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v17, v20, v21, v22, v23, v24, v25, v26);
  v27 = objc_msgSend(v14, "contactForIdentifier:keysToFetch:", v15, isa);

  if (v27)
  {
    v28 = type metadata accessor for CNSecureContactViewController();
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "viewControllerForContact:", v27);
    objc_msgSend(v29, "setDisplayMode:", 2);
    objc_msgSend(v29, "setAllowsEditing:", 1);
    objc_msgSend(v29, "setActions:", 260);
    v37.receiver = v4;
    v37.super_class = (Class)type metadata accessor for ContactDetailsViewController();
    v30 = objc_msgSendSuper2(&v37, "initWithRootViewController:", v29);
    objc_msgSend(v29, "setDelegate:", v30);
    sub_100018D44(0, (unint64_t *)&qword_10013EE00, UIAction_ptr);
    v31 = swift_allocObject(&unk_100127B98, 24, 7);
    swift_unknownObjectWeakInit(v31 + 16, v30);
    v32 = (_QWORD *)swift_allocObject(&unk_100127BC0, 40, 7);
    v32[2] = v31;
    v32[3] = a2;
    v32[4] = a3;
    swift_retain(a3);
    v33 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10007CEEC, v32);
    v34 = objc_msgSend(v29, "navigationItem");
    sub_100018D44(0, &qword_10013EE08, UIBarButtonItem_ptr);
    v35 = v33;
    v39.value.super.super.isa = (Class)v33;
    v39.is_nil = 0;
    v36 = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemDone, v39, v40).super.super.isa;
    objc_msgSend(v34, "setLeftBarButtonItem:", v36);

    swift_release(a3);
  }
  else
  {
    __break(1u);
  }
}

void sub_10007C5C4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    a3();

  }
}

id sub_10007C788()
{
  return sub_10007C794(type metadata accessor for ContactDetailsViewController);
}

id sub_10007C794(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for ContactDetailsViewController()
{
  return objc_opt_self(_TtC9AirDropUI28ContactDetailsViewController);
}

uint64_t destroy for ContactDetailsView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_release(a1[14]);
}

uint64_t initializeWithCopy for ContactDetailsView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t assignWithCopy for ContactDetailsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  v17 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v16;
  swift_retain(v16);
  swift_release(v18);
  return a1;
}

__n128 initializeWithTake for ContactDetailsView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ContactDetailsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  v13 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDetailsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDetailsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactDetailsView()
{
  return &type metadata for ContactDetailsView;
}

unint64_t sub_10007CC64()
{
  unint64_t result;

  result = qword_10013EDF0;
  if (!qword_10013EDF0)
  {
    result = swift_getWitnessTable(&unk_1000ED42C, &type metadata for ContactDetailsView);
    atomic_store(result, (unint64_t *)&qword_10013EDF0);
  }
  return result;
}

void sub_10007CCA8()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[6];
  int v7;

  v1 = *(_OWORD *)(v0 + 80);
  v6[4] = *(_OWORD *)(v0 + 64);
  v6[5] = v1;
  v7 = *(_DWORD *)(v0 + 96);
  v2 = *(_OWORD *)(v0 + 16);
  v6[0] = *(_OWORD *)v0;
  v6[1] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  v6[2] = *(_OWORD *)(v0 + 32);
  v6[3] = v3;
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  objc_allocWithZone((Class)type metadata accessor for ContactDetailsViewController());
  sub_100062DAC(v6);
  swift_retain(v5);
  sub_10007C270((uint64_t)v6, v4, v5);
}

uint64_t sub_10007CD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007CDE8();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10007CD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007CDE8();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10007CDC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007CDE8();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10007CDE8()
{
  unint64_t result;

  result = qword_10013EDF8;
  if (!qword_10013EDF8)
  {
    result = swift_getWitnessTable(&unk_1000ED3B4, &type metadata for ContactDetailsView);
    atomic_store(result, (unint64_t *)&qword_10013EDF8);
  }
  return result;
}

_QWORD *sub_10007CE2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  v6 = a1[11];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10007CE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_10007CEC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10007CEEC(uint64_t a1)
{
  uint64_t v1;

  sub_10007C5C4(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_10007CEF8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000031;
  else
    v3 = 0xD000000000000021;
  if (v2)
    v4 = 0x80000001000EFFC0;
  else
    v4 = 0x80000001000EFFF0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000031;
  else
    v5 = 0xD000000000000021;
  if ((a2 & 1) != 0)
    v6 = 0x80000001000EFFF0;
  else
    v6 = 0x80000001000EFFC0;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

_TtC9AirDropUI33AirDropTransferSessionsController *sub_10007CFA0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v19;
  unsigned __int8 v20;
  char v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v19 = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_bridgeObjectRetain(a1);
  v2 = &v19->interventionTasks[3];
  v3 = &_swiftEmptyArrayStorage;
  do
  {
    v4 = *(_QWORD *)(v2 - 19);
    v5 = *(_QWORD *)(v2 - 11);
    v6 = *(v2 - 2);
    v7 = *(v2 - 1);
    v20 = *v2;
    v21 = *(v2 - 3);
    swift_bridgeObjectRetain(v5);
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      v3 = sub_100087AA4(0, *(_QWORD *)v3->connection + 1, 1, v3, v11, v12, v13, v14);
    v16 = *(_QWORD *)v3->connection;
    v15 = *(_QWORD *)v3->airdropClient;
    if (v16 >= v15 >> 1)
      v3 = sub_100087AA4((_TtC9AirDropUI33AirDropTransferSessionsController *)(v15 > 1), v16 + 1, 1, v3, v11, v12, v13, v14);
    v2 += 24;
    *(_QWORD *)v3->connection = v16 + 1;
    v17 = (char *)v3 + 24 * v16;
    *((_QWORD *)v17 + 4) = v4;
    *((_QWORD *)v17 + 5) = v5;
    v17[48] = v21;
    v17[49] = v6;
    v17[50] = v7;
    v17[51] = v20;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(v19, v8, v9, v10, v11, v12, v13, v14);
  return v3;
}

uint64_t sub_10007D0D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;

  v47 = a4;
  v52 = a2;
  v55 = sub_100008F88((uint64_t *)&unk_10013F1A0);
  v46 = *(_QWORD *)(v55 - 8);
  v7 = __chkstk_darwin(v55, v6);
  v51 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v57 = (uint64_t)&v46 - v11;
  __chkstk_darwin(v10, v12);
  v50 = (char *)&v46 - v13;
  v14 = *(_QWORD *)(a1 + 64);
  v48 = a1 + 64;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v49 = (unint64_t)(v15 + 63) >> 6;
  v54 = a1;
  result = swift_bridgeObjectRetain(a1);
  v19 = 0;
  v53 = a3;
  v20 = v57;
  if (!v17)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v56 = v19;
  for (i = v21 | (v19 << 6); ; i = __clz(__rbit64(v24)) + (j << 6))
  {
    v27 = v54;
    v28 = *(_QWORD *)(v54 + 48);
    v29 = type metadata accessor for UUID(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = v28 + *(_QWORD *)(v30 + 72) * i;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    v33 = (uint64_t)v50;
    v32(v50, v31, v29);
    v34 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * i);
    v35 = v55;
    *(_QWORD *)(v33 + *(int *)(v55 + 48)) = v34;
    sub_10009176C(v33, v20);
    v36 = *(int *)(v35 + 48);
    v37 = v51;
    v32(v51, v20, v29);
    v38 = *(_QWORD *)(v20 + v36);
    *(_QWORD *)&v37[v36] = v38;
    swift_retain(v34);
    v39 = swift_retain(v38);
    v40 = Activity.id.getter(v39);
    v42 = v41;
    swift_release(v38);
    a3 = v53;
    if (v40 == v52 && v42 == v53)
    {
      swift_bridgeObjectRelease(v53);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v29);
LABEL_28:
      swift_release(v54);
      v45 = v47;
      sub_10009176C(v57, v47);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v45, 0, 1, v55);
      return swift_bridgeObjectRelease(a3);
    }
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v52, v53, 0);
    swift_bridgeObjectRelease(v42);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v29);
    if ((v44 & 1) != 0)
      goto LABEL_28;
    result = sub_10000CC5C(v57, (uint64_t *)&unk_10013F1A0);
    v19 = v56;
    if (v17)
      goto LABEL_4;
LABEL_5:
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v23 >= v49)
      goto LABEL_29;
    v24 = *(_QWORD *)(v48 + 8 * v23);
    j = v19 + 1;
    if (v24)
      goto LABEL_19;
    j = v19 + 2;
    if (v19 + 2 >= v49)
      goto LABEL_29;
    v24 = *(_QWORD *)(v48 + 8 * j);
    if (v24)
      goto LABEL_19;
    j = v19 + 3;
    if (v19 + 3 >= v49)
      goto LABEL_29;
    v24 = *(_QWORD *)(v48 + 8 * j);
    if (v24)
      goto LABEL_19;
    j = v19 + 4;
    if (v19 + 4 >= v49)
      goto LABEL_29;
    v24 = *(_QWORD *)(v48 + 8 * j);
    if (v24)
      goto LABEL_19;
    v26 = v19 + 5;
    if (v19 + 5 >= v49)
    {
LABEL_29:
      swift_release(v54);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1, 1, v55);
      return swift_bridgeObjectRelease(a3);
    }
    v24 = *(_QWORD *)(v48 + 8 * v26);
    for (j = v19 + 5; !v24; ++v26)
    {
      j = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_32;
      if (j >= v49)
        goto LABEL_29;
      v24 = *(_QWORD *)(v48 + 8 * j);
    }
LABEL_19:
    v17 = (v24 - 1) & v24;
    v56 = j;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10007D460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t KeyPath;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _TtC9AirDropUI33AirDropTransferSessionsController *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  _TtC9AirDropUI33AirDropTransferSessionsController *v49;
  uint64_t v50;
  _TtC9AirDropUI33AirDropTransferSessionsController *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _TtC9AirDropUI33AirDropTransferSessionsController *v60;

  v1 = a1;
  v60 = &_swiftEmptyArrayStorage;
  v40 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v41 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v39 = result;
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v47 = v6;
      v9 = v8 | (v6 << 6);
      goto LABEL_24;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v41)
      goto LABEL_29;
    v11 = *(_QWORD *)(v40 + 8 * v10);
    v12 = v6 + 1;
    if (!v11)
    {
      v12 = v6 + 2;
      if (v6 + 2 >= v41)
        goto LABEL_29;
      v11 = *(_QWORD *)(v40 + 8 * v12);
      if (!v11)
      {
        v12 = v6 + 3;
        if (v6 + 3 >= v41)
          goto LABEL_29;
        v11 = *(_QWORD *)(v40 + 8 * v12);
        if (!v11)
        {
          v12 = v6 + 4;
          if (v6 + 4 >= v41)
            goto LABEL_29;
          v11 = *(_QWORD *)(v40 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_23:
    v4 = (v11 - 1) & v11;
    v47 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v9);
    KeyPath = swift_getKeyPath(&unk_1000ED6F0);
    v16 = swift_getKeyPath(&unk_1000ED718);
    v17 = v14;
    static Published.subscript.getter(&v48, v17, KeyPath, v16);
    swift_release(KeyPath);
    swift_release(v16);
    v18 = v57;
    if (v57 > 0xFFFFFFFEFFFFFFFFLL)
    {

      v7 = &_swiftEmptySetSingleton;
    }
    else
    {
      v19 = (uint64_t)v49;
      v20 = v51;
      v44 = v50;
      v45 = v48;
      v46 = v52;
      v7 = v54;
      v21 = v56;
      v42 = v55;
      v43 = v53;
      v22 = v58;
      v23 = v59;
      if ((v57 & 0x8000000000000000) != 0)
      {
        v38 = v49;
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v46);
        sub_10004BC38(v45, (uint64_t)v38, v44, (uint64_t)v20, v46, v43, (uint64_t)v7, v42, v21, v18, v22, v23);

        swift_bridgeObjectRelease(v20, v24, v25, v26, v27, v28, v29, v30);
        swift_bridgeObjectRelease(v38, v31, v32, v33, v34, v35, v36, v37);
        v7 = (void *)v46;
      }
      else
      {
        swift_bridgeObjectRetain(v54);
        sub_10004BC38(v45, v19, v44, (uint64_t)v20, v46, v43, (uint64_t)v7, v42, v21, v18, v22, v23);

      }
      v1 = v39;
    }
    v6 = v47;
    result = sub_100087D1C((uint64_t)v7);
  }
  v13 = v6 + 5;
  if (v6 + 5 >= v41)
  {
LABEL_29:
    swift_release(v1);
    return (uint64_t)v60;
  }
  v11 = *(_QWORD *)(v40 + 8 * v13);
  if (v11)
  {
    v12 = v6 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v41)
      goto LABEL_29;
    v11 = *(_QWORD *)(v40 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_10007D774(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F88((uint64_t *)&unk_10013CD90);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v9);
    result = sub_10003AF58(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10007D88C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100008F88(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v28 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v28);
    return (unint64_t)v13;
  }
  sub_100008F88(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = *(int *)(v6 + 48);
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v7 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_10000CC18(v18, (uint64_t)v10, a2);
    result = sub_10003AEC0((uint64_t)v10);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = v13[6];
    v24 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v10, v24);
    *(_QWORD *)(v13[7] + 8 * v22) = *(_QWORD *)&v10[v15];
    v25 = v13[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_12;
    v13[2] = v27;
    v18 += v19;
    if (!--v14)
    {
      swift_release(v13);
      v28 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007DA18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100008F88(&qword_10013F300);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }
  sub_100008F88((uint64_t *)&unk_10013F170);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = *(int *)(v2 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10000CC18(v14, (uint64_t)v6, &qword_10013F300);
    result = sub_10003AEC0((uint64_t)v6);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v6, v20);
    *(_QWORD *)(v9[7] + 8 * v18) = *(_QWORD *)&v6[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007DBAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F88((uint64_t *)&unk_10013F2A0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    result = sub_10003AF58(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10007DCC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100008F88(&qword_10013F318);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }
  sub_100008F88((uint64_t *)&unk_10013F320);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = *(int *)(v2 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10000CC18(v14, (uint64_t)v6, &qword_10013F318);
    result = sub_10003AFBC((uint64_t)v6);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v6, v20);
    *(_QWORD *)(v9[7] + 8 * v18) = *(_QWORD *)&v6[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007DE58(_TtC9AirDropUI33AirDropTransferSessionsController *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t airDropClient;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v9 = *(_QWORD *)a1->connection;
  if (!v9)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F88(&qword_10013F0B8);
  v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)a1->connection;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  airDropClient = (uint64_t)a1->airDropClient;
  swift_retain(v10);
  while (1)
  {
    sub_10000CC18(airDropClient, (uint64_t)&v21, (uint64_t *)&unk_10013F0C0);
    v15 = v21;
    result = sub_10003B084(v21);
    if ((v17 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v11[6] + 8 * result) = v15;
    result = (unint64_t)sub_10004E130(&v22, (_OWORD *)(v11[7] + 32 * result));
    v18 = v11[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v11[2] = v20;
    airDropClient += 40;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10007DF84(_TtC9AirDropUI33AirDropTransferSessionsController *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t airDropClient;
  unint64_t result;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;

  v9 = *(_QWORD *)a1->connection;
  if (!v9)
  {
    v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F88(&qword_10013F370);
  v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)a1->connection;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }
  v13 = v10 + 64;
  airDropClient = (uint64_t)a1->airDropClient;
  swift_retain(v10);
  while (1)
  {
    sub_10000CC18(airDropClient, (uint64_t)v23, &qword_10013F378);
    result = sub_10003B054((uint64_t)v23);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v11[6] + 40 * result;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (unint64_t)sub_10004E130(&v25, (_OWORD *)(v11[7] + 32 * result));
    v20 = v11[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v11[2] = v22;
    airDropClient += 72;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10007E0C4(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23[3];

  v2 = 0;
  v23[2] = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v20 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v7)
      goto LABEL_23;
    v21 = *(_QWORD *)(v3 + 8 * v20);
    ++v2;
    if (!v21)
    {
      v2 = v20 + 1;
      if (v20 + 1 >= v7)
        goto LABEL_23;
      v21 = *(_QWORD *)(v3 + 8 * v2);
      if (!v21)
      {
        v2 = v20 + 2;
        if (v20 + 2 >= v7)
          goto LABEL_23;
        v21 = *(_QWORD *)(v3 + 8 * v2);
        if (!v21)
        {
          v2 = v20 + 3;
          if (v20 + 3 >= v7)
            goto LABEL_23;
          v21 = *(_QWORD *)(v3 + 8 * v2);
          if (!v21)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v21 - 1) & v21;
    v9 = __clz(__rbit64(v21)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v10[1];
    swift_bridgeObjectRetain(v12);
    sub_100089AAC(v23, v11, v12);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v23[1], v13, v14, v15, v16, v17, v18, v19);
  }
  v22 = v20 + 4;
  if (v22 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v21 = *(_QWORD *)(v3 + 8 * v22);
  if (v21)
  {
    v2 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v21 = *(_QWORD *)(v3 + 8 * v2);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10007E258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v28 - v9;
  v11 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  result = Set.init(minimumCapacity:)(v15, v2, v16);
  v18 = 0;
  v19 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v20 + 63) >> 6;
  v29 = result;
  if (!v22)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (i = v23 | (v18 << 6); ; i = __clz(__rbit64(v26)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v14, v2);
    sub_100089F90((uint64_t)v10, v6);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    if (v22)
      goto LABEL_4;
LABEL_5:
    v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v28)
      goto LABEL_24;
    v26 = *(_QWORD *)(v19 + 8 * v25);
    ++v18;
    if (!v26)
    {
      v18 = v25 + 1;
      if (v25 + 1 >= v28)
        goto LABEL_24;
      v26 = *(_QWORD *)(v19 + 8 * v18);
      if (!v26)
      {
        v18 = v25 + 2;
        if (v25 + 2 >= v28)
          goto LABEL_24;
        v26 = *(_QWORD *)(v19 + 8 * v18);
        if (!v26)
        {
          v18 = v25 + 3;
          if (v25 + 3 >= v28)
            goto LABEL_24;
          v26 = *(_QWORD *)(v19 + 8 * v18);
          if (!v26)
            break;
        }
      }
    }
LABEL_20:
    v22 = (v26 - 1) & v26;
  }
  v27 = v25 + 4;
  if (v27 >= v28)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v14, 1, 1, v2);
LABEL_25:
    swift_release(a1);
    return v29;
  }
  v26 = *(_QWORD *)(v19 + 8 * v27);
  if (v26)
  {
    v18 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    v18 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v18 >= v28)
      goto LABEL_24;
    v26 = *(_QWORD *)(v19 + 8 * v18);
    ++v27;
    if (v26)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10007E524(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

Swift::Int sub_10007E544(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000031;
  else
    v3 = 0xD000000000000021;
  if ((a2 & 1) != 0)
    v4 = 0x80000001000EFFF0;
  else
    v4 = 0x80000001000EFFC0;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BOOL sub_10007E5C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10007E5D8()
{
  return 0;
}

uint64_t sub_10007E5E4@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_10007E610(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000872F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007E638(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000872F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E660(_QWORD *a1)
{
  return sub_100009070(a1);
}

uint64_t sub_10007E684(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = sub_100008F88(&qword_10013F040);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000904C(a1, v7);
  v9 = sub_1000872F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionAttributes.ContentState.CodingKeys, &type metadata for NearbySharingInteractionAttributes.ContentState.CodingKeys, v9, v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

Swift::Int sub_10007E748()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  return Hasher._finalize()();
}

Swift::Int sub_10007E77C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  return Hasher._finalize()();
}

uint64_t sub_10007E7AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_100008F88(&qword_10013F070);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000904C(a1, v10);
  v12 = sub_100087338();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionAttributes.CodingKeys, &type metadata for NearbySharingInteractionAttributes.CodingKeys, v12, v10, v11);
  v21 = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100008694(&qword_10013F078, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v21, v5, v13, v14);
  if (!v2)
  {
    v15 = v3 + *(int *)(type metadata accessor for NearbySharingInteractionAttributes(0) + 20);
    v20 = 1;
    v16 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
    v17 = sub_100008694(&qword_10013F080, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.FailureType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10007E930@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;

  v32 = a2;
  v4 = sub_100008F88(&qword_10013EF70);
  __chkstk_darwin(v4, v5);
  v34 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35, v7);
  v36 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100008F88(&qword_10013F050);
  v9 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37, v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v16[*(int *)(v17 + 20)];
  v19 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v38 = v18;
  v20(v18, 1, 1, v19);
  v22 = a1[3];
  v21 = a1[4];
  sub_10000904C(a1, v22);
  v23 = sub_100087338();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionAttributes.CodingKeys, &type metadata for NearbySharingInteractionAttributes.CodingKeys, v23, v22, v21);
  if (v2)
  {
    sub_100009070(a1);
    return sub_10000CC5C(v38, &qword_10013EF70);
  }
  else
  {
    v31 = v9;
    v24 = (uint64_t)v16;
    v26 = v33;
    v25 = (uint64_t)v34;
    v40 = 0;
    v27 = sub_100008694(&qword_10013F060, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &v40, v37, v35, v27);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v24, v36, v28);
    v39 = 1;
    v29 = sub_100008694(&qword_10013F068, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.FailureType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, &v39, v37, v19, v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v37);
    sub_100040DE4(v25, v38, &qword_10013EF70);
    sub_10008737C(v24, v32);
    sub_100009070(a1);
    return sub_10000C4C8(v24, type metadata accessor for NearbySharingInteractionAttributes);
  }
}

uint64_t sub_10007EC4C()
{
  _BYTE *v0;

  if (*v0)
    return 0x546572756C696166;
  else
    return 0x7463617265746E69;
}

uint64_t sub_10007EC9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008FB38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007ECC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100087338();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007ECE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100087338();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007ED10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007E930(a1, a2);
}

uint64_t sub_10007ED24(_QWORD *a1)
{
  return sub_10007E7AC(a1);
}

void sub_10007ED38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void *v51;
  char *v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  void *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  __n128 v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  _QWORD aBlock[5];
  uint64_t v87;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v83 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v81 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  __chkstk_darwin(v6, v7);
  v80 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79, v10);
  v77 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v78 = (char *)&v71 - v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v74 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100008F88((uint64_t *)&unk_10013F100);
  __chkstk_darwin(v84, v19);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v26, v27);
  __chkstk_darwin(v28, v29);
  v31 = (char *)&v71 - v30;
  __chkstk_darwin(v32, v33);
  v37 = (char *)&v71 - v36;
  if (a1)
  {
    v72 = v35;
    v73 = v3;
    v75 = v9;
    v76 = v2;
    Activity.attributes.getter(v34);
    v38 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v38(v37, v25, v15);
    sub_10000C4C8((uint64_t)v25, type metadata accessor for NearbySharingInteractionAttributes);
    v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v40 = 1;
    v39(v37, 0, 1, v15);
    v41 = *(_QWORD *)&v85[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity];
    if (v41)
    {
      v42 = swift_retain(*(_QWORD *)&v85[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity]);
      Activity.attributes.getter(v42);
      v43 = swift_release(v41);
      ((void (*)(char *, char *, uint64_t, __n128))v38)(v31, v25, v15, v43);
      sub_10000C4C8((uint64_t)v25, type metadata accessor for NearbySharingInteractionAttributes);
      v40 = 0;
    }
    v39(v31, v40, 1, v15);
    v44 = (uint64_t)&v21[*(int *)(v84 + 48)];
    sub_10000CC18((uint64_t)v37, (uint64_t)v21, (uint64_t *)&unk_1001405D0);
    sub_10000CC18((uint64_t)v31, v44, (uint64_t *)&unk_1001405D0);
    v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (v45((uint64_t)v21, 1, v15) == 1)
    {
      sub_10000CC5C((uint64_t)v31, (uint64_t *)&unk_1001405D0);
      sub_10000CC5C((uint64_t)v37, (uint64_t *)&unk_1001405D0);
      v46 = v45(v44, 1, v15);
      v47 = v75;
      v48 = v76;
      if (v46 == 1)
      {
        sub_10000CC5C((uint64_t)v21, (uint64_t *)&unk_1001405D0);
        return;
      }
    }
    else
    {
      v49 = v72;
      sub_10000CC18((uint64_t)v21, v72, (uint64_t *)&unk_1001405D0);
      v50 = v45(v44, 1, v15);
      v48 = v76;
      if (v50 != 1)
      {
        v52 = v74;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v74, v44, v15);
        v53 = sub_100008694((unint64_t *)&unk_10013CAF0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v54 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v52, v15, v53);
        v55 = *(void (**)(char *, uint64_t))(v16 + 8);
        v55(v52, v15);
        sub_10000CC5C((uint64_t)v31, (uint64_t *)&unk_1001405D0);
        sub_10000CC5C((uint64_t)v37, (uint64_t *)&unk_1001405D0);
        v55((char *)v49, v15);
        sub_10000CC5C((uint64_t)v21, (uint64_t *)&unk_1001405D0);
        v51 = v85;
        v47 = v75;
        if ((v54 & 1) != 0)
          return;
        goto LABEL_11;
      }
      sub_10000CC5C((uint64_t)v31, (uint64_t *)&unk_1001405D0);
      sub_10000CC5C((uint64_t)v37, (uint64_t *)&unk_1001405D0);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v49, v15);
      v47 = v75;
    }
    sub_10000CC5C((uint64_t)v21, (uint64_t *)&unk_10013F100);
    v51 = v85;
LABEL_11:
    sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
    v56 = (void *)static OS_dispatch_queue.main.getter();
    v57 = v77;
    static DispatchTime.now()();
    v58 = v48;
    v59 = v78;
    + infix(_:_:)(v57, 6.0);
    v85 = *(char **)(v47 + 8);
    v60 = v79;
    ((void (*)(char *, uint64_t))v85)(v57, v79);
    v61 = swift_allocObject(&unk_100127CD0, 24, 7);
    *(_QWORD *)(v61 + 16) = v51;
    aBlock[4] = sub_100091458;
    v87 = v61;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000DA060;
    aBlock[3] = &unk_100127CE8;
    v62 = _Block_copy(aBlock);
    v63 = v87;
    v64 = v51;
    v65 = swift_release(v63);
    v66 = v80;
    static DispatchQoS.unspecified.getter(v65);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v67 = sub_100008694(&qword_10013EAA0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v68 = sub_100008F88(&qword_10013F110);
    v69 = sub_10000CB94(&qword_10013EAA8, &qword_10013F110, (uint64_t)&protocol conformance descriptor for [A]);
    v70 = v83;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v68, v69, v58, v67);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v59, v66, v70, v62);
    _Block_release(v62);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v58);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v66, v82);
    ((void (*)(char *, uint64_t))v85)(v59, v60);
  }
}

uint64_t sub_10007F390()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000ED6A8);
  v2 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

id sub_10007F400()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener);
  }
  else
  {
    v4 = objc_allocWithZone((Class)IMSPICollaborationMessageListener);
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "initWithListenerID:", v5);

    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

char *sub_10007F4A4(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  id v28;
  objc_class *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v48;
  objc_super v49;
  _QWORD v50[5];

  v3 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88((uint64_t *)&unk_10013F280);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity] = 0;
  v12 = &v1[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator__nearbySharingInteractionViewModelsByID];
  v13 = v1;
  v50[0] = sub_10007D88C((uint64_t)&_swiftEmptyArrayStorage, &qword_10013F310, &qword_10013CB10);
  v14 = sub_100008F88(&qword_10013EEA8);
  Published.init(initialValue:)(v50, v14);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v11, v7);
  v15 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID;
  *(_QWORD *)&v13[v15] = sub_10007D88C((uint64_t)&_swiftEmptyArrayStorage, &qword_10013F198, &qword_10013F1B0);
  v16 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID;
  *(_QWORD *)&v13[v16] = sub_10007D88C((uint64_t)&_swiftEmptyArrayStorage, &qword_10013F308, (uint64_t *)&unk_10013CB00);
  *(_QWORD *)&v13[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateNearbySharingInteractionsTask] = 0;
  v17 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID;
  *(_QWORD *)&v13[v17] = sub_10007DA18((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)&v13[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_airDropClient] = a1;
  v18 = objc_allocWithZone((Class)CNContactStore);
  swift_retain(a1);
  v19 = objc_msgSend(v18, "init");
  v50[3] = sub_100018D44(0, &qword_10013F2C8, CNContactStore_ptr);
  v50[4] = &off_100126F18;
  v50[0] = v19;
  v20 = type metadata accessor for ContactDetailsProvider();
  v21 = swift_allocObject(v20, 64, 7);
  sub_100009008((uint64_t)v50, v21 + 16);
  v22 = (void *)objc_opt_self(TUIDSLookupManager);
  v23 = v19;
  v24 = objc_msgSend(v22, "sharedManager");
  sub_100009070(v50);
  *(_QWORD *)(v21 + 56) = v24;

  *(_QWORD *)&v13[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contactDetailsProvider] = v21;
  v25 = type metadata accessor for ShareableContentResolver();
  swift_allocObject(v25, 56, 7);
  swift_retain(a1);
  swift_retain(v21);
  v26 = sub_10007BC58(a1, v21);
  swift_release(a1);
  swift_release(v21);
  *(_QWORD *)&v13[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contentResolver] = v26;
  v27 = objc_msgSend((id)objc_opt_self(TUCallCenter), "sharedInstance");
  v28 = objc_msgSend(v27, "conversationManager");

  *(_QWORD *)&v13[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_conversationManager] = v28;
  v29 = (objc_class *)type metadata accessor for NearbySharingInteractionCoordinator(0);
  v49.receiver = v13;
  v49.super_class = v29;
  v30 = (char *)objc_msgSendSuper2(&v49, "init");
  v31 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v6, 1, 1, v31);
  v32 = *(_QWORD *)&v30[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_airDropClient];
  v33 = swift_allocObject(&unk_100127D48, 24, 7);
  swift_unknownObjectWeakInit(v33 + 16, v30);
  type metadata accessor for MainActor(0);
  v34 = v30;
  swift_retain(v32);
  v35 = swift_retain(v33);
  v36 = static MainActor.shared.getter(v35);
  v37 = (_QWORD *)swift_allocObject(&unk_100127FA0, 48, 7);
  v37[2] = v36;
  v37[3] = &protocol witness table for MainActor;
  v37[4] = v32;
  v37[5] = v33;
  swift_release(v33);
  v38 = sub_1000CB748((uint64_t)v6, (uint64_t)&unk_10013F2D8, (uint64_t)v37);
  v39 = *(_QWORD *)&v34[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateNearbySharingInteractionsTask];
  *(_QWORD *)&v34[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateNearbySharingInteractionsTask] = v38;
  swift_release(v39);
  v40 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_conversationManager;
  v41 = *(void **)&v34[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_conversationManager];
  sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
  v42 = v34;
  v43 = v41;
  v44 = (void *)static OS_dispatch_queue.main.getter();
  objc_msgSend(v43, "addDelegate:queue:", v42, v44);

  objc_msgSend(*(id *)&v34[v40], "registerWithCompletionHandler:", 0);
  v45 = sub_10007F400();
  objc_msgSend(v45, "setDelegate:", v42);

  v46 = sub_10007F400();
  objc_msgSend(v46, "startListening");

  swift_release(a1);
  return v42;
}

id sub_10007F970()
{
  char *v0;
  uint64_t v1;
  id v2;
  objc_super v4;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateNearbySharingInteractionsTask];
  if (v1)
  {
    swift_retain(*(_QWORD *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateNearbySharingInteractionsTask]);
    Task.cancel()();
    swift_release(v1);
  }
  v2 = sub_10007F400();
  objc_msgSend(v2, "stopListening");

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for NearbySharingInteractionCoordinator(0);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10007FB8C()
{
  return type metadata accessor for NearbySharingInteractionCoordinator(0);
}

uint64_t type metadata accessor for NearbySharingInteractionCoordinator(uint64_t a1)
{
  return sub_1000138D0(a1, (uint64_t *)&unk_10013EE90, (uint64_t)&nominal type descriptor for NearbySharingInteractionCoordinator);
}

void sub_10007FBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  char v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;

  v4 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000835FC(a1, a2);
  if (v8)
  {
    v27 = v8;
    sub_10004B10C();
    if (v9 == 1)
    {
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v10 = type metadata accessor for Logger(0);
      sub_100009558(v10, (uint64_t)qword_100148040);
      v11 = v27;
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = swift_slowAlloc(32, -1);
        *(_DWORD *)v14 = 136315138;
        v29 = v15;
        v16 = type metadata accessor for UUID(0);
        v17 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
        v20 = v19;
        v28 = sub_10003A834(v18, v19, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);

        swift_bridgeObjectRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Ending nearby sharing interaction with ID: %s due to ActivityKit scene disconnecting", v14, 0xCu);
        swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      else
      {

      }
      v21 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 1, 1, v21);
      type metadata accessor for MainActor(0);
      v22 = v11;
      v23 = static MainActor.shared.getter();
      v24 = (_QWORD *)swift_allocObject(&unk_100127F78, 40, 7);
      v24[2] = v23;
      v24[3] = &protocol witness table for MainActor;
      v24[4] = v22;
      v25 = sub_1000CB748((uint64_t)v7, (uint64_t)&unk_10013F278, (uint64_t)v24);
      swift_release(v25);

    }
    else
    {

    }
  }
}

uint64_t sub_10007FE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter();
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000921B8, v6, v7);
}

uint64_t sub_10007FEF8@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v3 = type metadata accessor for Logger(0);
  sub_100009558(v3, (uint64_t)qword_100148040);
  v4 = v1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    KeyPath = swift_getKeyPath(&unk_1000ED6A8);
    v10 = swift_getKeyPath(&unk_1000ED6D0);
    static Published.subscript.getter(&v23, v4, KeyPath, v10);
    swift_release(KeyPath);
    swift_release(v10);
    v11 = v23;
    v12 = sub_1000CEF78(v23);
    swift_bridgeObjectRelease(v11);
    if (v12)
      v23 = v12;
    else
      v23 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    *v8 = v12;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "currentNearbySharingInteraction: %@", v7, 0xCu);
    v13 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v8, 1, v13);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  v14 = swift_getKeyPath(&unk_1000ED6A8);
  v15 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v23, v4, v14, v15);
  swift_release(v14);
  swift_release(v15);
  v16 = v23;
  v17 = (void *)sub_1000CEF78(v23);
  swift_bridgeObjectRelease(v16);
  if (v17)
  {
    v18 = swift_getKeyPath(&unk_1000ED780);
    v19 = swift_getKeyPath(&unk_1000ED7A8);
    static Published.subscript.getter(a1, v17, v18, v19);

    swift_release(v18);
    swift_release(v19);
    v20 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
  }
  else
  {
    v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a1, 1, 1, v22);
  }
}

uint64_t sub_1000801F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5[11] = a5;
  v6 = sub_100008F88((uint64_t *)&unk_10013F2E0);
  v5[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[13] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[14] = v8;
  v9 = type metadata accessor for MainActor(0);
  v5[15] = v9;
  v5[16] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.nearbySharingInteractions()[1]);
  v5[17] = v10;
  *v10 = v5;
  v10[1] = sub_1000802A4;
  return SFAirDropClient.nearbySharingInteractions()(v8);
}

uint64_t sub_1000802A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  v4 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 152) = v6;
  *(_QWORD *)(v2 + 160) = v5;
  if (v0)
    v7 = sub_100080A78;
  else
    v7 = sub_100080330;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_100080330(__n128 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[11] + 16;
  v1[6] = SFXPCResilientAsyncSequence.makeAsyncIterator()(v1[12], a1);
  swift_beginAccess(v2, v1 + 2, 0, 0);
  v1[21] = static MainActor.shared.getter(v3);
  v4 = sub_100008F88(&qword_10013F2F0);
  v5 = sub_10000CB94(&qword_10013F2F8, &qword_10013F2F0, (uint64_t)&protocol conformance descriptor for SFXPCResilientAsyncSequence<A>.AsyncIterator);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v1[22] = v6;
  *v6 = v1;
  v6[1] = sub_10008040C;
  return dispatch thunk of AsyncIteratorProtocol.next()(v1 + 8, v4, v5);
}

uint64_t sub_10008040C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 168);
  if (v0)
  {
    if (v4)
    {
      ObjectType = swift_getObjectType(v4);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v11 = sub_1000807F4;
  }
  else
  {
    if (v4)
    {
      v9 = swift_getObjectType(v4);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
      v8 = v10;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v11 = sub_1000804D0;
  }
  return swift_task_switch(v11, v6, v8);
}

uint64_t sub_1000804D0()
{
  _QWORD *v0;

  swift_release(v0[21]);
  v0[24] = v0[8];
  return swift_task_switch(sub_100080510, v0[19], v0[20]);
}

uint64_t sub_100080510()
{
  uint64_t v0;
  _TtC9AirDropUI33AirDropTransferSessionsController *v1;
  uint64_t Strong;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 192);
  if (v1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 88) + 16);
    if (Strong)
    {
      v10 = (void *)Strong;
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v11 = type metadata accessor for Logger(0);
      sub_100009558(v11, (uint64_t)qword_100148040);
      v12 = swift_bridgeObjectRetain_n(v1, 2);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v44 = v43;
        *(_DWORD *)v15 = 136315138;
        v16 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
        v17 = swift_bridgeObjectRetain(v1);
        v18 = Array.description.getter(v17, v16);
        v20 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v19;
        swift_bridgeObjectRelease(v1, v19, v21, v22, v23, v24, v25, v26);
        *(_QWORD *)(v0 + 80) = sub_10003A834(v18, (unint64_t)v20, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
        swift_bridgeObjectRelease(v20, v27, v28, v29, v30, v31, v32, v33);
        swift_bridgeObjectRelease_n(v1, 2);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Nearby sharing interactions changed: %s", v15, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v15, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v1, 2);
      }

      sub_100080C70(v1);
      sub_10008202C();

    }
    swift_bridgeObjectRelease(v1, v3, v4, v5, v6, v7, v8, v9);
    *(_QWORD *)(v0 + 168) = static MainActor.shared.getter(v39);
    v40 = sub_100008F88(&qword_10013F2F0);
    v41 = sub_10000CB94(&qword_10013F2F8, &qword_10013F2F0, (uint64_t)&protocol conformance descriptor for SFXPCResilientAsyncSequence<A>.AsyncIterator);
    v42 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 176) = v42;
    *v42 = v0;
    v42[1] = sub_10008040C;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 64, v40, v41);
  }
  else
  {
    v35 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 112);
    v36 = *(_QWORD *)(v0 + 96);
    swift_release(*(_QWORD *)(v0 + 128));
    v37 = swift_release(*(_QWORD *)(v0 + 48));
    (*(void (**)(uint64_t, uint64_t, __n128))(v35 + 8))(v34, v36, v37);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000807F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[21];
  v0[9] = v0[23];
  v2 = sub_100008F88((uint64_t *)&unk_10013CB30);
  swift_willThrowTypedImpl(v0 + 9, v2, &protocol self-conformance witness table for Error);
  swift_release(v1);
  return swift_task_switch(sub_10008085C, v0[19], v0[20]);
}

uint64_t sub_10008085C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v24;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 128));
  v4 = swift_release(*(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v1, v3, v4);
  v5 = *(_QWORD *)(v0 + 184);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v6 = type metadata accessor for Logger(0);
  sub_100009558(v6, (uint64_t)qword_100148040);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 136315138;
    v24 = v11;
    *(_QWORD *)(v0 + 56) = v5;
    swift_errorRetain(v5);
    v12 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v13 = String.init<A>(reflecting:)(v0 + 56, v12);
    v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v14;
    *(_QWORD *)(v0 + 40) = sub_10003A834(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error registering for updates to nearby sharing interactions: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100080A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v20;

  swift_release(*(_QWORD *)(v0 + 128));
  v1 = *(_QWORD *)(v0 + 144);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_100148040);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 56) = v1;
    swift_errorRetain(v1);
    v8 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v9 = String.init<A>(reflecting:)(v0 + 56, v8);
    v11 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v10;
    *(_QWORD *)(v0 + 40) = sub_10003A834(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error registering for updates to nearby sharing interactions: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100080C70(_TtC9AirDropUI33AirDropTransferSessionsController *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  void (*v60)(void);
  unint64_t v61;
  _TtC9AirDropUI33AirDropTransferSessionsController *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t KeyPath;
  uint64_t v66;
  const char *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  _TtC9AirDropUI33AirDropTransferSessionsController *v74;
  uint64_t v75;
  unint64_t v76;
  id v77;
  SEL v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void (*v94)(_TtC9AirDropUI33AirDropTransferSessionsController **, _QWORD);
  uint64_t *v95;
  uint64_t *v96;
  char isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v98;
  SEL v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  char *v106;
  uint64_t v107;
  _TtC9AirDropUI33AirDropTransferSessionsController *v108;
  char *v109;
  int v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char v120;
  void (*v121)(char *, uint64_t);
  uint64_t (*v122)(char *, char *, uint64_t);
  char *v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  char *v126;
  char v127;
  char *v128;
  char v129;
  uint64_t v130;
  id v131;
  _TtC9AirDropUI33AirDropTransferSessionsController *v132;
  int64_t v133;
  const char *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  char *v141;
  char v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  id v156;
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  _TtC9AirDropUI33AirDropTransferSessionsController *v161;
  _TtC9AirDropUI33AirDropTransferSessionsController *v162;
  SEL v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  _TtC9AirDropUI33AirDropTransferSessionsController *v170;
  int64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t (*v174)(char *, char *, uint64_t);
  char *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _TtC9AirDropUI33AirDropTransferSessionsController *v179;
  SEL v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  _TtC9AirDropUI33AirDropTransferSessionsController *v187;
  _TtC9AirDropUI33AirDropTransferSessionsController *v188;
  SEL v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  _TtC9AirDropUI33AirDropTransferSessionsController *v196;
  uint64_t v197;
  uint64_t *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  void *v204;
  void (*v205)(unint64_t, uint64_t);
  char *v206;
  __n128 v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  const char *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void (*v220)(uint64_t, char *, uint64_t);
  uint64_t v221;
  _TtC9AirDropUI33AirDropTransferSessionsController *v222;
  unint64_t v223;
  SEL v224;
  char v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  _TtC9AirDropUI33AirDropTransferSessionsController *v237;
  _TtC9AirDropUI33AirDropTransferSessionsController *v238;
  SEL v239;
  id v240;
  id v241;
  id v242;
  id v243;
  id v244;
  id v245;
  SEL v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  _TtC9AirDropUI33AirDropTransferSessionsController *v262;
  unint64_t v263;
  id v264;
  SEL v265;
  id v266;
  id v267;
  id v268;
  id v269;
  id v270;
  id v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t ObjectType;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __n128 v287;
  unsigned __int8 v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t *v295;
  _TtC9AirDropUI33AirDropTransferSessionsController *v296;
  unint64_t v297;
  SEL v298;
  char v299;
  id v300;
  id v301;
  id v302;
  id v303;
  id v304;
  id v305;
  int v306;
  uint64_t v307;
  _TtC9AirDropUI33AirDropTransferSessionsController *v308;
  SEL v309;
  id v310;
  id v311;
  id v312;
  id v313;
  id v314;
  id v315;
  int64_t v316;
  _TtC9AirDropUI33AirDropTransferSessionsController *v317;
  unint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  char *v325;
  uint64_t v326;
  char *v327;
  unsigned int v328;
  char *v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  char *v341;
  uint64_t v342;
  void (*v343)(char *, _QWORD, uint64_t);
  id v344;
  char *v345;
  int v346;
  uint64_t (*v347)(uint64_t, _TtC9AirDropUI33AirDropTransferSessionsController *, uint64_t);
  uint64_t v348;
  char *v349;
  char *v350;
  _TtC9AirDropUI33AirDropTransferSessionsController *v351;
  char *v352;
  char *v353;
  uint64_t *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  int64_t v358;
  _TtC9AirDropUI33AirDropTransferSessionsController *v359;
  void (*v360)(void);
  _QWORD *v361;
  uint64_t v362;
  _QWORD v363[4];
  _TtC9AirDropUI33AirDropTransferSessionsController *v364;
  _TtC9AirDropUI33AirDropTransferSessionsController *v365;

  v2 = v1;
  v4 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v316 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v8, v9);
  v327 = (char *)&v316 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v326 = (uint64_t)&v316 - v13;
  v323 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest(0);
  v322 = *(_QWORD *)(v323 - 8);
  __chkstk_darwin(v323, v14);
  v320 = (char *)&v316 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v321 = v15;
  __chkstk_darwin(v16, v17);
  v325 = (char *)&v316 - v18;
  v338 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v337 = *(_QWORD *)(v338 - 8);
  __chkstk_darwin(v338, v19);
  v341 = (char *)&v316 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v336 = (char *)&v316 - v23;
  v352 = (char *)type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v351 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v352 - 1);
  __chkstk_darwin(v352, v24);
  v350 = (char *)&v316 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v26 = *(_QWORD *)(v335 - 8);
  __chkstk_darwin(v335, v27);
  v334 = (char *)&v316 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v316 - v31;
  __chkstk_darwin(v33, v34);
  v333 = (char *)&v316 - v35;
  v36 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36, v38);
  v329 = (char *)&v316 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40, v41);
  v339 = (char *)&v316 - v42;
  __chkstk_darwin(v43, v44);
  v355 = (char *)&v316 - v45;
  __chkstk_darwin(v46, v47);
  v356 = (char *)&v316 - v48;
  __chkstk_darwin(v49, v50);
  v52 = (char *)&v316 - v51;
  v53 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v361 = *(_QWORD **)(v53 - 8);
  __chkstk_darwin(v53, v54);
  v353 = (char *)&v316 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56, v57);
  v354 = (int64_t *)((char *)&v316 - v58);
  v59 = *(_QWORD *)a1->connection;
  v357 = v2;
  v340 = v7;
  v362 = v37;
  v360 = v60;
  if (v59)
  {
    v319 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_airDropClient;
    v61 = (*((unsigned __int8 *)v361 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v361 + 80);
    v332 = v26;
    v62 = (_TtC9AirDropUI33AirDropTransferSessionsController *)((char *)a1 + v61);
    v348 = v361[9];
    v347 = (uint64_t (*)(uint64_t, _TtC9AirDropUI33AirDropTransferSessionsController *, uint64_t))v361[2];
    v346 = enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:);
    v331 = enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:);
    v328 = enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.generic(_:);
    v324 = enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.peerPayment(_:);
    v317 = a1;
    swift_bridgeObjectRetain(a1);
    v318 = 0x80000001000F2470;
    v316 = v59;
    v345 = v52;
    v63 = (uint64_t)v354;
    v330 = v36;
    v349 = v32;
    while (1)
    {
      v358 = v59;
      v64 = v347(v63, v62, v53);
      SFAirDrop.NearbySharingInteraction.id.getter(v64);
      KeyPath = swift_getKeyPath(&unk_1000ED6A8);
      v66 = swift_getKeyPath(&unk_1000ED6D0);
      static Published.subscript.getter(&v365, v2, KeyPath, v66);
      swift_release(KeyPath);
      swift_release(v66);
      v74 = v365;
      v75 = *(_QWORD *)v365->connection;
      v359 = v62;
      if (v75 && (v76 = sub_10003AEC0((uint64_t)v52), (v67 & 1) != 0))
      {
        v77 = *(id *)(*(_QWORD *)v74->nearbySharingInteractionCoordinator + 8 * v76);
        swift_bridgeObjectRelease(v74, v78, v79, v80, v81, v82, v83, v84);
        v85 = *(void (**)(char *, uint64_t))(v37 + 8);
        v85(v52, v36);
      }
      else
      {
        swift_bridgeObjectRelease(v74, v67, v68, v69, v70, v71, v72, v73);
        v85 = *(void (**)(char *, uint64_t))(v37 + 8);
        v85(v52, v36);
        v77 = (id)sub_100083854(v63);
        sub_10008547C();
      }
      v86 = v36;
      v87 = v2;
      v88 = v77;
      sub_100047308(v63);
      v89 = (uint64_t)v356;
      SFAirDrop.NearbySharingInteraction.id.getter(v90);
      v91 = swift_getKeyPath(&unk_1000ED6A8);
      v92 = swift_getKeyPath(&unk_1000ED6D0);
      v93 = v88;
      v94 = (void (*)(_TtC9AirDropUI33AirDropTransferSessionsController **, _QWORD))static Published.subscript.modify(&v365, v87, v91, v92);
      v96 = v95;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v95);
      v364 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v96;
      *v96 = 0x8000000000000000;
      sub_100089560((uint64_t)v93, v89, isUniquelyReferenced_nonNull_native);
      v98 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v96;
      *v96 = (uint64_t)v364;
      swift_bridgeObjectRelease(v98, v99, v100, v101, v102, v103, v104, v105);
      v85((char *)v89, v86);
      v94(&v365, 0);
      swift_release(v91);
      swift_release(v92);
      v106 = v350;
      SFAirDrop.NearbySharingInteraction.state.getter(v107);
      v108 = v351;
      v109 = v352;
      v110 = (*(uint64_t (**)(char *, char *))v351->appCornerIconProvider)(v106, v352);
      if (v110 == v346)
      {
        v344 = v93;
        (*(void (**)(char *, char *))v108->transfersBeingEnded)(v106, v109);
        v111 = v333;
        v112 = v106;
        v113 = v332;
        v114 = v335;
        v115 = (*(uint64_t (**)(char *, char *, uint64_t))(v332 + 32))(v333, v112, v335);
        v116 = v336;
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v115);
        v117 = v337;
        v118 = v341;
        v119 = v338;
        v343 = *(void (**)(char *, _QWORD, uint64_t))(v337 + 104);
        v343(v341, v331, v338);
        v342 = sub_100008694(&qword_10013F248, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
        v120 = dispatch thunk of static Equatable.== infix(_:_:)(v116, v118, v119, v342);
        v121 = *(void (**)(char *, uint64_t))(v117 + 8);
        v121(v118, v119);
        v121(v116, v119);
        v122 = *(uint64_t (**)(char *, char *, uint64_t))(v113 + 16);
        v123 = v349;
        v124 = v122(v349, v111, v114);
        if ((v120 & 1) != 0)
        {
          v125 = *(void (**)(char *, uint64_t))(v113 + 8);
          v125(v123, v114);
          v126 = v334;
          v122(v334, v111, v114);
LABEL_13:
          v2 = v357;
          v37 = v362;
          v53 = (uint64_t)v360;
          v131 = v344;

          v125(v126, v114);
          v125(v111, v114);
          v93 = v131;
          v36 = v330;
          goto LABEL_14;
        }
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v124);
        v343(v118, v328, v119);
        v127 = dispatch thunk of static Equatable.== infix(_:_:)(v116, v118, v119, v342);
        v128 = v349;
        v129 = v127;
        v121(v118, v119);
        v121(v116, v119);
        v125 = *(void (**)(char *, uint64_t))(v113 + 8);
        v125(v128, v114);
        v126 = v334;
        v130 = v122(v334, v111, v114);
        if ((v129 & 1) != 0)
          goto LABEL_13;
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v130);
        v141 = v341;
        v343(v341, v324, v119);
        v142 = dispatch thunk of static Equatable.== infix(_:_:)(v116, v141, v119, v342);
        v121(v141, v119);
        v121(v116, v119);
        v125(v126, v114);
        v143 = ((uint64_t (*)(char *, uint64_t))v125)(v111, v114);
        v2 = v357;
        v37 = v362;
        if ((v142 & 1) == 0)
        {
          v144 = v356;
          v145 = (char *)v354;
          SFAirDrop.NearbySharingInteraction.id.getter(v143);
          v146 = v325;
          SFAirDrop.NearbySharingAssertionRequest.init(nearbySharingInteractionID:explanation:)(v144, 0xD000000000000021, v318);
          v147 = type metadata accessor for TaskPriority(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 56))(v326, 1, 1, v147);
          v148 = *(_QWORD *)(v2 + v319);
          v149 = v322;
          v150 = v320;
          v151 = v323;
          (*(void (**)(char *, char *, uint64_t))(v322 + 16))(v320, v146, v323);
          v152 = *(unsigned __int8 *)(v149 + 80);
          v153 = (v152 + 48) & ~v152;
          v154 = (char *)swift_allocObject(&unk_100127F50, v153 + v321, v152 | 7);
          *((_QWORD *)v154 + 2) = 0;
          *((_QWORD *)v154 + 3) = 0;
          v93 = v344;
          *((_QWORD *)v154 + 4) = v344;
          *((_QWORD *)v154 + 5) = v148;
          v155 = v150;
          v63 = (uint64_t)v145;
          (*(void (**)(char *, char *, uint64_t))(v149 + 32))(&v154[v153], v155, v151);
          v156 = v93;
          swift_retain(v148);
          v157 = sub_1000A66DC(v326, (uint64_t)&unk_10013F258, (uint64_t)v154);

          v158 = swift_release(v157);
          (*(void (**)(char *, uint64_t, __n128))(v149 + 8))(v325, v151, v158);
          v36 = v330;
          v53 = (uint64_t)v360;
          v52 = v345;
          goto LABEL_15;
        }
        v93 = v344;

        v36 = v330;
      }
      else
      {
        v36 = v86;

        (*(void (**)(char *, char *))v108->listener)(v106, v109);
        v37 = v362;
        v2 = v357;
      }
      v53 = (uint64_t)v360;
LABEL_14:
      v52 = v345;
      v63 = (uint64_t)v354;
LABEL_15:
      v133 = v358;
      v132 = v359;

      ((void (*)(uint64_t, uint64_t))v361[1])(v63, v53);
      v62 = (_TtC9AirDropUI33AirDropTransferSessionsController *)((char *)v132 + v348);
      v59 = v133 - 1;
      if (!v59)
      {
        a1 = v317;
        swift_bridgeObjectRelease(v317, v134, v135, v136, v137, v138, v139, v140);
        v7 = v340;
        v59 = v316;
        break;
      }
    }
  }
  v159 = swift_getKeyPath(&unk_1000ED6A8);
  v160 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v365, v2, v159, v160);
  swift_release(v159);
  swift_release(v160);
  v161 = v365;
  v162 = sub_10008E06C((uint64_t)v365);
  swift_bridgeObjectRelease(v161, v163, v164, v165, v166, v167, v168, v169);
  v170 = &_swiftEmptyArrayStorage;
  if (v59)
  {
    v359 = v162;
    v365 = &_swiftEmptyArrayStorage;
    v171 = v59;
    sub_100011F60(0, v59, 0);
    v172 = (char *)a1 + ((*((unsigned __int8 *)v361 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v361 + 80));
    v173 = v361[9];
    v174 = (uint64_t (*)(char *, char *, uint64_t))v361[2];
    do
    {
      v175 = v353;
      v176 = v174(v353, v172, v53);
      SFAirDrop.NearbySharingInteraction.id.getter(v176);
      ((void (*)(char *, uint64_t))v361[1])(v175, v53);
      v170 = v365;
      if ((swift_isUniquelyReferenced_nonNull_native(v365) & 1) == 0)
      {
        sub_100011F60(0, *(_QWORD *)v170->connection + 1, 1);
        v170 = v365;
      }
      v178 = *(_QWORD *)v170->connection;
      v177 = *(_QWORD *)v170->airdropClient;
      if (v178 >= v177 >> 1)
      {
        sub_100011F60(v177 > 1, v178 + 1, 1);
        v170 = v365;
      }
      *(_QWORD *)v170->connection = v178 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))((unint64_t)v170+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v178, v355, v36);
      v365 = v170;
      v172 += v173;
      --v171;
      v53 = (uint64_t)v360;
    }
    while (v171);
    v7 = v340;
    v162 = v359;
  }
  v179 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10008F1E8((uint64_t)v170);
  swift_bridgeObjectRelease(v170, v180, v181, v182, v183, v184, v185, v186);
  sub_10008F7A4(v162, (uint64_t)v179);
  v188 = v187;
  swift_bridgeObjectRelease(v179, v189, v190, v191, v192, v193, v194, v195);
  v196 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)v188->connection;
  v351 = v188;
  if (v196)
  {
    v197 = v2;
    v198 = (uint64_t *)(v2 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID);
    v199 = (char *)v188 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
    v200 = *(char **)(v37 + 72);
    v360 = *(void (**)(void))(v37 + 16);
    v352 = (char *)&type metadata for () + 8;
    v201 = v329;
    v202 = v339;
    v354 = v198;
    v355 = v200;
    v203 = v7;
    while (1)
    {
      v208 = (uint64_t)v202;
      v209 = v36;
      v210 = v203;
      v360();
      v211 = v362;
      v212 = *(char **)(v362 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v212)(v210, 0, 1, v209);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48))(v210, 1, v209) == 1)
        goto LABEL_55;
      v353 = v212;
      v358 = (int64_t)v199;
      v359 = v196;
      v220 = *(void (**)(uint64_t, char *, uint64_t))(v211 + 32);
      v221 = v208;
      v220(v208, v210, v209);
      swift_beginAccess(v198, &v365, 33, 0);
      v222 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v198;
      swift_bridgeObjectRetain(*v198);
      v223 = sub_10003AEC0(v208);
      v225 = (char)v224;
      swift_bridgeObjectRelease(v222, v224, v226, v227, v228, v229, v230, v231);
      v232 = v197;
      v233 = (uint64_t)v201;
      v36 = v209;
      if ((v225 & 1) != 0)
      {
        v234 = swift_isUniquelyReferenced_nonNull_native(*v198);
        v235 = *v198;
        v364 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v198;
        *v198 = 0x8000000000000000;
        if (!v234)
        {
          sub_10003C4A0();
          v235 = (uint64_t)v364;
        }
        (*(void (**)(unint64_t, uint64_t))(v362 + 8))(*(_QWORD *)(v235 + 48) + v223 * (_QWORD)v355, v209);
        v236 = (uint64_t)v364;
        v237 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(*(_QWORD *)v364->nearbySharingInteractionCoordinator
                                                                     + 8 * v223);
        sub_10003BC64(v223, (uint64_t)v364);
        v238 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v198;
        *v198 = v236;
        swift_bridgeObjectRelease(v237, v239, v240, v241, v242, v243, v244, v245);
        swift_bridgeObjectRelease(v238, v246, v247, v248, v249, v250, v251, v252);
      }
      swift_endAccess(&v365);
      v253 = swift_getKeyPath(&unk_1000ED6A8);
      v254 = swift_getKeyPath(&unk_1000ED6D0);
      static Published.subscript.getter(&v365, v232, v253, v254);
      swift_release(v253);
      swift_release(v254);
      v262 = v365;
      if (*(_QWORD *)v365->connection)
      {
        v263 = sub_10003AEC0(v221);
        if ((v255 & 1) != 0)
          break;
      }
      v281 = v232;
      swift_bridgeObjectRelease(v262, v255, v256, v257, v258, v259, v260, v261);
      v361 = 0;
LABEL_49:
      ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v360)(v233, v221, v36, v287);
      v292 = swift_getKeyPath(&unk_1000ED6A8);
      v293 = swift_getKeyPath(&unk_1000ED6D0);
      v356 = (char *)static Published.subscript.modify(&v365, v281, v292, v293);
      v295 = v294;
      v296 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v294;
      swift_bridgeObjectRetain(*v294);
      v297 = sub_10003AEC0(v233);
      v299 = (char)v298;
      swift_bridgeObjectRelease(v296, v298, v300, v301, v302, v303, v304, v305);
      if ((v299 & 1) != 0)
      {
        v306 = swift_isUniquelyReferenced_nonNull_native(*v295);
        v364 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v295;
        *v295 = 0x8000000000000000;
        if (!v306)
          sub_10003C6D0();
        v206 = v355;
        v205 = *(void (**)(unint64_t, uint64_t))(v362 + 8);
        v205(*(_QWORD *)v364->interventionTasks + v297 * (_QWORD)v355, v36);
        v307 = (uint64_t)v364;
        v204 = *(void **)(*(_QWORD *)v364->nearbySharingInteractionCoordinator + 8 * v297);
        sub_10003BF04(v297, (uint64_t)v364);
        v308 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v295;
        *v295 = v307;
        swift_bridgeObjectRelease(v308, v309, v310, v311, v312, v313, v314, v315);
        v233 = (uint64_t)v329;
      }
      else
      {
        v204 = 0;
        v205 = *(void (**)(unint64_t, uint64_t))(v362 + 8);
        v206 = v355;
      }
      v201 = (char *)v233;
      v205(v233, v36);

      ((void (*)(_TtC9AirDropUI33AirDropTransferSessionsController **, _QWORD))v356)(&v365, 0);
      swift_release(v292);
      v207 = swift_release(v293);
      v202 = v339;
      ((void (*)(char *, uint64_t, __n128))v205)(v339, v36, v207);
      v199 = &v206[v358];
      v196 = (_TtC9AirDropUI33AirDropTransferSessionsController *)((char *)v359 - 1);
      v197 = v357;
      v203 = v340;
      v198 = v354;
      if (v359 == (_TtC9AirDropUI33AirDropTransferSessionsController *)1)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v353)(v340, 1, 1, v36);
        goto LABEL_55;
      }
    }
    v264 = *(id *)(*(_QWORD *)v262->nearbySharingInteractionCoordinator + 8 * v263);
    swift_bridgeObjectRelease(v262, v265, v266, v267, v268, v269, v270, v271);
    v272 = type metadata accessor for TaskPriority(0);
    v273 = *(_QWORD *)(v272 - 8);
    v274 = (uint64_t)v327;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v273 + 56))(v327, 1, 1, v272);
    type metadata accessor for MainActor(0);
    v275 = v264;
    v276 = static MainActor.shared.getter(v275);
    v277 = (_QWORD *)swift_allocObject(&unk_100127F00, 40, 7);
    v277[2] = v276;
    v277[3] = &protocol witness table for MainActor;
    v277[4] = v275;
    v361 = v275;
    v278 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v273 + 48))(v274, 1, v272);
    if ((_DWORD)v278 == 1)
    {
      sub_10000CC5C(v274, &qword_10013BCC0);
      v279 = 0;
      v280 = v277[2];
      if (v280)
      {
LABEL_41:
        v281 = v232;
        v282 = v277[3];
        ObjectType = swift_getObjectType(v280);
        swift_unknownObjectRetain(v280);
        v284 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v282);
        v286 = v285;
        swift_unknownObjectRelease(v280);
LABEL_45:
        v289 = swift_allocObject(&unk_100127F28, 32, 7);
        *(_QWORD *)(v289 + 16) = &unk_10013F238;
        *(_QWORD *)(v289 + 24) = v277;
        if (v286 | v284)
        {
          v363[0] = 0;
          v363[1] = 0;
          v290 = v363;
          v363[2] = v284;
          v363[3] = v286;
        }
        else
        {
          v290 = 0;
        }
        v291 = swift_task_create(v279 | 0x1C00, v290, v352, &unk_10013F240, v289);

        v287 = swift_release(v291);
        goto LABEL_49;
      }
    }
    else
    {
      v288 = TaskPriority.rawValue.getter(v278);
      (*(void (**)(uint64_t, uint64_t))(v273 + 8))(v274, v272);
      v279 = v288;
      v280 = v277[2];
      if (v280)
        goto LABEL_41;
    }
    v281 = v232;
    v284 = 0;
    v286 = 0;
    goto LABEL_45;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v7, 1, 1, v36);
LABEL_55:
  swift_bridgeObjectRelease(v351, v213, v214, v215, v216, v217, v218, v219);
}

uint64_t sub_100081EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6[5] = a4;
  v8 = sub_100008F88((uint64_t *)&unk_1001405D0);
  v9 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[6] = v9;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.takeNearbySharingAssertion(for:)[1]);
  v6[7] = v10;
  *v10 = v6;
  v10[1] = sub_100081F44;
  return SFAirDropClient.takeNearbySharingAssertion(for:)(v9, a6);
}

uint64_t sub_100081F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003251C;
  else
    v3 = sub_100081FA8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100081FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_interactionAssertionID;
  swift_beginAccess(v2, v0 + 16, 33, 0);
  sub_100040DE4(v1, v2, (uint64_t *)&unk_1001405D0);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10008202C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _TtC9AirDropUI33AirDropTransferSessionsController *v48;
  _QWORD *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, unint64_t, uint64_t);
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  unint64_t v76;
  const char *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _TtC9AirDropUI33AirDropTransferSessionsController *v102;
  SEL v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  char *v110;
  _TtC9AirDropUI33AirDropTransferSessionsController **v111;
  _TtC9AirDropUI33AirDropTransferSessionsController *v112;
  unint64_t v113;
  SEL v114;
  char v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t *v123;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v125;
  uint64_t v126;
  _TtC9AirDropUI33AirDropTransferSessionsController *v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _TtC9AirDropUI33AirDropTransferSessionsController *v140;
  _BYTE *v141;
  SEL v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  int64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  int64_t v160;
  unint64_t v161;
  int64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double result;
  uint64_t v167;
  char *v168;
  __int128 v169;
  char *v170;
  char *v171;
  void (*v172)(char *, uint64_t);
  char *v173;
  int64_t v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  int64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _TtC9AirDropUI33AirDropTransferSessionsController *v185;
  uint64_t v186[3];
  char v187[24];
  _QWORD v188[4];

  v1 = v0;
  v2 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v2, v3);
  v177 = (char *)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v6);
  v171 = (char *)&v167 - v7;
  v181 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181, v9);
  v176 = (char *)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v170 = (char *)&v167 - v13;
  __chkstk_darwin(v14, v15);
  v178 = (char *)&v167 - v16;
  __chkstk_darwin(v17, v18);
  v175 = (char *)&v167 - v19;
  v20 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v167 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v167 - v26;
  KeyPath = swift_getKeyPath(&unk_1000ED6A8);
  v29 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(v188, v1, KeyPath, v29);
  swift_release(KeyPath);
  swift_release(v29);
  v30 = *(_QWORD *)(v188[0] + 64);
  v179 = (_QWORD *)(v188[0] + 64);
  v182 = v188[0];
  v31 = 1 << *(_BYTE *)(v188[0] + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v183 = (_QWORD *)(v1
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID);
  swift_beginAccess(v1+ OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID, v188, 0, 0);
  *(_QWORD *)&v169 = v23 + 104;
  v168 = v27 + 104;
  v180 = v1;
  v184 = v8;
  v172 = (void (*)(char *, uint64_t))v20;
  v173 = v23;
  v174 = (unint64_t)(v31 + 63) >> 6;
  if (v33)
  {
    v34 = __clz(__rbit64(v33));
    goto LABEL_20;
  }
  v35 = (uint64_t)v178;
  if ((unint64_t)(v31 + 63) >> 6 > 1)
  {
    v36 = v179[1];
    v37 = 1;
    if (v36)
      goto LABEL_19;
    v37 = 2;
    if ((unint64_t)(v31 + 63) >> 6 > 2)
    {
      v36 = v179[2];
      if (v36)
        goto LABEL_19;
      v37 = 3;
      if ((unint64_t)(v31 + 63) >> 6 > 3)
      {
        v36 = v179[3];
        if (v36)
          goto LABEL_19;
        v37 = 4;
        if ((unint64_t)(v31 + 63) >> 6 > 4)
        {
          v36 = v179[4];
          if (!v36)
          {
            v38 = 5;
            if ((unint64_t)(v31 + 63) >> 6 > 5)
            {
              v36 = v179[5];
              if (v36)
              {
                v37 = 5;
                goto LABEL_19;
              }
              while (1)
              {
                v37 = v38 + 1;
                if (__OFADD__(v38, 1))
                  break;
                if (v37 >= (uint64_t)((unint64_t)(v31 + 63) >> 6))
                  goto LABEL_23;
                v36 = v179[v37];
                ++v38;
                if (v36)
                  goto LABEL_19;
              }
LABEL_83:
              __break(1u);
              goto LABEL_84;
            }
            goto LABEL_23;
          }
LABEL_19:
          v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_20:
          v39 = *(void **)(*(_QWORD *)(v182 + 56) + 8 * v34);
          sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
          v40 = (void *)static NSUserDefaults.airdrop.getter(v39);
          LOBYTE(v39) = SFAirDropUserDefaults.shockwaveEffectEnabled.getter();

          if ((v39 & 1) != 0)
          {
            sub_100049C50(v27);
            v41 = (char *)&loc_100082404 + dword_100082EE4[swift_getEnumCaseMultiPayload(v27, v20)];
            __asm { BR              X9 }
          }
          sub_100049C50(v23);
          v42 = (char *)&loc_10008244C + dword_100082ECC[swift_getEnumCaseMultiPayload(v23, v20)];
          __asm { BR              X9 }
        }
      }
    }
  }
LABEL_23:
  swift_release(v182);
  v43 = v183;
  swift_beginAccess(v183, v187, 0, 0);
  v44 = swift_bridgeObjectRetain(*v43);
  v45 = sub_10007E258(v44);
  v46 = swift_getKeyPath(&unk_1000ED6A8);
  v47 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(v186, v1, v46, v47);
  swift_release(v46);
  swift_release(v47);
  v48 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v186[0];
  v49 = sub_10008A4F8(v186[0], v45);
  swift_bridgeObjectRelease(v48, v50, v51, v52, v53, v54, v55, v56);
  v58 = 0;
  v59 = v49[7];
  v173 = (char *)(v49 + 7);
  v179 = v49;
  v60 = 1 << *((_BYTE *)v49 + 32);
  v61 = -1;
  if (v60 < 64)
    v61 = ~(-1 << v60);
  v62 = v61 & v59;
  v174 = (unint64_t)(v60 + 63) >> 6;
  *(_QWORD *)&v57 = 136315138;
  v169 = v57;
  v168 = (char *)&type metadata for Any + 8;
  v63 = v181;
  v64 = v171;
  while (1)
  {
    if (v62)
    {
      v65 = __clz(__rbit64(v62));
      v62 &= v62 - 1;
      v182 = v58;
      v66 = v65 | (v58 << 6);
      goto LABEL_44;
    }
    v67 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v67 >= v174)
      goto LABEL_57;
    v68 = *(_QWORD *)&v173[8 * v67];
    v69 = v58 + 1;
    if (!v68)
    {
      v69 = v58 + 2;
      if (v58 + 2 >= v174)
        goto LABEL_57;
      v68 = *(_QWORD *)&v173[8 * v69];
      if (!v68)
      {
        v69 = v58 + 3;
        if (v58 + 3 >= v174)
          goto LABEL_57;
        v68 = *(_QWORD *)&v173[8 * v69];
        if (!v68)
          break;
      }
    }
LABEL_43:
    v62 = (v68 - 1) & v68;
    v182 = v69;
    v66 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_44:
    v71 = v184;
    v72 = *(_QWORD *)(v184 + 72);
    v73 = *(void (**)(char *, unint64_t, uint64_t))(v184 + 16);
    v73(v64, v179[6] + v72 * v66, v63);
    v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56);
    v74(v64, 0, 1, v63);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v64, 1, v63) == 1)
      goto LABEL_58;
    (*(void (**)(uint64_t, char *, uint64_t))(v184 + 32))(v35, v64, v63);
    v75 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v183;
    if (*(_QWORD *)(*v183 + 16))
    {
      swift_bridgeObjectRetain(*v183);
      v76 = sub_10003AEC0(v35);
      if ((v77 & 1) != 0)
      {
        v175 = *(char **)(*(_QWORD *)v75->nearbySharingInteractionCoordinator + 8 * v76);
        swift_retain(v175);
        swift_bridgeObjectRelease(v75, v84, v85, v86, v87, v88, v89, v90);
        if (qword_10013AD60 != -1)
          swift_once(&qword_10013AD60, sub_100092254);
        v91 = type metadata accessor for Logger(0);
        sub_100009558(v91, (uint64_t)qword_100148040);
        v92 = v170;
        v93 = ((uint64_t (*)(char *, char *, uint64_t))v73)(v170, v178, v63);
        v94 = v63;
        v95 = Logger.logObject.getter(v93);
        v96 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v95, v96))
        {
          v97 = swift_slowAlloc(12, -1);
          v98 = swift_slowAlloc(32, -1);
          v186[0] = v98;
          *(_DWORD *)v97 = v169;
          v99 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v100 = dispatch thunk of CustomStringConvertible.description.getter(v94, v99);
          v102 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v101;
          *(_QWORD *)(v97 + 4) = sub_10003A834(v100, v101, v186);
          swift_bridgeObjectRelease(v102, v103, v104, v105, v106, v107, v108, v109);
          v172 = *(void (**)(char *, uint64_t))(v184 + 8);
          v172(v92, v94);
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Dismissing remote alert for nearby sharing interaction with ID: %s", (uint8_t *)v97, 0xCu);
          swift_arrayDestroy(v98, 1, v168);
          swift_slowDealloc(v98, -1, -1);
          swift_slowDealloc(v97, -1, -1);
        }
        else
        {
          v172 = *(void (**)(char *, uint64_t))(v184 + 8);
          v172(v92, v63);
        }

        v63 = v94;
        v1 = v180;
        v64 = v171;
        v35 = (uint64_t)v178;
        v110 = v175;
        dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)(0, 0, 0);
        v111 = (_TtC9AirDropUI33AirDropTransferSessionsController **)v183;
        swift_beginAccess(v183, v186, 33, 0);
        v112 = *v111;
        swift_bridgeObjectRetain(*v111);
        v113 = sub_10003AEC0(v35);
        v115 = (char)v114;
        swift_bridgeObjectRelease(v112, v114, v116, v117, v118, v119, v120, v121);
        v122 = 0;
        if ((v115 & 1) != 0)
        {
          v123 = v183;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v183);
          v125 = *v123;
          v185 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v123;
          *v123 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10003C8F8();
            v125 = (uint64_t)v185;
          }
          v172((char *)(*(_QWORD *)(v125 + 48) + v113 * v72), v63);
          v126 = (uint64_t)v185;
          v122 = *(_QWORD *)(*(_QWORD *)v185->nearbySharingInteractionCoordinator + 8 * v113);
          sub_10003BF04(v113, (uint64_t)v185);
          v127 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*v123;
          *v123 = v126;
          swift_bridgeObjectRelease(v127, v128, v129, v130, v131, v132, v133, v134);
          v1 = v180;
          v110 = v175;
        }
        swift_endAccess(v186);
        swift_release(v110);
        swift_release(v122);
      }
      else
      {
        swift_bridgeObjectRelease(v75, v77, v78, v79, v80, v81, v82, v83);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v35, v63);
    v58 = v182;
  }
  v70 = v58 + 4;
  if (v58 + 4 < v174)
  {
    v68 = *(_QWORD *)&v173[8 * v70];
    if (!v68)
    {
      while (1)
      {
        v69 = v70 + 1;
        if (__OFADD__(v70, 1))
          break;
        if (v69 >= v174)
          goto LABEL_57;
        v68 = *(_QWORD *)&v173[8 * v69];
        ++v70;
        if (v68)
          goto LABEL_43;
      }
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v69 = v58 + 4;
    goto LABEL_43;
  }
LABEL_57:
  v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v184 + 56);
  v74(v64, 1, 1, v63);
LABEL_58:
  swift_release(v179);
  v135 = (_QWORD *)(v1
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID);
  swift_beginAccess(v1 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID, v186, 0, 0);
  v136 = swift_bridgeObjectRetain(*v135);
  v137 = sub_10007E258(v136);
  v138 = swift_getKeyPath(&unk_1000ED6A8);
  v139 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v185, v1, v138, v139);
  swift_release(v138);
  swift_release(v139);
  v140 = v185;
  v141 = sub_10008A4F8((uint64_t)v185, v137);
  swift_bridgeObjectRelease(v140, v142, v143, v144, v145, v146, v147, v148);
  v149 = 0;
  v150 = v141 + 56;
  v151 = 1 << v141[32];
  v152 = -1;
  if (v151 < 64)
    v152 = ~(-1 << v151);
  v153 = v152 & *((_QWORD *)v141 + 7);
  v154 = (unint64_t)(v151 + 63) >> 6;
  v155 = v181;
  v156 = (uint64_t)v176;
  if (!v153)
    goto LABEL_62;
LABEL_61:
  v157 = __clz(__rbit64(v153));
  v153 &= v153 - 1;
  v158 = v157 | (v149 << 6);
  v159 = v177;
  while (1)
  {
    v163 = v184;
    (*(void (**)(char *, unint64_t, uint64_t))(v184 + 16))(v159, *((_QWORD *)v141 + 6) + *(_QWORD *)(v184 + 72) * v158, v155);
    v74(v159, 0, 1, v155);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v159, 1, v155) == 1)
      goto LABEL_80;
    v164 = v184;
    (*(void (**)(uint64_t, char *, uint64_t))(v184 + 32))(v156, v159, v155);
    v165 = sub_100084F3C(v156);
    (*(void (**)(uint64_t, uint64_t, double))(v164 + 8))(v156, v155, v165);
    if (v153)
      goto LABEL_61;
LABEL_62:
    v160 = v149 + 1;
    if (__OFADD__(v149, 1))
      goto LABEL_82;
    v159 = v177;
    if (v160 >= v154)
      break;
    v161 = *(_QWORD *)&v150[8 * v160];
    ++v149;
    if (!v161)
    {
      v149 = v160 + 1;
      if (v160 + 1 >= v154)
        break;
      v161 = *(_QWORD *)&v150[8 * v149];
      if (!v161)
      {
        v149 = v160 + 2;
        if (v160 + 2 >= v154)
          break;
        v161 = *(_QWORD *)&v150[8 * v149];
        if (!v161)
        {
          v162 = v160 + 3;
          if (v162 >= v154)
            break;
          v161 = *(_QWORD *)&v150[8 * v162];
          if (!v161)
          {
            while (1)
            {
              v149 = v162 + 1;
              if (__OFADD__(v162, 1))
                break;
              if (v149 >= v154)
                goto LABEL_79;
              v161 = *(_QWORD *)&v150[8 * v149];
              ++v162;
              if (v161)
                goto LABEL_75;
            }
LABEL_85:
            __break(1u);
            JUMPOUT(0x100082ECCLL);
          }
          v149 = v162;
        }
      }
    }
LABEL_75:
    v153 = (v161 - 1) & v161;
    v158 = __clz(__rbit64(v161)) + (v149 << 6);
  }
LABEL_79:
  v74(v177, 1, 1, v181);
LABEL_80:
  *(_QWORD *)&result = swift_release(v141).n128_u64[0];
  return result;
}

double sub_100082EFC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  double result;
  _TtC9AirDropUI33AirDropTransferSessionsController **v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  unint64_t v13;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  _BYTE v41[24];
  _BYTE v42[24];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004B10C();
  v8 = (uint64_t)a1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
  if (v9)
    return sub_1000847F4((uint64_t)a1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id);
  v11 = (_TtC9AirDropUI33AirDropTransferSessionsController **)(v1
                                                             + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID);
  swift_beginAccess(v1+ OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID, v42, 0, 0);
  v12 = *v11;
  if (!*(_QWORD *)(*v11)->connection)
    goto LABEL_7;
  swift_bridgeObjectRetain(*v11);
  v13 = sub_10003AEC0(v8);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
LABEL_7:
    v21 = sub_10008FC64(a1);
    goto LABEL_8;
  }
  v21 = *(_QWORD *)(*(_QWORD *)v12->nearbySharingInteractionCoordinator + 8 * v13);
  swift_retain(v21);
  swift_bridgeObjectRelease(v12, v22, v23, v24, v25, v26, v27, v28);
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v8, v3);
  swift_beginAccess(v11, v41, 33, 0);
  if (v21)
  {
    swift_retain(v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
    v40 = *v11;
    *v11 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
    sub_1000896BC(v21, (uint64_t)v7, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))sub_10003C8F8, (uint64_t *)&unk_10013CB00);
    v30 = *v11;
    *v11 = v40;
    swift_bridgeObjectRelease(v30, v31, v32, v33, v34, v35, v36, v37);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  else
  {
    v38 = sub_10003B6F0((uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_release(v38);
  }
  swift_endAccess(v41);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

double sub_1000830F0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _TtC9AirDropUI33AirDropTransferSessionsController **v50;
  _TtC9AirDropUI33AirDropTransferSessionsController *v51;
  unint64_t v52;
  const char *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v71;
  SEL v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint8_t *v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _TtC9AirDropUI33AirDropTransferSessionsController *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint8_t **)((char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v15);
  v17 = (uint8_t **)((char *)&v80 - v16);
  sub_10004B10C();
  if (v18 != 1)
    return sub_100084F3C((uint64_t)a1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id);
  v85 = v5;
  v86 = v2;
  v84 = v8;
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v19 = type metadata accessor for Logger(0);
  sub_100009558(v19, (uint64_t)qword_100148040);
  v20 = a1;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v82 = swift_slowAlloc(32, -1);
    v90[0] = v82;
    v83 = v4;
    *(_DWORD *)v23 = 136315138;
    v80 = v23 + 4;
    v81 = v23;
    KeyPath = swift_getKeyPath(&unk_1000ED738);
    v25 = swift_getKeyPath(&unk_1000ED760);
    static Published.subscript.getter(v17, v20, KeyPath, v25);
    swift_release(KeyPath);
    swift_release(v25);
    v26 = sub_100008694((unint64_t *)&unk_1001405E0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v9, v26);
    v29 = v28;
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v17, v9);
    v88 = sub_10003A834(v27, (unint64_t)v29, v90);
    v4 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

    swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    v37 = v22;
    v38 = v81;
    _os_log_impl((void *)&_mh_execute_header, v21, v37, "update activity kit activity for model state:%s", v81, 0xCu);
    v39 = v82;
    swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

  }
  v41 = swift_getKeyPath(&unk_1000ED738);
  v42 = swift_getKeyPath(&unk_1000ED760);
  static Published.subscript.getter(v13, v20, v41, v42);
  swift_release(v41);
  v43 = swift_release(v42);
  LODWORD(v41) = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v10 + 88))(v13, v9, v43);
  LODWORD(v42) = enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  v44 = (_DWORD)v41 == (_DWORD)v42;
  v45 = v86;
  if (!v44)
  {
    v49 = (uint64_t)v20 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
    v50 = (_TtC9AirDropUI33AirDropTransferSessionsController **)(v86
                                                               + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID);
    swift_beginAccess(v86 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID, v90, 0, 0);
    v51 = *v50;
    if (*(_QWORD *)(*v50)->connection)
    {
      swift_bridgeObjectRetain(*v50);
      v52 = sub_10003AEC0(v49);
      if ((v53 & 1) != 0)
      {
        v60 = *(_QWORD *)(*(_QWORD *)v51->nearbySharingInteractionCoordinator + 8 * v52);
        swift_retain(v60);
        swift_bridgeObjectRelease(v51, v61, v62, v63, v64, v65, v66, v67);
LABEL_17:
        v69 = (uint64_t)v84;
        v68 = v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, v49, v4);
        swift_beginAccess(v50, &v88, 33, 0);
        if (v60)
        {
          swift_retain(v60);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v50);
          v87 = *v50;
          *v50 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
          sub_1000896BC(v60, v69, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))sub_10003C904, &qword_10013F1B0);
          v71 = *v50;
          *v50 = v87;
          swift_bridgeObjectRelease(v71, v72, v73, v74, v75, v76, v77, v78);
          (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v4);
        }
        else
        {
          v79 = sub_10003B6FC(v69);
          (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v4);
          swift_release(v79);
        }
        swift_endAccess(&v88);
        v48 = v60;
        goto LABEL_21;
      }
      swift_bridgeObjectRelease(v51, v53, v54, v55, v56, v57, v58, v59);
    }
    v60 = sub_100090318((char *)v20);
    goto LABEL_17;
  }
  v46 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity;
  if (*(_QWORD *)(v86 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity))
    return result;
  v47 = sub_100090318((char *)v20);
  sub_10007ED38(v47);
  v48 = *(_QWORD *)(v45 + v46);
  *(_QWORD *)(v45 + v46) = v47;
LABEL_21:
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

void *sub_1000835FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  __n128 v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];

  v5 = sub_100008F88(&qword_10013F190);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_10013F198);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t *)(v2
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID);
  swift_beginAccess(v2 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID, v36, 0, 0);
  v19 = *v18;
  swift_bridgeObjectRetain(a2);
  v20 = swift_bridgeObjectRetain(v19);
  sub_10007D0D4(v20, a1, a2, (uint64_t)v8);
  swift_bridgeObjectRelease(v19);
  v21 = sub_100008F88((uint64_t *)&unk_10013F1A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v8, 1, v21) == 1)
  {
    sub_10000CC5C((uint64_t)v8, &qword_10013F190);
    return 0;
  }
  else
  {
    v23 = *(_QWORD *)&v8[*(int *)(v21 + 48)];
    v24 = *(int *)(v9 + 48);
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v25(v12, v8, v13);
    *(_QWORD *)&v12[v24] = v23;
    v26 = swift_release(*(_QWORD *)&v12[*(int *)(v9 + 48)]);
    ((void (*)(char *, char *, uint64_t, __n128))v25)(v17, v12, v13, v26);
    KeyPath = swift_getKeyPath(&unk_1000ED6A8);
    v28 = swift_getKeyPath(&unk_1000ED6D0);
    static Published.subscript.getter(&v35, v2, KeyPath, v28);
    swift_release(KeyPath);
    swift_release(v28);
    v29 = v35;
    if (*(_QWORD *)(v35 + 16) && (v30 = sub_10003AEC0((uint64_t)v17), (v31 & 1) != 0))
    {
      v22 = *(void **)(*(_QWORD *)(v29 + 56) + 8 * v30);
      v32 = v22;
    }
    else
    {
      v22 = 0;
    }
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  return v22;
}

uint64_t sub_100083854(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint8_t *v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  id v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD);
  char *v70;
  __n128 v71;
  uint64_t v72;
  _TtC9AirDropUI33AirDropTransferSessionsController **v73;
  uint64_t isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  const char *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  _TtC9AirDropUI33AirDropTransferSessionsController *v89;
  __n128 v90;
  _TtC9AirDropUI33AirDropTransferSessionsController *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _TtC9AirDropUI33AirDropTransferSessionsController *v107;
  const char *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  _BOOL8 v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v121;
  __n128 v122;
  _TtC9AirDropUI33AirDropTransferSessionsController *v123;
  uint64_t v124;
  uint64_t result;
  uint8_t *v126;
  uint8_t *v127;
  uint64_t v128;
  Class v129;
  char *v130;
  objc_class *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(char *, uint64_t, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(_QWORD, _QWORD);
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _TtC9AirDropUI33AirDropTransferSessionsController *v147;
  uint64_t v148[4];

  v2 = v1;
  v4 = sub_100008F88((uint64_t *)&unk_10013F130);
  __chkstk_darwin(v4, v5);
  v131 = (objc_class *)((char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100008F88((uint64_t *)&unk_10013FEA0);
  v133 = *(_QWORD *)(v7 - 8);
  v134 = v7;
  __chkstk_darwin(v7, v8);
  v132 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88((uint64_t *)&unk_10013F140);
  v140 = *(_QWORD *)(v10 - 8);
  v141 = (void (*)(_QWORD, _QWORD))v10;
  __chkstk_darwin(v10, v11);
  v139 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for UUID(0);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146, v13);
  v145 = (uint64_t)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (objc_class *)((char *)&v126 - v17);
  __chkstk_darwin(v19, v20);
  v142 = (char *)&v126 - v21;
  v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v137 = v25;
  v138 = (char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v126 - v28;
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v30 = type metadata accessor for Logger(0);
  sub_100009558(v30, (uint64_t)qword_100148040);
  v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v31 = v136(v29, a1, v22);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  v34 = os_log_type_enabled(v32, v33);
  v143 = a1;
  v135 = v23;
  if (v34)
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v128 = v36;
    v148[0] = v36;
    v127 = v35;
    *(_DWORD *)v35 = 136315138;
    v126 = v35 + 4;
    v129 = v18;
    v37 = v142;
    SFAirDrop.NearbySharingInteraction.id.getter(v36);
    v38 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v130 = v1;
    v39 = v146;
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v146, v38);
    v41 = v39;
    v43 = v42;
    v44 = v37;
    v18 = v129;
    (*(void (**)(char *, uint64_t))(v144 + 8))(v44, v41);
    v147 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10003A834(v40, v43, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    v45 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v43;
    v2 = v130;
    a1 = v143;
    swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
    v53 = v127;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Creating nearby sharing interaction view model for interaction ID: %s", v127, 0xCu);
    v54 = v128;
    swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
  }

  v55 = v138;
  v56 = (void (*)(char *, uint64_t, uint64_t))v136;
  v136(v138, a1, v22);
  v57 = *(_QWORD *)&v2[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contentResolver];
  v58 = *(_QWORD *)&v2[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contactDetailsProvider];
  v129 = (Class)type metadata accessor for NearbySharingInteractionViewModel(0);
  v59 = objc_allocWithZone(v129);
  swift_retain(v57);
  swift_retain(v58);
  v60 = sub_10004D55C(v55, v57, v58);
  swift_release(v57);
  swift_release(v58);
  v130 = v60;
  swift_beginAccess(&v60[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__state], v148, 33, 0);
  v61 = sub_100008F88((uint64_t *)&unk_10013D340);
  v62 = v139;
  Published.projectedValue.getter(v61);
  swift_endAccess(v148);
  v63 = swift_allocObject(&unk_100127D48, 24, 7);
  swift_unknownObjectWeakInit(v63 + 16, v2);
  v56(v55, a1, v22);
  v64 = v135;
  v65 = *(unsigned __int8 *)(v135 + 80);
  v66 = (v65 + 24) & ~v65;
  v67 = swift_allocObject(&unk_100127D70, v66 + v137, v65 | 7);
  *(_QWORD *)(v67 + 16) = v63;
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v67 + v66, v55, v22);
  v68 = sub_10000CB94((unint64_t *)&unk_10013F150, (uint64_t *)&unk_10013F140, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v69 = v141;
  v70 = (char *)Publisher<>.sink(receiveValue:)(sub_1000915C4, v67, v141, v68);
  v71 = swift_release(v67);
  v72 = (*(uint64_t (**)(char *, void (*)(_QWORD, _QWORD), __n128))(v140 + 8))(v62, v69, v71);
  SFAirDrop.NearbySharingInteraction.id.getter(v72);
  v73 = (_TtC9AirDropUI33AirDropTransferSessionsController **)&v2[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID];
  swift_beginAccess(&v2[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID], v148, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v73);
  v147 = *v73;
  v75 = v147;
  *v73 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
  v83 = sub_10003AEC0((uint64_t)v18);
  v84 = *(_QWORD *)v75->connection;
  v85 = (v76 & 1) == 0;
  v86 = v84 + v85;
  if (__OFADD__(v84, v85))
  {
    __break(1u);
    goto LABEL_23;
  }
  LOBYTE(v67) = (_BYTE)v76;
  if (*(_QWORD *)v75->airdropClient >= v86)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    sub_1000887E8(v86, isUniquelyReferenced_nonNull_native);
    v75 = v147;
    v87 = sub_10003AEC0((uint64_t)v18);
    if ((v67 & 1) != (v76 & 1))
      goto LABEL_25;
    v83 = v87;
  }
  while (1)
  {
    v88 = v2;
    v89 = *v73;
    *v73 = v75;
    swift_bridgeObjectRelease(v89, v76, v77, v78, v79, v80, v81, v82);
    v91 = *v73;
    if ((v67 & 1) == 0)
    {
      v92 = (uint64_t)v142;
      (*(void (**)(char *, objc_class *, uint64_t))(v144 + 16))(v142, v18, v146);
      sub_100089828(v83, v92, (uint64_t)&_swiftEmptySetSingleton, v91);
    }
    AnyCancellable.store(in:)(*(_QWORD *)v91->nearbySharingInteractionCoordinator + 8 * v83, v90);
    v141 = *(void (**)(_QWORD, _QWORD))(v144 + 8);
    v141(v18, v146);
    swift_endAccess(v148);
    swift_release(v70);
    sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    v93 = v130;
    v148[0] = ObservableObject<>.objectWillChange.getter(v129);
    v94 = sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
    v147 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static OS_dispatch_queue.main.getter();
    v95 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v18 = v131;
    (*(void (**)(objc_class *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v131, 1, 1, v95);
    v96 = type metadata accessor for ObservableObjectPublisher(0);
    v97 = sub_1000873C0((unint64_t *)&qword_10013F160, &qword_10013CC10, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v2 = v132;
    Publisher.receive<A>(on:options:)(&v147, v18, v96, v94, &protocol witness table for ObservableObjectPublisher, v97);
    sub_10000CC5C((uint64_t)v18, (uint64_t *)&unk_10013F130);

    swift_release(v148[0]);
    v98 = swift_allocObject(&unk_100127D48, 24, 7);
    swift_unknownObjectWeakInit(v98 + 16, v88);
    v99 = swift_allocObject(&unk_100127D98, 32, 7);
    *(_QWORD *)(v99 + 16) = v98;
    *(_QWORD *)(v99 + 24) = v93;
    v100 = swift_allocObject(&unk_100127DC0, 32, 7);
    *(_QWORD *)(v100 + 16) = sub_100091630;
    *(_QWORD *)(v100 + 24) = v99;
    v101 = sub_10000CB94(&qword_10013F168, (uint64_t *)&unk_10013FEA0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v70 = v93;
    v102 = v134;
    v83 = Publisher<>.sink(receiveValue:)(sub_100040B54, v100, v134, v101);
    v103 = swift_release(v100);
    v104 = (*(uint64_t (**)(char *, uint64_t, __n128))(v133 + 8))(v2, v102, v103);
    v105 = v145;
    SFAirDrop.NearbySharingInteraction.id.getter(v104);
    swift_beginAccess(v73, v148, 33, 0);
    v106 = swift_isUniquelyReferenced_nonNull_native(*v73);
    v147 = *v73;
    v107 = v147;
    *v73 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
    v67 = sub_10003AEC0(v105);
    v115 = *(_QWORD *)v107->connection;
    v116 = (v108 & 1) == 0;
    v117 = v115 + v116;
    if (!__OFADD__(v115, v116))
      break;
LABEL_23:
    __break(1u);
LABEL_24:
    sub_10003C4A0();
    v75 = v147;
  }
  v118 = (char)v108;
  if (*(_QWORD *)v107->airdropClient >= v117)
  {
    if ((v106 & 1) == 0)
    {
      sub_10003C4A0();
      v107 = v147;
    }
    goto LABEL_19;
  }
  sub_1000887E8(v117, v106);
  v107 = v147;
  v119 = sub_10003AEC0(v145);
  if ((v118 & 1) != (v108 & 1))
  {
LABEL_25:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v146);
    __break(1u);
    return result;
  }
  v67 = v119;
LABEL_19:
  v120 = v141;
  v121 = *v73;
  *v73 = v107;
  swift_bridgeObjectRelease(v121, v108, v109, v110, v111, v112, v113, v114);
  v123 = *v73;
  if ((v118 & 1) == 0)
  {
    v124 = (uint64_t)v142;
    (*(void (**)(char *, uint64_t, uint64_t))(v144 + 16))(v142, v145, v146);
    sub_100089828(v67, v124, (uint64_t)&_swiftEmptySetSingleton, v123);
  }
  AnyCancellable.store(in:)(*(_QWORD *)v123->nearbySharingInteractionCoordinator + 8 * v67, v122);
  v120(v145, v146);
  swift_endAccess(v148);
  swift_release(v83);
  return (uint64_t)v70;
}

void sub_100084224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28[24];

  v27 = a3;
  v5 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  v9 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v9, v10);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = &v28[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v19 = (char *)Strong;
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:), v13);
    v20 = static SFAirDrop.NearbySharingInteraction.State.== infix(_:_:)(a1, v17);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    if ((v20 & 1) != 0)
    {
      v21 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 1, 1, v21);
      v22 = *(_QWORD *)&v19[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_airDropClient];
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(&v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v27, v5);
      v23 = *(unsigned __int8 *)(v6 + 80);
      v24 = (v23 + 40) & ~v23;
      v25 = (char *)swift_allocObject(&unk_100127DE8, v24 + v7, v23 | 7);
      *((_QWORD *)v25 + 2) = 0;
      *((_QWORD *)v25 + 3) = 0;
      *((_QWORD *)v25 + 4) = v22;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v25[v24], &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v5);
      swift_retain(v22);
      v26 = sub_1000A66DC((uint64_t)v12, (uint64_t)&unk_10013F188, (uint64_t)v25);

      swift_release(v26);
    }
    else
    {

    }
  }
}

uint64_t sub_100084438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for UUID(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100084498, 0, 0);
}

uint64_t sub_100084498()
{
  uint64_t v0;
  _QWORD *v1;

  SFAirDrop.NearbySharingInteraction.id.getter();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.endNearbySharingInteraction(_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_10003247C;
  return SFAirDropClient.endNearbySharingInteraction(_:)(*(_QWORD *)(v0 + 48));
}

void sub_1000844F8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_100082EFC(a2);
    sub_1000830F0(a2);

  }
}

double sub_100084558(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double result;
  char v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004B10C();
  if (!v7)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v8 = type metadata accessor for Logger(0);
    sub_100009558(v8, (uint64_t)qword_100148040);
    v9 = a1;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      *(_DWORD *)v12 = 136315138;
      v32 = v13;
      v14 = type metadata accessor for UUID(0);
      v15 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      v18 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v17;
      v31 = sub_10003A834(v16, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

      swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Ending nearby sharing interaction with ID: %s due to remote alert dismissal", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v5, 1, 1, v26);
    type metadata accessor for MainActor(0);
    v27 = v9;
    v28 = static MainActor.shared.getter(v27);
    v29 = (_QWORD *)swift_allocObject(&unk_100127ED8, 40, 7);
    v29[2] = v28;
    v29[3] = &protocol witness table for MainActor;
    v29[4] = v27;
    v30 = sub_1000CB748((uint64_t)v5, (uint64_t)&unk_10013F218, (uint64_t)v29);
    *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  }
  return result;
}

double sub_1000847F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _TtC9AirDropUI33AirDropTransferSessionsController **v8;
  double result;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  unint64_t v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _TtC9AirDropUI33AirDropTransferSessionsController *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  _BYTE v52[24];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_TtC9AirDropUI33AirDropTransferSessionsController **)(v1
                                                            + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID);
  *(_QWORD *)&result = swift_beginAccess(v1+ OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID, v52, 0, 0).n128_u64[0];
  v10 = *v8;
  if (*(_QWORD *)(*v8)->connection)
  {
    swift_bridgeObjectRetain(*v8);
    v11 = sub_10003AEC0(a1);
    if ((v12 & 1) != 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)v10->nearbySharingInteractionCoordinator + 8 * v11);
      swift_retain(v19);
      swift_bridgeObjectRelease(v10, v20, v21, v22, v23, v24, v25, v26);
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v27 = type metadata accessor for Logger(0);
      sub_100009558(v27, (uint64_t)qword_100148040);
      v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(12, -1);
        v49 = v19;
        v32 = (uint8_t *)v31;
        v48 = swift_slowAlloc(32, -1);
        v51[0] = v48;
        *(_DWORD *)v32 = 136315138;
        v47 = v32 + 4;
        v33 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v34 = dispatch thunk of CustomStringConvertible.description.getter(v3, v33);
        v36 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v35;
        v50 = sub_10003A834(v34, v35, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
        swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Dismissing remote alert for nearby sharing interaction with ID: %s", v32, 0xCu);
        v44 = v48;
        swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        v45 = v32;
        v19 = v49;
        swift_slowDealloc(v45, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      }

      dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)(0, 0, 0);
      swift_beginAccess(v8, v51, 33, 0);
      v46 = sub_10003B6F0(a1);
      swift_endAccess(v51);
      swift_release(v19);
      *(_QWORD *)&result = swift_release(v46).n128_u64[0];
    }
    else
    {
      swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  return result;
}

uint64_t sub_100084AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100084B30, v6, v7);
}

uint64_t sub_100084B30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_100047B3C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[5] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100084BD0, v7, v8);
}

uint64_t sub_100084BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;

  swift_release(*(_QWORD *)(v0 + 40));
  if (qword_10013ADA0 != -1)
    swift_once(&qword_10013ADA0, sub_1000CF1D4);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = qword_100148088;
  swift_retain(qword_100148088);
  sub_1000D0CA4(v1);
  v3 = swift_release(v2);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

double sub_100084F3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _TtC9AirDropUI33AirDropTransferSessionsController **v20;
  double result;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  unint64_t v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _TtC9AirDropUI33AirDropTransferSessionsController *v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  uint8_t *v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  char v77[24];

  v3 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v7 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74, v8);
  v10 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013F0E0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (_TtC9AirDropUI33AirDropTransferSessionsController **)(v1
                                                             + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID);
  *(_QWORD *)&result = swift_beginAccess(v1+ OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID, v77, 0, 0).n128_u64[0];
  v22 = *v20;
  if (*(_QWORD *)(*v20)->connection)
  {
    swift_bridgeObjectRetain(*v20);
    v23 = sub_10003AEC0(a1);
    if ((v24 & 1) != 0)
    {
      v72 = *(_QWORD *)(*(_QWORD *)v22->nearbySharingInteractionCoordinator + 8 * v23);
      v73 = v6;
      swift_retain(v72);
      swift_bridgeObjectRelease(v22, v31, v32, v33, v34, v35, v36, v37);
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v38 = type metadata accessor for Logger(0);
      sub_100009558(v38, (uint64_t)qword_100148040);
      v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v70 = v40;
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v69 = swift_slowAlloc(32, -1);
        v76[0] = v69;
        v71 = a1;
        *(_DWORD *)v42 = 136315138;
        v67[1] = v42 + 4;
        v68 = v42;
        v43 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v44 = dispatch thunk of CustomStringConvertible.description.getter(v15, v43);
        v46 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v45;
        v75 = sub_10003A834(v44, v45, v76);
        a1 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
        swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
        v40 = v70;
        v54 = v41;
        v55 = v68;
        _os_log_impl((void *)&_mh_execute_header, v70, v54, "Ending activity for nearby sharing interaction with ID: %s", v68, 0xCu);
        v56 = v69;
        swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      }

      v57 = sub_100008F88(&qword_10013F0E8);
      v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v14, 1, 1, v57);
      static ActivityUIDismissalPolicy.immediate.getter(v58);
      v59 = v72;
      dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v14, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v74);
      sub_10000CC5C((uint64_t)v14, &qword_10013F0E0);
      v60 = type metadata accessor for TaskPriority(0);
      v61 = (uint64_t)v73;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v73, 1, 1, v60);
      type metadata accessor for MainActor(0);
      v62 = swift_retain(v59);
      v63 = static MainActor.shared.getter(v62);
      v64 = (_QWORD *)swift_allocObject(&unk_100127D20, 40, 7);
      v64[2] = v63;
      v64[3] = &protocol witness table for MainActor;
      v64[4] = v59;
      v65 = sub_1000CB748(v61, (uint64_t)&unk_10013F120, (uint64_t)v64);
      swift_release(v65);
      swift_beginAccess(v20, v76, 33, 0);
      v66 = sub_10003B6FC(a1);
      swift_endAccess(v76);
      swift_release(v59);
      *(_QWORD *)&result = swift_release(v66).n128_u64[0];
    }
    else
    {
      swift_bridgeObjectRelease(v22, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  return result;
}

uint64_t sub_100085390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000853FC, v6, v7);
}

uint64_t sub_1000853FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;

  swift_release(*(_QWORD *)(v0 + 24));
  if (qword_10013ADA0 != -1)
    swift_once(&qword_10013ADA0, sub_1000CF1D4);
  v1 = *(_QWORD *)(v0 + 16);
  v2 = qword_100148088;
  swift_retain(qword_100148088);
  sub_1000D0F18(v1);
  v3 = swift_release(v2);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

void sub_10008547C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;

  v1 = v0;
  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013F0E0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100009558(v15, (uint64_t)qword_100148040);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Ending failure activity", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v21 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity;
  v22 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity);
  if (v22)
  {
    v23 = sub_100008F88(&qword_10013F0E8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
    v24 = swift_retain(v22);
    static ActivityUIDismissalPolicy.immediate.getter(v24);
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v14, v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    sub_10000CC5C((uint64_t)v14, &qword_10013F0E0);
    v25 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v5, 1, 1, v25);
    type metadata accessor for MainActor(0);
    v26 = swift_retain(v22);
    v27 = static MainActor.shared.getter(v26);
    v28 = (_QWORD *)swift_allocObject(&unk_100127CA8, 40, 7);
    v28[2] = v27;
    v28[3] = &protocol witness table for MainActor;
    v28[4] = v22;
    v29 = sub_1000CB748((uint64_t)v5, (uint64_t)&unk_10013F0F8, (uint64_t)v28);
    swift_release(v29);
    v30 = *(_QWORD *)(v1 + v21);
    *(_QWORD *)(v1 + v21) = 0;
    swift_release(v22);
    swift_release(v30);
  }
  else
  {
    v34 = Logger.logObject.getter(v20);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v31, "No current failure activity found", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

  }
}

uint64_t sub_1000857AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter();
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000921AC, v6, v7);
}

void sub_100085818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000ED6A8);
  v9 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v20, v2, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = v20;
  if (*(_QWORD *)(v20 + 16) && (v11 = sub_10003AEC0(a1), (v12 & 1) != 0))
  {
    v13 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v11);
    swift_bridgeObjectRelease(v10);
    v14 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    type metadata accessor for MainActor(0);
    v15 = v13;
    v16 = static MainActor.shared.getter(v15);
    v17 = (_QWORD *)swift_allocObject(&unk_100127C80, 40, 7);
    v17[2] = v16;
    v17[3] = &protocol witness table for MainActor;
    v17[4] = v15;
    v18 = sub_1000CB748((uint64_t)v7, (uint64_t)&unk_10013F0D8, (uint64_t)v17);
    swift_release(v18);

  }
  else
  {
    swift_bridgeObjectRelease(v10);
  }
}

void sub_1000859BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = "\b";
  sub_100085A68(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = "\b";
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = "\b";
    swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
  }
}

void sub_100085A68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10013EEA0)
  {
    v2 = sub_10000950C(&qword_10013EEA8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10013EEA0);
  }
}

uint64_t sub_100085AC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for NearbySharingInteractionCoordinator(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100085B60(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v8;
  _TtC9AirDropUI33AirDropTransferSessionsController *v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned __int8 *transfersMonitorTask;
  uint64_t v37;
  const char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  NSString v46;
  id v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  char v70;
  char v71;
  uint64_t v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  _TtC9AirDropUI33AirDropTransferSessionsController *v81;
  uint64_t v84;

  KeyPath = swift_getKeyPath(&unk_1000ED6A8);
  v8 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v84, v4, KeyPath, v8);
  swift_release(KeyPath);
  swift_release(v8);
  v9 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v84;
  v10 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10007D460(v84);
  swift_bridgeObjectRelease(v9, v11, v12, v13, v14, v15, v16, v17);
  v18 = sub_10007CFA0((uint64_t)v10);
  swift_bridgeObjectRelease(v10, v19, v20, v21, v22, v23, v24, v25);
  v33 = (uint64_t)&_swiftEmptyArrayStorage;
  v84 = (uint64_t)&_swiftEmptyArrayStorage;
  v34 = *(_QWORD *)v18->connection;
  if (v34)
  {
    v35 = (void *)objc_opt_self(TUHandle);
    swift_bridgeObjectRetain(v18);
    v81 = v18;
    transfersMonitorTask = v18->transfersMonitorTask;
    do
    {
      v45 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)transfersMonitorTask;
      swift_bridgeObjectRetain(*(_QWORD *)transfersMonitorTask);
      v46 = String._bridgeToObjectiveC()();
      v47 = objc_msgSend(v35, "normalizedHandleWithDestinationID:", v46);
      swift_bridgeObjectRelease(v45, v48, v49, v50, v51, v52, v53, v54);

      if (v47)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v56 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v55 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v56 >= v55 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v47);
        specialized Array._endMutation()(v37);
      }
      transfersMonitorTask += 24;
      --v34;
    }
    while (v34);
    v18 = v81;
    swift_bridgeObjectRelease(v81, v38, v39, v40, v41, v42, v43, v44);
    v33 = v84;
  }
  swift_bridgeObjectRelease(v18, v26, v27, v28, v29, v30, v31, v32);
  if ((unint64_t)v33 >> 62)
  {
LABEL_21:
    if (v33 < 0)
      v72 = v33;
    else
      v72 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v33);
    v64 = _CocoaArrayWrapper.endIndex.getter(v72);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v33, v73, v74, v75, v76, v77, v78, v79);
    if (v64)
      goto LABEL_11;
  }
  else
  {
    v64 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v64)
    {
LABEL_11:
      v65 = 4;
      while (1)
      {
        v66 = v65 - 4;
        if ((v33 & 0xC000000000000001) != 0)
        {
          v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65 - 4, v33);
          v68 = v65 - 3;
          if (__OFADD__(v66, 1))
            goto LABEL_20;
        }
        else
        {
          v67 = *(id *)(v33 + 8 * v65);
          v68 = v65 - 3;
          if (__OFADD__(v66, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        v69 = v67;
        sub_10008ED58(a1, (uint64_t)v69, a2, a3, a4);
        v71 = v70;

        if ((v71 & 1) == 0)
        {
          ++v65;
          if (v68 != v64)
            continue;
        }
        goto LABEL_26;
      }
    }
  }
  v71 = 0;
LABEL_26:
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v33, v57, v58, v59, v60, v61, v62, v63);
  return v71 & 1;
}

uint64_t sub_100085DE0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  char v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  id v36;
  const char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v44;
  unsigned __int8 v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;

  if (objc_msgSend(a1, "state"))
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100009558(v2, (uint64_t)qword_100148040);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v4, v5))
      goto LABEL_23;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Not permitting auto-join of Boop to SharePlay as the conversation is already joined", v6, 2u);
    v7 = v6;
LABEL_22:
    swift_slowDealloc(v7, -1, -1);
LABEL_23:

    return 0;
  }
  v8 = objc_msgSend(a1, "remoteMembers");
  v9 = sub_100018D44(0, &qword_10013BBE0, TUConversationMember_ptr);
  v10 = sub_1000873C0(&qword_10013BBE8, &qword_10013BBE0, TUConversationMember_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v11 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);

  LOBYTE(v8) = sub_100085B60((uint64_t)v11, &qword_10013BBE0, TUConversationMember_ptr, &qword_10013BBE8);
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  if ((v8 & 1) == 0)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v38 = type metadata accessor for Logger(0);
    sub_100009558(v38, (uint64_t)qword_100148040);
    v32 = a1;
    v4 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138412290;
      v48 = v32;
      v39 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      *v35 = v32;

      v37 = "Ignoring conversation which does not match any of the current nearby contacts: %@";
      goto LABEL_21;
    }
LABEL_31:

    return 0;
  }
  v19 = objc_msgSend(a1, "activeRemoteParticipants");
  v20 = sub_100018D44(0, &qword_10013F0A0, TUConversationParticipant_ptr);
  v21 = sub_1000873C0(&qword_10013F0A8, &qword_10013F0A0, TUConversationParticipant_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v22 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v19, v20, v21);

  v23 = sub_100085B60((uint64_t)v22, &qword_10013F0A0, TUConversationParticipant_ptr, &qword_10013F0A8);
  swift_bridgeObjectRelease(v22, v24, v25, v26, v27, v28, v29, v30);
  if ((v23 & 1) == 0)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v40 = type metadata accessor for Logger(0);
    sub_100009558(v40, (uint64_t)qword_100148040);
    v32 = a1;
    v4 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138412290;
      v48 = v32;
      v41 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      *v35 = v32;

      v37 = "Ignoring conversation where the nearby contact is not an active participant: %@";
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  if (objc_msgSend(a1, "avMode"))
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v31 = type metadata accessor for Logger(0);
    sub_100009558(v31, (uint64_t)qword_100148040);
    v32 = a1;
    v4 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138412290;
      v48 = v32;
      v36 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      *v35 = v32;

      v37 = "Not permitting auto-join of Boop to SharePlay as the conversation is no longer AVLess: %@";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v4, v33, v37, v34, 0xCu);
      v42 = sub_100008F88(&qword_10013BC00);
      swift_arrayDestroy(v35, 1, v42);
      swift_slowDealloc(v35, -1, -1);
      v7 = v34;
      goto LABEL_22;
    }
    goto LABEL_31;
  }
  v44 = objc_msgSend(a1, "provider");
  v45 = objc_msgSend(v44, "isDefaultProvider");

  if ((v45 & 1) == 0)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v46 = type metadata accessor for Logger(0);
    sub_100009558(v46, (uint64_t)qword_100148040);
    v32 = a1;
    v4 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138412290;
      v48 = v32;
      v47 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      *v35 = v32;

      v37 = "Not permitting auto-join of Boop to SharePlay as the conversation is not from the default provider: %@";
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  return 1;
}

void sub_100086470(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  const char *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSObject **v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;

  if (qword_10013AD60 != -1)
LABEL_26:
    swift_once(&qword_10013AD60, sub_100092254);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_100148040);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v58 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_100018D44(0, &qword_10013F088, TUConversation_ptr);
    v9 = swift_bridgeObjectRetain(a1);
    v10 = Array.description.getter(v9, v8);
    v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v11;
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a1, v11, v13, v14, v15, v16, v17, v18);
    v57 = sub_10003A834(v10, (unint64_t)v12, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v12, v19, v20, v21, v22, v23, v24, v25);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updating using filtered conversation invitations: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v56 = a1;
    else
      v56 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v26 = _CocoaArrayWrapper.endIndex.getter(v56);
    if (v26)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a1, v27, v28, v29, v30, v31, v32, v33);
    return;
  }
  v26 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v26)
    goto LABEL_22;
LABEL_7:
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_33;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  v34 = *(id *)(a1 + 32);
LABEL_10:
  v35 = v34;
  if ((sub_100085DE0(v34) & 1) == 0)
  {

    if (v26 == 1)
      goto LABEL_22;
    v50 = 5;
    while (1)
    {
      v51 = v50 - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50 - 4, a1);
      }
      else
      {
        if (v51 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_33:
          v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
          goto LABEL_10;
        }
        v52 = *(id *)(a1 + 8 * v50);
      }
      v35 = v52;
      v53 = v50 - 3;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_26;
      }
      if ((sub_100085DE0(v52) & 1) != 0)
        break;

      ++v50;
      if (v53 == v26)
        goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a1, v36, v37, v38, v39, v40, v41, v42);
  v43 = v35;
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v46 = 138412290;
    v58 = v43;
    v48 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    *v47 = v43;

    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Joining SharePlay conversation for nearby sharing interaction: %@", v46, 0xCu);
    v49 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v47, 1, v49);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {

    v44 = v43;
  }

  v54 = objc_msgSend(objc_allocWithZone((Class)TUJoinConversationRequest), "initWithConversation:", v43);
  objc_msgSend(v54, "setAvMode:", 0);
  v55 = objc_msgSend((id)objc_opt_self(TUCallCenter), "sharedInstance");
  objc_msgSend(v55, "launchAppForJoinRequest:", v54);

}

uint64_t *sub_1000869E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100008F88(&qword_10013EF70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_100086AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t sub_100086B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100008F88(&qword_10013EF70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100086C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_100008F88(&qword_10013EF70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_100086D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100008F88(&qword_10013EF70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100086E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_100008F88(&qword_10013EF70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_100086F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100086F8C);
}

uint64_t sub_100086F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100008F88(&qword_10013EF70);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100087004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100087010);
}

uint64_t sub_100087010(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100008F88(&qword_10013EF70);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NearbySharingInteractionAttributes(uint64_t a1)
{
  return sub_1000138D0(a1, (uint64_t *)&unk_10013EFD0, (uint64_t)&nominal type descriptor for NearbySharingInteractionAttributes);
}

void sub_1000870A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100087128(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_100087128(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10013EFE0)
  {
    v2 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10013EFE0);
  }
}

uint64_t sub_10008717C()
{
  return sub_100008694(&qword_10013F010, type metadata accessor for NearbySharingInteractionAttributes, (uint64_t)&unk_1000ED53C);
}

uint64_t sub_1000871A8()
{
  return sub_100008694(&qword_10013F018, type metadata accessor for NearbySharingInteractionAttributes, (uint64_t)&unk_1000ED514);
}

unint64_t sub_1000871D8()
{
  unint64_t result;

  result = qword_10013F020;
  if (!qword_10013F020)
  {
    result = swift_getWitnessTable(&unk_1000ED644, &type metadata for NearbySharingInteractionAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013F020);
  }
  return result;
}

unint64_t sub_100087220()
{
  unint64_t result;

  result = qword_10013F028;
  if (!qword_10013F028)
  {
    result = swift_getWitnessTable(&unk_1000ED61C, &type metadata for NearbySharingInteractionAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013F028);
  }
  return result;
}

unint64_t sub_100087268()
{
  unint64_t result;

  result = qword_10013F030;
  if (!qword_10013F030)
  {
    result = swift_getWitnessTable(&unk_1000ED5B4, &type metadata for NearbySharingInteractionAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013F030);
  }
  return result;
}

unint64_t sub_1000872B0()
{
  unint64_t result;

  result = qword_10013F038;
  if (!qword_10013F038)
  {
    result = swift_getWitnessTable(&unk_1000ED5F4, &type metadata for NearbySharingInteractionAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_10013F038);
  }
  return result;
}

unint64_t sub_1000872F4()
{
  unint64_t result;

  result = qword_10013F048;
  if (!qword_10013F048)
  {
    result = swift_getWitnessTable(&unk_1000ED9D4, &type metadata for NearbySharingInteractionAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013F048);
  }
  return result;
}

unint64_t sub_100087338()
{
  unint64_t result;

  result = qword_10013F058;
  if (!qword_10013F058)
  {
    result = swift_getWitnessTable(&unk_1000ED984, &type metadata for NearbySharingInteractionAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013F058);
  }
  return result;
}

uint64_t sub_10008737C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NearbySharingInteractionAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000873C0(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100018D44(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100087400@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000ED780);
  v5 = swift_getKeyPath(&unk_1000ED7A8);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100087468(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void *v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v18 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13((char *)&v18 - v11, a1, v4);
  v14 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000ED780);
  v16 = swift_getKeyPath(&unk_1000ED7A8);
  v13(v9, (uint64_t)v12, v4);
  static Published.subscript.setter(v9, v14, KeyPath, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
}

uint64_t sub_100087568@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000ED6A8);
  v5 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000875E4(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000ED6A8);
  v5 = swift_getKeyPath(&unk_1000ED6D0);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100087658(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10008778C(a1, a2, a3, a4, &qword_10013F388, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.ItemPromise);
}

char *sub_10008766C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008F88(&qword_10013BCB8);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10008E9FC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100087778(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10008778C(a1, a2, a3, a4, &qword_10013F380, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_10008778C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008F88(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10008E8E4(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

char *sub_100087998(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008F88((uint64_t *)&unk_10013B860);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10008EB74(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_TtC9AirDropUI33AirDropTransferSessionsController *sub_100087AA4(_TtC9AirDropUI33AirDropTransferSessionsController *result, int64_t a2, char a3, _TtC9AirDropUI33AirDropTransferSessionsController *a4, void *a5, void *a6, void *a7, void *a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  size_t v16;
  unsigned __int8 *airDropClient;
  unsigned __int8 *v18;

  v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)a4->airdropClient;
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) >= a2)
    goto LABEL_8;
  if (v11 + 0x4000000000000000 >= 0)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v11 = a2;
LABEL_8:
    v12 = *(_QWORD *)a4->connection;
    if (v11 <= v12)
      v13 = *(_QWORD *)a4->connection;
    else
      v13 = v11;
    if (v13)
    {
      v14 = sub_100008F88(&qword_10013F0B0);
      v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_allocObject(v14, 24 * v13 + 32, 7);
      v16 = j__malloc_size(v15);
      *(_QWORD *)v15->connection = v12;
      *(_QWORD *)v15->airdropClient = 2 * ((uint64_t)(v16 - 32) / 24);
      airDropClient = v15->airDropClient;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        v18 = a4->airDropClient;
        if (v15 != a4 || airDropClient >= &a4->airDropClient[24 * v12])
          memmove(airDropClient, v18, 24 * v12);
        *(_QWORD *)a4->connection = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)_swiftEmptyArrayStorage;
      airDropClient = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10008EC64(0, v12, (unint64_t)airDropClient, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4, (SEL)v18, airDropClient, a4, a5, a6, a7, a8);
    return v15;
  }
  __break(1u);
  return result;
}

void sub_100087BC4(_TtC9AirDropUI33AirDropTransferSessionsController *a1)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v1;
  uint64_t v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  int64_t v4;
  int64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *isUniquelyReferenced_nonNull_native;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int64_t v21;
  char v22;

  v2 = *(_QWORD *)a1->connection;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1)->connection;
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)v3->airdropClient >> 1)
  {
    if (*(_QWORD *)a1->connection)
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v21 = v4 + v2;
  else
    v21 = v4;
  v3 = sub_100087AA4(isUniquelyReferenced_nonNull_native, v21, 1, v3, v11, v12, v13, v14);
  if (!*(_QWORD *)a1->connection)
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v15 = *(_QWORD *)v3->connection;
  if ((*(_QWORD *)v3->airdropClient >> 1) - v15 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = (unint64_t)&v3->airDropClient[24 * v15];
  if ((unint64_t)a1->airDropClient < v16 + 24 * v2 && v16 < (unint64_t)&a1->airDropClient[24 * v2])
    goto LABEL_24;
  swift_arrayInitWithCopy(v16);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1, v8, v9, v10, v11, v12, v13, v14);
    *v1 = v3;
    return;
  }
  v18 = *(_QWORD *)v3->connection;
  v19 = __OFADD__(v18, v2);
  v20 = v18 + v2;
  if (!v19)
  {
    *(_QWORD *)v3->connection = v20;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v22 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v22, 1092, 0);
  __break(1u);
}

uint64_t sub_100087D1C(uint64_t result)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v1;
  int64_t v2;
  uint64_t v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _TtC9AirDropUI33AirDropTransferSessionsController *isUniquelyReferenced_nonNull_native;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;

  v3 = *(_QWORD *)(result + 16);
  v4 = *v1;
  v5 = *(_QWORD *)(*v1)->connection;
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_TtC9AirDropUI33AirDropTransferSessionsController *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v13 = *(_QWORD *)v4->airdropClient >> 1, v13 < v6))
  {
    if (v5 <= v6)
      v14 = v5 + v3;
    else
      v14 = v5;
    v4 = sub_100087AA4(isUniquelyReferenced_nonNull_native, v14, 1, v4, v9, v10, v11, v12);
    v13 = *(_QWORD *)v4->airdropClient >> 1;
  }
  v15 = *(_QWORD *)v4->connection;
  v16 = v13 - v15;
  result = sub_10008E6C0((uint64_t)v66, (uint64_t)&v4->airDropClient[24 * v15], v13 - v15, v7);
  if (result < v3)
    goto LABEL_16;
  if (result)
  {
    v19 = *(_QWORD *)v4->connection;
    v20 = __OFADD__(v19, result);
    v21 = v19 + result;
    if (v20)
    {
      __break(1u);
      goto LABEL_67;
    }
    *(_QWORD *)v4->connection = v21;
  }
  if (result != v16)
  {
    v22 = v66[0];
LABEL_14:
    result = sub_100028460(v22);
    *v1 = v4;
    return result;
  }
LABEL_17:
  v2 = *(_QWORD *)v4->connection;
  v63 = v66[0];
  v18 = v67;
  v62 = v66[1];
  v17 = v68;
  if (v69)
  {
    v23 = (v69 - 1) & v69;
    v65 = v68;
    v24 = __clz(__rbit64(v69)) | (v68 << 6);
    v61 = (unint64_t)(v67 + 64) >> 6;
    goto LABEL_19;
  }
LABEL_67:
  v57 = v17 + 1;
  if (__OFADD__(v17, 1))
    goto LABEL_84;
  v61 = (unint64_t)(v18 + 64) >> 6;
  if (v57 >= v61)
    goto LABEL_65;
  v58 = *(_QWORD *)(v62 + 8 * v57);
  v59 = v17 + 1;
  if (!v58)
  {
    v59 = v17 + 2;
    if (v17 + 2 < v61)
    {
      v58 = *(_QWORD *)(v62 + 8 * v59);
      if (v58)
        goto LABEL_70;
      v59 = v17 + 3;
      if (v17 + 3 < v61)
      {
        v58 = *(_QWORD *)(v62 + 8 * v59);
        if (v58)
          goto LABEL_70;
        v59 = v17 + 4;
        if (v17 + 4 < v61)
        {
          v58 = *(_QWORD *)(v62 + 8 * v59);
          if (v58)
            goto LABEL_70;
          v59 = v17 + 5;
          if (v17 + 5 < v61)
          {
            v58 = *(_QWORD *)(v62 + 8 * v59);
            if (!v58)
            {
              v60 = v17 + 6;
              do
              {
                if (v61 == v60)
                  goto LABEL_65;
                v58 = *(_QWORD *)(v62 + 8 * v60++);
              }
              while (!v58);
              v59 = v60 - 1;
            }
            goto LABEL_70;
          }
        }
      }
    }
LABEL_65:
    v22 = v63;
    goto LABEL_14;
  }
LABEL_70:
  v23 = (v58 - 1) & v58;
  v24 = __clz(__rbit64(v58)) + (v59 << 6);
  v65 = v59;
LABEL_19:
  v25 = *(_QWORD *)(v63 + 48) + 24 * v24;
  v26 = *(_QWORD *)v25;
  v27 = *(_QWORD *)(v25 + 8);
  v28 = *(unsigned __int8 *)(v25 + 16);
  v29 = *(unsigned __int8 *)(v25 + 17);
  v30 = *(unsigned __int8 *)(v25 + 18);
  v31 = *(unsigned __int8 *)(v25 + 19);
  if (v29)
    v32 = 256;
  else
    v32 = 0;
  v33 = v32 | v28;
  if (v30)
    v34 = 0x10000;
  else
    v34 = 0;
  if (v31)
    v35 = 0x1000000;
  else
    v35 = 0;
  v36 = v33 | v34 | v35;
  result = swift_bridgeObjectRetain(v27);
  while (1)
  {
    v44 = *(_QWORD *)v4->airdropClient;
    v64 = v44 >> 1;
    if ((uint64_t)(v44 >> 1) < v2 + 1)
    {
      result = (uint64_t)sub_100087AA4((_TtC9AirDropUI33AirDropTransferSessionsController *)(v44 > 1), v2 + 1, 1, v4, v37, v38, v39, v40);
      v4 = (_TtC9AirDropUI33AirDropTransferSessionsController *)result;
      v64 = *(_QWORD *)(result + 24) >> 1;
    }
    if (v2 < v64)
      break;
LABEL_39:
    *(_QWORD *)v4->connection = v2;
  }
  v45 = (v36 >> 8) & 1;
  LOBYTE(v46) = v36 & 1;
  v47 = HIWORD(v36) & 1;
  v48 = HIBYTE(v36) & 1;
  while (1)
  {
    v49 = (uint64_t)&v4->airDropClient[24 * v2];
    *(_QWORD *)v49 = v26;
    *(_QWORD *)(v49 + 8) = v27;
    *(_BYTE *)(v49 + 16) = v46 & 1;
    *(_BYTE *)(v49 + 17) = v45 & 1;
    *(_BYTE *)(v49 + 18) = v47 & 1;
    *(_BYTE *)(v49 + 19) = v48 & 1;
    ++v2;
    if (v23)
    {
      v50 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v51 = v50 | (v65 << 6);
      goto LABEL_62;
    }
    v52 = v65 + 1;
    if (__OFADD__(v65, 1))
      break;
    if (v52 >= v61)
      goto LABEL_64;
    v53 = *(_QWORD *)(v62 + 8 * v52);
    v54 = v65 + 1;
    if (!v53)
    {
      v54 = v65 + 2;
      if (v65 + 2 >= v61)
        goto LABEL_64;
      v53 = *(_QWORD *)(v62 + 8 * v54);
      if (!v53)
      {
        v54 = v65 + 3;
        if (v65 + 3 >= v61)
          goto LABEL_64;
        v53 = *(_QWORD *)(v62 + 8 * v54);
        if (!v53)
        {
          v54 = v65 + 4;
          if (v65 + 4 >= v61)
            goto LABEL_64;
          v53 = *(_QWORD *)(v62 + 8 * v54);
          if (!v53)
          {
            v54 = v65 + 5;
            if (v65 + 5 >= v61)
              goto LABEL_64;
            v53 = *(_QWORD *)(v62 + 8 * v54);
            if (!v53)
            {
              v55 = v65 + 6;
              while (v61 != v55)
              {
                v53 = *(_QWORD *)(v62 + 8 * v55++);
                if (v53)
                {
                  v54 = v55 - 1;
                  goto LABEL_61;
                }
              }
LABEL_64:
              *(_QWORD *)v4->connection = v2;
              goto LABEL_65;
            }
          }
        }
      }
    }
LABEL_61:
    v23 = (v53 - 1) & v53;
    v51 = __clz(__rbit64(v53)) + (v54 << 6);
    v65 = v54;
LABEL_62:
    v56 = *(_QWORD *)(v63 + 48) + 24 * v51;
    v26 = *(_QWORD *)v56;
    v27 = *(_QWORD *)(v56 + 8);
    v46 = *(unsigned __int8 *)(v56 + 16);
    v45 = *(unsigned __int8 *)(v56 + 17);
    v47 = *(unsigned __int8 *)(v56 + 18);
    LOBYTE(v48) = *(_BYTE *)(v56 + 19);
    if (v2 >= v64)
    {
      if (*(_BYTE *)(v56 + 19))
        v41 = 0x1000000;
      else
        v41 = 0;
      if (v47)
        v42 = 0x10000;
      else
        v42 = 0;
      if (v45)
        v43 = 256;
      else
        v43 = 0;
      v36 = v43 | v46 | v42 | v41;
      result = swift_bridgeObjectRetain(v27);
      goto LABEL_39;
    }
    result = swift_bridgeObjectRetain(v27);
  }
  __break(1u);
LABEL_84:
  __break(1u);
  return result;
}

