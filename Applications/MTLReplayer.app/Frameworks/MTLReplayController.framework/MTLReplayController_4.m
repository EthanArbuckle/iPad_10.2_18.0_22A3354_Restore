uint64_t AccelerationStructureViewer::DataSourceQueryRequest_StrongRef::decode(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __int16 v6;

  result = 1;
  switch(a3)
  {
    case 23:
      if (a4 != 8)
        return 0;
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_18;
      a1[1] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_21;
    case 24:
      if (a4 != 8)
        return 0;
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_18;
      a1[3] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_21;
    case 25:
      if (a4 != 8)
        return 0;
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_18;
      a1[4] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_21;
    case 26:
      v6 = 12;
      a1[5] = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v6);
      return 1;
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return result;
    case 32:
      if (a4 != 8)
        return 0;
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_18;
      a1[6] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_21;
    default:
      if (a3 != 3)
        return result;
      if (a4 != 8)
        return 0;
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      {
LABEL_18:
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
      }
      else
      {
        a1[2] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_21:
        *(_QWORD *)a2 += 8;
      }
      return result;
  }
}

void AccelerationStructureViewer::FilterToken::~FilterToken(id *this)
{

}

{

  operator delete();
}

uint64_t AccelerationStructureViewer::FilterToken::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 13);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 22, *(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 2, 2, a1 + 10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 27, 2, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

BOOL AccelerationStructureViewer::FilterToken::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _WORD *v5;
  _BOOL8 result;

  if (a3 == 2)
  {
    if (a4 != 2)
      return 0;
    v4 = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)a2 + 2) <= *(_QWORD *)(a2 + 16))
    {
      v5 = (_WORD *)(a1 + 10);
      goto LABEL_14;
    }
LABEL_11:
    result = 0;
    *(_BYTE *)(a2 + 24) = 1;
    return result;
  }
  if (a3 != 27)
    return a3 != 22
        || (AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 16), a4) & 1) != 0;
  if (a4 != 2)
    return 0;
  v4 = *(_QWORD *)a2;
  if ((unint64_t)(*(_QWORD *)a2 + 2) > *(_QWORD *)(a2 + 16))
    goto LABEL_11;
  v5 = (_WORD *)(a1 + 8);
LABEL_14:
  *v5 = *(_WORD *)(*(_QWORD *)(a2 + 8) + v4);
  *(_QWORD *)a2 += 2;
  return 1;
}

uint64_t AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString(uint64_t *a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL8 v6;
  uint64_t v9;
  size_t v10;
  void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *__dst[3];

  v4 = *a1;
  v5 = a1[2];
  if (*a1 + a3 <= v5 && v4 + 8 <= v5)
  {
    v9 = *(_QWORD *)(a1[1] + v4);
    *a1 = v4 + 8;
    v10 = a3 - 8;
    if (a3 != 8)
    {
      memset(__dst, 0, sizeof(__dst));
      std::vector<unsigned char>::__append((unint64_t *)__dst, a3 - 8);
      v12 = a1[2];
      v13 = *a1 + v10;
      v6 = v13 <= v12;
      if (v13 > v12)
      {
        *((_BYTE *)a1 + 24) = 1;
        v14 = __dst[0];
        if (!__dst[0])
          return v6;
      }
      else
      {
        v14 = __dst[0];
        memcpy(__dst[0], (const void *)(a1[1] + *a1), v10);
        *a1 += v10;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v14, v10));
        v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v15, v9);
        v17 = *a2;
        *a2 = v16;

        if (!v14)
          return v6;
      }
      operator delete(v14);
      return v6;
    }
    v11 = *a2;
    *a2 = &stru_7282A8;

    return 1;
  }
  else
  {
    v6 = 0;
    *((_BYTE *)a1 + 24) = 1;
  }
  return v6;
}

void sub_1B715C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void AccelerationStructureViewer::Filter::encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (**v14)(AccelerationStructureViewer::DataSourceArray *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 2, 1, a1 + 8);
  v14 = off_7241B0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != *(_QWORD *)(a1 + 24))
  {
    v5 = 0;
    do
    {
      if ((unint64_t)v5 >= (unint64_t)v16)
      {
        v6 = (uint64_t)((uint64_t)v5 - v15) >> 3;
        if ((unint64_t)(v6 + 1) >> 61)
          abort();
        v7 = (uint64_t)(v16 - v15) >> 2;
        if (v7 <= v6 + 1)
          v7 = v6 + 1;
        if ((_QWORD)v16 - (_QWORD)v15 >= 0x7FFFFFFFFFFFFFF8uLL)
          v8 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v8 = v7;
        if (v8)
          v8 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v8);
        else
          v9 = 0;
        v10 = (_QWORD *)(v8 + 8 * v6);
        *v10 = v4;
        v5 = v10 + 1;
        v11 = (char *)*((_QWORD *)&v15 + 1);
        v12 = (char *)v15;
        if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
        {
          do
          {
            v13 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v10 = v13;
          }
          while (v11 != v12);
          v11 = (char *)v15;
        }
        *(_QWORD *)&v15 = v10;
        *(_QWORD *)&v16 = v8 + 8 * v9;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v5++ = v4;
      }
      *((_QWORD *)&v15 + 1) = v5;
      v4 += 24;
    }
    while (v4 != *(_QWORD *)(a1 + 24));
  }
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::DataSourceArray *__hidden)))(*(_QWORD *)a2 + 40))(a2, 21, &v14);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v14);
}

void sub_1B735C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)va);
  _Unwind_Resume(a1);
}

uint64_t AccelerationStructureViewer::Filter::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (***v29)(char *);
  void (**v30)(char *);
  BOOL v31;
  __int16 v32;

  if (a3 == 21)
  {
    v32 = 0;
    v6 = (_QWORD *)AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v32);
    v7 = v6;
    if (!v6 || v32)
    {
      if (v6)
        (*(void (**)(_QWORD *))(*v6 + 8))(v6);
      return 0;
    }
    v9 = (uint64_t *)v6[1];
    for (i = (uint64_t *)v6[2]; v9 != i; ++v9)
    {
      if (*(_WORD *)(v7[4] + (((uint64_t)v9 - v7[1]) >> 2)) == 13)
      {
        v10 = *v9;
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(_QWORD *)(a1 + 32);
        if (v12 >= v11)
        {
          v14 = *(_QWORD *)(a1 + 16);
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
          v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x555555555555555)
            v18 = 0xAAAAAAAAAAAAAAALL;
          else
            v18 = v16;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v18);
          else
            v19 = 0;
          v20 = v18 + 24 * v15;
          v21 = v18 + 24 * v19;
          *(_QWORD *)v20 = off_7277C8;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v10 + 8);
          *(_QWORD *)(v20 + 16) = *(id *)(v10 + 16);
          v13 = v20 + 24;
          v22 = *(char **)(a1 + 16);
          v23 = *(char **)(a1 + 24);
          if (v23 == v22)
          {
            *(_QWORD *)(a1 + 16) = v20;
            *(_QWORD *)(a1 + 24) = v13;
            *(_QWORD *)(a1 + 32) = v21;
          }
          else
          {
            v24 = 0;
            do
            {
              v25 = v20 + v24;
              *(_QWORD *)(v25 - 24) = off_7277C8;
              *(_DWORD *)(v25 - 16) = *(_DWORD *)&v23[v24 - 16];
              v26 = *(_QWORD *)&v23[v24 - 8];
              *(_QWORD *)&v23[v24 - 8] = 0;
              *(_QWORD *)(v25 - 8) = v26;
              v24 -= 24;
            }
            while (&v23[v24] != v22);
            v23 = *(char **)(a1 + 16);
            v27 = *(char **)(a1 + 24);
            *(_QWORD *)(a1 + 16) = v20 + v24;
            *(_QWORD *)(a1 + 24) = v13;
            *(_QWORD *)(a1 + 32) = v21;
            if (v27 == v23)
            {
              v23 = v27;
            }
            else
            {
              v28 = v27 - 24;
              v29 = (void (***)(char *))(v27 - 24);
              do
              {
                v30 = *v29;
                v29 -= 3;
                (*v30)(v28);
                v31 = v28 == v23;
                v28 = (char *)v29;
              }
              while (!v31);
            }
          }
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v12 = off_7277C8;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v10 + 8);
          *(_QWORD *)(v12 + 16) = *(id *)(v10 + 16);
          v13 = v12 + 24;
        }
        *(_QWORD *)(a1 + 24) = v13;
        i = (uint64_t *)v7[2];
      }
    }
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  else if (a3 == 2)
  {
    if (a4 == 1)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 1) > *(_QWORD *)(a2 + 16))
      {
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(*(_QWORD *)(a2 + 8) + (*(_QWORD *)a2)++);
      return 1;
    }
    return 0;
  }
  return 1;
}

void sub_1B7614(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::Property::~Property(id *this)
{
  void **v2;

  *this = off_7274A8;
  v2 = this + 12;
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v2);

}

{
  void **v2;

  *this = off_7274A8;
  v2 = this + 12;
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v2);

  operator delete();
}

uint64_t AccelerationStructureViewer::Property::encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 2, 2, a1 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 19, 1, a1 + 10);
  switch(*(_BYTE *)(a1 + 10))
  {
    case 0:
      if (*(_QWORD *)(a1 + 16))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 20);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    case 1:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 20, 8, a1 + 32);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    case 2:
      v4 = a1 + 24;
      goto LABEL_13;
    case 3:
      v11 = *(_BYTE *)(a1 + 40);
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, 20, 1, &v11);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    case 4:
    case 7:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100000, 4, a1 + 44);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100001, 4, a1 + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100002, 4, a1 + 52);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100003, 4, a1 + 56);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100004, 4, a1 + 60);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100005, 4, a1 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100006, 4, a1 + 68);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100007, 4, a1 + 72);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100008, 4, a1 + 76);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100009, 4, a1 + 80);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100010, 4, a1 + 84);
      v4 = a1 + 88;
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24);
      v6 = 100011;
      goto LABEL_15;
    case 5:
      v7 = *(_QWORD *)(a1 + 96);
      if (*(_QWORD *)(a1 + 104) != v7)
      {
        v8 = 0;
        do
        {
          (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, v8 + 100000, *(_QWORD *)(v7 + 8 * v8));
          ++v8;
          v7 = *(_QWORD *)(a1 + 96);
        }
        while (v8 < (*(_QWORD *)(a1 + 104) - v7) >> 3);
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    case 6:
      v4 = a1 + 92;
LABEL_13:
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24);
      v9 = a2;
      v6 = 20;
      goto LABEL_16;
    case 8:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100000, 4, a1 + 44);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 100001, 4, a1 + 48);
      v4 = a1 + 52;
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24);
      v6 = 100002;
LABEL_15:
      v9 = a2;
LABEL_16:
      v5(v9, v6, 4, v4);
      break;
    default:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::Property::decode(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  uint64_t v36;

  if (a3 >> 5 < 0xC35)
  {
    switch(a3)
    {
      case 0x14uLL:
        switch(*(_BYTE *)(a1 + 10))
        {
          case 0:
            return (AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 16), a4) & 1) != 0;
          case 1:
            if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
              goto LABEL_17;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
            v9 = *(_QWORD *)a2 + 8;
            goto LABEL_30;
          case 2:
            if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
              goto LABEL_17;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
            goto LABEL_7;
          case 3:
            v30 = *(_QWORD *)a2 + 1;
            if (v30 > *(_QWORD *)(a2 + 16))
              goto LABEL_17;
            v31 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
            *(_QWORD *)a2 = v30;
            *(_BYTE *)(a1 + 40) = v31 != 0;
            return 1;
          case 6:
            if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
              goto LABEL_17;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
            goto LABEL_7;
          default:
            return 1;
        }
      case 0x13uLL:
        if ((unint64_t)(*(_QWORD *)a2 + 1) > *(_QWORD *)(a2 + 16))
          goto LABEL_17;
        *(_BYTE *)(a1 + 10) = *(_BYTE *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        v9 = *(_QWORD *)a2 + 1;
        break;
      case 2uLL:
        if ((unint64_t)(*(_QWORD *)a2 + 2) > *(_QWORD *)(a2 + 16))
          goto LABEL_17;
        *(_WORD *)(a1 + 8) = *(_WORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        v9 = *(_QWORD *)a2 + 2;
        break;
      default:
        return 1;
    }
LABEL_30:
    *(_QWORD *)a2 = v9;
    return 1;
  }
  v7 = a3 - 100000;
  v8 = *(unsigned __int8 *)(a1 + 10);
  if ((v8 - 7) < 2)
    goto LABEL_5;
  if (v8 != 5)
  {
    if (v8 == 4)
    {
LABEL_5:
      if ((unint64_t)(*(_QWORD *)a2 + 4) <= *(_QWORD *)(a2 + 16))
      {
        *(_DWORD *)(a1 + 4 * v7 + 44) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_7:
        v9 = *(_QWORD *)a2 + 4;
        goto LABEL_30;
      }
LABEL_17:
      result = 0;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    return 1;
  }
  v11 = a3 - 99999;
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = (v13 - v12) >> 3;
  if (a3 - 99999 <= v14)
  {
    if (v11 < v14)
    {
      v28 = v12 + 8 * v11;
      while (v13 != v28)
      {
        v29 = *(void **)(v13 - 8);
        v13 -= 8;

      }
      *(_QWORD *)(a1 + 104) = v28;
    }
  }
  else
  {
    v15 = v11 - v14;
    v16 = *(_QWORD *)(a1 + 112);
    if (v11 - v14 <= (v16 - v13) >> 3)
    {
      bzero(*(void **)(a1 + 104), 8 * v15);
      *(_QWORD *)(a1 + 104) = v13 + 8 * v15;
    }
    else
    {
      if (v11 >> 61)
        abort();
      v36 = a1 + 112;
      v17 = v16 - v12;
      if (v17 >> 2 > v11)
        v11 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v11;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v18);
      v20 = &v19[8 * v14];
      v22 = &v19[8 * v21];
      v35 = v22;
      bzero(v20, 8 * v15);
      v23 = &v20[8 * v15];
      v34.i64[1] = (uint64_t)v23;
      v25 = *(_QWORD **)(a1 + 96);
      v24 = *(_QWORD **)(a1 + 104);
      if (v24 == v25)
      {
        v27 = vdupq_n_s64((unint64_t)v24);
      }
      else
      {
        do
        {
          v26 = *--v24;
          *v24 = 0;
          *((_QWORD *)v20 - 1) = v26;
          v20 -= 8;
        }
        while (v24 != v25);
        v27 = *(int64x2_t *)(a1 + 96);
        v23 = (char *)v34.i64[1];
        v22 = v35;
      }
      *(_QWORD *)(a1 + 96) = v20;
      *(_QWORD *)(a1 + 104) = v23;
      v34 = v27;
      v32 = *(char **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v22;
      v35 = v32;
      v33 = v27.i64[0];
      std::__split_buffer<NSString * {__strong}>::~__split_buffer((uint64_t)&v33);
    }
  }
  result = AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(*(_QWORD *)(a1 + 96) + 8 * v7), a4);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t std::__split_buffer<NSString * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AccelerationStructureViewer::DataSourceError_StrongRef::~DataSourceError_StrongRef(AccelerationStructureViewer::DataSourceError_StrongRef *this)
{
  AccelerationStructureViewer::DataSourceError_StrongRef::~DataSourceError_StrongRef(this);
  operator delete();
}

{
  uint64_t v2;

  *(_QWORD *)this = off_724258;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

}

uint64_t AccelerationStructureViewer::DataSourceError::encode(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 10);
  v7 = objc_msgSend(*(id *)(a1 + 8), "code");
  (*(void (**)(uint64_t, uint64_t, uint64_t, id *))(*(_QWORD *)a2 + 24))(a2, 15, 8, &v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "domain"));
  (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a2 + 32))(a2, 16, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "localizedDescription"));
  (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a2 + 32))(a2, 17, v5);

  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 100000);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

void sub_1B7ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AccelerationStructureViewer::DataSourceError_StrongRef::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a3 <= 16)
  {
    if (a3 == 15)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      {
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      *(_QWORD *)a2 += 8;
    }
    else if (a3 == 16
           && (AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 40), a4) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  if (a3 != 17)
  {
    if (a3 == 100000)
      *(_QWORD *)(a1 + 16) = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, (_WORD *)(a1 + 24));
    return 1;
  }
  result = AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 48), a4);
  if ((_DWORD)result)
    return 1;
  return result;
}

void AccelerationStructureViewer::DataSourceError_StrongRef::finish(AccelerationStructureViewer::DataSourceError_StrongRef *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSErrorUserInfoKey v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *((_QWORD *)this + 6);
    v8 = NSLocalizedDescriptionKey;
    v9 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    v6 = objc_claimAutoreleasedReturnValue(+[ASVError errorWithDomain:code:userInfo:](ASVError, "errorWithDomain:code:userInfo:", v1, v3, v5));
    v7 = (void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v6;

  }
}

void sub_1B8090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::CurveGeometry::~CurveGeometry(id *this)
{
  AccelerationStructureViewer::Geometry::~Geometry(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::CurveGeometry::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 22);
  AccelerationStructureViewer::Geometry::encode(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::Geometry::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if (a3 <= 17)
  {
    switch(a3)
    {
      case 1:
        return (AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 48), a4) & 1) != 0;
      case 2:
        v10 = *(_QWORD *)a2 + 2;
        if (v10 > *(_QWORD *)(a2 + 16))
          goto LABEL_44;
        v11 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        *(_QWORD *)a2 = v10;
        *(_DWORD *)(a1 + 32) = v11;
        return 1;
      case 3:
        if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
          goto LABEL_44;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        goto LABEL_15;
      case 6:
        v8 = *(_QWORD *)a2 + 1;
        if (v8 > *(_QWORD *)(a2 + 16))
          goto LABEL_44;
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        *(_QWORD *)a2 = v8;
        *(_BYTE *)(a1 + 56) = v9 == 1;
        return 1;
      case 7:
        if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
          goto LABEL_44;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_15:
        v7 = *(_QWORD *)a2 + 8;
        goto LABEL_53;
      case 11:
        if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
          goto LABEL_44;
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        goto LABEL_52;
      default:
        return 1;
    }
  }
  switch(a3)
  {
    case 18:
      v28 = 0;
      v12 = (_QWORD *)AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v28);
      v13 = v12;
      if (v12 && !v28)
      {
        v15 = (uint64_t *)v12[1];
        v14 = (uint64_t *)v12[2];
        if (v15 != v14)
        {
          v16 = (_QWORD *)(a1 + 104);
          v17 = (uint64_t *)v12[1];
          do
          {
            if (*(_WORD *)(v13[4] + (((uint64_t)v15 - v13[1]) >> 2)) == 11)
            {
              v18 = *v17;
              v20 = *(_QWORD *)(a1 + 112);
              v19 = *(_QWORD *)(a1 + 120);
              if (v20 >= v19)
              {
                v22 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v20 - *v16) >> 3);
                v23 = v22 + 1;
                if (v22 + 1 > 0x222222222222222)
                  abort();
                v24 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v19 - *v16) >> 3);
                if (2 * v24 > v23)
                  v23 = 2 * v24;
                if (v24 >= 0x111111111111111)
                  v25 = 0x222222222222222;
                else
                  v25 = v23;
                v33 = a1 + 120;
                if (v25)
                  v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v25);
                else
                  v26 = 0;
                v29 = v25;
                v30 = v25 + 120 * v22;
                v31 = v30;
                v32 = v25 + 120 * v26;
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(v30, v18);
                v31 += 120;
                std::vector<AccelerationStructureViewer::Property>::__swap_out_circular_buffer((uint64_t *)(a1 + 104), &v29);
                v21 = *(_QWORD *)(a1 + 112);
                std::__split_buffer<AccelerationStructureViewer::Property>::~__split_buffer((uint64_t)&v29);
              }
              else
              {
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(*(_QWORD *)(a1 + 112), *v17);
                v21 = v20 + 120;
                *(_QWORD *)(a1 + 112) = v20 + 120;
              }
              *(_QWORD *)(a1 + 112) = v21;
              v14 = (uint64_t *)v13[2];
            }
            ++v17;
            ++v15;
          }
          while (v17 != v14);
        }
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        return 1;
      }
      if (!v12)
        return 0;
      v27 = *(void (**)(void))(*v12 + 8);
LABEL_49:
      v27();
      return 0;
    case 31:
      if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
      {
LABEL_44:
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_52:
      v7 = *(_QWORD *)a2 + 4;
LABEL_53:
      *(_QWORD *)a2 = v7;
      return 1;
    case 28:
      LOWORD(v29) = 0;
      result = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v29);
      if (result && (unsigned __int16)v29 == 15)
      {
        v6 = *(_OWORD *)(result + 8);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(result + 24);
        *(_OWORD *)(a1 + 80) = v6;
        (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        return 1;
      }
      if (!result)
        return result;
      v27 = *(void (**)(void))(*(_QWORD *)result + 8);
      goto LABEL_49;
  }
  return 1;
}

void sub_1B84EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::Geometry::encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (**v14)(AccelerationStructureViewer::DataSourceArray *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void (**v18)(AccelerationStructureViewer::BoundingBox *__hidden);
  __int128 v19;
  uint64_t v20;
  char v21;
  __int16 v22;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 1, *(_QWORD *)(a1 + 48));
  v22 = *(_DWORD *)(a1 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)a2 + 24))(a2, 2, 2, &v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 11, 4, a1 + 60);
  v21 = *(_BYTE *)(a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, 6, 1, &v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 7, 8, a1 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, 8, a1 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 31, 4, a1 + 64);
  v18 = off_724418;
  v19 = *(_OWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 96);
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::BoundingBox *__hidden)))(*(_QWORD *)a2 + 40))(a2, 28, &v18);
  v14 = off_7241B0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = *(_QWORD *)(a1 + 104);
  if (v4 != *(_QWORD *)(a1 + 112))
  {
    v5 = 0;
    do
    {
      if ((unint64_t)v5 >= (unint64_t)v16)
      {
        v6 = (uint64_t)((uint64_t)v5 - v15) >> 3;
        if ((unint64_t)(v6 + 1) >> 61)
          abort();
        v7 = (uint64_t)(v16 - v15) >> 2;
        if (v7 <= v6 + 1)
          v7 = v6 + 1;
        if ((_QWORD)v16 - (_QWORD)v15 >= 0x7FFFFFFFFFFFFFF8uLL)
          v8 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v8 = v7;
        if (v8)
          v8 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v8);
        else
          v9 = 0;
        v10 = (_QWORD *)(v8 + 8 * v6);
        *v10 = v4;
        v5 = v10 + 1;
        v11 = (char *)*((_QWORD *)&v15 + 1);
        v12 = (char *)v15;
        if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
        {
          do
          {
            v13 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v10 = v13;
          }
          while (v11 != v12);
          v11 = (char *)v15;
        }
        *(_QWORD *)&v15 = v10;
        *((_QWORD *)&v15 + 1) = v5;
        *(_QWORD *)&v16 = v8 + 8 * v9;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v5++ = v4;
      }
      *((_QWORD *)&v15 + 1) = v5;
      v4 += 120;
    }
    while (v4 != *(_QWORD *)(a1 + 112));
  }
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::DataSourceArray *__hidden)))(*(_QWORD *)a2 + 40))(a2, 18, &v14);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v14);
}

void sub_1B876C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&a9);
  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::Geometry::~Geometry(id *this)
{
  void **v2;

  *this = off_724488;
  v2 = this + 13;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);

  v2 = this + 1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  AccelerationStructureViewer::Geometry::~Geometry(this);
  operator delete();
}

void AccelerationStructureViewer::BoundingBoxGeometry::~BoundingBoxGeometry(id *this)
{
  AccelerationStructureViewer::Geometry::~Geometry(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::BoundingBoxGeometry::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 9);
  AccelerationStructureViewer::Geometry::encode(a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 8, 8, a1 + 128);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::BoundingBoxGeometry::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = AccelerationStructureViewer::Geometry::decode(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (a3 == 8)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      {
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      *(_QWORD *)a2 += 8;
    }
    return 1;
  }
  return result;
}

void AccelerationStructureViewer::TriangleGeometry::~TriangleGeometry(id *this)
{
  AccelerationStructureViewer::Geometry::~Geometry(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::TriangleGeometry::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 8);
  AccelerationStructureViewer::Geometry::encode(a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 9, 8, a1 + 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 10, 8, a1 + 136);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::TriangleGeometry::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = AccelerationStructureViewer::Geometry::decode(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (a3 == 10)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 8) <= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
        goto LABEL_9;
      }
    }
    else
    {
      if (a3 != 9)
        return 1;
      if ((unint64_t)(*(_QWORD *)a2 + 8) <= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_9:
        *(_QWORD *)a2 += 8;
        return 1;
      }
    }
    result = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

void AccelerationStructureViewer::InvalidGeometry::~InvalidGeometry(id *this)
{
  AccelerationStructureViewer::Geometry::~Geometry(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::InvalidGeometry::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 7);
  AccelerationStructureViewer::Geometry::encode(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

void AccelerationStructureViewer::IntersectionFunction::encode(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  void (**v21)(AccelerationStructureViewer::DataSourceArray *__hidden);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void (**v25)(AccelerationStructureViewer::BoundingBox *__hidden);
  __int128 v26;
  uint64_t v27;
  char v28;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 6);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 1, *(_QWORD *)(a1 + 32));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, 8, a1 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 4, 8, a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 5, 8, a1 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 13, 4, a1 + 76);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 7, 8, a1 + 40);
  if (*(_BYTE *)(a1 + 73))
    v4 = 2;
  else
    v4 = 1;
  v28 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, 29, 1, &v28);
  if (*(_BYTE *)(a1 + 74))
    v5 = 2;
  else
    v5 = 1;
  v28 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, 6, 1, &v28);
  if (*(_BYTE *)(a1 + 72))
    v6 = 2;
  else
    v6 = 1;
  v28 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, 30, 1, &v28);
  v25 = off_724418;
  v26 = *(_OWORD *)(a1 + 104);
  v27 = *(_QWORD *)(a1 + 120);
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::BoundingBox *__hidden)))(*(_QWORD *)a2 + 40))(a2, 28, &v25);
  v21 = off_7241B0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = *(_QWORD *)(a1 + 128);
  if (v7 != *(_QWORD *)(a1 + 136))
  {
    v8 = 0;
    do
    {
      if ((unint64_t)v8 >= (unint64_t)v23)
      {
        v9 = (uint64_t)((uint64_t)v8 - v22) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          abort();
        v10 = (uint64_t)(v23 - v22) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((_QWORD)v23 - (_QWORD)v22 >= 0x7FFFFFFFFFFFFFF8uLL)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v11);
        else
          v12 = 0;
        v13 = (_QWORD *)(v11 + 8 * v9);
        *v13 = v7;
        v8 = v13 + 1;
        v14 = (char *)*((_QWORD *)&v22 + 1);
        v15 = (char *)v22;
        if (*((_QWORD *)&v22 + 1) != (_QWORD)v22)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)v22;
        }
        *(_QWORD *)&v22 = v13;
        *((_QWORD *)&v22 + 1) = v8;
        *(_QWORD *)&v23 = v11 + 8 * v12;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v8++ = v7;
      }
      *((_QWORD *)&v22 + 1) = v8;
      v7 += 120;
    }
    while (v7 != *(_QWORD *)(a1 + 136));
  }
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::DataSourceArray *__hidden)))(*(_QWORD *)a2 + 40))(a2, 18, &v21);
  v20 = (*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)a2 + 24))(a2, 0, 4, &v20);
  v17 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v17)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v19 + 100000, 4, v17 + v18);
      ++v19;
      v17 = *(_QWORD *)(a1 + 80);
      v18 += 4;
    }
    while (v19 < (*(_QWORD *)(a1 + 88) - v17) >> 2);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v21);
}

void sub_1B8EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)va);
  _Unwind_Resume(a1);
}

BOOL AccelerationStructureViewer::IntersectionFunction::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  std::vector<unsigned int>::size_type v8;
  void **v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  __int16 v19;

  if ((unint64_t)a3 >> 5 < 0xC35)
  {
    if (a3 <= 27)
    {
      switch(a3)
      {
        case 0:
          if (a4 != 4)
            return 0;
          v7 = *(_QWORD *)a2 + 4;
          if (v7 > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          v8 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          *(_QWORD *)a2 = v7;
          v9 = (void **)(a1 + 80);
          std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::resize((std::vector<unsigned int> *)(a1 + 80), v8);
          if ((_DWORD)v8)
            bzero(*v9, 4 * v8);
          return 1;
        case 1:
          return (AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 32), a4) & 1) != 0;
        case 3:
          if (a4 != 8)
            return 0;
          if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          goto LABEL_36;
        case 4:
          if (a4 != 8)
            return 0;
          if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          goto LABEL_36;
        case 5:
          if (a4 != 8)
            return 0;
          if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          goto LABEL_36;
        case 6:
          if (a4 != 1)
            return 0;
          v13 = *(_QWORD *)a2 + 1;
          if (v13 > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          v14 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          *(_QWORD *)a2 = v13;
          *(_BYTE *)(a1 + 74) = v14 == 2;
          return 1;
        case 7:
          if (a4 != 8)
            return 0;
          if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_36:
          v12 = *(_QWORD *)a2 + 8;
          break;
        default:
          return 1;
      }
LABEL_37:
      *(_QWORD *)a2 = v12;
      return 1;
    }
    switch(a3)
    {
      case 30:
        if (a4 == 1)
        {
          v15 = *(_QWORD *)a2 + 1;
          if (v15 > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          v16 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          *(_QWORD *)a2 = v15;
          *(_BYTE *)(a1 + 72) = v16 == 2;
          return 1;
        }
        break;
      case 29:
        if (a4 == 1)
        {
          v17 = *(_QWORD *)a2 + 1;
          if (v17 > *(_QWORD *)(a2 + 16))
            goto LABEL_5;
          v18 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          *(_QWORD *)a2 = v17;
          *(_BYTE *)(a1 + 73) = v18 == 2;
          return 1;
        }
        break;
      case 28:
        v19 = 0;
        v10 = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v19);
        if (v10 && v19 == 15)
        {
          v11 = *(_OWORD *)(v10 + 8);
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(v10 + 24);
          *(_OWORD *)(a1 + 104) = v11;
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          return 1;
        }
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        break;
      default:
        return 1;
    }
    return 0;
  }
  result = 0;
  if (a4 == 4)
  {
    v6 = *(_QWORD *)(a1 + 80);
    if (a3 - 100000 < (unint64_t)((*(_QWORD *)(a1 + 88) - v6) >> 2))
    {
      if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
      {
LABEL_5:
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_DWORD *)(v6 + 4 * (a3 - 100000)) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      v12 = *(_QWORD *)a2 + 4;
      goto LABEL_37;
    }
  }
  return result;
}

void std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::size_type v6;
  unsigned int *value;
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  unint64_t v10;
  char *v11;
  std::vector<unsigned int>::pointer v12;
  std::vector<unsigned int>::pointer v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v19 = &begin[__sz];
    goto LABEL_15;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62)
    abort();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 1;
  if (v8 >> 1 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v10);
  v12 = this->__begin_;
  v13 = this->__end_;
  v14 = &v11[4 * v5];
  v16 = (unsigned int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = (unsigned int *)&v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
    operator delete(v12);
}

void AccelerationStructureViewer::IntersectionFunctionTable::~IntersectionFunctionTable(id *this)
{

}

{

  operator delete();
}

uint64_t AccelerationStructureViewer::IntersectionFunctionTable::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 5);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 1, *(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, 8, a1 + 16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, 8, a1 + 24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

BOOL AccelerationStructureViewer::IntersectionFunctionTable::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v5;
  _QWORD *v6;

  if (a3)
  {
    if (a3 != 3)
      return a3 != 1
          || (AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 8), a4) & 1) != 0;
    v5 = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
    {
LABEL_9:
      result = 0;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    v6 = (_QWORD *)(a1 + 16);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      goto LABEL_9;
    v6 = (_QWORD *)(a1 + 24);
  }
  *v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v5);
  *(_QWORD *)a2 += 8;
  return 1;
}

void AccelerationStructureViewer::Instance::~Instance(id *this)
{
  void **v2;

  *this = off_724450;
  v2 = this + 10;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);

  v2 = this + 1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  void **v2;

  *this = off_724450;
  v2 = this + 10;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);

  v2 = this + 1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
  operator delete();
}

void AccelerationStructureViewer::Instance::encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (**v14)(AccelerationStructureViewer::DataSourceArray *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void (**v18)(AccelerationStructureViewer::BoundingBox *__hidden);
  __int128 v19;
  uint64_t v20;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 11, 8, a1 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, 8, a1 + 32);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 1, *(_QWORD *)(a1 + 48));
  v18 = off_724418;
  v19 = *(_OWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 72);
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::BoundingBox *__hidden)))(*(_QWORD *)a2 + 40))(a2, 28, &v18);
  v14 = off_7241B0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 != *(_QWORD *)(a1 + 88))
  {
    v5 = 0;
    do
    {
      if ((unint64_t)v5 >= (unint64_t)v16)
      {
        v6 = (uint64_t)((uint64_t)v5 - v15) >> 3;
        if ((unint64_t)(v6 + 1) >> 61)
          abort();
        v7 = (uint64_t)(v16 - v15) >> 2;
        if (v7 <= v6 + 1)
          v7 = v6 + 1;
        if ((_QWORD)v16 - (_QWORD)v15 >= 0x7FFFFFFFFFFFFFF8uLL)
          v8 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v8 = v7;
        if (v8)
          v8 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v8);
        else
          v9 = 0;
        v10 = (_QWORD *)(v8 + 8 * v6);
        *v10 = v4;
        v5 = v10 + 1;
        v11 = (char *)*((_QWORD *)&v15 + 1);
        v12 = (char *)v15;
        if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
        {
          do
          {
            v13 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v10 = v13;
          }
          while (v11 != v12);
          v11 = (char *)v15;
        }
        *(_QWORD *)&v15 = v10;
        *((_QWORD *)&v15 + 1) = v5;
        *(_QWORD *)&v16 = v8 + 8 * v9;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v5++ = v4;
      }
      *((_QWORD *)&v15 + 1) = v5;
      v4 += 120;
    }
    while (v4 != *(_QWORD *)(a1 + 88));
  }
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::DataSourceArray *__hidden)))(*(_QWORD *)a2 + 40))(a2, 18, &v14);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v14);
}

void sub_1B9700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)va);
  _Unwind_Resume(a1);
}

BOOL AccelerationStructureViewer::Instance::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  _BOOL8 result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if (a3 <= 10)
  {
    if (a3 == 1)
      return (AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 48), a4) & 1) != 0;
    if (a3 != 3)
      return 1;
    if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
    {
LABEL_13:
      result = 0;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_40:
    *(_QWORD *)a2 += 8;
    return 1;
  }
  switch(a3)
  {
    case 11:
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_13;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_40;
    case 18:
      v24 = 0;
      v8 = (_QWORD *)AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v24);
      v9 = v8;
      if (v8 && !v24)
      {
        v11 = (uint64_t *)v8[1];
        v10 = (uint64_t *)v8[2];
        if (v11 != v10)
        {
          v12 = (_QWORD *)(a1 + 80);
          v13 = (uint64_t *)v8[1];
          do
          {
            if (*(_WORD *)(v9[4] + (((uint64_t)v11 - v9[1]) >> 2)) == 11)
            {
              v14 = *v13;
              v16 = *(_QWORD *)(a1 + 88);
              v15 = *(_QWORD *)(a1 + 96);
              if (v16 >= v15)
              {
                v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v16 - *v12) >> 3);
                v19 = v18 + 1;
                if (v18 + 1 > 0x222222222222222)
                  abort();
                v20 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v15 - *v12) >> 3);
                if (2 * v20 > v19)
                  v19 = 2 * v20;
                if (v20 >= 0x111111111111111)
                  v21 = 0x222222222222222;
                else
                  v21 = v19;
                v29 = a1 + 96;
                if (v21)
                  v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v21);
                else
                  v22 = 0;
                v25 = v21;
                v26 = v21 + 120 * v18;
                v27 = v26;
                v28 = v21 + 120 * v22;
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(v26, v14);
                v27 += 120;
                std::vector<AccelerationStructureViewer::Property>::__swap_out_circular_buffer((uint64_t *)(a1 + 80), &v25);
                v17 = *(_QWORD *)(a1 + 88);
                std::__split_buffer<AccelerationStructureViewer::Property>::~__split_buffer((uint64_t)&v25);
              }
              else
              {
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(*(_QWORD *)(a1 + 88), *v13);
                v17 = v16 + 120;
                *(_QWORD *)(a1 + 88) = v16 + 120;
              }
              *(_QWORD *)(a1 + 88) = v17;
              v10 = (uint64_t *)v9[2];
            }
            ++v13;
            ++v11;
          }
          while (v13 != v10);
        }
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
        return 1;
      }
      if (v8)
      {
        v23 = *(void (**)(void))(*v8 + 8);
        goto LABEL_44;
      }
      break;
    case 28:
      LOWORD(v25) = 0;
      v5 = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v25);
      if (v5 && (unsigned __int16)v25 == 15)
      {
        v6 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(a1 + 56) = v6;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        return 1;
      }
      if (v5)
      {
        v23 = *(void (**)(void))(*(_QWORD *)v5 + 8);
LABEL_44:
        v23();
      }
      break;
    default:
      return 1;
  }
  return 0;
}

void sub_1B99D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 88) = v11;
  _Unwind_Resume(exception_object);
}

void AccelerationStructureViewer::InstanceMotionAccelerationStructure::~InstanceMotionAccelerationStructure(id *this)
{
  AccelerationStructureViewer::InstanceAccelerationStructure::~InstanceAccelerationStructure(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::InstanceMotionAccelerationStructure::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 18);
  AccelerationStructureViewer::AccelerationStructure::encode(a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, 8, a1 + 120);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::InstanceMotionAccelerationStructure::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = AccelerationStructureViewer::AccelerationStructure::decode(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (!a3)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      {
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      *(_QWORD *)a2 += 8;
    }
    return 1;
  }
  return result;
}

uint64_t AccelerationStructureViewer::AccelerationStructure::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  __int16 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  if (a3 <= 11)
  {
    if (a3 != 1)
    {
      if (a3 == 2)
      {
        if ((unint64_t)(*(_QWORD *)a2 + 2) <= *(_QWORD *)(a2 + 16))
        {
          *(_WORD *)(a1 + 64) = *(_WORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          v7 = *(_QWORD *)a2 + 2;
          goto LABEL_48;
        }
        goto LABEL_23;
      }
      if (a3 == 3)
      {
        if ((unint64_t)(*(_QWORD *)a2 + 8) <= *(_QWORD *)(a2 + 16))
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          goto LABEL_19;
        }
LABEL_23:
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      return 1;
    }
    if ((AccelerationStructureViewer::DataSourceQueryBlobDecoder::consumeString((uint64_t *)a2, (void **)(a1 + 48), a4) & 1) != 0)
      return 1;
  }
  else
  {
    if (a3 <= 17)
    {
      if (a3 == 12)
      {
        if ((unint64_t)(*(_QWORD *)a2 + 8) <= *(_QWORD *)(a2 + 16))
        {
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          goto LABEL_19;
        }
        goto LABEL_23;
      }
      if (a3 == 14)
      {
        if ((unint64_t)(*(_QWORD *)a2 + 8) <= *(_QWORD *)(a2 + 16))
        {
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_19:
          v7 = *(_QWORD *)a2 + 8;
LABEL_48:
          *(_QWORD *)a2 = v7;
          return 1;
        }
        goto LABEL_23;
      }
      return 1;
    }
    if (a3 == 18)
    {
      v25 = 0;
      v9 = (_QWORD *)AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v25);
      v10 = v9;
      if (v9 && !v25)
      {
        v12 = (uint64_t *)v9[1];
        v11 = (uint64_t *)v9[2];
        if (v12 != v11)
        {
          v13 = (_QWORD *)(a1 + 96);
          v14 = (uint64_t *)v9[1];
          do
          {
            if (*(_WORD *)(v10[4] + (((uint64_t)v12 - v10[1]) >> 2)) == 11)
            {
              v15 = *v14;
              v17 = *(_QWORD *)(a1 + 104);
              v16 = *(_QWORD *)(a1 + 112);
              if (v17 >= v16)
              {
                v19 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v17 - *v13) >> 3);
                v20 = v19 + 1;
                if (v19 + 1 > 0x222222222222222)
                  abort();
                v21 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v16 - *v13) >> 3);
                if (2 * v21 > v20)
                  v20 = 2 * v21;
                if (v21 >= 0x111111111111111)
                  v22 = 0x222222222222222;
                else
                  v22 = v20;
                v30 = a1 + 112;
                if (v22)
                  v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v22);
                else
                  v23 = 0;
                v26 = v22;
                v27 = v22 + 120 * v19;
                v28 = v27;
                v29 = v22 + 120 * v23;
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(v27, v15);
                v28 += 120;
                std::vector<AccelerationStructureViewer::Property>::__swap_out_circular_buffer((uint64_t *)(a1 + 96), &v26);
                v18 = *(_QWORD *)(a1 + 104);
                std::__split_buffer<AccelerationStructureViewer::Property>::~__split_buffer((uint64_t)&v26);
              }
              else
              {
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(*(_QWORD *)(a1 + 104), *v14);
                v18 = v17 + 120;
                *(_QWORD *)(a1 + 104) = v17 + 120;
              }
              *(_QWORD *)(a1 + 104) = v18;
              v11 = (uint64_t *)v10[2];
            }
            ++v14;
            ++v12;
          }
          while (v14 != v11);
        }
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        return 1;
      }
      if (v9)
      {
        v24 = *(void (**)(void))(*v9 + 8);
        goto LABEL_52;
      }
    }
    else
    {
      if (a3 != 28)
        return 1;
      LOWORD(v26) = 0;
      v5 = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v26);
      if (v5 && (unsigned __int16)v26 == 15)
      {
        v6 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(a1 + 84) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(a1 + 68) = v6;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        return 1;
      }
      if (v5)
      {
        v24 = *(void (**)(void))(*(_QWORD *)v5 + 8);
LABEL_52:
        v24();
      }
    }
  }
  return 0;
}

void sub_1B9E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<AccelerationStructureViewer::Property>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::AccelerationStructure::encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (**v14)(AccelerationStructureViewer::DataSourceArray *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void (**v18)(AccelerationStructureViewer::BoundingBox *__hidden);
  __int128 v19;
  uint64_t v20;
  __int16 v21;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 1, *(_QWORD *)(a1 + 48));
  v21 = *(_DWORD *)(a1 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)a2 + 24))(a2, 2, 2, &v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, 8, a1 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 12, 8, a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 14, 8, a1 + 40);
  v18 = off_724418;
  v19 = *(_OWORD *)(a1 + 68);
  v20 = *(_QWORD *)(a1 + 84);
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::BoundingBox *__hidden)))(*(_QWORD *)a2 + 40))(a2, 28, &v18);
  v14 = off_7241B0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = *(_QWORD *)(a1 + 96);
  if (v4 != *(_QWORD *)(a1 + 104))
  {
    v5 = 0;
    do
    {
      if ((unint64_t)v5 >= (unint64_t)v16)
      {
        v6 = (uint64_t)((uint64_t)v5 - v15) >> 3;
        if ((unint64_t)(v6 + 1) >> 61)
          abort();
        v7 = (uint64_t)(v16 - v15) >> 2;
        if (v7 <= v6 + 1)
          v7 = v6 + 1;
        if ((_QWORD)v16 - (_QWORD)v15 >= 0x7FFFFFFFFFFFFFF8uLL)
          v8 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v8 = v7;
        if (v8)
          v8 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v8);
        else
          v9 = 0;
        v10 = (_QWORD *)(v8 + 8 * v6);
        *v10 = v4;
        v5 = v10 + 1;
        v11 = (char *)*((_QWORD *)&v15 + 1);
        v12 = (char *)v15;
        if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
        {
          do
          {
            v13 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v10 = v13;
          }
          while (v11 != v12);
          v11 = (char *)v15;
        }
        *(_QWORD *)&v15 = v10;
        *((_QWORD *)&v15 + 1) = v5;
        *(_QWORD *)&v16 = v8 + 8 * v9;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v5++ = v4;
      }
      *((_QWORD *)&v15 + 1) = v5;
      v4 += 120;
    }
    while (v4 != *(_QWORD *)(a1 + 104));
  }
  (*(void (**)(uint64_t, uint64_t, void (***)(AccelerationStructureViewer::DataSourceArray *__hidden)))(*(_QWORD *)a2 + 40))(a2, 18, &v14);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v14);
}

void sub_1BA038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&a9);
  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::InstanceAccelerationStructure::~InstanceAccelerationStructure(id *this)
{
  void **v2;

  *this = off_7242C8;
  v2 = this + 12;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);

  v2 = this + 1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  AccelerationStructureViewer::InstanceAccelerationStructure::~InstanceAccelerationStructure(this);
  operator delete();
}

void AccelerationStructureViewer::AccelerationStructure::~AccelerationStructure(id *this)
{
  void **v2;

  *this = off_7242C8;
  v2 = this + 12;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);

  v2 = this + 1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  void **v2;

  *this = off_7242C8;
  v2 = this + 12;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);

  v2 = this + 1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
  operator delete();
}

uint64_t AccelerationStructureViewer::InstanceAccelerationStructure::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  AccelerationStructureViewer::AccelerationStructure::encode(a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, 8, a1 + 120);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::InstanceAccelerationStructure::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = AccelerationStructureViewer::AccelerationStructure::decode(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (!a3)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      {
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      *(_QWORD *)a2 += 8;
    }
    return 1;
  }
  return result;
}

void AccelerationStructureViewer::PrimitiveMotionAccelerationStructure::~PrimitiveMotionAccelerationStructure(id *this)
{
  AccelerationStructureViewer::InstanceAccelerationStructure::~InstanceAccelerationStructure(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::PrimitiveMotionAccelerationStructure::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 17);
  AccelerationStructureViewer::AccelerationStructure::encode(a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, 8, a1 + 120);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::PrimitiveMotionAccelerationStructure::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = AccelerationStructureViewer::AccelerationStructure::decode(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (!a3)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      {
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      *(_QWORD *)a2 += 8;
    }
    return 1;
  }
  return result;
}

void AccelerationStructureViewer::PrimitiveAccelerationStructure::~PrimitiveAccelerationStructure(id *this)
{
  AccelerationStructureViewer::InstanceAccelerationStructure::~InstanceAccelerationStructure(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::PrimitiveAccelerationStructure::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2);
  AccelerationStructureViewer::AccelerationStructure::encode(a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 0, 8, a1 + 120);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::PrimitiveAccelerationStructure::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = AccelerationStructureViewer::AccelerationStructure::decode(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (!a3)
    {
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
      {
        result = 0;
        *(_BYTE *)(a2 + 24) = 1;
        return result;
      }
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      *(_QWORD *)a2 += 8;
    }
    return 1;
  }
  return result;
}

void AccelerationStructureViewer::InvalidAccelerationStructure::~InvalidAccelerationStructure(id *this)
{
  AccelerationStructureViewer::InstanceAccelerationStructure::~InstanceAccelerationStructure(this);
  operator delete();
}

uint64_t AccelerationStructureViewer::InvalidAccelerationStructure::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 3);
  AccelerationStructureViewer::AccelerationStructure::encode(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

void AccelerationStructureViewer::DataSourceError::~DataSourceError(id *this)
{

}

{

  operator delete();
}

uint64_t AccelerationStructureViewer::DataSourceError::decode()
{
  return 0;
}

void AccelerationStructureViewer::DataSourceQueryRequest::~DataSourceQueryRequest(AccelerationStructureViewer::DataSourceQueryRequest *this)
{
  operator delete();
}

uint64_t AccelerationStructureViewer::DataSourceQueryRequest::decode()
{
  return 0;
}

uint64_t AccelerationStructureViewer::DataSourceFilterable::matches(AccelerationStructureViewer::DataSourceFilterable *this, AccelerationStructureViewer::Filter *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  id *v8;
  unsigned int v9;
  int v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  unint64_t v21;
  BOOL v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  void *context;
  AccelerationStructureViewer::Filter *v30;
  uint64_t i;
  uint64_t v33;
  id v34;
  unsigned __int16 *v35;

  context = objc_autoreleasePoolPush();
  v3 = objc_alloc_init((Class)NSNumberFormatter);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 3);
  v30 = a2;
  for (i = v5; ; v5 = i)
  {
    if (v4 == v5)
    {
      v27 = 1;
      goto LABEL_37;
    }
    v6 = *(_DWORD *)(v4 + 8);
    v33 = v4;
    v34 = *(id *)(v4 + 16);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "lowercaseString"));
    v8 = *(id **)this;
    v35 = (unsigned __int16 *)*((_QWORD *)this + 1);
    if (*(unsigned __int16 **)this == v35)
      break;
    v9 = HIWORD(v6);
    while (1)
    {
      v10 = *(unsigned __int16 *)v8;
      v11 = v8[1];
      v12 = v11;
      if (!v9 || v10 == v9)
        break;
LABEL_7:

      v8 += 2;
      if (v8 == (id *)v35)
        goto LABEL_33;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lowercaseString"));
    v14 = v13;
    switch((__int16)v6)
    {
      case 0:
        v23 = objc_msgSend(v13, "containsString:", v7);
        goto LABEL_19;
      case 1:
        v24 = objc_msgSend(v13, "containsString:", v7);
        goto LABEL_22;
      case 2:
        v23 = objc_msgSend(v13, "isEqualToString:", v7);
LABEL_19:
        v25 = v23;

        if (v25)
          goto LABEL_32;
        goto LABEL_7;
      case 3:
        v24 = objc_msgSend(v13, "isEqualToString:", v7);
LABEL_22:
        v26 = v24;

        if ((v26 & 1) != 0)
          goto LABEL_7;
LABEL_32:

        break;
      case 4:
      case 5:
      case 6:
      case 7:
        v15 = v7;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "numberFromString:", v7));
        v17 = v3;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "numberFromString:", v14));
        v19 = v18;
        if (v16 && v18)
          v20 = objc_msgSend(v18, "compare:", v16);
        else
          v20 = objc_msgSend(v14, "localizedCaseInsensitiveCompare:", v15);
        v21 = (unint64_t)v20;
        switch((__int16)v6)
        {
          case 4:

            v22 = v21 == 1;
            goto LABEL_27;
          case 5:
            goto LABEL_31;
          case 6:

            v22 = v21 == -1;
LABEL_27:
            v3 = v17;
            v7 = v15;
            if (!v22)
              goto LABEL_7;
            goto LABEL_32;
          case 7:
            v21 = (unint64_t)v20 + 1;
LABEL_31:

            v3 = v17;
            v7 = v15;
            if (v21 < 2)
              goto LABEL_32;
            goto LABEL_7;
          default:

            v3 = v17;
            v7 = v15;
            goto LABEL_25;
        }
      default:
LABEL_25:

        goto LABEL_7;
    }
LABEL_34:

    v4 = v33 + 24;
  }
LABEL_33:
  if (*((_BYTE *)v30 + 8) != 1)
    goto LABEL_34;

  v27 = 0;
LABEL_37:

  objc_autoreleasePoolPop(context);
  return v27;
}

void sub_1BA8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BA980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BAAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BAB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BABC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t GTUSCSamplingStreamingManagerHelper::CleanupGPURawCounters(uint64_t this)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (*(_QWORD *)(this + 16))
  {
    v1 = this;
    v2 = *(void **)(this + 24);
    *(_QWORD *)(this + 24) = 0;

    v3 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;

    return GRCReleaseAllCounterSourceGroup();
  }
  return this;
}

void GTUSCSamplingStreamingManagerHelper::SetupGPURawCounters(GTUSCSamplingStreamingManagerHelper *this)
{
  uint64_t v1;
  void *v2;
  NSDictionary *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t i;
  void *v8;
  NSDictionary *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  void *v25;
  unsigned int v26;
  void *v27;
  void *v28;
  void *v29;
  unsigned __int8 v30;
  void *v31;
  void *context;
  id v33;
  uint64_t v34;
  id obj;
  id v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  std::vector<unsigned int>::value_type __x;
  _BYTE v47[128];
  _BYTE v48[128];

  GTUSCSamplingStreamingManagerHelper::CleanupGPURawCounters((uint64_t)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
  context = objc_autoreleasePoolPush();
  v1 = GRCCopyAllCounterSourceGroup();
  v2 = (void *)xmmword_752038;
  *(_QWORD *)&xmmword_752038 = v1;

  if ((_QWORD)xmmword_752038 && objc_msgSend((id)xmmword_752038, "count"))
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)xmmword_752038, "firstObject"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "sourceList"));
    if (v37 && objc_msgSend(v37, "count"))
    {
      if ((objc_opt_respondsToSelector(v31, "features") & 1) != 0)
      {
        v3 = (NSDictionary *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "features"));
        dword_752898 = GPURawCounterSupportFlags(v3);

        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "features"));
        if (v4)
        {
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "features"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ConstantAGX_CoreConfig")));

          if (v6)
            objc_storeStrong((id *)&qword_7527E8, v6);

        }
        __x = 0;
        std::vector<unsigned int>::resize((std::vector<unsigned int> *)&xmmword_752798, (std::vector<unsigned int>::size_type)objc_msgSend(v37, "count"), &__x);
        for (i = 0; i < (unint64_t)objc_msgSend(v37, "count"); ++i)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectAtIndexedSubscript:", i));
          if ((objc_opt_respondsToSelector(v8, "features") & 1) != 0)
          {
            v9 = (NSDictionary *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "features"));
            *(_DWORD *)(xmmword_752798 + 4 * i) = GPURawCounterSupportFlags(v9);

          }
        }
      }
      v36 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 3));
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      obj = v37;
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
      if (v10)
      {
        v34 = *(_QWORD *)v43;
LABEL_17:
        v11 = 0;
        v33 = v10;
        while (1)
        {
          if (*(_QWORD *)v43 != v34)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v11);
          if (!objc_msgSend(v12, "ringBufferNum"))
          {

            goto LABEL_47;
          }
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
          v14 = objc_msgSend(v13, "containsString:", CFSTR("RDE"));
          if ((v14 & 1) != 0)
            goto LABEL_24;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
          if (objc_msgSend(v15, "hasPrefix:", CFSTR("Firmware")))
            break;
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
          v30 = objc_msgSend(v29, "containsString:", CFSTR("APS_USC"));

          if ((v30 & 1) != 0)
          {
            v16 = 1;
            goto LABEL_25;
          }
LABEL_42:
          if ((id)++v11 == v33)
          {
            v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
            if (v10)
              goto LABEL_17;
            goto LABEL_44;
          }
        }

LABEL_24:
        v16 = 0;
LABEL_25:
        objc_msgSend(v36, "addObject:", v12);
        HIDWORD(qword_7528A0) += v14;
        if (((v14 & 1) != 0 || objc_msgSend(obj, "count") == (char *)&dword_0 + 1) && !qword_752810)
        {
          v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 10));
          v18 = (void *)qword_752810;
          qword_752810 = v17;

          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "availableCounters"));
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v20 = v19;
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
          if (v21)
          {
            v22 = *(_QWORD *)v39;
            do
            {
              for (j = 0; j != v21; j = (char *)j + 1)
              {
                if (*(_QWORD *)v39 != v22)
                  objc_enumerationMutation(v20);
                v24 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)j);
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "name"));
                v26 = objc_msgSend(v25, "hasPrefix:", CFSTR("GRC_SHADER_PROFILER_DATA_"));

                if (v26)
                {
                  v27 = (void *)qword_752810;
                  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "name"));
                  objc_msgSend(v27, "addObject:", v28);

                }
              }
              v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
            }
            while (v21);
          }

        }
        else if (v16)
        {
          LODWORD(qword_7528A8) = objc_msgSend(v36, "count") - 1;
        }
        goto LABEL_42;
      }
LABEL_44:

      if (objc_msgSend(v36, "count"))
      {
        objc_storeStrong((id *)&xmmword_752038 + 1, v36);
        qword_752048 = (uint64_t)objc_msgSend(v31, "sampleMarker");
      }
LABEL_47:

    }
  }
  objc_autoreleasePoolPop(context);
}

void sub_1BB12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t GPURawCounterSupportFlags(NSDictionary *a1)
{
  NSDictionary *v1;
  NSDictionary *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary allKeys](v1, "allKeys", 0));
    v4 = 0;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_738F78, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i)));
          v9 = v8;
          if (v8)
            v4 = objc_msgSend(v8, "unsignedIntValue") | v4;

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1BB360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::size_type v7;
  unsigned int *value;
  unint64_t v10;
  std::vector<unsigned int>::size_type v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  std::vector<unsigned int>::size_type v17;
  unsigned int *v18;
  unsigned int *v19;
  std::vector<unsigned int>::pointer v20;
  std::vector<unsigned int>::pointer i;
  unsigned int v22;
  unsigned int *v23;
  std::vector<unsigned int>::size_type v24;

  begin = this->__begin_;
  end = this->__end_;
  v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      v23 = &end[__sz - v7];
      v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4;
      }
      while (v24);
      this->__end_ = v23;
    }
    else
    {
      if (__sz >> 62)
        abort();
      v10 = (char *)value - (char *)begin;
      v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz)
        v11 = __sz;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v12);
      v15 = (unsigned int *)&v13[4 * v7];
      v16 = (unsigned int *)&v13[4 * __sz];
      v17 = 4 * __sz - 4 * v7;
      v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4;
      }
      while (v17);
      v19 = (unsigned int *)&v13[4 * v14];
      v20 = this->__begin_;
      for (i = this->__end_; i != v20; --i)
      {
        v22 = *(i - 1);
        *--v15 = v22;
      }
      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

id GTUSCSamplingStreamingManagerHelper::ResetSourceForPostProcessing(id *this)
{
  id result;
  uint64_t v3;
  unsigned int v4;
  void *v5;

  result = objc_msgSend(this[3], "count");
  if (result)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "objectAtIndexedSubscript:", v3));
      objc_msgSend(v5, "resetRawDataPostProcessor");

      v3 = v4;
      result = objc_msgSend(this[3], "count");
    }
    while ((unint64_t)result > v4++);
  }
  return result;
}

void sub_1BB520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GTUSCSamplingStreamingManagerHelper::SetupSourceForDerivedCounters(id *this, NSDictionary *a2, unsigned int a3, int a4, int a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  _BYTE *v27;
  void *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  NSDictionary *v46;
  uint64_t v47;
  const __CFString *v48;
  void *v49;
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];

  v46 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
  if (!v9)
  {
    v15 = 0;
    goto LABEL_39;
  }
  if (!a3)
  {
    if ((a4 & 1) != 0 || GTAGXPerfStateControl::IsGPUPerformanceStateInduced((GTAGXPerfStateControl *)(this + 5)))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
      objc_msgSend(v10, "setOptions:", &off_738D70);
LABEL_6:

      goto LABEL_7;
    }
    v36 = *((unsigned int *)*this + 18);
    if ((_DWORD)v36)
    {
      GTAGXPerfStateControl::EnableConsistentGPUPerfState((uint64_t)(this + 5), v36);
      v37 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(this + 8), (*((_DWORD *)*this + 18) - 1));
      v38 = objc_claimAutoreleasedReturnValue(v37);
      v39 = this[261];
      this[261] = (id)v38;

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
      objc_msgSend(v10, "setOptions:", &off_738D48);
      goto LABEL_6;
    }
    v40 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(this + 8), 1);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    v42 = this[261];
    this[261] = (id)v41;

    v52[0] = CFSTR("DisableOverlap");
    v52[1] = CFSTR("LockGPUPerfState");
    v53[0] = &__kCFBooleanTrue;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)*this + 17)));
    v53[1] = v43;
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v53, v52, 2));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
    objc_msgSend(v45, "setOptions:", v44);

  }
LABEL_7:
  if (a5)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "options"));
    v13 = objc_msgSend(v12, "mutableCopy");

    objc_msgSend(v13, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("ReduceCDMCluster"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
    objc_msgSend(v14, "setOptions:", v13);
  }
  else
  {
    if (!a3 || !a4)
      goto LABEL_14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "options"));
    v13 = objc_msgSend(v17, "mutableCopy");

    objc_msgSend(v13, "removeObjectForKey:", CFSTR("ReduceCDMCluster"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
    objc_msgSend(v14, "setOptions:", v13);
  }

LABEL_14:
  v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v46, "objectForKeyedSubscript:", CFSTR("passList")));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", a3));

  if (v19)
  {
    v20 = 0;
    v21 = *((double *)this + 394) + *((double *)this + 394);
    if (v21 <= 1.0)
      v22 = 10240.0;
    else
      v22 = v21 * 10240.0;
    v23 = (unint64_t)v22;
    while (1)
    {
      if (v20 >= (unint64_t)objc_msgSend(this[3], "count"))
      {
        v15 = 1;
        goto LABEL_38;
      }
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "objectAtIndexedSubscript:", v20));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "name"));
      v26 = objc_msgSend(v25, "containsString:", CFSTR("APS_USC"));

      if ((v26 & 1) == 0)
      {
        if (!a3)
        {
          v27 = this[238];
          if (v20 < ((unint64_t)((_BYTE *)this[239] - v27) >> 2)
            && (*(_DWORD *)&v27[4 * v20] & 0x20) != 0)
          {
            v50[0] = CFSTR("SWResetOnRead");
            v50[1] = CFSTR("RingBufferSizeInKB");
            v51[0] = &__kCFBooleanTrue;
            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v23));
            v51[1] = v28;
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 2));
            objc_msgSend(v24, "setOptions:", v29);
          }
          else
          {
            v48 = CFSTR("RingBufferSizeInKB");
            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v23));
            v49 = v28;
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
            objc_msgSend(v24, "setOptions:", v29);
          }

          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "name"));
          v31 = objc_msgSend(v30, "containsString:", CFSTR("BMPR_RDE_1"));

          v32 = 257;
          if (v31)
            v32 = 256;
          objc_msgSend(v24, "requestTriggers:firstErrorIndex:", this[v32], 0);
        }
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", v20));
        if (!objc_msgSend(v33, "count"))
        {
          v34 = this[249];

          v33 = v34;
        }
        v47 = 0;
        if ((objc_msgSend(v24, "requestCounters:firstErrorIndex:", v33, &v47) & 1) == 0
          || (objc_msgSend(v24, "setEnabled:", 1) & 1) == 0)
        {

          break;
        }

      }
      ++v20;
    }
  }
  v15 = 0;
LABEL_38:

LABEL_39:
  return v15;
}

void sub_1BBA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::ReplaySingleFrameForUSCSampling(uint64_t a1, _QWORD *a2, uint64_t *a3, void **a4, void *a5, void *a6)
{
  void (**v8)(void);
  id *v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  BOOL v28;
  int v29;
  BOOL v30;
  void *v31;
  char *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  id MTLComputePassDescriptor;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t RenderPassDescriptor;
  char *v57;
  void *v58;
  id MTLRenderPassDescriptor;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  void *v70;
  id v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  unsigned int v86;
  char v87;
  id v88;
  unsigned int v89;
  id v90;
  void (**v92)(void);
  void *v93;
  void *v95;
  char v96;
  uint64_t *v98;
  void *v99;
  void *context;
  int v101;
  int FuncEnumConstructorType;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  _QWORD v107[5];
  _QWORD v108[5];
  _BYTE v109[56];
  uint64_t v110;

  v90 = a5;
  v8 = a6;
  v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "objectForKeyedSubscript:", CFSTR("perEncoderDrawCallCount")));
  v9 = **(id ***)a1;
  v10 = v9[1];
  v104 = (uint64_t)v9;
  v11 = (uint64_t *)*v9;
  v12 = *((_QWORD *)*v9 + 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "defaultDevice"));
  v14 = objc_msgSend(v13, "newEvent");

  std::vector<std::pair<unsigned long long,unsigned long long>>::reserve(a4, *(_QWORD *)(a1 + 2272));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "defaultCommandQueue"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "commandBuffer"));
  v103 = v12;
  v106 = v10;
  v92 = v8;

  v99 = v14;
  objc_msgSend(v16, "encodeSignalEvent:value:", v14, GTUSCSamplingStreamingManagerHelper::ReplaySingleFrameForUSCSampling(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,std::unordered_map<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>> &,std::vector<std::pair<unsigned long long,unsigned long long>> &,GTMTLFXTracingDelegate *,void({block_pointer})(void))::signalCounter);
  objc_msgSend(v16, "commit");
  v85 = v16;
  v17 = (unsigned int *)(v104 + 22480);
  v18 = *(unsigned int *)(v104 + 22480);
  if (v11[13] + v11[12] > v18)
  {
    v86 = 0;
    v87 = 0;
    v89 = 0;
    v96 = 0;
    v98 = v11;
    while (1)
    {
      v19 = *(unsigned int *)(v104 + 22484);
      context = objc_autoreleasePoolPush();
      v20 = *v17;
      v105 = *(_QWORD *)(v11[15] + 24);
      v21 = v105 + (v20 << 6);
      v22 = (int *)(v21 + 8);
      FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v21 + 8));
      if (FuncEnumConstructorType == 25)
      {
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((_QWORD *)(a1 + 2248), v20))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "defaultCommandQueue"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "commandBuffer"));

          objc_msgSend(v24, "encodeWaitForEvent:value:", v99, GTUSCSamplingStreamingManagerHelper::ReplaySingleFrameForUSCSampling(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,std::unordered_map<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>> &,std::vector<std::pair<unsigned long long,unsigned long long>> &,GTMTLFXTracingDelegate *,void({block_pointer})(void))::signalCounter++);
          objc_msgSend(v24, "encodeSignalEvent:value:", v99);
          v108[0] = _NSConcreteStackBlock;
          v108[1] = 3221225472;
          v108[2] = ___ZN35GTUSCSamplingStreamingManagerHelper31ReplaySingleFrameForUSCSamplingERNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS0_4hashIjEENS0_8equal_toIjEENS0_9allocatorINS0_4pairIKjS2_EEEEEERNS1_IjNS0_6vectorI27GTCoalescedEncoderIndexInfoNS7_ISF_EEEES4_S6_NS7_INS8_IS9_SH_EEEEEERNSE_INS8_IyyEENS7_ISM_EEEEP22GTMTLFXTracingDelegateU13block_pointerFvvE_block_invoke;
          v108[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
          v108[4] = a4;
          objc_msgSend(v24, "addCompletedHandler:", v108);
          objc_msgSend(v24, "commit");

        }
        v101 = GTMTLReplayController_restoreCommandBuffer(v104, v21);
      }
      else
      {
        v101 = 0;
      }
      GTMTLReplayController_updateCommandEncoder(v104, v21);
      v25 = v18 | (v19 << 32);
      if (*(_DWORD *)(a1 + 2176) == -1)
        goto LABEL_25;
      v26 = *v22;
      if ((IsFuncEnumDrawCall(*v22) & 1) != 0)
        break;
      if (v26 <= -16138)
      {
        v28 = v26 == -16327;
        v29 = -16220;
      }
      else
      {
        v27 = (v26 + 16137) > 0x3B || ((1 << (v26 + 9)) & 0xC00000000000001) == 0;
        v28 = !v27 || v26 == -15486;
        v29 = -15297;
      }
      v30 = v28 || v26 == v29;
      if (v30 || (v26 + 15416) <= 2)
        break;
      if (IsFuncEnumSampledBlitCall(v26) || IsFuncEnumSampledBlitCallAGX(v26))
      {
        objc_msgSend(*(id *)(a1 + 1944), "addSampledCallFunctionIndex:forIndex:forEncoder:atEncoderIndex:forType:", v25, v86++, v89, (*(_DWORD *)(a1 + 1928) - 1), CFSTR("Blit"));
        goto LABEL_25;
      }
LABEL_26:
      if (v26 > -16247)
      {
        if (v26 > -15588)
        {
          if (v26 <= -15365)
          {
            if (v26 == -15587)
            {
LABEL_65:
              v48 = *(_QWORD *)(a1 + 1928);
              *(_QWORD *)(a1 + 1928) = v48 + 1;
              **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v48 << 8);
              *(_QWORD *)(a1 + 1936) += 24;
              *(_QWORD *)(a1 + 1976) += 24;
              GTMTLReplayController_defaultDispatchFunction(v104, v21);
              v49 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103)+ 1);
              v89 = objc_msgSend(v106, "globalTraceIdForEncoder:ofType:", v49, 0);
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "blitCommandEncoderForKey:", v49));
              GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints((_DWORD *)a1, a2, v21, v89, v31, *(_QWORD *)(a1 + 1928) - 1, v25, a3);
              v86 = 0;
              goto LABEL_92;
            }
            if (v26 == -15586)
            {
              v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v17));
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectForKeyedSubscript:", v37));

              if (v31)
              {
                v38 = objc_msgSend(v31, "unsignedIntegerValue");
                v39 = *(_QWORD *)(a1 + 1928);
                *(_QWORD *)(a1 + 1928) = v39 + 1;
                **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v39 << 8);
                *(_QWORD *)(a1 + 1936) += 24;
                v40 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103);
                v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "commandBufferForKey:", *(_QWORD *)v40));
                bzero(v109, 0x2B90uLL);
                GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v109, (uint64_t *)v21, v103);
                v41 = v110;
                v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "computePassDescriptorMap"));
                MTLComputePassDescriptor = MakeMTLComputePassDescriptor(v41, v42);
                v44 = (void *)objc_claimAutoreleasedReturnValue(MTLComputePassDescriptor);

                v45 = v44;
                objc_msgSend(v45, "setAllowCommandEncoderCoalescing:", 1);
                v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "sampledComputeCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v45, *(_QWORD *)(a1 + 1936), v38));
                GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints((_DWORD *)a1, a2, v21, objc_msgSend(v46, "globalTraceObjectID"), v46, *(_QWORD *)(a1 + 1928) - 1, v25, a3);
                objc_msgSend(v106, "setComputeCommandEncoder:forKey:", v46, *((_QWORD *)v40 + 1));
                *(_QWORD *)(a1 + 1936) += 24 * (_QWORD)v38;
                *(_QWORD *)(a1 + 1976) += 24 * (_QWORD)v38 + 24;

                v47 = v45;
                goto LABEL_76;
              }
LABEL_91:
              GTMTLReplayController_dispatchForUSCSampling(v104, v21, v106, v103, *(void **)(a1 + 1944), (*(_DWORD *)(a1 + 1928) - 1));
              v31 = 0;
LABEL_92:

              goto LABEL_93;
            }
            goto LABEL_59;
          }
          if (v26 == -15364)
          {
LABEL_66:
            v50 = *(_QWORD *)(a1 + 1928);
            *(_QWORD *)(a1 + 1928) = v50 + 1;
            **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v50 << 8);
            *(_QWORD *)(a1 + 1936) += 24;
            *(_QWORD *)(a1 + 1976) += 24;
            GTMTLReplayController_defaultDispatchFunction(v104, v21);
            v51 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103)+ 1);
            v52 = objc_msgSend(v106, "globalTraceIdForEncoder:ofType:", v51, 0);
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "accelerationStructureCommandEncoderForKey:", v51));
            GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints((_DWORD *)a1, a2, v21, v52, v31, *(_QWORD *)(a1 + 1928) - 1, v25, a3);
            objc_msgSend(*(id *)(a1 + 1944), "addOtherEncoderFunctionIndex:forEncoder:atEncoderIndex:forType:", v25, v52, (*(_DWORD *)(a1 + 1928) - 1), CFSTR("AccelerationStructure"));
            goto LABEL_92;
          }
          if (v26 == -15318 || v26 == -15316)
            goto LABEL_56;
        }
        else
        {
          if (v26 > -16015)
          {
            if (v26 == -16014)
            {
              v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v17));
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectForKeyedSubscript:", v73));

              if (!v31)
                goto LABEL_91;
              v84 = objc_msgSend(v31, "unsignedIntegerValue");
              v74 = *(_QWORD *)(a1 + 1928);
              *(_QWORD *)(a1 + 1928) = v74 + 1;
              **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v74 << 8);
              *(_QWORD *)(a1 + 1936) += 24;
              v75 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103);
              v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "commandBufferForKey:", *(_QWORD *)v75));
              v45 = objc_alloc_init((Class)MTLComputePassDescriptor);
              objc_msgSend(v45, "setAllowCommandEncoderCoalescing:", 1);
              objc_msgSend(v45, "setDispatchType:", *((_QWORD *)v75 + 2));
              v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "sampledComputeCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v45, *(_QWORD *)(a1 + 1936), v84));
              GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints((_DWORD *)a1, a2, v21, objc_msgSend(v47, "globalTraceObjectID"), v47, *(_QWORD *)(a1 + 1928) - 1, v25, a3);
              objc_msgSend(v106, "setComputeCommandEncoder:forKey:", v47, *((_QWORD *)v75 + 1));
              *(_QWORD *)(a1 + 1936) += 24 * (_QWORD)v84;
              v61 = *(_QWORD *)(a1 + 1976) + 24 * (_QWORD)v84 + 24;
LABEL_75:
              *(_QWORD *)(a1 + 1976) = v61;
LABEL_76:

              goto LABEL_92;
            }
            if (v26 != -15908)
            {
              if (v26 == -15673)
                goto LABEL_66;
              goto LABEL_59;
            }
            goto LABEL_56;
          }
          if (v26 == -16246)
          {
            if ((v87 & 1) != 0)
            {
              objc_msgSend(v106, "removeRenderCommandEncoderForKey:", *(_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103));
              v87 = 1;
            }
            else
            {
LABEL_79:
              GTMTLReplayController_dispatchForUSCSampling(v104, v21, v106, v103, *(void **)(a1 + 1944), (*(_DWORD *)(a1 + 1928) - 1));
              v87 = 0;
            }
            goto LABEL_93;
          }
          if (v26 == -16202)
          {
LABEL_56:
            if (!(v96 & 1 | (v92 == 0)))
            {
              v92[2]();
              v26 = *v22;
            }
            v96 = 1;
          }
        }
LABEL_59:
        if (v26 >> 2 == 1073737833)
        {
          GTUSCSamplingStreamingManagerHelper::DispatchExpandedIndirectCommand(a1, v104, (unint64_t *)v21, 0, 0);
          goto LABEL_93;
        }
        goto LABEL_60;
      }
      if (v26 > -16362)
      {
        switch(v26)
        {
          case -16361:
            goto LABEL_56;
          case -16360:
          case -16359:
          case -16358:
          case -16357:
          case -16356:
            goto LABEL_59;
          case -16355:
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v104 + 8), "defaultCommandQueue"));
            objc_msgSend(v31, "finish");
            goto LABEL_92;
          case -16354:
            goto LABEL_65;
          case -16353:
            v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v17));
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectForKeyedSubscript:", v53));

            if (!v31)
              goto LABEL_91;
            v82 = objc_msgSend(v31, "unsignedIntegerValue");
            v54 = *(_QWORD *)(a1 + 1928);
            *(_QWORD *)(a1 + 1928) = v54 + 1;
            **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v54 << 8);
            *(_QWORD *)(a1 + 1936) += 24;
            v55 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103);
            RenderPassDescriptor = GetRenderPassDescriptor((uint64_t *)v21, v103);
            v57 = v55;
            v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "commandBufferForKey:", *(_QWORD *)v55));
            v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "renderPassDescriptorMap"));
            MTLRenderPassDescriptor = MakeMTLRenderPassDescriptor(RenderPassDescriptor, v58);
            v47 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPassDescriptor);
            v60 = 2 * (_QWORD)v82 + 2;

            v45 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "sampledRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v47, *(_QWORD *)(a1 + 1936), v60));
            GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints((_DWORD *)a1, a2, v21, objc_msgSend(v45, "globalTraceObjectID"), v45, *(_QWORD *)(a1 + 1928) - 1, v25, 0);
            objc_msgSend(v106, "setRenderCommandEncoder:forKey:", v45, *((_QWORD *)v57 + 1));
            *(_QWORD *)(a1 + 1936) += 24 * v60;
            v61 = *(_QWORD *)(a1 + 1976) + 48 * (_QWORD)v82 + 72;
            goto LABEL_75;
          case -16352:
            v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v17));
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectForKeyedSubscript:", v62));

            if (!v31)
              goto LABEL_91;
            v83 = objc_msgSend(v31, "unsignedIntegerValue");
            v63 = *(_QWORD *)(a1 + 1928);
            *(_QWORD *)(a1 + 1928) = v63 + 1;
            **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v63 << 8);
            *(_QWORD *)(a1 + 1936) += 24;
            v64 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103);
            v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "commandBufferForKey:", *(_QWORD *)v64));
            v45 = objc_alloc_init((Class)MTLComputePassDescriptor);
            objc_msgSend(v45, "setAllowCommandEncoderCoalescing:", 1);
            v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "sampledComputeCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v45, *(_QWORD *)(a1 + 1936), v83));
            GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints((_DWORD *)a1, a2, v21, objc_msgSend(v47, "globalTraceObjectID"), v47, *(_QWORD *)(a1 + 1928) - 1, v25, a3);
            objc_msgSend(v106, "setComputeCommandEncoder:forKey:", v47, *((_QWORD *)v64 + 1));
            *(_QWORD *)(a1 + 1936) += 24 * (_QWORD)v83;
            *(_QWORD *)(a1 + 1976) += 24 * (_QWORD)v83 + 24;

            goto LABEL_76;
          case -16351:
            v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v17));
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectForKeyedSubscript:", v65));

            if (v31)
            {
              v88 = objc_msgSend(v31, "unsignedIntegerValue");
              v66 = *(_QWORD *)(a1 + 1928);
              *(_QWORD *)(a1 + 1928) = v66 + 1;
              **(_DWORD **)(a1 + 1936) = **(unsigned __int8 **)(a1 + 1936) | ((_DWORD)v66 << 8);
              *(_QWORD *)(a1 + 1936) += 24;
              v67 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103);
              v68 = GetRenderPassDescriptor((uint64_t *)v21, v103);
              v69 = v67;
              v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "commandBufferForKey:", *(_QWORD *)v67));
              v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "renderPassDescriptorMap"));
              v71 = MakeMTLRenderPassDescriptor(v68, v70);
              v47 = (void *)objc_claimAutoreleasedReturnValue(v71);
              v72 = 2 * (_QWORD)v88 + 2;

              v45 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "sampledRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v47, *(_QWORD *)(a1 + 1936), v72));
              GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints((_DWORD *)a1, a2, v21, objc_msgSend(v45, "globalTraceObjectID"), v45, *(_QWORD *)(a1 + 1928) - 1, v25, 0);
              objc_msgSend(v106, "setParallelRenderCommandEncoder:forKey:", v45, *((_QWORD *)v69 + 1));
              *(_QWORD *)(a1 + 1936) += 24 * v72;
              *(_QWORD *)(a1 + 1976) += 48 * (_QWORD)v88 + 72;
              v87 = 1;
              goto LABEL_76;
            }
            GTMTLReplayController_dispatchForUSCSampling(v104, v21, v106, v103, *(void **)(a1 + 1944), (*(_DWORD *)(a1 + 1928) - 1));
            v31 = 0;
            v87 = 1;
            goto LABEL_92;
          default:
            if (v26 == -16286)
            {
              v76 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103);
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "parallelRenderCommandEncoderForKey:", *(_QWORD *)v76));
              objc_msgSend(v106, "setRenderCommandEncoder:forKey:", v31, *((_QWORD *)v76 + 1));
              goto LABEL_92;
            }
            if (v26 == -16285)
              goto LABEL_79;
            break;
        }
        goto LABEL_59;
      }
      if (v26 != -20474 && v26 != -20457)
        goto LABEL_59;
      if (v90)
      {
        v34 = GTTraceFunc_targetContext(v21, v98[2]);
        if (*v22 == -20474)
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "spatialScalerForKey:", v34));
        else
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "temporalScalerForKey:", v34));
        v36 = DEVICEOBJECT(v35);
        v77 = (void *)objc_claimAutoreleasedReturnValue(v36);

        objc_msgSend(v77, "setTracingDelegate:", v90);
        objc_msgSend(v90, "setFunctionIndex:", v25);

      }
LABEL_60:
      GTMTLReplayController_dispatchForUSCSampling(v104, v21, v106, v103, *(void **)(a1 + 1944), (*(_DWORD *)(a1 + 1928) - 1));
LABEL_93:
      if (v101)
      {
        v78 = objc_msgSend(v106, "commandBufferForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103)+ 1));
        v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
        objc_msgSend(v79, "encodeWaitForEvent:value:", v99, GTUSCSamplingStreamingManagerHelper::ReplaySingleFrameForUSCSampling(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,std::unordered_map<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>> &,std::vector<std::pair<unsigned long long,unsigned long long>> &,GTMTLFXTracingDelegate *,void({block_pointer})(void))::signalCounter++);
        objc_msgSend(v79, "encodeSignalEvent:value:", v99);

      }
      if (FuncEnumConstructorType == 25)
      {
        v80 = objc_msgSend(v106, "commandBufferForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v105 + (v20 << 6) + 13), v103)+ 1));
        v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
        v107[0] = _NSConcreteStackBlock;
        v107[1] = 3221225472;
        v107[2] = ___ZN35GTUSCSamplingStreamingManagerHelper31ReplaySingleFrameForUSCSamplingERNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS0_4hashIjEENS0_8equal_toIjEENS0_9allocatorINS0_4pairIKjS2_EEEEEERNS1_IjNS0_6vectorI27GTCoalescedEncoderIndexInfoNS7_ISF_EEEES4_S6_NS7_INS8_IS9_SH_EEEEEERNSE_INS8_IyyEENS7_ISM_EEEEP22GTMTLFXTracingDelegateU13block_pointerFvvE_block_invoke_2;
        v107[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
        v107[4] = a4;
        objc_msgSend(v81, "addCompletedHandler:", v107);

      }
      objc_autoreleasePoolPop(context);
      v18 = *v17 + 1;
      *v17 = v18;
      v11 = v98;
      if (v98[13] + v98[12] <= v18)
        goto LABEL_100;
    }
    objc_msgSend(*(id *)(a1 + 1944), "addSampledCallFunctionIndex:", v25);
LABEL_25:
    v26 = *v22;
    goto LABEL_26;
  }
LABEL_100:

}

void sub_1BCC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{

  _Unwind_Resume(a1);
}

void ScopedReplayConfiguration::~ScopedReplayConfiguration(ScopedReplayConfiguration *this)
{
  void *v2;

  if (*((_BYTE *)this + 16))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 8), "defaultCommandQueue"));
    objc_msgSend(v2, "setGPUPriority:", 1);

  }
  objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", *(_QWORD *)this);
}

void sub_1BCE78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSString *AddShaderBinary(NSMutableDictionary *a1, NSData *a2, objc_object *a3, int a4, uint64_t a5, NSString *a6, int a7, NSString *a8)
{
  NSData *v15;
  NSString *v16;
  NSString *v17;
  NSString *v18;
  uLong v19;
  NSData *v20;
  NSString *v21;
  NSString *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  objc_object *v37;
  NSMutableDictionary *v38;
  id v39;
  const __CFString *v40;
  NSData *v41;
  const __CFString *v42;
  NSData *v43;
  const __CFString *v44;
  NSData *v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v38 = a1;
  v15 = a2;
  v37 = a3;
  v16 = a6;
  v17 = a8;
  if (v16)
  {
    v18 = v16;
  }
  else
  {
    v19 = crc32(0, 0, 0);
    v20 = objc_retainAutorelease(v15);
    v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%0.8x_%p"), crc32(v19, (const Bytef *)-[NSData bytes](v20, "bytes"), (uInt)-[NSData length](v20, "length")), v37);
    v18 = (NSString *)objc_claimAutoreleasedReturnValue(v21);
  }
  v22 = v18;
  v23 = objc_autoreleasePoolPush();
  v25 = (void *)objc_opt_new(NSMutableDictionary, v24);
  v26 = v25;
  if (a7)
    objc_msgSend(v25, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("dylib"));
  if (v17)
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v17, CFSTR("type"));
  objc_autoreleasePoolPop(v23);
  if (a4)
  {
    if (v15)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[GTShaderProfilerBinaryAnalysisResult analyzeBinary:targetIndex:isaPrinter:](GTShaderProfilerBinaryAnalysisResult, "analyzeBinary:targetIndex:isaPrinter:", v15, a5, 0));
      if (v27)
      {
        v39 = 0;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v27, 1, &v39));
        v29 = v39;
        if (v29 || !v28)
        {
          v44 = CFSTR("binary");
          v45 = v15;
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1));
          objc_msgSend(v26, "addEntriesFromDictionary:", v35);

          v31 = objc_msgSend(v26, "copy");
          -[NSMutableDictionary setObject:forKeyedSubscript:](v38, "setObject:forKeyedSubscript:", v31, v22);
        }
        else
        {
          v46[0] = CFSTR("binary");
          v46[1] = CFSTR("binaryAnalysis");
          v47[0] = v15;
          v47[1] = v28;
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v47, v46, 2));
          objc_msgSend(v26, "addEntriesFromDictionary:", v30);

          v31 = objc_msgSend(v26, "copy");
          -[NSMutableDictionary setObject:forKeyedSubscript:](v38, "setObject:forKeyedSubscript:", v31, v22);
        }

      }
      else
      {
        v42 = CFSTR("binary");
        v43 = v15;
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
        objc_msgSend(v26, "addEntriesFromDictionary:", v34);

        v29 = objc_msgSend(v26, "copy");
        -[NSMutableDictionary setObject:forKeyedSubscript:](v38, "setObject:forKeyedSubscript:", v29, v22);
      }

    }
    else
    {
      v33 = objc_msgSend(v26, "copy");
      -[NSMutableDictionary setObject:forKeyedSubscript:](v38, "setObject:forKeyedSubscript:", v33, v22);

    }
  }
  else
  {
    if (v15)
    {
      v40 = CFSTR("binary");
      v41 = v15;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
      objc_msgSend(v26, "addEntriesFromDictionary:", v32);

    }
    -[NSMutableDictionary setObject:forKeyedSubscript:](v38, "setObject:forKeyedSubscript:", v26, v22);
  }

  return v22;
}

void sub_1BD230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id GTUSCSamplingStreamingManagerHelper::AllocUSCSamplingAddressBuffer(GTUSCSamplingStreamingManagerHelper *this)
{
  ProgramAddressTableCollector *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;

  v2 = objc_alloc_init(ProgramAddressTableCollector);
  v3 = (void *)*((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = v2;

  v4 = *(id *)(*(_QWORD *)this + 16);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("perEncoderDrawCallCount")));
  v6 = objc_msgSend(v5, "count");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("totalDrawCallCount")));
  v8 = objc_msgSend(v7, "unsignedIntegerValue");

  v9 = objc_alloc((Class)NSMutableData);
  v10 = 12 * (2 * (_QWORD)v8 + 8 * (_QWORD)v6);
  if (v10 <= 0x15555)
    v10 = 87381;
  v11 = objc_msgSend(v9, "initWithLength:", 24 * v10);
  v12 = (void *)*((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = v11;

  memset(objc_msgSend(*((id *)this + 246), "mutableBytes"), 255, (size_t)objc_msgSend(*((id *)this + 246), "length"));
  v13 = *((id *)this + 246);

  return v13;
}

void sub_1BD408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void HarvestInfo::~HarvestInfo(id *this)
{

}

void std::vector<std::pair<unsigned long long,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void ___ZN35GTUSCSamplingStreamingManagerHelper31ReplaySingleFrameForUSCSamplingERNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS0_4hashIjEENS0_8equal_toIjEENS0_9allocatorINS0_4pairIKjS2_EEEEEERNS1_IjNS0_6vectorI27GTCoalescedEncoderIndexInfoNS7_ISF_EEEES4_S6_NS7_INS8_IS9_SH_EEEEEERNSE_INS8_IyyEENS7_ISM_EEEEP22GTMTLFXTracingDelegateU13block_pointerFvvE_block_invoke(uint64_t a1, void *a2)
{
  double v3;
  unint64_t v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  id v22;

  v22 = a2;
  objc_msgSend(v22, "GPUStartTime");
  v4 = NClockTimeFromCommandBufferTime(v3);
  objc_msgSend(v22, "GPUEndTime");
  v6 = NClockTimeFromCommandBufferTime(v5);
  v7 = v6;
  v8 = *(void ***)(a1 + 32);
  v10 = (unint64_t *)v8[1];
  v9 = (unint64_t)v8[2];
  if ((unint64_t)v10 >= v9)
  {
    v12 = ((char *)v10 - (_BYTE *)*v8) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      abort();
    v14 = v9 - (_QWORD)*v8;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v15);
    v17 = (unint64_t *)&v16[16 * v12];
    v19 = &v16[16 * v18];
    *v17 = v4;
    v17[1] = v7;
    v11 = v17 + 2;
    v21 = (char *)*v8;
    v20 = (char *)v8[1];
    if (v20 != *v8)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v20 - 1);
        v17 -= 2;
        v20 -= 16;
      }
      while (v20 != v21);
      v20 = (char *)*v8;
    }
    *v8 = v17;
    v8[1] = v11;
    v8[2] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v4;
    v10[1] = v6;
    v11 = v10 + 2;
  }
  v8[1] = v11;

}

void sub_1BD730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t GetRenderPassDescriptor(uint64_t *a1, uint64_t a2)
{
  _DWORD v5[14];
  uint64_t v6;

  bzero(v5, 0x2B90uLL);
  GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v5, a1, a2);
  if (v5[0] == 70 || v5[0] == 65)
    return v6;
  else
    return 0;
}

void GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(_DWORD *a1, _QWORD *a2, uint64_t a3, unsigned int a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  id v14;
  id v15;
  void *v16;
  int v17;
  int FuncEnumConstructorType;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  id v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  id v51;
  void *v52;
  FILE *v53;
  int v54;
  id v55;
  const char *v56;
  const char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  id v70;
  void *v71;
  FILE *v72;
  int v73;
  id v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  id v88;
  void *v89;
  FILE *v90;
  int v91;
  id v92;
  const char *v93;
  const char *v94;
  void *v95;
  FILE *v96;
  int v97;
  id v98;
  const char *v99;
  const char *v100;
  uint64_t *v101;
  unsigned int v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;

  v107 = a4;
  v14 = a5;
  v15 = DEVICEOBJECT(v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v17 = a1[538] + a1[539];
  FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(a3 + 8));
  if (FuncEnumConstructorType <= 27)
  {
    if (FuncEnumConstructorType == 17)
    {
      if (a4)
        v31 = a4;
      else
        v31 = a7;
      v103 = v31;
      *(_QWORD *)&v104 = __PAIR64__(v17, a6);
      *((_QWORD *)&v104 + 1) = 0x200000004;
      v105 = a7;
      v106 = 0;
      std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::__emplace_unique_key_args<unsigned int,unsigned int &,GTEncoderSampleIndexInfo>((uint64_t)a2, v31, v31, &v104);
      if (a8)
      {
        v32 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a8, v31, &v103);
        v33 = v32;
        v35 = v32[4];
        v34 = v32[5];
        if (v35 >= v34)
        {
          v59 = v32[3];
          v60 = (uint64_t)(v35 - v59) >> 4;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60)
            abort();
          v62 = v34 - v59;
          if (v62 >> 3 > v61)
            v61 = v62 >> 3;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
            v63 = 0xFFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v63);
          v65 = &v64[16 * v60];
          v67 = &v64[16 * v66];
          *(_DWORD *)v65 = a6;
          *((_QWORD *)v65 + 1) = a7;
          v36 = v65 + 16;
          v69 = (char *)v33[3];
          v68 = (char *)v33[4];
          if (v68 != v69)
          {
            do
            {
              *((_OWORD *)v65 - 1) = *((_OWORD *)v68 - 1);
              v65 -= 16;
              v68 -= 16;
            }
            while (v68 != v69);
            v68 = (char *)v33[3];
          }
          v33[3] = v65;
          v33[4] = v36;
          v33[5] = v67;
          if (v68)
            operator delete(v68);
        }
        else
        {
          *(_DWORD *)v35 = a6;
          *(_QWORD *)(v35 + 8) = a7;
          v36 = (char *)(v35 + 16);
        }
        v33[4] = v36;
      }
      if (!a1[529]
        || !a1[528]
        || (objc_opt_respondsToSelector(v16, "setMTLCounterSampleLocationWithBuffer:startIndex:endIndex:") & 1) == 0)
      {
        goto LABEL_96;
      }
      v70 = GTSampleBufferManager::CurrentSampleBuffer((GTSampleBufferManager *)(a1 + 526));
      v38 = (void *)objc_claimAutoreleasedReturnValue(v70);
      if (!v38
        || (objc_msgSend(v16, "setMTLCounterSampleLocationWithBuffer:startIndex:endIndex:", v38, a1[538], (a1[538] + 1)) & 1) == 0)
      {
        v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to set counter sample location for %lu"), a6));
        v72 = __stdoutp;
        v73 = g_runningInCI;
        v74 = objc_retainAutorelease(v71);
        v75 = (const char *)objc_msgSend(v74, "UTF8String");
        v76 = "#CI_ERROR# ";
        if (!v73)
          v76 = "";
        fprintf(v72, "%s%s %u: %s\n", v76, "void GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(std::unordered_map<uint32_t, GTEncoderSampleIndexInfo> &, const GTTraceFunc *, uint32_t, __strong id<MTLCommandEncoder>, size_t, uint64_t, std::unordered_map<uint32_t, std::vector<GTCoalescedEncoderIndexInfo>> *)", 5637, v75);
        v58 = objc_retainAutorelease(v74);
        GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v58, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTUSCSamplingStreamingManager.mm", (uint64_t)"AddEncoderSamplePoints", 5637, 1);
        goto LABEL_93;
      }
    }
    else
    {
      if (FuncEnumConstructorType != 21)
        goto LABEL_96;
      *(_QWORD *)&v104 = __PAIR64__(v17, a6);
      *((_QWORD *)&v104 + 1) = 0x200000002;
      v105 = a7;
      v106 = 0;
      std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::__emplace_unique_key_args<unsigned int,unsigned int &,GTEncoderSampleIndexInfo>((uint64_t)a2, a4, a4, &v104);
      if (a8)
      {
        v21 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a8, a4, &v107);
        v22 = v21;
        v24 = v21[4];
        v23 = v21[5];
        if (v24 >= v23)
        {
          v77 = v21[3];
          v78 = (uint64_t)(v24 - v77) >> 4;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 60)
            goto LABEL_97;
          v80 = v23 - v77;
          if (v80 >> 3 > v79)
            v79 = v80 >> 3;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
            v81 = 0xFFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v81);
          v83 = &v82[16 * v78];
          v85 = &v82[16 * v84];
          *(_DWORD *)v83 = a6;
          *((_QWORD *)v83 + 1) = a7;
          v25 = v83 + 16;
          v87 = (char *)v22[3];
          v86 = (char *)v22[4];
          if (v86 != v87)
          {
            do
            {
              *((_OWORD *)v83 - 1) = *((_OWORD *)v86 - 1);
              v83 -= 16;
              v86 -= 16;
            }
            while (v86 != v87);
            v86 = (char *)v22[3];
          }
          v22[3] = v83;
          v22[4] = v25;
          v22[5] = v85;
          if (v86)
            operator delete(v86);
        }
        else
        {
          *(_DWORD *)v24 = a6;
          *(_QWORD *)(v24 + 8) = a7;
          v25 = (char *)(v24 + 16);
        }
        v22[4] = v25;
      }
      if (!a1[529]
        || !a1[528]
        || (objc_opt_respondsToSelector(v16, "setMTLCounterSampleLocationWithBuffer:startIndex:endIndex:") & 1) == 0)
      {
        goto LABEL_96;
      }
      v88 = GTSampleBufferManager::CurrentSampleBuffer((GTSampleBufferManager *)(a1 + 526));
      v38 = (void *)objc_claimAutoreleasedReturnValue(v88);
      if (!v38
        || (objc_msgSend(v16, "setMTLCounterSampleLocationWithBuffer:startIndex:endIndex:", v38, a1[538], (a1[538] + 1)) & 1) == 0)
      {
        v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to set counter sample location for %lu"), a6));
        v96 = __stdoutp;
        v97 = g_runningInCI;
        v98 = objc_retainAutorelease(v95);
        v99 = (const char *)objc_msgSend(v98, "UTF8String");
        v100 = "#CI_ERROR# ";
        if (!v97)
          v100 = "";
        fprintf(v96, "%s%s %u: %s\n", v100, "void GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(std::unordered_map<uint32_t, GTEncoderSampleIndexInfo> &, const GTTraceFunc *, uint32_t, __strong id<MTLCommandEncoder>, size_t, uint64_t, std::unordered_map<uint32_t, std::vector<GTCoalescedEncoderIndexInfo>> *)", 5605, v99);
        v58 = objc_retainAutorelease(v98);
        GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v58, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTUSCSamplingStreamingManager.mm", (uint64_t)"AddEncoderSamplePoints", 5605, 1);
        goto LABEL_93;
      }
    }
LABEL_85:
    v39 = a1[538] + 2;
    goto LABEL_86;
  }
  if (FuncEnumConstructorType == 28)
  {
    *(_QWORD *)&v104 = __PAIR64__(v17, a6);
    *((_QWORD *)&v104 + 1) = 0x200000004;
    v105 = a7;
    v106 = 0;
    std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::__emplace_unique_key_args<unsigned int,unsigned int &,GTEncoderSampleIndexInfo>((uint64_t)a2, a4, a4, &v104);
    if (!a8)
      goto LABEL_40;
    v26 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a8, a4, &v107);
    v27 = v26;
    v29 = v26[4];
    v28 = v26[5];
    if (v29 < v28)
    {
      *(_DWORD *)v29 = a6;
      *(_QWORD *)(v29 + 8) = a7;
      v30 = (char *)(v29 + 16);
LABEL_39:
      v27[4] = v30;
LABEL_40:
      if (!a1[529]
        || !a1[528]
        || (objc_opt_respondsToSelector(v16, "setMTLCounterSampleLocationWithBuffer:startIndex:endIndex:") & 1) == 0)
      {
        goto LABEL_96;
      }
      v51 = GTSampleBufferManager::CurrentSampleBuffer((GTSampleBufferManager *)(a1 + 526));
      v38 = (void *)objc_claimAutoreleasedReturnValue(v51);
      if (!v38
        || (objc_msgSend(v16, "setMTLCounterSampleLocationWithBuffer:startIndex:endIndex:", v38, a1[538], (a1[538] + 1)) & 1) == 0)
      {
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to set counter sample location for %lu"), a6));
        v53 = __stdoutp;
        v54 = g_runningInCI;
        v55 = objc_retainAutorelease(v52);
        v56 = (const char *)objc_msgSend(v55, "UTF8String");
        v57 = "#CI_ERROR# ";
        if (!v54)
          v57 = "";
        fprintf(v53, "%s%s %u: %s\n", v57, "void GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(std::unordered_map<uint32_t, GTEncoderSampleIndexInfo> &, const GTTraceFunc *, uint32_t, __strong id<MTLCommandEncoder>, size_t, uint64_t, std::unordered_map<uint32_t, std::vector<GTCoalescedEncoderIndexInfo>> *)", 5576, v56);
        v58 = objc_retainAutorelease(v55);
        GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v58, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTUSCSamplingStreamingManager.mm", (uint64_t)"AddEncoderSamplePoints", 5576, 1);
        goto LABEL_93;
      }
      goto LABEL_85;
    }
    v40 = v26[3];
    v41 = (uint64_t)(v29 - v40) >> 4;
    v42 = v41 + 1;
    if (!((unint64_t)(v41 + 1) >> 60))
    {
      v43 = v28 - v40;
      if (v43 >> 3 > v42)
        v42 = v43 >> 3;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      v45 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v44);
      v46 = &v45[16 * v41];
      v48 = &v45[16 * v47];
      *(_DWORD *)v46 = a6;
      *((_QWORD *)v46 + 1) = a7;
      v30 = v46 + 16;
      v50 = (char *)v27[3];
      v49 = (char *)v27[4];
      if (v49 != v50)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v49 - 1);
          v46 -= 16;
          v49 -= 16;
        }
        while (v49 != v50);
        v49 = (char *)v27[3];
      }
      v27[3] = v46;
      v27[4] = v30;
      v27[5] = v48;
      if (v49)
        operator delete(v49);
      goto LABEL_39;
    }
LABEL_97:
    abort();
  }
  if (FuncEnumConstructorType == 65 || FuncEnumConstructorType == 70)
  {
    if ((objc_opt_respondsToSelector(v16, "tileWidth") & 1) != 0)
    {
      v19 = objc_msgSend(v16, "tileWidth");
      v20 = objc_msgSend(v16, "tileHeight");
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    *(_QWORD *)&v104 = __PAIR64__(v17, a6);
    *((_QWORD *)&v104 + 1) = 0x400000000;
    v105 = a7;
    v106 = __PAIR64__(v20, v19);
    std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::__emplace_unique_key_args<unsigned int,unsigned int &,GTEncoderSampleIndexInfo>((uint64_t)a2, a4, a4, &v104);
    if (a1[529])
    {
      if (a1[528]
        && (objc_opt_respondsToSelector(v16, "setMTLCounterSampleLocationWithBuffer:vertexStartIndex:vertexEndIndex:fragmentStartIndex:fragmentEndIndex:") & 1) != 0)
      {
        v37 = GTSampleBufferManager::CurrentSampleBuffer((GTSampleBufferManager *)(a1 + 526));
        v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        if (v38
          && (objc_msgSend(v16, "setMTLCounterSampleLocationWithBuffer:vertexStartIndex:vertexEndIndex:fragmentStartIndex:fragmentEndIndex:", v38, a1[538], (a1[538] + 1), (a1[538] + 2), (a1[538] + 3)) & 1) != 0)
        {
          v39 = a1[538] + 4;
LABEL_86:
          a1[538] = v39;
LABEL_95:

          goto LABEL_96;
        }
        v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to set counter sample location for %lu"), a6));
        v90 = __stdoutp;
        v91 = g_runningInCI;
        v92 = objc_retainAutorelease(v89);
        v93 = (const char *)objc_msgSend(v92, "UTF8String");
        v94 = "#CI_ERROR# ";
        if (!v91)
          v94 = "";
        fprintf(v90, "%s%s %u: %s\n", v94, "void GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(std::unordered_map<uint32_t, GTEncoderSampleIndexInfo> &, const GTTraceFunc *, uint32_t, __strong id<MTLCommandEncoder>, size_t, uint64_t, std::unordered_map<uint32_t, std::vector<GTCoalescedEncoderIndexInfo>> *)", 5548, v93);
        v58 = objc_retainAutorelease(v92);
        GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v58, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTUSCSamplingStreamingManager.mm", (uint64_t)"AddEncoderSamplePoints", 5548, 1);
LABEL_93:

        v101 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(a2, a4);
        if (v101)
          *((_DWORD *)v101 + 9) = 0;
        goto LABEL_95;
      }
    }
  }
LABEL_96:

}

void sub_1BE008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t GTUSCSamplingStreamingManagerHelper::DispatchExpandedIndirectCommand(uint64_t a1, uint64_t a2, unint64_t *a3, char **a4, int *a5)
{
  uint64_t v9;
  _QWORD *Object;
  id v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id RenderPipelineBinaries;
  void *v25;
  int v26;
  int v27;
  void *v28;
  int v29;
  id v30;
  void *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int IndirectCommand;
  unint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  id ComputePipelineBinaries;
  void *v59;
  id v60;
  void *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int v87;
  char **v88;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  _BYTE __dst[11096];
  unint64_t v95[1394];
  _OWORD v96[2];
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[13];
  uint64_t v103;
  uint64_t v104[11];
  uint64_t v105;
  apr_pool_t *p;

  v9 = *(_QWORD *)a2;
  p = **(apr_pool_t ***)(a2 + 152);
  GTMTLSMContext_indirectCommandBufferResources((uint64_t)v104, *(_DWORD ***)(v9 + 40), *a3, p);
  GetExecuteCommandsInBufferArgs((uint64_t)&v98, (uint64_t)a3, *(_QWORD *)(v9 + 16));
  v77 = (uint64_t)a3;
  Object = GTMTLSMContext_getObject(**(_QWORD **)(v9 + 40), v98, *a3);
  GTMTLCreateIndirectCommandEncoder((uint64_t)v102, Object[13]);
  memset(v96, 0, sizeof(v96));
  v97 = 1065353216;
  memcpy(v95, (const void *)(a2 + 11312), sizeof(v95));
  v11 = *(id *)(a2 + 8);
  v12 = v11;
  v79 = a2;
  v13 = *(_DWORD *)(a2 + 11312);
  v88 = a4;
  if (v13 == 28)
  {
    if ((GT_SUPPORT_0 & 0x10) != 0)
    {
      v91 = v11;
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "computeCommandEncoderForKey:", *(_QWORD *)(a2 + 11320), v77));
      v48 = v100;
      if (v100)
      {
        v49 = 0;
        v83 = (unsigned int *)(a2 + 22480);
        v87 = v99;
        v85 = v101;
        v50 = v103;
        do
        {
          v51 = (v49 + v87);
          v52 = v85 + v50 * (int)v51;
          v105 = v52;
          memcpy(__dst, &v95[7], 0x8D0uLL);
          IndirectCommand = GTMTLSMComputeCommandEncoder_loadIndirectCommand((uint64_t)&v95[7], v102, v52, v104);
          GTMTLReplayController_restoreComputeCommandEncoder(v92, (uint64_t)__dst, (uint64_t)&v95[7], v91);
          v54 = v95[8];
          if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v96, v95[8]))
          {
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v96, v54, v54);
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "computePipelineStateForKey:", v95[8]));
            v56 = v55;
            if (v55)
            {
              v57 = *(void **)(a1 + 1944);
              ComputePipelineBinaries = getComputePipelineBinaries(v55);
              v59 = (void *)objc_claimAutoreleasedReturnValue(ComputePipelineBinaries);
              objc_msgSend(v57, "addBinaries:", v59);

              a4 = v88;
            }

          }
          DYMTLDispatchComputeCommandEncoder(v92, (uint64_t)v102, v52);
          if (IndirectCommand)
          {
            objc_msgSend(*(id *)(a1 + 1944), "addSampledCallFunctionIndex:", *v83 | (unint64_t)(v51 << 32));
            if (a4)
            {
              v93 = 0;
              v60 = DEVICEOBJECT(v92);
              v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
              objc_msgSend(v61, "commandBatchIdRangeMin:max:", (char *)&v93 + 4, &v93);

              v62 = a4[1];
              v63 = (unint64_t)a4[2];
              if ((unint64_t)v62 >= v63)
              {
                v65 = (v62 - *a4) >> 3;
                v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 61)
                  abort();
                v67 = v63 - (_QWORD)*a4;
                if (v67 >> 2 > v66)
                  v66 = v67 >> 2;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                  v68 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v68 = v66;
                v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v68);
                v71 = &v69[8 * v65];
                *(_DWORD *)v71 = HIDWORD(v93);
                *((_DWORD *)v71 + 1) = v93;
                v73 = *a4;
                v72 = a4[1];
                v74 = v71;
                if (v72 != *a4)
                {
                  do
                  {
                    v75 = *((_QWORD *)v72 - 1);
                    v72 -= 8;
                    *((_QWORD *)v74 - 1) = v75;
                    v74 -= 8;
                  }
                  while (v72 != v73);
                  v72 = *a4;
                }
                v64 = v71 + 8;
                *a4 = v74;
                a4[1] = v71 + 8;
                a4[2] = &v69[8 * v70];
                if (v72)
                  operator delete(v72);
              }
              else
              {
                *(_DWORD *)v62 = HIDWORD(v93);
                *((_DWORD *)v62 + 1) = v93;
                v64 = v62 + 8;
              }
              a4[1] = v64;
            }
          }
          ++v49;
        }
        while (v49 != v48);
      }
      v12 = v91;
      GTMTLReplayController_restoreComputeCommandEncoder(v92, (uint64_t)&v95[7], v79 + 11368, v91);
      goto LABEL_63;
    }
  }
  else if (v13 == 70)
  {
    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "executeIndirectCommandBufferMap"));
    v86 = a5;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 8), "renderCommandEncoderForKey:", *(_QWORD *)(a2 + 11320)));
    v84 = v100;
    if (v100)
    {
      v15 = 0;
      v78 = (unsigned int *)(a2 + 22480);
      v82 = v99;
      v80 = v103;
      v81 = v101;
      v90 = v12;
      do
      {
        v16 = (v15 + v82);
        v17 = v81 + v80 * (int)v16;
        v105 = v17;
        memcpy(__dst, &v95[7], sizeof(__dst));
        v18 = GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)&v95[7], v102, v17, v104);
        GTMTLReplayController_restoreRenderCommandEncoder(v14, (uint64_t)__dst, (uint64_t)&v95[7], v12);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "renderPipelineStateForKey:", v95[1075]));
        v20 = v95[1075];
        if (!std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v96, v95[1075]))
        {
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v96, v20, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "renderPipelineStateForKey:", v95[1075]));
          v22 = v21;
          if (v21)
          {
            v23 = *(void **)(a1 + 1944);
            RenderPipelineBinaries = getRenderPipelineBinaries(v21);
            v25 = (void *)objc_claimAutoreleasedReturnValue(RenderPipelineBinaries);
            objc_msgSend(v23, "addBinaries:", v25);

          }
        }
        if (v86)
          v26 = v18;
        else
          v26 = 0;
        if (v26 != 1 || (v27 = *v86, *v86 == -1) || (*v86 = v27 - 1, v27))
        {
          v28 = 0;
          v29 = 0;
        }
        else
        {
          v47 = GTUSCSamplingStreamingManagerHelper::RenderDummyDrawCall((_QWORD *)a1, v79, v14, 0, v95[1075], v77);
          v28 = (void *)objc_claimAutoreleasedReturnValue(v47);
          objc_msgSend(v14, "setRenderPipelineState:", v19);
          v29 = 1;
        }
        DYMTLDrawRenderCommandEncoder(v14, (uint64_t)v102, v17, (uint64_t)v104, v92);
        if (v18)
        {
          objc_msgSend(*(id *)(a1 + 1944), "addSampledCallFunctionIndex:", *v78 | (unint64_t)(v16 << 32));
          if (v88)
          {
            v93 = 0;
            v30 = DEVICEOBJECT(v14);
            v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
            objc_msgSend(v31, "commandBatchIdRangeMin:max:", (char *)&v93 + 4, &v93);

            v32 = v88[1];
            v33 = (unint64_t)v88[2];
            if ((unint64_t)v32 >= v33)
            {
              v36 = (v32 - *v88) >> 3;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 61)
                abort();
              v38 = v33 - (_QWORD)*v88;
              if (v38 >> 2 > v37)
                v37 = v38 >> 2;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                v39 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v39);
              v42 = &v40[8 * v36];
              *(_DWORD *)v42 = HIDWORD(v93);
              *((_DWORD *)v42 + 1) = v93;
              v44 = *v88;
              v43 = v88[1];
              v45 = v42;
              if (v43 != *v88)
              {
                do
                {
                  v46 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v45 - 1) = v46;
                  v45 -= 8;
                }
                while (v43 != v44);
                v43 = *v88;
              }
              v34 = v42 + 8;
              *v88 = v45;
              v88[1] = v42 + 8;
              v88[2] = &v40[8 * v41];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v32 = HIDWORD(v93);
              *((_DWORD *)v32 + 1) = v93;
              v34 = v32 + 8;
            }
            v88[1] = v34;
          }
          else if (v29)
          {
            v35 = GTUSCSamplingStreamingManagerHelper::RenderDummyDrawCall((_QWORD *)a1, v79, v14, v28, v95[1075], v77);
            objc_msgSend(v14, "setRenderPipelineState:", v19);
          }
        }

        ++v15;
        v12 = v90;
      }
      while (v15 != v84);
    }
    GTMTLReplayController_restoreRenderCommandEncoder(v14, (uint64_t)&v95[7], v79 + 11368, v12);

LABEL_63:
  }
  apr_pool_clear(p);

  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v96);
}

void sub_1BE7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&STACK[0x5760]);
  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper31ReplaySingleFrameForUSCSamplingERNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS0_4hashIjEENS0_8equal_toIjEENS0_9allocatorINS0_4pairIKjS2_EEEEEERNS1_IjNS0_6vectorI27GTCoalescedEncoderIndexInfoNS7_ISF_EEEES4_S6_NS7_INS8_IS9_SH_EEEEEERNSE_INS8_IyyEENS7_ISM_EEEEP22GTMTLFXTracingDelegateU13block_pointerFvvE_block_invoke_2(uint64_t a1, void *a2)
{
  double v3;
  unint64_t v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  id v22;

  v22 = a2;
  objc_msgSend(v22, "GPUStartTime");
  v4 = NClockTimeFromCommandBufferTime(v3);
  objc_msgSend(v22, "GPUEndTime");
  v6 = NClockTimeFromCommandBufferTime(v5);
  v7 = v6;
  v8 = *(void ***)(a1 + 32);
  v10 = (unint64_t *)v8[1];
  v9 = (unint64_t)v8[2];
  if ((unint64_t)v10 >= v9)
  {
    v12 = ((char *)v10 - (_BYTE *)*v8) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      abort();
    v14 = v9 - (_QWORD)*v8;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v15);
    v17 = (unint64_t *)&v16[16 * v12];
    v19 = &v16[16 * v18];
    *v17 = v4;
    v17[1] = v7;
    v11 = v17 + 2;
    v21 = (char *)*v8;
    v20 = (char *)v8[1];
    if (v20 != *v8)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v20 - 1);
        v17 -= 2;
        v20 -= 16;
      }
      while (v20 != v21);
      v20 = (char *)*v8;
    }
    *v8 = v17;
    v8[1] = v11;
    v8[2] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v4;
    v10[1] = v6;
    v11 = v10 + 2;
  }
  v8[1] = v11;

}

void sub_1BE984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unint64_t NClockTimeFromCommandBufferTime(double a1)
{
  unsigned int v2;

  v2 = dword_752020;
  if (!dword_752020)
  {
    mach_timebase_info((mach_timebase_info_t)&NClockTimeFromCommandBufferTime(double)::timebaseInfo);
    v2 = dword_752020;
  }
  return (unint64_t)((double)v2
                          * a1
                          * 1000000000.0
                          / (double)(NClockTimeFromCommandBufferTime(double)::timebaseInfo | 0x41CDCD6500000000uLL));
}

id GTUSCSamplingStreamingManagerHelper::RenderDummyDrawCall(_QWORD *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  int v13;
  _QWORD *Object;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id MTLRenderPipelineDescriptorWithoutResourceIndex;
  void *v32;
  uint64_t v33;
  void *v34;
  id MTLTileRenderPipelineDescriptor;
  void *v36;
  id v37;
  int64x2_t v39;
  uint64_t v40;
  id v41;

  v11 = a3;
  v12 = a4;
  if (!v12)
  {
    Object = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)a2 + 40), a5, *(_QWORD *)a6);
    v17 = *(id *)(*(_QWORD *)*a1 + 8);
    if (!a1[287])
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)*a1 + 8), "defaultDevice"));
      v41 = 0;
      v19 = objc_msgSend(v18, "newLibraryWithSource:options:error:", CFSTR("#include <metal_stdlib>\n\nusing namespace metal;\n\nstruct TransformMatrices\n{\n    float4 modelview_projection_matrix[4];\n};\n\nstruct VertexOutput\n{\n    float4 pos [[position]];\n    float4 color;\n};\n\nvertex VertexOutput defaultVertexProgram(uint vid [[ vertex_id ]])\n{\n    VertexOutput out;\n\n    out.pos   = float4(0.0, 0.0, 0.0, 1.0);\n    out.color = float4(0.0, 0.0, 0.0, 1.0);\n\n    return out;\n}\n\nvertex void rasterizationDisabledVertexProgram(uint vid [[ vertex_id ]])\n{\n}\n\nfragment float4 defaultFragmentProgram(VertexOutput vo [[ stage_in ]])\n{\n    return float4(vo.color.bgr, 1.0f);\n}\n\nkernel void defaultKernel()\n{\n\n}\n\n"),
              0,
              &v41);
      v20 = v41;

      v21 = objc_msgSend(v19, "newFunctionWithName:", CFSTR("defaultVertexProgram"));
      v22 = (void *)a1[287];
      a1[287] = v21;

      v23 = objc_msgSend(v19, "newFunctionWithName:", CFSTR("defaultFragmentProgram"));
      v24 = (void *)a1[286];
      a1[286] = v23;

      v25 = objc_msgSend(v19, "newFunctionWithName:", CFSTR("rasterizationDisabledVertexProgram"));
      v26 = (void *)a1[288];
      a1[288] = v25;

      v27 = objc_msgSend(v19, "newFunctionWithName:", CFSTR("defaultKernel"));
      v28 = (void *)a1[289];
      a1[289] = v27;

    }
    v29 = Object[6];
    if (v29)
    {
      if (a1[287] && a1[286])
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "renderPipelineDescriptorMap"));
        MTLRenderPipelineDescriptorWithoutResourceIndex = MakeMTLRenderPipelineDescriptorWithoutResourceIndex(v29, v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPipelineDescriptorWithoutResourceIndex);

        if (objc_msgSend(v32, "isRasterizationEnabled"))
        {
          objc_msgSend(v32, "setVertexFunction:", a1[287]);
          objc_msgSend(v32, "setFragmentFunction:", a1[286]);
        }
        else
        {
          objc_msgSend(v32, "setVertexFunction:", a1[288]);
        }
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "defaultDevice"));
        v37 = objc_msgSend(v36, "newRenderPipelineStateWithDescriptor:error:", v32, 0);
LABEL_25:
        v12 = v37;

        if (!v12)
          goto LABEL_22;
        goto LABEL_2;
      }
    }
    else
    {
      v33 = Object[8];
      if (v33 && a1[289])
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "renderPipelineDescriptorMap"));
        MTLTileRenderPipelineDescriptor = MakeMTLTileRenderPipelineDescriptor(v33, v34);
        v32 = (void *)objc_claimAutoreleasedReturnValue(MTLTileRenderPipelineDescriptor);

        objc_msgSend(v32, "setTileFunction:", a1[289]);
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)*a1 + 8), "defaultDevice"));
        v37 = objc_msgSend(v36, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v32, 0, 0, 0);
        goto LABEL_25;
      }
    }

    v12 = 0;
    goto LABEL_22;
  }
LABEL_2:
  objc_msgSend(v11, "setRenderPipelineState:", v12);
  v13 = *(_DWORD *)(a6 + 8);
  if (v13 == -16137 || v13 == -15297 || v13 == -15486)
  {
    v39 = vdupq_n_s64(1uLL);
    v40 = 1;
    objc_msgSend(v11, "dispatchThreadsPerTile:", &v39);
  }
  else
  {
    objc_msgSend(v11, "drawPrimitives:vertexStart:vertexCount:instanceCount:", 3, 0, 0, 1);
  }
LABEL_22:

  return v12;
}

void sub_1BECF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::__emplace_unique_key_args<unsigned int,unsigned int &,GTEncoderSampleIndexInfo>(uint64_t a1, unsigned int a2, int a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  char *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = (char *)operator new(0x38uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_DWORD *)v14 + 4) = a3;
  v15 = a4[1];
  *(_OWORD *)(v14 + 24) = *a4;
  *(_OWORD *)(v14 + 40) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BEF7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id GTSampleBufferManager::CurrentSampleBuffer(GTSampleBufferManager *this)
{
  int v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;

  v2 = *((_DWORD *)this + 12);
  v3 = (v2 + 3) / (*((_DWORD *)this + 2) >> 3);
  v5 = (_QWORD *)*((_QWORD *)this + 3);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v6 = v4 - v5;
  if (v6 <= v3)
  {
    if (v5 != v4)
      *((_DWORD *)v4 - 1) = v2;
    v7 = *((_QWORD *)this + 5);
    if ((unint64_t)v4 >= v7)
    {
      v9 = v7 - (_QWORD)v5;
      if (v9 >> 2 <= v6 + 1)
        v10 = v6 + 1;
      else
        v10 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v11);
      v13 = &v12[8 * v6];
      v15 = &v12[8 * v14];
      *(_QWORD *)v13 = 0;
      v8 = v13 + 8;
      v17 = (char *)*((_QWORD *)this + 3);
      v16 = (char *)*((_QWORD *)this + 4);
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v13 - 1) = v18;
          v13 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)*((_QWORD *)this + 3);
      }
      *((_QWORD *)this + 3) = v13;
      *((_QWORD *)this + 4) = v8;
      *((_QWORD *)this + 5) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v4 = 0;
      v8 = v4 + 1;
    }
    *((_QWORD *)this + 4) = v8;
    v19 = *((_DWORD *)this + 13) + *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = 0;
    *((_DWORD *)this + 13) = v19;
    if ((unint64_t)objc_msgSend(*((id *)this + 2), "count") <= v3)
    {
      v20 = objc_autoreleasePoolPush();
      v21 = *(void **)this;
      v22 = *((unsigned int *)this + 2);
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("GTMTLReplayer_StreamingManager_Buffer_%u"), v3));
      v24 = objc_msgSend(v21, "newCounterSampleBufferWithLength:label:error:", v22, v23, 0);

      if (v24)
        objc_msgSend(*((id *)this + 2), "addObject:", v24);

      objc_autoreleasePoolPop(v20);
    }
  }
  if ((unint64_t)objc_msgSend(*((id *)this + 2), "count") <= v3)
    v25 = 0;
  else
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 2), "objectAtIndexedSubscript:", v3));
  return v25;
}

void sub_1BF128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v6);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1BF5DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void GTUSCSamplingStreamingManagerHelper::InitQueryShaderInfo(GTUSCSamplingStreamingManagerHelper *this, GTUSCSamplingStreamingManager *a2)
{
  GTUSCSamplingStreamingManagerHelper *v2;
  GTUSCSamplingStreamingManagerHelper *v3;
  GTUSCSamplingStreamingManagerHelper *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned int j;
  void *v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *m;
  void *v36;
  void *v37;
  unsigned int v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  unint64_t n;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  void *ii;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  unsigned int v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  unsigned int v64;
  id v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t jj;
  void *v71;
  void *v72;
  void *v73;
  unint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  void *v98;
  BOOL v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  unint64_t v109;
  id v110;
  unint64_t v111;
  unint64_t k;
  unint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[2];
  _QWORD v124[2];
  _QWORD v125[2];
  _QWORD v126[2];
  _BYTE v127[128];
  _BYTE v128[128];
  const __CFString *v129;
  void *v130;

  GTUSCSamplingStreamingManagerHelper::Init(this, a2);
  GTUSCSamplingStreamingManagerHelper::SetupGPURawCounters(v2);
  v3 = (GTUSCSamplingStreamingManagerHelper *)objc_msgSend(*((id *)&xmmword_752038 + 1), "count");
  if (v3)
  {
    v4 = v3;
    v5 = v3 != (GTUSCSamplingStreamingManagerHelper *)((char *)&dword_0 + 1);
    v6 = (unint64_t)v3 - 1 <= 1 ? 1uLL : (unint64_t)v3 - 1;
    std::vector<std::vector<GTMMappedBuffer>>::reserve(&xmmword_752958, v6);
    std::vector<std::vector<GTMMappedBuffer>>::reserve(&qword_752940, v6);
    std::vector<std::vector<GTMMappedBuffer>>::reserve(&xmmword_752988, v6);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::reserve(&qword_7529A0, v6);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::reserve(&xmmword_7529B8, v6);
    std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>::reserve((_QWORD *)&xmmword_7529C8 + 1, v6);
    if ((unint64_t)v4 > v5)
    {
      do
        GTUSCSamplingStreamingManagerHelper::SetupBufferForSourceAtIndex((GTUSCSamplingStreamingManagerHelper *)v5++, 1);
      while (v4 != (GTUSCSamplingStreamingManagerHelper *)v5);
    }
  }
  v7 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 7));
  v8 = (void *)qword_7527F0;
  qword_7527F0 = v7;

  for (i = 0; i != 7; ++i)
  {
    v10 = (void *)qword_7527F0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_7389A0, "objectAtIndexedSubscript:", i));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v11, 0));
    objc_msgSend(v10, "addObject:", v12);

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "objectForKeyedSubscript:", CFSTR("profileCounters")));
  v110 = objc_msgSend(v13, "mutableCopy");

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "objectForKeyedSubscript:", CFSTR("profileCounters32")));
  v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v14));

  v15 = (unint64_t)objc_msgSend((id)qword_752810, "count");
  v16 = HIDWORD(qword_7528A0) > 1;
  v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*((id *)&xmmword_752038 + 1), "count")));
  v18 = (void *)xmmword_752800;
  *(_QWORD *)&xmmword_752800 = v17;

  v114 = v15 >> v16;
  v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)objc_msgSend(v110, "count") + (v15 >> v16)));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(v110, "count")));
  for (j = 0; (unint64_t)objc_msgSend(v110, "count") > j; ++j)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectAtIndexedSubscript:", j));
    v22 = objc_msgSend(v105, "containsObject:", v21);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectAtIndexedSubscript:", j));
    if (v22)
      v24 = 32;
    else
      v24 = 16;
    v129 = CFSTR("Width");
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v24));
    v130 = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v130, &v129, 1));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v23, v26));
    objc_msgSend(v106, "addObject:", v27);

    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectAtIndexedSubscript:", j));
    objc_msgSend(v19, "addObject:", v28);

  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v110, "count")));
  for (k = 0; k < (unint64_t)objc_msgSend(*((id *)&xmmword_752038 + 1), "count"); ++k)
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "availableCounters"));
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v32 = v31;
    v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v119, v128, 16);
    if (v33)
    {
      v34 = *(_QWORD *)v120;
      do
      {
        for (m = 0; m != v33; m = (char *)m + 1)
        {
          if (*(_QWORD *)v120 != v34)
            objc_enumerationMutation(v32);
          v36 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * (_QWORD)m);
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "name"));
          v38 = objc_msgSend(v19, "containsObject:", v37);

          if (v38)
          {
            v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v36, "counterValueType")));
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "name"));
            objc_msgSend(v29, "setObject:forKeyedSubscript:", v39, v40);

          }
        }
        v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v119, v128, 16);
      }
      while (v33);
    }

  }
  v41 = GTUSCSamplingStreamingManagerHelper::SubDividedCounterDictionary(v106);
  v102 = (void *)objc_claimAutoreleasedReturnValue(v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("passList")));
  v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "objectAtIndexedSubscript:", 0));

  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 4 * (_QWORD)objc_msgSend((id)qword_752810, "count") + 7));
  v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v106, "count")));
  v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v102, "count")));
  v111 = 0;
  v113 = 0;
  for (n = 0; n < (unint64_t)objc_msgSend(v107, "count"); n = v109 + 1)
  {
    v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectAtIndexedSubscript:", n));
    v109 = n;
    if (objc_msgSend(v108, "count"))
    {
      v45 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v108, "count")));
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v46 = v108;
      v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v115, v127, 16);
      if (v47)
      {
        v48 = *(_QWORD *)v116;
        do
        {
          for (ii = 0; ii != v47; ii = (char *)ii + 1)
          {
            if (*(_QWORD *)v116 != v48)
              objc_enumerationMutation(v46);
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v115 + 1)
                                                                               + 8 * (_QWORD)ii), "name"));
            objc_msgSend(v45, "addObject:", v50);

          }
          v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v115, v127, 16);
        }
        while (v47);
      }

      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", v109));
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "name"));
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v45, v52);

      objc_msgSend(v103, "addObjectsFromArray:", v45);
      v53 = objc_msgSend((id)qword_7527F0, "copy");
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v53));

      objc_msgSend(v54, "addObjectsFromArray:", v46);
      objc_msgSend((id)xmmword_752800, "addObject:", v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", v109));
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "name"));
      if (objc_msgSend(v56, "isEqualToString:", CFSTR("RDE_0")))
      {

        goto LABEL_45;
      }
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", v109));
      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "name"));
      v64 = objc_msgSend(v63, "isEqualToString:", CFSTR("RDE"));

      if (v64)
LABEL_45:
        v113 = v109;

      goto LABEL_47;
    }
    if (HIDWORD(qword_7528A0) >= 2
      && objc_msgSend((id)qword_752810, "count")
      && (v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", n)),
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "name")),
          v59 = objc_msgSend(v58, "isEqualToString:", CFSTR("RDE_1")),
          v58,
          v57,
          v59))
    {
      v60 = (void *)xmmword_752800;
      v45 = objc_msgSend((id)qword_7527F0, "mutableCopy");
      objc_msgSend(v60, "addObject:", v45);
      v111 = v109;
    }
    else
    {
      v61 = (void *)xmmword_752800;
      v45 = (id)objc_opt_new(NSMutableArray, v44);
      objc_msgSend(v61, "addObject:", v45);
    }
LABEL_47:

  }
  v65 = v103;

  if (HIDWORD(qword_7528A0) <= 1)
    v66 = (unint64_t)objc_msgSend((id)qword_752810, "count");
  else
    v66 = ((unint64_t)objc_msgSend((id)qword_752810, "count") + 1) >> 1;
  v67 = 8 * v66;
  v68 = 224 - (_QWORD)objc_msgSend((id)xmmword_752800, "count");
  if (v68 >= 8 * v66)
  {
    v69 = 0;
    do
    {
      if (v114)
      {
        for (jj = 0; jj != v114; ++jj)
        {
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)xmmword_752800, "objectAtIndexedSubscript:", v113));
          v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_752810, "objectAtIndexedSubscript:", jj));
          v73 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v72, 0));
          objc_msgSend(v71, "addObject:", v73);

        }
      }
      v74 = v114;
      if (HIDWORD(qword_7528A0) >= 2)
      {
        while (v74 < (unint64_t)objc_msgSend((id)qword_752810, "count"))
        {
          v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)xmmword_752800, "objectAtIndexedSubscript:", v111));
          v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_752810, "objectAtIndexedSubscript:", v74));
          v77 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v76, 0));
          objc_msgSend(v75, "addObject:", v77);

          ++v74;
        }
      }
      if (v69 > 2)
        break;
      ++v69;
      v68 -= v67;
    }
    while (v68 >= v67);
  }
  v78 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 2));
  v79 = (void *)xmmword_752820;
  *(_QWORD *)&xmmword_752820 = v78;

  v80 = (void *)xmmword_752820;
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("TimerNClock"), &off_738D98));
  objc_msgSend(v80, "addObject:", v81);

  v82 = (void *)xmmword_752820;
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("KickBoundary"), 0));
  objc_msgSend(v82, "addObject:", v83);

  v84 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
  v85 = (void *)*((_QWORD *)&xmmword_752820 + 1);
  *((_QWORD *)&xmmword_752820 + 1) = v84;

  v86 = (void *)*((_QWORD *)&xmmword_752820 + 1);
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("TimerNClock"), &off_738DC0));
  objc_msgSend(v86, "addObject:", v87);

  v88 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
  v89 = (void *)qword_752830;
  qword_752830 = v88;

  v90 = (void *)qword_752830;
  v91 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("KickBoundary"), 0));
  objc_msgSend(v90, "addObject:", v91);

  if (v114)
  {
    v125[0] = CFSTR("BufferSizeInKB");
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 20480));
    v125[1] = CFSTR("RingBufferSizeInKB");
    v126[0] = v92;
    v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 20480));
    v126[1] = v93;
    v94 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v126, v125, 2));
    v95 = (void *)*((_QWORD *)&xmmword_752840 + 1);
    *((_QWORD *)&xmmword_752840 + 1) = v94;

  }
  else
  {
    v123[1] = CFSTR("BufferSizeInKB");
    v124[0] = &off_739670;
    v123[0] = CFSTR("ShaderProfiler");
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 20480 * qword_7528A0));
    v124[1] = v92;
    v96 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 2));
    v93 = (void *)*((_QWORD *)&xmmword_752840 + 1);
    *((_QWORD *)&xmmword_752840 + 1) = v96;
  }

  v97 = GTUSCSamplingStreamingManagerHelper::AllocUSCSamplingAddressBuffer((GTUSCSamplingStreamingManagerHelper *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
  qword_7527B8 = (uint64_t)objc_msgSend((id)qword_7527D8, "mutableBytes");
  objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v65, CFSTR("limiter sample counters"));
  objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v29, CFSTR("Counter Info"));
  objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v104, CFSTR("Limiter Counter List Map"));
  (*(void (**)(void))(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 32) + 16))();
  HIDWORD(qword_7528A8) = 12;
  objc_msgSend(*((id *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 1), "setup");
  v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("AnalyzeBinaries")));
  v99 = v98 == 0;

  if (!v99)
  {
    v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("AnalyzeBinaries")));
    byte_7528B1 = objc_msgSend(v100, "BOOLValue");

  }
}

void sub_1C0408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::Init(GTUSCSamplingStreamingManagerHelper *this, GTUSCSamplingStreamingManager *a2)
{
  dispatch_semaphore_t v3;
  void *v4;
  void *v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  int v8;
  const __CFDictionary *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  NSString *v13;
  void *v14;
  void *v15;
  FILE *v16;
  int v17;
  id v18;
  const char *v19;
  const char *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  io_registry_entry_t v25;
  CFTypeRef v26;
  uint64_t v27;
  void *v28;
  GTPerfStatsHelper *v29;
  GTPerfStatsHelper *v30;
  void *v31;
  _UNKNOWN **v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  void *v38;
  BOOL v39;
  void *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  NSString *v47;
  void *v48;
  void *v49;
  FILE *v50;
  int v51;
  id v52;
  const char *v53;
  const char *v54;
  id v55;
  __CFString *v56;
  id v57;
  char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  NSString *v62;
  void *v63;
  void *v64;
  FILE *v65;
  int v66;
  id v67;
  const char *v68;
  const char *v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  char *v74;
  unsigned int v75;
  uint64_t v76;
  _QWORD *v77;
  id v78;
  size_t outputStructCnt;
  uint32_t outputCnt[8];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD output[8];

  if ((_QWORD)GTUSCSamplingStreamingManagerHelper::Instance(void)::instance)
    GTUSCSamplingStreamingManagerHelper::CleanUp((GTUSCSamplingStreamingManagerHelper *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
  else
    ClearCaches();
  if (!(_QWORD)xmmword_7529E8)
  {
    v3 = dispatch_semaphore_create(0);
    v4 = (void *)xmmword_7529E8;
    *(_QWORD *)&xmmword_7529E8 = v3;

  }
  *(_QWORD *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance = this;
  atomic_store((unint64_t)this, (unint64_t *)&xmmword_752AC8);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)this + 8), "defaultDevice"));
  GTAGXPerfStateControl::InitWithDevice((uint64_t)&unk_752050, v5);

  qword_752068 = 30;
  v6 = IOServiceMatching("ApplePMP");
  MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
  if (MatchingService)
  {
    v8 = 2;
    if (!dword_752780)
      v8 = 13;
  }
  else
  {
    v9 = IOServiceMatching("ApplePMPv2");
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v9);
    if (!MatchingService)
      goto LABEL_21;
    dword_752780 = 1;
    v8 = 2;
  }
  for (i = 0; i != 5; ++i)
    *((_DWORD *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + i + 471) = v8 + i;
  v11 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&qword_752070);
  if ((_DWORD)v11)
  {
    v12 = v11;
    v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", mach_error_string(v11));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("IOServiceOpen (0x%x - %@)"), v12, v14));

    v16 = __stdoutp;
    v17 = g_runningInCI;
    v18 = objc_retainAutorelease(v15);
    v19 = (const char *)objc_msgSend(v18, "UTF8String");
    v20 = "#CI_ERROR# ";
    if (!v17)
      v20 = "";
    fprintf(v16, "%s%s %u: %s\n", v20, "BOOL GTApplePMPPerfStateControl::Open(io_service_t)", 179, v19);
    v21 = objc_retainAutorelease(v18);
    GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v21, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTApplePMPPerfStateControl.mm", (uint64_t)"Open", 179, 2);

  }
  else if ((_DWORD)qword_752070
         && (memset(output, 0, sizeof(output)),
             outputCnt[0] = 1,
             !IOConnectCallMethod(qword_752070, dword_752784, 0, 0, 0, 0, (uint64_t *)output, outputCnt, 0, 0)))
  {
    qword_752778 = *(_QWORD *)&output[0];
    if (*(_QWORD *)&output[0])
    {
      v43 = 0;
      while ((_DWORD)qword_752070)
      {
        *(_QWORD *)&output[0] = v43;
        v44 = 16;
        if (!dword_752780)
          v44 = 10;
        outputStructCnt = v44;
        v45 = IOConnectCallMethod(qword_752070, dword_75278C, (const uint64_t *)output, 1u, 0, 0, 0, 0, outputCnt, &outputStructCnt);
        v46 = v45;
        if ((_DWORD)v45)
        {
          v47 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", mach_error_string(v45));
          v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
          v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("_getDVFSDomainName (0x%x - %@)"), v46, v48));

          v50 = __stdoutp;
          v51 = g_runningInCI;
          v52 = objc_retainAutorelease(v49);
          v53 = (const char *)objc_msgSend(v52, "UTF8String");
          v54 = "#CI_ERROR# ";
          if (!v51)
            v54 = "";
          fprintf(v50, "%s%s %u: %s\n", v54, "NSString *GTApplePMPPerfStateControl::GetDVFSDomainName(uint64_t)", 263, v53);
          v55 = objc_retainAutorelease(v52);
          GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v55, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTApplePMPPerfStateControl.mm", (uint64_t)"GetDVFSDomainName", 263, 2);

        }
        if (outputStructCnt)
        {
          v56 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", outputCnt));
          if (!v56)
            goto LABEL_61;
        }
        else
        {
          v56 = &stru_7282A8;
        }
        if (!-[__CFString length](v56, "length"))
          goto LABEL_61;
        v57 = -[__CFString copy](v56, "copy");
        v58 = (char *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 56 * v43;
        v59 = (void *)*((_QWORD *)v58 + 10);
        *((_QWORD *)v58 + 10) = v57;

        if (!(_DWORD)qword_752070)
          goto LABEL_61;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        memset(outputCnt, 0, sizeof(outputCnt));
        *(_QWORD *)&output[0] = v43;
        LODWORD(outputStructCnt) = 3;
        v60 = IOConnectCallMethod(qword_752070, dword_752788, (const uint64_t *)output, 1u, 0, 0, (uint64_t *)outputCnt, (uint32_t *)&outputStructCnt, 0, 0);
        v61 = v60;
        if ((_DWORD)v60)
        {
          v62 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", mach_error_string(v60));
          v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
          v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("_getNumDVFSStates (0x%x - %@)"), v61, v63));

          v65 = __stdoutp;
          v66 = g_runningInCI;
          v67 = objc_retainAutorelease(v64);
          v68 = (const char *)objc_msgSend(v67, "UTF8String");
          v69 = "#CI_ERROR# ";
          if (!v66)
            v69 = "";
          fprintf(v65, "%s%s %u: %s\n", v69, "uint64_t GTApplePMPPerfStateControl::GetNumDVFSStates(uint64_t, uint64_t *, uint64_t *)", 225, v68);
          v70 = objc_retainAutorelease(v67);
          GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v70, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTApplePMPPerfStateControl.mm", (uint64_t)"GetNumDVFSStates", 225, 2);

        }
        v71 = *(_QWORD *)outputCnt;
        if (!*(_QWORD *)outputCnt)
          goto LABEL_61;
        v72 = 0;
        *(_OWORD *)(v58 + 120) = *(_OWORD *)&outputCnt[2];
        while (v72 < objc_msgSend(&off_738B38, "count"))
        {
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_738B38, "objectAtIndexedSubscript:", v72));
          if (-[__CFString hasPrefix:](v56, "hasPrefix:", v73))
          {
            v74 = (char *)objc_msgSend(v73, "length");
            if (v74 + 1 >= -[__CFString length](v56, "length"))
            {
              v75 = objc_msgSend(v73, "hasPrefix:", CFSTR("DCS"));
              v76 = v71 - 1;
              v77 = (_QWORD *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 7 * v43;
              v77[12] = (unint64_t)(v71 - 1) >> (v75 ^ 1);
              v77[13] = v71 - 1;
              if (!v75)
                v76 = 0;
              v77[11] = v76;

              break;
            }
          }

          ++v72;
        }

        if (++v43 >= (unint64_t)qword_752778)
          goto LABEL_21;
      }
      v56 = 0;
LABEL_61:

    }
  }
  else
  {
    qword_752778 = 0;
  }
LABEL_21:
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)this + 8), "defaultDevice"));
  v23 = DEVICEOBJECT(v22);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v25 = objc_msgSend(v24, "acceleratorPort");

  v26 = GTProfilerConfigurationVariables(v25);
  v27 = objc_claimAutoreleasedReturnValue(v26);
  v28 = (void *)qword_7527E8;
  qword_7527E8 = v27;

  v29 = [GTPerfStatsHelper alloc];
  v30 = -[GTPerfStatsHelper initWithConfigurationVariables:](v29, "initWithConfigurationVariables:", qword_7527E8);
  v31 = (void *)*((_QWORD *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 1);
  *((_QWORD *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 1) = v30;

  objc_msgSend(*((id *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 1), "setup");
  v32 = GTAGXPerfStateControl::ConsistentGPUPerfStateLevel((GTAGXPerfStateControl *)&unk_752050, 0);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  v34 = (void *)qword_752858;
  qword_752858 = v33;

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("GPUState")));
  if (!v35
    || (v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("GPUState"))), v37 = objc_msgSend(v36, "unsignedIntValue"), v36, v35, !v37))
  {
    if (qword_752858)
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_752858, "objectForKeyedSubscript:", CFSTR("mapped state")));
      if (v38)
      {
        v78 = v38;
        v39 = objc_msgSend(v38, "count") == (char *)&dword_0 + 3;
        v38 = v78;
        if (v39)
        {
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "objectAtIndexedSubscript:", 1));
          v41 = objc_msgSend(v40, "unsignedIntValue");
          v42 = GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
          *(_DWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 64) = 100 * v41;
          *(_DWORD *)(v42 + 68) = 100 * v41;

          v38 = v78;
        }
      }

    }
  }
}

void sub_1C0F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id GTUSCSamplingStreamingManagerHelper::SubDividedCounterDictionary(void *a1)
{
  id v1;
  void *v2;
  id v3;
  _QWORD v5[4];
  id v6;
  uint64_t *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy_;
  v13 = __Block_byref_object_dispose_;
  v14 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = ___ZNK35GTUSCSamplingStreamingManagerHelper27SubDividedCounterDictionaryEP14NSMutableArrayIP19GPURawCounterSelectE_block_invoke;
  v5[3] = &unk_726918;
  v7 = &v9;
  v8 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
  v1 = a1;
  v6 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v5));
  objc_msgSend(v2, "setQueuePriority:", 8);
  objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v2);
  objc_msgSend(v2, "waitUntilFinished");
  v3 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v3;
}

void sub_1C110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void ___ZNK35GTUSCSamplingStreamingManagerHelper27SubDividedCounterDictionaryEP14NSMutableArrayIP19GPURawCounterSelectE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[6] + 16), "firstObject"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subDivideCounterList:withOptions:", a1[4], 0));
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1C11BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<GTMMappedBuffer>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::vector<GTMMappedBuffer>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

_QWORD *std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

_QWORD *std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      abort();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[8 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<NSString * {__strong}>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

void GTUSCSamplingStreamingManagerHelper::SetupBufferForSourceAtIndex(GTUSCSamplingStreamingManagerHelper *this, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  DynamicBuffer *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  DynamicBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void **v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void **v54;
  void **v55;
  uint64_t v56;
  dispatch_semaphore_t v57;
  dispatch_semaphore_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  dispatch_semaphore_t *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  NSObject *v71;
  int64x2_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  dispatch_semaphore_t v136;
  dispatch_semaphore_t v137;
  dispatch_semaphore_t *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  dispatch_semaphore_t *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  NSObject *v151;
  void **v152;
  void **v153;
  uint64_t v154;
  dispatch_semaphore_t v155;
  dispatch_semaphore_t v156;
  dispatch_semaphore_t *v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  dispatch_semaphore_t *v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  NSObject *v170;
  void **v171;
  void **v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  void *v176;
  void **v177;
  int64x2_t v178;
  void **v179;
  __int128 *v180;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", this));
  v175 = 0uLL;
  v176 = 0;
  v4 = *((_QWORD *)&xmmword_752958 + 1);
  if (*((_QWORD *)&xmmword_752958 + 1) >= (unint64_t)xmmword_752968)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&xmmword_752958 + 1) - xmmword_752958) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((uint64_t)(xmmword_752968 - xmmword_752958) >> 3) > v7)
      v7 = 0x5555555555555556 * ((uint64_t)(xmmword_752968 - xmmword_752958) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(xmmword_752968 - xmmword_752958) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    v180 = &xmmword_752968;
    v9 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v8);
    v10 = &v9[3 * v6];
    v177 = v9;
    v178.i64[0] = (uint64_t)v10;
    v179 = &v9[3 * v11];
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    *(_OWORD *)v10 = v175;
    v10[2] = v176;
    v175 = 0uLL;
    v176 = 0;
    v178.i64[1] = (uint64_t)(v10 + 3);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(&xmmword_752958, &v177);
    v5 = *((_QWORD *)&xmmword_752958 + 1);
    std::__split_buffer<std::vector<GTMMappedBuffer>>::~__split_buffer((uint64_t)&v177);
  }
  else
  {
    **((_QWORD **)&xmmword_752958 + 1) = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = v4 + 24;
    *((_QWORD *)&xmmword_752958 + 1) = v4 + 24;
  }
  *((_QWORD *)&xmmword_752958 + 1) = v5;
  v177 = (void **)&v175;
  std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v177);
  std::vector<GTMMappedBuffer>::reserve((uint64_t *)(*((_QWORD *)&xmmword_752958 + 1) - 24), objc_msgSend(v3, "ringBufferNum"));
  if ((a2 & 1) == 0)
  {
    v14 = objc_msgSend(v3, "ringBufferNum");
    v15 = v14;
    v16 = (DynamicBuffer *)xmmword_752978;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(xmmword_752978 - *((_QWORD *)&xmmword_752968 + 1)) >> 4);
    v18 = v14 - v17;
    if (v14 <= v17)
    {
      if (v14 < v17)
      {
        v65 = *((_QWORD *)&xmmword_752968 + 1) + 48 * v14;
        while (v16 != (DynamicBuffer *)v65)
        {
          v66 = (void *)*((_QWORD *)v16 - 3);
          if (v66)
          {
            *((_QWORD *)v16 - 2) = v66;
            operator delete(v66);
          }
          v16 = (DynamicBuffer *)((char *)v16 - 48);
        }
        *(_QWORD *)&xmmword_752978 = v65;
      }
    }
    else if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&xmmword_752978 + 1) - xmmword_752978) >> 4) >= v18)
    {
      v173 = xmmword_752978 + 48 * v18;
      v174 = 48 * v14 - 16 * ((uint64_t)(xmmword_752978 - *((_QWORD *)&xmmword_752968 + 1)) >> 4);
      do
      {
        DynamicBuffer::DynamicBuffer(v16);
        v16 = (DynamicBuffer *)((char *)v16 + 48);
        v174 -= 48;
      }
      while (v174);
      *(_QWORD *)&xmmword_752978 = v173;
    }
    else
    {
      v180 = (__int128 *)((char *)&xmmword_752978 + 8);
      v19 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&xmmword_752978 + 1) - *((_QWORD *)&xmmword_752968 + 1)) >> 4);
      if (v19 <= v14)
        v19 = v14;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&xmmword_752978 + 1) - *((_QWORD *)&xmmword_752968 + 1)) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v20 = 0x555555555555555;
      else
        v20 = v19;
      v21 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<DynamicBuffer>>(v20);
      v22 = (DynamicBuffer *)&v21[6 * v17];
      v177 = v21;
      v178.i64[0] = (uint64_t)v22;
      v178.i64[1] = (uint64_t)v22;
      v179 = &v21[6 * v23];
      v24 = 3 * v15;
      v25 = &v21[6 * v15];
      v26 = 16 * v24 - 48 * v17;
      do
      {
        DynamicBuffer::DynamicBuffer(v22);
        v22 = (DynamicBuffer *)((char *)v22 + 48);
        v26 -= 48;
      }
      while (v26);
      v178.i64[1] = (uint64_t)v25;
      std::vector<DynamicBuffer>::__swap_out_circular_buffer((uint64_t *)&xmmword_752968 + 1, &v177);
      std::__split_buffer<DynamicBuffer>::~__split_buffer((uint64_t)&v177);
    }
  }
  v175 = 0uLL;
  v176 = 0;
  v12 = xmmword_752948;
  if ((unint64_t)xmmword_752948 >= *((_QWORD *)&xmmword_752948 + 1))
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_752948 - qword_752940) >> 3);
    v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((*((_QWORD *)&xmmword_752948 + 1) - qword_752940) >> 3) > v28)
      v28 = 0x5555555555555556 * ((*((_QWORD *)&xmmword_752948 + 1) - qword_752940) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&xmmword_752948 + 1) - qword_752940) >> 3) >= 0x555555555555555)
      v29 = 0xAAAAAAAAAAAAAAALL;
    else
      v29 = v28;
    v180 = (__int128 *)((char *)&xmmword_752948 + 8);
    v30 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v29);
    v31 = &v30[3 * v27];
    v177 = v30;
    v178.i64[0] = (uint64_t)v31;
    v179 = &v30[3 * v32];
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 0;
    *(_OWORD *)v31 = v175;
    v31[2] = v176;
    v175 = 0uLL;
    v176 = 0;
    v178.i64[1] = (uint64_t)(v31 + 3);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(&qword_752940, &v177);
    v13 = xmmword_752948;
    std::__split_buffer<std::vector<GTMMappedBuffer>>::~__split_buffer((uint64_t)&v177);
  }
  else
  {
    *(_OWORD *)xmmword_752948 = 0uLL;
    *(_QWORD *)(v12 + 16) = 0;
    *(_OWORD *)v12 = v175;
    *(_QWORD *)(v12 + 16) = v176;
    v175 = 0uLL;
    v176 = 0;
    v13 = v12 + 24;
    *(_QWORD *)&xmmword_752948 = v12 + 24;
  }
  *(_QWORD *)&xmmword_752948 = v13;
  v177 = (void **)&v175;
  std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v177);
  std::vector<GTMMappedBuffer>::reserve((uint64_t *)(xmmword_752948 - 24), objc_msgSend(v3, "ringBufferNum"));
  v175 = 0uLL;
  v176 = 0;
  v33 = *((_QWORD *)&xmmword_752988 + 1);
  if (*((_QWORD *)&xmmword_752988 + 1) >= qword_752998)
  {
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&xmmword_752988 + 1) - xmmword_752988) >> 3);
    v36 = v35 + 1;
    if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((uint64_t)(qword_752998 - xmmword_752988) >> 3) > v36)
      v36 = 0x5555555555555556 * ((uint64_t)(qword_752998 - xmmword_752988) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(qword_752998 - xmmword_752988) >> 3) >= 0x555555555555555)
      v37 = 0xAAAAAAAAAAAAAAALL;
    else
      v37 = v36;
    v180 = (__int128 *)&qword_752998;
    v38 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v37);
    v39 = &v38[3 * v35];
    v177 = v38;
    v178.i64[0] = (uint64_t)v39;
    v179 = &v38[3 * v40];
    *v39 = 0;
    v39[1] = 0;
    v39[2] = 0;
    *(_OWORD *)v39 = v175;
    v39[2] = v176;
    v175 = 0uLL;
    v176 = 0;
    v178.i64[1] = (uint64_t)(v39 + 3);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(&xmmword_752988, &v177);
    v34 = *((_QWORD *)&xmmword_752988 + 1);
    std::__split_buffer<std::vector<GTMMappedBuffer>>::~__split_buffer((uint64_t)&v177);
  }
  else
  {
    **((_QWORD **)&xmmword_752988 + 1) = 0;
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_OWORD *)v33 = v175;
    *(_QWORD *)(v33 + 16) = v176;
    v175 = 0uLL;
    v176 = 0;
    v34 = v33 + 24;
    *((_QWORD *)&xmmword_752988 + 1) = v33 + 24;
  }
  *((_QWORD *)&xmmword_752988 + 1) = v34;
  v177 = (void **)&v175;
  std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v177);
  std::vector<GTMMappedBuffer>::reserve((uint64_t *)(*((_QWORD *)&xmmword_752988 + 1) - 24), objc_msgSend(v3, "ringBufferNum"));
  v175 = 0uLL;
  v176 = 0;
  v41 = xmmword_7529A8;
  if ((unint64_t)xmmword_7529A8 >= *((_QWORD *)&xmmword_7529A8 + 1))
  {
    v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)xmmword_7529A8 - qword_7529A0) >> 3);
    v44 = v43 + 1;
    if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((*((_QWORD *)&xmmword_7529A8 + 1) - qword_7529A0) >> 3) > v44)
      v44 = 0x5555555555555556 * ((*((_QWORD *)&xmmword_7529A8 + 1) - qword_7529A0) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&xmmword_7529A8 + 1) - qword_7529A0) >> 3) >= 0x555555555555555)
      v45 = 0xAAAAAAAAAAAAAAALL;
    else
      v45 = v44;
    v180 = (__int128 *)((char *)&xmmword_7529A8 + 8);
    v46 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v45);
    v47 = &v46[3 * v43];
    v177 = v46;
    v178.i64[0] = (uint64_t)v47;
    v179 = &v46[3 * v48];
    *v47 = 0;
    v47[1] = 0;
    v47[2] = 0;
    *(_OWORD *)v47 = v175;
    v47[2] = v176;
    v175 = 0uLL;
    v176 = 0;
    v178.i64[1] = (uint64_t)(v47 + 3);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(&qword_7529A0, &v177);
    v42 = xmmword_7529A8;
    std::__split_buffer<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::~__split_buffer((uint64_t)&v177);
  }
  else
  {
    *(_OWORD *)xmmword_7529A8 = 0uLL;
    *(_QWORD *)(v41 + 16) = 0;
    *(_OWORD *)v41 = v175;
    *(_QWORD *)(v41 + 16) = v176;
    v175 = 0uLL;
    v176 = 0;
    v42 = v41 + 24;
    *(_QWORD *)&xmmword_7529A8 = v41 + 24;
  }
  *(_QWORD *)&xmmword_7529A8 = v42;
  v177 = (void **)&v175;
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v177);
  std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>::reserve((_QWORD *)(xmmword_7529A8 - 24), objc_msgSend(v3, "ringBufferNum"));
  v175 = 0uLL;
  v176 = 0;
  v49 = *((_QWORD *)&xmmword_7529B8 + 1);
  if (*((_QWORD *)&xmmword_7529B8 + 1) >= (unint64_t)xmmword_7529C8)
  {
    v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&xmmword_7529B8 + 1) - xmmword_7529B8) >> 3);
    v52 = v51 + 1;
    if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((uint64_t)(xmmword_7529C8 - xmmword_7529B8) >> 3) > v52)
      v52 = 0x5555555555555556 * ((uint64_t)(xmmword_7529C8 - xmmword_7529B8) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(xmmword_7529C8 - xmmword_7529B8) >> 3) >= 0x555555555555555)
      v53 = 0xAAAAAAAAAAAAAAALL;
    else
      v53 = v52;
    v180 = &xmmword_7529C8;
    v54 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v53);
    v55 = &v54[3 * v51];
    v177 = v54;
    v178.i64[0] = (uint64_t)v55;
    v179 = &v54[3 * v56];
    *v55 = 0;
    v55[1] = 0;
    v55[2] = 0;
    *(_OWORD *)v55 = v175;
    v55[2] = v176;
    v175 = 0uLL;
    v176 = 0;
    v178.i64[1] = (uint64_t)(v55 + 3);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(&xmmword_7529B8, &v177);
    v50 = *((_QWORD *)&xmmword_7529B8 + 1);
    std::__split_buffer<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::~__split_buffer((uint64_t)&v177);
  }
  else
  {
    **((_QWORD **)&xmmword_7529B8 + 1) = 0;
    *(_QWORD *)(v49 + 8) = 0;
    *(_QWORD *)(v49 + 16) = 0;
    *(_OWORD *)v49 = v175;
    *(_QWORD *)(v49 + 16) = v176;
    v175 = 0uLL;
    v176 = 0;
    v50 = v49 + 24;
    *((_QWORD *)&xmmword_7529B8 + 1) = v49 + 24;
  }
  *((_QWORD *)&xmmword_7529B8 + 1) = v50;
  v177 = (void **)&v175;
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v177);
  std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>::reserve((_QWORD *)(*((_QWORD *)&xmmword_7529B8 + 1) - 24), objc_msgSend(v3, "ringBufferNum"));
  v57 = dispatch_semaphore_create(1);
  v58 = v57;
  v59 = qword_7529D8;
  if (qword_7529D8 >= (unint64_t)qword_7529E0)
  {
    v61 = (qword_7529D8 - *((_QWORD *)&xmmword_7529C8 + 1)) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      abort();
    v62 = (qword_7529E0 - *((_QWORD *)&xmmword_7529C8 + 1)) >> 2;
    if (v62 <= v61 + 1)
      v62 = v61 + 1;
    if ((unint64_t)(qword_7529E0 - *((_QWORD *)&xmmword_7529C8 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    v180 = (__int128 *)&qword_7529E0;
    if (v63)
      v63 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v63);
    else
      v64 = 0;
    v67 = (dispatch_semaphore_t *)(v63 + 8 * v61);
    v68 = v63 + 8 * v64;
    v179 = (void **)v68;
    *v67 = v58;
    v60 = (uint64_t)(v67 + 1);
    v178.i64[1] = (uint64_t)(v67 + 1);
    v70 = (_QWORD *)*((_QWORD *)&xmmword_7529C8 + 1);
    v69 = (_QWORD *)qword_7529D8;
    if (qword_7529D8 == *((_QWORD *)&xmmword_7529C8 + 1))
    {
      v72 = vdupq_n_s64(qword_7529D8);
    }
    else
    {
      do
      {
        v71 = *--v69;
        *v69 = 0;
        *--v67 = v71;
      }
      while (v69 != v70);
      v72 = *(int64x2_t *)((char *)&xmmword_7529C8 + 8);
      v60 = v178.i64[1];
      v68 = (uint64_t)v179;
    }
    *((_QWORD *)&xmmword_7529C8 + 1) = v67;
    qword_7529D8 = v60;
    v178 = v72;
    v73 = qword_7529E0;
    qword_7529E0 = v68;
    v179 = (void **)v73;
    v177 = (void **)v72.i64[0];
    std::__split_buffer<NSString * {__strong}>::~__split_buffer((uint64_t)&v177);
  }
  else
  {
    *(_QWORD *)qword_7529D8 = v57;
    v60 = v59 + 8;
  }
  qword_7529D8 = v60;
  v74 = objc_msgSend(v3, "ringBufferNum", v175, v176);
  dword_75289C += v74;
  v75 = objc_msgSend(v3, "ringBufferNum");
  v76 = 0;
  v77 = qword_7528A0;
  if (qword_7528A0 <= v75)
    v77 = v75;
  LODWORD(qword_7528A0) = v77;
  while (v76 < objc_msgSend(v3, "ringBufferNum"))
  {
    if (a2)
    {
      v78 = *((_QWORD *)&xmmword_752958 + 1);
      v79 = *(_QWORD *)(*((_QWORD *)&xmmword_752958 + 1) - 16);
      v80 = *(_QWORD *)(*((_QWORD *)&xmmword_752958 + 1) - 8);
      if (v79 >= v80)
      {
        v86 = *(_QWORD *)(*((_QWORD *)&xmmword_752958 + 1) - 24);
        v87 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v79 - v86) >> 3);
        v88 = v87 + 1;
        if (v87 + 1 > 0x222222222222222)
          abort();
        v89 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v80 - v86) >> 3);
        if (2 * v89 > v88)
          v88 = 2 * v89;
        if (v89 >= 0x111111111111111)
          v90 = 0x222222222222222;
        else
          v90 = v88;
        v180 = (__int128 *)(*((_QWORD *)&xmmword_752958 + 1) - 8);
        if (v90)
          v90 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v90);
        else
          v91 = 0;
        v177 = (void **)v90;
        v178.i64[0] = v90 + 120 * v87;
        v178.i64[1] = v178.i64[0];
        v179 = (void **)(v90 + 120 * v91);
        GTMMappedBuffer::GTMMappedBuffer((GTMMappedBuffer *)v178.i64[0], 0x8000000uLL, 0x1000000u);
        v178.i64[1] += 120;
        std::vector<GTMMappedBuffer>::__swap_out_circular_buffer((uint64_t *)(v78 - 24), &v177);
        v81 = *(_QWORD *)(v78 - 16);
        std::__split_buffer<GTMMappedBuffer>::~__split_buffer((uint64_t)&v177);
      }
      else
      {
        GTMMappedBuffer::GTMMappedBuffer(*(GTMMappedBuffer **)(*((_QWORD *)&xmmword_752958 + 1) - 16), 0x8000000uLL, 0x1000000u);
        v81 = v79 + 120;
        *(_QWORD *)(v78 - 16) = v79 + 120;
      }
      *(_QWORD *)(v78 - 16) = v81;
      v98 = *((_QWORD *)&xmmword_752988 + 1);
      v99 = *(_QWORD *)(*((_QWORD *)&xmmword_752988 + 1) - 16);
      v100 = *(_QWORD *)(*((_QWORD *)&xmmword_752988 + 1) - 8);
      if (v99 >= v100)
      {
        v102 = *(_QWORD *)(*((_QWORD *)&xmmword_752988 + 1) - 24);
        v103 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v99 - v102) >> 3);
        v104 = v103 + 1;
        if (v103 + 1 > 0x222222222222222)
          abort();
        v105 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v100 - v102) >> 3);
        if (2 * v105 > v104)
          v104 = 2 * v105;
        if (v105 >= 0x111111111111111)
          v106 = 0x222222222222222;
        else
          v106 = v104;
        v180 = (__int128 *)(*((_QWORD *)&xmmword_752988 + 1) - 8);
        if (v106)
          v106 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v106);
        else
          v107 = 0;
        v177 = (void **)v106;
        v178.i64[0] = v106 + 120 * v103;
        v178.i64[1] = v178.i64[0];
        v179 = (void **)(v106 + 120 * v107);
        GTMMappedBuffer::GTMMappedBuffer((GTMMappedBuffer *)v178.i64[0], 0x8000000uLL, 0x2000000u);
        v178.i64[1] += 120;
        std::vector<GTMMappedBuffer>::__swap_out_circular_buffer((uint64_t *)(v98 - 24), &v177);
        v101 = *(_QWORD *)(v98 - 16);
        std::__split_buffer<GTMMappedBuffer>::~__split_buffer((uint64_t)&v177);
      }
      else
      {
        GTMMappedBuffer::GTMMappedBuffer(*(GTMMappedBuffer **)(*((_QWORD *)&xmmword_752988 + 1) - 16), 0x8000000uLL, 0x2000000u);
        v101 = v99 + 120;
        *(_QWORD *)(v98 - 16) = v99 + 120;
      }
      *(_QWORD *)(v98 - 16) = v101;
      v118 = xmmword_752948;
      v119 = *(_QWORD *)(xmmword_752948 - 16);
      v120 = *(_QWORD *)(xmmword_752948 - 8);
      if (v119 < v120)
      {
        GTMMappedBuffer::GTMMappedBuffer(*(GTMMappedBuffer **)(xmmword_752948 - 16), 0x100000uLL, 0x100000u);
LABEL_144:
        v128 = v119 + 120;
        *(_QWORD *)(v118 - 16) = v119 + 120;
        goto LABEL_158;
      }
      v121 = *(_QWORD *)(xmmword_752948 - 24);
      v122 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v119 - v121) >> 3);
      v123 = v122 + 1;
      if (v122 + 1 > 0x222222222222222)
        abort();
      v124 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v120 - v121) >> 3);
      if (2 * v124 > v123)
        v123 = 2 * v124;
      if (v124 >= 0x111111111111111)
        v125 = 0x222222222222222;
      else
        v125 = v123;
      v180 = (__int128 *)(xmmword_752948 - 8);
      if (v125)
        v125 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v125);
      else
        v126 = 0;
      v177 = (void **)v125;
      v178.i64[0] = v125 + 120 * v122;
      v178.i64[1] = v178.i64[0];
      v179 = (void **)(v125 + 120 * v126);
      GTMMappedBuffer::GTMMappedBuffer((GTMMappedBuffer *)v178.i64[0], 0x100000uLL, 0x100000u);
      v178.i64[1] += 120;
      std::vector<GTMMappedBuffer>::__swap_out_circular_buffer((uint64_t *)(v118 - 24), &v177);
    }
    else
    {
      v82 = *((_QWORD *)&xmmword_752988 + 1);
      v83 = *(_QWORD *)(*((_QWORD *)&xmmword_752988 + 1) - 16);
      v84 = *(_QWORD *)(*((_QWORD *)&xmmword_752988 + 1) - 8);
      if (v83 >= v84)
      {
        v92 = *(_QWORD *)(*((_QWORD *)&xmmword_752988 + 1) - 24);
        v93 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v83 - v92) >> 3);
        v94 = v93 + 1;
        if (v93 + 1 > 0x222222222222222)
          abort();
        v95 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v84 - v92) >> 3);
        if (2 * v95 > v94)
          v94 = 2 * v95;
        if (v95 >= 0x111111111111111)
          v96 = 0x222222222222222;
        else
          v96 = v94;
        v180 = (__int128 *)(*((_QWORD *)&xmmword_752988 + 1) - 8);
        if (v96)
          v96 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v96);
        else
          v97 = 0;
        v177 = (void **)v96;
        v178.i64[0] = v96 + 120 * v93;
        v178.i64[1] = v178.i64[0];
        v179 = (void **)(v96 + 120 * v97);
        GTMMappedBuffer::GTMMappedBuffer((GTMMappedBuffer *)v178.i64[0], 0x4000uLL, 0x4000u);
        v178.i64[1] += 120;
        std::vector<GTMMappedBuffer>::__swap_out_circular_buffer((uint64_t *)(v82 - 24), &v177);
        v85 = *(_QWORD *)(v82 - 16);
        std::__split_buffer<GTMMappedBuffer>::~__split_buffer((uint64_t)&v177);
      }
      else
      {
        GTMMappedBuffer::GTMMappedBuffer(*(GTMMappedBuffer **)(*((_QWORD *)&xmmword_752988 + 1) - 16), 0x4000uLL, 0x4000u);
        v85 = v83 + 120;
        *(_QWORD *)(v82 - 16) = v83 + 120;
      }
      *(_QWORD *)(v82 - 16) = v85;
      v108 = *((_QWORD *)&xmmword_752958 + 1);
      v109 = *(_QWORD *)(*((_QWORD *)&xmmword_752958 + 1) - 16);
      v110 = *(_QWORD *)(*((_QWORD *)&xmmword_752958 + 1) - 8);
      if (v109 >= v110)
      {
        v112 = *(_QWORD *)(*((_QWORD *)&xmmword_752958 + 1) - 24);
        v113 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v109 - v112) >> 3);
        v114 = v113 + 1;
        if (v113 + 1 > 0x222222222222222)
          abort();
        v115 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v110 - v112) >> 3);
        if (2 * v115 > v114)
          v114 = 2 * v115;
        if (v115 >= 0x111111111111111)
          v116 = 0x222222222222222;
        else
          v116 = v114;
        v180 = (__int128 *)(*((_QWORD *)&xmmword_752958 + 1) - 8);
        if (v116)
          v116 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v116);
        else
          v117 = 0;
        v177 = (void **)v116;
        v178.i64[0] = v116 + 120 * v113;
        v178.i64[1] = v178.i64[0];
        v179 = (void **)(v116 + 120 * v117);
        GTMMappedBuffer::GTMMappedBuffer((GTMMappedBuffer *)v178.i64[0], 0x4000uLL, 0x4000u);
        v178.i64[1] += 120;
        std::vector<GTMMappedBuffer>::__swap_out_circular_buffer((uint64_t *)(v108 - 24), &v177);
        v111 = *(_QWORD *)(v108 - 16);
        std::__split_buffer<GTMMappedBuffer>::~__split_buffer((uint64_t)&v177);
      }
      else
      {
        GTMMappedBuffer::GTMMappedBuffer(*(GTMMappedBuffer **)(*((_QWORD *)&xmmword_752958 + 1) - 16), 0x4000uLL, 0x4000u);
        v111 = v109 + 120;
        *(_QWORD *)(v108 - 16) = v109 + 120;
      }
      *(_QWORD *)(v108 - 16) = v111;
      v118 = xmmword_752948;
      v119 = *(_QWORD *)(xmmword_752948 - 16);
      v127 = *(_QWORD *)(xmmword_752948 - 8);
      if (v119 < v127)
      {
        GTMMappedBuffer::GTMMappedBuffer(*(GTMMappedBuffer **)(xmmword_752948 - 16), 0x4000uLL, 0x4000u);
        goto LABEL_144;
      }
      v129 = *(_QWORD *)(xmmword_752948 - 24);
      v130 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v119 - v129) >> 3);
      v131 = v130 + 1;
      if (v130 + 1 > 0x222222222222222)
        abort();
      v132 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v127 - v129) >> 3);
      if (2 * v132 > v131)
        v131 = 2 * v132;
      if (v132 >= 0x111111111111111)
        v133 = 0x222222222222222;
      else
        v133 = v131;
      v180 = (__int128 *)(xmmword_752948 - 8);
      if (v133)
        v133 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v133);
      else
        v134 = 0;
      v177 = (void **)v133;
      v178.i64[0] = v133 + 120 * v130;
      v178.i64[1] = v178.i64[0];
      v179 = (void **)(v133 + 120 * v134);
      GTMMappedBuffer::GTMMappedBuffer((GTMMappedBuffer *)v178.i64[0], 0x4000uLL, 0x4000u);
      v178.i64[1] += 120;
      std::vector<GTMMappedBuffer>::__swap_out_circular_buffer((uint64_t *)(v118 - 24), &v177);
    }
    v128 = *(_QWORD *)(v118 - 16);
    std::__split_buffer<GTMMappedBuffer>::~__split_buffer((uint64_t)&v177);
LABEL_158:
    *(_QWORD *)(v118 - 16) = v128;
    v135 = xmmword_7529A8;
    v136 = dispatch_semaphore_create(0);
    v137 = v136;
    v138 = *(dispatch_semaphore_t **)(v135 - 16);
    v139 = *(_QWORD *)(v135 - 8);
    if ((unint64_t)v138 >= v139)
    {
      v141 = *(_QWORD *)(v135 - 24);
      v142 = ((uint64_t)v138 - v141) >> 3;
      if ((unint64_t)(v142 + 1) >> 61)
        abort();
      v143 = v139 - v141;
      v144 = v143 >> 2;
      if (v143 >> 2 <= (unint64_t)(v142 + 1))
        v144 = v142 + 1;
      if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
        v145 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v145 = v144;
      v180 = (__int128 *)(v135 - 8);
      if (v145)
        v145 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v145);
      else
        v146 = 0;
      v147 = (dispatch_semaphore_t *)(v145 + 8 * v142);
      v148 = v145 + 8 * v146;
      v179 = (void **)v148;
      *v147 = v137;
      v140 = v147 + 1;
      v178.i64[1] = (uint64_t)(v147 + 1);
      v150 = *(_QWORD **)(v135 - 24);
      v149 = *(_QWORD **)(v135 - 16);
      if (v149 == v150)
      {
        v152 = *(void ***)(v135 - 16);
      }
      else
      {
        do
        {
          v151 = *--v149;
          *v149 = 0;
          *--v147 = v151;
        }
        while (v149 != v150);
        v152 = *(void ***)(v135 - 24);
        v149 = *(_QWORD **)(v135 - 16);
        v140 = (_QWORD *)v178.i64[1];
        v148 = (unint64_t)v179;
      }
      *(_QWORD *)(v135 - 24) = v147;
      v178.i64[0] = (uint64_t)v152;
      *(_QWORD *)(v135 - 16) = v140;
      v178.i64[1] = (uint64_t)v149;
      v153 = *(void ***)(v135 - 8);
      *(_QWORD *)(v135 - 8) = v148;
      v179 = v153;
      v177 = v152;
      std::__split_buffer<NSString * {__strong}>::~__split_buffer((uint64_t)&v177);
    }
    else
    {
      *v138 = v136;
      v140 = v138 + 1;
    }
    *(_QWORD *)(v135 - 16) = v140;
    v154 = *((_QWORD *)&xmmword_7529B8 + 1);
    v155 = dispatch_semaphore_create(0);
    v156 = v155;
    v157 = *(dispatch_semaphore_t **)(v154 - 16);
    v158 = *(_QWORD *)(v154 - 8);
    if ((unint64_t)v157 >= v158)
    {
      v160 = *(_QWORD *)(v154 - 24);
      v161 = ((uint64_t)v157 - v160) >> 3;
      if ((unint64_t)(v161 + 1) >> 61)
        abort();
      v162 = v158 - v160;
      v163 = v162 >> 2;
      if (v162 >> 2 <= (unint64_t)(v161 + 1))
        v163 = v161 + 1;
      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
        v164 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v164 = v163;
      v180 = (__int128 *)(v154 - 8);
      if (v164)
        v164 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v164);
      else
        v165 = 0;
      v166 = (dispatch_semaphore_t *)(v164 + 8 * v161);
      v167 = v164 + 8 * v165;
      v179 = (void **)v167;
      *v166 = v156;
      v159 = v166 + 1;
      v178.i64[1] = (uint64_t)(v166 + 1);
      v169 = *(_QWORD **)(v154 - 24);
      v168 = *(_QWORD **)(v154 - 16);
      if (v168 == v169)
      {
        v171 = *(void ***)(v154 - 16);
      }
      else
      {
        do
        {
          v170 = *--v168;
          *v168 = 0;
          *--v166 = v170;
        }
        while (v168 != v169);
        v171 = *(void ***)(v154 - 24);
        v168 = *(_QWORD **)(v154 - 16);
        v159 = (_QWORD *)v178.i64[1];
        v167 = (unint64_t)v179;
      }
      *(_QWORD *)(v154 - 24) = v166;
      v178.i64[0] = (uint64_t)v171;
      *(_QWORD *)(v154 - 16) = v159;
      v178.i64[1] = (uint64_t)v168;
      v172 = *(void ***)(v154 - 8);
      *(_QWORD *)(v154 - 8) = v167;
      v179 = v172;
      v177 = v171;
      std::__split_buffer<NSString * {__strong}>::~__split_buffer((uint64_t)&v177);
    }
    else
    {
      *v157 = v155;
      v159 = v157 + 1;
    }
    *(_QWORD *)(v154 - 16) = v159;
    ++v76;
  }

}

void sub_1C2408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        GTMMappedBuffer::~GTMMappedBuffer((GTMMappedBuffer *)(v4 - 120));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<GTMMappedBuffer>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xEEEEEEEEEEEEEEEFLL * ((result[2] - *result) >> 3) < a2)
  {
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 120 * v4;
    std::vector<GTMMappedBuffer>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<GTMMappedBuffer>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_1C2608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<GTMMappedBuffer>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void GTMMappedBuffer::GTMMappedBuffer(GTMMappedBuffer *this, unint64_t a2, unsigned int a3)
{
  unint64_t v4;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  void *v10;
  NSString *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  char *v25;
  int *v26;
  NSString *v27;
  void *v28;
  FILE *v29;
  int v30;
  id v31;
  const char *v32;
  const char *v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  dispatch_semaphore_t v47;
  void *v48;
  dispatch_semaphore_t v49;
  id v50;
  int *v51;
  NSString *v52;
  void *v53;
  FILE *v54;
  int v55;
  id v56;
  const char *v57;
  const char *v58;
  int v59;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 10) = a3;
  *((_OWORD *)this + 3) = 0u;
  v4 = a3;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  if (a3 <= a2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v7 = objc_msgSend(v6, "fileExistsAtPath:", CFSTR("/tmp/com.apple.gputools.profiling"));

    if ((v7 & 1) == 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      objc_msgSend(v8, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", CFSTR("/tmp/com.apple.gputools.profiling"), 1, 0, 0);

    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString"));
    v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/Temp_%@_%d.mmapbuffer"), CFSTR("/tmp/com.apple.gputools.profiling"), v10, rand());
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v12;

    v14 = open((const char *)objc_msgSend(*((id *)this + 3), "UTF8String"), 1538, 438);
    *((_DWORD *)this + 8) = v14;
    if (v14 < 0)
    {
      v51 = __error();
      v52 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), strerror(*v51));
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v54 = __stdoutp;
      v55 = g_runningInCI;
      v56 = objc_retainAutorelease(v53);
      v57 = (const char *)objc_msgSend(v56, "UTF8String");
      v58 = "#CI_ERROR# ";
      if (!v55)
        v58 = "";
      fprintf(v54, "%s%s %u: %s\n", v58, "GTMMappedBuffer::GTMMappedBuffer(size_t, size_t)", 1027, v57);
      v50 = objc_retainAutorelease(v56);
      GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v50, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTUSCSamplingStreamingManager.mm", (uint64_t)"GTMMappedBuffer", 1027, 1);
    }
    else
    {
      lseek(v14, a2, 0);
      write(*((_DWORD *)this + 8), "A", 1uLL);
      v15 = 0;
      v59 = a2;
      if (a2 / v4 <= 1)
        v16 = 1;
      else
        v16 = a2 / v4;
      do
      {
        v17 = mmap(0, *((unsigned int *)this + 10), 3, 2, *((_DWORD *)this + 8), v15 * *((unsigned int *)this + 10));
        v19 = v17;
        if (v17 == (void *)-1)
        {
          v26 = __error();
          v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), strerror(*v26));
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          v29 = __stdoutp;
          v30 = g_runningInCI;
          v31 = objc_retainAutorelease(v28);
          v32 = (const char *)objc_msgSend(v31, "UTF8String");
          v33 = "#CI_ERROR# ";
          if (!v30)
            v33 = "";
          fprintf(v29, "%s%s %u: %s\n", v33, "GTMMappedBuffer::GTMMappedBuffer(size_t, size_t)", 1037, v32);
          v34 = objc_retainAutorelease(v31);
          GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v34, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTUSCSamplingStreamingManager.mm", (uint64_t)"GTMMappedBuffer", 1037, 1);

        }
        else
        {
          v21 = *((_QWORD *)this + 12);
          v20 = *((_QWORD *)this + 13);
          v22 = (uint64_t)(v20 - v21) >> 5;
          v23 = *((_QWORD *)this + 14);
          if (v20 >= v23)
          {
            v35 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 59)
              abort();
            v36 = v23 - v21;
            if (v36 >> 4 > v35)
              v35 = v36 >> 4;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
              v37 = 0x7FFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v37);
            v39 = &v38[32 * v22];
            v40 = *((_DWORD *)this + 10);
            *(_QWORD *)v39 = v22;
            *((_QWORD *)v39 + 1) = v19;
            *((_DWORD *)v39 + 5) = 0;
            *((_DWORD *)v39 + 6) = 0;
            *((_DWORD *)v39 + 4) = v40;
            v42 = (char *)*((_QWORD *)this + 12);
            v41 = (char *)*((_QWORD *)this + 13);
            v43 = v39;
            if (v41 != v42)
            {
              do
              {
                v44 = *((_OWORD *)v41 - 1);
                *((_OWORD *)v43 - 2) = *((_OWORD *)v41 - 2);
                *((_OWORD *)v43 - 1) = v44;
                v43 -= 32;
                v41 -= 32;
              }
              while (v41 != v42);
              v41 = (char *)*((_QWORD *)this + 12);
            }
            v25 = v39 + 32;
            *((_QWORD *)this + 12) = v43;
            *((_QWORD *)this + 13) = v39 + 32;
            *((_QWORD *)this + 14) = &v38[32 * v18];
            if (v41)
              operator delete(v41);
          }
          else
          {
            v24 = *((_DWORD *)this + 10);
            *(_QWORD *)v20 = v22;
            *(_QWORD *)(v20 + 8) = v17;
            *(_DWORD *)(v20 + 20) = 0;
            *(_DWORD *)(v20 + 24) = 0;
            *(_DWORD *)(v20 + 16) = v24;
            v25 = (char *)(v20 + 32);
          }
          *((_QWORD *)this + 13) = v25;
        }
        ++v15;
      }
      while (v15 != v16);
      *((_DWORD *)this + 9) = v59;
      v45 = objc_opt_new(NSCondition, v18);
      v46 = (void *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v45;

      v47 = dispatch_semaphore_create(1);
      v48 = *(void **)this;
      *(_QWORD *)this = v47;

      v49 = dispatch_semaphore_create(1);
      v50 = (id)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v49;
    }

  }
}

void sub_1C2A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)(v13 + 96);
  if (v15)
  {
    *(_QWORD *)(v13 + 104) = v15;
    operator delete(v15);
  }
  std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100](a13);

  _Unwind_Resume(a1);
}

void std::vector<GTMMappedBuffer>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *i;
  void *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v2 = a1[1];
  v52 = *a1;
  v3 = a2[1];
  if (v2 == *a1)
  {
    v5 = a2[1];
  }
  else
  {
    v4 = a1[1];
    v5 = a2[1];
    do
    {
      v6 = *(void **)(v4 - 120);
      v4 -= 120;
      *(_QWORD *)(v5 - 120) = v6;
      v5 -= 120;
      *(_QWORD *)(v3 - 112) = *(id *)(v4 + 8);
      *(_QWORD *)(v3 - 104) = *(id *)(v4 + 16);
      *(_QWORD *)(v3 - 96) = *(id *)(v4 + 24);
      v7 = *(_OWORD *)(v4 + 32);
      *(_OWORD *)(v3 - 72) = 0u;
      v8 = v3 - 72;
      *(_OWORD *)(v3 - 88) = v7;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      v9 = *(_QWORD *)(v4 + 80);
      v10 = v9 / 0xAA;
      v11 = *(_QWORD *)(v4 + 56);
      if (*(_QWORD *)(v4 + 64) == v11)
      {
        v12 = 0;
        v15 = 0;
        v14 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(v2 - 32) + v9) / 0xAA));
      }
      else
      {
        v12 = *(_QWORD *)(v11 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
        v13 = *(_QWORD *)(v2 - 32) + v9;
        v14 = (_QWORD *)(v11 + 8 * (v13 / 0xAA));
        v15 = *v14 + 24 * (v13 % 0xAA);
      }
      if (v15 != v12)
      {
        v16 = (_QWORD *)(v11 + 8 * v10);
        v17 = 170 * (v14 - v16)
            - 0x5555555555555555 * ((uint64_t)(v15 - *v14) >> 3)
            + 0x5555555555555555 * ((uint64_t)(v12 - *v16) >> 3);
        if (v17)
        {
          v18 = (v17 + 1) / 0xAAuLL;
          if (-170 * v18 == ~v17)
            v19 = (v17 + 1) / 0xAAuLL;
          else
            v19 = v18 + 1;
          if (v19)
          {
            v56 = v3 - 48;
            *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v19);
            *((_QWORD *)&v54 + 1) = v54;
            *(_QWORD *)&v55 = v54;
            *((_QWORD *)&v55 + 1) = v54 + 8 * v20;
            do
            {
              v53 = operator new(0xFF0uLL);
              std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v54, &v53);
              --v19;
            }
            while (v19);
            for (i = *(_QWORD **)(v3 - 56);
                  i != *(_QWORD **)(v3 - 64);
                  std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)&v54, i))
            {
              --i;
            }
            v22 = *(void **)(v3 - 72);
            v23 = *((_QWORD *)&v54 + 1);
            v24 = v55;
            *(_OWORD *)(v3 - 72) = v54;
            *(_OWORD *)(v3 - 56) = v24;
            if (v22)
            {
              operator delete(v22);
              v25 = *(_QWORD *)(v3 - 64);
              v26 = *(_QWORD *)(v3 - 56);
            }
            else
            {
              v25 = v23;
              v26 = v24;
            }
            v28 = *(_QWORD *)(v3 - 32);
            v30 = *(_QWORD *)(v3 - 40) + v28;
            v29 = (uint64_t *)(v25 + 8 * (v30 / 0xAA));
            if (v26 == v25)
              v27 = 0;
            else
              v27 = *v29 + 24 * (v30 % 0xAA);
          }
          else
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
          }
          v31 = (uint64_t)(v27 - *v29) / 24 + v17;
          if (v31 < 1)
          {
            v35 = 169 - v31;
            v32 = &v29[-(v35 / 0xAA)];
            v33 = *v32;
            v34 = 169 - v35 % 0xAA;
          }
          else
          {
            v32 = &v29[v31 / 0xAAuLL];
            v33 = *v32;
            v34 = v31 % 0xAAuLL;
          }
          v36 = v33 + 24 * v34;
          while (v27 != v36)
          {
            v37 = v36;
            if (v29 != v32)
              v37 = *v29 + 4080;
            if (v27 == v37)
            {
              v37 = v27;
            }
            else
            {
              v38 = v27;
              do
              {
                v39 = *(_OWORD *)v12;
                *(_QWORD *)(v38 + 16) = *(_QWORD *)(v12 + 16);
                *(_OWORD *)v38 = v39;
                v12 += 24;
                if (v12 - *v16 == 4080)
                {
                  v40 = v16[1];
                  ++v16;
                  v12 = v40;
                }
                v38 += 24;
              }
              while (v38 != v37);
              v28 = *(_QWORD *)(v3 - 32);
            }
            v28 -= 0x5555555555555555 * ((uint64_t)(v37 - v27) >> 3);
            *(_QWORD *)(v3 - 32) = v28;
            if (v29 == v32)
              break;
            v41 = v29[1];
            ++v29;
            v27 = v41;
          }
        }
      }
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v43 = *(_BYTE **)(v2 - 24);
      v42 = *(_BYTE **)(v2 - 16);
      v44 = v42 - v43;
      if (v42 != v43)
      {
        if (v42 - v43 < 0)
          abort();
        v45 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v44 >> 5);
        *(_QWORD *)(v3 - 24) = v45;
        *(_QWORD *)(v3 - 16) = v45;
        *(_QWORD *)(v3 - 8) = &v45[32 * v46];
        memmove(v45, v43, v44);
        *(_QWORD *)(v3 - 16) = &v45[32 * (v44 >> 5)];
      }
      v2 = v4;
      v3 = v5;
    }
    while (v4 != v52);
  }
  a2[1] = v5;
  v47 = *a1;
  *a1 = v5;
  a2[1] = v47;
  v48 = a1[1];
  a1[1] = a2[2];
  a2[2] = v48;
  v49 = a1[2];
  a1[2] = a2[3];
  a2[3] = v49;
  *a2 = a2[1];
}

void sub_1C2F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  uint64_t v13;
  uint64_t v14;

  std::__split_buffer<ProfileEvent *>::~__split_buffer(v13);

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<GTMMappedBuffer>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    GTMMappedBuffer::~GTMMappedBuffer((GTMMappedBuffer *)(i - 120));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void GTMMappedBuffer::~GTMMappedBuffer(GTMMappedBuffer *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 13);
  if (v2 != (void *)v3 && *((_DWORD *)this + 9))
  {
    do
    {
      munmap(*(void **)(v3 - 24), *((unsigned int *)this + 10));
      v4 = *((_QWORD *)this + 12);
      v3 = *((_QWORD *)this + 13) - 32;
      *((_QWORD *)this + 13) = v3;
    }
    while (v4 != v3);
    close(*((_DWORD *)this + 8));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v5, "removeItemAtPath:error:", *((_QWORD *)this + 3), 0);

    v2 = (void *)*((_QWORD *)this + 12);
  }
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100]((_QWORD *)this + 6);

}

void sub_1C30A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;

  v3 = v2;

  v5 = *(void **)(v1 + 96);
  if (v5)
  {
    *(_QWORD *)(v1 + 104) = v5;
    operator delete(v5);
  }
  std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100]((_QWORD *)(v1 + 48));

  _Unwind_Resume(a1);
}

uint64_t std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

void std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void DynamicBuffer::DynamicBuffer(DynamicBuffer *this)
{
  char *v2;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v2 = (char *)operator new(0xC00uLL);
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 4) = v2;
  *((_QWORD *)this + 5) = v2 + 3072;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<DynamicBuffer>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a1);
}

uint64_t *std::vector<DynamicBuffer>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = v6;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 48;
      v4 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<DynamicBuffer>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::vector<GTMMappedBuffer>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void GTUSCSamplingStreamingManagerHelper::CleanUp(GTUSCSamplingStreamingManagerHelper *this)
{
  void *v3;
  void *v4;
  void *v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void *v18;
  unint64_t v19;
  char *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  unint64_t v29;
  int64x2_t v30;
  int64x2_t v31;
  unint64_t v32;
  unint64_t v33;
  void **v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  char *v61;

  os_unfair_lock_lock((os_unfair_lock_t)&GTUSCSamplingStreamingManagerHelper::CleanUp(void)::localSpinLock);
  if (!atomic_load((unint64_t *)this + 340))
    goto LABEL_50;
  atomic_store(0, (unint64_t *)this + 340);
  atomic_store(1u, (unsigned __int8 *)this + 2764);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 312), 0xFFFFFFFFFFFFFFFFLL);
  v3 = (void *)*((_QWORD *)this + 274);
  if (v3)
  {
    objc_msgSend(v3, "cleanup");
    v4 = (void *)*((_QWORD *)this + 274);
    *((_QWORD *)this + 274) = 0;

  }
  if (*(_QWORD *)this)
    *(_QWORD *)this = 0;
  GTUSCSamplingStreamingManagerHelper::CleanupGPURawCounters((uint64_t)this);
  ClearCaches();
  v5 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  GTApplePMPPerfStateControl::Close((GTUSCSamplingStreamingManagerHelper *)((char *)this + 64));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear((_QWORD *)this + 281);
  v6 = (void **)*((_QWORD *)this + 295);
  v7 = (void **)*((_QWORD *)this + 294);
  while (v6 != v7)
  {
    v6 -= 3;
    v57 = v6;
    std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v57);
  }
  *((_QWORD *)this + 295) = v7;
  std::vector<std::vector<GTMMappedBuffer>>::shrink_to_fit((uint64_t)this + 2352);
  v8 = (void **)*((_QWORD *)this + 292);
  v9 = (void **)*((_QWORD *)this + 291);
  while (v8 != v9)
  {
    v8 -= 3;
    v57 = v8;
    std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v57);
  }
  *((_QWORD *)this + 292) = v9;
  std::vector<std::vector<GTMMappedBuffer>>::shrink_to_fit((uint64_t)this + 2328);
  v10 = (void **)*((_QWORD *)this + 301);
  v11 = (void **)*((_QWORD *)this + 300);
  while (v10 != v11)
  {
    v10 -= 3;
    v57 = v10;
    std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v57);
  }
  *((_QWORD *)this + 301) = v11;
  std::vector<std::vector<GTMMappedBuffer>>::shrink_to_fit((uint64_t)this + 2400);
  v12 = (void **)*((_QWORD *)this + 304);
  v13 = (void **)*((_QWORD *)this + 303);
  while (v12 != v13)
  {
    v12 -= 3;
    v57 = v12;
    std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v57);
  }
  *((_QWORD *)this + 304) = v13;
  std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::shrink_to_fit((uint64_t)this + 2424);
  v14 = (void **)*((_QWORD *)this + 307);
  v15 = (void **)*((_QWORD *)this + 306);
  while (v14 != v15)
  {
    v14 -= 3;
    v57 = v14;
    std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v57);
  }
  *((_QWORD *)this + 307) = v15;
  std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::shrink_to_fit((uint64_t)this + 2448);
  v16 = (void **)*((_QWORD *)this + 310);
  v17 = (void **)*((_QWORD *)this + 309);
  if (v16 != v17)
  {
    do
    {
      v18 = *--v16;

    }
    while (v16 != v17);
    v16 = (void **)*((_QWORD *)this + 309);
  }
  *((_QWORD *)this + 310) = v17;
  v19 = v17 - v16;
  if (v19 < (uint64_t)(*((_QWORD *)this + 311) - (_QWORD)v16) >> 3)
  {
    v61 = (char *)this + 2488;
    if (v17 == v16)
    {
      v24 = 0;
      v22 = 8 * v19;
    }
    else
    {
      v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v17 - v16);
      v17 = (void **)*((_QWORD *)this + 310);
      v21 = (void **)*((_QWORD *)this + 309);
      v22 = (uint64_t)&v20[8 * v19];
      v59 = (void **)v22;
      v24 = &v20[8 * v23];
      if (v17 != v21)
      {
        v25 = &v20[8 * v19];
        do
        {
          v26 = (uint64_t)*--v17;
          *v17 = 0;
          *((_QWORD *)v25 - 1) = v26;
          v25 -= 8;
        }
        while (v17 != v21);
        v27 = (void **)*((_QWORD *)this + 309);
        v17 = (void **)*((_QWORD *)this + 310);
        goto LABEL_32;
      }
    }
    v27 = v17;
    v25 = (char *)v22;
LABEL_32:
    *((_QWORD *)this + 309) = v25;
    *((_QWORD *)this + 310) = v22;
    v28 = (void **)*((_QWORD *)this + 311);
    *((_QWORD *)this + 311) = v24;
    v59 = v17;
    v60 = v28;
    v57 = v27;
    v58 = v27;
    std::__split_buffer<NSString * {__strong}>::~__split_buffer((uint64_t)&v57);
  }
  std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)this + 275);
  v29 = *((_QWORD *)this + 275);
  v30 = *((int64x2_t *)this + 138);
  v31 = vshrq_n_s64(vsubq_s64(v30, vdupq_n_s64(v29)), 3uLL);
  v32 = 0xAAAAAAAAAAAAAAABLL * v31.i64[0];
  v33 = v32;
  if (0xAAAAAAAAAAAAAAABLL * v31.i64[1] > v32)
  {
    v61 = (char *)this + 2216;
    if (v30.i64[0] == v29)
    {
      v34 = 0;
      v35 = 0;
    }
    else
    {
      v34 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v32);
    }
    v57 = v34;
    v58 = &v34[3 * v33];
    v59 = v58;
    v60 = &v34[3 * v35];
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer((_QWORD *)this + 275, &v57);
    std::__split_buffer<std::vector<std::pair<unsigned int,unsigned int>>>::~__split_buffer((uint64_t)&v57);
  }
  v36 = (void *)*((_QWORD *)this + 278);
  *((_QWORD *)this + 279) = v36;
  if (*((void **)this + 280) != v36)
  {
    *((_QWORD *)this + 278) = 0;
    *((_QWORD *)this + 279) = 0;
    *((_QWORD *)this + 280) = 0;
    if (v36)
      operator delete(v36);
  }
  std::vector<DynamicBuffer>::__clear[abi:nn180100]((uint64_t *)this + 297);
  v37 = *((_QWORD *)this + 297);
  v38 = *((int64x2_t *)this + 149);
  v39 = vshrq_n_s64(vsubq_s64(v38, vdupq_n_s64(v37)), 4uLL);
  v40 = 0xAAAAAAAAAAAAAAABLL * v39.i64[0];
  v41 = v40;
  if (0xAAAAAAAAAAAAAAABLL * v39.i64[1] > v40)
  {
    v61 = (char *)this + 2392;
    if (v38.i64[0] == v37)
    {
      v42 = 0;
      v43 = 0;
    }
    else
    {
      v42 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<DynamicBuffer>>(v40);
    }
    v57 = v42;
    v58 = &v42[6 * v41];
    v59 = v58;
    v60 = &v42[6 * v43];
    std::vector<DynamicBuffer>::__swap_out_circular_buffer((uint64_t *)this + 297, &v57);
    std::__split_buffer<DynamicBuffer>::~__split_buffer((uint64_t)&v57);
  }
  v44 = (void *)*((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;

  v45 = (void *)*((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;

  v46 = (void *)*((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;

  v47 = (void *)*((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;

  *((_BYTE *)this + 2184) = 1;
  *((_DWORD *)this + 541) = 0;
  *((_QWORD *)this + 271) = 1;
  *((_QWORD *)this + 241) = 0;
  v48 = (void *)*((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;

  *((_QWORD *)this + 247) = 0;
  *((_QWORD *)this + 269) = 0;
  *((_QWORD *)this + 267) = *((_QWORD *)this + 266);
  v49 = (void *)*((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;

  v50 = (void *)*((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;

  v51 = (void *)*((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;

  v52 = (void *)*((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;

  v53 = (void *)*((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;

  atomic_store(0, (unsigned int *)this + 684);
  atomic_store(0, (unsigned int *)this + 685);
  atomic_store(0, (unsigned int *)this + 686);
  atomic_store(0, (unsigned int *)this + 687);
  atomic_store(0, (unsigned int *)this + 688);
  atomic_store(0, (unint64_t *)this + 341);
  atomic_store(0, (unsigned int *)this + 689);
  atomic_store(0, (unsigned __int8 *)this + 2760);
  atomic_store(0, (unsigned __int8 *)this + 2761);
  atomic_store(0, (unsigned __int8 *)this + 2763);
  atomic_store(0, (unsigned __int8 *)this + 2764);
  v54 = *((_QWORD *)this + 392);
  v55 = *((_QWORD *)this + 391);
  while (v54 != v55)
  {
    v56 = *(void **)(v54 - 32);
    v54 -= 32;

  }
  *((_QWORD *)this + 392) = v55;
LABEL_50:
  os_unfair_lock_unlock((os_unfair_lock_t)&GTUSCSamplingStreamingManagerHelper::CleanUp(void)::localSpinLock);
}

void sub_1C3B60(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&GTUSCSamplingStreamingManagerHelper::CleanUp(void)::localSpinLock);
  _Unwind_Resume(a1);
}

void ClearCaches(void)
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  if (objc_msgSend(v10, "fileExistsAtPath:", CFSTR("/tmp/com.apple.gputools.profiling")))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0;
    v0 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contentsOfDirectoryAtPath:error:", CFSTR("/tmp/com.apple.gputools.profiling"), &v12));
    v1 = v12;
    v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v2)
    {
      v3 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v3)
            objc_enumerationMutation(v0);
          v5 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pathExtension"));
          v7 = objc_msgSend(v6, "caseInsensitiveCompare:", CFSTR("mmapbuffer")) == 0;

          if (v7)
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/tmp/com.apple.gputools.profiling"), "stringByAppendingPathComponent:", v5));
            v11 = v1;
            objc_msgSend(v10, "removeItemAtPath:error:", v8, &v11);
            v9 = v11;

            v1 = v9;
          }
        }
        v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v2);
    }

  }
  else
  {
    objc_msgSend(v10, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", CFSTR("/tmp/com.apple.gputools.profiling"), 1, 0, 0);
  }

}

void sub_1C3D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<GTMMappedBuffer>>::shrink_to_fit(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 3uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    v6 = (_QWORD *)result;
    v13 = result + 16;
    if (v2.i64[0] == v1)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v4);
    }
    v9 = v7;
    v10 = &v7[24 * v5];
    v11 = v10;
    v12 = &v7[24 * v8];
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(v6, &v9);
    return std::__split_buffer<std::vector<GTMMappedBuffer>>::~__split_buffer((uint64_t)&v9);
  }
  return result;
}

uint64_t std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::shrink_to_fit(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 3uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    v6 = (_QWORD *)result;
    v13 = result + 16;
    if (v2.i64[0] == v1)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v4);
    }
    v9 = v7;
    v10 = &v7[24 * v5];
    v11 = v10;
    v12 = &v7[24 * v8];
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(v6, &v9);
    return std::__split_buffer<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::~__split_buffer((uint64_t)&v9);
  }
  return result;
}

void std::vector<DynamicBuffer>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<std::vector<std::pair<unsigned int,unsigned int>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void GTUSCSamplingStreamingManagerHelper::SetupMTLCounterAPIBuffer(GTUSCSamplingStreamingManagerHelper *this)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  BOOL v5;
  id v6;

  v6 = *(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16);
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "defaultDevice"));
  v2 = DEVICEOBJECT(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (v3
    && *(_DWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 76)
    && (_QWORD)xmmword_752798 != *((_QWORD *)&xmmword_752798 + 1))
  {
    v4 = xmmword_752798 + 4;
    do
    {
      if ((*(_BYTE *)(v4 - 4) & 0x10) != 0)
        break;
      v5 = v4 == *((_QWORD *)&xmmword_752798 + 1);
      v4 += 4;
    }
    while (!v5);
  }

}

void sub_1C406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned int,unsigned int>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void ___ZN35GTUSCSamplingStreamingManagerHelper20InitBatchIdFilteringEP29GTUSCSamplingStreamingManager_block_invoke(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  unsigned int *v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  int FuncEnumConstructorType;
  unsigned int *v13;
  _BOOL4 v14;
  int v15;
  int v16;
  char *v17;
  void *v18;
  int v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  int32x2_t *v33;
  int32x2_t *v34;
  int32x2_t v35;
  int32x2_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  unint64_t v57;
  char **v58;
  void *v59;
  uint64_t **v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *context;
  uint64_t v69;
  uint64_t v70;
  char v71;

  v1 = *(uint64_t ***)(a1 + 32);
  GTMTLReplayController_prePlayForProfiling(**v1);
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)(*v1)[2], "objectForKeyedSubscript:", CFSTR("perEncoderDrawCallCount")));
  v60 = v1;
  v2 = **v1;
  v63 = *(id *)(v2 + 8);
  v3 = *(uint64_t **)v2;
  v61 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "defaultCommandQueue"));
  v71 = 0;
  v69 = v2;
  v4 = (unsigned int *)(v2 + 22480);
  if (v3[13] + v3[12] > (unint64_t)*(unsigned int *)(v2 + 22480))
  {
    v64 = v3;
    v65 = 0;
    v5 = 0;
    v58 = (char **)(v60 + 278);
    do
    {
      v6 = objc_autoreleasePoolPush();
      v7 = *(_QWORD *)(v3[15] + 24);
      v8 = *v4;
      v9 = v7 + (v8 << 6);
      v11 = (int *)(v9 + 8);
      v10 = *(_DWORD *)(v9 + 8);
      FuncEnumConstructorType = GetFuncEnumConstructorType(v10);
      if (FuncEnumConstructorType == 25)
      {
        GTMTLReplayController_restoreCommandBuffer(v69, v7 + (v8 << 6));
        v10 = *v11;
      }
      v66 = v8;
      v67 = v7;
      context = v6;
      v13 = v4;
      v14 = IsFuncEnumGPUCommandCall(v10);
      v15 = IsFuncEnumEndEncoding(v10);
      v16 = (v14 | v15) & v5;
      if (v16 == 1)
      {
        v17 = GTTraceFunc_targetContext(v9, v3[2]);
        v18 = 0;
        v19 = *(_DWORD *)(v69 + 11312);
        if (v19 > 64)
        {
          if (v19 == 65)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "parallelRenderCommandEncoderForKey:", v17));
            v25 = DEVICEOBJECT(v20);
            v22 = objc_claimAutoreleasedReturnValue(v25);
            goto LABEL_16;
          }
          if (v19 == 70)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "renderCommandEncoderForKey:", v17));
            v23 = DEVICEOBJECT(v20);
            v22 = objc_claimAutoreleasedReturnValue(v23);
            goto LABEL_16;
          }
        }
        else
        {
          if (v19 == 21)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "blitCommandEncoderForKey:", v17));
            v24 = DEVICEOBJECT(v20);
            v22 = objc_claimAutoreleasedReturnValue(v24);
            goto LABEL_16;
          }
          if (v19 == 28)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "computeCommandEncoderForKey:", v17));
            v21 = DEVICEOBJECT(v20);
            v22 = objc_claimAutoreleasedReturnValue(v21);
LABEL_16:
            v18 = (void *)v22;

          }
        }
      }
      else
      {
        v18 = 0;
      }
      GTMTLReplayController_updateCommandEncoder(v69, v9);
      if (*v11 >> 2 == 1073737833)
        GTUSCSamplingStreamingManagerHelper::DispatchExpandedIndirectCommand((uint64_t)v60, v69, (unint64_t *)v9, v58, 0);
      else
        DispatchFunction((id *)v69, v9, &v71);
      v5 &= v15 ^ 1;
      if (GTMTLReplayHost_IsFuncEnumSampledEncoder(*v11, 1, 0))
      {
        v4 = v13;
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v13));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKeyedSubscript:", v26));

        if (v27)
          v5 = 1;
        v28 = v65;
        if (v27)
          v28 = v65 + 1;
        v65 = v28;

      }
      else if (v16)
      {
        v70 = 0;
        v4 = v13;
        if (v18)
        {
          if (v14)
          {
            objc_msgSend(v18, "commandBatchIdRangeMin:max:", (char *)&v70 + 4, &v70);
            v29 = (char *)v60[279];
            v30 = (unint64_t)v60[280];
            if ((unint64_t)v29 >= v30)
            {
              v42 = (v29 - *v58) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                abort();
              v44 = v30 - (_QWORD)*v58;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v45);
              v48 = &v46[8 * v42];
              *(_DWORD *)v48 = HIDWORD(v70);
              *((_DWORD *)v48 + 1) = v70;
              v49 = (char *)v60[279];
              v50 = (char *)v60[278];
              v51 = v48;
              if (v49 != v50)
              {
                do
                {
                  v52 = *((_QWORD *)v49 - 1);
                  v49 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                while (v49 != v50);
                v49 = *v58;
              }
              v60[278] = (uint64_t *)v51;
              v31 = (uint64_t *)(v48 + 8);
              v60[279] = (uint64_t *)(v48 + 8);
              v60[280] = (uint64_t *)&v46[8 * v47];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *(_DWORD *)v29 = HIDWORD(v70);
              *((_DWORD *)v29 + 1) = v70;
              v31 = (uint64_t *)(v29 + 8);
            }
            v60[279] = v31;
          }
          else if (v15 && v60[278] != v60[279])
          {
            v32 = objc_msgSend(v18, "commandBatchIdOffset");
            v33 = (int32x2_t *)v60[278];
            v34 = (int32x2_t *)v60[279];
            if (v33 != v34)
            {
              v35 = vdup_n_s32(v32);
              v36 = (int32x2_t *)v60[278];
              do
              {
                *v36 = vsub_s32(*v36, v35);
                ++v36;
              }
              while (v36 != v34);
            }
            if (v65)
            {
              v37 = v60[275];
              if (v65 <= 0xAAAAAAAAAAAAAAABLL * (v60[276] - v37))
              {
                v38 = &v37[3 * v65];
                v39 = (uint64_t *)*(v38 - 3);
                *(v38 - 3) = (uint64_t)v33;
                v60[278] = v39;
                v40 = (uint64_t *)*(v38 - 2);
                *(v38 - 2) = (uint64_t)v60[279];
                v60[279] = v40;
                v41 = (uint64_t *)*(v38 - 1);
                *(v38 - 1) = (uint64_t)v60[280];
                v60[280] = v41;
              }
            }
          }
        }
      }
      else
      {
        v4 = v13;
      }
      if (FuncEnumConstructorType == 25)
      {
        v53 = objc_msgSend(v63, "commandBufferForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v9, *(unsigned __int8 *)(v67 + (v66 << 6) + 13), v61)+ 1));
        v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        v55 = DEVICEOBJECT(v54);
        v56 = (void *)objc_claimAutoreleasedReturnValue(v55);

        objc_msgSend(v56, "setDisableDeferredEndEncoding:", 1);
      }

      objc_autoreleasePoolPop(context);
      v57 = *v4 + 1;
      *v4 = v57;
      v3 = v64;
    }
    while (v64[13] + v64[12] > v57);
  }
  objc_msgSend(v59, "finish", v58);

}

void sub_1C465C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void DispatchFunction(id *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  void *v9;
  char *v10;
  char *v11;
  void *v12;
  id MTLRenderPassDescriptor;
  void *v14;
  void *v15;
  id v16;

  v16 = a1[1];
  v6 = *((_QWORD *)*a1 + 2);
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 <= -16286)
  {
    if (v7 == -16351)
    {
      *a3 = 1;
      v10 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v6);
      v11 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, v10[16], v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "commandBufferForKey:", *(_QWORD *)v10));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "renderPassDescriptorMap"));
      MTLRenderPassDescriptor = MakeMTLRenderPassDescriptor((uint64_t)v11, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPassDescriptor);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "renderCommandEncoderWithDescriptor:", v14));
      objc_msgSend(v16, "setParallelRenderCommandEncoder:forKey:", v15, *((_QWORD *)v10 + 1));

      goto LABEL_10;
    }
    if (v7 == -16286)
    {
      v8 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), *((_QWORD *)*a1 + 2));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "parallelRenderCommandEncoderForKey:", *(_QWORD *)v8));
      objc_msgSend(v16, "setRenderCommandEncoder:forKey:", v9, *((_QWORD *)v8 + 1));
LABEL_10:

      goto LABEL_15;
    }
LABEL_12:
    if (v7 >> 2 == 1073737833)
    {
      GTMTLReplayController_executeCommandsInBuffer((uint64_t *)a1, (unint64_t *)a2, 0, 0xFFFFFFFFFFFFFFFFLL);
      goto LABEL_15;
    }
LABEL_14:
    GTMTLReplayController_defaultDispatchFunction((uint64_t)a1, a2);
    goto LABEL_15;
  }
  if (v7 == -16285)
  {
    *a3 = 0;
    goto LABEL_14;
  }
  if (v7 != -16246)
    goto LABEL_12;
  if (!*a3)
    goto LABEL_14;
  objc_msgSend(v16, "removeRenderCommandEncoderForKey:", *(_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), *((_QWORD *)*a1 + 2)));
LABEL_15:

}

{
  uint64_t v6;
  int v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t RenderPassDescriptor;
  void *v12;
  id MTLRenderPassDescriptor;
  void *v14;
  void *v15;
  id v16;

  v16 = a1[1];
  v6 = *((_QWORD *)*a1 + 2);
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 <= -16286)
  {
    if (v7 == -16351)
    {
      *a3 = 1;
      v10 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v6);
      RenderPassDescriptor = GetRenderPassDescriptor((uint64_t *)a2, v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "commandBufferForKey:", *(_QWORD *)v10));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "renderPassDescriptorMap"));
      MTLRenderPassDescriptor = MakeMTLRenderPassDescriptor(RenderPassDescriptor, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPassDescriptor);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "renderCommandEncoderWithDescriptor:", v14));
      objc_msgSend(v16, "setParallelRenderCommandEncoder:forKey:", v15, *((_QWORD *)v10 + 1));

      goto LABEL_10;
    }
    if (v7 == -16286)
    {
      v8 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), *((_QWORD *)*a1 + 2));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "parallelRenderCommandEncoderForKey:", *(_QWORD *)v8));
      objc_msgSend(v16, "setRenderCommandEncoder:forKey:", v9, *((_QWORD *)v8 + 1));
LABEL_10:

      goto LABEL_13;
    }
LABEL_12:
    GTMTLReplayController_defaultDispatchFunction((uint64_t)a1, a2);
    goto LABEL_13;
  }
  if (v7 == -16285)
  {
    *a3 = 0;
    goto LABEL_12;
  }
  if (v7 != -16246 || !*a3)
    goto LABEL_12;
  objc_msgSend(v16, "removeRenderCommandEncoderForKey:", *(_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), *((_QWORD *)*a1 + 2)));
LABEL_13:

}

void sub_1C48B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v12)
        v3 = v10 % v12;
    }
    else
    {
      v3 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3)
            break;
        }
      }
    }
  }
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = v11;
  v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v18[4] = *(_QWORD *)(a3 + 16);
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v25);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v18 = *v27;
LABEL_47:
    *v27 = v18;
    goto LABEL_48;
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    v28 = *(_QWORD *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12)
        v28 %= v12;
    }
    else
    {
      v28 &= v12 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1C4BF8(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v4 = 0x9DDFEA08EB382D69;
    v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    v39 = v35 + v37;
    v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    v42 = v36 + a2 + v35 + v32;
    v43 = v42 + v33;
    v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v46 = v45 + v34 + v37;
    v47 = __ROR8__(v46, 44);
    v48 = v46 + v38;
    v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    v51 = *a1;
    v50 = a1 + 4;
    v52 = v51 - 0x4B6D499041670D8DLL * v33;
    v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v54 = *(v50 - 3);
      v55 = v52 + v43 + v39 + v54;
      v56 = v50[2];
      v57 = v50[3];
      v58 = v50[1];
      v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      v59 = v41 + v48;
      v60 = *(v50 - 2);
      v61 = *(v50 - 1);
      v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      v63 = v62 + v48 + v61;
      v64 = v62 + v54 + v60;
      v43 = v64 + v61;
      v65 = __ROR8__(v64, 44) + v62;
      v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      v44 = v65 + __ROR8__(v63 + v66, 21);
      v67 = v52 + v49 + *v50;
      v48 = v67 + v58 + v56 + v57;
      v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      v41 = v66;
      v53 += 64;
    }
    while (v53);
    v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      v23 = 0x9DDFEA08EB382D69;
      v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    v4 = 0x9AE16A3B2F90404FLL;
    if (!a2)
      return v4;
    v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

BOOL std::equal_to<std::string>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t GTUSCSamplingStreamingManagerHelper::SetupBumperCounters(GTUSCSamplingStreamingManagerHelper *this, NSDictionary *a2)
{
  GTUSCSamplingStreamingManagerHelper *v2;
  void *v3;
  unint64_t v4;
  void *v5;
  unint64_t i;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v18;
  id v19;
  id v20;

  v2 = this;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("passNum")));
  v18 = objc_msgSend(v3, "unsignedIntValue");

  v19 = objc_msgSend(*((id *)&xmmword_752038 + 1), "count");
  v4 = 0;
  v20 = objc_msgSend(*((id *)&xmmword_752038 + 1), "count");
  while (v4 < (unint64_t)objc_msgSend(*((id *)&xmmword_752038 + 1), "count"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", v4));
    for (i = 0; i < (unint64_t)objc_msgSend(&off_7389B8, "count"); ++i)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_7389B8, "objectAtIndexedSubscript:", i));
      v9 = objc_msgSend(v7, "isEqualToString:", v8);

      if (v9)
        *(&v19 + i) = (id)v4;
    }

    ++v4;
  }
  if (v18)
  {
    v10 = 0;
    v11 = (unint64_t)v19;
    v12 = (unint64_t)v20;
    do
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("passList")));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", v10));

      if (v11 < (unint64_t)objc_msgSend(v14, "count") && v12 < (unint64_t)objc_msgSend(v14, "count"))
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", v12));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", v11));
        objc_msgSend(v14, "setObject:atIndexedSubscript:", v16, v12);

        objc_msgSend(v14, "setObject:atIndexedSubscript:", v15, v11);
      }

      ++v10;
    }
    while (v18 != v10);
  }

  return v18;
}

void sub_1C5444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::StreamBatchIdFilteredCounters(GTUSCSamplingStreamingManagerHelper *this, uint64_t a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t *CountersForDerivedCounter;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  const CATransform3D **v19;
  id v20;
  uint64_t v21;
  void *i;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  int v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 **v42;
  unsigned __int8 *j;
  unint64_t v44;
  float v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t k;
  _QWORD *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  void *m;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  uint64_t v78;
  void *ii;
  void *v80;
  void *v81;
  unsigned int v82;
  void *v83;
  void *v84;
  char *v85;
  id v86;
  id v87;
  uint64_t v88;
  void *jj;
  id v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  GTUSCSamplingStreamingManagerHelper *v95;
  GTUSCSamplingStreamingManagerHelper *v96;
  id v97;
  NSDictionary *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  void *kk;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  id v110;
  uint64_t v111;
  void *mm;
  void *v113;
  void *v114;
  uint64_t v115;
  unsigned __int8 v116;
  void *v117;
  void *v118;
  void *v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  _BOOL4 v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  void *v129;
  uint64_t v130;
  void *v131;
  GTUSCSamplingStreamingManagerHelper *v132;
  id v133;
  void *v134;
  void *v135;
  id v136;
  void *v137;
  unsigned __int8 v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  GTAGXProfilingSupportHelper *v150;
  id v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  uint64_t v156;
  id v157;
  unsigned __int8 v158;
  void *v159;
  _BYTE *v160;
  id v161;
  char v162;
  void *v163;
  GTUSCSamplingStreamingManagerHelper *v164;
  GTUSCSamplingStreamingManagerHelper *context;
  void *v166;
  id v167;
  id v168;
  id v169;
  uint64_t v170;
  id v171;
  id v172;
  BOOL v173;
  id v174;
  GTUSCSamplingStreamingManagerHelper *v175;
  void *v176;
  uint64_t v177;
  void *v178;
  unsigned int v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id obj;
  id obja;
  id objb;
  uint64_t v188;
  unint64_t n;
  void *v190;
  _QWORD v191[4];
  id v192;
  id v193;
  __int128 *v194;
  _QWORD v195[4];
  GTUSCSamplingStreamingManagerHelper *v196;
  id v197;
  id v198;
  void **v199;
  void ***v200;
  void **v201;
  __int128 *v202;
  int v203;
  unsigned int v204;
  BOOL v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  const __CFString *v222;
  uint64_t v223;
  _QWORD v224[2];
  _QWORD v225[2];
  _QWORD v226[11];
  _QWORD v227[11];
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  void *__p[2];
  __int128 v233;
  _BYTE v234[40];
  uint64_t v235;
  int v236;
  void **v237;
  void ***v238;
  uint64_t v239;
  __n128 (*v240)(__n128 *, __n128 *);
  void (*v241)(uint64_t);
  void *v242;
  void *v243;
  void *v244;
  uint64_t v245;
  void *v246;
  void **v247;
  uint64_t v248;
  __n128 (*v249)(__n128 *, __n128 *);
  void (*v250)(uint64_t);
  void *v251;
  uint64_t v252[10];

  v2 = atomic_load(byte_752AF4);
  if ((v2 & 1) != 0)
    return;
  v168 = (id)objc_opt_new(NSMutableDictionary, a2);
  if ((_DWORD)qword_7528A8 == -1)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 48), "objectForKeyedSubscript:", CFSTR("DerivedCounterDictionary")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("DerivedCounters")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("CSInvocation")));
    v174 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("counters")));

  }
  else
  {
    v3 = std::string::basic_string[abi:nn180100]<0>(&v246, "CSInvocation");
    CountersForDerivedCounter = GTAGXProfilingSupportHelper::GetCountersForDerivedCounter((uint64_t)v3);
    v5 = CountersForDerivedCounter;
    if (SHIBYTE(v248) < 0)
    {
      operator delete(v246);
      if (v5)
        goto LABEL_5;
    }
    else if (CountersForDerivedCounter)
    {
LABEL_5:
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 3)));
      v7 = *v5;
      v8 = v5[1];
      if (*v5 != v8)
      {
        do
        {
          v9 = v7;
          if (*(char *)(v7 + 23) < 0)
            v9 = *(_QWORD *)v7;
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
          objc_msgSend(v6, "addObject:", v10);

          v7 += 24;
        }
        while (v7 != v8);
      }
      v174 = objc_msgSend(v6, "copy");

      goto LABEL_13;
    }
    v174 = 0;
  }
LABEL_13:
  v173 = qword_7527E8
      && ((v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_7527E8, "objectForKeyedSubscript:", CFSTR("num_cores"))),
           v15 = objc_msgSend(v14, "unsignedIntValue"),
           v14,
           v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_7527E8, "objectForKeyedSubscript:", CFSTR("num_mgpus"))),
           v17 = objc_msgSend(v16, "unsignedIntValue"),
           v16,
           v17 <= 1)
        ? (v18 = 1)
        : (v18 = v17),
          v15 / v18 >= 5)
      && objc_msgSend(v174, "count") == &dword_4;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("profileCounters")));
  v19 = &CATransform3DIdentity_ptr;
  if ((_DWORD)qword_7528A8 == -1)
    goto LABEL_111;
  v210 = 0u;
  v211 = 0u;
  LODWORD(v212) = 1065353216;
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  v221 = 0u;
  obj = obj;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v218, &v237, 16);
  if (!v20)
    goto LABEL_35;
  v21 = *(_QWORD *)v219;
  do
  {
    for (i = 0; i != v20; i = (char *)i + 1)
    {
      if (*(_QWORD *)v219 != v21)
        objc_enumerationMutation(obj);
      v23 = std::string::basic_string[abi:nn180100]<0>(&v246, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v218 + 1) + 8 * (_QWORD)i)), "UTF8String"));
      v24 = GTAGXProfilingSupportHelper::GetCountersForDerivedCounter((uint64_t)v23);
      v25 = v24;
      if (SHIBYTE(v248) < 0)
      {
        operator delete(v246);
        if (!v25)
          continue;
      }
      else if (!v24)
      {
        continue;
      }
      v26 = *v25;
      v27 = v25[1];
      while (v26 != v27)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v210, v26, v26);
        v26 += 24;
      }
    }
    v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v218, &v237, 16);
  }
  while (v20);
LABEL_35:

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("batchFilteredDerivedCounters")));
  if (v28)
  {
    v171 = v28;
    v169 = v28;
    v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v169, "count")));
    v228 = 0u;
    v229 = 0u;
    LODWORD(v230) = 1065353216;
    *(_OWORD *)__p = 0u;
    v233 = 0u;
    memset(v234, 0, 32);
    v180 = v169;
    v29 = objc_msgSend(v180, "countByEnumeratingWithState:objects:count:", __p, &v246, 16);
    if (!v29)
      goto LABEL_87;
    v188 = *(_QWORD *)v233;
    while (2)
    {
      v30 = 0;
      while (2)
      {
        if (*(_QWORD *)v233 != v188)
          objc_enumerationMutation(v180);
        v31 = (char *)objc_msgSend(objc_retainAutorelease(*((id *)__p[1] + v30)), "UTF8String");
        v32 = operator new(0x28uLL);
        *v32 = 0;
        v32[1] = 0;
        std::string::basic_string[abi:nn180100]<0>(v32 + 2, v31);
        v33 = *((char *)v32 + 39);
        if (v33 >= 0)
          v34 = v32 + 2;
        else
          v34 = (uint64_t *)v32[2];
        if (v33 >= 0)
          v35 = *((unsigned __int8 *)v32 + 39);
        else
          v35 = v32[3];
        v32[1] = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v34, v35);
        v36 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v34, v35);
        v37 = v36;
        v32[1] = v36;
        v38 = *((_QWORD *)&v228 + 1);
        if (*((_QWORD *)&v228 + 1))
        {
          v39 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v228 + 8));
          v39.i16[0] = vaddlv_u8(v39);
          v40 = v39.u32[0];
          if (v39.u32[0] > 1uLL)
          {
            v41 = v36;
            if (*((_QWORD *)&v228 + 1) <= v36)
              v41 = v36 % *((_QWORD *)&v228 + 1);
          }
          else
          {
            v41 = (*((_QWORD *)&v228 + 1) - 1) & v36;
          }
          v42 = *(unsigned __int8 ***)(v228 + 8 * v41);
          if (v42)
          {
            for (j = *v42; j; j = *(unsigned __int8 **)j)
            {
              v44 = *((_QWORD *)j + 1);
              if (v44 == v37)
              {
                if (std::equal_to<std::string>::operator()[abi:nn180100](j + 16, (unsigned __int8 *)v32 + 16))
                {
                  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](1, (void **)v32);
                  goto LABEL_85;
                }
              }
              else
              {
                if (v40 > 1)
                {
                  if (v44 >= v38)
                    v44 %= v38;
                }
                else
                {
                  v44 &= v38 - 1;
                }
                if (v44 != v41)
                  break;
              }
            }
          }
        }
        v45 = (float)(unint64_t)(*((_QWORD *)&v229 + 1) + 1);
        if (!v38 || (float)(*(float *)&v230 * (float)v38) < v45)
        {
          v46 = (v38 & (v38 - 1)) != 0;
          if (v38 < 3)
            v46 = 1;
          v47 = v46 | (2 * v38);
          v48 = vcvtps_u32_f32(v45 / *(float *)&v230);
          if (v47 <= v48)
            v49 = v48;
          else
            v49 = v47;
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v228, v49);
          v38 = *((_QWORD *)&v228 + 1);
          v37 = v32[1];
        }
        v50 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
        v50.i16[0] = vaddlv_u8(v50);
        if (v50.u32[0] > 1uLL)
        {
          if (v37 >= v38)
            v37 %= v38;
        }
        else
        {
          v37 &= v38 - 1;
        }
        v51 = v228;
        v52 = *(_QWORD **)(v228 + 8 * v37);
        if (v52)
        {
          *v32 = *v52;
          goto LABEL_83;
        }
        *v32 = v229;
        *(_QWORD *)&v229 = v32;
        *(_QWORD *)(v51 + 8 * v37) = &v229;
        if (*v32)
        {
          v53 = *(_QWORD *)(*v32 + 8);
          if (v50.u32[0] > 1uLL)
          {
            if (v53 >= v38)
              v53 %= v38;
          }
          else
          {
            v53 &= v38 - 1;
          }
          v52 = (_QWORD *)(v228 + 8 * v53);
LABEL_83:
          *v52 = v32;
        }
        ++*((_QWORD *)&v229 + 1);
LABEL_85:
        if ((id)++v30 != v29)
          continue;
        break;
      }
      v29 = objc_msgSend(v180, "countByEnumeratingWithState:objects:count:", __p, &v246, 16);
      if (v29)
        continue;
      break;
    }
LABEL_87:

    for (k = qword_752A20; k; k = *(_QWORD *)k)
    {
      v55 = (_QWORD *)(k + 16);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v228, *((unint64_t *)&v228 + 1), k + 16))
      {
        if (*(char *)(k + 39) < 0)
          v55 = (_QWORD *)*v55;
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v55));
        objc_msgSend(v176, "addObject:", v56);

      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v228);

    v57 = (void *)xmmword_752C58;
    *(_QWORD *)&xmmword_752C58 = v176;

    v59 = (void *)objc_opt_new(NSMutableArray, v58);
    v61 = (void *)objc_opt_new(NSMutableSet, v60);
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    v62 = (id)xmmword_752C58;
    v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v214, &v246, 16);
    if (v63)
    {
      v64 = *(_QWORD *)v215;
      do
      {
        for (m = 0; m != v63; m = (char *)m + 1)
        {
          if (*(_QWORD *)v215 != v64)
            objc_enumerationMutation(v62);
          std::string::basic_string[abi:nn180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v214 + 1) + 8 * (_QWORD)m)), "UTF8String"));
          v66 = GTAGXProfilingSupportHelper::GetCountersForDerivedCounter((uint64_t)__p);
          v67 = v66;
          if (SBYTE7(v233) < 0)
          {
            operator delete(__p[0]);
            if (!v67)
              continue;
          }
          else if (!v66)
          {
            continue;
          }
          v68 = *v67;
          v69 = v67[1];
          while (v68 != v69)
          {
            v70 = v68;
            if (*(char *)(v68 + 23) < 0)
              v70 = *(_QWORD *)v68;
            v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v70));
            objc_msgSend(v61, "addObject:", v71);

            v68 += 24;
          }
        }
        v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v214, &v246, 16);
      }
      while (v63);
    }

    v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "allObjects"));
    obj = (id)v72;
    v28 = v171;
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v210);
  v19 = &CATransform3DIdentity_ptr;
LABEL_111:
  v73 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D setWithArray:]((id)v19[285], "setWithArray:", obj));
  objc_msgSend(v73, "addObjectsFromArray:", &off_7389A0);
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 4096));
  for (n = 0; n < (unint64_t)objc_msgSend(*((id *)&xmmword_752038 + 1), "count"); ++n)
  {
    v181 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:"));
    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v181, "availableCounters"));
    v212 = 0u;
    v213 = 0u;
    v210 = 0u;
    v211 = 0u;
    v76 = v75;
    v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v210, __p, 16);
    if (v77)
    {
      v78 = *(_QWORD *)v211;
      do
      {
        for (ii = 0; ii != v77; ii = (char *)ii + 1)
        {
          if (*(_QWORD *)v211 != v78)
            objc_enumerationMutation(v76);
          v80 = *(void **)(*((_QWORD *)&v210 + 1) + 8 * (_QWORD)ii);
          v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "name"));
          v82 = objc_msgSend(v73, "containsObject:", v81);

          if (v82)
          {
            v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v80, "counterValueType")));
            v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "name"));
            objc_msgSend(v74, "setObject:forKeyedSubscript:", v83, v84);

          }
        }
        v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v210, __p, 16);
      }
      while (v77);
    }

  }
  objc_msgSend(v168, "setDictionary:", v74);
  v85 = (char *)objc_msgSend(obj, "count");
  v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", &v85[(_QWORD)objc_msgSend((id)qword_7527F0, "count")]));
  objc_msgSend(v190, "addObjectsFromArray:", qword_7527F0);
  v208 = 0u;
  v209 = 0u;
  v206 = 0u;
  v207 = 0u;
  v86 = obj;
  v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v206, &v228, 16);
  if (v87)
  {
    v88 = *(_QWORD *)v207;
    do
    {
      for (jj = 0; jj != v87; jj = (char *)jj + 1)
      {
        if (*(_QWORD *)v207 != v88)
          objc_enumerationMutation(v86);
        v90 = *(id *)(*((_QWORD *)&v206 + 1) + 8 * (_QWORD)jj);
        if ((objc_msgSend(v90, "isEqualToString:", CFSTR("MTLStat_nSec")) & 1) != 0)
        {
          v91 = 0;
        }
        else
        {
          if (!objc_msgSend(v90, "isEqualToString:", CFSTR("MTLStatTotalGPUCycles")))
            goto LABEL_133;
          v91 = 1;
        }
        v92 = objc_claimAutoreleasedReturnValue(objc_msgSend(&off_7389A0, "objectAtIndexedSubscript:", v91));

        v90 = (id)v92;
LABEL_133:
        v93 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v90, 0));
        objc_msgSend(v190, "addObject:", v93);

      }
      v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v206, &v228, 16);
    }
    while (v87);
  }

  v94 = GTUSCSamplingStreamingManagerHelper::SubDividedCounterDictionary(v190);
  v95 = (GTUSCSamplingStreamingManagerHelper *)objc_claimAutoreleasedReturnValue(v94);
  v96 = v95;
  if (!v95)
    goto LABEL_196;
  v164 = v95;
  v97 = -[GTUSCSamplingStreamingManagerHelper count](v95, "count");
  v96 = v164;
  if (!v97)
    goto LABEL_196;
  __p[0] = 0;
  __p[1] = __p;
  *(_QWORD *)&v233 = 0x5812000000;
  *((_QWORD *)&v233 + 1) = __Block_byref_object_copy__222;
  *(_QWORD *)v234 = __Block_byref_object_dispose__223;
  v160 = &v234[16];
  memset(&v234[8], 0, 32);
  v235 = 0;
  v236 = 1065353216;
  v179 = GTUSCSamplingStreamingManagerHelper::SetupBumperCounters(v164, v98);
  v175 = v164;
  v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", -[GTUSCSamplingStreamingManagerHelper count](v175, "count")));
  v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v163, "objectForKeyedSubscript:", CFSTR("passNum")));
  objc_msgSend(v163, "setObject:forKeyedSubscript:", v99, CFSTR("passNum"));

  v100 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v175, "objectForKeyedSubscript:", CFSTR("passNum")));
  LODWORD(v99) = objc_msgSend(v100, "unsignedIntValue");

  v170 = v99;
  v172 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:"));
  if ((_DWORD)v99)
  {
    v177 = 0;
    do
    {
      v101 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v175, "objectForKeyedSubscript:", CFSTR("passList")));
      v182 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "objectAtIndexedSubscript:", v177));

      v102 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v182, "count")));
      v230 = 0u;
      v231 = 0u;
      v228 = 0u;
      v229 = 0u;
      v183 = v182;
      obja = (id)v102;
      v103 = objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v228, &v246, 16);
      if (v103)
      {
        v104 = *(_QWORD *)v229;
        do
        {
          for (kk = 0; kk != v103; kk = (char *)kk + 1)
          {
            if (*(_QWORD *)v229 != v104)
              objc_enumerationMutation(v183);
            v106 = *(void **)(*((_QWORD *)&v228 + 1) + 8 * (_QWORD)kk);
            v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_7527F0, "arrayByAddingObjectsFromArray:", v106));
            v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v107, "count")));
            v220 = 0u;
            v221 = 0u;
            v218 = 0u;
            v219 = 0u;
            v109 = v106;
            v110 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v218, &v237, 16);
            if (v110)
            {
              v111 = *(_QWORD *)v219;
              do
              {
                for (mm = 0; mm != v110; mm = (char *)mm + 1)
                {
                  if (*(_QWORD *)v219 != v111)
                    objc_enumerationMutation(v109);
                  v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v218 + 1)
                                                                                      + 8 * (_QWORD)mm), "name"));
                  objc_msgSend(v108, "addObject:", v113);

                }
                v110 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v218, &v237, 16);
              }
              while (v110);
            }

            objc_msgSend(obja, "addObject:", v108);
          }
          v103 = objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v228, &v246, 16);
        }
        while (v103);
      }

      objc_msgSend(v172, "addObject:", obja);
      ++v177;
    }
    while (v177 != v170);
  }
  objc_msgSend(v163, "setObject:forKeyedSubscript:", v172, CFSTR("passList"));

  v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("perEncoderDrawCallCount")));
  v161 = objc_msgSend(v114, "count");

  v166 = (void *)objc_opt_new(NSMutableDictionary, v115);
  GTUSCSamplingStreamingManagerHelper::CleanupGPURawCounters((uint64_t)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
  v116 = atomic_load(byte_752AF4);
  if ((v116 & 1) != 0)
    goto LABEL_195;
  v184 = 0;
  v162 = 0;
  while (2)
  {
    v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)&xmmword_7528B4 + 4), "nextPerEncoderBatchList:", v166));

    if (v117)
    {
      dispatch_semaphore_wait((dispatch_semaphore_t)xmmword_7529E8, 0xFFFFFFFFFFFFFFFFLL);
      context = (GTUSCSamplingStreamingManagerHelper *)objc_autoreleasePoolPush();
      GTUSCSamplingStreamingManagerHelper::SetupGPURawCounters(context);
      v184 = v117;
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16), "objectForKeyedSubscript:", CFSTR("perEncoderIndexDrawCallCount")));
      v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v118, "count")));
      v120 = 0;
      v121 = 0;
      while (v120 < (unint64_t)objc_msgSend(v118, "count"))
      {
        v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v120));
        v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "objectForKeyedSubscript:", v122));
        v124 = objc_msgSend(v123, "unsignedIntegerValue") == 0;

        if (v124)
        {
          objc_msgSend(v119, "addObject:", &off_739688);
        }
        else
        {
          v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndexedSubscript:", v121));
          objc_msgSend(v119, "addObject:", v125);

          ++v121;
        }
        ++v120;
      }

      v167 = objc_msgSend(v166, "copy");
      v178 = (void *)objc_opt_new(NSMutableArray, v126);
      v246 = 0;
      v247 = &v246;
      v248 = 0x4812000000;
      v249 = __Block_byref_object_copy__224;
      v250 = __Block_byref_object_dispose__225;
      v251 = &unk_4C2897;
      memset(v252, 0, 24);
      v237 = 0;
      v238 = &v237;
      v239 = 0x4812000000;
      v240 = __Block_byref_object_copy__227;
      v241 = __Block_byref_object_dispose__228;
      v242 = &unk_4C2897;
      v244 = 0;
      v245 = 0;
      v243 = 0;
      std::vector<std::vector<DYMTLEncoderInfo>>::resize(v252, v179);
      objb = (id)objc_opt_new(NSOperation, v127);
      if (v179)
      {
        v128 = 0;
        v129 = 0;
        do
        {
          std::vector<std::vector<DYMTLEncoderInfo>>::reserve(v247 + 6, 2 * (_QWORD)v161);
          v131 = (void *)objc_opt_new(NSMutableArray, v130);
          v195[0] = _NSConcreteStackBlock;
          v195[1] = 3221225472;
          v195[2] = ___ZN35GTUSCSamplingStreamingManagerHelper29StreamBatchIdFilteredCountersEv_block_invoke;
          v195[3] = &unk_724758;
          v202 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
          v132 = v175;
          v203 = v128;
          v205 = v173;
          v196 = v132;
          v199 = &v246;
          v200 = &v237;
          v197 = v119;
          v201 = __p;
          v133 = v131;
          v198 = v133;
          v204 = v179;
          v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v195));
          v135 = v134;
          if (v129)
            objc_msgSend(v134, "addDependency:", v129);
          objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v135);
          objc_msgSend(v135, "setQueuePriority:", -8);
          v191[0] = _NSConcreteStackBlock;
          v191[1] = 3221225472;
          v191[2] = ___ZN35GTUSCSamplingStreamingManagerHelper29StreamBatchIdFilteredCountersEv_block_invoke_2;
          v191[3] = &unk_725E60;
          v194 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
          v136 = v133;
          v192 = v136;
          v193 = v178;
          v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v191));
          objc_msgSend(v137, "addDependency:", v135);
          objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v137);
          objc_msgSend(objb, "addDependency:", v137);

          ++v128;
          v129 = v137;
        }
        while (v179 != v128);
      }
      else
      {
        v137 = 0;
      }
      objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", objb);
      objc_msgSend(objb, "waitUntilFinished");
      GTUSCSamplingStreamingManagerHelper::CleanupGPURawCounters((uint64_t)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
      v138 = atomic_load(byte_752AF4);
      if ((v138 & 1) == 0)
      {
        v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v179));
        if (v179)
        {
          v140 = 0;
          do
          {
            v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)((char *)v247[6] + v140), *(_QWORD *)((char *)v247[6] + v140 + 8) - *(_QWORD *)((char *)v247[6] + v140)));
            objc_msgSend(v139, "addObject:", v141);

            v140 += 24;
          }
          while (24 * v179 != v140);
        }
        v226[0] = CFSTR("Derived Counter Sample Data");
        v226[1] = CFSTR("Subdivided Dictionary");
        v227[0] = v178;
        v227[1] = v163;
        v227[2] = v139;
        v226[2] = CFSTR("Encoder Infos");
        v226[3] = CFSTR("Encoder Tile Info");
        v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v238[6], (char *)v238[7] - (char *)v238[6]));
        v227[3] = v142;
        v227[4] = v119;
        v226[4] = CFSTR("BatchInfos");
        v226[5] = CFSTR("Counter Info");
        v227[5] = v168;
        v226[6] = CFSTR("Num Encoders");
        v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v161));
        v227[6] = v143;
        v226[7] = CFSTR("Source Sample Marker");
        v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", qword_752048));
        v227[7] = v145;
        v227[8] = &__kCFBooleanTrue;
        v226[8] = CFSTR("Batch Filtered Counters");
        v226[9] = CFSTR("Derived Counters Info Data");
        v146 = *(void **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 48);
        v147 = v146;
        if (!v146)
        {
          v159 = (void *)objc_opt_new(NSMutableDictionary, v144);
          v147 = v159;
        }
        v226[10] = CFSTR("HighPriorityBatchInfo");
        v227[9] = v147;
        v227[10] = v167;
        v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v227, v226, 11, v159, v160));
        v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v148));

        if (!v146)
        if ((v162 & 1) != 0)
        {
LABEL_184:
          v162 = 1;
        }
        else
        {
          if ((_DWORD)qword_7528A8 != -1)
          {
            v151 = GTAGXProfilingSupportHelper::RemappedCSV(v150);
            v152 = (void *)objc_claimAutoreleasedReturnValue(v151);
            v153 = v152;
            if (v152 && objc_msgSend(v152, "length"))
              objc_msgSend(v149, "setObject:forKeyedSubscript:", v153, CFSTR("csv"));

            goto LABEL_184;
          }
          v162 = 0;
        }
        if ((_QWORD)xmmword_752C58)
        {
          v224[0] = CFSTR("DerivedCounterDictionary");
          v222 = CFSTR("DerivedCounters");
          v223 = xmmword_752C58;
          v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v223, &v222, 1));
          v224[1] = CFSTR("DerivedCounterConfigurationVariables");
          v225[0] = v154;
          v225[1] = qword_7527E8;
          v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v225, v224, 2));
          objc_msgSend(v149, "setObject:forKeyedSubscript:", v155, CFSTR("Derived Counters Info Data"));

        }
        v156 = *(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 32);
        v157 = objc_msgSend(v149, "copy");
        (*(void (**)(uint64_t, id))(v156 + 16))(v156, v157);

      }
      _Block_object_dispose(&v237, 8);
      if (v243)
      {
        v244 = v243;
        operator delete(v243);
      }
      _Block_object_dispose(&v246, 8);
      v237 = (void **)v252;
      std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v237);

      objc_autoreleasePoolPop(context);
      dispatch_semaphore_signal((dispatch_semaphore_t)xmmword_7529E8);
      v158 = atomic_load(byte_752AF4);
      if ((v158 & 1) != 0)
        goto LABEL_194;
      continue;
    }
    break;
  }
  v184 = 0;
LABEL_194:

LABEL_195:
  _Block_object_dispose(__p, 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v160);
  v96 = v164;
LABEL_196:

}

void sub_1C6C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_Unwind_Exception *exception_objecta,uint64_t a28,uint64_t a29,void *a30)
{

  _Block_object_dispose(&STACK[0x3B0], 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a10);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__222(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__223(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 48);
}

__n128 __Block_byref_object_copy__224(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__225(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__227(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__228(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<std::vector<DYMTLEncoderInfo>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  _QWORD v20[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        v16 = a1[1];
        do
        {
          v18 = *(void **)(v16 - 24);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *(_QWORD *)(v4 - 16) = v17;
            operator delete(v17);
          }
          v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v20[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v10);
      v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<std::pair<unsigned int,unsigned int>>>::~__split_buffer((uint64_t)v20);
    }
  }
}

_QWORD *std::vector<std::vector<DYMTLEncoderInfo>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::vector<std::pair<unsigned int,unsigned int>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void ___ZN35GTUSCSamplingStreamingManagerHelper29StreamBatchIdFilteredCountersEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;
  void *v7;
  unsigned __int8 v8;
  unsigned int v9;
  char **v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;

  v1 = *(_QWORD *)(a1 + 80);
  v2 = atomic_load((unsigned __int8 *)(v1 + 2764));
  if ((v2 & 1) == 0)
  {
    GTMTLReplayController_prePlayForProfiling(**(_QWORD **)v1);
    DisableComputeEncoderCoalescing(**(GTMTLReplayController ***)v1, 1);
    v4 = *(_DWORD *)(a1 + 88);
    v5 = v4 || *(_BYTE *)(a1 + 96) == 0;
    v6 = !v5;
    if (GTUSCSamplingStreamingManagerHelper::SetupSourceForDerivedCounters((id *)v1, *(NSDictionary **)(a1 + 32), v4, 1, v6))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 16), "firstObject"));
      v8 = objc_msgSend(v7, "startSampling");

      if ((v8 & 1) != 0)
      {
        v9 = *(_DWORD *)(a1 + 88);
        if (v9)
          v10 = 0;
        else
          v10 = (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48);
        GTUSCSamplingStreamingManagerHelper::ReplayForDerivedCounters(v1, (char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48) + 24 * v9), v10, *(void **)(a1 + 40), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48), 0);
        v11 = objc_autoreleasePoolPush();
        v12 = GTUSCSamplingStreamingManagerHelper::DrainRawDerivedCounterData((id *)v1);
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        if (v13)
          objc_msgSend(*(id *)(a1 + 48), "setArray:", v13);

        objc_autoreleasePoolPop(v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 16), "firstObject"));
        objc_msgSend(v14, "stopSampling");

        DisableComputeEncoderCoalescing(**(GTMTLReplayController ***)v1, 0);
        if (*(_DWORD *)(a1 + 88) + 1 == *(_DWORD *)(a1 + 92))
        {
          GTAGXPerfStateControl::DisableConsistentGPUPerfState((GTAGXPerfStateControl *)(v1 + 40));
          GTApplePMPPerfStateControl::DisableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 64));
        }
      }
    }
  }
}

void sub_1C76B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper29StreamBatchIdFilteredCountersEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  void *v4;
  id v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = atomic_load((unsigned __int8 *)(v1 + 2764));
  if ((v2 & 1) == 0)
  {
    v4 = objc_autoreleasePoolPush();
    v5 = GTUSCSamplingStreamingManagerHelper::PostProcessRawDerivedCounterData(v1, *(void **)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

    objc_autoreleasePoolPop(v4);
  }
}

void sub_1C7744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

id GTUSCSamplingStreamingManagerHelper::PostProcessRawDerivedCounterData(uint64_t a1, void *a2)
{
  id v3;
  const CATransform3D **v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t i;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 24), "count") && objc_msgSend(v3, "count"))
  {
    v4 = &CATransform3DIdentity_ptr;
    v23 = v3;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v3, "count")));
    v5 = 0;
    v21 = a1;
LABEL_4:
    if (v5 >= (unint64_t)objc_msgSend(v3, "count"))
    {
      v18 = v24;
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v5));
      v7 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D arrayWithCapacity:]((id)v4[281], "arrayWithCapacity:", objc_msgSend(v6, "count")));
      v22 = v5;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "objectAtIndexedSubscript:", v5));
      for (i = 0; ; ++i)
      {
        if (i >= (unint64_t)objc_msgSend(v6, "count"))
        {
          objc_msgSend(v24, "addObject:", v7);

          v3 = v23;
          v5 = v22 + 1;
          a1 = v21;
          v4 = &CATransform3DIdentity_ptr;
          goto LABEL_4;
        }
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", i));
        v11 = (char *)objc_msgSend(v10, "length");
        v25 = 0;
        v26 = 0;
        v12 = 4 * (_QWORD)objc_msgSend(v10, "length");
        if (v12 <= 0x4000)
          v12 = 0x4000;
        v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v13));
        v15 = objc_retainAutorelease(v10);
        v16 = objc_msgSend(v15, "bytes");
        v17 = objc_retainAutorelease(v14);
        LOBYTE(v20) = 1;
        if ((objc_msgSend(v8, "postProcessRawDataWithRingBufferIndex:source:sourceSize:sourceRead:sourceWrite:output:outputSize:outputRead:outputWrite:isLast:", i, v16, v11 + 8, &v26, v11, objc_msgSend(v17, "mutableBytes"), v13, 0, &v25, v20) & 1) == 0)break;
        objc_msgSend(v17, "setLength:", v25);
        objc_msgSend(v7, "addObject:", v17);

      }
      NSLog(CFSTR("Failed to post process ringBuffer[%lu], srcSize[%llu], srcRead[%llu], srcWrite[%llu], outputSize[%llu], bufferWritten[%llu]"), i, v11 + 8, v26, v11, v13, v25);

      v18 = 0;
      v3 = v23;
    }

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_1C7A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void DisableComputeEncoderCoalescing(GTMTLReplayController *a1, uint64_t a2)
{
  id var1;
  void *v4;
  id v5;
  id v6;

  if (a1)
  {
    var1 = a1->var1;
    if (var1)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(var1, "defaultDevice"));
      v5 = DEVICEOBJECT(v4);
      v6 = (id)objc_claimAutoreleasedReturnValue(v5);

      if (v6)
      {
        if ((objc_opt_respondsToSelector(v6, "disableComputeEncoderCoalescing") & 1) != 0)
          objc_msgSend(v6, "setDisableComputeEncoderCoalescing:", a2);
      }

    }
  }
}

void sub_1C7B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::ReplayForDerivedCounters(uint64_t a1, char **a2, char **a3, void *a4, _QWORD *a5, void *a6)
{
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  void *v22;
  id *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  BOOL v29;
  unsigned int v30;
  _BOOL4 v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  id v46;
  void *v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char **v62;
  int v63;
  void *v64;
  id v65;
  void *v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  unsigned int v82;
  uint64_t v83;
  void *v84;
  id v85;
  void *v86;
  unsigned int v87;
  uint64_t v88;
  id v89;
  id v90;
  void *v91;
  unsigned int v92;
  id **v93;
  id **v94;
  id *v95;
  BOOL v96;
  unsigned int v97;
  unsigned int *v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char **v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  id v117;
  void *v118;
  void *v119;
  void *v120;
  id v121;
  void *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  unint64_t v128;
  void *v129;
  unint64_t v130;
  void *v132;
  void *v134;
  char **v135;
  uint64_t v136;
  id v137;
  void *v138;
  int FuncEnumConstructorType;
  id ***v140;
  uint64_t v141;
  void *context;
  id v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int v146;
  char v147;
  _QWORD v148[2];
  BOOL v149;

  v9 = a4;
  v143 = a6;
  v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "objectForKeyedSubscript:", CFSTR("perEncoderDrawCallCount")));
  v10 = **(_QWORD **)a1;
  v148[1] = v10;
  v149 = v9 == 0;
  if (!v9)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v10 + 8), "defaultCommandQueue"));
    objc_msgSend(v11, "setGPUPriority:", 0);

  }
  v148[0] = objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
  objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
  v137 = *(id *)(v10 + 8);
  v12 = *(uint64_t **)v10;
  v135 = a3;
  v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v10 + 8), "defaultCommandQueue"));
  v138 = v9;
  v145 = v10;
  v13 = (unsigned int *)(v10 + 22480);
  if (a5)
  {
    *(_QWORD *)(a1 + 2152) = 0;
    *(_QWORD *)(a1 + 2136) = *(_QWORD *)(a1 + 2128);
  }
  v147 = 0;
  v140 = (id ***)a1;
  *(_QWORD *)(a1 + 1928) = -1;
  v146 = -1;
  if (v12[13] + v12[12] > (unint64_t)*v13)
  {
    v130 = 0;
    v144 = (unsigned int *)(v10 + 22480);
    do
    {
      v14 = objc_autoreleasePoolPush();
      v15 = *v13;
      v141 = *(_QWORD *)(v12[15] + 24);
      context = v14;
      v16 = v141 + (v15 << 6);
      v17 = (int *)(v16 + 8);
      FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v16 + 8));
      if (FuncEnumConstructorType == 25)
        GTMTLReplayController_restoreCommandBuffer(v145, v16);
      GTMTLReplayController_updateCommandEncoder(v145, v16);
      v18 = *(_QWORD *)v144;
      if (*v17 == -20474)
      {
        if (!v143)
          goto LABEL_18;
      }
      else if (!v143 || *v17 != -20457)
      {
        goto LABEL_18;
      }
      v19 = GTTraceFunc_targetContext(v16, v12[2]);
      if (*v17 == -20474)
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "spatialScalerForKey:", v19));
      else
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "temporalScalerForKey:", v19));
      v21 = DEVICEOBJECT(v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

      objc_msgSend(v22, "setTracingDelegate:", v143);
      objc_msgSend(v143, "setFunctionIndex:", v18);

LABEL_18:
      v136 = v18;
      v23 = **v140;
      v24 = v23[1];
      v25 = *v23;
      v26 = *((_QWORD *)*v23 + 2);
      if (v138)
      {
        v27 = *v17;
        if ((IsFuncEnumDrawCall(*v17) & 1) != 0
          || (v27 != -16137 ? (v28 = v27 == -15297) : (v28 = 1), !v28 ? (v29 = v27 == -15486) : (v29 = 1), v29))
        {
          v30 = v146;
          if (v146 == -1)
          {
            v31 = 0;
          }
          else
          {
            --v146;
            v31 = v30 == 0;
          }
          v32 = objc_msgSend(v24, "renderCommandEncoderForKey:", GTTraceFunc_targetContext(v16, v26));
          v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "renderPipelineStateForKey:", v23[2489]));
          if (v31)
          {
            v35 = GTUSCSamplingStreamingManagerHelper::RenderDummyDrawCall(v140, (uint64_t)v23, v33, 0, (uint64_t)v23[2489], v16);
            v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            objc_msgSend(v33, "setRenderPipelineState:", v34);
          }
          else
          {
            v36 = 0;
          }
          GTMTLReplayController_defaultDispatchFunction((uint64_t)v23, v16);
          if (v31)
          {
            v37 = GTUSCSamplingStreamingManagerHelper::RenderDummyDrawCall(v140, (uint64_t)v23, v33, v36, (uint64_t)v23[2489], v16);
            objc_msgSend(v33, "setRenderPipelineState:", v34);
          }
          goto LABEL_41;
        }
        if (v27 >> 2 == 1073737833)
        {
          GTUSCSamplingStreamingManagerHelper::DispatchExpandedIndirectCommand((uint64_t)v140, (uint64_t)v23, (unint64_t *)v16, 0, (int *)&v146);
          goto LABEL_42;
        }
      }
      DispatchFunction(v23, v16, &v147);
      if (GetFuncEnumConstructorType(*v17) == 21)
      {
        v38 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v16, *(unsigned __int8 *)(v141 + (v15 << 6) + 13), v26)+ 1);
        if (std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(a5, objc_msgSend(v24, "globalTraceIdForEncoder:ofType:", v38, 0)))
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "blitCommandEncoderForKey:", v38));
          objc_msgSend(v33, "endEncoding");
          v39 = objc_msgSend(v24, "commandBufferForKey:", GTTraceFunc_targetContext(v16, v25[2]));
          v34 = (void *)objc_claimAutoreleasedReturnValue(v39);
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "computeCommandEncoder"));
          objc_msgSend(v36, "endEncoding");
          GTMTLReplayController_defaultDispatchFunction((uint64_t)v23, v16);
LABEL_41:

        }
      }
LABEL_42:

      if (!GTMTLReplayHost_IsFuncEnumSampledEncoder(*v17, 1, 0))
        goto LABEL_129;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v144));
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKeyedSubscript:", v40));

      if (v41)
      {
        v42 = v141 + (v15 << 6);
        v44 = *(unsigned __int8 *)(v42 + 13);
        v43 = (unsigned __int8 *)(v42 + 13);
        v45 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v16, v44, v12[2]) + 1);
        v46 = objc_msgSend(v137, "commandBufferForKey:", GTTraceFunc_targetContext(v16, v12[2]));
        v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
        v134 = v47;
        v48 = objc_msgSend(v47, "globalTraceObjectID");
        if (v147)
          v49 = 160;
        else
          v49 = 11312;
        if (v135)
        {
          v51 = v135[1];
          v50 = (unint64_t)v135[2];
          if ((unint64_t)v51 >= v50)
          {
            v53 = (v51 - *v135) >> 3;
            if ((unint64_t)(v53 + 1) >> 61)
              abort();
            v54 = v50 - (_QWORD)*v135;
            v55 = v54 >> 2;
            if (v54 >> 2 <= (unint64_t)(v53 + 1))
              v55 = v53 + 1;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
              v56 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            if (v56)
              v56 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v56);
            else
              v57 = 0;
            v58 = (char *)(v56 + 8 * v53);
            *(_QWORD *)v58 = 0;
            v52 = v58 + 8;
            v60 = *v135;
            v59 = v135[1];
            if (v59 == *v135)
            {
              v62 = v135;
            }
            else
            {
              do
              {
                v61 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v58 - 1) = v61;
                v58 -= 8;
              }
              while (v59 != v60);
              v62 = v135;
              v59 = *v135;
            }
            *v62 = v58;
            v62[1] = v52;
            v62[2] = (char *)(v56 + 8 * v57);
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_QWORD *)v51 = 0;
            v52 = v51 + 8;
          }
          v135[1] = v52;
          v47 = v134;
        }
        v63 = *(_DWORD *)(v145 + v49);
        if (v63 > 27)
        {
          if (v63 != 70)
          {
            if (v63 == 65)
            {
              v79 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v16, *v43, v12[2]) + 1);
              v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "parallelRenderCommandEncoderForKey:", v45));
              v81 = DEVICEOBJECT(v80);
              v66 = (void *)objc_claimAutoreleasedReturnValue(v81);

              if (a5)
              {
                v82 = objc_msgSend(v137, "globalTraceIdForEncoder:ofType:", v79, 1);
                v83 = (uint64_t)v140[241] + 1;
                v140[241] = (id **)v83;
                GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v140, a5, v16, v82, v66, v83, v136, 0);
              }
              if (v135 && (objc_opt_respondsToSelector(v66, "tileWidth") & 1) != 0)
              {
                *((_DWORD *)v135[1] - 2) = objc_msgSend(v66, "tileWidth");
                *((_DWORD *)v135[1] - 1) = objc_msgSend(v66, "tileHeight");
              }
LABEL_89:
              if (v66)
              {
                v89 = v138;
                v90 = v66;
                if (v138)
                {
                  v47 = v134;
                  if (v130 < (unint64_t)objc_msgSend(v89, "count"))
                  {
                    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectAtIndexedSubscript:"));
                    v146 = objc_msgSend(v91, "unsignedIntValue");

                    v92 = v146;
                    if (v146 != -1)
                    {
                      v93 = v140[275];
                      if (v130 < 0xAAAAAAAAAAAAAAABLL * (v140[276] - v93))
                      {
                        v94 = &v93[3 * v130];
                        v95 = *v94;
                        v96 = v146 >= (unint64_t)(v94[1] - *v94);
                        v97 = v146;
                        if (!v96)
                        {
                          v98 = (unsigned int *)&v95[v146];
                          v97 = *v98;
                          v92 = v98[1];
                        }
                        v99 = *v17 == -16353 || *v17 == -16351;
                        if (v99)
                          v100 = v97 + 1;
                        else
                          v100 = v97;
                        if (v99)
                          v101 = v92 + 1;
                        else
                          v101 = v92;
                        objc_msgSend(v90, "filterCounterRangeWithFirstBatch:lastBatch:filterIndex:", v100, v101, 0);
                      }
                    }
                    ++v130;
                  }
                }
                else
                {
                  v47 = v134;
                }

                v102 = v48 | ((_QWORD)objc_msgSend(v90, "globalTraceObjectID") << 32);
                v103 = a2;
                v105 = a2[1];
                v104 = (unint64_t)a2[2];
                if ((unint64_t)v105 >= v104)
                {
                  v107 = *a2;
                  v108 = (v105 - *a2) >> 3;
                  v109 = v108 + 1;
                  if ((unint64_t)(v108 + 1) >> 61)
                    abort();
                  v110 = v104 - (_QWORD)v107;
                  if (v110 >> 2 > v109)
                    v109 = v110 >> 2;
                  if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
                    v111 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v111 = v109;
                  if (v111)
                  {
                    if (v111 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v112 = (char *)operator new(8 * v111);
                    v103 = a2;
                  }
                  else
                  {
                    v112 = 0;
                  }
                  v113 = &v112[8 * v108];
                  *(_QWORD *)v113 = v102;
                  v106 = v113 + 8;
                  if (v105 != v107)
                  {
                    do
                    {
                      v114 = *((_QWORD *)v105 - 1);
                      v105 -= 8;
                      *((_QWORD *)v113 - 1) = v114;
                      v113 -= 8;
                    }
                    while (v105 != v107);
                    v105 = *v103;
                  }
                  *v103 = v113;
                  v103[1] = v106;
                  v103[2] = &v112[8 * v111];
                  if (v105)
                  {
                    operator delete(v105);
                    v103 = a2;
                  }
                  v47 = v134;
                }
                else
                {
                  *(_QWORD *)v105 = v102;
                  v106 = v105 + 8;
                }
                v103[1] = v106;

              }
              else
              {
                v47 = v134;
              }
            }
            else if (v63 == 28)
            {
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "computeCommandEncoderForKey:", v45));
              v65 = DEVICEOBJECT(v64);
              v66 = (void *)objc_claimAutoreleasedReturnValue(v65);

              if (a5)
              {
                v67 = objc_msgSend(v66, "globalTraceObjectID");
                v68 = (uint64_t)v140[241] + 1;
                v140[241] = (id **)v68;
                GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v140, a5, v16, v67, v66, v68, v136, 0);
              }
              goto LABEL_89;
            }
LABEL_128:

LABEL_129:
            if (FuncEnumConstructorType == 25)
            {
              v115 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v16, *(unsigned __int8 *)(v141 + (v15 << 6) + 13), v12[2])+ 1);
              if (v138)
              {
                v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "commandBufferForKey:", v115));
                v117 = DEVICEOBJECT(v116);
                v118 = (void *)objc_claimAutoreleasedReturnValue(v117);

                objc_msgSend(v118, "setDisableDeferredEndEncoding:", 1);
              }
              v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v145 + 8), "defaultDevice"));
              v120 = (void *)objc_claimAutoreleasedReturnValue(+[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 70, 16, 16, 0));
              objc_msgSend(v120, "setUsage:", 4);
              v121 = objc_msgSend(v119, "newTextureWithDescriptor:", v120);
              v122 = (void *)objc_claimAutoreleasedReturnValue(+[MTLRenderPassDescriptor renderPassDescriptor](MTLRenderPassDescriptor, "renderPassDescriptor"));
              v124 = (void *)objc_opt_new(MTLRenderPassColorAttachmentDescriptor, v123);
              objc_msgSend(v124, "setTexture:", v121);
              objc_msgSend(v124, "setLoadAction:", 2);
              objc_msgSend(v124, "setStoreAction:", 1);
              objc_msgSend(v124, "setClearColor:", 0.0, 0.0, 0.0, 1.0);
              v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "colorAttachments"));
              objc_msgSend(v125, "setObject:atIndexedSubscript:", v124, 0);

              v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v145 + 8), "commandBufferForKey:", v115));
              v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "renderCommandEncoderWithDescriptor:", v122));
              objc_msgSend(v127, "setLabel:", CFSTR("GPUToolsCounterProfilingEmptyRender"));
              objc_msgSend(v127, "endEncoding");

            }
            goto LABEL_133;
          }
          v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "renderCommandEncoderForKey:", v45));
          v74 = DEVICEOBJECT(v73);
          v75 = (void *)objc_claimAutoreleasedReturnValue(v74);

          v76 = v75;
          v66 = v76;
          if (a5)
          {
            v77 = objc_msgSend(v76, "globalTraceObjectID");
            v78 = (uint64_t)v140[241] + 1;
            v140[241] = (id **)v78;
            GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v140, a5, v16, v77, v66, v78, v136, 0);
          }
          if (v135 && (objc_opt_respondsToSelector(v66, "tileWidth") & 1) != 0)
          {
            *((_DWORD *)v135[1] - 2) = objc_msgSend(v66, "tileWidth");
            *((_DWORD *)v135[1] - 1) = objc_msgSend(v66, "tileHeight");
          }
LABEL_88:

          goto LABEL_89;
        }
        if (v63 == 17)
        {
          v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "accelerationStructureCommandEncoderForKey:", v45));
          v85 = DEVICEOBJECT(v84);
          v86 = (void *)objc_claimAutoreleasedReturnValue(v85);

          v72 = v86;
          v66 = v72;
          if (!a5)
            goto LABEL_88;
        }
        else
        {
          if (v63 != 21)
            goto LABEL_128;
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "blitCommandEncoderForKey:", v45));
          v70 = DEVICEOBJECT(v69);
          v71 = (void *)objc_claimAutoreleasedReturnValue(v70);

          v72 = v71;
          v66 = v72;
          if (!a5)
            goto LABEL_88;
        }
        v87 = objc_msgSend(v72, "globalTraceObjectID");
        v88 = (uint64_t)v140[241] + 1;
        v140[241] = (id **)v88;
        GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v140, a5, v16, v87, v66, v88, v136, 0);
        goto LABEL_88;
      }
LABEL_133:
      objc_autoreleasePoolPop(context);
      v13 = v144;
      v128 = *v144 + 1;
      *v144 = v128;
    }
    while (v12[13] + v12[12] > v128);
  }
  objc_msgSend(v129, "finish");

  ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)v148);
}

void sub_1C8804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)(v28 - 112));
  _Unwind_Resume(a1);
}

id GTUSCSamplingStreamingManagerHelper::DrainRawDerivedCounterData(id *this)
{
  const CATransform3D **v2;
  unint64_t i;
  void *v4;
  void *v5;
  uint64_t j;
  void *v7;
  void *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  id v14;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  if (objc_msgSend(this[3], "count"))
  {
    v2 = &CATransform3DIdentity_ptr;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(this[3], "count")));
    for (i = 0; ; ++i)
    {
      if (i >= (unint64_t)objc_msgSend(this[3], "count"))
      {
        v14 = v16;
        goto LABEL_17;
      }
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "objectAtIndexedSubscript:", i));
      v5 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D arrayWithCapacity:]((id)v2[281], "arrayWithCapacity:", objc_msgSend(v4, "ringBufferNum")));
      if (objc_msgSend(v4, "isEnabled"))
        break;
LABEL_15:

    }
    for (j = 0; ; j = (j + 1))
    {
      if (j >= objc_msgSend(v4, "ringBufferNum"))
      {
        objc_msgSend(v16, "addObject:", v5);
        v2 = &CATransform3DIdentity_ptr;
        goto LABEL_15;
      }
      v18 = 0;
      v19 = 0;
      v17 = 0;
      if ((objc_msgSend(v4, "ringBufferInfoAtIndex:base:size:dataOffset:dataSize:", j, &v19, (char *)&v18 + 4, &v18, &v17) & 1) == 0)break;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", v17));
      v8 = v7;
      v9 = v17;
      if (v17 + v18 <= HIDWORD(v18))
      {
        objc_msgSend(v7, "appendBytes:length:", v19 + v18, v17);
      }
      else
      {
        v10 = HIDWORD(v18) - v18;
        objc_msgSend(v7, "appendBytes:length:", v19 + v18, (HIDWORD(v18) - v18));
        objc_msgSend(v8, "appendBytes:length:", v19, v9 - v10);
      }
      v11 = objc_msgSend(v4, "drainRingBufferAtIndex:dataSize:", j, v17);
      if (v11 != v17)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
        NSLog(CFSTR("Fail, unexpected drain count for source %@!"), v12);

      }
      objc_msgSend(v5, "addObject:", v8);

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
    NSLog(CFSTR("Fail, unable to retrieve ring buffer info from source %@!"), v13);

    v14 = 0;
LABEL_17:

  }
  else
  {
    v14 = 0;
  }
  return v14;
}

void sub_1C8C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::GatherCommandBufferRestoreInfo(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;

  GTMTLReplayController_prePlayForProfiling(**this);
  v2 = **this;
  v3 = *(_QWORD **)v2;
  v4 = (_DWORD *)(v2 + 22480);
  if (*(_QWORD *)(*(_QWORD *)v2 + 104) + *(_QWORD *)(*(_QWORD *)v2 + 96) > (unint64_t)*(unsigned int *)(v2 + 22480))
  {
    while (1)
    {
      v5 = objc_autoreleasePoolPush();
      v6 = *(_QWORD *)(v3[15] + 24) + ((unint64_t)*v4 << 6);
      v7 = GetFuncEnumConstructorType(*(_DWORD *)(v6 + 8)) == 25
         ? GTMTLReplayController_restoreCommandBuffer(v2, v6)
         : 0;
      GTMTLReplayController_updateCommandEncoder(v2, v6);
      if (*(_DWORD *)(v6 + 8) >> 2 == 1073737833)
        break;
      GTMTLReplayController_defaultDispatchFunction(**this, v6);
      if (v7)
        goto LABEL_9;
LABEL_10:
      objc_autoreleasePoolPop(v5);
      v8 = (*v4 + 1);
      *v4 = v8;
      if (v3[13] + v3[12] <= v8)
      {
        v2 = **this;
        goto LABEL_12;
      }
    }
    GTMTLReplayController_executeCommandsInBuffer((uint64_t *)v2, (unint64_t *)v6, 0, 0xFFFFFFFFFFFFFFFFLL);
    if (!v7)
      goto LABEL_10;
LABEL_9:
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>((uint64_t)(this + 281), *v4, *v4);
    goto LABEL_10;
  }
LABEL_12:
  *(_DWORD *)(v2 + 22484) = 0;
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1C8FDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::SetupBuffersForAPSSource(GTUSCSamplingStreamingManagerHelper *this)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  unint64_t i;
  void *v5;
  void *v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  GTUSCSamplingStreamingManagerHelper *v11;
  dispatch_semaphore_t v12;
  void *v13;
  dispatch_semaphore_t v14;
  void *v15;
  _BYTE v16[24];

  if ((_DWORD)qword_7528A8 != -1)
  {
    objc_msgSend(*((id *)&xmmword_752038 + 1), "count");
    v1 = 0;
    if (objc_msgSend(*((id *)&xmmword_752038 + 1), "count"))
    {
      v2 = 0;
      do
      {
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", v2));
        for (i = 0; i < (unint64_t)objc_msgSend(&off_7389D0, "count"); ++i)
        {
          v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_7389D0, "objectAtIndexedSubscript:", i));
          v7 = objc_msgSend(v5, "isEqualToString:", v6);

          if (v7)
          {
            v8 = (char *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8 * v1++;
            *((_QWORD *)v8 + 388) = v2;
          }
        }

        ++v2;
      }
      while (v2 < (unint64_t)objc_msgSend(*((id *)&xmmword_752038 + 1), "count"));
    }
    std::vector<std::vector<GTMMappedBuffer>>::reserve(&xmmword_752958, v1 + 1);
    std::vector<std::vector<GTMMappedBuffer>>::reserve(&qword_752940, v1 + 1);
    std::vector<std::vector<GTMMappedBuffer>>::reserve(&xmmword_752988, v1 + 1);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::reserve(&qword_7529A0, v1 + 1);
    std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::reserve(&xmmword_7529B8, v1 + 1);
    std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>::reserve((_QWORD *)&xmmword_7529C8 + 1, v1 + 1);
    *(_QWORD *)v16 = (int)qword_7528A8;
    *(_OWORD *)&v16[8] = xmmword_752C48;
    v9 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(3uLL);
    v10 = 0;
    *(_OWORD *)v9 = *(_OWORD *)v16;
    v9[2] = *(_QWORD *)&v16[16];
    do
    {
      v11 = (GTUSCSamplingStreamingManagerHelper *)v9[v10];
      if (v11 != (GTUSCSamplingStreamingManagerHelper *)-1)
        GTUSCSamplingStreamingManagerHelper::SetupBufferForSourceAtIndex(v11, v11 != (GTUSCSamplingStreamingManagerHelper *)(int)qword_7528A8);
      ++v10;
    }
    while (v10 != 3);
    v12 = dispatch_semaphore_create(0);
    v13 = (void *)xmmword_7529F8;
    *(_QWORD *)&xmmword_7529F8 = v12;

    v14 = dispatch_semaphore_create(0);
    v15 = (void *)*((_QWORD *)&xmmword_7529E8 + 1);
    *((_QWORD *)&xmmword_7529E8 + 1) = v14;

    if (v9)
      operator delete(v9);
  }
}

void sub_1C9250(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::ForceDrainAllSourceBuffers(GTUSCSamplingStreamingManagerHelper *this)
{
  GTUSCSamplingStreamingManagerHelper *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = this;
  v2 = -[GTUSCSamplingStreamingManagerHelper countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v8;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v1);
        v5 = 0;
        v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v4);
        while (v5 < objc_msgSend(v6, "ringBufferNum", (_QWORD)v7))
        {
          if (objc_msgSend(v6, "isEnabled"))
            objc_msgSend(v6, "drainRingBufferAtIndex:dataSize:", v5, 0x40000000);
          v5 = (v5 + 1);
        }
        v4 = (char *)v4 + 1;
      }
      while (v4 != v2);
      v2 = -[GTUSCSamplingStreamingManagerHelper countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v2);
  }

}

void sub_1C93B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

intptr_t GTUSCSamplingStreamingManagerHelper::DrainAllSourceBuffers(intptr_t this, uint64_t a2)
{
  uint64_t v3;
  NSObject **v4;
  NSObject **v5;
  NSObject *v6;

  if (this != a2)
  {
    v3 = this;
    do
    {
      v4 = *(NSObject ***)v3;
      v5 = *(NSObject ***)(v3 + 8);
      while (v4 != v5)
      {
        v6 = *v4++;
        this = dispatch_semaphore_signal(v6);
      }
      v3 += 24;
    }
    while (v3 != a2);
  }
  return this;
}

void GTUSCSamplingStreamingManagerHelper::PollAndDrainSourceRingBuffer(GTUSCSamplingStreamingManagerHelper *this, unsigned int a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  unsigned __int8 v9;
  unsigned int *v10;
  unsigned __int8 v11;
  NSObject *v12;
  dispatch_time_t v13;
  intptr_t v14;
  unsigned __int8 v15;
  intptr_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 v20;
  id v21;
  dispatch_semaphore_t *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;

  v5 = (unsigned int *)((char *)this + 2752);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (objc_msgSend(*((id *)this + 3), "count") == (char *)&dword_0 + 1)
    v7 = 0;
  else
    v7 = a2 + 1;
  if (*((_DWORD *)this + 544) != -1)
  {
    if (a2 == 2)
    {
      v8 = (char *)this + 3112;
    }
    else
    {
      if (a2 != 1)
        goto LABEL_12;
      v8 = (char *)this + 3104;
    }
    v7 = *(_DWORD *)v8;
  }
LABEL_12:
  v9 = atomic_load((unsigned __int8 *)this + 2763);
  if ((v9 & 1) == 0)
  {
    v10 = (unsigned int *)((char *)this + 2748);
    v34 = v7;
    while (1)
    {
      v11 = atomic_load((unsigned __int8 *)this + 2764);
      if ((v11 & 1) != 0)
        goto LABEL_40;
      v12 = *(NSObject **)(*(_QWORD *)(*((_QWORD *)this + 303) + 24 * a2) + 8 * a3);
      v13 = dispatch_time(0, 30000000);
      v14 = dispatch_semaphore_wait(v12, v13);
      v15 = atomic_load((unsigned __int8 *)this + 2761);
      if ((v15 & 1) != 0)
      {
        v16 = v14;
        v17 = atomic_load((unsigned __int8 *)this + 2760);
        if ((v17 & 1) == 0 || !v14)
          break;
      }
LABEL_35:
      v30 = atomic_load((unsigned __int8 *)this + 2763);
      if ((v30 & 1) != 0)
        goto LABEL_40;
    }
    v18 = *(_QWORD *)(*((_QWORD *)this + 294) + 24 * a2);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 3), "objectAtIndexedSubscript:", v34));
    v20 = atomic_load((unsigned __int8 *)this + 2760);
    v21 = v19;
    if (!objc_msgSend(v21, "isEnabled"))
      goto LABEL_27;
    v37 = 0;
    v38 = 0;
    v36 = 0;
    if ((objc_msgSend(v21, "ringBufferInfoAtIndex:base:size:dataOffset:dataSize:", a3, &v38, (char *)&v37 + 4, &v37, &v36) & 1) == 0|| !v36|| !(v20 & 1 | (v36 >> 13)))
    {
      goto LABEL_27;
    }
    v22 = (dispatch_semaphore_t *)(v18 + 120 * a3);
    if (v37 + v36 <= HIDWORD(v37))
      GTMMappedBuffer::MemcpyFromSourceBuffer(v22, &v38[v37], v36, 0, 0);
    else
      GTMMappedBuffer::MemcpyFromSourceBuffer(v22, &v38[v37], HIDWORD(v37) - v37, v38, v36 - (HIDWORD(v37) - v37));
    v23 = objc_msgSend(v21, "drainRingBufferAtIndex:dataSize:", a3, v36);
    v24 = v36;
    if (v23 || !v36)
    {

      if (v24)
      {
        do
          v31 = __ldaxr((unsigned int *)this + 685);
        while (__stlxr(v31 + 1, (unsigned int *)this + 685));
LABEL_30:
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*((_QWORD *)this + 306) + 24 * a2) + 8 * a3));
LABEL_31:
        if (!v16)
        {
          do
          {
            v28 = __ldaxr(v10);
            v29 = v28 + 1;
          }
          while (__stlxr(v29, v10));
          if (v29 == *((_DWORD *)this + 541))
            std::condition_variable::notify_all((std::condition_variable *)((char *)this + 2768));
        }
        goto LABEL_35;
      }
    }
    else
    {
LABEL_27:

    }
    v25 = atomic_load((unsigned __int8 *)this + 2760);
    if ((v25 & 1) == 0)
      goto LABEL_31;
    v26 = atomic_load((unsigned int *)this + 685);
    v27 = atomic_load((unsigned int *)this + 686);
    if (v26 != v27)
      goto LABEL_31;
    goto LABEL_30;
  }
  do
LABEL_40:
    v32 = __ldaxr(v5);
  while (__stlxr(v32 - 1, v5));
  if (!atomic_load(v5))
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 2992));
}

void sub_1C9700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *DynamicBuffer::AddBuffer2(DynamicBuffer *this, const unsigned __int8 *__src, const unsigned __int8 *a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  void *result;
  const unsigned __int8 *v25;

  v6 = (os_unfair_lock_s *)((char *)this + 16);
  while (1)
  {
    v7 = *((_QWORD *)this + 1);
    v9 = (_QWORD *)*((_QWORD *)this + 3);
    v8 = (_QWORD *)*((_QWORD *)this + 4);
    if (v7 == 0xAAAAAAAAAAAAAAABLL * (v8 - v9))
    {
      v10 = *((_QWORD *)this + 5);
      if ((unint64_t)v8 >= v10)
      {
        v12 = v7 + 1;
        if ((unint64_t)(v7 + 1) > 0xAAAAAAAAAAAAAAALL)
          abort();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v9) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v15 = (char *)operator new(24 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[24 * v7];
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0x1000000;
        v17 = v16;
        if (v8 != v9)
        {
          do
          {
            v18 = *(_OWORD *)(v8 - 3);
            *((_QWORD *)v17 - 1) = *(v8 - 1);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v8 -= 3;
          }
          while (v8 != v9);
          v8 = (_QWORD *)*((_QWORD *)this + 3);
        }
        v11 = v16 + 24;
        *((_QWORD *)this + 3) = v17;
        *((_QWORD *)this + 4) = v16 + 24;
        *((_QWORD *)this + 5) = &v15[24 * v14];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = 0;
        v8[1] = 0;
        v11 = v8 + 3;
        v8[2] = 0x1000000;
      }
      *((_QWORD *)this + 4) = v11;
      if ((unint64_t)a3 <= 0x1000000)
        v19 = 0x1000000;
      else
        v19 = (size_t)a3;
      *(v11 - 1) = v19;
      *(v11 - 3) = malloc_type_malloc(v19, 0x3DACA7DBuLL);
      *(v11 - 2) = 0;
      v7 = *((_QWORD *)this + 1);
      v9 = (_QWORD *)*((_QWORD *)this + 3);
    }
    v20 = &v9[3 * v7];
    v21 = v20[1];
    v22 = 0x1000000 - v21;
    v23 = 0x1000000 - v21 >= (unint64_t)a3 ? (size_t)a3 : 0x1000000 - v21;
    result = memcpy((void *)(*v20 + v21), __src, v23);
    v20[1] += v23;
    if (v22 >= (unint64_t)a3)
      break;
    v25 = &a3[-v23];
    os_unfair_lock_lock(v6);
    ++*((_QWORD *)this + 1);
    os_unfair_lock_unlock(v6);
    __src = (const unsigned __int8 *)(&a3[(_QWORD)__src] - v25);
    a3 = v25;
  }
  return result;
}

_QWORD *GTMMappedBuffer::MemcpyFromSourceBuffer(dispatch_semaphore_t *this, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v10;
  _QWORD *result;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject **v19;
  NSObject *v20;
  objc_class *v21;
  objc_class *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int64_t v31;
  dispatch_semaphore_t v32;
  unint64_t v33;
  dispatch_semaphore_t v34;
  dispatch_semaphore_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *i;
  void *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  objc_class *v51;
  dispatch_semaphore_t v52;
  NSObject *v53;
  NSObject *v54;
  objc_class *isa;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  int64_t v63;
  NSObject *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  objc_class *v72;
  void *v73;
  __int128 v74;
  __int128 v75;
  char *v76;

  v10 = a5 + a3;
  result = GTMMappedBuffer::Allocate(this, a5 + a3);
  if (result)
  {
    v12 = result;
    v13 = result + 4096;
    memcpy(result + 4096, a2, a3);
    memcpy((char *)v13 + a3, a4, a5);
    dispatch_semaphore_wait(*this, 0xFFFFFFFFFFFFFFFFLL);
    v14 = this[8];
    v15 = this[7];
    if (v14 == v15)
      v16 = 0;
    else
      v16 = 170 * (v14 - v15) - 1;
    v17 = (unint64_t)this[10];
    v18 = (unint64_t)this[11] + v17;
    if (v16 != v18)
      goto LABEL_47;
    v19 = this + 6;
    if (v17 < 0xAA)
    {
      v33 = v14 - v15;
      v34 = this[9];
      v35 = this[6];
      if (v33 >= v34 - v35)
      {
        if (v34 == v35)
          v36 = 1;
        else
          v36 = ((char *)v34 - (char *)v35) >> 2;
        v76 = (char *)(this + 9);
        *(_QWORD *)&v74 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v36);
        *((_QWORD *)&v74 + 1) = v74 + 8 * v33;
        *(_QWORD *)&v75 = *((_QWORD *)&v74 + 1);
        *((_QWORD *)&v75 + 1) = v74 + 8 * v37;
        v73 = operator new(0xFF0uLL);
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v74, &v73);
        for (i = this[8];
              i != (_QWORD *)this[7];
              std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)&v74, i))
        {
          --i;
        }
        v40 = v74;
        v41 = v75;
        *(_QWORD *)&v74 = this[6];
        v39 = (void *)v74;
        *((_QWORD *)&v74 + 1) = i;
        *((_OWORD *)this + 3) = v40;
        *((_OWORD *)this + 4) = v41;
        if (v39)
          operator delete(v39);
        goto LABEL_46;
      }
      if (v34 != v14)
      {
        *(_QWORD *)&v74 = operator new(0xFF0uLL);
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(this + 6, &v74);
LABEL_46:
        v15 = this[7];
        v18 = (unint64_t)this[10] + (_QWORD)this[11];
LABEL_47:
        v65 = (unint64_t)v15[v18 / 0xAA].isa + 24 * (v18 % 0xAA);
        *(_QWORD *)v65 = v12;
        *(_QWORD *)(v65 + 8) = v13;
        *(_DWORD *)(v65 + 16) = v10;
        this[11] = (dispatch_semaphore_t)((char *)this[11] + 1);
        return (_QWORD *)dispatch_semaphore_signal(*this);
      }
      *(_QWORD *)&v74 = operator new(0xFF0uLL);
      std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)(this + 6), &v74);
      v53 = this[7];
      v14 = this[8];
      isa = v53->isa;
      v54 = v53 + 1;
      v21 = isa;
      this[7] = v54;
      if (v14 == this[9])
      {
        v56 = (char *)v54 - (char *)*v19;
        if (v54 > *v19)
        {
          v57 = v56 >> 3;
          v25 = v56 >> 3 < -1;
          v58 = (v56 >> 3) + 2;
          if (v25)
            v59 = v58;
          else
            v59 = v57 + 1;
          v60 = -(v59 >> 1);
          v61 = v59 >> 1;
          v62 = &v54[-v61];
          v63 = (char *)v14 - (char *)v54;
          if (v14 != v54)
          {
            memmove(&v54[-v61], v54, (char *)v14 - (char *)v54);
            v54 = this[7];
          }
          v14 = ((char *)v62 + v63);
          v64 = &v54[v60];
          goto LABEL_44;
        }
        if (v14 == *v19)
          v66 = 1;
        else
          v66 = ((char *)v14 - (char *)*v19) >> 2;
        v43 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v66);
        v44 = &v43[v66 >> 2];
        v46 = &v43[v67];
        v68 = (char *)this[7];
        v14 = v44;
        v69 = (char *)this[8] - v68;
        if (v69)
        {
          v14 = ((char *)v44 + (v69 & 0xFFFFFFFFFFFFFFF8));
          v70 = 8 * (v69 >> 3);
          v71 = &v43[v66 >> 2];
          do
          {
            v72 = *(objc_class **)v68;
            v68 += 8;
            v71->isa = v72;
            ++v71;
            v70 -= 8;
          }
          while (v70);
        }
LABEL_32:
        v52 = this[6];
        this[6] = v43;
        this[7] = v44;
        this[8] = v14;
        this[9] = v46;
        if (v52)
        {
          operator delete(v52);
          v14 = this[8];
        }
      }
    }
    else
    {
      this[10] = (dispatch_semaphore_t)(v17 - 170);
      v22 = v15->isa;
      v20 = v15 + 1;
      v21 = v22;
      this[7] = v20;
      if (this[9] == v14)
      {
        v23 = (char *)v20 - (char *)*v19;
        if (v20 > *v19)
        {
          v24 = v23 >> 3;
          v25 = v23 >> 3 < -1;
          v26 = (v23 >> 3) + 2;
          if (v25)
            v27 = v26;
          else
            v27 = v24 + 1;
          v28 = -(v27 >> 1);
          v29 = v27 >> 1;
          v30 = &v20[-v29];
          v31 = (char *)v14 - (char *)v20;
          if (v14 == v20)
          {
            v32 = v14;
          }
          else
          {
            memmove(&v20[-v29], v20, (char *)v14 - (char *)v20);
            v32 = this[7];
          }
          v14 = ((char *)v30 + v31);
          v64 = &v32[v28];
LABEL_44:
          this[7] = v64;
          this[8] = v14;
          goto LABEL_45;
        }
        if (v14 == *v19)
          v42 = 1;
        else
          v42 = ((char *)v14 - (char *)*v19) >> 2;
        v43 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v42);
        v44 = &v43[v42 >> 2];
        v46 = &v43[v45];
        v47 = (char *)this[7];
        v14 = v44;
        v48 = (char *)this[8] - v47;
        if (v48)
        {
          v14 = ((char *)v44 + (v48 & 0xFFFFFFFFFFFFFFF8));
          v49 = 8 * (v48 >> 3);
          v50 = &v43[v42 >> 2];
          do
          {
            v51 = *(objc_class **)v47;
            v47 += 8;
            v50->isa = v51;
            ++v50;
            v49 -= 8;
          }
          while (v49);
        }
        goto LABEL_32;
      }
    }
LABEL_45:
    v14->isa = v21;
    ++this[8];
    goto LABEL_46;
  }
  return result;
}

void sub_1C9CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *GTMMappedBuffer::Allocate(dispatch_semaphore_t *this, unsigned int a2)
{
  dispatch_semaphore_t v4;
  dispatch_semaphore_t v5;
  unsigned int v6;
  unsigned int isa;
  _QWORD *v8;
  unint64_t *v9;

  dispatch_semaphore_wait(this[1], 0xFFFFFFFFFFFFFFFFLL);
  v4 = this[12];
  v5 = this[13];
  if (v4 == v5)
  {
LABEL_7:
    v8 = 0;
  }
  else
  {
    v6 = a2;
    while (1)
    {
      isa = v4[3].isa;
      if (HIDWORD(v4[2].isa) == isa)
      {
        isa = 0;
        HIDWORD(v4[2].isa) = 0;
        LODWORD(v4[3].isa) = 0;
      }
      if ((unint64_t)a2 + 32776 < LODWORD(v4[2].isa) - isa)
        break;
      v4 += 4;
      if (v4 == v5)
        goto LABEL_7;
    }
    v9 = (unint64_t *)((char *)v4[1].isa + isa);
    *v9 = (v6 + 8) | ((unint64_t)v4->isa << 32) | 0xCADDAC0000000000;
    v8 = v9 + 1;
    LODWORD(v4[3].isa) += v6 + 8;
  }
  dispatch_semaphore_signal(this[1]);
  return v8;
}

void GTUSCSamplingStreamingManagerHelper::PostProcessRawData(GTUSCSamplingStreamingManagerHelper *this, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned __int8 v7;
  unint64_t *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unsigned __int8 v32;
  _OWORD *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  unsigned __int8 v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  int64x2_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  int v64;
  _OWORD *v65;
  unint64_t v66;
  const void *v67;
  unsigned __int8 *v68;
  size_t v69;
  id v70;
  id v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  void *v76;
  void *v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  int64x2_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t i;
  uint64_t v97;
  void *v98;
  id v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  int v110;
  unsigned int v111;
  GTUSCSamplingStreamingManagerHelper *v112;
  unsigned __int8 v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  void *v118;
  void *v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unsigned int *v122;
  unsigned int v123;
  std::condition_variable *v125;
  std::condition_variable *v126;
  unsigned int *v127;
  uint64_t v128;
  __int128 *v129;
  _OWORD *v130;
  _OWORD *v131;
  int v132;
  dispatch_semaphore_t *v133;
  unint64_t v134;
  GTMMappedBuffer *v135;
  dispatch_semaphore_t *v136;
  unsigned int *v137;
  void *v138;
  GTUSCSamplingStreamingManagerHelper *v140;
  _QWORD v142[5];
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  id v147;
  uint64_t v148;
  _BYTE v149[32];
  __int128 v150;
  int64x2_t v151;
  _QWORD v152[2];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  unint64_t v156;
  int64x2_t v157;
  unint64_t v158;
  _QWORD *v159;
  const __CFString *v160;
  void *v161;
  _QWORD v162[4];
  _QWORD v163[4];

  v137 = (unsigned int *)((char *)this + 2752);
  do
    v4 = __ldaxr(v137);
  while (__stlxr(v4 + 1, (unsigned int *)this + 688));
  if (objc_msgSend(*((id *)this + 3), "count") == (char *)&dword_0 + 1)
    v5 = 0;
  else
    v5 = a2 + 1;
  if (*((_DWORD *)this + 544) != -1)
  {
    if (a2 == 2)
    {
      v6 = (char *)this + 3112;
    }
    else
    {
      if (a2 != 1)
        goto LABEL_12;
      v6 = (char *)this + 3104;
    }
    v5 = *(_DWORD *)v6;
  }
LABEL_12:
  v140 = this;
  v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 3), "objectAtIndexedSubscript:", v5));
  v7 = atomic_load((unsigned __int8 *)this + 2763);
  if ((v7 & 1) == 0)
  {
    v8 = (unint64_t *)((char *)this + 2728);
    v125 = (std::condition_variable *)((char *)this + 2768);
    v126 = (std::condition_variable *)((char *)this + 2880);
    v127 = (unsigned int *)((char *)this + 2744);
    v128 = 120 * a3;
    do
    {
      v9 = atomic_load((unsigned __int8 *)v140 + 2764);
      if ((v9 & 1) != 0)
        break;
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(*((_QWORD *)v140 + 306) + 24 * a2) + 8 * a3), 0xFFFFFFFFFFFFFFFFLL);
      v10 = atomic_load((unsigned __int8 *)v140 + 2763);
      if ((v10 & 1) != 0)
        break;
      v11 = atomic_load((unsigned __int8 *)v140 + 2764);
      if ((v11 & 1) != 0)
        break;
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*((_QWORD *)v140 + 309) + 8 * a2), 0xFFFFFFFFFFFFFFFFLL);
      v12 = *(_QWORD *)(*((_QWORD *)v140 + 294) + 24 * a2) + v128;
      v13 = *(_QWORD *)(*((_QWORD *)v140 + 300) + 24 * a2);
      v14 = *(_QWORD *)(*((_QWORD *)v140 + 291) + 24 * a2);
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)v12, 0xFFFFFFFFFFFFFFFFLL);
      v153 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)(v12 + 48) = 0u;
      v154 = *(_OWORD *)(v12 + 64);
      *(_OWORD *)(v12 + 64) = 0u;
      v155 = *(_OWORD *)(v12 + 80);
      *(_OWORD *)(v12 + 80) = 0u;
      v135 = (GTMMappedBuffer *)v12;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)v12);
      v152[0] = 0;
      v151 = 0u;
      if (*((_QWORD *)&v155 + 1))
      {
        if (*((_QWORD *)&v155 + 1) > 0xAAAAAAAAAAAAAAAuLL)
          abort();
        *(_QWORD *)&v150 = v152;
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(*((unint64_t *)&v155 + 1));
        *(_QWORD *)v149 = v15;
        *(_QWORD *)&v149[8] = v15;
        v17 = &v15[24 * v16];
        *(_QWORD *)&v149[16] = v15;
        *(_QWORD *)&v149[24] = v17;
        v18 = v151.i64[1];
        v19 = v151.i64[0];
        if (v151.i64[1] == v151.i64[0])
        {
          v23 = vdupq_n_s64(v151.u64[1]);
          v20 = v15;
        }
        else
        {
          v20 = v15;
          do
          {
            v21 = *(_OWORD *)(v18 - 24);
            v18 -= 24;
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            v22 = *(_QWORD *)(v18 + 16);
            *(_QWORD *)(v18 + 16) = 0;
            *((_QWORD *)v20 + 2) = v22;
          }
          while (v18 != v19);
          v23 = v151;
          v17 = *(char **)&v149[24];
          v15 = *(char **)&v149[16];
        }
        v151.i64[0] = (uint64_t)v20;
        v151.i64[1] = (uint64_t)v15;
        *(int64x2_t *)&v149[8] = v23;
        v24 = v152[0];
        v152[0] = v17;
        *(_QWORD *)&v149[24] = v24;
        *(_QWORD *)v149 = v23.i64[0];
        std::__split_buffer<std::tuple<unsigned char *,unsigned long long,NSMutableData * {__strong}>>::~__split_buffer((uint64_t)v149);
      }
      v133 = (dispatch_semaphore_t *)(v13 + v128);
      v136 = (dispatch_semaphore_t *)(v14 + v128);
      v25 = atomic_load((unsigned __int8 *)v140 + 2760);
      if ((v25 & 1) == 0)
        goto LABEL_35;
      if ((_QWORD)v154 == *((_QWORD *)&v153 + 1))
        goto LABEL_35;
      v26 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8 * ((unint64_t)v155 / 0xAA));
      v27 = *v26;
      v28 = *v26 + 24 * ((unint64_t)v155 % 0xAA);
      v29 = *(_QWORD *)(*((_QWORD *)&v153 + 1) + 8 * ((*((_QWORD *)&v155 + 1) + (_QWORD)v155) / 0xAAuLL))
          + 24 * ((*((_QWORD *)&v155 + 1) + (_QWORD)v155) % 0xAAuLL);
      if (v28 == v29)
        goto LABEL_35;
      v30 = 0;
      do
      {
        if (*(_DWORD *)(v28 + 16))
          ++v30;
        v28 += 24;
        if (v28 - v27 == 4080)
        {
          v31 = v26[1];
          ++v26;
          v27 = v31;
          v28 = v31;
        }
      }
      while (v28 != v29);
      if (!v30)
      {
LABEL_35:
        v32 = atomic_load((unsigned __int8 *)v140 + 2760);
        if ((v32 & 1) != 0)
        {
          dispatch_semaphore_wait(*v136, 0xFFFFFFFFFFFFFFFFLL);
          v33 = (_OWORD *)(v14 + 120 * a3);
          *(_OWORD *)v149 = v33[3];
          v33[3] = 0u;
          *(_OWORD *)&v149[16] = v33[4];
          v33[4] = 0u;
          v150 = v33[5];
          v33[5] = 0u;
          dispatch_semaphore_signal(*v136);
          if (*((_QWORD *)&v150 + 1))
          {
            v34 = *(_QWORD *)(*(_QWORD *)&v149[8] + 8 * ((unint64_t)v150 / 0xAA))
                + 24 * ((unint64_t)v150 % 0xAA);
            v35 = *(unsigned __int8 **)v34;
            v36 = *(_QWORD *)(v34 + 8);
            v37 = *(unsigned int *)(v34 + 16);
            v38 = objc_autoreleasePoolPush();
            v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", v36, v37));
            objc_autoreleasePoolPop(v38);
            GTMMappedBuffer::Deallocate((uint64_t)v136, v35);
            v148 = 0;
            v40 = objc_retainAutorelease(v39);
            v41 = objc_msgSend(v40, "bytes");
            v42 = objc_msgSend(v40, "length");
            v43 = atomic_load((unsigned __int8 *)v140 + 2760);
            GTMMappedBuffer::PostProcessRawDataFromSource(&v145, v133, v138, (uint64_t)v41, (uint64_t)v42, &v148, a3, v43 & 1);
            v44 = v146;
            if (v146 && v44 <= (unint64_t)objc_msgSend(v40, "length"))
            {
              v45 = objc_retainAutorelease(v40);
              GTMMappedBuffer::MemcpyFromSourceBuffer(v136, (unsigned __int8 *)objc_msgSend(v45, "length") + (_QWORD)objc_msgSend(v45, "bytes") - v44, v44, 0, 0);
            }
            v46 = v148;
            v47 = v145;
            if (v148 && v145)
            {
              v48 = (_QWORD *)v151.i64[1];
              if (v151.i64[1] >= v152[0])
              {
                v50 = 0xAAAAAAAAAAAAAAABLL * ((v151.i64[1] - v151.i64[0]) >> 3);
                v51 = v50 + 1;
                if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * ((v152[0] - v151.i64[0]) >> 3) > v51)
                  v51 = 0x5555555555555556 * ((v152[0] - v151.i64[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v152[0] - v151.i64[0]) >> 3) >= 0x555555555555555)
                  v52 = 0xAAAAAAAAAAAAAAALL;
                else
                  v52 = v51;
                v159 = v152;
                if (v52)
                  v52 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v52);
                else
                  v53 = 0;
                v54 = (_QWORD *)(v52 + 24 * v50);
                v156 = v52;
                v157.i64[0] = (uint64_t)v54;
                v158 = v52 + 24 * v53;
                *v54 = v46;
                v54[1] = v47;
                v54[2] = v147;
                v49 = v54 + 3;
                v157.i64[1] = (uint64_t)(v54 + 3);
                v55 = v151.i64[1];
                v56 = v151.i64[0];
                if (v151.i64[1] == v151.i64[0])
                {
                  v59 = vdupq_n_s64(v151.u64[1]);
                }
                else
                {
                  do
                  {
                    v57 = *(_OWORD *)(v55 - 24);
                    v55 -= 24;
                    *(_OWORD *)(v54 - 3) = v57;
                    v54 -= 3;
                    v58 = *(_QWORD *)(v55 + 16);
                    *(_QWORD *)(v55 + 16) = 0;
                    v54[2] = v58;
                  }
                  while (v55 != v56);
                  v59 = v151;
                  v49 = (_QWORD *)v157.i64[1];
                  v47 = v145;
                }
                v151.i64[0] = (uint64_t)v54;
                v151.i64[1] = (uint64_t)v49;
                v157 = v59;
                v60 = v152[0];
                v152[0] = v158;
                v158 = v60;
                v156 = v59.i64[0];
                std::__split_buffer<std::tuple<unsigned char *,unsigned long long,NSMutableData * {__strong}>>::~__split_buffer((uint64_t)&v156);
              }
              else
              {
                *(_QWORD *)v151.i64[1] = v148;
                v48[1] = v47;
                v48[2] = v147;
                v49 = v48 + 3;
              }
              v151.i64[1] = (uint64_t)v49;
            }
            do
              v61 = __ldaxr(v8);
            while (__stlxr(v61 + v47, v8));

          }
          std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100](v149);
        }
        v30 = 0;
      }
      v132 = v30;
      if ((_QWORD)v154 != *((_QWORD *)&v153 + 1))
      {
        v62 = (_QWORD *)(*((_QWORD *)&v153 + 1) + 8 * ((unint64_t)v155 / 0xAA));
        v63 = *v62 + 24 * ((unint64_t)v155 % 0xAA);
        v134 = *(_QWORD *)(*((_QWORD *)&v153 + 1) + 8 * ((*((_QWORD *)&v155 + 1) + (_QWORD)v155) / 0xAAuLL))
             + 24 * ((*((_QWORD *)&v155 + 1) + (_QWORD)v155) % 0xAAuLL);
        if (v63 != v134)
        {
          v64 = 0;
          v65 = (_OWORD *)(v14 + 120 * a3);
          v130 = v65 + 4;
          v131 = v65 + 3;
          v129 = v65 + 5;
          do
          {
            v145 = 0;
            if (*(_DWORD *)(v63 + 16))
            {
              dispatch_semaphore_wait(*v136, 0xFFFFFFFFFFFFFFFFLL);
              *(_OWORD *)v149 = *v131;
              *v131 = 0u;
              *(_OWORD *)&v149[16] = *v130;
              *v130 = 0u;
              v150 = *v129;
              *v129 = 0u;
              dispatch_semaphore_signal(*v136);
              if (*((_QWORD *)&v150 + 1))
              {
                v66 = *(_QWORD *)(*(_QWORD *)&v149[8] + 8 * ((unint64_t)v150 / 0xAA))
                    + 24 * ((unint64_t)v150 % 0xAA);
                v68 = *(unsigned __int8 **)v66;
                v67 = *(const void **)(v66 + 8);
                v69 = *(unsigned int *)(v66 + 16);
                if (v69 > 0x8000)
                {
                  v76 = objc_autoreleasePoolPush();
                  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (*(_DWORD *)(v63 + 16) + v69)));
                  objc_msgSend(v77, "appendBytes:length:", v67, v69);
                  objc_msgSend(v77, "appendBytes:length:", *(_QWORD *)(v63 + 8), *(unsigned int *)(v63 + 16));
                  v71 = objc_retainAutorelease(v77);
                  v70 = objc_msgSend(v71, "bytes");
                  v72 = objc_msgSend(v71, "length");
                  objc_autoreleasePoolPop(v76);
                }
                else
                {
                  v70 = (id)(*(_QWORD *)v63 - v69 + 0x8000);
                  memcpy(v70, v67, v69);
                  v71 = 0;
                  v72 = *(_DWORD *)(v63 + 16) + v69;
                }
                GTMMappedBuffer::Deallocate((uint64_t)v136, v68);
              }
              else
              {
                v71 = 0;
                v70 = *(id *)(v63 + 8);
                v72 = *(_DWORD *)(v63 + 16);
              }
              GTMMappedBuffer::PostProcessRawDataFromSource(&v156, v133, v138, (uint64_t)v70, v72, &v145, a3, ++v64 == v132);
              v74 = v156;
              if (v157.i64[0])
              {
                v78 = *(unsigned int *)(v63 + 16);
                v79 = v78 >= v157.i64[0];
                v80 = v78 - v157.i64[0];
                if (v79)
                  GTMMappedBuffer::MemcpyFromSourceBuffer(v136, (unsigned __int8 *)(*(_QWORD *)(v63 + 8) + v80), v157.u32[0], 0, 0);
              }
              do
                v81 = __ldaxr(v8);
              while (__stlxr(v81 + v74, v8));
              v75 = (id)v157.i64[1];

              std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100](v149);
              v73 = v145;
            }
            else
            {
              v73 = 0;
              v74 = 0;
              v75 = 0;
            }
            GTMMappedBuffer::Deallocate((uint64_t)v135, *(unsigned __int8 **)v63);
            if (v73 && v74)
            {
              v82 = (_QWORD *)v151.i64[1];
              if (v151.i64[1] >= v152[0])
              {
                v84 = 0xAAAAAAAAAAAAAAABLL * ((v151.i64[1] - v151.i64[0]) >> 3);
                v85 = v84 + 1;
                if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * ((v152[0] - v151.i64[0]) >> 3) > v85)
                  v85 = 0x5555555555555556 * ((v152[0] - v151.i64[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v152[0] - v151.i64[0]) >> 3) >= 0x555555555555555)
                  v86 = 0xAAAAAAAAAAAAAAALL;
                else
                  v86 = v85;
                *(_QWORD *)&v150 = v152;
                if (v86)
                  v86 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v86);
                else
                  v87 = 0;
                v88 = (_QWORD *)(v86 + 24 * v84);
                *(_QWORD *)v149 = v86;
                *(_QWORD *)&v149[8] = v88;
                *(_QWORD *)&v149[24] = v86 + 24 * v87;
                *v88 = v73;
                v88[1] = v74;
                v88[2] = v75;
                v83 = v88 + 3;
                *(_QWORD *)&v149[16] = v88 + 3;
                v89 = v151.i64[1];
                v90 = v151.i64[0];
                if (v151.i64[1] == v151.i64[0])
                {
                  v93 = vdupq_n_s64(v151.u64[1]);
                }
                else
                {
                  do
                  {
                    v91 = *(_OWORD *)(v89 - 24);
                    v89 -= 24;
                    *(_OWORD *)(v88 - 3) = v91;
                    v88 -= 3;
                    v92 = *(_QWORD *)(v89 + 16);
                    *(_QWORD *)(v89 + 16) = 0;
                    v88[2] = v92;
                  }
                  while (v89 != v90);
                  v93 = v151;
                  v83 = *(_QWORD **)&v149[16];
                }
                v151.i64[0] = (uint64_t)v88;
                v151.i64[1] = (uint64_t)v83;
                *(int64x2_t *)&v149[8] = v93;
                v94 = v152[0];
                v152[0] = *(_QWORD *)&v149[24];
                *(_QWORD *)&v149[24] = v94;
                *(_QWORD *)v149 = v93.i64[0];
                std::__split_buffer<std::tuple<unsigned char *,unsigned long long,NSMutableData * {__strong}>>::~__split_buffer((uint64_t)v149);
              }
              else
              {
                *(_QWORD *)v151.i64[1] = v73;
                v82[1] = v74;
                v82[2] = v75;
                v83 = v82 + 3;
              }
              v151.i64[1] = (uint64_t)v83;
            }

            v63 += 24;
            if (v63 - *v62 == 4080)
            {
              v95 = v62[1];
              ++v62;
              v63 = v95;
            }
          }
          while (v63 != v134);
        }
      }
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*((_QWORD *)v140 + 309) + 8 * a2));
      v97 = v151.i64[1];
      for (i = v151.i64[0]; i != v97; i += 24)
      {
        v98 = objc_autoreleasePoolPush();
        v99 = *(id *)(i + 16);
        v100 = v99;
        if (v99)
        {
          v104 = v99;
        }
        else
        {
          v101 = objc_alloc((Class)NSData);
          v102 = *(_QWORD *)i;
          v103 = *(_QWORD *)(i + 8);
          v142[0] = _NSConcreteStackBlock;
          v142[1] = 3221225472;
          v142[2] = ___ZN35GTUSCSamplingStreamingManagerHelper18PostProcessRawDataEjj_block_invoke;
          v142[3] = &__block_descriptor_48_e12_v24__0_v8Q16l;
          v142[4] = v140;
          v143 = a2;
          v144 = a3;
          v104 = objc_msgSend(v101, "initWithBytesNoCopy:length:deallocator:", v102, v103, v142);
        }
        v105 = v104;
        v163[0] = v104;
        v162[0] = CFSTR("ShaderProfilerData");
        v162[1] = CFSTR("Source");
        v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "name", v125));
        v163[1] = v106;
        v162[2] = CFSTR("SourceIndex");
        v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
        v163[2] = v107;
        v162[3] = CFSTR("RingBufferIndex");
        v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
        v163[3] = v108;
        v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v163, v162, 4));

        (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)v140 + 32) + 16))();
        objc_autoreleasePoolPop(v98);
      }
      v110 = DWORD2(v155);
      if (*((_QWORD *)&v155 + 1))
      {
        do
          v111 = __ldaxr(v127);
        while (__stlxr(v111 + v110, v127));
      }
      v112 = v140;
      v113 = atomic_load((unsigned __int8 *)v140 + 2760);
      if ((v113 & 1) != 0)
      {
        v114 = atomic_load((unsigned int *)v140 + 687);
        if (v114 == *((_DWORD *)v140 + 541))
        {
          v115 = atomic_load((unsigned int *)v140 + 685);
          v116 = atomic_load((unsigned int *)v140 + 686);
          if (v115 == v116)
          {
            v160 = CFSTR("Post Processing Frame Marker");
            v117 = atomic_load((unsigned int *)v140 + 689);
            v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v117));
            v161 = v118;
            v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v161, &v160, 1));

            (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)v140 + 32) + 16))();
            v120 = atomic_load((unsigned __int8 *)v140 + 2761);
            if ((v120 & 1) != 0)
              std::condition_variable::notify_all(v125);
            std::condition_variable::notify_all(v126);

            v112 = v140;
          }
        }
      }
      *(_QWORD *)v149 = &v151;
      std::vector<std::tuple<unsigned char *,unsigned long long,NSMutableData * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)v149);
      std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100](&v153);
      v121 = atomic_load((unsigned __int8 *)v112 + 2763);
    }
    while ((v121 & 1) == 0);
  }
  do
  {
    v122 = v137;
    v123 = __ldaxr(v137);
  }
  while (__stlxr(v123 - 1, v122));
  if (!atomic_load(v137))
    std::condition_variable::notify_all((std::condition_variable *)((char *)v140 + 2992));

}

void sub_1CAA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,id a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  void *v49;

  std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100](&a39);
  a35 = (void **)&a45;
  std::vector<std::tuple<unsigned char *,unsigned long long,NSMutableData * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&a35);
  std::deque<GTMMappedBuffer::UsedBlock>::~deque[abi:nn180100](&a49);

  _Unwind_Resume(a1);
}

uint64_t GTMMappedBuffer::Deallocate(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v2 = this;
    if (*(_QWORD *)(this + 96) != *(_QWORD *)(this + 104))
    {
      if (*(_DWORD *)(this + 36))
      {
        this = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(this + 8), 0xFFFFFFFFFFFFFFFFLL);
        v6 = *((_QWORD *)a2 - 1);
        v5 = a2 - 8;
        v4 = v6;
        if (v6 >> 40 == 13295020)
        {
          v7 = *(_QWORD *)(v2 + 96);
          if (BYTE4(v4) < (unint64_t)((*(_QWORD *)(v2 + 104) - v7) >> 5))
          {
            v8 = v7 + 32 * BYTE4(v4);
            v9 = (uint64_t)&v5[-*(_QWORD *)(v8 + 8)];
            if (v9 >= 0 && *(_DWORD *)(v8 + 16) > v9)
              *(_DWORD *)(v7 + 32 * BYTE4(v4) + 20) += v4;
            return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 8));
          }
        }
      }
    }
  }
  return this;
}

void GTMMappedBuffer::PostProcessRawDataFromSource(_QWORD *a1, dispatch_semaphore_t *a2, void *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, char a8)
{
  id v15;
  unint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void *context;
  uint64_t v23;
  uint64_t v24;

  v15 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a5)
  {
    if (((8 * a5 / 5uLL + 7) & 0x7FFFFFFFFFFFFFF8) <= 0x4000)
      v16 = 0x4000;
    else
      v16 = (8 * a5 / 5uLL + 7) & 0x7FFFFFFFFFFFFFF8;
    v17 = GTMMappedBuffer::Allocate(a2, v16);
    *a6 = v17;
    if (v17)
    {
      v18 = v17;
LABEL_9:
      ++GTMMappedBuffer::PostProcessRawDataFromSource(objc_object  {objcproto19GPURawCounterSource}*,unsigned char *,unsigned long long,unsigned long long,objc_object  {objcproto19GPURawCounterSource}*&,unsigned int,BOOL)::ppData;
      v23 = 0;
      v24 = 0;
      LOBYTE(v21) = a8;
      objc_msgSend(v15, "postProcessRawDataWithRingBufferIndex:source:sourceSize:sourceRead:sourceWrite:output:outputSize:outputRead:outputWrite:isLast:", a7, a4, a5 + 8, &v24, a5, v18, v16, 0, &v23, v21);
      v20 = (a5 + 8 + v24) / (unint64_t)(a5 + 8) * (a5 + 8) - (v24 + 8);
      *a1 = v23;
      a1[1] = v20;
      goto LABEL_10;
    }
    context = objc_autoreleasePoolPush();
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v16));
    a1[2] = v19;
    objc_autoreleasePoolPop(context);
    if (v19)
    {
      v18 = objc_msgSend(v19, "mutableBytes");
      *a6 = v18;
      goto LABEL_9;
    }
  }
LABEL_10:

}

void sub_1CADA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned char *,unsigned long long,NSMutableData * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZN35GTUSCSamplingStreamingManagerHelper18PostProcessRawDataEjj_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(v2 + 2400);
  v4 = *(_QWORD *)(v2 + 2408);
  if (v3 != v4)
  {
    v5 = *(unsigned int *)(result + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) > v5)
    {
      v6 = *(unsigned int *)(result + 44);
      v8 = (uint64_t *)(v3 + 24 * v5);
      v7 = *v8;
      if (0xEEEEEEEEEEEEEEEFLL * ((v8[1] - *v8) >> 3) < v6)
        return GTMMappedBuffer::Deallocate(v7 + 120 * v6, a2);
    }
  }
  return result;
}

void std::vector<std::tuple<unsigned char *,unsigned long long,NSMutableData * {__strong}>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void GTUSCSamplingStreamingManagerHelper::SignalAndWaitForAllThreadsToTerminate(GTUSCSamplingStreamingManagerHelper *this)
{
  uint64_t v1;
  uint64_t v2;
  NSObject **v3;
  NSObject **v4;
  NSObject *v5;
  NSObject ***i;
  NSObject ***v7;
  NSObject **v8;
  NSObject **v9;
  NSObject *v10;
  std::unique_lock<std::mutex> v12;

  v1 = qword_7529A0;
  v2 = xmmword_7529A8;
  while (v1 != v2)
  {
    v3 = *(NSObject ***)v1;
    v4 = *(NSObject ***)(v1 + 8);
    while (v3 != v4)
    {
      v5 = *v3++;
      dispatch_semaphore_signal(v5);
    }
    v1 += 24;
  }
  v7 = (NSObject ***)*((_QWORD *)&xmmword_7529B8 + 1);
  for (i = (NSObject ***)xmmword_7529B8; i != v7; i += 3)
  {
    v8 = *i;
    v9 = i[1];
    while (v8 != v9)
    {
      v10 = *v8++;
      dispatch_semaphore_signal(v10);
    }
  }
  v12.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&qword_752B98;
  v12.__owns_ = 1;
  std::mutex::lock((std::mutex *)&qword_752B98);
  while (atomic_load((unsigned int *)&unk_752AE8))
    std::condition_variable::wait((std::condition_variable *)&qword_752BD8, &v12);
  if (v12.__owns_)
    std::mutex::unlock(v12.__m_);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct **v4;

  v4 = a1;
  v1 = std::__thread_local_data();
  v2 = *v4;
  *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  GTUSCSamplingStreamingManagerHelper::PollAndDrainSourceRingBuffer((GTUSCSamplingStreamingManagerHelper *)v4[1], *((_DWORD *)v4 + 4), *((_DWORD *)v4 + 5));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100](&v4);
  return 0;
}

void sub_1CB020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100]((std::__thread_struct ***)va);
  _Unwind_Resume(a1);
}

std::__thread_struct ***std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100](std::__thread_struct ***result)
{
  std::__thread_struct **v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](v1);
    operator delete();
  }
  return result;
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_1>>(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct **v4;

  v4 = a1;
  v1 = std::__thread_local_data();
  v2 = *v4;
  *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  GTUSCSamplingStreamingManagerHelper::PostProcessRawData((GTUSCSamplingStreamingManagerHelper *)v4[1], *((_DWORD *)v4 + 4), *((_DWORD *)v4 + 5));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100](&v4);
  return 0;
}

void sub_1CB0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100]((std::__thread_struct ***)va);
  _Unwind_Resume(a1);
}

std::__thread_struct *std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](std::__thread_struct **a1)
{
  std::__thread_struct *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

uint64_t GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(uint64_t this)
{
  uint64_t v1;
  dispatch_semaphore_t v2;
  void *v3;
  dispatch_semaphore_t v4;
  void *v5;

  if (!*(_DWORD *)(*(_QWORD *)this + 72))
  {
    v1 = this;
    v2 = dispatch_semaphore_create(0);
    v3 = *(void **)(v1 + 2520);
    *(_QWORD *)(v1 + 2520) = v2;

    v4 = dispatch_semaphore_create(0);
    v5 = *(void **)(v1 + 2528);
    *(_QWORD *)(v1 + 2528) = v4;

    operator new();
  }
  return this;
}

void sub_1CB224(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__thread_struct *v10;

  std::__thread_struct::~__thread_struct(v10);
  operator delete();
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(void)::$_0>>(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  NSObject *p;
  dispatch_time_t v7;
  unsigned __int8 v8;
  std::__thread_struct **v10;

  v10 = a1;
  v1 = std::__thread_local_data();
  v2 = *v10;
  *v10 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v10[1];
  while (1)
  {
    v4 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 1);
    if ((v4 & 1) != 0)
      break;
    v5 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 4);
    if ((v5 & 1) != 0)
      break;
    p = v3[315].__p_;
    v7 = dispatch_time(0, 250000);
    if (!dispatch_semaphore_wait(p, v7))
      break;
    v8 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 2);
    if ((v8 & 1) != 0)
      GTUSCSamplingStreamingManagerHelper::ForceDrainAllSourceBuffers(v3[3].__p_);
  }
  atomic_store(0, (unsigned __int8 *)&v3[345].__p_ + 2);
  dispatch_semaphore_signal((dispatch_semaphore_t)v3[316].__p_);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(void)::$_0>>::~unique_ptr[abi:nn180100](&v10);
  return 0;
}

void sub_1CB32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(void)::$_0>>::~unique_ptr[abi:nn180100]((std::__thread_struct ***)va);
  _Unwind_Resume(a1);
}

std::__thread_struct ***std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(void)::$_0>>::~unique_ptr[abi:nn180100](std::__thread_struct ***result)
{
  std::__thread_struct **v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](v1);
    operator delete();
  }
  return result;
}

unsigned __int8 *GTUSCSamplingStreamingManagerHelper::WaitForPreSampling(unsigned __int8 *this)
{
  unsigned __int8 *v1;

  if (!*(_DWORD *)(*(_QWORD *)this + 72))
  {
    v1 = this;
    atomic_store(1u, this + 2762);
    usleep(0x30D40u);
    dispatch_semaphore_signal(*((dispatch_semaphore_t *)v1 + 315));
    return (unsigned __int8 *)dispatch_semaphore_wait(*((dispatch_semaphore_t *)v1 + 316), 0xFFFFFFFFFFFFFFFFLL);
  }
  return this;
}

void GTUSCSamplingStreamingManagerHelper::StreamShaderProfilingData(GTUSCSamplingStreamingManagerHelper *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t i;
  GTUSCSamplingStreamingManagerHelper *v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  GTUSCSamplingStreamingManagerHelper *v23;
  void *v24;
  int v25;
  id v26;
  _QWORD v27[4];
  id v28;
  __int128 *v29;
  _QWORD v30[4];
  GTUSCSamplingStreamingManagerHelper *v31;
  _QWORD *v32;
  pthread_t *v33;
  sched_param *v34;
  pthread_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 *v38;
  uint64_t v39;
  _QWORD v40[4];
  id v41;
  _QWORD *v42;
  sched_param *v43;
  pthread_t *v44;
  _QWORD *v45;
  pthread_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 *v49;
  _QWORD v50[5];
  id v51;
  _QWORD v52[5];
  id v53;
  sched_param v54;
  sched_param *v55;
  uint64_t v56;
  __n128 (*v57)(__n128 *, __n128 *);
  void (*v58)(uint64_t);
  void *v59;
  void *__p;
  void *v61;
  uint64_t v62;
  pthread_t v63[10];
  int v64;
  _QWORD v65[10];
  int v66;
  pthread_t v67[5];
  id v68;
  _QWORD v69[4];
  _QWORD v70[2];
  _QWORD v71[2];

  v1 = atomic_load(byte_752AF4);
  if ((v1 & 1) == 0)
  {
    v2 = -1431655765 * ((*((_QWORD *)&xmmword_752958 + 1) - (_QWORD)xmmword_752958) >> 3);
    if ((_DWORD)v2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (-286331153
           * ((*(_QWORD *)(xmmword_752958 + 24 * i + 8) - *(_QWORD *)(xmmword_752958 + 24 * i)) >> 3))
        {
          operator new();
        }
      }
    }
    v22 = *(_QWORD *)GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
    v4 = (GTUSCSamplingStreamingManagerHelper *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)GTUSCSamplingStreamingManagerHelper::Instance(void)::instance+ 8), "defaultDevice"));
    v23 = v4;
    if (v4)
    {
      atomic_store(HIDWORD(qword_7528A8), (unsigned int *)&xmmword_752AD8);
      v69[0] = 0;
      v69[1] = v69;
      v69[2] = 0x2020000000;
      v69[3] = 0;
      v6 = atomic_load((unsigned __int8 *)&unk_752AF3);
      if ((v6 & 1) == 0)
      {
        do
        {
          v7 = atomic_load(byte_752AF4);
          if ((v7 & 1) != 0)
            break;
          v24 = (void *)objc_opt_new(NSOperation, v5);
          v9 = 0;
          v25 = 3;
          do
          {
            v67[0] = 0;
            v67[1] = (pthread_t)v67;
            v67[2] = (pthread_t)0x3032000000;
            v67[3] = (pthread_t)__Block_byref_object_copy_;
            v67[4] = (pthread_t)__Block_byref_object_dispose_;
            v68 = (id)objc_opt_new(GTMTLFXTracingDelegate, v8);
            v65[0] = 0;
            v65[1] = v65;
            v65[2] = 0x5812000000;
            v65[3] = __Block_byref_object_copy__222;
            v65[4] = __Block_byref_object_dispose__223;
            memset(&v65[5], 0, 40);
            v66 = 1065353216;
            v63[0] = 0;
            v63[1] = (pthread_t)v63;
            v63[2] = (pthread_t)0x5812000000;
            v63[3] = (pthread_t)__Block_byref_object_copy__298;
            v63[4] = (pthread_t)__Block_byref_object_dispose__299;
            memset(&v63[5], 0, 40);
            v64 = 1065353216;
            v54 = 0;
            v55 = &v54;
            v56 = 0x4812000000;
            v57 = __Block_byref_object_copy__300;
            v58 = __Block_byref_object_dispose__301;
            v59 = &unk_4C2897;
            v61 = 0;
            v62 = 0;
            __p = 0;
            v52[0] = 0;
            v52[1] = v52;
            v52[2] = 0x3032000000;
            v52[3] = __Block_byref_object_copy_;
            v52[4] = __Block_byref_object_dispose_;
            v53 = 0;
            v10 = objc_autoreleasePoolPush();
            v12 = (void *)objc_opt_new(NSMutableData, v11);
            objc_autoreleasePoolPop(v10);
            v50[0] = 0;
            v50[1] = v50;
            v50[2] = 0x3032000000;
            v50[3] = __Block_byref_object_copy_;
            v50[4] = __Block_byref_object_dispose_;
            v51 = (id)objc_opt_new(NSMutableDictionary, v13);
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3221225472;
            v40[2] = ___ZN35GTUSCSamplingStreamingManagerHelper25StreamShaderProfilingDataEv_block_invoke;
            v40[3] = &unk_724890;
            v49 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
            v42 = v65;
            v43 = &v54;
            v44 = v63;
            v45 = v69;
            v26 = v12;
            v41 = v26;
            v46 = v67;
            v47 = v50;
            v48 = v52;
            v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v40));
            v30[0] = _NSConcreteStackBlock;
            v30[1] = 3221225472;
            v30[2] = ___ZN35GTUSCSamplingStreamingManagerHelper25StreamShaderProfilingDataEv_block_invoke_2;
            v30[3] = &unk_7247A0;
            v38 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
            v39 = v22;
            v31 = v23;
            v32 = v65;
            v33 = v63;
            v34 = &v54;
            v35 = v67;
            v36 = v50;
            v37 = v52;
            v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v30));
            v16 = v15;
            if (v9)
              objc_msgSend(v15, "addDependency:", v9);
            objc_msgSend(v16, "setQueuePriority:", -8);
            objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v16);
            if (dword_75286C && dword_752868)
            {
              v27[0] = _NSConcreteStackBlock;
              v27[1] = 3221225472;
              v27[2] = ___ZN35GTUSCSamplingStreamingManagerHelper25StreamShaderProfilingDataEv_block_invoke_3;
              v27[3] = &unk_726378;
              v29 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
              v28 = v26;
              v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v27));
              objc_msgSend(v17, "addDependency:", v16);
              objc_msgSend(v14, "addDependency:", v17);
              objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v17);

            }
            else
            {
              objc_msgSend(v14, "addDependency:", v16);
            }
            objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v14);
            objc_msgSend(v24, "addDependency:", v14);

            _Block_object_dispose(v50, 8);
            _Block_object_dispose(v52, 8);

            _Block_object_dispose(&v54, 8);
            if (__p)
            {
              v61 = __p;
              operator delete(__p);
            }
            _Block_object_dispose(v63, 8);
            std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table((uint64_t)&v63[6]);
            _Block_object_dispose(v65, 8);
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v65[6]);
            _Block_object_dispose(v67, 8);

            v9 = v14;
            --v25;
          }
          while (v25);
          objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v24);
          objc_msgSend(v24, "waitUntilFinished");

          v18 = atomic_load((unsigned __int8 *)&unk_752AF3);
        }
        while ((v18 & 1) == 0);
      }
      GTUSCSamplingStreamingManagerHelper::SignalAndWaitForAllThreadsToTerminate(v4);
      v19 = *(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 32);
      v70[0] = CFSTR("usc sampling address mappings");
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)xmmword_7527C0, "mappings"));
      v70[1] = CFSTR("usc sampling address data");
      v71[0] = v20;
      v71[1] = qword_7527D8;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v71, v70, 2));
      (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v21);

      _Block_object_dispose(v69, 8);
    }

  }
}

void sub_1CBBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  uint64_t v18;

  _Block_object_dispose((const void *)(v18 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__298(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__299(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(a1 + 48);
}

__n128 __Block_byref_object_copy__300(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__301(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN35GTUSCSamplingStreamingManagerHelper25StreamShaderProfilingDataEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **i;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t **j;
  void *v36;
  unsigned int *v37;
  unsigned int *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *k;
  void *v55;
  id v56;
  void *v57;
  unsigned int v58;
  unint64_t v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id ComputedKey;
  void *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  ProgramAddressTableCollector *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  unsigned int *v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  id v93;
  id v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  void *v103;
  void *v104;
  id obj;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  id v110;
  id v111;
  id v112;
  std::unique_lock<std::mutex> __lk;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _QWORD v118[14];
  _QWORD v119[14];
  _QWORD v120[2];
  _QWORD v121[4];
  _QWORD v122[2];
  _BYTE v123[128];

  v2 = a1[12];
  v3 = atomic_load((unsigned __int8 *)(v2 + 2763));
  if ((v3 & 1) == 0 || (v4 = atomic_load((unsigned __int8 *)(v2 + 2764)), (v4 & 1) != 0))
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v2 + 2928);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v2 + 2928));
    v5 = atomic_load((unsigned int *)(v2 + 2740));
    v6 = atomic_load((unsigned int *)(v2 + 2744));
    if (v5 != v6)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(v2 + 2880), &__lk);
        v7 = atomic_load((unsigned int *)(v2 + 2740));
        v8 = atomic_load((unsigned int *)(v2 + 2744));
      }
      while (v7 != v8);
    }
    objc_msgSend(*(id *)(v2 + 8), "gatherStats");
    v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 72)));
    v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 72)));
    v9 = *(_QWORD *)(a1[6] + 8);
    v10 = *(_QWORD *)(v9 + 48);
    v11 = *(unint64_t **)(v9 + 56);
    v12 = 126 - 2 * __clz((uint64_t)((uint64_t)v11 - v10) >> 4);
    if (v11 == (unint64_t *)v10)
      v13 = 0;
    else
      v13 = v12;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>(v10, v11, v13, 1);
    v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 56)- *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48)) >> 4));
    v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 56) - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48)));
    objc_msgSend(v99, "appendBytes:length:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 56) - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48));
    v14 = a1[6];
    v15 = *(_QWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v15 + 48);
    v17 = *(_QWORD *)(v15 + 56);
    v101 = a1;
    if (v16 == v17)
      v18 = 0;
    else
      v18 = *(_QWORD *)(v16 + 8);
    v109 = v2;
    if ((unint64_t)(v17 - v16) >= 0x11)
    {
      v19 = 0;
      v20 = 1;
      do
      {
        if (v18 < *(_QWORD *)(v16 + v19 + 16))
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v18));
          v122[0] = v21;
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v101[6] + 8) + 48) + v19 + 16) - 1));
          v122[1] = v22;
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v122, 2));
          objc_msgSend(v100, "addObject:", v23);

          v14 = v101[6];
        }
        v24 = *(_QWORD *)(v14 + 8);
        v16 = *(_QWORD *)(v24 + 48);
        v25 = *(_QWORD *)(v24 + 56);
        if (v18 <= *(_QWORD *)(v16 + v19 + 24))
          v18 = *(_QWORD *)(v16 + v19 + 24);
        ++v20;
        v19 += 16;
      }
      while (v20 < (v25 - v16) >> 4);
    }
    for (i = *(uint64_t ***)(*(_QWORD *)(v101[5] + 8) + 64); i; i = (uint64_t **)*i)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 6)));
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 4)));
      objc_msgSend(v104, "setObject:forKeyedSubscript:", v27, v28);

      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 7)));
      v121[0] = v29;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 8)));
      v121[1] = v30;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 9)));
      v121[2] = v31;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", i[5]));
      v121[3] = v32;
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v121, 4));
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 4)));
      objc_msgSend(v103, "setObject:forKeyedSubscript:", v33, v34);

    }
    v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", *(_QWORD *)(*(_QWORD *)(v101[7] + 8) + 72)));
    for (j = *(uint64_t ***)(*(_QWORD *)(v101[7] + 8) + 64); j; j = (uint64_t **)*j)
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", ((char *)j[4] - (char *)j[3]) >> 4));
      v37 = (unsigned int *)j[3];
      v38 = (unsigned int *)j[4];
      while (v37 != v38)
      {
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v37));
        v120[0] = v39;
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v37 + 1)));
        v120[1] = v40;
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v120, 2));
        objc_msgSend(v36, "addObject:", v41);

        v37 += 4;
      }
      v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)j + 4)));
      objc_msgSend(v102, "setObject:forKeyedSubscript:", v36, v42);

    }
    v112 = 0;
    v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v104, 1, &v112));
    v43 = v112;
    v44 = (char *)objc_msgSend(*(id *)(v109 + 1968), "mutableBytes");
    v45 = *(_QWORD *)(*(_QWORD *)(v101[8] + 8) + 24);
    v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", &v44[v45], *(_QWORD *)(v109 + 1976) - v45, 0));
    v111 = v43;
    v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v103, 1, &v111));
    v46 = v111;

    v110 = v46;
    v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v102, 1, &v110));
    v94 = v110;

    v47 = v109;
    v48 = *(void **)(v109 + 1944);
    if (*(int *)(v109 + 2180) >= 2)
    {
      v93 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "mappings"));
      v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v93, "count")));
      v108 = (void *)objc_opt_new(NSMutableDictionary, v50);
      v52 = (void *)objc_opt_new(NSMutableDictionary, v51);
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      obj = v93;
      v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v114, v123, 16);
      if (v53)
      {
        v106 = *(_QWORD *)v115;
        do
        {
          for (k = 0; k != v53; k = (char *)k + 1)
          {
            if (*(_QWORD *)v115 != v106)
              objc_enumerationMutation(obj);
            v55 = *(void **)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)k);
            v56 = objc_msgSend(v55, "mutableCopy");
            v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("encIndex")));
            v58 = objc_msgSend(v57, "unsignedIntValue");

            v59 = *(_QWORD *)(v109 + 1960);
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("drawCallIndex")));
            v61 = objc_msgSend(v60, "unsignedIntValue");

            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("mappedSize")));
            v63 = (uint64_t)objc_msgSend(v62, "unsignedLongLongValue");

            v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("type")));
            v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("binaryUniqueId")));
            ComputedKey = GTShaderProfilerGenerateComputedKey(v58 % v59, (uint64_t)v61, v63, v64);
            v67 = (void *)objc_claimAutoreleasedReturnValue(ComputedKey);
            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKeyedSubscript:", v67));
            LOBYTE(v63) = v68 == 0;

            if ((v63 & 1) == 0)
            {
              v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "objectForKeyedSubscript:", v67));
              v70 = objc_msgSend(v69, "unsignedIntValue");

              v71 = v70 + 1;
              v72 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%u"), v67, v71));

              v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v71));
              objc_msgSend(v108, "setObject:forKeyedSubscript:", v73, v72);

              v67 = (void *)v72;
            }
            objc_msgSend(v52, "setObject:forKeyedSubscript:", v65, v67);
            v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v109 + 1952), "objectForKeyedSubscript:", v67));
            objc_msgSend(v56, "setObject:forKeyedSubscript:", v74, CFSTR("binaryUniqueId"));

            objc_msgSend(v107, "addObject:", v56);
          }
          v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v114, v123, 16);
        }
        while (v53);
      }

      v49 = objc_msgSend(v107, "copy");
      v47 = v109;
    }
    else
    {
      v49 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "mappings"));
    }
    v75 = objc_alloc_init(ProgramAddressTableCollector);
    v76 = *(void **)(v47 + 1944);
    *(_QWORD *)(v47 + 1944) = v75;

    v118[0] = CFSTR("Frame Index");
    v77 = v109;
    v78 = atomic_load((unsigned int *)(v109 + 2756));
    v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v78));
    v119[0] = v79;
    v119[1] = v96;
    v118[1] = CFSTR("Program Address Buffer");
    v118[2] = CFSTR("Program Address Mappings");
    v119[2] = v49;
    v119[3] = v95;
    v118[3] = CFSTR("TraceId to BatchId");
    v118[4] = CFSTR("Source Sample Marker");
    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v77 + 32)));
    v81 = v101[4];
    v119[4] = v80;
    v119[5] = v81;
    v118[5] = CFSTR("Frame Encoder Time Data");
    v118[6] = CFSTR("TraceId to SampleIndex");
    v119[6] = v97;
    v118[7] = CFSTR("MTLFX TraceIds");
    v82 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v101[9] + 8) + 40), "mtlfxTracingInfo"));
    v83 = (void *)v82;
    v84 = &__NSDictionary0__struct;
    if (v82)
      v85 = (void *)v82;
    else
      v85 = &__NSDictionary0__struct;
    v119[7] = v85;
    v118[8] = CFSTR("Frame Consistent Perf Info");
    v86 = v101[11];
    v119[8] = *(_QWORD *)(*(_QWORD *)(v101[10] + 8) + 40);
    v119[9] = v100;
    v118[9] = CFSTR("Restore Timestamps");
    v118[10] = CFSTR("Command Buffer Timestamps");
    v119[10] = v99;
    v118[11] = CFSTR("PState Info Data");
    if (*(_QWORD *)(*(_QWORD *)(v86 + 8) + 40))
      v84 = *(void **)(*(_QWORD *)(v86 + 8) + 40);
    v119[11] = v84;
    v119[12] = v98;
    v118[12] = CFSTR("TraceId to Coalesced BatchId");
    v118[13] = CFSTR("PState non-consistent");
    v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v109 + 68)));
    v119[13] = v87;
    v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v119, v118, 14));

    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)v109 + 32) + 16))();
    *(_QWORD *)(*(_QWORD *)(v101[8] + 8) + 24) = *(_QWORD *)(v109 + 1976);
    v89 = (unsigned int *)(v109 + 2736);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    v91 = atomic_load((unint64_t *)(v109 + 2728));
    if (v91 > 0x3000000 || (v92 = atomic_load(v89), v92 <= 0))
      atomic_store(1u, (unsigned __int8 *)(v109 + 2763));

    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_1CC9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::mutex *a31,char a32)
{
  void *v32;

  if (a32)
    std::mutex::unlock(a31);
  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper25StreamShaderProfilingDataEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  unsigned int i;
  unint64_t v23;
  void *v24;
  BOOL v25;
  void *v26;
  unsigned int v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  void *v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  _UNKNOWN **v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unsigned int v50;
  void *v51;
  BOOL v52;
  void *v53;
  uint64_t v54;
  int v56;
  int v57;
  std::unique_lock<std::mutex>::mutex_type *v58;
  unsigned __int8 v59;
  void *v60;
  uint64_t v61;
  std::unique_lock<std::mutex> __lk;
  std::unique_lock<std::mutex>::mutex_type *v63;
  _QWORD v64[2];
  _QWORD v65[2];

  v1 = *(_QWORD *)(a1 + 88);
  v2 = atomic_load((unsigned __int8 *)(v1 + 2763));
  if ((v2 & 1) != 0)
    return;
  v3 = atomic_load((unsigned __int8 *)(v1 + 2764));
  if ((v3 & 1) != 0)
    return;
  atomic_store(0, (unsigned __int8 *)(v1 + 2760));
  GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(v1);
  GTMTLReplayController_prePlayForProfiling(**(_QWORD **)v1);
  usleep(0x7A120u);
  if (*(_DWORD *)(v1 + 2180) == 1)
    v5 = 100000;
  else
    v5 = 0;
  objc_msgSend(*(id *)(v1 + 8), "startCollectingPerfStatsAtInterval:andPeriodicSamplesAtInterval:", 1000000, v5);
  v6 = *(id *)(v1 + 2080);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 16), "firstObject"));
  v8 = objc_msgSend(*(id *)(v1 + 24), "count");
  if (!v8)
    goto LABEL_35;
  v9 = *(unsigned __int8 *)(v1 + 2186);
  if (GTAGXPerfStateControl::IsGPUPerformanceStateInduced((GTAGXPerfStateControl *)(v1 + 40)))
  {
    v64[0] = CFSTR("DisableOverlap");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9 == 0));
    v65[0] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 1));
    objc_msgSend(v7, "setOptions:", v11);
  }
  else
  {
    v12 = *(unsigned int *)(*(_QWORD *)v1 + 72);
    if ((_DWORD)v12)
    {
      GTAGXPerfStateControl::EnableConsistentGPUPerfState(v1 + 40, v12);
      v13 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 64), (*(_DWORD *)(*(_QWORD *)v1 + 72) - 1));
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = *(void **)(v1 + 2088);
      *(_QWORD *)(v1 + 2088) = v14;

      v64[0] = CFSTR("DisableOverlap");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9 == 0));
      v65[0] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 1));
      objc_msgSend(v7, "setOptions:", v11);
    }
    else
    {
      v16 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 64), 1);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      v18 = *(void **)(v1 + 2088);
      *(_QWORD *)(v1 + 2088) = v17;

      v64[0] = CFSTR("LockGPUPerfState");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v1 + 68)));
      v64[1] = CFSTR("DisableOverlap");
      v65[0] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9 == 0));
      v65[1] = v11;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 2));
      objc_msgSend(v7, "setOptions:", v19);

    }
  }

  if (!*(_BYTE *)(v1 + 2184))
  {
    v20 = 0;
    goto LABEL_14;
  }
  v49 = 0;
  v50 = 1;
  while (1)
  {
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 2008), "objectAtIndexedSubscript:", v49));
    v52 = objc_msgSend(v51, "count") == 0;

    if (!v52)
      break;
LABEL_52:
    v49 = v50;
    if ((unint64_t)v8 <= v50++)
    {
      v56 = 0;
      goto LABEL_55;
    }
  }
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 24), "objectAtIndexedSubscript:", v49));
  v54 = *(_QWORD *)(v1 + 1904);
  if (v50 - 1 >= ((unint64_t)(*(_QWORD *)(v1 + 1912) - v54) >> 2)
    || (*(_DWORD *)(v54 + 4 * v49) & 0x10) == 0)
  {

    goto LABEL_52;
  }

  v56 = 1;
LABEL_55:
  v57 = *(_DWORD *)(v1 + 2116);
  if (v57)
    v57 = *(_DWORD *)(v1 + 2112) != 0;
  if ((v56 | v57) == 1)
  {
    v58 = *(std::unique_lock<std::mutex>::mutex_type **)(v1 + 2048);
    __lk.__m_ = v58;
    *(_QWORD *)&__lk.__owns_ = v58;
  }
  else
  {
    __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)(v1 + 2040);
    *(_QWORD *)&__lk.__owns_ = __lk.__m_;
    v58 = *(std::unique_lock<std::mutex>::mutex_type **)(v1 + 2048);
  }
  v63 = v58;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &__lk, 3));
LABEL_14:
  v21 = 0;
  for (i = 0; ; i = v23 + 1)
  {
    v23 = i;
    if ((unint64_t)objc_msgSend(*(id *)(v1 + 24), "count") <= i)
      break;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 2008), "objectAtIndexedSubscript:", i));
    v25 = objc_msgSend(v24, "count") == 0;

    if (!v25)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 24), "objectAtIndexedSubscript:", v23));
      if (*(_BYTE *)(v1 + 2184))
      {
        v28 = (unint64_t)objc_msgSend(v20, "count") <= v23
            ? *(id *)(v1 + 2048)
            : (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectAtIndexedSubscript:", v23));
        v60 = v28;
        objc_msgSend(v26, "requestTriggers:firstErrorIndex:");
        if ((v21 & 1) != 0
          || (v29 = *(_QWORD *)(v1 + 1904),
              v23 >= ((unint64_t)(*(_QWORD *)(v1 + 1912) - v29) >> 2)))
        {
          objc_msgSend(v26, "setOptions:", *(_QWORD *)(v1 + 2080));
        }
        else if ((*(_DWORD *)(v29 + 4 * v23) & 0x10) != 0)
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(*(id *)(v1 + 2080), "count")));
          objc_msgSend(v31, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("KickTimestamp"));
          if (*(_QWORD *)(v1 + 2080))
            objc_msgSend(v31, "addEntriesFromDictionary:");
          objc_msgSend(v26, "setOptions:", v31);

          v21 = 1;
        }
        else
        {
          v21 = 0;
        }
        v61 = 0;
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 2008), "objectAtIndexedSubscript:", v23));
        v59 = objc_msgSend(v26, "requestCounters:firstErrorIndex:", v30, &v61);

        if ((v59 & 1) == 0)
        {

          goto LABEL_34;
        }
      }
      v27 = objc_msgSend(v26, "setEnabled:", 1);

      if (!v27)
        goto LABEL_34;
    }
  }
  *(_BYTE *)(v1 + 2184) = 0;
LABEL_34:

LABEL_35:
  atomic_store(0, (unsigned int *)(v1 + 2748));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 16), "firstObject"));
  v33 = objc_msgSend(v32, "startSampling");

  if ((v33 & 1) != 0)
  {
    GTUSCSamplingStreamingManagerHelper::ResetSourceForPostProcessing((id *)v1);
    GTUSCSamplingStreamingManagerHelper::WaitForPreSampling((unsigned __int8 *)v1);
    atomic_store(1u, (unsigned __int8 *)(v1 + 2761));
    atomic_store(1u, (unsigned __int8 *)(v1 + 2761));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 96) + 8), "defaultCommandQueue"));
    objc_msgSend(*(id *)(a1 + 32), "mapShaderSampleBufferWithBuffer:capacity:size:", 0, 0, 0);
    v35 = objc_autoreleasePoolPush();
    *(_QWORD *)&__lk.__owns_ = *(_QWORD *)(a1 + 96);
    LOBYTE(v63) = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
    objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
    GTUSCSamplingStreamingManagerHelper::ReplaySingleFrameForUSCSampling(v1, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), 0);
    objc_msgSend(v34, "finish");
    ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)&__lk);
    objc_autoreleasePoolPop(v35);
    objc_msgSend(*(id *)(a1 + 32), "unmapShaderSampleBuffer");
    atomic_store(1u, (unsigned __int8 *)(v1 + 2760));
    v36 = (unsigned int *)(v1 + 2756);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    GTUSCSamplingStreamingManagerHelper::DrainAllSourceBuffers(*(_QWORD *)(v1 + 2424), *(_QWORD *)(v1 + 2432));
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v1 + 2816);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v1 + 2816));
    v38 = *(_DWORD *)(v1 + 2164);
    v39 = atomic_load((unsigned int *)(v1 + 2748));
    if (v38 != v39)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(v1 + 2768), &__lk);
        v40 = *(_DWORD *)(v1 + 2164);
        v41 = atomic_load((unsigned int *)(v1 + 2748));
      }
      while (v40 != v41);
    }
    v42 = GTAGXPerfStateControl::ConsistentGPUPerfStateLevel((GTAGXPerfStateControl *)(v1 + 40), 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    if (v43)
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setDictionary:", v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 16), "firstObject"));
    objc_msgSend(v44, "stopSampling");

    objc_msgSend(*(id *)(v1 + 8), "gatherStats");
    objc_msgSend(*(id *)(v1 + 8), "stopCollectingStats");
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 8), "exportStats"));
    v46 = objc_msgSend(v45, "copy");
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v48 = *(void **)(v47 + 40);
    *(_QWORD *)(v47 + 40) = v46;

    objc_msgSend(*(id *)(v1 + 8), "reset");
    GTAGXPerfStateControl::DisableConsistentGPUPerfState((GTAGXPerfStateControl *)(v1 + 40));
    GTApplePMPPerfStateControl::DisableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 64));
    atomic_store(0, (unsigned __int8 *)(v1 + 2761));

    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);

  }
  else
  {
    objc_msgSend(*(id *)(v1 + 8), "stopCollectingStats");
    objc_msgSend(*(id *)(v1 + 8), "reset");
    GTUSCSamplingStreamingManagerHelper::WaitForPreSampling((unsigned __int8 *)v1);
    GTAGXPerfStateControl::DisableConsistentGPUPerfState((GTAGXPerfStateControl *)(v1 + 40));
    GTApplePMPPerfStateControl::DisableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 64));
  }
}

void sub_1CD474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper25StreamShaderProfilingDataEv_block_invoke_3(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  id v4;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = GTSampleBufferManager::ResolveSampleBuffers((GTSampleBufferManager *)(v2 + 263));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "setData:", v4);
  v2[269] = 0;
  v2[267] = v2[266];

}

void sub_1CD638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id GTSampleBufferManager::ResolveSampleBuffers(GTSampleBufferManager *this)
{
  uint64_t v1;
  int v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[4];
  id v18;
  uint64_t *v19;
  GTSampleBufferManager *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[128];

  v1 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) == v1)
  {
    v7 = 0;
  }
  else
  {
    v3 = *((_DWORD *)this + 12);
    *((_DWORD *)this + 13) += v3;
    *(_DWORD *)(v1 - 4) = v3;
    v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*((id *)this + 2), "count"));
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0;
    v5 = (void *)*((_QWORD *)this + 2);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = ___ZN21GTSampleBufferManager20ResolveSampleBuffersEv_block_invoke;
    v17[3] = &unk_7248E0;
    v19 = &v21;
    v20 = this;
    v6 = v4;
    v18 = v6;
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v17);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", v22[3]));
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v25, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v14;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v8);
          objc_msgSend(v7, "appendData:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v11), (_QWORD)v13);
          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v25, 16);
      }
      while (v9);
    }

    _Block_object_dispose(&v21, 8);
  }
  return v7;
}

void sub_1CD824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a16);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN21GTSampleBufferManager20ResolveSampleBuffersEv_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  unsigned int *v6;
  void *v7;
  id v8;

  v5 = a2;
  v6 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 8 * a3);
  v8 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resolveCounterRange:", *v6, v6[1]));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += objc_msgSend(v7, "length");
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);

}

void sub_1CD8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *k;
  unint64_t v20;
  unint64_t v21;
  unint64_t *m;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *j;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  BOOL v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = ((char *)a2 - (char *)i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *v8;
        v44 = *i;
        if (*v8 < *i || v44 >= v43 && *(a2 - 1) < i[1])
        {
          *i = v43;
          *(a2 - 2) = v44;
          v45 = i[1];
          i[1] = *(a2 - 1);
          *(a2 - 1) = v45;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(i, i + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(i, i + 2, i + 4, a2 - 2);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(i, i + 2, i + 4, i + 6, a2 - 2);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v60 = (v11 - 2) >> 1;
            v61 = v60;
            while (1)
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &i[2 * v63];
                if (2 * v62 + 2 < (uint64_t)v11)
                {
                  v65 = v64[2];
                  if (*v64 < v65 || v65 >= *v64 && i[2 * v63 + 1] < v64[3])
                  {
                    v64 += 2;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &i[2 * v62];
                v67 = *v64;
                v68 = *v66;
                if (*v64 >= *v66)
                {
                  if (v68 < v67)
                  {
                    v69 = v66[1];
LABEL_129:
                    *v66 = v67;
                    v66[1] = v64[1];
                    if (v60 >= v63)
                    {
                      while (1)
                      {
                        v71 = 2 * v63;
                        v63 = (2 * v63) | 1;
                        v70 = &i[2 * v63];
                        v72 = v71 + 2;
                        if (v72 < (uint64_t)v11)
                        {
                          v73 = v70[2];
                          if (*v70 < v73 || v73 >= *v70 && i[2 * v63 + 1] < v70[3])
                          {
                            v70 += 2;
                            v63 = v72;
                          }
                        }
                        v74 = *v70;
                        if (*v70 < v68 || v68 >= v74 && v70[1] < v69)
                          break;
                        *v64 = v74;
                        v64[1] = v70[1];
                        v64 = v70;
                        if (v60 < v63)
                          goto LABEL_131;
                      }
                    }
                    v70 = v64;
LABEL_131:
                    *v70 = v68;
                    v70[1] = v69;
                    goto LABEL_132;
                  }
                  v69 = i[2 * v62 + 1];
                  if (v64[1] >= v69)
                    goto LABEL_129;
                }
              }
LABEL_132:
              v61 = v62 - 1;
              if (!v62)
              {
                v83 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v84 = 0;
                  v85 = *i;
                  v86 = i[1];
                  v87 = v83 - 2;
                  if (v83 < 2)
                    v87 = v83 - 1;
                  v88 = v87 >> 1;
                  v89 = i;
                  do
                  {
                    v90 = v89;
                    v91 = v84 + 1;
                    v89 += 2 * v84 + 2;
                    v92 = 2 * v84;
                    result = (2 * v84) | 1;
                    v84 = result;
                    v93 = v92 + 2;
                    if (v93 < v83)
                    {
                      result = (unint64_t)(v89 + 2);
                      v94 = v89[2];
                      if (*v89 < v94 || v94 >= *v89 && v90[2 * v91 + 1] < v89[3])
                      {
                        v89 += 2;
                        v84 = v93;
                      }
                    }
                    *v90 = *v89;
                    v90[1] = v89[1];
                  }
                  while (v84 <= v88);
                  if (v89 == a2 - 2)
                  {
                    *v89 = v85;
                    v89[1] = v86;
                  }
                  else
                  {
                    *v89 = *(a2 - 2);
                    v89[1] = *(a2 - 1);
                    *(a2 - 2) = v85;
                    *(a2 - 1) = v86;
                    v95 = (char *)v89 - (char *)i + 16;
                    if (v95 >= 17)
                    {
                      v96 = (v95 >> 4) - 2;
                      v97 = v96 >> 1;
                      v98 = &i[2 * (v96 >> 1)];
                      v99 = *v98;
                      v100 = *v89;
                      if (*v98 < *v89)
                      {
                        v101 = v89[1];
LABEL_171:
                        *v89 = v99;
                        v89[1] = i[2 * v97 + 1];
                        if (v96 >= 2)
                        {
                          while (1)
                          {
                            v103 = v97 - 1;
                            v97 = (v97 - 1) >> 1;
                            v102 = &i[2 * v97];
                            v104 = *v102;
                            if (*v102 >= v100)
                            {
                              if (v100 < v104)
                                break;
                              result = i[2 * v97 + 1];
                              if (result >= v101)
                                break;
                            }
                            else
                            {
                              result = v102[1];
                            }
                            *v98 = v104;
                            v98[1] = result;
                            v98 = &i[2 * v97];
                            if (v103 <= 1)
                              goto LABEL_178;
                          }
                        }
                        v102 = v98;
LABEL_178:
                        *v102 = v100;
                        v102[1] = v101;
                        goto LABEL_180;
                      }
                      if (v100 >= v99)
                      {
                        result = i[2 * v97 + 1];
                        v101 = v89[1];
                        if (result < v101)
                          goto LABEL_171;
                      }
                    }
                  }
LABEL_180:
                  a2 -= 2;
                  if (v83-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = &i[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(&v7[2 * (v11 >> 1)], v7, a2 - 2);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(v7, &v7[2 * (v11 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(v7 + 2, v13 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(v13 - 2, v13, &v7[2 * v12 + 2]);
            v14 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v14;
          }
          --a3;
          v15 = *v7;
          if ((a4 & 1) == 0)
          {
            v16 = *(v7 - 2);
            if (v16 >= v15)
            {
              if (v15 < v16)
              {
                v17 = v7[1];
              }
              else
              {
                v17 = v7[1];
                if (*(v7 - 1) < v17)
                  goto LABEL_13;
              }
              v33 = *v8;
              if (v15 >= *v8 && (v33 < v15 || v17 >= *(a2 - 1)))
              {
                for (i = v7 + 2; i < a2 && v15 >= *i && (*i < v15 || v17 >= i[1]); i += 2)
                  ;
              }
              else
              {
                i = v7;
                do
                {
                  v35 = i[2];
                  i += 2;
                  v34 = v35;
                }
                while (v15 >= v35 && (v34 < v15 || v17 >= i[1]));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 2; v15 < v33 || v33 >= v15 && v17 < j[1]; j -= 2)
                {
                  v37 = *(j - 2);
                  v33 = v37;
                }
              }
              if (i < j)
              {
                v38 = *i;
                v39 = *j;
                do
                {
                  *i = v39;
                  *j = v38;
                  v40 = i[1];
                  i[1] = j[1];
                  j[1] = v40;
                  do
                  {
                    v41 = i[2];
                    i += 2;
                    v38 = v41;
                  }
                  while (v15 >= v41 && (v38 < v15 || v17 >= i[1]));
                  do
                  {
                    do
                    {
                      v42 = *(j - 2);
                      j -= 2;
                      v39 = v42;
                    }
                    while (v15 < v42);
                  }
                  while (v39 >= v15 && v17 < j[1]);
                }
                while (i < j);
              }
              if (i - 2 != v7)
              {
                *v7 = *(i - 2);
                v7[1] = *(i - 1);
              }
              a4 = 0;
              *(i - 2) = v15;
              *(i - 1) = v17;
              continue;
            }
          }
LABEL_13:
          v18 = v7[1];
          for (k = v7 + 2; ; k += 2)
          {
            v20 = *k;
            if (*k >= v15 && (v15 < v20 || k[1] >= v18))
              break;
          }
          if (k - 2 == v7)
          {
            m = a2;
            if (k < a2)
            {
              v24 = *v8;
              m = a2 - 2;
              if (*v8 >= v15)
              {
                m = a2 - 2;
                do
                {
                  if (v15 >= v24)
                  {
                    if (m[1] < v18 || k >= m)
                      break;
                  }
                  else if (k >= m)
                  {
                    break;
                  }
                  v26 = *(m - 2);
                  m -= 2;
                  v24 = v26;
                }
                while (v26 >= v15);
              }
            }
          }
          else
          {
            v21 = *v8;
            for (m = a2 - 2; v21 >= v15 && (v15 < v21 || m[1] >= v18); m -= 2)
            {
              v23 = *(m - 2);
              v21 = v23;
            }
          }
          i = k;
          if (k < m)
          {
            v27 = *m;
            i = k;
            v28 = m;
            do
            {
              *i = v27;
              *v28 = v20;
              v29 = i[1];
              i[1] = v28[1];
              v28[1] = v29;
              do
              {
                do
                {
                  v30 = i[2];
                  i += 2;
                  v20 = v30;
                }
                while (v30 < v15);
              }
              while (v15 >= v20 && i[1] < v18);
              do
              {
                v31 = *(v28 - 2);
                v28 -= 2;
                v27 = v31;
              }
              while (v31 >= v15 && (v15 < v27 || v28[1] >= v18));
            }
            while (i < v28);
          }
          if (i - 2 != v7)
          {
            *v7 = *(i - 2);
            v7[1] = *(i - 1);
          }
          *(i - 2) = v15;
          *(i - 1) = v18;
          if (k < m)
          {
LABEL_50:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>(v7, i - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(v7, i - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v32)
              continue;
            goto LABEL_50;
          }
          a2 = i - 2;
          if (v32)
            return result;
          goto LABEL_2;
        }
        v46 = i + 2;
        v48 = i == a2 || v46 == a2;
        if ((a4 & 1) == 0)
        {
          if (v48)
            return result;
          while (1)
          {
            v75 = v7;
            v7 = v46;
            v76 = v75[2];
            v77 = *v75;
            if (v76 < *v75)
              break;
            if (v77 >= v76)
            {
              v78 = v75[3];
              if (v78 < v75[1])
                goto LABEL_152;
            }
LABEL_156:
            v46 = v7 + 2;
            if (v7 + 2 == a2)
              return result;
          }
          v78 = v75[3];
          do
          {
            do
            {
LABEL_152:
              v79 = v75;
              v80 = v77;
              v81 = *(v75 - 2);
              v75 -= 2;
              v77 = v81;
              v82 = v75[3];
              v75[4] = v80;
              v75[5] = v82;
            }
            while (v76 < v81);
          }
          while (v77 >= v76 && v78 < *(v79 - 1));
          *v79 = v76;
          v79[1] = v78;
          goto LABEL_156;
        }
        if (v48)
          return result;
        v49 = 0;
        v50 = i;
        do
        {
          v51 = v50;
          v50 = v46;
          v52 = v51[2];
          v53 = *v51;
          if (v52 >= *v51)
          {
            if (v53 < v52)
              goto LABEL_115;
            v54 = v51[3];
            if (v54 >= v51[1])
              goto LABEL_115;
          }
          else
          {
            v54 = v51[3];
          }
          v51[2] = v53;
          v50[1] = v51[1];
          v55 = i;
          if (v51 == i)
            goto LABEL_114;
          v56 = v49;
          while (1)
          {
            v57 = *(unint64_t *)((char *)i + v56 - 16);
            if (v52 >= v57)
              break;
            v58 = *(unint64_t *)((char *)i + v56 - 8);
LABEL_111:
            v51 -= 2;
            v59 = (unint64_t *)((char *)i + v56);
            *v59 = v57;
            v59[1] = v58;
            v56 -= 16;
            if (!v56)
            {
              v55 = i;
              goto LABEL_114;
            }
          }
          if (v57 >= v52)
          {
            v55 = (unint64_t *)((char *)i + v56);
            v58 = *(unint64_t *)((char *)i + v56 - 8);
            if (v54 >= v58)
              goto LABEL_114;
            goto LABEL_111;
          }
          v55 = v51;
LABEL_114:
          *v55 = v52;
          v55[1] = v54;
LABEL_115:
          v46 = v50 + 2;
          v49 += 16;
        }
        while (v50 + 2 != a2);
        return result;
    }
  }
}

unint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      v8 = a2 + 1;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *a2;
      v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        v15 = *result;
        *result = *v8;
        *v8 = v15;
      }
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
LABEL_17:
      v8 = v6;
      goto LABEL_18;
    }
    *result = v3;
    *a2 = v4;
    v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    v13 = *a3;
    v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      v6 = a3 + 1;
      result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *((_QWORD *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = v9;
        goto LABEL_22;
      }
      v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *((_QWORD *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_22;
      }
    }
    v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

void GTUSCSamplingStreamingManagerHelper::SetupSourceForFrameTime(id *this, uint64_t a2, int a3)
{
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  const __CFString *v21;
  void *v22;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "firstObject"));
  if (objc_msgSend(this[3], "count"))
  {
    if (!GTAGXPerfStateControl::IsGPUPerformanceStateInduced((GTAGXPerfStateControl *)(this + 5)))
    {
      v7 = *((unsigned int *)*this + 18);
      if ((_DWORD)v7)
      {
        GTAGXPerfStateControl::EnableConsistentGPUPerfState((uint64_t)(this + 5), v7);
        v8 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(this + 8), (*((_DWORD *)*this + 18) - 1));
        v9 = objc_claimAutoreleasedReturnValue(v8);
        v10 = this[261];
        this[261] = (id)v9;

      }
      else
      {
        v11 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(this + 8), 1);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        v13 = this[261];
        this[261] = (id)v12;

        v21 = CFSTR("LockGPUPerfState");
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
        v22 = v14;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
        objc_msgSend(v6, "setOptions:", v15);

      }
    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "lastObject"));
    v17 = v16;
    if (!a3)
      goto LABEL_7;
    if ((objc_msgSend(v16, "requestTriggers:firstErrorIndex:", this[257], 0) & 1) == 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "name"));
      NSLog(CFSTR("Fail, error while requesting triggers for %@"), v19);

    }
    objc_msgSend(v17, "setOptions:", 0);
    if ((objc_msgSend(v17, "requestCounters:firstErrorIndex:", this[249], 0) & 1) != 0)
    {
LABEL_7:
      if ((objc_msgSend(v17, "setEnabled:", 1) & 1) != 0)
      {
LABEL_10:

        goto LABEL_11;
      }
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "name"));
      NSLog(CFSTR("Fail, error while enabling source[%@]"), v18);
    }
    else
    {
      v20 = objc_msgSend(this[249], "count");
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "name"));
      NSLog(CFSTR("Fail, error while requesting %lu counter for source[%@]"), v20, v18);
    }

    goto LABEL_10;
  }
LABEL_11:

}

void sub_1CEA10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id GTUSCSamplingStreamingManagerHelper::DrainRawFrameData(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;
  void *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  void *v11;
  id v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  if (!objc_msgSend(this[3], "count"))
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "firstObject"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v2, "ringBufferNum")));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "lastObject"));
  if (objc_msgSend(v4, "isEnabled"))
  {
    for (i = 0; ; i = (i + 1))
    {
      if (i >= objc_msgSend(v4, "ringBufferNum"))
      {
        v13 = v3;
        goto LABEL_16;
      }
      v16 = 0;
      v17 = 0;
      v15 = 0;
      if ((objc_msgSend(v4, "ringBufferInfoAtIndex:base:size:dataOffset:dataSize:", i, &v17, (char *)&v16 + 4, &v16, &v15) & 1) == 0)break;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", v15));
      v7 = v6;
      v8 = v15;
      if (v15 + v16 <= HIDWORD(v16))
      {
        objc_msgSend(v6, "appendBytes:length:", v17 + v16, v15);
      }
      else
      {
        v9 = HIDWORD(v16) - v16;
        objc_msgSend(v6, "appendBytes:length:", v17 + v16, (HIDWORD(v16) - v16));
        objc_msgSend(v7, "appendBytes:length:", v17, v8 - v9);
      }
      v10 = objc_msgSend(v4, "drainRingBufferAtIndex:dataSize:", i, v15);
      if (v10 != v15)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
        NSLog(CFSTR("Fail, unexpected drain count for source %@!"), v11);

      }
      objc_msgSend(v3, "addObject:", v7);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
    NSLog(CFSTR("Fail, unable to retrieve ring buffer info from source %@!"), v14);

  }
  v13 = 0;
LABEL_16:

  return v13;
}

void sub_1CEC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id GTUSCSamplingStreamingManagerHelper::PostProcessFrameData(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unint64_t i;
  void *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    GTUSCSamplingStreamingManagerHelper::ResetSourceForPostProcessing(a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v3, "count")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "lastObject"));
    for (i = 0; ; ++i)
    {
      if (i >= (unint64_t)objc_msgSend(v3, "count"))
      {
        v15 = v4;
        goto LABEL_11;
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", i));
      v8 = (char *)objc_msgSend(v7, "length");
      v18 = 0;
      v19 = 0;
      v9 = 4 * (_QWORD)objc_msgSend(v7, "length");
      if (v9 <= 0x4000)
        v9 = 0x4000;
      v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v10));
      v12 = objc_retainAutorelease(v7);
      v13 = objc_msgSend(v12, "bytes");
      v14 = objc_retainAutorelease(v11);
      LOBYTE(v17) = 1;
      if ((objc_msgSend(v5, "postProcessRawDataWithRingBufferIndex:source:sourceSize:sourceRead:sourceWrite:output:outputSize:outputRead:outputWrite:isLast:", i, v13, v8 + 8, &v19, v8, objc_msgSend(v14, "mutableBytes"), v10, 0, &v18, v17) & 1) == 0)break;
      objc_msgSend(v14, "setLength:", v18);
      objc_msgSend(v4, "addObject:", v14);

    }
    v15 = 0;
LABEL_11:

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1CEE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__345(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__346(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a2);
    v5 = &v4[24 * v3];
    v7 = &v4[24 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void ___ZN35GTUSCSamplingStreamingManagerHelper19StreamFrameTimeDataEv_block_invoke(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  unsigned int *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  int v22;
  int FuncEnumConstructorType;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  id *v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 v48;
  id v49;
  unsigned int *v50;
  char v51;

  v2 = *(id **)(a1 + 48);
  GTMTLReplayController_prePlayForProfiling(*(_QWORD *)*v2);
  GTUSCSamplingStreamingManagerHelper::SetupSourceForFrameTime(v2, *(unsigned int *)(a1 + 56), *(_DWORD *)(a1 + 60) == 0);
  DisableComputeEncoderCoalescing(*(GTMTLReplayController **)*v2, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[2], "firstObject"));
  objc_msgSend(v3, "startSampling");

  v4 = objc_autoreleasePoolPush();
  v38 = a1;
  v5 = *(_DWORD *)(a1 + 60);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  v50 = *(unsigned int **)*v2;
  v7 = (uint64_t)v50;
  v51 = 0;
  v49 = objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
  objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
  v8 = *(id *)(*(_QWORD *)*v2 + 8);
  v44 = **(_QWORD **)*v2;
  v45 = v8;
  v37 = *(_QWORD *)(v44 + 16);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "defaultDevice"));
  v42 = objc_msgSend(v9, "newCommandQueue");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "defaultDevice"));
  v39 = v4;
  v41 = v2;
  v43 = objc_msgSend(v10, "newEvent");
  v11 = v50 + 5620;

  v48 = 0;
  v47 = *(_QWORD *)(*(_QWORD *)v50 + 120);
  v46 = *(_DWORD *)(v47 + 12);
  if (v50[5620] < v46)
  {
    v40 = (_QWORD *)(v6 + 40 * v5);
    do
    {
      v12 = objc_autoreleasePoolPush();
      v13 = *(_QWORD *)(v47 + 24);
      v14 = *v11;
      v15 = v13 + (v14 << 6);
      v17 = *(_DWORD *)(v15 + 8);
      v16 = (int *)(v15 + 8);
      if (GetFuncEnumConstructorType(v17) == 25)
        v18 = GTMTLReplayController_restoreCommandBuffer(v7, v13 + (v14 << 6));
      else
        v18 = 0;
      GTMTLReplayController_updateCommandEncoder(v7, v13 + (v14 << 6));
      DispatchFunction((id *)v7, v13 + (v14 << 6), &v48);
      if (GetFuncEnumConstructorType(*v16) == 21)
      {
        v28 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v13 + (v14 << 6)), *(unsigned __int8 *)(v13 + (v14 << 6) + 13), v37)+ 1);
        if (std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v40, objc_msgSend(v45, "globalTraceIdForEncoder:ofType:", v28, 0)))
        {
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "blitCommandEncoderForKey:", v28));
          objc_msgSend(v36, "endEncoding");
          v29 = objc_msgSend(v45, "commandBufferForKey:", GTTraceFunc_targetContext(v13 + (v14 << 6), *(_QWORD *)(v44 + 16)));
          v35 = (void *)objc_claimAutoreleasedReturnValue(v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "computeCommandEncoder"));
          objc_msgSend(v30, "endEncoding");
          DispatchFunction((id *)v7, v13 + (v14 << 6), &v48);

        }
      }
      if (v18)
      {
        v19 = objc_msgSend(v45, "commandBufferForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v13 + (v14 << 6)), *(unsigned __int8 *)(v13 + (v14 << 6) + 13), *(_QWORD *)(v44 + 16))+ 1));
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        ++GTUSCSamplingStreamingManagerHelper::ReplayForTimingCounters(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &)::signalCounter;
        objc_msgSend(v20, "encodeSignalEvent:value:", v43);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "commandBuffer"));
        objc_msgSend(v21, "encodeWaitForEvent:value:", v43, GTUSCSamplingStreamingManagerHelper::ReplayForTimingCounters(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &)::signalCounter++);
        objc_msgSend(v21, "encodeSignalEvent:value:", v43);
        objc_msgSend(v21, "commit");
        objc_msgSend(v20, "encodeWaitForEvent:value:", v43, GTUSCSamplingStreamingManagerHelper::ReplayForTimingCounters(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &)::signalCounter);

      }
      else
      {
        v22 = *v16;
        if (!GTMTLReplayHost_IsFuncEnumSampledEncoder(v22, 1, 0))
          goto LABEL_13;
        FuncEnumConstructorType = GetFuncEnumConstructorType(v22);
        v24 = v48;
        if (v48 != (FuncEnumConstructorType == 65))
          goto LABEL_13;
        v25 = FuncEnumConstructorType == 65;
        v26 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v13 + (v14 << 6)), *(unsigned __int8 *)(v13 + (v14 << 6) + 13), *(_QWORD *)(v44 + 16))+ 1);
        LODWORD(v25) = objc_msgSend(v45, "globalTraceIdForEncoder:ofType:", v26, v25);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "encoderForKey:ofType:", v26, v24 != 0));
        GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v41, v40, v13 + (v14 << 6), v25, v20, v40[3], 0, 0);
      }

LABEL_13:
      objc_autoreleasePoolPop(v12);
      v27 = *v11 + 1;
      *v11 = v27;
    }
    while (v27 < v46);
  }
  *(_DWORD *)(v7 + 22484) = 0;
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v7 + 8), "defaultCommandQueue"));
  objc_msgSend(v31, "finish");

  ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)&v49);
  v32 = GTUSCSamplingStreamingManagerHelper::DrainRawFrameData(v41);
  v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  if (v33)
    objc_msgSend(*(id *)(v38 + 32), "setArray:", v33);

  objc_autoreleasePoolPop(v39);
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41[2], "firstObject"));
  objc_msgSend(v34, "stopSampling");

  DisableComputeEncoderCoalescing(*(GTMTLReplayController **)*v41, 0);
  GTAGXPerfStateControl::DisableConsistentGPUPerfState((GTAGXPerfStateControl *)(v41 + 5));
  GTApplePMPPerfStateControl::DisableConsistentPerfState((GTApplePMPPerfStateControl *)(v41 + 8));
}

void sub_1CF48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)(v20 - 104));
  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper19StreamFrameTimeDataEv_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = GTSampleBufferManager::ResolveSampleBuffers((GTSampleBufferManager *)(v2 + 263));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    v6 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(unsigned int *)(a1 + 48)));
    objc_msgSend(v5, "setData:", v6);

    v4 = v6;
  }
  v2[269] = 0;
  v2[267] = v2[266];

}

void sub_1CF5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper19StreamFrameTimeDataEv_block_invoke_3(uint64_t a1)
{
  id *v2;
  void *v3;
  id v4;
  void *v5;

  v2 = *(id **)(a1 + 48);
  v3 = objc_autoreleasePoolPush();
  v4 = GTUSCSamplingStreamingManagerHelper::PostProcessFrameData(v2, *(void **)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);

  objc_autoreleasePoolPop(v3);
}

void sub_1CF650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  int64_t v3;
  char *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v10;
  unsigned int v11;

  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62)
      abort();
    v3 = (char *)this->__end_ - (char *)this->__begin_;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(__n);
    v5 = (unsigned int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = (unsigned int *)&v4[4 * v6];
    begin = this->__begin_;
    end = this->__end_;
    v10 = v5;
    if (end != this->__begin_)
    {
      v10 = v5;
      do
      {
        v11 = *--end;
        *--v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZN35GTUSCSamplingStreamingManagerHelper18CalculateFrameTimeEv_block_invoke(uint64_t a1)
{
  uint64_t **v2;
  id *v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int FuncEnumConstructorType;
  id v11;
  void *v12;
  unint64_t v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[5];

  v2 = *(uint64_t ***)(a1 + 40);
  GTMTLReplayController_prePlayForProfiling(**v2);
  v3 = (id *)**v2;
  v15 = v3[1];
  v4 = *v3;
  v5 = v3 + 2810;
  if (*((_QWORD *)*v3 + 13) + *((_QWORD *)*v3 + 12) > (unint64_t)*((unsigned int *)v3 + 5620))
  {
    v6 = v4[2];
    do
    {
      v7 = objc_autoreleasePoolPush();
      v8 = *(_QWORD *)(v4[15] + 24);
      v9 = *v5;
      FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v8 + (v9 << 6) + 8));
      if (FuncEnumConstructorType == 25)
        GTMTLReplayController_restoreCommandBuffer((uint64_t)v3, v8 + (v9 << 6));
      GTMTLReplayController_updateCommandEncoder((uint64_t)v3, v8 + (v9 << 6));
      GTMTLReplayController_defaultDispatchFunction((uint64_t)v3, v8 + (v9 << 6));
      if (FuncEnumConstructorType == 25)
      {
        v11 = objc_msgSend(v15, "commandBufferForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v8 + (v9 << 6)), *(unsigned __int8 *)(v8 + (v9 << 6) + 13), v6)+ 1));
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = ___ZN35GTUSCSamplingStreamingManagerHelper18CalculateFrameTimeEv_block_invoke_2;
        v17[3] = &unk_724818;
        v17[4] = *(_QWORD *)(a1 + 32);
        objc_msgSend(v12, "addCompletedHandler:", v17);

      }
      objc_autoreleasePoolPop(v7);
      v13 = (*v5 + 1);
      *v5 = v13;
    }
    while (v4[13] + v4[12] > v13);
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[1], "defaultCommandQueue", v15));
  objc_msgSend(v14, "finish");

}

void sub_1CF8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper18CalculateFrameTimeEv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  objc_msgSend(v3, "GPUStartTime");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v8[0] = v5;
  objc_msgSend(v3, "GPUEndTime");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v8[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v8, 2));
  objc_msgSend(v4, "addObject:", v7);

}

void sub_1CFA20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id GTUSCSamplingStreamingManagerHelper::GatherFrameMiscEncoderPostProcessedData(char a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  __int128 *v26;
  _QWORD v27[4];
  id v28;
  __int128 *v29;
  _QWORD v30[4];
  id v31;
  __int128 *v32;
  uint64_t v33;
  char v34;

  v21 = a2;
  v22 = a3;
  v9 = a5;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = ___ZN35GTUSCSamplingStreamingManagerHelper39GatherFrameMiscEncoderPostProcessedDataEbP14NSMutableArrayIP6NSDataEP13NSMutableDataRNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS7_4hashIjEENS7_8equal_toIjEENS7_9allocatorINS7_4pairIKjS9_EEEEEEP11NSOperation_block_invoke;
  v30[3] = &unk_724840;
  v32 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
  v33 = a4;
  v34 = a1;
  v11 = (id)objc_opt_new(NSMutableArray, v10);
  v31 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v30));
  v13 = v12;
  if (v9)
    objc_msgSend(v12, "addDependency:", v9);
  objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v13);
  objc_msgSend(v13, "setQueuePriority:", -8);
  v15 = (void *)objc_opt_new(NSOperation, v14);
  if (dword_75286C && dword_752868)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = ___ZN35GTUSCSamplingStreamingManagerHelper39GatherFrameMiscEncoderPostProcessedDataEbP14NSMutableArrayIP6NSDataEP13NSMutableDataRNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS7_4hashIjEENS7_8equal_toIjEENS7_9allocatorINS7_4pairIKjS9_EEEEEEP11NSOperation_block_invoke_2;
    v27[3] = &unk_726378;
    v29 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
    v28 = v22;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v27));
    objc_msgSend(v16, "addDependency:", v13);
    objc_msgSend(v15, "addDependency:", v16);
    objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v16);

  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = ___ZN35GTUSCSamplingStreamingManagerHelper39GatherFrameMiscEncoderPostProcessedDataEbP14NSMutableArrayIP6NSDataEP13NSMutableDataRNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS7_4hashIjEENS7_8equal_toIjEENS7_9allocatorINS7_4pairIKjS9_EEEEEEP11NSOperation_block_invoke_3;
  v23[3] = &unk_725E60;
  v26 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
  v17 = v11;
  v24 = v17;
  v18 = v21;
  v25 = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v23));
  objc_msgSend(v19, "addDependency:", v13);
  objc_msgSend(v15, "addDependency:", v19);
  objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v19);
  objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v15);

  return v15;
}

void sub_1CFCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper39GatherFrameMiscEncoderPostProcessedDataEbP14NSMutableArrayIP6NSDataEP13NSMutableDataRNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS7_4hashIjEENS7_8equal_toIjEENS7_9allocatorINS7_4pairIKjS9_EEEEEEP11NSOperation_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  id v6;
  uint64_t *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int FuncEnumConstructorType;
  void *v19;
  _QWORD *InclusiveRange;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  void *context;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  GTUSCSamplingStreamingManagerHelper *v66;
  void *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  id v72;
  _QWORD v73[2];
  char v74;
  _OWORD v75[4];

  v2 = *(_QWORD *)(a1 + 40);
  GTMTLReplayController_prePlayForProfiling(**(_QWORD **)v2);
  GTUSCSamplingStreamingManagerHelper::SetupSourceForFrameTime((id *)v2, *(unsigned int *)(*(_QWORD *)v2 + 68), 0);
  v66 = (GTUSCSamplingStreamingManagerHelper *)v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 16), "firstObject"));
  v4 = objc_msgSend(v3, "startSampling");

  if ((v4 & 1) != 0)
  {
    v5 = objc_autoreleasePoolPush();
    v65 = *(_QWORD **)(a1 + 48);
    v68 = *(unsigned __int8 *)(a1 + 56);
    v70 = **(_QWORD **)v66;
    v73[1] = v70;
    v74 = 0;
    v73[0] = objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
    objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
    v6 = *(id *)(**(_QWORD **)v66 + 8);
    v7 = ***(uint64_t ****)v66;
    v59 = v7[15];
    v60 = v7[14];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "defaultDevice"));
    v9 = objc_msgSend(v8, "newEvent");

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "defaultCommandQueue"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "commandBuffer"));
    v56 = v5;
    v57 = a1;

    v63 = v9;
    objc_msgSend(v11, "encodeSignalEvent:value:", v9, GTUSCSamplingStreamingManagerHelper::ReplayFrameWithMiscEncoderSyncEvents(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,BOOL)::signalCounter);
    objc_msgSend(v11, "commit");
    v58 = v11;
    if (v7[13] + v7[12] > (unint64_t)*(unsigned int *)(**(_QWORD **)v66 + 22480))
    {
      v64 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v61 = (unsigned int *)(v70 + 22480);
      v67 = v6;
      do
      {
        context = objc_autoreleasePoolPush();
        v15 = *(_QWORD *)(v7[15] + 24);
        v16 = *v61;
        v17 = v15 + (v16 << 6);
        v71 = (int *)(v17 + 8);
        FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v17 + 8));
        if (FuncEnumConstructorType == 25)
        {
          GTMTLReplayController_restoreCommandBuffer(v70, v15 + (v16 << 6));
          v64 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v15 + (v16 << 6)), *(unsigned __int8 *)(v15 + (v16 << 6) + 13), v7[2])+ 1);
          FuncEnumConstructorType = GetFuncEnumConstructorType(*v71);
        }
        if ((FuncEnumConstructorType | 4) == 0x15)
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "commandBufferForKey:", v64));
          objc_msgSend(v19, "encodeWaitForEvent:value:", v63, GTUSCSamplingStreamingManagerHelper::ReplayFrameWithMiscEncoderSyncEvents(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,BOOL)::signalCounter++);
          objc_msgSend(v19, "encodeSignalEvent:value:", v63);
          v12 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v15 + (v16 << 6)), *(unsigned __int8 *)(v15 + (v16 << 6) + 13), v7[2])+ 1);
          if (v68)
          {
            InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v60 + 12), *(_QWORD **)(v60 + 24), *v61);
            v21 = InclusiveRange[1];
            v22 = v21 - *InclusiveRange;
            if (v21 <= *InclusiveRange)
            {
              v14 = v13;
            }
            else
            {
              v23 = (int *)(*(_QWORD *)(v59 + 24) + (*InclusiveRange << 6) + 8);
              v14 = v13;
              do
              {
                v25 = *v23;
                v23 += 16;
                v24 = v25;
                if (IsFuncEnumSampledBlitCall(v25) || IsFuncEnumSampledBlitCallAGX(v24))
                  ++v14;
                v13 = v14;
                --v22;
              }
              while (v22);
            }
          }

          v26 = v14;
          v6 = v67;
        }
        else
        {
          v26 = v14;
        }
        GTMTLReplayController_updateCommandEncoder(v70, v17);
        v69 = v12;
        if (v68 && ((v27 = *v71, IsFuncEnumSampledBlitCall(*v71)) || IsFuncEnumSampledBlitCallAGX(v27)))
        {
          v14 = v26 - 1;
          if (v26 && v13 != v26)
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "blitCommandEncoderForKey:", v12));
            objc_msgSend(v28, "endEncoding");
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "commandBufferForKey:", v64));
            objc_msgSend(v29, "encodeWaitForEvent:value:", v63, GTUSCSamplingStreamingManagerHelper::ReplayFrameWithMiscEncoderSyncEvents(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,BOOL)::signalCounter++);
            objc_msgSend(v29, "encodeSignalEvent:value:", v63);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "blitCommandEncoder"));
            if (std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v65, objc_msgSend(v30, "globalTraceObjectID")))
            {
              objc_msgSend(v30, "endEncoding");
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "computeCommandEncoder"));
              objc_msgSend(v31, "endEncoding");
              v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "blitCommandEncoder"));

              v30 = (void *)v32;
              v12 = v69;
            }
            objc_msgSend(v67, "setBlitCommandEncoder:forKey:", v30, v12);
            v33 = objc_msgSend(v67, "globalTraceIdForEncoder:ofType:", v12, 0);
            memset(v75, 0, sizeof(v75));
            DWORD2(v75[0]) = -16354;
            GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v66, v65, (uint64_t)v75, v33, v30, v65[3], 0, 0);

            v6 = v67;
          }
        }
        else
        {
          v14 = v26;
        }
        GTMTLReplayController_defaultDispatchFunction(v70, v17);
        v34 = *v71;
        if (GetFuncEnumConstructorType(*v71) == 21)
        {
          v35 = objc_msgSend(v6, "globalTraceIdForEncoder:ofType:", v12, 0);
          v36 = v12;
          v37 = v35;
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "blitCommandEncoderForKey:", v36));
          if (std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v65, v37))
          {
            objc_msgSend(v38, "endEncoding");
            v39 = objc_msgSend(v6, "commandBufferForKey:", GTTraceFunc_targetContext(v17, v7[2]));
            v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "computeCommandEncoder"));
            objc_msgSend(v41, "endEncoding");
            GTMTLReplayController_defaultDispatchFunction(v70, v17);
            v37 = objc_msgSend(v67, "globalTraceIdForEncoder:ofType:", v69, 0);

            v6 = v67;
          }
          GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v66, v65, v17, v37, v38, v65[3], 0, 0);
          v12 = v69;

          v34 = *v71;
        }
        if (!v68 && v34 == -16376)
        {
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "commandBufferForKey:", v64));
          objc_msgSend(v42, "encodeWaitForEvent:value:", v63, GTUSCSamplingStreamingManagerHelper::ReplayFrameWithMiscEncoderSyncEvents(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,BOOL)::signalCounter++);
          objc_msgSend(v42, "encodeSignalEvent:value:", v63);

          v34 = *v71;
        }
        if (GetFuncEnumConstructorType(v34) == 17)
        {
          v43 = objc_msgSend(v6, "globalTraceIdForEncoder:ofType:", v12, 0);
          v44 = v12;
          v45 = v43;
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accelerationStructureCommandEncoderForKey:", v44));
          if (std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>(v65, v45))
          {
            objc_msgSend(v46, "endEncoding");
            v47 = objc_msgSend(v6, "commandBufferForKey:", GTTraceFunc_targetContext(v17, v7[2]));
            v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "computeCommandEncoder"));
            objc_msgSend(v49, "endEncoding");
            GTMTLReplayController_defaultDispatchFunction(v70, v17);
            v45 = objc_msgSend(v67, "globalTraceIdForEncoder:ofType:", v69, 0);

            v6 = v67;
          }
          GTUSCSamplingStreamingManagerHelper::AddEncoderSamplePoints(v66, v65, v17, v45, v46, v65[3], 0, 0);
          v12 = v69;

          v34 = *v71;
        }
        if (v34 == -15642)
        {
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "commandBufferForKey:", v64));
          objc_msgSend(v50, "encodeWaitForEvent:value:", v63, GTUSCSamplingStreamingManagerHelper::ReplayFrameWithMiscEncoderSyncEvents(std::unordered_map<unsigned int,GTEncoderSampleIndexInfo> &,BOOL)::signalCounter++);
          objc_msgSend(v50, "encodeSignalEvent:value:", v63);

        }
        objc_autoreleasePoolPop(context);
        v51 = **(_QWORD **)v66;
        v52 = (*(_DWORD *)(v51 + 22480) + 1);
        *(_DWORD *)(v51 + 22480) = v52;
      }
      while (v7[13] + v7[12] > v52);
    }
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v70 + 8), "defaultCommandQueue"));
    objc_msgSend(v53, "finish");

    ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)v73);
    v54 = GTUSCSamplingStreamingManagerHelper::DrainRawFrameData((id *)v66);
    v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    if (v55)
      objc_msgSend(*(id *)(v57 + 32), "setArray:", v55);

    objc_autoreleasePoolPop(v56);
    v72 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v66 + 2), "firstObject"));
    objc_msgSend(v72, "stopSampling");

  }
}

void sub_1D0584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper39GatherFrameMiscEncoderPostProcessedDataEbP14NSMutableArrayIP6NSDataEP13NSMutableDataRNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS7_4hashIjEENS7_8equal_toIjEENS7_9allocatorINS7_4pairIKjS9_EEEEEEP11NSOperation_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  id v4;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = GTSampleBufferManager::ResolveSampleBuffers((GTSampleBufferManager *)(v2 + 263));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "setData:", v4);
  v2[269] = 0;
  v2[267] = v2[266];

}

void sub_1D0718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper39GatherFrameMiscEncoderPostProcessedDataEbP14NSMutableArrayIP6NSDataEP13NSMutableDataRNSt3__113unordered_mapIj24GTEncoderSampleIndexInfoNS7_4hashIjEENS7_8equal_toIjEENS7_9allocatorINS7_4pairIKjS9_EEEEEEP11NSOperation_block_invoke_3(uint64_t a1)
{
  id v2;
  id v3;

  v2 = GTUSCSamplingStreamingManagerHelper::PostProcessFrameData(*(id **)(a1 + 48), *(void **)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
    objc_msgSend(*(id *)(a1 + 40), "setArray:", v3);

}

void sub_1D0778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::StreamEncoderDerivedCounterData(GTUSCSamplingStreamingManagerHelper *this)
{
  unsigned __int8 v1;
  uint64_t *CountersForDerivedCounter;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  id v24;
  id v25;
  uint64_t v26;
  void *j;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *k;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t m;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t *v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  uint64_t v58;
  void *ii;
  void *v60;
  void *v61;
  unsigned int v62;
  void *v63;
  void *v64;
  char *v65;
  id v66;
  uint64_t v67;
  void *jj;
  void *v69;
  _UNKNOWN **v70;
  _UNKNOWN **v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  GTUSCSamplingStreamingManagerHelper *v76;
  GTUSCSamplingStreamingManagerHelper *v77;
  void *v78;
  void *v79;
  _BOOL4 v80;
  NSDictionary *v81;
  void *v82;
  void *v83;
  uint64_t kk;
  void *v85;
  void *v86;
  unint64_t mm;
  void *v88;
  BOOL v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unint64_t nn;
  uint64_t v95;
  void *v96;
  void *v97;
  BOOL v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  int i1;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  GTUSCSamplingStreamingManagerHelper *v124;
  void *v125;
  id v126;
  void *i2;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  id v132;
  uint64_t v133;
  void *i3;
  void *v135;
  void **v136;
  unint64_t v137;
  size_t v138;
  char *v139;
  char *v140;
  unsigned int *i4;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  void *v150;
  id v151;
  unint64_t v152;
  uint64_t v153;
  void *i5;
  void *v155;
  id v156;
  id v157;
  uint64_t v158;
  void *i6;
  void *v160;
  id v161;
  uint64_t v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  __CFString *v169;
  void *v170;
  char *v171;
  void *v172;
  char *v173;
  id v174;
  void *v175;
  void *v176;
  id v177;
  void *v178;
  char *v179;
  uint64_t v180;
  NSDictionary *v181;
  char *v182;
  id v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  GTUSCSamplingStreamingManagerHelper *v189;
  void *v190;
  id v191;
  id v192;
  id v193;
  id v194;
  char *v195;
  id v196;
  void *v197;
  uint64_t v198;
  unint64_t v199;
  unsigned int v200;
  void *v201;
  uint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  _BOOL4 v206;
  id v207;
  id v208;
  id v209;
  void *v210;
  void *v211;
  char *n;
  id v213;
  void *v214;
  uint64_t *obj;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _QWORD v236[4];
  id v237;
  __int128 *v238;
  _QWORD v239[4];
  id v240;
  id v241;
  __int128 *v242;
  _QWORD v243[4];
  GTUSCSamplingStreamingManagerHelper *v244;
  id v245;
  id v246;
  uint64_t *v247;
  void ***v248;
  void **v249;
  _QWORD *v250;
  uint64_t *v251;
  __int128 *v252;
  int v253;
  unsigned int v254;
  BOOL v255;
  void **v256;
  void ***v257;
  uint64_t v258;
  __n128 (*v259)(__n128 *, __n128 *);
  void (*v260)(uint64_t);
  void *v261;
  void *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  __n128 (*v268)(__n128 *, __n128 *);
  void (*v269)(uint64_t);
  void *v270;
  uint64_t v271[3];
  _QWORD v272[10];
  int v273;
  void *__p;
  void **p_p;
  uint64_t v276;
  uint64_t (*v277)(uint64_t, _QWORD *);
  uint64_t (*v278)(uint64_t);
  _BYTE v279[32];
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t (*v285)(uint64_t, uint64_t);
  void (*v286)(uint64_t);
  id v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  _QWORD v308[2];
  _QWORD v309[14];
  _QWORD v310[3];
  uint64_t v311;
  void *v312;
  void *v313;
  id v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  id v320;
  __CFString *v321;
  _BYTE v322[128];
  _BYTE v323[128];
  _BYTE v324[128];
  _BYTE v325[128];
  _BYTE v326[128];
  _BYTE v327[128];
  _BYTE v328[128];
  _BYTE v329[128];
  const __CFString *v330;
  void *v331;
  _BYTE v332[128];
  _BYTE v333[128];

  v1 = atomic_load(byte_752AF4);
  if ((v1 & 1) != 0)
    return;
  v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 48), "objectForKeyedSubscript:", CFSTR("DerivedCounterDictionary")));
  if ((_DWORD)qword_7528A8 == -1)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v185, "objectForKeyedSubscript:", CFSTR("DerivedCounters")));
    v10 = objc_msgSend(v9, "mutableCopy");

    v211 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CSInvocation")));
    v191 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("counters")));

    goto LABEL_13;
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, "CSInvocation");
  CountersForDerivedCounter = GTAGXProfilingSupportHelper::GetCountersForDerivedCounter((uint64_t)&__p);
  v3 = CountersForDerivedCounter;
  if (SHIBYTE(v276) < 0)
  {
    operator delete(__p);
    if (v3)
      goto LABEL_5;
LABEL_12:
    v211 = 0;
    v191 = 0;
    goto LABEL_13;
  }
  if (!CountersForDerivedCounter)
    goto LABEL_12;
LABEL_5:
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 3)));
  v5 = *v3;
  v6 = v3[1];
  if (*v3 != v6)
  {
    do
    {
      v7 = v5;
      if (*(char *)(v5 + 23) < 0)
        v7 = *(_QWORD *)v5;
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
      objc_msgSend(v4, "addObject:", v8);

      v5 += 24;
    }
    while (v5 != v6);
  }
  v191 = objc_msgSend(v4, "copy");

  v211 = 0;
LABEL_13:
  v197 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v191));
  v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(&off_7389E8, "count")));
  if ((_DWORD)qword_7528A8 == -1)
  {
    v307 = 0u;
    v306 = 0u;
    v305 = 0u;
    v304 = 0u;
    v12 = objc_msgSend(&off_7389E8, "countByEnumeratingWithState:objects:count:", &v304, v333, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v305;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v305 != v13)
            objc_enumerationMutation(&off_7389E8);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v211, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v304 + 1) + 8 * (_QWORD)i)));
          v16 = v15;
          if (v15)
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("counters")));
            if (v17)
              objc_msgSend(v210, "addObjectsFromArray:", v17);

          }
        }
        v12 = objc_msgSend(&off_7389E8, "countByEnumeratingWithState:objects:count:", &v304, v333, 16);
      }
      while (v12);
    }
  }
  if (qword_7527E8)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_7527E8, "objectForKeyedSubscript:", CFSTR("num_cores")));
    v19 = objc_msgSend(v18, "unsignedIntValue");

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_7527E8, "objectForKeyedSubscript:", CFSTR("num_mgpus")));
    v21 = objc_msgSend(v20, "unsignedIntValue");

    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v21;
    v23 = v19 / v22 > 4;
  }
  else
  {
    v23 = 1;
  }
  v206 = v23;
  v214 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v191, "count")));
  if (v206)
  {
    v303 = 0u;
    v302 = 0u;
    v301 = 0u;
    v300 = 0u;
    v24 = v191;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v300, v332, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v301;
      do
      {
        for (j = 0; j != v25; j = (char *)j + 1)
        {
          if (*(_QWORD *)v301 != v26)
            objc_enumerationMutation(v24);
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", *(_QWORD *)(*((_QWORD *)&v300 + 1) + 8 * (_QWORD)j), 0));
          objc_msgSend(v214, "addObject:", v28);

        }
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v300, v332, 16);
      }
      while (v25);
    }

  }
  if ((_DWORD)qword_7528A8 == -1)
  {
    v330 = CFSTR("FRGTicks");
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v211, "objectForKeyedSubscript:"));
    v331 = v32;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v331, &v330, 1));
    v34 = GTMTLReplayHost_rawCounters(v33);
    v31 = (uint64_t *)objc_claimAutoreleasedReturnValue(v34);

LABEL_51:
    goto LABEL_52;
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, "FRGTicks");
  v29 = GTAGXProfilingSupportHelper::GetCountersForDerivedCounter((uint64_t)&__p);
  v31 = v29;
  if ((SHIBYTE(v276) & 0x80000000) == 0)
  {
    if (!v29)
      goto LABEL_52;
    goto LABEL_46;
  }
  operator delete(__p);
  if (v31)
  {
LABEL_46:
    v32 = (void *)objc_opt_new(NSMutableArray, v30);
    v35 = *v31;
    v36 = v31[1];
    if (*v31 != v36)
    {
      do
      {
        v37 = v35;
        if (*(char *)(v35 + 23) < 0)
          v37 = *(_QWORD *)v35;
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v37));
        objc_msgSend(v32, "addObject:", v38);

        v35 += 24;
      }
      while (v35 != v36);
    }
    v31 = (uint64_t *)objc_msgSend(v32, "copy");
    goto LABEL_51;
  }
LABEL_52:
  v39 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v31, "count")));
  v40 = (void *)qword_7527F8;
  qword_7527F8 = v39;

  v299 = 0u;
  v298 = 0u;
  v297 = 0u;
  v296 = 0u;
  obj = v31;
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v296, v329, 16);
  if (v41)
  {
    v42 = *(_QWORD *)v297;
    do
    {
      for (k = 0; k != v41; k = (char *)k + 1)
      {
        if (*(_QWORD *)v297 != v42)
          objc_enumerationMutation(obj);
        v44 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", *(_QWORD *)(*((_QWORD *)&v296 + 1) + 8 * (_QWORD)k), &off_738E10));
        objc_msgSend((id)qword_7527F8, "addObject:", v44);

      }
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v296, v329, 16);
    }
    while (v41);
  }

  if ((_DWORD)qword_7528A8 == -1)
  {
    v50 = GTMTLReplayHost_rawCounters(v211);
    v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    v192 = objc_msgSend(v51, "copy");

  }
  else
  {
    v192 = (id)objc_opt_new(NSMutableArray, v45);
    v46 = qword_752A50;
    for (m = xmmword_752A58; v46 != m; v46 += 24)
    {
      v48 = v46;
      if (*(char *)(v46 + 23) < 0)
        v48 = *(_QWORD *)v46;
      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v48));
      objc_msgSend(v192, "addObject:", v49);

    }
  }
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v192));
  v53 = obj;
  objc_msgSend(v52, "addObjectsFromArray:", &off_7389A0);
  if (v191)
    objc_msgSend(v52, "addObjectsFromArray:", v191);
  objc_msgSend(v52, "addObjectsFromArray:", obj);
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 4096));
  for (n = 0; n < objc_msgSend(*((id *)&xmmword_752038 + 1), "count"); ++n)
  {
    v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:"));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v204, "availableCounters"));
    v295 = 0u;
    v294 = 0u;
    v293 = 0u;
    v292 = 0u;
    v56 = v55;
    v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v292, v328, 16);
    if (v57)
    {
      v58 = *(_QWORD *)v293;
      do
      {
        for (ii = 0; ii != v57; ii = (char *)ii + 1)
        {
          if (*(_QWORD *)v293 != v58)
            objc_enumerationMutation(v56);
          v60 = *(void **)(*((_QWORD *)&v292 + 1) + 8 * (_QWORD)ii);
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "name"));
          v62 = objc_msgSend(v52, "containsObject:", v61);

          if (v62)
          {
            v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v60, "counterValueType")));
            v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "name"));
            objc_msgSend(v54, "setObject:forKeyedSubscript:", v63, v64);

          }
        }
        v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v292, v328, 16);
      }
      while (v57);
    }

    v53 = obj;
  }
  v65 = (char *)objc_msgSend(v192, "count");
  v205 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", &v65[(_QWORD)objc_msgSend((id)qword_7527F0, "count")]));
  objc_msgSend(v205, "addObjectsFromArray:", qword_7527F0);
  v291 = 0u;
  v290 = 0u;
  v289 = 0u;
  v288 = 0u;
  v213 = v192;
  v66 = objc_msgSend(v213, "countByEnumeratingWithState:objects:count:", &v288, v327, 16);
  if (v66)
  {
    v67 = *(_QWORD *)v289;
    do
    {
      for (jj = 0; jj != v66; jj = (char *)jj + 1)
      {
        if (*(_QWORD *)v289 != v67)
          objc_enumerationMutation(v213);
        v69 = *(void **)(*((_QWORD *)&v288 + 1) + 8 * (_QWORD)jj);
        if ((objc_msgSend(v69, "isEqualToString:", CFSTR("MTLStat_nSec")) & 1) == 0
          && (objc_msgSend(v53, "containsObject:", v69) & 1) == 0
          && (!v206 || (objc_msgSend(v197, "containsObject:", v69) & 1) == 0))
        {
          if (objc_msgSend(v210, "containsObject:", v69))
            v70 = &off_738E38;
          else
            v70 = 0;
          v71 = v70;
          v72 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v69, v71));
          objc_msgSend(v205, "addObject:", v72);

          v53 = obj;
        }
      }
      v66 = objc_msgSend(v213, "countByEnumeratingWithState:objects:count:", &v288, v327, 16);
    }
    while (v66);
  }

  if (qword_7527F8)
  {
    v73 = GTUSCSamplingStreamingManagerHelper::SubDividedCounterDictionary((void *)qword_7527F8);
    v184 = (void *)objc_claimAutoreleasedReturnValue(v73);
  }
  else
  {
    v184 = 0;
  }
  v74 = GTUSCSamplingStreamingManagerHelper::SubDividedCounterDictionary(v205);
  v181 = (NSDictionary *)objc_claimAutoreleasedReturnValue(v74);
  v75 = DeepMutableCopy(v181);
  v76 = (GTUSCSamplingStreamingManagerHelper *)objc_claimAutoreleasedReturnValue(v75);
  v77 = v76;
  if (v76)
  {
    v189 = v76;
    if (-[GTUSCSamplingStreamingManagerHelper count](v76, "count"))
    {
      v78 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v77, "objectForKeyedSubscript:", CFSTR("passNum")));
      v200 = objc_msgSend(v78, "unsignedIntValue");

      if (v184)
      {
        v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("passNum")));
        v80 = objc_msgSend(v79, "unsignedIntValue") == 1;

        if (v80)
        {
          GTUSCSamplingStreamingManagerHelper::SetupBumperCounters(v189, v81);
          v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("passList")));
          v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "objectAtIndexedSubscript:", 0));

          if (v200)
          {
            for (kk = 0; kk != v200; ++kk)
            {
              v85 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v189, "objectForKeyedSubscript:", CFSTR("passList")));
              v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectAtIndexedSubscript:", kk));

              for (mm = 0; mm < (unint64_t)objc_msgSend(v86, "count"); ++mm)
              {
                v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "objectAtIndexedSubscript:", mm));
                v89 = objc_msgSend(v88, "count") == 0;

                if (!v89)
                {
                  v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectAtIndexedSubscript:", mm));
                  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "objectAtIndexedSubscript:", mm));
                  objc_msgSend(v90, "addObjectsFromArray:", v91);

                }
              }

            }
          }
          if (objc_msgSend(v214, "count"))
          {
            ++v200;
            v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
            -[GTUSCSamplingStreamingManagerHelper setObject:forKeyedSubscript:](v189, "setObject:forKeyedSubscript:", v92, CFSTR("passNum"));

          }
          if (objc_msgSend(v214, "count"))
          {
            v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*((id *)&xmmword_752038 + 1), "count")));
            for (nn = 0; nn < (unint64_t)objc_msgSend(*((id *)&xmmword_752038 + 1), "count"); ++nn)
            {
              v96 = (void *)objc_opt_new(NSMutableArray, v95);
              objc_msgSend(v93, "addObject:", v96);

              v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "objectAtIndexedSubscript:", nn));
              v98 = objc_msgSend(v97, "count") == 0;

              if (!v98)
              {
                v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "objectAtIndexedSubscript:", nn));
                v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_7527F0, "arrayByAddingObjectsFromArray:", v214));
                objc_msgSend(v99, "addObjectsFromArray:", v100);

              }
            }
            v101 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v189, "objectForKeyedSubscript:", CFSTR("passList")));
            objc_msgSend(v101, "addObject:", v93);

          }
        }
      }
      v102 = objc_autoreleasePoolPush();
      v104 = objc_opt_new(NSMutableData, v103);
      objc_autoreleasePoolPop(v102);
      v186 = (void *)v104;
      v282 = 0;
      v283 = &v282;
      v284 = 0x3032000000;
      v285 = __Block_byref_object_copy_;
      v286 = __Block_byref_object_dispose_;
      v287 = (id)objc_opt_new(GTMTLFXTracingDelegate, v105);
      __p = 0;
      p_p = &__p;
      v276 = 0x5812000000;
      v277 = __Block_byref_object_copy__222;
      v278 = __Block_byref_object_dispose__223;
      memset(v279, 0, sizeof(v279));
      v280 = 0;
      v281 = 1065353216;
      v272[0] = 0;
      v272[1] = v272;
      v272[2] = 0x5812000000;
      v272[3] = __Block_byref_object_copy__222;
      v272[4] = __Block_byref_object_dispose__223;
      memset(&v272[5], 0, 40);
      v273 = 1065353216;
      v265 = 0;
      v266 = &v265;
      v267 = 0x4812000000;
      v268 = __Block_byref_object_copy__224;
      v269 = __Block_byref_object_dispose__225;
      v270 = &unk_4C2897;
      memset(v271, 0, sizeof(v271));
      v256 = 0;
      v257 = &v256;
      v258 = 0x4812000000;
      v259 = __Block_byref_object_copy__227;
      v260 = __Block_byref_object_dispose__228;
      v261 = &unk_4C2897;
      v262 = 0;
      v264 = 0;
      v263 = 0;
      v182 = (char *)v200;
      std::vector<std::vector<DYMTLEncoderInfo>>::resize(v271, v200);
      v174 = *(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16);
      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v174, "objectForKeyedSubscript:", CFSTR("perEncoderDrawCallCount")));
      v177 = objc_msgSend(v106, "count");

      v188 = (void *)objc_opt_new(NSMutableArray, v107);
      v190 = (void *)objc_opt_new(NSOperation, v108);
      if (v200)
      {
        v109 = 0;
        for (i1 = 0; i1 != v200; ++i1)
        {
          std::vector<std::vector<DYMTLEncoderInfo>>::reserve(v266 + 6, 2 * (_QWORD)v177);
          v112 = (void *)objc_opt_new(NSMutableArray, v111);
          v243[0] = _NSConcreteStackBlock;
          v243[1] = 3221225472;
          v243[2] = ___ZN35GTUSCSamplingStreamingManagerHelper31StreamEncoderDerivedCounterDataEv_block_invoke;
          v243[3] = &unk_724868;
          v252 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
          v244 = v189;
          v253 = i1;
          v255 = v206;
          v113 = v191;
          v254 = v200;
          v245 = v113;
          v247 = &v265;
          v248 = &v256;
          v249 = &__p;
          v250 = v272;
          v251 = &v282;
          v114 = v112;
          v246 = v114;
          v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v243));
          v116 = v115;
          if (v109)
            objc_msgSend(v115, "addDependency:", v109);
          objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v116);
          objc_msgSend(v116, "setQueuePriority:", -8);
          v239[0] = _NSConcreteStackBlock;
          v239[1] = 3221225472;
          v239[2] = ___ZN35GTUSCSamplingStreamingManagerHelper31StreamEncoderDerivedCounterDataEv_block_invoke_2;
          v239[3] = &unk_725E60;
          v242 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
          v117 = v114;
          v240 = v117;
          v241 = v188;
          v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v239));
          objc_msgSend(v118, "addDependency:", v116);
          objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v118);
          objc_msgSend(v190, "addDependency:", v118);
          v119 = v118;

          if (!i1 && dword_75286C && dword_752868)
          {
            v236[0] = _NSConcreteStackBlock;
            v236[1] = 3221225472;
            v236[2] = ___ZN35GTUSCSamplingStreamingManagerHelper31StreamEncoderDerivedCounterDataEv_block_invoke_3;
            v236[3] = &unk_726378;
            v238 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
            v237 = v186;
            v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v236));
            objc_msgSend(v120, "addDependency:", v119);
            objc_msgSend(v190, "addDependency:", v120);
            objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v120);

          }
          v109 = v119;
        }
      }
      else
      {
        v119 = 0;
      }
      v175 = v119;
      objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v190);
      objc_msgSend(v190, "waitUntilFinished");
      v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v200));
      if (v200)
      {
        v121 = 0;
        do
        {
          v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(v266[6] + v121), *(_QWORD *)(v266[6] + v121 + 8) - *(_QWORD *)(v266[6] + v121)));
          objc_msgSend(v187, "addObject:", v122);

          v121 += 24;
        }
        while (24 * v200 != v121);
      }
      v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", -[GTUSCSamplingStreamingManagerHelper count](v189, "count")));
      v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v176, "objectForKeyedSubscript:", CFSTR("passNum")));
      objc_msgSend(v176, "setObject:forKeyedSubscript:", v123, CFSTR("passNum"));

      v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v200));
      v124 = v189;
      if (v200)
      {
        v179 = 0;
        do
        {
          v125 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v124, "objectForKeyedSubscript:", CFSTR("passList")));
          v193 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "objectAtIndexedSubscript:", v179));

          v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v193, "count")));
          v234 = 0u;
          v235 = 0u;
          v232 = 0u;
          v233 = 0u;
          v194 = v193;
          v126 = objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", &v232, v326, 16);
          if (v126)
          {
            v198 = *(_QWORD *)v233;
            do
            {
              v207 = v126;
              for (i2 = 0; i2 != v207; i2 = (char *)i2 + 1)
              {
                if (*(_QWORD *)v233 != v198)
                  objc_enumerationMutation(v194);
                v128 = *(void **)(*((_QWORD *)&v232 + 1) + 8 * (_QWORD)i2);
                v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_7527F0, "arrayByAddingObjectsFromArray:", v128));
                v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v129, "count")));
                v230 = 0u;
                v231 = 0u;
                v228 = 0u;
                v229 = 0u;
                v131 = v128;
                v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v228, v325, 16);
                if (v132)
                {
                  v133 = *(_QWORD *)v229;
                  do
                  {
                    for (i3 = 0; i3 != v132; i3 = (char *)i3 + 1)
                    {
                      if (*(_QWORD *)v229 != v133)
                        objc_enumerationMutation(v131);
                      v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v228 + 1)
                                                                                          + 8 * (_QWORD)i3), "name"));
                      objc_msgSend(v130, "addObject:", v135);

                    }
                    v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v228, v325, 16);
                  }
                  while (v132);
                }

                objc_msgSend(v201, "addObject:", v130);
              }
              v126 = objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", &v232, v326, 16);
            }
            while (v126);
          }

          objc_msgSend(v178, "addObject:", v201);
          ++v179;
          v124 = v189;
        }
        while (v179 != v182);
      }
      v136 = p_p;
      v137 = (unint64_t)p_p[9];
      if (v137)
      {
        if (v137 >> 60)
          abort();
        v138 = 16 * v137;
        v139 = (char *)operator new(16 * v137);
        bzero(v139, v138);
        v140 = &v139[v138];
      }
      else
      {
        v139 = 0;
        v140 = 0;
      }
      for (i4 = (unsigned int *)v136[8]; i4; i4 = *(unsigned int **)i4)
      {
        v142 = i4[6];
        if ((v140 - v139) >> 4 > v142)
        {
          v143 = &v139[16 * v142];
          v144 = i4[7] | ((unint64_t)*((unsigned int *)v143 + 1) << 32);
          *(_QWORD *)v143 = v144;
          v145 = v144 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)i4 + 16) << 32);
          *(_QWORD *)v143 = v145;
          *(_QWORD *)v143 = v145 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)i4[9] << 48);
          *((_QWORD *)v143 + 1) = *((_QWORD *)i4 + 5);
        }
      }
      v171 = v139;
      if (!dword_752014)
        mach_timebase_info((mach_timebase_info_t)&GTUSCSamplingStreamingManagerHelper::StreamEncoderDerivedCounterData(void)::timebaseInfo);
      v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", v139, v140 - v139));
      v226 = 0u;
      v227 = 0u;
      v224 = 0u;
      v225 = 0u;
      v183 = v188;
      v146 = 0;
      v147 = (char *)objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v224, v324, 16);
      if (v147)
      {
        v148 = 0;
        v180 = *(_QWORD *)v225;
        do
        {
          v149 = 0;
          v173 = v147;
          do
          {
            if (*(_QWORD *)v225 != v180)
              objc_enumerationMutation(v183);
            v150 = *(void **)(*((_QWORD *)&v224 + 1) + 8 * (_QWORD)v149);
            v220 = 0u;
            v221 = 0u;
            v222 = 0u;
            v223 = 0u;
            v208 = v150;
            v151 = objc_msgSend(v208, "countByEnumeratingWithState:objects:count:", &v220, v323, 16);
            v195 = v149;
            v199 = v146;
            v202 = v148;
            v152 = 0;
            if (v151)
            {
              v153 = *(_QWORD *)v221;
              do
              {
                for (i5 = 0; i5 != v151; i5 = (char *)i5 + 1)
                {
                  if (*(_QWORD *)v221 != v153)
                    objc_enumerationMutation(v208);
                  v155 = *(void **)(*((_QWORD *)&v220 + 1) + 8 * (_QWORD)i5);
                  v216 = 0u;
                  v217 = 0u;
                  v218 = 0u;
                  v219 = 0u;
                  v156 = v155;
                  v157 = objc_msgSend(v156, "countByEnumeratingWithState:objects:count:", &v216, v322, 16);
                  if (v157)
                  {
                    v158 = *(_QWORD *)v217;
                    do
                    {
                      for (i6 = 0; i6 != v157; i6 = (char *)i6 + 1)
                      {
                        if (*(_QWORD *)v217 != v158)
                          objc_enumerationMutation(v156);
                        v152 += (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v216 + 1) + 8 * (_QWORD)i6), "length");
                      }
                      v157 = objc_msgSend(v156, "countByEnumeratingWithState:objects:count:", &v216, v322, 16);
                    }
                    while (v157);
                  }

                }
                v151 = objc_msgSend(v208, "countByEnumeratingWithState:objects:count:", &v220, v323, 16);
              }
              while (v151);
            }

            NSLog(CFSTR("Total RDE Counter Data for pass %u %llu kB"), v202, v152 >> 10);
            v146 = v152 + v199;
            v148 = (v202 + 1);
            v149 = v195 + 1;
          }
          while (v195 + 1 != v173);
          v147 = (char *)objc_msgSend(v183, "countByEnumeratingWithState:objects:count:", &v224, v324, 16);
        }
        while (v147);
      }

      v160 = (void *)qword_752850;
      if (!qword_752850)
        v160 = &__NSDictionary0__struct;
      v161 = v160;
      NSLog(CFSTR("Total RDE Counter Data %llu kB"), v146 >> 10);
      objc_msgSend(v176, "setObject:forKeyedSubscript:", v178, CFSTR("passList"));
      v309[0] = CFSTR("Derived Counter Sample Data");
      v309[1] = CFSTR("Subdivided Dictionary");
      v310[0] = v183;
      v310[1] = v176;
      v310[2] = v187;
      v309[2] = CFSTR("Encoder Infos");
      v309[3] = CFSTR("Encoder Tile Info");
      v311 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v257[6], (char *)v257[7] - (char *)v257[6]));
      v309[4] = CFSTR("MTLFX TraceIds");
      v209 = (id)v311;
      v162 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)v283[5], "mtlfxTracingInfo"));
      if (v162)
        v163 = (void *)v162;
      else
        v163 = &__NSDictionary0__struct;
      v312 = v163;
      v313 = v54;
      v309[5] = CFSTR("Counter Info");
      v309[6] = CFSTR("Num Encoders");
      v203 = (void *)v162;
      v196 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v177));
      v314 = v196;
      v315 = v186;
      v309[7] = CFSTR("Encoder Time Sample Data");
      v309[8] = CFSTR("Encoder Sample Index Data");
      v316 = v172;
      v309[9] = CFSTR("Timebase");
      v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", GTUSCSamplingStreamingManagerHelper::StreamEncoderDerivedCounterData(void)::timebaseInfo));
      v308[0] = v164;
      v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", dword_752014));
      v308[1] = v165;
      v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v308, 2));
      v317 = v166;
      v309[10] = CFSTR("Source Sample Marker");
      v167 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", qword_752048));
      v318 = v167;
      v309[11] = CFSTR("Derived Counters Info Data");
      v168 = *(void **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 48);
      if (!v168)
        v168 = &__NSDictionary0__struct;
      v319 = v168;
      v320 = v161;
      v309[12] = CFSTR("Perf Info");
      v309[13] = CFSTR("Fragment Counter");
      if (obj)
        v169 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "firstObject"));
      else
        v169 = &stru_7282A8;
      v321 = v169;
      v170 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v310, v309, 14));
      if (obj)

      (*(void (**)(void))(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 32) + 16))();
      if (v171)
        operator delete(v171);

      _Block_object_dispose(&v256, 8);
      if (v262)
      {
        v263 = v262;
        operator delete(v262);
      }
      _Block_object_dispose(&v265, 8);
      v256 = (void **)v271;
      std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v256);
      _Block_object_dispose(v272, 8);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v272[6]);
      _Block_object_dispose(&__p, 8);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v279[8]);
      _Block_object_dispose(&v282, 8);

      v77 = v189;
    }
  }

}

void sub_1D22D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,uint64_t a34,void *a35,_Unwind_Exception *exception_objecta,uint64_t a37,void *a38,uint64_t a39,void *a40,void *a41,uint64_t a42,void *a43,void *a44)
{
  void *v44;
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);

  _Block_object_dispose(&STACK[0x340], 8);
  v46 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v46;
    operator delete(v46);
  }
  _Block_object_dispose(&STACK[0x388], 8);
  STACK[0x340] = a14;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x340]);
  _Block_object_dispose(&STACK[0x3D0], 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a15);
  _Block_object_dispose(&STACK[0x428], 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a16);
  _Block_object_dispose(&STACK[0x480], 8);

  _Unwind_Resume(a1);
}

id DeepMutableCopy(NSDictionary *a1)
{
  NSDictionary *v1;
  NSDictionary *v2;
  id v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = ___ZL15DeepMutableCopyP12NSDictionary_block_invoke;
    v5[3] = &unk_725368;
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", -[NSDictionary count](v1, "count")));
    v6 = v3;
    -[NSDictionary enumerateKeysAndObjectsUsingBlock:](v2, "enumerateKeysAndObjectsUsingBlock:", v5);

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1D2A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper31StreamEncoderDerivedCounterDataEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSDictionary *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned __int8 v7;
  unsigned int v8;
  char **v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;

  v2 = *(_QWORD *)(a1 + 96);
  GTMTLReplayController_prePlayForProfiling(**(_QWORD **)v2);
  DisableComputeEncoderCoalescing(**(GTMTLReplayController ***)v2, 1);
  v3 = *(NSDictionary **)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112)
    && objc_msgSend(*(id *)(a1 + 40), "count")
    && *(_DWORD *)(a1 + 104) + 1 == *(_DWORD *)(a1 + 108);
  if (GTUSCSamplingStreamingManagerHelper::SetupSourceForDerivedCounters((id *)v2, v3, v4, 0, v5))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 16), "firstObject"));
    v7 = objc_msgSend(v6, "startSampling");

    if ((v7 & 1) != 0)
    {
      if (!*(_DWORD *)(*(_QWORD *)v2 + 72))
      {
        usleep(0x30D40u);
        GTUSCSamplingStreamingManagerHelper::ForceDrainAllSourceBuffers(*(GTUSCSamplingStreamingManagerHelper **)(v2 + 24));
      }
      GTUSCSamplingStreamingManagerHelper::ResetSourceForPostProcessing((id *)v2);
      v8 = *(_DWORD *)(a1 + 104);
      if (v8)
      {
        v9 = 0;
        v10 = 0;
        v11 = a1 + 80;
      }
      else
      {
        v9 = (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48);
        v11 = a1 + 72;
        v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      }
      GTUSCSamplingStreamingManagerHelper::ReplayForDerivedCounters(v2, (char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48) + 24 * v8), v9, 0, (_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 48), v10);
      v12 = objc_autoreleasePoolPush();
      v13 = GTUSCSamplingStreamingManagerHelper::DrainRawDerivedCounterData((id *)v2);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      if (v14)
        objc_msgSend(*(id *)(a1 + 48), "setArray:", v14);

      objc_autoreleasePoolPop(v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 16), "firstObject"));
      objc_msgSend(v15, "stopSampling");

      DisableComputeEncoderCoalescing(**(GTMTLReplayController ***)v2, 0);
      if (*(_DWORD *)(a1 + 104) + 1 == *(_DWORD *)(a1 + 108))
      {
        GTAGXPerfStateControl::DisableConsistentGPUPerfState((GTAGXPerfStateControl *)(v2 + 40));
        GTApplePMPPerfStateControl::DisableConsistentPerfState((GTApplePMPPerfStateControl *)(v2 + 64));
      }
    }
  }
}

void sub_1D2C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper31StreamEncoderDerivedCounterDataEv_block_invoke_2(uint64_t a1)
{
  id v2;
  id v3;

  v2 = GTUSCSamplingStreamingManagerHelper::PostProcessRawDerivedCounterData(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

void sub_1D2CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper31StreamEncoderDerivedCounterDataEv_block_invoke_3(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  id v4;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = GTSampleBufferManager::ResolveSampleBuffers((GTSampleBufferManager *)(v2 + 263));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "setData:", v4);
  v2[269] = 0;
  v2[267] = v2[266];

}

void sub_1D2D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL15DeepMutableCopyP12NSDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  NSDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;

  v13 = a2;
  v5 = a3;
  v7 = objc_opt_class(NSDictionary, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    v9 = DeepMutableCopy(v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v13);
  }
  else
  {
    v11 = objc_opt_class(NSArray, v8);
    if ((objc_opt_isKindOfClass(v5, v11) & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v13);
      goto LABEL_7;
    }
    v12 = DeepMutableCopy((NSArray *)v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v13);
  }

LABEL_7:
}

void sub_1D2E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id DeepMutableCopy(NSArray *a1)
{
  NSArray *v1;
  NSArray *v2;
  id v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = ___ZL15DeepMutableCopyP7NSArray_block_invoke;
    v5[3] = &unk_724908;
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", -[NSArray count](v1, "count")));
    v6 = v3;
    -[NSArray enumerateObjectsUsingBlock:](v2, "enumerateObjectsUsingBlock:", v5);

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1D2F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL15DeepMutableCopyP7NSArray_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char isKindOfClass;
  void *v11;
  uint64_t v12;
  NSDictionary *v13;

  v13 = a2;
  v4 = objc_opt_class(NSDictionary, v3);
  if ((objc_opt_isKindOfClass(v13, v4) & 1) != 0)
  {
    v6 = *(void **)(a1 + 32);
    v7 = DeepMutableCopy(v13);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v6, "addObject:", v8);
  }
  else
  {
    v9 = objc_opt_class(NSArray, v5);
    isKindOfClass = objc_opt_isKindOfClass(v13, v9);
    v11 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v13);
      goto LABEL_7;
    }
    v12 = DeepMutableCopy((NSArray *)v13);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_msgSend(v11, "addObject:", v8);
  }

LABEL_7:
}

void sub_1D2FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper17StreamGPUTimelineEv_block_invoke(uint64_t a1)
{
  GTUSCSamplingStreamingManagerHelper::GatherCommandBufferRestoreInfo(*(uint64_t ***)(a1 + 32));
}

void GTUSCSamplingStreamingManagerHelper::InitAPSStreaming(GTUSCSamplingStreamingManagerHelper *this, GTUSCSamplingStreamingManager *a2)
{
  GTUSCSamplingStreamingManagerHelper *v2;
  GTUSCSamplingStreamingManagerHelper *v3;
  NSDictionary *v4;
  id v5;
  id v6;
  void *v7;
  GTUSCSamplingStreamingManagerHelper *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  __CFString *v22;
  __CFString *v23;
  uint64_t v24;
  void *v25;
  GTUSCSamplingStreamingManagerHelper *v26;
  const __CFString *v27;
  __CFString *v28;

  if ((_DWORD)xmmword_7528B4 != 2)
  {
    GTUSCSamplingStreamingManagerHelper::Init(this, a2);
    GTUSCSamplingStreamingManagerHelper::SetupGPURawCounters(v3);
    GTAGXProfilingSupportHelper::Initialize((GTAGXProfilingSupportHelper *)qword_7527E8, v4);
  }
  GTUSCSamplingStreamingManagerHelper::CleanupForAPSStreaming(this);
  GTUSCSamplingStreamingManagerHelper::SetupGPURawCounters(v2);
  v5 = GTUSCSamplingStreamingManagerHelper::AllocUSCSamplingAddressBuffer((GTUSCSamplingStreamingManagerHelper *)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
  qword_7527B8 = (uint64_t)objc_msgSend((id)qword_7527D8, "mutableBytes");
  v6 = -[ProgramAddressTableCollector initForHarvestingBinaries]([ProgramAddressTableCollector alloc], "initForHarvestingBinaries");
  v7 = (void *)xmmword_7527C0;
  *(_QWORD *)&xmmword_7527C0 = v6;

  if ((_DWORD)qword_7528A8 != -1)
  {
    GTUSCSamplingStreamingManagerHelper::SetupBuffersForAPSSource(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", (int)qword_7528A8));
    if ((qword_752C98 & 2) != 0)
    {
      v11 = -[GTGPUAPSConfig initForMinimumInfoTimeline]([GTGPUAPSConfig alloc], "initForMinimumInfoTimeline");
    }
    else
    {
      if ((_DWORD)xmmword_7528B4 == 2)
        v10 = -[GTGPUAPSConfig initForTimeline]([GTGPUAPSConfig alloc], "initForTimeline");
      else
        v10 = -[GTGPUAPSConfig initForProfiling]([GTGPUAPSConfig alloc], "initForProfiling");
      v11 = v10;
      v12 = *(void **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 16);
      if ((_DWORD)xmmword_7528B4 == 2)
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("TimelineConfig")));
      else
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("apsProfilingConfig")));
      v14 = (void *)v13;
      if (v13)
        objc_msgSend(v11, "readConfig:", v13);

    }
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "grcOptions"));
    v16 = (void *)qword_752838;
    qword_752838 = v15;

    v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
    v18 = (void *)xmmword_752840;
    *(_QWORD *)&xmmword_752840 = v17;

    v19 = (void *)xmmword_752840;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "grcTrigger"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("KickAndStateTracing"), v20));
    objc_msgSend(v19, "addObject:", v21);

    if ((_DWORD)xmmword_7528B4 == 2)
      v22 = CFSTR("Timeline");
    else
      v22 = CFSTR("Profiling");
    v23 = v22;
    v24 = *(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 32);
    v27 = CFSTR("Streaming APS Profiling");
    v28 = v23;
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
    (*(void (**)(uint64_t, void *))(v24 + 16))(v24, v25);

    GTUSCSamplingStreamingManagerHelper::InitRDELimiterCounters(v26);
  }
}

void sub_1D32C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManagerHelper::CleanupForAPSStreaming(GTUSCSamplingStreamingManagerHelper *this)
{
  void **v1;
  void **v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;

  atomic_store(0, byte_752AF0);
  atomic_store(0, &byte_752AF0[1]);
  atomic_store(0, (unsigned __int8 *)&unk_752AF3);
  qword_7527B0 = 0;
  dword_75289C = 0;
  qword_7528A0 = 1;
  v2 = (void **)*((_QWORD *)&xmmword_752958 + 1);
  v1 = (void **)xmmword_752958;
  while (v2 != v1)
  {
    v2 -= 3;
    v17 = v2;
    std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v17);
  }
  *((_QWORD *)&xmmword_752958 + 1) = v1;
  v3 = qword_752940;
  v4 = (void **)xmmword_752948;
  while (v4 != (void **)v3)
  {
    v4 -= 3;
    v17 = v4;
    std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v17);
  }
  *(_QWORD *)&xmmword_752948 = v3;
  v6 = (void **)*((_QWORD *)&xmmword_752988 + 1);
  v5 = (void **)xmmword_752988;
  while (v6 != v5)
  {
    v6 -= 3;
    v17 = v6;
    std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v17);
  }
  *((_QWORD *)&xmmword_752988 + 1) = v5;
  v7 = qword_7529A0;
  v8 = (void **)xmmword_7529A8;
  while (v8 != (void **)v7)
  {
    v8 -= 3;
    v17 = v8;
    std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v17);
  }
  *(_QWORD *)&xmmword_7529A8 = v7;
  v10 = (void **)*((_QWORD *)&xmmword_7529B8 + 1);
  v9 = (void **)xmmword_7529B8;
  while (v10 != v9)
  {
    v10 -= 3;
    v17 = v10;
    std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v17);
  }
  *((_QWORD *)&xmmword_7529B8 + 1) = v9;
  v11 = *((_QWORD *)&xmmword_7529C8 + 1);
  for (i = qword_7529D8; i != v11; i -= 8)
  {
    v13 = *(void **)(i - 8);

  }
  qword_7529D8 = v11;
  v14 = xmmword_752C68;
  v15 = *((_QWORD *)&xmmword_752C58 + 1);
  while (v14 != v15)
  {
    v16 = *(void **)(v14 - 32);
    v14 -= 32;

  }
  *(_QWORD *)&xmmword_752C68 = v15;
}

void GTUSCSamplingStreamingManagerHelper::InitRDELimiterCounters(GTUSCSamplingStreamingManagerHelper *this)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t i;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t *j;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *m;
  void *v31;
  void *v32;
  unsigned int v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t n;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  unint64_t ii;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  void *jj;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  GTAGXProfilingSupportHelper *v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  unint64_t k;
  void *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  int v94;
  const __CFString *v95;
  void *v96;
  _BYTE v97[128];
  _BYTE v98[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "objectForKeyedSubscript:", CFSTR("profileCounters")));
  v77 = objc_msgSend(v1, "mutableCopy");

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "objectForKeyedSubscript:", CFSTR("profileCounters32")));
  v3 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v2));

  v4 = qword_752A80;
  v5 = xmmword_752A88;
  memset(v93, 0, sizeof(v93));
  v94 = 1065353216;
  v75 = (void *)v3;
  if (qword_752A80 != (_QWORD)xmmword_752A88)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v93, v4, v4);
      v4 += 24;
    }
    while (v4 != v5);
  }
  v6 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&xmmword_752A38 + 1) - xmmword_752A38) >> 3)));
  v7 = (void *)xmmword_752800;
  *(_QWORD *)&xmmword_752800 = v6;

  v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v77, "count")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(v77, "count")));
  v10 = *((_QWORD *)&xmmword_752A38 + 1);
  for (i = xmmword_752A38; i != v10; i += 24)
  {
    v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(uint64_t *)&v93[0], *((unint64_t *)&v93[0] + 1), i);
    v12 = *(char *)(i + 23);
    v13 = i;
    if (v11)
    {
      if (v12 < 0)
        v13 = *(_QWORD *)i;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v14, &off_738E60));
      objc_msgSend(v80, "addObject:", v15);
    }
    else
    {
      if (v12 < 0)
        v13 = *(_QWORD *)i;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v14, &off_738E88));
      objc_msgSend(v80, "addObject:", v15);
    }

    v16 = i;
    if (*(char *)(i + 23) < 0)
      v16 = *(_QWORD *)i;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
    objc_msgSend(v8, "addObject:", v17);

  }
  if ((_DWORD)xmmword_7528B4 == 1)
  {
    v19 = (uint64_t *)*((_QWORD *)&xmmword_752A68 + 1);
    for (j = (uint64_t *)xmmword_752A68; j != v19; j += 3)
    {
      v20 = j;
      if (*((char *)j + 23) < 0)
        v20 = (uint64_t *)*j;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v21, &off_738EB0));
      objc_msgSend(v80, "addObject:", v22);

      v23 = j;
      if (*((char *)j + 23) < 0)
        v23 = (uint64_t *)*j;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23));
      objc_msgSend(v8, "addObject:", v24);

    }
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&xmmword_752A38 + 1) - xmmword_752A38) >> 3)));
  for (k = 0; k < (unint64_t)objc_msgSend(*((id *)&xmmword_752038 + 1), "count"); ++k)
  {
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "availableCounters"));
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v27 = v26;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v89, v98, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v90;
      do
      {
        for (m = 0; m != v28; m = (char *)m + 1)
        {
          if (*(_QWORD *)v90 != v29)
            objc_enumerationMutation(v27);
          v31 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * (_QWORD)m);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "name"));
          v33 = objc_msgSend(v8, "containsObject:", v32);

          if (v33)
          {
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v31, "counterValueType")));
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "name"));
            objc_msgSend(v25, "setObject:forKeyedSubscript:", v34, v35);

          }
        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v89, v98, 16);
      }
      while (v28);
    }

  }
  v36 = (void *)qword_7527F8;
  qword_7527F8 = 0;

  v37 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(&off_7389A0, "count")));
  v38 = (void *)qword_7527F0;
  qword_7527F0 = v37;

  for (n = 0; n != 7; ++n)
  {
    v40 = (void *)qword_7527F0;
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_7389A0, "objectAtIndexedSubscript:", n));
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v41, 0));
    objc_msgSend(v40, "addObject:", v42);

  }
  v43 = GTUSCSamplingStreamingManagerHelper::SubDividedCounterDictionary(v80);
  v76 = (void *)objc_claimAutoreleasedReturnValue(v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "objectForKeyedSubscript:", CFSTR("passList")));
  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 0));

  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v80, "count")));
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v76, "count")));
  for (ii = 0; ii < (unint64_t)objc_msgSend(v82, "count"); ++ii)
  {
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "objectAtIndexedSubscript:", ii));
    if (objc_msgSend(v84, "count"))
    {
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v84, "count")));
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v48 = v84;
      v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v85, v97, 16);
      if (v49)
      {
        v50 = *(_QWORD *)v86;
        do
        {
          for (jj = 0; jj != v49; jj = (char *)jj + 1)
          {
            if (*(_QWORD *)v86 != v50)
              objc_enumerationMutation(v48);
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v85 + 1) + 8 * (_QWORD)jj), "name"));
            objc_msgSend(v47, "addObject:", v52);

          }
          v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v85, v97, 16);
        }
        while (v49);
      }

      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&xmmword_752038 + 1), "objectAtIndexedSubscript:", ii));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "name"));
      objc_msgSend(v79, "setObject:forKeyedSubscript:", v47, v54);

      objc_msgSend(v78, "addObjectsFromArray:", v47);
      if (ii == (int)qword_7528A8)
      {
        v56 = (void *)objc_opt_new(NSMutableArray, v55);
      }
      else
      {
        v58 = objc_msgSend((id)qword_7527F0, "copy");
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v58));

      }
      objc_msgSend(v56, "addObjectsFromArray:", v48);
      objc_msgSend((id)xmmword_752800, "addObject:", v56);

    }
    else
    {
      v57 = (void *)xmmword_752800;
      v47 = (void *)objc_opt_new(NSMutableArray, v46);
      objc_msgSend(v57, "addObject:", v47);
    }

  }
  v59 = v78;

  objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v59, CFSTR("limiter sample counters"));
  objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v25, CFSTR("Counter Info"));
  objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v79, CFSTR("Limiter Counter List Map"));
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", byte_752AC0));
  objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v60, CFSTR("Uarch Enabled"));

  if ((_DWORD)xmmword_7528B4 == 2)
  {
    v62 = GTAGXProfilingSupportHelper::RemappedCSV(v61);
    v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
    if (v63)
      objc_msgSend(*(id *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 40), "setObject:forKeyedSubscript:", v63, CFSTR("CSV"));

  }
  (*(void (**)(void))(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 32) + 16))();
  v64 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
  v65 = (void *)qword_752830;
  qword_752830 = v64;

  v66 = (void *)qword_752830;
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("KickBoundary"), 0));
  objc_msgSend(v66, "addObject:", v67);

  v68 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
  v69 = (void *)*((_QWORD *)&xmmword_752820 + 1);
  *((_QWORD *)&xmmword_752820 + 1) = v68;

  if ((qword_752C98 & 2) != 0)
    v70 = 1200;
  else
    v70 = 240;
  v71 = (void *)*((_QWORD *)&xmmword_752820 + 1);
  v95 = CFSTR("Period");
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v70));
  v96 = v72;
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v96, &v95, 1));
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("TimerNClock"), v73));
  objc_msgSend(v71, "addObject:", v74);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v93);
}

void sub_1D3ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a35);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;

  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a3;
  else
    v7 = *(uint64_t **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  if (!a2)
    return 0;
  v10 = v9;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v13 = v9;
    if (v9 >= a2)
      v13 = v9 % a2;
  }
  else
  {
    v13 = (a2 - 1) & v9;
  }
  v14 = *(unsigned __int8 ***)(a1 + 8 * v13);
  if (!v14)
    return 0;
  for (i = *v14; i; i = *(unsigned __int8 **)i)
  {
    v16 = *((_QWORD *)i + 1);
    if (v16 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a3))
        return i;
    }
    else
    {
      if (v12 > 1)
      {
        if (v16 >= a2)
          v16 %= a2;
      }
      else
      {
        v16 &= a2 - 1;
      }
      if (v16 != v13)
        return 0;
    }
  }
  return i;
}

BOOL GTUSCSamplingStreamingManagerHelper::StreamAPS(GTUSCSamplingStreamingManagerHelper *this)
{
  unsigned __int8 v1;
  _BOOL8 v2;
  uint64_t v3;
  uint64_t i;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  GTUSCSamplingStreamingManagerHelper *v16;
  unsigned __int8 v17;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  _QWORD *v25;
  _QWORD *v26;
  pthread_t *v27;
  sched_param *v28;
  pthread_t *v29;
  sched_param *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[4];
  id v40;
  sched_param *v41;
  sched_param *v42;
  pthread_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 *v48;
  _QWORD v49[5];
  id v50;
  _QWORD v51[5];
  id v52;
  pthread_t v53[8];
  _QWORD v54[4];
  _QWORD v55[4];
  sched_param v56;
  sched_param *v57;
  uint64_t v58;
  __n128 (*v59)(__n128 *, __n128 *);
  void (*v60)(uint64_t);
  void *v61;
  void *__p;
  void *v63;
  uint64_t v64;
  pthread_t v65[10];
  int v66;
  sched_param v67;
  sched_param *v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, _QWORD *);
  uint64_t (*v71)(uint64_t);
  _BYTE v72[32];
  uint64_t v73;
  int v74;

  v1 = atomic_load(byte_752AF4);
  v2 = 1;
  if ((v1 & 1) == 0 && (_DWORD)qword_7528A8 != -1)
  {
    v20 = *(_QWORD *)GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "defaultCommandQueue"));
    objc_msgSend(v22, "finish");
    GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait((uint64_t)&GTUSCSamplingStreamingManagerHelper::Instance(void)::instance);
    v3 = -1431655765 * ((*((_QWORD *)&xmmword_752958 + 1) - (_QWORD)xmmword_752958) >> 3);
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = (*(_DWORD *)(xmmword_752958 + 24 * i + 8) - *(_DWORD *)(xmmword_752958 + 24 * i)) / 120;
        if (i)
        {
          if (v5)
            goto LABEL_11;
        }
        else
        {
          v6 = v5 / qword_752CB8;
          if (v5 / qword_752CB8 * (_DWORD)qword_752CB8 != v5)
            ++v6;
          HIDWORD(qword_752CB8) = v6 - 1;
          dword_752CC0 = v5 - (v6 - 1) * qword_752CB8;
          if (v5)
LABEL_11:
            operator new();
        }
      }
    }
    usleep(0x3E8u);
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v20 + 8), "defaultDevice"));
    v9 = (void *)v7;
    if (v7)
    {
      v21 = (void *)v7;
      v67 = 0;
      v68 = &v67;
      v69 = 0x5812000000;
      v70 = __Block_byref_object_copy__222;
      v71 = __Block_byref_object_dispose__223;
      memset(v72, 0, sizeof(v72));
      v73 = 0;
      v74 = 1065353216;
      v65[0] = 0;
      v65[1] = (pthread_t)v65;
      v65[2] = (pthread_t)0x5812000000;
      v65[3] = (pthread_t)__Block_byref_object_copy__298;
      v65[4] = (pthread_t)__Block_byref_object_dispose__299;
      memset(&v65[5], 0, 40);
      v66 = 1065353216;
      v56 = 0;
      v57 = &v56;
      v58 = 0x4812000000;
      v59 = __Block_byref_object_copy__300;
      v60 = __Block_byref_object_dispose__301;
      v61 = &unk_4C2897;
      __p = 0;
      v64 = 0;
      v63 = 0;
      v55[0] = 0;
      v55[1] = v55;
      v55[2] = 0x2020000000;
      v55[3] = 0;
      v54[0] = 0;
      v54[1] = v54;
      v54[2] = 0x2020000000;
      v54[3] = 0;
      v53[0] = 0;
      v53[1] = (pthread_t)v53;
      v53[2] = (pthread_t)0x4012000000;
      v53[3] = (pthread_t)__Block_byref_object_copy__484;
      v53[4] = (pthread_t)__Block_byref_object_dispose__485;
      v53[5] = (pthread_t)&unk_4C2897;
      v51[0] = 0;
      v51[1] = v51;
      v51[2] = 0x3032000000;
      v51[3] = __Block_byref_object_copy_;
      v51[4] = __Block_byref_object_dispose_;
      v52 = (id)objc_opt_new(GTMTLFXTracingDelegate, v8);
      v10 = objc_autoreleasePoolPush();
      v12 = (void *)objc_opt_new(NSMutableData, v11);
      objc_autoreleasePoolPop(v10);
      v49[0] = 0;
      v49[1] = v49;
      v49[2] = 0x3032000000;
      v49[3] = __Block_byref_object_copy_;
      v49[4] = __Block_byref_object_dispose_;
      v50 = (id)objc_opt_new(NSMutableDictionary, v13);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = ___ZN35GTUSCSamplingStreamingManagerHelper9StreamAPSEv_block_invoke;
      v39[3] = &unk_724890;
      v41 = &v67;
      v42 = &v56;
      v48 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
      v43 = v65;
      v19 = v12;
      v40 = v19;
      v44 = v51;
      v45 = v49;
      v46 = v54;
      v47 = v55;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v39));
      v35 = 0;
      v36 = &v35;
      v37 = 0x2020000000;
      v38 = 0;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = ___ZN35GTUSCSamplingStreamingManagerHelper9StreamAPSEv_block_invoke_2;
      v23[3] = &unk_7248B8;
      v25 = v55;
      v26 = v54;
      v34 = &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance;
      v27 = v53;
      v9 = v21;
      v24 = v21;
      v28 = &v67;
      v29 = v65;
      v30 = &v56;
      v31 = v51;
      v32 = v49;
      v33 = &v35;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v23));
      objc_msgSend(v15, "setQueuePriority:", -8);
      objc_msgSend(**(id **)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8), "addOperation:", v15);
      objc_msgSend(v14, "addDependency:", v15);
      objc_msgSend(*(id *)(*(_QWORD *)(GTUSCSamplingStreamingManagerHelper::Instance(void)::instance + 8) + 8), "addOperation:", v14);
      v16 = (GTUSCSamplingStreamingManagerHelper *)objc_msgSend(v14, "waitUntilFinished");
      atomic_store(1u, (unsigned __int8 *)&unk_752AF3);
      GTUSCSamplingStreamingManagerHelper::SignalAndWaitForAllThreadsToTerminate(v16);
      v17 = atomic_load(byte_752AF4);
      v2 = (v17 & 1) != 0 || *((_BYTE *)v36 + 24) != 0;

      _Block_object_dispose(&v35, 8);
      _Block_object_dispose(v49, 8);

      _Block_object_dispose(v51, 8);
      _Block_object_dispose(v53, 8);
      _Block_object_dispose(v54, 8);
      _Block_object_dispose(v55, 8);
      _Block_object_dispose(&v56, 8);
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      _Block_object_dispose(v65, 8);
      std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table((uint64_t)&v65[6]);
      _Block_object_dispose(&v67, 8);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v72[8]);
    }
    else
    {
      v2 = 1;
    }

  }
  return v2;
}

void sub_1D49D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::thread a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;
  void *v71;
  uint64_t v72;
  void *v74;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a47, 8);

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  v74 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v74;
    operator delete(v74);
  }
  _Block_object_dispose(&STACK[0x258], 8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table(a10);
  _Block_object_dispose((const void *)(v72 - 192), 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a11);

  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StreamAPS(void)::$_0>>(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned __int8 v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned __int8 v14;
  NSObject *v15;
  dispatch_time_t v16;
  unsigned __int8 v17;
  int p;
  unint64_t v19;
  std::__thread_struct_imp *v20;
  unsigned int v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 v26;
  int v27;
  unsigned int v28;
  DynamicBuffer *v29;
  const unsigned __int8 *v30;
  const unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v47;
  intptr_t v48;
  int v49;
  void *v50;
  std::__thread_struct **v51;
  _DWORD v52[3];
  const unsigned __int8 *v53;

  v51 = a1;
  v1 = std::__thread_local_data();
  v2 = *v51;
  *v51 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v51[1];
  if (SLODWORD(v3[272].__p_) >= 1)
  {
    v4 = *((_DWORD *)v51 + 4);
    v5 = *((unsigned int *)v51 + 5);
    if (v4)
    {
      GTUSCSamplingStreamingManagerHelper::PollAndDrainSourceRingBuffer((GTUSCSamplingStreamingManagerHelper *)v51[1], v4, *((_DWORD *)v51 + 5));
      goto LABEL_45;
    }
    v6 = objc_claimAutoreleasedReturnValue(-[std::__thread_struct_imp objectAtIndexedSubscript:](v3[3].__p_, "objectAtIndexedSubscript:"));
    v7 = (void *)v6;
    v8 = (unsigned int *)&v3[344];
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 3);
    if ((v10 & 1) == 0)
    {
      v11 = v5 + 1;
      v12 = (unsigned int *)&v3[342].__p_ + 1;
      v13 = (unsigned int *)&v3[343];
      v50 = (void *)v6;
      v47 = v5;
      v49 = v5 + 1;
      while (1)
      {
        v14 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 4);
        if ((v14 & 1) != 0)
          goto LABEL_41;
        v15 = *(NSObject **)(*(_QWORD *)v3[303].__p_ + 8 * v5);
        v16 = dispatch_time(0, 500000);
        v48 = dispatch_semaphore_wait(v15, v16);
        v17 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 1);
        if ((v17 & 1) != 0)
        {
          p = (int)v3[402].__p_;
          v19 = (p * v5);
          v20 = v3[391].__p_;
          v21 = p * v11;
          if (v21 >= ((unint64_t)(v3[392].__p_ - v20) >> 5))
            v21 = (unint64_t)(v3[392].__p_ - v20) >> 5;
          if (v19 < v21)
          {
            while (1)
            {
              if (objc_msgSend(v7, "isEnabled", v47))
              {
                v53 = 0;
                memset(v52, 0, sizeof(v52));
                v22 = (char *)v20 + 32 * v19;
                v24 = *((_DWORD *)v22 + 7);
                v23 = (unsigned int *)(v22 + 28);
                if ((objc_msgSend(v7, "ringBufferInfoAtIndex:base:size:dataOffset:dataSize:", v24, &v53, &v52[2], &v52[1], v52) & 1) != 0)
                {
                  v25 = v52[0];
                  if (v52[0] >> 13)
                    break;
                  v26 = atomic_load((unsigned __int8 *)&v3[345]);
                  if ((v26 & 1) != 0)
                  {
                    v25 = v52[0];
                    if (v52[0])
                      break;
                  }
                }
              }
LABEL_27:
              ++v19;
              v20 = v3[391].__p_;
              v35 = (unint64_t)(v3[392].__p_ - v20) >> 5;
              v36 = LODWORD(v3[402].__p_) * v11;
              if (v36 >= v35)
                v35 = v35;
              else
                v35 = v36;
              if (v19 >= v35)
                goto LABEL_31;
            }
            if (((*(_QWORD *)((char *)v3[399].__p_ + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
            {
              v27 = v52[2];
              v28 = v25 + v52[1];
              v29 = (std::__thread_struct_imp *)((char *)v3[297].__p_ + 48 * v19);
              v30 = v53;
              v31 = &v53[v52[1]];
              if (v25 + v52[1] <= v52[2])
                goto LABEL_22;
              v32 = (uint64_t)v3[297].__p_ + 48 * v19;
              DynamicBuffer::AddBuffer2(v29, v31, (const unsigned __int8 *)(v52[2] - v52[1]));
              v25 = v28 - v27;
              if (v28 != v27)
              {
                v31 = v30;
                v29 = (DynamicBuffer *)v32;
LABEL_22:
                DynamicBuffer::AddBuffer2(v29, v31, (const unsigned __int8 *)v25);
              }
            }
            v7 = v50;
            v11 = v49;
            if (objc_msgSend(v50, "drainRingBufferAtIndex:dataSize:", *v23, v52[0]) || !v52[0])
            {
              do
                v33 = __ldaxr(v12);
              while (__stlxr(v33 + 1, v12));
              do
                v34 = __ldaxr(v13);
              while (__stlxr(v34 + 1, v13));
            }
            goto LABEL_27;
          }
LABEL_31:
          v5 = v47;
          if (!v48)
            break;
          v37 = atomic_load((unsigned __int8 *)&v3[345]);
          if ((v37 & 1) != 0)
            break;
        }
        v38 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 3);
        if ((v38 & 1) != 0)
          goto LABEL_41;
      }
      v39 = (unsigned int *)&v3[343].__p_ + 1;
      v40 = 402;
      if (HIDWORD(v3[402].__p_) == (_DWORD)v47)
        v40 = 403;
      v41 = (int)v3[v40].__p_;
      do
        v42 = __ldaxr(v39);
      while (__stlxr(v42 + v41, v39));
      v43 = atomic_load((unsigned int *)&v3[343].__p_ + 1);
      if (v43 == HIDWORD(v3[270].__p_))
        std::condition_variable::notify_all((std::condition_variable *)&v3[346]);
    }
    do
LABEL_41:
      v44 = __ldaxr(v8);
    while (__stlxr(v44 - 1, v8));
    if (!atomic_load(v8))
      std::condition_variable::notify_all((std::condition_variable *)&v3[374]);

  }
LABEL_45:
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100](&v51);
  return 0;
}

void sub_1D4EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  va_list va;

  va_start(va, a5);

  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100]((std::__thread_struct ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StreamAPS(void)::$_1>>(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct **v4;

  v4 = a1;
  v1 = std::__thread_local_data();
  v2 = *v4;
  *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  GTUSCSamplingStreamingManagerHelper::PostProcessRawData((GTUSCSamplingStreamingManagerHelper *)v4[1], *((_DWORD *)v4 + 4), *((_DWORD *)v4 + 5));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100](&v4);
  return 0;
}

void sub_1D4F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StartBackgroundProcessingThreads(void)::$_0>>::~unique_ptr[abi:nn180100]((std::__thread_struct ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::StreamAPS(void)::$_2>>(std::__thread_struct **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  std::__thread_struct *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  NSObject *p;
  dispatch_time_t v7;
  std::__thread_struct_imp *v8;
  std::__thread_struct_imp *v9;
  unint64_t v10;
  char *v11;
  FILE *v12;
  unsigned int v13;
  std::__thread_struct_imp *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  intptr_t v23;
  std::__thread_struct **v24;

  v24 = a1;
  v1 = std::__thread_local_data();
  v2 = *v24;
  *v24 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v24[1];
  do
  {
    v4 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 3);
    if ((v4 & 1) != 0)
      break;
    v5 = atomic_load((unsigned __int8 *)&v3[345].__p_ + 4);
    if ((v5 & 1) != 0)
      break;
    p = v3[313].__p_;
    v7 = dispatch_time(0, 250000);
    v23 = dispatch_semaphore_wait(p, v7);
    v8 = v3[392].__p_;
    v9 = v3[391].__p_;
    if (v8 != v9)
    {
      v10 = 0;
      do
      {
        v11 = (char *)v9 + 32 * v10;
        v12 = (FILE *)*((_QWORD *)v11 + 1);
        if (v12)
        {
          v13 = *((_DWORD *)v11 + 7);
          v14 = v3[297].__p_;
          v15 = (char *)v14 + 48 * v13;
          os_unfair_lock_lock((os_unfair_lock_t)v15 + 4);
          if (v23)
            v16 = *((_QWORD *)v15 + 1);
          else
            v16 = 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(*((_QWORD *)v14 + 6 * v13 + 4) - *((_QWORD *)v14 + 6 * v13 + 3)) >> 3);
          os_unfair_lock_unlock((os_unfair_lock_t)v15 + 4);
          v17 = *(_QWORD *)v15;
          if (v16 > *(_QWORD *)v15 && (_DWORD)v16 - *(_QWORD *)v15 != 0)
          {
            v19 = (_QWORD *)((char *)v14 + 48 * v13 + 24);
            do
            {
              v20 = *v19 + 24 * v17;
              v21 = fileno(v12);
              write(v21, *(const void **)v20, *(_QWORD *)(v20 + 8));
              v17 = *(_QWORD *)v15 + 1;
              *(_QWORD *)v15 = v17;
              if (*(_QWORD *)v20)
              {
                free(*(void **)v20);
                *(_QWORD *)v20 = 0;
                *(_QWORD *)(v20 + 8) = 0;
                *(_QWORD *)(v20 + 16) = 0;
                v17 = *(_QWORD *)v15;
              }
            }
            while (v17 < v16);
            if (!v23)
            {
              *((_QWORD *)v14 + 6 * v13 + 4) = *v19;
              *(_QWORD *)v15 = 0;
              *((_QWORD *)v15 + 1) = 0;
            }
          }
          v8 = v3[392].__p_;
          v9 = v3[391].__p_;
        }
        ++v10;
      }
      while (v10 < (v8 - v9) >> 5);
    }
  }
  while (v23);
  dispatch_semaphore_signal((dispatch_semaphore_t)v3[314].__p_);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(void)::$_0>>::~unique_ptr[abi:nn180100](&v24);
  return 0;
}

void sub_1D5128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,GTUSCSamplingStreamingManagerHelper::InitForPreSamplingWait(void)::$_0>>::~unique_ptr[abi:nn180100]((std::__thread_struct ***)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__484(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void ___ZN35GTUSCSamplingStreamingManagerHelper9StreamAPSEv_block_invoke(_QWORD *a1)
{
  unsigned __int8 v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t *i;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t **j;
  void *v36;
  unsigned int *v37;
  unsigned int *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  int v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  _QWORD *v62;
  void *v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  unsigned int v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  mach_timebase_info info;
  id v105;
  id v106;
  id v107;
  id v108;
  _QWORD v109[2];
  _QWORD v110[23];
  _QWORD v111[23];
  _QWORD v112[2];
  _QWORD v113[2];
  _QWORD v114[4];
  _QWORD v115[2];

  v1 = atomic_load((unsigned __int8 *)(a1[12] + 2764));
  if ((v1 & 1) != 0)
    return;
  v98 = a1[12];
  v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 72)));
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 72)));
  v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 72)));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(unint64_t **)(v3 + 56);
  v6 = 126 - 2 * __clz((uint64_t)((uint64_t)v5 - v4) >> 4);
  if (v5 == (unint64_t *)v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>(v4, v5, v7, 1);
  v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 56) - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48)) >> 4));
  v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 56) - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48)));
  objc_msgSend(v96, "appendBytes:length:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 56) - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48));
  v8 = *(_QWORD *)(a1[6] + 8);
  v9 = *(_QWORD *)(v8 + 48);
  v10 = *(unint64_t **)(v8 + 56);
  v11 = 126 - 2 * __clz((uint64_t)((uint64_t)v10 - v9) >> 4);
  if (v10 == (unint64_t *)v9)
    v12 = 0;
  else
    v12 = v11;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,unsigned long long> *,false>(v9, v10, v12, 1);
  v13 = *(_QWORD *)(a1[6] + 8);
  v14 = *(_QWORD *)(v13 + 48);
  v15 = *(_QWORD *)(v13 + 56);
  if (v14 == v15)
    v16 = 0;
  else
    v16 = *(_QWORD *)(v14 + 8);
  if ((unint64_t)(v15 - v14) >= 0x11)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 < *(_QWORD *)(v14 + v17 + 16))
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v16));
        v115[0] = v19;
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48) + v17 + 16) - 1));
        v115[1] = v20;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v115, 2));
        objc_msgSend(v99, "addObject:", v21);

        v13 = *(_QWORD *)(a1[6] + 8);
        v14 = *(_QWORD *)(v13 + 48);
      }
      if (v16 <= *(_QWORD *)(v14 + v17 + 24))
        v16 = *(_QWORD *)(v14 + v17 + 24);
      ++v18;
      v17 += 16;
    }
    while (v18 < (*(_QWORD *)(v13 + 56) - v14) >> 4);
  }
  for (i = *(uint64_t **)(*(_QWORD *)(a1[5] + 8) + 64); i; i = (uint64_t *)*i)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 6)));
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 4)));
    objc_msgSend(v103, "setObject:forKeyedSubscript:", v23, v24);

    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 7)));
    v114[0] = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 8)));
    v114[1] = v26;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 9)));
    v114[2] = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", i[5]));
    v114[3] = v28;
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v114, 4));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 4)));
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v29, v30);

    if (*((_DWORD *)i + 12))
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
      v113[0] = v31;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 13)));
      v113[1] = v32;
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v113, 2));
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)i + 4)));
      objc_msgSend(v100, "setObject:forKeyedSubscript:", v33, v34);

    }
  }
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 72)));
  for (j = *(uint64_t ***)(*(_QWORD *)(a1[7] + 8) + 64); j; j = (uint64_t **)*j)
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", ((char *)j[4] - (char *)j[3]) >> 4));
    v38 = (unsigned int *)j[3];
    v37 = (unsigned int *)j[4];
    while (v38 != v37)
    {
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v38));
      v112[0] = v39;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v38 + 1)));
      v112[1] = v40;
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v112, 2));
      objc_msgSend(v36, "addObject:", v41);

      v38 += 4;
    }
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)j + 4)));
    objc_msgSend(v101, "setObject:forKeyedSubscript:", v36, v42);

  }
  v108 = 0;
  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v103, 1, &v108));
  v43 = v108;
  v107 = v43;
  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v102, 1, &v107));
  v44 = v107;

  v106 = v44;
  v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v100, 1, &v106));
  v45 = v106;

  v105 = v45;
  v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v101, 1, &v105));
  v86 = v105;

  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v98 + 1944), "mappings"));
  if (v46)
    v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v98 + 1944), "mappings"));
  else
    v94 = &__NSArray0__struct;

  v47 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v98 + 1944), "binaries"));
  if (v47)
    v49 = (void *)v47;
  else
    v49 = &__NSDictionary0__struct;
  v95 = v49;
  v50 = *(_DWORD *)(v98 + 2188);
  if (v50)
  {
    if (v50 == 1)
    {
      v87 = 0;
      goto LABEL_39;
    }
    v51 = 1;
  }
  else
  {
    v51 = *(_BYTE *)(v98 + 3184) & 1;
  }
  v87 = v51;
LABEL_39:
  v97 = (void *)objc_opt_new(NSMutableDictionary, v48);
  objc_msgSend(v97, "setObject:forKeyedSubscript:", &off_739CD0, CFSTR("version"));
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v98 + 3160)));
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v52, CFSTR("fractionOfCores"));

  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v98 + 3168)));
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v53, CFSTR("thresholdInSeconds"));

  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (*(_QWORD *)(v98 + 3184) >> 1) & 1));
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v54, CFSTR("usingMinimumTracingMode"));

  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v98 + 3176)));
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v55, CFSTR("drawCountThreshold"));

  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", *(_QWORD *)(v98 + 3200)));
  v57 = *(_QWORD **)(v98 + 3192);
  v58 = *(_QWORD *)(v98 + 3200);
  v59 = v58 & 0x3F;
  if (v58 > 0x3F || (v58 & 0x3F) != 0)
  {
    v60 = 0;
    v61 = 0;
    v62 = &v57[v58 >> 6];
    do
    {
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*v57 >> v61) & 1));
      objc_msgSend(v56, "addObject:", v63);

      v57 += v60 == 63;
      if (v60 == 63)
        v61 = 0;
      else
        ++v61;
      v60 = v61;
    }
    while (v57 != v62 || v59 != v61);
  }
  v64 = objc_msgSend(v56, "copy");
  objc_msgSend(v97, "setObject:forKeyedSubscript:", v64, CFSTR("usedCoreMasks"));

  info = 0;
  mach_timebase_info(&info);
  v65 = *(void **)(v98 + 2088);
  if (!v65)
    v65 = &__NSDictionary0__struct;
  v89 = v65;
  v110[0] = CFSTR("Program Address Mappings");
  v110[1] = CFSTR("TraceId to BatchId");
  v111[0] = v94;
  v111[1] = v93;
  v110[2] = CFSTR("Source Sample Marker");
  v66 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v98 + 32)));
  v67 = a1[4];
  v111[2] = v66;
  v111[3] = v67;
  v110[3] = CFSTR("Frame Encoder Time Data");
  v110[4] = CFSTR("TraceId to SampleIndex");
  v111[4] = v92;
  v111[5] = v91;
  v110[5] = CFSTR("TraceId to Tile Info");
  v110[6] = CFSTR("MTLFX TraceIds");
  v84 = (void *)v66;
  v68 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "mtlfxTracingInfo"));
  v85 = (void *)v68;
  if (v68)
    v69 = (void *)v68;
  else
    v69 = &__NSDictionary0__struct;
  v111[6] = v69;
  v110[7] = CFSTR("Frame Consistent Perf Info");
  v111[7] = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40);
  v111[8] = v99;
  v110[8] = CFSTR("Restore Timestamps");
  v110[9] = CFSTR("Command Buffer Timestamps");
  v111[9] = v96;
  v111[10] = v90;
  v110[10] = CFSTR("TraceId to Coalesced BatchId");
  v110[11] = CFSTR("Configuration Variables");
  v111[11] = *(_QWORD *)(v98 + 1984);
  v110[12] = CFSTR("useOverlap");
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v87));
  v111[12] = v83;
  v111[13] = v95;
  v110[13] = CFSTR("Binaries");
  v110[14] = CFSTR("Streaming Counters");
  v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(v98 + 2188) == 1));
  v111[14] = v88;
  v110[15] = CFSTR("Kick State Trigger Options");
  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v98 + 2072), "firstObject"));
  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "options"));
  if (v70)
  {
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v98 + 2072), "firstObject"));
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "options"));
  }
  else
  {
    v71 = &__NSDictionary0__struct;
  }
  v72 = *(void **)(v98 + 2064);
  if (!v72)
    v72 = &__NSDictionary0__struct;
  v81 = v71;
  v111[15] = v71;
  v111[16] = v72;
  v110[16] = CFSTR("APS Options");
  v110[17] = CFSTR("Continuous Time");
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 24)));
  v111[17] = v73;
  v110[18] = CFSTR("Absolute Time");
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(a1[11] + 8) + 24)));
  v111[18] = v74;
  v110[19] = CFSTR("Timebase");
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", info.numer));
  v109[0] = v75;
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", info.denom));
  v109[1] = v76;
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v109, 2));
  v111[19] = v77;
  v111[20] = v97;
  v110[20] = CFSTR("apsProfilingConfig");
  v110[21] = CFSTR("Perf Info");
  v111[21] = v89;
  v110[22] = CFSTR("ReplayerGPUTime");
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v98 + 3152)));
  v111[22] = v78;
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v111, v110, 23));

  if (v70)
  {

  }
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)v98 + 32) + 16))();

}

void sub_1D5D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper9StreamAPSEv_block_invoke_2(uint64_t a1)
{
  GTMTLReplayController ***v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  int v4;
  _BOOL8 v5;
  GTMTLReplayController *v6;
  GTMTLReplayController *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  GTMTLReplayController **v12;
  id v13;
  uint64_t v14;
  GTMTLReplayController **v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  unsigned int v20;
  double v21;
  double v22;
  id v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  unsigned int i;
  uint64_t v29;
  void *v30;
  BOOL v31;
  std::unique_lock<std::mutex>::mutex_type *v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  int v36;
  const __CFString *v37;
  const __CFString *v38;
  void *v39;
  unsigned int v40;
  void *v41;
  unsigned int v42;
  unint64_t v43;
  int64x2_t *v44;
  uint64_t v45;
  unint64_t v46;
  GTMTLReplayController **v47;
  GTMTLReplayController **v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  int64x2_t v59;
  char *v60;
  char *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  FILE *v66;
  void *v67;
  FILE *v68;
  int v69;
  id v70;
  const char *v71;
  const char *v72;
  id v73;
  uint64_t v74;
  GTMTLReplayController *v75;
  void *v76;
  _QWORD *v77;
  uint64_t *v78;
  void **v79;
  void *v80;
  unsigned int *v81;
  unsigned int v82;
  _UNKNOWN **v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  void *v89;
  id *v90;
  GTMTLReplayController **v91;
  BOOL v92;
  uint64_t v93;
  FILE *v94;
  FILE *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  GTMTLReplayController **v102;
  GTMTLReplayController **v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  void *v106;
  GTMTLReplayController *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  __CFString *v113;
  void *v114;
  id v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  id v120;
  void *v122;
  _QWORD v123[5];
  std::unique_lock<std::mutex> __lk;
  const __CFString *v125;
  const __CFString *v126;
  const __CFString *v127;
  const __CFString *v128;
  const __CFString *v129;
  const __CFString *v130;
  const __CFString *v131;
  GTMTLReplayController *v132;
  GTMTLReplayController *v133;
  void *v134;
  void *v135;
  void *v136;

  v1 = *(GTMTLReplayController ****)(a1 + 112);
  v2 = atomic_load((unsigned __int8 *)v1 + 2763);
  if ((v2 & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)v1 + 2764);
    if ((v3 & 1) == 0)
    {
      atomic_store(0, (unsigned __int8 *)v1 + 2760);
      if (*((_DWORD *)v1 + 544) != -1)
      {
        v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[2], "firstObject"));
        v4 = *((_DWORD *)v1 + 547);
        v5 = v4 == 1 || (v4 | (_BYTE)v1[398] & 1) == 0;
        if (GTAGXPerfStateControl::IsGPUPerformanceStateInduced((GTAGXPerfStateControl *)(v1 + 5)))
        {
          v127 = CFSTR("DisableOverlap");
          v6 = (GTMTLReplayController *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
          v132 = v6;
          v7 = (GTMTLReplayController *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v132, &v127, 1));
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[2], "firstObject"));
          objc_msgSend(v8, "setOptions:", v7);
        }
        else
        {
          v9 = *((unsigned int *)*v1 + 18);
          if ((_DWORD)v9)
          {
            GTAGXPerfStateControl::EnableConsistentGPUPerfState((uint64_t)(v1 + 5), v9);
            v10 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 8), (*((_DWORD *)*v1 + 18) - 1));
            v11 = objc_claimAutoreleasedReturnValue(v10);
            v12 = v1[261];
            v1[261] = (GTMTLReplayController **)v11;

            v127 = CFSTR("DisableOverlap");
            v6 = (GTMTLReplayController *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
            v132 = v6;
            v7 = (GTMTLReplayController *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v132, &v127, 1));
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[2], "firstObject"));
            objc_msgSend(v8, "setOptions:", v7);
          }
          else
          {
            v13 = GTApplePMPPerfStateControl::EnableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 8), 1);
            v14 = objc_claimAutoreleasedReturnValue(v13);
            v15 = v1[261];
            v1[261] = (GTMTLReplayController **)v14;

            v127 = CFSTR("DisableOverlap");
            v6 = (GTMTLReplayController *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5));
            v132 = v6;
            v128 = CFSTR("LockGPUPerfState");
            v7 = (GTMTLReplayController *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)*v1 + 17)));
            v133 = v7;
            v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v132, &v127, 2));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[2], "firstObject"));
            objc_msgSend(v16, "setOptions:", v8);

          }
        }

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[3], "objectAtIndexedSubscript:", *((int *)v1 + 544)));
        objc_msgSend(v17, "setOptions:", v1[258]);
        objc_msgSend(v17, "requestTriggers:firstErrorIndex:", v1[259], 0);
        __lk.__m_ = 0;
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[251], "objectAtIndexedSubscript:", *((int *)v1 + 544)));
        v19 = objc_msgSend(v17, "requestCounters:firstErrorIndex:", v18, &__lk);

        if ((v19 & 1) != 0)
        {
          v20 = objc_msgSend(v17, "setEnabled:", 1);

          if (v20)
          {
            v21 = *((double *)v1 + 394) + *((double *)v1 + 394);
            if (v21 <= 1.0)
              v22 = 10240.0;
            else
              v22 = v21 * 10240.0;
            v23 = objc_msgSend(v1[3], "count");
            if (v23)
            {
              v24 = 0;
              v25 = 1;
              do
              {
                v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[251], "objectAtIndexedSubscript:", v24));
                objc_msgSend(v26, "count");

                v24 = v25;
              }
              while ((unint64_t)v23 > v25++);
            }
            for (i = 0; ; i = v29 + 1)
            {
              v29 = i;
              if ((unint64_t)objc_msgSend(v1[3], "count") <= i)
                break;
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[251], "objectAtIndexedSubscript:", i));
              if (objc_msgSend(v30, "count"))
              {
                v31 = i == *((_DWORD *)v1 + 544);

                if (!v31)
                {
                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[3], "objectAtIndexedSubscript:", v29));
                  v126 = CFSTR("RingBufferSizeInKB");
                  v32 = (std::unique_lock<std::mutex>::mutex_type *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", (unint64_t)v22));
                  __lk.__m_ = v32;
                  v33 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &__lk, &v126, 1));
                  objc_msgSend(v17, "setOptions:", v33);

                  objc_msgSend(v17, "requestTriggers:firstErrorIndex:", v1[256], 0);
                  v125 = 0;
                  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[251], "objectAtIndexedSubscript:", v29));
                  LOBYTE(v33) = objc_msgSend(v17, "requestCounters:firstErrorIndex:", v34, &v125);

                  if ((v33 & 1) == 0)
                    goto LABEL_29;
                  v35 = objc_msgSend(v17, "setEnabled:", 1);

                  if (!v35)
                    break;
                }
              }
              else
              {

              }
            }
          }
        }
        else
        {
LABEL_29:

        }
      }
      v36 = *((_DWORD *)v1 + 547);
      v37 = CFSTR("T");
      if (!v36)
        v37 = CFSTR("P");
      if (v36 == 1)
        v38 = CFSTR("C");
      else
        v38 = v37;
      v120 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/tmp/com.apple.gputools.profiling"), "stringByAppendingPathComponent:", v38));
      if (*((_DWORD *)v1 + 544) != -1)
      {
        v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
        objc_msgSend(v117, "removeItemAtPath:error:", v120, 0);
        objc_msgSend(v117, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v120, 1, 0, 0);
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[3], "objectAtIndexedSubscript:", *((int *)v1 + 544)));
        v40 = objc_msgSend(v39, "ringBufferNum");

        if (v40)
        {
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[3], "objectAtIndexedSubscript:", *((int *)v1 + 544)));
          v42 = objc_msgSend(v41, "ringBufferNum");

          if (v42)
          {
            v43 = 0;
            v44 = (int64x2_t *)(v1 + 391);
            v45 = v42;
            do
            {
              v46 = (unint64_t)v1[392];
              v47 = v1[393];
              if (v46 >= (unint64_t)v47)
              {
                v49 = v44->i64[0];
                v50 = (uint64_t)(v46 - v44->i64[0]) >> 5;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 59)
                  abort();
                v52 = (uint64_t)v47 - v49;
                if (v52 >> 4 > v51)
                  v51 = v52 >> 4;
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
                  v53 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v53 = v51;
                if (v53)
                {
                  if (v53 >> 59)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v54 = (char *)operator new(32 * v53);
                }
                else
                {
                  v54 = 0;
                }
                v55 = &v54[32 * v50];
                *(_OWORD *)v55 = 0u;
                *((_OWORD *)v55 + 1) = 0u;
                if (v46 == v49)
                {
                  v59 = vdupq_n_s64(v46);
                  v56 = &v54[32 * v50];
                }
                else
                {
                  v56 = &v54[32 * v50];
                  do
                  {
                    v57 = *(_QWORD *)(v46 - 32);
                    v46 -= 32;
                    *(_QWORD *)v46 = 0;
                    *((_QWORD *)v56 - 4) = v57;
                    v56 -= 32;
                    v58 = *(_OWORD *)(v46 + 8);
                    *((_QWORD *)v56 + 3) = *(_QWORD *)(v46 + 24);
                    *(_OWORD *)(v56 + 8) = v58;
                  }
                  while (v46 != v49);
                  v59 = *v44;
                }
                v48 = (GTMTLReplayController **)(v55 + 32);
                v1[391] = (GTMTLReplayController **)v56;
                v1[392] = (GTMTLReplayController **)(v55 + 32);
                v1[393] = (GTMTLReplayController **)&v54[32 * v53];
                v60 = (char *)v59.i64[1];
                v61 = (char *)v59.i64[0];
                while (v60 != v61)
                {
                  v62 = (void *)*((_QWORD *)v60 - 4);
                  v60 -= 32;

                }
                if (v61)
                  operator delete(v61);
              }
              else
              {
                v48 = (GTMTLReplayController **)(v46 + 32);
                *(_OWORD *)v46 = 0u;
                *(_OWORD *)(v46 + 16) = 0u;
              }
              v1[392] = v48;
              v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("f_%u.raw"), v43));
              v64 = objc_claimAutoreleasedReturnValue(objc_msgSend(v120, "stringByAppendingPathComponent:", v63));
              v65 = *(v48 - 4);
              *(v48 - 4) = (GTMTLReplayController *)v64;

              *((_DWORD *)v48 - 2) = *((_DWORD *)v1 + 544);
              *((_DWORD *)v48 - 1) = v43;
              if (((*(unint64_t *)((char *)v1[399] + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v43) & 1) != 0)
              {
                v66 = fopen((const char *)-[GTMTLReplayController UTF8String](*(v48 - 4), "UTF8String"), "wb");
                *(v48 - 3) = (GTMTLReplayController *)v66;
                if (!v66)
                {
                  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to open file %@"), *(v48 - 4)));
                  v68 = __stdoutp;
                  v69 = g_runningInCI;
                  v70 = objc_retainAutorelease(v67);
                  v71 = (const char *)objc_msgSend(v70, "UTF8String");
                  v72 = "#CI_ERROR# ";
                  if (!v69)
                    v72 = "";
                  fprintf(v68, "%s%s %u: %s\n", v72, "void GTUSCSamplingStreamingManagerHelper::SetupAPSDataFiles(NSString *__strong)", 6974, v71);
                  v73 = objc_retainAutorelease(v70);
                  GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v73, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTUSCSamplingStreamingManager.mm", (uint64_t)"SetupAPSDataFiles", 6974, 1);

                }
              }
              ++v43;
            }
            while (v43 != v45);
          }
        }

      }
      GTMTLReplayController_prePlayForProfiling((uint64_t)**v1);
      v74 = a1;
      mach_get_times(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
      v75 = **v1;
      v115 = v75->var1;
      atomic_store(0, (unsigned int *)v1 + 687);
      objc_msgSend(*(id *)(v74 + 32), "mapShaderSampleBufferWithBuffer:capacity:size:", 0, 0, 0);
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75->var1, "defaultCommandQueue"));
      v76 = objc_autoreleasePoolPush();
      v133 = v75;
      LOBYTE(v134) = 0;
      v132 = (GTMTLReplayController *)objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
      objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
      if (*((_DWORD *)v1 + 547) == 1)
        DisableComputeEncoderCoalescing(**v1, 1);
      v77 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48);
      v78 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48);
      v79 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 48);
      v80 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      v123[0] = _NSConcreteStackBlock;
      v123[1] = 3221225472;
      v123[2] = ___ZN35GTUSCSamplingStreamingManagerHelper9StreamAPSEv_block_invoke_3;
      v123[3] = &__block_descriptor_40_e5_v8__0l;
      v123[4] = v1;
      GTUSCSamplingStreamingManagerHelper::ReplaySingleFrameForUSCSampling((uint64_t)v1, v77, v78, v79, v80, v123);
      if (*((_DWORD *)v1 + 547) == 1)
        DisableComputeEncoderCoalescing(**v1, 0);
      objc_msgSend(v118, "finish");
      ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)&v132);
      objc_autoreleasePoolPop(v76);
      objc_msgSend(*(id *)(a1 + 32), "unmapShaderSampleBuffer");
      usleep(0x7530u);
      atomic_store(1u, (unsigned __int8 *)v1 + 2760);
      v81 = (unsigned int *)v1 + 689;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 + 1, v81));
      v83 = GTAGXPerfStateControl::ConsistentGPUPerfStateLevel((GTAGXPerfStateControl *)(v1 + 5), 0);
      v84 = objc_claimAutoreleasedReturnValue(v83);
      v116 = (void *)v84;
      if (v84)
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "setDictionary:", v84);
      GTUSCSamplingStreamingManagerHelper::DrainAllSourceBuffers((intptr_t)v1[303], (uint64_t)v1[304]);
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v1 + 352);
      __lk.__owns_ = 1;
      std::mutex::lock((std::mutex *)v1 + 44);
      v85 = *((_DWORD *)v1 + 541);
      v86 = atomic_load((unsigned int *)v1 + 687);
      if (v85 != v86)
      {
        do
        {
          std::condition_variable::wait((std::condition_variable *)(v1 + 346), &__lk);
          v87 = *((_DWORD *)v1 + 541);
          v88 = atomic_load((unsigned int *)v1 + 687);
        }
        while (v87 != v88);
      }
      atomic_store(0, (unsigned __int8 *)v1 + 2761);
      v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[2], "firstObject"));
      objc_msgSend(v89, "stopSampling");

      GTAGXPerfStateControl::DisableConsistentGPUPerfState((GTAGXPerfStateControl *)(v1 + 5));
      GTApplePMPPerfStateControl::DisableConsistentPerfState((GTApplePMPPerfStateControl *)(v1 + 8));
      dispatch_semaphore_signal((dispatch_semaphore_t)v1[313]);
      dispatch_semaphore_wait((dispatch_semaphore_t)v1[314], 0xFFFFFFFFFFFFFFFFLL);
      v90 = (id *)v1[391];
      v91 = v1[392];
      if (v90 == (id *)v91)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 0;
      }
      else
      {
        v92 = 0;
        v93 = a1;
        do
        {
          v94 = (FILE *)v90[1];
          if (v94)
          {
            fseek(v94, 0, 2);
            v90[2] = (id)ftell((FILE *)v90[1]);
            fclose((FILE *)v90[1]);
            if (v92)
            {
              v92 = 1;
            }
            else
            {
              v95 = fopen((const char *)objc_msgSend(*v90, "UTF8String"), "rb");
              v96 = (unint64_t)v90[2];
              if (v96 <= 0x200000)
              {
                if (v96 < 0x1000)
                {
LABEL_94:
                  v92 = 0;
                }
                else
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = v96 >> 12;
                  if (v96 >> 12 <= 1)
                    v100 = 1;
                  else
                    v100 = v96 >> 12;
                  v92 = 1;
                  while (1)
                  {
                    fseek(v95, v97, 0);
                    ftell(v95);
                    v101 = fgetc(v95);
                    if (v101 != 15 && v101 != -1)
                      break;
                    v92 = ++v98 < v99;
                    v97 += 4096;
                    if (v100 == v98)
                      goto LABEL_94;
                  }
                }
                fseek(v95, 0, 2);
              }
              else
              {
                v92 = 1;
              }
              fclose(v95);
            }
            v90[1] = 0;
            v93 = a1;
          }
          v90 += 4;
        }
        while (v90 != (id *)v91);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v93 + 104) + 8) + 24) = v92;
        if (v92)
        {
          v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
          v102 = v1[391];
          v103 = v1[392];
          while (v102 != v103)
          {
            v104 = objc_msgSend(v122, "fileExistsAtPath:", *v102);
            if (v102[2])
              v105 = v104;
            else
              v105 = 0;
            if ((v105 & 1) != 0)
            {
              v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[3], "objectAtIndexedSubscript:", *((unsigned int *)v102 + 6)));
              v127 = CFSTR("APSTraceDataFile");
              v132 = *v102;
              v128 = CFSTR("Source");
              v107 = (GTMTLReplayController *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "name"));
              v133 = v107;
              v129 = CFSTR("SourceIndex");
              v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v102 + 6)));
              v134 = v108;
              v130 = CFSTR("RingBufferIndex");
              v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v102 + 7)));
              v135 = v109;
              v131 = CFSTR("Serial");
              ++GTUSCSamplingStreamingManagerHelper::StreamAPSDataFiles(void)::serial;
              v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:"));
              v136 = v110;
              v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v132, &v127, 5));

              ((void (*)(void))(*v1)[4]->var2)();
              objc_msgSend(v122, "removeItemAtPath:error:", *v102, 0);

            }
            v102 += 4;
          }
          v125 = CFSTR("Post Processing Frame Marker");
          v112 = atomic_load(v81);
          v113 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v112));
          v126 = v113;
          v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v126, &v125, 1));

          ((void (*)(void))(*v1)[4]->var2)();
        }
      }
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);

    }
  }
}

void sub_1D6E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::mutex *a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1D7118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN35GTUSCSamplingStreamingManagerHelper23StreamHarvestedBinariesEv_block_invoke(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  unsigned int v20;
  void *v21;
  id v22;
  void *v23;
  objc_object *v24;
  id ComputedKey;
  void *v26;
  void *v27;
  BOOL v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  _BOOL4 v40;
  uint64_t v41;
  void *v42;
  NSData *v43;
  NSString *v44;
  void *v45;
  void *v46;
  NSString *v47;
  void *v48;
  NSString *v49;
  void *v50;
  NSString *v51;
  NSString *v52;
  void *v53;
  NSString *v54;
  NSString *v55;
  id v56;
  id v57;
  void *v58;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id obj;
  id v66;
  void *v67;
  id v68;
  id v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *__p;
  void *v75;
  uint64_t v76;
  _OWORD v77[2];
  int v78;
  _OWORD v79[2];
  int v80;
  id v81;
  __int128 v82;
  NSMutableDictionary *v83;
  NSMutableDictionary *v84;
  _QWORD v85[7];
  _QWORD v86[4];
  __int128 v87;
  NSMutableDictionary *v88;
  _QWORD v89[2];
  char v90;

  v1 = *(uint64_t ***)(a1 + 40);
  GTMTLReplayController_prePlayForProfiling(**v1);
  v2 = **v1;
  v81 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1024);
  *(_QWORD *)&v82 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 128);
  *((_QWORD *)&v82 + 1) = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 128);
  v83 = (NSMutableDictionary *)objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 128);
  v66 = v81;
  v84 = (NSMutableDictionary *)objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 128);
  v60 = *(id *)(v2 + 8);
  memset(v79, 0, sizeof(v79));
  v80 = 1065353216;
  memset(v77, 0, sizeof(v77));
  v78 = 1065353216;
  __p = 0;
  v75 = 0;
  v76 = 0;
  v3 = objc_autoreleasePoolPush();
  v4 = -[ProgramAddressTableCollector initForHarvestingBinaries]([ProgramAddressTableCollector alloc], "initForHarvestingBinaries");
  v5 = v1[243];
  v1[243] = v4;

  v7 = objc_opt_new(NSMutableDictionary, v6);
  v8 = v1[244];
  v1[244] = (uint64_t *)v7;

  v1[245] = 0;
  objc_autoreleasePoolPop(v3);
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "defaultDevice"));
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "defaultCommandQueue"));
  objc_msgSend(v63, "mapShaderSampleBufferWithBuffer:capacity:size:", 0, 0, 0);
  v9 = objc_autoreleasePoolPush();
  v89[1] = v2;
  v90 = 0;
  v89[0] = objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
  objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
  GTUSCSamplingStreamingManagerHelper::ReplaySingleFrameForUSCSampling((uint64_t)v1, v79, (uint64_t *)v77, &__p, 0, 0);
  objc_msgSend(v62, "finish");
  ScopedReplayConfiguration::~ScopedReplayConfiguration((ScopedReplayConfiguration *)v89);
  objc_autoreleasePoolPop(v9);
  objc_msgSend(v63, "unmapShaderSampleBuffer");
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[243], "mappings"));
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[243], "binaries"));
  v67 = (void *)objc_opt_new(NSMutableDictionary, v10);
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  obj = v61;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v89, 16);
  if (v11)
  {
    v68 = *(id *)v71;
    do
    {
      v12 = 0;
      do
      {
        if (*(id *)v71 != v68)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("encID")));
        objc_msgSend(v14, "unsignedIntValue");

        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("encIndex")));
        v16 = objc_msgSend(v15, "unsignedIntValue");

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("drawCallIndex")));
        v18 = objc_msgSend(v17, "unsignedIntValue");

        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("index")));
        v20 = objc_msgSend(v19, "unsignedIntValue");

        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("mappedSize")));
        v22 = objc_msgSend(v21, "unsignedLongLongValue");

        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("type")));
        v24 = (objc_object *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("binaryUniqueId")));
        if ((objc_msgSend(v23, "isEqualToString:", CFSTR("AccelerationStructure")) & 1) == 0)
        {
          ComputedKey = GTShaderProfilerGenerateComputedKey((uint64_t)v16, (uint64_t)v18, (uint64_t)v22, v23);
          v26 = (void *)objc_claimAutoreleasedReturnValue(ComputedKey);
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[244], "objectForKeyedSubscript:", v26));
          v28 = v27 == 0;

          if (!v28)
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "objectForKeyedSubscript:", v26));
            v30 = objc_msgSend(v29, "unsignedIntValue");

            v31 = v30 + 1;
            v32 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%u"), v26, v31));

            v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v31));
            objc_msgSend(v67, "setObject:forKeyedSubscript:", v33, v32);

            v26 = (void *)v32;
          }
          objc_msgSend(v1[244], "setObject:forKeyedSubscript:", v24, v26);
          if (v20 != -1)
          {
            v34 = objc_msgSend(v66, "count");
            v36 = v81;
            if (v34 == (id)v18)
            {
              v37 = (void *)objc_opt_new(NSMutableDictionary, v35);
              objc_msgSend(v36, "addObject:", v37);

            }
            v66 = v36;
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectAtIndexedSubscript:", v18));
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("mutiple binary keys")));
            v40 = v39 == 0;

            if (v40)
            {
              v42 = (void *)objc_opt_new(NSMutableArray, v41);
              objc_msgSend(v38, "setObject:forKeyedSubscript:", v42, CFSTR("mutiple binary keys"));

            }
            v43 = (NSData *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "objectForKeyedSubscript:", v24));
            if (objc_msgSend(v23, "isEqualToString:", CFSTR("vertex")))
            {
              v44 = AddShaderBinary((NSMutableDictionary *)v82, v43, v24, *((unsigned __int8 *)v1 + 2185), *((unsigned int *)*v1 + 19), (NSString *)&v24->isa, 0, (NSString *)v23);
              v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
              objc_msgSend(v38, "setObject:forKeyedSubscript:", v45, CFSTR("vertex shader key"));

              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("mutiple binary keys")));
              v47 = AddShaderBinary(v84, v43, v24, *((unsigned __int8 *)v1 + 2185), *((unsigned int *)*v1 + 19), (NSString *)&v24->isa, 0, (NSString *)v23);
              v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
              objc_msgSend(v46, "addObject:", v48);
              goto LABEL_21;
            }
            if (objc_msgSend(v23, "isEqualToString:", CFSTR("fragment")))
            {
              v49 = AddShaderBinary(*((NSMutableDictionary **)&v82 + 1), v43, v24, *((unsigned __int8 *)v1 + 2185), *((unsigned int *)*v1 + 19), (NSString *)&v24->isa, 0, (NSString *)v23);
              v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
              objc_msgSend(v38, "setObject:forKeyedSubscript:", v50, CFSTR("fragment shader key"));

              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("mutiple binary keys")));
              v51 = AddShaderBinary(v84, v43, v24, *((unsigned __int8 *)v1 + 2185), *((unsigned int *)*v1 + 19), (NSString *)&v24->isa, 0, (NSString *)v23);
              v48 = (void *)objc_claimAutoreleasedReturnValue(v51);
              objc_msgSend(v46, "addObject:", v48);
              goto LABEL_21;
            }
            if ((objc_msgSend(v23, "isEqualToString:", CFSTR("compute")) & 1) != 0
              || objc_msgSend(v23, "isEqualToString:", CFSTR("tile")))
            {
              v52 = AddShaderBinary(v83, v43, v24, *((unsigned __int8 *)v1 + 2185), *((unsigned int *)*v1 + 19), (NSString *)&v24->isa, 0, (NSString *)v23);
              v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
              objc_msgSend(v38, "setObject:forKeyedSubscript:", v53, CFSTR("compute kernel key"));

              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("mutiple binary keys")));
              v54 = AddShaderBinary(v84, v43, v24, *((unsigned __int8 *)v1 + 2185), *((unsigned int *)*v1 + 19), (NSString *)&v24->isa, 0, (NSString *)v23);
              v48 = (void *)objc_claimAutoreleasedReturnValue(v54);
              objc_msgSend(v46, "addObject:", v48);
              goto LABEL_21;
            }
            if (objc_msgSend(v23, "containsString:", CFSTR("dynamic-libraries")))
            {
              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("mutiple binary keys")));
              v55 = AddShaderBinary(v84, v43, v24, *((unsigned __int8 *)v1 + 2185), *((unsigned int *)*v1 + 19), (NSString *)&v24->isa, 1, (NSString *)v23);
              v48 = (void *)objc_claimAutoreleasedReturnValue(v55);
              objc_msgSend(v46, "addObject:", v48);
LABEL_21:

            }
          }

        }
        v12 = (char *)v12 + 1;
      }
      while (v11 != v12);
      v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v89, 16);
      v11 = v56;
    }
    while (v56);
  }

  v1[245] = v1[241];
  v1[241] = 0;
  v57 = GTUSCSamplingStreamingManagerHelper::AllocUSCSamplingAddressBuffer((GTUSCSamplingStreamingManagerHelper *)v1);
  v85[0] = CFSTR("draw call info");
  v85[1] = CFSTR("mutiple binary info");
  v86[0] = v66;
  v86[1] = v84;
  v85[2] = CFSTR("internal binary keys");
  v85[3] = CFSTR("vertex fetch shader info");
  v86[2] = &__NSArray0__struct;
  v86[3] = &__NSDictionary0__struct;
  v87 = v82;
  v85[4] = CFSTR("vertex shader info");
  v85[5] = CFSTR("fragment shader info");
  v85[6] = CFSTR("compute kernel info");
  v88 = v83;
  v69 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v86, v85, 7));

  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table((uint64_t)v77);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v79);

  v58 = *(void **)(a1 + 32);
  if (v58)
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v69, CFSTR("Havested Binaries"));

}

void sub_1D7B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{

  _Unwind_Resume(a1);
}

void ___ZN29GTUSCSamplingStreamingManagerC2EP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryU13block_pointerFvS5_E_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  void *v5;
  unsigned int *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  unsigned int v11;
  double v12;
  void *v13;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)v1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 16), "objectForKeyedSubscript:", CFSTR("GPUState")));
  v13 = v3;
  if (!v3 || (v4 = objc_msgSend(v3, "unsignedIntValue"), *(_DWORD *)(v1 + 72) = v4, v5 = v13, !v4))
  {
    *(_DWORD *)(v1 + 72) = 0;
    v6 = ExpectedState(v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "doubleValue");
      v10 = floor(v9);
      v11 = (v10 * 100.0);
      *(_DWORD *)(v1 + 64) = v11;
      *(_DWORD *)(v1 + 68) = (ceil(v9) * 100.0);
      v12 = v9 - v10;
      *(double *)(v1 + 24) = v12;
      if (v12 <= 2.22044605e-16)
        *(_DWORD *)(v1 + 68) = v11;
    }
    else
    {
      *(int32x2_t *)(v1 + 64) = vdup_n_s32(0x12Cu);
    }

    v5 = v13;
  }

}

void sub_1D7E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t GTUSCSamplingStreamingManager::GTUSCSamplingStreamingManager(uint64_t a1, uint64_t a2, id *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD v20[5];

  v9 = a4;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v10 = v9;
  *(_QWORD *)(a1 + 16) = v10;
  v11 = objc_retainBlock(a5);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 76) = 0x7FFFFFFF;
  v13 = objc_opt_new(NSMutableDictionary, v12);
  v14 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v13;

  v16 = objc_opt_new(NSMutableDictionary, v15);
  v17 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v16;

  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = ___ZN29GTUSCSamplingStreamingManagerC2EP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryU13block_pointerFvS5_E_block_invoke;
  v20[3] = &__block_descriptor_40_e5_v8__0l;
  v20[4] = a1;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v20));
  objc_msgSend(v18, "setQueuePriority:", 8);
  objc_msgSend(*a3, "addOperation:", v18);
  objc_msgSend(v18, "waitUntilFinished");

  return a1;
}

void sub_1D7F78(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(id *this)
{

}

void GTUSCSamplingStreamingManager::InitTargetIndex(id *this)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  io_registry_entry_t IOAccelerator;
  id MetalPluginName;
  uint64_t v8;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "objectForKeyedSubscript:", CFSTR("MetalPluginName")));
  v3 = this[7];
  this[7] = (id)v2;

  if (this[7])
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "objectForKeyedSubscript:", CFSTR("gpuTarget")));
    v5 = v4;
    if (v4)
      *((_DWORD *)this + 19) = objc_msgSend(v4, "intValue");
  }
  else
  {
    IOAccelerator = GetIOAccelerator();
    MetalPluginName = GetMetalPluginName(IOAccelerator, (_DWORD *)this + 19);
    v8 = objc_claimAutoreleasedReturnValue(MetalPluginName);
    v5 = this[7];
    this[7] = (id)v8;
  }

  if (*((_DWORD *)this + 19) == 0x7FFFFFFF)
    *((_DWORD *)this + 19) = MetalPluginTarget(this[7]);
}

void sub_1D80B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GTUSCSamplingStreamingManager::InitDerivedCountersInfo(id *this)
{
  uint64_t v2;
  id v3;

  GTUSCSamplingStreamingManager::InitTargetIndex(this);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(this[2], "objectForKeyedSubscript:", CFSTR("derivedCounterInfo")));
  v3 = this[6];
  this[6] = (id)v2;

}

void GTUSCSamplingStreamingManagerHelper::Instance(GTUSCSamplingStreamingManagerHelper *this)
{
  unsigned __int8 v1;
  GTUSCSamplingStreamingManagerHelper *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      GTUSCSamplingStreamingManagerHelper::GTUSCSamplingStreamingManagerHelper(v2);
      __cxa_atexit((void (*)(void *))GTUSCSamplingStreamingManagerHelper::~GTUSCSamplingStreamingManagerHelper, &GTUSCSamplingStreamingManagerHelper::Instance(void)::instance, &dword_0);
    }
  }
}

void GTUSCSamplingStreamingManagerHelper::GTUSCSamplingStreamingManagerHelper(GTUSCSamplingStreamingManagerHelper *this)
{
  byte_752058 = 0;
  xmmword_752038 = 0u;
  *(_OWORD *)&qword_752048 = 0u;
  GTUSCSamplingStreamingManagerHelper::Instance(void)::instance = 0u;
  qword_752060 = 0;
  qword_752068 = 0;
  qword_752070 = 0x300000000;
  bzero(&unk_752078, 0x70CuLL);
  unk_7527A8 = 0u;
  xmmword_752798 = 0u;
  xmmword_7527C0 = 0u;
  unk_7527D0 = 0u;
  unk_7527E0 = 0u;
  *(_OWORD *)&qword_7527F0 = 0u;
  xmmword_752800 = 0u;
  *(_OWORD *)&qword_752810 = 0u;
  xmmword_752820 = 0u;
  *(_OWORD *)&qword_752830 = 0u;
  xmmword_752840 = 0u;
  *(_OWORD *)&qword_752850 = 0u;
  unk_752860 = 0u;
  unk_752870 = 0u;
  xmmword_752880 = 0u;
  unk_752890 = 0u;
  qword_7528A0 = 0;
  qword_7528A8 = 0xFFFFFFFFLL;
  unk_7528B0 = 257;
  byte_7528B2 = 1;
  unk_752900 = 0u;
  xmmword_7528E4 = 0u;
  unk_7528F4 = 0u;
  xmmword_7528C4 = 0u;
  unk_7528D4 = 0u;
  xmmword_7528B4 = 0u;
  dword_752910 = 1065353216;
  xmmword_752918 = 0u;
  xmmword_752928 = 0u;
  unk_752938 = 0u;
  xmmword_752948 = 0u;
  xmmword_752958 = 0u;
  xmmword_752968 = 0u;
  xmmword_752978 = 0u;
  xmmword_752988 = 0u;
  unk_752998 = 0u;
  xmmword_7529A8 = 0u;
  xmmword_7529B8 = 0u;
  xmmword_7529C8 = 0u;
  *(_OWORD *)&qword_7529D8 = 0u;
  xmmword_7529E8 = 0u;
  xmmword_7529F8 = 0u;
  xmmword_752A08 = 0u;
  unk_752A18 = 0u;
  qword_752A28 = 0;
  dword_752A30 = 1065353216;
  xmmword_752A38 = 0u;
  unk_752A48 = 0u;
  xmmword_752A58 = 0u;
  xmmword_752A68 = 0u;
  unk_752A78 = 0u;
  xmmword_752A88 = 0u;
  xmmword_752A98 = 0u;
  xmmword_752AA8 = 0u;
  dword_752AB8 = 1065353216;
  byte_752AC0 = 0;
  xmmword_752AC8 = 0u;
  xmmword_752AD8 = 0u;
  *(__int128 *)((char *)&xmmword_752AD8 + 13) = 0u;
  qword_752AF8 = 1018212795;
  unk_752B00 = 0u;
  unk_752B10 = 0u;
  qword_752B20 = 0;
  qword_752B28 = 850045863;
  unk_752B30 = 0u;
  unk_752B40 = 0u;
  unk_752B50 = 0u;
  qword_752B60 = 0;
  qword_752B68 = 1018212795;
  unk_752B70 = 0u;
  unk_752B80 = 0u;
  qword_752B90 = 0;
  qword_752B98 = 850045863;
  unk_752BA0 = 0u;
  unk_752BB0 = 0u;
  unk_752BC0 = 0u;
  qword_752BD0 = 0;
  qword_752BD8 = 1018212795;
  *(_OWORD *)algn_752BE0 = 0u;
  *(_OWORD *)&algn_752BE0[16] = 0u;
  qword_752C00 = 0;
  qword_752C08 = 850045863;
  qword_752C40 = 0;
  *(_OWORD *)&algn_752C10[32] = 0u;
  *(_OWORD *)&algn_752C10[16] = 0u;
  *(_OWORD *)algn_752C10 = 0u;
  *((_QWORD *)&xmmword_752C48 + 1) = -1;
  *(_QWORD *)&xmmword_752C48 = -1;
  qword_752C78 = 0;
  xmmword_752C68 = 0u;
  xmmword_752C58 = 0u;
  xmmword_752C80 = xmmword_4AA450;
  qword_752C90 = 50000;
  qword_752C98 = qword_752C98 & 0xFFFFFFFFFFFFFFFCLL | 1;
  qword_752CA8 = 0;
  qword_752CA0 = 0;
  qword_752CB0 = 0;
  qword_752CB8 = 4;
  dword_752CC0 = 0;
}

void GTUSCSamplingStreamingManagerHelper::~GTUSCSamplingStreamingManagerHelper(GTUSCSamplingStreamingManagerHelper *this)
{
  void *v2;
  uint64_t i;
  void *v4;
  void *v5;
  void **v6;

  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 312));
  GTUSCSamplingStreamingManagerHelper::CleanUp(this);
  v2 = (void *)*((_QWORD *)this + 399);
  if (v2)
    operator delete(v2);
  v6 = (void **)((char *)this + 3128);
  std::vector<SourceFileInfo>::__destroy_vector::operator()[abi:nn180100](&v6);

  std::mutex::~mutex((std::mutex *)((char *)this + 3040));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 2992));
  std::mutex::~mutex((std::mutex *)((char *)this + 2928));
  std::condition_variable::~condition_variable((std::condition_variable *)this + 60);
  std::mutex::~mutex((std::mutex *)this + 44);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 2768));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 2672);
  for (i = 2648; i != 2552; i -= 24)
  {
    v6 = (void **)((char *)this + i);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 2536);

  v6 = (void **)((char *)this + 2472);
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 2448);
  std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 2424);
  std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 2400);
  std::vector<std::vector<GTMMappedBuffer>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 2376);
  std::vector<DynamicBuffer>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 2352);
  std::vector<std::vector<GTMMappedBuffer>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 2328);
  std::vector<std::vector<GTMMappedBuffer>>::__destroy_vector::operator()[abi:nn180100](&v6);

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 2248);
  v4 = (void *)*((_QWORD *)this + 278);
  if (v4)
  {
    *((_QWORD *)this + 279) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 2200);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v6);

  GTSampleBufferManager::~GTSampleBufferManager((id *)this + 263);
  v5 = (void *)*((_QWORD *)this + 238);
  if (v5)
  {
    *((_QWORD *)this + 239) = v5;
    operator delete(v5);
  }
  GTApplePMPPerfStateControl::~GTApplePMPPerfStateControl((GTUSCSamplingStreamingManagerHelper *)((char *)this + 64));
  GTAGXPerfStateControl::~GTAGXPerfStateControl((id *)this + 5);

}

void sub_1D8604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;
  uint64_t i;
  void *v14;
  void *v15;

  v12 = *(void **)(v10 + 3192);
  if (v12)
    operator delete(v12);
  a10 = (void **)(v10 + 3128);
  std::vector<SourceFileInfo>::__destroy_vector::operator()[abi:nn180100](&a10);

  std::mutex::~mutex((std::mutex *)(v10 + 3040));
  std::condition_variable::~condition_variable((std::condition_variable *)(v10 + 2992));
  std::mutex::~mutex((std::mutex *)(v10 + 2928));
  std::condition_variable::~condition_variable((std::condition_variable *)(v10 + 2880));
  std::mutex::~mutex((std::mutex *)(v10 + 2816));
  std::condition_variable::~condition_variable((std::condition_variable *)(v10 + 2768));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v10 + 2672);
  for (i = 0; i != -96; i -= 24)
  {
    a10 = (void **)(v10 + 2648 + i);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a10);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v10 + 2536);

  a10 = (void **)(v10 + 2472);
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 2448);
  std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 2424);
  std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 2400);
  std::vector<std::vector<GTMMappedBuffer>>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 2376);
  std::vector<DynamicBuffer>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 2352);
  std::vector<std::vector<GTMMappedBuffer>>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 2328);
  std::vector<std::vector<GTMMappedBuffer>>::__destroy_vector::operator()[abi:nn180100](&a10);

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v10 + 2248);
  v14 = *(void **)(v10 + 2224);
  if (v14)
  {
    *(_QWORD *)(v10 + 2232) = v14;
    operator delete(v14);
  }
  a10 = (void **)(v10 + 2200);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&a10);

  GTSampleBufferManager::~GTSampleBufferManager((id *)(v10 + 2104));
  v15 = *(void **)(v10 + 1904);
  if (v15)
  {
    *(_QWORD *)(v10 + 1912) = v15;
    operator delete(v15);
  }
  GTApplePMPPerfStateControl::~GTApplePMPPerfStateControl((GTApplePMPPerfStateControl *)(v10 + 64));
  GTAGXPerfStateControl::~GTAGXPerfStateControl((id *)(v10 + 40));

  _Unwind_Resume(a1);
}

void std::vector<SourceFileInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 4);
        v4 -= 32;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<std::vector<NSObject  {objcproto21OS_dispatch_semaphore}* {__strong}>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<GTMMappedBuffer>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<GTMMappedBuffer>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DynamicBuffer>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DynamicBuffer>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void GTSampleBufferManager::~GTSampleBufferManager(id *this)
{
  id v2;
  id v3;

  objc_msgSend(this[2], "removeAllObjects");
  v2 = *this;
  *this = 0;

  v3 = this[3];
  if (v3)
  {
    this[4] = v3;
    operator delete(v3);
  }

}

void sub_1D8AB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void GTApplePMPPerfStateControl::~GTApplePMPPerfStateControl(GTApplePMPPerfStateControl *this)
{
  uint64_t i;

  GTApplePMPPerfStateControl::Close(this);
  for (i = 1752; i != -40; i -= 56)

}

void sub_1D8B24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1752; i != -40; i -= 56)

  _Unwind_Resume(a1);
}

void GTAGXPerfStateControl::~GTAGXPerfStateControl(id *this)
{
  io_connect_t v2;

  v2 = *(_DWORD *)this;
  if (v2)
  {
    IOServiceClose(v2);
    *(_DWORD *)this = 0;
  }

}

void sub_1D8B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void GPURawCounterSetupParams::~GPURawCounterSetupParams(id *this)
{

}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

float64_t GetTextureRendererUniform(uint64_t a1, float64_t *a2, int a3, uint64_t a4, uint64_t a5, float64x2_t a6, float64_t a7, float64x2_t a8, float64_t a9, float64x2_t a10, float64_t a11, double a12, double a13, double a14, double a15)
{
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float32x4_t v21;
  float64x2_t v22;
  uint64x2_t v23;
  float64x2_t v24;
  double v25;
  float32x2_t v26;
  float v33;

  v17.f64[0] = a2[8];
  v18.f64[0] = a2[9];
  v17.f64[1] = a2[12];
  v19.f64[0] = *a2;
  v20.f64[0] = a2[1];
  v19.f64[1] = a2[4];
  v18.f64[1] = a2[13];
  v20.f64[1] = a2[5];
  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v17);
  *(float32x4_t *)(a1 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v20), v18);
  v17.f64[0] = a2[10];
  v18.f64[0] = a2[11];
  v22.f64[1] = a2[14];
  v19.f64[0] = a2[2];
  v20.f64[0] = a2[3];
  v19.f64[1] = a2[6];
  v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v22);
  v18.f64[1] = a2[15];
  v20.f64[1] = a2[7];
  v22.f64[0] = a14;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(float32x4_t *)(a1 + 32) = v21;
  *(float32x4_t *)(a1 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v20), v18);
  if (a3)
  {
    v23.i64[0] = a4;
    v23.i64[1] = a5;
    v24 = vcvtq_f64_u64(v23);
    v25 = a14 / v24.f64[0];
    if (a14 / v24.f64[0] >= a15 / v24.f64[1])
      v25 = a15 / v24.f64[1];
    v22.f64[1] = a15;
    v26 = vcvt_f32_f64(vmulq_n_f64(v24, v25 / a12));
    __asm { FMOV            V4.2D, #0.5 }
    a8 = vmulq_f64(vsubq_f64(vdivq_f64(v22, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a12, 0)), vcvtq_f64_f32(v26)), _Q4);
  }
  else
  {
    a8.f64[1] = a9;
    a10.f64[1] = a11;
    v26 = vcvt_f32_f64(a10);
    v22.f64[1] = a15;
  }
  *(float32x2_t *)(a1 + 64) = vcvt_f32_f64(a8);
  *(float32x2_t *)(a1 + 72) = v26;
  a6.f64[1] = a7;
  *(float32x2_t *)&a6.f64[0] = vcvt_f32_f64(a6);
  v33 = a12;
  *(float *)(a1 + 96) = v33;
  *(float32x2_t *)(a1 + 80) = vcvt_f32_f64(v22);
  *(float64_t *)(a1 + 88) = a6.f64[0];
  return a6.f64[0];
}

void EncodeAttachment(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unint64_t a8, unint64_t a9, unsigned __int8 a10)
{
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  _OWORD v26[3];
  uint64_t v27;

  v17 = a3;
  v25 = a6;
  v18 = a7;
  v19 = *(void **)(*(_QWORD *)(a1 + 8) + 16);
  v20 = a4;
  v21 = GTMTLReplayController_resizeTexture(v19, a1 + 96, a2, a5, a8, a9, 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "device"));
  v24 = objc_msgSend(v20, "pixelFormat");

  GTMTLPixelFormatGetInfoForDevice((uint64_t)v26, (uint64_t)v23, (uint64_t)v24);
  objc_msgSend(v17, "drawTexture:isDepthStencil:shrinkToFit:", v22, (BYTE8(v26[0]) & 0x60) != 0, a10);
  if (v25)
    objc_msgSend(v17, "drawOverlay:color:shrinkToFit:", v25, *(unsigned int *)(a1 + 72), a10);
  if (v18)
    objc_msgSend(v17, "drawOverlay:color:shrinkToFit:", v18, *(unsigned int *)(a1 + 76), a10);

}

void GTMTLReplayClient_displayAttachment(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *Object;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unsigned __int8 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  apr_array_header_t *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  id TexturesForResize;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  GTMTLTextureRenderEncoder *v59;
  void *v60;
  GTMTLTextureRenderEncoder *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  GTMTLTextureRenderEncoder *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  void *v89;
  void *v90;
  _QWORD v91[4];
  GTMTLTextureRenderEncoder *v92;
  uint64_t v93;
  _OWORD v94[8];
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];

  v6 = *(_QWORD *)(a1 + 8);
  GTMTLReplayController_debugSubCommandStop(v6, a3, a4);
  v7 = GTMTLReplayController_renderPassDescriptor(v6);
  v8 = 0;
  v9 = a3;
  v10 = *(uint64_t **)(*(_QWORD *)v6 + 40);
  v11 = (uint64_t *)(v7 + 8);
  v12 = 0xFFFFFFFFLL;
  v13 = 0xFFFFFFFFLL;
  do
  {
    v15 = *v11;
    v11 += 8;
    v14 = v15;
    if (v15)
    {
      v13 = (int)v13 >= 0 ? v13 : v8;
      Object = GTMTLSMContext_getObject(*v10, v14, *(_QWORD *)(*(_QWORD *)v6 + 80) + v9);
      if (Object)
      {
        if (Object[24])
          v12 = v8;
        else
          v12 = v12;
      }
    }
    ++v8;
  }
  while (v8 != 8);
  if ((v12 & 0x80000000) != 0)
  {
    if ((v13 & 0x80000000) != 0)
    {
      if (*(_QWORD *)(v7 + 680))
      {
        v17 = (uint64_t *)(v7 + 672);
        v12 = 8;
      }
      else
      {
        if (!*(_QWORD *)(v7 + 728))
          return;
        v17 = (uint64_t *)(v7 + 720);
        v12 = 9;
      }
    }
    else
    {
      v17 = (uint64_t *)(v7 + ((unint64_t)v13 << 6));
      v12 = v13;
    }
  }
  else
  {
    v17 = (uint64_t *)(v7 + ((unint64_t)v12 << 6));
  }
  v18 = *v17;
  if (*v17)
  {
    v19 = (unsigned __int16 *)v17 + 10;
    v20 = (unsigned __int8 *)v17 + 26;
    v21 = (unsigned __int16 *)v17 + 9;
  }
  else
  {
    v18 = v17[1];
    if (!v18)
      return;
    v19 = (unsigned __int16 *)v17 + 11;
    v20 = (unsigned __int8 *)(v17 + 3);
    v21 = (unsigned __int16 *)(v17 + 2);
  }
  v22 = *v20;
  v23 = *v19;
  v24 = *v21;
  if (*(_BYTE *)(a2 + 10))
  {
    v96 = 0;
    v25 = GTMTLReplayController_generateOutlineTexture(v6, a1 + 96, &v96);
    v85 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v26 = v96;
    GTMTLReplay_handleNSError(v26);

  }
  else
  {
    v85 = 0;
  }
  if (*(_BYTE *)(a2 + 9))
  {
    v95 = 0;
    v27 = GTMTLReplayController_generateWireframeTexture(v6, (_QWORD *)(a1 + 96), 1, 0, &v95);
    v84 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v28 = v95;
    GTMTLReplay_handleNSError(v28);

  }
  else
  {
    v84 = 0;
  }
  v29 = *(_QWORD *)(*(_QWORD *)v6 + 40);
  v87 = GTMTLSMContext_getObject(*(_QWORD *)v29, v18, *(_QWORD *)(*(_QWORD *)v6 + 80) + v9);
  if (v87[24])
  {
    v30 = apr_array_make(*(apr_pool_t **)a1, 16, 8);
    GTMTLSMContext_getObjects(*(_DWORD **)(v29 + 240), *(_QWORD *)(*(_QWORD *)v6 + 80) + v9, v30);
    v31 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v30->nelts);
    v32 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v30->nelts);
    v33 = v32;
    if (v30->nelts >= 1)
    {
      v89 = v32;
      v34 = v6;
      v35 = 0;
      LODWORD(v36) = -1;
      do
      {
        v37 = v31;
        v38 = *(_QWORD *)&v30->elts[8 * v35];
        if (*(_QWORD *)(v38 + 8) == v87[24])
          v36 = v35;
        else
          v36 = v36;
        v102[0] = &off_7397A8;
        v101[0] = CFSTR("type");
        v101[1] = CFSTR("object");
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v38 + 48)));
        v102[1] = v39;
        v102[2] = &off_7397C0;
        v101[2] = CFSTR("DependencyGraphRequestedTextureLevel");
        v101[3] = CFSTR("DependencyGraphRequestedTextureSlice");
        v102[3] = &off_7397C0;
        v102[4] = &off_7397C0;
        v101[4] = CFSTR("DependencyGraphRequestedTextureAttachmentIndex");
        v101[5] = CFSTR("DependencyGraphRequestedTextureDepthPlane");
        v102[5] = &off_7397C0;
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v102, v101, 6));

        v41 = *(void **)(v34 + 40);
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v38 + 48)));
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "objectForKeyedSubscript:", v42));

        if (!v43)
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v34 + 8), "textureForKey:", *(_QWORD *)(v38 + 48)));
        v31 = v37;
        objc_msgSend(v37, "addObject:", v40);
        objc_msgSend(v89, "addObject:", v43);

        ++v35;
      }
      while (v35 < v30->nelts);
      v6 = v34;
      v33 = v89;
      goto LABEL_43;
    }
  }
  else
  {
    v100[0] = &off_7397A8;
    v99[0] = CFSTR("type");
    v99[1] = CFSTR("object");
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v18));
    v100[1] = v44;
    v99[2] = CFSTR("DependencyGraphRequestedTextureLevel");
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v22));
    v100[2] = v45;
    v99[3] = CFSTR("DependencyGraphRequestedTextureSlice");
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v23));
    v100[3] = v46;
    v99[4] = CFSTR("DependencyGraphRequestedTextureAttachmentIndex");
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v12));
    v100[4] = v47;
    v99[5] = CFSTR("DependencyGraphRequestedTextureDepthPlane");
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v24));
    v100[5] = v48;
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v100, v99, 6));

    v50 = *(void **)(v6 + 40);
    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v18));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", v51));

    if (!v52)
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v6 + 8), "textureForKey:", v18));
    v98 = v49;
    v53 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v98, 1));
    v97 = v52;
    v31 = (id)v53;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v97, 1));

    v30 = 0;
  }
  v36 = 0xFFFFFFFFLL;
LABEL_43:
  GTMTLReplayClient_waitForUntrackedWritesToComplete(v6, v33);
  v83 = v31;
  TexturesForResize = GTMTLReplayClient_retrieveTexturesForResize((id *)v6, v31, v33, 1, 0);
  v55 = (void *)objc_claimAutoreleasedReturnValue(TexturesForResize);
  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v6 + 8), "defaultCommandQueue"));
  v57 = InternalCommandBuffer(v56, CFSTR("DisplayAttachment"));
  v58 = (void *)objc_claimAutoreleasedReturnValue(v57);

  v59 = [GTMTLTextureRenderEncoder alloc];
  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v6 + 8), "defaultDevice"));
  v61 = -[GTMTLTextureRenderEncoder initWithDevice:](v59, "initWithDevice:", v60);

  v90 = v33;
  v86 = v55;
  if (v87[24])
  {
    v62 = v58;
    if (v30->nelts >= 1)
    {
      v63 = 0;
      do
      {
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v6 + 8), "layerForKey:", *(_QWORD *)(*(_QWORD *)&v30->elts[8 * v63] + 40)));
        objc_msgSend(v64, "drawableSize");
        v66 = v65;
        v68 = v67;
        if (v64)
          objc_msgSend(v64, "transform");
        else
          memset(v94, 0, sizeof(v94));
        -[GTMTLTextureRenderEncoder setTransform:](v61, "setTransform:", v94);
        objc_msgSend(v64, "bounds");
        v70 = v69;
        v72 = v71;
        v74 = v73;
        v76 = v75;
        objc_msgSend(v64, "contentsScale");
        -[GTMTLTextureRenderEncoder setBounds:contentsScale:](v61, "setBounds:contentsScale:", v70, v72, v74, v76, v77);
        objc_msgSend(v64, "anchorPoint");
        -[GTMTLTextureRenderEncoder setAnchor:](v61, "setAnchor:");
        if (v36 == v63)
        {
          v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "objectAtIndexedSubscript:", v36));
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectAtIndexedSubscript:", v36));
          v62 = v58;
          EncodeAttachment(a1, v58, v61, v78, v79, v84, v85, (unint64_t)v66, (unint64_t)v68, 0);
        }
        else
        {
          v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "objectAtIndexedSubscript:", v63));
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectAtIndexedSubscript:", v63));
          v62 = v58;
          EncodeAttachment(a1, v58, v61, v78, v79, 0, 0, (unint64_t)v66, (unint64_t)v68, 0);
        }

        ++v63;
      }
      while (v63 < v30->nelts);
    }
  }
  else
  {
    -[GTMTLTextureRenderEncoder setBounds:contentsScale:](v61, "setBounds:contentsScale:", 0.0, 0.0, (double)*(unint64_t *)(v6 + 22464), (double)*(unint64_t *)(v6 + 22472), 1.0);
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectAtIndexedSubscript:", 0));
    v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectAtIndexedSubscript:", 0));
    EncodeAttachment(a1, v58, v61, v80, v81, v84, v85, *(_QWORD *)(v6 + 22464), *(_QWORD *)(v6 + 22472), 1u);

    v62 = v58;
  }
  v91[0] = _NSConcreteStackBlock;
  v91[1] = 3221225472;
  v91[2] = __GTMTLReplayClient_displayAttachment_block_invoke;
  v91[3] = &unk_726840;
  v92 = v61;
  v93 = a1;
  v82 = v61;
  objc_msgSend(v62, "addCompletedHandler:", v91);
  GTMTLReplay_commitCommandBuffer(v62);

}

id GTMTLShaderDebugger_generateTrace(uint64_t *a1, void *a2, _QWORD *a3)
{
  id v3;
  apr_allocator_t *v4;
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t *v26;
  uint64_t *AliasStream;
  uint64_t v28;
  void *v29;
  void *v30;
  const __CFString *v31;
  uint64_t Object;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void **v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  void *i;
  void *v63;
  _BOOL4 v64;
  void *v65;
  void *v66;
  BOOL v67;
  void *v68;
  id Error;
  id v70;
  id v71;
  uint64_t v72;
  void *v73;
  BOOL v74;
  void *v75;
  void *v76;
  void *v77;
  unint64_t v78;
  _UNKNOWN **v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  BOOL v84;
  void *v85;
  void *v86;
  unsigned int v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  unsigned int v93;
  id v94;
  void *v95;
  void *v96;
  unsigned int v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id v101;
  void *v102;
  unsigned int v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  __CFString *v110;
  NSString *v111;
  void *v112;
  void *v113;
  void *v114;
  unsigned __int8 v115;
  id v116;
  id v117;
  void *v118;
  unsigned int v119;
  void *v120;
  int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int *v125;
  uint64_t *v126;
  unsigned int v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  _OWORD *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  void *v141;
  unsigned int v142;
  const char *v143;
  unint64_t v144;
  unsigned int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t *v148;
  _WORD *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  char v154;
  int v155;
  id v156;
  const __CFString *v157;
  void *v158;
  id v159;
  void *v160;
  void *v162;
  void *v163;
  id v164;
  uint64_t v165;
  id v166;
  void *v167;
  id v168;
  id v169;
  _QWORD *v170;
  uint64_t v171;
  void *v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  void *v179;
  void *v180;
  uint64_t v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  id v190;
  void *v191;
  id v192;
  void *v193;
  id v194;
  void *v195;
  id v196;
  void *v197;
  void *v198;
  void *v199;
  BOOL v200;
  _QWORD *InclusiveRange;
  BOOL CommandEncoder;
  uint64_t v203;
  char v204;
  BOOL v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int *v210;
  int v211;
  NSNumber *v212;
  void *v213;
  NSNumber *v214;
  void *v215;
  char *v216;
  char *v217;
  char *v218;
  unint64_t v219;
  void *v220;
  char *v221;
  char *v222;
  char *v223;
  unint64_t v224;
  void *v225;
  char *v226;
  char *v227;
  char *v228;
  unint64_t v229;
  void *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  unint64_t v239;
  void *v240;
  void *v241;
  char *v242;
  char *v243;
  unint64_t v244;
  void *v245;
  int v246;
  char *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  void *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  void *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  void *v271;
  char *v272;
  void *v273;
  void *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  void *v282;
  id v283;
  id v284;
  id v285;
  uint64_t v286;
  void *j;
  id v288;
  id v289;
  uint64_t v290;
  void *k;
  id v292;
  void *v293;
  id v294;
  void *v295;
  id v296;
  void *v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  void *v301;
  id v302;
  void *v303;
  void *v304;
  id v305;
  id v306;
  uint64_t *v307;
  unint64_t v308;
  id v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  id v313;
  void *v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  id MTLStitchedLibraryDescriptor;
  void *v319;
  id v320;
  id v321;
  void *v322;
  id v323;
  id v324;
  void *v325;
  int v326;
  id v327;
  void *v328;
  id v329;
  void *v330;
  void *v331;
  id v332;
  id v333;
  id v334;
  uint64_t v335;
  __CFString *v336;
  unsigned int v337;
  id v338;
  id v339;
  id v340;
  void *v341;
  void *v342;
  uint64_t v343;
  unint64_t *v344;
  uint64_t *v345;
  id v346;
  uint64_t v347;
  uint64_t v348;
  void *v349;
  id v350;
  _QWORD *v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  void *v355;
  void *v356;
  void *v357;
  id v358;
  uint64_t v359;
  void *v360;
  void *v361;
  _QWORD *v362;
  void *v363;
  void *v364;
  id v365;
  id v366;
  void *v367;
  void *v368;
  void *v369;
  id v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  id MTLCompileOptions;
  id v375;
  void *v376;
  id v377;
  void *v378;
  id v379;
  void *v380;
  void *v381;
  void *v382;
  void *v383;
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  id v388;
  void *v389;
  void *v390;
  void *v391;
  id v392;
  id v393;
  id v394;
  id v395;
  uint64_t v396;
  apr_allocator_t *v397;
  uint64_t DylibObjectIDForParentLibrary;
  uint64_t v399;
  void *v400;
  void *v401;
  void *v402;
  int v403;
  id v404;
  void *v405;
  id v406;
  id v407;
  void *v408;
  id v409;
  void *v410;
  id v411;
  int v412;
  void *v413;
  id v414;
  void *v415;
  id v416;
  void *v417;
  id v418;
  void *v419;
  void *v420;
  void *v421;
  void *v422;
  void *v423;
  char DebugMetadata;
  uint64_t v425;
  apr_allocator_t *v426;
  unsigned int v427;
  int PSOCompute;
  uint64_t v429;
  uint64_t v430;
  id v431;
  unsigned __int8 *v432;
  unsigned int v433;
  void *v434;
  void *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  void *v439;
  void *v440;
  id v441;
  void *v442;
  id v443;
  void *v444;
  id v445;
  void *v446;
  id v447;
  void *v448;
  id v449;
  void *v450;
  id v451;
  void *v452;
  unsigned int *v453;
  unsigned int v454;
  id v455;
  id v456;
  void *v457;
  void *v458;
  char *v459;
  void *v460;
  void *v461;
  unsigned int v462;
  id v463;
  id v464;
  id TraceData;
  void *v466;
  id v467;
  void *v468;
  id ResourceMappings;
  void *v470;
  void *v471;
  void *v472;
  id v473;
  id v474;
  char v475;
  char v476;
  id v477;
  id v478;
  id v479;
  id v480;
  id v481;
  int v482;
  id v483;
  id v484;
  uint64_t v485;
  id v486;
  void *v487;
  uint64_t v488;
  char *v489;
  BOOL v490;
  id v491;
  void *v492;
  id v493;
  __int128 v494;
  id v495;
  id v496;
  void *v497;
  char *v498;
  unsigned int v499;
  void *v500;
  id v501;
  void *v503;
  void *v504;
  id v505;
  id v506;
  void *v507;
  uint64_t *obja;
  BOOL objb;
  id objc;
  id objd;
  uint64_t v513;
  id v514;
  uint64_t v515;
  void *v516;
  char *v517;
  uint64_t *v518;
  id v519;
  id v520;
  void *v521;
  id v522;
  id v523;
  id v524;
  void *v525;
  void *v526;
  id v527;
  id v528;
  id v529;
  id v530;
  unsigned int *v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  char v536;
  __int128 v537;
  id v538;
  __int128 v539;
  __int128 v540;
  uint64_t v541;
  uint64_t v542;
  id v543;
  uint64_t v544;
  __int128 v545;
  __int128 v546;
  id v547;
  unint64_t v548;
  apr_pool_t *p;
  id v550;
  id v551[3];
  void *v552;
  id v553[2];
  id v554[2];
  id v555;
  id v556;
  _BYTE __dst[11096];
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  void **v566;
  uint64_t v567;
  uint64_t (*v568)(uint64_t, void *, void *);
  void *v569;
  id v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;

  v3 = a2;
  v548 = 0;
  p = 0;
  v531 = 0;
  v546 = 0u;
  v547 = 0;
  v537 = 0u;
  v536 = 0;
  v532 = 0u;
  v533 = 0u;
  v534 = 0u;
  v535 = 0u;
  v538 = objc_alloc_init((Class)NSDictionary);

  v539 = 0u;
  v540 = 0u;

  v541 = 0;
  v542 = 0x7FFFFFFFFFFFFFFFLL;
  v543 = 0;

  v544 = 2;
  v545 = 0u;

  *(_QWORD *)&v546 = 0;
  apr_pool_create_ex(&p, 0, 0, v4);
  v5 = v3;
  v503 = v5;
  if (!v5)
  {
    if (a3)
    {
      Error = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: nil request"), 0, 0, 0);
      v70 = (id)objc_claimAutoreleasedReturnValue(Error);
LABEL_54:
      v72 = 0;
      v59 = 0;
LABEL_77:
      v95 = 0;
      *a3 = v70;
      goto LABEL_80;
    }
LABEL_55:
    v72 = 0;
    v59 = 0;
LABEL_79:
    v95 = 0;
    goto LABEL_80;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ProtocolVersion")));
  v7 = objc_msgSend(v6, "intValue");

  v8 = v503;
  if (v7)
    goto LABEL_34;
LABEL_8:
  v18 = v8;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerFunctionIndex")));
  v20 = (char *)objc_msgSend(v19, "unsignedIntegerValue");

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerSubCommandIndex")));
  v522 = objc_msgSend(v21, "unsignedIntegerValue");

  if (v20)
  {
    v22 = *a1;
    v23 = *(_QWORD *)(*(_QWORD *)(*a1 + 120) + 24);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerFunctionId")));
    v527 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerLibraryId")));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerLibraryType")));
    v517 = v20 - 1;
    if (objc_msgSend(v25, "isEqualToString:", CFSTR("Online")))
    {
      v26 = (unint64_t *)(v23 + ((_QWORD)v517 << 6));
      AliasStream = (uint64_t *)GetAliasStream(*(_QWORD *)(v22 + 24), (uint64_t)objc_msgSend(v527, "unsignedLongLongValue"), *v26);
      if (AliasStream)
        v28 = *AliasStream;
      else
        v28 = 0;
      Object = GTMTLSMContext_lastObject(**(_QWORD **)(v22 + 40), v28, *v26);
      if (!Object || *(_BYTE *)(Object + 161) != 2)
      {
        v17 = 0;
LABEL_31:

        goto LABEL_32;
      }
      v33 = StringFromArchive(*(_QWORD **)v22, a1[19], *(char **)(Object + 96));
      v29 = (void *)objc_claimAutoreleasedReturnValue(v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerInstrumentFunctions")));
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v28));
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "stringValue"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", v36));

      v38 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(v38, "setObject:forKeyedSubscript:", v29, CFSTR("Code"));
      if (objc_msgSend(v37, "count"))
        objc_msgSend(v38, "setObject:forKeyedSubscript:", v37, CFSTR("SelectFunctions"));
      v555 = v527;
      v39 = objc_msgSend(v38, "copy");
      v556 = v39;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v556, &v555, 1));

      v31 = CFSTR("SourceLibs");
    }
    else
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerInstrumentedMetallib")));
      v555 = v527;
      v556 = v29;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v556, &v555, 1));
      v31 = CFSTR("MetalLibs");
    }

    v552 = v24;
    v553[0] = (id)v31;
    v553[1] = CFSTR("FunctionUIDs");
    v554[0] = v30;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v552, 1));
    v554[1] = v40;
    v513 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v554, v553, 2));

    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerTraceBufferSize")));
    v42 = objc_msgSend(v41, "unsignedIntegerValue");

    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerPipelineCreationTimeout")));
    v44 = objc_msgSend(v43, "unsignedIntegerValue");

    v551[0] = CFSTR("TraceBufferSize");
    v45 = (void **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v42));
    v566 = v45;
    v551[1] = CFSTR("PSOCompileTimeout");
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v44));
    v551[2] = CFSTR("SkipMetadataGen");
    v567 = (uint64_t)v46;
    v568 = (uint64_t (*)(uint64_t, void *, void *))&__kCFBooleanFalse;
    v527 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v566, v551, 3));

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIType")));
    switch((unint64_t)objc_msgSend(v25, "unsignedIntegerValue"))
    {
      case 0uLL:
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMinPositionX")));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMinPositionY")));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMinPositionZ")));
        v504 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMaxPositionX")));
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMaxPositionY")));
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMaxPositionZ")));
        *(_QWORD *)&v558 = CFSTR("Type");
        *((_QWORD *)&v558 + 1) = CFSTR("MinPositionX");
        *(_QWORD *)__dst = &off_739DD8;
        *(_QWORD *)&__dst[8] = v47;
        *(_QWORD *)&v559 = CFSTR("MinPositionY");
        *((_QWORD *)&v559 + 1) = CFSTR("MinPositionZ");
        *(_QWORD *)&__dst[16] = v48;
        *(_QWORD *)&__dst[24] = v49;
        *(_QWORD *)&v560 = CFSTR("MaxPositionX");
        *((_QWORD *)&v560 + 1) = CFSTR("MaxPositionY");
        *(_QWORD *)&__dst[32] = v504;
        *(_QWORD *)&__dst[40] = v50;
        *(_QWORD *)&v561 = CFSTR("MaxPositionZ");
        *(_QWORD *)&__dst[48] = v51;
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", __dst, &v558, 7));
        goto LABEL_24;
      case 1uLL:
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIInstanceId")));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIAmplificationId")));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIVertexIds")));
        *(_QWORD *)&v558 = CFSTR("Type");
        *((_QWORD *)&v558 + 1) = CFSTR("InstanceID");
        *(_QWORD *)__dst = &off_739DA8;
        *(_QWORD *)&__dst[8] = v47;
        *(_QWORD *)&v559 = CFSTR("AmplificationID");
        *((_QWORD *)&v559 + 1) = CFSTR("VertexIDs");
        *(_QWORD *)&__dst[16] = v48;
        *(_QWORD *)&__dst[24] = v49;
        v54 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", __dst, &v558, 4));
        goto LABEL_27;
      case 2uLL:
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMinPositionX")));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMinPositionY")));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMaxPositionX")));
        v504 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMaxPositionY")));
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMinSampleId")));
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIMaxSampleId")));
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIRenderTargetArrayIndex")));
        *(_QWORD *)&v558 = CFSTR("Type");
        *((_QWORD *)&v558 + 1) = CFSTR("MinPositionX");
        *(_QWORD *)__dst = &off_739DC0;
        *(_QWORD *)&__dst[8] = v47;
        *(_QWORD *)&v559 = CFSTR("MinPositionY");
        *((_QWORD *)&v559 + 1) = CFSTR("MaxPositionX");
        *(_QWORD *)&__dst[16] = v48;
        *(_QWORD *)&__dst[24] = v49;
        *(_QWORD *)&v560 = CFSTR("MaxPositionY");
        *((_QWORD *)&v560 + 1) = CFSTR("MinSampleID");
        *(_QWORD *)&__dst[32] = v504;
        *(_QWORD *)&__dst[40] = v50;
        *(_QWORD *)&v561 = CFSTR("MaxSampleID");
        *((_QWORD *)&v561 + 1) = CFSTR("RenderTargetArrayIndex");
        *(_QWORD *)&__dst[48] = v51;
        *(_QWORD *)&__dst[56] = v53;
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", __dst, &v558, 8));

LABEL_24:
        goto LABEL_28;
      case 3uLL:
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIInstanceId")));
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIAmplificationId")));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("DYMTLShaderDebuggerROIPatchIds")));
        *(_QWORD *)&v558 = CFSTR("Type");
        *((_QWORD *)&v558 + 1) = CFSTR("InstanceID");
        *(_QWORD *)__dst = &off_739DF0;
        *(_QWORD *)&__dst[8] = v47;
        *(_QWORD *)&v559 = CFSTR("AmplificationID");
        *((_QWORD *)&v559 + 1) = CFSTR("PatchIDs");
        *(_QWORD *)&__dst[16] = v48;
        *(_QWORD *)&__dst[24] = v49;
        v54 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", __dst, &v558, 4));
LABEL_27:
        v52 = (void *)v54;
LABEL_28:

        *(_QWORD *)&v571 = &off_739DC0;
        *(_QWORD *)&v562 = CFSTR("ProtocolVersion");
        *((_QWORD *)&v562 + 1) = CFSTR("FunctionIndex");
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v517));
        *((_QWORD *)&v571 + 1) = v55;
        *(_QWORD *)&v563 = CFSTR("SubCommandIndex");
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v522));
        *(_QWORD *)&v572 = v56;
        *((_QWORD *)&v572 + 1) = v513;
        *((_QWORD *)&v563 + 1) = CFSTR("Program");
        *(_QWORD *)&v564 = CFSTR("ROI");
        *((_QWORD *)&v564 + 1) = CFSTR("Options");
        *(_QWORD *)&v573 = v52;
        *((_QWORD *)&v573 + 1) = v527;
        v17 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v571, &v562, 6));

        break;
      default:
        GTMTLReplay_handleError(101, (uint64_t)"Unknown region of interest type", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_shaderDebugger_internal.m", (uint64_t)"_UpgradeRequest_to_StarSkyE_from_StarSky", 759, 4);
        v17 = 0;
        break;
    }
    v24 = (void *)v513;
    goto LABEL_31;
  }
  v17 = 0;
LABEL_32:

  while (1)
  {
    v57 = v17;

    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "objectForKeyedSubscript:", CFSTR("ProtocolVersion")));
    v7 = objc_msgSend(v58, "intValue");

    v8 = v57;
    if (!v7)
      goto LABEL_8;
LABEL_34:
    if (v7 != 2)
      break;
    v9 = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("Program")));
    v11 = objc_msgSend(v10, "mutableCopy");

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("UseGlobalRelocation")));
    if (objc_msgSend(v12, "BOOLValue"))
      v13 = 2;
    else
      v13 = 0;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v13));
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v14, CFSTR("TraceBufferBindingType"));

    v15 = objc_msgSend(v9, "mutableCopy");
    v16 = objc_msgSend(v11, "copy");
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, CFSTR("Program"));

    objc_msgSend(v15, "setObject:forKeyedSubscript:", &off_739DD8, CFSTR("ProtocolVersion"));
    v17 = objc_msgSend(v15, "copy");

  }
  if (v7 != 3)
  {
    while (1)
      ;
  }
  if (!v8)
  {
    if (a3)
    {
      v71 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: Unexpected request: Upgrade failure"), 0, 0, 0);
      v70 = (id)objc_claimAutoreleasedReturnValue(v71);
      goto LABEL_54;
    }
    goto LABEL_55;
  }
  v59 = v8;
  v571 = 0u;
  v572 = 0u;
  v573 = 0u;
  v574 = 0u;
  v60 = objc_msgSend(&off_738C40, "countByEnumeratingWithState:objects:count:", &v571, __dst, 16);
  if (v60)
  {
    v61 = *(_QWORD *)v572;
    while (2)
    {
      for (i = 0; i != v60; i = (char *)i + 1)
      {
        if (*(_QWORD *)v572 != v61)
          objc_enumerationMutation(&off_738C40);
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v571 + 1) + 8 * (_QWORD)i)));
        v64 = v63 == 0;

        if (v64)
        {

          goto LABEL_75;
        }
      }
      v60 = objc_msgSend(&off_738C40, "countByEnumeratingWithState:objects:count:", &v571, __dst, 16);
      if (v60)
        continue;
      break;
    }
  }
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Program")));
  v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", CFSTR("FunctionUIDs")));
  v67 = v66 == 0;

  if (v67)
    goto LABEL_74;
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", CFSTR("MetalLibs")));
  if (!v68)
  {
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", CFSTR("SourceLibs")));
    v74 = v73 == 0;

    if (!v74)
      goto LABEL_57;
LABEL_74:

    goto LABEL_75;
  }

LABEL_57:
  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("ROI")));
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", CFSTR("Type")));
  v77 = v76;
  if (!v76 || (v78 = (unint64_t)objc_msgSend(v76, "unsignedIntegerValue") - 1, v78 > 5))
  {
LABEL_73:

LABEL_75:
    if (a3)
    {
      v94 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: Invalid request"), 0, 0, 0);
      v70 = (id)objc_claimAutoreleasedReturnValue(v94);
      v72 = 0;
      goto LABEL_77;
    }
    v72 = 0;
    goto LABEL_79;
  }
  v79 = off_726A10[v78];
  v565 = 0u;
  v564 = 0u;
  v563 = 0u;
  v562 = 0u;
  v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v562, &v558, 16);
  if (v80)
  {
    v81 = *(_QWORD *)v563;
LABEL_61:
    v82 = 0;
    while (1)
    {
      if (*(_QWORD *)v563 != v81)
        objc_enumerationMutation(v79);
      v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v562 + 1) + 8 * v82)));
      v84 = v83 == 0;

      if (v84)
        goto LABEL_73;
      if (v80 == (id)++v82)
      {
        v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v562, &v558, 16);
        if (v80)
          goto LABEL_61;
        break;
      }
    }
  }

  v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Options")));
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKeyedSubscript:", CFSTR("SkipMetadataGen")));

  v87 = objc_msgSend(v86, "BOOLValue");
  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Options")));
  v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("SaveTempsDir")));

  if (objc_msgSend(v89, "length"))
    v90 = v87 ^ 1 | 8;
  else
    v90 = v87 ^ 1;
  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectForKeyedSubscript:", CFSTR("Program")));
  v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "objectForKeyedSubscript:", CFSTR("TraceBufferBindingType")));

  v93 = objc_msgSend(v92, "integerValue");
  if (v93 == 2)
  {
    v90 |= 4uLL;
  }
  else if (v93 == 1)
  {
    v90 |= 2uLL;
  }

  v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1[1], "defaultDevice"));
  v173 = objc_msgSend(v172, "supportsFamily:", 1001);

  if (v173)
    v72 = v90;
  else
    v72 = v90 | 0x10;
  v59 = v59;
  v95 = v59;
LABEL_80:

  if (!v95)
  {
LABEL_138:

    goto LABEL_139;
  }
  v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "objectForKeyedSubscript:", CFSTR("FunctionIndex")));
  v97 = objc_msgSend(v96, "unsignedIntValue");

  v98 = *(_QWORD *)(*(_QWORD *)(*a1 + 120) + 24);
  if ((v72 & 1) != 0)
  {
    if (_IsLLVMDylibLoaded_onceToken != -1)
      dispatch_once(&_IsLLVMDylibLoaded_onceToken, &__block_literal_global_7110);
    if ((_IsLLVMDylibLoaded_llvmLoaded & 1) == 0)
    {
      v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "infoDictionary"));

      v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("DTPlatformName")));
      v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("DTPlatformVersion")));
      if (objc_msgSend(v105, "length") && objc_msgSend(v106, "length"))
      {
        v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_739478, "objectForKeyedSubscript:", v105));
        v108 = v107;
        if (v107)
        {
          v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "stringByAppendingString:", v106));
          v110 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "stringByAppendingString:", CFSTR(" or later")));

        }
        else
        {
          v110 = 0;
        }

      }
      else
      {
        v110 = 0;
      }
      if (v110)
        v157 = v110;
      else
        v157 = CFSTR("the latest version available");
      v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Please update your target OS to "), "stringByAppendingString:", v157));
      if (a3)
      {
        v159 = GTShaderDebuggerMakeError(4u, CFSTR("Debugging information not available from the target OS"), v158, 0, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v159);
      }

      goto LABEL_137;
    }
  }
  if ((v72 & 4) == 0)
    goto LABEL_86;
  v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1[1], "defaultDevice"));
  if ((objc_opt_respondsToSelector(v102, "supportsTLS") & 1) == 0 || !objc_msgSend(v102, "supportsTLS"))
    goto LABEL_127;
  if ((objc_opt_respondsToSelector(v102, "supportsGlobalVariableRelocationCompute") & 1) != 0)
    v103 = objc_msgSend(v102, "supportsGlobalVariableRelocationCompute") ^ 1;
  else
    v103 = 1;
  if ((objc_opt_respondsToSelector(v102, "supportsGlobalVariableRelocationRender") & 1) != 0)
    v154 = objc_msgSend(v102, "supportsGlobalVariableRelocationRender") ^ 1;
  else
    v154 = 1;
  v155 = *(_DWORD *)(v98 + ((unint64_t)v97 << 6) + 8);
  if ((v155 + 16079) >= 2 && v155 != -16327 && v155 != -16220)
  {
    if ((v154 & 1) == 0)
      goto LABEL_156;
LABEL_127:
    if (a3)
    {
      v156 = GTShaderDebuggerMakeError(4u, CFSTR("The metal device does not support debugging shaders in pipelines created with multiple metal libraries"), 0, 0, 0);
      *a3 = (id)objc_claimAutoreleasedReturnValue(v156);
    }
LABEL_137:

    goto LABEL_138;
  }
  if (v103)
    goto LABEL_127;
LABEL_156:

LABEL_86:
  v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v503, "objectForKeyedSubscript:", CFSTR("Options")));
  v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "objectForKeyedSubscript:", CFSTR("SaveTempsDir")));

  if (objc_msgSend(v100, "length"))
  {
    v101 = v100;
  }
  else
  {
    v111 = NSTemporaryDirectory();
    v101 = (id)objc_claimAutoreleasedReturnValue(v111);
  }
  v112 = v101;
  v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "stringByAppendingPathComponent:", CFSTR("GTMTLReplay_ShaderDebugger")));
  v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v550 = 0;
  v115 = objc_msgSend(v114, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v113, 1, 0, &v550);
  v116 = v550;

  if ((v115 & 1) != 0)
  {
    v531 = (unsigned int *)a1;
    objc_storeStrong((id *)&v546 + 1, v95);
    objc_storeStrong(&v547, v113);
    v548 = v72;
  }
  else if (a3)
  {
    v117 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error"), 0, v116, 0);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v117);
  }

  if ((v115 & 1) == 0)
    goto LABEL_139;
  v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&v546 + 1), "objectForKeyedSubscript:", CFSTR("FunctionIndex")));
  v119 = objc_msgSend(v118, "unsignedIntValue");

  v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&v546 + 1), "objectForKeyedSubscript:", CFSTR("SubCommandIndex")));
  v121 = objc_msgSend(v120, "unsignedIntValue");

  v122 = v531;
  v123 = v119 + 1;
  GTMTLReplayController_debugSubCommandResume(v531, v123, v121);
  v124 = v531[2828];
  if (v124 != 28 && v124 != 70)
  {
    v142 = v124 - 1;
    if (v142 > 0x55)
      v143 = "Unknown";
    else
      v143 = (&off_727958)[v142];
    v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v143));
    v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unsupported encoder: \"%@\""), v162));

    if (a3)
    {
      v164 = GTShaderDebuggerMakeError(4u, v163, 0, 0, 0);
      *a3 = (id)objc_claimAutoreleasedReturnValue(v164);
    }

    goto LABEL_139;
  }
  v531[5620] = v123;
  v122[5621] = v121;
  v125 = v531;
  v126 = (uint64_t *)(v531 + 5620);
  v127 = v531[5620];
  v128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v531 + 120) + 24);
  v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&v546 + 1), "objectForKeyedSubscript:", CFSTR("ROI")));
  v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "objectForKeyedSubscript:", CFSTR("Type")));
  v499 = objc_msgSend(v130, "integerValue");

  v131 = v128 + ((unint64_t)(v127 - 1) << 6);
  if (*(_DWORD *)(v131 + 8) >> 2 == 1073737833)
  {
    v132 = apr_palloc(p, 0xD0uLL);
    v133 = (uint64_t)v132;
    if (v132)
    {
      v132[11] = 0u;
      v132[12] = 0u;
      v132[9] = 0u;
      v132[10] = 0u;
      v132[7] = 0u;
      v132[8] = 0u;
      v132[5] = 0u;
      v132[6] = 0u;
      v132[3] = 0u;
      v132[4] = 0u;
      v132[1] = 0u;
      v132[2] = 0u;
      *v132 = 0u;
    }
    v134 = *(_QWORD *)v125;
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)__dst, *(_DWORD ***)(*(_QWORD *)v125 + 40), *(_QWORD *)v131, p);
    v135 = *(_OWORD *)&__dst[48];
    *(_OWORD *)(v133 + 144) = *(_OWORD *)&__dst[32];
    *(_OWORD *)(v133 + 160) = v135;
    *(_OWORD *)(v133 + 176) = *(_OWORD *)&__dst[64];
    *(_QWORD *)(v133 + 192) = *(_QWORD *)&__dst[80];
    v136 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(v133 + 112) = *(_OWORD *)__dst;
    *(_OWORD *)(v133 + 128) = v136;
    *(_QWORD *)&v560 = 0;
    v559 = 0u;
    v558 = 0u;
    GetExecuteCommandsInBufferArgs((uint64_t)&v558, v131, *(_QWORD *)(v134 + 16));
    v137 = GTMTLSMContext_getObject(**(_QWORD **)(v134 + 40), v558, *(_QWORD *)v131);
    GTMTLCreateIndirectCommandEncoder(v133, v137[13]);
    v138 = *((_QWORD *)&v559 + 1) + *(_QWORD *)(v133 + 104) * *((unsigned int *)v126 + 1);
    *(_QWORD *)(v133 + 200) = v138;
    if (v125[2828] == 70)
    {
      memcpy(__dst, v125 + 2842, sizeof(__dst));
      if (GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)(v125 + 2842), (_QWORD *)v133, *(_QWORD *)(v133 + 200), (uint64_t *)(v133 + 112)))
      {
        v139 = *((_QWORD *)v125 + 1415);
        v140 = *((id *)v125 + 1);
        v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "renderCommandEncoderForKey:", v139));
        GTMTLReplayController_restoreRenderCommandEncoder(v141, (uint64_t)__dst, (uint64_t)(v125 + 2842), v140);

        goto LABEL_114;
      }
LABEL_148:
      if (!a3)
        goto LABEL_139;
      v168 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: Failed to decode ICB"), 0, 0, 0);
      v169 = (id)objc_claimAutoreleasedReturnValue(v168);
      goto LABEL_150;
    }
    if ((GT_SUPPORT_0 & 0x10) == 0)
      goto LABEL_148;
    memcpy(__dst, v125 + 2842, 0x8D0uLL);
    if (!GTMTLSMComputeCommandEncoder_loadIndirectCommand((uint64_t)(v125 + 2842), (_QWORD *)v133, v138, (uint64_t *)(v133 + 112)))goto LABEL_148;
    v165 = *((_QWORD *)v125 + 1415);
    v166 = *((id *)v125 + 1);
    v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v166, "computeCommandEncoderForKey:", v165));
    GTMTLReplayController_restoreComputeCommandEncoder(v167, (uint64_t)__dst, (uint64_t)(v125 + 2842), v166);

  }
  else
  {
    v133 = 0;
  }
LABEL_114:
  v144 = *(_QWORD *)v131;
  v145 = v531[2828];
  *(_QWORD *)&v494 = v133;
  *((_QWORD *)&v494 + 1) = v131;
  if (v145 == 70)
  {
    v170 = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)v531 + 40), *((_QWORD *)v531 + 2489), v144);
    if (v170)
    {
      v171 = v170[7];
      if (v171)
      {
        switch(v499)
        {
          case 1u:
          case 4u:
            v148 = (uint64_t *)(v171 + 24);
            v149 = (_WORD *)(v171 + 198);
            v150 = (uint64_t *)(v531 + 2848);
            v151 = (uint64_t *)(v531 + 3034);
            v152 = (uint64_t *)(v531 + 3290);
            v518 = (uint64_t *)(v531 + 2844);
            v153 = 2910;
            goto LABEL_433;
          case 2u:
            v148 = (uint64_t *)(v171 + 32);
            v149 = (_WORD *)(v171 + 200);
            v150 = (uint64_t *)(v531 + 3324);
            v151 = (uint64_t *)(v531 + 3448);
            v152 = (uint64_t *)(v531 + 3704);
            v518 = (uint64_t *)(v531 + 3322);
            v153 = 3386;
            goto LABEL_433;
          case 3u:
            v148 = (uint64_t *)(v171 + 56);
            v149 = (_WORD *)(v171 + 202);
            v150 = (uint64_t *)(v531 + 4566);
            v151 = (uint64_t *)(v531 + 4690);
            v152 = (uint64_t *)(v531 + 4946);
            v518 = (uint64_t *)(v531 + 4564);
            v153 = 4628;
            goto LABEL_433;
          case 5u:
            v148 = (uint64_t *)(v171 + 40);
            v149 = (_WORD *)(v171 + 204);
            v150 = (uint64_t *)(v531 + 3738);
            v151 = (uint64_t *)(v531 + 3862);
            v152 = (uint64_t *)(v531 + 4118);
            v518 = (uint64_t *)(v531 + 3736);
            v153 = 3800;
            goto LABEL_433;
          case 6u:
            v148 = (uint64_t *)(v171 + 48);
            v149 = (_WORD *)(v171 + 206);
            v150 = (uint64_t *)(v531 + 4152);
            v151 = (uint64_t *)(v531 + 4276);
            v152 = (uint64_t *)(v531 + 4532);
            v518 = (uint64_t *)(v531 + 4150);
            v153 = 4214;
            goto LABEL_433;
          default:
            GTMTLReplay_handleError(101, (uint64_t)"Unreachable", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_shaderDebugger_internal.m", (uint64_t)"_SetCurrentEncoderResourceBindings", 934, 4);
            goto LABEL_163;
        }
      }
    }
    goto LABEL_163;
  }
  if (v145 != 28
    || (v146 = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)v531 + 40), *((_QWORD *)v531 + 1422), v144)) == 0
    || (v147 = v146[8]) == 0)
  {
LABEL_163:
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v518 = 0;
    obja = 0;
    v174 = 0;
    v175 = 0;
    v176 = 0;
    v177 = 1;
    goto LABEL_164;
  }
  v148 = (uint64_t *)(v147 + 32);
  v149 = (_WORD *)(v147 + 94);
  v150 = (uint64_t *)(v531 + 2850);
  v151 = (uint64_t *)(v531 + 3036);
  v152 = (uint64_t *)(v531 + 3292);
  v518 = (uint64_t *)(v531 + 2846);
  v153 = 2912;
LABEL_433:
  obja = (uint64_t *)&v531[v153];
  v177 = 0;
  v429 = (unsigned __int16)*v149;
  v176 = 16;
  v175 = 128;
  v174 = 31;
  if (*v149)
  {
    v430 = *v148;
    if (*v148)
    {
      v514 = objc_alloc_init((Class)NSMutableDictionary);
      v505 = objc_alloc_init((Class)NSMutableDictionary);
      v528 = objc_alloc_init((Class)NSMutableDictionary);
      v523 = objc_alloc_init((Class)NSMutableDictionary);
      v431 = objc_alloc_init((Class)NSMutableDictionary);
      v493 = objc_alloc_init((Class)NSMutableDictionary);
      v432 = (unsigned __int8 *)(v430 + 18);
      while (1)
      {
        v433 = *(v432 - 2);
        if (v433 > 2)
        {
          if (v433 == 3)
          {
            v434 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v152[*v432]));
            v435 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v432));
            objc_msgSend(v523, "setObject:forKeyedSubscript:", v434, v435);
            goto LABEL_447;
          }
          if (v433 == 24)
          {
            v434 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v150[*v432]));
            v435 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v432));
            objc_msgSend(v431, "setObject:forKeyedSubscript:", v434, v435);
            goto LABEL_447;
          }
        }
        else
        {
          if (!*(v432 - 2))
          {
            v436 = *v432;
            v437 = v150[v436];
            if (((*(unint64_t *)((char *)v518 + ((v436 >> 3) & 0x18)) >> v436) & 1) != 0)
            {
              v438 = obja[v436];
              v434 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v437));
              *(_QWORD *)__dst = v434;
              v435 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v438));
              *(_QWORD *)&__dst[8] = v435;
              v439 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", __dst, 2));
              v440 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v432));
              objc_msgSend(v514, "setObject:forKeyedSubscript:", v439, v440);

            }
            else
            {
              v434 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v437));
              v435 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v432));
              objc_msgSend(v505, "setObject:forKeyedSubscript:", v434, v435);
            }
            goto LABEL_447;
          }
          if (v433 == 2)
          {
            v434 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v151[*v432]));
            v435 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v432));
            objc_msgSend(v528, "setObject:forKeyedSubscript:", v434, v435);
LABEL_447:

          }
        }
        v432 += 56;
        if (!--v429)
        {
          v441 = objc_msgSend(v514, "copy");
          v442 = (void *)v533;
          *(_QWORD *)&v533 = v441;

          v443 = objc_msgSend(v505, "copy");
          v444 = (void *)*((_QWORD *)&v533 + 1);
          *((_QWORD *)&v533 + 1) = v443;

          v445 = objc_msgSend(v528, "copy");
          v446 = (void *)v534;
          *(_QWORD *)&v534 = v445;

          v447 = objc_msgSend(v523, "copy");
          v448 = (void *)*((_QWORD *)&v534 + 1);
          *((_QWORD *)&v534 + 1) = v447;

          v449 = objc_msgSend(v431, "copy");
          v450 = (void *)v535;
          *(_QWORD *)&v535 = v449;

          v451 = objc_msgSend(v493, "copy");
          v452 = (void *)*((_QWORD *)&v535 + 1);
          *((_QWORD *)&v535 + 1) = v451;

          v200 = 1;
          goto LABEL_181;
        }
      }
    }
  }
LABEL_164:
  v514 = objc_alloc_init((Class)NSMutableDictionary);
  v505 = objc_alloc_init((Class)NSMutableDictionary);
  v528 = objc_alloc_init((Class)NSMutableDictionary);
  v523 = objc_alloc_init((Class)NSMutableDictionary);
  if ((v177 & 1) == 0)
  {
    v178 = 0;
    do
    {
      if (v151[v178])
      {
        v179 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
        v180 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v178));
        objc_msgSend(v528, "setObject:forKeyedSubscript:", v179, v180);

      }
      ++v178;
    }
    while (v175 != v178);
    v181 = 0;
    do
    {
      if (v152[v181])
      {
        v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
        v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v181));
        objc_msgSend(v523, "setObject:forKeyedSubscript:", v182, v183);

      }
      ++v181;
    }
    while (v176 != v181);
    v184 = 0;
    do
    {
      if (v150[v184])
      {
        if ((((unint64_t)v518[v184 >> 6] >> v184) & 1) != 0)
        {
          v185 = obja[v184];
          v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
          *(_QWORD *)__dst = v186;
          v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v185));
          *(_QWORD *)&__dst[8] = v187;
          v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", __dst, 2));
          v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v184));
          objc_msgSend(v514, "setObject:forKeyedSubscript:", v188, v189);

        }
        else
        {
          v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
          v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v184));
          objc_msgSend(v505, "setObject:forKeyedSubscript:", v186, v187);
        }

      }
      ++v184;
    }
    while (v174 != v184);
  }
  v190 = objc_msgSend(v514, "copy");
  v191 = (void *)v533;
  *(_QWORD *)&v533 = v190;

  v192 = objc_msgSend(v505, "copy");
  v193 = (void *)*((_QWORD *)&v533 + 1);
  *((_QWORD *)&v533 + 1) = v192;

  v194 = objc_msgSend(v528, "copy");
  v195 = (void *)v534;
  *(_QWORD *)&v534 = v194;

  v196 = objc_msgSend(v523, "copy");
  v197 = (void *)*((_QWORD *)&v534 + 1);
  *((_QWORD *)&v534 + 1) = v196;

  v198 = (void *)v535;
  *(_QWORD *)&v535 = &__NSDictionary0__struct;

  v199 = (void *)*((_QWORD *)&v535 + 1);
  *((_QWORD *)&v535 + 1) = &__NSDictionary0__struct;

  v200 = objc_msgSend(v505, "count") == 0;
LABEL_181:
  objb = v200;

  v515 = *(_QWORD *)v531;
  InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v531 + 112) + 12), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v531 + 112) + 24), v531[5620]);
  if (InclusiveRange)
  {
    do
    {
      CommandEncoder = IsFuncEnumCreateCommandEncoder(*((_DWORD *)InclusiveRange + 7));
      if (CommandEncoder)
        break;
      v203 = *((unsigned int *)InclusiveRange + 4);
      if ((_DWORD)v203)
        InclusiveRange -= 4 * v203;
      else
        InclusiveRange = 0;
    }
    while (InclusiveRange);
    v204 = !CommandEncoder;
  }
  else
  {
    v204 = 1;
  }
  if (objb)
  {
    v506 = 0;
    v519 = 0;
  }
  else
  {
    v519 = objc_alloc_init((Class)NSMutableDictionary);
    v506 = objc_alloc_init((Class)NSMutableDictionary);
  }
  v529 = objc_alloc_init((Class)NSMutableOrderedSet);
  v524 = objc_alloc_init((Class)NSMutableOrderedSet);
  if ((v204 & 1) != 0)
  {
    v205 = 0;
  }
  else
  {
    v206 = *InclusiveRange + 1;
    if (v206 >= InclusiveRange[1])
    {
      v490 = 0;
    }
    else
    {
      v490 = 0;
      v488 = (int)(v499 - 1);
      do
      {
        v207 = *(_QWORD *)(*(_QWORD *)(v515 + 120) + 24);
        v208 = v207 + (v206 << 6);
        v211 = *(_DWORD *)(v208 + 8);
        v210 = (int *)(v208 + 8);
        v209 = v211;
        if (v211 > -15820)
        {
          switch(v209)
          {
            case -15819:
              v231 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
              if (v488 > 5)
                v232 = 0;
              else
                v232 = qword_4A8800[v488];
              if ((*((_QWORD *)v231 + 3) & v232) != 0)
              {
                v241 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v231 + 1)));
                objc_msgSend(v529, "addObject:", v241);

              }
              break;
            case -15818:
              v233 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
              v234 = v233;
              if (v488 > 5)
                v235 = 0;
              else
                v235 = qword_4A8800[v488];
              if ((*((_QWORD *)v233 + 3) & v235) != 0)
              {
                v242 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v233[32], *(_QWORD *)(v515 + 16));
                if (*((_QWORD *)v234 + 1))
                {
                  v243 = v242;
                  v244 = 0;
                  do
                  {
                    v245 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)&v243[8 * v244]));
                    objc_msgSend(v529, "addObject:", v245);

                    ++v244;
                  }
                  while (v244 < *((_QWORD *)v234 + 1));
                }
              }
              break;
            case -15732:
              v490 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16))+ 2) != 0;
              break;
          }
        }
        else
        {
          switch(v209)
          {
            case -16047:
            case -16043:
              v212 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16))+ 1));
              v213 = (void *)objc_claimAutoreleasedReturnValue(v212);
              objc_msgSend(v529, "addObject:", v213);

              break;
            case -16046:
              v221 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
              v222 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v221[24], *(_QWORD *)(v515 + 16));
              if (*((_QWORD *)v221 + 1))
              {
                v223 = v222;
                v224 = 0;
                do
                {
                  v225 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)&v223[8 * v224]));
                  objc_msgSend(v529, "addObject:", v225);

                  ++v224;
                }
                while (v224 < *((_QWORD *)v221 + 1));
              }
              break;
            case -16045:
            case -16041:
              v214 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16))+ 1));
              v215 = (void *)objc_claimAutoreleasedReturnValue(v214);
              objc_msgSend(v524, "addObject:", v215);

              break;
            case -16044:
              v216 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
              v217 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v216[16], *(_QWORD *)(v515 + 16));
              if (*((_QWORD *)v216 + 1))
              {
                v218 = v217;
                v219 = 0;
                do
                {
                  v220 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)&v218[8 * v219]));
                  objc_msgSend(v524, "addObject:", v220);

                  ++v219;
                }
                while (v219 < *((_QWORD *)v216 + 1));
              }
              break;
            case -16042:
              v236 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
              v237 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v236[24], *(_QWORD *)(v515 + 16));
              if (*((_QWORD *)v236 + 1))
              {
                v238 = v237;
                v239 = 0;
                do
                {
                  v240 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)&v238[8 * v239]));
                  objc_msgSend(v529, "addObject:", v240);

                  ++v239;
                }
                while (v239 < *((_QWORD *)v236 + 1));
              }
              break;
            case -16040:
              v226 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
              v227 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v226[16], *(_QWORD *)(v515 + 16));
              if (*((_QWORD *)v226 + 1))
              {
                v228 = v227;
                v229 = 0;
                do
                {
                  v230 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)&v228[8 * v229]));
                  objc_msgSend(v524, "addObject:", v230);

                  ++v229;
                }
                while (v229 < *((_QWORD *)v226 + 1));
              }
              break;
            default:
              break;
          }
        }
        if (!objb)
        {
          v246 = *v210;
          switch(*v210)
          {
            case -15456:
              if (v499 == 2)
                goto LABEL_260;
              break;
            case -15455:
              if (v499 == 2)
              {
                v264 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
                v265 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v264[24], *(_QWORD *)(v515 + 16));
                v266 = *((_QWORD *)v264 + 2);
                if (v266)
                {
                  v267 = v265;
                  v268 = *((_QWORD *)v264 + 1);
                  do
                  {
                    v269 = *(_QWORD *)v267;
                    v267 += 8;
                    v270 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v269));
                    v271 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v268));
                    objc_msgSend(v519, "setObject:forKeyedSubscript:", v270, v271);

                    ++v268;
                    --v266;
                  }
                  while (v266);
                }
              }
              break;
            case -15454:
            case -15453:
            case -15452:
            case -15449:
            case -15448:
            case -15447:
              break;
            case -15451:
              if (v499 == 3)
                goto LABEL_260;
              break;
            case -15450:
              if (v499 == 3)
              {
                v256 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
                v257 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v256[24], *(_QWORD *)(v515 + 16));
                v258 = *((_QWORD *)v256 + 2);
                if (!v258)
                  goto LABEL_260;
                v259 = v257;
                v260 = *((_QWORD *)v256 + 1);
                do
                {
                  v261 = *(_QWORD *)v259;
                  v259 += 8;
                  v262 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v261));
                  v263 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v260));
                  objc_msgSend(v519, "setObject:forKeyedSubscript:", v262, v263);

                  ++v260;
                  --v258;
                }
                while (v258);
                goto LABEL_250;
              }
              break;
            case -15446:
              if (v499 == 1)
                goto LABEL_260;
              break;
            case -15445:
              if (v499 == 1)
              {
                v275 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
                v276 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v275[24], *(_QWORD *)(v515 + 16));
                v277 = *((_QWORD *)v275 + 2);
                if (v277)
                {
                  v278 = v276;
                  v279 = *((_QWORD *)v275 + 1);
                  do
                  {
                    v280 = *(_QWORD *)v278;
                    v278 += 8;
                    v281 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v280));
                    v282 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v279));
                    objc_msgSend(v519, "setObject:forKeyedSubscript:", v281, v282);

                    ++v279;
                    --v277;
                  }
                  while (v277);
                }
              }
              break;
            default:
              if (v246 == -15581)
              {
LABEL_250:
                if (v499 == 3)
                {
LABEL_260:
                  v272 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
                  v273 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v272 + 1)));
                  v274 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v272 + 2)));
                  objc_msgSend(v519, "setObject:forKeyedSubscript:", v273, v274);

                }
              }
              else if (v246 == -15580 && v499 == 3)
              {
                v248 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), *(unsigned __int8 *)(v207 + (v206 << 6) + 13), *(_QWORD *)(v515 + 16));
                v249 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v207 + (v206 << 6)), v248[24], *(_QWORD *)(v515 + 16));
                v250 = *((_QWORD *)v248 + 2);
                if (v250)
                {
                  v251 = v249;
                  v252 = *((_QWORD *)v248 + 1);
                  do
                  {
                    v253 = *(_QWORD *)v251;
                    v251 += 8;
                    v254 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v253));
                    v255 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v252));
                    objc_msgSend(v519, "setObject:forKeyedSubscript:", v254, v255);

                    ++v252;
                    --v250;
                  }
                  while (v250);
                }
              }
              break;
          }
        }
        ++v206;
      }
      while (v206 < InclusiveRange[1]);
    }
    v205 = v490;
  }
  if (!objb && (objc_msgSend(v519, "count") || objc_msgSend(v506, "count")))
  {
    v283 = objc_msgSend(*((id *)&v533 + 1), "mutableCopy");
    v573 = 0u;
    v574 = 0u;
    v571 = 0u;
    v572 = 0u;
    v284 = v519;
    v285 = objc_msgSend(v284, "countByEnumeratingWithState:objects:count:", &v571, __dst, 16);
    if (v285)
    {
      v286 = *(_QWORD *)v572;
      do
      {
        for (j = 0; j != v285; j = (char *)j + 1)
        {
          if (*(_QWORD *)v572 != v286)
            objc_enumerationMutation(v284);
          objc_msgSend(v283, "removeObjectForKey:", *(_QWORD *)(*((_QWORD *)&v571 + 1) + 8 * (_QWORD)j));
        }
        v285 = objc_msgSend(v284, "countByEnumeratingWithState:objects:count:", &v571, __dst, 16);
      }
      while (v285);
    }

    v565 = 0u;
    v564 = 0u;
    v563 = 0u;
    v562 = 0u;
    v288 = v506;
    v289 = objc_msgSend(v288, "countByEnumeratingWithState:objects:count:", &v562, &v558, 16);
    if (v289)
    {
      v290 = *(_QWORD *)v563;
      do
      {
        for (k = 0; k != v289; k = (char *)k + 1)
        {
          if (*(_QWORD *)v563 != v290)
            objc_enumerationMutation(v288);
          objc_msgSend(v283, "removeObjectForKey:", *(_QWORD *)(*((_QWORD *)&v562 + 1) + 8 * (_QWORD)k));
        }
        v289 = objc_msgSend(v288, "countByEnumeratingWithState:objects:count:", &v562, &v558, 16);
      }
      while (v289);
    }

    v292 = objc_msgSend(v283, "copy");
    v293 = (void *)*((_QWORD *)&v533 + 1);
    *((_QWORD *)&v533 + 1) = v292;

    v294 = objc_msgSend(v284, "copy");
    v295 = (void *)v535;
    *(_QWORD *)&v535 = v294;

    v296 = objc_msgSend(v288, "copy");
    v297 = (void *)*((_QWORD *)&v535 + 1);
    *((_QWORD *)&v535 + 1) = v296;

  }
  v298 = objc_claimAutoreleasedReturnValue(objc_msgSend(v524, "array"));
  v299 = (void *)v532;
  *(_QWORD *)&v532 = v298;

  v300 = objc_claimAutoreleasedReturnValue(objc_msgSend(v529, "array"));
  v301 = (void *)*((_QWORD *)&v532 + 1);
  *((_QWORD *)&v532 + 1) = v300;

  v536 = v536 & 0xFE | v205;
  v537 = v494;
  v516 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&v546 + 1), "objectForKeyedSubscript:", CFSTR("Program")));
  v507 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v516, "objectForKeyedSubscript:", CFSTR("Stitching")));
  if (objc_msgSend(v507, "count"))
  {
    v530 = v507;
    v520 = objc_msgSend(v538, "copy");
    v525 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v530, "objectForKeyedSubscript:", CFSTR("DAGMetalLibs")));
    if ((GTShaderDebuggerMakeRuntimeLibrariesFromMetallibs((id *)&v531, v525, a3) & 1) == 0)
    {
      v327 = objc_msgSend(v520, "copy");
      v328 = v538;
      v538 = v327;

      goto LABEL_421;
    }
    v500 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v530, "objectForKeyedSubscript:", CFSTR("DAGFunctionUIDs")));
    if ((GTShaderDebuggerMakeRuntimeFunctions((uint64_t)&v531, v500, a3) & 1) == 0)
    {
      v329 = objc_msgSend(v520, "copy");
      v330 = v538;
      v538 = v329;

      goto LABEL_421;
    }
    v302 = objc_msgSend(v538, "copy");
    v303 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v520, "allKeys"));
    v304 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v302, "allKeys"));
    v305 = objc_msgSend(v304, "mutableCopy");

    objc_msgSend(v305, "removeObjectsInArray:", v303);
    v491 = objc_msgSend(v305, "copy");

    v306 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v530, "objectForKeyedSubscript:", CFSTR("LibraryUIDs")));
    v495 = objc_msgSend(v538, "mutableCopy");
    v497 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v531 + 1), "defaultDevice"));
    v307 = *(uint64_t **)(*(_QWORD *)v531 + 40);
    v308 = **((_QWORD **)&v537 + 1);
    v558 = 0u;
    v559 = 0u;
    v560 = 0u;
    v561 = 0u;
    objc = v306;
    v309 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v558, __dst, 16);
    if (v309)
    {
      v310 = *(_QWORD *)v559;
LABEL_293:
      v311 = 0;
      while (1)
      {
        if (*(_QWORD *)v559 != v310)
          objc_enumerationMutation(objc);
        v312 = *(void **)(*((_QWORD *)&v558 + 1) + 8 * v311);
        v313 = _ObjectUIDsWithAliasID((_QWORD **)&v531, (uint64_t)objc_msgSend(v312, "unsignedLongLongValue"));
        v314 = (void *)objc_claimAutoreleasedReturnValue(v313);
        if (!objc_msgSend(v314, "count"))
        {
          v331 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Internal error: Library '%@' not found"), v312));
          if (a3)
          {
            v332 = GTShaderDebuggerMakeError(1u, v331, 0, 0, 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue(v332);
          }
          goto LABEL_318;
        }
        v315 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v314, "firstObject"));
        v316 = GTMTLSMContext_lastObject(*v307, (uint64_t)objc_msgSend(v315, "unsignedLongLongValue"), v308);

        if (!v316)
          break;
        if (*(_BYTE *)(v316 + 161) != 6)
        {
          v331 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Internal error: Unexpected library data type (%d)"), *(unsigned __int8 *)(v316 + 161)));
          if (a3)
          {
            v334 = GTShaderDebuggerMakeError(1u, v331, 0, 0, 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue(v334);
          }
LABEL_318:

LABEL_327:
LABEL_328:
          v326 = 0;
          v325 = objc;
          goto LABEL_329;
        }
        v317 = *(_QWORD *)(v316 + 72);
        if (!v317)
        {
          if (a3)
          {
            v335 = *(_QWORD *)(v316 + 80);
            if (v335)
              v336 = CFSTR("-[MTLDevice newLibraryWithDAG:functions:error:] is not supported");
            else
              v336 = CFSTR("Internal error: Failed to read stitched library descriptor");
            if (v335)
              v337 = 4;
            else
              v337 = 1;
            v338 = GTShaderDebuggerMakeError(v337, v336, 0, 0, 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue(v338);
          }
          goto LABEL_327;
        }
        MTLStitchedLibraryDescriptor = MakeMTLStitchedLibraryDescriptor(v317, v538);
        v319 = (void *)objc_claimAutoreleasedReturnValue(MTLStitchedLibraryDescriptor);
        *(_QWORD *)&v571 = 0;
        v320 = objc_msgSend(v497, "newLibraryWithStitchedDescriptor:error:", v319, &v571);
        v321 = (id)v571;
        if (v320)
        {
          v322 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v316 + 8)));
          objc_msgSend(v495, "setObject:forKeyedSubscript:", v320, v322);

        }
        else if (a3)
        {
          v323 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: Failed to set up runtime stitched library"), 0, v321, 0);
          *a3 = (id)objc_claimAutoreleasedReturnValue(v323);
        }

        if (!v320)
          goto LABEL_328;
        if (v309 == (id)++v311)
        {
          v309 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v558, __dst, 16);
          if (v309)
            goto LABEL_293;
          goto LABEL_307;
        }
      }
      v331 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Internal error: Library '%@' not found"), v312));
      if (a3)
      {
        v333 = GTShaderDebuggerMakeError(1u, v331, 0, 0, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v333);
      }
      goto LABEL_318;
    }
LABEL_307:

    v324 = objc_msgSend(v495, "copy");
    v325 = v538;
    v538 = v324;
    v326 = 1;
LABEL_329:

    v339 = objc_msgSend(v538, "mutableCopy");
    objc_msgSend(v339, "removeObjectsForKeys:", v491);
    v340 = objc_msgSend(v339, "copy");
    v341 = v538;
    v538 = v340;

    if (!v326)
      goto LABEL_422;
  }
  v487 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v516, "objectForKeyedSubscript:", CFSTR("SourceLibs")));
  if (objc_msgSend(v487, "count"))
  {
    v530 = v487;
    v498 = (char *)objc_msgSend(v530, "count");
    if (!v498)
    {
      if (a3)
      {
        v414 = GTShaderDebuggerMakeError(4u, CFSTR("No source"), 0, 0, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v414);
      }

      goto LABEL_421;
    }
    v477 = *((id *)v531 + 1);
    v492 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v477, "defaultDevice"));
    v483 = objc_msgSend(v492, "argumentBuffersSupport");
    v480 = objc_alloc_init((Class)NSMutableDictionary);
    v479 = objc_msgSend(v538, "mutableCopy");
    v342 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v477, "dynamicLibraries"));
    v481 = objc_msgSend(v342, "mutableCopy");

    v489 = v498 - 1;
    v343 = (v548 >> 2) & 1;
    if (v498 != (_BYTE *)&dword_0 + 1)
      LODWORD(v343) = 1;
    v482 = v343;
    v344 = (unint64_t *)*((_QWORD *)&v537 + 1);
    v345 = *(uint64_t **)(*(_QWORD *)v531 + 40);
    v496 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v530, "count"));
    v501 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v530, "count"));
    v573 = 0u;
    v574 = 0u;
    v571 = 0u;
    v572 = 0u;
    v530 = v530;
    v346 = objc_msgSend(v530, "countByEnumeratingWithState:objects:count:", &v571, __dst, 16);
    if (v346)
    {
      v347 = *(_QWORD *)v572;
LABEL_336:
      v348 = 0;
      while (1)
      {
        if (*(_QWORD *)v572 != v347)
          objc_enumerationMutation(v530);
        v349 = *(void **)(*((_QWORD *)&v571 + 1) + 8 * v348);
        v350 = objc_msgSend(v349, "unsignedIntegerValue");
        v351 = (_QWORD *)GetAliasStream(*(_QWORD *)(*(_QWORD *)v531 + 24), (uint64_t)v350, **((_QWORD **)&v537 + 1));
        v352 = v351 ? *v351 : 0;
        v353 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v352));
        v354 = GTMTLSMContext_lastObject(*v345, (uint64_t)objc_msgSend(v353, "unsignedLongLongValue"), *v344);
        if (!v354 || *(_BYTE *)(v354 + 161) != 2)
          break;
        v355 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPointer:](NSValue, "valueWithPointer:", v354));
        objc_msgSend(v496, "setObject:forKeyedSubscript:", v355, v353);

        objc_msgSend(v501, "setObject:forKeyedSubscript:", v349, v353);
        if (v346 == (id)++v348)
        {
          v346 = objc_msgSend(v530, "countByEnumeratingWithState:objects:count:", &v571, __dst, 16);
          if (!v346)
            goto LABEL_346;
          goto LABEL_336;
        }
      }
      v410 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid library \"%@\": Expected library with source"), v353));
      if (a3)
      {
        v411 = GTShaderDebuggerMakeError(4u, v410, 0, 0, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v411);
      }

      v526 = 0;
      v412 = 0;
      v413 = v530;
LABEL_410:

      if (v412)
        goto LABEL_411;
LABEL_421:

LABEL_422:
      goto LABEL_139;
    }
LABEL_346:

    v356 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v496, "allKeys"));
    v566 = _NSConcreteStackBlock;
    v567 = 3221225472;
    v568 = __GTShaderDebuggerMakeRuntimeLibrariesFromSources_block_invoke;
    v569 = &unk_726980;
    v486 = v496;
    v570 = v486;
    v357 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v356, "sortedArrayUsingComparator:", &v566));

    v565 = 0u;
    v564 = 0u;
    v563 = 0u;
    v562 = 0u;
    v478 = v357;
    v358 = objc_msgSend(v478, "countByEnumeratingWithState:objects:count:", &v562, &v558, 16);
    if (!v358)
    {
      v526 = 0;
LABEL_408:

      v416 = objc_msgSend(v479, "copy");
      v417 = v538;
      v538 = v416;

      v418 = objc_msgSend(v480, "copy");
      v415 = (void *)v539;
      *(_QWORD *)&v539 = v418;
      v412 = 1;
LABEL_409:

      v413 = v570;
      goto LABEL_410;
    }
    v526 = 0;
    v485 = *(_QWORD *)v563;
LABEL_348:
    v359 = 0;
    v484 = v358;
    while (1)
    {
      if (*(_QWORD *)v563 != v485)
        objc_enumerationMutation(v478);
      v360 = *(void **)(*((_QWORD *)&v562 + 1) + 8 * v359);
      objd = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v501, "objectForKeyedSubscript:", v360));
      v361 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v486, "objectForKeyedSubscript:", v360));
      v362 = objc_msgSend(v361, "pointerValue");

      v521 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v530, "objectForKeyedSubscript:", objd));
      v363 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v521, "objectForKeyedSubscript:", CFSTR("Code")));
      if (v498 == (_BYTE *)&dword_0 + 1)
      {
        objc_msgSend(v480, "setObject:forKeyedSubscript:", v363, CFSTR("/program_source"));
        goto LABEL_360;
      }
      v364 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet newlineCharacterSet](NSCharacterSet, "newlineCharacterSet"));
      v365 = objc_msgSend(v363, "rangeOfCharacterFromSet:", v364);

      if (v365 == (id)0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_353;
      v369 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v363, "substringToIndex:", v365));
      if ((objc_msgSend(v369, "containsString:", CFSTR("#line")) & 1) == 0
        && (objc_msgSend(v369, "containsString:", CFSTR("# line")) & 1) == 0)
      {
        break;
      }
      v370 = v526;
LABEL_359:

      v526 = v370;
LABEL_360:
      v373 = v362[13];
      if (v373)
      {
        MTLCompileOptions = MakeMTLCompileOptions(v373, v481);
        v375 = (id)objc_claimAutoreleasedReturnValue(MTLCompileOptions);
      }
      else
      {
        v375 = objc_alloc_init((Class)MTLCompileOptions);
      }
      v376 = v375;
      v377 = objc_alloc_init((Class)NSMutableArray);
      v378 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v376, "additionalCompilerArguments"));
      v379 = objc_msgSend(v378, "length");

      if (v379)
      {
        v380 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v376, "additionalCompilerArguments"));
        objc_msgSend(v377, "addObject:", v380);

      }
      if (v498 == (_BYTE *)&dword_0 + 1)
        objc_msgSend(v377, "addObject:", CFSTR("-fno-tracepoint-instrument-line-markers"));
      v381 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v521, "objectForKeyedSubscript:", CFSTR("SelectFunctions")));
      if (v381)
      {
        objc_msgSend(v377, "addObject:", CFSTR("-fno-tracepoint-default-instrument"));
        v382 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v381, "componentsJoinedByString:", CFSTR(",")));
        v383 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("-ftracepoint-instrument-functions="), "stringByAppendingString:", v382));
        objc_msgSend(v377, "addObject:", v383);

      }
      if (!v483)
        objc_msgSend(v377, "addObject:", CFSTR("-fno-tracepoint-instrument-argument-buffers"));
      if (v482)
      {
        objc_msgSend(v377, "addObject:", CFSTR("-dynamic-libtracepoint"));
        objc_msgSend(v377, "addObject:", CFSTR("-Wl,-mllvm"));
        objc_msgSend(v377, "addObject:", CFSTR("-Wl,-disable-legacy-trace-buffer"));
        objc_msgSend(v377, "addObject:", CFSTR("-fexternally-initialized"));
        objc_msgSend(v377, "addObject:", CFSTR("-Wl,-mllvm"));
        objc_msgSend(v377, "addObject:", CFSTR("-Wl,-external-initialization"));
        objc_msgSend(v377, "addObject:", CFSTR("-Wl,-mllvm"));
        v384 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v489));
        v385 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "stringValue"));
        v386 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("-Wl,__trace.base_id="), "stringByAppendingString:", v385));
        objc_msgSend(v377, "addObject:", v386);

        --v489;
      }

      objc_msgSend(v376, "setTracingEnabled:", 1);
      v387 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v377, "componentsJoinedByString:", CFSTR(" ")));
      objc_msgSend(v376, "setAdditionalCompilerArguments:", v387);

      if (*((_BYTE *)v362 + 160) == 1)
      {
        objc_msgSend(v376, "setLibraryType:", 1);
        v388 = v547;
        v389 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v360, "stringValue"));
        v390 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v389, "stringByAppendingPathExtension:", CFSTR("metallib")));
        v391 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v388, "stringByAppendingPathComponent:", v390));
        objc_msgSend(v376, "setInstallName:", v391);

      }
      v554[0] = v526;
      v392 = objc_msgSend(v492, "newLibraryWithSource:options:error:", v363, v376, v554);
      v393 = v554[0];

      if (!v392)
      {
        if (a3)
        {
          v404 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: Failed to set up main function"), 0, v393, 0);
          *a3 = (id)objc_claimAutoreleasedReturnValue(v404);
        }
        v403 = 1;
        goto LABEL_395;
      }
      if (*((_BYTE *)v362 + 160) == 1)
      {
        v553[0] = v393;
        v394 = objc_msgSend(v492, "newDynamicLibrary:error:", v392, v553);
        v395 = v553[0];

        if (v394)
        {
          DylibObjectIDForParentLibrary = _FindDylibObjectIDForParentLibrary((unint64_t **)&v531, (uint64_t)v362, v396, v397);
          if (DylibObjectIDForParentLibrary)
          {
            v399 = DylibObjectIDForParentLibrary;
            v400 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", DylibObjectIDForParentLibrary));
            objc_msgSend(v479, "setObject:forKeyedSubscript:", v394, v400);

            v401 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v362[1]));
            objc_msgSend(v479, "setObject:forKeyedSubscript:", v392, v401);

            v402 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v399));
            objc_msgSend(v481, "setObject:forKeyedSubscript:", v394, v402);

            v403 = 0;
LABEL_394:
            v393 = v395;
            goto LABEL_395;
          }
          v408 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Internal error: Failed to resolve dynamic library \"%@\""), v360));
          if (a3)
          {
            v409 = GTShaderDebuggerMakeError(1u, v408, 0, 0, 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue(v409);
          }

        }
        else if (a3)
        {
          v407 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: Failed to set up dynamic library"), 0, v395, 0);
          *a3 = (id)objc_claimAutoreleasedReturnValue(v407);
        }

        v403 = 1;
        goto LABEL_394;
      }
      v405 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v362[1]));
      objc_msgSend(v479, "setObject:forKeyedSubscript:", v392, v405);

      v403 = 0;
LABEL_395:

      v526 = v393;
LABEL_396:

      if (v403)
      {
        v412 = 0;
        v415 = v478;
        goto LABEL_409;
      }
      if (v484 == (id)++v359)
      {
        v358 = objc_msgSend(v478, "countByEnumeratingWithState:objects:count:", &v562, &v558, 16);
        if (v358)
          goto LABEL_348;
        goto LABEL_408;
      }
    }

LABEL_353:
    v366 = v547;
    v367 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v360, "stringValue"));
    v368 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v367, "stringByAppendingPathExtension:", CFSTR("metal")));
    v369 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v366, "stringByAppendingPathComponent:", v368));

    v551[0] = v526;
    LODWORD(v368) = objc_msgSend(v363, "writeToFile:atomically:encoding:error:", v369, 1, 4, v551);
    v370 = v551[0];

    if (!(_DWORD)v368)
    {

      if (a3)
      {
        v406 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error trying to disambiguate libraries"), 0, v370, 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue(v406);
      }
      v403 = 1;
      v526 = v370;
      goto LABEL_396;
    }
    v371 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("#line 1 \"%@\"\n"), v369));
    v372 = objc_claimAutoreleasedReturnValue(objc_msgSend(v371, "stringByAppendingString:", v363));

    v363 = (void *)v372;
    goto LABEL_359;
  }
LABEL_411:
  v419 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v516, "objectForKeyedSubscript:", CFSTR("MetalLibs")));
  if (objc_msgSend(v419, "count")
    && !GTShaderDebuggerMakeRuntimeLibrariesFromMetallibs((id *)&v531, v419, a3))
  {
    goto LABEL_420;
  }
  v420 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v516, "objectForKeyedSubscript:", CFSTR("DependentLibs")));
  if (objc_msgSend(v420, "count")
    && !GTShaderDebuggerMakeRuntimeLibrariesFromDependentLibs((uint64_t)&v531, v420, a3))
  {
LABEL_419:

LABEL_420:
    v530 = v487;
    goto LABEL_421;
  }
  v421 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v516, "objectForKeyedSubscript:", CFSTR("FunctionUIDs")));
  if (!GTShaderDebuggerMakeRuntimeFunctions((uint64_t)&v531, v421, a3))
  {

    goto LABEL_419;
  }
  if (v419)
    v422 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v419, "allKeys"));
  else
    v422 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v487, "allKeys"));
  v423 = v422;
  DebugMetadata = GTShaderDebuggerMakeDebugMetadata((uint64_t)&v531, v421, v422, a3);

  if ((DebugMetadata & 1) == 0 || !GTShaderDebuggerMakeTraceBuffer((uint64_t)&v531, a3))
    goto LABEL_139;
  v427 = v531[2828];
  if (v427 != 70)
  {
    if (v427 == 28)
    {
      PSOCompute = GTShaderDebuggerMakePSOCompute((uint64_t)&v531, a3, v425, v426);
      goto LABEL_451;
    }
    GTMTLReplay_handleError(101, (uint64_t)"Unreachable", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_shaderDebugger.m", (uint64_t)"GTMTLShaderDebugger_makePipelineState", 141, 4);
    if (!a3)
      goto LABEL_139;
    v455 = GTShaderDebuggerMakeError(1u, CFSTR("Internal error: Unknown encoder"), 0, 0, 0);
    v169 = (id)objc_claimAutoreleasedReturnValue(v455);
LABEL_150:
    *a3 = v169;
    goto LABEL_139;
  }
  PSOCompute = GTShaderDebuggerMakePSORender((id *)&v531, a3);
LABEL_451:
  if (PSOCompute)
  {
    GTShaderDebuggerJITResources(&v531);
    v453 = v531;
    v454 = v531[2828];
    if (v454 == 28)
    {
      if (!GTShaderDebuggerEncodeResourcesCompute(&v531, a3))
        goto LABEL_139;
    }
    else if (v454 == 70 && (GTShaderDebuggerEncodeResourcesRender(&v531, a3) & 1) == 0)
    {
      goto LABEL_139;
    }
    if (GTShaderDebuggerExecuteEncoder((uint64_t *)&v531, a3))
    {
      v456 = *((id *)v453 + 1);
      *(_QWORD *)&v571 = 0;
      *((_QWORD *)&v571 + 1) = &v571;
      *(_QWORD *)&v572 = 0x2020000000;
      BYTE8(v572) = 0;
      *(_QWORD *)__dst = 0;
      *(_QWORD *)&__dst[8] = __dst;
      *(_QWORD *)&__dst[16] = 0x3032000000;
      *(_QWORD *)&__dst[24] = __Block_byref_object_copy__372;
      *(_QWORD *)&__dst[32] = __Block_byref_object_dispose__373;
      *(_QWORD *)&__dst[40] = 0;
      v457 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v456, "commandBufferForKey:", *((_QWORD *)v453 + 1419)));
      *(_QWORD *)&v558 = _NSConcreteStackBlock;
      *((_QWORD *)&v558 + 1) = 3221225472;
      *(_QWORD *)&v559 = __GTMTLShaderDebugger_executeCommandEncoder_block_invoke;
      *((_QWORD *)&v559 + 1) = &unk_724930;
      *(_QWORD *)&v560 = __dst;
      *((_QWORD *)&v560 + 1) = &v571;
      objc_msgSend(v457, "addCompletedHandler:", &v558);

      objc_msgSend(v456, "commitCommandBuffers");
      v458 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v453 + 1), "defaultCommandQueue"));
      objc_msgSend(v458, "finish");

      if (*(_BYTE *)(*((_QWORD *)&v571 + 1) + 24))
      {
        v459 = (char *)objc_msgSend(*(id *)(*(_QWORD *)&__dst[8] + 40), "code");
        if (v459 != (_BYTE *)&dword_8 + 1 && v459 != (_BYTE *)&dword_0 + 3
          || GTShaderDebuggerValidateUserEncoderBindings((uint64_t)&v531, a3))
        {
          v460 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)&__dst[8] + 40), "localizedDescription"));
          v461 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Internal error: Problem encountered during execution: "), "stringByAppendingString:", v460));

          if (a3)
          {
            if ((v548 & 0x10) != 0)
              v462 = 4;
            else
              v462 = 3;
            v463 = GTShaderDebuggerMakeError(v462, v461, 0, *(void **)(*(_QWORD *)&__dst[8] + 40), 0);
            *a3 = (id)objc_claimAutoreleasedReturnValue(v463);
          }

        }
        _Block_object_dispose(__dst, 8);

        _Block_object_dispose(&v571, 8);
        goto LABEL_139;
      }
      _Block_object_dispose(__dst, 8);

      _Block_object_dispose(&v571, 8);
      v464 = v503;
      *(_QWORD *)&v571 = 0;
      TraceData = GTShaderDebuggerMakeTraceData((uint64_t)&v531, &v571);
      v466 = (void *)objc_claimAutoreleasedReturnValue(TraceData);
      v467 = (id)v571;
      v468 = v467;
      if (v466)
      {
        *(_QWORD *)__dst = v466;
        *(_QWORD *)&v558 = CFSTR("TraceData");
        *((_QWORD *)&v558 + 1) = CFSTR("ResourceMapping");
        ResourceMappings = GTShaderDebuggerMakeResourceMappings((uint64_t **)&v531);
        v470 = (void *)objc_claimAutoreleasedReturnValue(ResourceMappings);
        *(_QWORD *)&__dst[8] = v470;
        v471 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", __dst, &v558, 2));
        v472 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v471));

        v473 = v543;
        if (v473)
          objc_msgSend(v472, "setObject:forKeyedSubscript:", v473, CFSTR("TraceMetadata"));
        v474 = GTShaderDebuggerSanitizeResponse(v472, v464, v531, a3);
        v160 = (void *)objc_claimAutoreleasedReturnValue(v474);

        goto LABEL_483;
      }
      if (objc_msgSend(v467, "code") == (char *)&dword_0 + 3)
      {
        v475 = GTShaderDebuggerValidateUserComputeDispatch(&v531, a3);
        if (a3)
          v476 = v475;
        else
          v476 = 0;
        if ((v476 & 1) == 0)
          goto LABEL_480;
      }
      else if (!a3)
      {
LABEL_480:
        v160 = 0;
LABEL_483:

        GTShaderDebuggerContextDeinit(&v531);
        goto LABEL_140;
      }
      v160 = 0;
      *a3 = objc_retainAutorelease(v468);
      goto LABEL_483;
    }
  }
LABEL_139:
  GTShaderDebuggerContextDeinit(&v531);
  v160 = 0;
LABEL_140:
  __destructor_8_S_S_s8_s16_S_s24_s32_s40_s48_s56_s64_S_s96_s104_s112_s120_S_s128_s136_S_s152_S_s168_s176_s184_s192_s200((id *)&v531);

  return v160;
}

void sub_1DE984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  uint64_t v35;

  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  __destructor_8_S_S_s8_s16_S_s24_s32_s40_s48_s56_s64_S_s96_s104_s112_s120_S_s128_s136_S_s152_S_s168_s176_s184_s192_s200(&a35);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__372(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__373(uint64_t a1)
{

}

void __destructor_8_S_S_s8_s16_S_s24_s32_s40_s48_s56_s64_S_s96_s104_s112_s120_S_s128_s136_S_s152_S_s168_s176_s184_s192_s200(id *a1)
{

  __destructor_8_s0_s8_s16_s24_s32_s40(a1 + 3);
}

void __destructor_8_s0_s8_s16_s24_s32_s40(id *a1)
{

}

apr_array_header_t *LoadUniqueIdentifierResourceGroup(int **a1, unsigned int a2, apr_pool_t *p)
{
  int v5;
  apr_array_header_t *v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = **a1;
  *a1 += 2;
  v6 = apr_array_make(p, v5, 32);
  if (v5 >= 1)
  {
    do
    {
      v7 = apr_array_push(v6);
      v8 = *a1;
      v9 = *(_QWORD *)*a1;
      *a1 += 2;
      v7[1] = v9;
      v10 = *((_QWORD *)v8 + 1);
      *a1 = v8 + 4;
      *v7 = v10;
      if (a2 >= 0x41)
      {
        v11 = *((_QWORD *)v8 + 2);
        *a1 = v8 + 6;
        v7[2] = v11;
      }
      --v5;
    }
    while (v5);
  }
  return v6;
}

id MakeMTLRenderPassAttachmentDescriptor(void *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v6));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));
  objc_msgSend(v5, "setTexture:", v9);

  objc_msgSend(v5, "setLevel:", *(unsigned __int8 *)(a2 + 24));
  objc_msgSend(v5, "setSlice:", *(unsigned __int16 *)(a2 + 22));
  objc_msgSend(v5, "setDepthPlane:", *(unsigned __int16 *)(a2 + 16));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)a2));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v10));

  objc_msgSend(v5, "setResolveTexture:", v11);
  objc_msgSend(v5, "setResolveLevel:", *(unsigned __int8 *)(a2 + 26));
  objc_msgSend(v5, "setResolveSlice:", *(unsigned __int16 *)(a2 + 20));
  objc_msgSend(v5, "setResolveDepthPlane:", *(unsigned __int16 *)(a2 + 18));
  objc_msgSend(v5, "setLoadAction:", *(unsigned __int8 *)(a2 + 25));
  objc_msgSend(v5, "setStoreAction:", *(unsigned __int8 *)(a2 + 27));
  objc_msgSend(v5, "setStoreActionOptions:", *(unsigned __int8 *)(a2 + 28));
  if ((objc_opt_respondsToSelector(v5, "yInvert") & 1) != 0)
    objc_msgSend(v5, "setYInvert:", *(_BYTE *)(a2 + 29) != 0);
  return v5;
}

id MakeMTLTextureDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLTextureDescriptor);
  objc_msgSend(v2, "setTextureType:", *(unsigned __int8 *)(a1 + 49));
  objc_msgSend(v2, "setPixelFormat:", *(unsigned __int16 *)(a1 + 34));
  objc_msgSend(v2, "setWidth:", *(unsigned int *)(a1 + 24));
  objc_msgSend(v2, "setHeight:", *(unsigned __int16 *)(a1 + 32));
  objc_msgSend(v2, "setDepth:", *(unsigned __int16 *)(a1 + 30));
  objc_msgSend(v2, "setMipmapLevelCount:", *(unsigned __int8 *)(a1 + 45));
  objc_msgSend(v2, "setSampleCount:", *(unsigned __int8 *)(a1 + 47));
  objc_msgSend(v2, "setArrayLength:", *(unsigned __int16 *)(a1 + 28));
  objc_msgSend(v2, "setFramebufferOnly:", *(_BYTE *)(a1 + 43) != 0);
  objc_msgSend(v2, "setIsDrawable:", *(_BYTE *)(a1 + 44) != 0);
  objc_msgSend(v2, "setUsage:", *(unsigned int *)(a1 + 20));
  if ((objc_opt_respondsToSelector(v2, "rotation") & 1) != 0)
    objc_msgSend(v2, "setRotation:", *(unsigned __int8 *)(a1 + 46));
  objc_msgSend(v2, "setResourceOptions:", *(unsigned __int16 *)(a1 + 36));
  objc_msgSend(v2, "setAllowGPUOptimizedContents:", *(_BYTE *)(a1 + 38) != 0);
  if ((objc_opt_respondsToSelector(v2, "swizzleKey") & 1) != 0)
    objc_msgSend(v2, "setSwizzleKey:", *(unsigned int *)(a1 + 16));
  if ((objc_opt_respondsToSelector(v2, "sparseSurfaceDefaultValue") & 1) != 0)
    objc_msgSend(v2, "setSparseSurfaceDefaultValue:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(v2, "setWriteSwizzleEnabled:", *(_BYTE *)(a1 + 50) != 0);
  if ((objc_opt_respondsToSelector(v2, "compressionType") & 1) != 0)
    objc_msgSend(v2, "setCompressionType:", *(unsigned __int8 *)(a1 + 41));
  if ((objc_opt_respondsToSelector(v2, "compressionFootprint") & 1) != 0)
    objc_msgSend(v2, "setCompressionFootprint:", *(unsigned __int8 *)(a1 + 39));
  if ((objc_opt_respondsToSelector(v2, "compressionMode") & 1) != 0)
    objc_msgSend(v2, "setCompressionMode:", *(unsigned __int8 *)(a1 + 40));
  return v2;
}

id MakeMTLTextureDescriptorWithResourceIndex(uint64_t a1)
{
  id MTLTextureDescriptorWithoutResourceIndex;
  void *v3;

  MTLTextureDescriptorWithoutResourceIndex = MakeMTLTextureDescriptorWithoutResourceIndex(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(MTLTextureDescriptorWithoutResourceIndex);
  objc_msgSend(v3, "setForceResourceIndex:", *(_QWORD *)(a1 + 8) != 0);
  objc_msgSend(v3, "setResourceIndex:", *(_QWORD *)(a1 + 8));
  return v3;
}

id MakeMTLBufferDescriptor(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLBufferDescriptor);
  objc_msgSend(v2, "setLength:", *(_QWORD *)a1);
  objc_msgSend(v2, "setResourceOptions:", *(unsigned __int16 *)(a1 + 32));
  objc_msgSend(v2, "setNoCopy:", *(_BYTE *)(a1 + 34) != 0);
  return v2;
}

id MakeMTLRenderPipelineColorAttachmentDescriptor(void *a1, unsigned __int16 *a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "setBlendingEnabled:", *((_BYTE *)a2 + 3) != 0);
  objc_msgSend(v3, "setSourceRGBBlendFactor:", *((unsigned __int8 *)a2 + 8));
  objc_msgSend(v3, "setDestinationRGBBlendFactor:", *((unsigned __int8 *)a2 + 5));
  objc_msgSend(v3, "setRgbBlendOperation:", *((unsigned __int8 *)a2 + 6));
  objc_msgSend(v3, "setSourceAlphaBlendFactor:", *((unsigned __int8 *)a2 + 7));
  objc_msgSend(v3, "setDestinationAlphaBlendFactor:", *((unsigned __int8 *)a2 + 4));
  objc_msgSend(v3, "setAlphaBlendOperation:", *((unsigned __int8 *)a2 + 2));
  objc_msgSend(v3, "setWriteMask:", *((unsigned __int8 *)a2 + 9));
  objc_msgSend(v3, "setPixelFormat:", *a2);
  return v3;
}

id CreateObjectArrayWithMap(uint64_t *a1, int a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v5 = a3;
  v6 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", a2);
  if (a2 >= 1)
  {
    v7 = a2;
    do
    {
      v8 = *a1++;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v8));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v9));

      if (v10)
        objc_msgSend(v6, "addObject:", v10);

      --v7;
    }
    while (v7);
  }
  v11 = objc_msgSend(v6, "copy");

  return v11;
}

id MakeMTLRenderPipelineDescriptorWithoutResourceIndex(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void *v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  void *v17;
  id v18;
  double v19;
  uint64_t v20;
  unsigned __int16 *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t i;
  void *v26;
  id v27;
  uint64_t j;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id Dictionary;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id ObjectArrayWithMap;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t k;
  void *v50;
  id v51;
  uint64_t m;
  void *v53;
  id v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 1296)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));
  objc_msgSend(v4, "setVertexFunction:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 1176)));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v7));
  objc_msgSend(v4, "setFragmentFunction:", v8);

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "vertexDescriptor"));
  v10 = 0;
  v11 = (unsigned __int8 *)(a1 + 10);
  do
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "layouts"));
    v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", v10));
    objc_msgSend(v13, "setStride:", *(_QWORD *)(v11 - 10));
    objc_msgSend(v13, "setStepRate:", *((unsigned __int16 *)v11 - 1));
    v14 = *v11;
    v11 += 16;
    objc_msgSend(v13, "setStepFunction:", v14);

    ++v10;
  }
  while (v10 != 31);
  v15 = 0;
  v16 = (unsigned __int8 *)(a1 + 501);
  do
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "attributes"));
    v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndexedSubscript:", v15));
    objc_msgSend(v18, "setFormat:", *v16);
    objc_msgSend(v18, "setOffset:", *(unsigned int *)(v16 - 5));
    objc_msgSend(v18, "setBufferIndex:", *(v16 - 1));

    ++v15;
    v16 += 8;
  }
  while (v15 != 31);

  objc_msgSend(v4, "setRasterSampleCount:", *(_QWORD *)(a1 + 1272));
  objc_msgSend(v4, "setSampleMask:", *(_QWORD *)(a1 + 1288));
  LODWORD(v19) = *(_DWORD *)(a1 + 1332);
  objc_msgSend(v4, "setSampleCoverage:", v19);
  objc_msgSend(v4, "setAlphaToCoverageEnabled:", *(_BYTE *)(a1 + 1480) != 0);
  objc_msgSend(v4, "setAlphaToOneEnabled:", *(_BYTE *)(a1 + 1481) != 0);
  objc_msgSend(v4, "setRasterizationEnabled:", *(_BYTE *)(a1 + 1493) != 0);
  objc_msgSend(v4, "setDepthAttachmentPixelFormat:", *(unsigned __int16 *)(a1 + 1340));
  objc_msgSend(v4, "setStencilAttachmentPixelFormat:", *(unsigned __int16 *)(a1 + 1352));
  v20 = 0;
  v21 = (unsigned __int16 *)(a1 + 744);
  do
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "colorAttachments"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndexedSubscript:", v20));

    ++v20;
    v21 += 8;
  }
  while (v20 != 8);
  if (*(_QWORD *)(a1 + 1200))
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setLabel:", v24);

  }
  objc_msgSend(v4, "setInputPrimitiveTopology:", *(unsigned __int8 *)(a1 + 1485));
  objc_msgSend(v4, "setTessellationPartitionMode:", *(unsigned __int8 *)(a1 + 1505));
  objc_msgSend(v4, "setMaxTessellationFactor:", *(_QWORD *)(a1 + 1208));
  objc_msgSend(v4, "setTessellationFactorScaleEnabled:", *(_BYTE *)(a1 + 1502) != 0);
  objc_msgSend(v4, "setTessellationFactorFormat:", *(unsigned __int8 *)(a1 + 1501));
  objc_msgSend(v4, "setTessellationControlPointIndexType:", *(unsigned __int8 *)(a1 + 1500));
  objc_msgSend(v4, "setTessellationFactorStepFunction:", *(unsigned __int8 *)(a1 + 1503));
  objc_msgSend(v4, "setTessellationOutputWindingOrder:", *(unsigned __int8 *)(a1 + 1504));
  for (i = 0; i != 31; ++i)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "vertexBuffers"));
    v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectAtIndexedSubscript:", i));
    objc_msgSend(v27, "setMutability:", *(unsigned __int8 *)(a1 + 1447 + i));

  }
  for (j = 0; j != 31; ++j)
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fragmentBuffers"));
    v30 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectAtIndexedSubscript:", j));
    objc_msgSend(v30, "setMutability:", *(unsigned __int8 *)(a1 + 1354 + j));

  }
  objc_msgSend(v4, "setSupportIndirectCommandBuffers:", *(_BYTE *)(a1 + 1499) != 0);
  if ((objc_opt_respondsToSelector(v4, "vertexAmplificationMode") & 1) != 0)
    objc_msgSend(v4, "setVertexAmplificationMode:", *(unsigned __int8 *)(a1 + 1507));
  if ((objc_opt_respondsToSelector(v4, "maxVertexAmplificationCount") & 1) != 0)
    objc_msgSend(v4, "setMaxVertexAmplificationCount:", *(unsigned int *)(a1 + 1328));
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 1264)));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v31));
  objc_msgSend(v4, "setPipelineLibrary:", v32);

  if ((objc_opt_respondsToSelector(v4, "logicOperation") & 1) != 0)
    objc_msgSend(v4, "setLogicOperation:", *(unsigned __int8 *)(a1 + 1486));
  if ((objc_opt_respondsToSelector(v4, "alphaTestFunction") & 1) != 0)
    objc_msgSend(v4, "setAlphaTestFunction:", *(unsigned __int8 *)(a1 + 1479));
  if ((objc_opt_respondsToSelector(v4, "vertexDepthCompareClampMask") & 1) != 0)
    objc_msgSend(v4, "setVertexDepthCompareClampMask:", *(unsigned int *)(a1 + 1336));
  if ((objc_opt_respondsToSelector(v4, "fragmentDepthCompareClampMask") & 1) != 0)
    objc_msgSend(v4, "setFragmentDepthCompareClampMask:", *(unsigned int *)(a1 + 1324));
  if ((objc_opt_respondsToSelector(v4, "isLogicOperationEnabled") & 1) != 0)
    objc_msgSend(v4, "setLogicOperationEnabled:", *(_BYTE *)(a1 + 1487) != 0);
  if ((objc_opt_respondsToSelector(v4, "openGLModeEnabled") & 1) != 0)
    objc_msgSend(v4, "setOpenGLModeEnabled:", *(_BYTE *)(a1 + 1489) != 0);
  if ((objc_opt_respondsToSelector(v4, "isPointCoordLowerLeft") & 1) != 0)
    objc_msgSend(v4, "setPointCoordLowerLeft:", *(_BYTE *)(a1 + 1490) != 0);
  if ((objc_opt_respondsToSelector(v4, "isPointSizeOutputVS") & 1) != 0)
    objc_msgSend(v4, "setPointSizeOutputVS:", *(_BYTE *)(a1 + 1491) != 0);
  if ((objc_opt_respondsToSelector(v4, "isTwoSideEnabled") & 1) != 0)
    objc_msgSend(v4, "setTwoSideEnabled:", *(_BYTE *)(a1 + 1506) != 0);
  if ((objc_opt_respondsToSelector(v4, "isAlphaTestEnabled") & 1) != 0)
    objc_msgSend(v4, "setAlphaTestEnabled:", *(_BYTE *)(a1 + 1478) != 0);
  if ((objc_opt_respondsToSelector(v4, "isPointSmoothEnabled") & 1) != 0)
    objc_msgSend(v4, "setPointSmoothEnabled:", *(_BYTE *)(a1 + 1492) != 0);
  if ((objc_opt_respondsToSelector(v4, "clipDistanceEnableMask") & 1) != 0)
    objc_msgSend(v4, "setClipDistanceEnableMask:", *(unsigned __int8 *)(a1 + 1482));
  if ((objc_opt_respondsToSelector(v4, "colorSampleCount") & 1) != 0)
    objc_msgSend(v4, "setColorSampleCount:", *(_QWORD *)(a1 + 1160));
  if ((objc_opt_respondsToSelector(v4, "sampleCoverageInvert") & 1) != 0)
    objc_msgSend(v4, "setSampleCoverageInvert:", *(_BYTE *)(a1 + 1494) != 0);
  if ((objc_opt_respondsToSelector(v4, "needsCustomBorderColorSamplers") & 1) != 0)
    objc_msgSend(v4, "setNeedsCustomBorderColorSamplers:", *(_BYTE *)(a1 + 1488) != 0);
  if ((objc_opt_respondsToSelector(v4, "isDepthStencilWriteDisabled") & 1) != 0)
    objc_msgSend(v4, "setDepthStencilWriteDisabled:", *(_BYTE *)(a1 + 1483) != 0);
  objc_msgSend(v4, "setForceSoftwareVertexFetch:", *(_BYTE *)(a1 + 1484) != 0);
  Dictionary = GTData_MakeDictionary(*(_QWORD *)(a1 + 1144), *(_QWORD *)(a1 + 1152));
  v34 = (void *)objc_claimAutoreleasedReturnValue(Dictionary);
  objc_msgSend(v4, "setPluginData:", v34);

  v35 = GTData_MakeDictionary(*(_QWORD *)(a1 + 1128), *(_QWORD *)(a1 + 1136));
  v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  objc_msgSend(v4, "setDriverCompilerOptions:", v36);

  v37 = *(_QWORD *)(a1 + 1312);
  if (v37)
  {
    ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1304), v37, v3);
    v39 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
    objc_msgSend(v4, "setVertexPreloadedLibraries:", v39);

  }
  v40 = *(_QWORD *)(a1 + 1192);
  if (v40)
  {
    v41 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1184), v40, v3);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    objc_msgSend(v4, "setFragmentPreloadedLibraries:", v42);

  }
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "vertexLinkedFunctions"));
  MakeMTLLinkedFunctions(v43, a1 + 1064, v3);

  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fragmentLinkedFunctions"));
  MakeMTLLinkedFunctions(v44, a1 + 872, v3);

  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 1240)));
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v45));
  objc_msgSend(v4, "setObjectFunction:", v46);

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 1216)));
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v47));
  objc_msgSend(v4, "setMeshFunction:", v48);

  for (k = 0; k != 31; ++k)
  {
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectBuffers"));
    v51 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectAtIndexedSubscript:", k));
    objc_msgSend(v51, "setMutability:", *(unsigned __int8 *)(a1 + 1416 + k));

  }
  for (m = 0; m != 31; ++m)
  {
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "meshBuffers"));
    v54 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectAtIndexedSubscript:", m));
    objc_msgSend(v54, "setMutability:", *(unsigned __int8 *)(a1 + 1385 + m));

  }
  v55 = *(_QWORD *)(a1 + 1256);
  if (v55)
  {
    v56 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1248), v55, v3);
    v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    objc_msgSend(v4, "setObjectPreloadedLibraries:", v57);

  }
  v58 = *(_QWORD *)(a1 + 1232);
  if (v58)
  {
    v59 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1224), v58, v3);
    v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
    objc_msgSend(v4, "setMeshPreloadedLibraries:", v60);

  }
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectLinkedFunctions"));
  MakeMTLLinkedFunctions(v61, a1 + 1000, v3);

  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "meshLinkedFunctions"));
  MakeMTLLinkedFunctions(v62, a1 + 936, v3);

  if ((objc_opt_respondsToSelector(v4, "supportAddingVertexBinaryFunctions") & 1) != 0)
    objc_msgSend(v4, "setSupportAddingVertexBinaryFunctions:", *(_BYTE *)(a1 + 1498) != 0);
  if ((objc_opt_respondsToSelector(v4, "supportAddingFragmentBinaryFunctions") & 1) != 0)
    objc_msgSend(v4, "setSupportAddingFragmentBinaryFunctions:", *(_BYTE *)(a1 + 1495) != 0);
  if ((objc_opt_respondsToSelector(v4, "supportAddingObjectBinaryFunctions") & 1) != 0)
    objc_msgSend(v4, "setSupportAddingObjectBinaryFunctions:", *(_BYTE *)(a1 + 1497) != 0);
  if ((objc_opt_respondsToSelector(v4, "supportAddingMeshBinaryFunctions") & 1) != 0)
    objc_msgSend(v4, "setSupportAddingMeshBinaryFunctions:", *(_BYTE *)(a1 + 1496) != 0);
  if ((objc_opt_respondsToSelector(v4, "explicitVisibilityGroupID") & 1) != 0)
    objc_msgSend(v4, "setExplicitVisibilityGroupID:", *(unsigned int *)(a1 + 1320));
  if ((objc_opt_respondsToSelector(v4, "maxVertexCallStackDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxVertexCallStackDepth:", *(unsigned __int16 *)(a1 + 1350));
  if ((objc_opt_respondsToSelector(v4, "maxFragmentCallStackDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxFragmentCallStackDepth:", *(unsigned __int16 *)(a1 + 1344));
  if ((objc_opt_respondsToSelector(v4, "maxObjectCallStackDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxObjectCallStackDepth:", *(unsigned __int16 *)(a1 + 1348));
  if ((objc_opt_respondsToSelector(v4, "maxMeshCallStackDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxMeshCallStackDepth:", *(unsigned __int16 *)(a1 + 1346));
  if ((objc_opt_respondsToSelector(v4, "maxAccelerationStructureTraversalDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxAccelerationStructureTraversalDepth:", *(unsigned __int16 *)(a1 + 1342));
  v63 = v4;

  return v63;
}

id GTData_MakeDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSSet *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  FILE *v22;
  id v23;
  id v24;
  uint8_t buf[4];
  id v26;

  if (!a1)
    return 0;
  v4 = objc_opt_class(NSDictionary, a2);
  v6 = objc_opt_class(NSNumber, v5);
  v8 = objc_opt_class(NSString, v7);
  v10 = objc_opt_class(NSData, v9);
  v12 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v6, v8, v10, objc_opt_class(NSNull, v11), 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0));
  v24 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v13, v14, &v24));
  v16 = v24;

  if (v16)
  {
    if (s_logUsingOsLog)
    {
      v17 = gt_default_log();
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedDescription")));
        v20 = objc_msgSend(v19, "UTF8String");
        *(_DWORD *)buf = 136315138;
        v26 = v20;
        _os_log_error_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "warning: %s", buf, 0xCu);

      }
    }
    else
    {
      v22 = __stderrp;
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedDescription")));
      v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("warning: %s"), -[NSObject UTF8String](v18, "UTF8String"))));
      fprintf(v22, "%s\n", (const char *)objc_msgSend(v23, "UTF8String"));

    }
  }

  return v15;
}

void MakeMTLLinkedFunctions(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id ObjectArrayWithMap;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;

  v24 = a1;
  v5 = a3;
  if (*(_QWORD *)(a2 + 56) + *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 8) + *(_QWORD *)(a2 + 40))
  {
    v6 = v24;
    v7 = v5;
    v8 = *(_QWORD *)(a2 + 24);
    if (v8)
    {
      ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a2 + 16), v8, v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
      objc_msgSend(v6, "setFunctions:", v10);

    }
    v11 = *(_QWORD *)(a2 + 8);
    if (v11)
    {
      v12 = CreateObjectArrayWithMap(*(uint64_t **)a2, v11, v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      objc_msgSend(v6, "setBinaryFunctions:", v13);

    }
    v14 = *(_QWORD *)(a2 + 56);
    if (v14)
    {
      v15 = CreateObjectArrayWithMap(*(uint64_t **)(a2 + 48), v14, v7);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      objc_msgSend(v6, "setPrivateFunctions:", v16);

    }
    if (*(_QWORD *)(a2 + 40))
    {
      v17 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", *(_QWORD *)(a2 + 40));
      if (*(_QWORD *)(a2 + 40))
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(*(_QWORD *)(a2 + 32) + v18)));
          v21 = CreateObjectArrayWithMap(*(uint64_t **)(*(_QWORD *)(a2 + 32) + v18 + 8), *(_DWORD *)(*(_QWORD *)(a2 + 32) + v18 + 16), v7);
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          objc_msgSend(v17, "setObject:forKeyedSubscript:", v22, v20);

          ++v19;
          v18 += 24;
        }
        while (*(_QWORD *)(a2 + 40) > v19);
      }
      v23 = objc_msgSend(v17, "copy");
      objc_msgSend(v6, "setGroups:", v23);

    }
  }

}

id MakeMTLRenderPipelineDescriptorWithResourceIndex(uint64_t a1, void *a2)
{
  id MTLRenderPipelineDescriptorWithoutResourceIndex;
  void *v4;
  void *v5;

  MTLRenderPipelineDescriptorWithoutResourceIndex = MakeMTLRenderPipelineDescriptorWithoutResourceIndex(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPipelineDescriptorWithoutResourceIndex);
  v5 = v4;
  if (*(_BYTE *)(a1 + 1499))
    objc_msgSend(v4, "setResourceIndex:", *(_QWORD *)(a1 + 1280));
  return v5;
}

id MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  uint64_t j;
  void *v17;
  void *v18;
  uint64_t k;
  void *v20;
  void *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v30;
  uint64_t v31;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLMeshRenderPipelineDescriptor);
  if (*(_QWORD *)(a1 + 352))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setLabel:", v5);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 368)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
  objc_msgSend(v4, "setObjectFunction:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 360)));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v8));
  objc_msgSend(v4, "setMeshFunction:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 344)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v10));
  objc_msgSend(v4, "setFragmentFunction:", v11);

  if ((objc_opt_respondsToSelector(v4, "maxTotalThreadsPerObjectThreadgroup") & 1) != 0)
    objc_msgSend(v4, "setMaxTotalThreadsPerObjectThreadgroup:", *(unsigned __int16 *)(a1 + 406));
  if ((objc_opt_respondsToSelector(v4, "maxTotalThreadsPerMeshThreadgroup") & 1) != 0)
    objc_msgSend(v4, "setMaxTotalThreadsPerMeshThreadgroup:", *(unsigned __int16 *)(a1 + 404));
  if ((objc_opt_respondsToSelector(v4, "objectThreadgroupSizeIsMultipleOfThreadExecutionWidth") & 1) != 0)
    objc_msgSend(v4, "setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:", *(_BYTE *)(a1 + 507) != 0);
  if ((objc_opt_respondsToSelector(v4, "meshThreadgroupSizeIsMultipleOfThreadExecutionWidth") & 1) != 0)
    objc_msgSend(v4, "setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:", *(_BYTE *)(a1 + 506) != 0);
  objc_msgSend(v4, "setPayloadMemoryLength:", *(_QWORD *)(a1 + 376));
  v12 = *(_QWORD *)(a1 + 336);
  v30 = *(_OWORD *)(a1 + 320);
  v31 = v12;
  objc_msgSend(v4, "setMaxThreadgroupsPerMeshGrid:", &v30);
  for (i = 0; i != 31; ++i)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectBuffers"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", i));
    objc_msgSend(v15, "setMutability:", *(unsigned __int8 *)(a1 + 472 + i));

  }
  for (j = 0; j != 31; ++j)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "meshBuffers"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndexedSubscript:", j));
    objc_msgSend(v18, "setMutability:", *(unsigned __int8 *)(a1 + 441 + j));

  }
  for (k = 0; k != 31; ++k)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fragmentBuffers"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectAtIndexedSubscript:", k));
    objc_msgSend(v21, "setMutability:", *(unsigned __int8 *)(a1 + 410 + k));

  }
  objc_msgSend(v4, "setRasterSampleCount:", *(unsigned __int8 *)(a1 + 508));
  objc_msgSend(v4, "setAlphaToCoverageEnabled:", *(_BYTE *)(a1 + 503) != 0);
  objc_msgSend(v4, "setAlphaToOneEnabled:", *(_BYTE *)(a1 + 504) != 0);
  objc_msgSend(v4, "setRasterizationEnabled:", *(_BYTE *)(a1 + 509) != 0);
  if ((objc_opt_respondsToSelector(v4, "maxVertexAmplificationCount") & 1) != 0)
    objc_msgSend(v4, "setMaxVertexAmplificationCount:", *(unsigned int *)(a1 + 396));
  v22 = 0;
  v23 = (unsigned __int16 *)a1;
  do
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "colorAttachments"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", v22));

    ++v22;
    v23 += 8;
  }
  while (v22 != 8);
  objc_msgSend(v4, "setDepthAttachmentPixelFormat:", *(unsigned __int16 *)(a1 + 400));
  objc_msgSend(v4, "setStencilAttachmentPixelFormat:", *(unsigned __int16 *)(a1 + 408));
  if ((objc_opt_respondsToSelector(v4, "supportIndirectCommandBuffers") & 1) != 0)
    objc_msgSend(v4, "setSupportIndirectCommandBuffers:", *(_BYTE *)(a1 + 510) != 0);
  if ((objc_opt_respondsToSelector(v4, "explicitVisibilityGroupID") & 1) != 0)
    objc_msgSend(v4, "setExplicitVisibilityGroupID:", *(unsigned int *)(a1 + 392));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectLinkedFunctions"));
  MakeMTLLinkedFunctions(v26, a1 + 256, v3);

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "meshLinkedFunctions"));
  MakeMTLLinkedFunctions(v27, a1 + 192, v3);

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fragmentLinkedFunctions"));
  MakeMTLLinkedFunctions(v28, a1 + 128, v3);

  if ((objc_opt_respondsToSelector(v4, "maxAccelerationStructureTraversalDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxAccelerationStructureTraversalDepth:", *(unsigned __int16 *)(a1 + 402));

  return v4;
}

id MakeMTLMeshRenderPipelineDescriptorWithResourceIndex(uint64_t a1, void *a2)
{
  id MTLMeshRenderPipelineDescriptorWithoutResourceIndex;
  void *v4;
  void *v5;

  MTLMeshRenderPipelineDescriptorWithoutResourceIndex = MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(MTLMeshRenderPipelineDescriptorWithoutResourceIndex);
  v5 = v4;
  if (*(_BYTE *)(a1 + 510))
    objc_msgSend(v4, "setResourceIndex:", *(_QWORD *)(a1 + 384));
  return v5;
}

id MakeMTLStencilDescriptor(void *a1, unsigned int *a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "setStencilCompareFunction:", *((unsigned __int8 *)a2 + 10));
  objc_msgSend(v3, "setStencilFailureOperation:", *((unsigned __int8 *)a2 + 11));
  objc_msgSend(v3, "setDepthFailureOperation:", *((unsigned __int8 *)a2 + 8));
  objc_msgSend(v3, "setDepthStencilPassOperation:", *((unsigned __int8 *)a2 + 9));
  objc_msgSend(v3, "setReadMask:", *a2);
  objc_msgSend(v3, "setWriteMask:", a2[1]);
  return v3;
}

id MakeMTLDepthStencilDescriptor(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = objc_alloc_init((Class)MTLDepthStencilDescriptor);
  objc_msgSend(v2, "setDepthCompareFunction:", *(unsigned __int8 *)(a1 + 40));
  objc_msgSend(v2, "setDepthWriteEnabled:", *(_BYTE *)(a1 + 41) != 0);
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v2, "setLabel:", v3);

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "frontFaceStencil"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "backFaceStencil"));
  return v2;
}

id MakeMTLSamplerDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  void *v5;

  v2 = objc_alloc_init((Class)MTLSamplerDescriptor);
  objc_msgSend(v2, "setMinFilter:", *(unsigned __int8 *)(a1 + 56));
  objc_msgSend(v2, "setMagFilter:", *(unsigned __int8 *)(a1 + 55));
  objc_msgSend(v2, "setMipFilter:", *(unsigned __int8 *)(a1 + 57));
  objc_msgSend(v2, "setMaxAnisotropy:", *(_QWORD *)(a1 + 8));
  objc_msgSend(v2, "setSAddressMode:", *(unsigned __int8 *)(a1 + 61));
  objc_msgSend(v2, "setTAddressMode:", *(unsigned __int8 *)(a1 + 63));
  objc_msgSend(v2, "setRAddressMode:", *(unsigned __int8 *)(a1 + 59));
  objc_msgSend(v2, "setNormalizedCoordinates:", *(_BYTE *)(a1 + 58) != 0);
  LODWORD(v3) = *(_DWORD *)(a1 + 44);
  objc_msgSend(v2, "setLodMinClamp:", v3);
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  objc_msgSend(v2, "setLodMaxClamp:", v4);
  if (*(_QWORD *)a1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v2, "setLabel:", v5);

  }
  objc_msgSend(v2, "setLodAverage:", *(_BYTE *)(a1 + 54) != 0);
  objc_msgSend(v2, "setCompareFunction:", *(unsigned __int8 *)(a1 + 51));
  objc_msgSend(v2, "setBorderColor:", *(unsigned __int8 *)(a1 + 50));
  objc_msgSend(v2, "setSupportArgumentBuffers:", *(_BYTE *)(a1 + 62) != 0);
  if ((objc_opt_respondsToSelector(v2, "customBorderColorValue_0") & 1) != 0)
    objc_msgSend(v2, "setCustomBorderColorValue_0:", *(unsigned int *)(a1 + 24));
  if ((objc_opt_respondsToSelector(v2, "customBorderColorValue_1") & 1) != 0)
    objc_msgSend(v2, "setCustomBorderColorValue_1:", *(unsigned int *)(a1 + 28));
  if ((objc_opt_respondsToSelector(v2, "customBorderColorValue_2") & 1) != 0)
    objc_msgSend(v2, "setCustomBorderColorValue_2:", *(unsigned int *)(a1 + 32));
  if ((objc_opt_respondsToSelector(v2, "customBorderColorValue_3") & 1) != 0)
    objc_msgSend(v2, "setCustomBorderColorValue_3:", *(unsigned int *)(a1 + 36));
  if ((objc_opt_respondsToSelector(v2, "forceSeamsOnCubemapFiltering") & 1) != 0)
    objc_msgSend(v2, "setForceSeamsOnCubemapFiltering:", *(_BYTE *)(a1 + 53) != 0);
  if ((objc_opt_respondsToSelector(v2, "pixelFormat") & 1) != 0)
    objc_msgSend(v2, "setPixelFormat:", *(unsigned __int16 *)(a1 + 48));
  return v2;
}

id MakeMTLSamplerDescriptorWithResourceIndex(uint64_t a1)
{
  id MTLSamplerDescriptorWithoutResourceIndex;
  void *v3;

  MTLSamplerDescriptorWithoutResourceIndex = MakeMTLSamplerDescriptorWithoutResourceIndex(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(MTLSamplerDescriptorWithoutResourceIndex);
  objc_msgSend(v3, "setForceResourceIndex:", *(_QWORD *)(a1 + 16) != 0);
  objc_msgSend(v3, "setResourceIndex:", *(_QWORD *)(a1 + 16));
  return v3;
}

id MakeMTLHeapDescriptor(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLHeapDescriptor);
  objc_msgSend(v2, "setSize:", *(_QWORD *)(a1 + 8));
  if ((objc_opt_respondsToSelector(v2, "type") & 1) != 0)
    objc_msgSend(v2, "setType:", *(unsigned __int8 *)(a1 + 19));
  if ((objc_opt_respondsToSelector(v2, "resourceOptions") & 1) != 0)
    objc_msgSend(v2, "setResourceOptions:", *(unsigned __int16 *)(a1 + 16));
  if ((objc_opt_respondsToSelector(v2, "sparsePageSize") & 1) != 0)
    objc_msgSend(v2, "setSparsePageSize:", *(unsigned __int8 *)(a1 + 18));
  return v2;
}

id MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLIndirectCommandBufferDescriptor);
  objc_msgSend(v2, "setCommandTypes:", *(unsigned __int16 *)(a1 + 8));
  if ((objc_opt_respondsToSelector(v2, "inheritPipelineState") & 1) != 0)
    objc_msgSend(v2, "setInheritPipelineState:", *(_BYTE *)(a1 + 11) != 0);
  objc_msgSend(v2, "setInheritBuffers:", *(_BYTE *)(a1 + 10) != 0);
  objc_msgSend(v2, "setMaxVertexBufferBindCount:", *(unsigned __int8 *)(a1 + 18));
  objc_msgSend(v2, "setMaxFragmentBufferBindCount:", *(unsigned __int8 *)(a1 + 12));
  if ((objc_opt_respondsToSelector(v2, "maxKernelBufferBindCount") & 1) != 0)
    objc_msgSend(v2, "setMaxKernelBufferBindCount:", *(unsigned __int8 *)(a1 + 13));
  if ((objc_opt_respondsToSelector(v2, "maxKernelThreadgroupMemoryBindCount") & 1) != 0)
    objc_msgSend(v2, "setMaxKernelThreadgroupMemoryBindCount:", *(unsigned __int8 *)(a1 + 14));
  if ((objc_opt_respondsToSelector(v2, "supportRayTracing") & 1) != 0)
    objc_msgSend(v2, "setSupportRayTracing:", *(_BYTE *)(a1 + 20) != 0);
  if ((objc_opt_respondsToSelector(v2, "maxObjectBufferBindCount") & 1) != 0)
    objc_msgSend(v2, "setMaxObjectBufferBindCount:", *(unsigned __int8 *)(a1 + 16));
  if ((objc_opt_respondsToSelector(v2, "maxMeshBufferBindCount") & 1) != 0)
    objc_msgSend(v2, "setMaxMeshBufferBindCount:", *(unsigned __int8 *)(a1 + 15));
  if ((objc_opt_respondsToSelector(v2, "maxObjectThreadgroupMemoryBindCount") & 1) != 0)
    objc_msgSend(v2, "setMaxObjectThreadgroupMemoryBindCount:", *(unsigned __int8 *)(a1 + 17));
  if ((objc_opt_respondsToSelector(v2, "supportDynamicAttributeStride") & 1) != 0)
    objc_msgSend(v2, "setSupportDynamicAttributeStride:", *(_BYTE *)(a1 + 19) != 0);
  return v2;
}

id MakeMTLIndirectCommandBufferDescriptorWithResourceIndex(_QWORD *a1)
{
  id MTLIndirectCommandBufferDescriptorWithoutResourceIndex;
  void *v3;

  MTLIndirectCommandBufferDescriptorWithoutResourceIndex = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex((uint64_t)a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(MTLIndirectCommandBufferDescriptorWithoutResourceIndex);
  objc_msgSend(v3, "setResourceIndex:", *a1);
  return v3;
}

id MakeMTLComputePipelineDescriptorWithoutResourceIndex(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  id v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void *v16;
  id v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id ObjectArrayWithMap;
  void *v25;
  id Dictionary;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLComputePipelineDescriptor);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 848)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));
  objc_msgSend(v4, "setComputeFunction:", v6);

  objc_msgSend(v4, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", *(_BYTE *)(a1 + 958) != 0);
  if (*(_QWORD *)(a1 + 872))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setLabel:", v7);

  }
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stageInputDescriptor"));
  v9 = 0;
  v10 = (unsigned __int8 *)(a1 + 10);
  do
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "layouts"));
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", v9));
    objc_msgSend(v12, "setStride:", *(_QWORD *)(v10 - 10));
    objc_msgSend(v12, "setStepRate:", *((unsigned __int16 *)v10 - 1));
    v13 = *v10;
    v10 += 16;
    objc_msgSend(v12, "setStepFunction:", v13);

    ++v9;
  }
  while (v9 != 31);
  v14 = 0;
  v15 = (unsigned __int8 *)(a1 + 501);
  do
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "attributes"));
    v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndexedSubscript:", v14));
    objc_msgSend(v17, "setFormat:", *v15);
    objc_msgSend(v17, "setOffset:", *(unsigned int *)(v15 - 5));
    objc_msgSend(v17, "setBufferIndex:", *(v15 - 1));

    ++v14;
    v15 += 8;
  }
  while (v14 != 31);
  objc_msgSend(v8, "setIndexType:", *(unsigned __int8 *)(a1 + 745));
  objc_msgSend(v8, "setIndexBufferIndex:", *(unsigned __int8 *)(a1 + 744));

  for (i = 0; i != 31; ++i)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "buffers"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", i));
    objc_msgSend(v20, "setMutability:", *(unsigned __int8 *)(a1 + 920 + i));

  }
  if ((objc_opt_respondsToSelector(v4, "supportIndirectCommandBuffers") & 1) != 0)
    objc_msgSend(v4, "setSupportIndirectCommandBuffers:", *(_BYTE *)(a1 + 956) != 0);
  objc_msgSend(v4, "setMaxTotalThreadsPerThreadgroup:", *(unsigned __int16 *)(a1 + 918));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 880)));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v21));
  objc_msgSend(v4, "setPipelineLibrary:", v22);

  v23 = *(_QWORD *)(a1 + 864);
  if (v23)
  {
    ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 856), v23, v3);
    v25 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
    objc_msgSend(v4, "setFunctionPointers:", v25);

  }
  if ((objc_opt_respondsToSelector(v4, "textureWriteRoundingMode") & 1) != 0)
    objc_msgSend(v4, "setTextureWriteRoundingMode:", *(unsigned __int8 *)(a1 + 957));
  if ((objc_opt_respondsToSelector(v4, "openGLModeEnabled") & 1) != 0)
    objc_msgSend(v4, "setOpenGLModeEnabled:", *(_BYTE *)(a1 + 954) != 0);
  if ((objc_opt_respondsToSelector(v4, "openCLModeEnabled") & 1) != 0)
    objc_msgSend(v4, "setOpenCLModeEnabled:", *(_BYTE *)(a1 + 953) != 0);
  if ((objc_opt_respondsToSelector(v4, "needsCustomBorderColorSamplers") & 1) != 0)
    objc_msgSend(v4, "setNeedsCustomBorderColorSamplers:", *(_BYTE *)(a1 + 952) != 0);
  Dictionary = GTData_MakeDictionary(*(_QWORD *)(a1 + 832), *(_QWORD *)(a1 + 840));
  v27 = (void *)objc_claimAutoreleasedReturnValue(Dictionary);
  objc_msgSend(v4, "setPluginData:", v27);

  v28 = GTData_MakeDictionary(*(_QWORD *)(a1 + 816), *(_QWORD *)(a1 + 824));
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  objc_msgSend(v4, "setDriverCompilerOptions:", v29);

  if ((objc_opt_respondsToSelector(v4, "maxCallStackDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxCallStackDepth:", *(unsigned __int16 *)(a1 + 916));
  if ((objc_opt_respondsToSelector(v4, "supportAddingBinaryFunctions") & 1) != 0)
    objc_msgSend(v4, "setSupportAddingBinaryFunctions:", *(_BYTE *)(a1 + 955) != 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "linkedFunctions"));
  MakeMTLLinkedFunctions(v30, a1 + 752, v3);

  v31 = *(_QWORD *)(a1 + 896);
  if (v31)
  {
    v32 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 888), v31, v3);
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    objc_msgSend(v4, "setPreloadedLibraries:", v33);

  }
  if ((objc_opt_respondsToSelector(v4, "maxAccelerationStructureTraversalDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxAccelerationStructureTraversalDepth:", *(unsigned __int16 *)(a1 + 914));

  return v4;
}

id MakeMTLComputePipelineDescriptorWithResourceIndex(uint64_t a1, void *a2)
{
  id MTLComputePipelineDescriptorWithoutResourceIndex;
  void *v4;
  void *v5;

  MTLComputePipelineDescriptorWithoutResourceIndex = MakeMTLComputePipelineDescriptorWithoutResourceIndex(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(MTLComputePipelineDescriptorWithoutResourceIndex);
  v5 = v4;
  if (*(_BYTE *)(a1 + 956))
    objc_msgSend(v4, "setResourceIndex:", *(_QWORD *)(a1 + 904));
  return v5;
}

id MakeMTLTileRenderPipelineDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t j;
  void *v12;
  void *v13;
  id Dictionary;
  void *v15;
  uint64_t v16;
  id ObjectArrayWithMap;
  void *v18;
  void *v19;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
  if (*(_QWORD *)(a1 + 96))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setLabel:", v5);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 120)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));
  objc_msgSend(v4, "setTileFunction:", v7);

  objc_msgSend(v4, "setRasterSampleCount:", *(unsigned __int16 *)(a1 + 134));
  for (i = 0; i != 8; ++i)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "colorAttachments"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", i));
    objc_msgSend(v10, "setPixelFormat:", *(unsigned __int16 *)(a1 + 2 * i + 64));

  }
  objc_msgSend(v4, "setThreadgroupSizeMatchesTileSize:", *(_BYTE *)(a1 + 169) != 0);
  for (j = 0; j != 31; ++j)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tileBuffers"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", j));
    objc_msgSend(v13, "setMutability:", *(unsigned __int8 *)(a1 + j + 136));

  }
  Dictionary = GTData_MakeDictionary(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v15 = (void *)objc_claimAutoreleasedReturnValue(Dictionary);
  objc_msgSend(v4, "setPluginData:", v15);

  v16 = *(_QWORD *)(a1 + 112);
  if (v16)
  {
    ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 104), v16, v3);
    v18 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
    objc_msgSend(v4, "setPreloadedLibraries:", v18);

  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "linkedFunctions"));
  MakeMTLLinkedFunctions(v19, a1, v3);

  if ((objc_opt_respondsToSelector(v4, "supportAddingBinaryFunctions") & 1) != 0)
    objc_msgSend(v4, "setSupportAddingBinaryFunctions:", *(_BYTE *)(a1 + 168) != 0);
  if ((objc_opt_respondsToSelector(v4, "maxCallStackDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxCallStackDepth:", *(unsigned __int16 *)(a1 + 130));
  if ((objc_opt_respondsToSelector(v4, "maxAccelerationStructureTraversalDepth") & 1) != 0)
    objc_msgSend(v4, "setMaxAccelerationStructureTraversalDepth:", *(unsigned __int16 *)(a1 + 128));
  if ((objc_opt_respondsToSelector(v4, "maxTotalThreadsPerThreadgroup") & 1) != 0)
    objc_msgSend(v4, "setMaxTotalThreadsPerThreadgroup:", *(unsigned __int16 *)(a1 + 132));
  if ((objc_opt_respondsToSelector(v4, "colorSampleCount") & 1) != 0)
    objc_msgSend(v4, "setColorSampleCount:", *(unsigned __int8 *)(a1 + 167));

  return v4;
}

id MakeMTLCommandQueueDescriptor(unsigned int *a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLCommandQueueDescriptor);
  objc_msgSend(v2, "setMaxCommandBufferCount:", *a1);
  if ((objc_opt_respondsToSelector(v2, "qosLevel") & 1) != 0)
    objc_msgSend(v2, "setQosLevel:", *((unsigned __int8 *)a1 + 8));
  if ((objc_opt_respondsToSelector(v2, "commitSynchronously") & 1) != 0)
    objc_msgSend(v2, "setCommitSynchronously:", *((_BYTE *)a1 + 4) != 0);
  if ((objc_opt_respondsToSelector(v2, "isOpenGLQueue") & 1) != 0)
    objc_msgSend(v2, "setIsOpenGLQueue:", *((_BYTE *)a1 + 7) != 0);
  if ((objc_opt_respondsToSelector(v2, "disableCrossQueueHazardTracking") & 1) != 0)
    objc_msgSend(v2, "setDisableCrossQueueHazardTracking:", *((_BYTE *)a1 + 6) != 0);
  if ((objc_opt_respondsToSelector(v2, "commitsWithQoS") & 1) != 0)
    objc_msgSend(v2, "setCommitsWithQoS:", *((_BYTE *)a1 + 5) != 0);
  return v2;
}

id MakeMTLIOCommandQueueDescriptor(unsigned int *a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLIOCommandQueueDescriptor);
  objc_msgSend(v2, "setMaxCommandBufferCount:", *a1);
  objc_msgSend(v2, "setPriority:", *((unsigned __int8 *)a1 + 4));
  objc_msgSend(v2, "setType:", *((unsigned __int8 *)a1 + 5));
  return v2;
}

id MakeMTLVisibleFunctionTableDescriptorWithoutResourceIndex(_QWORD *a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
  objc_msgSend(v2, "setFunctionCount:", *a1);
  return v2;
}

id MakeMTLVisibleFunctionTableDescriptorWithResourceIndex(_QWORD *a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
  objc_msgSend(v2, "setFunctionCount:", *a1);
  objc_msgSend(v2, "setForceResourceIndex:", a1[1] != 0);
  objc_msgSend(v2, "setResourceIndex:", a1[1]);
  return v2;
}

id MakeMTLBlitPassDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLBlitPassDescriptor);
  v5 = 0;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    if (*v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sampleBufferAttachments"));
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", v5));
      v9 = *v6;
      v10 = v3;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v9));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

      objc_msgSend(v8, "setSampleBuffer:", v12);
      objc_msgSend(v8, "setStartOfEncoderSampleIndex:", v6[1]);
      objc_msgSend(v8, "setEndOfEncoderSampleIndex:", *(v6 - 1));

    }
    ++v5;
    v6 += 3;
  }
  while (v5 != 4);

  return v4;
}

id MakeMTLComputePassDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLComputePassDescriptor);
  objc_msgSend(v4, "setDispatchType:", *(unsigned __int8 *)(a1 + 96));
  v5 = 0;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    if (*v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sampleBufferAttachments"));
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", v5));
      v9 = *v6;
      v10 = v3;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v9));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

      objc_msgSend(v8, "setSampleBuffer:", v12);
      objc_msgSend(v8, "setStartOfEncoderSampleIndex:", v6[1]);
      objc_msgSend(v8, "setEndOfEncoderSampleIndex:", *(v6 - 1));

    }
    ++v5;
    v6 += 3;
  }
  while (v5 != 4);

  return v4;
}

id MakeMTLResourceStatePassDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLResourceStatePassDescriptor);
  v5 = 0;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    if (*v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sampleBufferAttachments"));
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", v5));
      v9 = *v6;
      v10 = v3;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v9));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

      objc_msgSend(v8, "setSampleBuffer:", v12);
      objc_msgSend(v8, "setStartOfEncoderSampleIndex:", v6[1]);
      objc_msgSend(v8, "setEndOfEncoderSampleIndex:", *(v6 - 1));

    }
    ++v5;
    v6 += 3;
  }
  while (v5 != 4);

  return v4;
}

id MakeMTLAccelerationStructurePassDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLAccelerationStructurePassDescriptor);
  v5 = 0;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    if (*v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sampleBufferAttachments"));
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", v5));
      v9 = *v6;
      v10 = v3;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v9));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));

      objc_msgSend(v8, "setSampleBuffer:", v12);
      objc_msgSend(v8, "setStartOfEncoderSampleIndex:", v6[1]);
      objc_msgSend(v8, "setEndOfEncoderSampleIndex:", *(v6 - 1));

    }
    ++v5;
    v6 += 3;
  }
  while (v5 != 4);

  return v4;
}

id MakeMTLIntersectionFunctionTableDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLIntersectionFunctionTableDescriptor);
  objc_msgSend(v2, "setFunctionCount:", *(unsigned int *)(a1 + 8));
  return v2;
}

id MakeMTLIntersectionFunctionTableDescriptorWithResourceIndex(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLIntersectionFunctionTableDescriptor);
  objc_msgSend(v2, "setFunctionCount:", *(unsigned int *)(a1 + 8));
  objc_msgSend(v2, "setForceResourceIndex:", *(_QWORD *)a1 != 0);
  objc_msgSend(v2, "setResourceIndex:", *(_QWORD *)a1);
  return v2;
}

id MakeMTLRenderPipelineFunctionsDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id ObjectArrayWithMap;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLRenderPipelineFunctionsDescriptor);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 64), v5, v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
    objc_msgSend(v4, "setVertexAdditionalBinaryFunctions:", v7);

  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = CreateObjectArrayWithMap(*(uint64_t **)a1, v8, v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    objc_msgSend(v4, "setFragmentAdditionalBinaryFunctions:", v10);

  }
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
  {
    v12 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 48), v11, v3);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_msgSend(v4, "setTileAdditionalBinaryFunctions:", v13);

  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
  {
    v15 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 16), v14, v3);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    objc_msgSend(v4, "setMeshAdditionalBinaryFunctions:", v16);

  }
  v17 = *(_QWORD *)(a1 + 40);
  if (v17)
  {
    v18 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 32), v17, v3);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    objc_msgSend(v4, "setObjectAdditionalBinaryFunctions:", v19);

  }
  return v4;
}

id MakeMTLResidencySetDescriptor(uint64_t a1)
{
  id v2;
  void *v3;

  v2 = objc_alloc_init((Class)MTLResidencySetDescriptor);
  objc_msgSend(v2, "setEvictsImmediately:", *(_BYTE *)(a1 + 16) != 0);
  if ((objc_opt_respondsToSelector(v2, "initialCapacity") & 1) != 0)
    objc_msgSend(v2, "setInitialCapacity:", *(_QWORD *)a1);
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v2, "setLabel:", v3);

  }
  return v2;
}

id MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = objc_alloc_init((Class)MTLTextureDescriptor);
  objc_msgSend(v2, "setTextureType:", objc_msgSend(v1, "textureType"));
  objc_msgSend(v2, "setPixelFormat:", objc_msgSend(v1, "pixelFormat"));
  objc_msgSend(v2, "setUsage:", objc_msgSend(v1, "usage"));
  objc_msgSend(v2, "setWidth:", objc_msgSend(v1, "width"));
  objc_msgSend(v2, "setHeight:", objc_msgSend(v1, "height"));
  objc_msgSend(v2, "setDepth:", objc_msgSend(v1, "depth"));
  objc_msgSend(v2, "setArrayLength:", objc_msgSend(v1, "arrayLength"));
  objc_msgSend(v2, "setStorageMode:", objc_msgSend(v1, "storageMode"));
  objc_msgSend(v2, "setSampleCount:", objc_msgSend(v1, "sampleCount"));
  objc_msgSend(v2, "setCpuCacheMode:", objc_msgSend(v1, "cpuCacheMode"));
  objc_msgSend(v2, "setMipmapLevelCount:", objc_msgSend(v1, "mipmapLevelCount"));
  if ((objc_opt_respondsToSelector(v2, "hazardTrackingMode") & 1) != 0)
    objc_msgSend(v2, "setHazardTrackingMode:", objc_msgSend(v1, "hazardTrackingMode"));
  if ((objc_opt_respondsToSelector(v2, "allowGPUOptimizedContents") & 1) != 0)
    objc_msgSend(v2, "setAllowGPUOptimizedContents:", objc_msgSend(v1, "allowGPUOptimizedContents"));
  if ((objc_opt_respondsToSelector(v2, "swizzle") & 1) != 0)
    objc_msgSend(v2, "setSwizzle:", objc_msgSend(v1, "swizzle"));
  if ((objc_opt_respondsToSelector(v2, "swizzleKey") & 1) != 0
    && (objc_opt_respondsToSelector(v1, "swizzleKey") & 1) != 0)
  {
    objc_msgSend(v2, "setSwizzleKey:", objc_msgSend(v1, "swizzleKey"));
  }
  if ((objc_opt_respondsToSelector(v2, "rotation") & 1) != 0 && (objc_opt_respondsToSelector(v1, "rotation") & 1) != 0)
    objc_msgSend(v2, "setRotation:", objc_msgSend(v1, "rotation"));
  if ((objc_opt_respondsToSelector(v2, "sparseSurfaceDefaultValue") & 1) != 0
    && (objc_opt_respondsToSelector(v1, "sparseSurfaceDefaultValue") & 1) != 0)
  {
    objc_msgSend(v2, "setSparseSurfaceDefaultValue:", objc_msgSend(v1, "sparseSurfaceDefaultValue"));
  }
  if ((objc_opt_respondsToSelector(v2, "compressionType") & 1) != 0
    && (objc_opt_respondsToSelector(v1, "compressionType") & 1) != 0)
  {
    objc_msgSend(v2, "setCompressionType:", objc_msgSend(v1, "compressionType"));
  }
  if ((objc_opt_respondsToSelector(v2, "compressionFootprint") & 1) != 0
    && (objc_opt_respondsToSelector(v1, "compressionFootprint") & 1) != 0)
  {
    objc_msgSend(v2, "setCompressionFootprint:", objc_msgSend(v1, "compressionFootprint"));
  }

  return v2;
}

void MakeGTMTLSamplerDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  size_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  void *v17;
  id v18;
  uint64_t v19;

  v3 = a2;
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "label")));
  v5 = (const char *)objc_msgSend(v4, "UTF8String");

  if (v5)
    strlen(v5);
  __chkstk_darwin();
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v7, v6);
  v8 = v3;
  *(_OWORD *)a1 = GTMTLSamplerDescriptorDefaults;
  *(_OWORD *)(a1 + 16) = unk_4A9D00;
  *(_OWORD *)(a1 + 32) = xmmword_4A9D10;
  *(_OWORD *)(a1 + 48) = unk_4A9D20;
  v9 = v8;
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "label")));
  v11 = (const char *)objc_msgSend(v10, "UTF8String");
  v12 = v11;
  if (!v11 || (v13 = strlen(v11), v14 = v13 + 1, v13 == -1))
  {
    v14 = 0;
    v7 = 0;
  }
  memcpy(v7, v12, v14);

  *(_BYTE *)(a1 + 56) = objc_msgSend(v9, "minFilter");
  *(_BYTE *)(a1 + 55) = objc_msgSend(v9, "magFilter");
  *(_BYTE *)(a1 + 57) = objc_msgSend(v9, "mipFilter");
  *(_QWORD *)(a1 + 8) = objc_msgSend(v9, "maxAnisotropy");
  *(_BYTE *)(a1 + 61) = objc_msgSend(v9, "sAddressMode");
  *(_BYTE *)(a1 + 63) = objc_msgSend(v9, "tAddressMode");
  *(_BYTE *)(a1 + 59) = objc_msgSend(v9, "rAddressMode");
  *(_BYTE *)(a1 + 58) = objc_msgSend(v9, "normalizedCoordinates");
  objc_msgSend(v9, "lodMinClamp");
  *(_DWORD *)(a1 + 44) = v15;
  objc_msgSend(v9, "lodMaxClamp");
  *(_DWORD *)(a1 + 40) = v16;
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 54) = objc_msgSend(v9, "lodAverage");
  *(_BYTE *)(a1 + 51) = objc_msgSend(v9, "compareFunction");
  *(_BYTE *)(a1 + 50) = objc_msgSend(v9, "borderColor");
  *(_BYTE *)(a1 + 62) = objc_msgSend(v9, "supportArgumentBuffers");
  if ((objc_opt_respondsToSelector(v9, "resourceIndex") & 1) != 0)
    *(_QWORD *)(a1 + 16) = objc_msgSend(v9, "resourceIndex");
  *(_BYTE *)(a1 + 52) = objc_msgSend(v9, "forceResourceIndex");
  if ((objc_opt_respondsToSelector(v9, "customBorderColorValue_0") & 1) != 0)
    *(_DWORD *)(a1 + 24) = objc_msgSend(v9, "customBorderColorValue");
  if ((objc_opt_respondsToSelector(v9, "customBorderColorValue_1") & 1) != 0)
    *(_DWORD *)(a1 + 28) = objc_msgSend(v9, "customBorderColorValue");
  if ((objc_opt_respondsToSelector(v9, "customBorderColorValue_2") & 1) != 0)
    *(_DWORD *)(a1 + 32) = objc_msgSend(v9, "customBorderColorValue");
  if ((objc_opt_respondsToSelector(v9, "customBorderColorValue_3") & 1) != 0)
    *(_DWORD *)(a1 + 36) = objc_msgSend(v9, "customBorderColorValue");
  if ((objc_opt_respondsToSelector(v9, "forceSeamsOnCubemapFiltering") & 1) != 0)
    *(_BYTE *)(a1 + 53) = objc_msgSend(v9, "forceSeamsOnCubemapFiltering");
  if ((objc_opt_respondsToSelector(v9, "pixelFormat") & 1) != 0)
    *(_WORD *)(a1 + 48) = (unsigned __int16)objc_msgSend(v9, "pixelFormat");

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "label"));
  v18 = objc_retainAutorelease(v17);
  *(_QWORD *)a1 = objc_msgSend(v18, "UTF8String");

}

id MakeMTLRenderPassDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLRenderPassDescriptor);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 792)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));
  objc_msgSend(v4, "setVisibilityResultBuffer:", v6);

  v7 = 0;
  v8 = a1;
  do
  {
    if (*(_QWORD *)(v8 + 8))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "colorAttachments"));
      v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", v7));
      objc_msgSend(MakeMTLRenderPassAttachmentDescriptor(v10, v8, v3), "setClearColor:", *(double *)(v8 + 32), *(double *)(v8 + 40), *(double *)(v8 + 48), *(double *)(v8 + 56));

    }
    v8 += 64;
    ++v7;
  }
  while (v7 != 8);
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "depthAttachment"));
  objc_msgSend(MakeMTLRenderPassAttachmentDescriptor(v11, a1 + 672, v3), "setClearDepth:", *(double *)(a1 + 704));
  objc_msgSend(v11, "setDepthResolveFilter:", *(unsigned __int8 *)(a1 + 712));

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stencilAttachment"));
  objc_msgSend(MakeMTLRenderPassAttachmentDescriptor(v12, a1 + 720, v3), "setClearStencil:", *(unsigned int *)(a1 + 752));
  if ((objc_opt_respondsToSelector(v12, "stencilResolveFilter") & 1) != 0)
    objc_msgSend(v12, "setStencilResolveFilter:", *(unsigned __int8 *)(a1 + 756));

  objc_msgSend(v4, "setRenderTargetArrayLength:", *(unsigned __int16 *)(a1 + 806));
  if ((objc_opt_respondsToSelector(v4, "imageblockSampleLength") & 1) != 0)
    objc_msgSend(v4, "setImageblockSampleLength:", *(unsigned __int16 *)(a1 + 804));
  if ((objc_opt_respondsToSelector(v4, "threadgroupMemoryLength") & 1) != 0)
    objc_msgSend(v4, "setThreadgroupMemoryLength:", *(unsigned int *)(a1 + 800));
  if ((objc_opt_respondsToSelector(v4, "tileWidth") & 1) != 0)
    objc_msgSend(v4, "setTileWidth:", *(unsigned __int16 *)(a1 + 814));
  if ((objc_opt_respondsToSelector(v4, "tileHeight") & 1) != 0)
    objc_msgSend(v4, "setTileHeight:", *(unsigned __int16 *)(a1 + 812));
  if ((objc_opt_respondsToSelector(v4, "renderTargetWidth") & 1) != 0)
    objc_msgSend(v4, "setRenderTargetWidth:", *(unsigned __int16 *)(a1 + 810));
  if ((objc_opt_respondsToSelector(v4, "renderTargetHeight") & 1) != 0)
    objc_msgSend(v4, "setRenderTargetHeight:", *(unsigned __int16 *)(a1 + 808));
  if ((objc_opt_respondsToSelector(v4, "defaultRasterSampleCount") & 1) != 0)
    objc_msgSend(v4, "setDefaultRasterSampleCount:", *(unsigned __int8 *)(a1 + 816));
  if ((objc_opt_respondsToSelector(v4, "openGLModeEnabled") & 1) != 0)
    objc_msgSend(v4, "setOpenGLModeEnabled:", *(_BYTE *)(a1 + 818) != 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 784)));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v13));
  objc_msgSend(v4, "setRasterizationRateMap:", v14);

  if ((objc_opt_respondsToSelector(v4, "ditherEnabled") & 1) != 0)
    objc_msgSend(v4, "setDitherEnabled:", *(_BYTE *)(a1 + 817) != 0);
  if ((objc_opt_respondsToSelector(v4, "defaultColorSampleCount") & 1) != 0)
    objc_msgSend(v4, "setDefaultColorSampleCount:", *(_QWORD *)(a1 + 776));
  if ((objc_opt_respondsToSelector(v4, "pointCoordYFlipEnabled") & 1) != 0)
    objc_msgSend(v4, "setPointCoordYFlipEnabled:", *(_BYTE *)(a1 + 819) != 0);
  v15 = 0;
  v16 = (_QWORD *)(a1 + 544);
  do
  {
    if (*(v16 - 2))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sampleBufferAttachments"));
      v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndexedSubscript:", v15));
      v19 = *(v16 - 2);
      v20 = v3;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v19));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v21));

      objc_msgSend(v18, "setSampleBuffer:", v22);
      objc_msgSend(v18, "setStartOfVertexSampleIndex:", *v16);
      objc_msgSend(v18, "setEndOfVertexSampleIndex:", *(v16 - 3));
      objc_msgSend(v18, "setStartOfFragmentSampleIndex:", *(v16 - 1));
      objc_msgSend(v18, "setEndOfFragmentSampleIndex:", *(v16 - 4));

    }
    ++v15;
    v16 += 5;
  }
  while (v15 != 4);
  if ((objc_opt_respondsToSelector(v4, "skipEmptyTilesOnClearEnabled") & 1) != 0)
    objc_msgSend(v4, "setSkipEmptyTilesOnClearEnabled:", *(_BYTE *)(a1 + 820) != 0);

  objc_msgSend(v4, "setSamplePositions:count:", *(_QWORD *)(a1 + 760), *(_QWORD *)(a1 + 768));
  return v4;
}

id MakeMTLRasterizationRateMapDescriptor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  double v19;
  char *v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = 8 * v2;
  __chkstk_darwin();
  v4 = (char *)v22 - ((8 * v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v4, 8 * v2);
  if (*(_QWORD *)(a1 + 16))
  {
    v22[1] = v22;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + v5);
      v8 = v7[8];
      v9 = v7[10];
      v10 = v7[9];
      v11 = objc_alloc((Class)MTLRasterizationRateLayerDescriptor);
      v23 = v8;
      v24 = v9;
      v25 = v10;
      v12 = objc_msgSend(v11, "initWithSampleCount:", &v23);
      v13 = *(void **)&v4[8 * v6];
      *(_QWORD *)&v4[8 * v6] = v12;

      memcpy(objc_msgSend(v12, "horizontalSampleStorage"), *(const void **)(*(_QWORD *)(a1 + 8) + v5), 4 * v8);
      memcpy(objc_msgSend(v12, "verticalSampleStorage"), *(const void **)(*(_QWORD *)(a1 + 8) + v5 + 8), 4 * v9);
      ++v6;
      v14 = *(_QWORD *)(a1 + 16);
      v5 += 24;
    }
    while (v6 < v14);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(unsigned __int16 *)(a1 + 30);
  v16 = *(unsigned __int16 *)(a1 + 28);
  v23 = *(unsigned __int16 *)(a1 + 32);
  v24 = v15;
  v25 = v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[MTLRasterizationRateMapDescriptor rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:](MTLRasterizationRateMapDescriptor, "rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:", &v23, v14, (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0)));
  if (*(_QWORD *)a1)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v17, "setLabel:", v18);

  }
  if ((objc_opt_respondsToSelector(v17, "mutability") & 1) != 0)
    objc_msgSend(v17, "setMutability:", *(unsigned __int8 *)(a1 + 34));
  if ((objc_opt_respondsToSelector(v17, "minFactor") & 1) != 0)
  {
    LODWORD(v19) = *(_DWORD *)(a1 + 24);
    objc_msgSend(v17, "setMinFactor:", v19);
  }
  if ((objc_opt_respondsToSelector(v17, "skipSampleValidationAndApplySampleAtTileGranularity") & 1) != 0)
    objc_msgSend(v17, "setSkipSampleValidationAndApplySampleAtTileGranularity:", *(_BYTE *)(a1 + 35) != 0);
  if (v2)
  {
    v20 = v4 - 8;
    do
    {

      v3 -= 8;
    }
    while (v3);
  }
  return v17;
}

id MakeMTLCounterSampleBufferDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLCounterSampleBufferDescriptor);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 8)));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v16 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "counterSets"));
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v18;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "name"));
        v13 = objc_msgSend(v5, "isEqualToString:", v12);

        if (v13)
        {
          objc_msgSend(v4, "setCounterSet:", v11);
          goto LABEL_11;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

  if (*(_QWORD *)a1)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setLabel:", v14);

  }
  objc_msgSend(v4, "setStorageMode:", *(unsigned __int8 *)(a1 + 44));
  objc_msgSend(v4, "setSampleCount:", *(unsigned int *)(a1 + 40));

  return v4;
}

id MakeMTLCompileOptions(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id Dictionary;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id ObjectArrayWithMap;
  void *v11;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLCompileOptions);
  Dictionary = GTData_MakeDictionary(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v6 = (void *)objc_claimAutoreleasedReturnValue(Dictionary);
  objc_msgSend(v4, "setPreprocessorMacros:", v6);

  objc_msgSend(v4, "setDebuggingEnabled:", *(_BYTE *)(a1 + 56) != 0);
  objc_msgSend(v4, "setLanguageVersion:", *(unsigned int *)(a1 + 48));
  if (*(_QWORD *)(a1 + 16))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setAdditionalCompilerArguments:", v7);

  }
  if ((objc_opt_respondsToSelector(v4, "preserveInvariance") & 1) != 0)
    objc_msgSend(v4, "setPreserveInvariance:", *(_BYTE *)(a1 + 62) != 0);
  if (*(_QWORD *)(a1 + 24))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setInstallName:", v8);

  }
  if ((objc_opt_respondsToSelector(v4, "libraryType") & 1) != 0)
    objc_msgSend(v4, "setLibraryType:", *(unsigned __int8 *)(a1 + 58));
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 32), v9, v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
    objc_msgSend(v4, "setLibraries:", v11);

  }
  if ((objc_opt_respondsToSelector(v4, "sourceLanguage") & 1) != 0)
    objc_msgSend(v4, "setSourceLanguage:", *(unsigned __int8 *)(a1 + 63));
  if ((objc_opt_respondsToSelector(v4, "optimizationLevel") & 1) != 0)
    objc_msgSend(v4, "setOptimizationLevel:", *(unsigned __int8 *)(a1 + 61));
  if ((objc_opt_respondsToSelector(v4, "compileSymbolVisibility") & 1) != 0)
    objc_msgSend(v4, "setCompileSymbolVisibility:", *(unsigned __int8 *)(a1 + 55));
  if ((objc_opt_respondsToSelector(v4, "allowReferencingUndefinedSymbols") & 1) != 0)
    objc_msgSend(v4, "setAllowReferencingUndefinedSymbols:", *(_BYTE *)(a1 + 54) != 0);
  if ((objc_opt_respondsToSelector(v4, "maxTotalThreadsPerThreadgroup") & 1) != 0)
    objc_msgSend(v4, "setMaxTotalThreadsPerThreadgroup:", *(unsigned __int16 *)(a1 + 52));
  if ((objc_opt_respondsToSelector(v4, "mathFloatingPointFunctions") & 1) != 0)
    objc_msgSend(v4, "setMathFloatingPointFunctions:", *(unsigned __int8 *)(a1 + 59));
  if ((objc_opt_respondsToSelector(v4, "mathMode") & 1) != 0)
    objc_msgSend(v4, "setMathMode:", *(unsigned __int8 *)(a1 + 60));

  return v4;
}

id MakeMTLFunctionConstantValues(_QWORD *a1)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;

  v2 = objc_alloc_init((Class)MTLFunctionConstantValues);
  v3 = a1[1];
  if (v3)
  {
    v4 = 0;
    for (i = 0; i < v3; ++i)
    {
      v6 = *(_QWORD *)(*a1 + v4);
      if (v6)
      {
        objc_msgSend(v2, "setConstantValue:type:atIndex:", v6, *(unsigned __int8 *)(*a1 + v4 + 27), *(unsigned __int16 *)(*a1 + v4 + 24));
        v3 = a1[1];
      }
      v4 += 32;
    }
  }
  return v2;
}

id MakeMTLFunctionDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id MTLFunctionConstantValues;
  void *v8;
  id ObjectArrayWithMap;
  void *v10;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLFunctionDescriptor);
  objc_msgSend(v4, "setOptions:", *(unsigned __int8 *)(a1 + 40));
  if (*(_QWORD *)(a1 + 8))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setName:", v5);

  }
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setSpecializedName:", v6);

  }
  if (*(_QWORD *)a1)
  {
    MTLFunctionConstantValues = MakeMTLFunctionConstantValues(*(_QWORD **)a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(MTLFunctionConstantValues);
    objc_msgSend(v4, "setConstantValues:", v8);

  }
  if (*(_QWORD *)(a1 + 24) && (objc_opt_respondsToSelector(v4, "privateFunctions") & 1) != 0)
  {
    ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 16), *(_DWORD *)(a1 + 24), v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
    objc_msgSend(v4, "setPrivateFunctions:", v10);

  }
  return v4;
}

id MakeMTLAccelerationStructureDescriptor(unsigned __int8 *a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  const CATransform3D **v8;
  const CATransform3D **v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  const CATransform3D **v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  double v102;
  double v103;
  uint64_t v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  unint64_t v110;
  void *v111;
  void *v112;
  id v113;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  id v126;
  id v127;
  void *v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;

  v3 = a2;
  v4 = v3;
  v5 = *a1;
  switch(v5)
  {
    case 3:
      v116 = objc_alloc_init((Class)MTLIndirectInstanceAccelerationStructureDescriptor);
      v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 1)));
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v117));
      objc_msgSend(v116, "setInstanceDescriptorBuffer:", v118);

      objc_msgSend(v116, "setInstanceDescriptorBufferOffset:", *((_QWORD *)a1 + 2));
      v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 3)));
      v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v119));
      objc_msgSend(v116, "setInstanceCountBuffer:", v120);

      objc_msgSend(v116, "setInstanceCountBufferOffset:", *((_QWORD *)a1 + 4));
      v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 5)));
      v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v121));
      objc_msgSend(v116, "setMotionTransformBuffer:", v122);

      objc_msgSend(v116, "setMotionTransformBufferOffset:", *((_QWORD *)a1 + 6));
      v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 7)));
      v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v123));
      objc_msgSend(v116, "setMotionTransformCountBuffer:", v124);

      v101 = v116;
      objc_msgSend(v116, "setMotionTransformCountBufferOffset:", *((_QWORD *)a1 + 8));
      objc_msgSend(v116, "setMaxInstanceCount:", *((unsigned int *)a1 + 20));
      objc_msgSend(v116, "setInstanceDescriptorStride:", *((unsigned int *)a1 + 21));
      objc_msgSend(v116, "setMaxMotionTransformCount:", *((unsigned int *)a1 + 22));
      objc_msgSend(v116, "setInstanceDescriptorType:", a1[92]);
      if ((objc_opt_respondsToSelector(v116, "motionTransformStride") & 1) != 0)
        objc_msgSend(v116, "setMotionTransformStride:", *((_QWORD *)a1 + 9));
      if ((objc_opt_respondsToSelector(v116, "motionTransformType") & 1) != 0)
        objc_msgSend(v116, "setMotionTransformType:", a1[93]);
      if ((objc_opt_respondsToSelector(v116, "instanceTransformationMatrixLayout") & 1) != 0)
        objc_msgSend(v116, "setInstanceTransformationMatrixLayout:", a1[94]);
      break;
    case 2:
      v104 = a1[1];
      v105 = objc_alloc_init((Class)MTLInstanceAccelerationStructureDescriptor);
      objc_msgSend(v105, "setUsage:", v104);
      v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 2)));
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v106));
      objc_msgSend(v105, "setInstanceDescriptorBuffer:", v107);

      objc_msgSend(v105, "setInstanceDescriptorBufferOffset:", *((_QWORD *)a1 + 4));
      objc_msgSend(v105, "setInstanceDescriptorStride:", *((unsigned int *)a1 + 15));
      v108 = v105;
      objc_msgSend(v105, "setInstanceCount:", *((unsigned int *)a1 + 16));
      v109 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", *((unsigned int *)a1 + 14));
      if (*((_DWORD *)a1 + 14))
      {
        v110 = 0;
        do
        {
          v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v110)));
          v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v111));
          objc_msgSend(v109, "addObject:", v112);

          ++v110;
        }
        while (v110 < *((unsigned int *)a1 + 14));
      }
      if (objc_msgSend(v109, "count"))
        v113 = v109;
      else
        v113 = 0;
      objc_msgSend(v108, "setInstancedAccelerationStructures:", v113);
      objc_msgSend(v108, "setInstanceDescriptorType:", a1[72]);
      v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 3)));
      v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v114));
      objc_msgSend(v108, "setMotionTransformBuffer:", v115);

      v101 = v108;
      objc_msgSend(v108, "setMotionTransformBufferOffset:", *((_QWORD *)a1 + 5));
      objc_msgSend(v108, "setMotionTransformCount:", *((unsigned int *)a1 + 17));
      if ((objc_opt_respondsToSelector(v108, "motionTransformStride") & 1) != 0)
        objc_msgSend(v108, "setMotionTransformStride:", *((_QWORD *)a1 + 6));
      if ((objc_opt_respondsToSelector(v108, "motionTransformType") & 1) != 0)
        objc_msgSend(v108, "setMotionTransformType:", a1[73]);
      if ((objc_opt_respondsToSelector(v108, "instanceTransformationMatrixLayout") & 1) != 0)
        objc_msgSend(v108, "setInstanceTransformationMatrixLayout:", a1[74]);

      break;
    case 1:
      v6 = a1[1];
      v127 = v3;
      v136 = v3;
      v126 = objc_alloc_init((Class)MTLPrimitiveAccelerationStructureDescriptor);
      objc_msgSend(v126, "setUsage:", v6);
      v135 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", *((_QWORD *)a1 + 2));
      if (*((_QWORD *)a1 + 2))
      {
        v7 = 0;
        v8 = &CATransform3DIdentity_ptr;
        v9 = &CATransform3DIdentity_ptr;
        v129 = a1;
        do
        {
          v10 = *((_QWORD *)a1 + 1);
          v11 = v10 + 136 * v7;
          v12 = v136;
          v143 = v12;
          switch(*(_BYTE *)(v11 + 36))
          {
            case 1:
              v140 = v7;
              v13 = v10 + 136 * v7;
              v14 = v12;
              v15 = objc_alloc_init((Class)MTLAccelerationStructureTriangleGeometryDescriptor);
              v16 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(v13 + 80)));
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v16));
              objc_msgSend(v15, "setVertexBuffer:", v17);

              objc_msgSend(v15, "setVertexBufferOffset:", *(_QWORD *)(v13 + 88));
              objc_msgSend(v15, "setVertexStride:", *(_QWORD *)(v13 + 96));
              v18 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(v13 + 40)));
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v18));
              objc_msgSend(v15, "setIndexBuffer:", v19);

              v20 = v15;
              objc_msgSend(v15, "setIndexBufferOffset:", *(_QWORD *)(v13 + 48));
              objc_msgSend(v15, "setIndexType:", *(unsigned __int8 *)(v13 + 104));
              objc_msgSend(v15, "setTriangleCount:", *(_QWORD *)(v13 + 72));
              if ((objc_opt_respondsToSelector(v15, "vertexFormat") & 1) != 0)
                objc_msgSend(v15, "setVertexFormat:", *(unsigned __int8 *)(v11 + 106));
              v7 = v140;
              if ((objc_opt_respondsToSelector(v15, "transformationMatrixBuffer") & 1) != 0)
              {
                v21 = v10 + 136 * v140;
                v22 = v20;
                v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v21 + 56)));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v23));
                objc_msgSend(v22, "setTransformationMatrixBuffer:", v24);

                v20 = v22;
                objc_msgSend(v22, "setTransformationMatrixBufferOffset:", *(_QWORD *)(v21 + 64));
              }
              if ((objc_opt_respondsToSelector(v20, "transformationMatrixLayout") & 1) != 0)
                objc_msgSend(v20, "setTransformationMatrixLayout:", *(unsigned __int8 *)(v11 + 105));

              v8 = &CATransform3DIdentity_ptr;
              v9 = &CATransform3DIdentity_ptr;
              break;
            case 2:
              v25 = (_QWORD *)(v10 + 136 * v7);
              v26 = v10;
              v27 = v12;
              v28 = v11;
              v29 = objc_alloc_init((Class)MTLAccelerationStructureBoundingBoxGeometryDescriptor);
              v30 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", v25[5]));
              v31 = v27;
              v10 = v26;
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", v30));
              objc_msgSend(v29, "setBoundingBoxBuffer:", v32);

              v9 = &CATransform3DIdentity_ptr;
              v20 = v29;
              v11 = v28;
              objc_msgSend(v20, "setBoundingBoxBufferOffset:", v25[6]);
              objc_msgSend(v20, "setBoundingBoxStride:", v25[8]);
              objc_msgSend(v20, "setBoundingBoxCount:", v25[7]);
              break;
            case 3:
              v130 = v10 + 136 * v7;
              v141 = v7;
              v137 = v10;
              v33 = v12;
              v132 = objc_alloc_init((Class)MTLAccelerationStructureMotionTriangleGeometryDescriptor);
              v34 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", *(_QWORD *)(v130 + 88));
              if (*(_QWORD *)(v130 + 88))
              {
                v35 = 0;
                v36 = 0;
                v37 = (_QWORD *)(v137 + 136 * v7 + 80);
                do
                {
                  v38 = objc_alloc_init((Class)v9[247]);
                  v39 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(*v37 + v35)));
                  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v39));
                  objc_msgSend(v38, "setBuffer:", v40);

                  v8 = &CATransform3DIdentity_ptr;
                  objc_msgSend(v38, "setOffset:", *(_QWORD *)(*v37 + v35 + 8));
                  objc_msgSend(v34, "addObject:", v38);

                  ++v36;
                  v35 += 16;
                }
                while (*(_QWORD *)(v130 + 88) > v36);
              }
              v41 = objc_msgSend(v34, "copy");
              objc_msgSend(v132, "setVertexBuffers:", v41);

              v42 = v137 + 136 * v7;
              objc_msgSend(v132, "setVertexStride:", *(_QWORD *)(v42 + 96));
              v43 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(v130 + 40)));
              v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v43));
              objc_msgSend(v132, "setIndexBuffer:", v44);

              v20 = v132;
              objc_msgSend(v132, "setIndexBufferOffset:", *(_QWORD *)(v42 + 48));
              objc_msgSend(v132, "setIndexType:", *(unsigned __int8 *)(v42 + 104));
              objc_msgSend(v132, "setTriangleCount:", *(_QWORD *)(v42 + 72));
              v11 = v130;
              if ((objc_opt_respondsToSelector(v132, "vertexFormat") & 1) != 0)
                objc_msgSend(v132, "setVertexFormat:", *(unsigned __int8 *)(v130 + 106));
              v7 = v141;
              if ((objc_opt_respondsToSelector(v132, "transformationMatrixBuffer") & 1) != 0)
              {
                v45 = v137 + 136 * v141;
                v46 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(v45 + 56)));
                v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v46));
                objc_msgSend(v132, "setTransformationMatrixBuffer:", v47);

                v8 = &CATransform3DIdentity_ptr;
                v20 = v132;
                objc_msgSend(v132, "setTransformationMatrixBufferOffset:", *(_QWORD *)(v45 + 64));
              }
              a1 = v129;
              if ((objc_opt_respondsToSelector(v20, "transformationMatrixLayout") & 1) != 0)
                objc_msgSend(v20, "setTransformationMatrixLayout:", *(unsigned __int8 *)(v130 + 105));

              v9 = &CATransform3DIdentity_ptr;
              v10 = v137;
              break;
            case 4:
              v131 = v10 + 136 * v7;
              v138 = v10;
              v48 = v12;
              v133 = objc_alloc_init((Class)MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor);
              v49 = v9;
              v50 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", *(_QWORD *)(v131 + 48));
              if (*(_QWORD *)(v131 + 48))
              {
                v51 = 0;
                v52 = 0;
                v53 = (_QWORD *)(v131 + 40);
                do
                {
                  v54 = objc_alloc_init((Class)v49[247]);
                  v55 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(*v53 + v51)));
                  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectForKeyedSubscript:", v55));
                  objc_msgSend(v54, "setBuffer:", v56);

                  v8 = &CATransform3DIdentity_ptr;
                  objc_msgSend(v54, "setOffset:", *(_QWORD *)(*v53 + v51 + 8));
                  objc_msgSend(v50, "addObject:", v54);

                  ++v52;
                  v51 += 16;
                }
                while (*(_QWORD *)(v131 + 48) > v52);
              }
              v57 = objc_msgSend(v50, "copy");
              objc_msgSend(v133, "setBoundingBoxBuffers:", v57);

              v20 = v133;
              v10 = v138;
              v58 = v138 + 136 * v7;
              objc_msgSend(v133, "setBoundingBoxStride:", *(_QWORD *)(v58 + 64));
              objc_msgSend(v133, "setBoundingBoxCount:", *(_QWORD *)(v58 + 56));

              a1 = v129;
              v9 = v49;
              goto LABEL_38;
            case 5:
              v59 = v10 + 136 * v7;
              v60 = v12;
              v20 = objc_alloc_init((Class)MTLAccelerationStructureCurveGeometryDescriptor);
              v61 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(v59 + 40)));
              v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", v61));
              objc_msgSend(v20, "setControlPointBuffer:", v62);

              objc_msgSend(v20, "setControlPointBufferOffset:", *(_QWORD *)(v59 + 48));
              v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v59 + 88)));
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", v63));
              objc_msgSend(v20, "setRadiusBuffer:", v64);

              objc_msgSend(v20, "setRadiusBufferOffset:", *(_QWORD *)(v59 + 96));
              objc_msgSend(v20, "setControlPointCount:", *(_QWORD *)(v59 + 56));
              objc_msgSend(v20, "setControlPointStride:", *(_QWORD *)(v59 + 64));
              objc_msgSend(v20, "setRadiusStride:", *(_QWORD *)(v59 + 104));
              v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v59 + 72)));
              v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectForKeyedSubscript:", v65));
              objc_msgSend(v20, "setIndexBuffer:", v66);

              v8 = &CATransform3DIdentity_ptr;
              v11 = v59;
              objc_msgSend(v20, "setIndexBufferOffset:", *(_QWORD *)(v59 + 80));
              objc_msgSend(v20, "setSegmentCount:", *(_QWORD *)(v59 + 120));
              objc_msgSend(v20, "setSegmentControlPointCount:", *(_QWORD *)(v59 + 112));
              objc_msgSend(v20, "setControlPointFormat:", *(unsigned __int8 *)(v59 + 128));
              objc_msgSend(v20, "setRadiusFormat:", *(unsigned __int8 *)(v59 + 133));
              objc_msgSend(v20, "setIndexType:", *(unsigned __int8 *)(v59 + 132));
              objc_msgSend(v20, "setCurveType:", *(unsigned __int8 *)(v59 + 130));
              objc_msgSend(v20, "setCurveBasis:", *(unsigned __int8 *)(v59 + 129));
              v67 = *(unsigned __int8 *)(v59 + 131);
              v9 = &CATransform3DIdentity_ptr;
              objc_msgSend(v20, "setEndCaps:", v67);
              break;
            case 6:
              v131 = v10 + 136 * v7;
              v142 = v7;
              v139 = v10;
              v68 = v12;
              v134 = objc_alloc_init((Class)MTLAccelerationStructureMotionCurveGeometryDescriptor);
              v69 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", *(_QWORD *)(v131 + 48));
              if (*(_QWORD *)(v131 + 48))
              {
                v70 = 0;
                v71 = 0;
                v72 = (_QWORD *)(v131 + 40);
                do
                {
                  v73 = objc_alloc_init((Class)v9[247]);
                  v74 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(*v72 + v70)));
                  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "objectForKeyedSubscript:", v74));
                  objc_msgSend(v73, "setBuffer:", v75);

                  v8 = &CATransform3DIdentity_ptr;
                  objc_msgSend(v73, "setOffset:", *(_QWORD *)(*v72 + v70 + 8));
                  objc_msgSend(v69, "addObject:", v73);

                  ++v71;
                  v70 += 16;
                }
                while (*(_QWORD *)(v131 + 48) > v71);
              }
              v128 = v69;
              v76 = objc_alloc((Class)NSMutableArray);
              v77 = v139 + 136 * v7;
              v79 = *(_QWORD *)(v77 + 96);
              v78 = (unint64_t *)(v77 + 96);
              v80 = objc_msgSend(v76, "initWithCapacity:", v79);
              if (*v78)
              {
                v81 = 0;
                v82 = 0;
                v83 = (_QWORD *)(v139 + 136 * v142 + 88);
                do
                {
                  v84 = objc_alloc_init((Class)v9[247]);
                  v85 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(*v83 + v81)));
                  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "objectForKeyedSubscript:", v85));
                  objc_msgSend(v84, "setBuffer:", v86);

                  v8 = &CATransform3DIdentity_ptr;
                  objc_msgSend(v84, "setOffset:", *(_QWORD *)(*v83 + v81 + 8));
                  objc_msgSend(v80, "addObject:", v84);

                  ++v82;
                  v81 += 16;
                }
                while (*v78 > v82);
              }
              v87 = objc_msgSend(v128, "copy");
              objc_msgSend(v134, "setControlPointBuffers:", v87);

              v88 = objc_msgSend(v80, "copy");
              objc_msgSend(v134, "setRadiusBuffers:", v88);

              v89 = v139 + 136 * v142;
              objc_msgSend(v134, "setControlPointCount:", *(_QWORD *)(v89 + 56));
              objc_msgSend(v134, "setControlPointStride:", *(_QWORD *)(v89 + 64));
              objc_msgSend(v134, "setRadiusStride:", *(_QWORD *)(v89 + 104));
              v90 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(v89 + 72)));
              v91 = v68;
              v10 = v139;
              v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "objectForKeyedSubscript:", v90));
              objc_msgSend(v134, "setIndexBuffer:", v92);

              v8 = &CATransform3DIdentity_ptr;
              v20 = v134;
              objc_msgSend(v134, "setIndexBufferOffset:", *(_QWORD *)(v89 + 80));
              objc_msgSend(v134, "setSegmentCount:", *(_QWORD *)(v89 + 120));
              objc_msgSend(v134, "setControlPointFormat:", *(unsigned __int8 *)(v89 + 128));
              objc_msgSend(v134, "setRadiusFormat:", *(unsigned __int8 *)(v89 + 133));
              objc_msgSend(v134, "setIndexType:", *(unsigned __int8 *)(v89 + 132));
              objc_msgSend(v134, "setSegmentControlPointCount:", *(_QWORD *)(v89 + 112));
              objc_msgSend(v134, "setCurveType:", *(unsigned __int8 *)(v89 + 130));
              objc_msgSend(v134, "setCurveBasis:", *(unsigned __int8 *)(v89 + 129));
              v93 = *(unsigned __int8 *)(v89 + 131);
              v7 = v142;
              objc_msgSend(v134, "setEndCaps:", v93);

              a1 = v129;
LABEL_38:
              v11 = v131;
              break;
            default:
              v20 = 0;
              break;
          }
          v94 = v10 + 136 * v7;
          objc_msgSend(v20, "setIntersectionFunctionTableOffset:", *(unsigned int *)(v94 + 32));
          objc_msgSend(v20, "setOpaque:", *(_BYTE *)(v94 + 37) != 0);
          objc_msgSend(v20, "setAllowDuplicateIntersectionFunctionInvocation:", *(_BYTE *)(v94 + 38) != 0);
          if (*(_QWORD *)v11)
          {
            v95 = v20;
            v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
            objc_msgSend(v95, "setLabel:", v96);

            v20 = v95;
          }
          if ((objc_opt_respondsToSelector(v20, "primitiveDataBuffer") & 1) != 0)
          {
            v97 = v10 + 136 * v7;
            v98 = v20;
            v99 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedLongLong:]((id)v8[288], "numberWithUnsignedLongLong:", *(_QWORD *)(v97 + 8)));
            v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "objectForKeyedSubscript:", v99));
            objc_msgSend(v98, "setPrimitiveDataBuffer:", v100);

            v8 = &CATransform3DIdentity_ptr;
            v20 = v98;
            objc_msgSend(v98, "setPrimitiveDataBufferOffset:", *(_QWORD *)(v97 + 16));
            objc_msgSend(v98, "setPrimitiveDataStride:", *(unsigned int *)(v97 + 24));
            objc_msgSend(v98, "setPrimitiveDataElementSize:", *(unsigned int *)(v97 + 28));
          }

          objc_msgSend(v135, "addObject:", v20);
          ++v7;
        }
        while (*((_QWORD *)a1 + 2) > v7);
      }
      v101 = v126;
      objc_msgSend(v126, "setGeometryDescriptors:", v135);
      LODWORD(v102) = *((_DWORD *)a1 + 8);
      objc_msgSend(v126, "setMotionStartTime:", v102);
      LODWORD(v103) = *((_DWORD *)a1 + 6);
      objc_msgSend(v126, "setMotionEndTime:", v103);
      objc_msgSend(v126, "setMotionKeyframeCount:", *((unsigned int *)a1 + 7));
      objc_msgSend(v126, "setMotionStartBorderMode:", a1[37]);
      objc_msgSend(v126, "setMotionEndBorderMode:", a1[36]);

      v4 = v127;
      break;
    default:
      v101 = 0;
      break;
  }

  return v101;
}

id MakeMTLIntersectionFunctionDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id MTLFunctionConstantValues;
  void *v8;
  id ObjectArrayWithMap;
  void *v10;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLIntersectionFunctionDescriptor);
  objc_msgSend(v4, "setOptions:", *(unsigned __int8 *)(a1 + 40));
  if (*(_QWORD *)(a1 + 8))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setName:", v5);

  }
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
    objc_msgSend(v4, "setSpecializedName:", v6);

  }
  if (*(_QWORD *)a1)
  {
    MTLFunctionConstantValues = MakeMTLFunctionConstantValues(*(_QWORD **)a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(MTLFunctionConstantValues);
    objc_msgSend(v4, "setConstantValues:", v8);

  }
  if (*(_QWORD *)(a1 + 24) && (objc_opt_respondsToSelector(v4, "privateFunctions") & 1) != 0)
  {
    ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 16), *(_DWORD *)(a1 + 24), v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);
    objc_msgSend(v4, "setPrivateFunctions:", v10);

  }
  return v4;
}

id MakeMTLStitchedLibraryDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id MTLFunctionStitchingGraphArray;
  void *v6;
  id ObjectArrayWithMap;
  void *v8;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLStitchedLibraryDescriptor);
  objc_msgSend(v4, "setOptions:", *(unsigned __int8 *)(a1 + 20));
  MTLFunctionStitchingGraphArray = MakeMTLFunctionStitchingGraphArray(*(_QWORD *)a1, *(unsigned __int16 *)(a1 + 16));
  v6 = (void *)objc_claimAutoreleasedReturnValue(MTLFunctionStitchingGraphArray);
  objc_msgSend(v4, "setFunctionGraphs:", v6);

  ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 8), *(unsigned __int16 *)(a1 + 18), v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);

  objc_msgSend(v4, "setFunctions:", v8);
  return v4;
}

id MakeMTLFunctionStitchingGraphArray(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id MTLFunctionStitchingFunctionNodeArray;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id MTLFunctionStitchingFunctionNode;
  void *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  id v16;
  int v17;
  int v18;
  Class *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  int v24;
  Class *v25;
  id v26;
  void *v27;
  id v28;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v32 = a2;
  v30 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:");
  v33 = objc_alloc_init((Class)NSMutableDictionary);
  if (a2 >= 1)
  {
    v4 = 0;
    v31 = a1;
    while (1)
    {
      v5 = a1 + 40 * v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)v5, v30));
      MTLFunctionStitchingFunctionNodeArray = MakeMTLFunctionStitchingFunctionNodeArray(*(unsigned __int8 **)(v5 + 8), *(unsigned __int16 *)(v5 + 32), v33);
      v8 = objc_claimAutoreleasedReturnValue(MTLFunctionStitchingFunctionNodeArray);
      v9 = (void *)v8;
      v10 = &__NSArray0__struct;
      if (v8)
        v10 = (void *)v8;
      v11 = v10;

      MTLFunctionStitchingFunctionNode = MakeMTLFunctionStitchingFunctionNode(*(unsigned __int8 **)(v5 + 16), v33);
      v13 = (void *)objc_claimAutoreleasedReturnValue(MTLFunctionStitchingFunctionNode);
      v14 = *(unsigned __int16 *)(v5 + 34);
      if (*(_WORD *)(v5 + 34))
      {
        v15 = *(unsigned __int8 **)(v5 + 24);
        v16 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v14);
        while (1)
        {
          v18 = *v15;
          v15 += 8;
          v17 = v18;
          if (v18 == 1)
            break;
          if (v17 == 2)
          {
            v19 = (Class *)MTLFunctionStitchingAttributeKernel_ptr;
LABEL_11:
            v20 = objc_alloc_init(*v19);
            objc_msgSend(v16, "addObject:", v20);

          }
          if (!--v14)
          {
            v21 = objc_msgSend(v16, "copy");

            goto LABEL_15;
          }
        }
        v19 = (Class *)MTLFunctionStitchingAttributeAlwaysInline_ptr;
        goto LABEL_11;
      }
      v21 = 0;
LABEL_15:
      a1 = v31;
      v22 = &__NSArray0__struct;
      if (v21)
        v22 = v21;
      v23 = v22;

      v24 = *(unsigned __int8 *)(v31 + 40 * v4 + 36);
      if (v24 == 2)
        break;
      if (v24 == 1)
      {
        v25 = (Class *)MTLFunctionStitchingGraph_ptr;
LABEL_21:
        v26 = objc_msgSend(objc_alloc(*v25), "initWithFunctionName:nodes:outputNode:attributes:", v6, v11, v13, v23);
        objc_msgSend(v30, "addObject:", v26);

      }
      if (++v4 == v32)
        goto LABEL_23;
    }
    v25 = (Class *)MTLFunctionStitchingGraphSPI_ptr;
    goto LABEL_21;
  }
LABEL_23:
  v27 = v30;
  v28 = objc_msgSend(v30, "copy", v30);

  return v28;
}

id MakeMTLFunctionStitchingFunctionNodeArray(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id MTLFunctionStitchingFunctionNode;
  void *v9;
  id v10;

  v5 = a3;
  if (a2)
  {
    v6 = a2;
    v7 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", a2);
    do
    {
      MTLFunctionStitchingFunctionNode = MakeMTLFunctionStitchingFunctionNode(a1, v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue(MTLFunctionStitchingFunctionNode);
      objc_msgSend(v7, "addObject:", v9);

      a1 += 48;
      --v6;
    }
    while (v6);
    v10 = objc_msgSend(v7, "copy");

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id MakeMTLFunctionStitchingFunctionNode(unsigned __int8 *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t MTLFunctionStitchingFunctionNode;
  id v13;
  objc_class *v14;
  objc_class *v15;
  void *v16;
  char *v17;
  char *v18;
  uint64_t MTLFunctionStitchingFunctionNodeArray;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  int v24;
  id v25;
  objc_class *v26;
  void *v27;

  v3 = a2;
  if (a1)
  {
    v4 = *((_QWORD *)a1 + 4);
    if (!v4
      || (v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 4))), v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5)), v5, !v6))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *((_QWORD *)a1 + 1)));
      v8 = *((_QWORD *)a1 + 2);
      v9 = (char *)*((unsigned __int16 *)a1 + 20);
      v10 = v3;
      if (v9)
      {
        v11 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v9);
        do
        {
          switch(*(_BYTE *)v8)
          {
            case 1:
            case 2:
            case 0xC:
              MTLFunctionStitchingFunctionNode = MakeMTLFunctionStitchingFunctionNode(v8, v10);
              v13 = (id)objc_claimAutoreleasedReturnValue(MTLFunctionStitchingFunctionNode);
              goto LABEL_19;
            case 3:
              v13 = objc_msgSend(objc_alloc((Class)MTLFunctionStitchingInputNode), "initWithArgumentIndex:", *(unsigned __int16 *)(v8 + 12));
              goto LABEL_19;
            case 4:
              v14 = (objc_class *)MTLFunctionStitchingInputBuffer;
              goto LABEL_15;
            case 5:
              v13 = objc_msgSend(objc_alloc((Class)MTLFunctionStitchingInputBufferAddress), "initWithBindIndex:byteOffset:dereference:", *(unsigned __int16 *)(v8 + 12), *(unsigned int *)(v8 + 8), *(_BYTE *)(v8 + 14) != 0);
              goto LABEL_19;
            case 6:
              v14 = (objc_class *)MTLFunctionStitchingInputTexture;
              goto LABEL_15;
            case 7:
              v14 = (objc_class *)MTLFunctionStitchingInputSampler;
              goto LABEL_15;
            case 8:
              v14 = (objc_class *)MTLFunctionStitchingInputThreadgroup;
              goto LABEL_15;
            case 9:
              v14 = (objc_class *)MTLFunctionStitchingInputImageblock;
LABEL_15:
              v13 = objc_msgSend([v14 alloc], "initWithBindIndex:", *(unsigned __int16 *)(v8 + 12));
              goto LABEL_19;
            case 0xA:
              v15 = (objc_class *)MTLFunctionStitchingBuiltinThreadPositionInGrid;
              goto LABEL_18;
            case 0xB:
              v15 = (objc_class *)MTLFunctionStitchingBuiltinThreadPositionInThreadgroup;
LABEL_18:
              v13 = objc_alloc_init(v15);
LABEL_19:
              v16 = v13;
              objc_msgSend(v11, "addObject:", v13);

              break;
            default:
              break;
          }
          v8 += 48;
          --v9;
        }
        while (v9);
        v9 = (char *)objc_msgSend(v11, "copy");

      }
      if (v9)
        v17 = v9;
      else
        v17 = (char *)&__NSArray0__struct;
      v18 = v17;

      MTLFunctionStitchingFunctionNodeArray = MakeMTLFunctionStitchingFunctionNodeArray(*((_QWORD *)a1 + 3), *((unsigned __int16 *)a1 + 21), v10);
      v20 = objc_claimAutoreleasedReturnValue(MTLFunctionStitchingFunctionNodeArray);
      v21 = (void *)v20;
      if (v20)
        v22 = (void *)v20;
      else
        v22 = &__NSArray0__struct;
      v23 = v22;

      v24 = *a1;
      switch(v24)
      {
        case 1:
          v26 = (objc_class *)MTLFunctionStitchingFunctionNode;
          break;
        case 12:
          v26 = (objc_class *)MTLFunctionStitchingEarlyReturnNode;
          break;
        case 2:
          v25 = objc_msgSend(objc_alloc((Class)MTLFunctionStitchingFunctionNodeSPI), "initWithName:arguments:controlDependencies:isEarlyReturn:", v7, v18, v23, a1[44] != 0);
LABEL_36:
          v6 = v25;
          if (v4)
          {
            v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v4));
            objc_msgSend(v10, "setObject:forKeyedSubscript:", v6, v27);

          }
          goto LABEL_39;
        default:
          v6 = 0;
LABEL_39:

          goto LABEL_40;
      }
      v25 = objc_msgSend([v26 alloc], "initWithName:arguments:controlDependencies:", v7, v18, v23);
      goto LABEL_36;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_40:

  return v6;
}

id MakeMTLStitchedLibraryDescriptorSPI(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id MTLFunctionStitchingGraphArray;
  void *v6;
  id ObjectArrayWithMap;
  void *v8;

  v3 = a2;
  v4 = objc_alloc_init((Class)MTLStitchedLibraryDescriptorSPI);
  objc_msgSend(v4, "setOptions:", *(unsigned __int8 *)(a1 + 20));
  MTLFunctionStitchingGraphArray = MakeMTLFunctionStitchingGraphArray(*(_QWORD *)a1, *(unsigned __int16 *)(a1 + 16));
  v6 = (void *)objc_claimAutoreleasedReturnValue(MTLFunctionStitchingGraphArray);
  objc_msgSend(v4, "setFunctionGraphs:", v6);

  ObjectArrayWithMap = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 8), *(unsigned __int16 *)(a1 + 18), v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(ObjectArrayWithMap);

  objc_msgSend(v4, "setFunctions:", v8);
  return v4;
}

id MakeMTLAccelerationStructureAllocationDescriptor(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLAccelerationStructureAllocationDescriptor);
  objc_msgSend(v2, "setStorageMode:", *(unsigned __int8 *)(a1 + 9));
  objc_msgSend(v2, "setForceResourceIndex:", *(_QWORD *)a1 != 0);
  objc_msgSend(v2, "setResourceIndex:", *(_QWORD *)a1);
  return v2;
}

id MakeMTLFXSpatialScalerDescriptor(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)MTLFXSpatialScalerDescriptor);
  objc_msgSend(v2, "setInputWidth:", *(_QWORD *)a1);
  objc_msgSend(v2, "setInputHeight:", *(_QWORD *)(a1 + 8));
  objc_msgSend(v2, "setOutputWidth:", *(_QWORD *)(a1 + 16));
  objc_msgSend(v2, "setOutputHeight:", *(_QWORD *)(a1 + 24));
  objc_msgSend(v2, "setColorTextureFormat:", *(unsigned __int16 *)(a1 + 32));
  objc_msgSend(v2, "setOutputTextureFormat:", *(unsigned __int16 *)(a1 + 34));
  objc_msgSend(v2, "setColorProcessingMode:", *(unsigned __int8 *)(a1 + 36));
  return v2;
}

id MakeMTLFXTemporalScalerDescriptor(unsigned __int16 *a1)
{
  id v2;
  double v3;
  double v4;

  v2 = objc_alloc_init((Class)MTLFXTemporalScalerDescriptor);
  objc_msgSend(v2, "setColorTextureFormat:", *a1);
  objc_msgSend(v2, "setDepthTextureFormat:", a1[1]);
  objc_msgSend(v2, "setMotionTextureFormat:", a1[2]);
  if ((objc_opt_respondsToSelector(v2, "setReactiveMaskTextureEnabled:") & 1) != 0)
    objc_msgSend(v2, "setReactiveMaskTextureEnabled:", *((_BYTE *)a1 + 58) != 0);
  if ((objc_opt_respondsToSelector(v2, "setReactiveMaskTextureFormat:") & 1) != 0)
    objc_msgSend(v2, "setReactiveMaskTextureFormat:", a1[4]);
  objc_msgSend(v2, "setOutputTextureFormat:", a1[3]);
  objc_msgSend(v2, "setInputWidth:", *((_QWORD *)a1 + 2));
  objc_msgSend(v2, "setInputHeight:", *((_QWORD *)a1 + 3));
  objc_msgSend(v2, "setOutputWidth:", *((_QWORD *)a1 + 4));
  objc_msgSend(v2, "setOutputHeight:", *((_QWORD *)a1 + 5));
  LODWORD(v3) = *((_DWORD *)a1 + 12);
  objc_msgSend(v2, "setInputContentMinScale:", v3);
  LODWORD(v4) = *((_DWORD *)a1 + 13);
  objc_msgSend(v2, "setInputContentMaxScale:", v4);
  objc_msgSend(v2, "setAutoExposureEnabled:", *((_BYTE *)a1 + 56) != 0);
  objc_msgSend(v2, "setInputContentPropertiesEnabled:", *((_BYTE *)a1 + 57) != 0);
  if ((objc_opt_respondsToSelector(v2, "requiresSynchronousInitialization") & 1) != 0)
    objc_msgSend(v2, "setRequiresSynchronousInitialization:", *((_BYTE *)a1 + 59) != 0);
  return v2;
}

id ValidateLibrary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  if ((dword_75313C & 0x80000) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
    v3 = v2;
    if (v2)
    {
      objc_msgSend(v2, "operatingSystemVersion");
      v4 = v11;
      objc_msgSend(v3, "operatingSystemVersion");
      v5 = v10;
      objc_msgSend(v3, "operatingSystemVersion");
      v6 = v9;
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v4 = 0;
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("air64-apple-%s%ld.%ld.%ld"), "ios", v4, v5, v6));
    objc_msgSend(v1, "setOverrideTriple:", v7);

  }
  return v1;
}

id MTLDevice_newLibraryWithFile(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  id v9;

  v9 = 0;
  v4 = objc_msgSend(a1, "newLibraryWithURL:error:", a2, &v9);
  v5 = v9;
  v6 = v5;
  if (a3)
    *a3 = objc_retainAutorelease(v5);
  v7 = ValidateLibrary(v4);
  objc_claimAutoreleasedReturnValue(v7);

  return v4;
}

id MTLDevice_newLibraryWithData(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  id v9;

  v9 = 0;
  v4 = objc_msgSend(a1, "newLibraryWithData:error:", a2, &v9);
  v5 = v9;
  v6 = v5;
  if (a3)
    *a3 = objc_retainAutorelease(v5);
  v7 = ValidateLibrary(v4);
  objc_claimAutoreleasedReturnValue(v7);

  return v4;
}

void GTMTLReplay_commitCommandBuffer(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    LogCommandBuffer(CFSTR("Committed"), v1);
    AddHandlers(v2);
    objc_msgSend(v2, "commit");
    v1 = v2;
    if ((dword_75313C & 2) != 0)
    {
      objc_msgSend(v2, "waitUntilCompleted");
      v1 = v2;
    }
  }

}

void LogCommandBuffer(void *a1, void *a2)
{
  id v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  FILE *v11;
  const char *v12;
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  const char *v19;

  v4 = a1;
  v5 = a2;
  v6 = v5;
  if (s_logUsingOsLog)
  {
    v7 = gt_tagged_log(0);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "label"));
      if (v9)
      {
        v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "label")));
        v10 = (const char *)objc_msgSend(v2, "UTF8String");
      }
      else
      {
        v10 = "no label";
      }
      *(_DWORD *)buf = 138412802;
      v15 = v4;
      v16 = 2048;
      v17 = v6;
      v18 = 2080;
      v19 = v10;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "%@: %lx (%s)", buf, 0x20u);
      if (v9)

    }
  }
  else
  {
    v11 = __stdoutp;
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "label"));
    if (v8)
    {
      v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "label")));
      v12 = (const char *)objc_msgSend(v2, "UTF8String");
    }
    else
    {
      v12 = "no label";
    }
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %lx (%s)"), v4, v6, v12)));
    fprintf(v11, "%s\n", (const char *)objc_msgSend(v13, "UTF8String"));

    if (v8)
  }

}

void AddHandlers(void *a1)
{
  id v1;

  v1 = a1;
  if (GTMTLReplayDefaults_logCommandBufferHandlers())
    objc_msgSend(v1, "addScheduledHandler:", &__block_literal_global);
  objc_msgSend(v1, "addCompletedHandler:", &__block_literal_global_36);

}

void GTMTLReplay_commitCommandBufferAndWaitUntilSubmitted(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    LogCommandBuffer(CFSTR("Commit and wait until submitted"), v1);
    AddHandlers(v2);
    objc_msgSend(v2, "commitAndWaitUntilSubmitted");
    v1 = v2;
    if ((dword_75313C & 2) != 0)
    {
      objc_msgSend(v2, "waitUntilCompleted");
      v1 = v2;
    }
  }

}

id PreferDevice(uint64_t a1)
{
  _QWORD *Object;
  unsigned int v3;
  int v4;
  size_t FileWithFilename;
  unsigned int v6;
  int v7;
  id v8;
  id v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  char v14;

  Object = GTMTLSMContext_getObject(**(_QWORD **)(a1 + 40), 1, *(_QWORD *)(a1 + 80));
  v3 = (dword_75313C >> 19) & 1;
  if (*(_BYTE *)(Object[5] + 102) != 1)
    v3 = 1;
  if (v3)
    v4 = 0x80000;
  else
    v4 = 0;
  dword_75313C = v4 | dword_75313C & 0xFFF7FFFF;
  FileWithFilename = GTCaptureArchive_getFileWithFilename(*(_QWORD *)a1, "is_almond");
  v6 = (dword_75313C >> 19) & 1;
  if (FileWithFilename)
    v6 = 1;
  if (v6)
    v7 = 0x80000;
  else
    v7 = 0;
  dword_75313C = v7 | dword_75313C & 0xFFF7FFFF;
  v8 = MTLCreateSystemDefaultDevice();
  v9 = DEVICEOBJECT(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = objc_opt_respondsToSelector(v10, "setShaderDebugInfoCaching:");

  if ((v11 & 1) != 0)
    objc_msgSend(v8, "setShaderDebugInfoCaching:", 1);
  if ((dword_75313C & 0x80000) != 0)
  {
    v12 = DEVICEOBJECT(v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = objc_opt_respondsToSelector(v13, "allowLibrariesFromOtherPlatforms");

    if ((v14 & 1) != 0)
      objc_msgSend(v8, "allowLibrariesFromOtherPlatforms");
  }

  return v8;
}

uint64_t CleanupSandboxExtensionURL(void *a1)
{
  objc_msgSend(a1, "stopAccessingSecurityScopedResource");

  return 0;
}

BOOL BeginDebugArchivePath(apr_pool_t **a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void (**v12)(id, _QWORD);
  apr_pool_t **v13;
  void (**v14)(id, _QWORD);
  id v15;
  char *DataSource;
  char *v17;
  id v18;
  void *v19;
  apr_pool_t *v20;
  void *v21;
  id v22;
  char *v23;
  _OWORD *v24;
  _OWORD *v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *i;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  const char *v43;
  id v44;
  const char *v45;
  apr_allocator_t *v46;
  apr_pool_t *v47;
  char *v48;
  FILE *v49;
  FILE *v50;
  int v51;
  char *v52;
  apr_array_header_t *v53;
  int nelts;
  _DWORD *v55;
  id v56;
  id v57;
  uint64_t j;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  _BOOL4 v79;
  unsigned int v80;
  void *v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  id v86;
  apr_pool_t *v87;
  void *v88;
  void *v89;
  id v90;
  uint64_t v91;
  int v92;
  uint64_t k;
  uint64_t v94;
  void *v95;
  void *v96;
  id v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  void *v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  void *m;
  void *v109;
  void *v110;
  unsigned int v111;
  void *v112;
  void *v113;
  void *v114;
  GTMTLReplayObjectMap *v115;
  apr_pool_t *v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  void *v133;
  void *v134;
  void *v136;
  id v137;
  apr_pool_t **v138;
  void (**v139)(id, _QWORD);
  void *v140;
  void *v141;
  char *key;
  id obj;
  id obja;
  _OWORD *v145;
  void *v146;
  char *v147;
  uint64_t v148;
  void *v149;
  id v150;
  void *v151;
  void *v152;
  GTCaptureArchiveOverrideKey *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  _QWORD v159[5];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  _BYTE v164[128];
  _QWORD v165[4];
  _QWORD v166[4];
  _QWORD v167[2];
  _QWORD v168[2];
  __int128 newpool;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  const __CFString *v173;
  stat v174;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a1;
  v14 = v12;
  v15 = objc_retainAutorelease(v9);
  DataSource = GTMTLReplayController_makeDataSource((const char *)objc_msgSend(v15, "UTF8String"), *a1);
  v17 = DataSource;
  if (!DataSource)
  {
    v14[2](v14, 0);
    goto LABEL_107;
  }
  v139 = v14;
  v141 = v10;
  v18 = PreferDevice((uint64_t)DataSource);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v138 = v13;
  v20 = *v13;
  v137 = v19;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "operatingSystemVersionString")));
  v23 = apr_pstrdup(v20, (const char *)objc_msgSend(v22, "UTF8String"));

  v24 = apr_palloc(v20, 0x30uLL);
  v25 = v24;
  if (v24)
  {
    *v24 = 0u;
    v24[1] = 0u;
  }
  *((_QWORD *)v24 + 4) = "iOS";
  *((_QWORD *)v24 + 5) = v23;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "targetDeviceArchitecture"));
  *(_DWORD *)v25 = objc_msgSend(v26, "cpuType");
  *((_DWORD *)v25 + 1) = objc_msgSend(v26, "subType");
  *((_WORD *)v25 + 4) = (unsigned __int16)objc_msgSend(v26, "version");
  *((_BYTE *)v25 + 10) = objc_msgSend(v26, "version") >> 16;
  *((_BYTE *)v25 + 11) = objc_msgSend(v26, "version") >> 24;
  *((_DWORD *)v25 + 3) = objc_msgSend(v26, "versionCombined");
  *((_QWORD *)v25 + 2) = objc_msgSend(v26, "driverVersion");

  if (*(_DWORD *)v25 != 16777235)
    goto LABEL_45;
  v27 = 0;
  v28 = *((_DWORD *)v25 + 1) & 0xFFFFFF;
  if (v28 <= 0x162)
  {
    if ((*((_DWORD *)v25 + 1) & 0xFFFFFFu) <= 0xD1)
    {
      if ((*((_DWORD *)v25 + 1) & 0xFFFFFFu) > 0xA2)
      {
        if (v28 != 163 && v28 != 179)
        {
          if (v28 != 194)
            goto LABEL_45;
          goto LABEL_46;
        }
      }
      else if (v28 - 67 > 0x30 || ((1 << (v28 - 67)) & 0x1000100010001) == 0)
      {
        goto LABEL_45;
      }
    }
    else
    {
      v29 = *((_BYTE *)v25 + 4) + 29;
      if (v28 - 227 > 0x3F)
        goto LABEL_8;
      if (((1 << v29) & 0x100010000) != 0)
        goto LABEL_42;
      if (((1 << v29) & 0x1000000000001) == 0)
      {
        if (((1 << v29) & 0x8000800000000000) != 0)
          goto LABEL_46;
LABEL_8:
        v30 = v28 - 291;
        if (v30 > 0x3F)
          goto LABEL_12;
        if (((1 << (v28 - 35)) & 0x8000000080008000) != 0)
          goto LABEL_46;
        if (((1 << (v28 - 35)) & 0x100000001) == 0)
        {
          if (v30 != 48)
          {
LABEL_12:
            if (v28 != 210)
              goto LABEL_45;
            goto LABEL_46;
          }
LABEL_19:
          v27 = 3;
          goto LABEL_46;
        }
        goto LABEL_42;
      }
    }
LABEL_108:
    v27 = 1;
    goto LABEL_46;
  }
  if ((*((_DWORD *)v25 + 1) & 0xFFFFFFu) > 0x1B2)
  {
    if ((*((_DWORD *)v25 + 1) & 0xFFFFFFu) > 0x231)
    {
      v32 = v28 - 562;
      if (v32 <= 0x30 && ((1 << v32) & 0x1000100010001) != 0)
        goto LABEL_46;
      goto LABEL_45;
    }
    if (v28 - 498 <= 0x30 && ((1 << (v28 + 14)) & 0x1000100010001) != 0)
      goto LABEL_46;
    if (v28 != 435)
    {
      if (v28 != 482)
        goto LABEL_45;
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  v31 = v28 - 355;
  if (v31 <= 0x3F)
  {
    if (((1 << (v28 - 99)) & 0x8000800080008000) != 0)
      goto LABEL_46;
    if (((1 << (v28 - 99)) & 0x100010001) != 0)
      goto LABEL_19;
    if (v31 == 48)
    {
LABEL_42:
      v27 = 2;
      goto LABEL_46;
    }
  }
  if (v28 == 419)
    goto LABEL_108;
  if (v28 != 434)
LABEL_45:
    v27 = 0xFFFFFFFFLL;
LABEL_46:
  *((_QWORD *)v25 + 3) = v27;

  v136 = v11;
  v147 = v17;
  v140 = v15;
  if (*((_QWORD *)v17 + 6))
  {
    v153 = objc_alloc_init(GTCaptureArchiveOverrideKey);
    v160 = 0u;
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v17 + 6), "filenameOverrides"));
    v150 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v160, v164, 16);
    if (v150)
    {
      v148 = *(_QWORD *)v161;
      v145 = v25;
      do
      {
        for (i = 0; i != v150; i = (char *)i + 1)
        {
          if (*(_QWORD *)v161 != v148)
            objc_enumerationMutation(obj);
          v34 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + 8 * (_QWORD)i);
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v17 + 6), "filenameOverrides"));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectForKeyedSubscript:", v34));

          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *((_QWORD *)v25 + 4)));
          -[GTCaptureArchiveOverrideKey setPlatform:](v153, "setPlatform:", v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v25 + 3)));
          -[GTCaptureArchiveOverrideKey setRiaGeneration:](v153, "setRiaGeneration:", v38);

          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", v153));
          if (v39)
            goto LABEL_55;
          -[GTCaptureArchiveOverrideKey setPlatform:](v153, "setPlatform:", 0);
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v25 + 3)));
          -[GTCaptureArchiveOverrideKey setRiaGeneration:](v153, "setRiaGeneration:", v40);

          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", v153));
          if (v39
            || (-[GTCaptureArchiveOverrideKey setPlatform:](v153, "setPlatform:", v37),
                -[GTCaptureArchiveOverrideKey setRiaGeneration:](v153, "setRiaGeneration:", 0),
                (v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", v153))) != 0))
          {
LABEL_55:
            v156 = v37;
            v41 = *(_QWORD *)v17;
            v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "originalFilename")));
            v43 = (const char *)objc_msgSend(v42, "UTF8String");
            v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "overrideFilename")));
            v45 = (const char *)objc_msgSend(v44, "UTF8String");
            *(_QWORD *)&newpool = 0;
            apr_pool_create_ex((apr_pool_t **)&newpool, *(apr_pool_t **)(v41 + 8), 0, v46);
            v47 = (apr_pool_t *)newpool;
            v48 = gt_filepath_merge(*(const char **)v41, v45, (apr_pool_t *)newpool);
            v49 = fopen(v48, "r");
            v50 = v49;
            if (v49)
            {
              memset(&v174, 0, sizeof(v174));
              v51 = fileno(v49);
              if (!fstat(v51, &v174))
              {
                key = apr_pstrdup(*(apr_pool_t **)(v41 + 8), v43);
                v52 = apr_pstrdup(*(apr_pool_t **)(v41 + 8), v45);
                v53 = *(apr_array_header_t **)(v41 + 48);
                nelts = v53->nelts;
                *(_QWORD *)apr_array_push(v53) = v52;
                LODWORD(v52) = (LODWORD(v174.st_size) + vm_page_size - 1) & -(int)vm_page_size;
                v55 = apr_array_push(*(apr_array_header_t **)(v41 + 80));
                *v55 = (_DWORD)v52;
                v55[1] = nelts;
                *((_QWORD *)v55 + 1) = 0;
                *((_QWORD *)v55 + 2) = 2;
                apr_hash_set(*(apr_hash_t **)(v41 + 88), key, -1, v55);
              }
            }
            fclose(v50);
            apr_pool_destroy(v47);

            v25 = v145;
            v17 = v147;
            v37 = v156;
          }

        }
        v150 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v160, v164, 16);
      }
      while (v150);
    }

  }
  v56 = v137;
  v57 = objc_alloc_init((Class)NSMutableArray);
  for (j = 0; j != 17; ++j)
  {
    v59 = qword_4A8510[j];
    if (objc_msgSend(v56, "supportsFamily:", v59))
    {
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v59));
      objc_msgSend(v57, "addObject:", v60);

    }
  }
  *(_QWORD *)&newpool = CFSTR("argumentBuffersSupport");
  v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v56, "argumentBuffersSupport")));
  *(_QWORD *)&v174.st_dev = v157;
  *((_QWORD *)&newpool + 1) = CFSTR("supportsTLS");
  if ((objc_opt_respondsToSelector(v56, "supportsTLS") & 1) != 0)
    v61 = objc_msgSend(v56, "supportsTLS");
  else
    v61 = 0;
  v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v61));
  v174.st_ino = (__darwin_ino64_t)v154;
  *(_QWORD *)&v170 = CFSTR("supportsGlobalVariableRelocation");
  if ((objc_opt_respondsToSelector(v56, "supportsGlobalVariableRelocation") & 1) != 0)
    v62 = objc_msgSend(v56, "supportsGlobalVariableRelocation");
  else
    v62 = 0;
  v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v62));
  *(_QWORD *)&v174.st_uid = v151;
  *((_QWORD *)&v170 + 1) = CFSTR("supportsGlobalVariableRelocationCompute");
  if ((objc_opt_respondsToSelector(v56, "supportsGlobalVariableRelocationCompute") & 1) != 0)
    v63 = objc_msgSend(v56, "supportsGlobalVariableRelocationCompute");
  else
    v63 = 0;
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v63));
  *(_QWORD *)&v174.st_rdev = v64;
  *(_QWORD *)&v171 = CFSTR("supportsGlobalVariableRelocationRender");
  if ((objc_opt_respondsToSelector(v56, "supportsGlobalVariableRelocationRender") & 1) != 0)
    v65 = objc_msgSend(v56, "supportsGlobalVariableRelocationRender");
  else
    v65 = 0;
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v65));
  v174.st_atimespec.tv_sec = (__darwin_time_t)v66;
  *((_QWORD *)&v171 + 1) = CFSTR("supportsDynamicLibraries");
  if ((objc_opt_respondsToSelector(v56, "supportsDynamicLibraries") & 1) != 0)
    v67 = objc_msgSend(v56, "supportsDynamicLibraries");
  else
    v67 = 0;
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v67));
  v174.st_atimespec.tv_nsec = (uint64_t)v68;
  *(_QWORD *)&v172 = CFSTR("supportsRenderDynamicLibraries");
  if ((objc_opt_respondsToSelector(v56, "supportsRenderDynamicLibraries") & 1) != 0)
    v69 = objc_msgSend(v56, "supportsRenderDynamicLibraries");
  else
    v69 = 0;
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v69));
  v174.st_mtimespec.tv_sec = (__darwin_time_t)v70;
  *((_QWORD *)&v172 + 1) = CFSTR("supportsFunctionPointers");
  if ((objc_opt_respondsToSelector(v56, "supportsFunctionPointers") & 1) != 0)
    v71 = objc_msgSend(v56, "supportsFunctionPointers");
  else
    v71 = 0;
  v72 = v56;
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v71));
  v174.st_mtimespec.tv_nsec = (uint64_t)v73;
  v173 = CFSTR("supportsFunctionPointersFromRender");
  if ((objc_opt_respondsToSelector(v56, "supportsFunctionPointersFromRender") & 1) != 0)
    v74 = objc_msgSend(v56, "supportsFunctionPointersFromRender");
  else
    v74 = 0;
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v74));
  v174.st_ctimespec.tv_sec = (__darwin_time_t)v75;
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v174, &newpool, 9));

  v167[0] = CFSTR("shaderDebuggerSupport");
  v167[1] = CFSTR("deviceVendorName");
  v168[0] = &off_7397D8;
  v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "vendorName"));
  v168[1] = v77;
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v168, v167, 2));

  v79 = objc_msgSend(v72, "argumentBuffersSupport") != 0;
  LODWORD(v77) = objc_opt_respondsToSelector(v72, "sparseTileSizeInBytesForSparsePageSize:");
  v80 = objc_msgSend(v72, "supportsFamily:", 1006);
  v165[0] = CFSTR("SupportedFamilies");
  v165[1] = CFSTR("FeatureSupport");
  v166[0] = v57;
  v166[1] = v76;
  v166[2] = v78;
  v165[2] = CFSTR("DebugSupport");
  v165[3] = CFSTR("ResourceAccessTrackingSupport");
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v79 & v80 & v77));
  v166[3] = v81;
  v82 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v166, v165, 4));

  v158 = v72;
  v155 = (void *)v82;
  v139[2](v139, v82);
  v83 = v140;
  v84 = objc_msgSend(objc_alloc((Class)NSURL), "initFileURLWithPath:isDirectory:", v83, 1);

  v85 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:relativeToURL:", CFSTR("metadata"), v84);
  v86 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithContentsOfURL:error:", v85, 0);

  v87 = v138[35];
  v152 = v86;
  v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("DYCaptureEngine.launch_dictionary")));
  v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("title")));
  -[apr_pool_t setWindowTitle:](v87, "setWindowTitle:", v89);

  v90 = objc_alloc_init((Class)NSMutableDictionary);
  v91 = *(_QWORD *)(*((_QWORD *)v147 + 5) + 88);
  v92 = *(_DWORD *)(v91 + 12);
  if (v92 >= 1)
  {
    for (k = 0; k < v92; ++k)
    {
      v94 = *(_QWORD *)(*(_QWORD *)(v91 + 24) + 8 * k);
      if (*(_QWORD *)(v94 + 128))
      {
        v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v94 + 8)));
        v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(v94 + 128)));
        objc_msgSend(v90, "setObject:forKey:", v95, v96);

        v92 = *(_DWORD *)(v91 + 12);
      }
    }
  }
  v97 = v141;
  v98 = v90;
  v149 = v97;
  v99 = objc_msgSend(objc_alloc((Class)NSURL), "initFileURLWithPath:", v97);
  v100 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v98, "count"));
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v166[0] = NSURLNameKey;
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v166, 1));
  obja = v101;
  v146 = v99;
  v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v99, v102, 0, 0));

  v171 = 0u;
  v172 = 0u;
  newpool = 0u;
  v170 = 0u;
  v104 = v103;
  v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &newpool, &v174, 16);
  if (v105)
  {
    v106 = v105;
    v107 = *(_QWORD *)v170;
    do
    {
      for (m = 0; m != v106; m = (char *)m + 1)
      {
        if (*(_QWORD *)v170 != v107)
          objc_enumerationMutation(v104);
        v109 = *(void **)(*((_QWORD *)&newpool + 1) + 8 * (_QWORD)m);
        v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "pathExtension"));
        v111 = objc_msgSend(v110, "isEqualToString:", CFSTR("metallib"));

        if (v111)
        {
          v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "lastPathComponent"));
          v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "stringByDeletingPathExtension"));

          v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "objectForKeyedSubscript:", v113));
          if (v114)
            objc_msgSend(v100, "setObject:forKeyedSubscript:", v109, v114);

        }
      }
      v106 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &newpool, &v174, 16);
    }
    while (v106);
  }

  v11 = v136;
  UpdateDebugFileCache(v136, v100, v98, v149);
  v115 = -[GTMTLReplayObjectMap initWithDevice:]([GTMTLReplayObjectMap alloc], "initWithDevice:", v158);
  GTMTLReplaySupport_init(v158);
  v17 = v147;
  GTMTLReplayController_initializeArgumentBufferSupport((uint64_t)v147, v158, v115);
  GTMTLReplayController_populateUnusedResources(v147, v115);
  v138[1] = (apr_pool_t *)GTMTLReplayController_makeController((uint64_t)v147, *v138, v158, v115, v98, v100);
  GTMTLReplayWireframeRenderer_initWithDevice((uint64_t)(v138 + 12), v158);
  -[apr_pool_t setOrientation:](v138[35], "setOrientation:", -[GTMTLReplayObjectMap interfaceOrientation](v115, "interfaceOrientation"));
  -[apr_pool_t setDevice:](v138[35], "setDevice:", v158);
  v116 = v138[35];
  -[GTMTLReplayObjectMap contentRect](v115, "contentRect");
  v118 = v117;
  v120 = v119;
  v122 = v121;
  v124 = v123;
  -[GTMTLReplayObjectMap windowRect](v115, "windowRect");
  v126 = v125;
  v128 = v127;
  v130 = v129;
  v132 = v131;
  v133 = (void *)objc_claimAutoreleasedReturnValue(-[GTMTLReplayObjectMap windowProperties](v115, "windowProperties"));
  -[apr_pool_t setContentRect:windowRect:properties:](v116, "setContentRect:windowRect:properties:", v133, v118, v120, v122, v124, v126, v128, v130, v132);

  v159[0] = _NSConcreteStackBlock;
  v159[1] = 3221225472;
  v159[2] = __BeginDebugArchivePath_block_invoke;
  v159[3] = &__block_descriptor_40_e5_v8__0l;
  v159[4] = v138;
  v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v159));
  objc_msgSend(v134, "setQueuePriority:", -8);
  -[apr_pool_t addOperation:](v138[32], "addOperation:", v134);

  v15 = v140;
  v10 = v141;
  v14 = v139;
LABEL_107:

  return v17 != 0;
}

uint64_t CleanupSandboxExtension(_QWORD *a1)
{
  sandbox_extension_release(*a1);
  return 0;
}

void sub_1E6BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E90BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a43);
  _Unwind_Resume(a1);
}

void sub_1E9F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__706(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__707(uint64_t a1)
{

}

void sub_1EBC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void BatchFilteredPause()
{
  GTMTLReplayClient_addBatchFilteringRequest(&off_739040);
}

void BatchFilteredResume()
{
  GTMTLReplayClient_addBatchFilteringRequest(&off_739068);
}

NSObject *NewResourceData(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, void *a9)
{
  id v12;
  NSObject *v13;
  NSObject *v14;
  id v15;
  id v16;
  char *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  char *v22;
  int v23;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  int *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  id v47;
  id v48;
  id v49;
  id v50;
  NSObject *v51;
  dispatch_data_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  void *v57;
  id v58;
  __int16 v59;
  void *v60;
  id v61;
  char v62;
  void *v63;
  id v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  __int16 v72;
  __int16 v73;
  size_t v74;
  NSObject *v75;
  dispatch_data_t concat;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v81;
  NSObject *v82;
  unint64_t v83;
  char *v84;
  id v85;
  id v86;
  id v87;
  unint64_t v88;
  void *v89;
  void *v90;
  char *v92;
  uint64_t v93;
  id v97;
  void *v98;
  void *v99;
  int size;
  _QWORD v101[4];
  id v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int64x2_t v108;
  uint64_t v109;
  _QWORD destructor[4];
  id v111;

  v12 = a1;
  v87 = a2;
  v86 = a3;
  v85 = a4;
  v13 = a9;
  v14 = &_dispatch_data_empty;
  v15 = &_dispatch_data_empty;
  v82 = v13;
  size = dispatch_data_get_size(v13);
  v16 = objc_retainAutorelease(v12);
  v17 = (char *)objc_msgSend(v16, "bytes");
  v81 = v16;
  v18 = objc_msgSend(v16, "length");
  if ((unint64_t)v18 >= 9)
  {
    v19 = (unint64_t)v18;
    v20 = 8;
    v83 = (unint64_t)v18;
    v84 = v17;
    do
    {
      v21 = objc_autoreleasePoolPush();
      v22 = &v17[v20];
      v23 = *(_DWORD *)&v17[v20 + 4];
      if (v23 == -16236 || v23 == -10236)
      {
        v89 = v21;
        v109 = 0;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)&v103, (uint64_t)&v17[v20], (*(_DWORD *)v22 - 36), 0);
        v25 = *((_QWORD *)&v107 + 1);
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *((_QWORD *)&v107 + 1)));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "objectForKeyedSubscript:", v26));

        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", v28));
        v30 = objc_msgSend(v29, "unsignedLongLongValue");

        v97 = v30;
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v30));
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKeyedSubscript:", v31));

        v32 = objc_retainAutorelease(v27);
        v33 = (int *)objc_msgSend(v32, "bytes");
        v98 = v32;
        v34 = objc_msgSend(v32, "length");
        v88 = v20;
        if (!v33 || (unint64_t)v34 < 0x10 || *(_QWORD *)v33 != 0x63617074757265)
          goto LABEL_38;
        v93 = *((_WORD *)v33 + 5) == 1 ? *((_QWORD *)v33 + 2) : 0;
        if (*(_QWORD *)v33 == 0x63617074757265)
        {
          v53 = v33[3];
          if (*((_WORD *)v33 + 4) == 1)
            v53 += 16;
          v92 = (char *)v33 + v53;
        }
        else
        {
          v92 = (char *)v33;
        }
        if (v93)
        {
          v54 = 0;
          v55 = 0;
          v56 = v33 + 16;
          do
          {
            *(_WORD *)(a5 + 34) = *((_QWORD *)v56 - 5);
            v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureSlice")));
            v58 = objc_msgSend(v57, "unsignedLongLongValue");
            if (v58)
              v59 = (__int16)v58;
            else
              v59 = v107;

            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureLevel")));
            v61 = objc_msgSend(v60, "unsignedLongLongValue");
            if (v61)
              v62 = (char)v61;
            else
              v62 = BYTE8(v106);

            v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureAttachmentIndex")));
            v64 = objc_msgSend(v63, "unsignedLongLongValue");
            if (v64)
              v65 = (int)v64;
            else
              v65 = v55;

            v66 = (*a7)++;
            v67 = *((_QWORD *)v56 - 5);
            if ((unsigned __int16)v67 == 255 || (unsigned __int16)v67 == 260)
            {
              LOWORD(v67) = 252;
              if (v65)
                LOWORD(v67) = 253;
            }
            v68 = v103;
            v69 = *v56;
            v70 = a6 + 80 * v66;
            v71 = v105;
            v72 = WORD4(v105);
            v73 = v106;
            *(_QWORD *)v70 = v97;
            *(_QWORD *)(v70 + 8) = v68;
            *(_QWORD *)(v70 + 16) = a8;
            *(_DWORD *)(v70 + 24) = size;
            *(_DWORD *)(v70 + 28) = v69;
            *(_WORD *)(v70 + 32) = 0;
            *(_BYTE *)(v70 + 34) = 1;
            *(_QWORD *)(v70 + 35) = 0;
            *(_QWORD *)(v70 + 40) = 0;
            *(_DWORD *)(v70 + 48) = v71;
            *(_WORD *)(v70 + 52) = v72;
            *(_WORD *)(v70 + 54) = v73;
            *(_QWORD *)(v70 + 56) = (unsigned __int16)v67;
            *(int32x2_t *)(v70 + 64) = vmovn_s64(v108);
            *(_WORD *)(v70 + 72) = 0;
            *(_WORD *)(v70 + 74) = v59;
            *(_BYTE *)(v70 + 76) = v62;
            *(_BYTE *)(v70 + 77) = v65;
            *(_WORD *)(v70 + 78) = 0;
            v74 = *(_QWORD *)v56;
            v56 += 12;
            v101[0] = _NSConcreteStackBlock;
            v101[1] = 3221225472;
            v101[2] = __NewResourceData_block_invoke_2;
            v101[3] = &unk_726128;
            v102 = v98;
            v75 = dispatch_data_create(&v92[v54], v74, 0, v101);
            concat = dispatch_data_create_concat(v14, v75);

            v77 = dispatch_data_get_size(v75);
            v54 += v77;
            size += v77;

            ++v55;
            v14 = concat;
          }
          while (v93 != v55);
        }
        else
        {
LABEL_38:
          concat = v14;
        }

        v14 = concat;
        v19 = v83;
        v17 = v84;
        v20 = v88;
        v21 = v89;
      }
      else if (v23 == -10240)
      {
        *(_QWORD *)&v105 = 0;
        v103 = 0u;
        v104 = 0u;
        v90 = v21;
        DYTraceDecode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)&v103, (uint64_t)&v17[v20]);
        v35 = v104;
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (_QWORD)v104));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "objectForKeyedSubscript:", v36));

        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", v38));
        v40 = objc_msgSend(v39, "unsignedLongLongValue");

        v41 = (*a7)++;
        v42 = v20;
        v43 = a6 + 80 * v41;
        v44 = *((_QWORD *)&v103 + 1);
        v45 = objc_msgSend(v37, "length");
        v46 = DWORD2(v104);
        *(_QWORD *)v43 = v40;
        *(_QWORD *)(v43 + 8) = v44;
        *(_QWORD *)(v43 + 16) = a8;
        *(_DWORD *)(v43 + 24) = size;
        *(_DWORD *)(v43 + 28) = v45;
        *(_WORD *)(v43 + 32) = 0;
        *(_BYTE *)(v43 + 34) = 2;
        *(_DWORD *)(v43 + 35) = 0;
        *(_BYTE *)(v43 + 39) = 0;
        *(_DWORD *)(v43 + 40) = v46;
        *(_OWORD *)(v43 + 44) = 0u;
        *(_OWORD *)(v43 + 60) = 0u;
        *(_DWORD *)(v43 + 76) = 0;
        v20 = v42;
        v47 = objc_retainAutorelease(v37);
        v48 = objc_msgSend(v47, "bytes");
        v49 = objc_msgSend(v47, "length");
        destructor[0] = _NSConcreteStackBlock;
        destructor[1] = 3221225472;
        destructor[2] = __NewResourceData_block_invoke;
        destructor[3] = &unk_726128;
        v111 = v47;
        v50 = v47;
        v51 = dispatch_data_create(v48, (size_t)v49, 0, destructor);
        v52 = dispatch_data_create_concat(v14, v51);

        size += dispatch_data_get_size(v51);
        v21 = v90;
        v14 = v52;
      }
      objc_autoreleasePoolPop(v21);
      v78 = *(unsigned int *)v22;
      if ((v22[33] & 0x10) != 0)
      {
        v79 = *(unsigned int *)v22;
        do
        {
          v22 += v78;
          v78 = *(unsigned int *)v22;
          v79 += v78;
        }
        while ((v22[33] & 0x20) == 0);
      }
      else
      {
        v79 = *(unsigned int *)v22;
      }
      v20 += v79;
    }
    while (v20 < v19);
  }

  return v14;
}

void sub_1ED25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CleanupSandboxExtensionURL_765(void *a1)
{
  objc_msgSend(a1, "stopAccessingSecurityScopedResource");

  return 0;
}

BOOL UpdateDebugFileCache(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  _BOOL8 v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _QWORD v45[2];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v26 = a4;
  v10 = objc_msgSend(objc_alloc((Class)NSURL), "initFileURLWithPath:isDirectory:", v26, 1);
  v28 = v8;
  v29 = v9;
  v27 = v10;
  if (v7)
  {
    v35 = 0;
    v36 = &v35;
    v37 = 0x2020000000;
    v38 = 1;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = __UpdateDebugFileCache_block_invoke;
    v30[3] = &unk_724998;
    v31 = v10;
    v34 = &v35;
    v32 = v9;
    v33 = v8;
    objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v30, v7);
    v11 = *((_BYTE *)v36 + 24) != 0;

    _Block_object_dispose(&v35, 8);
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager", 0));
    v45[0] = NSURLNameKey;
    v45[1] = NSURLIsDirectoryKey;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v45, 2));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v27, v13, 4, 0));

    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v15 = v14;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v17)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
          v39 = 0;
          objc_msgSend(v19, "getResourceValue:forKey:error:", &v39, NSURLIsDirectoryKey, 0);
          v20 = v39;
          if ((objc_msgSend(v20, "BOOLValue") & 1) == 0)
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lastPathComponent"));
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringByDeletingPathExtension"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", v22));

            if (v23)
              objc_msgSend(v28, "setObject:forKeyedSubscript:", v19, v23);

          }
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      }
      while (v16);
    }

    v11 = 1;
  }

  return v11;
}

void sub_1EDBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1EF3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);
  GTAGXPerfStateControl::~GTAGXPerfStateControl((id *)va);

  _Unwind_Resume(a1);
}

uint64_t GTMTLCreateIndirectCommandEncoder(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(result + 80) = v2;
  *(_OWORD *)(result + 96) = v2;
  *(_OWORD *)(result + 48) = v2;
  *(_OWORD *)(result + 64) = v2;
  *(_OWORD *)(result + 16) = v2;
  *(_OWORD *)(result + 32) = v2;
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  if (*(_BYTE *)(a2 + 11))
  {
    v3 = 8;
  }
  else
  {
    *(_QWORD *)(result + 16) = 8;
    v3 = 16;
  }
  if (!*(_BYTE *)(a2 + 10))
  {
    v4 = *(unsigned __int8 *)(a2 + 18);
    *(_QWORD *)(result + 24) = v3;
    *(_QWORD *)(result + 32) = v3 + 8 * v4;
    v5 = v4 + *(unsigned __int8 *)(a2 + 12);
    v6 = v3 + 8 * v5;
    v7 = v5 + *(unsigned __int8 *)(a2 + 16);
    *(_QWORD *)(result + 40) = v6;
    *(_QWORD *)(result + 48) = v3 + 8 * v7;
    v8 = v7 + *(unsigned __int8 *)(a2 + 15);
    *(_QWORD *)(result + 56) = v3 + 8 * v8;
    v3 += 8 * (v8 + *(unsigned __int8 *)(a2 + 13));
  }
  v9 = *(unsigned __int8 *)(a2 + 17);
  *(_QWORD *)(result + 64) = v3;
  *(_QWORD *)(result + 72) = v3 + 8 * v9;
  v10 = v9 + *(unsigned __int8 *)(a2 + 14);
  v11 = v3 + 8 * v10;
  v12 = *(unsigned __int16 *)(a2 + 8);
  *(_QWORD *)(result + 80) = v11;
  if (*(_BYTE *)(a2 + 19))
  {
    if ((v12 & 0xF) != 0)
    {
      v13 = *(unsigned __int8 *)(a2 + 18);
    }
    else
    {
      if ((v12 & 0x60) == 0)
        goto LABEL_12;
      v13 = *(unsigned __int8 *)(a2 + 13);
    }
    v11 = v3 + 8 * (v10 + v13);
  }
LABEL_12:
  if (*(_BYTE *)(a2 + 21))
  {
    *(_QWORD *)(result + 88) = v11;
    v11 += 8;
  }
  v14 = (v12 << 63 >> 63) & 0x28;
  if ((v12 & 2) != 0)
    v14 = 56;
  v15 = 72;
  if ((v12 & 4) != 0)
    v14 = 72;
  if ((v12 & 8) != 0)
    v14 = 80;
  if ((v12 & 0x60) != 0)
    v14 = 120;
  if (v14 <= 0x48)
    v16 = 72;
  else
    v16 = v14;
  if ((v12 & 0x80) != 0)
    v14 = v16;
  if (v14 > 0x48)
    v15 = v14;
  if ((v12 & 0x100) != 0)
    v14 = v15;
  *(_QWORD *)(result + 96) = v11;
  *(_QWORD *)(result + 104) = v11 + v14;
  return result;
}

double GetExecuteCommandsInBufferArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;

  switch(*(_DWORD *)(a2 + 8))
  {
    case 0xFFFFC1A4:
    case 0xFFFFC1A6:
      v10 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), a3);
      *(_OWORD *)a1 = *(_OWORD *)(v10 + 8);
      v9 = *((_QWORD *)v10 + 4);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)v10 + 3);
      v8 = v10[40];
      goto LABEL_4;
    case 0xFFFFC1A5:
    case 0xFFFFC1A7:
      v6 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), a3);
      v7 = GTTraceFunc_argumentBlobWithMap((_QWORD *)a2, v6[41], a3);
      *(_QWORD *)a1 = *((_QWORD *)v6 + 1);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v7 + 16);
      v8 = v6[40];
      v9 = *((_QWORD *)v6 + 4);
LABEL_4:
      v11 = GTTraceMemoryMap_argumentBlobAtIndex(v8, a3, v9);
      if (v11)
      {
        v13 = v11 + 16;
        v14 = *(unsigned int *)(v11 + 12);
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      break;
    default:
      *(_QWORD *)(a1 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      break;
  }
  return result;
}

_UNKNOWN **GTMTLReplayClient_embeddedQueryShaderInfo(uint64_t a1, id *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  _UNKNOWN **v9;
  id v10;
  void *v11;
  uint64_t v12;
  io_registry_entry_t IOAccelerator;
  id MetalPluginName;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id Analysis;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v30;
  NSDictionary *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  double v36;
  unsigned int v37;
  unsigned int v38[2];
  _QWORD v39[4];
  NSDictionary *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  unsigned int v46;
  const __CFString *v47;
  uint64_t v48;
  const __CFString *v49;
  uint64_t v50;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("gpuTarget")));
    v34 = v7;
    if (v7)
      v8 = objc_msgSend(v7, "intValue");
    else
      v8 = 0x7FFFFFFF;
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("MetalPluginName")));
    v11 = v10;
    if (v8 == 0x7FFFFFFF)
    {
      if (!v10)
      {
        v8 = 0x7FFFFFFF;
        goto LABEL_12;
      }
      v8 = MetalPluginTarget(v10);
    }

    if ((v8 & 0x80000000) == 0)
    {
      v9 = &off_739090;

      goto LABEL_26;
    }
LABEL_12:
    v46 = v8;
    v30 = v6;
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("MetalPluginName")));
    if (!v12)
    {
      IOAccelerator = GetIOAccelerator();
      MetalPluginName = GetMetalPluginName(IOAccelerator, &v46);
      v12 = objc_claimAutoreleasedReturnValue(MetalPluginName);
    }
    v32 = v12;
    v15 = objc_alloc((Class)NSMutableDictionary);
    v49 = CFSTR("MetalPluginName");
    v50 = v32;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
    objc_msgSend(v15, "initWithDictionary:", v16);

    v35 = objc_alloc_init((Class)NSOperation);
    v45[0] = 0;
    v45[1] = v45;
    v45[2] = 0x3032000000;
    v45[3] = __Block_byref_object_copy__53;
    v45[4] = __Block_byref_object_dispose__54;
    v45[5] = 0;
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = ___ZL29EmbeddedQueryShaderInfoLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryi_block_invoke;
    v44[3] = &unk_727530;
    v44[4] = v45;
    v44[5] = a1;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v44));
    objc_msgSend(v17, "setQueuePriority:", -8);
    objc_msgSend(*a2, "addOperation:", v17);
    objc_msgSend(v35, "addDependency:", v17);

    v43[0] = 0;
    v43[1] = v43;
    v43[2] = 0x3032000000;
    v43[3] = __Block_byref_object_copy__53;
    v43[4] = __Block_byref_object_dispose__54;
    v43[5] = 0;
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = ___ZL29EmbeddedQueryShaderInfoLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryi_block_invoke_2;
    v39[3] = &unk_726918;
    v41 = v43;
    v42 = a1;
    v31 = (NSDictionary *)v30;
    v40 = v31;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v39));
    objc_msgSend(v18, "setQueuePriority:", -8);
    objc_msgSend(*a2, "addOperation:", v18);
    objc_msgSend(v35, "addDependency:", v18);
    objc_msgSend(v18, "waitUntilFinished");

    *(_QWORD *)v38 = 0;
    v37 = 0;
    v36 = 1.0;
    GetConsistentPStates(v31, &v38[1], v38, &v36, &v37);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "defaultDevice"));
    Analysis = DYMTLReplayFrameProfiler_loadAnalysis(v19);
    v33 = (void *)objc_claimAutoreleasedReturnValue(Analysis);

    if (v33)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("DerivedCounterDictionary")));
      v22 = v21;
      if (v21)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("DerivedCounters")));
        v24 = v23;
        if (v23)
        {
          v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("ParameterBufferBytesUsed")));
          v26 = (void *)v25;
          if (v25)
          {
            v47 = CFSTR("ParameterBufferBytesUsed");
            v48 = v25;
            v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
            v28 = GTMTLReplayHost_rawCounters(v27);
            objc_claimAutoreleasedReturnValue(v28);

          }
        }

      }
    }
    operator new();
  }
  v9 = 0;
LABEL_26:

  return v9;
}

void sub_1F0B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;

  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a60, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__54(uint64_t a1)
{

}

void ___ZL29EmbeddedQueryShaderInfoLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryi_block_invoke(uint64_t a1)
{
  unsigned int *v2;
  id v3;
  id v4;
  void *v5;
  _QWORD *v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  int *v10;
  int v11;
  BOOL v12;
  unsigned int v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  _QWORD v36[5];
  _QWORD v37[5];
  const __CFString *v38;
  void *v39;
  _QWORD v40[2];
  _QWORD v41[2];

  GTMTLReplayController_prePlayForProfiling(*(_QWORD *)(a1 + 40));
  v29 = a1;
  v2 = *(unsigned int **)(a1 + 40);
  v34 = objc_alloc_init((Class)NSMutableArray);
  v33 = objc_alloc_init((Class)NSMutableDictionary);
  v32 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = objc_alloc_init((Class)NSMutableDictionary);
  v4 = *((id *)v2 + 1);
  v5 = v4;
  v6 = *(_QWORD **)v2;
  v7 = v2 + 5620;
  if (*(_QWORD *)(*(_QWORD *)v2 + 104) + *(_QWORD *)(*(_QWORD *)v2 + 96) > (unint64_t)v2[5620])
  {
    v31 = v4;
    while (1)
    {
      v8 = objc_autoreleasePoolPush();
      v9 = *(_QWORD *)(v6[15] + 24) + ((unint64_t)*v7 << 6);
      v10 = (int *)(v9 + 8);
      if (GetFuncEnumConstructorType(*(_DWORD *)(v9 + 8)) == 25)
        GTMTLReplayController_restoreCommandBuffer((uint64_t)v2, v9);
      GTMTLReplayController_updateCommandEncoder((uint64_t)v2, v9);
      GTMTLReplayController_defaultDispatchFunction((uint64_t)v2, v9);
      v11 = *v10;
      if ((IsFuncEnumDrawCall(*v10) & 1) == 0)
      {
        v12 = (v11 + 16079) < 2 || v11 == -16220;
        if (!v12 && v11 != -16327)
          goto LABEL_21;
      }
      v14 = v2[2828];
      if (v14 == 28)
        break;
      if (v14 == 70)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "renderPipelineStateForKey:", *((_QWORD *)v2 + 2489)));
        if (IsFuncEnumDrawCall(*v10))
        {
          v35 = v8;
          v40[0] = CFSTR("vertex shader key");
          v16 = objc_msgSend(v15, "newVertexShaderDebugInfo");
          v17 = AddShaderBinary(v33, v16);
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          v40[1] = CFSTR("fragment shader key");
          v41[0] = v18;
          v19 = objc_msgSend(v15, "newFragmentShaderDebugInfo");
          v20 = AddShaderBinary(v32, v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          v41[1] = v21;
          v22 = v3;
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v41, v40, 2));
          objc_msgSend(v34, "addObject:", v23);

          v3 = v22;
          v5 = v31;

          goto LABEL_19;
        }
        goto LABEL_20;
      }
LABEL_21:
      objc_autoreleasePoolPop(v8);
      v25 = (*v7 + 1);
      *v7 = v25;
      if (v6[13] + v6[12] <= v25)
        goto LABEL_22;
    }
    v35 = v8;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "computeCommandEncoderForKey:", *((_QWORD *)v2 + 1415)));
    v38 = CFSTR("compute kernel key");
    v16 = objc_msgSend(v15, "newKernelDebugInfo");
    v24 = AddShaderBinary(v3, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v39 = v18;
    v19 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1));
    objc_msgSend(v34, "addObject:", v19);
LABEL_19:

    v8 = v35;
LABEL_20:

    goto LABEL_21;
  }
LABEL_22:
  v36[0] = CFSTR("draw call info");
  v36[1] = CFSTR("vertex fetch shader info");
  v37[0] = v34;
  v37[1] = &__NSDictionary0__struct;
  v36[2] = CFSTR("vertex shader info");
  v36[3] = CFSTR("fragment shader info");
  v37[2] = v33;
  v37[3] = v32;
  v36[4] = CFSTR("compute kernel info");
  v37[4] = v3;
  v26 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 5, v29));

  v27 = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 8);
  v28 = *(void **)(v27 + 40);
  *(_QWORD *)(v27 + 40) = v26;

}

void ___ZL29EmbeddedQueryShaderInfoLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryi_block_invoke_2(uint64_t a1)
{
  id v1;
  void *v2;
  vm_size_t v3;
  vm_size_t v4;
  id v5;
  int *v6;
  dispatch_queue_attr_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  void *v20;
  id v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  _DWORD *v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  id v38;
  _DWORD *v39;
  char *v40;
  uint64_t RenderPassDescriptor;
  void *v42;
  id MTLRenderPassDescriptor;
  void *v44;
  void *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v51;
  unsigned __int8 *v52;
  unsigned __int8 v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v61;
  vm_size_t v62;
  void *v63;
  NSObject *source;
  id v65;
  NSObject *queue;
  uint64_t v67;
  void *v68;
  ProgramAddressTableCollector *v69;
  id v70;
  int v71;
  id v72;
  ProgramAddressTableCollector *v73;
  char v74;
  id v75;
  id *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  unsigned int *v81;
  _QWORD handler[5];
  _OWORD v83[2];
  int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  mach_timebase_info info;
  vm_address_t address;
  _QWORD v90[3];
  _QWORD v91[3];

  v76 = *(id **)(a1 + 48);
  v1 = *(id *)(a1 + 32);
  address = 0;
  v65 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("uscBufferSize")));
  v3 = (_QWORD)objc_msgSend(v2, "unsignedIntegerValue") << 20;

  if (v3 - 1 >= 0x1FFFFFF)
    v4 = 0x2000000;
  else
    v4 = v3;
  vm_allocate(mach_task_self_, &address, v4, 1);
  memset((void *)address, 255, v4);
  v61 = v76[1];
  v62 = v4;
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "defaultDevice"));
  objc_msgSend(v63, "mapShaderSampleBufferWithBuffer:capacity:size:", address, v4 / 0xC, v4);
  mach_timebase_info(&info);
  v85 = 0;
  v86 = (unsigned __int8 *)&v85;
  v87 = 0x2020000000;
  v67 = mach_absolute_time();
  v5 = objc_retainAutorelease(objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 2097144));
  memset(objc_msgSend(v5, "mutableBytes"), 255, (size_t)objc_msgSend(v5, "length"));
  v70 = objc_retainAutorelease(v5);
  v6 = (int *)objc_msgSend(v70, "mutableBytes");
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectForKeyedSubscript:", CFSTR("perEncoderDrawCallCount")));
  memset(v83, 0, sizeof(v83));
  v84 = 1065353216;
  v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  queue = dispatch_queue_create("com.apple.MTLReplayer.memoryPresure", v8);

  v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_memorypressure, 0, 2uLL, queue);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = ___ZL18PerformUSCSamplingP21GTMTLReplayControllerP12NSDictionary_block_invoke;
  handler[3] = &unk_724DD8;
  handler[4] = &v85;
  dispatch_source_set_event_handler(v9, handler);
  source = v9;
  dispatch_activate(v9);
  v69 = objc_alloc_init(ProgramAddressTableCollector);
  v77 = 0;
  v10 = 0;
  v11 = 0;
  v81 = (unsigned int *)(v76 + 2810);
  do
  {
    v71 = v11;
    GTMTLReplayController_prePlayForProfiling((uint64_t)v76);
    v75 = v68;
    v72 = v70;
    v73 = v69;
    v80 = v76[1];
    v12 = *v76;
    if (*((_QWORD *)*v76 + 13) + *((_QWORD *)*v76 + 12) > (unint64_t)*v81)
    {
      v74 = 0;
      v78 = v12[2];
      while (1)
      {
        v13 = objc_autoreleasePoolPush();
        v14 = *(_QWORD *)(v12[15] + 24);
        v15 = *v81;
        v16 = v14 + (v15 << 6);
        v19 = *(_DWORD *)(v16 + 8);
        v18 = (int *)(v16 + 8);
        v17 = v19;
        if (GetFuncEnumConstructorType(v19) == 25)
        {
          GTMTLReplayController_restoreCommandBuffer((uint64_t)v76, v14 + (v15 << 6));
          v17 = *v18;
        }
        if (v17 <= -16287)
          break;
        if (v17 <= -16247)
        {
          if (v17 != -16286)
          {
            if (v17 != -16285)
              goto LABEL_30;
LABEL_29:
            GTMTLReplayController_dispatchForUSCSampling((uint64_t)v76, v14 + (v15 << 6), v80, v78, v73, (v10 - 1));
            v74 = 0;
            goto LABEL_31;
          }
          v35 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v14 + (v15 << 6)), *(unsigned __int8 *)(v14 + (v15 << 6) + 13), v78);
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "parallelRenderCommandEncoderForKey:", *(_QWORD *)v35));
          objc_msgSend(v80, "setRenderCommandEncoder:forKey:", v36, *((_QWORD *)v35 + 1));
          goto LABEL_26;
        }
        if (v17 != -16246)
        {
          if (v17 != -16014)
          {
LABEL_30:
            GTMTLReplayController_dispatchForUSCSampling((uint64_t)v76, v14 + (v15 << 6), v80, v78, v73, (v10 - 1));
            goto LABEL_31;
          }
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v81));
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", v31));

          v32 = objc_msgSend(v79, "unsignedIntegerValue");
          *v6 = *(unsigned __int8 *)v6 | ((_DWORD)v10 << 8);
          v33 = v6 + 6;
          v34 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v14 + (v15 << 6)), *(unsigned __int8 *)(v14 + (v15 << 6) + 13), v78);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "commandBufferForKey:", *(_QWORD *)v34));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "sampledComputeCommandEncoderWithDispatchType:programInfoBuffer:capacity:", *((_QWORD *)v34 + 2), v33, v32));
          LODWORD(v91[0]) = objc_msgSend(v28, "globalTraceObjectID");
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v83, v91[0], v91)+ 5) = v10++;
          objc_msgSend(v80, "setComputeCommandEncoder:forKey:", v28, *((_QWORD *)v34 + 1));
LABEL_24:
          v6 = &v33[6 * (_QWORD)v32];
          v30 = 24 * (_QWORD)v32 + 24;
          goto LABEL_25;
        }
        if ((v74 & 1) == 0)
          goto LABEL_29;
        objc_msgSend(v80, "removeRenderCommandEncoderForKey:", *(_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v14 + (v15 << 6)), *(unsigned __int8 *)(v14 + (v15 << 6) + 13), v78));
        v74 = 1;
LABEL_31:
        objc_autoreleasePoolPop(v13);
        v47 = *v81 + 1;
        *v81 = v47;
        if (v12[13] + v12[12] <= v47)
          goto LABEL_32;
      }
      switch(v17)
      {
        case -16353:
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v81));
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", v37));

          v38 = objc_msgSend(v79, "unsignedIntegerValue");
          *v6 = *(unsigned __int8 *)v6 | ((_DWORD)v10 << 8);
          v39 = v6 + 6;
          v40 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v14 + (v15 << 6)), *(unsigned __int8 *)(v14 + (v15 << 6) + 13), v78);
          RenderPassDescriptor = GetRenderPassDescriptor((uint64_t *)(v14 + (v15 << 6)), v78);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "commandBufferForKey:", *(_QWORD *)v40));
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "renderPassDescriptorMap"));
          MTLRenderPassDescriptor = MakeMTLRenderPassDescriptor(RenderPassDescriptor, v42);
          v28 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPassDescriptor);

          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "sampledRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v28, v39, 2 * (_QWORD)v38 + 2));
          LODWORD(v91[0]) = objc_msgSend(v44, "globalTraceObjectID");
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v83, v91[0], v91)+ 5) = v10++;
          objc_msgSend(v80, "setRenderCommandEncoder:forKey:", v44, *((_QWORD *)v40 + 1));

          v6 = &v39[12 * (_QWORD)v38 + 12];
          v30 = 48 * (_QWORD)v38 + 72;
          break;
        case -16352:
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v81));
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", v45));

          v32 = objc_msgSend(v79, "unsignedIntegerValue");
          *v6 = *(unsigned __int8 *)v6 | ((_DWORD)v10 << 8);
          v33 = v6 + 6;
          v46 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v14 + (v15 << 6)), *(unsigned __int8 *)(v14 + (v15 << 6) + 13), v78);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "commandBufferForKey:", *(_QWORD *)v46));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "sampledComputeCommandEncoderWithProgramInfoBuffer:capacity:", v33, v32));
          LODWORD(v91[0]) = objc_msgSend(v28, "globalTraceObjectID");
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v83, v91[0], v91)+ 5) = v10++;
          objc_msgSend(v80, "setComputeCommandEncoder:forKey:", v28, *((_QWORD *)v46 + 1));
          goto LABEL_24;
        case -16351:
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v81));
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectForKeyedSubscript:", v20));

          v21 = objc_msgSend(v79, "unsignedIntegerValue");
          *v6 = *(unsigned __int8 *)v6 | ((_DWORD)v10 << 8);
          v22 = v6 + 6;
          v23 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v14 + (v15 << 6)), *(unsigned __int8 *)(v14 + (v15 << 6) + 13), v78);
          v24 = GetRenderPassDescriptor((uint64_t *)(v14 + (v15 << 6)), v78);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "commandBufferForKey:", *(_QWORD *)v23));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "renderPassDescriptorMap"));
          v27 = MakeMTLRenderPassDescriptor(v24, v26);
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "sampledRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v28, v22, 2 * (_QWORD)v21 + 2));
          LODWORD(v91[0]) = objc_msgSend(v29, "globalTraceObjectID");
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v83, v91[0], v91)+ 5) = v10++;
          objc_msgSend(v80, "setParallelRenderCommandEncoder:forKey:", v29, *((_QWORD *)v23 + 1));

          v6 = &v22[12 * (_QWORD)v21 + 12];
          v30 = 48 * (_QWORD)v21 + 72;
          v74 = 1;
          break;
        default:
          goto LABEL_30;
      }
LABEL_25:

      v77 += v30;
      v36 = v79;
LABEL_26:

      goto LABEL_31;
    }
LABEL_32:

    v48 = (mach_absolute_time() - v67) * info.numer / info.denom;
    v49 = atomic_load(v86 + 24);
    v51 = (v49 & 1) == 0 && v48 > 0x3B9AC9FF;
    v52 = v86 + 24;
    atomic_store(v51, v86 + 24);
    if (v71 == 1199)
      break;
    v11 = v71 + 1;
    v53 = atomic_load(v52);
  }
  while ((v53 & 1) == 0);
  dispatch_source_cancel(source);
  objc_msgSend(v63, "unmapShaderSampleBuffer");
  objc_msgSend(v72, "setLength:", v77);
  v90[0] = CFSTR("usc sampling sample data");
  v54 = objc_alloc((Class)NSData);
  v55 = objc_msgSend(v54, "initWithBytesNoCopy:length:deallocator:", address, v62, &__block_literal_global_963);
  v91[0] = v55;
  v90[1] = CFSTR("usc sampling address mappings");
  v56 = (void *)objc_claimAutoreleasedReturnValue(-[ProgramAddressTableCollector mappings](v73, "mappings"));
  v90[2] = CFSTR("usc sampling address data");
  v91[1] = v56;
  v91[2] = v72;
  v57 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v91, v90, 3));

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v83);
  _Block_object_dispose(&v85, 8);

  v58 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v59 = *(void **)(v58 + 40);
  *(_QWORD *)(v58 + 40) = v57;

}

void sub_1F1D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  uint64_t v39;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a37);
  _Block_object_dispose((const void *)(v39 - 192), 8);

  _Unwind_Resume(a1);
}

void GetConsistentPStates(NSDictionary *a1, unsigned int *a2, unsigned int *a3, double *a4, unsigned int *a5)
{
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  NSDictionary *v16;

  v16 = a1;
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", CFSTR("GPUState")));
  v10 = v9;
  if (!v9 || (v11 = objc_msgSend(v9, "unsignedIntValue"), (*a5 = v11) == 0))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", CFSTR("XPState")));
    v13 = v12;
    if (v12)
    {
      objc_msgSend(v12, "doubleValue");
      v15 = floor(v14);
      *a2 = (v15 * 100.0);
      *a3 = (ceil(v14) * 100.0);
      *a4 = v14 - v15;
    }
    else
    {
      *a3 = 3;
      *a2 = 3;
    }

  }
}

void sub_1F2048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id ProfilingTimingDataLegacy(uint64_t a1, id *a2, void *a3, void *a4, void *a5, int a6, int a7, int a8, uint64_t a9)
{
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  id *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  _QWORD v39[5];
  id v40;

  v16 = a3;
  v17 = a4;
  v18 = a5;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x3032000000;
  v39[3] = __Block_byref_object_copy__53;
  v39[4] = __Block_byref_object_dispose__54;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("MTLStatCommandBufferIndex"), CFSTR("MTLStatEncoderIndex"), CFSTR("MTLStatCommandIndex"), CFSTR("MTLStat_nSec"), CFSTR("MTLStatDataMaster"), CFSTR("MTLStatSampleLocation"), CFSTR("MTLStatTotalGPUCycles"), 0));
  v40 = objc_msgSend(v19, "mutableCopy");

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = ___ZL25ProfilingTimingDataLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryP19NSMutableDictionaryS6_P14NSMutableArrayIP8NSNumberEjjjP21GTAGXPerfStateControl_block_invoke;
  v27[3] = &unk_724E40;
  v32 = v39;
  v33 = a1;
  v20 = objc_alloc_init((Class)NSOperation);
  v28 = v20;
  v34 = a2;
  v36 = a6;
  v21 = v18;
  v29 = v21;
  v35 = a9;
  v37 = a8;
  v38 = a7;
  v22 = v16;
  v30 = v22;
  v23 = v17;
  v31 = v23;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v27));
  objc_msgSend(v24, "setQueuePriority:", -8);
  objc_msgSend(*a2, "addOperation:", v24);
  objc_msgSend(v20, "addDependency:", v24);
  objc_msgSend(a2[1], "addOperation:", v20);
  v25 = v20;

  _Block_object_dispose(v39, 8);
  return v25;
}

void sub_1F229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  _Block_object_dispose((const void *)(v27 - 136), 8);
  _Unwind_Resume(a1);
}

void GRCInfo::GRCInfo(GRCInfo *this, GTMTLReplayController *a2, int a3, GTAGXPerfStateControl *a4)
{
  id *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id obj;
  void *context;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a4;
  *((_OWORD *)this + 1) = 0u;
  v5 = (id *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = a3;
  *((_WORD *)this + 34) = 0;
  GRCReleaseAllCounterSourceGroup();
  context = objc_autoreleasePoolPush();
  v6 = GRCCopyAllCounterSourceGroup();
  v7 = *v5;
  *v5 = (id)v6;

  if (*v5 && objc_msgSend(*v5, "count"))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v5, "firstObject"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "sourceList"));
    if (!v24 || !objc_msgSend(v24, "count"))
      goto LABEL_21;
    obj = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 3));
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v8 = v24;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v28;
LABEL_7:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v28 != v10)
          objc_enumerationMutation(v8);
        v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v11);
        if (!objc_msgSend(v12, "ringBufferNum"))
          break;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
        v14 = objc_msgSend(v13, "hasPrefix:", CFSTR("Firmware"));

        if (v14)
          objc_msgSend(obj, "addObject:", v12);
        if (v9 == (id)++v11)
        {
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
          if (v9)
            goto LABEL_7;
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:

      if (!objc_msgSend(obj, "count"))
      {
LABEL_20:

LABEL_21:
        goto LABEL_22;
      }
      objc_storeStrong((id *)this + 3, obj);
      *((_QWORD *)this + 4) = objc_msgSend(v23, "sampleMarker");
      v15 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 7));
      v16 = (void *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v15;

      for (i = 0; i != 7; ++i)
      {
        v18 = (void *)*((_QWORD *)this + 6);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_738A60, "objectAtIndexedSubscript:", i));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[GPURawCounterSelect selectWithName:options:](GPURawCounterSelect, "selectWithName:options:", v19, 0));
        objc_msgSend(v18, "addObject:", v20);

      }
      v8 = (id)objc_claimAutoreleasedReturnValue(+[GPURawCounterSourceTriggerSelect selectWithName:options:](GPURawCounterSourceTriggerSelect, "selectWithName:options:", CFSTR("KickBoundary"), 0));
      v21 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](NSMutableArray, "arrayWithObject:", v8));
      v22 = (void *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v21;

    }
    goto LABEL_20;
  }
LABEL_22:
  objc_autoreleasePoolPop(context);
}

void sub_1F25F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  id *v11;
  id *v12;
  void *v13;

  GPURawCounterSetupParams::~GPURawCounterSetupParams(v12);
  _Unwind_Resume(a1);
}

void DisableComputeEncoderCoalescing(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  id v6;

  if (a1)
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultDevice"));
      v5 = DEVICEOBJECT(v4);
      v6 = (id)objc_claimAutoreleasedReturnValue(v5);

      if (v6)
      {
        if ((objc_opt_respondsToSelector(v6, "disableComputeEncoderCoalescing") & 1) != 0)
          objc_msgSend(v6, "setDisableComputeEncoderCoalescing:", a2);
      }

    }
  }
}

void sub_1F2728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__95(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZL14GPUTimeDataGRCP26GTMTLReplayOperationQueuesP14NSMutableArrayIP8NSNumberEjR7GRCInfo_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  id v16;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(unint64_t **)(v2 + 56);
  v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v4 - v3) >> 3));
  if (v4 == (unint64_t *)v3)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *,false>(v3, v4, v6, 1);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(unint64_t **)(v7 + 48);
  v9 = *(unint64_t **)(v7 + 56);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *v8;
      v13 = v8[1];
      v8 += 3;
      if (v11 <= v12)
        v11 = v12;
      v14 = v13 >= v11;
      v15 = v13 - v11;
      if (v13 > v11)
        v11 = v13;
      if (!v14)
        v15 = 0;
      v10 += v15;
    }
    while (v8 != v9);
  }
  v16 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v10));
  objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:");
  objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v16, 0);

}

void sub_1F2864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL14GPUTimeDataGRCP26GTMTLReplayOperationQueuesP14NSMutableArrayIP8NSNumberEjR7GRCInfo_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id **v4;
  uint64_t v5;
  id *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  int FuncEnumConstructorType;
  id v14;
  void *v15;
  unint64_t v16;
  void *v17;
  id *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  _QWORD v26[5];
  char v27;
  _QWORD v28[2];
  char v29;

  v1 = a1;
  GTMTLReplayController_prePlayForProfiling(**(_QWORD **)(a1 + 40));
  GRCInfo::SetupSource(*(_QWORD *)(v1 + 40), *(unsigned int *)(v1 + 48), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v1 + 40) + 16), "firstObject"));
  objc_msgSend(v2, "startSampling");

  v3 = objc_autoreleasePoolPush();
  v4 = *(id ***)(v1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
  v28[1] = *v4;
  v29 = 0;
  v28[0] = objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
  objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
  v25 = (*v4)[1];
  v6 = *v4;
  v7 = (uint64_t *)**v4;
  v27 = 0;
  if (v7[13] + v7[12] > (unint64_t)*((unsigned int *)v6 + 5620))
  {
    v23 = v3;
    v24 = v1;
    v8 = v7[15];
    do
    {
      v9 = objc_autoreleasePoolPush();
      v10 = *(_QWORD *)(v8 + 24);
      v11 = *v4;
      v12 = *((unsigned int *)*v4 + 5620);
      FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v10 + (v12 << 6) + 8));
      if (FuncEnumConstructorType == 25)
      {
        GTMTLReplayController_restoreCommandBuffer((uint64_t)v11, v10 + (v12 << 6));
        v11 = *v4;
      }
      GTMTLReplayController_updateCommandEncoder((uint64_t)v11, v10 + (v12 << 6));
      DispatchFunction(*v4, v10 + (v12 << 6), &v27);
      if (FuncEnumConstructorType == 25)
      {
        v14 = objc_msgSend(v25, "commandBufferForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v10 + (v12 << 6)), *(unsigned __int8 *)(v10 + (v12 << 6) + 13), v7[2])+ 1));
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = ___ZN7GRCInfo23ReplayForTimingCountersERNSt3__16vectorINS0_5tupleIJyyyEEENS0_9allocatorIS3_EEEE_block_invoke;
        v26[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
        v26[4] = v5 + 48;
        objc_msgSend(v15, "addCompletedHandler:", v26);

      }
      objc_autoreleasePoolPop(v9);
      v6 = *v4;
      v16 = (*((_DWORD *)*v4 + 5620) + 1);
      *((_DWORD *)*v4 + 5620) = v16;
    }
    while (v7[13] + v7[12] > v16);
    v3 = v23;
    v1 = v24;
  }
  *((_DWORD *)v6 + 5621) = 0;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6[1], "defaultCommandQueue"));
  objc_msgSend(v17, "finish");

  GRCInfo::ScopedReplayConfiguration::~ScopedReplayConfiguration((GRCInfo::ScopedReplayConfiguration *)v28);
  v18 = *(id **)(v1 + 40);
  v19 = GRCInfo::DrainRawFrameData(v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = GRCInfo::PostProcessFrameData((uint64_t)v18, v20);

  objc_autoreleasePoolPop(v3);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v1 + 40) + 16), "firstObject"));
  objc_msgSend(v22, "stopSampling");

  GRCInfo::AddConsistencyInfo(*(GTAGXPerfStateControl ***)(v1 + 40));
  GTAGXPerfStateControl::DisableConsistentGPUPerfState(*(GTAGXPerfStateControl **)(*(_QWORD *)(v1 + 40) + 8));
}

void sub_1F2B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__171(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__172(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 48);
}

__n128 __Block_byref_object_copy__173(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__174(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZL15KickTimeDataGRCP26GTMTLReplayOperationQueuesP19NSMutableDictionaryjR7GRCInfoP7NSArray_block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  char *v21;
  uint64_t v22;
  NSData *v23;
  int NextMarker;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  const CATransform3D **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  const CATransform3D **v49;
  void *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t i;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "firstObject"));
  if (!v2)
    goto LABEL_55;
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 72);
  v6 = (char *)v3[6];
  v5 = (char *)v3[7];
  v7 = 0x8E38E38E38E38E39 * ((v5 - v6) >> 3);
  v8 = v4 - v7;
  v56 = v2;
  if (v4 <= v7)
  {
    if (v4 < v7)
      v3[7] = &v6[72 * v4];
    goto LABEL_22;
  }
  v9 = v3[8];
  if (0x8E38E38E38E38E39 * ((v9 - (uint64_t)v5) >> 3) >= v8)
  {
    bzero(v5, 72 * ((72 * v8 - 72) / 0x48) + 72);
    v3[7] = &v5[72 * ((72 * v8 - 72) / 0x48) + 72];
  }
  else
  {
    if (v4 > 0x38E38E38E38E38ELL)
      abort();
    v10 = 0x8E38E38E38E38E39 * ((v9 - (uint64_t)v6) >> 3);
    if (2 * v10 > v4)
      v4 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v4;
    if (v11 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v12 = (char *)operator new(72 * v11);
    v13 = &v12[8 * ((v5 - v6) >> 3)];
    v14 = &v12[72 * v11];
    v15 = 72 * ((72 * v8 - 72) / 0x48) + 72;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      v2 = v56;
    }
    else
    {
      v2 = v56;
      do
      {
        *(_OWORD *)(v13 - 72) = *(_OWORD *)(v5 - 72);
        v17 = *(_OWORD *)(v5 - 56);
        v18 = *(_OWORD *)(v5 - 40);
        v19 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v19;
        *(_OWORD *)(v13 - 40) = v18;
        *(_OWORD *)(v13 - 56) = v17;
        v13 -= 72;
        v5 -= 72;
      }
      while (v5 != v6);
      v5 = v6;
    }
    v3[6] = v13;
    v3[7] = v16;
    v3[8] = v14;
    if (!v5)
      goto LABEL_22;
    operator delete(v5);
  }
  v2 = v56;
LABEL_22:
  v20 = objc_retainAutorelease(v2);
  v21 = (char *)objc_msgSend(v20, "bytes");
  v22 = 0;
  v23 = 0;
  while (1)
  {
    NextMarker = GRCInfo::FindNextMarker((GRCInfo *)v20, v23, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32));
    v26 = NextMarker;
    if (NextMarker == -1)
      break;
    v27 = &v21[8 * NextMarker];
    v28 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), *((_DWORD *)v27 + 8));
    v23 = (NSData *)(v26 + 8);
    if (v28)
    {
      v29 = *((_QWORD *)v27 + 3) > 5uLL || (*((_QWORD *)v27 + 3) & 1) == 0;
      if (v29
        || (v30 = *((unsigned int *)v28 + 6),
            v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8),
            v32 = *(_QWORD *)(v31 + 48),
            0x8E38E38E38E38E39 * ((*(_QWORD *)(v31 + 56) - v32) >> 3) <= v30))
      {
        v33 = (uint64_t *)(v27 + 8);
      }
      else
      {
        v33 = (uint64_t *)(v27 + 8);
        v34 = 125 * (*((_QWORD *)v27 + 1) - v22);
        *(_QWORD *)(v32 + 72 * v30) += v34 / 3;
        if (objc_msgSend(*(id *)(a1 + 32), "count"))
        {
          if (*(_WORD *)v27)
            *(_QWORD *)(v32 + 72 * v30 + 56) += *((_QWORD *)v27 + 8);
        }
        v35 = v34 / 3;
        v36 = *((_QWORD *)v27 + 3);
        switch(v36)
        {
          case 5:
            *(_QWORD *)(v32 + 72 * v30 + 24) += 2 * v35;
            v38 = 4;
            break;
          case 3:
            v39 = v32 + 72 * v30;
            *(_QWORD *)(v39 + 16) += v35;
            *(_QWORD *)(v39 + 40) += *((_QWORD *)v27 + 2);
            v38 = 2;
            break;
          case 1:
            v37 = v32 + 72 * v30;
            *(_QWORD *)(v37 + 8) += v35;
            *(_QWORD *)(v37 + 32) += *((_QWORD *)v27 + 2);
            v38 = 1;
            break;
          default:
            goto LABEL_38;
        }
        *(_DWORD *)(v32 + 72 * v30 + 64) |= v38;
      }
LABEL_38:
      v22 = *v33;
    }
  }
  v40 = &CATransform3DIdentity_ptr;
  v61 = (void *)objc_opt_new(NSMutableArray, v25);
  v60 = (void *)objc_opt_new(NSMutableArray, v41);
  v59 = (void *)objc_opt_new(NSMutableArray, v42);
  v58 = (void *)objc_opt_new(NSMutableArray, v43);
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v45 = *(_QWORD *)(v44 + 48);
  for (i = *(_QWORD *)(v44 + 56); v45 != i; v45 += 72)
  {
    if (*(_DWORD *)(v45 + 64))
    {
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)v45));
      objc_msgSend(v61, "addObject:", v46);

      if (objc_msgSend(*(id *)(a1 + 32), "count"))
      {
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v45 + 56)));
        objc_msgSend(v58, "addObject:", v47);

      }
      v48 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D arrayWithCapacity:]((id)v40[281], "arrayWithCapacity:", 3, v56));
      v49 = v40;
      v50 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D arrayWithCapacity:]((id)v40[281], "arrayWithCapacity:", 3));
      if (*(_DWORD *)(v45 + 64))
        v51 = *(_DWORD *)(v45 + 64);
      else
        v51 = 2;
      do
      {
        v52 = v51 & -v51;
        v53 = v52 >> 1;
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v45 + 8 * v53 + 8)));
        objc_msgSend(v48, "addObject:", v54);

        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v45 + 8 * v53 + 32)));
        objc_msgSend(v50, "addObject:", v55);

        v51 ^= v52;
      }
      while (v51);
      objc_msgSend(v60, "addObject:", v48);
      objc_msgSend(v59, "addObject:", v50);

      v40 = v49;
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v61, CFSTR("encoder time data"), v56);
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v60, CFSTR("kick time data"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v59, CFSTR("kick cycle data"));
  if (objc_msgSend(v58, "count"))
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v58, CFSTR("tilerParamBufBytesUsedArray"));

  v2 = v57;
LABEL_55:

}

void sub_1F31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{

  _Unwind_Resume(a1);
}

void ___ZL15KickTimeDataGRCP26GTMTLReplayOperationQueuesP19NSMutableDictionaryjR7GRCInfoP7NSArray_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;

  GTMTLReplayController_prePlayForProfiling(**(_QWORD **)(a1 + 56));
  GRCInfo::SetupSource(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64), 1, *(void **)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "firstObject"));
  objc_msgSend(v2, "startSampling");

  v3 = objc_autoreleasePoolPush();
  GRCInfo::ReplayForKickCounters(*(GTMTLReplayController ***)(a1 + 56), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48));
  v4 = GRCInfo::DrainRawFrameData(*(id **)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = GRCInfo::PostProcessFrameData(*(_QWORD *)(a1 + 56), v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setArray:", v7);

  objc_autoreleasePoolPop(v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "firstObject"));
  objc_msgSend(v8, "stopSampling");

  GRCInfo::AddConsistencyInfo(*(GTAGXPerfStateControl ***)(a1 + 56));
  GTAGXPerfStateControl::DisableConsistentGPUPerfState(*(GTAGXPerfStateControl **)(*(_QWORD *)(a1 + 56) + 8));
}

void sub_1F3374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__176(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__177(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 48);
}

__n128 __Block_byref_object_copy__178(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__179(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZL20BlitSplitTimeDataGRCP26GTMTLReplayOperationQueuesP19NSMutableDictionaryjR7GRCInfo_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  char *v4;
  uint64_t v5;
  NSData *v6;
  int NextMarker;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *i;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "firstObject"));
  if (v2)
  {
    v23 = v2;
    v25 = 0;
    std::vector<unsigned long long>::resize((char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 72), &v25);
    v3 = objc_retainAutorelease(v23);
    v4 = (char *)objc_msgSend(v3, "bytes");
    v5 = 0;
    v6 = 0;
    while (1)
    {
      NextMarker = GRCInfo::FindNextMarker((GRCInfo *)v3, v6, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 32));
      v9 = NextMarker;
      if (NextMarker == -1)
        break;
      v10 = &v4[8 * NextMarker];
      v11 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), *((_DWORD *)v10 + 8));
      v6 = (NSData *)(v9 + 8);
      if (v11)
      {
        v12 = *((_QWORD *)v10 + 3) > 5uLL || (*((_QWORD *)v10 + 3) & 1) == 0;
        if (v12
          || (v13 = *((unsigned int *)v11 + 5),
              v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48),
              v13 >= (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 56) - v14) >> 3))
        {
          v15 = (uint64_t *)(v10 + 8);
        }
        else
        {
          v16 = *((_QWORD *)v10 + 1);
          v15 = (uint64_t *)(v10 + 8);
          *(_QWORD *)(v14 + 8 * v13) += 125 * (v16 - v5) / 3uLL;
        }
        v5 = *v15;
      }
    }
    v17 = (void *)objc_opt_new(NSMutableArray, v8);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v19 = *(_QWORD **)(v18 + 48);
    for (i = *(_QWORD **)(v18 + 56); v19 != i; ++v19)
    {
      if (*v19)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
        objc_msgSend(v17, "addObject:", v21);

      }
    }
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v17, CFSTR("PerDrawNsecTimes"), v23));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v22, CFSTR("SplitEncoderData"));

    v2 = v24;
  }

}

void sub_1F35B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZL20BlitSplitTimeDataGRCP26GTMTLReplayOperationQueuesP19NSMutableDictionaryjR7GRCInfo_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  GTMTLReplayController **v3;
  id v4;
  uint64_t *var0;
  void *v6;
  GTMTLReplayController *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  GTMTLReplayController *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  void *v16;
  _QWORD *InclusiveRange;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *context;
  uint64_t *v50;
  void *v51;
  unsigned int v52;
  _BYTE v53[24];

  v1 = a1;
  GTMTLReplayController_prePlayForProfiling(**(_QWORD **)(a1 + 48));
  GRCInfo::SetupSource(*(_QWORD *)(v1 + 48), *(unsigned int *)(v1 + 56), 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v1 + 48) + 16), "firstObject"));
  objc_msgSend(v2, "startSampling");

  v41 = objc_autoreleasePoolPush();
  v3 = *(GTMTLReplayController ***)(v1 + 48);
  v45 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
  GRCInfo::ScopedReplayConfiguration::ScopedReplayConfiguration((GRCInfo::ScopedReplayConfiguration *)v53, *v3);
  v4 = (*v3)->var1;
  var0 = (uint64_t *)(*v3)->var0;
  v42 = var0[15];
  v43 = var0[14];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultDevice"));
  v46 = objc_msgSend(v6, "newEvent");

  v7 = *v3;
  if (var0[13] + var0[12] > (unint64_t)(*v3)->var24.var0)
  {
    v40 = v1;
    v50 = var0;
    v51 = v4;
    v47 = 0;
    v48 = 0;
    v8 = 0;
    v9 = 0;
    v44 = v45 + 48;
    do
    {
      context = objc_autoreleasePoolPush();
      v10 = *(_QWORD *)(var0[15] + 24);
      v11 = *v3;
      v12 = (*v3)->var24.var0;
      v13 = v10 + (v12 << 6);
      v15 = (int *)(v13 + 8);
      v14 = *(_DWORD *)(v13 + 8);
      if (GetFuncEnumConstructorType(v14) == 25)
      {
        GTMTLReplayController_restoreCommandBuffer((uint64_t)v11, v10 + (v12 << 6));
        v48 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v10 + (v12 << 6)), *(unsigned __int8 *)(v10 + (v12 << 6) + 13), v50[2])+ 1);
        v14 = *v15;
      }
      if (v14 == -16354)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "commandBufferForKey:", v48));
        ++GRCInfo::ReplayFrameWithBlitSyncEvents(std::unordered_map<unsigned int,unsigned int> &,BOOL)::signalCounter;
        objc_msgSend(v16, "encodeSignalEvent:value:", v46);
        objc_msgSend(v16, "encodeWaitForEvent:value:", v46, GRCInfo::ReplayFrameWithBlitSyncEvents(std::unordered_map<unsigned int,unsigned int> &,BOOL)::signalCounter);
        v9 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v10 + (v12 << 6)), *(unsigned __int8 *)(v10 + (v12 << 6) + 13), v50[2])+ 1);
        InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v43 + 12), *(_QWORD **)(v43 + 24), (*v3)->var24.var0);
        v18 = InclusiveRange[1];
        v19 = v18 - *InclusiveRange;
        if (v18 > *InclusiveRange)
        {
          v20 = (int *)(*(_QWORD *)(v42 + 24) + (*InclusiveRange << 6) + 8);
          do
          {
            v22 = *v20;
            v20 += 16;
            v21 = v22;
            if (IsFuncEnumSampledBlitCall(v22) || IsFuncEnumSampledBlitCallAGX(v21))
              ++v8;
            --v19;
          }
          while (v19);
        }

        v23 = v8;
      }
      else
      {
        v23 = v47;
      }
      GTMTLReplayController_updateCommandEncoder((uint64_t)*v3, v13);
      v24 = *v15;
      if (IsFuncEnumSampledBlitCall(*v15) || IsFuncEnumSampledBlitCallAGX(v24))
      {
        v47 = v23 - 1;
        if (v23 && v8 != v23)
        {
          v25 = v9;
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "blitCommandEncoderForKey:", v9));
          objc_msgSend(v26, "endEncoding");
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "commandBufferForKey:", v48));
          ++GRCInfo::ReplayFrameWithBlitSyncEvents(std::unordered_map<unsigned int,unsigned int> &,BOOL)::signalCounter;
          objc_msgSend(v27, "encodeSignalEvent:value:", v46);
          objc_msgSend(v27, "encodeWaitForEvent:value:", v46, GRCInfo::ReplayFrameWithBlitSyncEvents(std::unordered_map<unsigned int,unsigned int> &,BOOL)::signalCounter);
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "blitCommandEncoder"));
          objc_msgSend(v51, "setBlitCommandEncoder:forKey:", v28, v25);
          v52 = objc_msgSend(v51, "globalTraceIdForEncoder:ofType:", v25, 0);
          v29 = *(_QWORD *)(v45 + 72);
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v44, v52, &v52)+ 5) = v29;

          v9 = v25;
        }
      }
      else
      {
        v47 = v23;
      }
      GTMTLReplayController_defaultDispatchFunction((uint64_t)*v3, v13);
      v30 = *v15;
      var0 = v50;
      if (*v15 == -16354)
      {
        v52 = objc_msgSend(v51, "globalTraceIdForEncoder:ofType:", v9, 0);
        v31 = *(_QWORD *)(v45 + 72);
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v44, v52, &v52)+ 5) = v31;
        v30 = *v15;
      }
      if (v30 == -16376)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "commandBufferForKey:", v48));
        ++GRCInfo::ReplayFrameWithBlitSyncEvents(std::unordered_map<unsigned int,unsigned int> &,BOOL)::signalCounter;
        objc_msgSend(v32, "encodeSignalEvent:value:", v46);
        objc_msgSend(v32, "encodeWaitForEvent:value:", v46, GRCInfo::ReplayFrameWithBlitSyncEvents(std::unordered_map<unsigned int,unsigned int> &,BOOL)::signalCounter);

      }
      objc_autoreleasePoolPop(context);
      v7 = *v3;
      v33 = (*v3)->var24.var0 + 1;
      (*v3)->var24.var0 = v33;
    }
    while (v50[13] + v50[12] > v33);
    v4 = v51;
    v1 = v40;
  }
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7->var1, "defaultCommandQueue", v40));
  objc_msgSend(v34, "finish");

  GRCInfo::ScopedReplayConfiguration::~ScopedReplayConfiguration((GRCInfo::ScopedReplayConfiguration *)v53);
  v35 = GRCInfo::DrainRawFrameData(*(id **)(v1 + 48));
  v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  v37 = GRCInfo::PostProcessFrameData(*(_QWORD *)(v1 + 48), v36);
  v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  if (v38)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 40), "setArray:", v38);

  objc_autoreleasePoolPop(v41);
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v1 + 48) + 16), "firstObject"));
  objc_msgSend(v39, "stopSampling");

  GRCInfo::AddConsistencyInfo(*(GTAGXPerfStateControl ***)(v1 + 48));
  GTAGXPerfStateControl::DisableConsistentGPUPerfState(*(GTAGXPerfStateControl **)(*(_QWORD *)(v1 + 48) + 8));
}

void sub_1F3AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GRCInfo::~GRCInfo(id *this)
{
  GRCReleaseAllCounterSourceGroup();

}

void sub_1F3BF0(_Unwind_Exception *a1)
{
  id *v1;

  GPURawCounterSetupParams::~GPURawCounterSetupParams(v1 + 2);
  _Unwind_Resume(a1);
}

id *std::unique_ptr<GTAGXPerfStateControl>::reset[abi:nn180100](id **a1)
{
  id *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    GTAGXPerfStateControl::~GTAGXPerfStateControl(result);
    operator delete();
  }
  return result;
}

void GRCInfo::SetupSource(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  const __CFString *v24;
  void *v25;
  _QWORD v26[2];
  _QWORD v27[2];

  v7 = a4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "firstObject"));
  v9 = *(void **)(a1 + 48);
  if (v7)
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v7));
  else
    v10 = v9;
  v11 = v10;
  if (objc_msgSend(*(id *)(a1 + 24), "count"))
  {
    v12 = *(void **)(*(_QWORD *)a1 + 8);
    if (a3)
    {
      if (IsGPUPerformanceStateInduced(v12))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "firstObject"));
        objc_msgSend(v13, "setOptions:", &off_739108);

        goto LABEL_14;
      }
      v14 = *(unsigned int *)(a1 + 64);
      if (!(_DWORD)v14)
      {
        v26[0] = CFSTR("DisableOverlap");
        v26[1] = CFSTR("LockGPUPerfState");
        v27[0] = &__kCFBooleanTrue;
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
        v27[1] = v17;
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "firstObject"));
        objc_msgSend(v19, "setOptions:", v18);

LABEL_14:
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "firstObject"));
        if ((objc_msgSend(v20, "requestTriggers:firstErrorIndex:", *(_QWORD *)(a1 + 40), 0) & 1) == 0)
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "name"));
          NSLog(CFSTR("Fail, error while requesting triggers for %@"), v21);

        }
        objc_msgSend(v20, "setOptions:", 0);
        if ((objc_msgSend(v20, "requestCounters:firstErrorIndex:", v11, 0) & 1) != 0)
        {
          if ((objc_msgSend(v20, "setEnabled:", 1) & 1) != 0)
          {
LABEL_21:

            goto LABEL_22;
          }
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "name"));
          NSLog(CFSTR("Fail, error while enabling source[%@]"), v22);
        }
        else
        {
          v23 = objc_msgSend(*(id *)(a1 + 48), "count");
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "name"));
          NSLog(CFSTR("Fail, error while requesting %lu counter for source[%@]"), v23, v22);
        }

        goto LABEL_21;
      }
    }
    else
    {
      if (IsGPUPerformanceStateInduced(v12))
        goto LABEL_14;
      v14 = *(unsigned int *)(a1 + 64);
      if (!(_DWORD)v14)
      {
        v24 = CFSTR("LockGPUPerfState");
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
        v25 = v15;
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
        objc_msgSend(v8, "setOptions:", v16);

        goto LABEL_14;
      }
    }
    GTAGXPerfStateControl::EnableConsistentGPUPerfState(*(_QWORD *)(a1 + 8), v14);
    goto LABEL_14;
  }
LABEL_22:

}

void sub_1F3F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id GRCInfo::DrainRawFrameData(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;
  void *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  void *v11;
  id v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  if (!objc_msgSend(this[3], "count"))
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "firstObject"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v2, "ringBufferNum")));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[3], "lastObject"));
  if (objc_msgSend(v4, "isEnabled"))
  {
    for (i = 0; ; i = (i + 1))
    {
      if (i >= objc_msgSend(v4, "ringBufferNum"))
      {
        v13 = v3;
        goto LABEL_16;
      }
      v16 = 0;
      v17 = 0;
      v15 = 0;
      if ((objc_msgSend(v4, "ringBufferInfoAtIndex:base:size:dataOffset:dataSize:", i, &v17, (char *)&v16 + 4, &v16, &v15) & 1) == 0)break;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", v15));
      v7 = v6;
      v8 = v15;
      if (v15 + v16 <= HIDWORD(v16))
      {
        objc_msgSend(v6, "appendBytes:length:", v17 + v16, v15);
      }
      else
      {
        v9 = HIDWORD(v16) - v16;
        objc_msgSend(v6, "appendBytes:length:", v17 + v16, (HIDWORD(v16) - v16));
        objc_msgSend(v7, "appendBytes:length:", v17, v8 - v9);
      }
      v10 = objc_msgSend(v4, "drainRingBufferAtIndex:dataSize:", i, v15);
      if (v10 != v15)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
        NSLog(CFSTR("Fail, unexpected drain count for source %@!"), v11);

      }
      objc_msgSend(v3, "addObject:", v7);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
    NSLog(CFSTR("Fail, unable to retrieve ring buffer info from source %@!"), v14);

  }
  v13 = 0;
LABEL_16:

  return v13;
}

void sub_1F41AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id GRCInfo::PostProcessFrameData(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v18;
  id v19;
  id obj;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v19 = a2;
  if (objc_msgSend(v19, "count"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v19, "count")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "lastObject"));
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    obj = v19;
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v24;
      while (2)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v24 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v7);
          objc_msgSend(v4, "resetRawDataPostProcessor");
          v21 = 0;
          v22 = 0;
          v9 = objc_msgSend(v8, "length");
          if ((unint64_t)(4 * (_QWORD)v9) <= 0x4000)
            v10 = 0x4000;
          else
            v10 = 4 * (_QWORD)v9;
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v10));
          if (objc_msgSend(v8, "length"))
          {
            v12 = objc_retainAutorelease(v8);
            v13 = objc_msgSend(v12, "bytes");
            v14 = objc_msgSend(v12, "length");
            v15 = objc_retainAutorelease(v11);
            LOBYTE(v18) = 1;
            if ((objc_msgSend(v4, "postProcessRawDataWithSource:sourceSize:sourceRead:output:outputSize:outputWritten:isLast:", v13, v14, &v22, objc_msgSend(v15, "mutableBytes"), objc_msgSend(v15, "length"), &v21, v18) & 1) == 0)
            {

              v16 = 0;
              goto LABEL_17;
            }
          }
          objc_msgSend(v11, "setLength:", v21);
          objc_msgSend(v3, "addObject:", v11);

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v5)
          continue;
        break;
      }
    }

    v16 = v3;
LABEL_17:

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1F4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void GRCInfo::AddConsistencyInfo(GTAGXPerfStateControl **this)
{
  _UNKNOWN **v2;
  void *v3;
  void *v4;
  uint64_t v5;
  GTAGXPerfStateControl *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;

  if (*((_DWORD *)this + 16))
  {
    v2 = GTAGXPerfStateControl::ConsistentGPUPerfStateLevel(this[1], 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    if (v3)
    {
      v10 = v3;
      if (this[7])
      {
        if (*((_BYTE *)this + 68))
        {
          v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("enabled")));
          *((_BYTE *)this + 68) = objc_msgSend(v4, "BOOLValue");

          v3 = v10;
        }
        else
        {
          *((_BYTE *)this + 68) = 0;
        }
        if (!*((_BYTE *)this + 69))
        {
          *((_BYTE *)this + 69) = 0;
          goto LABEL_13;
        }
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("consistent")));
        v9 = objc_msgSend(v8, "BOOLValue");
      }
      else
      {
        v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("level")));
        v6 = this[7];
        this[7] = (GTAGXPerfStateControl *)v5;

        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("enabled")));
        *((_BYTE *)this + 68) = objc_msgSend(v7, "BOOLValue");

        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("consistent")));
        v9 = objc_msgSend(v8, "BOOLValue");
      }
      *((_BYTE *)this + 69) = v9;

      v3 = v10;
    }
LABEL_13:

  }
}

void sub_1F45E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

GRCInfo::ScopedReplayConfiguration *GRCInfo::ScopedReplayConfiguration::ScopedReplayConfiguration(GRCInfo::ScopedReplayConfiguration *this, GTMTLReplayController *a2)
{
  void *v3;

  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 16) = 1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2->var1, "defaultCommandQueue"));
  objc_msgSend(v3, "setGPUPriority:", 0);

  *(_QWORD *)this = objc_msgSend((id)g_commandBufferDescriptor, "errorOptions");
  objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", 0);
  return this;
}

void sub_1F4674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1F4880(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void GRCInfo::ScopedReplayConfiguration::~ScopedReplayConfiguration(GRCInfo::ScopedReplayConfiguration *this)
{
  void *v2;

  if (*((_BYTE *)this + 16))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 8), "defaultCommandQueue"));
    objc_msgSend(v2, "setGPUPriority:", 1);

  }
  objc_msgSend((id)g_commandBufferDescriptor, "setErrorOptions:", *(_QWORD *)this);
}

void sub_1F48EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::resize(char **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[8 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      v23 = &v5[8 * (a2 - v7)];
      v24 = 8 * a2 - 8 * v7;
      do
      {
        *(_QWORD *)v5 = *a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 61)
        abort();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 2;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v12);
      v15 = &v13[8 * v7];
      v16 = &v13[8 * a2];
      v17 = 8 * a2 - 8 * v7;
      v18 = v15;
      do
      {
        *(_QWORD *)v18 = *a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      v19 = &v13[8 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 8)
      {
        v22 = *((_QWORD *)i - 1);
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

uint64_t GRCInfo::FindNextMarker(GRCInfo *this, NSData *a2, uint64_t a3)
{
  unsigned int v4;
  GRCInfo *v5;
  unsigned int v6;
  GRCInfo *v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  v4 = a2;
  v5 = this;
  v6 = -[GRCInfo length](v5, "length");
  v7 = objc_retainAutorelease(v5);
  v8 = -[GRCInfo bytes](v7, "bytes");
  v9 = (v6 - 64) >> 3;
  v10 = v9 >= v4;
  v11 = v9 - v4;
  if (v10)
  {
    v12 = v4;
    v13 = v11 + 1;
    while (v8[v12] != a3)
    {
      ++v12;
      if (!--v13)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v12 = 0xFFFFFFFFLL;
  }

  return v12;
}

void sub_1F4AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void GRCInfo::ReplayForKickCounters(GTMTLReplayController **a1, uint64_t *a2)
{
  GTMTLReplayController *v4;
  uint64_t *var0;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int FuncEnumConstructorType;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t **v19;
  uint64_t *i;
  unint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[24];

  GRCInfo::ScopedReplayConfiguration::ScopedReplayConfiguration((GRCInfo::ScopedReplayConfiguration *)v51, *a1);
  v47 = (*a1)->var1;
  v4 = *a1;
  var0 = (uint64_t *)(*a1)->var0;
  v50 = 0;
  if (var0[13] + var0[12] > (unint64_t)v4->var24.var0)
  {
    v46 = a2 + 2;
    v48 = var0[15];
    LODWORD(v49) = -1;
    do
    {
      v6 = objc_autoreleasePoolPush();
      v7 = *(_QWORD *)(v48 + 24);
      v8 = (*a1)->var24.var0;
      GTMTLReplayController_updateCommandEncoder((uint64_t)*a1, v7 + (v8 << 6));
      DispatchFunction((id *)&(*a1)->var0, v7 + (v8 << 6), &v50);
      v9 = v7 + (v8 << 6);
      v10 = *(unsigned int *)(v9 + 8);
      FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v9 + 8));
      if (FuncEnumConstructorType == 25)
        v12 = (v49 + 1);
      else
        v12 = v49;
      v49 = v12;
      if (!GTMTLReplayHost_IsFuncEnumSampledEncoder(v10, 1, 0)
        || v50 != (FuncEnumConstructorType == 65))
      {
        goto LABEL_80;
      }
      v13 = objc_msgSend(v47, "globalTraceIdForEncoder:ofType:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v7 + (v8 << 6)), *(unsigned __int8 *)(v7 + (v8 << 6) + 13), var0[2])+ 1), FuncEnumConstructorType == 65);
      v14 = v13;
      v15 = a2[3];
      v16 = v13;
      v17 = a2[1];
      if (v17)
      {
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          v10 = v13;
          if (v17 <= v13)
            v10 = v13 % v17;
        }
        else
        {
          v10 = ((_DWORD)v17 - 1) & v13;
        }
        v19 = *(uint64_t ***)(*a2 + 8 * v10);
        if (v19)
        {
          for (i = *v19; i; i = (uint64_t *)*i)
          {
            v21 = i[1];
            if (v21 == v13)
            {
              if (*((_DWORD *)i + 4) == v13)
                goto LABEL_80;
            }
            else
            {
              if (v18.u32[0] > 1uLL)
              {
                if (v21 >= v17)
                  v21 %= v17;
              }
              else
              {
                v21 &= v17 - 1;
              }
              if (v21 != v10)
                break;
            }
          }
        }
      }
      v22 = operator new(0x20uLL);
      *v22 = 0;
      v22[1] = v16;
      *((_DWORD *)v22 + 4) = v14;
      *(_QWORD *)((char *)v22 + 20) = v49 | (v15 << 32);
      v23 = (float)(unint64_t)(v15 + 1);
      v24 = *((float *)a2 + 8);
      if (v17 && (float)(v24 * (float)v17) >= v23)
      {
        v16 = v10;
        goto LABEL_70;
      }
      v25 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3)
        v25 = 1;
      v26 = v25 | (2 * v17);
      v27 = vcvtps_u32_f32(v23 / v24);
      if (v26 <= v27)
        prime = (int8x8_t)v27;
      else
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v17 = a2[1];
      }
      if (*(_QWORD *)&prime <= v17)
      {
        if (*(_QWORD *)&prime >= v17)
          goto LABEL_66;
        v35 = vcvtps_u32_f32((float)(unint64_t)a2[3] / *((float *)a2 + 8));
        if (v17 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
        {
          v35 = std::__next_prime(v35);
        }
        else
        {
          v37 = 1 << -(char)__clz(v35 - 1);
          if (v35 >= 2)
            v35 = v37;
        }
        if (*(_QWORD *)&prime <= v35)
          prime = (int8x8_t)v35;
        if (*(_QWORD *)&prime >= v17)
        {
          v17 = a2[1];
          goto LABEL_66;
        }
        if (!*(_QWORD *)&prime)
        {
          v44 = (void *)*a2;
          *a2 = 0;
          if (v44)
            operator delete(v44);
          v17 = 0;
          a2[1] = 0;
          goto LABEL_66;
        }
      }
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v29 = operator new(8 * *(_QWORD *)&prime);
      v30 = (void *)*a2;
      *a2 = (uint64_t)v29;
      if (v30)
        operator delete(v30);
      v31 = 0;
      a2[1] = (uint64_t)prime;
      do
        *(_QWORD *)(*a2 + 8 * v31++) = 0;
      while (*(_QWORD *)&prime != v31);
      v32 = (_QWORD *)*v46;
      if (*v46)
      {
        v33 = v32[1];
        v34 = (uint8x8_t)vcnt_s8(prime);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          if (v33 >= *(_QWORD *)&prime)
            v33 %= *(_QWORD *)&prime;
        }
        else
        {
          v33 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*a2 + 8 * v33) = v46;
        v38 = (_QWORD *)*v32;
        if (*v32)
        {
          do
          {
            v39 = v38[1];
            if (v34.u32[0] > 1uLL)
            {
              if (v39 >= *(_QWORD *)&prime)
                v39 %= *(_QWORD *)&prime;
            }
            else
            {
              v39 &= *(_QWORD *)&prime - 1;
            }
            if (v39 != v33)
            {
              if (!*(_QWORD *)(*a2 + 8 * v39))
              {
                *(_QWORD *)(*a2 + 8 * v39) = v32;
                goto LABEL_62;
              }
              *v32 = *v38;
              *v38 = **(_QWORD **)(*a2 + 8 * v39);
              **(_QWORD **)(*a2 + 8 * v39) = v38;
              v38 = v32;
            }
            v39 = v33;
LABEL_62:
            v32 = v38;
            v38 = (_QWORD *)*v38;
            v33 = v39;
          }
          while (v38);
        }
      }
      v17 = (unint64_t)prime;
LABEL_66:
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v17 <= v16)
          v16 %= v17;
      }
      else
      {
        v16 = ((_DWORD)v17 - 1) & v16;
      }
LABEL_70:
      v40 = *a2;
      v41 = *(_QWORD **)(*a2 + 8 * v16);
      if (v41)
      {
        *v22 = *v41;
LABEL_78:
        *v41 = v22;
        goto LABEL_79;
      }
      *v22 = *v46;
      *v46 = v22;
      *(_QWORD *)(v40 + 8 * v16) = v46;
      if (*v22)
      {
        v42 = *(_QWORD *)(*v22 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v42 >= v17)
            v42 %= v17;
        }
        else
        {
          v42 &= v17 - 1;
        }
        v41 = (_QWORD *)(*a2 + 8 * v42);
        goto LABEL_78;
      }
LABEL_79:
      ++a2[3];
LABEL_80:
      objc_autoreleasePoolPop(v6);
      v4 = *a1;
      v43 = (*a1)->var24.var0 + 1;
      (*a1)->var24.var0 = v43;
    }
    while (var0[13] + var0[12] > v43);
  }
  v4->var24.var1 = 0;
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4->var1, "defaultCommandQueue", v46));
  objc_msgSend(v45, "finish");

  GRCInfo::ScopedReplayConfiguration::~ScopedReplayConfiguration((GRCInfo::ScopedReplayConfiguration *)v51);
}

void sub_1F5080(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  GRCInfo::ScopedReplayConfiguration::~ScopedReplayConfiguration((GRCInfo::ScopedReplayConfiguration *)va);
  _Unwind_Resume(a1);
}

void sub_1F5268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN7GRCInfo23ReplayForTimingCountersERNSt3__16vectorINS0_5tupleIJyyyEEENS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  void *v5;
  double v6;
  double v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  id v24;

  v24 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "label"));
  v4 = objc_msgSend(v3, "hasPrefix:", CFSTR("com.apple.gputools.replay"));

  v5 = v24;
  if ((v4 & 1) == 0)
  {
    objc_msgSend(v24, "GPUStartTime");
    v7 = v6;
    objc_msgSend(v24, "GPUEndTime");
    v8 = (unint64_t)(v7 * 1000000000.0);
    v10 = (unint64_t)(v9 * 1000000000.0);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(unint64_t **)(v11 + 8);
    v13 = *(_QWORD *)(v11 + 16);
    if ((unint64_t)v12 >= v13)
    {
      v15 = 0xAAAAAAAAAAAAAAALL;
      v16 = *(unint64_t **)v11;
      v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *(_QWORD *)v11) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v16) >> 3);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 < 0x555555555555555)
        v15 = v18;
      if (v15)
      {
        v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v15);
        v16 = *(unint64_t **)v11;
        v12 = *(unint64_t **)(v11 + 8);
      }
      else
      {
        v20 = 0;
      }
      v21 = (unint64_t *)(v15 + 24 * v17);
      v22 = v15 + 24 * v20;
      *v21 = v8;
      v21[1] = v10;
      v21[2] = (unint64_t)v24;
      v14 = v21 + 3;
      if (v12 != v16)
      {
        do
        {
          v23 = *(_OWORD *)(v12 - 3);
          *(v21 - 1) = *(v12 - 1);
          *(_OWORD *)(v21 - 3) = v23;
          v21 -= 3;
          v12 -= 3;
        }
        while (v12 != v16);
        v16 = *(unint64_t **)v11;
      }
      *(_QWORD *)v11 = v21;
      *(_QWORD *)(v11 + 8) = v14;
      *(_QWORD *)(v11 + 16) = v22;
      if (v16)
        operator delete(v16);
      v5 = v24;
    }
    else
    {
      *v12 = v8;
      v12[1] = v10;
      v14 = v12 + 3;
      v5 = v24;
      v12[2] = (unint64_t)v24;
    }
    *(_QWORD *)(v11 + 8) = v14;
  }

}

void sub_1F5448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *,false>(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *k;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *m;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *j;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  BOOL v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  int64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 3;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = *v8;
        v64 = *i;
        if (*v8 < *i || v64 >= v63 && ((v65 = *(a2 - 2), v66 = i[1], v65 < v66) || v66 >= v65 && *(a2 - 1) < i[2]))
        {
          *i = v63;
          *(a2 - 3) = v64;
          v67 = i[1];
          i[1] = *(a2 - 2);
          *(a2 - 2) = v67;
          v68 = i[2];
          i[2] = *(a2 - 1);
          *(a2 - 1) = v68;
        }
        return result;
      case 3:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(i, i + 3, a2 - 3);
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(i, i + 3, i + 6, a2 - 3);
      case 5:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(i, i + 3, i + 6, i + 9, a2 - 3);
      default:
        if (v10 > 575)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v85 = (unint64_t)(v11 - 2) >> 1;
            v86 = v85;
            while (1)
            {
              v87 = v86;
              if (v85 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = &i[3 * v88];
                if (2 * v87 + 2 < v11)
                {
                  v90 = v89[3];
                  if (*v89 < v90
                    || v90 >= *v89 && ((v103 = v89[1], v104 = v89[4], v103 < v104) || v104 >= v103 && v89[2] < v89[5]))
                  {
                    v89 += 3;
                    v88 = 2 * v87 + 2;
                  }
                }
                v91 = &i[3 * v87];
                v92 = *v89;
                v93 = *v91;
                if (*v89 >= *v91)
                {
                  if (v93 < v92)
                  {
                    v94 = v91[1];
LABEL_160:
                    v95 = v91[2];
                    while (1)
                    {
                      *v91 = v92;
                      v91[1] = v89[1];
                      v91[2] = v89[2];
                      if (v85 < v88)
                        goto LABEL_175;
                      v91 = v89;
                      v96 = 2 * v88;
                      v88 = (2 * v88) | 1;
                      v89 = &i[3 * v88];
                      v97 = v96 + 2;
                      if (v97 < v11)
                      {
                        v98 = v89[3];
                        if (*v89 < v98
                          || v98 >= *v89
                          && ((v99 = v89[1], v100 = v89[4], v99 < v100) || v100 >= v99 && v89[2] < v89[5]))
                        {
                          v89 += 3;
                          v88 = v97;
                        }
                      }
                      v92 = *v89;
                      if (*v89 < v93)
                        break;
                      if (v93 >= v92)
                      {
                        v101 = v89[1];
                        if (v101 < v94 || v94 >= v101 && v89[2] < v95)
                          break;
                      }
                    }
                    v89 = v91;
LABEL_175:
                    *v89 = v93;
                    v89[1] = v94;
                    v89[2] = v95;
                    goto LABEL_177;
                  }
                  v102 = v89[1];
                  v94 = v91[1];
                  if (v102 >= v94 && (v94 < v102 || v89[2] >= v91[2]))
                    goto LABEL_160;
                }
              }
LABEL_177:
              v86 = v87 - 1;
              if (!v87)
              {
                v117 = v10 / 0x18uLL;
                while (1)
                {
                  v118 = 0;
                  v119 = *i;
                  v120 = i[1];
                  v121 = i[2];
                  v122 = v117 - 2;
                  if (v117 < 2)
                    v122 = v117 - 1;
                  v123 = v122 >> 1;
                  v124 = i;
                  do
                  {
                    result = (unint64_t)v124;
                    v124 += 3 * v118 + 3;
                    v125 = 2 * v118;
                    v118 = (2 * v118) | 1;
                    v126 = v125 + 2;
                    if (v126 < v117)
                    {
                      v127 = v124[3];
                      if (*v124 < v127
                        || v127 >= *v124
                        && ((v128 = v124[1], v129 = v124[4], v128 < v129) || v129 >= v128 && v124[2] < v124[5]))
                      {
                        v124 += 3;
                        v118 = v126;
                      }
                    }
                    *(_QWORD *)result = *v124;
                    *(_QWORD *)(result + 8) = v124[1];
                    *(_QWORD *)(result + 16) = v124[2];
                  }
                  while (v118 <= v123);
                  if (v124 == a2 - 3)
                  {
                    *v124 = v119;
                    v124[1] = v120;
                    v124[2] = v121;
                    goto LABEL_233;
                  }
                  *v124 = *(a2 - 3);
                  v124[1] = *(a2 - 2);
                  v124[2] = *(a2 - 1);
                  *(a2 - 3) = v119;
                  *(a2 - 2) = v120;
                  *(a2 - 1) = v121;
                  v130 = (char *)v124 - (char *)i + 24;
                  if (v130 < 25)
                    goto LABEL_233;
                  v131 = 0xAAAAAAAAAAAAAAABLL * (v130 >> 3) - 2;
                  v132 = v131 >> 1;
                  v133 = &i[3 * (v131 >> 1)];
                  v134 = *v133;
                  v135 = *v124;
                  if (*v133 >= *v124)
                  {
                    if (v135 < v134)
                      goto LABEL_233;
                    result = v133[1];
                    v136 = v124[1];
                    if (result >= v136)
                    {
                      if (v136 < result)
                        goto LABEL_233;
                      result = v133[2];
                      if (result >= v124[2])
                        goto LABEL_233;
                    }
                  }
                  else
                  {
                    v136 = v124[1];
                  }
                  result = v124[2];
                  *v124 = v134;
                  v124[1] = v133[1];
                  v124[2] = v133[2];
                  if (v131 < 2)
                    goto LABEL_232;
                  while (1)
                  {
                    v137 = v133;
                    v138 = v132 - 1;
                    v132 = (v132 - 1) >> 1;
                    v133 = &i[3 * v132];
                    v139 = *v133;
                    if (*v133 >= v135)
                      break;
                    v140 = v133[1];
LABEL_229:
                    *v137 = v139;
                    v137[1] = v140;
                    v137[2] = v133[2];
                    if (v138 <= 1)
                      goto LABEL_232;
                  }
                  if (v135 >= v139)
                  {
                    v140 = v133[1];
                    if (v140 < v136 || v136 >= v140 && v133[2] < result)
                      goto LABEL_229;
                  }
                  v133 = v137;
LABEL_232:
                  *v133 = v135;
                  v133[1] = v136;
                  v133[2] = result;
LABEL_233:
                  a2 -= 3;
                  if (v117-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &i[3 * ((unint64_t)v11 >> 1)];
          if ((unint64_t)v10 < 0xC01)
          {
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(&v7[3 * v12], v7, a2 - 3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(v7, &v7[3 * v12], a2 - 3);
            v14 = 3 * v12;
            v15 = &v7[3 * v12 - 3];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(v7 + 3, v15, a2 - 6);
            v16 = &v7[v14 + 3];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(v7 + 6, v16, a2 - 9);
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(v15, v13, v16);
            v17 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v17;
            v18 = v7[2];
            v7[2] = v13[2];
            v13[2] = v18;
          }
          --a3;
          v19 = *v7;
          if ((a4 & 1) == 0)
          {
            v20 = *(v7 - 3);
            if (v20 >= v19)
            {
              if (v19 < v20)
              {
                v22 = v7[1];
              }
              else
              {
                v21 = *(v7 - 2);
                v22 = v7[1];
                if (v21 < v22 || v22 >= v21 && *(v7 - 1) < v7[2])
                  goto LABEL_15;
              }
              v45 = v7[2];
              v46 = *v8;
              if (v19 < *v8 || v46 >= v19 && ((v62 = *(a2 - 2), v22 < v62) || v62 >= v22 && v45 < *(a2 - 1)))
              {
                i = v7;
                while (1)
                {
                  v48 = i[3];
                  i += 3;
                  v47 = v48;
                  if (v19 < v48)
                    break;
                  if (v47 >= v19)
                  {
                    v49 = i[1];
                    if (v22 < v49 || v49 >= v22 && v45 < i[2])
                      break;
                  }
                }
              }
              else
              {
                for (i = v7 + 3; i < a2; i += 3)
                {
                  if (v19 < *i)
                    break;
                  if (*i >= v19)
                  {
                    v61 = i[1];
                    if (v22 < v61 || v61 >= v22 && v45 < i[2])
                      break;
                  }
                }
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 3; ; j -= 3)
                {
                  if (v19 >= v46)
                  {
                    if (v46 < v19)
                      break;
                    v51 = j[1];
                    if (v22 >= v51 && (v51 < v22 || v45 >= j[2]))
                      break;
                  }
                  v52 = *(j - 3);
                  v46 = v52;
                }
              }
              if (i < j)
              {
                v53 = *i;
                v54 = *j;
                do
                {
                  *i = v54;
                  *j = v53;
                  v55 = i[1];
                  i[1] = j[1];
                  j[1] = v55;
                  v56 = i[2];
                  i[2] = j[2];
                  j[2] = v56;
                  while (1)
                  {
                    v57 = i[3];
                    i += 3;
                    v53 = v57;
                    if (v19 < v57)
                      break;
                    if (v53 >= v19)
                    {
                      v58 = i[1];
                      if (v22 < v58 || v58 >= v22 && v45 < i[2])
                        break;
                    }
                  }
                  do
                  {
                    do
                    {
                      v59 = *(j - 3);
                      j -= 3;
                      v54 = v59;
                    }
                    while (v19 < v59);
                    if (v54 < v19)
                      break;
                    v60 = j[1];
                  }
                  while (v22 < v60 || v60 >= v22 && v45 < j[2]);
                }
                while (i < j);
              }
              if (i - 3 != v7)
              {
                *v7 = *(i - 3);
                v7[1] = *(i - 2);
                v7[2] = *(i - 1);
              }
              a4 = 0;
              *(i - 3) = v19;
              *(i - 2) = v22;
              *(i - 1) = v45;
              continue;
            }
          }
LABEL_15:
          v23 = v7[1];
          v24 = v7[2];
          for (k = v7 + 3; ; k += 3)
          {
            v26 = *k;
            if (*k >= v19)
            {
              if (v19 < v26)
                break;
              v27 = k[1];
              if (v27 >= v23 && (v23 < v27 || k[2] >= v24))
                break;
            }
          }
          if (k - 3 == v7)
          {
            m = a2;
            if (k < a2)
            {
              v32 = *v8;
              m = a2 - 3;
              if (*v8 >= v19)
              {
                m = a2 - 3;
                do
                {
                  if (v19 < v32)
                    goto LABEL_36;
                  v33 = m[1];
                  if (v33 < v23)
                    break;
                  if (v23 >= v33)
                  {
                    if (m[2] < v24 || k >= m)
                      break;
                  }
                  else
                  {
LABEL_36:
                    if (k >= m)
                      break;
                  }
                  v35 = *(m - 3);
                  m -= 3;
                  v32 = v35;
                }
                while (v35 >= v19);
              }
            }
          }
          else
          {
            v28 = *v8;
            for (m = a2 - 3; v28 >= v19; m -= 3)
            {
              if (v19 >= v28)
              {
                v30 = m[1];
                if (v30 < v23 || v23 >= v30 && m[2] < v24)
                  break;
              }
              v31 = *(m - 3);
              v28 = v31;
            }
          }
          i = k;
          if (k < m)
          {
            v36 = *m;
            i = k;
            v37 = m;
            do
            {
              *i = v36;
              *v37 = v26;
              v38 = i[1];
              i[1] = v37[1];
              v37[1] = v38;
              v39 = i[2];
              i[2] = v37[2];
              v37[2] = v39;
              do
              {
                do
                {
                  v40 = i[3];
                  i += 3;
                  v26 = v40;
                }
                while (v40 < v19);
                if (v19 < v26)
                  break;
                v41 = i[1];
              }
              while (v41 < v23 || v23 >= v41 && i[2] < v24);
              while (1)
              {
                v42 = *(v37 - 3);
                v37 -= 3;
                v36 = v42;
                if (v42 < v19)
                  break;
                if (v19 >= v36)
                {
                  v43 = v37[1];
                  if (v43 < v23 || v23 >= v43 && v37[2] < v24)
                    break;
                }
              }
            }
            while (i < v37);
          }
          if (i - 3 != v7)
          {
            *v7 = *(i - 3);
            v7[1] = *(i - 2);
            v7[2] = *(i - 1);
          }
          *(i - 3) = v19;
          *(i - 2) = v23;
          *(i - 1) = v24;
          if (k < m)
          {
LABEL_62:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *,false>(v7, i - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v44 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(v7, i - 3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v44)
              continue;
            goto LABEL_62;
          }
          a2 = i - 3;
          if (v44)
            return result;
          goto LABEL_2;
        }
        v69 = i + 3;
        v71 = i == a2 || v69 == a2;
        if ((a4 & 1) == 0)
        {
          if (v71)
            return result;
          while (1)
          {
            v105 = v7;
            v7 = v69;
            v106 = v105[3];
            v107 = *v105;
            if (v106 < *v105)
              break;
            if (v107 >= v106)
            {
              v108 = v105[4];
              v109 = v105[1];
              if (v108 < v109 || v109 >= v108 && v105[5] < v105[2])
                goto LABEL_193;
            }
LABEL_200:
            v69 = v7 + 3;
            if (v7 + 3 == a2)
              return result;
          }
          v108 = v105[4];
LABEL_193:
          v110 = v105[5];
          do
          {
            do
            {
              v111 = v105;
              v112 = v107;
              v113 = *(v105 - 3);
              v105 -= 3;
              v107 = v113;
              v114 = v105[4];
              v115 = v105[5];
              v105[6] = v112;
              v105[7] = v114;
              v105[8] = v115;
            }
            while (v106 < v113);
            if (v107 < v106)
              break;
            v116 = *(v111 - 2);
          }
          while (v108 < v116 || v116 >= v108 && v110 < *(v111 - 1));
          *v111 = v106;
          v111[1] = v108;
          v111[2] = v110;
          goto LABEL_200;
        }
        if (v71)
          return result;
        v72 = 0;
        v73 = i;
        do
        {
          v74 = v73;
          v73 = v69;
          v75 = v74[3];
          v76 = *v74;
          if (v75 >= *v74)
          {
            if (v76 < v75)
              goto LABEL_148;
            v77 = v74[4];
            v78 = v74[1];
            if (v77 >= v78 && (v78 < v77 || v74[5] >= v74[2]))
              goto LABEL_148;
          }
          else
          {
            v77 = v74[4];
          }
          v79 = v74[5];
          v74[3] = v76;
          v73[1] = v74[1];
          v73[2] = v74[2];
          v80 = i;
          if (v74 == i)
            goto LABEL_147;
          v81 = v72;
          while (1)
          {
            v82 = *(unint64_t *)((char *)i + v81 - 24);
            if (v75 < v82)
            {
              v83 = *(unint64_t *)((char *)i + v81 - 16);
              goto LABEL_144;
            }
            if (v82 < v75)
              goto LABEL_146;
            v83 = *(unint64_t *)((char *)i + v81 - 16);
            if (v77 >= v83)
              break;
LABEL_144:
            v74 -= 3;
            v84 = (unint64_t *)((char *)i + v81);
            *v84 = v82;
            v84[1] = v83;
            v84[2] = *(unint64_t *)((char *)i + v81 - 8);
            v81 -= 24;
            if (!v81)
            {
              v80 = i;
              goto LABEL_147;
            }
          }
          if (v83 >= v77)
          {
            v80 = (unint64_t *)((char *)i + v81);
            result = *(unint64_t *)((char *)i + v81 - 8);
            if (v79 >= result)
              goto LABEL_147;
            goto LABEL_144;
          }
LABEL_146:
          v80 = v74;
LABEL_147:
          *v80 = v75;
          v80[1] = v77;
          v80[2] = v79;
LABEL_148:
          v69 = v73 + 3;
          v72 += 24;
        }
        while (v73 + 3 != a2);
        return result;
    }
  }
}

unint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v3 = *a2;
  v4 = *result;
  if (*a2 < *result || v4 >= v3 && ((v29 = a2[1], v30 = result[1], v29 < v30) || v30 >= v29 && a2[2] < result[2]))
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && ((v19 = a3[1], v20 = a2[1], v19 < v20) || v20 >= v19 && a3[2] < a2[2]))
    {
      *result = v5;
      *a3 = v4;
      v6 = result[1];
      result[1] = a3[1];
      a3[1] = v6;
      v7 = (uint64_t *)(result + 2);
    }
    else
    {
      *result = v3;
      *a2 = v4;
      v21 = result[1];
      result[1] = a2[1];
      a2[1] = v21;
      v7 = (uint64_t *)(a2 + 2);
      v22 = result[2];
      result[2] = a2[2];
      a2[2] = v22;
      v23 = *a3;
      v24 = *a2;
      if (*a3 >= *a2)
      {
        if (v24 < v23)
          return result;
        v25 = a3[1];
        v26 = a2[1];
        if (v25 >= v26 && (v26 < v25 || a3[2] >= v22))
          return result;
      }
      *a2 = v23;
      *a3 = v24;
      v27 = a2[1];
      a2[1] = a3[1];
      a3[1] = v27;
    }
    v13 = (uint64_t *)(a3 + 2);
    goto LABEL_27;
  }
  v8 = *a3;
  if (*a3 < v3 || v3 >= v8 && ((v9 = a3[1], v10 = a2[1], v9 < v10) || v10 >= v9 && a3[2] < a2[2]))
  {
    *a2 = v8;
    *a3 = v3;
    v11 = a2[1];
    a2[1] = a3[1];
    a3[1] = v11;
    v13 = (uint64_t *)(a2 + 2);
    v12 = a2[2];
    a2[2] = a3[2];
    a3[2] = v12;
    v14 = *a2;
    v15 = *result;
    if (*a2 < *result || v15 >= v14 && ((v16 = a2[1], v17 = result[1], v16 < v17) || v17 >= v16 && *v13 < result[2]))
    {
      *result = v14;
      *a2 = v15;
      v18 = result[1];
      result[1] = a2[1];
      a2[1] = v18;
      v7 = (uint64_t *)(result + 2);
LABEL_27:
      v28 = *v7;
      *v7 = *v13;
      *v13 = v28;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && ((v11 = a4[1], v12 = a3[1], v11 < v12) || v12 >= v11 && a4[2] < a3[2]))
  {
    *a3 = v9;
    *a4 = v10;
    v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    v14 = a3[2];
    a3[2] = a4[2];
    a4[2] = v14;
    v15 = *a3;
    v16 = *a2;
    if (*a3 < *a2 || v16 >= v15 && ((v17 = a3[1], v18 = a2[1], v17 < v18) || v18 >= v17 && a3[2] < a2[2]))
    {
      *a2 = v15;
      *a3 = v16;
      v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      v20 = a2[2];
      a2[2] = a3[2];
      a3[2] = v20;
      v21 = *a2;
      v22 = *a1;
      if (*a2 < *a1 || v22 >= v21 && ((v23 = a2[1], v24 = a1[1], v23 < v24) || v24 >= v23 && a2[2] < a1[2]))
      {
        *a1 = v21;
        *a2 = v22;
        v25 = a1[1];
        a1[1] = a2[1];
        a2[1] = v25;
        v26 = a1[2];
        a1[2] = a2[2];
        a2[2] = v26;
      }
    }
  }
  return result;
}

unint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && ((v33 = a5[1], v34 = a4[1], v33 < v34) || v34 >= v33 && a5[2] < a4[2]))
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = a4[2];
    a4[2] = a5[2];
    a5[2] = v14;
    v15 = *a4;
    v16 = *a3;
    if (*a4 < *a3 || v16 >= v15 && ((v17 = a4[1], v18 = a3[1], v17 < v18) || v18 >= v17 && a4[2] < a3[2]))
    {
      *a3 = v15;
      *a4 = v16;
      v19 = a3[1];
      a3[1] = a4[1];
      a4[1] = v19;
      v20 = a3[2];
      a3[2] = a4[2];
      a4[2] = v20;
      v21 = *a3;
      v22 = *a2;
      if (*a3 < *a2 || v22 >= v21 && ((v23 = a3[1], v24 = a2[1], v23 < v24) || v24 >= v23 && a3[2] < a2[2]))
      {
        *a2 = v21;
        *a3 = v22;
        v25 = a2[1];
        a2[1] = a3[1];
        a3[1] = v25;
        v26 = a2[2];
        a2[2] = a3[2];
        a3[2] = v26;
        v27 = *a2;
        v28 = *a1;
        if (*a2 < *a1 || v28 >= v27 && ((v29 = a2[1], v30 = a1[1], v29 < v30) || v30 >= v29 && a2[2] < a1[2]))
        {
          *a1 = v27;
          *a2 = v28;
          v31 = a1[1];
          a1[1] = a2[1];
          a2[1] = v31;
          v32 = a1[2];
          a1[2] = a2[2];
          a2[2] = v32;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(a2 - 3);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && ((v26 = *(a2 - 2), v27 = a1[1], v26 < v27) || v27 >= v26 && *(a2 - 1) < a1[2]))
      {
        *a1 = v6;
        *(a2 - 3) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v10 = a1 + 6;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 3, a1 + 6);
      v11 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = *v11;
    v15 = *v10;
    if (*v11 >= *v10)
    {
      if (v15 < v14)
        goto LABEL_27;
      v16 = v11[1];
      v25 = v10[1];
      if (v16 >= v25 && (v25 < v16 || v11[2] >= v10[2]))
        goto LABEL_27;
    }
    else
    {
      v16 = v11[1];
    }
    v17 = v11[2];
    *v11 = v15;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v18 = a1;
    if (v10 == a1)
      goto LABEL_26;
    v19 = v12;
    while (1)
    {
      v20 = (char *)a1 + v19;
      v21 = *(unint64_t *)((char *)a1 + v19 + 24);
      if (v14 < v21)
      {
        v22 = *((_QWORD *)v20 + 4);
        goto LABEL_17;
      }
      if (v21 < v14)
        goto LABEL_24;
      v22 = *(unint64_t *)((char *)a1 + v19 + 32);
      if (v16 >= v22)
      {
        if (v22 < v16)
        {
LABEL_24:
          v18 = v10;
          goto LABEL_26;
        }
        if (v17 >= *(unint64_t *)((char *)a1 + v19 + 40))
          break;
      }
LABEL_17:
      v10 -= 3;
      *((_QWORD *)v20 + 6) = v21;
      v23 = (char *)a1 + v19;
      v24 = *(unint64_t *)((char *)a1 + v19 + 40);
      *((_QWORD *)v23 + 7) = v22;
      *((_QWORD *)v23 + 8) = v24;
      v19 -= 24;
      if (v19 == -48)
      {
        v18 = a1;
        goto LABEL_26;
      }
    }
    v18 = (unint64_t *)((char *)a1 + v19 + 48);
LABEL_26:
    *v18 = v14;
    v18[1] = v16;
    v18[2] = v17;
    if (++v13 == 8)
      return v11 + 3 == a2;
LABEL_27:
    v10 = v11;
    v12 += 24;
    v11 += 3;
  }
  while (v11 != a2);
  return 1;
}

void ___ZL25ProfilingTimingDataLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryP19NSMutableDictionaryS6_P14NSMutableArrayIP8NSNumberEjjjP21GTAGXPerfStateControl_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSArray *v3;
  const __CFString *v4;
  NSArray *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  NSArray *v15;
  NSArray *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int32x2_t v21;
  id v22;
  NSArray *v23;
  char *v24;
  char *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  char *v30;
  int32x2_t v31;
  uint64_t v32;
  id v33;
  NSArray *v34;
  void *v35;
  id v36;
  void *v37;
  GTAGXPerfStateControl *v38;
  NSArray *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  __int128 v48;
  void *v49;
  NSArray *v50;
  id v51;
  void **v52;
  uint64_t v53;
  void *v54;
  void *v55;
  NSArray *v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  int32x2_t v64;
  _QWORD v65[4];
  id v66;
  NSArray *v67;
  char *v68;
  _QWORD v69[4];
  id v70;
  id v71;
  id v72;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 8), "defaultCommandQueue"));
  objc_msgSend(v2, "setStatEnabled:", 1);
  v3 = (NSArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "availableCounters"));
  if ((IsCounterAvailable(v3, CFSTR("SW_PBUsed")) & 1) != 0)
  {
    v4 = CFSTR("SW_PBUsed");
  }
  else
  {
    if (!IsCounterAvailable(v3, CFSTR("_fedf2c59")))
      goto LABEL_6;
    v4 = CFSTR("_fedf2c59");
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40), "addObject:", v4);
LABEL_6:
  v5 = (NSArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subdivideCounterList:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40)));
  objc_msgSend(v2, "setStatEnabled:", 0);
  v6 = *(void **)(v1 + 32);
  v7 = CalculateFrameTimeLegacy(*(uint64_t **)(v1 + 72), *(id **)(v1 + 80), v5, *(_DWORD *)(v1 + 96), *(void **)(v1 + 40), 0, *(_DWORD *)(v1 + 100), *(_QWORD *)(v1 + 88));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "addDependency:", v8);

  v9 = *(void **)(v1 + 32);
  v10 = CalculateFrameTimeLegacy(*(uint64_t **)(v1 + 72), *(id **)(v1 + 80), v5, *(_DWORD *)(v1 + 104), *(void **)(v1 + 40), 1, *(_DWORD *)(v1 + 100), *(_QWORD *)(v1 + 88));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v9, "addDependency:", v11);

  v12 = CollectCounters(*(GTMTLReplayController **)(v1 + 72), *(GTMTLReplayOperationQueues **)(v1 + 80), *(NSArray **)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40), v5, *(void **)(v1 + 48), (NSMutableDictionary *)*(unsigned int *)(v1 + 104), *(_DWORD *)(v1 + 100), *(_QWORD *)(v1 + 88), v38);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = *(void **)(v1 + 48);
  v15 = (NSArray *)*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40);
  v52 = _NSConcreteStackBlock;
  v53 = 3221225472;
  v54 = ___ZL17TimeDataOperationP7NSArrayP19NSMutableDictionaryP26GTMTLReplayOperationQueues_block_invoke;
  v55 = &unk_725190;
  v56 = v15;
  v57 = v14;
  v16 = v15;
  v17 = v57;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", &v52));

  objc_msgSend(v18, "addDependency:", v13);
  objc_msgSend(*(id *)(*(_QWORD *)(v1 + 80) + 8), "addOperation:", v18);
  objc_msgSend(*(id *)(v1 + 32), "addDependency:", v18);
  v46 = v18;
  v19 = *(_QWORD *)(v1 + 72);
  v20 = *(void **)(v1 + 56);
  v21 = *(int32x2_t *)(v1 + 100);
  v48 = *(_OWORD *)(v1 + 80);
  v22 = *(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40);
  v23 = v5;
  v47 = v20;
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v19 + 8), "defaultCommandQueue"));
  v50 = v23;
  v24 = -[NSArray count](v23, "count");
  v45 = (void *)v13;
  v51 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v24);
  v40 = v22;
  if (v24)
  {
    v25 = v24;
    do
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 0x10000));
      objc_msgSend(v51, "addObject:", v26);

      --v25;
    }
    while (v25);
  }
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = ___ZL21CollectBlitSplitTimesP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke;
  v69[3] = &unk_726038;
  v27 = v22;
  v70 = v27;
  v28 = v51;
  v71 = v28;
  v44 = v47;
  v72 = v44;
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v69));
  v43 = v27;
  v39 = v5;
  if (v24)
  {
    v41 = v1;
    v42 = v2;
    v30 = 0;
    v31 = vrev64_s32(v21);
    v32 = v48;
    do
    {
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472;
      v65[2] = ___ZL21CollectBlitSplitTimesP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_2;
      v65[3] = &unk_725E60;
      v33 = v28;
      v66 = v33;
      v68 = v30;
      v34 = v50;
      v67 = v34;
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v65, v39, v40));
      objc_msgSend(v29, "addDependency:", v35);
      v52 = _NSConcreteStackBlock;
      v53 = 3221225472;
      v54 = ___ZL21CollectBlitSplitTimesP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_3;
      v55 = &unk_726868;
      v60 = v19;
      v56 = v34;
      v61 = v30;
      v62 = 12;
      v57 = v33;
      v36 = v35;
      v58 = v36;
      v64 = v31;
      v63 = v48;
      v59 = v49;
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", &v52));
      objc_msgSend(v37, "setQueuePriority:", -8);
      objc_msgSend(*(id *)v48, "addOperation:", v37);

      ++v30;
    }
    while (v24 != v30);
    v1 = v41;
    v2 = v42;
  }
  else
  {
    v32 = v48;
  }
  objc_msgSend(*(id *)(v32 + 8), "addOperation:", v29, v39);

  objc_msgSend(*(id *)(v1 + 32), "addDependency:", v29);
}

void sub_1F6DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id IsCounterAvailable(NSArray *a1, NSString *a2)
{
  NSArray *v3;
  NSString *v4;
  NSArray *v5;
  id v6;
  uint64_t v7;
  void *i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v3 = a1;
  v4 = a2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v3;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v5);
        if (-[NSString isEqualToString:](v4, "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i), (_QWORD)v10))
        {
          v6 = &dword_0 + 1;
          goto LABEL_11;
        }
      }
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

void sub_1F706C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CalculateFrameTimeLegacy(uint64_t *a1, id *a2, void *a3, int a4, void *a5, uint64_t a6, int a7, uint64_t a8)
{
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v24;
  void *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  int v37;
  int v38;
  _QWORD v39[4];
  id v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[6];
  void *v44;
  void *v45;
  uint64_t v46;

  v14 = a3;
  v24 = a5;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1[1], "defaultCommandQueue"));
  objc_msgSend(v14, "count");
  v43[0] = 0;
  v43[1] = v43;
  v43[2] = 0x4812000000;
  v43[3] = __Block_byref_object_copy__94;
  v43[4] = __Block_byref_object_dispose__95;
  v43[5] = &unk_4C2897;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long>>::reserve(&v44, 0x80uLL);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = ___ZL24CalculateFrameTimeLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yjP14NSMutableArrayIP8NSNumberEmjP21GTAGXPerfStateControl_block_invoke;
  v39[3] = &unk_726918;
  v41 = v43;
  v15 = v24;
  v40 = v15;
  v42 = a6;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v39));
  v17 = *a1;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = ___ZL24CalculateFrameTimeLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yjP14NSMutableArrayIP8NSNumberEmjP21GTAGXPerfStateControl_block_invoke_2;
  v27[3] = &unk_724E90;
  v32 = a1;
  v18 = v26;
  v28 = v18;
  v33 = a8;
  v34 = 0;
  v37 = a7;
  v38 = a4;
  v19 = v14;
  v29 = v19;
  v31 = v43;
  v35 = v17;
  v36 = a2;
  v20 = v16;
  v30 = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v27));
  objc_msgSend(v21, "setQueuePriority:", -8);
  objc_msgSend(*a2, "addOperation:", v21);
  v22 = v20;

  _Block_object_dispose(v43, 8);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }

  return v22;
}

void sub_1F72BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  uint64_t v33;
  void *v35;

  _Block_object_dispose((const void *)(v33 - 176), 8);
  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }

  _Unwind_Resume(a1);
}

id CollectCounters(GTMTLReplayController *a1, GTMTLReplayOperationQueues *a2, NSArray *a3, NSArray *a4, void *a5, NSMutableDictionary *a6, int a7, uint64_t a8, GTAGXPerfStateControl *a9)
{
  NSArray *v13;
  char *v14;
  uint64_t v15;
  id v16;
  char *v17;
  void *v18;
  id v19;
  uint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  char *i;
  id v25;
  NSArray *v26;
  void *v27;
  id v28;
  void *v29;
  id v31;
  id v32;
  NSArray *v33;
  id v34;
  NSArray *v35;
  GTMTLReplayController *v36;
  int v37;
  NSArray *v40;
  void *v41;
  _QWORD v42[4];
  NSArray *v43;
  id v44;
  id v45;
  id v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  GTMTLReplayController *v50;
  char *v51;
  uint64_t v52;
  GTMTLReplayOperationQueues *v53;
  uint64_t v54;
  int v55;
  int v56;
  _QWORD v57[4];
  id v58;
  NSArray *v59;
  char *v60;
  _QWORD v61[4];
  id v62;
  NSArray *v63;
  NSArray *v64;
  id v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  _QWORD v70[5];
  id v71;
  _QWORD v72[3];
  char v73;
  _QWORD v74[3];
  char v75;

  v37 = (int)a6;
  v35 = a3;
  v13 = a4;
  v34 = a5;
  v36 = a1;
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1->var1, "defaultCommandQueue"));
  v14 = -[NSArray count](v13, "count");
  v16 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v14);
  if (v14)
  {
    v17 = v14;
    do
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 0x10000));
      objc_msgSend(v16, "addObject:", v18);

      --v17;
    }
    while (v17);
  }
  v74[0] = 0;
  v74[1] = v74;
  v74[2] = 0x2020000000;
  v75 = 0;
  v72[0] = 0;
  v72[1] = v72;
  v72[2] = 0x2020000000;
  v73 = 0;
  v70[0] = 0;
  v70[1] = v70;
  v70[2] = 0x3032000000;
  v70[3] = __Block_byref_object_copy__53;
  v70[4] = __Block_byref_object_dispose__54;
  v71 = (id)objc_opt_new(NSMutableString, v15);
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = ___ZL15CollectCountersP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke;
  v61[3] = &unk_724EB8;
  v31 = v34;
  v62 = v31;
  v33 = v35;
  v63 = v33;
  v40 = v13;
  v64 = v40;
  v19 = v16;
  v68 = v70;
  v69 = v14;
  v65 = v19;
  v66 = v74;
  v67 = v72;
  v20 = objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v61));
  v21 = v14;
  v22 = (void *)v20;
  if (v21)
  {
    v23 = v21;
    for (i = 0; i != v23; ++i)
    {
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = ___ZL15CollectCountersP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_2;
      v57[3] = &unk_725E60;
      v25 = v19;
      v58 = v25;
      v60 = i;
      v26 = v40;
      v59 = v26;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v57, v31, v33));
      objc_msgSend(v22, "addDependency:", v27);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = ___ZL15CollectCountersP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_3;
      v42[3] = &unk_724EE0;
      v50 = v36;
      v43 = v26;
      v51 = i;
      v52 = 63;
      v44 = v25;
      v53 = a2;
      v28 = v27;
      v55 = v37;
      v56 = a7;
      v45 = v28;
      v54 = a8;
      v46 = v41;
      v47 = v70;
      v48 = v74;
      v49 = v72;
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v42));
      objc_msgSend(v29, "setQueuePriority:", -8);
      objc_msgSend(a2->var0, "addOperation:", v29);

    }
  }
  objc_msgSend(a2->var1, "addOperation:", v22, v31);

  _Block_object_dispose(v70, 8);
  _Block_object_dispose(v72, 8);
  _Block_object_dispose(v74, 8);

  return v22;
}

void sub_1F771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,void *a49,void *a50,void *a51)
{
  void *v51;
  uint64_t v52;

  _Block_object_dispose((const void *)(v52 - 216), 8);
  _Block_object_dispose((const void *)(v52 - 168), 8);
  _Block_object_dispose((const void *)(v52 - 136), 8);

  _Unwind_Resume(a1);
}

void ___ZL17TimeDataOperationP7NSArrayP19NSMutableDictionaryP26GTMTLReplayOperationQueues_block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _UNKNOWN **v15;
  _UNKNOWN **v16;
  void *k;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  id obj;
  void *i;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *j;
  id v43;
  unsigned int v44;
  void *v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];
  _BYTE v61[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastObject"));
  if (objc_msgSend(CFSTR("SW_PBUsed"), "isEqualToString:", v1))
  {

LABEL_4:
    v4 = a1;
    v44 = objc_msgSend(*(id *)(a1 + 32), "count") - 1;
    goto LABEL_6;
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastObject"));
  v3 = objc_msgSend(CFSTR("_fedf2c59"), "isEqualToString:", v2);

  if (v3)
    goto LABEL_4;
  v44 = -1;
  v4 = a1;
LABEL_6:
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 40), "objectForKeyedSubscript:", CFSTR("AverageSamples")));
  v38 = (void *)objc_opt_new(NSMutableArray, v5);
  v39 = (void *)objc_opt_new(NSMutableArray, v6);
  v40 = (void *)objc_opt_new(NSMutableArray, v7);
  v36 = (void *)objc_opt_new(NSMutableArray, v8);
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  obj = v31;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
  if (v29)
  {
    v30 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v29; i = (char *)i + 1)
      {
        if (*(_QWORD *)v56 != v30)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)i);
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v35 = v9;
        v41 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
        if (v41)
        {
          v37 = *(_QWORD *)v52;
          do
          {
            for (j = 0; j != v41; j = (char *)j + 1)
            {
              if (*(_QWORD *)v52 != v37)
                objc_enumerationMutation(v35);
              v11 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)j);
              v46 = (void *)objc_opt_new(NSMutableArray, v10);
              v45 = (void *)objc_opt_new(NSMutableArray, v12);
              v49 = 0u;
              v50 = 0u;
              v47 = 0u;
              v48 = 0u;
              v43 = v11;
              v13 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
              if (v13)
              {
                v14 = *(_QWORD *)v48;
                v15 = &off_7398F8;
                v16 = &off_7398F8;
                do
                {
                  for (k = 0; k != v13; k = (char *)k + 1)
                  {
                    if (*(_QWORD *)v48 != v14)
                      objc_enumerationMutation(v43);
                    v18 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)k);
                    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 3));
                    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", 0));
                    v21 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)objc_msgSend(v20, "unsignedLongLongValue")+ (_QWORD)objc_msgSend(v16, "unsignedLongLongValue")));

                    v16 = (_UNKNOWN **)v21;
                    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 3));
                    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndexedSubscript:", 0));
                    objc_msgSend(v46, "addObject:", v23);

                    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 6));
                    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", 0));
                    objc_msgSend(v45, "addObject:", v25);

                    if (v44 != -1)
                    {
                      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", v44));
                      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectAtIndexedSubscript:", 0));
                      v28 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (char *)objc_msgSend(v27, "unsignedLongLongValue")+ (_QWORD)objc_msgSend(v15, "unsignedLongLongValue")));

                      v15 = (_UNKNOWN **)v28;
                    }
                  }
                  v13 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
                }
                while (v13);
              }
              else
              {
                v15 = &off_7398F8;
                v16 = &off_7398F8;
              }

              objc_msgSend(v38, "addObject:", v16);
              objc_msgSend(v39, "addObject:", v46);
              objc_msgSend(v40, "addObject:", v45);
              if (v44 != -1)
                objc_msgSend(v36, "addObject:", v15);

            }
            v41 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
          }
          while (v41);
        }

      }
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
    }
    while (v29);
  }

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v38, CFSTR("encoder time data"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v39, CFSTR("kick time data"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v40, CFSTR("kick cycle data"));
  if (v44 != -1)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v36, CFSTR("tilerParamBufBytesUsedArray"));

}

void sub_1F7D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21)
{

  _Unwind_Resume(a1);
}

void ___ZL21CollectBlitSplitTimesP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  unint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;

  v1 = a1;
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", 0));
  v4 = v2;
  v36 = v3;
  v5 = (unint64_t)objc_msgSend(v36, "length");
  v6 = objc_msgSend(v4, "count");
  v7 = objc_msgSend(v4, "count");
  v8 = objc_retainAutorelease(v36);
  v9 = (uint64_t *)objc_msgSend(v8, "bytes");
  v10 = 8 * (_QWORD)v6;
  if (8 * (uint64_t)v6 <= v5)
  {
    v14 = v9;
    v33 = v8;
    v34 = v1;
    v35 = v4;
    v11 = 0;
    v12 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v5 / v10;
    if (v17 <= 1)
      v18 = 1;
    else
      v18 = v17;
    v19 = -1;
    v20 = -1;
    v37 = v7;
    do
    {
      v21 = v20;
      v20 = *v14;
      if (*v14 == v21)
        v22 = v19;
      else
        v22 = -1;
      v19 = v14[1];
      if (v19 == v22)
      {
        v19 = v22;
      }
      else if ((unint64_t)v12 >= v15)
      {
        v23 = (v12 - v11) >> 3;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          abort();
        if ((uint64_t)(v15 - (_QWORD)v11) >> 2 > v24)
          v24 = (uint64_t)(v15 - (_QWORD)v11) >> 2;
        if (v15 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v25);
        else
          v26 = 0;
        v27 = (char *)(v25 + 8 * v23);
        *(_QWORD *)v27 = 0;
        v28 = v27 + 8;
        while (v12 != v11)
        {
          v29 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v27 - 1) = v29;
          v27 -= 8;
        }
        v15 = v25 + 8 * v26;
        if (v11)
          operator delete(v11);
        v11 = v27;
        v12 = v28;
        v7 = v37;
      }
      else
      {
        *(_QWORD *)v12 = 0;
        v12 += 8;
      }
      *((_QWORD *)v12 - 1) += v14[3];
      v14 += (uint64_t)v7;
      ++v16;
    }
    while (v16 != v18);
    v13 = v11;
    v1 = v34;
    v4 = v35;
    v8 = v33;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  v38 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (v12 - v13) >> 3));
  if (v11 != v12)
  {
    v30 = v11;
    do
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)v30));
      objc_msgSend(v38, "addObject:", v31);

      v30 += 8;
    }
    while (v30 != v12);
  }
  if (v11)
    operator delete(v11);

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v38, CFSTR("PerDrawNsecTimes")));
  objc_msgSend(*(id *)(v1 + 48), "setObject:forKeyedSubscript:", v32, CFSTR("SplitEncoderData"));

}

void sub_1F8194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void ___ZL21CollectBlitSplitTimesP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_2(uint64_t a1)
{
  void *v2;
  NSMutableData *v3;

  v3 = (NSMutableData *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));
  SortCounterData(v3, (uint64_t)objc_msgSend(v2, "count"));

}

void sub_1F8284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id ___ZL21CollectBlitSplitTimesP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_3(uint64_t a1)
{
  GTMTLReplayController *v2;
  NSArray *v3;

  v2 = *(GTMTLReplayController **)(a1 + 64);
  v3 = (NSArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 72)));
  CollectCounterData(v2, v3, *(_QWORD *)(a1 + 80), *(NSArray **)(a1 + 40), *(_QWORD *)(a1 + 72), *(GTMTLReplayOperationQueues **)(a1 + 88), *(NSOperation **)(a1 + 48), *(unsigned int *)(a1 + 104), 1, *(_DWORD *)(a1 + 108), *(GTAGXPerfStateControl **)(a1 + 96));

  objc_msgSend(*(id *)(a1 + 56), "finish");
  objc_msgSend(*(id *)(a1 + 56), "setStatEnabled:", 0);
  objc_msgSend(*(id *)(a1 + 56), "setGPUPriority:", 1);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 88) + 8), "addOperation:", *(_QWORD *)(a1 + 48));
}

void sub_1F8340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CollectCounterData(GTMTLReplayController *a1, NSArray *a2, uint64_t a3, NSArray *a4, uint64_t a5, GTMTLReplayOperationQueues *a6, NSOperation *a7, uint64_t a8, BOOL a9, unsigned int a10, GTAGXPerfStateControl *a11)
{
  NSArray *v17;
  uint64_t v18;
  NSUInteger v19;
  void *v20;
  void *v21;
  NSArray *v22;
  id v23;
  int v24;
  uint64_t v25;
  void *i;
  void *v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t *var0;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  _QWORD *InclusiveRange;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v53;
  $85CD2974BE96D4886BB301820D1C36C2 *v54;
  unint64_t j;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int FuncEnumConstructorType;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  NSOperation *v69;
  id v70;
  void *v71;
  NSOperation *v72;
  uint64_t v73;
  NSArray *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  void *v80;
  GTMTLReplayOperationQueues *v81;
  void *v82;
  NSUInteger v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  $85CD2974BE96D4886BB301820D1C36C2 *p_var24;
  void *v90;
  GTMTLReplayController *v91;
  _QWORD v92[4];
  id v93;
  NSOperation *v94;
  uint64_t v95;
  NSUInteger v96;
  void *__p[4];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  void *v102[3];
  unsigned __int8 v103;
  _BYTE v104[128];

  v17 = a2;
  v74 = a4;
  v72 = a7;
  if (a9)
    v18 = 0;
  else
    v18 = 4;
  v19 = -[NSArray count](v17, "count");
  v91 = a1;
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1->var1, "defaultCommandQueue"));
  v75 = v20;
  objc_msgSend(v20, "setStatEnabled:", 1);
  objc_msgSend(v20, "setGPUPriority:", 0);
  if (*((_QWORD *)a11 + 2) || *((_DWORD *)a11 + 1) == 1)
  {
    if (!GTAGXPerfStateControl::IsGPUPerformanceStateInduced(a11))
      GTAGXPerfStateControl::EnableConsistentGPUPerfState((uint64_t)a11, a10);
    goto LABEL_8;
  }
  if (!(_DWORD)a8)
  {
LABEL_8:
    objc_msgSend(v20, "setStatOptions:", 0x10000000);
    goto LABEL_9;
  }
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91->var1, "defaultDevice"));
  if ((objc_opt_respondsToSelector(v68, "setConsistentGPUPerfStateTo:") & 1) != 0)
    objc_msgSend(v68, "setConsistentGPUPerfStateTo:", a8);
  objc_msgSend(v20, "setStatOptions:", 2415919104);

LABEL_9:
  objc_msgSend(v20, "setStatLocations:", a3);
  objc_msgSend(v20, "requestCounters:withIndex:", v17, a5);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "counterInfo"));
  v83 = v19;
  v86 = v18;
  v88 = a5;
  v81 = a6;
  v103 = 0;
  std::vector<BOOL>::vector(v102, -[NSArray count](v17, "count"), &v103);
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v22 = v17;
  v23 = -[NSArray countByEnumeratingWithState:objects:count:](v22, "countByEnumeratingWithState:objects:count:", &v98, v104, 16);
  if (v23)
  {
    v24 = 0;
    v25 = *(_QWORD *)v99;
    do
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v99 != v25)
          objc_enumerationMutation(v22);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)i)));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("type")));

        v29 = objc_msgSend(v28, "characterAtIndex:", 0);
        v30 = (v24 + (_DWORD)i) >> 6;
        v31 = 1 << (v24 + i);
        if (v29 == 68)
          v32 = *((_QWORD *)v102[0] + v30) | v31;
        else
          v32 = *((_QWORD *)v102[0] + v30) & ~v31;
        *((_QWORD *)v102[0] + v30) = v32;

      }
      v23 = -[NSArray countByEnumeratingWithState:objects:count:](v22, "countByEnumeratingWithState:objects:count:", &v98, v104, 16);
      v24 += (int)i;
    }
    while (v23);
  }

  v71 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](v74, "objectAtIndexedSubscript:", v88));
  v92[0] = _NSConcreteStackBlock;
  v92[1] = 3321888768;
  v92[2] = ___ZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS2_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControl_block_invoke;
  v92[3] = &unk_724F40;
  v95 = v86;
  v96 = v83;
  std::vector<BOOL>::vector(__p, (uint64_t)v102);
  v70 = v71;
  v93 = v70;
  v69 = v72;
  v94 = v69;
  __p[3] = v81;
  objc_msgSend(v75, "addPerfSampleHandler:", v92);
  v33 = v91->var1;
  var0 = (uint64_t *)v91->var0;
  v82 = v33;
  if (a9)
  {
    v76 = var0[14];
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "defaultCommandQueue"));
    p_var24 = &v91->var24;
    if (var0[13] + var0[12] > (unint64_t)v91->var24.var0)
    {
      v84 = 0;
      v35 = 0;
      v79 = 0;
      v77 = 0;
      v73 = var0[15];
      do
      {
        v36 = objc_autoreleasePoolPush();
        v37 = *(_QWORD *)(var0[15] + 24);
        v38 = p_var24->var0;
        v39 = v37 + (v38 << 6);
        v41 = (int *)(v39 + 8);
        v40 = *(_DWORD *)(v39 + 8);
        if (GetFuncEnumConstructorType(v40) == 25)
        {
          objc_msgSend(v87, "setStatLocations:", 0);
          GTMTLReplayController_restoreCommandBuffer((uint64_t)v91, v37 + (v38 << 6));
          objc_msgSend(v87, "setStatLocations:", a3);
          v77 = *((unsigned int *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v37 + (v38 << 6)), *(unsigned __int8 *)(v37 + (v38 << 6) + 13), var0[2])+ 2);
          v40 = *v41;
        }
        if (GetFuncEnumConstructorType(v40) == 21)
        {
          v79 = *((unsigned int *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v37 + (v38 << 6)), *(unsigned __int8 *)(v37 + (v38 << 6) + 13), var0[2])+ 2);
          InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v76 + 12), *(_QWORD **)(v76 + 24), p_var24->var0);
          v43 = InclusiveRange[1];
          v44 = v43 - *InclusiveRange;
          if (v43 > *InclusiveRange)
          {
            v45 = (int *)(*(_QWORD *)(v73 + 24) + (*InclusiveRange << 6) + 8);
            do
            {
              v47 = *v45;
              v45 += 16;
              v46 = v47;
              if (IsFuncEnumSampledBlitCall(v47) || IsFuncEnumSampledBlitCallAGX(v46))
                ++v35;
              --v44;
            }
            while (v44);
          }
          v48 = v35;
        }
        else
        {
          v48 = v84;
        }
        GTMTLReplayController_updateCommandEncoder((uint64_t)v91, v39);
        v49 = *v41;
        if (IsFuncEnumSampledBlitCall(*v41) || IsFuncEnumSampledBlitCallAGX(v49))
        {
          v84 = v48 - 1;
          if (v48 && v35 != v48)
          {
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "blitCommandEncoderForKey:", v79));
            objc_msgSend(v50, "endEncoding");
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "commandBufferForKey:", v77));
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "blitCommandEncoder"));
            objc_msgSend(v82, "setBlitCommandEncoder:forKey:", v52, v79);

          }
        }
        else
        {
          v84 = v48;
        }
        GTMTLReplayController_defaultDispatchFunction((uint64_t)v91, v39);
        objc_autoreleasePoolPop(v36);
        v53 = p_var24->var0 + 1;
        p_var24->var0 = v53;
      }
      while (var0[13] + var0[12] > v53);
    }
  }
  else
  {
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "defaultCommandQueue"));
    v103 = 0;
    v54 = &v91->var24;
    for (j = v91->var24.var0; var0[13] + var0[12] > j; v54->var0 = j)
    {
      v56 = objc_autoreleasePoolPush();
      v57 = *(_QWORD *)(var0[15] + 24);
      v58 = v54->var0;
      FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v57 + (v58 << 6) + 8));
      if (FuncEnumConstructorType == 25)
      {
        objc_msgSend(v87, "setStatLocations:", 0);
        GTMTLReplayController_restoreCommandBuffer((uint64_t)v91, v57 + (v58 << 6));
        objc_msgSend(v87, "setStatLocations:", a3);
      }
      GTMTLReplayController_updateCommandEncoder((uint64_t)v91, v57 + (v58 << 6));
      DispatchFunction((id *)&v91->var0, v57 + (v58 << 6), &v103);
      if (FuncEnumConstructorType == 25)
      {
        v60 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)(v57 + (v58 << 6)), *(unsigned __int8 *)(v57 + (v58 << 6) + 13), var0[2])+ 1);
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91->var1, "defaultCommandQueue"));
        if ((objc_msgSend(v61, "isStatEnabled") & 1) != 0)
        {
          v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91->var1, "defaultDevice"));
          v80 = (void *)objc_claimAutoreleasedReturnValue(+[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 70, 16, 16, 0));
          objc_msgSend(v80, "setUsage:", 4);
          v85 = objc_msgSend(v90, "newTextureWithDescriptor:", v80);
          v62 = (void *)objc_claimAutoreleasedReturnValue(+[MTLRenderPassDescriptor renderPassDescriptor](MTLRenderPassDescriptor, "renderPassDescriptor"));
          v64 = (void *)objc_opt_new(MTLRenderPassColorAttachmentDescriptor, v63);
          objc_msgSend(v64, "setTexture:", v85);
          objc_msgSend(v64, "setLoadAction:", 2);
          objc_msgSend(v64, "setStoreAction:", 1);
          objc_msgSend(v64, "setClearColor:", 0.0, 0.0, 0.0, 1.0);
          v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "colorAttachments"));
          objc_msgSend(v65, "setObject:atIndexedSubscript:", v64, 0);

          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91->var1, "commandBufferForKey:", v60));
          v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "renderCommandEncoderWithDescriptor:", v62));
          objc_msgSend(v67, "setLabel:", CFSTR("GPUToolsCounterProfilingEmptyRender"));
          objc_msgSend(v67, "endEncoding");

        }
      }
      objc_autoreleasePoolPop(v56);
      j = v54->var0 + 1;
    }
  }

  if (__p[0])
    operator delete(__p[0]);

  if (v102[0])
    operator delete(v102[0]);

}

void sub_1F8B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void ___ZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS2_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControl_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  __int128 v20;
  void *__p;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (v8 && a4)
  {
    v10 = objc_msgSend(v8, "copy");
    v13 = _NSConcreteStackBlock;
    v14 = 3321888768;
    v15 = ___ZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS2_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControl_block_invoke_2;
    v16 = &unk_724F08;
    v19 = a4;
    v20 = *(_OWORD *)(a1 + 48);
    v11 = v10;
    v17 = v11;
    std::vector<BOOL>::vector(&__p, a1 + 64);
    v18 = *(id *)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", &v13));
    objc_msgSend(*(id *)(a1 + 40), "addDependency:", v12, v13, v14, v15, v16);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 88) + 8), "addOperation:", v12);

    if (__p)
      operator delete(__p);

  }
}

void sub_1F8F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  void *v18;
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return a1;
  std::vector<BOOL>::__vallocate[abi:nn180100](a1, v4);
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v9 = v8 - 1;
  }
  v10 = v9 >> 6;
  if (v8 >= 0x41)
    v11 = v10;
  else
    v11 = 0;
  *(_QWORD *)(*a1 + 8 * v11) = 0;
LABEL_10:
  v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = &v5[v6 >> 6];
    v16 = v7 & 0x3F;
    v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      v18 = 1 << v16;
      if (((*v5 >> v14) & 1) != 0)
        v19 = *v17 | v18;
      else
        v19 = *v17 & ~v18;
      *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63)
        v14 = 0;
      v17 += v16 == 63;
      if (v16 == 63)
        v16 = 0;
      else
        ++v16;
      v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *__copy_helper_block_ea8_64c39_ZTSNSt3__16vectorIbNS_9allocatorIbEEEE(uint64_t a1, uint64_t a2)
{
  return std::vector<BOOL>::vector((_QWORD *)(a1 + 64), a2 + 64);
}

void __destroy_helper_block_ea8_64c39_ZTSNSt3__16vectorIbNS_9allocatorIbEEEE(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 64);
  if (v1)
    operator delete(v1);
}

void ___ZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS2_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControl_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char **v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  void *__p;
  void *__dst;
  uint64_t v49;
  char **v50;
  uint64_t *v51;
  char **v52;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    if (v4 >> 61)
      abort();
    v5 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(*(_QWORD *)(a1 + 64));
    bzero(v5, 8 * v4);
    v6 = &v5[8 * v4];
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 0;
  v8 = v2 - v3;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if ((unint64_t)(v2 - v3) >= 2)
  {
    if (v8 >= 0x1555555555555556)
      abort();
    v9 = v8 >> 1;
    v10 = (char **)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v8 >> 1);
    v11 = 3 * v9;
    v50 = v10;
    v52 = &v10[3 * v12];
    v7 = (uint64_t *)&v10[3 * v9];
    v13 = 8 * v11;
    do
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      if (v6 != v5)
      {
        std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](v10, (v6 - v5) >> 3);
        v14 = v10[1];
        memmove(v14, v5, v6 - v5);
        v10[1] = &v14[8 * ((v6 - v5) >> 3)];
      }
      v10 += 3;
      v13 -= 24;
    }
    while (v13);
    v51 = v7;
  }
  if (v5)
    operator delete(v5);
  v15 = (uint64_t *)v50;
  if (v50 != (char **)v7)
  {
    v16 = *(_QWORD *)(a1 + 56);
    if (v16 < *(_QWORD *)(a1 + 48))
    {
      v17 = 0;
      v18 = 0;
      v19 = 8 * v16;
      do
      {
        v20 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes");
        v21 = *(_QWORD *)(a1 + 64);
        v22 = &v20[8 * v21 * v16];
        if (*(_QWORD *)v22 != -1)
        {
          if (*((_QWORD *)v22 + 5) == 1)
          {
            v17 = &v20[8 * v21 * v16];
          }
          else
          {
            if (v21)
            {
              v23 = 0;
              v24 = *(_QWORD *)(a1 + 72);
              v25 = v50[3 * v18];
              do
              {
                v26 = *(_QWORD *)&v20[8 * v23 + v21 * v19];
                if (((*(_QWORD *)(v24 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
                  v26 -= *(_QWORD *)&v17[8 * v23];
                *(_QWORD *)&v25[8 * v23++] = v26;
              }
              while (v21 != v23);
            }
            ++v18;
          }
        }
        ++v16;
        v19 += 8;
      }
      while (v16 < *(_QWORD *)(a1 + 48));
      v15 = (uint64_t *)v50;
      v7 = v51;
    }
    v27 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v7 - v15));
    if (v7 == v15)
      v28 = 0;
    else
      v28 = v27;
    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEELb0EEEvT1_SJ_T0_NS_15iterator_traitsISJ_E15difference_typeEb(v15, v7, v28, 1);
    __p = 0;
    __dst = 0;
    v49 = 0;
    std::vector<unsigned long long>::reserve(&__p, ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 56)) >> 1) * *(_QWORD *)(a1 + 64));
    std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>(&__p, (char *)__dst, *v50, v50[1], (v50[1] - *v50) >> 3);
    v30 = v50;
    v29 = v51;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v50) >> 3) >= 2)
    {
      v31 = 1;
      do
      {
        v32 = 0;
        v33 = (char *)__p;
        v34 = ((_BYTE *)__dst - (_BYTE *)__p) >> 3;
        v35 = *(_QWORD *)(a1 + 64);
        v36 = v34 - v35;
        v37 = v30[3 * v31];
        do
        {
          v38 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v32];
          v39 = *((_QWORD *)__p + v36 + v38);
          v40 = *(_QWORD *)&v37[8 * v38];
        }
        while (v39 == v40 && v32++ != 3);
        if (v39 == v40)
        {
          *((_QWORD *)__p + v36 + 3) += *((_QWORD *)v37 + 3);
          if (v35 >= 7)
          {
            v42 = 6 - v35;
            v43 = &v33[8 * v34];
            v44 = (uint64_t *)(v37 + 48);
            do
            {
              v45 = *v44++;
              *(_QWORD *)&v43[8 * v42] += v45;
            }
            while (!__CFADD__(v42++, 1));
          }
        }
        else
        {
          std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>(&__p, (char *)__dst, v37, v30[3 * v31 + 1], (v30[3 * v31 + 1] - v37) >> 3);
          v30 = v50;
          v29 = v51;
        }
        ++v31;
      }
      while (v31 < 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3));
    }
    objc_msgSend(*(id *)(a1 + 40), "appendBytes:length:", __p, (_BYTE *)__dst - (_BYTE *)__p);
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
  }
  __p = &v50;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
}

void sub_1F9488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_72c39_ZTSNSt3__16vectorIbNS_9allocatorIbEEEE(uint64_t a1, uint64_t a2)
{
  return std::vector<BOOL>::vector((_QWORD *)(a1 + 72), a2 + 72);
}

void __destroy_helper_block_ea8_72c39_ZTSNSt3__16vectorIbNS_9allocatorIbEEEE(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 72);
  if (v1)
    operator delete(v1);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEELb0EEEvT1_SJ_T0_NS_15iterator_traitsISJ_E15difference_typeEb(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  BOOL v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  __int128 v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  void *v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  __int128 v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  __int128 v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t *v196;
  __int128 v197;

LABEL_1:
  v196 = a2 - 3;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v99 = 0;
        v100 = *v196;
        v101 = *v8;
        while (1)
        {
          v102 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v99];
          v103 = *(_QWORD *)(v100 + 8 * v102);
          v104 = *(_QWORD *)(v101 + 8 * v102);
          if (v103 != v104)
            break;
          if (++v99 == 4)
            return;
        }
        if (v103 < v104)
        {
          *v8 = v100;
          *(a2 - 3) = v101;
          v175 = v8[1];
          v8[1] = *(a2 - 2);
          *(a2 - 2) = v175;
          v176 = v8[2];
          v8[2] = *(a2 - 1);
          *(a2 - 1) = v176;
        }
        return;
      case 3:
        _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(v8, v8 + 3, v196);
        return;
      case 4:
        _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEvT1_SJ_SJ_SJ_T0_(v8, v8 + 3, v8 + 6, v196);
        return;
      case 5:
        _ZNSt3__124__sort5_maybe_branchlessB8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEELi0EEEvT1_SJ_SJ_SJ_SJ_T0_(v8, v8 + 3, v8 + 6, v8 + 9, v196);
        return;
      default:
        if (v9 <= 575)
        {
          v105 = v8 + 3;
          v107 = v8 == a2 || v105 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v107)
            {
              v108 = v8;
              do
              {
                v109 = 0;
                v110 = v108;
                v108 = v105;
                v111 = v110[3];
                while (1)
                {
                  v112 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v109];
                  v113 = *(_QWORD *)(v111 + 8 * v112);
                  v114 = *(_QWORD *)(*v110 + 8 * v112);
                  if (v113 != v114)
                    break;
                  if (++v109 == 4)
                    goto LABEL_153;
                }
                if (v113 < v114)
                {
                  v115 = *((_OWORD *)v110 + 2);
                  *v105 = 0;
                  v105[1] = 0;
                  v116 = v105;
                  v105[2] = 0;
                  while (1)
                  {
                    v117 = v116;
                    v116 = v110;
                    *(_OWORD *)v117 = *(_OWORD *)v110;
                    v117[2] = v110[2];
                    *v110 = 0;
                    v110[1] = 0;
                    v110[2] = 0;
                    if (v110 == v8)
                      break;
                    v118 = 0;
                    v110 -= 3;
                    while (1)
                    {
                      v119 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v118];
                      v120 = *(_QWORD *)(v111 + 8 * v119);
                      v121 = *(_QWORD *)(*(v116 - 3) + 8 * v119);
                      if (v120 != v121)
                        break;
                      if (++v118 == 4)
                        goto LABEL_150;
                    }
                    if (v120 >= v121)
                      goto LABEL_150;
                  }
                  v116 = v8;
LABEL_150:
                  v122 = (void *)*v116;
                  if (*v116)
                  {
                    v116[1] = (uint64_t)v122;
                    v197 = v115;
                    operator delete(v122);
                    v115 = v197;
                  }
                  *v116 = v111;
                  *(_OWORD *)(v116 + 1) = v115;
                }
LABEL_153:
                v105 = v108 + 3;
              }
              while (v108 + 3 != a2);
            }
          }
          else if (!v107)
          {
            do
            {
              v177 = 0;
              v178 = a1;
              a1 = v105;
              v179 = v178[3];
              while (1)
              {
                v180 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v177];
                v181 = *(_QWORD *)(v179 + 8 * v180);
                v182 = *(_QWORD *)(*v178 + 8 * v180);
                if (v181 != v182)
                  break;
                if (++v177 == 4)
                  goto LABEL_232;
              }
              if (v181 < v182)
              {
                v183 = *((_OWORD *)v178 + 2);
                *a1 = 0;
                a1[1] = 0;
                v184 = a1;
                a1[2] = 0;
                do
                {
                  v185 = 0;
                  v186 = v184;
                  v184 = v178;
                  *(_OWORD *)v186 = *(_OWORD *)v178;
                  v186[2] = v178[2];
                  *v178 = 0;
                  v178[1] = 0;
                  v178[2] = 0;
                  v188 = *(v178 - 3);
                  v178 -= 3;
                  v187 = v188;
                  while (1)
                  {
                    v189 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v185];
                    v190 = *(_QWORD *)(v179 + 8 * v189);
                    v191 = *(_QWORD *)(v187 + 8 * v189);
                    if (v190 != v191)
                      break;
                    if (++v185 == 4)
                      goto LABEL_231;
                  }
                }
                while (v190 < v191);
LABEL_231:
                *v184 = v179;
                *(_OWORD *)(v184 + 1) = v183;
              }
LABEL_232:
              v105 = a1 + 3;
            }
            while (a1 + 3 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 == a2)
            return;
          v123 = (unint64_t)(v10 - 2) >> 1;
          v124 = v123;
          do
          {
            v125 = v124;
            if (v123 < v124)
              goto LABEL_186;
            v126 = (2 * v124) | 1;
            v127 = &v8[3 * v126];
            if (2 * v125 + 2 < v10)
            {
              v128 = 0;
              while (1)
              {
                v129 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v128];
                v130 = *(_QWORD *)(*v127 + 8 * v129);
                v131 = *(_QWORD *)(v127[3] + 8 * v129);
                if (v130 != v131)
                  break;
                if (++v128 == 4)
                  goto LABEL_165;
              }
              if (v130 < v131)
              {
                v127 += 3;
                v126 = 2 * v125 + 2;
              }
            }
LABEL_165:
            v132 = 0;
            v133 = &v8[3 * v125];
            v134 = *v133;
            while (1)
            {
              v135 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v132];
              v136 = *(_QWORD *)(*v127 + 8 * v135);
              v137 = *(_QWORD *)(v134 + 8 * v135);
              if (v136 != v137)
                break;
              if (++v132 == 4)
                goto LABEL_170;
            }
            if (v136 < v137)
              goto LABEL_186;
LABEL_170:
            v138 = *(_OWORD *)&v8[3 * v125 + 1];
            *v133 = 0;
            v133[1] = 0;
            v133[2] = 0;
LABEL_171:
            do
            {
              v139 = v127;
              *(_OWORD *)v133 = *(_OWORD *)v127;
              v133[2] = v127[2];
              *v127 = 0;
              v127[1] = 0;
              v127[2] = 0;
              if (v123 < v126)
                break;
              v140 = (2 * v126) | 1;
              v127 = &v8[3 * v140];
              v126 = 2 * v126 + 2;
              if (v126 >= v10)
              {
LABEL_176:
                v126 = v140;
              }
              else
              {
                v141 = 0;
                while (1)
                {
                  v142 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v141];
                  v143 = *(_QWORD *)(*v127 + 8 * v142);
                  v144 = *(_QWORD *)(v127[3] + 8 * v142);
                  if (v143 != v144)
                    break;
                  if (++v141 == 4)
                    goto LABEL_176;
                }
                if (v143 >= v144)
                  v126 = v140;
                else
                  v127 += 3;
              }
              v145 = 0;
              while (1)
              {
                v146 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v145];
                v147 = *(_QWORD *)(*v127 + 8 * v146);
                v148 = *(_QWORD *)(v134 + 8 * v146);
                if (v147 != v148)
                  break;
                if (++v145 == 4)
                {
                  v133 = v139;
                  goto LABEL_171;
                }
              }
              v133 = v139;
            }
            while (v147 >= v148);
            *v139 = v134;
            *(_OWORD *)(v139 + 1) = v138;
LABEL_186:
            v124 = v125 - 1;
          }
          while (v125);
          v149 = v9 / 0x18uLL;
          while (2)
          {
            v150 = 0;
            v152 = *v8;
            v151 = v8[1];
            v153 = v8[2];
            v8[1] = 0;
            v8[2] = 0;
            v154 = v8;
            *v8 = 0;
            do
            {
              v155 = v154;
              v154 += 3 * v150 + 3;
              v156 = 2 * v150;
              v150 = (2 * v150) | 1;
              if (v156 + 2 < v149)
              {
                v157 = 0;
                while (1)
                {
                  v158 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v157];
                  v159 = *(_QWORD *)(*v154 + 8 * v158);
                  v160 = *(_QWORD *)(v154[3] + 8 * v158);
                  if (v159 != v160)
                    break;
                  if (++v157 == 4)
                    goto LABEL_196;
                }
                if (v159 < v160)
                {
                  v154 += 3;
                  v150 = v156 + 2;
                }
              }
LABEL_196:
              *(_OWORD *)v155 = *(_OWORD *)v154;
              v155[2] = v154[2];
              *v154 = 0;
              v154[1] = 0;
              v154[2] = 0;
            }
            while (v150 <= (uint64_t)((unint64_t)(v149 - 2) >> 1));
            if (v154 != a2 - 3)
            {
              *(_OWORD *)v154 = *(_OWORD *)(a2 - 3);
              v154[2] = *(a2 - 1);
              *(a2 - 3) = v152;
              *(a2 - 2) = v151;
              *(a2 - 1) = v153;
              v161 = (char *)v154 - (char *)v8 + 24;
              if (v161 >= 25)
              {
                v162 = 0;
                v163 = (v161 / 0x18uLL - 2) >> 1;
                v164 = &v8[3 * v163];
                v165 = *v154;
                while (1)
                {
                  v166 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v162];
                  v167 = *(_QWORD *)(*v164 + 8 * v166);
                  v168 = *(_QWORD *)(v165 + 8 * v166);
                  if (v167 != v168)
                    break;
                  if (++v162 == 4)
                    goto LABEL_205;
                }
                if (v167 < v168)
                {
                  v151 = v154[1];
                  v153 = v154[2];
                  v154[1] = 0;
                  v154[2] = 0;
                  v170 = v154;
                  *v154 = 0;
                  do
                  {
                    v154 = v164;
                    *(_OWORD *)v170 = *(_OWORD *)v164;
                    v170[2] = v164[2];
                    *v164 = 0;
                    v164[1] = 0;
                    v164[2] = 0;
                    if (!v163)
                      break;
                    v171 = 0;
                    v163 = (v163 - 1) >> 1;
                    v164 = &v8[3 * v163];
                    while (1)
                    {
                      v172 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v171];
                      v173 = *(_QWORD *)(*v164 + 8 * v172);
                      v174 = *(_QWORD *)(v165 + 8 * v172);
                      if (v173 != v174)
                        break;
                      if (++v171 == 4)
                        goto LABEL_216;
                    }
                    v170 = v154;
                  }
                  while (v173 < v174);
LABEL_216:
                  *v154 = v165;
LABEL_204:
                  v154[1] = v151;
                  v154[2] = v153;
                }
              }
LABEL_205:
              a2 -= 3;
              if (v149-- <= 2)
                return;
              continue;
            }
            break;
          }
          *v154 = v152;
          goto LABEL_204;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[3 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0xC01)
        {
          _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(&a1[3 * v11], a1, v196);
        }
        else
        {
          _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(a1, &a1[3 * v11], v196);
          v13 = 3 * v11;
          v14 = &a1[v13];
          _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(a1 + 3, v14 - 3, a2 - 6);
          _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(a1 + 6, &a1[v13 + 3], a2 - 9);
          _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(v14 - 3, v12, &a1[v13 + 3]);
          v18 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v18;
          v19 = a1[2];
          a1[2] = v14[2];
          v14[2] = v19;
        }
        --a3;
        v20 = *a1;
        if ((a4 & 1) == 0)
        {
          v21 = 0;
          while (1)
          {
            v22 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v21];
            v23 = *(_QWORD *)(*(a1 - 3) + 8 * v22);
            v24 = *(_QWORD *)(v20 + 8 * v22);
            if (v23 != v24)
              break;
            if (++v21 == 4)
              goto LABEL_12;
          }
          if (v23 >= v24)
          {
LABEL_12:
            v25 = 0;
            v26 = *(_OWORD *)(a1 + 1);
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
            while (1)
            {
              v27 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v25];
              v28 = *(_QWORD *)(v20 + 8 * v27);
              v29 = *(_QWORD *)(*v196 + 8 * v27);
              if (v28 != v29)
                break;
              if (++v25 == 4)
              {
                v8 = a1;
                do
                {
LABEL_78:
                  v8 += 3;
                  if (v8 >= a2)
                    break;
                  v74 = 0;
                  while (1)
                  {
                    v75 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v74];
                    v76 = *(_QWORD *)(v20 + 8 * v75);
                    v77 = *(_QWORD *)(*v8 + 8 * v75);
                    if (v76 != v77)
                      break;
                    if (++v74 == 4)
                      goto LABEL_84;
                  }
                  v15 = v76 < v77;
LABEL_84:
                  ;
                }
                while (v76 == v77 || !v15);
                goto LABEL_86;
              }
            }
            v8 = a1;
            if (v28 >= v29)
              goto LABEL_78;
            do
            {
              v68 = 0;
              v70 = v8[3];
              v8 += 3;
              v69 = v70;
              while (1)
              {
                v71 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v68];
                v72 = *(_QWORD *)(v20 + 8 * v71);
                v73 = *(_QWORD *)(v69 + 8 * v71);
                if (v72 != v73)
                  break;
                if (++v68 == 4)
                  goto LABEL_75;
              }
              v15 = v72 < v73;
LABEL_75:
              ;
            }
            while (v72 == v73 || !v15);
LABEL_86:
            v78 = a2;
            if (v8 < a2)
            {
              v78 = a2;
              do
              {
                v79 = 0;
                v81 = *(v78 - 3);
                v78 -= 3;
                v80 = v81;
                while (1)
                {
                  v82 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v79];
                  v83 = *(_QWORD *)(v20 + 8 * v82);
                  v84 = *(_QWORD *)(v80 + 8 * v82);
                  if (v83 != v84)
                    break;
                  if (++v79 == 4)
                    goto LABEL_93;
                }
              }
              while (v83 < v84);
            }
LABEL_93:
            if (v8 < v78)
            {
              v85 = *v8;
              v86 = *v78;
              do
              {
                *v8 = v86;
                *v78 = v85;
                v87 = v8[1];
                v8[1] = v78[1];
                v78[1] = v87;
                v88 = v8[2];
                v8[2] = v78[2];
                v78[2] = v88;
                do
                {
                  v89 = 0;
                  v90 = v8[3];
                  v8 += 3;
                  v85 = v90;
                  while (1)
                  {
                    v91 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v89];
                    v92 = *(_QWORD *)(v20 + 8 * v91);
                    v93 = *(_QWORD *)(v85 + 8 * v91);
                    if (v92 != v93)
                      break;
                    if (++v89 == 4)
                      goto LABEL_101;
                  }
                  LOBYTE(v16) = v92 < v93;
LABEL_101:
                  ;
                }
                while (v92 == v93 || (v16 & 1) == 0);
                do
                {
                  v94 = 0;
                  v95 = *(v78 - 3);
                  v78 -= 3;
                  v86 = v95;
                  while (1)
                  {
                    v96 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v94];
                    v16 = *(_QWORD *)(v20 + 8 * v96);
                    v97 = *(_QWORD *)(v86 + 8 * v96);
                    if (v16 != v97)
                      break;
                    if (++v94 == 4)
                      goto LABEL_108;
                  }
                }
                while (v16 < v97);
LABEL_108:
                ;
              }
              while (v8 < v78);
            }
            v98 = (void *)*a1;
            if (v8 - 3 == a1)
            {
              if (v98)
              {
                *(v8 - 2) = (uint64_t)v98;
                v195 = v26;
                operator delete(v98);
                v26 = v195;
              }
            }
            else
            {
              if (v98)
              {
                a1[1] = (uint64_t)v98;
                v194 = v26;
                operator delete(v98);
                v26 = v194;
                *a1 = 0;
                a1[1] = 0;
                a1[2] = 0;
              }
              *(_OWORD *)a1 = *(_OWORD *)(v8 - 3);
              a1[2] = *(v8 - 1);
              *(v8 - 3) = 0;
              *(v8 - 2) = 0;
              *(v8 - 1) = 0;
            }
            a4 = 0;
            *(v8 - 3) = v20;
            *((_OWORD *)v8 - 1) = v26;
            continue;
          }
        }
        v30 = *(_OWORD *)(a1 + 1);
        *a1 = 0;
        a1[1] = 0;
        v31 = a1;
        a1[2] = 0;
        do
        {
          v32 = 0;
          v33 = v31;
          v35 = v31[3];
          v31 += 3;
          v34 = v35;
          while (1)
          {
            v36 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v32];
            v37 = *(_QWORD *)(v34 + 8 * v36);
            v38 = *(_QWORD *)(v20 + 8 * v36);
            if (v37 != v38)
              break;
            if (++v32 == 4)
              goto LABEL_23;
          }
        }
        while (v37 < v38);
LABEL_23:
        v39 = a2;
        if (v33 == a1)
        {
          v39 = a2;
          do
          {
            if (v31 >= v39)
              break;
            v46 = 0;
            v48 = *(v39 - 3);
            v39 -= 3;
            v47 = v48;
            while (1)
            {
              v49 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v46];
              v50 = *(_QWORD *)(v47 + 8 * v49);
              v51 = *(_QWORD *)(v20 + 8 * v49);
              if (v50 != v51)
                break;
              if (++v46 == 4)
                goto LABEL_39;
            }
            LOBYTE(v16) = v50 < v51;
LABEL_39:
            ;
          }
          while (v50 == v51 || (v16 & 1) == 0);
        }
        else
        {
          do
          {
            v40 = 0;
            v42 = *(v39 - 3);
            v39 -= 3;
            v41 = v42;
            while (1)
            {
              v43 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v40];
              v44 = *(_QWORD *)(v41 + 8 * v43);
              v45 = *(_QWORD *)(v20 + 8 * v43);
              if (v44 != v45)
                break;
              if (++v40 == 4)
                goto LABEL_29;
            }
            LOBYTE(v16) = v44 < v45;
LABEL_29:
            ;
          }
          while (v44 == v45 || (v16 & 1) == 0);
        }
        if (v31 >= v39)
        {
          v8 = v31;
        }
        else
        {
          v52 = *v39;
          v8 = v31;
          v53 = v39;
          do
          {
            *v8 = v52;
            *v53 = v34;
            v54 = v8[1];
            v8[1] = v53[1];
            v53[1] = v54;
            v55 = v8[2];
            v8[2] = v53[2];
            v53[2] = v55;
            do
            {
              v56 = 0;
              v57 = v8[3];
              v8 += 3;
              v34 = v57;
              while (1)
              {
                v58 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v56];
                v59 = *(_QWORD *)(v34 + 8 * v58);
                v60 = *(_QWORD *)(v20 + 8 * v58);
                if (v59 != v60)
                  break;
                if (++v56 == 4)
                  goto LABEL_49;
              }
            }
            while (v59 < v60);
            do
            {
LABEL_49:
              v61 = 0;
              v62 = *(v53 - 3);
              v53 -= 3;
              v52 = v62;
              while (1)
              {
                v63 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v61];
                v64 = *(_QWORD *)(v52 + 8 * v63);
                v65 = *(_QWORD *)(v20 + 8 * v63);
                if (v64 != v65)
                  break;
                if (++v61 == 4)
                  goto LABEL_54;
              }
              v17 = v64 < v65;
LABEL_54:
              ;
            }
            while (v64 == v65 || !v17);
          }
          while (v8 < v53);
        }
        v66 = (void *)*a1;
        if (v8 - 3 == a1)
        {
          if (v66)
          {
            *(v8 - 2) = (uint64_t)v66;
            v193 = v30;
            operator delete(v66);
            v30 = v193;
          }
        }
        else
        {
          if (v66)
          {
            a1[1] = (uint64_t)v66;
            v192 = v30;
            operator delete(v66);
            v30 = v192;
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 3);
          a1[2] = *(v8 - 1);
          *(v8 - 3) = 0;
          *(v8 - 2) = 0;
          *(v8 - 1) = 0;
        }
        *(v8 - 3) = v20;
        *((_OWORD *)v8 - 1) = v30;
        if (v31 < v39)
        {
LABEL_68:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEELb0EEEvT1_SJ_T0_NS_15iterator_traitsISJ_E15difference_typeEb(a1, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v67 = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEbT1_SJ_T0_(a1, v8 - 3);
        if (!_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEbT1_SJ_T0_(v8, a2))
        {
          if (v67)
            continue;
          goto LABEL_68;
        }
        a2 = v8 - 3;
        if (!v67)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (uint64_t)(a2 - 5);
  v10 = (uint64_t)(a2 - 10);
  v11 = (uint64_t)(a2 - 15);
  v191 = a2 - 4;
  v193 = (unint64_t)a2;
  i = a1;
  while (2)
  {
    a1 = i;
    v13 = (uint64_t)a2 - i;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (USCSampleComparator::operator()(v9, a1))
        {
          v207 = *(_QWORD *)(a1 + 32);
          v197 = *(_OWORD *)a1;
          v202 = *(_OWORD *)(a1 + 16);
          v92 = *(_OWORD *)v9;
          v93 = *(_OWORD *)(v9 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
          *(_OWORD *)a1 = v92;
          *(_OWORD *)(a1 + 16) = v93;
          result = *(double *)&v197;
          *(_QWORD *)(v9 + 32) = v207;
          *(_OWORD *)v9 = v197;
          *(_OWORD *)(v9 + 16) = v202;
        }
        return result;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, v9);
        return result;
      case 4:
        *(_QWORD *)&result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, v9).n128_u64[0];
        return result;
      case 5:
        *(_QWORD *)&result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, a1 + 120, v9).n128_u64[0];
        return result;
      default:
        if (v13 > 959)
        {
          if (!a3)
          {
            if ((double *)a1 != a2)
            {
              v115 = (unint64_t)(v14 - 2) >> 1;
              v192 = v115;
              do
              {
                v116 = v115;
                if (v192 >= v115)
                {
                  v117 = (2 * v115) | 1;
                  v118 = a1 + 40 * v117;
                  if (2 * v115 + 2 < v14 && USCSampleComparator::operator()(a1 + 40 * v117, v118 + 40))
                  {
                    v118 += 40;
                    v117 = 2 * v116 + 2;
                  }
                  v119 = a1 + 40 * v116;
                  a2 = (double *)v193;
                  if (!USCSampleComparator::operator()(v118, v119))
                  {
                    v120 = *(_QWORD *)v119;
                    v121 = *(_DWORD *)(v119 + 12);
                    v187 = *(_DWORD *)(v119 + 8);
                    v184 = *(_QWORD *)(v119 + 16);
                    v185 = *(_QWORD *)(v119 + 24);
                    v122 = *(_QWORD *)(v119 + 32);
                    v123 = *(_QWORD *)(v118 + 32);
                    v124 = *(_OWORD *)(v118 + 16);
                    *(_OWORD *)v119 = *(_OWORD *)v118;
                    *(_OWORD *)(v119 + 16) = v124;
                    *(_QWORD *)(v119 + 32) = v123;
                    if (v192 >= v117)
                    {
                      v188 = v122;
                      v186 = v120;
                      v189 = v120;
                      v190 = v122;
                      while (1)
                      {
                        v125 = v118;
                        v126 = 2 * v117;
                        v117 = (2 * v117) | 1;
                        v118 = a1 + 40 * v117;
                        v127 = v126 + 2;
                        if (v126 + 2 < v14)
                        {
                          v128 = USCSampleComparator::operator()(a1 + 40 * v117, v118 + 40);
                          v120 = v189;
                          v122 = v190;
                          if (v128)
                          {
                            v118 += 40;
                            v117 = v127;
                          }
                        }
                        v129 = *(_DWORD *)(v118 + 12);
                        v130 = v129 >= v121;
                        if (v129 == v121)
                        {
                          v131 = *(_DWORD *)(v118 + 32);
                          v130 = v131 >= v188;
                          if (v131 == v188)
                          {
                            v130 = *(_DWORD *)v118 >= v186;
                            if (*(_DWORD *)v118 == v186)
                            {
                              v132 = *(_DWORD *)(v118 + 8);
                              v130 = v132 >= v187;
                              if (v132 == v187)
                                v130 = *(_QWORD *)(v118 + 24) >= v185;
                            }
                          }
                        }
                        if (!v130)
                          break;
                        v133 = *(_OWORD *)v118;
                        v134 = *(_OWORD *)(v118 + 16);
                        *(_QWORD *)(v125 + 32) = *(_QWORD *)(v118 + 32);
                        *(_OWORD *)v125 = v133;
                        *(_OWORD *)(v125 + 16) = v134;
                        if (v192 < v117)
                          goto LABEL_177;
                      }
                      v118 = v125;
                    }
LABEL_177:
                    *(_QWORD *)v118 = v120;
                    *(_DWORD *)(v118 + 8) = v187;
                    *(_DWORD *)(v118 + 12) = v121;
                    *(_QWORD *)(v118 + 16) = v184;
                    *(_QWORD *)(v118 + 24) = v185;
                    *(_QWORD *)(v118 + 32) = v122;
                    a2 = (double *)v193;
                  }
                }
                v115 = v116 - 1;
              }
              while (v116);
              v135 = v13 / 0x28uLL;
              do
              {
                v136 = a2;
                v137 = 0;
                v208 = *(_QWORD *)(a1 + 32);
                v198 = *(_OWORD *)a1;
                v203 = *(_OWORD *)(a1 + 16);
                v138 = v135 - 2;
                if (v135 < 2)
                  v138 = v135 - 1;
                v139 = v138 >> 1;
                v140 = a1;
                do
                {
                  v141 = v140 + 40 * v137 + 40;
                  v142 = (2 * v137) | 1;
                  v143 = 2 * v137 + 2;
                  if (v143 < v135 && USCSampleComparator::operator()(v140 + 40 * v137 + 40, v140 + 40 * v137 + 80))
                  {
                    v141 += 40;
                    v142 = v143;
                  }
                  v144 = *(_OWORD *)v141;
                  v145 = *(_OWORD *)(v141 + 16);
                  *(_QWORD *)(v140 + 32) = *(_QWORD *)(v141 + 32);
                  *(_OWORD *)v140 = v144;
                  *(_OWORD *)(v140 + 16) = v145;
                  v140 = v141;
                  v137 = v142;
                }
                while (v142 <= v139);
                v146 = v136 - 5;
                if ((double *)v141 == v146)
                {
                  v149 = v146;
                  result = *(double *)&v198;
                  *(_QWORD *)(v141 + 32) = v208;
                  *(_OWORD *)v141 = v198;
                  *(_OWORD *)(v141 + 16) = v203;
                }
                else
                {
                  v147 = *(_OWORD *)v146;
                  v148 = *((_OWORD *)v146 + 1);
                  *(double *)(v141 + 32) = v146[4];
                  *(_OWORD *)v141 = v147;
                  *(_OWORD *)(v141 + 16) = v148;
                  result = *(double *)&v198;
                  *((_QWORD *)v146 + 4) = v208;
                  *(_OWORD *)v146 = v198;
                  *((_OWORD *)v146 + 1) = v203;
                  v149 = v146;
                  v150 = v141 - a1 + 40;
                  if (v150 >= 41)
                  {
                    v151 = -2 - 0x3333333333333333 * (v150 >> 3);
                    v152 = v151 >> 1;
                    v153 = a1 + 40 * (v151 >> 1);
                    if (USCSampleComparator::operator()(v153, v141))
                    {
                      v154 = *(_QWORD *)v141;
                      v155 = *(_DWORD *)(v141 + 8);
                      v156 = *(_DWORD *)(v141 + 12);
                      v158 = *(_QWORD *)(v141 + 16);
                      v157 = *(_QWORD *)(v141 + 24);
                      result = *(double *)(v141 + 32);
                      v159 = *(_QWORD *)(v153 + 32);
                      v160 = *(_OWORD *)(v153 + 16);
                      *(_OWORD *)v141 = *(_OWORD *)v153;
                      *(_OWORD *)(v141 + 16) = v160;
                      *(_QWORD *)(v141 + 32) = v159;
                      if (v151 >= 2)
                      {
                        while (1)
                        {
                          v161 = v153;
                          v162 = v152 - 1;
                          v152 = (v152 - 1) >> 1;
                          v153 = a1 + 40 * v152;
                          v163 = *(_DWORD *)(v153 + 12);
                          v164 = v163 >= v156;
                          if (v163 == v156)
                          {
                            v165 = *(_DWORD *)(a1 + 40 * v152 + 32);
                            v164 = v165 >= LODWORD(result);
                            if (v165 == LODWORD(result))
                            {
                              v164 = *(_DWORD *)v153 >= v154;
                              if (*(_DWORD *)v153 == (_DWORD)v154)
                              {
                                v166 = *(_DWORD *)(a1 + 40 * v152 + 8);
                                v164 = v166 >= v155;
                                if (v166 == v155)
                                  v164 = *(_QWORD *)(a1 + 40 * v152 + 24) >= v157;
                              }
                            }
                          }
                          if (v164)
                            break;
                          v167 = *(_OWORD *)v153;
                          v168 = *(_OWORD *)(v153 + 16);
                          *(_QWORD *)(v161 + 32) = *(_QWORD *)(v153 + 32);
                          *(_OWORD *)v161 = v167;
                          *(_OWORD *)(v161 + 16) = v168;
                          if (v162 <= 1)
                            goto LABEL_201;
                        }
                        v153 = v161;
                      }
LABEL_201:
                      *(_QWORD *)v153 = v154;
                      *(_DWORD *)(v153 + 8) = v155;
                      *(_DWORD *)(v153 + 12) = v156;
                      *(_QWORD *)(v153 + 16) = v158;
                      *(_QWORD *)(v153 + 24) = v157;
                      *(double *)(v153 + 32) = result;
                    }
                  }
                }
                v169 = v135-- <= 2;
                a2 = v149;
              }
              while (!v169);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = a1 + 40 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(v16, a1, v9);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, v16, v9);
            v17 = 5 * v15;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1 + 40, a1 + 8 * v17 - 40, v10);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1 + 80, a1 + 40 + 8 * v17, v11);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1 + 8 * v17 - 40, v16, a1 + 40 + 8 * v17);
            v204 = *(_QWORD *)(a1 + 32);
            v194 = *(_OWORD *)a1;
            v199 = *(_OWORD *)(a1 + 16);
            v18 = *(_OWORD *)v16;
            v19 = *(_OWORD *)(v16 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v16 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(_QWORD *)(v16 + 32) = v204;
            *(_OWORD *)v16 = v194;
            *(_OWORD *)(v16 + 16) = v199;
          }
          --a3;
          a2 = (double *)v193;
          if ((a4 & 1) == 0 && !USCSampleComparator::operator()(a1 - 40, a1))
          {
            result = *(double *)a1;
            v57 = *(_DWORD *)(a1 + 8);
            v58 = *(_DWORD *)(a1 + 12);
            v60 = *(_QWORD *)(a1 + 16);
            v59 = *(_QWORD *)(a1 + 24);
            v61 = *(_QWORD *)(a1 + 32);
            v62 = *(_DWORD *)(v193 - 28);
            if (v58 == v62)
            {
              v63 = *(_DWORD *)(v193 - 8);
              v64 = *(_QWORD *)(a1 + 32);
              v65 = v61 >= v63;
              if ((_DWORD)v61 == v63)
              {
                v65 = LODWORD(result) >= *(_DWORD *)v9;
                if (LODWORD(result) == *(_DWORD *)v9)
                {
                  v66 = *(_DWORD *)(v193 - 32);
                  v65 = v57 >= v66;
                  if (v57 == v66)
                    v65 = v59 >= *(_QWORD *)(v193 - 16);
                }
              }
              if (!v65)
                goto LABEL_76;
            }
            else if (v58 < v62)
            {
              v64 = *(_QWORD *)(a1 + 32);
LABEL_76:
              for (i = a1 + 40; ; i += 40)
              {
                v67 = *(_DWORD *)(i + 12);
                v68 = v58 >= v67;
                if (v58 == v67)
                {
                  v69 = *(_DWORD *)(i + 32);
                  v68 = v64 >= v69;
                  if (v64 == v69)
                  {
                    v68 = LODWORD(result) >= *(_DWORD *)i;
                    if (LODWORD(result) == *(_DWORD *)i)
                    {
                      v70 = *(_DWORD *)(i + 8);
                      v68 = v57 >= v70;
                      if (v57 == v70)
                        v68 = v59 >= *(_QWORD *)(i + 24);
                    }
                  }
                }
                if (!v68)
                  break;
              }
              goto LABEL_94;
            }
            for (i = a1 + 40; i < v193; i += 40)
            {
              v71 = *(_DWORD *)(i + 12);
              v72 = v58 >= v71;
              if (v58 == v71)
              {
                v73 = *(_DWORD *)(i + 32);
                v72 = v61 >= v73;
                if ((_DWORD)v61 == v73)
                {
                  v72 = LODWORD(result) >= *(_DWORD *)i;
                  if (LODWORD(result) == *(_DWORD *)i)
                  {
                    v74 = *(_DWORD *)(i + 8);
                    v72 = v57 >= v74;
                    if (v57 == v74)
                      v72 = v59 >= *(_QWORD *)(i + 24);
                  }
                }
              }
              if (!v72)
                break;
            }
LABEL_94:
            v75 = v193;
            if (i < v193)
            {
              for (j = v191; ; j -= 5)
              {
                v77 = v58 >= v62;
                if (v58 == v62)
                {
                  v78 = *((_DWORD *)j + 6);
                  v77 = v61 >= v78;
                  if ((_DWORD)v61 == v78)
                  {
                    v79 = *((_DWORD *)j - 2);
                    v77 = LODWORD(result) >= v79;
                    if (LODWORD(result) == v79)
                    {
                      v77 = v57 >= *(_DWORD *)j;
                      if (v57 == *(_DWORD *)j)
                        v77 = v59 >= *((_QWORD *)j + 2);
                    }
                  }
                }
                if (v77)
                  break;
                v62 = *((_DWORD *)j - 9);
              }
              v75 = (unint64_t)(j - 1);
            }
            while (i < v75)
            {
              v206 = *(_QWORD *)(i + 32);
              v196 = *(_OWORD *)i;
              v201 = *(_OWORD *)(i + 16);
              v80 = *(_OWORD *)v75;
              v81 = *(_OWORD *)(v75 + 16);
              *(_QWORD *)(i + 32) = *(_QWORD *)(v75 + 32);
              *(_OWORD *)i = v80;
              *(_OWORD *)(i + 16) = v81;
              *(_QWORD *)(v75 + 32) = v206;
              *(_OWORD *)v75 = v196;
              *(_OWORD *)(v75 + 16) = v201;
              do
              {
                i += 40;
                v82 = *(_DWORD *)(i + 12);
                v83 = v58 >= v82;
                if (v58 == v82)
                {
                  v84 = *(_DWORD *)(i + 32);
                  v83 = v61 >= v84;
                  if ((_DWORD)v61 == v84)
                  {
                    v83 = LODWORD(result) >= *(_DWORD *)i;
                    if (LODWORD(result) == *(_DWORD *)i)
                    {
                      v85 = *(_DWORD *)(i + 8);
                      v83 = v57 >= v85;
                      if (v57 == v85)
                        v83 = v59 >= *(_QWORD *)(i + 24);
                    }
                  }
                }
              }
              while (v83);
              do
              {
                v75 -= 40;
                v86 = *(_DWORD *)(v75 + 12);
                v87 = v58 >= v86;
                if (v58 == v86)
                {
                  v88 = *(_DWORD *)(v75 + 32);
                  v87 = v61 >= v88;
                  if ((_DWORD)v61 == v88)
                  {
                    v87 = LODWORD(result) >= *(_DWORD *)v75;
                    if (LODWORD(result) == *(_DWORD *)v75)
                    {
                      v89 = *(_DWORD *)(v75 + 8);
                      v87 = v57 >= v89;
                      if (v57 == v89)
                        v87 = v59 >= *(_QWORD *)(v75 + 24);
                    }
                  }
                }
              }
              while (!v87);
            }
            if (i - 40 != a1)
            {
              v90 = *(_OWORD *)(i - 40);
              v91 = *(_OWORD *)(i - 24);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(i - 8);
              *(_OWORD *)a1 = v90;
              *(_OWORD *)(a1 + 16) = v91;
            }
            a4 = 0;
            *(double *)(i - 40) = result;
            *(_DWORD *)(i - 32) = v57;
            *(_DWORD *)(i - 28) = v58;
            *(_QWORD *)(i - 24) = v60;
            *(_QWORD *)(i - 16) = v59;
            *(_QWORD *)(i - 8) = v61;
            continue;
          }
          v20 = *(_QWORD *)a1;
          v21 = *(_DWORD *)(a1 + 8);
          v22 = *(_DWORD *)(a1 + 12);
          v23 = *(_QWORD *)(a1 + 16);
          v24 = *(_QWORD *)(a1 + 24);
          v25 = *(_QWORD *)(a1 + 32);
          v26 = *(_QWORD *)a1;
          for (k = a1 + 40; ; k += 40)
          {
            v28 = *(_DWORD *)(k + 12);
            v29 = v28 >= v22;
            if (v28 == v22)
            {
              v30 = *(_DWORD *)(k + 32);
              v29 = v30 >= v25;
              if (v30 == (_DWORD)v25)
              {
                v29 = *(_DWORD *)k >= v26;
                if (*(_DWORD *)k == v26)
                {
                  v31 = *(_DWORD *)(k + 8);
                  v29 = v31 >= v21;
                  if (v31 == v21)
                    v29 = *(_QWORD *)(k + 24) >= v24;
                }
              }
            }
            if (v29)
              break;
          }
          m = v9;
          if (k - 40 == a1)
          {
            m = v193;
            if (k < v193)
            {
              for (m = v9; ; m -= 40)
              {
                v37 = *(_DWORD *)(m + 12);
                v38 = v37 >= v22;
                if (v37 == v22
                  && (v39 = *(_DWORD *)(m + 32), v38 = v39 >= v25, v39 == (_DWORD)v25)
                  && (v38 = *(_DWORD *)m >= v26, *(_DWORD *)m == v26))
                {
                  v40 = *(_DWORD *)(m + 8);
                  v41 = v40 >= v21;
                  if (v40 == v21)
                    v41 = *(_QWORD *)(m + 24) >= v24;
                  if (!v41 || k >= m)
                    break;
                }
                else if (!v38 || k >= m)
                {
                  break;
                }
              }
            }
          }
          else
          {
            while (1)
            {
              v33 = *(_DWORD *)(m + 12);
              v34 = v33 >= v22;
              if (v33 == v22)
              {
                v35 = *(_DWORD *)(m + 32);
                v34 = v35 >= v25;
                if (v35 == (_DWORD)v25)
                {
                  v34 = *(_DWORD *)m >= v26;
                  if (*(_DWORD *)m == v26)
                  {
                    v36 = *(_DWORD *)(m + 8);
                    v34 = v36 >= v21;
                    if (v36 == v21)
                      v34 = *(_QWORD *)(m + 24) >= v24;
                  }
                }
              }
              if (!v34)
                break;
              m -= 40;
            }
          }
          i = k;
          if (k < m)
          {
            i = k;
            v43 = m;
            do
            {
              v205 = *(_QWORD *)(i + 32);
              v195 = *(_OWORD *)i;
              v200 = *(_OWORD *)(i + 16);
              v44 = *(_OWORD *)v43;
              v45 = *(_OWORD *)(v43 + 16);
              *(_QWORD *)(i + 32) = *(_QWORD *)(v43 + 32);
              *(_OWORD *)i = v44;
              *(_OWORD *)(i + 16) = v45;
              *(_QWORD *)(v43 + 32) = v205;
              *(_OWORD *)v43 = v195;
              *(_OWORD *)(v43 + 16) = v200;
              do
              {
                i += 40;
                v46 = *(_DWORD *)(i + 12);
                v47 = v46 >= v22;
                if (v46 == v22)
                {
                  v48 = *(_DWORD *)(i + 32);
                  v47 = v48 >= v25;
                  if (v48 == (_DWORD)v25)
                  {
                    v47 = *(_DWORD *)i >= v26;
                    if (*(_DWORD *)i == v26)
                    {
                      v49 = *(_DWORD *)(i + 8);
                      v47 = v49 >= v21;
                      if (v49 == v21)
                        v47 = *(_QWORD *)(i + 24) >= v24;
                    }
                  }
                }
              }
              while (!v47);
              do
              {
                v43 -= 40;
                v50 = *(_DWORD *)(v43 + 12);
                v51 = v50 >= v22;
                if (v50 == v22)
                {
                  v52 = *(_DWORD *)(v43 + 32);
                  v51 = v52 >= v25;
                  if (v52 == (_DWORD)v25)
                  {
                    v51 = *(_DWORD *)v43 >= v26;
                    if (*(_DWORD *)v43 == v26)
                    {
                      v53 = *(_DWORD *)(v43 + 8);
                      v51 = v53 >= v21;
                      if (v53 == v21)
                        v51 = *(_QWORD *)(v43 + 24) >= v24;
                    }
                  }
                }
              }
              while (v51);
            }
            while (i < v43);
          }
          if (i - 40 != a1)
          {
            v54 = *(_OWORD *)(i - 40);
            v55 = *(_OWORD *)(i - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(i - 8);
            *(_OWORD *)a1 = v54;
            *(_OWORD *)(a1 + 16) = v55;
          }
          *(_QWORD *)(i - 40) = v20;
          *(_DWORD *)(i - 32) = v21;
          *(_DWORD *)(i - 28) = v22;
          *(_QWORD *)(i - 24) = v23;
          *(_QWORD *)(i - 16) = v24;
          *(_QWORD *)(i - 8) = v25;
          if (k < m)
          {
LABEL_65:
            std::__introsort<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *,false>(a1, i - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, i - 40);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(i, v193))
          {
            if (v56)
              continue;
            goto LABEL_65;
          }
          a2 = (double *)(i - 40);
          if (v56)
            return result;
          goto LABEL_1;
        }
        v94 = a1 + 40;
        v96 = (double *)a1 == a2 || v94 == (_QWORD)a2;
        if ((a4 & 1) == 0)
        {
          if (!v96)
          {
            do
            {
              v170 = (double *)v94;
              if (USCSampleComparator::operator()(v94, a1))
              {
                result = *v170;
                v171 = *(_DWORD *)(a1 + 48);
                v172 = *(_DWORD *)(a1 + 52);
                v173 = *(_QWORD *)(a1 + 56);
                v174 = *(_QWORD *)(a1 + 64);
                v175 = *(_QWORD *)(a1 + 72);
                v176 = *(_QWORD *)v170;
                do
                {
                  v177 = a1;
                  v178 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 40) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 56) = v178;
                  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 32);
                  a1 -= 40;
                  v179 = *(_DWORD *)(v177 - 28);
                  v180 = v172 >= v179;
                  if (v172 == v179)
                  {
                    v181 = *(_DWORD *)(v177 - 8);
                    v180 = v175 >= v181;
                    if ((_DWORD)v175 == v181)
                    {
                      v182 = *(_DWORD *)(v177 - 40);
                      v180 = v176 >= v182;
                      if (v176 == v182)
                      {
                        v183 = *(_DWORD *)(v177 - 32);
                        v180 = v171 >= v183;
                        if (v171 == v183)
                          v180 = v174 >= *(_QWORD *)(v177 - 16);
                      }
                    }
                  }
                }
                while (!v180);
                *(double *)v177 = result;
                *(_DWORD *)(v177 + 8) = v171;
                *(_DWORD *)(v177 + 12) = v172;
                *(_QWORD *)(v177 + 16) = v173;
                *(_QWORD *)(v177 + 24) = v174;
                *(_QWORD *)(v177 + 32) = v175;
              }
              v94 = (uint64_t)(v170 + 5);
              a1 = (uint64_t)v170;
            }
            while (v170 + 5 != a2);
          }
          return result;
        }
        if (v96)
          return result;
        v97 = 0;
        v98 = a1;
        do
        {
          v99 = v94;
          if (!USCSampleComparator::operator()(v94, v98))
            goto LABEL_155;
          v100 = *(_QWORD *)(v98 + 40);
          v101 = *(_DWORD *)(v98 + 48);
          v102 = *(_DWORD *)(v98 + 52);
          v104 = *(_QWORD *)(v98 + 56);
          v103 = *(_QWORD *)(v98 + 64);
          result = *(double *)(v98 + 72);
          v105 = *(_OWORD *)(v98 + 16);
          *(_OWORD *)v99 = *(_OWORD *)v98;
          *(_OWORD *)(v99 + 16) = v105;
          v106 = a1;
          *(_QWORD *)(v99 + 32) = *(_QWORD *)(v98 + 32);
          if (v98 == a1)
            goto LABEL_154;
          v107 = v97;
          while (1)
          {
            v108 = a1 + v107;
            v109 = (_DWORD *)(a1 + v107 - 40);
            v110 = *(_DWORD *)(a1 + v107 - 28);
            v111 = v102 >= v110;
            if (v102 == v110)
            {
              v112 = *(_DWORD *)(v108 - 8);
              v111 = LODWORD(result) >= v112;
              if (LODWORD(result) == v112)
              {
                v111 = v100 >= *v109;
                if ((_DWORD)v100 == *v109)
                {
                  v113 = *(_DWORD *)(a1 + v107 - 32);
                  v111 = v101 >= v113;
                  if (v101 == v113)
                  {
                    if (v103 >= *(_QWORD *)(a1 + v107 - 16))
                    {
                      v106 = a1 + v107;
                      goto LABEL_154;
                    }
                    goto LABEL_151;
                  }
                }
              }
            }
            if (v111)
              break;
LABEL_151:
            v98 -= 40;
            v114 = *(_OWORD *)(a1 + v107 - 24);
            *(_OWORD *)v108 = *(_OWORD *)v109;
            *(_OWORD *)(v108 + 16) = v114;
            *(_QWORD *)(v108 + 32) = *(_QWORD *)(a1 + v107 - 8);
            v107 -= 40;
            if (!v107)
            {
              v106 = a1;
              goto LABEL_154;
            }
          }
          v106 = v98;
LABEL_154:
          *(_QWORD *)v106 = v100;
          *(_DWORD *)(v106 + 8) = v101;
          *(_DWORD *)(v106 + 12) = v102;
          *(_QWORD *)(v106 + 16) = v104;
          *(_QWORD *)(v106 + 24) = v103;
          *(double *)(v106 + 32) = result;
LABEL_155:
          v94 = v99 + 40;
          v97 += 40;
          v98 = v99;
        }
        while ((double *)(v99 + 40) != a2);
        return result;
    }
  }
}

  v8 = a2 - 7;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v9) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v58 = *(a2 - 7);
        v77 = v58 == *(_DWORD *)v9;
        v59 = v58 < *(_DWORD *)v9;
        if (v77)
          v59 = *(a2 - 2) < *(_DWORD *)(v9 + 20);
        if (v59)
        {
          *(_OWORD *)&v151[12] = *(_OWORD *)(v9 + 12);
          *(_OWORD *)v151 = *(_OWORD *)v9;
          v60 = *(_OWORD *)v8;
          *(_OWORD *)(v9 + 12) = *((_OWORD *)a2 - 1);
          *(_OWORD *)v9 = v60;
          *((_OWORD *)a2 - 1) = *(_OWORD *)&v151[12];
          *(_OWORD *)v8 = *(_OWORD *)v151;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(v9, (int *)(v9 + 28), (uint64_t)(a2 - 7));
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(v9, v9 + 28, v9 + 56, (uint64_t)(a2 - 7));
        return;
      case 5:
        v61 = (_OWORD *)(v9 + 28);
        v62 = (_OWORD *)(v9 + 56);
        v63 = (_OWORD *)(v9 + 84);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(v9, v9 + 28, v9 + 56, v9 + 84);
        v64 = *(a2 - 7);
        v65 = *(_DWORD *)(v9 + 84);
        v77 = v64 == v65;
        v66 = v64 < v65;
        if (v77)
          v66 = *(a2 - 2) < *(_DWORD *)(v9 + 104);
        if (v66)
        {
          *(_OWORD *)v152 = *v63;
          *(_OWORD *)&v152[12] = *(_OWORD *)(v9 + 96);
          v67 = *(_OWORD *)v8;
          *(_OWORD *)(v9 + 96) = *((_OWORD *)a2 - 1);
          *v63 = v67;
          *((_OWORD *)a2 - 1) = *(_OWORD *)&v152[12];
          *(_OWORD *)v8 = *(_OWORD *)v152;
          v68 = *(_DWORD *)(v9 + 84);
          v69 = *(_DWORD *)(v9 + 56);
          v77 = v68 == v69;
          v70 = v68 < v69;
          if (v77)
            v70 = *(_DWORD *)(v9 + 104) < *(_DWORD *)(v9 + 76);
          if (v70)
          {
            *(_OWORD *)v153 = *v62;
            *(_OWORD *)&v153[12] = *(_OWORD *)(v9 + 68);
            *v62 = *v63;
            *(_OWORD *)(v9 + 68) = *(_OWORD *)(v9 + 96);
            *v63 = *(_OWORD *)v153;
            *(_OWORD *)(v9 + 96) = *(_OWORD *)&v153[12];
            v71 = *(_DWORD *)(v9 + 56);
            v72 = *(_DWORD *)(v9 + 28);
            v77 = v71 == v72;
            v73 = v71 < v72;
            if (v77)
              v73 = *(_DWORD *)(v9 + 76) < *(_DWORD *)(v9 + 48);
            if (v73)
            {
              *(_OWORD *)v154 = *v61;
              *(_OWORD *)&v154[12] = *(_OWORD *)(v9 + 40);
              *v61 = *v62;
              *(_OWORD *)(v9 + 40) = *(_OWORD *)(v9 + 68);
              *v62 = *(_OWORD *)v154;
              *(_OWORD *)(v9 + 68) = *(_OWORD *)&v154[12];
              v74 = *(_DWORD *)(v9 + 28);
              v77 = v74 == *(_DWORD *)v9;
              v75 = v74 < *(_DWORD *)v9;
              if (v77)
                v75 = *(_DWORD *)(v9 + 48) < *(_DWORD *)(v9 + 20);
              if (v75)
              {
                *(_OWORD *)&v155[12] = *(_OWORD *)(v9 + 12);
                *(_OWORD *)v155 = *(_OWORD *)v9;
                *(_OWORD *)v9 = *v61;
                *(_OWORD *)(v9 + 12) = *(_OWORD *)(v9 + 40);
                *v61 = *(_OWORD *)v155;
                *(_OWORD *)(v9 + 40) = *(_OWORD *)&v155[12];
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 671)
        {
          v76 = (unsigned int *)(v9 + 28);
          v77 = (unsigned int *)v9 == a2 || v76 == a2;
          v78 = v77;
          if ((a4 & 1) != 0)
          {
            if ((v78 & 1) == 0)
            {
              v79 = 0;
              v80 = v9;
              do
              {
                v81 = v76;
                v82 = *(_DWORD *)(v80 + 28);
                v83 = *(_DWORD *)(v80 + 48);
                v84 = v82 < *(_DWORD *)v80;
                if (v82 == *(_DWORD *)v80)
                  v84 = v83 < *(_DWORD *)(v80 + 20);
                if (v84)
                {
                  v156 = *(_OWORD *)(v80 + 32);
                  v85 = *(_DWORD *)(v80 + 52);
                  v86 = v79;
                  while (1)
                  {
                    v87 = v9 + v86;
                    *(_OWORD *)(v87 + 28) = *(_OWORD *)(v9 + v86);
                    *(_OWORD *)(v87 + 40) = *(_OWORD *)(v9 + v86 + 12);
                    if (!v86)
                      break;
                    v88 = *(_DWORD *)(v87 - 28);
                    v89 = v83 < *(_DWORD *)(v87 - 8);
                    v77 = v82 == v88;
                    v90 = v82 < v88;
                    if (!v77)
                      v89 = v90;
                    v86 -= 28;
                    if (!v89)
                    {
                      v91 = v9 + v86 + 28;
                      goto LABEL_115;
                    }
                  }
                  v91 = v9;
LABEL_115:
                  *(_DWORD *)v91 = v82;
                  *(_OWORD *)(v91 + 4) = v156;
                  *(_DWORD *)(v91 + 20) = v83;
                  *(_DWORD *)(v91 + 24) = v85;
                }
                v76 = v81 + 7;
                v79 += 28;
                v80 = (unint64_t)v81;
              }
              while (v81 + 7 != a2);
            }
          }
          else if ((v78 & 1) == 0)
          {
            do
            {
              v135 = (uint64_t)v76;
              v136 = *(_DWORD *)(a1 + 28);
              v137 = *(_DWORD *)(a1 + 48);
              v138 = v136 < *(_DWORD *)a1;
              if (v136 == *(_DWORD *)a1)
                v138 = v137 < *(_DWORD *)(a1 + 20);
              if (v138)
              {
                v159 = *(_OWORD *)(a1 + 32);
                v139 = *(_DWORD *)(a1 + 52);
                v140 = v135;
                do
                {
                  *(_OWORD *)v140 = *(_OWORD *)(v140 - 28);
                  *(_OWORD *)(v140 + 12) = *(_OWORD *)(v140 - 16);
                  v141 = *(_DWORD *)(v140 - 56);
                  v142 = *(_DWORD *)(v140 - 36);
                  v140 -= 28;
                  v143 = v137 < v142;
                  v77 = v136 == v141;
                  v144 = v136 < v141;
                  if (v77)
                    v144 = v143;
                }
                while (v144);
                *(_DWORD *)v140 = v136;
                *(_OWORD *)(v140 + 4) = v159;
                *(_DWORD *)(v140 + 20) = v137;
                *(_DWORD *)(v140 + 24) = v139;
              }
              v76 = (unsigned int *)(v135 + 28);
              a1 = v135;
            }
            while ((unsigned int *)(v135 + 28) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int *)v9 != a2)
          {
            v92 = (unint64_t)(v11 - 2) >> 1;
            v93 = v92;
            do
            {
              v94 = v93;
              if (v92 >= v93)
              {
                v95 = (2 * v93) | 1;
                v96 = v9 + 28 * v95;
                if (2 * v94 + 2 >= v11)
                {
                  v97 = *(_DWORD *)v96;
                }
                else
                {
                  v97 = *(_DWORD *)(v96 + 28);
                  v98 = *(_DWORD *)(v9 + 28 * v95 + 20) < *(_DWORD *)(v96 + 48);
                  if (*(_DWORD *)v96 != v97)
                    v98 = *(_DWORD *)v96 < v97;
                  if (v98)
                  {
                    v96 += 28;
                    v95 = 2 * v94 + 2;
                  }
                  else
                  {
                    v97 = *(_DWORD *)v96;
                  }
                }
                v99 = v9 + 28 * v94;
                v100 = *(_DWORD *)v99;
                v101 = *(_DWORD *)(v99 + 20);
                v77 = v97 == *(_DWORD *)v99;
                v102 = v97 < *(_DWORD *)v99;
                if (v77)
                  v102 = *(_DWORD *)(v96 + 20) < v101;
                if (!v102)
                {
                  v157 = *(_OWORD *)(v99 + 4);
                  v103 = *(_DWORD *)(v99 + 24);
                  do
                  {
                    v104 = (_OWORD *)v99;
                    v99 = v96;
                    v105 = *(_OWORD *)v96;
                    *(_OWORD *)((char *)v104 + 12) = *(_OWORD *)(v96 + 12);
                    *v104 = v105;
                    if (v92 < v95)
                      break;
                    v106 = (2 * v95) | 1;
                    v96 = v9 + 28 * v106;
                    v95 = 2 * v95 + 2;
                    if (v95 >= v11)
                    {
                      v107 = *(_DWORD *)v96;
                      v95 = v106;
                    }
                    else
                    {
                      v107 = *(_DWORD *)v96;
                      v108 = *(_DWORD *)(v96 + 28);
                      v109 = *(_DWORD *)(v9 + 28 * v106 + 20) < *(_DWORD *)(v96 + 48);
                      if (*(_DWORD *)v96 != v108)
                        v109 = *(_DWORD *)v96 < v108;
                      if (v109)
                      {
                        v107 = *(_DWORD *)(v96 + 28);
                        v96 += 28;
                      }
                      else
                      {
                        v95 = v106;
                      }
                    }
                    v110 = *(_DWORD *)(v96 + 20) < v101;
                    v77 = v107 == v100;
                    v111 = v107 < v100;
                    if (!v77)
                      v110 = v111;
                  }
                  while (!v110);
                  *(_DWORD *)v99 = v100;
                  *(_OWORD *)(v99 + 4) = v157;
                  *(_DWORD *)(v99 + 20) = v101;
                  *(_DWORD *)(v99 + 24) = v103;
                }
              }
              v93 = v94 - 1;
            }
            while (v94);
            v112 = v10 / 0x1CuLL;
            do
            {
              v113 = 0;
              *(_OWORD *)&v158[12] = *(_OWORD *)(v9 + 12);
              *(_OWORD *)v158 = *(_OWORD *)v9;
              v114 = (_OWORD *)v9;
              do
              {
                v115 = v113 + 1;
                v116 = (unsigned int *)v114 + 7 * v113 + 7;
                v117 = (2 * v113) | 1;
                v118 = 2 * v113 + 2;
                if (v118 < v112)
                {
                  v119 = v116[7];
                  v120 = *((_DWORD *)v114 + 7 * v115 + 5) < v116[12];
                  v77 = *v116 == v119;
                  v121 = *v116 < v119;
                  if (!v77)
                    v120 = v121;
                  if (v120)
                  {
                    v116 += 7;
                    v117 = v118;
                  }
                }
                v122 = *(_OWORD *)v116;
                *(_OWORD *)((char *)v114 + 12) = *(_OWORD *)(v116 + 3);
                *v114 = v122;
                v114 = v116;
                v113 = v117;
              }
              while (v117 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
              a2 -= 7;
              if (v116 == a2)
              {
                *(_OWORD *)(v116 + 3) = *(_OWORD *)&v158[12];
                *(_OWORD *)v116 = *(_OWORD *)v158;
              }
              else
              {
                v123 = *(_OWORD *)a2;
                *(_OWORD *)(v116 + 3) = *(_OWORD *)(a2 + 3);
                *(_OWORD *)v116 = v123;
                *(_OWORD *)(a2 + 3) = *(_OWORD *)&v158[12];
                *(_OWORD *)a2 = *(_OWORD *)v158;
                v124 = (uint64_t)v116 - v9 + 28;
                if (v124 >= 29)
                {
                  v125 = (v124 / 0x1CuLL - 2) >> 1;
                  v126 = v9 + 28 * v125;
                  v127 = *v116;
                  v128 = v116[5];
                  v129 = *(_DWORD *)v126 < *v116;
                  if (*(_DWORD *)v126 == *v116)
                    v129 = *(_DWORD *)(v126 + 20) < v128;
                  if (v129)
                  {
                    v147 = *(_OWORD *)(v116 + 1);
                    v130 = v116[6];
                    do
                    {
                      v131 = v116;
                      v116 = (unsigned int *)v126;
                      v132 = *(_OWORD *)v126;
                      *(_OWORD *)(v131 + 3) = *(_OWORD *)(v126 + 12);
                      *(_OWORD *)v131 = v132;
                      if (!v125)
                        break;
                      v125 = (v125 - 1) >> 1;
                      v126 = v9 + 28 * v125;
                      v133 = *(_DWORD *)v126 < v127;
                      if (*(_DWORD *)v126 == v127)
                        v133 = *(_DWORD *)(v126 + 20) < v128;
                    }
                    while (v133);
                    *v116 = v127;
                    *(_OWORD *)(v116 + 1) = v147;
                    v116[5] = v128;
                    v116[6] = v130;
                  }
                }
              }
            }
            while (v112-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 28 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xE01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1 + 28 * v12, (int *)a1, (uint64_t)(a2 - 7));
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, (int *)(a1 + 28 * v12), (uint64_t)(a2 - 7));
          v14 = 28 * v12;
          v15 = (int *)(28 * v12 + a1 - 28);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1 + 28, v15, (uint64_t)(a2 - 14));
          v16 = (int *)(a1 + 28 + v14);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1 + 56, v16, (uint64_t)(a2 - 21));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>((uint64_t)v15, (int *)v13, (uint64_t)v16);
          *(_OWORD *)&v148[12] = *(_OWORD *)(a1 + 12);
          *(_OWORD *)v148 = *(_OWORD *)a1;
          v17 = *(_OWORD *)v13;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(v13 + 12);
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(v13 + 12) = *(_OWORD *)&v148[12];
          *(_OWORD *)v13 = *(_OWORD *)v148;
        }
        --a3;
        v18 = *(_DWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v20 = *(_DWORD *)(a1 - 28);
          v19 = *(_DWORD *)(a1 + 20);
          v77 = v20 == v18;
          v21 = v20 < v18;
          if (v77)
            v21 = *(_DWORD *)(a1 - 8) < v19;
          if (v21)
            goto LABEL_13;
          v146 = *(_OWORD *)(a1 + 4);
          v40 = *(a2 - 7);
          v77 = v18 == v40;
          v41 = v18 < v40;
          if (v77)
            v41 = v19 < *(a2 - 2);
          if (v41)
          {
            v9 = a1;
            do
            {
              v42 = *(_DWORD *)(v9 + 28);
              v9 += 28;
              v43 = v18 < v42;
              if (v18 == v42)
                v43 = v19 < *(_DWORD *)(v9 + 20);
            }
            while (!v43);
          }
          else
          {
            v44 = (unsigned int *)(a1 + 28);
            do
            {
              v9 = (unint64_t)v44;
              if (v44 >= a2)
                break;
              v45 = *v44;
              v46 = v19 < *(_DWORD *)(v9 + 20);
              v77 = v18 == v45;
              v47 = v18 < v45;
              if (!v77)
                v46 = v47;
              v44 = (unsigned int *)(v9 + 28);
            }
            while (!v46);
          }
          v48 = a2;
          if (v9 < (unint64_t)a2)
          {
            v48 = a2;
            do
            {
              v49 = *(v48 - 7);
              v48 -= 7;
              v50 = v18 < v49;
              if (v18 == v49)
                v50 = v19 < v48[5];
            }
            while (v50);
          }
          v51 = *(_DWORD *)(a1 + 24);
          while (v9 < (unint64_t)v48)
          {
            *(_OWORD *)&v150[12] = *(_OWORD *)(v9 + 12);
            *(_OWORD *)v150 = *(_OWORD *)v9;
            v52 = *(_OWORD *)v48;
            *(_OWORD *)(v9 + 12) = *(_OWORD *)(v48 + 3);
            *(_OWORD *)v9 = v52;
            *(_OWORD *)(v48 + 3) = *(_OWORD *)&v150[12];
            *(_OWORD *)v48 = *(_OWORD *)v150;
            do
            {
              v53 = *(_DWORD *)(v9 + 28);
              v9 += 28;
              v54 = v18 < v53;
              if (v18 == v53)
                v54 = v19 < *(_DWORD *)(v9 + 20);
            }
            while (!v54);
            do
            {
              v55 = *(v48 - 7);
              v48 -= 7;
              v56 = v18 < v55;
              if (v18 == v55)
                v56 = v19 < v48[5];
            }
            while (v56);
          }
          if (v9 - 28 != a1)
          {
            v57 = *(_OWORD *)(v9 - 28);
            *(_OWORD *)(a1 + 12) = *(_OWORD *)(v9 - 16);
            *(_OWORD *)a1 = v57;
          }
          a4 = 0;
          *(_DWORD *)(v9 - 28) = v18;
          *(_OWORD *)(v9 - 24) = v146;
          *(_DWORD *)(v9 - 8) = v19;
          *(_DWORD *)(v9 - 4) = v51;
          continue;
        }
        v19 = *(_DWORD *)(a1 + 20);
LABEL_13:
        v145 = *(_OWORD *)(a1 + 4);
        v22 = *(_DWORD *)(a1 + 24);
        v23 = a1;
        do
        {
          v24 = v23;
          v25 = *(_DWORD *)(v23 + 28);
          v23 += 28;
          v26 = v25 < v18;
          if (v25 == v18)
            v26 = *(_DWORD *)(v24 + 48) < v19;
        }
        while (v26);
        v27 = a2;
        if (v24 == a1)
        {
          v27 = a2;
          do
          {
            if (v23 >= (unint64_t)v27)
              break;
            v30 = *(v27 - 7);
            v27 -= 7;
            v31 = v30 < v18;
            if (v30 == v18)
              v31 = v27[5] < v19;
          }
          while (!v31);
        }
        else
        {
          do
          {
            v28 = *(v27 - 7);
            v27 -= 7;
            v29 = v28 < v18;
            if (v28 == v18)
              v29 = v27[5] < v19;
          }
          while (!v29);
        }
        v9 = v23;
        if (v23 < (unint64_t)v27)
        {
          v32 = (unint64_t)v27;
          do
          {
            *(_OWORD *)v149 = *(_OWORD *)v9;
            *(_OWORD *)&v149[12] = *(_OWORD *)(v9 + 12);
            v33 = *(_OWORD *)v32;
            *(_OWORD *)(v9 + 12) = *(_OWORD *)(v32 + 12);
            *(_OWORD *)v9 = v33;
            *(_OWORD *)(v32 + 12) = *(_OWORD *)&v149[12];
            *(_OWORD *)v32 = *(_OWORD *)v149;
            do
            {
              v34 = *(_DWORD *)(v9 + 28);
              v9 += 28;
              v35 = v34 < v18;
              if (v34 == v18)
                v35 = *(_DWORD *)(v9 + 20) < v19;
            }
            while (v35);
            do
            {
              v36 = *(_DWORD *)(v32 - 28);
              v32 -= 28;
              v37 = v36 < v18;
              if (v36 == v18)
                v37 = *(_DWORD *)(v32 + 20) < v19;
            }
            while (!v37);
          }
          while (v9 < v32);
        }
        if (v9 - 28 != a1)
        {
          v38 = *(_OWORD *)(v9 - 28);
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(v9 - 16);
          *(_OWORD *)a1 = v38;
        }
        *(_DWORD *)(v9 - 28) = v18;
        *(_OWORD *)(v9 - 24) = v145;
        *(_DWORD *)(v9 - 8) = v19;
        *(_DWORD *)(v9 - 4) = v22;
        if (v23 < (unint64_t)v27)
        {
LABEL_42:
          std::__introsort<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *,false>(a1, v9 - 28, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, v9 - 28);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(v9, (uint64_t)a2))
        {
          if (v39)
            continue;
          goto LABEL_42;
        }
        a2 = (unsigned int *)(v9 - 28);
        if (!v39)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__int128 *)(a2 - 40);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v10 + 32))
        {
          v134 = *(_QWORD *)(v10 + 32);
          v119 = *(_OWORD *)v10;
          v127 = *(_OWORD *)(v10 + 16);
          v53 = *v9;
          v54 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v10 + 32) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v10 = v53;
          *(_OWORD *)(v10 + 16) = v54;
          result = *(double *)&v119;
          *(_QWORD *)(a2 - 8) = v134;
          *v9 = v119;
          *(_OWORD *)(a2 - 24) = v127;
        }
        return result;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)v10, (__int128 *)(v10 + 40), (__int128 *)(a2 - 40));
        return result;
      case 4:
        *(_QWORD *)&result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v10, v10 + 40, v10 + 80, a2 - 40).n128_u64[0];
        return result;
      case 5:
        *(_QWORD *)&result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40).n128_u64[0];
        return result;
      default:
        if (v11 <= 959)
        {
          v55 = (_OWORD *)(v10 + 40);
          v57 = v10 == a2 || v55 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = (_DWORD *)v10;
              do
              {
                v60 = v55;
                v61 = v59[18];
                if (v61 < v59[8])
                {
                  v120 = *v60;
                  v128 = v60[1];
                  v62 = v59[19];
                  v63 = v58;
                  while (1)
                  {
                    v64 = v10 + v63;
                    v65 = *(_OWORD *)(v10 + v63 + 16);
                    *(_OWORD *)(v64 + 40) = *(_OWORD *)(v10 + v63);
                    *(_OWORD *)(v64 + 56) = v65;
                    *(_QWORD *)(v64 + 72) = *(_QWORD *)(v10 + v63 + 32);
                    if (!v63)
                      break;
                    v63 -= 40;
                    if (v61 >= *(_DWORD *)(v64 - 8))
                    {
                      v66 = v10 + v63 + 40;
                      goto LABEL_74;
                    }
                  }
                  v66 = v10;
LABEL_74:
                  result = *(double *)&v120;
                  *(_OWORD *)v66 = v120;
                  *(_OWORD *)(v66 + 16) = v128;
                  *(_DWORD *)(v66 + 32) = v61;
                  *(_DWORD *)(v66 + 36) = v62;
                }
                v55 = (_OWORD *)((char *)v60 + 40);
                v58 += 40;
                v59 = v60;
              }
              while ((_OWORD *)((char *)v60 + 40) != (_OWORD *)a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v105 = v55;
              v106 = *(_DWORD *)(a1 + 72);
              if (v106 < *(_DWORD *)(a1 + 32))
              {
                v123 = *v55;
                v131 = v55[1];
                v107 = *(_DWORD *)(a1 + 76);
                v108 = v105;
                do
                {
                  v109 = *(_OWORD *)((char *)v108 - 24);
                  *v108 = *(_OWORD *)((char *)v108 - 40);
                  v108[1] = v109;
                  *((_QWORD *)v108 + 4) = *((_QWORD *)v108 - 1);
                  v110 = *((_DWORD *)v108 - 12);
                  v108 = (_OWORD *)((char *)v108 - 40);
                }
                while (v106 < v110);
                result = *(double *)&v123;
                *v108 = v123;
                v108[1] = v131;
                *((_DWORD *)v108 + 8) = v106;
                *((_DWORD *)v108 + 9) = v107;
              }
              v55 = (_OWORD *)((char *)v105 + 40);
              a1 = (uint64_t)v105;
            }
            while ((_OWORD *)((char *)v105 + 40) != (_OWORD *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v67 = (unint64_t)(v12 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v10 + 40 * v70;
                if (2 * v69 + 2 < v12)
                {
                  v72 = *(_DWORD *)(v10 + 40 * v70 + 32);
                  v73 = *(_DWORD *)(v71 + 72);
                  v71 += 40 * (v72 < v73);
                  if (v72 < v73)
                    v70 = 2 * v69 + 2;
                }
                v74 = *(_DWORD *)(v10 + 40 * v69 + 32);
                if (*(_DWORD *)(v71 + 32) >= v74)
                {
                  v75 = v10 + 40 * v69;
                  v121 = *(_OWORD *)v75;
                  v129 = *(_OWORD *)(v75 + 16);
                  v76 = *(_DWORD *)(v75 + 36);
                  do
                  {
                    v77 = v75;
                    v75 = v71;
                    v78 = *(_OWORD *)v71;
                    v79 = *(_OWORD *)(v71 + 16);
                    *(_QWORD *)(v77 + 32) = *(_QWORD *)(v71 + 32);
                    *(_OWORD *)v77 = v78;
                    *(_OWORD *)(v77 + 16) = v79;
                    if (v67 < v70)
                      break;
                    v80 = (2 * v70) | 1;
                    v71 = v10 + 40 * v80;
                    v81 = 2 * v70 + 2;
                    if (v81 < v12)
                    {
                      v82 = *(_DWORD *)(v10 + 40 * v80 + 32);
                      v83 = *(_DWORD *)(v71 + 72);
                      v71 += 40 * (v82 < v83);
                      if (v82 < v83)
                        v80 = v81;
                    }
                    v70 = v80;
                  }
                  while (*(_DWORD *)(v71 + 32) >= v74);
                  *(_OWORD *)v75 = v121;
                  *(_OWORD *)(v75 + 16) = v129;
                  *(_DWORD *)(v75 + 32) = v74;
                  *(_DWORD *)(v75 + 36) = v76;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v84 = v11 / 0x28uLL;
            do
            {
              v85 = 0;
              v135 = *(_QWORD *)(v10 + 32);
              v122 = *(_OWORD *)v10;
              v130 = *(_OWORD *)(v10 + 16);
              v86 = v10;
              do
              {
                v87 = v85 + 1;
                v88 = v86 + 40 * (v85 + 1);
                v89 = (2 * v85) | 1;
                v90 = 2 * v85 + 2;
                if (v90 < v84)
                {
                  v91 = *(_DWORD *)(v86 + 40 * v87 + 32);
                  v92 = *(_DWORD *)(v88 + 72);
                  v88 += 40 * (v91 < v92);
                  if (v91 < v92)
                    v89 = v90;
                }
                v93 = *(_OWORD *)v88;
                v94 = *(_OWORD *)(v88 + 16);
                *(_QWORD *)(v86 + 32) = *(_QWORD *)(v88 + 32);
                *(_OWORD *)v86 = v93;
                *(_OWORD *)(v86 + 16) = v94;
                v86 = v88;
                v85 = v89;
              }
              while (v89 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
              a2 -= 40;
              if (v88 == a2)
              {
                result = *(double *)&v122;
                *(_QWORD *)(v88 + 32) = v135;
                *(_OWORD *)v88 = v122;
                *(_OWORD *)(v88 + 16) = v130;
              }
              else
              {
                v95 = *(_OWORD *)a2;
                v96 = *(_OWORD *)(a2 + 16);
                *(_QWORD *)(v88 + 32) = *(_QWORD *)(a2 + 32);
                *(_OWORD *)v88 = v95;
                *(_OWORD *)(v88 + 16) = v96;
                result = *(double *)&v122;
                *(_QWORD *)(a2 + 32) = v135;
                *(_OWORD *)a2 = v122;
                *(_OWORD *)(a2 + 16) = v130;
                v97 = v88 - v10 + 40;
                if (v97 >= 41)
                {
                  v98 = (unint64_t)(-2 - 0x3333333333333333 * (v97 >> 3)) >> 1;
                  v99 = *(_DWORD *)(v88 + 32);
                  if (*(_DWORD *)(v10 + 40 * v98 + 32) < v99)
                  {
                    v113 = *(_OWORD *)v88;
                    v116 = *(_OWORD *)(v88 + 16);
                    v100 = *(_DWORD *)(v88 + 36);
                    do
                    {
                      v101 = v88;
                      v88 = v10 + 40 * v98;
                      v102 = *(_OWORD *)v88;
                      v103 = *(_OWORD *)(v88 + 16);
                      *(_QWORD *)(v101 + 32) = *(_QWORD *)(v88 + 32);
                      *(_OWORD *)v101 = v102;
                      *(_OWORD *)(v101 + 16) = v103;
                      if (!v98)
                        break;
                      v98 = (v98 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v10 + 40 * v98 + 32) < v99);
                    result = *(double *)&v113;
                    *(_OWORD *)v88 = v113;
                    *(_OWORD *)(v88 + 16) = v116;
                    *(_DWORD *)(v88 + 32) = v99;
                    *(_DWORD *)(v88 + 36) = v100;
                  }
                }
              }
            }
            while (v84-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = v10 + 40 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x1401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)v14, (__int128 *)a1, (__int128 *)(a2 - 40));
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)a1, (__int128 *)v14, (__int128 *)(a2 - 40));
          v15 = 5 * v13;
          v16 = (__int128 *)(a1 + 40 * v13 - 40);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)(a1 + 40), v16, (__int128 *)(a2 - 80));
          v17 = (__int128 *)(a1 + 40 + 8 * v15);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)(a1 + 80), v17, (__int128 *)(a2 - 120));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v16, (__int128 *)v14, v17);
          v132 = *(_QWORD *)(a1 + 32);
          v117 = *(_OWORD *)a1;
          v124 = *(_OWORD *)(a1 + 16);
          v18 = *(_OWORD *)v14;
          v19 = *(_OWORD *)(v14 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v14 + 32);
          *(_OWORD *)a1 = v18;
          *(_OWORD *)(a1 + 16) = v19;
          *(_QWORD *)(v14 + 32) = v132;
          *(_OWORD *)v14 = v117;
          *(_OWORD *)(v14 + 16) = v124;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_DWORD *)(a1 - 8) >= *(_DWORD *)(a1 + 32))
        {
          v112 = *(_OWORD *)a1;
          v115 = *(_OWORD *)(a1 + 16);
          result = *(double *)(a1 + 32);
          if (LODWORD(result) >= *(_DWORD *)(a2 - 8))
          {
            v41 = a1 + 40;
            do
            {
              v10 = v41;
              if (v41 >= a2)
                break;
              v42 = *(_DWORD *)(v41 + 32);
              v41 += 40;
            }
            while (LODWORD(result) >= v42);
          }
          else
          {
            v39 = a1;
            do
            {
              v10 = v39 + 40;
              v40 = *(_DWORD *)(v39 + 72);
              v39 += 40;
            }
            while (LODWORD(result) >= v40);
          }
          v43 = a2;
          if (v10 < a2)
          {
            v44 = a2;
            do
            {
              v43 = v44 - 40;
              v45 = *(_DWORD *)(v44 - 8);
              v44 -= 40;
            }
            while (LODWORD(result) < v45);
          }
          while (v10 < v43)
          {
            v133 = *(_QWORD *)(v10 + 32);
            v118 = *(_OWORD *)v10;
            v126 = *(_OWORD *)(v10 + 16);
            v46 = *(_OWORD *)v43;
            v47 = *(_OWORD *)(v43 + 16);
            *(_QWORD *)(v10 + 32) = *(_QWORD *)(v43 + 32);
            *(_OWORD *)v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(_QWORD *)(v43 + 32) = v133;
            *(_OWORD *)v43 = v118;
            *(_OWORD *)(v43 + 16) = v126;
            do
            {
              v48 = *(_DWORD *)(v10 + 72);
              v10 += 40;
            }
            while (LODWORD(result) >= v48);
            do
            {
              v49 = *(_DWORD *)(v43 - 8);
              v43 -= 40;
            }
            while (LODWORD(result) < v49);
          }
          v50 = (__int128 *)(v10 - 40);
          if (v10 - 40 != a1)
          {
            v51 = *v50;
            v52 = *(_OWORD *)(v10 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v51;
            *(_OWORD *)(a1 + 16) = v52;
          }
          a4 = 0;
          *v50 = v112;
          *(_OWORD *)(v10 - 24) = v115;
          *(double *)(v10 - 8) = result;
          continue;
        }
        v111 = *(_OWORD *)a1;
        v114 = *(_OWORD *)(a1 + 16);
        v20 = *(_QWORD *)(a1 + 32);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 40;
        }
        while (*(_DWORD *)(v22 + 72) < v20);
        v23 = a2;
        if (v22 == a1)
        {
          v26 = a2;
          while (v21 < v26)
          {
            v24 = v26 - 40;
            v27 = *(_DWORD *)(v26 - 8);
            v26 -= 40;
            if (v27 < v20)
              goto LABEL_20;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 40;
            v25 = *(_DWORD *)(v23 - 8);
            v23 -= 40;
          }
          while (v25 >= v20);
        }
LABEL_20:
        v10 = v21;
        if (v21 < v24)
        {
          v28 = v24;
          do
          {
            v29 = *(_OWORD *)v10;
            v125 = *(_OWORD *)(v10 + 16);
            v30 = *(_QWORD *)(v10 + 32);
            v32 = *(_OWORD *)v28;
            v31 = *(_OWORD *)(v28 + 16);
            *(_QWORD *)(v10 + 32) = *(_QWORD *)(v28 + 32);
            *(_OWORD *)v10 = v32;
            *(_OWORD *)(v10 + 16) = v31;
            *(_QWORD *)(v28 + 32) = v30;
            *(_OWORD *)v28 = v29;
            *(_OWORD *)(v28 + 16) = v125;
            do
            {
              v33 = *(_DWORD *)(v10 + 72);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              v34 = *(_DWORD *)(v28 - 8);
              v28 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v28);
        }
        v35 = (__int128 *)(v10 - 40);
        if (v10 - 40 != a1)
        {
          v36 = *v35;
          v37 = *(_OWORD *)(v10 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
          *(_OWORD *)a1 = v36;
          *(_OWORD *)(a1 + 16) = v37;
        }
        *v35 = v111;
        *(_OWORD *)(v10 - 24) = v114;
        *(_QWORD *)(v10 - 8) = v20;
        if (v21 < v24)
        {
LABEL_31:
          std::__introsort<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>(a1, v10 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v38 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, v10 - 40);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v10, a2))
        {
          if (v38)
            continue;
          goto LABEL_31;
        }
        a2 = v10 - 40;
        if (!v38)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = (__int128 *)(a2 - 40);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v9 + 32))
        {
          v154 = *(_QWORD *)(v9 + 32);
          v136 = *(_OWORD *)v9;
          v145 = *(_OWORD *)(v9 + 16);
          v54 = *v8;
          v55 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v9 = v54;
          *(_OWORD *)(v9 + 16) = v55;
          *(_QWORD *)(a2 - 8) = v154;
          *v8 = v136;
          *(_OWORD *)(a2 - 24) = v145;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)v9, (__int128 *)(v9 + 40), (__int128 *)(a2 - 40));
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v9, v9 + 40, v9 + 80, a2 - 40);
        return;
      case 5:
        v56 = (__int128 *)(v9 + 40);
        v57 = (__int128 *)(v9 + 80);
        v58 = (__int128 *)(v9 + 120);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v9, v9 + 40, v9 + 80, v9 + 120);
        if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v9 + 152))
        {
          v59 = *v58;
          v146 = *(_OWORD *)(v9 + 136);
          v60 = *(_QWORD *)(v9 + 152);
          v62 = *v8;
          v61 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v9 + 152) = *(_QWORD *)(a2 - 8);
          *v58 = v62;
          *(_OWORD *)(v9 + 136) = v61;
          *(_QWORD *)(a2 - 8) = v60;
          *v8 = v59;
          *(_OWORD *)(a2 - 24) = v146;
          if (*(_DWORD *)(v9 + 152) < *(_DWORD *)(v9 + 112))
          {
            v63 = *(_QWORD *)(v9 + 112);
            v65 = *v57;
            v64 = *(_OWORD *)(v9 + 96);
            v66 = *(_OWORD *)(v9 + 136);
            *v57 = *v58;
            *(_OWORD *)(v9 + 96) = v66;
            *(_QWORD *)(v9 + 112) = *(_QWORD *)(v9 + 152);
            *v58 = v65;
            *(_OWORD *)(v9 + 136) = v64;
            *(_QWORD *)(v9 + 152) = v63;
            if (*(_DWORD *)(v9 + 112) < *(_DWORD *)(v9 + 72))
            {
              v67 = *(_QWORD *)(v9 + 72);
              v69 = *v56;
              v68 = *(_OWORD *)(v9 + 56);
              v70 = *(_OWORD *)(v9 + 96);
              *v56 = *v57;
              *(_OWORD *)(v9 + 56) = v70;
              *(_QWORD *)(v9 + 72) = *(_QWORD *)(v9 + 112);
              *v57 = v69;
              *(_OWORD *)(v9 + 96) = v68;
              *(_QWORD *)(v9 + 112) = v67;
              if (*(_DWORD *)(v9 + 72) < *(_DWORD *)(v9 + 32))
              {
                v155 = *(_QWORD *)(v9 + 32);
                v137 = *(_OWORD *)v9;
                v147 = *(_OWORD *)(v9 + 16);
                v71 = *(_OWORD *)(v9 + 56);
                *(_OWORD *)v9 = *v56;
                *(_OWORD *)(v9 + 16) = v71;
                *(_QWORD *)(v9 + 32) = *(_QWORD *)(v9 + 72);
                *v56 = v137;
                *(_OWORD *)(v9 + 56) = v147;
                *(_QWORD *)(v9 + 72) = v155;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 959)
        {
          v72 = (_OWORD *)(v9 + 40);
          v74 = v9 == a2 || v72 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v74)
            {
              v75 = 0;
              v76 = (_DWORD *)v9;
              do
              {
                v77 = v72;
                v78 = v76[18];
                if (v78 < v76[8])
                {
                  v138 = *v77;
                  v148 = v77[1];
                  v79 = v76[19];
                  v80 = v75;
                  while (1)
                  {
                    v81 = v9 + v80;
                    v82 = *(_OWORD *)(v9 + v80 + 16);
                    *(_OWORD *)(v81 + 40) = *(_OWORD *)(v9 + v80);
                    *(_OWORD *)(v81 + 56) = v82;
                    *(_QWORD *)(v81 + 72) = *(_QWORD *)(v9 + v80 + 32);
                    if (!v80)
                      break;
                    v80 -= 40;
                    if (v78 >= *(_DWORD *)(v81 - 8))
                    {
                      v83 = v9 + v80 + 40;
                      goto LABEL_79;
                    }
                  }
                  v83 = v9;
LABEL_79:
                  *(_OWORD *)v83 = v138;
                  *(_OWORD *)(v83 + 16) = v148;
                  *(_DWORD *)(v83 + 32) = v78;
                  *(_DWORD *)(v83 + 36) = v79;
                }
                v72 = (_OWORD *)((char *)v77 + 40);
                v75 += 40;
                v76 = v77;
              }
              while ((_OWORD *)((char *)v77 + 40) != (_OWORD *)a2);
            }
          }
          else if (!v74)
          {
            do
            {
              v122 = v72;
              v123 = *(_DWORD *)(a1 + 72);
              if (v123 < *(_DWORD *)(a1 + 32))
              {
                v141 = *v72;
                v151 = v72[1];
                v124 = *(_DWORD *)(a1 + 76);
                v125 = v122;
                do
                {
                  v126 = *(_OWORD *)((char *)v125 - 24);
                  *v125 = *(_OWORD *)((char *)v125 - 40);
                  v125[1] = v126;
                  *((_QWORD *)v125 + 4) = *((_QWORD *)v125 - 1);
                  v127 = *((_DWORD *)v125 - 12);
                  v125 = (_OWORD *)((char *)v125 - 40);
                }
                while (v123 < v127);
                *v125 = v141;
                v125[1] = v151;
                *((_DWORD *)v125 + 8) = v123;
                *((_DWORD *)v125 + 9) = v124;
              }
              v72 = (_OWORD *)((char *)v122 + 40);
              a1 = (uint64_t)v122;
            }
            while ((_OWORD *)((char *)v122 + 40) != (_OWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v84 = (unint64_t)(v11 - 2) >> 1;
            v85 = v84;
            do
            {
              v86 = v85;
              if (v84 >= v85)
              {
                v87 = (2 * v85) | 1;
                v88 = v9 + 40 * v87;
                if (2 * v86 + 2 < v11)
                {
                  v89 = *(_DWORD *)(v9 + 40 * v87 + 32);
                  v90 = *(_DWORD *)(v88 + 72);
                  v88 += 40 * (v89 < v90);
                  if (v89 < v90)
                    v87 = 2 * v86 + 2;
                }
                v91 = *(_DWORD *)(v9 + 40 * v86 + 32);
                if (*(_DWORD *)(v88 + 32) >= v91)
                {
                  v92 = v9 + 40 * v86;
                  v139 = *(_OWORD *)v92;
                  v149 = *(_OWORD *)(v92 + 16);
                  v93 = *(_DWORD *)(v92 + 36);
                  do
                  {
                    v94 = v92;
                    v92 = v88;
                    v95 = *(_OWORD *)v88;
                    v96 = *(_OWORD *)(v88 + 16);
                    *(_QWORD *)(v94 + 32) = *(_QWORD *)(v88 + 32);
                    *(_OWORD *)v94 = v95;
                    *(_OWORD *)(v94 + 16) = v96;
                    if (v84 < v87)
                      break;
                    v97 = (2 * v87) | 1;
                    v88 = v9 + 40 * v97;
                    v98 = 2 * v87 + 2;
                    if (v98 < v11)
                    {
                      v99 = *(_DWORD *)(v9 + 40 * v97 + 32);
                      v100 = *(_DWORD *)(v88 + 72);
                      v88 += 40 * (v99 < v100);
                      if (v99 < v100)
                        v97 = v98;
                    }
                    v87 = v97;
                  }
                  while (*(_DWORD *)(v88 + 32) >= v91);
                  *(_OWORD *)v92 = v139;
                  *(_OWORD *)(v92 + 16) = v149;
                  *(_DWORD *)(v92 + 32) = v91;
                  *(_DWORD *)(v92 + 36) = v93;
                }
              }
              v85 = v86 - 1;
            }
            while (v86);
            v101 = v10 / 0x28uLL;
            do
            {
              v102 = 0;
              v156 = *(_QWORD *)(v9 + 32);
              v140 = *(_OWORD *)v9;
              v150 = *(_OWORD *)(v9 + 16);
              v103 = v9;
              do
              {
                v104 = v102 + 1;
                v105 = v103 + 40 * (v102 + 1);
                v106 = (2 * v102) | 1;
                v107 = 2 * v102 + 2;
                if (v107 < v101)
                {
                  v108 = *(_DWORD *)(v103 + 40 * v104 + 32);
                  v109 = *(_DWORD *)(v105 + 72);
                  v105 += 40 * (v108 < v109);
                  if (v108 < v109)
                    v106 = v107;
                }
                v110 = *(_OWORD *)v105;
                v111 = *(_OWORD *)(v105 + 16);
                *(_QWORD *)(v103 + 32) = *(_QWORD *)(v105 + 32);
                *(_OWORD *)v103 = v110;
                *(_OWORD *)(v103 + 16) = v111;
                v103 = v105;
                v102 = v106;
              }
              while (v106 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
              a2 -= 40;
              if (v105 == a2)
              {
                *(_QWORD *)(v105 + 32) = v156;
                *(_OWORD *)v105 = v140;
                *(_OWORD *)(v105 + 16) = v150;
              }
              else
              {
                v112 = *(_OWORD *)a2;
                v113 = *(_OWORD *)(a2 + 16);
                *(_QWORD *)(v105 + 32) = *(_QWORD *)(a2 + 32);
                *(_OWORD *)v105 = v112;
                *(_OWORD *)(v105 + 16) = v113;
                *(_QWORD *)(a2 + 32) = v156;
                *(_OWORD *)a2 = v140;
                *(_OWORD *)(a2 + 16) = v150;
                v114 = v105 - v9 + 40;
                if (v114 >= 41)
                {
                  v115 = (v114 / 0x28uLL - 2) >> 1;
                  v116 = *(_DWORD *)(v105 + 32);
                  if (*(_DWORD *)(v9 + 40 * v115 + 32) < v116)
                  {
                    v130 = *(_OWORD *)v105;
                    v133 = *(_OWORD *)(v105 + 16);
                    v117 = *(_DWORD *)(v105 + 36);
                    do
                    {
                      v118 = v105;
                      v105 = v9 + 40 * v115;
                      v119 = *(_OWORD *)v105;
                      v120 = *(_OWORD *)(v105 + 16);
                      *(_QWORD *)(v118 + 32) = *(_QWORD *)(v105 + 32);
                      *(_OWORD *)v118 = v119;
                      *(_OWORD *)(v118 + 16) = v120;
                      if (!v115)
                        break;
                      v115 = (v115 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v9 + 40 * v115 + 32) < v116);
                    *(_OWORD *)v105 = v130;
                    *(_OWORD *)(v105 + 16) = v133;
                    *(_DWORD *)(v105 + 32) = v116;
                    *(_DWORD *)(v105 + 36) = v117;
                  }
                }
              }
            }
            while (v101-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 40 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x1401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)v13, (__int128 *)a1, (__int128 *)(a2 - 40));
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)a1, (__int128 *)v13, (__int128 *)(a2 - 40));
          v14 = 5 * v12;
          v15 = (__int128 *)(a1 + 40 * v12 - 40);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)(a1 + 40), v15, (__int128 *)(a2 - 80));
          v16 = (__int128 *)(a1 + 40 + 8 * v14);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)(a1 + 80), v16, (__int128 *)(a2 - 120));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v15, (__int128 *)v13, v16);
          v152 = *(_QWORD *)(a1 + 32);
          v134 = *(_OWORD *)a1;
          v142 = *(_OWORD *)(a1 + 16);
          v17 = *(_OWORD *)v13;
          v18 = *(_OWORD *)(v13 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 + 32);
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(a1 + 16) = v18;
          *(_QWORD *)(v13 + 32) = v152;
          *(_OWORD *)v13 = v134;
          *(_OWORD *)(v13 + 16) = v142;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(_DWORD *)(a1 + 32);
          if (*(_DWORD *)(a1 - 8) < v19)
            goto LABEL_11;
          v129 = *(_OWORD *)a1;
          v132 = *(_OWORD *)(a1 + 16);
          if (v19 >= *(_DWORD *)(a2 - 8))
          {
            v41 = a1 + 40;
            do
            {
              v9 = v41;
              if (v41 >= a2)
                break;
              v42 = *(_DWORD *)(v41 + 32);
              v41 += 40;
            }
            while (v19 >= v42);
          }
          else
          {
            v39 = a1;
            do
            {
              v9 = v39 + 40;
              v40 = *(_DWORD *)(v39 + 72);
              v39 += 40;
            }
            while (v19 >= v40);
          }
          v43 = a2;
          if (v9 < a2)
          {
            v44 = a2;
            do
            {
              v43 = v44 - 40;
              v45 = *(_DWORD *)(v44 - 8);
              v44 -= 40;
            }
            while (v19 < v45);
          }
          v46 = *(_DWORD *)(a1 + 36);
          while (v9 < v43)
          {
            v153 = *(_QWORD *)(v9 + 32);
            v135 = *(_OWORD *)v9;
            v144 = *(_OWORD *)(v9 + 16);
            v47 = *(_OWORD *)v43;
            v48 = *(_OWORD *)(v43 + 16);
            *(_QWORD *)(v9 + 32) = *(_QWORD *)(v43 + 32);
            *(_OWORD *)v9 = v47;
            *(_OWORD *)(v9 + 16) = v48;
            *(_QWORD *)(v43 + 32) = v153;
            *(_OWORD *)v43 = v135;
            *(_OWORD *)(v43 + 16) = v144;
            do
            {
              v49 = *(_DWORD *)(v9 + 72);
              v9 += 40;
            }
            while (v19 >= v49);
            do
            {
              v50 = *(_DWORD *)(v43 - 8);
              v43 -= 40;
            }
            while (v19 < v50);
          }
          v51 = (__int128 *)(v9 - 40);
          if (v9 - 40 != a1)
          {
            v52 = *v51;
            v53 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)a1 = v52;
            *(_OWORD *)(a1 + 16) = v53;
          }
          a4 = 0;
          *v51 = v129;
          *(_OWORD *)(v9 - 24) = v132;
          *(_DWORD *)(v9 - 8) = v19;
          *(_DWORD *)(v9 - 4) = v46;
          continue;
        }
        v19 = *(_DWORD *)(a1 + 32);
LABEL_11:
        v128 = *(_OWORD *)a1;
        v131 = *(_OWORD *)(a1 + 16);
        v20 = *(_DWORD *)(a1 + 36);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 40;
        }
        while (*(_DWORD *)(v22 + 72) < v19);
        v23 = a2;
        if (v22 == a1)
        {
          v26 = a2;
          while (v21 < v26)
          {
            v24 = v26 - 40;
            v27 = *(_DWORD *)(v26 - 8);
            v26 -= 40;
            if (v27 < v19)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 40;
            v25 = *(_DWORD *)(v23 - 8);
            v23 -= 40;
          }
          while (v25 >= v19);
        }
LABEL_21:
        v9 = v21;
        if (v21 < v24)
        {
          v28 = v24;
          do
          {
            v29 = *(_OWORD *)v9;
            v143 = *(_OWORD *)(v9 + 16);
            v30 = *(_QWORD *)(v9 + 32);
            v32 = *(_OWORD *)v28;
            v31 = *(_OWORD *)(v28 + 16);
            *(_QWORD *)(v9 + 32) = *(_QWORD *)(v28 + 32);
            *(_OWORD *)v9 = v32;
            *(_OWORD *)(v9 + 16) = v31;
            *(_QWORD *)(v28 + 32) = v30;
            *(_OWORD *)v28 = v29;
            *(_OWORD *)(v28 + 16) = v143;
            do
            {
              v33 = *(_DWORD *)(v9 + 72);
              v9 += 40;
            }
            while (v33 < v19);
            do
            {
              v34 = *(_DWORD *)(v28 - 8);
              v28 -= 40;
            }
            while (v34 >= v19);
          }
          while (v9 < v28);
        }
        v35 = (__int128 *)(v9 - 40);
        if (v9 - 40 != a1)
        {
          v36 = *v35;
          v37 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)a1 = v36;
          *(_OWORD *)(a1 + 16) = v37;
        }
        *v35 = v128;
        *(_OWORD *)(v9 - 24) = v131;
        *(_DWORD *)(v9 - 8) = v19;
        *(_DWORD *)(v9 - 4) = v20;
        if (v21 < v24)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper _processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:]::$_1::operator() const(std::queue<ProfileEvent>)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>(a1, v9 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v38 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper _processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:]::$_1::operator() const(std::queue<ProfileEvent>)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, v9 - 40);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper _processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:]::$_1::operator() const(std::queue<ProfileEvent>)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(v9, a2))
        {
          if (v38)
            continue;
          goto LABEL_32;
        }
        a2 = v9 - 40;
        if (!v38)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 24;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)v8 < *(_QWORD *)v9)
        {
          v107 = *(_QWORD *)(v9 + 16);
          v99 = *(_OWORD *)v9;
          v41 = *(_OWORD *)v8;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v9 = v41;
          *(_QWORD *)(a2 - 8) = v107;
          *(_OWORD *)v8 = v99;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((__int128 *)v9, (unint64_t *)(v9 + 24), (unint64_t *)(a2 - 24));
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(v9, (unint64_t *)(v9 + 24), (unint64_t *)(v9 + 48), a2 - 24);
        return;
      case 5:
        v42 = (__int128 *)(v9 + 24);
        v43 = (__int128 *)(v9 + 48);
        v44 = (__int128 *)(v9 + 72);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(v9, (unint64_t *)(v9 + 24), (unint64_t *)(v9 + 48), v9 + 72);
        if (*(_QWORD *)v8 < *(_QWORD *)(v9 + 72))
        {
          v45 = *v44;
          v46 = *(_QWORD *)(v9 + 88);
          v47 = *(_QWORD *)(v8 + 16);
          *v44 = *(_OWORD *)v8;
          *(_QWORD *)(v9 + 88) = v47;
          *(_QWORD *)(v8 + 16) = v46;
          *(_OWORD *)v8 = v45;
          if (*(_QWORD *)v44 < *(_QWORD *)v43)
          {
            v48 = *(_QWORD *)(v9 + 64);
            v49 = *v43;
            *v43 = *v44;
            *(_QWORD *)(v9 + 64) = *(_QWORD *)(v9 + 88);
            *v44 = v49;
            *(_QWORD *)(v9 + 88) = v48;
            if (*(_QWORD *)v43 < *(_QWORD *)v42)
            {
              v50 = *(_QWORD *)(v9 + 40);
              v51 = *v42;
              *v42 = *v43;
              *(_QWORD *)(v9 + 40) = *(_QWORD *)(v9 + 64);
              *v43 = v51;
              *(_QWORD *)(v9 + 64) = v50;
              if (*(_QWORD *)(v9 + 24) < *(_QWORD *)v9)
              {
                v108 = *(_QWORD *)(v9 + 16);
                v100 = *(_OWORD *)v9;
                *(_OWORD *)v9 = *v42;
                *(_QWORD *)(v9 + 16) = *(_QWORD *)(v9 + 40);
                *v42 = v100;
                *(_QWORD *)(v9 + 40) = v108;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 575)
        {
          v52 = v9 + 24;
          v54 = v9 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v9;
              do
              {
                v57 = v52;
                v58 = *(_QWORD *)(v56 + 24);
                if (v58 < *(_QWORD *)v56)
                {
                  v101 = *(_OWORD *)(v56 + 32);
                  v59 = v55;
                  while (1)
                  {
                    v60 = v9 + v59;
                    *(_OWORD *)(v60 + 24) = *(_OWORD *)(v9 + v59);
                    *(_QWORD *)(v60 + 40) = *(_QWORD *)(v9 + v59 + 16);
                    if (!v59)
                      break;
                    v59 -= 24;
                    if (v58 >= *(_QWORD *)(v60 - 24))
                    {
                      v61 = v9 + v59 + 24;
                      goto LABEL_75;
                    }
                  }
                  v61 = v9;
LABEL_75:
                  *(_QWORD *)v61 = v58;
                  *(_OWORD *)(v61 + 8) = v101;
                }
                v52 = v57 + 24;
                v55 += 24;
                v56 = v57;
              }
              while (v57 + 24 != a2);
            }
          }
          else if (!v54)
          {
            do
            {
              v91 = v52;
              v92 = *(_QWORD *)(a1 + 24);
              if (v92 < *(_QWORD *)a1)
              {
                v104 = *(_OWORD *)(a1 + 32);
                do
                {
                  *(_OWORD *)v52 = *(_OWORD *)(v52 - 24);
                  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v52 - 8);
                  v93 = *(_QWORD *)(v52 - 48);
                  v52 -= 24;
                }
                while (v92 < v93);
                *(_QWORD *)v52 = v92;
                *(_OWORD *)(v52 + 8) = v104;
              }
              v52 = v91 + 24;
              a1 = v91;
            }
            while (v91 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = (2 * v63) | 1;
                v66 = (unint64_t *)(v9 + 24 * v65);
                if (2 * v64 + 2 >= v11)
                {
                  v67 = *v66;
                }
                else
                {
                  v67 = v66[3];
                  v68 = *v66 >= v67;
                  if (*v66 > v67)
                    v67 = *v66;
                  if (!v68)
                  {
                    v66 += 3;
                    v65 = 2 * v64 + 2;
                  }
                }
                v69 = (unint64_t *)(v9 + 24 * v64);
                v70 = *v69;
                if (v67 >= *v69)
                {
                  v102 = *(_OWORD *)(v69 + 1);
                  do
                  {
                    v71 = v69;
                    v69 = v66;
                    v72 = *(_OWORD *)v66;
                    v71[2] = v66[2];
                    *(_OWORD *)v71 = v72;
                    if (v62 < v65)
                      break;
                    v73 = (2 * v65) | 1;
                    v66 = (unint64_t *)(v9 + 24 * v73);
                    v65 = 2 * v65 + 2;
                    if (v65 >= v11)
                    {
                      v74 = *v66;
                      v65 = v73;
                    }
                    else
                    {
                      v74 = *v66;
                      v75 = v66[3];
                      if (*v66 <= v75)
                        v74 = v66[3];
                      if (*v66 >= v75)
                        v65 = v73;
                      else
                        v66 += 3;
                    }
                  }
                  while (v74 >= v70);
                  *v69 = v70;
                  *(_OWORD *)(v69 + 1) = v102;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v76 = v10 / 0x18uLL;
            do
            {
              v77 = 0;
              v109 = *(_QWORD *)(v9 + 16);
              v103 = *(_OWORD *)v9;
              v78 = v9;
              do
              {
                v79 = v78 + 24 * v77 + 24;
                v80 = (2 * v77) | 1;
                v81 = 2 * v77 + 2;
                if (v81 < v76 && *(_QWORD *)v79 < *(_QWORD *)(v79 + 24))
                {
                  v79 += 24;
                  v80 = v81;
                }
                v82 = *(_OWORD *)v79;
                *(_QWORD *)(v78 + 16) = *(_QWORD *)(v79 + 16);
                *(_OWORD *)v78 = v82;
                v78 = v79;
                v77 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              a2 -= 24;
              if (v79 == a2)
              {
                *(_QWORD *)(v79 + 16) = v109;
                *(_OWORD *)v79 = v103;
              }
              else
              {
                v83 = *(_OWORD *)a2;
                *(_QWORD *)(v79 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v79 = v83;
                *(_QWORD *)(a2 + 16) = v109;
                *(_OWORD *)a2 = v103;
                v84 = v79 - v9 + 24;
                if (v84 >= 25)
                {
                  v85 = (v84 / 0x18uLL - 2) >> 1;
                  v86 = v9 + 24 * v85;
                  v87 = *(_QWORD *)v79;
                  if (*(_QWORD *)v86 < *(_QWORD *)v79)
                  {
                    v96 = *(_OWORD *)(v79 + 8);
                    do
                    {
                      v88 = v79;
                      v79 = v86;
                      v89 = *(_OWORD *)v86;
                      *(_QWORD *)(v88 + 16) = *(_QWORD *)(v86 + 16);
                      *(_OWORD *)v88 = v89;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                      v86 = v9 + 24 * v85;
                    }
                    while (*(_QWORD *)v86 < v87);
                    *(_QWORD *)v79 = v87;
                    *(_OWORD *)(v79 + 8) = v96;
                  }
                }
              }
            }
            while (v76-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unint64_t *)(v9 + 24 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((__int128 *)(a1 + 24 * v12), (unint64_t *)a1, (unint64_t *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((__int128 *)a1, (unint64_t *)(a1 + 24 * v12), (unint64_t *)(a2 - 24));
          v14 = 3 * v12;
          v15 = (unint64_t *)(a1 + 24 * v12 - 24);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((__int128 *)(a1 + 24), v15, (unint64_t *)(a2 - 48));
          v16 = (unint64_t *)(a1 + 24 + 8 * v14);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((__int128 *)(a1 + 48), v16, (unint64_t *)(a2 - 72));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>((__int128 *)v15, v13, v16);
          v105 = *(_QWORD *)(a1 + 16);
          v97 = *(_OWORD *)a1;
          v17 = v13[2];
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v17;
          v13[2] = v105;
          *(_OWORD *)v13 = v97;
        }
        --a3;
        v18 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 24) >= v18)
        {
          v95 = *(_OWORD *)(a1 + 8);
          if (v18 >= *(_QWORD *)v8)
          {
            v34 = a1 + 24;
            do
            {
              v9 = v34;
              if (v34 >= a2)
                break;
              v34 += 24;
            }
            while (v18 >= *(_QWORD *)v9);
          }
          else
          {
            v9 = a1;
            do
            {
              v33 = *(_QWORD *)(v9 + 24);
              v9 += 24;
            }
            while (v18 >= v33);
          }
          v35 = a2;
          if (v9 < a2)
          {
            v35 = a2;
            do
            {
              v36 = *(_QWORD *)(v35 - 24);
              v35 -= 24;
            }
            while (v18 < v36);
          }
          while (v9 < v35)
          {
            v106 = *(_QWORD *)(v9 + 16);
            v98 = *(_OWORD *)v9;
            v37 = *(_OWORD *)v35;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v35 + 16);
            *(_OWORD *)v9 = v37;
            *(_QWORD *)(v35 + 16) = v106;
            *(_OWORD *)v35 = v98;
            do
            {
              v38 = *(_QWORD *)(v9 + 24);
              v9 += 24;
            }
            while (v18 >= v38);
            do
            {
              v39 = *(_QWORD *)(v35 - 24);
              v35 -= 24;
            }
            while (v18 < v39);
          }
          if (v9 - 24 != a1)
          {
            v40 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)a1 = v40;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 24) = v18;
          *(_OWORD *)(v9 - 16) = v95;
          continue;
        }
        v94 = *(_OWORD *)(a1 + 8);
        v19 = a1;
        do
        {
          v20 = v19;
          v21 = *(_QWORD *)(v19 + 24);
          v19 += 24;
        }
        while (v21 < v18);
        v22 = a2;
        if (v20 == a1)
        {
          v22 = a2;
          do
          {
            if (v19 >= v22)
              break;
            v24 = *(_QWORD *)(v22 - 24);
            v22 -= 24;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            v23 = *(_QWORD *)(v22 - 24);
            v22 -= 24;
          }
          while (v23 >= v18);
        }
        v9 = v19;
        if (v19 < v22)
        {
          v25 = v22;
          do
          {
            v26 = *(_OWORD *)v9;
            v27 = *(_QWORD *)(v9 + 16);
            v28 = *(_QWORD *)(v25 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v25;
            *(_QWORD *)(v9 + 16) = v28;
            *(_QWORD *)(v25 + 16) = v27;
            *(_OWORD *)v25 = v26;
            do
            {
              v29 = *(_QWORD *)(v9 + 24);
              v9 += 24;
            }
            while (v29 < v18);
            do
            {
              v30 = *(_QWORD *)(v25 - 24);
              v25 -= 24;
            }
            while (v30 >= v18);
          }
          while (v9 < v25);
        }
        if (v9 - 24 != a1)
        {
          v31 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)a1 = v31;
        }
        *(_QWORD *)(v9 - 24) = v18;
        *(_OWORD *)(v9 - 16) = v94;
        if (v19 < v22)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *,false>(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(a1, v9 - 24);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PopulateResourceTrackingBufferV2(objc_object  {objcproto9MTLBuffer}*,GTMTLIndirectResources const&,apr_pool_t *)::$_0 &,GTMTLReplayResourceTrackingTracingBufferEntryV2 *>(v9, a2))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = v9 - 24;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v62 = a2;
  v63 = a2 - 1;
  v60 = a2 - 3;
  v61 = a2 - 2;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if ((*a3)(v63, v10))
        {
          v66 = *v10;
          *v10 = *v63;
          result = *(double *)&v66;
          *v63 = v66;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v10, v10 + 1, v63, a3);
        return result;
      case 4uLL:
        *(_QWORD *)&result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v10, v10 + 1, v10 + 2, v63, a3).n128_u64[0];
        return result;
      case 5uLL:
        *(_QWORD *)&result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v10, v10 + 1, v10 + 2, v10 + 3, v63, a3).n128_u64[0];
        return result;
      default:
        if (v11 <= 383)
        {
          v26 = v10 + 1;
          v28 = v10 == a2 || v26 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v28)
            {
              v29 = 0;
              v30 = v10;
              do
              {
                v31 = v30;
                v30 = v26;
                if ((*a3)(v26, v31))
                {
                  v66 = *v30;
                  v32 = v29;
                  while (1)
                  {
                    *(__int128 *)((char *)v10 + v32 + 16) = *(__int128 *)((char *)v10 + v32);
                    if (!v32)
                      break;
                    v32 -= 16;
                    if (((*a3)(&v66, (__int128 *)((char *)v10 + v32)) & 1) == 0)
                    {
                      v33 = (__int128 *)((char *)v10 + v32 + 16);
                      goto LABEL_71;
                    }
                  }
                  v33 = v10;
LABEL_71:
                  result = *(double *)&v66;
                  *v33 = v66;
                  a2 = v62;
                }
                v26 = v30 + 1;
                v29 += 16;
              }
              while (v30 + 1 != a2);
            }
          }
          else if (!v28)
          {
            do
            {
              v56 = a1;
              a1 = v26;
              if ((*a3)(v26, v56))
              {
                v66 = *a1;
                v57 = a1;
                do
                {
                  v58 = v57 - 1;
                  *v57 = *(v57 - 1);
                  v59 = (*a3)(&v66, v57 - 2);
                  v57 = v58;
                }
                while ((v59 & 1) != 0);
                result = *(double *)&v66;
                *v58 = v66;
              }
              v26 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v34 = (v12 - 2) >> 1;
            v64 = v34;
            do
            {
              v35 = v34;
              if (v64 >= v34)
              {
                v36 = (2 * v34) | 1;
                v37 = &a1[v36];
                if (2 * v34 + 2 < (uint64_t)v12 && (*a3)(&a1[v36], v37 + 1))
                {
                  ++v37;
                  v36 = 2 * v35 + 2;
                }
                v38 = &a1[v35];
                if (((*a3)(v37, v38) & 1) == 0)
                {
                  v66 = *v38;
                  do
                  {
                    v39 = v37;
                    *v38 = *v37;
                    if (v64 < v36)
                      break;
                    v40 = (2 * v36) | 1;
                    v37 = &a1[v40];
                    v41 = 2 * v36 + 2;
                    if (v41 < (uint64_t)v12 && (*a3)(&a1[v40], v37 + 1))
                    {
                      ++v37;
                      v40 = v41;
                    }
                    v38 = v39;
                    v36 = v40;
                  }
                  while (!(*a3)(v37, &v66));
                  *v39 = v66;
                }
              }
              v34 = v35 - 1;
            }
            while (v35);
            v42 = (unint64_t)v11 >> 4;
            v43 = v62;
            do
            {
              v44 = v43;
              v45 = 0;
              v65 = *a1;
              v46 = a1;
              do
              {
                v47 = &v46[v45 + 1];
                v48 = (2 * v45) | 1;
                v49 = 2 * v45 + 2;
                if (v49 < v42 && (*a3)(&v46[v45 + 1], &v46[v45 + 2]))
                {
                  ++v47;
                  v48 = v49;
                }
                *v46 = *v47;
                v46 = v47;
                v45 = v48;
              }
              while (v48 <= (uint64_t)((unint64_t)(v42 - 2) >> 1));
              v50 = v44 - 1;
              if (v47 == v50)
              {
                v43 = v50;
                result = *(double *)&v65;
                *v47 = v65;
              }
              else
              {
                *v47 = *v50;
                result = *(double *)&v65;
                v43 = v50;
                *v50 = v65;
                v51 = (char *)v47 - (char *)a1 + 16;
                if (v51 >= 17)
                {
                  v52 = (unint64_t)((v51 >> 4) - 2) >> 1;
                  v53 = &a1[v52];
                  if ((*a3)(v53, v47))
                  {
                    v66 = *v47;
                    do
                    {
                      v54 = v53;
                      *v47 = *v53;
                      if (!v52)
                        break;
                      v52 = (v52 - 1) >> 1;
                      v53 = &a1[v52];
                      v47 = v54;
                    }
                    while (((*a3)(v53, &v66) & 1) != 0);
                    result = *(double *)&v66;
                    *v54 = v66;
                  }
                }
              }
            }
            while (v42-- > 2);
          }
          return result;
        }
        v13 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(&v10[v12 >> 1], v10, v63, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v10, &v10[v12 >> 1], v63, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v10 + 1, v13 - 1, v61, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v10 + 2, &v10[(v12 >> 1) + 1], v60, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v13 - 1, &v10[v12 >> 1], &v10[(v12 >> 1) + 1], a3);
          v66 = *v10;
          *v10 = *v13;
          *v13 = v66;
        }
        --a4;
        a2 = v62;
        if ((a5 & 1) == 0 && ((*a3)(v10 - 1, v10) & 1) == 0)
        {
          v65 = *v10;
          if (((*a3)(&v65, v63) & 1) != 0)
          {
            do
              ++v10;
            while (((*a3)(&v65, v10) & 1) == 0);
          }
          else
          {
            v22 = v10 + 1;
            do
            {
              v10 = v22;
              if (v22 >= v62)
                break;
              v23 = (*a3)(&v65, v22);
              v22 = v10 + 1;
            }
            while (!v23);
          }
          v24 = v62;
          if (v10 < v62)
          {
            v24 = v62;
            do
              --v24;
            while (((*a3)(&v65, v24) & 1) != 0);
          }
          while (v10 < v24)
          {
            v66 = *v10;
            *v10 = *v24;
            *v24 = v66;
            do
              ++v10;
            while (!(*a3)(&v65, v10));
            do
              --v24;
            while (((*a3)(&v65, v24) & 1) != 0);
          }
          v25 = v10 - 1;
          if (v10 - 1 != a1)
            *a1 = *v25;
          a5 = 0;
          result = *(double *)&v65;
          *v25 = v65;
          continue;
        }
        v65 = *v10;
        v14 = v10;
        do
          v15 = v14++;
        while (((*a3)(v14, &v65) & 1) != 0);
        v16 = v62;
        if (v15 == v10)
        {
          v16 = v62;
          do
          {
            if (v14 >= v16)
              break;
            --v16;
          }
          while (((*a3)(v16, &v65) & 1) == 0);
        }
        else
        {
          do
            --v16;
          while (!(*a3)(v16, &v65));
        }
        if (v14 < v16)
        {
          v17 = v14;
          v18 = v16;
          do
          {
            v66 = *v17;
            v19 = v66;
            *v17 = *v18;
            *v18 = v19;
            do
              v15 = v17++;
            while (((*a3)(v17, &v65) & 1) != 0);
            do
              --v18;
            while (!(*a3)(v18, &v65));
          }
          while (v17 < v18);
        }
        if (v15 != a1)
          *a1 = *v15;
        *v15 = v65;
        if (v14 < v16)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*,false>(a1, v15, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v15 + 1;
          continue;
        }
        v20 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(a1, v15, a3);
        v10 = v15 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLReplayResourceTrackingTracingResourceEntryV2 const&,GTMTLReplayResourceTrackingTracingResourceEntryV2 const&),GTMTLReplayResourceTrackingTracingResourceEntryV2*>(v15 + 1, v62, a3))
        {
          if (v20)
            continue;
          goto LABEL_29;
        }
        a2 = v15;
        if (!v20)
          goto LABEL_1;
        return result;
    }
  }
}

  v88 = a2;
  v90 = a2 - 24;
  v86 = (__int128 *)(a2 - 72);
  v87 = (__int128 *)(a2 - 48);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v29;
      case 2uLL:
        if ((*a3)((__int128 *)v90, (__int128 *)v10))
        {
          v39 = *(_OWORD *)v10;
          v95 = *(_QWORD *)(v10 + 16);
          v94 = v39;
          v40 = *(_OWORD *)v90;
          *(_QWORD *)(v10 + 16) = *(_QWORD *)(v90 + 16);
          *(_OWORD *)v10 = v40;
          v29 = v94;
          *(_QWORD *)(v90 + 16) = v95;
          *(_OWORD *)v90 = v29;
        }
        return *(double *)&v29;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__int128 *)v10, (__int128 *)(v10 + 24), (__int128 *)v90, a3);
        return *(double *)&v29;
      case 4uLL:
        *(_QWORD *)&v29 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(v10, v10 + 24, v10 + 48, v90, a3).n128_u64[0];
        return *(double *)&v29;
      case 5uLL:
        *(_QWORD *)&v29 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__n128 *)v10, v10 + 24, v10 + 48, v10 + 72, v90, a3).n128_u64[0];
        return *(double *)&v29;
      default:
        if (v11 <= 575)
        {
          v41 = (__int128 *)(v10 + 24);
          v43 = v10 == a2 || v41 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v10;
              do
              {
                v46 = (__int128 *)v45;
                v45 = (unint64_t)v41;
                if ((*a3)(v41, v46))
                {
                  v47 = *(_OWORD *)v45;
                  v95 = *(_QWORD *)(v45 + 16);
                  v94 = v47;
                  v48 = v44;
                  while (1)
                  {
                    v49 = v10 + v48;
                    *(_OWORD *)(v49 + 24) = *(_OWORD *)(v10 + v48);
                    *(_QWORD *)(v49 + 40) = *(_QWORD *)(v10 + v48 + 16);
                    if (!v48)
                      break;
                    v48 -= 24;
                    if (((*a3)(&v94, (__int128 *)(v48 + v10)) & 1) == 0)
                    {
                      v50 = v10 + v48 + 24;
                      goto LABEL_71;
                    }
                  }
                  v50 = v10;
LABEL_71:
                  v29 = v94;
                  *(_QWORD *)(v50 + 16) = v95;
                  *(_OWORD *)v50 = v29;
                  a2 = v88;
                }
                v41 = (__int128 *)(v45 + 24);
                v44 += 24;
              }
              while (v45 + 24 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v80 = (__int128 *)a1;
              a1 = (uint64_t)v41;
              if ((*a3)(v41, v80))
              {
                v81 = *(_OWORD *)a1;
                v95 = *(_QWORD *)(a1 + 16);
                v94 = v81;
                v82 = a1;
                do
                {
                  v83 = v82 - 24;
                  *(_OWORD *)v82 = *(_OWORD *)(v82 - 24);
                  *(_QWORD *)(v82 + 16) = *(_QWORD *)(v82 - 8);
                  v84 = (*a3)(&v94, (__int128 *)(v82 - 48));
                  v82 = v83;
                }
                while ((v84 & 1) != 0);
                v29 = v94;
                *(_QWORD *)(v83 + 16) = v95;
                *(_OWORD *)v83 = v29;
              }
              v41 = (__int128 *)(a1 + 24);
            }
            while (a1 + 24 != a2);
          }
          return *(double *)&v29;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v51 = (v12 - 2) >> 1;
            v91 = v51;
            do
            {
              v52 = v51;
              if (v91 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = a1 + 24 * v53;
                if (2 * v51 + 2 < (uint64_t)v12
                  && (*a3)((__int128 *)(a1 + 24 * v53), (__int128 *)(v54 + 24)))
                {
                  v54 += 24;
                  v53 = 2 * v52 + 2;
                }
                v55 = a1 + 24 * v52;
                if (((*a3)((__int128 *)v54, (__int128 *)v55) & 1) == 0)
                {
                  v56 = *(_OWORD *)v55;
                  v95 = *(_QWORD *)(v55 + 16);
                  v94 = v56;
                  do
                  {
                    v57 = v54;
                    v58 = *(_OWORD *)v54;
                    *(_QWORD *)(v55 + 16) = *(_QWORD *)(v54 + 16);
                    *(_OWORD *)v55 = v58;
                    if (v91 < v53)
                      break;
                    v59 = (2 * v53) | 1;
                    v54 = a1 + 24 * v59;
                    v60 = 2 * v53 + 2;
                    if (v60 < (uint64_t)v12 && (*a3)((__int128 *)(a1 + 24 * v59), (__int128 *)(v54 + 24)))
                    {
                      v54 += 24;
                      v59 = v60;
                    }
                    v55 = v57;
                    v53 = v59;
                  }
                  while (!(*a3)((__int128 *)v54, &v94));
                  v61 = v94;
                  *(_QWORD *)(v57 + 16) = v95;
                  *(_OWORD *)v57 = v61;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v62 = v11 / 0x18uLL;
            v63 = v88;
            do
            {
              v89 = v63;
              v64 = 0;
              v65 = *(_OWORD *)a1;
              v93 = *(_QWORD *)(a1 + 16);
              v92 = v65;
              v66 = a1;
              do
              {
                v67 = v66 + 24 * v64 + 24;
                v68 = (2 * v64) | 1;
                v69 = 2 * v64 + 2;
                if (v69 < v62
                  && (*a3)((__int128 *)(v66 + 24 * v64 + 24), (__int128 *)(v66 + 24 * v64 + 48)))
                {
                  v67 += 24;
                  v68 = v69;
                }
                v70 = *(_OWORD *)v67;
                *(_QWORD *)(v66 + 16) = *(_QWORD *)(v67 + 16);
                *(_OWORD *)v66 = v70;
                v66 = v67;
                v64 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
              v71 = (__int128 *)(v89 - 24);
              if (v67 == v89 - 24)
              {
                v63 = v89 - 24;
                v29 = v92;
                *(_QWORD *)(v67 + 16) = v93;
                *(_OWORD *)v67 = v29;
              }
              else
              {
                v72 = *v71;
                *(_QWORD *)(v67 + 16) = *(_QWORD *)(v89 - 8);
                *(_OWORD *)v67 = v72;
                v29 = v92;
                *(_QWORD *)(v89 - 8) = v93;
                v63 = v89 - 24;
                *v71 = v29;
                v73 = v67 - a1 + 24;
                if (v73 >= 25)
                {
                  v74 = (unint64_t)(-2 - 0x5555555555555555 * (v73 >> 3)) >> 1;
                  v75 = a1 + 24 * v74;
                  if ((*a3)((__int128 *)v75, (__int128 *)v67))
                  {
                    v76 = *(_OWORD *)v67;
                    v95 = *(_QWORD *)(v67 + 16);
                    v94 = v76;
                    do
                    {
                      v77 = v75;
                      v78 = *(_OWORD *)v75;
                      *(_QWORD *)(v67 + 16) = *(_QWORD *)(v75 + 16);
                      *(_OWORD *)v67 = v78;
                      if (!v74)
                        break;
                      v74 = (v74 - 1) >> 1;
                      v75 = a1 + 24 * v74;
                      v67 = v77;
                    }
                    while (((*a3)((__int128 *)v75, &v94) & 1) != 0);
                    v29 = v94;
                    *(_QWORD *)(v77 + 16) = v95;
                    *(_OWORD *)v77 = v29;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return *(double *)&v29;
        }
        v13 = v10 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__int128 *)(v10 + 24 * (v12 >> 1)), (__int128 *)v10, (__int128 *)v90, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__int128 *)v10, (__int128 *)(v10 + 24 * (v12 >> 1)), (__int128 *)v90, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__int128 *)(v10 + 24), (__int128 *)(v10 + 24 * (v12 >> 1) - 24), v87, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__int128 *)(v10 + 48), (__int128 *)(v10 + 24 + 24 * (v12 >> 1)), v86, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>((__int128 *)(v10 + 24 * (v12 >> 1) - 24), (__int128 *)(v10 + 24 * (v12 >> 1)), (__int128 *)(v10 + 24 + 24 * (v12 >> 1)), a3);
          v14 = *(_OWORD *)v10;
          v95 = *(_QWORD *)(v10 + 16);
          v94 = v14;
          v15 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)v10 = *(_OWORD *)v13;
          *(_QWORD *)(v10 + 16) = v15;
          v16 = v94;
          *(_QWORD *)(v13 + 16) = v95;
          *(_OWORD *)v13 = v16;
        }
        --a4;
        a2 = v88;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(v10 - 24), (__int128 *)v10) & 1) == 0)
        {
          v30 = *(_OWORD *)v10;
          v93 = *(_QWORD *)(v10 + 16);
          v92 = v30;
          if (((*a3)(&v92, (__int128 *)v90) & 1) != 0)
          {
            do
              v10 += 24;
            while (((*a3)(&v92, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v31 = (__int128 *)(v10 + 24);
            do
            {
              v10 = (unint64_t)v31;
              if ((unint64_t)v31 >= v88)
                break;
              v32 = (*a3)(&v92, v31);
              v31 = (__int128 *)(v10 + 24);
            }
            while (!v32);
          }
          v33 = v88;
          if (v10 < v88)
          {
            v33 = v88;
            do
              v33 -= 24;
            while (((*a3)(&v92, (__int128 *)v33) & 1) != 0);
          }
          while (v10 < v33)
          {
            v34 = *(_OWORD *)v10;
            v95 = *(_QWORD *)(v10 + 16);
            v94 = v34;
            v35 = *(_OWORD *)v33;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v33 + 16);
            *(_OWORD *)v10 = v35;
            v36 = v94;
            *(_QWORD *)(v33 + 16) = v95;
            *(_OWORD *)v33 = v36;
            do
              v10 += 24;
            while (!(*a3)(&v92, (__int128 *)v10));
            do
              v33 -= 24;
            while (((*a3)(&v92, (__int128 *)v33) & 1) != 0);
          }
          v37 = (__int128 *)(v10 - 24);
          if (v10 - 24 != a1)
          {
            v38 = *v37;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v38;
          }
          a5 = 0;
          v29 = v92;
          *(_QWORD *)(v10 - 8) = v93;
          *v37 = v29;
          continue;
        }
        v17 = *(_OWORD *)v10;
        v93 = *(_QWORD *)(v10 + 16);
        v92 = v17;
        v18 = (__int128 *)v10;
        do
        {
          v19 = (uint64_t)v18;
          v18 = (__int128 *)((char *)v18 + 24);
        }
        while (((*a3)(v18, &v92) & 1) != 0);
        v20 = (__int128 *)v88;
        if (v19 == v10)
        {
          v20 = (__int128 *)v88;
          do
          {
            if (v18 >= v20)
              break;
            v20 = (__int128 *)((char *)v20 - 24);
          }
          while (((*a3)(v20, &v92) & 1) == 0);
        }
        else
        {
          do
            v20 = (__int128 *)((char *)v20 - 24);
          while (!(*a3)(v20, &v92));
        }
        if (v18 < v20)
        {
          v21 = (unint64_t)v18;
          v22 = v20;
          do
          {
            v94 = *(_OWORD *)v21;
            v23 = v94;
            v95 = *(_QWORD *)(v21 + 16);
            v24 = v95;
            v25 = *((_QWORD *)v22 + 2);
            *(_OWORD *)v21 = *v22;
            *(_QWORD *)(v21 + 16) = v25;
            *((_QWORD *)v22 + 2) = v24;
            *v22 = v23;
            do
            {
              v19 = v21;
              v21 += 24;
            }
            while (((*a3)((__int128 *)v21, &v92) & 1) != 0);
            do
              v22 = (__int128 *)((char *)v22 - 24);
            while (!(*a3)(v22, &v92));
          }
          while (v21 < (unint64_t)v22);
        }
        if (v19 != a1)
        {
          v26 = *(_OWORD *)v19;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v19 + 16);
          *(_OWORD *)a1 = v26;
        }
        v27 = v92;
        *(_QWORD *)(v19 + 16) = v93;
        *(_OWORD *)v19 = v27;
        if (v18 < v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*,false>(a1, v19, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v19 + 24;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(a1, v19, a3);
        v10 = v19 + 24;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(GTMTLGPUAddressResource const&,GTMTLGPUAddressResource const&),GTMTLGPUAddressResource*>(v19 + 24, v88, a3))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v19;
        if (!v28)
          goto LABEL_1;
        return *(double *)&v29;
    }
  }
}

  v8 = a2 - 40;
  v121 = a2 - 120;
  v122 = a2 - 80;
  v9 = a1;
  v123 = a2;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v36;
      case 2uLL:
        if (KickBoundarySample::operator<(v8, v9))
        {
          v52 = *(_OWORD *)v9;
          v53 = *(_OWORD *)(v9 + 16);
          v129 = *(_QWORD *)(v9 + 32);
          v127 = v52;
          v128 = v53;
          v54 = *(_OWORD *)v8;
          v55 = *(_OWORD *)(v8 + 16);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v8 + 32);
          *(_OWORD *)v9 = v54;
          *(_OWORD *)(v9 + 16) = v55;
          v36 = v127;
          v56 = v128;
          *(_QWORD *)(v8 + 32) = v129;
          *(_OWORD *)v8 = v36;
          *(_OWORD *)(v8 + 16) = v56;
        }
        return *(double *)&v36;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9, v9 + 40, v8);
        return *(double *)&v36;
      case 4uLL:
        *(_QWORD *)&v36 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9, v9 + 40, v9 + 80, v8).n128_u64[0];
        return *(double *)&v36;
      case 5uLL:
        *(_QWORD *)&v36 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9, v9 + 40, v9 + 80, v9 + 120, v8).n128_u64[0];
        return *(double *)&v36;
      default:
        if (v10 <= 959)
        {
          v57 = v9 + 40;
          v59 = v9 == a2 || v57 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = v9;
              do
              {
                v62 = v61;
                v61 = v57;
                if (KickBoundarySample::operator<(v57, v62))
                {
                  v63 = *(_OWORD *)v61;
                  v64 = *(_OWORD *)(v61 + 16);
                  v129 = *(_QWORD *)(v61 + 32);
                  v127 = v63;
                  v128 = v64;
                  v65 = v60;
                  while (1)
                  {
                    v66 = v9 + v65;
                    v67 = *(_OWORD *)(v9 + v65 + 16);
                    *(_OWORD *)(v66 + 40) = *(_OWORD *)(v9 + v65);
                    *(_OWORD *)(v66 + 56) = v67;
                    *(_QWORD *)(v66 + 72) = *(_QWORD *)(v9 + v65 + 32);
                    if (!v65)
                      break;
                    v65 -= 40;
                    if (!KickBoundarySample::operator<((uint64_t)&v127, v65 + v9))
                    {
                      v68 = v9 + v65 + 40;
                      goto LABEL_71;
                    }
                  }
                  v68 = v9;
LABEL_71:
                  v36 = v127;
                  v69 = v128;
                  *(_QWORD *)(v68 + 32) = v129;
                  *(_OWORD *)v68 = v36;
                  *(_OWORD *)(v68 + 16) = v69;
                }
                v57 = v61 + 40;
                v60 += 40;
              }
              while (v61 + 40 != a2);
            }
          }
          else if (!v59)
          {
            do
            {
              v112 = a1;
              a1 = v57;
              if (KickBoundarySample::operator<(v57, v112))
              {
                v113 = *(_OWORD *)a1;
                v114 = *(_OWORD *)(a1 + 16);
                v129 = *(_QWORD *)(a1 + 32);
                v127 = v113;
                v128 = v114;
                v115 = a1;
                do
                {
                  v116 = v115 - 40;
                  v117 = *(_OWORD *)(v115 - 24);
                  *(_OWORD *)v115 = *(_OWORD *)(v115 - 40);
                  *(_OWORD *)(v115 + 16) = v117;
                  *(_QWORD *)(v115 + 32) = *(_QWORD *)(v115 - 8);
                  v118 = KickBoundarySample::operator<((uint64_t)&v127, v115 - 80);
                  v115 = v116;
                }
                while (v118);
                v36 = v127;
                v119 = v128;
                *(_QWORD *)(v116 + 32) = v129;
                *(_OWORD *)v116 = v36;
                *(_OWORD *)(v116 + 16) = v119;
              }
              v57 = a1 + 40;
            }
            while (a1 + 40 != a2);
          }
          return *(double *)&v36;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v70 = (v11 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = a1 + 40 * v73;
                if (2 * v71 + 2 < (uint64_t)v11 && KickBoundarySample::operator<(a1 + 40 * v73, v74 + 40))
                {
                  v74 += 40;
                  v73 = 2 * v72 + 2;
                }
                v75 = a1 + 40 * v72;
                if (!KickBoundarySample::operator<(v74, v75))
                {
                  v76 = *(_OWORD *)v75;
                  v77 = *(_OWORD *)(v75 + 16);
                  v129 = *(_QWORD *)(v75 + 32);
                  v127 = v76;
                  v128 = v77;
                  do
                  {
                    v78 = v74;
                    v79 = *(_OWORD *)v74;
                    v80 = *(_OWORD *)(v74 + 16);
                    *(_QWORD *)(v75 + 32) = *(_QWORD *)(v74 + 32);
                    *(_OWORD *)v75 = v79;
                    *(_OWORD *)(v75 + 16) = v80;
                    if (v70 < v73)
                      break;
                    v81 = (2 * v73) | 1;
                    v74 = a1 + 40 * v81;
                    v82 = 2 * v73 + 2;
                    if (v82 < (uint64_t)v11 && KickBoundarySample::operator<(a1 + 40 * v81, v74 + 40))
                    {
                      v74 += 40;
                      v81 = v82;
                    }
                    v75 = v78;
                    v73 = v81;
                  }
                  while (!KickBoundarySample::operator<(v74, (uint64_t)&v127));
                  v83 = v127;
                  v84 = v128;
                  *(_QWORD *)(v78 + 32) = v129;
                  *(_OWORD *)v78 = v83;
                  *(_OWORD *)(v78 + 16) = v84;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v85 = v10 / 0x28uLL;
            v86 = v123;
            do
            {
              v87 = 0;
              v88 = *(_OWORD *)a1;
              v89 = *(_OWORD *)(a1 + 16);
              v126 = *(_QWORD *)(a1 + 32);
              v124 = v88;
              v125 = v89;
              v90 = v85 - 2;
              if (v85 < 2)
                v90 = v85 - 1;
              v91 = v90 >> 1;
              v92 = a1;
              do
              {
                v93 = v92 + 40 * v87 + 40;
                v94 = (2 * v87) | 1;
                v95 = 2 * v87 + 2;
                if (v95 < v85 && KickBoundarySample::operator<(v92 + 40 * v87 + 40, v92 + 40 * v87 + 80))
                {
                  v93 += 40;
                  v94 = v95;
                }
                v96 = *(_OWORD *)v93;
                v97 = *(_OWORD *)(v93 + 16);
                *(_QWORD *)(v92 + 32) = *(_QWORD *)(v93 + 32);
                *(_OWORD *)v92 = v96;
                *(_OWORD *)(v92 + 16) = v97;
                v92 = v93;
                v87 = v94;
              }
              while (v94 <= v91);
              v86 -= 40;
              if (v93 == v86)
              {
                v36 = v124;
                v110 = v125;
                *(_QWORD *)(v93 + 32) = v126;
                *(_OWORD *)v93 = v36;
                *(_OWORD *)(v93 + 16) = v110;
              }
              else
              {
                v98 = *(_OWORD *)v86;
                v99 = *(_OWORD *)(v86 + 16);
                *(_QWORD *)(v93 + 32) = *(_QWORD *)(v86 + 32);
                *(_OWORD *)v93 = v98;
                *(_OWORD *)(v93 + 16) = v99;
                v36 = v124;
                v100 = v125;
                *(_QWORD *)(v86 + 32) = v126;
                *(_OWORD *)v86 = v36;
                *(_OWORD *)(v86 + 16) = v100;
                v101 = v93 - a1 + 40;
                if (v101 >= 41)
                {
                  v102 = (unint64_t)(-2 - 0x3333333333333333 * (v101 >> 3)) >> 1;
                  v103 = a1 + 40 * v102;
                  if (KickBoundarySample::operator<(v103, v93))
                  {
                    v104 = *(_OWORD *)v93;
                    v105 = *(_OWORD *)(v93 + 16);
                    v129 = *(_QWORD *)(v93 + 32);
                    v127 = v104;
                    v128 = v105;
                    do
                    {
                      v106 = v103;
                      v107 = *(_OWORD *)v103;
                      v108 = *(_OWORD *)(v103 + 16);
                      *(_QWORD *)(v93 + 32) = *(_QWORD *)(v103 + 32);
                      *(_OWORD *)v93 = v107;
                      *(_OWORD *)(v93 + 16) = v108;
                      if (!v102)
                        break;
                      v102 = (v102 - 1) >> 1;
                      v103 = a1 + 40 * v102;
                      v93 = v106;
                    }
                    while (KickBoundarySample::operator<(v103, (uint64_t)&v127));
                    v36 = v127;
                    v109 = v128;
                    *(_QWORD *)(v106 + 32) = v129;
                    *(_OWORD *)v106 = v36;
                    *(_OWORD *)(v106 + 16) = v109;
                  }
                }
              }
            }
            while (v85-- > 2);
          }
          return *(double *)&v36;
        }
        v12 = v9 + 40 * (v11 >> 1);
        if ((unint64_t)v10 < 0x1401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9 + 40 * (v11 >> 1), v9, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9, v9 + 40 * (v11 >> 1), v8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9 + 40, v9 + 40 * (v11 >> 1) - 40, v122);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9 + 80, v9 + 40 + 40 * (v11 >> 1), v121);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v9 + 40 * (v11 >> 1) - 40, v9 + 40 * (v11 >> 1), v9 + 40 + 40 * (v11 >> 1));
          v13 = *(_OWORD *)v9;
          v14 = *(_OWORD *)(v9 + 16);
          v129 = *(_QWORD *)(v9 + 32);
          v127 = v13;
          v128 = v14;
          v15 = *(_OWORD *)v12;
          v16 = *(_OWORD *)(v12 + 16);
          *(_QWORD *)(v9 + 32) = *(_QWORD *)(v12 + 32);
          *(_OWORD *)v9 = v15;
          *(_OWORD *)(v9 + 16) = v16;
          v17 = v127;
          v18 = v128;
          *(_QWORD *)(v12 + 32) = v129;
          *(_OWORD *)v12 = v17;
          *(_OWORD *)(v12 + 16) = v18;
        }
        --a3;
        a2 = v123;
        if ((a4 & 1) == 0 && !KickBoundarySample::operator<(v9 - 40, v9))
        {
          v37 = *(_OWORD *)v9;
          v38 = *(_OWORD *)(v9 + 16);
          v126 = *(_QWORD *)(v9 + 32);
          v124 = v37;
          v125 = v38;
          if (KickBoundarySample::operator<((uint64_t)&v124, v8))
          {
            do
              v9 += 40;
            while (!KickBoundarySample::operator<((uint64_t)&v124, v9));
          }
          else
          {
            v39 = v9 + 40;
            do
            {
              v9 = v39;
              if (v39 >= v123)
                break;
              v40 = KickBoundarySample::operator<((uint64_t)&v124, v39);
              v39 = v9 + 40;
            }
            while (!v40);
          }
          v41 = v123;
          if (v9 < v123)
          {
            v41 = v123;
            do
              v41 -= 40;
            while (KickBoundarySample::operator<((uint64_t)&v124, v41));
          }
          while (v9 < v41)
          {
            v42 = *(_OWORD *)v9;
            v43 = *(_OWORD *)(v9 + 16);
            v129 = *(_QWORD *)(v9 + 32);
            v127 = v42;
            v128 = v43;
            v44 = *(_OWORD *)v41;
            v45 = *(_OWORD *)(v41 + 16);
            *(_QWORD *)(v9 + 32) = *(_QWORD *)(v41 + 32);
            *(_OWORD *)v9 = v44;
            *(_OWORD *)(v9 + 16) = v45;
            v46 = v127;
            v47 = v128;
            *(_QWORD *)(v41 + 32) = v129;
            *(_OWORD *)v41 = v46;
            *(_OWORD *)(v41 + 16) = v47;
            do
              v9 += 40;
            while (!KickBoundarySample::operator<((uint64_t)&v124, v9));
            do
              v41 -= 40;
            while (KickBoundarySample::operator<((uint64_t)&v124, v41));
          }
          v48 = (__int128 *)(v9 - 40);
          if (v9 - 40 != a1)
          {
            v49 = *v48;
            v50 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)a1 = v49;
            *(_OWORD *)(a1 + 16) = v50;
          }
          a4 = 0;
          v36 = v124;
          v51 = v125;
          *(_QWORD *)(v9 - 8) = v126;
          *v48 = v36;
          *(_OWORD *)(v9 - 24) = v51;
          continue;
        }
        v19 = *(_OWORD *)v9;
        v20 = *(_OWORD *)(v9 + 16);
        v126 = *(_QWORD *)(v9 + 32);
        v124 = v19;
        v125 = v20;
        v21 = v9;
        do
        {
          v22 = v21;
          v21 += 40;
        }
        while (KickBoundarySample::operator<(v21, (uint64_t)&v124));
        v23 = v123;
        if (v22 == v9)
        {
          v23 = v123;
          do
          {
            if (v21 >= v23)
              break;
            v23 -= 40;
          }
          while (!KickBoundarySample::operator<(v23, (uint64_t)&v124));
        }
        else
        {
          do
            v23 -= 40;
          while (!KickBoundarySample::operator<(v23, (uint64_t)&v124));
        }
        if (v21 < v23)
        {
          v24 = v21;
          v25 = v23;
          do
          {
            v27 = *(_OWORD *)(v24 + 16);
            v127 = *(_OWORD *)v24;
            v26 = v127;
            v128 = v27;
            v129 = *(_QWORD *)(v24 + 32);
            v28 = v129;
            v30 = *(_OWORD *)v25;
            v29 = *(_OWORD *)(v25 + 16);
            *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
            *(_OWORD *)v24 = v30;
            *(_OWORD *)(v24 + 16) = v29;
            *(_QWORD *)(v25 + 32) = v28;
            *(_OWORD *)v25 = v26;
            *(_OWORD *)(v25 + 16) = v27;
            do
            {
              v22 = v24;
              v24 += 40;
            }
            while (KickBoundarySample::operator<(v24, (uint64_t)&v124));
            do
              v25 -= 40;
            while (!KickBoundarySample::operator<(v25, (uint64_t)&v124));
          }
          while (v24 < v25);
        }
        if (v22 != a1)
        {
          v31 = *(_OWORD *)v22;
          v32 = *(_OWORD *)(v22 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v22 + 32);
          *(_OWORD *)a1 = v31;
          *(_OWORD *)(a1 + 16) = v32;
        }
        v33 = v124;
        v34 = v125;
        *(_QWORD *)(v22 + 32) = v126;
        *(_OWORD *)v22 = v33;
        *(_OWORD *)(v22 + 16) = v34;
        if (v21 < v23)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *,false>(a1, v22, a3, a4 & 1);
          a4 = 0;
          v9 = v22 + 40;
          continue;
        }
        v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(a1, v22);
        v9 = v22 + 40;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,KickBoundarySample *>(v22 + 40, v123))
        {
          if (v35)
            continue;
          goto LABEL_29;
        }
        a2 = v22;
        if (!v35)
          goto LABEL_1;
        return *(double *)&v36;
    }
  }
}

  v96 = (__int128 *)(a2 - 24);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v27;
      case 2uLL:
        if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v96, *(_QWORD *)v7, *(_DWORD *)(v7 + 16)))
        {
          v41 = *(_OWORD *)v7;
          v106 = *(_QWORD *)(v7 + 16);
          v105 = v41;
          v42 = *v96;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v7 = v42;
          v27 = v105;
          *(_QWORD *)(a2 - 8) = v106;
          *v96 = v27;
        }
        return *(double *)&v27;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((__int128 *)v7, (_DWORD *)(v7 + 24), v96);
        return *(double *)&v27;
      case 4uLL:
        *(_QWORD *)&v27 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(v7, (_DWORD *)(v7 + 24), v7 + 48, (uint64_t)v96).n128_u64[0];
        return *(double *)&v27;
      case 5uLL:
        *(_QWORD *)&v27 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(v7, (_DWORD *)(v7 + 24), (_DWORD *)(v7 + 48), (_DWORD *)(v7 + 72), (uint64_t)v96).n128_u64[0];
        return *(double *)&v27;
      default:
        if (v8 <= 575)
        {
          v43 = (_DWORD *)(v7 + 24);
          v45 = v7 == a2 || v43 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = (_DWORD *)v7;
              do
              {
                v48 = *(_QWORD *)v47;
                v49 = v47[4];
                v47 = v43;
                if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v43, v48, v49))
                {
                  v50 = *(_OWORD *)v47;
                  v106 = *((_QWORD *)v47 + 2);
                  v105 = v50;
                  v51 = v46;
                  while (1)
                  {
                    v52 = v7 + v51;
                    *(_OWORD *)(v52 + 24) = *(_OWORD *)(v7 + v51);
                    *(_QWORD *)(v52 + 40) = *(_QWORD *)(v7 + v51 + 16);
                    if (!v51)
                      break;
                    v51 -= 24;
                    if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v105, *(_QWORD *)(v52 - 24), *(_DWORD *)(v52 - 8)))
                    {
                      v53 = v7 + v51 + 24;
                      goto LABEL_73;
                    }
                  }
                  v53 = v7;
LABEL_73:
                  v27 = v105;
                  *(_QWORD *)(v53 + 16) = v106;
                  *(_OWORD *)v53 = v27;
                }
                v43 = v47 + 6;
                v46 += 24;
              }
              while (v47 + 6 != (_DWORD *)a2);
            }
          }
          else if (!v45)
          {
            do
            {
              v85 = *(_QWORD *)a1;
              v86 = *(_DWORD *)(a1 + 16);
              a1 = (uint64_t)v43;
              if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v43, v85, v86))
              {
                v87 = *(_OWORD *)a1;
                v106 = *(_QWORD *)(a1 + 16);
                v105 = v87;
                v88 = a1;
                do
                {
                  v89 = v88 - 24;
                  *(_OWORD *)v88 = *(_OWORD *)(v88 - 24);
                  *(_QWORD *)(v88 + 16) = *(_QWORD *)(v88 - 8);
                  v90 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v105, *(_QWORD *)(v88 - 48), *(_DWORD *)(v88 - 32));
                  v88 = v89;
                }
                while (v90);
                v27 = v105;
                *(_QWORD *)(v89 + 16) = v106;
                *(_OWORD *)v89 = v27;
              }
              v43 = (_DWORD *)(a1 + 24);
            }
            while (a1 + 24 != a2);
          }
          return *(double *)&v27;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v54 = (v9 - 2) >> 1;
            v102 = v54;
            v92 = a2;
            do
            {
              v55 = v54;
              if (v102 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = a1 + 24 * v56;
                if (2 * v54 + 2 < (uint64_t)v9
                  && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(a1 + 24 * v56), *(_QWORD *)(v57 + 24), *(_DWORD *)(v57 + 40)))
                {
                  v57 += 24;
                  v56 = 2 * v55 + 2;
                }
                v58 = a1 + 24 * v55;
                v59 = *(_QWORD *)v58;
                v60 = *(_DWORD *)(v58 + 16);
                if (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v57, *(_QWORD *)v58, v60))
                {
                  v97 = *(_QWORD *)(v58 + 8);
                  v100 = v55;
                  v94 = *(_DWORD *)(v58 + 20);
                  do
                  {
                    v61 = v57;
                    v62 = *(_OWORD *)v57;
                    *(_QWORD *)(v58 + 16) = *(_QWORD *)(v57 + 16);
                    *(_OWORD *)v58 = v62;
                    if (v102 < v56)
                      break;
                    v63 = (2 * v56) | 1;
                    v57 = a1 + 24 * v63;
                    if (2 * v56 + 2 < (uint64_t)v9
                      && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(a1 + 24 * v63), *(_QWORD *)(v57 + 24), *(_DWORD *)(v57 + 40)))
                    {
                      v57 += 24;
                      v63 = 2 * v56 + 2;
                    }
                    v58 = v61;
                    v56 = v63;
                  }
                  while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v57, v59, v60));
                  *(_QWORD *)v61 = v59;
                  *(_QWORD *)(v61 + 8) = v97;
                  *(_DWORD *)(v61 + 16) = v60;
                  *(_DWORD *)(v61 + 20) = v94;
                  a2 = v92;
                  v55 = v100;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v64 = v8 / 0x18uLL;
            do
            {
              v65 = a2;
              v66 = 0;
              v67 = *(_OWORD *)a1;
              v106 = *(_QWORD *)(a1 + 16);
              v105 = v67;
              v68 = v64 - 2;
              if (v64 < 2)
                v68 = v64 - 1;
              v69 = v68 >> 1;
              v70 = a1;
              do
              {
                v71 = v70 + 24 * v66 + 24;
                v72 = (2 * v66) | 1;
                v73 = 2 * v66 + 2;
                if (v73 < v64
                  && GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(v70 + 24 * v66 + 24), *(_QWORD *)(v70 + 24 * v66 + 48), *(_DWORD *)(v70 + 24 * v66 + 64)))
                {
                  v71 += 24;
                  v72 = v73;
                }
                v74 = *(_OWORD *)v71;
                *(_QWORD *)(v70 + 16) = *(_QWORD *)(v71 + 16);
                *(_OWORD *)v70 = v74;
                v70 = v71;
                v66 = v72;
              }
              while (v72 <= v69);
              v75 = (__int128 *)(v65 - 24);
              if (v71 == v65 - 24)
              {
                v77 = v65 - 24;
                v27 = v105;
                *(_QWORD *)(v71 + 16) = v106;
                *(_OWORD *)v71 = v27;
              }
              else
              {
                v76 = *v75;
                *(_QWORD *)(v71 + 16) = *(_QWORD *)(v65 - 8);
                *(_OWORD *)v71 = v76;
                v27 = v105;
                *(_QWORD *)(v65 - 8) = v106;
                v77 = v65 - 24;
                *v75 = v27;
                v78 = v71 - a1 + 24;
                if (v78 >= 25)
                {
                  v79 = (unint64_t)(-2 - 0x5555555555555555 * (v78 >> 3)) >> 1;
                  v80 = a1 + 24 * v79;
                  v81 = *(_QWORD *)v71;
                  v82 = *(_DWORD *)(v71 + 16);
                  if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v80, *(_QWORD *)v71, v82))
                  {
                    v98 = *(_QWORD *)(v71 + 8);
                    v95 = *(_DWORD *)(v71 + 20);
                    do
                    {
                      v83 = v80;
                      v27 = *(_OWORD *)v80;
                      *(_QWORD *)(v71 + 16) = *(_QWORD *)(v80 + 16);
                      *(_OWORD *)v71 = v27;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = a1 + 24 * v79;
                      v71 = v83;
                    }
                    while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)v80, v81, v82));
                    *(_QWORD *)v83 = v81;
                    *(_QWORD *)(v83 + 8) = v98;
                    *(_DWORD *)(v83 + 16) = v82;
                    *(_DWORD *)(v83 + 20) = v95;
                  }
                }
              }
              v84 = v64-- <= 2;
              a2 = v77;
            }
            while (!v84);
          }
          return *(double *)&v27;
        }
        v10 = v7 + 24 * (v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((__int128 *)(v7 + 24 * (v9 >> 1)), (_DWORD *)v7, v96);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((__int128 *)v7, (_DWORD *)(v7 + 24 * (v9 >> 1)), v96);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((__int128 *)(v7 + 24), (_DWORD *)(v7 + 24 * (v9 >> 1) - 24), (__int128 *)(a2 - 48));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((__int128 *)(v7 + 48), (_DWORD *)(v7 + 24 + 24 * (v9 >> 1)), (__int128 *)(a2 - 72));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>((__int128 *)(v7 + 24 * (v9 >> 1) - 24), (_DWORD *)(v7 + 24 * (v9 >> 1)), (__int128 *)(v7 + 24 + 24 * (v9 >> 1)));
          v11 = *(_OWORD *)v7;
          v106 = *(_QWORD *)(v7 + 16);
          v105 = v11;
          v12 = *(_QWORD *)(v10 + 16);
          *(_OWORD *)v7 = *(_OWORD *)v10;
          *(_QWORD *)(v7 + 16) = v12;
          v13 = v105;
          *(_QWORD *)(v10 + 16) = v106;
          *(_OWORD *)v10 = v13;
        }
        --a3;
        v14 = *(_QWORD *)v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(a1 + 16);
          if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<((_DWORD *)(a1 - 24), *(_QWORD *)a1, v15))
          {
            goto LABEL_11;
          }
          v28 = *(_OWORD *)a1;
          v104 = *(_QWORD *)(a1 + 16);
          v103 = v28;
          if (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v103, *(_QWORD *)(a2 - 24), *(_DWORD *)(a2 - 8)))
          {
            v7 = a1;
            do
            {
              v29 = *(_QWORD *)(v7 + 24);
              v7 += 24;
            }
            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v103, v29, *(_DWORD *)(v7 + 16)));
          }
          else
          {
            v30 = a1 + 24;
            do
            {
              v7 = v30;
              if (v30 >= a2)
                break;
              v31 = GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v103, *(_QWORD *)v30, *(_DWORD *)(v30 + 16));
              v30 = v7 + 24;
            }
            while (!v31);
          }
          v32 = a2;
          if (v7 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v103, v33, *(_DWORD *)(v32 + 16)));
          }
          while (v7 < v32)
          {
            v34 = *(_OWORD *)v7;
            v106 = *(_QWORD *)(v7 + 16);
            v105 = v34;
            v35 = *(_OWORD *)v32;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v7 = v35;
            v36 = v105;
            *(_QWORD *)(v32 + 16) = v106;
            *(_OWORD *)v32 = v36;
            do
            {
              v37 = *(_QWORD *)(v7 + 24);
              v7 += 24;
            }
            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v103, v37, *(_DWORD *)(v7 + 16)));
            do
            {
              v38 = *(_QWORD *)(v32 - 24);
              v32 -= 24;
            }
            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(&v103, v38, *(_DWORD *)(v32 + 16)));
          }
          v39 = (__int128 *)(v7 - 24);
          if (v7 - 24 != a1)
          {
            v40 = *v39;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)a1 = v40;
          }
          a4 = 0;
          v27 = v103;
          *(_QWORD *)(v7 - 8) = v104;
          *v39 = v27;
          continue;
        }
        v15 = *(_DWORD *)(a1 + 16);
LABEL_11:
        v101 = *(_QWORD *)(a1 + 8);
        v99 = *(_DWORD *)(a1 + 20);
        v16 = (_DWORD *)a1;
        do
        {
          v17 = (uint64_t)v16;
          v16 += 6;
        }
        while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v16, v14, v15));
        v18 = a3;
        v19 = (_DWORD *)a2;
        if (v17 == a1)
        {
          v19 = (_DWORD *)a2;
          do
          {
            if (v16 >= v19)
              break;
            v19 -= 6;
          }
          while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v19, v14, v15));
        }
        else
        {
          do
            v19 -= 6;
          while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v19, v14, v15));
        }
        if (v16 < v19)
        {
          v20 = v16;
          v21 = v19;
          do
          {
            v105 = *(_OWORD *)v20;
            v22 = v105;
            v106 = *((_QWORD *)v20 + 2);
            v23 = v106;
            v24 = *((_QWORD *)v21 + 2);
            *(_OWORD *)v20 = *(_OWORD *)v21;
            *((_QWORD *)v20 + 2) = v24;
            *((_QWORD *)v21 + 2) = v23;
            *(_OWORD *)v21 = v22;
            do
            {
              v17 = (uint64_t)v20;
              v20 += 6;
            }
            while (GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v20, v14, v15));
            do
              v21 -= 6;
            while (!GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos::operator<(v21, v14, v15));
          }
          while (v20 < v21);
        }
        if (v17 != a1)
        {
          v25 = *(_OWORD *)v17;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)a1 = v25;
        }
        *(_QWORD *)v17 = v14;
        *(_QWORD *)(v17 + 8) = v101;
        *(_DWORD *)(v17 + 16) = v15;
        *(_DWORD *)(v17 + 20) = v99;
        a3 = v18;
        if (v16 < v19)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *,false>(a1, v17, v18, a4 & 1);
          a4 = 0;
          v7 = v17 + 24;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(a1, v17);
        v7 = v17 + 24;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::EvaluateAggregatedSamples(void)::ShaderTimelineInfos *>(v17 + 24, a2))
        {
          if (v26)
            continue;
          goto LABEL_30;
        }
        a2 = v17;
        if (!v26)
          goto LABEL_1;
        return *(double *)&v27;
    }
  }
}

  v8 = (uint64_t)&a2[-2].n128_i64[1] + 4;
  v89 = (uint64_t)a2[-4].n128_i64 + 4;
  v90 = (uint64_t)&a2[-3].n128_i64[1];
  v9 = a1;
  v91 = a2;
  while (2)
  {
    a1 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v9) >> 2);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return v30.n128_f64[0];
      case 2uLL:
        if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v8, (uint64_t)v9))
        {
          v40 = *v9;
          v95 = v9[1].n128_u32[0];
          v94 = v40;
          v41 = *(__n128 *)v8;
          v9[1].n128_u32[0] = *(_DWORD *)(v8 + 16);
          *v9 = v41;
          v30 = v94;
          *(_DWORD *)(v8 + 16) = v95;
          *(__n128 *)v8 = v30;
        }
        return v30.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v9, (uint64_t)v9[1].n128_i64 + 4, v8);
        return v30.n128_f64[0];
      case 4uLL:
        v30.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(v9, (uint64_t)v9[1].n128_i64 + 4, (uint64_t)&v9[2].n128_i64[1], v8).n128_u64[0];
        return v30.n128_f64[0];
      case 5uLL:
        v30.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(v9, (uint64_t)v9[1].n128_i64 + 4, (uint64_t)&v9[2].n128_i64[1], (uint64_t)&v9[3].n128_i64[1] + 4, v8).n128_u64[0];
        return v30.n128_f64[0];
      default:
        if (v10 <= 479)
        {
          v42 = (uint64_t)v9[1].n128_i64 + 4;
          v44 = v9 == a2 || v42 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = (uint64_t)v9;
              do
              {
                v47 = v46;
                v46 = v42;
                if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v42, v47))
                {
                  v48 = *(__n128 *)v46;
                  v95 = *(_DWORD *)(v46 + 16);
                  v94 = v48;
                  v49 = v45;
                  while (1)
                  {
                    v50 = (char *)v9 + v49;
                    *(__n128 *)(v50 + 20) = *(__n128 *)((char *)v9 + v49);
                    *((_DWORD *)v50 + 9) = *(unsigned __int32 *)((char *)v9[1].n128_u32 + v49);
                    if (!v49)
                      break;
                    v49 -= 20;
                    if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, (uint64_t)v9 + v49))
                    {
                      v51 = (uint64_t)v9[1].n128_i64 + v49 + 4;
                      goto LABEL_71;
                    }
                  }
                  v51 = (uint64_t)v9;
LABEL_71:
                  v30 = v94;
                  *(_DWORD *)(v51 + 16) = v95;
                  *(__n128 *)v51 = v30;
                }
                v42 = v46 + 20;
                v45 += 20;
              }
              while ((__n128 *)(v46 + 20) != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v83 = (uint64_t)a1;
              a1 = (__n128 *)v42;
              if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v42, v83))
              {
                v84 = *a1;
                v95 = a1[1].n128_u32[0];
                v94 = v84;
                v85 = a1;
                do
                {
                  v86 = (__n128 *)((char *)v85 - 20);
                  *v85 = *(__n128 *)((char *)v85 - 20);
                  v85[1].n128_u32[0] = v85[-1].n128_u32[3];
                  v87 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v94, (uint64_t)&v85[-3].n128_i64[1]);
                  v85 = v86;
                }
                while (v87);
                v30 = v94;
                v86[1].n128_u32[0] = v95;
                *v86 = v30;
              }
              v42 = (uint64_t)a1[1].n128_i64 + 4;
            }
            while (&a1[1].n128_u8[4] != (unsigned __int8 *)a2);
          }
          return v30.n128_f64[0];
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v52 = (v11 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if (v52 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = (uint64_t)a1 + 20 * v55;
                if (2 * v53 + 2 < (uint64_t)v11
                  && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)a1 + 20 * v55, v56 + 20))
                {
                  v56 += 20;
                  v55 = 2 * v54 + 2;
                }
                v57 = (uint64_t)a1 + 20 * v54;
                if (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v56, v57))
                {
                  v58 = *(__n128 *)v57;
                  v95 = *(_DWORD *)(v57 + 16);
                  v94 = v58;
                  do
                  {
                    v59 = v56;
                    v60 = *(_OWORD *)v56;
                    *(_DWORD *)(v57 + 16) = *(_DWORD *)(v56 + 16);
                    *(_OWORD *)v57 = v60;
                    if (v52 < v55)
                      break;
                    v61 = (2 * v55) | 1;
                    v56 = (uint64_t)a1 + 20 * v61;
                    v62 = 2 * v55 + 2;
                    if (v62 < (uint64_t)v11
                      && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)a1 + 20 * v61, v56 + 20))
                    {
                      v56 += 20;
                      v61 = v62;
                    }
                    v57 = v59;
                    v55 = v61;
                  }
                  while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v56, (uint64_t)&v94));
                  v63 = v94;
                  *(_DWORD *)(v59 + 16) = v95;
                  *(__n128 *)v59 = v63;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v64 = v10 / 0x14uLL;
            v65 = v91;
            do
            {
              v66 = 0;
              v67 = *a1;
              v93 = a1[1].n128_u32[0];
              v92 = v67;
              v68 = v64 - 2;
              if (v64 < 2)
                v68 = v64 - 1;
              v69 = v68 >> 1;
              v70 = (uint64_t)a1;
              do
              {
                v71 = v70 + 20 * v66 + 20;
                v72 = (2 * v66) | 1;
                v73 = 2 * v66 + 2;
                if (v73 < v64
                  && GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v70 + 20 * v66 + 20, v70 + 20 * v66 + 40))
                {
                  v71 += 20;
                  v72 = v73;
                }
                v74 = *(__n128 *)v71;
                *(_DWORD *)(v70 + 16) = *(_DWORD *)(v71 + 16);
                *(__n128 *)v70 = v74;
                v70 = v71;
                v66 = v72;
              }
              while (v72 <= v69);
              v65 = (__n128 *)((char *)v65 - 20);
              if ((__n128 *)v71 == v65)
              {
                v30 = v92;
                *(_DWORD *)(v71 + 16) = v93;
                *(__n128 *)v71 = v30;
              }
              else
              {
                v75 = *v65;
                *(_DWORD *)(v71 + 16) = v65[1].n128_u32[0];
                *(__n128 *)v71 = v75;
                v30 = v92;
                v65[1].n128_u32[0] = v93;
                *v65 = v30;
                v76 = v71 - (_QWORD)a1 + 20;
                if (v76 >= 21)
                {
                  v77 = (unint64_t)(-2 - 0x3333333333333333 * (v76 >> 2)) >> 1;
                  v78 = (uint64_t)a1 + 20 * v77;
                  if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v78, v71))
                  {
                    v79 = *(__n128 *)v71;
                    v95 = *(_DWORD *)(v71 + 16);
                    v94 = v79;
                    do
                    {
                      v80 = v78;
                      v81 = *(_OWORD *)v78;
                      *(_DWORD *)(v71 + 16) = *(_DWORD *)(v78 + 16);
                      *(_OWORD *)v71 = v81;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = (uint64_t)a1 + 20 * v77;
                      v71 = v80;
                    }
                    while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v78, (uint64_t)&v94));
                    v30 = v94;
                    *(_DWORD *)(v80 + 16) = v95;
                    *(__n128 *)v80 = v30;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return v30.n128_f64[0];
        }
        v12 = (uint64_t)v9 + 20 * (v11 >> 1);
        if ((unint64_t)v10 < 0xA01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v9 + 20 * (v11 >> 1), (uint64_t)v9, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v9, (uint64_t)v9 + 20 * (v11 >> 1), v8);
          v13 = 5 * (v11 >> 1);
          v14 = (uint64_t)&v9[-1] + 20 * (v11 >> 1) - 4;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)v9[1].n128_i64 + 4, v14, v90);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((uint64_t)&v9[2].n128_i64[1], (uint64_t)v9[1].n128_i64 + 4 * v13 + 4, v89);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(v14, v12, (uint64_t)v9[1].n128_i64 + 4 * v13 + 4);
          v15 = *v9;
          v95 = v9[1].n128_u32[0];
          v94 = v15;
          v16 = *(_DWORD *)(v12 + 16);
          *v9 = *(__n128 *)v12;
          v9[1].n128_u32[0] = v16;
          v17 = v94;
          *(_DWORD *)(v12 + 16) = v95;
          *(__n128 *)v12 = v17;
        }
        --a3;
        a2 = v91;
        if ((a4 & 1) == 0
          && !GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v9[-2].n128_i64[1] + 4, (uint64_t)v9))
        {
          v31 = *v9;
          v93 = v9[1].n128_u32[0];
          v92 = v31;
          if (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v92, v8))
          {
            do
              v9 = (__n128 *)((char *)v9 + 20);
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v92, (uint64_t)v9));
          }
          else
          {
            v32 = (unint64_t)v9[1].n128_u64 + 4;
            do
            {
              v9 = (__n128 *)v32;
              if (v32 >= (unint64_t)v91)
                break;
              v33 = GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v92, v32);
              v32 = (unint64_t)v9[1].n128_u64 + 4;
            }
            while (!v33);
          }
          v34 = (unint64_t)v91;
          if (v9 < v91)
          {
            v34 = (unint64_t)v91;
            do
              v34 -= 20;
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v92, v34));
          }
          while ((unint64_t)v9 < v34)
          {
            v35 = *v9;
            v95 = v9[1].n128_u32[0];
            v94 = v35;
            v36 = *(__n128 *)v34;
            v9[1].n128_u32[0] = *(_DWORD *)(v34 + 16);
            *v9 = v36;
            v37 = v94;
            *(_DWORD *)(v34 + 16) = v95;
            *(__n128 *)v34 = v37;
            do
              v9 = (__n128 *)((char *)v9 + 20);
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v92, (uint64_t)v9));
            do
              v34 -= 20;
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<((uint64_t)&v92, v34));
          }
          v38 = (__n128 *)((char *)v9 - 20);
          if ((__n128 *)((char *)&v9[-2].n128_f64[1] + 4) != a1)
          {
            v39 = *v38;
            a1[1].n128_u32[0] = v9[-1].n128_u32[3];
            *a1 = v39;
          }
          a4 = 0;
          v30 = v92;
          v9[-1].n128_u32[3] = v93;
          *v38 = v30;
          continue;
        }
        v18 = *v9;
        v93 = v9[1].n128_u32[0];
        v92 = v18;
        v19 = (unint64_t)v9;
        do
        {
          v20 = v19;
          v19 += 20;
        }
        while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v19, (uint64_t)&v92));
        v21 = (unint64_t)v91;
        if ((__n128 *)v20 == v9)
        {
          v21 = (unint64_t)v91;
          do
          {
            if (v19 >= v21)
              break;
            v21 -= 20;
          }
          while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v21, (uint64_t)&v92));
        }
        else
        {
          do
            v21 -= 20;
          while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v21, (uint64_t)&v92));
        }
        if (v19 < v21)
        {
          v22 = v19;
          v23 = v21;
          do
          {
            v94 = *(__n128 *)v22;
            v24 = v94;
            v95 = *(_DWORD *)(v22 + 16);
            v25 = v95;
            v26 = *(_DWORD *)(v23 + 16);
            *(_OWORD *)v22 = *(_OWORD *)v23;
            *(_DWORD *)(v22 + 16) = v26;
            *(_DWORD *)(v23 + 16) = v25;
            *(__n128 *)v23 = v24;
            do
            {
              v20 = v22;
              v22 += 20;
            }
            while (GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v22, (uint64_t)&v92));
            do
              v23 -= 20;
            while (!GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo::operator<(v23, (uint64_t)&v92));
          }
          while (v22 < v23);
        }
        if ((__n128 *)v20 != a1)
        {
          v27 = *(__n128 *)v20;
          a1[1].n128_u32[0] = *(_DWORD *)(v20 + 16);
          *a1 = v27;
        }
        v28 = v92;
        *(_DWORD *)(v20 + 16) = v93;
        *(__n128 *)v20 = v28;
        if (v19 < v21)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *,false>(a1, v20, a3, a4 & 1);
          a4 = 0;
          v9 = (__n128 *)(v20 + 20);
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>(a1, (__n128 *)v20);
        v9 = (__n128 *)(v20 + 20);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GRCPerFrameData::AddShaderProfilerSample(unsigned int,SampleInfoWithPayload const&)::EncoderTracePacketInfo *>((__n128 *)(v20 + 20), v91))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)v20;
        if (!v29)
          goto LABEL_1;
        return v30.n128_f64[0];
    }
  }
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>(void **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  void *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *__p[5];

  if (a5 < 1)
    return;
  v6 = __src;
  v9 = a1 + 2;
  v10 = a1[2];
  v11 = (unint64_t)a1[1];
  if (a5 > (uint64_t)&v10[-v11] >> 3)
  {
    v12 = *a1;
    v13 = a5 + ((uint64_t)(v11 - (_QWORD)*a1) >> 3);
    if (v13 >> 61)
      abort();
    v14 = (__dst - v12) >> 3;
    v15 = v10 - v12;
    if (v15 >> 2 > v13)
      v13 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    __p[4] = v9;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v16);
    else
      v17 = 0;
    v27 = (_QWORD *)(v16 + 8 * v14);
    __p[0] = (void *)v16;
    __p[1] = v27;
    __p[3] = (void *)(v16 + 8 * v17);
    v28 = 8 * a5;
    v29 = &v27[a5];
    do
    {
      v30 = *(_QWORD *)v6;
      v6 += 8;
      *v27++ = v30;
      v28 -= 8;
    }
    while (v28);
    __p[2] = v29;
    std::vector<unsigned long long>::__swap_out_circular_buffer(a1, (uint64_t)__p, __dst);
    if (__p[0])
      operator delete(__p[0]);
    return;
  }
  v18 = v11 - (_QWORD)__dst;
  v19 = (uint64_t)(v11 - (_QWORD)__dst) >> 3;
  if (v19 >= a5)
  {
    v20 = &__src[8 * a5];
    v22 = (char *)a1[1];
LABEL_17:
    v23 = &__dst[8 * a5];
    v24 = &v22[-8 * a5];
    v25 = v22;
    if ((unint64_t)v24 < v11)
    {
      v25 = v22;
      do
      {
        v26 = *(_QWORD *)v24;
        v24 += 8;
        *(_QWORD *)v25 = v26;
        v25 += 8;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v22 != v23)
      memmove(&v22[-8 * ((v22 - v23) >> 3)], __dst, v22 - v23);
    if (v20 != v6)
      memmove(__dst, v6, v20 - v6);
    return;
  }
  v20 = &__src[8 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(a1[1], &__src[8 * v19], a4 - v20);
  v22 = (char *)(v11 + v21);
  a1[1] = (void *)(v11 + v21);
  if (v18 >= 1)
    goto LABEL_17;
}

char *std::vector<unsigned long long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t *_ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = 0;
  v4 = *a2;
  v5 = *result;
  while (1)
  {
    v6 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v3];
    v7 = *(_QWORD *)(v4 + 8 * v6);
    v8 = *(_QWORD *)(v5 + 8 * v6);
    if (v7 != v8)
      break;
    if (++v3 == 4)
      goto LABEL_10;
  }
  if (v7 >= v8)
  {
LABEL_10:
    v14 = 0;
    v15 = *a3;
    while (1)
    {
      v16 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v14];
      v17 = *(_QWORD *)(v15 + 8 * v16);
      v18 = *(_QWORD *)(v4 + 8 * v16);
      if (v17 != v18)
        break;
      if (++v14 == 4)
        return result;
    }
    if (v17 < v18)
    {
      v19 = 0;
      *a2 = v15;
      *a3 = v4;
      v20 = a2[1];
      a2[1] = a3[1];
      a3[1] = v20;
      v22 = a2 + 2;
      v21 = a2[2];
      a2[2] = a3[2];
      a3[2] = v21;
      v23 = *a2;
      v24 = *result;
      while (1)
      {
        v25 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v19];
        v26 = *(_QWORD *)(v23 + 8 * v25);
        v27 = *(_QWORD *)(v24 + 8 * v25);
        if (v26 != v27)
          break;
        if (++v19 == 4)
          return result;
      }
      if (v26 < v27)
      {
        *result = v23;
        *a2 = v24;
        v39 = result[1];
        result[1] = a2[1];
        a2[1] = v39;
        v29 = result + 2;
LABEL_30:
        v41 = *v29;
        *v29 = *v22;
        *v22 = v41;
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = *a3;
    while (1)
    {
      v11 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v9];
      v12 = *(_QWORD *)(v10 + 8 * v11);
      v13 = *(_QWORD *)(v4 + 8 * v11);
      if (v12 != v13)
        break;
      if (++v9 == 4)
        goto LABEL_21;
    }
    if (v12 < v13)
    {
      *result = v10;
      *a3 = v5;
      v28 = result[1];
      result[1] = a3[1];
      a3[1] = v28;
      v29 = result + 2;
LABEL_29:
      v22 = a3 + 2;
      goto LABEL_30;
    }
LABEL_21:
    v30 = 0;
    *result = v4;
    *a2 = v5;
    v31 = result[1];
    result[1] = a2[1];
    v29 = a2 + 2;
    v32 = a2[2];
    a2[1] = v31;
    v33 = result[2];
    result[2] = v32;
    a2[2] = v33;
    v34 = *a3;
    v35 = *a2;
    while (1)
    {
      v36 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v30];
      v37 = *(_QWORD *)(v34 + 8 * v36);
      v38 = *(_QWORD *)(v35 + 8 * v36);
      if (v37 != v38)
        break;
      if (++v30 == 4)
        return result;
    }
    if (v37 < v38)
    {
      *a2 = v34;
      *a3 = v35;
      v40 = a2[1];
      a2[1] = a3[1];
      a3[1] = v40;
      goto LABEL_29;
    }
  }
  return result;
}

uint64_t *_ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEvT1_SJ_SJ_SJ_T0_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(a1, a2, a3);
  v9 = 0;
  v10 = *a4;
  v11 = *a3;
  while (1)
  {
    v12 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v9];
    v13 = *(_QWORD *)(v10 + 8 * v12);
    v14 = *(_QWORD *)(v11 + 8 * v12);
    if (v13 != v14)
      break;
    if (++v9 == 4)
      return result;
  }
  if (v13 < v14)
  {
    v15 = 0;
    *a3 = v10;
    *a4 = v11;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = a3[2];
    a3[2] = a4[2];
    a4[2] = v17;
    v18 = *a3;
    v19 = *a2;
    while (1)
    {
      v20 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v15];
      v21 = *(_QWORD *)(v18 + 8 * v20);
      v22 = *(_QWORD *)(v19 + 8 * v20);
      if (v21 != v22)
        break;
      if (++v15 == 4)
        return result;
    }
    if (v21 < v22)
    {
      v23 = 0;
      *a2 = v18;
      *a3 = v19;
      v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      v25 = a2[2];
      a2[2] = a3[2];
      a3[2] = v25;
      v26 = *a2;
      v27 = *a1;
      while (1)
      {
        v28 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v23];
        v29 = *(_QWORD *)(v26 + 8 * v28);
        v30 = *(_QWORD *)(v27 + 8 * v28);
        if (v29 != v30)
          break;
        if (++v23 == 4)
          return result;
      }
      if (v29 < v30)
      {
        *a1 = v26;
        *a2 = v27;
        v31 = a1[1];
        a1[1] = a2[1];
        a2[1] = v31;
        v32 = a1[2];
        a1[2] = a2[2];
        a2[2] = v32;
      }
    }
  }
  return result;
}

uint64_t *_ZNSt3__124__sort5_maybe_branchlessB8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEELi0EEEvT1_SJ_SJ_SJ_SJ_T0_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEvT1_SJ_SJ_SJ_T0_(a1, a2, a3, a4);
  v11 = 0;
  v12 = *a5;
  v13 = *a4;
  while (1)
  {
    v14 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v11];
    v15 = *(_QWORD *)(v12 + 8 * v14);
    v16 = *(_QWORD *)(v13 + 8 * v14);
    if (v15 != v16)
      break;
    if (++v11 == 4)
      return result;
  }
  if (v15 < v16)
  {
    v17 = 0;
    *a4 = v12;
    *a5 = v13;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = a4[2];
    a4[2] = a5[2];
    a5[2] = v19;
    v20 = *a4;
    v21 = *a3;
    while (1)
    {
      v22 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v17];
      v23 = *(_QWORD *)(v20 + 8 * v22);
      v24 = *(_QWORD *)(v21 + 8 * v22);
      if (v23 != v24)
        break;
      if (++v17 == 4)
        return result;
    }
    if (v23 < v24)
    {
      v25 = 0;
      *a3 = v20;
      *a4 = v21;
      v26 = a3[1];
      a3[1] = a4[1];
      a4[1] = v26;
      v27 = a3[2];
      a3[2] = a4[2];
      a4[2] = v27;
      v28 = *a3;
      v29 = *a2;
      while (1)
      {
        v30 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v25];
        v31 = *(_QWORD *)(v28 + 8 * v30);
        v32 = *(_QWORD *)(v29 + 8 * v30);
        if (v31 != v32)
          break;
        if (++v25 == 4)
          return result;
      }
      if (v31 < v32)
      {
        v33 = 0;
        *a2 = v28;
        *a3 = v29;
        v34 = a2[1];
        a2[1] = a3[1];
        a3[1] = v34;
        v35 = a2[2];
        a2[2] = a3[2];
        a3[2] = v35;
        v36 = *a2;
        v37 = *a1;
        while (1)
        {
          v38 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v33];
          v39 = *(_QWORD *)(v36 + 8 * v38);
          v40 = *(_QWORD *)(v37 + 8 * v38);
          if (v39 != v40)
            break;
          if (++v33 == 4)
            return result;
        }
        if (v39 < v40)
        {
          *a1 = v36;
          *a2 = v37;
          v41 = a1[1];
          a1[1] = a2[1];
          a2[1] = v41;
          v42 = a1[2];
          a1[2] = a2[2];
          a2[2] = v42;
        }
      }
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEbT1_SJ_T0_(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = 0;
      v7 = *(a2 - 3);
      v8 = *a1;
      while (1)
      {
        v9 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v6];
        v10 = *(_QWORD *)(v7 + 8 * v9);
        v11 = *(_QWORD *)(v8 + 8 * v9);
        if (v10 != v11)
          break;
        if (++v6 == 4)
          return 1;
      }
      if (v10 < v11)
      {
        *a1 = v7;
        *(a2 - 3) = v8;
        v29 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v29;
        v30 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v30;
      }
      return 1;
    case 3uLL:
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEvT1_SJ_SJ_SJ_T0_(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      _ZNSt3__124__sort5_maybe_branchlessB8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEELi0EEEvT1_SJ_SJ_SJ_SJ_T0_(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v12 = a1 + 6;
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZZZL18CollectCounterDataP21GTMTLReplayControllerP7NSArrayyS5_mP26GTMTLReplayOperationQueuesP11NSOperationjbjP21GTAGXPerfStateControlEUb_EUb0_E3__0PNS_6vectorIyNS_9allocatorIyEEEEEEjT1_SJ_SJ_T0_(a1, a1 + 3, a1 + 6);
      v13 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v14 = 0;
      break;
  }
  while (2)
  {
    v15 = 0;
    v16 = *v13;
    while (1)
    {
      v17 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v15];
      v18 = *(_QWORD *)(v16 + 8 * v17);
      v19 = *(_QWORD *)(*v12 + 8 * v17);
      if (v18 != v19)
        break;
      if (++v15 == 4)
        goto LABEL_25;
    }
    if (v18 < v19)
    {
      v20 = *(_OWORD *)(v13 + 1);
      *v13 = 0;
      v13[1] = 0;
      v21 = v13;
      v13[2] = 0;
      while (1)
      {
        *(_OWORD *)v21 = *(_OWORD *)v12;
        v21[2] = v12[2];
        *v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        if (v12 == a1)
          break;
        v21 = v12;
        v22 = 0;
        v24 = *(v12 - 3);
        v12 -= 3;
        v23 = v24;
        while (1)
        {
          v25 = CollectCounterData(GTMTLReplayController *,NSArray *,unsigned long long,NSArray *,unsigned long,GTMTLReplayOperationQueues *,NSOperation *,unsigned int,BOOL,unsigned int,GTAGXPerfStateControl *)::kCounterCompare[v22];
          v26 = *(_QWORD *)(v16 + 8 * v25);
          v27 = *(_QWORD *)(v23 + 8 * v25);
          if (v26 != v27)
            break;
          if (++v22 == 4)
            goto LABEL_22;
        }
        if (v26 >= v27)
          goto LABEL_22;
      }
      v21 = a1;
LABEL_22:
      v28 = (void *)*v21;
      if (*v21)
      {
        v21[1] = (uint64_t)v28;
        v31 = v20;
        operator delete(v28);
        v20 = v31;
      }
      *v21 = v16;
      *(_OWORD *)(v21 + 1) = v20;
      if (++v14 == 8)
        return v13 + 3 == a2;
    }
LABEL_25:
    v12 = v13;
    v13 += 3;
    if (v13 != a2)
      continue;
    return 1;
  }
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void SortCounterData(NSMutableData *a1, uint64_t a2)
{
  NSMutableData *v3;
  NSUInteger v4;
  NSMutableData *v5;

  v3 = a1;
  v4 = -[NSMutableData length](v3, "length");
  v5 = objc_retainAutorelease(v3);
  qsort(-[NSMutableData mutableBytes](v5, "mutableBytes"), v4 / (8 * a2), 8 * a2, (int (__cdecl *)(const void *, const void *))compareSampleData);

}

void sub_1FABF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t compareSampleData@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = 0;
  while (1)
  {
    v4 = compareSampleData(void const*,void const*)::kCounterCompare[v3];
    v5 = a1[v4];
    v6 = a2[v4];
    if (v6 < v5)
      LODWORD(a3) = 1;
    a3 = v5 < v6 ? 0xFFFFFFFFLL : a3;
    if (v6 != v5)
      break;
    if (++v3 == 4)
      return 0;
  }
  return a3;
}

void ___ZL15CollectCountersP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  void *v10;
  id v11;
  void *i;
  void *v13;
  id v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *j;
  uint64_t v19;
  char *v20;
  id v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  void *v54;
  unint64_t v55;
  void *v56;
  _QWORD v57[3];
  _QWORD v58[3];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[128];

  v1 = *(void **)(a1 + 48);
  v2 = *(void **)(a1 + 56);
  v3 = *(id *)(a1 + 40);
  v45 = v1;
  v43 = v2;
  v53 = (char *)objc_msgSend(v45, "count");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectAtIndexedSubscript:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectAtIndexedSubscript:", 0));
  v55 = (unint64_t)objc_msgSend(v4, "length");
  v6 = objc_msgSend(v5, "count");

  v50 = (unint64_t)objc_msgSend(v3, "count");
  v51 = 8 * (_QWORD)v6;
  v47 = v55 / (8 * (uint64_t)v6);
  v44 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 8 * v47 * 2 * v50));
  if (v53)
  {
    v8 = 0;
    if (v47 <= 1)
      v9 = 1;
    else
      v9 = v55 / (8 * (uint64_t)v6);
    do
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectAtIndexedSubscript:", v8));
      v11 = objc_msgSend(v10, "count");
      if (v11)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", i));
          v61[(_QWORD)i] = objc_msgSend(v3, "indexOfObject:", v13);

        }
      }
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectAtIndexedSubscript:", v8)));
      v15 = (char *)objc_msgSend(v14, "bytes");
      v16 = (char *)objc_msgSend(objc_retainAutorelease(v44), "mutableBytes");
      if (v51 <= v55)
      {
        v17 = 0;
        do
        {
          if (v11)
          {
            for (j = 0; j != v11; j = (char *)j + 1)
            {
              v19 = v61[(_QWORD)j];
              if (v19 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v20 = &v16[16 * v19];
                *(_QWORD *)v20 = *(_QWORD *)&v15[8 * (_QWORD)j];
                *((_QWORD *)v20 + 1) = *((_QWORD *)v15 + 6);
              }
            }
          }
          v15 += 8 * (_QWORD)v11;
          v16 += 16 * v50;
          ++v17;
        }
        while (v17 != v9);
      }

      ++v8;
    }
    while (v8 != v53);
  }
  v46 = (void *)objc_opt_new(NSMutableArray, v7);
  v21 = objc_retainAutorelease(v44);
  v22 = objc_msgSend(v21, "bytes");
  v40 = objc_retainAutorelease(v21);
  v23 = objc_msgSend(v40, "bytes");
  if (v51 <= v55)
  {
    v49 = 0;
    v54 = 0;
    v56 = 0;
    if (v47 <= 1)
      v24 = 1;
    else
      v24 = v47;
    v42 = v24;
    v52 = v23 + 5;
    while (1)
    {
      v48 = v23;
      if (*v23 == *v22)
      {
        if (v23[2] != v22[2])
        {

          v56 = 0;
        }
        if (v54)
          goto LABEL_29;
      }
      else
      {

        v56 = 0;
      }
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      objc_msgSend(v46, "addObject:", v54);
LABEL_29:
      if (!v56)
      {
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        objc_msgSend(v54, "addObject:", v56);
      }
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v50));
      objc_msgSend(v56, "addObject:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v46, "count") - 1));
      v61[0] = v26;
      v61[1] = &off_739910;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v61, 2));
      objc_msgSend(v25, "addObject:", v27);

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v54, "count") - 1));
      v60[0] = v28;
      v60[1] = &off_739910;
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v60, 2));
      objc_msgSend(v25, "addObject:", v29);

      v30 = v52;
      v31 = v50 - 2;
      if (v50 > 2)
      {
        do
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(v30 - 1)));
          v59[0] = v32;
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *v30));
          v59[1] = v33;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v59, 2));
          objc_msgSend(v25, "addObject:", v34);

          v30 += 2;
          --v31;
        }
        while (v31);
      }

      v22 = v48;
      v23 = &v48[2 * v50];
      v52 += 2 * v50;
      if (++v49 == v42)
        goto LABEL_34;
    }
  }
  v54 = 0;
  v56 = 0;
LABEL_34:
  v35 = v46;

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v35, CFSTR("AverageSamples"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), CFSTR("counterLists"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("counters"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 88)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v36, CFSTR("numberOfPasses"));

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v57[0] = CFSTR("enabled");
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    v58[0] = v37;
    v57[1] = CFSTR("consistent");
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24)));
    v58[1] = v38;
    v57[2] = CFSTR("level");
    v58[2] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 3));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v39, CFSTR("Frame Consistent Perf Info"));

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &off_7390B8, CFSTR("Frame Consistent Perf Info"));
  }
}

void sub_1FB2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL15CollectCountersP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_2(uint64_t a1)
{
  void *v2;
  NSMutableData *v3;

  v3 = (NSMutableData *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48)));
  SortCounterData(v3, (uint64_t)objc_msgSend(v2, "count"));

}

void sub_1FB4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id ___ZL15CollectCountersP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yP19NSMutableDictionaryjjP21GTAGXPerfStateControl_block_invoke_3(uint64_t a1)
{
  GTMTLReplayController *v2;
  NSArray *v3;
  uint64_t v4;
  _UNKNOWN **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;

  GTMTLReplayController_prePlayForProfiling(*(_QWORD *)(a1 + 88));
  v2 = *(GTMTLReplayController **)(a1 + 88);
  v3 = (NSArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 96)));
  CollectCounterData(v2, v3, *(_QWORD *)(a1 + 104), *(NSArray **)(a1 + 40), *(_QWORD *)(a1 + 96), *(GTMTLReplayOperationQueues **)(a1 + 112), *(NSOperation **)(a1 + 48), *(unsigned int *)(a1 + 128), 0, *(_DWORD *)(a1 + 132), *(GTAGXPerfStateControl **)(a1 + 120));

  objc_msgSend(*(id *)(a1 + 56), "finish");
  objc_msgSend(*(id *)(a1 + 56), "setStatEnabled:", 0);
  objc_msgSend(*(id *)(a1 + 56), "setGPUPriority:", 1);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v4 + 16) || *(_DWORD *)(v4 + 4) == 1)
  {
    v5 = GTAGXPerfStateControl::ConsistentGPUPerfStateLevel((GTAGXPerfStateControl *)v4, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "length"))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        if (*(_BYTE *)(v7 + 24))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("enabled")));
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v8, "BOOLValue");

        }
        else
        {
          *(_BYTE *)(v7 + 24) = 0;
        }
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
          goto LABEL_13;
        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("consistent")));
        v13 = objc_msgSend(v12, "BOOLValue");
      }
      else
      {
        v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("level")));
        objc_msgSend(v9, "setString:", v10);

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("enabled")));
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v11, "BOOLValue");

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("consistent")));
        v13 = objc_msgSend(v12, "BOOLValue");
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v13;

    }
LABEL_13:

    v4 = *(_QWORD *)(a1 + 120);
  }
  GTAGXPerfStateControl::DisableConsistentGPUPerfState((GTAGXPerfStateControl *)v4);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 112) + 8), "addOperation:", *(_QWORD *)(a1 + 48));
}

void sub_1FB6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL24CalculateFrameTimeLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yjP14NSMutableArrayIP8NSNumberEmjP21GTAGXPerfStateControl_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  id v16;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(unint64_t **)(v2 + 56);
  v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v4 - v3) >> 3));
  if (v4 == (unint64_t *)v3)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long> *,false>(v3, v4, v6, 1);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(unint64_t **)(v7 + 48);
  v9 = *(unint64_t **)(v7 + 56);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *v8;
      v13 = v8[1];
      v8 += 3;
      if (v11 <= v12)
        v11 = v12;
      v14 = v13 >= v11;
      v15 = v13 - v11;
      if (v13 > v11)
        v11 = v13;
      if (!v14)
        v15 = 0;
      v10 += v15;
    }
    while (v8 != v9);
  }
  v16 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v10));
  objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:");

}

void sub_1FB7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id ___ZL24CalculateFrameTimeLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yjP14NSMutableArrayIP8NSNumberEmjP21GTAGXPerfStateControl_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v7;
  _QWORD v8[5];

  GTMTLReplayController_prePlayForProfiling(*(_QWORD *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 32), "setStatEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 32), "isStatEnabled");
  objc_msgSend(*(id *)(a1 + 32), "setGPUPriority:", 0);
  v2 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(v2 + 16) || *(_DWORD *)(v2 + 4) == 1)
  {
    if (!GTAGXPerfStateControl::IsGPUPerformanceStateInduced((GTAGXPerfStateControl *)v2))
      GTAGXPerfStateControl::EnableConsistentGPUPerfState(*(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 104));
    objc_msgSend(*(id *)(a1 + 32), "setStatOptions:", 805306368);
  }
  else if (*(_DWORD *)(a1 + 108))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 8), "defaultDevice"));
    if ((objc_opt_respondsToSelector(v7, "setConsistentGPUPerfStateTo:") & 1) != 0)
      objc_msgSend(v7, "setConsistentGPUPerfStateTo:", *(unsigned int *)(a1 + 108));
    objc_msgSend(*(id *)(a1 + 32), "setStatOptions:", 2952790016);

  }
  objc_msgSend(*(id *)(a1 + 32), "setStatLocations:", *(_QWORD *)(a1 + 80));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", 0));
  objc_msgSend(v3, "requestCounters:withIndex:", v4, 0);

  v5 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = ___ZL24CalculateFrameTimeLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yjP14NSMutableArrayIP8NSNumberEmjP21GTAGXPerfStateControl_block_invoke_3;
  v8[3] = &unk_724E68;
  v8[4] = *(_QWORD *)(a1 + 56);
  objc_msgSend(v5, "addPerfSampleHandler:", v8);
  GTMTLReplayController_playTo(*(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 104) + *(_QWORD *)(*(_QWORD *)(a1 + 88) + 96));
  objc_msgSend(*(id *)(a1 + 32), "finish");
  objc_msgSend(*(id *)(a1 + 32), "setGPUPriority:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setStatEnabled:", 0);
  GTAGXPerfStateControl::DisableConsistentGPUPerfState(*(GTAGXPerfStateControl **)(a1 + 72));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 96) + 8), "addOperation:", *(_QWORD *)(a1 + 48));
}

void sub_1FB974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL24CalculateFrameTimeLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayS4_yjP14NSMutableArrayIP8NSNumberEmjP21GTAGXPerfStateControl_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  unsigned __int8 v7;
  double v8;
  double v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  id v26;

  v26 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "label"));
  v7 = objc_msgSend(v6, "hasPrefix:", CFSTR("com.apple.gputools.replay"));

  if ((v7 & 1) == 0)
  {
    objc_msgSend(v26, "GPUStartTime");
    v9 = v8;
    objc_msgSend(v26, "GPUEndTime");
    v10 = (unint64_t)(v9 * 1000000000.0);
    v12 = (unint64_t)(v11 * 1000000000.0);
    v13 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v14 = (unint64_t *)v13[7];
    v15 = v13[8];
    if ((unint64_t)v14 >= v15)
    {
      v17 = 0xAAAAAAAAAAAAAAALL;
      v18 = (unint64_t *)v13[6];
      v19 = 0xAAAAAAAAAAAAAAABLL * (v14 - v18);
      v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 < 0x555555555555555)
        v17 = v20;
      if (v17)
      {
        v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v17);
        v18 = (unint64_t *)v13[6];
        v14 = (unint64_t *)v13[7];
      }
      else
      {
        v22 = 0;
      }
      v23 = (unint64_t *)(v17 + 24 * v19);
      v24 = v17 + 24 * v22;
      *v23 = v10;
      v23[1] = v12;
      v23[2] = (unint64_t)v26;
      v16 = v23 + 3;
      if (v14 != v18)
      {
        do
        {
          v25 = *(_OWORD *)(v14 - 3);
          *(v23 - 1) = *(v14 - 1);
          *(_OWORD *)(v23 - 3) = v25;
          v23 -= 3;
          v14 -= 3;
        }
        while (v14 != v18);
        v18 = (unint64_t *)v13[6];
      }
      v13[6] = v23;
      v13[7] = v16;
      v13[8] = v24;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v14 = v10;
      v14[1] = v12;
      v16 = v14 + 3;
      v14[2] = (unint64_t)v26;
    }
    v13[7] = v16;
  }

}

void sub_1FBB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZL18PerformUSCSamplingP21GTMTLReplayControllerP12NSDictionary_block_invoke(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24));
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1FBD78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void GTMTLReplayClient_embeddedDerivedCounterData(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id Analysis;
  void *v8;
  void *v9;
  io_registry_entry_t IOAccelerator;
  id MetalPluginName;
  void *v12;
  unsigned int v14;

  v3 = a3;
  v12 = (void *)objc_opt_new(NSMutableDictionary, v4);
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("profileCounters")));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v5, CFSTR("profileCounters"));
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "defaultDevice"));
    Analysis = DYMTLReplayFrameProfiler_loadAnalysis(v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue(Analysis);

    objc_msgSend(v12, "addEntriesFromDictionary:", v5);
  }

  v14 = 0x7FFFFFFF;
  if (objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("MetalPluginName"))))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("gpuTarget")));
    v9 = v8;
    if (v8)
      v14 = objc_msgSend(v8, "intValue");

  }
  else
  {
    IOAccelerator = GetIOAccelerator();
    MetalPluginName = GetMetalPluginName(IOAccelerator, &v14);
    objc_claimAutoreleasedReturnValue(MetalPluginName);
  }
  operator new();
}

void sub_1FD774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, id *a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,_Unwind_Exception *exception_objecta,void *a43,void *__p,uint64_t a45,void *a46,id *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *v67;

  _Block_object_dispose(&a67, 8);
  STACK[0x2E0] = a17;
  std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x2E0]);

  _Block_object_dispose(&STACK[0x220], 8);
  GRCInfo::~GRCInfo(a18);

  std::unique_ptr<GTAGXPerfStateControl>::reset[abi:nn180100](&a47);
  _Unwind_Resume(a1);
}

void ___ZL31CollectDerivedCounterDataLegacyP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryP21GTAGXPerfStateControl_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[7];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("profileCounters")));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v25 = *(_OWORD *)(a1 + 64);
  v6 = v2;
  v24 = v5;
  v36[0] = CFSTR("MTLStatCommandBufferIndex");
  v36[1] = CFSTR("MTLStatEncoderIndex");
  v36[2] = CFSTR("MTLStatCommandIndex");
  v36[3] = CFSTR("MTLStat_nSec");
  v36[4] = CFSTR("MTLStatDataMaster");
  v36[5] = CFSTR("MTLStatSampleLocation");
  v36[6] = CFSTR("MTLStatTotalGPUCycles");
  v22 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v36, 7));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)objc_msgSend(v7, "count") + (_QWORD)objc_msgSend(v22, "count")));
  v23 = v4;
  objc_msgSend(v9, "addObjectsFromArray:", v7);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v10 = v22;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(v10);
        v14 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v8, "containsObject:", v14) & 1) == 0)
          objc_msgSend(v9, "addObject:", v14);
      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v11);
  }

  v16 = (void *)objc_opt_new(NSOperation, v15);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = ___ZL18DerivedCounterDataP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayP19NSMutableDictionaryjP21GTAGXPerfStateControl_block_invoke;
  v30[3] = &unk_725068;
  v34 = v3;
  v17 = v9;
  v31 = v17;
  v18 = v24;
  v32 = v18;
  v35 = v25;
  v19 = v16;
  v33 = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v30));
  objc_msgSend(v20, "setQueuePriority:", -8);
  objc_msgSend(*(id *)v25, "addOperation:", v20);
  v21 = v19;

  objc_msgSend(v23, "addDependency:", v21);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 8), "addOperation:", *(_QWORD *)(a1 + 40));

}

void sub_1FE0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id __Block_byref_object_copy__188(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  id result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(id *)(a2 + 64);
  v4 = *(id *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = *(id *)(a2 + 96);
  result = *(id *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return result;
}

void __Block_byref_object_dispose__189(uint64_t a1)
{
  GRCInfo::~GRCInfo((id *)(a1 + 48));
}

__n128 __Block_byref_object_copy__193(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__194(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZL28CollectDerivedCounterDataGRCP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP12NSDictionaryP21GTAGXPerfStateControl_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t i;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  id *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  unint64_t v30;
  id v31;
  __CFString *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];

  GTMTLReplayController_prePlayForProfiling(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48));
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v3 = *(unsigned int *)(a1 + 64);
  v4 = *(unsigned int *)(a1 + 68);
  v5 = *(id *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "firstObject"));
  if (v6)
  {
    if (!(_DWORD)v4)
    {
      if (IsGPUPerformanceStateInduced(*(void **)(*(_QWORD *)(v2 + 48) + 8)))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "firstObject"));
        objc_msgSend(v7, "setOptions:", &off_739130);

      }
      else
      {
        v8 = *(unsigned int *)(v2 + 112);
        if ((_DWORD)v8)
        {
          GTAGXPerfStateControl::EnableConsistentGPUPerfState(*(_QWORD *)(v2 + 56), v8);
        }
        else
        {
          v39[0] = CFSTR("DisableOverlap");
          v39[1] = CFSTR("LockGPUPerfState");
          v40[0] = &__kCFBooleanTrue;
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v3));
          v40[1] = v9;
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v40, v39, 2));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "firstObject"));
          objc_msgSend(v11, "setOptions:", v10);

        }
      }
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("passList")));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", v4));

    if (v13)
    {
      for (i = 0; i < (unint64_t)objc_msgSend(*(id *)(v2 + 72), "count"); ++i)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 72), "objectAtIndexedSubscript:", i));
        v16 = v15;
        if (!(_DWORD)v4)
        {
          objc_msgSend(v15, "setOptions:", 0);
          if ((objc_msgSend(v16, "requestTriggers:firstErrorIndex:", *(_QWORD *)(v2 + 88), 0) & 1) == 0)
          {
            v17 = *(_QWORD *)(v2 + 88);
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "name"));
            NSLog(CFSTR("Failed to set %@ Trigger for %@"), v17, v18);

          }
        }
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", i));
        if (!objc_msgSend(v19, "count"))
        {
          v20 = *(id *)(v2 + 96);

          v19 = v20;
        }
        v38 = 0;
        if ((objc_msgSend(v16, "requestCounters:firstErrorIndex:", v19, &v38) & 1) == 0)
        {
          v37 = v38;
          v36 = objc_msgSend(v19, "count");
          v30 = v38;
          v31 = objc_msgSend(v19, "count");
          if (v30 >= (unint64_t)v31)
          {
            v32 = &stru_7282A8;
          }
          else
          {
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectAtIndexedSubscript:", v38));
            v32 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "name"));
          }
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "name"));
          NSLog(CFSTR("Fail, error while requesting counter[%u/%lu] (%@) for source[%@] in pass[%u]"), v37, v36, v32, v34, v4);

          if (v30 < (unint64_t)v31)
          {

          }
          NSLog(CFSTR("%@\n"), v19);
          goto LABEL_32;
        }
        if ((objc_msgSend(v16, "setEnabled:", 1) & 1) == 0)
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "name"));
          NSLog(CFSTR("Fail, error while enabling source[%@] in pass[%u]"), v33, v4);

LABEL_32:
          goto LABEL_33;
        }

      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 64), "firstObject"));
      v22 = objc_msgSend(v21, "startSampling");

      if ((v22 & 1) != 0)
      {
        GRCInfo::ReplayForKickCounters((GTMTLReplayController **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48) + 40 * *(unsigned int *)(a1 + 68)));
        v23 = objc_autoreleasePoolPush();
        v24 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48);
        v25 = GRCInfo::DrainRawFrameData(v24);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        v27 = GRCInfo::PostProcessFrameData((uint64_t)v24, v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

        if (v28)
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v28);

        objc_autoreleasePoolPop(v23);
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                           + 64), "firstObject"));
        objc_msgSend(v29, "stopSampling");

        if (*(_DWORD *)(a1 + 68) + 1 == *(_DWORD *)(a1 + 72))
        {
          GRCInfo::AddConsistencyInfo((GTAGXPerfStateControl **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48));
          GTAGXPerfStateControl::DisableConsistentGPUPerfState(*(GTAGXPerfStateControl **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                                         + 56));
        }
      }
    }
    else
    {
LABEL_33:

    }
  }
  else
  {

  }
}

void sub_1FE6D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*,false>(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  BOOL v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  unsigned int *v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  BOOL v58;
  int32x2_t v59;
  unsigned int v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  BOOL v67;
  unsigned int *v68;
  unsigned int v69;
  _BOOL4 v70;
  int32x2_t v71;
  unsigned int *v72;
  BOOL v73;
  char v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  _BOOL4 v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unsigned int v87;
  BOOL v88;
  BOOL v89;
  unsigned int *v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t v94;
  uint32x2_t *v95;
  uint32x2_t v96;
  uint32x2_t v97;
  unsigned __int32 v98;
  __int8 v99;
  uint32x2_t *v100;
  BOOL v101;
  uint32x2_t v102;
  unint64_t v103;
  uint32x2_t *v104;
  uint64_t v105;
  uint32x2_t v106;
  uint32x2_t v107;
  unsigned int v108;
  __int8 v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t v112;
  int32x2_t v113;
  uint64_t v114;
  uint64_t v115;
  int32x2_t *v116;
  int32x2_t *v117;
  uint64_t v118;
  uint64_t v119;
  int32x2_t v120;
  unsigned __int8 v121;
  uint32x2_t v122;
  __int8 v123;
  uint64_t v124;
  unint64_t v125;
  uint32x2_t *v126;
  int32x2_t v127;
  uint32x2_t v128;
  __int8 v129;
  _QWORD *v130;
  uint32x2_t v131;
  __int8 v132;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  _BOOL4 v138;
  _BOOL4 v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *(a2 - 2);
        v73 = v69 == *v9;
        v70 = v69 < *v9;
        if (v73)
          v70 = *(a2 - 1) < v9[1];
        if (v70)
        {
          v71 = *(int32x2_t *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v8;
          *(int32x2_t *)v8 = v71;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v10 <= 191)
        {
          v72 = v9 + 2;
          v73 = v9 == a2 || v72 == a2;
          v74 = v73;
          if ((a4 & 1) != 0)
          {
            if ((v74 & 1) == 0)
            {
              v75 = 0;
              v76 = v9;
              do
              {
                v77 = v76[2];
                v78 = v76[3];
                v79 = *v76;
                v80 = v76[1];
                v76 = v72;
                v81 = v78 < v80;
                v73 = v77 == v79;
                v82 = v77 < v79;
                if (!v73)
                  v81 = v82;
                if (v81)
                {
                  v83 = *(_QWORD *)v76;
                  v84 = HIDWORD(*(_QWORD *)v76);
                  v85 = v75;
                  while (1)
                  {
                    v86 = (char *)v9 + v85;
                    *(_QWORD *)((char *)v9 + v85 + 8) = *(_QWORD *)((char *)v9 + v85);
                    if (!v85)
                      break;
                    v87 = *((_DWORD *)v86 - 2);
                    v88 = *((_DWORD *)v86 - 1) > v84;
                    v73 = v87 == (_DWORD)v83;
                    v89 = v87 > v83;
                    if (!v73)
                      v88 = v89;
                    v85 -= 8;
                    if (!v88)
                    {
                      v90 = (unsigned int *)((char *)v9 + v85 + 8);
                      goto LABEL_103;
                    }
                  }
                  v90 = v9;
LABEL_103:
                  *(_QWORD *)v90 = v83;
                }
                v72 = v76 + 2;
                v75 += 8;
              }
              while (v76 + 2 != a2);
            }
          }
          else if ((v74 & 1) == 0)
          {
            do
            {
              v134 = v7[2];
              v135 = v7[3];
              v136 = *v7;
              v137 = v7[1];
              v7 = v72;
              v138 = v135 < v137;
              v73 = v134 == v136;
              v139 = v134 < v136;
              if (v73)
                v139 = v138;
              if (v139)
              {
                v140 = *(_QWORD *)v72;
                v141 = HIDWORD(*(_QWORD *)v72);
                do
                {
                  v142 = v72;
                  v143 = *((_QWORD *)v72 - 1);
                  v72 -= 2;
                  *(_QWORD *)v142 = v143;
                  v144 = *(v142 - 4);
                  v145 = *(v142 - 3) > v141;
                  v73 = v144 == (_DWORD)v140;
                  v146 = v144 > v140;
                  if (!v73)
                    v145 = v146;
                }
                while (v145);
                *(_QWORD *)v72 = v140;
              }
              v72 = v7 + 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v91 = (v11 - 2) >> 1;
            v92 = v91;
            do
            {
              v93 = v92;
              if (v91 >= v92)
              {
                v94 = (2 * v92) | 1;
                v95 = (uint32x2_t *)&v9[2 * v94];
                if (2 * v93 + 2 >= (uint64_t)v11)
                {
                  v98 = v95->i32[0];
                }
                else
                {
                  v96 = v95[1];
                  v97 = vcgt_u32(v96, *v95);
                  v98 = (unsigned __int32)*v95;
                  v99 = v97.i8[4];
                  if (v98 != v96.i32[0])
                    v99 = v97.i8[0];
                  if ((v99 & 1) != 0)
                  {
                    v98 = (unsigned __int32)v95[1];
                    ++v95;
                    v94 = 2 * v93 + 2;
                  }
                }
                v100 = (uint32x2_t *)&v9[2 * v93];
                result = v100->u32[1];
                v73 = v98 == v100->i32[0];
                v101 = v98 < v100->i32[0];
                if (v73)
                  v101 = v95->i32[1] < result;
                if (!v101)
                {
                  v102 = *v100;
                  v103 = HIDWORD(*(unint64_t *)v100);
                  do
                  {
                    v104 = v100;
                    v100 = v95;
                    *v104 = *v95;
                    if (v91 < v94)
                      break;
                    v105 = (2 * v94) | 1;
                    v95 = (uint32x2_t *)&v9[2 * v105];
                    v94 = 2 * v94 + 2;
                    if (v94 >= (uint64_t)v11)
                    {
                      v108 = v95->i32[0];
                      v94 = v105;
                    }
                    else
                    {
                      v106 = v95[1];
                      v107 = vcgt_u32(v106, *v95);
                      v108 = *v95;
                      v109 = v107.i8[4];
                      if (v108 != v106.i32[0])
                        v109 = v107.i8[0];
                      if ((v109 & 1) != 0)
                      {
                        v108 = v95[1];
                        ++v95;
                      }
                      else
                      {
                        v94 = v105;
                      }
                    }
                    v110 = v95->i32[1] < v103;
                    v73 = v108 == v102.i32[0];
                    result = v108 < v102.i32[0];
                    if (!v73)
                      v110 = result;
                  }
                  while (!v110);
                  *v100 = v102;
                }
              }
              v92 = v93 - 1;
            }
            while (v93);
            v111 = (unint64_t)v10 >> 3;
            do
            {
              v112 = 0;
              v113 = *(int32x2_t *)v9;
              v114 = v111 - 2;
              if (v111 < 2)
                v114 = v111 - 1;
              v115 = v114 >> 1;
              v116 = (int32x2_t *)v9;
              do
              {
                v117 = &v116[v112 + 1];
                v118 = (2 * v112) | 1;
                v119 = 2 * v112 + 2;
                if (v119 < v111)
                {
                  v120 = v117[1];
                  v121 = vceq_s32(*v117, v120).u8[0];
                  v122 = vcgt_u32((uint32x2_t)v120, (uint32x2_t)*v117);
                  result = v122.u32[1];
                  v123 = (v121 & 1) != 0 ? v122.i8[4] : v122.i8[0];
                  if ((v123 & 1) != 0)
                  {
                    ++v117;
                    v118 = v119;
                  }
                }
                *v116 = *v117;
                v116 = v117;
                v112 = v118;
              }
              while (v118 <= v115);
              a2 -= 2;
              if (v117 == (int32x2_t *)a2)
              {
                *v117 = v113;
              }
              else
              {
                *v117 = *(int32x2_t *)a2;
                *(int32x2_t *)a2 = v113;
                v124 = (char *)v117 - (char *)v9 + 8;
                if (v124 >= 9)
                {
                  v125 = (unint64_t)((v124 >> 3) - 2) >> 1;
                  v126 = (uint32x2_t *)&v9[2 * v125];
                  v127 = *v117;
                  v128 = vcgt_u32((uint32x2_t)*v117, *v126);
                  v129 = (vceq_s32((int32x2_t)*v126, *v117).u8[0] & 1) != 0 ? v128.i8[4] : v128.i8[0];
                  if ((v129 & 1) != 0)
                  {
                    do
                    {
                      v130 = v117;
                      v117 = (int32x2_t *)v126;
                      *v130 = *v126;
                      if (!v125)
                        break;
                      v125 = (v125 - 1) >> 1;
                      v126 = (uint32x2_t *)&v9[2 * v125];
                      v131 = vcgt_u32((uint32x2_t)v127, *v126);
                      v132 = (vceq_s32((int32x2_t)*v126, v127).u8[0] & 1) != 0 ? v131.i8[4] : v131.i8[0];
                    }
                    while ((v132 & 1) != 0);
                    *v117 = v127;
                  }
                }
              }
            }
            while (v111-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(&v7[2 * (v11 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v7, &v7[2 * (v11 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v7 + 2, v13 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v13 - 2, v13, &v7[2 * v12 + 2]);
          v14 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(v7 - 2);
          v73 = v15 == *v7;
          v16 = v15 < *v7;
          if (v73)
            v16 = *(v7 - 1) < v7[1];
          if (!v16)
          {
            v42 = *(_QWORD *)v7;
            v43 = HIDWORD(*(_QWORD *)v7);
            v44 = *(a2 - 2);
            v73 = v44 == *(_QWORD *)v7;
            v45 = v44 > *(_QWORD *)v7;
            if (v73)
              v45 = *(a2 - 1) > v43;
            if (v45)
            {
              v9 = v7;
              do
              {
                v46 = v9[2];
                v47 = v9[3];
                v9 += 2;
                v48 = v47 > v43;
                v73 = v46 == (_DWORD)v42;
                v49 = v46 > v42;
                if (v73)
                  v49 = v48;
              }
              while (!v49);
            }
            else
            {
              v50 = v7 + 2;
              do
              {
                v9 = v50;
                if (v50 >= a2)
                  break;
                v51 = *v50;
                v52 = v9[1] > v43;
                v73 = v51 == (_DWORD)v42;
                v53 = v51 > v42;
                if (!v73)
                  v52 = v53;
                v50 = v9 + 2;
              }
              while (!v52);
            }
            v54 = a2;
            if (v9 < a2)
            {
              v54 = a2;
              do
              {
                v55 = *(v54 - 2);
                v56 = *(v54 - 1);
                v54 -= 2;
                v57 = v56 > v43;
                v73 = v55 == (_DWORD)v42;
                v58 = v55 > v42;
                if (v73)
                  v58 = v57;
              }
              while (v58);
            }
            while (v9 < v54)
            {
              v59 = *(int32x2_t *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v54;
              *(int32x2_t *)v54 = v59;
              do
              {
                v60 = v9[2];
                v61 = v9[3];
                v9 += 2;
                v62 = v61 > v43;
                v73 = v60 == (_DWORD)v42;
                v63 = v60 > v42;
                if (v73)
                  v63 = v62;
              }
              while (!v63);
              do
              {
                v64 = *(v54 - 2);
                v65 = *(v54 - 1);
                v54 -= 2;
                v66 = v65 > v43;
                v73 = v64 == (_DWORD)v42;
                v67 = v64 > v42;
                if (v73)
                  v67 = v66;
              }
              while (v67);
            }
            v68 = v9 - 2;
            if (v9 - 2 != v7)
              *(_QWORD *)v7 = *(_QWORD *)v68;
            a4 = 0;
            *(_QWORD *)v68 = v42;
            continue;
          }
        }
        v17 = *(_QWORD *)v7;
        v18 = HIDWORD(*(_QWORD *)v7);
        v19 = v7;
        do
        {
          v20 = v19;
          v21 = v19[2];
          v19 += 2;
          v22 = v21 < v17;
          if (v21 == (_DWORD)v17)
            v22 = v20[3] < v18;
        }
        while (v22);
        v23 = a2;
        if (v20 == v7)
        {
          v23 = a2;
          do
          {
            if (v19 >= v23)
              break;
            v28 = *(v23 - 2);
            v29 = *(v23 - 1);
            v23 -= 2;
            v30 = v29 < v18;
            v73 = v28 == (_DWORD)v17;
            v31 = v28 < v17;
            if (v73)
              v31 = v30;
          }
          while (!v31);
        }
        else
        {
          do
          {
            v24 = *(v23 - 2);
            v25 = *(v23 - 1);
            v23 -= 2;
            v26 = v25 < v18;
            v73 = v24 == (_DWORD)v17;
            v27 = v24 < v17;
            if (v73)
              v27 = v26;
          }
          while (!v27);
        }
        if (v19 < v23)
        {
          v32 = v19;
          v33 = v23;
          do
          {
            v34 = *(_QWORD *)v32;
            *(_QWORD *)v32 = *(_QWORD *)v33;
            *(_QWORD *)v33 = v34;
            do
            {
              v20 = v32;
              v35 = v32[2];
              v32 += 2;
              v36 = v35 < v17;
              if (v35 == (_DWORD)v17)
                v36 = v20[3] < v18;
            }
            while (v36);
            do
            {
              v37 = *(v33 - 2);
              v38 = *(v33 - 1);
              v33 -= 2;
              v39 = v38 < v18;
              v73 = v37 == (_DWORD)v17;
              v40 = v37 < v17;
              if (v73)
                v40 = v39;
            }
            while (!v40);
          }
          while (v32 < v33);
        }
        if (v20 != v7)
          *(_QWORD *)v7 = *(_QWORD *)v20;
        *(_QWORD *)v20 = v17;
        if (v19 < v23)
        {
LABEL_42:
          result = std::__introsort<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*,false>(v7, v20, a3, a4 & 1);
          a4 = 0;
          v9 = v20 + 2;
          continue;
        }
        v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v7, v20);
        v9 = v20 + 2;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(v20 + 2, a2);
        if (!(_DWORD)result)
        {
          if (v41)
            continue;
          goto LABEL_42;
        }
        a2 = v20;
        if (!v41)
          goto LABEL_2;
        return result;
    }
  }
}

char *std::vector<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData,std::allocator<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    abort();
  result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

void std::vector<std::vector<std::vector<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData,std::allocator<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a2 < *result;
  if (*a2 == *result)
    v5 = v4 < result[1];
  v6 = a3[1] < v4;
  v7 = *a3 == v3;
  v8 = *a3 < v3;
  if (!v7)
    v6 = v8;
  if (v5)
  {
    v9 = *(_QWORD *)result;
    if (v6)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
LABEL_17:
      *(_QWORD *)a3 = v9;
      return result;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v9;
    v13 = *a3 < v9;
    if (*a3 == (_DWORD)v9)
      v13 = a3[1] < HIDWORD(v9);
    if (v13)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_17;
    }
  }
  else if (v6)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v10;
    v11 = *a2 < *result;
    if (*a2 == *result)
      v11 = a2[1] < result[1];
    if (v11)
    {
      v12 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v12;
    }
  }
  return result;
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *result;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(a1, a2, a3);
  v9 = *a4 < *a3;
  if (*a4 == *a3)
    v9 = a4[1] < a3[1];
  if (v9)
  {
    v10 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v10;
    v11 = *a3 < *a2;
    if (*a3 == *a2)
      v11 = a3[1] < a2[1];
    if (v11)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v13 = *a2 < *a1;
      if (*a2 == *a1)
        v13 = a2[1] < a1[1];
      if (v13)
      {
        v14 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v14;
      }
    }
  }
  return result;
}

unsigned int *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] < a4[1];
  if (v11)
  {
    v12 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v12;
    v13 = *a4 < *a3;
    if (*a4 == *a3)
      v13 = a4[1] < a3[1];
    if (v13)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      v15 = *a3 < *a2;
      if (*a3 == *a2)
        v15 = a3[1] < a2[1];
      if (v15)
      {
        v16 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v16;
        v17 = *a2 < *a1;
        if (*a2 == *a1)
          v17 = a2[1] < a1[1];
        if (v17)
        {
          v18 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  unsigned int *v22;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = v6 == *a1;
      v8 = v6 < *a1;
      if (v7)
        v8 = *(a2 - 1) < a1[1];
      if (v8)
      {
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::{lambda(GRCInfo::EncoderCounterInfo const&,GRCInfo::EncoderCounterInfo const&)#1} &,GRCInfo::EncoderCounterInfo*>(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v11 < *v10;
    if (*v11 == *v10)
      v14 = v11[1] < v10[1];
    if (v14)
    {
      v15 = *(_QWORD *)v11;
      v16 = HIDWORD(*(_QWORD *)v11);
      v17 = v12;
      while (1)
      {
        v18 = (char *)a1 + v17;
        *(_QWORD *)((char *)a1 + v17 + 24) = *(_QWORD *)((char *)a1 + v17 + 16);
        if (v17 == -16)
          break;
        v19 = *((_DWORD *)v18 + 2);
        v20 = *((_DWORD *)v18 + 3) > v16;
        v7 = v19 == (_DWORD)v15;
        v21 = v19 > v15;
        if (!v7)
          v20 = v21;
        v17 -= 8;
        if (!v20)
        {
          v22 = (unsigned int *)((char *)a1 + v17 + 24);
          goto LABEL_18;
        }
      }
      v22 = a1;
LABEL_18:
      *(_QWORD *)v22 = v15;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

void ___ZNK7GRCInfo27SubDividedCounterDictionaryEP14NSMutableArrayIP19GPURawCounterSelectEP26GTMTLReplayOperationQueues_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[6] + 16), "firstObject"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subDivideCounterList:withOptions:", a1[4], 0));
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1FF5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL18DerivedCounterDataP21GTMTLReplayControllerP26GTMTLReplayOperationQueuesP7NSArrayP19NSMutableDictionaryjP21GTAGXPerfStateControl_block_invoke(uint64_t a1)
{
  NSArray *v2;
  id v3;
  void *v4;
  GTAGXPerfStateControl *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8), "defaultCommandQueue"));
  objc_msgSend(v6, "setStatEnabled:", 1);
  v2 = (NSArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subdivideCounterList:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v6, "setStatEnabled:", 0);
  v3 = CollectCounters(*(GTMTLReplayController **)(a1 + 56), *(GTMTLReplayOperationQueues **)(a1 + 64), *(NSArray **)(a1 + 32), v2, *(void **)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 72), v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(*(id *)(a1 + 48), "addDependency:", v4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 8), "addOperation:", *(_QWORD *)(a1 + 48));

}

void sub_1FF684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void GTMTLReplayClient_streamShaderProfilingData(uint64_t a1, id *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id *v9;
  id *v10;
  id v11;
  int v12;
  void *v13;
  id Analysis;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _UNKNOWN **v23;
  id v24;
  id v25;
  uint64_t v26;
  void *i;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  BOOL v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD v57[5];
  uint64_t v58;
  id *v59;
  uint64_t v60;
  __n128 (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t);
  const char *v63;
  id v64[10];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  const __CFString *v69;
  void *v70;
  void *v71;
  void *v72;
  _BYTE v73[128];

  v7 = a3;
  v8 = a4;
  v51 = v7;
  if (v7)
  {
    v58 = 0;
    v59 = (id *)&v58;
    v60 = 0x8012000000;
    v61 = __Block_byref_object_copy__999;
    v62 = __Block_byref_object_dispose__1000;
    v63 = "!0 3";
    v48 = a2;
    v49 = v8;
    GTUSCSamplingStreamingManager::GTUSCSamplingStreamingManager((uint64_t)v64, a1, a2, v7, v8);
    v9 = v59;
    GTUSCSamplingStreamingManager::InitTargetIndex(v59 + 6);
    v10 = (id *)v9[6];
    v11 = v9[12];
    v12 = *((_DWORD *)v9 + 31);
    v52 = v9[11];
    v53 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[1], "defaultDevice"));
    Analysis = DYMTLReplayFrameProfiler_loadAnalysis(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(Analysis);
    objc_msgSend(v53, "addEntriesFromDictionary:", v15);

    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("DerivedCounterDictionary")));
    v55 = (void *)objc_opt_new(NSMutableDictionary, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", CFSTR("DerivedCounters")));
    if (v12)
    {
      v18 = 0;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_738A30, v17));
    }
    else
    {
      v21 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_738A00, v17));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_738A18));
      v18 = (void *)v21;
    }
    v56 = v18;
    v54 = (void *)objc_opt_new(NSMutableDictionary, v19);
    v23 = (_UNKNOWN **)objc_opt_new(NSMutableArray, v22);
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v24 = v17;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v66;
      do
      {
        for (i = 0; i != v25; i = (char *)i + 1)
        {
          if (*(_QWORD *)v66 != v26)
            objc_enumerationMutation(v24);
          v28 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v20, "containsObject:", v28))
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v28));
            objc_msgSend(v55, "setObject:forKeyedSubscript:", v29, v28);

          }
          if (objc_msgSend(v56, "containsObject:", v28))
          {
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v28));
            objc_msgSend(v54, "setObject:forKeyedSubscript:", v30, v28);

          }
          if (objc_msgSend(v28, "isEqualToString:", CFSTR("FRGTicks")))
          {
            v71 = v28;
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v28));
            v72 = v31;
            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v72, &v71, 1));
            v33 = GTMTLReplayHost_rawCounters(v32);
            v34 = objc_claimAutoreleasedReturnValue(v33);

            v23 = (_UNKNOWN **)v34;
          }
        }
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
      }
      while (v25);
    }

    v35 = GTMTLReplayHost_rawCounters(v55);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v36));

    v38 = GTMTLReplayHost_rawCounters(v54);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    if (!objc_msgSend(v23, "count"))
    {

      v23 = &off_738A48;
    }
    objc_msgSend(v37, "addObjectsFromArray:", v23);
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v37, CFSTR("profileCounters"));
    if (objc_msgSend(v39, "count"))
      objc_msgSend(v52, "setObject:forKeyedSubscript:", v39, CFSTR("profileCounters32"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("DerivedCounterConfigurationVariables")));
    v41 = v40 == 0;

    if (!v41)
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("DerivedCounterConfigurationVariables")));
      objc_msgSend(v52, "setObject:forKeyedSubscript:", v42, CFSTR("DerivedCounterConfigurationVariables"));

    }
    v69 = CFSTR("DerivedCounters");
    v70 = v55;
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1));
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v43, CFSTR("DerivedCounterDictionary"));

    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("DerivedCounterScript")));
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v44, CFSTR("DerivedCounterScript"));

    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("DerivedCounterAnalysis")));
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v45, CFSTR("DerivedCounterAnalysis"));

    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("DerivedCounterAnalysisFunctions")));
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v46, CFSTR("DerivedCounterAnalysisFunctions"));

    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3221225472;
    v57[2] = __GTMTLReplayClient_streamShaderProfilingData_block_invoke;
    v57[3] = &unk_724DD8;
    v57[4] = &v58;
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v57));
    objc_msgSend(v48[1], "addOperation:", v47);

    _Block_object_dispose(&v58, 8);
    GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v64);
    v8 = v49;
  }

}

void sub_1FFCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, id *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&a25, 8);
  GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(a11);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__999(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(id *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = objc_retainBlock(*(id *)(a2 + 80));
  *(_QWORD *)(a1 + 88) = *(id *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(id *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(id *)(a2 + 104);
  result = *(__n128 *)(a2 + 112);
  *(__n128 *)(a1 + 112) = result;
  return result;
}

void __Block_byref_object_dispose__1000(uint64_t a1)
{
  GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager((id *)(a1 + 48));
}

void sub_201014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, id a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (v41)
    operator delete(v41);

  if (__p)
    operator delete(__p);

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a37);

  _Unwind_Resume(a1);
}

void GTMTLReplayClient_streamDerivedCounterData(uint64_t a1, id *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  _QWORD v10[5];
  uint64_t v11;
  id *v12;
  uint64_t v13;
  __n128 (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  const char *v16;
  id v17[10];

  v7 = a3;
  v8 = a4;
  if (v7)
  {
    v11 = 0;
    v12 = (id *)&v11;
    v13 = 0x8012000000;
    v14 = __Block_byref_object_copy__999;
    v15 = __Block_byref_object_dispose__1000;
    v16 = "!0 3";
    GTUSCSamplingStreamingManager::GTUSCSamplingStreamingManager((uint64_t)v17, a1, a2, v7, v8);
    GTUSCSamplingStreamingManager::InitDerivedCountersInfo(v12 + 6);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = __GTMTLReplayClient_streamDerivedCounterData_block_invoke;
    v10[3] = &unk_724DD8;
    v10[4] = &v11;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v10));
    objc_msgSend(a2[1], "addOperation:", v9);

    _Block_object_dispose(&v11, 8);
    GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v17);
  }

}

void sub_2015F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  id *v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v9);

  _Unwind_Resume(a1);
}

void sub_201820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL GTMTLReplayClient_streamBatchFilteredData(uint64_t a1, id *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  _QWORD v11[5];
  uint64_t v12;
  id *v13;
  uint64_t v14;
  __n128 (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  const char *v17;
  id v18[10];

  v7 = a3;
  v8 = a4;
  if (v7)
  {
    v12 = 0;
    v13 = (id *)&v12;
    v14 = 0x8012000000;
    v15 = __Block_byref_object_copy__999;
    v16 = __Block_byref_object_dispose__1000;
    v17 = "!0 3";
    GTUSCSamplingStreamingManager::GTUSCSamplingStreamingManager((uint64_t)v18, a1, a2, v7, v8);
    GTUSCSamplingStreamingManager::InitDerivedCountersInfo(v13 + 6);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = __GTMTLReplayClient_streamBatchFilteredData_block_invoke;
    v11[3] = &unk_724DD8;
    v11[4] = &v12;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v11));
    objc_msgSend(a2[1], "addOperation:", v9);

    _Block_object_dispose(&v12, 8);
    GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v18);
  }

  return v7 != 0;
}

void sub_201974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  id *v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v9);

  _Unwind_Resume(a1);
}

void sub_201E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void GTMTLReplayClient_collectGPUShaderTimelineData(uint64_t a1, id *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id Analysis;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *k;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  BOOL v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  void *v65;
  id obj;
  _QWORD v67[5];
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  __n128 (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t);
  const char *v73;
  id v74[10];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  const __CFString *v87;
  void *v88;
  _BYTE v89[128];
  void *v90;
  void *v91;
  _BYTE v92[128];
  _BYTE v93[128];

  v7 = a3;
  v8 = a4;
  v61 = v7;
  if (v7)
  {
    v68 = 0;
    v69 = &v68;
    v70 = 0x8012000000;
    v71 = __Block_byref_object_copy__999;
    v72 = __Block_byref_object_dispose__1000;
    v73 = "!0 3";
    v54 = a2;
    v55 = v8;
    GTUSCSamplingStreamingManager::GTUSCSamplingStreamingManager((uint64_t)v74, a1, a2, v7, v8);
    v9 = v69;
    GTUSCSamplingStreamingManager::InitTargetIndex((id *)v69 + 6);
    v10 = v9[6];
    v11 = (void *)v9[11];
    v12 = (void *)v9[12];
    v62 = v11;
    v63 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v10 + 8), "defaultDevice"));
    Analysis = DYMTLReplayFrameProfiler_loadAnalysis(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(Analysis);
    objc_msgSend(v63, "addEntriesFromDictionary:", v15);

    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("DerivedCounterDictionary")));
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "objectForKeyedSubscript:", CFSTR("Instruments")));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKeyedSubscript:", CFSTR("Profiles")));
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("Set1")));

    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("DerivedCounters")));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("RawCounterWidth")));
    v18 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v59, "count"));
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    obj = v59;
    v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v93, 16);
    if (v19)
    {
      v20 = *(_QWORD *)v84;
      do
      {
        for (i = 0; i != v19; i = (char *)i + 1)
        {
          if (*(_QWORD *)v84 != v20)
            objc_enumerationMutation(obj);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", CFSTR("Name")));
          if (v22)
            objc_msgSend(v18, "addObject:", v22);

        }
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v93, 16);
      }
      while (v19);
    }

    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "objectForKeyedSubscript:", CFSTR("DerivedCounters")));
    v65 = (void *)objc_opt_new(NSMutableDictionary, v23);
    v64 = (void *)objc_opt_new(NSMutableArray, v24);
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v25 = v53;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v79, v92, 16, v53);
    if (v26)
    {
      v27 = *(_QWORD *)v80;
      do
      {
        for (j = 0; j != v26; j = (char *)j + 1)
        {
          if (*(_QWORD *)v80 != v27)
            objc_enumerationMutation(v25);
          v29 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v18, "containsObject:", v29))
          {
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v29));
            objc_msgSend(v65, "setObject:forKeyedSubscript:", v30, v29);

          }
          if (objc_msgSend(v29, "isEqualToString:", CFSTR("FRGTicks")))
          {
            v90 = v29;
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v29));
            v91 = v31;
            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1));
            v33 = GTMTLReplayHost_rawCounters(v32);
            v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
            objc_msgSend(v64, "setArray:", v34);

          }
        }
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v79, v92, 16);
      }
      while (v26);
    }

    v35 = GTMTLReplayHost_rawCounters(v65);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v36));

    objc_msgSend(v60, "addObjectsFromArray:", v64);
    v37 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v60, "count"));
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v38 = v60;
    v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v75, v89, 16);
    if (v39)
    {
      v40 = *(_QWORD *)v76;
      do
      {
        for (k = 0; k != v39; k = (char *)k + 1)
        {
          if (*(_QWORD *)v76 != v40)
            objc_enumerationMutation(v38);
          v42 = *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)k);
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v42));
          v44 = v43;
          if (!v43 || objc_msgSend(v43, "integerValue") == &stru_20)
            objc_msgSend(v37, "addObject:", v42);

        }
        v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v75, v89, 16);
      }
      while (v39);
    }

    objc_msgSend(v62, "setObject:forKeyedSubscript:", v38, CFSTR("profileCounters"));
    objc_msgSend(v62, "setObject:forKeyedSubscript:", v37, CFSTR("profileCounters32"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("DerivedCounterConfigurationVariables")));
    v46 = v45 == 0;

    if (!v46)
    {
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("DerivedCounterConfigurationVariables")));
      objc_msgSend(v62, "setObject:forKeyedSubscript:", v47, CFSTR("DerivedCounterConfigurationVariables"));

    }
    v87 = CFSTR("DerivedCounters");
    v88 = v65;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v88, &v87, 1));
    objc_msgSend(v62, "setObject:forKeyedSubscript:", v48, CFSTR("DerivedCounterDictionary"));

    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("DerivedCounterScript")));
    objc_msgSend(v62, "setObject:forKeyedSubscript:", v49, CFSTR("DerivedCounterScript"));

    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("DerivedCounterAnalysis")));
    objc_msgSend(v62, "setObject:forKeyedSubscript:", v50, CFSTR("DerivedCounterAnalysis"));

    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", CFSTR("DerivedCounterAnalysisFunctions")));
    objc_msgSend(v62, "setObject:forKeyedSubscript:", v51, CFSTR("DerivedCounterAnalysisFunctions"));

    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = __GTMTLReplayClient_collectGPUShaderTimelineData_block_invoke;
    v67[3] = &unk_724DD8;
    v67[4] = &v68;
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v67));
    objc_msgSend(v54[1], "addOperation:", v52);

    _Block_object_dispose(&v68, 8);
    GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v74);
    v8 = v55;
  }

}

void sub_2025F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, id *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a29, 8);
  GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(a11);

  _Unwind_Resume(a1);
}

void sub_202938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void GTMTLReplayClient_addBatchFilteringRequest(void *a1)
{
  GTUSCSamplingStreamingManagerHelper *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  GTUSCSamplingStreamingManagerHelper *v7;

  v1 = a1;
  GTUSCSamplingStreamingManagerHelper::Instance(v1);
  v7 = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("highPriorityBatches")));
  if (v2)
  {
    v3 = qword_7528B8;
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("HighPriorityBatchInfo")));
    objc_msgSend(v3, "nextPerEncoderBatchListForHighPriorityBatches:withHighPriorityInfo:", v2, v4);

  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("pause")));

    if (v5)
    {
      objc_msgSend(qword_7528B8, "pause");
    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[GTUSCSamplingStreamingManagerHelper objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("resume")));

      if (v6)
        objc_msgSend(qword_7528B8, "resume");
    }
  }

}

void sub_202A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void GTMTLReplayClient_collectAPSData(uint64_t a1, id *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  _QWORD v10[5];
  uint64_t v11;
  id *v12;
  uint64_t v13;
  __n128 (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  const char *v16;
  id v17[10];

  v7 = a3;
  v8 = a4;
  if (v7)
  {
    v11 = 0;
    v12 = (id *)&v11;
    v13 = 0x8012000000;
    v14 = __Block_byref_object_copy__999;
    v15 = __Block_byref_object_dispose__1000;
    v16 = "!0 3";
    GTUSCSamplingStreamingManager::GTUSCSamplingStreamingManager((uint64_t)v17, a1, a2, v7, v8);
    GTUSCSamplingStreamingManager::InitTargetIndex(v12 + 6);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = __GTMTLReplayClient_collectAPSData_block_invoke;
    v10[3] = &unk_724DD8;
    v10[4] = &v11;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v10));
    objc_msgSend(a2[1], "addOperation:", v9);

    _Block_object_dispose(&v11, 8);
    GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v17);
  }

}

void sub_202BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  id *v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  GTUSCSamplingStreamingManager::~GTUSCSamplingStreamingManager(v9);

  _Unwind_Resume(a1);
}

void sub_2039D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, id a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

void sub_203D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t GTCoreOperationControl_getOperation(uint64_t a1)
{
  _QWORD *entry;
  uint64_t v2;
  uint64_t v4;

  v4 = a1;
  pthread_mutex_lock((pthread_mutex_t *)(control + 8));
  entry = find_entry(*(_QWORD *)control, &v4, 8uLL, 0);
  if (*entry)
    v2 = *(_QWORD *)(*entry + 32);
  else
    v2 = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(control + 8));
  return v2;
}

uint64_t GTCoreOperationControl_addOperation(uint64_t a1)
{
  _QWORD *v2;

  pthread_mutex_lock((pthread_mutex_t *)(control + 8));
  v2 = apr_palloc(**(apr_pool_t ***)control, 0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = a1;
  *((_BYTE *)v2 + 24) = 0;
  apr_hash_set(*(apr_hash_t **)control, v2, 8, v2);
  return pthread_mutex_unlock((pthread_mutex_t *)(control + 8));
}

uint64_t GTCoreOperationControl_removeOperation(uint64_t a1)
{
  _QWORD *entry;
  const void *v2;
  uint64_t v4;

  v4 = a1;
  pthread_mutex_lock((pthread_mutex_t *)(control + 8));
  entry = find_entry(*(_QWORD *)control, &v4, 8uLL, 0);
  if (*entry)
  {
    v2 = *(const void **)(*entry + 32);
    if (v2)
      apr_hash_set(*(apr_hash_t **)control, v2, 8, 0);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(control + 8));
}

uint64_t DYMTLDrawRenderCommandEncoder(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id ObjectForKey;
  void *v43;
  id v44;
  int v45;
  unsigned int v46;
  id v47;
  void *v48;
  unsigned int v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;

  v9 = a1;
  v10 = a5;
  v11 = *(_QWORD *)(a3 + *(_QWORD *)(a2 + 8));
  v12 = 1;
  v13 = 0;
  switch(v11)
  {
    case 0:
      goto LABEL_31;
    case 1:
      objc_msgSend(v9, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", *(_QWORD *)(a3 + *(_QWORD *)(a2 + 96)), *(_QWORD *)(a3 + *(_QWORD *)(a2 + 96) + 8), *(_QWORD *)(a3 + *(_QWORD *)(a2 + 96) + 16), *(_QWORD *)(a3 + *(_QWORD *)(a2 + 96) + 24), *(_QWORD *)(a3 + *(_QWORD *)(a2 + 96) + 32));
      break;
    case 2:
      v18 = (_QWORD *)(a3 + *(_QWORD *)(a2 + 96));
      v19 = *(_QWORD **)(*(_QWORD *)a4 + 24);
      v20 = *(int *)(*(_QWORD *)a4 + 12);
      v21 = v18[3];
      v22 = GTMTLGPUAddressResource_resourceForGPUAddress(v19, v20, v21);
      if (v22)
      {
        v23 = v21 - *v22;
        v24 = v22[2];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
      ObjectForKey = GetObjectForKey(v10, v24);
      v43 = (void *)objc_claimAutoreleasedReturnValue(ObjectForKey);
      v12 = v43 != 0;
      if (v43)
        objc_msgSend(v9, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", *v18, v18[1], v18[2], v43, v23, v18[4], v18[5], v18[6]);
      goto LABEL_19;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      v25 = (_QWORD *)(*(_QWORD *)(a2 + 96) + a3);
      v26 = *(_QWORD **)(*(_QWORD *)a4 + 24);
      v27 = *(int *)(*(_QWORD *)a4 + 12);
      v28 = v25[6];
      v29 = GTMTLGPUAddressResource_resourceForGPUAddress(v26, v27, v28);
      if (v29)
      {
        v30 = v28 - *v29;
        v31 = v29[2];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      v44 = GetObjectForKey(v10, v31);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v44);
      v45 = v43 != 0;
      v46 = v31 == 0;
      v12 = v45 ^ v46;
      if (v45 != v46)
        objc_msgSend(v9, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:", v25[3], v25[4], v25[5], v43, v30, v25[7], v25[8]);
LABEL_19:

      break;
    case 8:
      v32 = *(_QWORD *)(a2 + 96) + a3;
      v33 = (_QWORD *)(v32 + 24);
      v34 = *(_QWORD *)(v32 + 48);
      v35 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*(_QWORD *)a4 + 24), *(int *)(*(_QWORD *)a4 + 12), v34);
      if (v35)
      {
        v36 = v34 - *v35;
        v37 = v35[2];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
      v47 = GetObjectForKey(v10, v37);
      v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      v49 = (v48 != 0) ^ (v37 == 0);
      v50 = *(_QWORD **)(*(_QWORD *)a4 + 24);
      v51 = *(int *)(*(_QWORD *)a4 + 12);
      v52 = v33[4];
      v53 = GTMTLGPUAddressResource_resourceForGPUAddress(v50, v51, v52);
      if (v53)
      {
        v54 = v52 - *v53;
        v55 = v53[2];
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }
      v56 = GetObjectForKey(v10, v55);
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      if (v57)
        v12 = v49;
      else
        v12 = 0;
      if ((_DWORD)v12 == 1)
        objc_msgSend(v9, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:", *v33, v33[1], v33[2], v48, v36, v57, v54, v33[5], v33[6]);

      break;
    default:
      if (v11 == 128)
      {
        v38 = (__int128 *)(a3 + *(_QWORD *)(a2 + 96));
        v39 = *((_QWORD *)v38 + 2);
        v69 = *v38;
        v70 = v39;
        v40 = *((_QWORD *)v38 + 5);
        v67 = *(__int128 *)((char *)v38 + 24);
        v68 = v40;
        v41 = *((_QWORD *)v38 + 8);
        v65 = v38[3];
        v66 = v41;
        objc_msgSend(v9, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", &v69, &v67, &v65);
      }
      else if (v11 == 256)
      {
        v14 = (__int128 *)(a3 + *(_QWORD *)(a2 + 96));
        v15 = *((_QWORD *)v14 + 2);
        v63 = *v14;
        v64 = v15;
        v16 = *((_QWORD *)v14 + 5);
        v61 = *(__int128 *)((char *)v14 + 24);
        v62 = v16;
        v17 = *((_QWORD *)v14 + 8);
        v59 = v14[3];
        v60 = v17;
        objc_msgSend(v9, "drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", &v63, &v61, &v59);
      }
      break;
  }
  v13 = v12;
LABEL_31:

  return v13;
}

id GetObjectForKey(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));

  return v5;
}

uint64_t DYMTLDispatchComputeCommandEncoder(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = a1;
  v6 = v5;
  v7 = *(_QWORD *)(a3 + *(_QWORD *)(a2 + 8));
  if (v7 == 64)
  {
    v11 = *(_QWORD *)(a2 + 96) + a3;
    v12 = *(_QWORD *)(v11 + 88);
    v18 = *(_OWORD *)(v11 + 72);
    v19 = v12;
    v13 = *(_QWORD *)(v11 + 112);
    v16 = *(_OWORD *)(v11 + 96);
    v17 = v13;
    objc_msgSend(v5, "dispatchThreads:threadsPerThreadgroup:", &v18, &v16);
  }
  else
  {
    if (v7 != 32)
    {
      v14 = 0;
      goto LABEL_7;
    }
    v8 = *(_QWORD *)(a2 + 96) + a3;
    v9 = *(_QWORD *)(v8 + 88);
    v22 = *(_OWORD *)(v8 + 72);
    v23 = v9;
    v10 = *(_QWORD *)(v8 + 112);
    v20 = *(_OWORD *)(v8 + 96);
    v21 = v10;
    objc_msgSend(v5, "dispatchThreadgroups:threadsPerThreadgroup:", &v22, &v20);
  }
  v14 = 1;
LABEL_7:

  return v14;
}

void GTMTLEncodeIndirectCommandBufferWithRange(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7)
{
  id v11;
  id v12;
  int v13;
  id v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t i;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id ObjectForKey;
  void *v74;
  id v75;
  void *v76;
  _BOOL4 v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  id v85;
  _BOOL4 v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  void *v92;
  int v93;
  id v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  void *v103;
  int v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  void *v122;
  unint64_t v123;
  uint64_t v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  void *v143;
  void *v144;
  void *v145;
  id v146;
  unint64_t v148;
  unint64_t v149;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;

  v11 = a1;
  v12 = a7;
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v151 = 0u;
  GTMTLCreateIndirectCommandEncoder((uint64_t)&v151, a4);
  v13 = *(unsigned __int16 *)(a4 + 8);
  if ((v13 & 0xFE70) == 0)
  {
    v126 = v11;
    v141 = v11;
    v125 = v12;
    v146 = v12;
    v139 = a2 + a3;
    if (a2 < a2 + a3)
    {
      v43 = *((_QWORD *)&v157 + 1);
      v137 = *((_QWORD *)&v151 + 1);
      v44 = a5 + a2 * *((_QWORD *)&v157 + 1);
      v128 = *((_QWORD *)&v157 + 1);
      do
      {
        v45 = objc_autoreleasePoolPush();
        v46 = a5 + v43 * a2;
        v149 = a2;
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v141, "indirectRenderCommandAtIndex:", a2));
        v48 = v47;
        v49 = *(_QWORD *)(v46 + v137);
        switch(v49)
        {
          case 0:
            objc_msgSend(v47, "reset");
            goto LABEL_112;
          case 1:
            objc_msgSend(v47, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", *(_QWORD *)(v46 + v157), *(_QWORD *)(v46 + v157 + 8), *(_QWORD *)(v46 + v157 + 16), *(_QWORD *)(v46 + v157 + 24), *(_QWORD *)(v46 + v157 + 32));
            break;
          case 2:
            v53 = (_QWORD *)(v46 + v157);
            v54 = *(_QWORD *)(v46 + v157 + 24);
            v55 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), v54);
            if (v55)
            {
              v56 = v54 - *v55;
              v57 = v55[2];
            }
            else
            {
              v56 = 0;
              v57 = 0;
            }
            ObjectForKey = GetObjectForKey(v146, v57);
            v74 = (void *)objc_claimAutoreleasedReturnValue(ObjectForKey);
            if (v74)
              objc_msgSend(v48, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", *v53, v53[1], v53[2], v74, v56, v53[4], v53[5], v53[6]);
            else
              objc_msgSend(v48, "reset");

            break;
          case 3:
          case 5:
          case 6:
          case 7:
            break;
          case 4:
            v58 = v157;
            v59 = (_QWORD *)(v157 + v46);
            v60 = *(_QWORD *)(v157 + v46 + 48);
            v61 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), v60);
            v62 = v46;
            if (v61)
            {
              v133 = v60 - *v61;
              v63 = v61[2];
            }
            else
            {
              v133 = 0;
              v63 = 0;
            }
            v75 = GetObjectForKey(v146, v63);
            v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
            v77 = v63 == 0;
            v78 = (unint64_t *)(v62 + v58);
            v79 = *v78;
            v80 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), *v78);
            v81 = v44;
            if (v80)
            {
              v82 = v79 - *v80;
              v83 = v80[2];
            }
            else
            {
              v82 = 0;
              v83 = 0;
            }
            v90 = GetObjectForKey(v146, v83);
            v91 = objc_claimAutoreleasedReturnValue(v90);
            v92 = (void *)v91;
            if (v91)
              v93 = (v76 != 0) ^ v77;
            else
              v93 = 0;
            if (v93 == 1)
              objc_msgSend(v48, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", v59[3], v59[4], v59[5], v76, v133, v59[7], v59[8], v91, v82, v78[1]);
            else
              objc_msgSend(v48, "reset");
            v43 = v128;
            v44 = v81;
            v46 = v62;
            goto LABEL_83;
          case 8:
            v64 = v157;
            v65 = v157 + v46;
            v66 = *(_QWORD *)(v157 + v46 + 48);
            v67 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), v66);
            v143 = v45;
            v68 = v46;
            if (v67)
            {
              v134 = v66 - *v67;
              v69 = v67[2];
            }
            else
            {
              v134 = 0;
              v69 = 0;
            }
            v84 = (_QWORD *)(v65 + 24);
            v85 = GetObjectForKey(v146, v69);
            v76 = (void *)objc_claimAutoreleasedReturnValue(v85);
            v86 = v69 == 0;
            v87 = v84[4];
            v88 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), v87);
            if (v88)
            {
              v130 = v87 - *v88;
              v89 = v88[2];
            }
            else
            {
              v130 = 0;
              v89 = 0;
            }
            v94 = GetObjectForKey(v146, v89);
            v92 = (void *)objc_claimAutoreleasedReturnValue(v94);
            if (v92)
              v95 = (v76 != 0) ^ v86;
            else
              v95 = 0;
            v96 = v68 + v64;
            v97 = *(_QWORD *)(v68 + v64);
            v98 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), v97);
            if (v98)
            {
              v99 = v97 - *v98;
              v100 = v98[2];
            }
            else
            {
              v99 = 0;
              v100 = 0;
            }
            v101 = GetObjectForKey(v146, v100);
            v102 = objc_claimAutoreleasedReturnValue(v101);
            v103 = (void *)v102;
            if (v102)
              v104 = v95;
            else
              v104 = 0;
            if (v104 == 1)
              objc_msgSend(v48, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", *v84, v84[1], v84[2], v76, v134, v92, v130, v84[5], v84[6], v102, v99, *(_QWORD *)(v96 + 8));
            else
              objc_msgSend(v48, "reset");
            v43 = v128;
            v45 = v143;
            v46 = v68;

LABEL_83:
            break;
          default:
            if (v49 == 128)
            {
              v70 = *(_QWORD *)(v46 + v157 + 16);
              v164 = *(_OWORD *)(v46 + v157);
              *(_QWORD *)&v165 = v70;
              v71 = *(_QWORD *)(v46 + v157 + 40);
              v169 = *(_OWORD *)(v46 + v157 + 24);
              v170 = v71;
              v72 = *(_QWORD *)(v46 + v157 + 64);
              v167 = *(_OWORD *)(v46 + v157 + 48);
              v168 = v72;
              objc_msgSend(v47, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", &v164, &v169, &v167);
            }
            else if (v49 == 256)
            {
              v50 = *(_QWORD *)(v46 + v157 + 16);
              v162 = *(_OWORD *)(v46 + v157);
              v163 = v50;
              v51 = *(_QWORD *)(v46 + v157 + 40);
              v160 = *(_OWORD *)(v46 + v157 + 24);
              v161 = v51;
              v52 = *(_QWORD *)(v46 + v157 + 64);
              v158 = *(_OWORD *)(v46 + v157 + 48);
              v159 = v52;
              objc_msgSend(v47, "drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", &v162, &v160, &v158);
            }
            break;
        }
        v105 = (_BYTE *)v151;
        if (!*(_BYTE *)(v151 + 11))
        {
          v106 = *(_QWORD *)(v46 + v152);
          if (v106)
          {
            v107 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a6[3], v106);
            v108 = GetObjectForKey(v146, v107);
            v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
            if (v109)
              objc_msgSend(v48, "setRenderPipelineState:", v109);

          }
        }
        if (v105[19])
          v110 = v46 + v156;
        else
          v110 = 0;
        if (!v105[10])
        {
          v131 = v46;
          v135 = v44;
          v144 = v45;
          v111 = *((_QWORD *)&v152 + 1);
          v112 = v105[18];
          v113 = v48;
          v114 = v146;
          if (v112)
          {
            v115 = 0;
            v116 = v44 + v111;
            do
            {
              v117 = *(_QWORD *)(v116 + 8 * v115);
              if (v117)
              {
                v118 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), *(_QWORD *)(v116 + 8 * v115));
                if (v118)
                {
                  v119 = v117 - *v118;
                  v120 = v118[2];
                }
                else
                {
                  v119 = 0;
                  v120 = 0;
                }
                v121 = GetObjectForKey(v114, v120);
                v122 = (void *)objc_claimAutoreleasedReturnValue(v121);
                if (v122)
                {
                  if (v110)
                    objc_msgSend(v113, "setVertexBuffer:offset:attributeStride:atIndex:", v122, v119, *(_QWORD *)(v110 + 8 * v115), v115);
                  else
                    objc_msgSend(v113, "setVertexBuffer:offset:atIndex:", v122, v119, v115);
                }

              }
              ++v115;
            }
            while (v112 != v115);
          }

          v46 = v131;
          GTMTLEncodeIndirectBufferBindings(v113, v131 + v153, v105[12], 2, (uint64_t)a6, v114);
          GTMTLEncodeIndirectBufferBindings(v113, v131 + *((_QWORD *)&v153 + 1), v105[16], 8, (uint64_t)a6, v114);
          GTMTLEncodeIndirectBufferBindings(v113, v131 + v154, v105[15], 16, (uint64_t)a6, v114);
          v43 = v128;
          v44 = v135;
          v45 = v144;
        }
        if (v105[17])
        {
          v123 = 0;
          v124 = v44 + v155;
          do
          {
            objc_msgSend(v48, "setObjectThreadgroupMemoryLength:atIndex:", *(_QWORD *)(v124 + 8 * v123), v123);
            ++v123;
          }
          while (v123 < v105[17]);
        }
        if (v105[21] && *(_QWORD *)(v46 + *((_QWORD *)&v156 + 1)))
          objc_msgSend(v48, "setBarrier");
LABEL_112:

        objc_autoreleasePoolPop(v45);
        a2 = v149 + 1;
        v44 += v43;
      }
      while (v149 + 1 != v139);
    }

    v42 = v141;
LABEL_114:

    v12 = v125;
    v11 = v126;
    goto LABEL_115;
  }
  if ((v13 & 0xFFFFFF9F) == 0)
  {
    v126 = v11;
    v142 = v11;
    v125 = v12;
    v14 = v12;
    v140 = a2 + a3;
    if (a2 < a2 + a3)
    {
      v15 = *((_QWORD *)&v157 + 1);
      v132 = v157;
      v16 = (_BYTE *)v151;
      v127 = v152;
      v129 = v157 + 72;
      v136 = v156;
      v138 = *((_QWORD *)&v151 + 1);
      v17 = a5 + *((_QWORD *)&v154 + 1) + a2 * *((_QWORD *)&v157 + 1);
      v18 = a5 + *((_QWORD *)&v155 + 1) + a2 * *((_QWORD *)&v157 + 1);
      while (1)
      {
        v19 = objc_autoreleasePoolPush();
        v20 = a5 + v15 * a2;
        v21 = *(_QWORD *)(v20 + v138);
        v148 = a2;
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "indirectComputeCommandAtIndex:", a2));
        v23 = v22;
        if (v21 == 64)
          break;
        if (v21 == 32)
        {
          v24 = *(_QWORD *)(v20 + v129 + 16);
          v169 = *(_OWORD *)(v20 + v129);
          v170 = v24;
          v25 = *(_QWORD *)(v20 + v129 + 40);
          v167 = *(_OWORD *)(v20 + v129 + 24);
          v168 = v25;
          objc_msgSend(v22, "concurrentDispatchThreadgroups:threadsPerThreadgroup:", &v169, &v167);
          goto LABEL_11;
        }
        if (v21)
          goto LABEL_13;
        objc_msgSend(v22, "reset");
LABEL_33:

        objc_autoreleasePoolPop(v19);
        a2 = v148 + 1;
        v17 += v15;
        v18 += v15;
        if (v148 + 1 == v140)
          goto LABEL_34;
      }
      v26 = *(_QWORD *)(v20 + v129 + 16);
      v162 = *(_OWORD *)(v20 + v129);
      v163 = v26;
      v27 = *(_QWORD *)(v20 + v129 + 40);
      v160 = *(_OWORD *)(v20 + v129 + 24);
      v161 = v27;
      objc_msgSend(v22, "concurrentDispatchThreads:threadsPerThreadgroup:", &v162, &v160);
LABEL_11:
      v28 = *(_OWORD *)(v20 + v132 + 16);
      v164 = *(_OWORD *)(v20 + v132);
      v165 = v28;
      v166 = *(_OWORD *)(v20 + v132 + 32);
      objc_msgSend(v23, "setStageInRegion:", &v164);
      if (*(_BYTE *)(v20 + v132 + 64))
        objc_msgSend(v23, "setBarrier");
LABEL_13:
      v145 = v19;
      if (!v16[11])
      {
        v29 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a6[4], *(_QWORD *)(v20 + v127));
        v30 = GetObjectForKey(v14, v29);
        v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        objc_msgSend(v23, "setComputePipelineState:", v31);

      }
      if (v16[19])
        v32 = v20 + v136;
      else
        v32 = 0;
      if (!v16[10])
      {
        v33 = v16[13];
        if (v33)
        {
          for (i = 0; i < v33; ++i)
          {
            v35 = *(_QWORD *)(v17 + 8 * i);
            if (v35)
            {
              v36 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a6 + 24), *(int *)(*a6 + 12), *(_QWORD *)(v17 + 8 * i));
              if (v36)
              {
                v37 = v35 - *v36;
                v38 = v36[2];
              }
              else
              {
                v37 = 0;
                v38 = 0;
              }
              v39 = GetObjectForKey(v14, v38);
              v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
              if (v32)
                objc_msgSend(v23, "setKernelBuffer:offset:attributeStride:atIndex:", v40, v37, *(_QWORD *)(v32 + 8 * i), i);
              else
                objc_msgSend(v23, "setKernelBuffer:offset:atIndex:", v40, v37, i);

              v33 = v16[13];
            }
          }
        }
      }
      v19 = v145;
      if (v16[14])
      {
        v41 = 0;
        do
        {
          objc_msgSend(v23, "setThreadgroupMemoryLength:atIndex:", *(_QWORD *)(v18 + 8 * v41), v41);
          ++v41;
        }
        while (v41 < v16[14]);
      }
      goto LABEL_33;
    }
LABEL_34:

    v42 = v142;
    goto LABEL_114;
  }
LABEL_115:

}

void GTMTLEncodeIndirectBufferBindings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id ObjectForKey;
  void *v18;
  id v19;

  v19 = a1;
  v11 = a6;
  if (a3)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(a2 + 8 * v12);
      if (v13)
      {
        v14 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*(_QWORD *)a5 + 24), *(int *)(*(_QWORD *)a5 + 12), *(_QWORD *)(a2 + 8 * v12));
        if (v14)
        {
          v15 = v13 - *v14;
          v16 = v14[2];
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
        ObjectForKey = GetObjectForKey(v11, v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(ObjectForKey);
        if (v18)
        {
          switch(a4)
          {
            case 16:
              objc_msgSend(v19, "setMeshBuffer:offset:atIndex:", v18, v15, v12);
              break;
            case 8:
              objc_msgSend(v19, "setObjectBuffer:offset:atIndex:", v18, v15, v12);
              break;
            case 2:
              objc_msgSend(v19, "setFragmentBuffer:offset:atIndex:", v18, v15, v12);
              break;
          }
        }

      }
      ++v12;
    }
    while (a3 != v12);
  }

}

const __CFString *_StringForError(uint64_t a1)
{
  const __CFString *result;
  uint64_t v2;
  uint64_t v3;

  if (a1 <= 511)
  {
    switch(a1)
    {
      case 1:
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid filename (%ld)"), 1);
      case 2:
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("data is too large (%ld)"), 2);
      case 3:
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("IO failure (%ld)"), 3);
      case 4:
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("out of memory (%ld)"), 4);
      case 5:
        v3 = 5;
        goto LABEL_64;
      case 6:
        v3 = 6;
LABEL_64:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unable to connect to the device. (%ld)"), v3);
        break;
      case 7:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("read-only capture archive (%ld)"), 7);
        break;
      case 8:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("truncated capture archive store (%ld)"), 8);
        break;
      case 9:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("truncated capture archive index (%ld)"), 9);
        break;
      case 10:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid capture archive index (%ld)"), 10);
        break;
      case 11:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("unknown capture archive index version (%ld)"), 11);
        break;
      case 12:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("file exists in capture archive (%ld)"), 12);
        break;
      case 13:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("file does not exists in capture archive (%ld)"), 13);
        break;
      case 14:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("capture archive does not exist (%ld)"), 14);
        break;
      case 15:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("missing capture archive index (%ld)"), 15);
        break;
      case 16:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid capture archive metadata (%ld)"), 16);
        break;
      case 17:
      case 27:
        return 0;
      case 18:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("corrupted capture archive store (%ld)"), 18);
        break;
      case 19:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("could not write capture archive metadata (%ld)"), 19);
        break;
      case 20:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("capture archive has been closed (%ld)"), 20);
        break;
      case 21:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("already tried to launch guest app (%ld)"), 21);
        break;
      case 22:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid launch dictionary (%ld)"), 22);
        break;
      case 23:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("guest app not found (%ld)"), 23);
        break;
      case 24:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("guest app launch timed out (%ld)"), 24);
        break;
      case 25:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid guest app session (%ld)"), 25);
        break;
      case 26:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("guest app has not been launched yet (%ld)"), 26);
        break;
      case 28:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("did not find interpose dylib (%ld)"), 28);
        break;
      case 29:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("failed to launch guest app (%ld)"), 29);
        break;
      case 30:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("guest app terminated (%ld)"), 30);
        break;
      case 31:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("lost transport connection (%ld)"), 31);
        break;
      case 32:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid transport (%ld)"), 32);
        break;
      case 33:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("transport is not connected (%ld)"), 33);
        break;
      case 34:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("message has already been sent (%ld)"), 34);
        break;
      case 35:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("in-reply-to message has not been sent (%ld)"), 35);
        break;
      case 36:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("failed to encode message attributes (%ld)"), 36);
        break;
      case 37:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("connect timed out (%ld)"), 37);
        break;
      case 38:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("undefined socket path (%ld)"), 38);
        break;
      case 39:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("socket path is too long (%ld)"), 39);
        break;
      case 40:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("message originated from this transport (%ld)"), 40);
        break;
      case 41:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("initialized function stream with immutable data but swapping is required (%ld)"), 41);
        break;
      case 42:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("transfer refused (%ld)"), 42);
        break;
      case 43:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("protocol error (%ld)"), 43);
        break;
      case 44:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("path outside destination root (%ld)"), 44);
        break;
      case 45:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("transfer aborted (%ld)"), 45);
        break;
      case 46:
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("unknown item type (%ld)"), 46);
        break;
      default:
        switch(a1)
        {
          case 256:
            result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid socket descriptor (%ld)"), 256);
            break;
          case 257:
            result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid socket url (%ld)"), 257);
            break;
          case 258:
            result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("transport source cancelled (%ld)"), 258);
            break;
          case 259:
            result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("corrupt transport message header (%ld)"), 259);
            break;
          case 260:
            result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("corrupt transport message attributes (%ld)"), 260);
            break;
          case 261:
            result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("message too large (%ld)"), 261);
            break;
          default:
            return 0;
        }
        break;
    }
    return result;
  }
  if (a1 <= 2047)
  {
    if (a1 <= 1023)
    {
      v2 = a1 - 512;
      result = CFSTR("Device connection lost.");
      switch(v2)
      {
        case 0:
          result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("guest app crashed (%ld)"), 512);
          break;
        case 1:
          result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("another capture session is active (%ld)"), 513);
          break;
        case 2:
          result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("capture session is already active (%ld)"), 514);
          break;
        case 3:
          result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("capture session activation failed (%ld)"), 515);
          break;
        case 4:
          result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("inferior already running (%ld)"), 516);
          break;
        case 5:
          result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("GL dispatch table mismatch (%ld)"), 517);
          break;
        case 6:
          result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("inferior and host session ids mismatch (%ld)"), 518);
          break;
        case 7:
          return result;
        default:
          return 0;
      }
      return result;
    }
    if (a1 <= 1279)
    {
      switch(a1)
      {
        case 1024:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("truncated data (%ld)"), 1024);
        case 1025:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid transport message payload (%ld)"), 1025);
        case 1026:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("unexpected transport message (%ld)"), 1026);
      }
    }
    else if (a1 > 1791)
    {
      if (a1 == 1792)
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("no data (%ld)"), 1792);
      if (a1 == 1793)
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("guest app session error (%ld)"), 1793);
    }
    else
    {
      if (a1 == 1280)
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid function stream header (%ld)"), 1280);
      if (a1 == 1536)
        return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("position does not exist in archive (%ld)"), 1536);
    }
    return 0;
  }
  if (a1 <= 4351)
  {
    if (a1 > 2304)
    {
      switch(a1)
      {
        case 2305:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("no archive data (%ld)"), 2305);
        case 2306:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("no thumbnail support (%ld)"), 2306);
        case 4096:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("failed to create core symbolicator (%ld)"), 4096);
      }
    }
    else
    {
      switch(a1)
      {
        case 2048:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("already replaying (%ld)"), 2048);
        case 2049:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("no loaded archives (%ld)"), 2049);
        case 2304:
          return (const __CFString *)+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("no resource streamer (%ld)"), 2304);
      }
    }
    return 0;
  }
  switch(a1)
  {
    case 4608:
      result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot find the specified username and host (%ld)"), 4608);
      break;
    case 4609:
      result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Specified remote machine is not available. Please make sure to login with specified user (%ld)"), 4609);
      break;
    case 4610:
      result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot find the target path provided (%ld)"), 4610);
      break;
    case 4611:
      result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot authenticate SSH, make sure the authentication is done right (%ld)"), 4611);
      break;
    case 4612:
      result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Cannot find Xcode.app on the remote machine. Please make sure that Xcode.app is in the Applications folder (%ld)"), 4612);
      break;
    case 4613:
      result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Metal.framework is not available on the remote machine (%ld)"), 4613);
      break;
    case 4614:
      result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Missing environment variables, please make sure all the required environment variables are enabled (%ld)"), 4614);
      break;
    default:
      if (a1 == 4352)
      {
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Shader profiler failed due to an internal error (%ld)"), 4352);
      }
      else
      {
        if (a1 != 4353)
          return 0;
        result = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Shader profiler does not support multi-context captures (%ld)"), 4353);
      }
      break;
  }
  return result;
}

void sub_206044()
{
  uint64_t v0;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v0);
  operator delete();
}

void sub_206340(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_20661C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208B94(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_208BCC(void *exc_buf, int a2)
{
  uint64_t v2;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (a2 == 2)
    {
      *(_QWORD *)(v2 + 40) = 0;
      objc_end_catch();
    }
    JUMPOUT(0x208B28);
  }
  JUMPOUT(0x208BBCLL);
}

void sub_209C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__1286(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__1287(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_20AF3C()
{
  operator delete();
}

void sub_20B014()
{
  operator delete();
}

uint64_t GPUTools::VMBuffer::_alloc(GPUTools::VMBuffer *this, vm_size_t a2, uint64_t a3)
{
  int v3;
  vm_size_t v4;
  vm_size_t v5;
  vm_map_t v6;
  vm_size_t v7;
  vm_address_t v8;
  vm_address_t v9;
  uint64_t v10;
  vm_address_t address;
  uint64_t cur_protection;
  vm_address_t target_address;

  v3 = 0;
  address = 0;
  if (3 * vm_page_size <= a2)
    v4 = (a2 + vm_page_size - 1) & -(uint64_t)vm_page_size;
  else
    v4 = 3 * vm_page_size;
  v5 = v4 + v4 * a3;
  while (1)
  {
    v6 = mach_task_self_;
    v7 = vm_page_size + v5;
    if (!vm_allocate(mach_task_self_, &address, vm_page_size + v5, 1))
    {
      v8 = address;
      v9 = address + v4;
      target_address = address + v4;
      v10 = a3;
      if (a3)
      {
        while (!vm_deallocate(v6, v9, v4))
        {
          cur_protection = 0;
          if (vm_remap(v6, &target_address, v4, 0, 0, v6, address, 0, (vm_prot_t *)&cur_protection + 1, (vm_prot_t *)&cur_protection, 2u))
          {
            break;
          }
          v9 = target_address + v4;
          target_address += v4;
          if (!--v10)
          {
            v8 = address;
            goto LABEL_11;
          }
        }
        goto LABEL_12;
      }
LABEL_11:
      if (!vm_protect(v6, v8 + v7 - vm_page_size, vm_page_size, 0, 0))
        break;
    }
LABEL_12:
    vm_deallocate(mach_task_self_, address, vm_page_size + v5);
    if (++v3 == 5)
      return 0;
  }
  *(_QWORD *)this = address;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = a3;
  return 1;
}

vm_address_t *GPUTools::VMBuffer::_dealloc(vm_address_t *this)
{
  vm_address_t *v1;

  if (*this)
  {
    v1 = this;
    this = (vm_address_t *)vm_deallocate(mach_task_self_, *this, vm_page_size + this[1] + this[1] * this[2]);
    v1[1] = 0;
    v1[2] = 0;
    *v1 = 0;
  }
  return this;
}

void sub_20D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t smt_poll_thread_entry(_QWORD *a1)
{
  NSObject *v2;
  void *v3;
  char __str[64];

  v2 = a1[1];
  v3 = (void *)a1[2];
  snprintf(__str, 0x40uLL, "gputools.smt_poll.%p", a1);
  pthread_setname_np(__str);
  while (!*((_BYTE *)a1 + 24))
  {
    dispatch_sync(v2, v3);
    usleep(0x1F40u);
  }

  return 0;
}

void sub_20E950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(mach_port_t a1, void *inputStruct, void *outputStruct, uint64_t a4)
{
  uint64_t v5;
  _BOOL8 v6;
  NSString *v7;
  void *v8;
  void *v9;
  FILE *v10;
  id v11;
  size_t outputStructCnt;

  if (!a1)
    return 0;
  outputStructCnt = 8;
  v5 = IOConnectCallStructMethod(a1, 0x41u, inputStruct, 8uLL, outputStruct, &outputStructCnt);
  v6 = (_DWORD)v5 == 0;
  if ((_DWORD)v5 && g_runningInCI)
  {
    v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("IOConnectCallStructMethod method:%u for:%s failed (0x%x - %s)"), 65, a4, v5, mach_error_string(v5));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

    v10 = __stdoutp;
    v11 = objc_retainAutorelease(v9);
    fprintf(v10, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v11, "UTF8String"));

  }
  return v6;
}

void sub_20F928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t RecommendedState(void *a1, uint64_t a2, unsigned int a3)
{
  id v5;
  void *v6;
  double v7;
  double v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "doubleValue");
    v8 = v7;
    v9 = (double *)operator new(0x18uLL);
    v10 = 0;
    LODWORD(v11) = 0;
    *v9 = (double)a2;
    v9[1] = (double)HIDWORD(a2);
    v9[2] = (double)a3;
    v12 = 1.79769313e308;
    do
    {
      v13 = vabdd_f64(v9[v10], v8 + -2.22044605e-16);
      v14 = v13 + (double)v10++ * 0.2;
      if (v14 >= v12)
      {
        v11 = v11;
      }
      else
      {
        v12 = v13;
        v11 = v10;
      }
    }
    while (v10 != 3);
    operator delete(v9);
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_20FA00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GTAGXPerfStateControl::InitWithDevice(uint64_t a1, void *a2)
{
  io_service_t IOAccelerator;
  int v5;
  void *v6;
  void *v7;
  FILE *v8;
  id v9;
  id v10;
  uint64_t outputStruct;

  v10 = a2;
  if ((objc_opt_respondsToSelector(v10, "enableConsistentPerfState:") & 1) != 0
    && (objc_opt_respondsToSelector(v10, "disableConsistentPerfState") & 1) != 0
    && (objc_opt_respondsToSelector(v10, "getConsistentPerfStateInfoAndReset:") & 1) != 0
    && (objc_opt_respondsToSelector(v10, "getConsistentPerfStateMappingTable") & 1) != 0)
  {
    objc_storeStrong((id *)(a1 + 16), a2);
    goto LABEL_11;
  }
  IOAccelerator = GetIOAccelerator();
  if (IOServiceOpen(IOAccelerator, mach_task_self_, 1u, (io_connect_t *)a1))
  {
    v5 = 2;
LABEL_10:
    *(_DWORD *)(a1 + 4) = v5;
    goto LABEL_11;
  }
  outputStruct = 258;
  if (CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(*(_DWORD *)a1, &outputStruct, &outputStruct, (uint64_t)"ConsistentPerfState_Get"))
  {
    v5 = 1;
    goto LABEL_10;
  }
  if (g_runningInCI)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to get consistent perf status!\n")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

    v8 = __stdoutp;
    v9 = objc_retainAutorelease(v7);
    fprintf(v8, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v9, "UTF8String"));

  }
  *(_DWORD *)(a1 + 4) = 2;
  if (*(_DWORD *)a1)
  {
    IOServiceClose(*(_DWORD *)a1);
    *(_DWORD *)a1 = 0;
  }
LABEL_11:

}

void sub_20FB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void GTAGXPerfStateControl::EnableConsistentGPUPerfState(uint64_t a1, uint64_t a2)
{
  void *v4;
  mach_port_t v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  FILE *v9;
  id v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  FILE *v14;
  id v15;
  void *v16;
  FILE *v17;
  id v18;
  id v19;
  uint64_t outputStruct;

  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    if ((objc_msgSend(v4, "enableConsistentPerfState:", a2) & 1) != 0)
    {
      usleep(0x186A0u);
    }
    else if (g_runningInCI)
    {
      v18 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to set consistent perf state to level = %u!\n"), a2));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

      v17 = __stdoutp;
      v19 = objc_retainAutorelease(v16);
      fprintf(v17, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v19, "UTF8String"));

    }
  }
  else
  {
    v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      outputStruct = 256;
      v6 = CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(v5, &outputStruct, &outputStruct, (uint64_t)"ConsistentPerfState_Lock");
      *(_BYTE *)(a1 + 8) = v6;
      if (!v6 && g_runningInCI)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to acquire consistent perf state SPI access!\n")));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

        v9 = __stdoutp;
        v10 = objc_retainAutorelease(v8);
        fprintf(v9, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v10, "UTF8String"));

      }
      if (v6)
      {
        outputStruct = 1;
        BYTE1(outputStruct) = a2;
        v11 = CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(*(_DWORD *)a1, &outputStruct, &outputStruct, (uint64_t)"ConsistentPerfState_Set");
        if (!v11 && g_runningInCI)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to set consistent perf state to level = %u!\n"), a2));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

          v14 = __stdoutp;
          v15 = objc_retainAutorelease(v13);
          fprintf(v14, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v15, "UTF8String"));

        }
        if (v11)
          usleep(0x30D40u);
      }
    }
  }
}

void sub_20FE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void GTAGXPerfStateControl::DisableConsistentGPUPerfState(GTAGXPerfStateControl *this)
{
  void *v2;
  mach_port_t v3;
  void *v4;
  void *v5;
  FILE *v6;
  id v7;
  uint64_t outputStruct;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    objc_msgSend(v2, "disableConsistentPerfState");
  }
  else
  {
    v3 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
      if (*((_BYTE *)this + 8))
      {
        outputStruct = 0;
        if (!CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(v3, &outputStruct, &outputStruct, (uint64_t)"ConsistentPerfState_Unlock"))
        {
          if (g_runningInCI)
          {
            v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to release consistent perf state SPI access!\n")));
            v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

            v6 = __stdoutp;
            v7 = objc_retainAutorelease(v5);
            fprintf(v6, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v7, "UTF8String"));

          }
        }
      }
    }
  }
}

void sub_20FF58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_UNKNOWN **GTAGXPerfStateControl::ConsistentGPUPerfStateLevel(GTAGXPerfStateControl *this, NSNumber *a2)
{
  NSNumber *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _UNKNOWN **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  NSNumber *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  NSNumber *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSNumber *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  id v43;
  void *v44;
  void *v45;
  FILE *v46;
  id v47;
  void *v48;
  void *v49;
  FILE *v50;
  id v51;
  _UNKNOWN **v52;
  void *v53;
  void *v54;
  FILE *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  FILE *v60;
  NSNumber *v62;
  uint64_t outputStruct;
  _QWORD v64[3];
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  void *v68;
  void *v69;
  void *v70;

  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 2);
  v62 = v3;
  if (!v4)
  {
    v32 = v3;
    if (!*(_DWORD *)this)
    {
      v68 = &__kCFBooleanFalse;
      v65 = CFSTR("enabled");
      v66 = CFSTR("supported");
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_DWORD *)this + 1) == 1));
      v69 = v33;
      v52 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v68, &v65, 2));
LABEL_37:
      v7 = v52;
LABEL_38:

      goto LABEL_39;
    }
    v33 = (void *)objc_opt_new(NSMutableDictionary, v31);
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_DWORD *)this + 1) == 1));
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v34, CFSTR("supported"));

    outputStruct = 258;
    if (!CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(*(_DWORD *)this, &outputStruct, &outputStruct, (uint64_t)"ConsistentPerfState_Get"))
    {
      if (g_runningInCI)
      {
        v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to get consistent perf mapping table!\n")));
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

        v55 = __stdoutp;
        v56 = objc_retainAutorelease(v54);
        fprintf(v55, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v56, "UTF8String"));

      }
      v68 = &__kCFBooleanFalse;
      v65 = CFSTR("enabled");
      v66 = CFSTR("supported");
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_DWORD *)this + 1) == 1));
      v69 = v57;
      v7 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v68, &v65, 2));

      goto LABEL_38;
    }
    v65 = CFSTR("enabled");
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE2(outputStruct) == 1));
    v68 = v35;
    v66 = CFSTR("consistent");
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE3(outputStruct) == 1));
    v69 = v36;
    v67 = CFSTR("level");
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE4(outputStruct)));
    v70 = v37;
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v68, &v65, 3));
    objc_msgSend(v33, "addEntriesFromDictionary:", v38);

    outputStruct = 3;
    if (CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(*(_DWORD *)this, &outputStruct, &outputStruct, (uint64_t)"ConsistentPerfState_GetMappingTable"))
    {
      if (v32)
      {
        v39 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", RecommendedState(v32, BYTE1(outputStruct) | ((unint64_t)BYTE2(outputStruct) << 32), BYTE3(outputStruct)));
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        objc_msgSend(v33, "setObject:forKeyedSubscript:", v40, CFSTR("recommended"));

      }
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("level")));
      v42 = objc_msgSend(v41, "unsignedIntValue");

      switch(v42)
      {
        case 1u:
          v43 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(outputStruct)));
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v43, CFSTR("mapping"));
          goto LABEL_35;
        case 2u:
          v43 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE2(outputStruct)));
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v43, CFSTR("mapping"));
          goto LABEL_35;
        case 3u:
          v43 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE3(outputStruct)));
          objc_msgSend(v33, "setObject:forKeyedSubscript:", v43, CFSTR("mapping"));
LABEL_35:

          break;
      }
    }
    else if (g_runningInCI)
    {
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to get consistent perf state status!\n")));
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

      v60 = __stdoutp;
      v43 = objc_retainAutorelease(v59);
      fprintf(v60, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v43, "UTF8String"));
      goto LABEL_35;
    }
    v52 = v33;
    v33 = v52;
    goto LABEL_37;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "getConsistentPerfStateInfoAndReset:", 1));
  if (!v6)
  {
    if (g_runningInCI)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to get consistent perf state status!\n")));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

      v46 = __stdoutp;
      v47 = objc_retainAutorelease(v45);
      fprintf(v46, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v47, "UTF8String"));

    }
    v7 = &off_739158;
    goto LABEL_30;
  }
  v7 = (_UNKNOWN **)objc_opt_new(NSMutableDictionary, v5);
  objc_msgSend(v7, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("supported"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("is_enabled")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v8, "BOOLValue")));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, CFSTR("enabled"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("was_consistent")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v10, "BOOLValue")));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, CFSTR("consistent"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("level")));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v12, "unsignedIntValue")));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v13, CFSTR("level"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 2), "getConsistentPerfStateMappingTable"));
  v15 = v14;
  if (!v14)
  {
    if (g_runningInCI)
    {
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to get consistent perf mapping table!\n")));
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

      v50 = __stdoutp;
      v51 = objc_retainAutorelease(v49);
      fprintf(v50, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v51, "UTF8String"));

    }
    goto LABEL_29;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("min_pstate")));
  v17 = objc_msgSend(v16, "unsignedIntValue");
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("mid_pstate")));
  v19 = objc_msgSend(v18, "unsignedIntValue");
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("max_pstate")));
  v21 = objc_msgSend(v20, "unsignedIntValue");

  v22 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", RecommendedState(v62, v17 | ((_QWORD)v19 << 32), v21));
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v23, CFSTR("recommended"));

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v17));
  v64[0] = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19));
  v64[1] = v25;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v21));
  v64[2] = v26;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v64, 3));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v27, CFSTR("mapped state"));

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("level")));
  v29 = objc_msgSend(v28, "unsignedIntValue");

  switch(v29)
  {
    case 1u:
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v17));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v30, CFSTR("mapping"));
      goto LABEL_28;
    case 2u:
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v30, CFSTR("mapping"));
      goto LABEL_28;
    case 3u:
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v21));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v30, CFSTR("mapping"));
LABEL_28:

      break;
  }
LABEL_29:

LABEL_30:
LABEL_39:

  return v7;
}

void sub_210894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

BOOL GTAGXPerfStateControl::IsGPUPerformanceStateInduced(GTAGXPerfStateControl *this)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  mach_port_t v7;
  void *v8;
  void *v9;
  FILE *v10;
  void *v11;
  void *v12;
  FILE *v13;
  id v14;
  uint64_t outputStruct;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "getConsistentPerfStateInfoAndReset:", 1));
    v4 = v3;
    if (v3)
    {
      v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("is_enabled")));
      v6 = objc_msgSend(v5, "BOOLValue");
    }
    else
    {
      if (!g_runningInCI)
      {
        v6 = 0;
        goto LABEL_10;
      }
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to get consistent perf state status!\n")));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

      v10 = __stdoutp;
      v5 = objc_retainAutorelease(v9);
      fprintf(v10, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v5, "UTF8String"));
      v6 = 0;
    }

LABEL_10:
    return (BOOL)v6;
  }
  v7 = *(_DWORD *)this;
  if (!*(_DWORD *)this)
    return 0;
  outputStruct = 258;
  if (!CallIO<AGXConsistentPerfStateControlRec,AGXConsistentPerfStateControlRec>(v7, &outputStruct, &outputStruct, (uint64_t)"ConsistentPerfState_Get"))
  {
    if (g_runningInCI)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Error, fail to get consistent perf state status!\n")));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-ERROR# ")));

      v13 = __stdoutp;
      v14 = objc_retainAutorelease(v12);
      fprintf(v13, "#CI-ERROR# %s\n", (const char *)objc_msgSend(v14, "UTF8String"));

    }
    return 0;
  }
  return BYTE2(outputStruct) == 1;
}

void sub_210C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_210CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2116FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{

  _Unwind_Resume(a1);
}

void sub_211918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_211C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_211EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned int>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<NSDictionary * {__strong},NSArray * {__strong}>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 16)
  {

    v5 = *(void **)(i - 16);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_212328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<unsigned int>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) >= 0x800uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
}

void TranslateGTMTLArgument(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  size_t v11;
  size_t v12;
  void *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int *v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int16 v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int16 v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  void *v59;
  id v60;

  v60 = a2;
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "name")));
  v8 = objc_msgSend(v7, "UTF8String");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "name")));
  if (objc_msgSend(v9, "UTF8String"))
  {
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "name")));
    v11 = strlen((const char *)objc_msgSend(v10, "UTF8String"));
    v12 = v11 + 1;
    if (v11 == -1)
      v13 = 0;
    else
      v13 = (void *)a3[23];
    a3[23] += v12;
    if ((_DWORD)a4)
      memcpy(v13, v8, v12);

  }
  else
  {
    v13 = 0;
  }

  v14 = objc_msgSend(v60, "access");
  v15 = objc_msgSend(v60, "isActive");
  v16 = objc_msgSend(v60, "index");
  v17 = objc_msgSend(v60, "type");
  v18 = (int *)objc_msgSend(v60, "type");
  v19 = 0;
  v20 = 0;
  v58 = v14;
  v59 = v13;
  v57 = v16;
  v56 = v15;
  v55 = v17;
  if ((uint64_t)v18 > 15)
  {
    if (v18 == &dword_10)
    {
      v43 = v60;
      v44 = objc_msgSend(v43, "imageBlockDataSize");
      v45 = v44 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)objc_msgSend(v43, "aliasImplicitImageBlockRenderTarget") << 32);
      v46 = objc_msgSend(v43, "aliasImplicitImageBlock");
      v47 = 0x10000000000;
      if (!v46)
        v47 = 0;
      v23 = v45 | v47;
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "imageBlockMasterStructMembers"));
      if (!v48)
      {
LABEL_37:
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "dataTypeDescription"));
        v25 = TranslateGTMTLType(v49, a3, a4);
        v24 = 0;
LABEL_38:

        v20 = 0;
        v21 = 0;
        v22 = 0;
        v19 = 0;
        if (!(_DWORD)a4)
          goto LABEL_29;
        goto LABEL_28;
      }
    }
    else
    {
      if (v18 != (int *)((char *)&dword_10 + 1))
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        if (v18 == (int *)((char *)&stru_20.cmd + 3))
        {
          v31 = v60;
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "meshVertexStruct"));
          v23 = TranslateGTMTLStructType(v32, a3, a4);

          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "meshPrimitiveStruct"));
          v19 = TranslateGTMTLStructType(v33, a3, a4);

          v20 = (unsigned __int16)objc_msgSend(v31, "meshVertexCount");
          v21 = (unsigned __int16)objc_msgSend(v31, "meshPrimitiveCount");
          v22 = objc_msgSend(v31, "meshTopologyType");
          v34 = objc_msgSend(v31, "builtInType");
          v35 = objc_msgSend(v31, "builtInDataType");

          v25 = 0;
          v24 = v34 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v35 << 8);
          if (!(_DWORD)a4)
            goto LABEL_29;
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      v43 = v60;
      v50 = objc_msgSend(v43, "imageBlockKind");
      v51 = objc_msgSend(v43, "imageBlockDataSize") | ((unint64_t)v50 << 48);
      v52 = v51 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)objc_msgSend(v43, "aliasImplicitImageBlockRenderTarget") << 32);
      v53 = objc_msgSend(v43, "aliasImplicitImageBlock");
      v54 = 0x10000000000;
      if (!v53)
        v54 = 0;
      v23 = v52 | v54;
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "dataTypeDescription"));
      if (v48)
        goto LABEL_37;
    }
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "imageBlockMasterStructMembers"));
    v24 = TranslateGTMTLStructType(v49, a3, a4);
    v25 = 0;
    goto LABEL_38;
  }
  if (!v18)
  {
    v36 = (unsigned __int16)objc_msgSend(v60, "bufferAlignment");
    v37 = objc_msgSend(v60, "bufferDataSize") | ((unint64_t)v36 << 32);
    v38 = v37 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)objc_msgSend(v60, "bufferDataType") << 48);
    v39 = objc_msgSend(v60, "isVertexDescriptorBuffer");
    v40 = 0x100000000000000;
    if (!v39)
      v40 = 0;
    v24 = v38 | v40;
    goto LABEL_26;
  }
  if (v18 == (int *)((char *)&dword_0 + 1))
  {
    v41 = (unsigned __int16)objc_msgSend(v60, "threadgroupMemoryAlignment");
    v24 = objc_msgSend(v60, "threadgroupMemoryDataSize") | ((unint64_t)v41 << 32);
LABEL_26:
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "dataTypeDescription"));
    v25 = TranslateGTMTLType(v42, a3, a4);

    v20 = 0;
    v21 = 0;
    v22 = 0;
    v19 = 0;
    v23 = 0;
LABEL_27:
    if (!(_DWORD)a4)
      goto LABEL_29;
LABEL_28:
    *(_QWORD *)a1 = v59;
    *(_QWORD *)(a1 + 8) = v25;
    *(_BYTE *)(a1 + 16) = v55;
    *(_BYTE *)(a1 + 17) = v58;
    *(_BYTE *)(a1 + 18) = v57;
    *(_BYTE *)(a1 + 19) = v56 | 2;
    *(_DWORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 24) = v24;
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v19;
    *(_WORD *)(a1 + 48) = v20;
    *(_WORD *)(a1 + 50) = v21;
    *(_BYTE *)(a1 + 52) = v22;
    *(_WORD *)(a1 + 53) = 0;
    *(_BYTE *)(a1 + 55) = 0;
    goto LABEL_29;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (v18 != (int *)((char *)&dword_0 + 2))
    goto LABEL_27;
  v26 = objc_msgSend(v60, "textureDataType");
  v27 = objc_msgSend(v60, "textureType") | ((unint64_t)v26 << 8);
  v28 = v27 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)objc_msgSend(v60, "arrayLength") << 16);
  v29 = objc_msgSend(v60, "isDepthTexture");
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v23 = 0;
  v25 = 0;
  v30 = 0x1000000;
  if (!v29)
    v30 = 0;
  v24 = v28 | v30;
  if ((_DWORD)a4)
    goto LABEL_28;
LABEL_29:

}

uint64_t TranslateGTMTLType(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  unsigned __int8 v15;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = (char *)objc_msgSend(v5, "dataType");
    v8 = 0;
    if ((uint64_t)v7 > 57)
    {
      if (v7 == (_BYTE *)&stru_20.vmaddr + 2)
      {
        v8 = a2[19];
        a2[19] = v8 + 16;
        if ((_DWORD)a3)
        {
          *(_BYTE *)v8 = 58;
          v14 = v6;
          *(_BYTE *)(v8 + 10) = objc_msgSend(v14, "access");
          *(_BYTE *)(v8 + 8) = objc_msgSend(v14, "textureDataType");
          v15 = objc_msgSend(v14, "textureType");

          *(_BYTE *)(v8 + 9) = v15;
        }
      }
      else if (v7 == (_BYTE *)&stru_20.vmaddr + 4)
      {
        v9 = v6;
        v8 = a2[15];
        a2[15] = v8 + 24;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "elementTypeDescription"));
        v13 = TranslateGTMTLType(v12, a2, a3);

        if ((_DWORD)a3)
        {
          *(_BYTE *)v8 = 60;
          *(_BYTE *)(v8 + 23) = objc_msgSend(v9, "access");
          *(_WORD *)(v8 + 20) = (unsigned __int16)objc_msgSend(v9, "alignment");
          *(_DWORD *)(v8 + 16) = objc_msgSend(v9, "dataSize");
          *(_BYTE *)(v8 + 22) = objc_msgSend(v9, "elementType");
          *(_QWORD *)(v8 + 8) = v13;
        }
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 == (_BYTE *)&dword_0 + 1)
      {
        v8 = TranslateGTMTLStructType(v6, a2, a3);
        goto LABEL_17;
      }
      if (v7 == (_BYTE *)&dword_0 + 2)
      {
        v9 = v6;
        v8 = a2[18];
        a2[18] = v8 + 32;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "elementTypeDescription"));
        v11 = TranslateGTMTLType(v10, a2, a3);

        if ((_DWORD)a3)
        {
          *(_BYTE *)v8 = 2;
          *(_WORD *)(v8 + 20) = (unsigned __int16)objc_msgSend(v9, "arrayLength");
          *(_BYTE *)(v8 + 24) = objc_msgSend(v9, "elementType");
          *(_DWORD *)(v8 + 16) = objc_msgSend(v9, "stride");
          *(_WORD *)(v8 + 22) = (unsigned __int16)objc_msgSend(v9, "argumentIndexStride");
          *(_QWORD *)(v8 + 8) = v11;
          if ((objc_opt_respondsToSelector(v9, "aluType") & 1) != 0)
            *(_BYTE *)(v8 + 25) = objc_msgSend(v9, "aluType");
        }
LABEL_13:

      }
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_17:

  return v8;
}

uint64_t TranslateGTMTLStructType(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  _BYTE *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  size_t v18;
  size_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  id obj;
  uint64_t v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = a2[16];
    v8 = a2[17];
    a2[16] = v7 + 24;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "members"));
    a2[17] += 32 * (_QWORD)objc_msgSend(v9, "count");

    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "members"));
    v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (v33)
    {
      v27 = v7;
      v28 = v6;
      v10 = 0;
      v32 = *(_QWORD *)v35;
      v26 = v8;
      v29 = v8 + 25;
      do
      {
        v11 = 0;
        v30 = v10;
        v12 = (_BYTE *)(v29 + 32 * v10);
        do
        {
          if (*(_QWORD *)v35 != v32)
            objc_enumerationMutation(obj);
          v13 = *(id *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v11);
          v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "name")));
          v15 = objc_msgSend(v14, "UTF8String");
          v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "name")));
          if (objc_msgSend(v16, "UTF8String"))
          {
            v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "name")));
            v18 = strlen((const char *)objc_msgSend(v17, "UTF8String"));
            v19 = v18 + 1;
            if (v18 == -1)
              v20 = 0;
            else
              v20 = (void *)a2[23];
            a2[23] += v19;
            if ((_DWORD)a3)
              memcpy(v20, v15, v19);

          }
          else
          {
            v20 = 0;
          }

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dataTypeDescription"));
          v22 = TranslateGTMTLType(v21, a2, a3);

          if ((_DWORD)a3)
          {
            *(_QWORD *)(v12 - 25) = v20;
            *(_DWORD *)(v12 - 9) = objc_msgSend(v13, "offset");
            *(v12 - 1) = objc_msgSend(v13, "dataType");
            *(_WORD *)(v12 - 5) = (unsigned __int16)objc_msgSend(v13, "argumentIndex");
            *(_WORD *)(v12 - 3) = (unsigned __int16)objc_msgSend(v13, "indirectArgumentIndex");
            *(_QWORD *)(v12 - 17) = v22;
            if ((objc_opt_respondsToSelector(v13, "aluType") & 1) != 0)
            {
              v23 = v13;
              *v12 = objc_msgSend(v23, "aluType");

            }
          }

          v11 = (char *)v11 + 1;
          v12 += 32;
        }
        while (v33 != v11);
        v10 = v30 + (_DWORD)v11;
        v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      }
      while (v33);
      v7 = v27;
      v6 = v28;
      v8 = v26;
    }
    else
    {
      v10 = 0;
    }

    if ((_DWORD)a3)
    {
      *(_BYTE *)v7 = 1;
      if (v10)
        v24 = v8;
      else
        v24 = 0;
      *(_QWORD *)(v7 + 8) = v24;
      *(_DWORD *)(v7 + 16) = v10;
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_212F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_212FA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_213004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_213124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, char a10)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t i;

  for (i = 24; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void sub_213C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a68;
  void *v68;

  a68 = (void **)&a45;
  std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&a68);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a53);

  _Unwind_Resume(a1);
}

void sub_214014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_214E30(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2 - 144);

  _Unwind_Resume(a1);
}

void sub_215CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{

  _Unwind_Resume(a1);
}

void sub_216424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_2176BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{

  std::unordered_map<unsigned long long,-[GTShaderProfilerHelper _calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:]::EncoderRangeInfo>::~unordered_map[abi:nn180100]((uint64_t)&a51);
  a43 = (void **)&a56;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&a43);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a59);

  _Unwind_Resume(a1);
}

void sub_217C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_2184E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;

  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a31);
  v33 = *(void **)(v31 - 152);
  if (v33)
    operator delete(v33);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v31 - 128);

  _Unwind_Resume(a1);
}

void sub_218C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,char a49)
{

  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a41);
  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a49);

  _Unwind_Resume(a1);
}

void sub_219240(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a17);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_2195C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_219860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_219AF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_219B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_21AD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *__p,void *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t *a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  a32 = (uint64_t *)&a26;
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&a32);
  a26 = &a29;
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&a26);

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_21C5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,char a59,int a60,__int16 a61,uint64_t a62,char a63)
{
  __int16 a65;
  char a67;
  void *a69;
  uint64_t a72;

  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>::reset[abi:nn180100]((uint64_t **)&a69);
  if (a56 < 0)
    operator delete(__p);
  lldb::SBCompileUnit::~SBCompileUnit((lldb::SBCompileUnit *)&a59);
  lldb::SBModule::~SBModule((lldb::SBModule *)&a61);
  lldb::SBFileSpec::~SBFileSpec((lldb::SBFileSpec *)&a63);
  lldb::SBTarget::~SBTarget((lldb::SBTarget *)&a65);
  lldb::SBDebugger::~SBDebugger((lldb::SBDebugger *)&a67);
  GTScopeFunction::~GTScopeFunction((GTScopeFunction *)&a72);

  a72 = a20;
  std::vector<DebugInfo::LineDisassemblyInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&a72);
  a72 = a25;
  std::vector<DebugInfo::LineEntry>::__destroy_vector::operator()[abi:nn180100]((void ***)&a72);

  _Unwind_Resume(a1);
}

void sub_21D0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 88) = &a19;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v20 - 88));
  if (v19)
    operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_21DB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,PerFileCost>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerFileCost>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;

  std::__tree<std::__value_type<unsigned int,std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::LineInfo>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::LineInfo>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::LineInfo>>>>::destroy(a55);
  _Unwind_Resume(a1);
}

void sub_22009C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *__pa, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char *a25,DebugInfo *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a19);
  std::__hash_table<std::__hash_value_type<std::string,PerFileCost>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PerFileCost>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PerFileCost>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PerFileCost>>>::~__hash_table((uint64_t)&a25);
  a25 = &a31;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a25);
  if (__pa)
    operator delete(__pa);
  DebugInfo::~DebugInfo((DebugInfo *)&a34);

  _Unwind_Resume(a1);
}

void sub_22050C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, char a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__pa, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char *a23,DebugInfo *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<std::string,PerFileCost>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PerFileCost>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PerFileCost>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PerFileCost>>>::~__hash_table((uint64_t)&a23);
  a23 = &a29;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a23);
  if (__pa)
    operator delete(__pa);
  DebugInfo::~DebugInfo((DebugInfo *)&a32);

  _Unwind_Resume(a1);
}

void sub_220738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_220864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_220904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_221ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;

  a51 = (void **)&a57;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&a51);

  _Unwind_Resume(a1);
}

void sub_22255C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_22281C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 40));

  _Unwind_Resume(a1);
}

void sub_222B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_223018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_2232A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  operator delete();
}

void sub_22381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_223A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_223BFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18, char a19)
{
  operator delete();
}

void sub_223E00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  operator delete();
}

void sub_223F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2245A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  uint64_t v25;

  *(_QWORD *)(v25 - 136) = v25 - 112;
  std::vector<std::vector<ShaderBinaryInfo * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v25 - 136));

  _Unwind_Resume(a1);
}

void sub_224A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_225E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  a68 = (uint64_t)&a44;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a68);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a47);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a56)
    operator delete(a56);

  _Unwind_Resume(a1);
}

void sub_226E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25)
{

  _Unwind_Resume(a1);
}

void sub_2273FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2277A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_228330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,char a26,uint64_t a27,char a28,int a29,char a30,uint64_t a31,char a32)
{
  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>::reset[abi:nn180100](&a25);
  lldb::SBModule::~SBModule((lldb::SBModule *)&a26);
  lldb::SBFileSpec::~SBFileSpec((lldb::SBFileSpec *)&a28);
  lldb::SBTarget::~SBTarget((lldb::SBTarget *)&a30);
  lldb::SBDebugger::~SBDebugger((lldb::SBDebugger *)&a32);

  _Unwind_Resume(a1);
}

void sub_228E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,uint64_t a27,uint64_t *a28)
{
  void *v28;
  void *v29;
  void *v30;

  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>::reset[abi:nn180100](&a28);
  _Unwind_Resume(a1);
}

void sub_22939C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v37;
  uint64_t v38;

  _Unwind_Resume(a1);
}

void sub_229988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *__p,uint64_t a21,uint64_t a22)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_229C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229CE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_229FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_22A0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22AB78()
{
  JUMPOUT(0x22AB68);
}

void sub_22B1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (v32)
    operator delete(v32);
  operator delete(v31);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a29);

  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<MTLGRCStreamingSampleHelper>::reset[abi:nn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      atomic_store(1u, (unsigned __int8 *)(v3 + 140));
      objc_msgSend(*(id *)(v3 + 48), "cancelAllOperations");

      std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)(v3 + 24), 0);
      std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)(v3 + 16), 0);
      std::unique_ptr<GRCCurrentFrameStream>::reset[abi:nn180100]((uint64_t *)(v3 + 8), 0);

      operator delete();
    }
    operator delete();
  }
  return result;
}

void sub_22B45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)(v1 + 24), 0);
  std::unique_ptr<GRCSplitBlitTimeData>::reset[abi:nn180100]((id **)(v1 + 16), 0);
  std::unique_ptr<GRCCurrentFrameStream>::reset[abi:nn180100]((uint64_t *)(v1 + 8), 0);

  _Unwind_Resume(a1);
}

void sub_22B8D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22BC8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22BEA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22BF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22BFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22C080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22C130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22C1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>::reset[abi:nn180100](uint64_t **result)
{
  uint64_t *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelperImpl>::reset[abi:nn180100](v1, 0);
    operator delete();
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_22C630(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22C758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22C860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22C920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<DYMTLShaderProfilerProgramAddress>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a2);
    v5 = &v4[24 * v3];
    v7 = &v4[24 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<std::vector<ShaderBinaryInfo * {__strong}>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v8 = (char *)*(v6 - 3);
        v6 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v4 - 2);
          v10 = v7;
          if (v9 != v7)
          {
            do
            {
              v11 = (void *)*((_QWORD *)v9 - 1);
              v9 -= 8;

            }
            while (v9 != v7);
            v10 = *v6;
          }
          *(v4 - 2) = v7;
          operator delete(v10);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22CBE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22D164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22D300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22D424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22D510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22D63C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22D72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22DA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<DebugInfo::LineEntry *>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,PerFileCost>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,PerFileCost>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,PerFileCost>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,PerFileCost>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,PerFileCost>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<DebugInfo::LineDisassemblyInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DebugInfo::LineDisassemblyInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<DebugInfo::LineEntry>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<DebugInfo::LineEntry>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DebugInfo::~DebugInfo(DebugInfo *this)
{
  void **p_var0;

  p_var0 = (void **)&this->var1.var0;
  std::vector<DebugInfo::LineDisassemblyInfo>::__destroy_vector::operator()[abi:nn180100](&p_var0);
  p_var0 = (void **)&this->var0.var0;
  std::vector<DebugInfo::LineEntry>::__destroy_vector::operator()[abi:nn180100](&p_var0);
}

void std::allocator<DebugInfo::LineEntry>::destroy[abi:nn180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<DebugInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = (void **)(a1 + 32);
  std::vector<DebugInfo::LineDisassemblyInfo>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<DebugInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<DebugInfo::BlockInfo>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<DebugInfo::BlockInfo>::destroy[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::vector<DebugInfo::LineDisassemblyInfo>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {

    v5 = *(void **)(i - 40);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,PerFileCost>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 72);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<DebugInfo::BlockInfo>::__assign_with_size[abi:nn180100]<DebugInfo::BlockInfo*,DebugInfo::BlockInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;

  v8 = *(_QWORD *)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<DebugInfo::BlockInfo>::__vdeallocate((void **)a1);
    if (a4 > 0x276276276276276)
      abort();
    v9 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x13B13B13B13B13BLL)
      v10 = 0x276276276276276;
    else
      v10 = v9;
    std::vector<DebugInfo::BlockInfo>::__vallocate[abi:nn180100]((_QWORD *)a1, v10);
    v11 = a1;
    v12 = a2;
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 8) - v8) >> 3) < a4)
  {
    v13 = a2 + 8 * ((*(_QWORD *)(a1 + 8) - v8) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<DebugInfo::BlockInfo *,DebugInfo::BlockInfo *,DebugInfo::BlockInfo *>(a2, v13, v8);
    v11 = a1;
    v12 = v13;
LABEL_11:
    std::vector<DebugInfo::BlockInfo>::__construct_at_end<DebugInfo::BlockInfo*,DebugInfo::BlockInfo*>(v11, v12, a3);
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<DebugInfo::BlockInfo *,DebugInfo::BlockInfo *,DebugInfo::BlockInfo *>(a2, a3, v8);
  for (i = *(_QWORD *)(a1 + 8); i != v14; std::allocator<DebugInfo::BlockInfo>::destroy[abi:nn180100](i))
    i -= 104;
  *(_QWORD *)(a1 + 8) = v14;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::SourceDisassemblyInfo>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(56 * a1);
}

void sub_22EB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::LineSourceInfo>::~vector[abi:nn180100](&a28);
  _Unwind_Resume(a1);
}

uint64_t *std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::LineInfo *,-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::LineInfo *,-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::LineInfo *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a1 != a2)
  {
    v5 = a1;
    while (a3 == v5)
    {
LABEL_23:
      v5 += 6;
      a3 += 6;
      if (v5 == a2)
        return a3;
    }
    v7 = *v5;
    v6 = v5[1];
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *v5) >> 3);
    v9 = a3[2];
    v10 = *a3;
    if (0x6DB6DB6DB6DB6DB7 * ((v9 - *a3) >> 3) >= v8)
    {
      v16 = a3[1];
      if (0x6DB6DB6DB6DB6DB7 * ((v16 - v10) >> 3) >= v8)
      {
        while (v7 != v6)
        {
          objc_storeStrong((id *)v10, *(id *)v7);
          objc_storeStrong((id *)(v10 + 8), *(id *)(v7 + 8));
          v20 = *(_OWORD *)(v7 + 16);
          v21 = *(_OWORD *)(v7 + 32);
          *(_QWORD *)(v10 + 48) = *(_QWORD *)(v7 + 48);
          *(_OWORD *)(v10 + 16) = v20;
          *(_OWORD *)(v10 + 32) = v21;
          v10 += 56;
          v7 += 56;
        }
        std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::SourceDisassemblyInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)a3, v10);
        goto LABEL_22;
      }
      v17 = v7 + 8 * ((v16 - v10) >> 3);
      if (v16 != v10)
      {
        do
        {
          objc_storeStrong((id *)v10, *(id *)v7);
          objc_storeStrong((id *)(v10 + 8), *(id *)(v7 + 8));
          v18 = *(_OWORD *)(v7 + 16);
          v19 = *(_OWORD *)(v7 + 32);
          *(_QWORD *)(v10 + 48) = *(_QWORD *)(v7 + 48);
          *(_OWORD *)(v10 + 16) = v18;
          *(_OWORD *)(v10 + 32) = v19;
          v7 += 56;
          v10 += 56;
        }
        while (v7 != v17);
      }
      v14 = a3;
      v15 = v17;
    }
    else
    {
      if (v10)
      {
        std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::SourceDisassemblyInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)a3, *a3);
        operator delete((void *)*a3);
        v9 = 0;
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      if (v8 > 0x492492492492492)
        abort();
      v11 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= v8)
        v12 = v8;
      if (v11 >= 0x249249249249249)
        v13 = 0x492492492492492;
      else
        v13 = v12;
      std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::SourceDisassemblyInfo>::__vallocate[abi:nn180100](a3, v13);
      v14 = a3;
      v15 = v7;
    }
    std::vector<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::SourceDisassemblyInfo>::__construct_at_end<-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::SourceDisassemblyInfo*,-[GTShaderProfilerHelper _processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:]::SourceDisassemblyInfo*>(v14, v15, v6);
LABEL_22:
    std::vector<DebugInfo::BlockInfo>::__assign_with_size[abi:nn180100]<DebugInfo::BlockInfo*,DebugInfo::BlockInfo*>((uint64_t)(a3 + 3), v5[3], v5[4], 0x4EC4EC4EC4EC4EC5 * ((v5[4] - v5[3]) >> 3));
    goto LABEL_23;
  }
  return a3;
}

char *std::vector<DebugInfo::BlockInfo>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<DebugInfo::BlockInfo>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

void std::vector<DebugInfo::BlockInfo>::__construct_at_end<DebugInfo::BlockInfo*,DebugInfo::BlockInfo*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  const std::string::value_type **v9;
  __int128 v10;
  const std::string::value_type **v11;
  __int128 v12;
  const std::string::value_type **v13;
  __int128 v14;
  std::string *v15;
  const std::string::value_type **v16;
  __int128 v17;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      *(_QWORD *)(v4 + v7) = *(_QWORD *)(a2 + v7);
      v9 = (const std::string::value_type **)(a2 + v7 + 8);
      if (*(char *)(a2 + v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v4 + v7 + 8), *v9, *(_QWORD *)(v8 + 16));
      }
      else
      {
        v10 = *(_OWORD *)v9;
        *(_QWORD *)(v4 + v7 + 24) = *(_QWORD *)(a2 + v7 + 24);
        *(_OWORD *)(v4 + v7 + 8) = v10;
      }
      v11 = (const std::string::value_type **)(a2 + v7 + 32);
      if (*(char *)(v8 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v4 + v7 + 32), *v11, *(_QWORD *)(a2 + v7 + 40));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(v4 + v7 + 48) = *(_QWORD *)(a2 + v7 + 48);
        *(_OWORD *)(v4 + v7 + 32) = v12;
      }
      v13 = (const std::string::value_type **)(a2 + v7 + 56);
      if (*(char *)(v8 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v4 + v7 + 56), *v13, *(_QWORD *)(a2 + v7 + 64));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        *(_QWORD *)(v4 + v7 + 72) = *(_QWORD *)(a2 + v7 + 72);
        *(_OWORD *)(v4 + v7 + 56) = v14;
      }
      v15 = (std::string *)(v4 + v7 + 80);
      v16 = (const std::string::value_type **)(a2 + v7 + 80);
      if (*(char *)(v8 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *v16, *(_QWORD *)(a2 + v7 + 88));
      }
      else
      {
        v17 = *(_OWORD *)v16;
        *(_QWORD *)(v4 + v7 + 96) = *(_QWORD *)(a2 + v7 + 96);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
      }
      v7 += 104;
    }
    while (v8 + 104 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_22F39C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;
  char *v6;

  if (v6[79] < 0)
    operator delete(*v4);
  if (v6[55] < 0)
    operator delete(*v3);
  if (v6[31] < 0)
    operator delete(*v2);
  *(_QWORD *)(v1 + 8) = v5;
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<DebugInfo::BlockInfo>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(104 * a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;

  std::filebuf::~filebuf(a1 + 2);
  std::ios::~ios(a1 + 53);
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<DebugInfo::BlockInfo *,DebugInfo::BlockInfo *,DebugInfo::BlockInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v5 + 8));
      std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v5 + 32));
      std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v5 + 56));
      std::string::operator=((std::string *)(a3 + 80), (const std::string *)(v5 + 80));
      a3 += 104;
      v5 += 104;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<DebugInfo::BlockInfo>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 104;
        std::allocator<DebugInfo::BlockInfo>::destroy[abi:nn180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<double>::resize(char **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[8 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      v23 = &v5[8 * (a2 - v7)];
      v24 = 8 * a2 - 8 * v7;
      do
      {
        *(_QWORD *)v5 = *a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 61)
        abort();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 2;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v12);
      v15 = &v13[8 * v7];
      v16 = &v13[8 * a2];
      v17 = 8 * a2 - 8 * v7;
      v18 = v15;
      do
      {
        *(_QWORD *)v18 = *a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      v19 = &v13[8 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 8)
      {
        v22 = *((_QWORD *)i - 1);
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,PerFileCost>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerFileCost>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,PerFileCost>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void MachOInfo::MachOInfo(MachOInfo *this, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int i;
  int v4;
  unsigned __int8 *v5;
  BOOL v6;
  char *v7;
  MachOInfo *v8;
  BOOL v9;

  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    v2 = a2 + 32;
    for (i = *((_DWORD *)a2 + 4); i; --i)
    {
      if (*(_DWORD *)v2 == 25)
        break;
      v2 += *((unsigned int *)v2 + 1);
    }
    v4 = *((_DWORD *)v2 + 16);
    if (v4)
    {
      v5 = v2 + 88;
      do
      {
        v6 = *(_DWORD *)v5 == 1163157343 && *(_DWORD *)(v5 + 3) == 5527621;
        v7 = (char *)this + 8;
        v8 = this;
        if (v6
          || (*(_QWORD *)v5 == 0x454D5F5550475F5FLL ? (v9 = *(_QWORD *)(v5 + 7) == 0x41544144415445) : (v9 = 0),
              v7 = (char *)this + 24,
              v8 = (MachOInfo *)((char *)this + 16),
              v9))
        {
          *(_QWORD *)v7 = *((unsigned int *)v5 + 6);
          *(_QWORD *)v8 = *((unsigned int *)v5 + 8);
        }
        v5 += 80;
        --v4;
      }
      while (v4);
    }
  }
}

void std::vector<DebugInfo::LineEntry>::resize(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;

  v4 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v3[-*(_QWORD *)a1] >> 4);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)v3) >> 4) >= v6)
    {
      bzero(*(void **)(a1 + 8), 80 * ((80 * v6 - 80) / 0x50) + 80);
      *(_QWORD *)(a1 + 8) = &v3[80 * ((80 * v6 - 80) / 0x50) + 80];
      return;
    }
    if (a2 > 0x333333333333333)
      abort();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)v4) >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v9;
    if (v10 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = 5 * v10;
    v12 = (char *)operator new(80 * v10);
    v13 = &v12[80 * v5];
    v14 = &v12[16 * v11];
    v15 = 80 * ((80 * v6 - 80) / 0x50) + 80;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v3[v17];
        v20 = *(_OWORD *)&v3[v17 - 80];
        *((_QWORD *)v18 - 8) = *(_QWORD *)&v3[v17 - 64];
        *((_OWORD *)v18 - 5) = v20;
        *((_QWORD *)v19 - 9) = 0;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v19 - 10) = 0;
        *((_QWORD *)v18 - 7) = *(_QWORD *)&v3[v17 - 56];
        *((_QWORD *)v18 - 4) = 0;
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v3[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v3[v17 - 32];
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v3[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v3[v17 - 8];
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        v17 -= 80;
      }
      while (&v3[v17] != v4);
      v21 = &v13[v17];
      v22 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v21;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != v22)
      {
        do
        {
          v3 -= 80;
          std::allocator<DebugInfo::LineEntry>::destroy[abi:nn180100]((uint64_t)v3);
        }
        while (v3 != v22);
        v3 = v22;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v23 = &v4[80 * a2];
    while (v3 != v23)
    {
      v3 -= 80;
      std::allocator<DebugInfo::LineEntry>::destroy[abi:nn180100]((uint64_t)v3);
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

unint64_t std::vector<DebugInfo::BlockInfo>::__push_back_slow_path<DebugInfo::BlockInfo>(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276)
    abort();
  if (0x9D89D89D89D89D8ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x9D89D89D89D89D8ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v6 = 0x276276276276276;
  else
    v6 = v3;
  if (v6)
    v6 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<DebugInfo::BlockInfo>>(v6);
  else
    v7 = 0;
  v8 = v6 + 104 * v2;
  v9 = v6 + 104 * v7;
  *(_QWORD *)v8 = *(_QWORD *)a2;
  v10 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 8) = v10;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = v11;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v12 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(v8 + 56) = v12;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 80) = v13;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v14 = v8 + 104;
  v15 = *a1;
  v16 = a1[1];
  if (v16 == *a1)
  {
    *a1 = v8;
    a1[1] = v14;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v17 = *(_QWORD *)(v16 - 104);
      v16 -= 104;
      *(_QWORD *)(v8 - 104) = v17;
      v8 -= 104;
      v18 = *(_OWORD *)(v16 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v16 + 24);
      *(_OWORD *)(v8 + 8) = v18;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v19 = *(_OWORD *)(v16 + 32);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(v16 + 48);
      *(_OWORD *)(v8 + 32) = v19;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      v20 = *(_OWORD *)(v16 + 56);
      *(_QWORD *)(v8 + 72) = *(_QWORD *)(v16 + 72);
      *(_OWORD *)(v8 + 56) = v20;
      *(_QWORD *)(v16 + 64) = 0;
      *(_QWORD *)(v16 + 72) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      v21 = *(_OWORD *)(v16 + 80);
      *(_QWORD *)(v8 + 96) = *(_QWORD *)(v16 + 96);
      *(_OWORD *)(v8 + 80) = v21;
      *(_QWORD *)(v16 + 80) = 0;
      *(_QWORD *)(v16 + 88) = 0;
      *(_QWORD *)(v16 + 96) = 0;
    }
    while (v16 != v15);
    v16 = *a1;
    v22 = a1[1];
    *a1 = v8;
    a1[1] = v14;
    a1[2] = v9;
    while (v22 != v16)
    {
      v22 -= 104;
      std::allocator<DebugInfo::BlockInfo>::destroy[abi:nn180100](v22);
    }
  }
  if (v16)
    operator delete((void *)v16);
  return v14;
}

void constructFullPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  uint64_t v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  int v17;
  std::string v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
    {
      v7 = (_BYTE *)a2;
      if (v6 != 1)
        goto LABEL_10;
      goto LABEL_8;
    }
LABEL_9:
    std::operator+<char>(&v18, "/", a3);
    *(std::string *)a1 = v18;
    return;
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_9;
  if (v8 != 1)
    goto LABEL_10;
  v7 = *(_BYTE **)a2;
LABEL_8:
  if (*v7 == 47)
    goto LABEL_9;
LABEL_10:
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = &v18;
  std::string::basic_string[abi:nn180100]((uint64_t)&v18, v9 + 1);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*(char *)(a2 + 23) >= 0)
      v11 = (const void *)a2;
    else
      v11 = *(const void **)a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 47;
  v12 = *(char *)(a3 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a3;
  else
    v13 = *(const std::string::value_type **)a3;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a3 + 23);
  else
    v14 = *(_QWORD *)(a3 + 8);
  v15 = std::string::append(&v18, v13, v14);
  size = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)a1 = v15->__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 8) = size;
  *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v15->__r_.__value_.__s + 23);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  *(_BYTE *)(a1 + 23) = size;
  if (v17 < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_22FFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DebugInfo::BlockInfo::~BlockInfo(void **this)
{
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::vector<DebugInfo::LineDisassemblyInfo>::resize(void **a1, unint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  void *v24;
  char *v25;
  _OWORD *v26;
  uint64_t v27;

  v5 = (char *)*a1;
  v6 = (char *)a1[1];
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)*a1) >> 3);
  v8 = a2 - v7;
  if (a2 > v7)
  {
    v10 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v10 - v6) >> 3) >= v8)
    {
      v25 = &v6[40 * v8];
      v26 = (_OWORD *)(a3 + 16);
      do
      {
        *(_QWORD *)v6 = *(id *)a3;
        *((_QWORD *)v6 + 1) = *(id *)(a3 + 8);
        v27 = *(_QWORD *)(a3 + 32);
        *((_OWORD *)v6 + 1) = *v26;
        *((_QWORD *)v6 + 4) = v27;
        v6 += 40;
      }
      while (v6 != v25);
      a1[1] = v25;
      return;
    }
    if (a2 > 0x666666666666666)
      abort();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v5) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a2)
      v12 = a2;
    if (v11 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v12;
    if (v13 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(40 * v13);
    v15 = &v14[40 * v7];
    v16 = &v14[40 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = *(id *)a3;
      *((_QWORD *)v17 + 1) = *(id *)(a3 + 8);
      *((_OWORD *)v17 + 1) = *(_OWORD *)(a3 + 16);
      *((_QWORD *)v17 + 4) = *(_QWORD *)(a3 + 32);
      v17 += 40;
    }
    while (v17 != v16);
    v18 = &v14[40 * v13];
    v19 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v18;
      if (!v20)
        return;
    }
    else
    {
      do
      {
        v21 = *(_OWORD *)(v20 - 40);
        v20 -= 40;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
        *(_OWORD *)(v15 - 40) = v21;
        v15 -= 40;
        v22 = *((_OWORD *)v20 + 1);
        *((_QWORD *)v15 + 4) = *((_QWORD *)v20 + 4);
        *((_OWORD *)v15 + 1) = v22;
      }
      while (v20 != v19);
      v23 = (char *)*a1;
      v20 = (char *)a1[1];
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v18;
      if (v20 != v23)
      {
        do
        {

          v24 = (void *)*((_QWORD *)v20 - 5);
          v20 -= 40;

        }
        while (v20 != v23);
        v20 = v23;
      }
      if (!v20)
        return;
    }
    operator delete(v20);
    return;
  }
  if (a2 < v7)
    std::vector<DebugInfo::LineDisassemblyInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, (uint64_t)&v5[40 * a2]);
}

void std::vector<InstructionInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void GTScopeFunction::~GTScopeFunction(GTScopeFunction *this)
{
  uint64_t v2;
  GTScopeFunction *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    v3 = (GTScopeFunction *)*((_QWORD *)this + 3);
    if (v3 == this)
    {
      v4 = 4;
      v3 = this;
    }
    else
    {
      if (!v3)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
}

void sub_230314(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::vector<DebugInfo::LineDisassemblyInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<DebugInfo::LineDisassemblyInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::__function::__func<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0,std::allocator<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0,std::allocator<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  operator delete();
}

_QWORD *std::__function::__func<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0,std::allocator<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = off_725640;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0,std::allocator<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = off_725640;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0,std::allocator<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0,std::allocator<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0,std::allocator<DebugInfo::DebugInfo(GTShaderProfilerHelper *,NSData *,NSData *,int,MachOInfo *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v2, "removeItemAtURL:error:", *(_QWORD *)(a1 + 8), 0);

}

void sub_230558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_230610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_230718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<DYMTLShaderProfilerProgramAddress *>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<DYMTLShaderProfilerProgramAddress *>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<DYMTLShaderProfilerProgramAddress *>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<DYMTLShaderProfilerProgramAddress *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_230954(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<GTCoalescedEncoderIndexInfo>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<DYGPUTimelinePipelineStateInfo>>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v3 = 3 * a2;
    v4 = 24 * a2;
    v5 = (char *)operator new(24 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * v3];
    v6 = 24 * ((v4 - 24) / 0x18uLL) + 24;
    bzero(v5, v6);
    a1[1] = &v5[v6];
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_230D0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  __int128 v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *k;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int *j;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char *v78;
  BOOL v80;
  uint64_t v81;
  int *v82;
  char *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  char *v94;
  int64_t v95;
  int64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int *v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  char *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  _DWORD *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  int64_t v148;
  int v149;
  int64_t v150;
  int v151;
  char *v152;

  v7 = (int *)result;
LABEL_2:
  v8 = (int *)(a2 - 16);
  v9 = (int *)(a2 - 32);
  v10 = (int *)(a2 - 48);
  i = v7;
  v152 = a2;
  while (2)
  {
    v7 = i;
    v12 = a2 - (char *)i;
    v13 = (a2 - (char *)i) >> 4;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v8, v7);
        if ((_DWORD)result)
        {
          v74 = *v7;
          *v7 = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v74;
          v75 = v7[1];
          v7[1] = *((_DWORD *)a2 - 3);
          *((_DWORD *)a2 - 3) = v75;
          v76 = v7[2];
          v7[2] = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v76;
          v77 = v7[3];
          v7[3] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v77;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v7, v7 + 4, v8);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v7, v7 + 4, v7 + 8, v8);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v7, v7 + 4, v7 + 8, v7 + 12, v8);
      default:
        if (v12 > 383)
        {
          if (!a3)
          {
            if (v7 != (int *)a2)
            {
              v95 = (unint64_t)(v13 - 2) >> 1;
              v150 = v95;
              do
              {
                v96 = v95;
                if (v150 >= v95)
                {
                  v97 = (2 * v95) | 1;
                  v98 = (unsigned int *)&v7[4 * v97];
                  if (2 * v95 + 2 < v13
                    && std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(&v7[4 * v97], v98 + 4))
                  {
                    v98 += 4;
                    v97 = 2 * v96 + 2;
                  }
                  v99 = (unsigned int *)&v7[4 * v96];
                  result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v98, v99);
                  a2 = v152;
                  if ((result & 1) == 0)
                  {
                    v101 = *v99;
                    v100 = v99[1];
                    v102 = v99[2];
                    v145 = v99[3];
                    *v99 = *v98;
                    v99[1] = v98[1];
                    v99[2] = v98[2];
                    v99[3] = v98[3];
                    if (v150 >= v97)
                    {
                      v148 = v96;
                      v146 = v100;
                      while (1)
                      {
                        v103 = v98;
                        v104 = 2 * v97;
                        v97 = (2 * v97) | 1;
                        v98 = (unsigned int *)&v7[4 * v97];
                        v105 = v104 + 2;
                        if (v104 + 2 < v13)
                        {
                          v106 = v101;
                          result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(&v7[4 * v97], v98 + 4);
                          v101 = v106;
                          v96 = v148;
                          v100 = v146;
                          if ((_DWORD)result)
                          {
                            v98 += 4;
                            v97 = v105;
                          }
                        }
                        v107 = *v98;
                        if (*v98 < v101)
                          break;
                        if (v101 >= v107)
                        {
                          v108 = v98[1];
                          if (v108 < v100)
                            break;
                          if (v100 >= v108)
                          {
                            v109 = v98[2];
                            if (v109 < v102 || v102 >= v109 && v98[3] < v145)
                              break;
                          }
                        }
                        *v103 = v107;
                        v103[1] = v98[1];
                        v103[2] = v98[2];
                        v103[3] = v98[3];
                        if (v150 < v97)
                          goto LABEL_178;
                      }
                      v98 = v103;
                    }
LABEL_178:
                    *v98 = v101;
                    v98[1] = v100;
                    v98[2] = v102;
                    v98[3] = v145;
                    a2 = v152;
                  }
                }
                v95 = v96 - 1;
              }
              while (v96);
              v110 = (unint64_t)v12 >> 4;
              do
              {
                v111 = a2;
                v112 = 0;
                v151 = *v7;
                v113 = v7[3];
                v147 = v7[2];
                v149 = v7[1];
                v114 = v110 - 2;
                if (v110 < 2)
                  v114 = v110 - 1;
                v115 = v114 >> 1;
                v116 = v7;
                do
                {
                  v117 = &v116[4 * v112 + 4];
                  v118 = (2 * v112) | 1;
                  v119 = 2 * v112 + 2;
                  if (v119 < v110)
                  {
                    result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(&v116[4 * v112 + 4], &v116[4 * v112 + 8]);
                    if ((_DWORD)result)
                    {
                      v117 += 4;
                      v118 = v119;
                    }
                  }
                  *v116 = *v117;
                  v116[1] = v117[1];
                  v116[2] = v117[2];
                  v116[3] = v117[3];
                  v116 = v117;
                  v112 = v118;
                }
                while (v118 <= v115);
                if (v117 == (int *)(v111 - 16))
                {
                  *v117 = v151;
                  v117[1] = v149;
                  v117[2] = v147;
                  v117[3] = v113;
                  goto LABEL_205;
                }
                *v117 = *((_DWORD *)v111 - 4);
                v117[1] = *((_DWORD *)v111 - 3);
                v117[2] = *((_DWORD *)v111 - 2);
                v117[3] = *((_DWORD *)v111 - 1);
                *((_DWORD *)v111 - 4) = v151;
                *((_DWORD *)v111 - 3) = v149;
                *((_DWORD *)v111 - 2) = v147;
                *((_DWORD *)v111 - 1) = v113;
                v120 = (char *)v117 - (char *)v7 + 16;
                if (v120 >= 17)
                {
                  v121 = (v120 >> 4) - 2;
                  v122 = v121 >> 1;
                  v123 = &v7[4 * (v121 >> 1)];
                  result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v123, v117);
                  if ((_DWORD)result)
                  {
                    v124 = *v117;
                    v125 = v117[1];
                    v126 = v117[2];
                    v127 = v117[3];
                    *v117 = *v123;
                    v117[1] = v123[1];
                    v117[2] = v123[2];
                    v117[3] = v123[3];
                    if (v121 < 2)
                      goto LABEL_204;
                    while (1)
                    {
                      v128 = v123;
                      v129 = v122 - 1;
                      v122 = (v122 - 1) >> 1;
                      v123 = &v7[4 * v122];
                      v130 = *v123;
                      if (*v123 >= v124)
                      {
                        if (v124 < v130
                          || (v131 = v123[1], v131 >= v125)
                          && (v125 < v131 || (v132 = v123[2], v132 >= v126) && (v126 < v132 || v123[3] >= v127)))
                        {
                          v123 = v128;
LABEL_204:
                          *v123 = v124;
                          v123[1] = v125;
                          v123[2] = v126;
                          v123[3] = v127;
                          break;
                        }
                      }
                      else
                      {
                        v131 = v123[1];
                      }
                      *v128 = v130;
                      v128[1] = v131;
                      v128[2] = v123[2];
                      v128[3] = v123[3];
                      if (v129 <= 1)
                        goto LABEL_204;
                    }
                  }
                }
LABEL_205:
                a2 = v111 - 16;
              }
              while (v110-- > 2);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v7[4 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v15, v7, v8);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v7, v15, v8);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v7 + 4, v15 - 4, v9);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v7 + 8, &v7[4 * v14 + 4], v10);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v15 - 4, v15, &v7[4 * v14 + 4]);
            v16 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
          }
          --a3;
          a2 = v152;
          if ((a4 & 1) == 0)
          {
            result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v7 - 4, v7);
            if ((result & 1) == 0)
            {
              v46 = *v7;
              v47 = v7[1];
              v48 = v7[2];
              v49 = v7[3];
              v50 = *v8;
              if (*v7 < *v8
                || v50 >= v46
                && ((v72 = *((_DWORD *)v152 - 3), v47 < v72)
                 || v72 >= v47
                 && ((v73 = *((_DWORD *)v152 - 2), v48 < v73) || v73 >= v48 && v49 < *((_DWORD *)v152 - 1))))
              {
                i = v7;
                while (1)
                {
                  v52 = i[4];
                  i += 4;
                  v51 = v52;
                  if (v46 < v52)
                    break;
                  if (v51 >= v46)
                  {
                    v53 = i[1];
                    if (v47 < v53)
                      break;
                    if (v53 >= v47)
                    {
                      v54 = i[2];
                      if (v48 < v54 || v54 >= v48 && v49 < i[3])
                        break;
                    }
                  }
                }
              }
              else
              {
                for (i = v7 + 4; i < (int *)v152; i += 4)
                {
                  if (v46 < *i)
                    break;
                  if (*i >= v46)
                  {
                    v70 = i[1];
                    if (v47 < v70)
                      break;
                    if (v70 >= v47)
                    {
                      v71 = i[2];
                      if (v48 < v71 || v71 >= v48 && v49 < i[3])
                        break;
                    }
                  }
                }
              }
              j = (int *)v152;
              if (i < (int *)v152)
              {
                for (j = v8; ; j -= 4)
                {
                  if (v46 >= v50)
                  {
                    if (v50 < v46)
                      break;
                    v56 = j[1];
                    if (v47 >= v56)
                    {
                      if (v56 < v47)
                        break;
                      v57 = j[2];
                      if (v48 >= v57 && (v57 < v48 || v49 >= j[3]))
                        break;
                    }
                  }
                  v58 = *(j - 4);
                  v50 = v58;
                }
              }
              if (i < j)
              {
                v59 = *i;
                v60 = *j;
                do
                {
                  *i = v60;
                  *j = v59;
                  v61 = i[1];
                  i[1] = j[1];
                  j[1] = v61;
                  v62 = i[2];
                  i[2] = j[2];
                  j[2] = v62;
                  v63 = i[3];
                  i[3] = j[3];
                  j[3] = v63;
                  while (1)
                  {
                    v64 = i[4];
                    i += 4;
                    v59 = v64;
                    if (v46 < v64)
                      break;
                    if (v59 >= v46)
                    {
                      v65 = i[1];
                      if (v47 < v65)
                        break;
                      if (v65 >= v47)
                      {
                        v66 = i[2];
                        if (v48 < v66 || v66 >= v48 && v49 < i[3])
                          break;
                      }
                    }
                  }
                  while (1)
                  {
                    do
                    {
                      v67 = *(j - 4);
                      j -= 4;
                      v60 = v67;
                    }
                    while (v46 < v67);
                    if (v60 < v46)
                      break;
                    v68 = j[1];
                    if (v47 >= v68)
                    {
                      if (v68 < v47)
                        break;
                      v69 = j[2];
                      if (v48 >= v69 && (v69 < v48 || v49 >= j[3]))
                        break;
                    }
                  }
                }
                while (i < j);
              }
              if (i - 4 != v7)
              {
                *v7 = *(i - 4);
                v7[1] = *(i - 3);
                v7[2] = *(i - 2);
                v7[3] = *(i - 1);
              }
              a4 = 0;
              *(i - 4) = v46;
              *(i - 3) = v47;
              *(i - 2) = v48;
              *(i - 1) = v49;
              continue;
            }
          }
          v17 = *v7;
          v18 = v7[1];
          v19 = (char *)(v7 + 4);
          v21 = v7[2];
          v20 = v7[3];
          while (1)
          {
            v22 = *(_DWORD *)v19;
            if (*(_DWORD *)v19 >= v17)
            {
              if (v17 < v22)
                break;
              v23 = *((_DWORD *)v19 + 1);
              if (v23 >= v18)
              {
                if (v18 < v23)
                  break;
                v24 = *((_DWORD *)v19 + 2);
                if (v24 >= v21 && (v21 < v24 || *((_DWORD *)v19 + 3) >= v20))
                  break;
              }
            }
            v19 += 16;
          }
          if (v19 - 16 == (char *)v7)
          {
            k = v152;
            if (v19 < v152)
            {
              v30 = *v8;
              k = (char *)v8;
              if (*v8 >= v17)
              {
                k = (char *)v8;
                do
                {
                  if (v17 >= v30)
                  {
                    v31 = *((_DWORD *)k + 1);
                    if (v31 < v18)
                      break;
                    if (v18 >= v31)
                    {
                      v32 = *((_DWORD *)k + 2);
                      if (v32 < v21 || v21 >= v32 && *((_DWORD *)k + 3) < v20)
                        break;
                    }
                  }
                  if (v19 >= k)
                    break;
                  v33 = *((_DWORD *)k - 4);
                  k -= 16;
                  v30 = v33;
                }
                while (v33 >= v17);
              }
            }
          }
          else
          {
            v25 = *v8;
            for (k = (char *)v8; v25 >= v17; k -= 16)
            {
              if (v17 >= v25)
              {
                v27 = *((_DWORD *)k + 1);
                if (v27 < v18)
                  break;
                if (v18 >= v27)
                {
                  v28 = *((_DWORD *)k + 2);
                  if (v28 < v21 || v21 >= v28 && *((_DWORD *)k + 3) < v20)
                    break;
                }
              }
              v29 = *((_DWORD *)k - 4);
              v25 = v29;
            }
          }
          i = (int *)v19;
          if (v19 < k)
          {
            v34 = *(_DWORD *)k;
            i = (int *)v19;
            v35 = (int *)k;
            do
            {
              *i = v34;
              *v35 = v22;
              v36 = i[1];
              i[1] = v35[1];
              v35[1] = v36;
              v37 = i[2];
              i[2] = v35[2];
              v35[2] = v37;
              v38 = i[3];
              i[3] = v35[3];
              v35[3] = v38;
              while (1)
              {
                do
                {
                  v39 = i[4];
                  i += 4;
                  v22 = v39;
                }
                while (v39 < v17);
                if (v17 < v22)
                  break;
                v40 = i[1];
                if (v40 >= v18)
                {
                  if (v18 < v40)
                    break;
                  v41 = i[2];
                  if (v41 >= v21 && (v21 < v41 || i[3] >= v20))
                    break;
                }
              }
              while (1)
              {
                v42 = *(v35 - 4);
                v35 -= 4;
                v34 = v42;
                if (v42 < v17)
                  break;
                if (v17 >= v34)
                {
                  v43 = v35[1];
                  if (v43 < v18)
                    break;
                  if (v18 >= v43)
                  {
                    v44 = v35[2];
                    if (v44 < v21 || v21 >= v44 && v35[3] < v20)
                      break;
                  }
                }
              }
            }
            while (i < v35);
          }
          if (i - 4 != v7)
          {
            *v7 = *(i - 4);
            v7[1] = *(i - 3);
            v7[2] = *(i - 2);
            v7[3] = *(i - 1);
          }
          *(i - 4) = v17;
          *(i - 3) = v18;
          *(i - 2) = v21;
          *(i - 1) = v20;
          if (v19 < k)
          {
LABEL_64:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *,false>(v7, i - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v45 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(v7, (char *)i - 16);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(i, v152);
          if (!(_DWORD)result)
          {
            if (v45)
              continue;
            goto LABEL_64;
          }
          a2 = (char *)(i - 4);
          if (v45)
            return result;
          goto LABEL_2;
        }
        v78 = (char *)(v7 + 4);
        v80 = v7 == (int *)a2 || v78 == a2;
        if ((a4 & 1) == 0)
        {
          if (!v80)
          {
            do
            {
              v134 = v78;
              result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v78, v7);
              if ((_DWORD)result)
              {
                v135 = *(_DWORD *)v134;
                v136 = v7[5];
                v137 = v7[6];
                v138 = v7[7];
                v139 = *v7;
                while (1)
                {
                  do
                  {
                    v140 = v7;
                    v141 = v139;
                    v142 = *(v7 - 4);
                    v7 -= 4;
                    v139 = v142;
                    v7[8] = v141;
                    *(_QWORD *)(v7 + 9) = *(_QWORD *)(v7 + 5);
                    v7[11] = v7[7];
                  }
                  while (v135 < v142);
                  if (v139 < v135)
                    break;
                  v143 = *(v140 - 3);
                  if (v136 >= v143)
                  {
                    if (v143 < v136)
                      break;
                    v144 = *(v140 - 2);
                    if (v137 >= v144 && (v144 < v137 || v138 >= *(v140 - 1)))
                      break;
                  }
                }
                *v140 = v135;
                v140[1] = v136;
                v140[2] = v137;
                v140[3] = v138;
              }
              v78 = v134 + 16;
              v7 = (int *)v134;
            }
            while (v134 + 16 != a2);
          }
          return result;
        }
        if (v80)
          return result;
        v81 = 0;
        v82 = v7;
        do
        {
          v83 = v78;
          result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v78, v82);
          if (!(_DWORD)result)
            goto LABEL_154;
          v84 = v82[4];
          v85 = v82[5];
          v86 = v82[6];
          v87 = v82[7];
          v88 = v82[1];
          v82[4] = *v82;
          *((_DWORD *)v83 + 1) = v88;
          *((_DWORD *)v83 + 2) = v82[2];
          *((_DWORD *)v83 + 3) = v82[3];
          v89 = v7;
          if (v82 == v7)
            goto LABEL_153;
          v90 = v81;
          while (1)
          {
            v91 = *(int *)((char *)v7 + v90 - 16);
            if (v84 < v91)
            {
              v92 = *(int *)((char *)v7 + v90 - 12);
              goto LABEL_150;
            }
            if (v91 < v84)
              goto LABEL_152;
            v92 = *(int *)((char *)v7 + v90 - 12);
            if (v85 >= v92)
            {
              if (v92 < v85)
                goto LABEL_152;
              v93 = *(int *)((char *)v7 + v90 - 8);
              if (v86 >= v93)
                break;
            }
LABEL_150:
            v82 -= 4;
            v94 = (char *)v7 + v90;
            *(_DWORD *)v94 = v91;
            *((_DWORD *)v94 + 1) = v92;
            *((_QWORD *)v94 + 1) = *(_QWORD *)((char *)v7 + v90 - 8);
            v90 -= 16;
            if (!v90)
            {
              v89 = v7;
              goto LABEL_153;
            }
          }
          if (v93 >= v86)
          {
            v89 = (int *)((char *)v7 + v90);
            if (v87 >= *(int *)((char *)v7 + v90 - 4))
              goto LABEL_153;
            goto LABEL_150;
          }
LABEL_152:
          v89 = v82;
LABEL_153:
          *v89 = v84;
          v89[1] = v85;
          v89[2] = v86;
          v89[3] = v87;
LABEL_154:
          v78 = v83 + 16;
          v81 += 16;
          v82 = (int *)v83;
        }
        while (v83 + 16 != a2);
        return result;
    }
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_231C40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1 < *a2)
    return 1;
  if (*a2 < *a1)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3)
    return 1;
  if (v3 < v2)
    return 0;
  v4 = a1[2];
  v5 = a2[2];
  if (v4 < v5)
    return 1;
  return v5 >= v4 && a1[3] < a2[3];
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(int *a1, int *a2, int *a3)
{
  BOOL v6;
  _BOOL8 result;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v6 = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a2, a1);
  result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a3, a2);
  if (v6)
  {
    v9 = a1 + 3;
    v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
      v10 = a1[1];
      a1[1] = a3[1];
      a3[1] = v10;
      v11 = a1[2];
      a1[2] = a3[2];
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      v21 = a1[2];
      a1[2] = a2[2];
      a2[2] = v21;
      v9 = a2 + 3;
      v22 = a1[3];
      a1[3] = a2[3];
      a2[3] = v22;
      result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a3, a2);
      if (!result)
        return result;
      v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      v11 = a2[2];
      a2[2] = a3[2];
    }
    a3[2] = v11;
    v16 = a3 + 3;
    goto LABEL_10;
  }
  if (result)
  {
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    v13 = a2[1];
    a2[1] = a3[1];
    a3[1] = v13;
    v14 = a2[2];
    a2[2] = a3[2];
    a3[2] = v14;
    v16 = a2 + 3;
    v15 = a2[3];
    a2[3] = a3[3];
    a3[3] = v15;
    result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a2, a1);
    if (result)
    {
      v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      v18 = a1[1];
      a1[1] = a2[1];
      a2[1] = v18;
      v19 = a1[2];
      a1[2] = a2[2];
      a2[2] = v19;
      v9 = a1 + 3;
LABEL_10:
      v25 = *v9;
      *v9 = *v16;
      *v16 = v25;
    }
  }
  return result;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(int *a1, int *a2, int *a3, int *a4)
{
  _BOOL8 result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(a1, a2, a3);
  result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a4, a3);
  if (result)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    v12 = a3[3];
    a3[3] = a4[3];
    a4[3] = v12;
    result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a3, a2);
    if (result)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = a2[2];
      a2[2] = a3[2];
      a3[2] = v15;
      v16 = a2[3];
      a2[3] = a3[3];
      a3[3] = v16;
      result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a2, a1);
      if (result)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        v18 = a1[1];
        a1[1] = a2[1];
        a2[1] = v18;
        v19 = a1[2];
        a1[2] = a2[2];
        a2[2] = v19;
        v20 = a1[3];
        a1[3] = a2[3];
        a2[3] = v20;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  _BOOL8 result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(a1, a2, a3, a4);
  result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a5, a4);
  if (result)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    v14 = a4[3];
    a4[3] = a5[3];
    a5[3] = v14;
    result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a4, a3);
    if (result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = a3[2];
      a3[2] = a4[2];
      a4[2] = v17;
      v18 = a3[3];
      a3[3] = a4[3];
      a4[3] = v18;
      result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a3, a2);
      if (result)
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        v21 = a2[2];
        a2[2] = a3[2];
        a3[2] = v21;
        v22 = a2[3];
        a2[3] = a3[3];
        a3[3] = v22;
        result = std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(a2, a1);
        if (result)
        {
          v23 = *a1;
          *a1 = *a2;
          *a2 = v23;
          v24 = a1[1];
          a1[1] = a2[1];
          a2[1] = v24;
          v25 = a1[2];
          a1[2] = a2[2];
          a2[2] = v25;
          v26 = a1[3];
          a1[3] = a2[3];
          a2[3] = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(int *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>((_DWORD *)a2 - 4, a1))
      {
        v6 = *a1;
        *a1 = *((_DWORD *)a2 - 4);
        *((_DWORD *)a2 - 4) = v6;
        v7 = a1[1];
        a1[1] = *((_DWORD *)a2 - 3);
        *((_DWORD *)a2 - 3) = v7;
        v8 = a1[2];
        a1[2] = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
        v9 = a1[3];
        a1[3] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 4, (int *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 4, a1 + 8, (int *)a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 4, a1 + 8, a1 + 12, (int *)a2 - 4);
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == (int *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (2)
  {
    if (!std::__tuple_less<4ul>::operator()[abi:nn180100]<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v11, v10))goto LABEL_21;
    v14 = *v11;
    v15 = v11[1];
    v16 = v11[2];
    v17 = v11[3];
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v11[3] = v10[3];
    v18 = a1;
    if (v10 == a1)
      goto LABEL_20;
    v19 = v12;
    while (1)
    {
      v20 = (char *)a1 + v19;
      v21 = *(int *)((char *)a1 + v19 + 16);
      if (v14 < v21)
      {
        v22 = *((_DWORD *)v20 + 5);
        goto LABEL_17;
      }
      if (v21 < v14)
        goto LABEL_19;
      v22 = *(int *)((char *)a1 + v19 + 20);
      if (v15 >= v22)
      {
        if (v22 < v15)
          goto LABEL_19;
        v23 = *(int *)((char *)a1 + v19 + 24);
        if (v16 >= v23)
        {
          if (v23 < v16)
          {
LABEL_19:
            v18 = v10;
            goto LABEL_20;
          }
          if (v17 >= *(int *)((char *)a1 + v19 + 28))
            break;
        }
      }
LABEL_17:
      v10 -= 4;
      *((_DWORD *)v20 + 8) = v21;
      v24 = (char *)a1 + v19;
      *((_DWORD *)v24 + 9) = v22;
      *((_QWORD *)v24 + 5) = *(_QWORD *)((char *)a1 + v19 + 24);
      v19 -= 16;
      if (v19 == -32)
      {
        v18 = a1;
        goto LABEL_20;
      }
    }
    v18 = (int *)((char *)a1 + v19 + 32);
LABEL_20:
    *v18 = v14;
    v18[1] = v15;
    v18[2] = v16;
    v18[3] = v17;
    if (++v13 != 8)
    {
LABEL_21:
      v10 = v11;
      v12 += 16;
      v11 += 4;
      if (v11 == (int *)a2)
        return 1;
      continue;
    }
    return v11 + 4 == (int *)a2;
  }
}

_QWORD *BufferView<DYGPUTimelineEncoderTimelineInfo>::BufferView(_QWORD *a1, void *a2)
{
  id v3;
  unint64_t v4;

  v3 = objc_retainAutorelease(a2);
  *a1 = objc_msgSend(v3, "bytes");
  v4 = (unint64_t)objc_msgSend(v3, "length");
  a1[1] = *a1 + 24 * (v4 / 0x18);
  a1[2] = v4 / 0x18;

  return a1;
}

void sub_23244C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *BufferView<unsigned long long>::BufferView(_QWORD *a1, void *a2)
{
  id v3;
  unint64_t v4;

  v3 = objc_retainAutorelease(a2);
  *a1 = objc_msgSend(v3, "bytes");
  v4 = (unint64_t)objc_msgSend(v3, "length");
  a1[1] = *a1 + 8 * (v4 >> 3);
  a1[2] = v4 >> 3;

  return a1;
}

{
  id v3;
  unint64_t v4;

  v3 = objc_retainAutorelease(a2);
  *a1 = objc_msgSend(v3, "mutableBytes");
  v4 = (unint64_t)objc_msgSend(v3, "length");
  a1[1] = *a1 + 8 * (v4 >> 3);
  a1[2] = v4 >> 3;

  return a1;
}

void sub_2324AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2326B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *BufferView<double>::BufferView(_QWORD *a1, void *a2)
{
  id v3;
  unint64_t v4;

  v3 = objc_retainAutorelease(a2);
  *a1 = objc_msgSend(v3, "bytes");
  v4 = (unint64_t)objc_msgSend(v3, "length");
  a1[1] = *a1 + 8 * (v4 >> 3);
  a1[2] = v4 >> 3;

  return a1;
}

{
  id v3;
  unint64_t v4;

  v3 = objc_retainAutorelease(a2);
  *a1 = objc_msgSend(v3, "mutableBytes");
  v4 = (unint64_t)objc_msgSend(v3, "length");
  a1[1] = *a1 + 8 * (v4 >> 3);
  a1[2] = v4 >> 3;

  return a1;
}

void sub_232718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_232924(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned int,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned int,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned int,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  v10[4] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_232B38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_232BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_232D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_232E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_232F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_233080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id ArrayFromDownloadRequests(uint64_t a1, int a2)
{
  int v2;
  id v4;
  void *v5;
  id v6;

  v2 = a2;
  v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", a2);
  if (v2 >= 1)
  {
    do
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 24)));
      objc_msgSend(v4, "addObject:", v5);

      --v2;
    }
    while (v2);
  }
  v6 = objc_msgSend(v4, "copy");

  return v6;
}

id ArrayFromActivities(void *a1, char a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;

  v3 = a1;
  v4 = objc_alloc((Class)NSMutableArray);
  v5 = v3;
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = v5;
    do
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "previousActivity"));

      ++v7;
      v8 = (void *)v9;
    }
    while (v9);
    v10 = objc_msgSend(v4, "initWithCapacity:", v7);
    do
    {
      if ((a2 & 1) != 0)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "jsonObject"));
        objc_msgSend(v10, "addObject:", v11);

      }
      else
      {
        objc_msgSend(v10, "addObject:", v6);
      }
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "previousActivity"));

      v6 = (void *)v12;
    }
    while (v12);
  }
  else
  {
    v10 = objc_msgSend(v4, "initWithCapacity:", 0);
  }
  v13 = v10;
  v14 = (unint64_t)objc_msgSend(v13, "count");
  if (v14 >= 2)
  {
    v15 = 0;
    v16 = v14 >> 1;
    v17 = v14 - 1;
    do
    {
      v18 = v15 + 1;
      objc_msgSend(v13, "exchangeObjectAtIndex:withObjectAtIndex:");
      --v17;
      v15 = v18;
    }
    while (v16 != v18);
  }

  v19 = objc_msgSend(v13, "copy");
  return v19;
}

id BreadcrumbSummary(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = ArrayFromActivities(a1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8), "summary", (_QWORD)v11));
        objc_msgSend(v3, "addObject:", v9);

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

void sub_236E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_236F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_237050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2378EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  void *v61;
  void *v62;
  void *v63;
  void *v64;

  if (a41)
    operator delete(a41);
  if (a44)
    operator delete(a44);
  if (a47)
    operator delete(a47);
  if (a50)
    operator delete(a50);
  if (a53)
    operator delete(a53);
  operator delete(a20);
  operator delete(a18);
  operator delete(a21);

  _Unwind_Resume(a1);
}

void sub_2380C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2385CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_238928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void GTPerfStateGroup::~GTPerfStateGroup(GTPerfStateGroup *this)
{
  const void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 2) = 0;
  }

  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }

}

void sub_238AF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(v1 + 112);
  if (v3)
  {
    *(_QWORD *)(v1 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 + 80);
  if (v4)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 + 48);
  if (v5)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void ___ZN16GTPerfStateGroup32_GatherSampleDataPeriodicSamplesERK18mach_timebase_info_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t SamplesDelta;
  const void *v8;
  id v9;

  v5 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = v5;
  if (a3)
  {
    SamplesDelta = IOReportCreateSamplesDelta(*(_QWORD *)(v6 + 24), v5, 0);
    v8 = (const void *)SamplesDelta;
    if (SamplesDelta)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v9;
      IOReportGetChannelCount(SamplesDelta);
      IOReportIterate(v8, &__block_literal_global_2124);
      CFRelease(v8);
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = v5;
  }

}

void sub_238BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_238CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN16GTPerfStateGroup29_GatherSampleDataSOCPerfStateERK18mach_timebase_info_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SamplesDelta;
  const void *v10;
  _QWORD v11[7];
  _QWORD v12[3];
  int v13;

  v5 = a2;
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (a3)
  {
    v8 = *(_QWORD *)(a1 + 40);
    SamplesDelta = IOReportCreateSamplesDelta(*(_QWORD *)(v7 + 24), v5, 0);
    v10 = (const void *)SamplesDelta;
    if (SamplesDelta)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
      v12[0] = 0;
      v12[1] = v12;
      v12[2] = 0x2020000000;
      v13 = 0;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = ___ZN16GTPerfStateGroup29_GatherSampleDataSOCPerfStateERK18mach_timebase_info_block_invoke_2;
      v11[3] = &unk_7257F8;
      v11[5] = v8;
      v11[6] = a3;
      v11[4] = v12;
      IOReportIterate(SamplesDelta, v11);
      CFRelease(v10);
      _Block_object_dispose(v12, 8);
    }
  }
  else
  {
    *(_QWORD *)(v7 + 24) = v5;
  }

}

void sub_238DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN16GTPerfStateGroup29_GatherSampleDataSOCPerfStateERK18mach_timebase_info_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int Count;
  int v6;
  uint64_t v7;
  uint64_t Residency;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;

  v4 = (_QWORD *)a1[5];
  if (IOReportChannelGetFormat(a2) == 2)
  {
    IOReportStateGetCurrent(a2);
    Count = IOReportStateGetCount(a2);
    if (Count >= 2)
    {
      v6 = Count;
      v7 = 1;
      do
      {
        Residency = IOReportStateGetResidency(a2, v7);
        if (Residency)
        {
          v9 = Residency;
          v10 = (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) << 23) | (v7 << 15) | 0x302u | (unint64_t)(IOReportStateGetInTransitions(a2, v7) << 32);
          v11 = *(_QWORD *)(v4[6] + 8 * a1[6]);
          v12 = v4[11];
          v13 = v4[12];
          if (v12 >= v13)
          {
            v15 = v4[10];
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v15) >> 3);
            v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
            if (2 * v18 > v17)
              v17 = 2 * v18;
            if (v18 >= 0x555555555555555)
              v19 = 0xAAAAAAAAAAAAAAALL;
            else
              v19 = v17;
            if (v19)
              v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v19);
            else
              v20 = 0;
            v21 = v19 + 24 * v16;
            *(_BYTE *)(v21 + 4) = BYTE4(v10);
            *(_DWORD *)v21 = v10;
            *(_WORD *)(v21 + 5) = 0;
            *(_BYTE *)(v21 + 7) = 0;
            *(_QWORD *)(v21 + 8) = v11;
            *(_QWORD *)(v21 + 16) = v9;
            v23 = (char *)v4[10];
            v22 = (char *)v4[11];
            v24 = v21;
            if (v22 != v23)
            {
              do
              {
                v25 = *(_OWORD *)(v22 - 24);
                *(_QWORD *)(v24 - 8) = *((_QWORD *)v22 - 1);
                *(_OWORD *)(v24 - 24) = v25;
                v24 -= 24;
                v22 -= 24;
              }
              while (v22 != v23);
              v22 = (char *)v4[10];
            }
            v14 = v21 + 24;
            v4[10] = v24;
            v4[11] = v21 + 24;
            v4[12] = v19 + 24 * v20;
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_DWORD *)v12 = (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) << 23) | (v7 << 15) | 0x302;
            *(_BYTE *)(v12 + 4) = BYTE4(v10);
            *(_WORD *)(v12 + 5) = 0;
            *(_BYTE *)(v12 + 7) = 0;
            v14 = v12 + 24;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)(v12 + 16) = v9;
          }
          v4[11] = v14;
        }
        v7 = (v7 + 1);
      }
      while ((_DWORD)v7 != v6);
    }
  }
  ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return 16;
}

void ___ZN16GTPerfStateGroup26_GatherSampleDataPerfStateERK18mach_timebase_info_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SamplesDelta;
  const void *v10;
  _QWORD v11[6];

  v5 = a2;
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (a3)
  {
    v8 = *(_QWORD *)(a1 + 40);
    SamplesDelta = IOReportCreateSamplesDelta(*(_QWORD *)(v7 + 24), v5, 0);
    v10 = (const void *)SamplesDelta;
    if (SamplesDelta)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = ___ZN16GTPerfStateGroup26_GatherSampleDataPerfStateERK18mach_timebase_info_block_invoke_2;
      v11[3] = &__block_descriptor_48_e25_i16__0____CFDictionary__8l;
      v11[4] = v8;
      v11[5] = a3;
      IOReportIterate(SamplesDelta, v11);
      CFRelease(v10);
    }
  }
  else
  {
    *(_QWORD *)(v7 + 24) = v5;
  }

}

void sub_2390A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN16GTPerfStateGroup26_GatherSampleDataPerfStateERK18mach_timebase_info_block_invoke_2(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int Format;
  unsigned __int8 Current;
  int Count;
  int v8;
  uint64_t v9;
  uint64_t Residency;
  uint64_t v11;
  uint64_t NameForIndex;
  void *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  uint64_t UnitLabel;
  int v42;

  v4 = *(_QWORD **)(a1 + 32);
  Format = IOReportChannelGetFormat(a2);
  if (Format)
  {
    if (Format == 2)
    {
      Current = IOReportStateGetCurrent(a2);
      Count = IOReportStateGetCount(a2);
      if (Count >= 1)
      {
        v8 = Count;
        v9 = 0;
        v42 = Current << 23;
        while (1)
        {
          Residency = IOReportStateGetResidency(a2, v9);
          if (Residency)
            break;
LABEL_40:
          v9 = (v9 + 1);
          if ((_DWORD)v9 == v8)
            return 16;
        }
        v11 = Residency;
        NameForIndex = IOReportStateGetNameForIndex(a2, v9);
        v13 = (void *)objc_claimAutoreleasedReturnValue(NameForIndex);
        v14 = v13;
        if (v13)
        {
          if ((unint64_t)objc_msgSend(v13, "length") < 2
            || objc_msgSend(v14, "characterAtIndex:", 0) != 80)
          {
            goto LABEL_39;
          }
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "substringFromIndex:", 1));
          v16 = objc_msgSend(v15, "integerValue");

          v17 = (v16 << 15) | v42 | 0x102;
          v18 = *(_QWORD *)(v4[6] + 8 * *(_QWORD *)(a1 + 40));
          v19 = v4[11];
          v20 = v4[12];
          if (v19 >= v20)
          {
            v21 = v4[10];
            v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v21) >> 3);
            v23 = v22 + 1;
            if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v21) >> 3);
            if (2 * v24 > v23)
              v23 = 2 * v24;
            if (v24 >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v23;
            if (v25)
              v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v25);
            else
              v26 = 0;
            v33 = v25 + 24 * v22;
            *(_BYTE *)(v33 + 4) = 0;
            *(_DWORD *)v33 = v17;
            *(_WORD *)(v33 + 5) = 0;
            *(_BYTE *)(v33 + 7) = 0;
            *(_QWORD *)(v33 + 8) = v18;
            *(_QWORD *)(v33 + 16) = v11;
            v38 = (char *)v4[10];
            v34 = (char *)v4[11];
            v36 = v33;
            if (v34 == v38)
              goto LABEL_36;
            do
            {
              v39 = *(_OWORD *)(v34 - 24);
              *(_QWORD *)(v36 - 8) = *((_QWORD *)v34 - 1);
              *(_OWORD *)(v36 - 24) = v39;
              v36 -= 24;
              v34 -= 24;
            }
            while (v34 != v38);
LABEL_35:
            v34 = (char *)v4[10];
LABEL_36:
            v28 = v33 + 24;
            v4[10] = v36;
            v4[11] = v33 + 24;
            v4[12] = v25 + 24 * v26;
            if (v34)
              operator delete(v34);
            goto LABEL_38;
          }
        }
        else
        {
          v17 = v42 | (v9 << 15) | 0x202;
          v18 = *(_QWORD *)(v4[6] + 8 * *(_QWORD *)(a1 + 40));
          v19 = v4[11];
          v27 = v4[12];
          if (v19 >= v27)
          {
            v29 = v4[10];
            v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v29) >> 3);
            v31 = v30 + 1;
            if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v29) >> 3);
            if (2 * v32 > v31)
              v31 = 2 * v32;
            if (v32 >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v31;
            if (v25)
              v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v25);
            else
              v26 = 0;
            v33 = v25 + 24 * v30;
            *(_BYTE *)(v33 + 4) = 0;
            *(_DWORD *)v33 = v17;
            *(_WORD *)(v33 + 5) = 0;
            *(_BYTE *)(v33 + 7) = 0;
            *(_QWORD *)(v33 + 8) = v18;
            *(_QWORD *)(v33 + 16) = v11;
            v35 = (char *)v4[10];
            v34 = (char *)v4[11];
            v36 = v33;
            if (v34 == v35)
              goto LABEL_36;
            do
            {
              v37 = *(_OWORD *)(v34 - 24);
              *(_QWORD *)(v36 - 8) = *((_QWORD *)v34 - 1);
              *(_OWORD *)(v36 - 24) = v37;
              v36 -= 24;
              v34 -= 24;
            }
            while (v34 != v35);
            goto LABEL_35;
          }
        }
        *(_BYTE *)(v19 + 4) = 0;
        *(_DWORD *)v19 = v17;
        *(_WORD *)(v19 + 5) = 0;
        *(_BYTE *)(v19 + 7) = 0;
        v28 = v19 + 24;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(v19 + 16) = v11;
LABEL_38:
        v4[11] = v28;
LABEL_39:

        goto LABEL_40;
      }
    }
    else
    {
      IOReportChannelGetUnit(a2);
      UnitLabel = IOReportChannelGetUnitLabel(a2);

    }
  }
  return 16;
}

void sub_2393FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN16GTPerfStateGroup20StartCollectingStatsEy_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t IntegerValue;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD **)(a1 + 32);
  IntegerValue = IOReportSimpleGetIntegerValue(a2, 0);
  v4 = IntegerValue;
  v6 = (uint64_t *)v2[15];
  v5 = v2[16];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (uint64_t *)v2[14];
    v9 = v6 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
    v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v13);
      v8 = (uint64_t *)v2[14];
      v6 = (uint64_t *)v2[15];
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)(v13 + 8 * v9);
    v16 = v13 + 8 * v14;
    *v15 = v4;
    v7 = v15 + 1;
    while (v6 != v8)
    {
      v17 = *--v6;
      *--v15 = v17;
    }
    v2[14] = v15;
    v2[15] = v7;
    v2[16] = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = IntegerValue;
    v7 = v6 + 1;
  }
  v2[15] = v7;
}

void ___ZN16GTPerfStateGroup20StartCollectingStatsEy_block_invoke_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t Samples;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  _BYTE *v39;
  char *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  int64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  id v63;
  id v64;
  _QWORD v65[6];
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;

  v1 = a1[5];
  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = *(unsigned int *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 1;
  if (a1[6] > v3)
  {
    if ((*(_DWORD *)(v1 + 76) - 1) > 1)
    {
      if (IOReportUpdateSamples(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 16), 0))
      {
        v66 = 0;
        v67 = &v66;
        v68 = 0x2020000000;
        v69 = 0;
        v10 = mach_absolute_time();
        v11 = v10;
        v13 = *(char **)(v1 + 56);
        v12 = *(_QWORD *)(v1 + 64);
        if ((unint64_t)v13 >= v12)
        {
          v22 = *(char **)(v1 + 48);
          v23 = (v13 - v22) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            abort();
          v25 = v12 - (_QWORD)v22;
          if (v25 >> 2 > v24)
            v24 = v25 >> 2;
          v19 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8;
          v26 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v19)
            v26 = v24;
          if (v26)
          {
            v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v26);
            v22 = *(char **)(v1 + 48);
            v13 = *(char **)(v1 + 56);
          }
          else
          {
            v27 = 0;
          }
          v31 = (uint64_t *)(v26 + 8 * v23);
          v32 = v26 + 8 * v27;
          *v31 = v11;
          v14 = v31 + 1;
          while (v13 != v22)
          {
            v33 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v31 = v33;
          }
          *(_QWORD *)(v1 + 48) = v31;
          *(_QWORD *)(v1 + 56) = v14;
          *(_QWORD *)(v1 + 64) = v32;
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_QWORD *)v13 = v10;
          v14 = v13 + 8;
        }
        *(_QWORD *)(v1 + 56) = v14;
        v34 = *(_QWORD *)(v1 + 48);
        v35 = *(_QWORD *)(v1 + 104);
        v65[0] = _NSConcreteStackBlock;
        v65[1] = 3221225472;
        v65[2] = ___ZN16GTPerfStateGroup17AddPeriodicSampleEv_block_invoke;
        v65[3] = &unk_725788;
        v65[4] = &v66;
        v65[5] = v1;
        IOReportIterate(v35, v65);
        v36 = ((uint64_t)v14 - v34) >> 3;
        v37 = v67;
        v38 = *((_DWORD *)v67 + 6);
        v39 = *(_BYTE **)(v1 + 112);
        v40 = *(char **)(v1 + 120);
        v41 = (v40 - v39) >> 3;
        if (v41 < v38)
        {
          v47 = v38;
          v48 = (char *)(*(_QWORD *)(v1 + 48) + 8 * v36);
          v49 = *(_QWORD *)(v1 + 128);
          v64 = (id)v36;
          if (v38 <= (unint64_t)((v49 - (uint64_t)v39) >> 3))
          {
            v55 = &v48[8 * v38];
            v60 = (v40 - v39) >> 3;
            v62 = &v48[8 * v41];
            if (v40 != v39)
            {
              memmove(v39, v48, v40 - v39);
              v39 = *(_BYTE **)(v1 + 120);
              v40 = v39;
            }
            v56 = v39;
            if (v62 != v55)
            {
              v57 = v62;
              v58 = 8 * v47 - 8 * v60;
              v56 = v40;
              do
              {
                v59 = *(_QWORD *)v57;
                v57 += 8;
                *(_QWORD *)v56 = v59;
                v56 += 8;
                v58 -= 8;
              }
              while (v58);
            }
            v54 = v56 - v39;
          }
          else
          {
            v50 = *((_DWORD *)v67 + 6);
            v61 = (_QWORD *)(v1 + 112);
            if (v39)
            {
              *(_QWORD *)(v1 + 120) = v39;
              operator delete(v39);
              v49 = 0;
              *v61 = 0;
              *(_QWORD *)(v1 + 120) = 0;
              *(_QWORD *)(v1 + 128) = 0;
            }
            if (v50 < 0)
              abort();
            v51 = v49 >> 2;
            if (v49 >> 2 <= v47)
              v51 = v47;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](v61, v52);
            v53 = 0;
            v40 = *(char **)(v1 + 120);
            do
            {
              *(_QWORD *)&v40[v53] = *(_QWORD *)&v48[v53];
              v53 += 8;
            }
            while (8 * v47 != v53);
            v54 = v53;
          }
          v36 = (uint64_t)v64;
          *(_QWORD *)(v1 + 120) = &v40[v54];
          v37 = v67;
          v38 = *((_DWORD *)v67 + 6);
        }
        v42 = v38 - 1;
        *((_DWORD *)v37 + 6) = v38 - 1;
        if (v38)
        {
          v43 = *(_QWORD *)(v1 + 48);
          v44 = *(_QWORD *)(v1 + 112);
          do
          {
            v45 = v36 + v42;
            v46 = *(_QWORD *)(v43 + 8 * v45);
            *(_QWORD *)(v43 + 8 * v45) = v46 - *(_QWORD *)(v44 + 8 * v42);
            *(_QWORD *)(v44 + 8 * *((int *)v67 + 6)) = v46;
            LODWORD(v46) = *((_DWORD *)v67 + 6);
            v42 = v46 - 1;
            *((_DWORD *)v67 + 6) = v46 - 1;
          }
          while ((_DWORD)v46);
        }
        _Block_object_dispose(&v66, 8);
      }
    }
    else
    {
      Samples = IOReportCreateSamples(*(_QWORD *)(v1 + 16), a1[7], 0);
      if (Samples)
      {
        v63 = (id)Samples;
        v5 = mach_absolute_time();
        v6 = v5;
        v8 = *(char **)(v1 + 56);
        v7 = *(_QWORD *)(v1 + 64);
        if ((unint64_t)v8 >= v7)
        {
          v15 = *(char **)(v1 + 48);
          v16 = (v8 - v15) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            abort();
          v18 = v7 - (_QWORD)v15;
          if (v18 >> 2 > v17)
            v17 = v18 >> 2;
          v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8;
          v20 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v19)
            v20 = v17;
          if (v20)
          {
            v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v20);
            v15 = *(char **)(v1 + 48);
            v8 = *(char **)(v1 + 56);
          }
          else
          {
            v21 = 0;
          }
          v28 = (uint64_t *)(v20 + 8 * v16);
          v29 = v20 + 8 * v21;
          *v28 = v6;
          v9 = v28 + 1;
          while (v8 != v15)
          {
            v30 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *--v28 = v30;
          }
          *(_QWORD *)(v1 + 48) = v28;
          *(_QWORD *)(v1 + 56) = v9;
          *(_QWORD *)(v1 + 64) = v29;
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v5;
          v9 = v8 + 8;
        }
        *(_QWORD *)(v1 + 56) = v9;
        objc_msgSend(*(id *)(v1 + 40), "addObject:", v63);

      }
    }
  }
}

void sub_239904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v12;

  _Block_object_dispose((const void *)(v12 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN16GTPerfStateGroup17AddPeriodicSampleEv_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t IntegerValue;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD **)(a1 + 40);
  IntegerValue = IOReportSimpleGetIntegerValue(a2, 0);
  v5 = IntegerValue;
  v7 = (uint64_t *)v3[7];
  v6 = v3[8];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (uint64_t *)v3[6];
    v10 = v7 - v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
    v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v14);
      v9 = (uint64_t *)v3[6];
      v7 = (uint64_t *)v3[7];
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)(v14 + 8 * v10);
    v17 = v14 + 8 * v15;
    *v16 = v5;
    v8 = v16 + 1;
    while (v7 != v9)
    {
      v18 = *--v7;
      *--v16 = v18;
    }
    v3[6] = v16;
    v3[7] = v8;
    v3[8] = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = IntegerValue;
    v8 = v7 + 1;
  }
  v3[7] = v8;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t std::vector<GTPerfStateGroup>::__emplace_back_slow_path<NSString * {__strong},NSDictionary * {__strong},GTPerfStateGroup::eGTPerfStateGroup,GTPerfStateGroup::eGTPerfStateGroupType>(_QWORD *a1, void *a2, void *a3, int a4, int a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v12;
  char *v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  _QWORD v19[5];

  v5 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x1AF286BCA1AF286)
    abort();
  if (0xD79435E50D79436 * ((uint64_t)(a1[2] - *a1) >> 3) > v6)
    v6 = 0xD79435E50D79436 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0xD79435E50D7943)
    v12 = 0x1AF286BCA1AF286;
  else
    v12 = v6;
  v19[4] = a1 + 2;
  if (v12)
  {
    if (v12 > 0x1AF286BCA1AF286)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = (char *)operator new(152 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[152 * v5];
  v19[0] = v13;
  v19[1] = v14;
  v19[3] = &v13[152 * v12];
  v15 = a2;
  v16 = a3;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 3) = v15;
  *((_QWORD *)v14 + 4) = v16;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *((_DWORD *)v14 + 18) = a4;
  *((_DWORD *)v14 + 19) = a5;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 10) = 0;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *(_QWORD *)(v14 + 141) = 0;
  v19[2] = v14 + 152;
  std::vector<GTPerfStateGroup>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<GTPerfStateGroup>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_239B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<GTPerfStateGroup>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16GTPerfStateGroup5SetupEP14__CFDictionary_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Group;
  uint64_t SubGroup;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t ChannelName;
  void *v12;
  int v13;
  id v14;
  uint64_t v15;
  void *j;
  id v17;
  uint64_t v18;
  void *i;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id obj;
  void *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[128];

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  Group = IOReportChannelGetGroup(a2);
  v34 = (void *)objc_claimAutoreleasedReturnValue(Group);
  if ((objc_msgSend(*(id *)(v3 + 24), "isEqualToString:", v34) & 1) == 0)
  {
    v26 = 16;
    goto LABEL_48;
  }
  SubGroup = IOReportChannelGetSubGroup(v2);
  v35 = (void *)objc_claimAutoreleasedReturnValue(SubGroup);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "allKeys"));
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
  if (!v6)
  {
    v26 = 16;
    goto LABEL_47;
  }
  v7 = *(_QWORD *)v45;
  v29 = v3;
  v30 = v2;
  v28 = *(_QWORD *)v45;
  while (2)
  {
    v8 = 0;
    v31 = v6;
    do
    {
      if (*(_QWORD *)v45 != v7)
        objc_enumerationMutation(obj);
      v9 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v8);
      if (objc_msgSend(v35, "hasPrefix:", v9, v28, v29, v30))
      {
        v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 32), "objectForKeyedSubscript:", v9));
        if (v10)
        {
          ChannelName = IOReportChannelGetChannelName(v2);
          v12 = (void *)objc_claimAutoreleasedReturnValue(ChannelName);
          v13 = *(_DWORD *)(v3 + 76);
          if (v13)
          {
            if (v13 != 2)
            {
              if (v13 == 1 && (objc_msgSend(v10, "containsObject:", v12) & 1) != 0)
              {
LABEL_45:

                v26 = 0;
                goto LABEL_47;
              }
              goto LABEL_39;
            }
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v32 = v10;
            v10 = v10;
            v17 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
            if (v17)
            {
              v18 = *(_QWORD *)v41;
              do
              {
                for (i = 0; i != v17; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v41 != v18)
                    objc_enumerationMutation(v10);
                  v20 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
                  if ((objc_msgSend(v12, "containsString:", CFSTR("_1_")) & 1) == 0)
                  {
                    v22 = objc_msgSend(v12, "rangeOfString:", v20);
                    if (v22 != (_BYTE *)0x7FFFFFFFFFFFFFFFLL)
                    {
                      v24 = objc_msgSend(v12, "rangeOfString:options:range:", CFSTR("_"), 0, &v22[v21], (_BYTE *)objc_msgSend(v12, "length") - &v22[v21]);
                      if (v24 != (_BYTE *)0x7FFFFFFFFFFFFFFFLL)
                      {
                        v25 = (char *)((_BYTE *)objc_msgSend(v12, "length") - &v24[v23]);
                        if (v25 == (char *)&dword_4)
                        {
                          if (objc_msgSend(v12, "characterAtIndex:", (char *)objc_msgSend(v12, "length") - 4) == 86)goto LABEL_44;
                        }
                        else if (v25 == (_BYTE *)&dword_0 + 2
                               && objc_msgSend(v12, "characterAtIndex:", (char *)objc_msgSend(v12, "length") - 2) == 70)
                        {
                          goto LABEL_44;
                        }
                      }
                    }
                  }
                }
                v17 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
              }
              while (v17);
            }
          }
          else
          {
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v32 = v10;
            v10 = v10;
            v14 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v48, 16);
            if (v14)
            {
              v15 = *(_QWORD *)v37;
              while (2)
              {
                for (j = 0; j != v14; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v37 != v15)
                    objc_enumerationMutation(v10);
                  if ((objc_msgSend(v12, "containsString:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)j)) & 1) != 0)
                  {
LABEL_44:

                    goto LABEL_45;
                  }
                }
                v14 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v48, 16);
                if (v14)
                  continue;
                break;
              }
            }
          }
          v10 = v32;

          v3 = v29;
          v2 = v30;
          v7 = v28;
          v6 = v31;
LABEL_39:

        }
      }
      v8 = (char *)v8 + 1;
    }
    while (v8 != v6);
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
    v26 = 16;
    if (v6)
      continue;
    break;
  }
LABEL_47:

LABEL_48:
  return v26;
}

void sub_239F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN16GTPerfStateGroup27_FindSubscribedCounterNamesEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ChannelName;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = *(_QWORD *)(a1 + 40);
  ChannelName = IOReportChannelGetChannelName(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(ChannelName);
  v6 = (char *)objc_msgSend(v5, "rangeOfString:", CFSTR("_0_"));
  if (v6 != (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringFromIndex:", &v6[v7]));

    v5 = (void *)v8;
  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = *(id *)(a1 + 32);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v19;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v9);
        v13 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v5, "hasSuffix:", v13, (_QWORD)v18))
        {
          v14 = (char *)objc_msgSend(v5, "length");
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v13));
          v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByReplacingCharactersInRange:withString:", v14 - 4, 4, v15));

          v5 = (void *)v16;
          goto LABEL_13;
        }
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_13:

  objc_msgSend(*(id *)(v3 + 136), "addObject:", v5);
  return 0;
}

void sub_23A1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<GTPerfStateGroup>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = result[1];
  v3 = a2[1];
  v28 = *result;
  if (v2 != *result)
  {
    v26 = result;
    v27 = a2;
    v4 = 0;
    v29 = result[1];
    do
    {
      v5 = v3 + v4;
      *(_QWORD *)(v5 - 152) = *(id *)(v2 + v4 - 152);
      v6 = *(id *)(v2 + v4 - 144);
      v7 = *(_QWORD *)(v2 + v4 - 136);
      v8 = *(void **)(v2 + v4 - 128);
      *(_QWORD *)(v5 - 144) = v6;
      *(_QWORD *)(v5 - 136) = v7;
      *(_QWORD *)(v5 - 128) = v8;
      *(_QWORD *)(v5 - 120) = *(id *)(v2 + v4 - 120);
      *(_QWORD *)(v5 - 112) = *(id *)(v2 + v4 - 112);
      std::vector<unsigned long long>::vector((_QWORD *)(v3 + v4 - 104), v2 + v4 - 104);
      v9 = *(_QWORD *)(v2 + v4 - 80);
      *(_QWORD *)(v5 - 72) = 0;
      v10 = v3 + v4 - 72;
      *(_QWORD *)(v5 - 80) = v9;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      v12 = *(_BYTE **)(v2 + v4 - 72);
      v11 = *(_BYTE **)(v2 + v4 - 64);
      v13 = v11 - v12;
      if (v11 != v12)
      {
        std::vector<AccelerationStructureViewer::FilterToken>::__vallocate[abi:nn180100]((_QWORD *)(v5 - 72), 0xAAAAAAAAAAAAAAABLL * (v13 >> 3));
        v14 = *(char **)(v3 + v4 - 64);
        memmove(v14, v12, v13);
        *(_QWORD *)(v3 + v4 - 64) = &v14[8 * (v13 >> 3)];
        v2 = v29;
      }
      v15 = v3 + v4;
      v16 = v2 + v4;
      v17 = *(_QWORD *)(v2 + v4 - 48);
      *(_QWORD *)(v3 + v4 - 40) = 0;
      v18 = (_QWORD *)(v3 + v4 - 40);
      *(v18 - 1) = v17;
      v18[1] = 0;
      v18[2] = 0;
      v20 = *(_BYTE **)(v2 + v4 - 40);
      v19 = *(_BYTE **)(v2 + v4 - 32);
      v21 = v19 - v20;
      if (v19 != v20)
      {
        std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](v18, v21 >> 3);
        v22 = *(char **)(v3 + v4 - 32);
        memmove(v22, v20, v21);
        *(_QWORD *)(v3 + v4 - 32) = &v22[8 * (v21 >> 3)];
        v2 = v29;
      }
      *(_QWORD *)(v15 - 16) = *(id *)(v16 - 16);
      *(_QWORD *)(v15 - 8) = *(_QWORD *)(v16 - 8);
      v4 -= 152;
    }
    while (v2 + v4 != v28);
    v3 += v4;
    result = v26;
    a2 = v27;
  }
  a2[1] = v3;
  v23 = *result;
  *result = v3;
  a2[1] = v23;
  v24 = result[1];
  result[1] = a2[2];
  a2[2] = v24;
  v25 = result[2];
  result[2] = a2[3];
  a2[3] = v25;
  *a2 = a2[1];
  return result;
}

void sub_23A3C8(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 - 64) = v5;
    operator delete(v5);
  }
  v6 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v3 - 96) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<GTPerfStateGroup>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    GTPerfStateGroup::~GTPerfStateGroup((GTPerfStateGroup *)(i - 152));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23A530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void GTMTLReplayController_initializeArgumentBufferSupport(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  BOOL v20;
  _QWORD *v21;
  apr_allocator_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id MTLHeapDescriptor;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  apr_hash_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *entry;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  const char *v48;
  uint64_t v49;
  int v50;
  uint64_t i;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  uint64_t *v59;
  uint64_t v60;
  apr_allocator_t *v61;
  uint64_t v62;
  apr_pool_t *v63;
  apr_array_header_t *v64;
  apr_array_header_t *v65;
  char v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void *v75;
  uint64_t j;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  uint64_t k;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void *v91;
  uint64_t m;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  void *v97;
  uint64_t n;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  void *v103;
  uint64_t ii;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(void);
  id (*v111)(uint64_t);
  void *v112;
  uint64_t (*v113)(void);
  uint64_t (*v114)(void);
  uint64_t (*v115)(void);
  id (*v116)(_QWORD *);
  id (*v117)(uint64_t);
  id v118;
  id v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t jj;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  id v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  void *v139;
  apr_pool_t *p;
  id v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  id v145;
  _QWORD *v146;
  id v147;
  apr_pool_t *newpool[2];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  char v181;
  apr_pool_t *v182;

  v5 = a2;
  v145 = a3;
  v6 = GTMTLSMContext_getObject(**(_QWORD **)(a1 + 40), 1, *(_QWORD *)(a1 + 80))[5];
  if ((dword_75313C & 0x10000) != 0)
  {
    if ((GT_SUPPORT_0 & 0x80000) != 0)
      v7 = (*(_DWORD *)(a1 + 272) << 18) & 0x80000;
    else
      v7 = 0;
    GT_SUPPORT_0 = v7 | GT_SUPPORT_0 & 0xFFFFFFFFFFF7FFFFLL;
  }
  if (*(_BYTE *)(v6 + 110))
  {
    v8 = 0x80000;
    if ((((*(_BYTE *)(v6 + 24) & 8) == 0) & (GT_SUPPORT_0 >> 19)) == 0)
      v8 = 0;
    v9 = v8 | GT_SUPPORT_0 & 0xFFFFFFFFFFF7FFFFLL;
  }
  else
  {
    v9 = GT_SUPPORT_0 & 0xFFFFFFFFFFF7FFFFLL;
  }
  v20 = ((*(_QWORD *)(v6 + 32) >> 8) & 1 & (v9 >> 20)) == 0;
  v10 = 0x100000;
  if (v20)
    v10 = 0;
  GT_SUPPORT_0 = v10 | v9 & 0xFFFFFFFFFFEFFFFFLL;
  if ((v9 & 0x80000) != 0)
  {
    v141 = v5;
    v11 = v5;
    v12 = v145;
    v13 = *(_QWORD *)(a1 + 192);
    v14 = *(_DWORD *)(v13 + 12);
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = GT_SUPPORT_0;
      do
      {
        v17 = *(_QWORD *)(v13 + 24);
        v18 = *(int **)(v17 + 8 * v15);
        v19 = *v18;
        v20 = *v18 == 50 || v19 == 22;
        if (v20 || v19 == 16 && (v16 & 0x100000) == 0)
        {
          *(_DWORD *)(v13 + 12) = --v14;
          *(_QWORD *)(v17 + 8 * v15) = *(_QWORD *)(v17 + 8 * v14);
          *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * v14) = v18;
        }
        else
        {
          ++v15;
        }
      }
      while (v15 < v14);
    }
    v143 = a1;
    v21 = *(_QWORD **)(a1 + 40);
    v23 = v11;
    v146 = v21;
    v24 = v21[10];
    if (*(int *)(v24 + 12) >= 1)
    {
      v25 = 0;
      while (1)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8 * v25);
        v27 = *(_QWORD **)(v26 + 48);
        MTLHeapDescriptor = MakeMTLHeapDescriptor((uint64_t)v27);
        v29 = (void *)objc_claimAutoreleasedReturnValue(MTLHeapDescriptor);
        objc_msgSend(v29, "setPinnedGPUAddress:", *v27);
        v30 = objc_msgSend(v29, "size");
        v31 = (id)*(unsigned int *)(v26 + 76);
        if (v30 >= v31)
          v31 = objc_msgSend(v29, "size");
        objc_msgSend(v29, "setSize:", v31);
        v32 = (char *)objc_msgSend(v29, "type");
        if ((unint64_t)v32 < 2)
          break;
        if (v32 != (_BYTE *)&dword_0 + 2)
          goto LABEL_34;
LABEL_38:

        if (++v25 >= *(int *)(v24 + 12))
          goto LABEL_39;
      }
      objc_msgSend(v29, "setType:", 1);
LABEL_34:
      v33 = objc_msgSend(v23, "newHeapWithDescriptor:", v29);
      if (v33)
        objc_msgSend(v12, "setHeap:forKey:", v33, *(_QWORD *)(v26 + 8));
      else
        GTMTLReplay_handleError(101, (uint64_t)"Heap creation failed", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m", (uint64_t)"GTMTLReplayController_allocateBuffersAndHeaps", 177, 1);

      goto LABEL_38;
    }
LABEL_39:
    newpool[0] = 0;
    apr_pool_create_ex(newpool, 0, 0, v22);
    p = newpool[0];
    v34 = apr_hash_make(newpool[0]);
    v35 = v146[1];
    v36 = objc_alloc_init((Class)MTLBufferDescriptor);
    if (*(int *)(v35 + 12) >= 1)
    {
      v37 = 0;
      do
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v35 + 24) + 8 * v37);
        if ((dword_75313C & 0x200000) != 0
          && *(_QWORD *)(v38 + 144)
          && (entry = find_entry((uint64_t)v34, (_BYTE *)(v38 + 112), 8uLL, 0), *entry)
          && (v40 = *(_QWORD *)(*entry + 32)) != 0)
        {
          v41 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bufferForKey:", *(_QWORD *)(v40 + 8)));
        }
        else
        {
          v41 = 0;
        }
        if (!*(_QWORD *)(v38 + 48))
        {
          if (v41
            || (objc_msgSend(v36, "setPinnedGPUAddress:", *(_QWORD *)(v38 + 112)),
                objc_msgSend(v36, "setParentGPUAddress:", *(_QWORD *)(v38 + 128)),
                objc_msgSend(v36, "setParentGPUSize:", *(_QWORD *)(v38 + 136)),
                objc_msgSend(v36, "setResourceOptions:", *(unsigned __int16 *)(v38 + 96)),
                objc_msgSend(v36, "setLength:", *(_QWORD *)(v38 + 104)),
                (v41 = objc_msgSend(v23, "newBufferWithDescriptor:", v36)) != 0))
          {
            objc_msgSend(v12, "setBuffer:forKey:", v41, *(_QWORD *)(v38 + 8));
            if ((dword_75313C & 0x200000) != 0 && *(_QWORD *)(v38 + 144))
              apr_hash_set(v34, (const void *)(v38 + 112), 8, (const void *)v38);
          }
          else
          {
            GTMTLReplay_handleError(101, (uint64_t)"Buffer creation failed", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m", (uint64_t)"GTMTLReplayController_allocateBuffersAndHeaps", 232, 1);
          }
        }

        ++v37;
      }
      while (v37 < *(int *)(v35 + 12));
    }
    apr_pool_destroy(p);
    v42 = v146[9];
    if (*(int *)(v42 + 12) >= 1)
    {
      v43 = 0;
      while (1)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 8 * v43);
        if (*(_QWORD *)(v44 + 144)
          || *(_QWORD *)(v44 + 48)
          || (GT_SUPPORT_0 & 0x100000) != 0 && *(_QWORD *)(v44 + 152)
          || !*(_QWORD *)(v44 + 160))
        {
          goto LABEL_59;
        }
        objc_msgSend(v36, "setPinnedGPUAddress:");
        objc_msgSend(v36, "setParentGPUAddress:", *(_QWORD *)(v44 + 168));
        objc_msgSend(v36, "setParentGPUSize:", *(_QWORD *)(v44 + 176));
        objc_msgSend(v36, "setResourceOptions:", *(unsigned __int16 *)(v44 + 96));
        objc_msgSend(v36, "setLength:", *(_QWORD *)(v44 + 192));
        v45 = objc_msgSend(v23, "newBufferWithDescriptor:", v36);
        if (!v45)
          break;
        v46 = v45;
        v47 = objc_msgSend(v23, "newAccelerationStructureWithBuffer:offset:", v45, *(_QWORD *)(v44 + 200));

        if (!v47)
        {
          v48 = "Acceleration structure creation failed";
          v49 = 287;
          goto LABEL_69;
        }
        objc_msgSend(v12, "setAccelerationStructure:forKey:", v47, *(_QWORD *)(v44 + 8));

LABEL_59:
        if (++v43 >= *(int *)(v42 + 12))
          goto LABEL_70;
      }
      v48 = "Acceleration structure buffer creation failed";
      v49 = 270;
LABEL_69:
      GTMTLReplay_handleError(101, (uint64_t)v48, "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m", (uint64_t)"GTMTLReplayController_allocateBuffersAndHeaps", v49, 1);
      goto LABEL_59;
    }
LABEL_70:
    v50 = *(_DWORD *)(v24 + 12);
    if (v50 >= 1)
    {
      for (i = 0; i < v50; ++i)
      {
        v52 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8 * i);
        v53 = *(_QWORD *)(v52 + 48);
        if (*(_BYTE *)(v53 + 19) == 2)
        {
          v54 = MakeMTLHeapDescriptor(v53);
          v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
          v56 = objc_msgSend(v55, "size");
          v57 = (id)*(unsigned int *)(v52 + 76);
          if (v56 >= v57)
            v57 = objc_msgSend(v55, "size");
          objc_msgSend(v55, "setSize:", v57);
          v58 = objc_msgSend(v23, "newHeapWithDescriptor:", v55);
          if (v58)
            objc_msgSend(v12, "setHeap:forKey:", v58, *(_QWORD *)(v52 + 8));
          else
            GTMTLReplay_handleError(101, (uint64_t)"Sparse heap creation failed", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m", (uint64_t)"GTMTLReplayController_allocateBuffersAndHeaps", 309, 1);

          v50 = *(_DWORD *)(v24 + 12);
        }
      }
    }

    v5 = v141;
    a1 = v143;
  }
  v147 = v5;

  v59 = *(uint64_t **)(a1 + 40);
  v60 = initializeResourcePatchingTypes(v147, (_BYTE *)&dword_0 + 1);
  g_forcePatchingTypeReplaceMask = 0;
  v62 = v60 & ~qword_753128;
  if (v62 && (*(_BYTE *)(a1 + 272) & 2) == 0)
    v62 = 0;
  g_enableIndexedResourceType = v62;
  v182 = 0;
  apr_pool_create_ex(&v182, 0, 0, v61);
  v63 = v182;
  v64 = apr_array_make(v182, 128, 8);
  v65 = v64;
  v66 = g_enableIndexedResourceType;
  if ((g_enableIndexedResourceType & 1) == 0)
  {
    if ((g_enableIndexedResourceType & 2) == 0)
      goto LABEL_86;
    goto LABEL_101;
  }
  v64->nelts = 0;
  v67 = v59[2];
  v68 = *(_DWORD *)(v67 + 12);
  if (v68 >= 1)
  {
    v69 = 0;
    while (1)
    {
      v70 = *(_QWORD *)(*(_QWORD *)(v67 + 24) + 8 * v69);
      v71 = *(_QWORD *)(v70 + 104);
      if (!v71)
        break;
      v72 = *(_QWORD *)(v71 + 8);
      if (v72)
        goto LABEL_95;
LABEL_96:
      if (++v69 >= v68)
        goto LABEL_100;
    }
    v72 = *(_QWORD *)(v70 + 176);
    if (!v72)
      goto LABEL_96;
LABEL_95:
    *(_QWORD *)apr_array_push(v65) = v72;
    v68 = *(_DWORD *)(v67 + 12);
    goto LABEL_96;
  }
LABEL_100:
  ReserveResourceIndices(v147, (uint64_t)v65, 0);
  v66 = g_enableIndexedResourceType;
  if ((g_enableIndexedResourceType & 2) == 0)
  {
LABEL_86:
    if ((v66 & 0x10) == 0)
      goto LABEL_87;
    goto LABEL_110;
  }
LABEL_101:
  v65->nelts = 0;
  v73 = v59[3];
  v74 = *(_DWORD *)(v73 + 12);
  v75 = v147;
  if (v74 >= 1)
  {
    for (j = 0; j < v74; ++j)
    {
      v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 24) + 8 * j) + 48);
      if (v77)
      {
        if (*(_BYTE *)(v77 + 62))
        {
          v78 = *(_QWORD *)(v77 + 16);
          v75 = v147;
          if (v78)
          {
            v79 = apr_array_push(v65);
            v75 = v147;
            *v79 = v78;
            v74 = *(_DWORD *)(v73 + 12);
          }
        }
        else
        {
          v75 = v147;
        }
      }
    }
  }
  ReserveResourceIndices(v75, (uint64_t)v65, 1u);
  v66 = g_enableIndexedResourceType;
  if ((g_enableIndexedResourceType & 0x10) == 0)
  {
LABEL_87:
    if ((v66 & 0x20) == 0)
      goto LABEL_88;
    goto LABEL_124;
  }
LABEL_110:
  v65->nelts = 0;
  v80 = v59[4];
  v81 = *(_DWORD *)(v80 + 12);
  if (v81 >= 1)
  {
    for (k = 0; k < v81; ++k)
    {
      v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 24) + 8 * k) + 48);
      if (v83)
      {
        if (*(_BYTE *)(v83 + 1499))
        {
          v84 = *(_QWORD *)(v83 + 1280);
          if (v84)
          {
            *(_QWORD *)apr_array_push(v65) = v84;
            v81 = *(_DWORD *)(v80 + 12);
          }
        }
      }
    }
  }
  v85 = v59[5];
  if (*(int *)(v85 + 12) >= 1)
  {
    v86 = 0;
    do
    {
      v87 = *(_QWORD *)(*(_QWORD *)(v85 + 24) + 8 * v86);
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v159 = 0u;
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      *(_OWORD *)newpool = 0u;
      v149 = 0u;
      GTMTLSMComputePipelineState_computePipelineDescriptor(v59, v87, newpool, v63);
      if (v181)
      {
        v88 = v180;
        if (v180)
          *(_QWORD *)apr_array_push(v65) = v88;
      }
      ++v86;
    }
    while (v86 < *(int *)(v85 + 12));
  }
  ReserveResourceIndices(v147, (uint64_t)v65, 4u);
  v66 = g_enableIndexedResourceType;
  if ((g_enableIndexedResourceType & 0x20) == 0)
  {
LABEL_88:
    if ((v66 & 0x40) == 0)
      goto LABEL_89;
    goto LABEL_130;
  }
LABEL_124:
  v65->nelts = 0;
  v89 = v59[6];
  v90 = *(_DWORD *)(v89 + 12);
  v91 = v147;
  if (v90 >= 1)
  {
    for (m = 0; m < v90; ++m)
    {
      v93 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v89 + 24) + 8 * m) + 104);
      if (v93)
      {
        v94 = apr_array_push(v65);
        v91 = v147;
        *v94 = v93;
        v90 = *(_DWORD *)(v89 + 12);
      }
    }
  }
  ReserveResourceIndices(v91, (uint64_t)v65, 5u);
  v66 = g_enableIndexedResourceType;
  if ((g_enableIndexedResourceType & 0x40) == 0)
  {
LABEL_89:
    if ((v66 & 0x80) == 0)
      goto LABEL_142;
    goto LABEL_136;
  }
LABEL_130:
  v65->nelts = 0;
  v95 = v59[7];
  v96 = *(_DWORD *)(v95 + 12);
  v97 = v147;
  if (v96 >= 1)
  {
    for (n = 0; n < v96; ++n)
    {
      v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 24) + 8 * n) + 104) + 8);
      if (v99)
      {
        v100 = apr_array_push(v65);
        v97 = v147;
        *v100 = v99;
        v96 = *(_DWORD *)(v95 + 12);
      }
    }
  }
  ReserveResourceIndices(v97, (uint64_t)v65, 6u);
  if ((g_enableIndexedResourceType & 0x80) != 0)
  {
LABEL_136:
    v65->nelts = 0;
    v101 = v59[8];
    v102 = *(_DWORD *)(v101 + 12);
    v103 = v147;
    if (v102 >= 1)
    {
      for (ii = 0; ii < v102; ++ii)
      {
        v105 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * ii) + 104);
        if (v105)
        {
          v106 = apr_array_push(v65);
          v103 = v147;
          *v106 = v105;
          v102 = *(_DWORD *)(v101 + 12);
        }
      }
    }
    ReserveResourceIndices(v103, (uint64_t)v65, 7u);
  }
LABEL_142:
  if ((GT_SUPPORT_0 & 0x100000) != 0 && (g_enableIndexedResourceType & 0x100) != 0)
  {
    v65->nelts = 0;
    v107 = v59[9];
    if (*(int *)(v107 + 12) >= 1)
    {
      v108 = 0;
      do
      {
        v109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 24) + 8 * v108) + 152);
        *(_QWORD *)apr_array_push(v65) = v109;
        ++v108;
      }
      while (v108 < *(int *)(v107 + 12));
    }
    ReserveResourceIndices(v147, (uint64_t)v65, 8u);
  }
  apr_pool_destroy(v63);
  v110 = (uint64_t (*)(void))MakeMTLTextureDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 1) == 0)
    v110 = (uint64_t (*)(void))MakeMTLTextureDescriptorWithoutResourceIndex;
  MakeMTLTextureDescriptor = v110;
  v111 = MakeMTLSamplerDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 2) == 0)
    v111 = MakeMTLSamplerDescriptorWithoutResourceIndex;
  MakeMTLSamplerDescriptor = v111;
  v112 = MakeMTLIndirectCommandBufferDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 0x20) == 0)
    v112 = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex;
  MakeMTLIndirectCommandBufferDescriptor = v112;
  v113 = (uint64_t (*)(void))MakeMTLRenderPipelineDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 0x10) == 0)
    v113 = (uint64_t (*)(void))MakeMTLRenderPipelineDescriptorWithoutResourceIndex;
  MakeMTLRenderPipelineDescriptor = v113;
  v114 = (uint64_t (*)(void))MakeMTLMeshRenderPipelineDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 0x10) == 0)
    v114 = (uint64_t (*)(void))MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex;
  MakeMTLMeshRenderPipelineDescriptor = v114;
  v115 = (uint64_t (*)(void))MakeMTLComputePipelineDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 0x10) == 0)
    v115 = (uint64_t (*)(void))MakeMTLComputePipelineDescriptorWithoutResourceIndex;
  MakeMTLComputePipelineDescriptor = v115;
  v116 = MakeMTLVisibleFunctionTableDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 0x40) == 0)
    v116 = MakeMTLVisibleFunctionTableDescriptorWithoutResourceIndex;
  MakeMTLVisibleFunctionTableDescriptor = v116;
  v117 = MakeMTLIntersectionFunctionTableDescriptorWithResourceIndex;
  if ((g_enableIndexedResourceType & 0x80) == 0)
    v117 = MakeMTLIntersectionFunctionTableDescriptorWithoutResourceIndex;
  MakeMTLIntersectionFunctionTableDescriptor = v117;

  if ((GT_SUPPORT_0 & 0x80000) != 0)
  {
    v118 = v147;
    v119 = v145;
    v120 = *(_QWORD *)(a1 + 40);
    v121 = v118;
    v142 = v120;
    v122 = *(_QWORD *)(v120 + 8);
    v144 = objc_alloc_init((Class)MTLBufferDescriptor);
    if (*(int *)(v122 + 12) >= 1)
    {
      v123 = 0;
      do
      {
        v124 = *(_QWORD *)(*(_QWORD *)(v122 + 24) + 8 * v123);
        if (*(_QWORD *)(v124 + 48))
        {
          v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "heapForKey:"));
          if (!v125)
            GTMTLReplay_handleError(101, (uint64_t)"Buffer creationg failed: heap is nil", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m", (uint64_t)"GTMTLReplayController_allocateHeapAndBufferChildren", 336, 1);
          v126 = objc_msgSend(v125, "newBufferWithLength:options:offset:", *(_QWORD *)(v124 + 104), *(unsigned __int16 *)(v124 + 96), *(unsigned int *)(v124 + 80));

          if (v126)
          {
            objc_msgSend(v119, "setBuffer:forKey:", v126, *(_QWORD *)(v124 + 8));

          }
          else
          {
            GTMTLReplay_handleError(101, (uint64_t)"Buffer freation Failed", "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m", (uint64_t)"GTMTLReplayController_allocateHeapAndBufferChildren", 351, 1);
          }
        }
        ++v123;
      }
      while (v123 < *(int *)(v122 + 12));
    }
    v127 = *(_QWORD *)(v142 + 72);
    if (*(int *)(v127 + 12) >= 1)
    {
      for (jj = 0; jj < *(int *)(v127 + 12); ++jj)
      {
        v129 = *(_QWORD *)(*(_QWORD *)(v127 + 24) + 8 * jj);
        if (*(_QWORD *)(v129 + 144))
        {
          v130 = objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "bufferForKey:"));
          if (!v130)
          {
            v137 = "Acceleration structure creation failed: buffer is nil";
            v138 = 367;
LABEL_191:
            GTMTLReplay_handleError(101, (uint64_t)v137, "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_argumentBuffers.m", (uint64_t)"GTMTLReplayController_allocateHeapAndBufferChildren", v138, 1);
            continue;
          }
          v131 = (void *)v130;
          v132 = *(_QWORD *)(v129 + 200);
          if (*(_QWORD *)(v129 + 152))
            v133 = objc_msgSend(v121, "newAccelerationStructureWithBuffer:offset:resourceIndex:", v130, v132);
          else
            v133 = objc_msgSend(v121, "newAccelerationStructureWithBuffer:offset:", v130, v132);
        }
        else
        {
          if (!*(_QWORD *)(v129 + 48))
            continue;
          v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "heapForKey:"));
          if (!v134)
          {
            v137 = "Accelertion structure creation failed: heap is nil";
            v138 = 387;
            goto LABEL_191;
          }
          v131 = v134;
          v135 = *(_QWORD *)(v129 + 184);
          v136 = *(unsigned int *)(v129 + 80);
          if (*(_QWORD *)(v129 + 152))
            v133 = objc_msgSend(v134, "newAccelerationStructureWithSize:offset:resourceIndex:", v135, v136);
          else
            v133 = objc_msgSend(v134, "newAccelerationStructureWithSize:offset:", v135, v136);
        }
        v139 = v133;

        if (!v139)
        {
          v137 = "Acceleration Structure Creation Failed";
          v138 = 416;
          goto LABEL_191;
        }
        objc_msgSend(v119, "setAccelerationStructure:forKey:", v139, *(_QWORD *)(v129 + 8));

      }
    }

  }
}

uint64_t initializeResourcePatchingTypes(void *a1, char *a2)
{
  id v3;
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  v4 = DEVICEOBJECT(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_opt_respondsToSelector(v5, "resourcePatchingTypeForResourceType:");

  if ((v6 & 1) != 0)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (v7 == 3)
      {
        if ((char *)(~(GT_SUPPORT_0 >> 18) & 2) == a2)
          v8 |= 8uLL;
      }
      else if (objc_msgSend(v3, "resourcePatchingTypeForResourceType:", v7) == a2)
      {
        v8 |= 1 << v7;
      }
      ++v7;
    }
    while (v7 != 9);
  }
  else if (a2 == (_BYTE *)&dword_0 + 2)
  {
    v8 = 511;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void ReserveResourceIndices(void *a1, uint64_t a2, unsigned int a3)
{
  id v5;
  size_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v5 = a1;
  v6 = *(int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v14 = v5;
    qsort(*(void **)(a2 + 24), v6, *(int *)(a2 + 8), (int (__cdecl *)(const void *, const void *))CompareU64);
    v7 = *(uint64_t **)(a2 + 24);
    v8 = *v7;
    *(_DWORD *)(a2 + 12) = 1;
    if ((int)v6 >= 2)
    {
      v9 = v6 - 1;
      v10 = v7 + 1;
      v11 = 1;
      do
      {
        v13 = *v10++;
        v12 = v13;
        if (v8 != v13)
        {
          v7[v11++] = v12;
          *(_DWORD *)(a2 + 12) = v11;
          v8 = v12;
        }
        --v9;
      }
      while (v9);
    }
    objc_msgSend(v14, "reserveResourceIndicesForResourceType:indices:indexCount:", a3);

  }
  else
  {
    g_forcePatchingTypeReplaceMask |= 1 << a3;
    g_enableIndexedResourceType &= ~(1 << a3);

  }
}

uint64_t CompareU64(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 != *a2;
}

uint64_t GetAliasStream2(uint64_t a1, uint64_t a2)
{
  _QWORD *entry;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v7 = a2;
  entry = find_entry(*(_QWORD *)(a1 + 24), &v7, 8uLL, 0);
  if (*entry
    && (v4 = *(_QWORD *)(*entry + 32)) != 0
    && (v5 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 16) + 72)), v5 < *(_QWORD *)(v4 + 24)))
  {
    return *(_QWORD *)(v4 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t DYMTLMutableBufferAncestor_compare(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 == v3)
  {
    if (*a1 < *a2)
      return 0xFFFFFFFFLL;
    else
      return *a1 != *a2;
  }
  else if (v2 < v3)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

uint64_t GTTrackerIndirectArgumentBufferInfo_compare(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;

  v2 = a1[2];
  v3 = a2[2];
  v4 = v2 >= v3;
  if (v2 == v3 && (v5 = a1[3], v6 = a2[3], v4 = v5 >= v6, v5 == v6))
  {
    v7 = a1[4];
    v8 = a2[4];
    v4 = v7 >= v8;
    v9 = v7 != v8;
    if (v4)
      return v9;
    else
      return 0xFFFFFFFFLL;
  }
  else if (v4)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t *ConvertUniqueIdentifierResources(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(int *)(a2 + 12) >= 1)
  {
    v3 = (uint64_t)result;
    v4 = 0;
    v5 = 8;
    do
    {
      v6 = *(_QWORD *)(a2 + 24);
      result = (uint64_t *)GetAliasStream2(v3, *(_QWORD *)(v6 + v5));
      if (result)
        v7 = *result;
      else
        v7 = 0;
      *(_QWORD *)(v6 + v5) = v7;
      ++v4;
      v5 += 32;
    }
    while (v4 < *(int *)(a2 + 12));
  }
  return result;
}

uint64_t DYMTLIndirectArgumentBufferManager_cleanup(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;

  return 0;
}

uint64_t DYMTLIndirectArgumentBufferManager_processCommandBuffer(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  apr_allocator_t *v5;
  apr_status_t (__cdecl *v6)(void *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  int64x2_t v18;
  char *v19;
  uint64_t i;
  char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  void *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int nelts;
  apr_array_header_t *v31;
  unsigned int v32;
  apr_pool_t *v33;
  uint64_t v34;
  uint64_t v35;
  apr_array_header_t *v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  int v41;
  int v42;
  char *elts;
  uint64_t v44;
  id v45;
  int v46;
  id v47;
  id v48;
  id v49;
  char v50;
  char *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  GTMTLReplaySharedBufferRange *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void **v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  id v92;
  unint64_t v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  char *v98;
  char *v99;
  char *v100;
  void *v101;
  unsigned __int8 v102;
  void *v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  void *v113;
  void *v114;
  char v115;
  id v116;
  unsigned int v117;
  void *v118;
  id v119;
  void *v120;
  apr_pool_t *p;
  id v123;
  void *v124;
  void *v125;
  apr_array_header_t *arr;
  void *v127;
  void *v128;
  unint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  apr_array_header_t *v133;
  char *v134;
  int8x16_t v135;
  void *v136;
  int64x2_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *context;
  void *contexta;
  id contextb;
  _QWORD v144[4];
  id v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  id v164;
  apr_pool_t *newpool;
  __int128 v166;
  uint64_t v167;

  if (!a2 || *(int *)(*(_QWORD *)(a2 + 104) + 12) < 1)
    return 0;
  v123 = *(id *)(a1 + 8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "defaultDevice"));
  v4 = initializeResourcePatchingTypes(v3, (_BYTE *)&dword_0 + 2);

  v129 = qword_753128 | g_forcePatchingTypeReplaceMask | v4;
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, v5);
  p = newpool;
  arr = apr_array_make(newpool, 4, 40);
  apr_pool_cleanup_register(p, arr, (apr_status_t (__cdecl *)(void *))DYMTLIABDecodingOp_cleanup, v6);
  if (*(int *)(*(_QWORD *)(a2 + 104) + 12) >= 1)
  {
    v7 = 0;
    v135 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8);
    v137 = vdupq_n_s64(7uLL);
    do
    {
      context = objc_autoreleasePoolPush();
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 24);
      v9 = v8 + 40 * v7;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "functionForKey:", *(_QWORD *)(v9 + 24)));
      v11 = DEVICEOBJECT(v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

      v13 = *(_QWORD *)(v9 + 32);
      v164 = 0;
      v14 = objc_msgSend(v12, "newArgumentEncoderWithBufferIndex:reflection:", v13, &v164);
      v15 = v164;
      v16 = v164;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v159 = 0x38uLL;
      TranslateGTMTLArgument(0, v16, &v152, 0);
      v17 = 0;
      v18 = 0uLL;
      do
      {
        v18 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)((char *)&v152 + v17), v137), v135), v18);
        v17 += 16;
      }
      while (v17 != 192);
      v19 = (char *)apr_palloc(p, vaddvq_s64(v18));
      for (i = 0; i != 192; i += 8)
      {
        if (((*(_QWORD *)((char *)&v152 + i) + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
          v21 = v19;
        else
          v21 = 0;
        v19 += (*(_QWORD *)((char *)&v152 + i) + 7) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((char *)&v152 + i) = v21;
      }
      v22 = v159;
      *(_QWORD *)&v159 = v159 + 56;
      TranslateGTMTLArgument(v22, v16, &v152, 1);
      if (*(unsigned __int8 *)(v22 + 16) > 1u)
        goto LABEL_18;
      v23 = *(unsigned __int8 **)(v22 + 8);
      if (!v23)
        goto LABEL_18;
      v24 = *v23;
      if (v24 == 1)
        goto LABEL_19;
      if (v24 == 60 && v23[22] == 1)
        v23 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
      else
LABEL_18:
        v23 = 0;
LABEL_19:
      if (GTMTLStructType_requiresPatching((uint64_t)v23, v129))
      {
        v25 = apr_array_push(arr);
        v26 = (uint64_t)v25;
        *(_OWORD *)v25 = *(_OWORD *)(v8 + 40 * v7);
        if (*(_BYTE *)(v22 + 16) || (v27 = *(_BYTE **)(v22 + 8)) == 0 || *v27 != 60)
          v27 = 0;
        *((_QWORD *)v25 + 2) = v27;
        objc_storeStrong((id *)v25 + 3, v14);
        objc_storeStrong((id *)(v26 + 32), v15);
        if ((dword_75313C & 0x40) == 0 && arr->nelts >= 2)
        {
          v28 = 0;
          v29 = 0;
          while (!DYMTLIABDecodingOp_isEqual((uint64_t)&arr->elts[v28], v26))
          {
            ++v29;
            v28 += 40;
            if (v29 >= arr->nelts - 1)
              goto LABEL_33;
          }
          nelts = arr->nelts;
          if (nelts)
            arr->nelts = nelts - 1;
        }
      }
LABEL_33:

      objc_autoreleasePoolPop(context);
      ++v7;
    }
    while (v7 < *(int *)(*(_QWORD *)(a2 + 104) + 12));
  }
  v31 = arr;
  if (arr->nelts <= 0)
  {
    v35 = 0;
  }
  else
  {
    v113 = objc_autoreleasePoolPush();
    v32 = BYTE1(GT_SUPPORT_0) & 0x20;
    v117 = (dword_75313C >> 22) & (v32 >> 5);
    if ((dword_75313C & 0x80) != 0)
    {
      v34 = a1;
      v33 = p;
      GTMTLIndirectResources_allResourcesByKey((uint64_t *)&v146, *(_DWORD ***)(*(_QWORD *)a1 + 40), *(_QWORD *)(*(_QWORD *)a1 + 80) + *(unsigned int *)(a1 + 22480), (dword_75313C >> 22) & (v32 >> 5), p);
      v154 = v148;
      v155 = v149;
      v156 = v150;
      *(_QWORD *)&v157 = v151;
      v152 = v146;
      v153 = v147;
    }
    else
    {
      v33 = p;
      GTMTLIndirectResources_rehash((apr_hash_index_t *)&v146, a2 + 8, (dword_75313C >> 22) & (v32 >> 5), p);
      v154 = v148;
      v155 = v149;
      v156 = v150;
      *(_QWORD *)&v157 = v151;
      v152 = v146;
      v153 = v147;
      v34 = a1;
    }
    *(_QWORD *)&v146 = v129;
    *((_QWORD *)&v146 + 1) = &v152;
    *(_QWORD *)&v147 = arr;
    v36 = apr_array_make(v33, 8, 32);
    v37 = *(_QWORD *)(v34 + 22496);
    v133 = v36;
    *((_QWORD *)&v147 + 1) = v36;
    *(_QWORD *)&v148 = v37;
    v119 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", arr->nelts);
    v116 = *(id *)(v34 + 24);
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v34 + 8), "defaultCommandQueue"));
    v39 = InternalCommandBuffer(v38, CFSTR("AB_Patching"));
    v114 = (void *)objc_claimAutoreleasedReturnValue(v39);
    v120 = v38;
    v40 = InternalBlitCommandEncoder(v114, v38);
    v118 = (void *)objc_claimAutoreleasedReturnValue(v40);
    objc_msgSend((id)g_activityLog, "enterArgumentBufferDownload");
    v115 = 0;
    v41 = 0;
    v42 = arr->nelts;
    do
    {
      elts = v31->elts;
      v44 = (v42 - v41);
      v45 = v119;
      v46 = v41;
      v47 = v118;
      v48 = *(id *)(a1 + 8);
      v49 = *(id *)(a1 + 24);
      v124 = v47;
      if ((int)v44 < 1)
      {

        v31 = arr;
      }
      else
      {
        contexta = v49;
        v138 = v48;
        v50 = 0;
        v130 = v41;
        v51 = &elts[40 * v41];
        do
        {
          v52 = objc_autoreleasePoolPush();
          v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)v51));
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectForKeyedSubscript:", v53));

          if (!v54)
          {
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "bufferForKey:", *(_QWORD *)v51));
            if (objc_msgSend(v55, "storageMode"))
            {
              v56 = objc_msgSend(v55, "length");
              v57 = (GTMTLReplaySharedBufferRange *)objc_claimAutoreleasedReturnValue(objc_msgSend(contexta, "bufferWithLength:alignment:", v56, objc_msgSend(*((id *)v51 + 3), "alignment")));
              v58 = (void *)objc_claimAutoreleasedReturnValue(-[GTMTLReplaySharedBufferRange heapBuffer](v57, "heapBuffer"));
              v59 = -[GTMTLReplaySharedBufferRange heapLocation](v57, "heapLocation");
              v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(contexta, "blitCommandEncoder"));
              objc_msgSend(v60, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v55, 0, v58, v59, v56);
              objc_msgSend(v124, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v58, v59, v55, 0, v56);

              v50 = 1;
            }
            else
            {
              v57 = -[GTMTLReplaySharedBufferRange initWithBuffer:]([GTMTLReplaySharedBufferRange alloc], "initWithBuffer:", v55);
            }
            v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)v51));
            objc_msgSend(v45, "setObject:forKeyedSubscript:", v57, v61);

          }
          objc_autoreleasePoolPop(v52);
          v51 += 40;
          --v44;
        }
        while (v44);

        v31 = arr;
        v46 = v130;
        if ((v50 & 1) != 0)
        {
          objc_msgSend(v116, "commitCommandBuffer");
          v115 = 1;
        }
      }
      objc_msgSend(v120, "finish");
      v62 = v46;
      v63 = v45;
      contextb = v123;
      v41 = v31->nelts;
      v131 = v41;
      if (v117)
      {
        if (v41 > v46)
        {
          do
          {
            v139 = objc_autoreleasePoolPush();
            v64 = v31->elts;
            v65 = v62;
            v66 = &v64[40 * v62];
            v133->nelts = 0;
            v67 = *((_QWORD *)v66 + 2);
            if (*(_BYTE *)(v67 + 22) == 1)
              v68 = *(_QWORD **)(v67 + 8);
            else
              v68 = 0;
            GTMTLStructType_fillArgumentIndicesRequiresPatching(v68, 0, 0, v133, v129);
            v69 = *(unsigned int *)(*((_QWORD *)v66 + 2) + 16);
            v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)v66));
            v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKeyedSubscript:", v70));

            v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "heapBuffer"));
            v73 = DEVICEOBJECT(v72);
            v74 = (void *)objc_claimAutoreleasedReturnValue(v73);

            v75 = objc_msgSend(v71, "heapLocation");
            v76 = objc_msgSend(v71, "length");
            v77 = *(_QWORD *)v66;
            v78 = *(_QWORD *)&v64[40 * v65 + 8];
            if ((dword_75313C & 0x40) != 0)
            {
              v85 = *(void **)&v64[40 * v65 + 32];
              *(_QWORD *)&v166 = *(_QWORD *)v66;
              *((_QWORD *)&v166 + 1) = v78;
              v167 = 0;
              reencodeBufferDataTier2(&v146, contextb, v74, (uint64_t)v75 + v78, v74, (uint64_t)v75 + v78, &v166, v85);
            }
            else
            {
              v79 = (unint64_t)v76;
              v80 = v78 % v69;
              v81 = v78 % v69 + v69;
              if (v81 <= (unint64_t)v76)
              {
                v82 = (void **)&v64[40 * v65 + 32];
                do
                {
                  v83 = (uint64_t)v75 + v80;
                  *(_QWORD *)&v166 = v77;
                  *((_QWORD *)&v166 + 1) = v80;
                  v80 = v81;
                  v84 = *v82;
                  v167 = 0;
                  reencodeBufferDataTier2(&v146, contextb, v74, v83, v74, v83, &v166, v84);
                  v81 = v80 + v69;
                }
                while (v80 + v69 <= v79);
              }
            }

            objc_autoreleasePoolPop(v139);
            v62 = v65 + 1;
            v41 = v131;
            v31 = arr;
          }
          while (v131 != (_DWORD)v65 + 1);
        }
      }
      else if (v41 > v46)
      {
        v128 = v63;
        do
        {
          v86 = objc_autoreleasePoolPush();
          v87 = v31->elts;
          v88 = &v87[40 * v62];
          v133->nelts = 0;
          v89 = *((_QWORD *)v88 + 2);
          v127 = v86;
          if (*(_BYTE *)(v89 + 22) == 1)
            v90 = *(_QWORD **)(v89 + 8);
          else
            v90 = 0;
          GTMTLStructType_fillArgumentIndicesRequiresPatching(v90, 0, 0, v133, v129);
          v132 = v62;
          v91 = v87;
          v92 = *(id *)&v87[40 * v62 + 24];
          v93 = (unint64_t)objc_msgSend(v92, "encodedLength");
          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)v88));
          v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v128, "objectForKeyedSubscript:", v94));

          v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "heapBuffer"));
          v96 = DEVICEOBJECT(v95);
          v97 = (void *)objc_claimAutoreleasedReturnValue(v96);

          v98 = (char *)objc_msgSend(v136, "heapLocation");
          v99 = (char *)objc_msgSend(v136, "length");
          v140 = *(_QWORD *)v88;
          if ((dword_75313C & 0x40) != 0)
          {
            v110 = *(_QWORD *)&v91[40 * v132 + 8];
            v111 = (uint64_t)&v98[v110];
            objc_msgSend(v92, "setArgumentBuffer:offset:", v97, v111);
            *(_QWORD *)&v166 = v140;
            *((_QWORD *)&v166 + 1) = v110;
            v167 = 0;
            reencodeBufferData((uint64_t)&v146, contextb, v97, v111, v92, &v166);
          }
          else
          {
            v100 = v99;
            v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "device"));
            v102 = objc_msgSend(v101, "supportsArgumentBuffersTier2");

            v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "layout"));
            v104 = objc_msgSend(v103, "hashValue");
            v105 = objc_msgSend(v103, "hashOffset");
            v125 = v103;
            v106 = *(_QWORD *)&v91[40 * v132 + 8];
            v107 = v106 % v93;
            v108 = (char *)(v106 % v93 + v93);
            if (v108 <= v100)
            {
              v134 = &v98[v105];
              do
              {
                v109 = v108;
                if ((v102 & 1) != 0
                  || *(_DWORD *)&v134[v107 + (_QWORD)objc_msgSend(objc_retainAutorelease(v97), "contents")] == v104)
                {
                  objc_msgSend(v92, "setArgumentBuffer:offset:", v97, &v98[v107]);
                  *(_QWORD *)&v166 = v140;
                  *((_QWORD *)&v166 + 1) = v107;
                  v167 = 0;
                  reencodeBufferData((uint64_t)&v146, contextb, v97, (uint64_t)&v98[v107], v92, &v166);
                }
                v108 = &v109[v93];
                v107 = (unint64_t)v109;
              }
              while (&v109[v93] <= v100);
            }

            v31 = arr;
          }
          objc_msgSend(v92, "setArgumentBuffer:offset:", 0, 0);

          objc_autoreleasePoolPop(v127);
          v41 = v131;
          v62 = v132 + 1;
          v63 = v128;
        }
        while (v131 != (_DWORD)v132 + 1);
      }

      v42 = v31->nelts;
    }
    while (v41 < v42);
    objc_msgSend((id)g_activityLog, "leaveActivity");
    objc_msgSend(v124, "endEncoding");
    if ((v115 & 1) != 0)
    {
      objc_msgSend((id)g_activityLog, "enterArgumentBufferUpload");
      objc_msgSend((id)g_activityLog, "logSharedCommandBuffer:", v114);
      v144[0] = _NSConcreteStackBlock;
      v144[1] = 3221225472;
      v144[2] = __DYMTLIndirectArgumentBufferManager_processCommandBuffer_block_invoke;
      v144[3] = &unk_7261C8;
      v145 = v63;
      objc_msgSend(v114, "addCompletedHandler:", v144);
      GTMTLReplay_commitCommandBuffer(v114);

      objc_msgSend((id)g_activityLog, "leaveActivity");
    }

    objc_autoreleasePoolPop(v113);
    v35 = v115 & 1;
  }
  apr_pool_destroy(p);

  return v35;
}

void sub_23C2D0(_Unwind_Exception *a1)
{
  objc_msgSend((id)g_activityLog, "leaveActivity");
  _Unwind_Resume(a1);
}

uint64_t DYMTLIABDecodingOp_cleanup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (*(int *)(a1 + 16) >= 1)
  {
    v2 = 0;
    v3 = 24;
    do
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(void **)(v4 + v3);
      *(_QWORD *)(v4 + v3) = 0;

      ++v2;
      v3 += 40;
    }
    while (v2 < *(int *)(a1 + 16));
  }
  return 0;
}

BOOL GTMTLStructType_requiresPatching(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 24);
    v6 = 1;
    do
    {
      v7 = *v5;
      if ((_DWORD)v7 == 1)
      {
        if ((GTMTLStructType_requiresPatching(*((_QWORD *)v5 - 2)) & 1) != 0)
          return v6;
      }
      else if ((_DWORD)v7 == 2)
      {
        if ((GTMTLArrayType_requiresPatching(*((_QWORD *)v5 - 2), a2) & 1) != 0)
          return v6;
      }
      else if ((GTMTLDataType_requiresPatching(v7, a2) & 1) != 0)
      {
        return v6;
      }
      v6 = ++v4 < v2;
      v5 += 32;
    }
    while (v2 != v4);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL DYMTLIABDecodingOp_isEqual(uint64_t a1, uint64_t a2)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v4 = objc_msgSend(*(id *)(a1 + 24), "encodedLength");
  if (v4 != objc_msgSend(*(id *)(a2 + 24), "encodedLength"))
    return 0;
  v5 = (unint64_t)objc_msgSend(*(id *)(a1 + 24), "alignment");
  if ((id)v5 != objc_msgSend(*(id *)(a2 + 24), "alignment") || *(_QWORD *)(a1 + 8) % v5 != *(_QWORD *)(a2 + 8) % v5)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v6 + 22) == 1)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v9 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v9 + 22) == 1)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  return GTMTLStructType_isEqual(v7, v10);
}

_QWORD *GTMTLStructType_fillArgumentIndicesRequiresPatching(_QWORD *result, uint64_t a2, uint64_t a3, apr_array_header_t *a4, unint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (*((_DWORD *)result + 4))
  {
    v8 = result;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v8[1];
      v12 = v11 + v9;
      v13 = *(unsigned __int16 *)(v11 + v9 + 22) + a2;
      v14 = *(unsigned int *)(v11 + v9 + 16) + a3;
      v15 = *(unsigned __int8 *)(v11 + v9 + 24);
      if (v15 == 2)
      {
        result = (_QWORD *)GTMTLArrayType_fillArgumentIndicesRequiresPatching(*(_QWORD *)(v12 + 8), *(unsigned __int16 *)(v11 + v9 + 22) + a2, v14, a4, a5);
      }
      else if (v15 == 1)
      {
        result = (_QWORD *)GTMTLStructType_fillArgumentIndicesRequiresPatching(*(_QWORD *)(v11 + v9 + 8), *(unsigned __int16 *)(v11 + v9 + 22) + a2, v14, a4, a5);
      }
      else
      {
        result = (_QWORD *)GTMTLDataType_requiresPatching(*(unsigned __int8 *)(v11 + v9 + 24), a5);
        if ((_DWORD)result)
        {
          if (v15 == 60)
            v16 = *(_QWORD *)(v11 + v9 + 8);
          else
            v16 = 0;
          result = apr_array_push(a4);
          v17 = result;
          *result = *(unsigned __int8 *)(v12 + 24);
          result[1] = v13;
          result[2] = *(unsigned int *)(v12 + 16);
          if (v16)
          {
            result = (_QWORD *)GTMTLPointerType_requiresPatching(v16, a5);
            if ((_DWORD)result)
              v18 = v16;
            else
              v18 = 0;
          }
          else
          {
            v18 = 0;
          }
          v17[3] = v18;
        }
      }
      ++v10;
      v9 += 32;
    }
    while (v10 < *((unsigned int *)v8 + 4));
  }
  return result;
}

void reencodeBufferDataTier2(_QWORD *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, __int128 *a7, void *a8)
{
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  char *v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD *entry;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  void *v54;
  id v55;
  apr_pool_t **v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  id v88;
  id v89;
  __int128 v90;
  uint64_t v91;

  v89 = a2;
  v14 = a3;
  v88 = a5;
  v85 = a8;
  v15 = a1[3];
  if (*(int *)(v15 + 12) >= 1)
  {
    v16 = 0;
    v17 = 0;
    v86 = a4;
    do
    {
      v18 = (uint64_t *)(*(_QWORD *)(v15 + 24) + v16);
      v19 = *v18;
      v20 = v18[2];
      *((_QWORD *)a7 + 2) = v18[1];
      if (v19 > 79)
      {
        if (v19 > 116)
        {
          if ((unint64_t)(v19 - 117) >= 2)
            goto LABEL_77;
          v32 = *(id *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
          v44 = a1[4];
          v90 = *a7;
          v91 = *((_QWORD *)a7 + 2);
          entry = find_entry(v44, &v90, 0x18uLL, 0);
          if (*entry)
          {
            v46 = *(_QWORD *)(*entry + 32);
            if (v46)
            {
              if (*(id *)(v46 + 24) == v32)
                goto LABEL_77;
            }
          }
          v36 = *(_QWORD *)(a1[1] + 64);
        }
        else
        {
          if (v19 == 80)
          {
            v32 = *(id *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
            v64 = a1[4];
            v90 = *a7;
            v91 = *((_QWORD *)a7 + 2);
            v65 = find_entry(v64, &v90, 0x18uLL, 0);
            if (*v65)
            {
              v66 = *(_QWORD *)(*v65 + 32);
              if (v66)
              {
                if (*(id *)(v66 + 24) == v32)
                  goto LABEL_77;
              }
            }
            v67 = *(_QWORD *)(a1[1] + 40);
            *(_QWORD *)&v90 = v32;
            v68 = find_entry(v67, &v90, 8uLL, 0);
            if (!*v68)
              goto LABEL_77;
            v69 = *(_QWORD *)(*v68 + 32);
            if (!v69)
              goto LABEL_77;
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "indirectCommandBufferForKey:", *(_QWORD *)(v69 + 8)));
            goto LABEL_73;
          }
          if (v19 == 115)
          {
            v32 = *(id *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
            v70 = a1[4];
            v90 = *a7;
            v91 = *((_QWORD *)a7 + 2);
            v71 = find_entry(v70, &v90, 0x18uLL, 0);
            if (*v71)
            {
              v72 = *(_QWORD *)(*v71 + 32);
              if (v72)
              {
                if (*(id *)(v72 + 24) == v32)
                  goto LABEL_77;
              }
            }
            v73 = *(_QWORD *)(a1[1] + 48);
            *(_QWORD *)&v90 = v32;
            v74 = find_entry(v73, &v90, 8uLL, 0);
            if (!*v74)
              goto LABEL_77;
            v75 = *(_QWORD *)(*v74 + 32);
            if (!v75)
              goto LABEL_77;
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "visibleFunctionTableForKey:", *(_QWORD *)(v75 + 8)));
            goto LABEL_73;
          }
          if (v19 != 116)
            goto LABEL_77;
          v32 = *(id *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
          v33 = a1[4];
          v90 = *a7;
          v91 = *((_QWORD *)a7 + 2);
          v34 = find_entry(v33, &v90, 0x18uLL, 0);
          if (*v34)
          {
            v35 = *(_QWORD *)(*v34 + 32);
            if (v35)
            {
              if (*(id *)(v35 + 24) == v32)
                goto LABEL_77;
            }
          }
          v36 = *(_QWORD *)(a1[1] + 56);
        }
        *(_QWORD *)&v90 = v32;
        v47 = find_entry(v36, &v90, 8uLL, 0);
        if (!*v47)
          goto LABEL_77;
        v48 = *(_QWORD *)(*v47 + 32);
        if (!v48)
          goto LABEL_77;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "intersectionFunctionTableForKey:", *(_QWORD *)(v48 + 8)));
      }
      else if (v19 <= 59)
      {
        if (v19 == 58)
        {
          v32 = *(id *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
          v76 = a1[4];
          v90 = *a7;
          v91 = *((_QWORD *)a7 + 2);
          v77 = find_entry(v76, &v90, 0x18uLL, 0);
          if (*v77)
          {
            v78 = *(_QWORD *)(*v77 + 32);
            if (v78)
            {
              if (*(id *)(v78 + 24) == v32)
                goto LABEL_77;
            }
          }
          v79 = *(_QWORD *)(a1[1] + 8);
          *(_QWORD *)&v90 = v32;
          v80 = find_entry(v79, &v90, 8uLL, 0);
          if (!*v80)
            goto LABEL_77;
          v81 = *(_QWORD *)(*v80 + 32);
          if (!v81)
            goto LABEL_77;
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "textureForKey:", *(_QWORD *)(v81 + 8)));
        }
        else
        {
          if (v19 != 59)
            goto LABEL_77;
          v32 = *(id *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
          v37 = a1[4];
          v90 = *a7;
          v91 = *((_QWORD *)a7 + 2);
          v38 = find_entry(v37, &v90, 0x18uLL, 0);
          if (*v38)
          {
            v39 = *(_QWORD *)(*v38 + 32);
            if (v39)
            {
              if (*(id *)(v39 + 24) == v32)
                goto LABEL_77;
            }
          }
          v40 = *(_QWORD *)(a1[1] + 16);
          *(_QWORD *)&v90 = v32;
          v41 = find_entry(v40, &v90, 8uLL, 0);
          if (!*v41)
            goto LABEL_77;
          v42 = *(_QWORD *)(*v41 + 32);
          if (!v42)
            goto LABEL_77;
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "samplerStateForKey:", *(_QWORD *)(v42 + 8)));
        }
      }
      else
      {
        if (v19 == 60)
        {
          v21 = *(_QWORD *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
          v49 = a1[4];
          v90 = *a7;
          v91 = *((_QWORD *)a7 + 2);
          v50 = find_entry(v49, &v90, 0x18uLL, 0);
          if (*v50)
          {
            v51 = *(_QWORD *)(*v50 + 32);
            if (v51)
            {
              if (*(_QWORD *)(v51 + 24) == v21)
                goto LABEL_77;
            }
          }
          v52 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*(_QWORD *)a1[1] + 24), *(int *)(*(_QWORD *)a1[1] + 12), v21);
          if (!v52 || !v52[2])
            goto LABEL_77;
          v53 = v21 - *v52;
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "bufferForKey:"));
          v55 = DEVICEOBJECT(v54);
          v30 = (void *)objc_claimAutoreleasedReturnValue(v55);

          v31 = (char *)objc_msgSend(v30, "gpuAddress") + v53;
          goto LABEL_46;
        }
        if (v19 != 78)
        {
          if (v19 != 79)
            goto LABEL_77;
          if ((GT_SUPPORT_0 & 0x10) == 0)
            goto LABEL_77;
          v21 = *(_QWORD *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
          v22 = a1[4];
          v90 = *a7;
          v91 = *((_QWORD *)a7 + 2);
          v23 = find_entry(v22, &v90, 0x18uLL, 0);
          if (*v23)
          {
            v24 = *(_QWORD *)(*v23 + 32);
            if (v24)
            {
              if (*(_QWORD *)(v24 + 24) == v21)
                goto LABEL_77;
            }
          }
          v25 = *(_QWORD *)(a1[1] + 32);
          *(_QWORD *)&v90 = v21;
          v26 = find_entry(v25, &v90, 8uLL, 0);
          if (!*v26)
            goto LABEL_77;
          v27 = *(_QWORD *)(*v26 + 32);
          if (!v27 || !*(_QWORD *)(v27 + 8))
            goto LABEL_77;
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "computePipelineStateForKey:"));
          v29 = DEVICEOBJECT(v28);
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);

          v31 = (char *)objc_msgSend(v30, "gpuResourceID");
LABEL_46:
          *(_QWORD *)((char *)objc_msgSend(objc_retainAutorelease(v88), "contents") + v20 + a6) = v31;
          if ((char *)v21 != v31)
          {
            v56 = (apr_pool_t **)a1[4];
            v90 = *a7;
            v91 = *((_QWORD *)a7 + 2);
            v57 = (uint64_t)v31;
LABEL_75:
            StoreArgumentIndexReencoding(v56, (uint64_t)&v90, v57);
            goto LABEL_76;
          }
          goto LABEL_76;
        }
        v32 = *(id *)((char *)objc_msgSend(objc_retainAutorelease(v14), "contents") + v20 + a4);
        v58 = a1[4];
        v90 = *a7;
        v91 = *((_QWORD *)a7 + 2);
        v59 = find_entry(v58, &v90, 0x18uLL, 0);
        if (*v59)
        {
          v60 = *(_QWORD *)(*v59 + 32);
          if (v60)
          {
            if (*(id *)(v60 + 24) == v32)
              goto LABEL_77;
          }
        }
        v61 = *(_QWORD *)(a1[1] + 24);
        *(_QWORD *)&v90 = v32;
        v62 = find_entry(v61, &v90, 8uLL, 0);
        if (!*v62)
          goto LABEL_77;
        v63 = *(_QWORD *)(*v62 + 32);
        if (!v63 || !*(_QWORD *)(v63 + 8))
          goto LABEL_77;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "renderPipelineStateForKey:"));
      }
LABEL_73:
      v82 = v43;
      v83 = DEVICEOBJECT(v43);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v83);

      v84 = objc_msgSend(v30, "gpuResourceID");
      *(_QWORD *)((char *)objc_msgSend(objc_retainAutorelease(v88), "contents") + v20 + a6) = v84;
      if (v32 != v84)
      {
        v56 = (apr_pool_t **)a1[4];
        v90 = *a7;
        v91 = *((_QWORD *)a7 + 2);
        v57 = (uint64_t)v84;
        goto LABEL_75;
      }
LABEL_76:

      a4 = v86;
LABEL_77:
      ++v17;
      v15 = a1[3];
      v16 += 32;
    }
    while (v17 < *(int *)(v15 + 12));
  }

}

void reencodeBufferData(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, __int128 *a6)
{
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  _QWORD *entry;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  id v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  void *v66;
  id v67;
  char *v68;
  apr_pool_t **v69;
  _QWORD *v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  uint64_t v100;
  apr_pool_t **v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  id v105;
  id v106;
  id v107;
  void *v108;
  __int128 v109;
  uint64_t v110;

  v11 = a2;
  v12 = a3;
  v107 = a5;
  v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "layout"));
  v13 = *(_QWORD *)(a1 + 24);
  if (*(int *)(v13 + 12) >= 1)
  {
    v14 = 0;
    v105 = v11;
    v106 = v12;
    v104 = a4;
    do
    {
      v15 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 32 * v14);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[3];
      *((_QWORD *)a6 + 2) = v17;
      if (v16 > 78)
      {
        switch(v16)
        {
          case 's':
            v19 = objc_msgSend(v108, "uniqueIdentifierForVisibleFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
            v29 = *(_QWORD *)(a1 + 32);
            v109 = *a6;
            v110 = *((_QWORD *)a6 + 2);
            entry = find_entry(v29, &v109, 0x18uLL, 0);
            if (!*entry || (v31 = *(_QWORD *)(*entry + 32)) == 0 || *(id *)(v31 + 24) != v19)
            {
              v32 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
              *(_QWORD *)&v109 = v19;
              v33 = find_entry(v32, &v109, 8uLL, 0);
              if (*v33)
              {
                v34 = *(_QWORD *)(*v33 + 32);
                if (v34)
                {
                  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "visibleFunctionTableForKey:", *(_QWORD *)(v34 + 8)));
                  v36 = DEVICEOBJECT(v35);
                  v28 = (void *)objc_claimAutoreleasedReturnValue(v36);

                  objc_msgSend(v107, "setVisibleFunctionTable:atIndex:", v28, v17);
                  goto LABEL_75;
                }
              }
            }
            goto LABEL_78;
          case 't':
            v19 = objc_msgSend(v108, "uniqueIdentifierForIntersectionFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
            v76 = *(_QWORD *)(a1 + 32);
            v109 = *a6;
            v110 = *((_QWORD *)a6 + 2);
            v77 = find_entry(v76, &v109, 0x18uLL, 0);
            if (!*v77 || (v78 = *(_QWORD *)(*v77 + 32)) == 0 || *(id *)(v78 + 24) != v19)
            {
              v79 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
              *(_QWORD *)&v109 = v19;
              v80 = find_entry(v79, &v109, 8uLL, 0);
              if (*v80)
              {
                v81 = *(_QWORD *)(*v80 + 32);
                if (v81)
                {
                  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "intersectionFunctionTableForKey:", *(_QWORD *)(v81 + 8)));
                  v83 = DEVICEOBJECT(v82);
                  v28 = (void *)objc_claimAutoreleasedReturnValue(v83);

                  objc_msgSend(v107, "setIntersectionFunctionTable:atIndex:", v28, v17);
                  goto LABEL_75;
                }
              }
            }
            goto LABEL_78;
          case 'u':
            v84 = objc_msgSend(v108, "uniqueIdentifierForPrimitiveAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
            goto LABEL_63;
          case 'v':
            v84 = objc_msgSend(v108, "uniqueIdentifierForInstanceAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
LABEL_63:
            v19 = v84;
            v85 = *(_QWORD *)(a1 + 32);
            v109 = *a6;
            v110 = *((_QWORD *)a6 + 2);
            v86 = find_entry(v85, &v109, 0x18uLL, 0);
            if (*v86)
            {
              v87 = *(_QWORD *)(*v86 + 32);
              if (v87)
              {
                if (*(id *)(v87 + 24) == v19)
                  goto LABEL_78;
              }
            }
            v88 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
            *(_QWORD *)&v109 = v19;
            v89 = find_entry(v88, &v109, 8uLL, 0);
            if (!*v89)
              goto LABEL_78;
            v90 = *(_QWORD *)(*v89 + 32);
            if (!v90)
              goto LABEL_78;
            v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "intersectionFunctionTableForKey:", *(_QWORD *)(v90 + 8)));
            v92 = DEVICEOBJECT(v91);
            v28 = (void *)objc_claimAutoreleasedReturnValue(v92);

            objc_msgSend(v107, "setAccelerationStructure:atIndex:", v28, v17);
            goto LABEL_75;
          default:
            if (v16 == 79)
            {
              if ((GT_SUPPORT_0 & 0x10) != 0)
              {
                v19 = objc_msgSend(v108, "uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
                v93 = *(_QWORD *)(a1 + 32);
                v109 = *a6;
                v110 = *((_QWORD *)a6 + 2);
                v94 = find_entry(v93, &v109, 0x18uLL, 0);
                if (!*v94 || (v95 = *(_QWORD *)(*v94 + 32)) == 0 || *(id *)(v95 + 24) != v19)
                {
                  v96 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (uint64_t)v19);
                  if (v96)
                  {
                    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "computePipelineStateForKey:", v96));
                    v98 = DEVICEOBJECT(v97);
                    v28 = (void *)objc_claimAutoreleasedReturnValue(v98);

                    objc_msgSend(v107, "setComputePipelineState:atIndex:", v28, v17);
                    goto LABEL_75;
                  }
                }
              }
            }
            else if (v16 == 80)
            {
              v19 = objc_msgSend(v108, "uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
              v43 = *(_QWORD *)(a1 + 32);
              v109 = *a6;
              v110 = *((_QWORD *)a6 + 2);
              v44 = find_entry(v43, &v109, 0x18uLL, 0);
              if (!*v44 || (v45 = *(_QWORD *)(*v44 + 32)) == 0 || *(id *)(v45 + 24) != v19)
              {
                v46 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
                *(_QWORD *)&v109 = v19;
                v47 = find_entry(v46, &v109, 8uLL, 0);
                if (*v47)
                {
                  v48 = *(_QWORD *)(*v47 + 32);
                  if (v48)
                  {
                    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "indirectCommandBufferForKey:", *(_QWORD *)(v48 + 8)));
                    v50 = DEVICEOBJECT(v49);
                    v28 = (void *)objc_claimAutoreleasedReturnValue(v50);

                    objc_msgSend(v107, "setIndirectCommandBuffer:atIndex:", v28, v17);
                    goto LABEL_75;
                  }
                }
              }
            }
            break;
        }
        goto LABEL_78;
      }
      if (v16 > 59)
      {
        if (v16 == 60)
        {
          v59 = (char *)objc_msgSend(v108, "virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
          v60 = *(_QWORD *)(a1 + 32);
          v109 = *a6;
          v110 = *((_QWORD *)a6 + 2);
          v61 = find_entry(v60, &v109, 0x18uLL, 0);
          if (*v61)
          {
            v62 = *(_QWORD *)(*v61 + 32);
            if (v62)
            {
              if (*(char **)(v62 + 24) == v59)
                goto LABEL_78;
            }
          }
          v63 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(**(_QWORD **)(a1 + 8) + 24), *(int *)(**(_QWORD **)(a1 + 8) + 12), (unint64_t)v59);
          if (!v63)
            goto LABEL_78;
          v64 = v63[2];
          if (!v64)
            goto LABEL_78;
          v65 = &v59[-*v63];
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bufferForKey:", v64));
          v67 = DEVICEOBJECT(v66);
          v28 = (void *)objc_claimAutoreleasedReturnValue(v67);

          objc_msgSend(v107, "setBuffer:offset:atIndex:", v28, v65, v17);
          v68 = &v65[(_QWORD)objc_msgSend(v28, "gpuAddress")];
          if (v68 != v59)
          {
            v69 = *(apr_pool_t ***)(a1 + 32);
            v109 = *a6;
            v110 = *((_QWORD *)a6 + 2);
            StoreArgumentIndexReencoding(v69, (uint64_t)&v109, (uint64_t)v68);
          }
          v11 = v105;
          if (!v18)
            goto LABEL_80;
          if ((GT_SUPPORT_0 & 0x2000) == 0)
            goto LABEL_80;
          v70 = apr_array_push(*(apr_array_header_t **)(a1 + 16));
          *v70 = v64;
          v70[1] = v65;
          v70[2] = v18;
          v71 = objc_msgSend(v107, "newArgumentEncoderForBufferAtIndex:", v17);
          v72 = (void *)v70[3];
          v70[3] = v71;

          v73 = *(_QWORD *)(a1 + 16);
          if (*(int *)(v73 + 12) >= 2)
          {
            v74 = 0;
            v75 = 0;
            a4 = v104;
            while (!DYMTLIABDecodingOp_isEqual(*(_QWORD *)(v73 + 24) + v74, (uint64_t)v70))
            {
              ++v75;
              v73 = *(_QWORD *)(a1 + 16);
              v74 += 40;
              if (v75 >= *(int *)(v73 + 12) - 1)
              {
                v11 = v105;
                goto LABEL_77;
              }
            }
            v102 = *(_QWORD *)(a1 + 16);
            v11 = v105;
            if (v102)
            {
              v103 = *(_DWORD *)(v102 + 12);
              if (v103)
                *(_DWORD *)(v102 + 12) = v103 - 1;
            }
          }
          else
          {
LABEL_80:
            a4 = v104;
          }
          goto LABEL_77;
        }
        if (v16 != 78)
          goto LABEL_78;
        v19 = objc_msgSend(v108, "uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
        v37 = *(_QWORD *)(a1 + 32);
        v109 = *a6;
        v110 = *((_QWORD *)a6 + 2);
        v38 = find_entry(v37, &v109, 0x18uLL, 0);
        if (*v38)
        {
          v39 = *(_QWORD *)(*v38 + 32);
          if (v39)
          {
            if (*(id *)(v39 + 24) == v19)
              goto LABEL_78;
          }
        }
        v40 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)v19);
        if (!v40)
          goto LABEL_78;
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "renderPipelineStateForKey:", v40));
        v42 = DEVICEOBJECT(v41);
        v28 = (void *)objc_claimAutoreleasedReturnValue(v42);

        objc_msgSend(v107, "setRenderPipelineState:atIndex:", v28, v17);
      }
      else if (v16 == 58)
      {
        v19 = objc_msgSend(v108, "uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
        v51 = *(_QWORD *)(a1 + 32);
        v109 = *a6;
        v110 = *((_QWORD *)a6 + 2);
        v52 = find_entry(v51, &v109, 0x18uLL, 0);
        if (*v52)
        {
          v53 = *(_QWORD *)(*v52 + 32);
          if (v53)
          {
            if (*(id *)(v53 + 24) == v19)
              goto LABEL_78;
          }
        }
        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)&v109 = v19;
        v55 = find_entry(v54, &v109, 8uLL, 0);
        if (!*v55)
          goto LABEL_78;
        v56 = *(_QWORD *)(*v55 + 32);
        if (!v56)
          goto LABEL_78;
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "textureForKey:", *(_QWORD *)(v56 + 8)));
        v58 = DEVICEOBJECT(v57);
        v28 = (void *)objc_claimAutoreleasedReturnValue(v58);

        objc_msgSend(v107, "setTexture:atIndex:", v28, v17);
      }
      else
      {
        if (v16 != 59)
          goto LABEL_78;
        v19 = objc_msgSend(v108, "uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:", v17, v12, a4);
        v20 = *(_QWORD *)(a1 + 32);
        v109 = *a6;
        v110 = *((_QWORD *)a6 + 2);
        v21 = find_entry(v20, &v109, 0x18uLL, 0);
        if (*v21)
        {
          v22 = *(_QWORD *)(*v21 + 32);
          if (v22)
          {
            if (*(id *)(v22 + 24) == v19)
              goto LABEL_78;
          }
        }
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
        *(_QWORD *)&v109 = v19;
        v24 = find_entry(v23, &v109, 8uLL, 0);
        if (!*v24)
          goto LABEL_78;
        v25 = *(_QWORD *)(*v24 + 32);
        if (!v25)
          goto LABEL_78;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "samplerStateForKey:", *(_QWORD *)(v25 + 8)));
        v27 = DEVICEOBJECT(v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

        objc_msgSend(v107, "setSamplerState:atIndex:", v28, v17);
      }
LABEL_75:
      v99 = objc_msgSend(v28, "uniqueIdentifier");
      if (v19 != v99)
      {
        v100 = (uint64_t)v99;
        v101 = *(apr_pool_t ***)(a1 + 32);
        v109 = *a6;
        v110 = *((_QWORD *)a6 + 2);
        StoreArgumentIndexReencoding(v101, (uint64_t)&v109, v100);
      }
LABEL_77:

      v12 = v106;
LABEL_78:
      ++v14;
      v13 = *(_QWORD *)(a1 + 24);
    }
    while (v14 < *(int *)(v13 + 12));
  }

}

void StoreArgumentIndexReencoding(apr_pool_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *find_entry((uint64_t)a1, (_BYTE *)a2, 0x18uLL, 0);
  if (!v6 || (v7 = *(_QWORD **)(v6 + 32)) == 0)
  {
    v7 = apr_palloc(*a1, 0x20uLL);
    v8 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = v8;
    apr_hash_set((apr_hash_t *)a1, v7, 24, v7);
  }
  v7[3] = a3;
}

uint64_t GTMTLArrayType_fillArgumentIndicesRequiresPatching(uint64_t result, uint64_t a2, uint64_t a3, apr_array_header_t *a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = result;
  v10 = *(unsigned __int8 *)(result + 24);
  v11 = *(unsigned __int16 *)(result + 20);
  v12 = *(unsigned __int16 *)(result + 22);
  if ((_DWORD)v10 == 1)
  {
    if (*(_WORD *)(result + 20))
    {
      do
      {
        if (*(_BYTE *)(v9 + 24) == 1)
          v14 = *(_QWORD *)(v9 + 8);
        else
          v14 = 0;
        result = GTMTLStructType_fillArgumentIndicesRequiresPatching(v14, a2, a3, a4, a5);
        a2 += v12;
        a3 += *(unsigned int *)(v9 + 16);
        --v11;
      }
      while (v11);
    }
  }
  else if ((_DWORD)v10 == 2)
  {
    if (*(_WORD *)(result + 20))
    {
      do
      {
        if (*(_BYTE *)(v9 + 24) == 2)
          v13 = *(_QWORD *)(v9 + 8);
        else
          v13 = 0;
        result = GTMTLArrayType_fillArgumentIndicesRequiresPatching(v13, a2, a3, a4, a5);
        a2 += v12;
        a3 += *(unsigned int *)(v9 + 16);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    result = GTMTLDataType_requiresPatching(*(unsigned __int8 *)(result + 24), a5);
    if ((_DWORD)result)
    {
      if ((_DWORD)v10 == 60 && (v15 = *(_QWORD *)(v9 + 8)) != 0)
      {
        result = GTMTLPointerType_requiresPatching(*(_QWORD *)(v9 + 8), a5);
        v16 = (_DWORD)result ? v15 : 0;
      }
      else
      {
        v16 = 0;
      }
      for (; v11; --v11)
      {
        result = (uint64_t)apr_array_push(a4);
        *(_QWORD *)result = v10;
        *(_QWORD *)(result + 8) = a2;
        *(_QWORD *)(result + 16) = a3;
        *(_QWORD *)(result + 24) = v16;
        a2 += v12;
        a3 += *(unsigned int *)(v9 + 16);
      }
    }
  }
  return result;
}

uint64_t GTMTLDataType_requiresPatching(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1 > 79)
  {
    switch(a1)
    {
      case 's':
        result = (a2 >> 6) & 1;
        break;
      case 't':
        result = (a2 >> 7) & 1;
        break;
      case 'u':
      case 'v':
        result = (a2 >> 8) & 1;
        break;
      default:
        if (a1 == 80)
          result = (a2 >> 5) & 1;
        else
          result = 0;
        break;
    }
  }
  else
  {
    v2 = a2 & 1;
    v3 = (a2 >> 1) & 1;
    v4 = (a2 >> 3) & 1;
    if (a1 != 60)
      LODWORD(v4) = 0;
    if (a1 != 59)
      LODWORD(v3) = v4;
    if (a1 != 58)
      v2 = v3;
    if (a1 <= 77)
      return v2;
    else
      return (a2 >> 4) & 1;
  }
  return result;
}

uint64_t GTMTLPointerType_requiresPatching(uint64_t a1, unint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 22);
  if (v2 == 2)
    return GTMTLArrayType_requiresPatching(*(_QWORD *)(a1 + 8), a2);
  if (v2 == 1)
    return GTMTLStructType_requiresPatching(*(_QWORD *)(a1 + 8), a2);
  return GTMTLDataType_requiresPatching(*(unsigned __int8 *)(a1 + 22), a2);
}

uint64_t GTMTLArrayType_requiresPatching(uint64_t a1, unint64_t a2)
{
  int v2;

  while (1)
  {
    v2 = *(unsigned __int8 *)(a1 + 24);
    if (v2 != 2)
      break;
    a1 = *(_QWORD *)(a1 + 8);
  }
  if (v2 == 1)
    return GTMTLStructType_requiresPatching(*(_QWORD *)(a1 + 8));
  else
    return GTMTLDataType_requiresPatching(*(unsigned __int8 *)(a1 + 24), a2);
}

BOOL GTMTLStructType_isEqual(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 == *(_DWORD *)(a2 + 16))
  {
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 0;
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(a2 + 8);
      do
      {
        v7 = v5 + 32 * v3;
        v8 = v6 + 32 * v3;
        if (*(_DWORD *)(v7 + 16) != *(_DWORD *)(v8 + 16))
          break;
        v9 = *(unsigned __int8 *)(v7 + 24);
        if (v9 != *(unsigned __int8 *)(v8 + 24))
          break;
        if (v9 == 1)
        {
          if (!GTMTLStructType_isEqual(*(_QWORD *)(v5 + 32 * v3 + 8), *(_QWORD *)(v6 + 32 * v3 + 8)))
            return v4;
        }
        else if (v9 == 2)
        {
          v10 = *(_QWORD *)(v5 + 32 * v3 + 8);
          v11 = v6 + 32 * v3;
          while (1)
          {
            v11 = *(_QWORD *)(v11 + 8);
            if (*(unsigned __int16 *)(v10 + 20) != *(unsigned __int16 *)(v11 + 20))
              return v4;
            v12 = *(unsigned __int8 *)(v10 + 24);
            if (v12 != *(unsigned __int8 *)(v11 + 24))
              return v4;
            if (v12 != 2)
            {
              if (v12 != 1 || (GTMTLStructType_isEqual(*(_QWORD *)(v10 + 8), *(_QWORD *)(v11 + 8)) & 1) != 0)
                break;
              return v4;
            }
            v10 = *(_QWORD *)(v10 + 8);
          }
        }
        v4 = ++v3 >= v2;
      }
      while (v3 != v2);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

char *DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer(id *a1, unint64_t a2, apr_pool_t *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  apr_array_header_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  apr_hash_index_t *v21;
  apr_hash_index_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  id v26;
  void *v27;
  _QWORD *v28;
  int v29;
  const void *v30;
  uint64_t v31;
  apr_hash_index_t *v32;
  apr_hash_index_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  id v37;
  void *v38;
  _QWORD *v39;
  int v40;
  const void *v41;
  uint64_t v42;
  apr_hash_index_t *v43;
  apr_hash_index_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  id v48;
  void *v49;
  _QWORD *v50;
  int v51;
  const void *v52;
  uint64_t v53;
  apr_hash_index_t *v54;
  apr_hash_index_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  id v59;
  void *v60;
  _QWORD *v61;
  int v62;
  const void *v63;
  uint64_t v64;
  apr_hash_index_t *v65;
  apr_hash_index_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  id v70;
  void *v71;
  _QWORD *v72;
  int v73;
  const void *v74;
  uint64_t v75;
  apr_hash_index_t *v76;
  apr_hash_index_t *v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  id v81;
  void *v82;
  _QWORD *v83;
  int v84;
  const void *v85;
  uint64_t v86;
  apr_hash_index_t *v87;
  apr_hash_index_t *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  id v92;
  void *v93;
  _QWORD *v94;
  int v95;
  const void *v96;
  uint64_t v97;
  apr_hash_index_t *v98;
  apr_hash_index_t *v99;
  _QWORD *v100;
  _QWORD *v101;
  void *v102;
  id v103;
  void *v104;
  _QWORD *v105;
  int v106;
  const void *v107;
  id v108;
  uint64_t v109;
  unsigned int v110;
  _QWORD *Object;
  apr_pool_t *v112;
  int v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  _BYTE *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v145;
  uint64_t *v146;
  _BYTE *v147;
  uint64_t *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  _BYTE *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  _BYTE *v163;
  uint64_t v164;
  _BYTE *v165;
  void *v166;
  id v167;
  void *v168;
  id v169;
  void *v170;
  id v171;
  id v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  apr_array_header_t *v179;
  unsigned __int8 *v180;
  int v181;
  id v182;
  id v183;
  id v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t nelts;
  apr_array_header_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  id v196;
  int v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  id v214;
  id v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *elts;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  id v235;
  void *v236;
  char *v237;
  int v238;
  void *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v244;
  apr_hash_t *v245;
  __int128 v246;
  unint64_t v247;
  __int128 v248;
  unint64_t v249;
  uint64_t v250;
  __int128 v251;
  apr_hash_t *v252;
  unint64_t v253;
  _DWORD *v254;
  id *v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  _OWORD v262[53];
  uint64_t v263;
  _BYTE __dst[11096];
  __int128 v265;
  __int128 v266;
  _OWORD v267[13];
  apr_pool_t *p[2];

  v5 = (unsigned int *)(a1 + 2810);
  v235 = a1[1];
  v6 = (uint64_t *)*a1;
  v7 = *(_QWORD *)(v6[15] + 24)
     + (*GroupBuilder_getCommandBuffer(*(_DWORD *)(*((_QWORD *)*a1 + 14) + 12), *(_QWORD **)(*((_QWORD *)*a1 + 14) + 24), *v5) << 6);
  *(_QWORD *)__dst = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v7, *(unsigned __int8 *)(v7 + 13), v6[2]) + 1);
  v8 = *find_entry(v6[18], __dst, 8uLL, 0);
  v254 = v5;
  if (v8)
    v9 = *(_QWORD *)(v8 + 32);
  else
    v9 = 0;
  v255 = a1;
  v10 = a1[1];
  v11 = apr_array_make(a3, *(_DWORD *)(*(_QWORD *)(v9 + 8) + 12), 24);
  *(_QWORD *)&v256 = v11;
  v245 = apr_hash_make(a3);
  *((_QWORD *)&v256 + 1) = v245;
  *(_QWORD *)&v246 = apr_hash_make(a3);
  *((_QWORD *)&v246 + 1) = apr_hash_make(a3);
  v257 = v246;
  *(_QWORD *)&v248 = apr_hash_make(a3);
  *((_QWORD *)&v248 + 1) = apr_hash_make(a3);
  v258 = v248;
  *(_QWORD *)&v251 = apr_hash_make(a3);
  *((_QWORD *)&v251 + 1) = apr_hash_make(a3);
  v259 = v251;
  v252 = apr_hash_make(a3);
  *(_QWORD *)&v260 = v252;
  *((_QWORD *)&v260 + 1) = apr_hash_make(a3);
  v261 = 0;
  v12 = *(_QWORD *)(v9 + 8);
  if (*(int *)(v12 + 12) >= 1)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(*(_QWORD *)(v12 + 24) + v13);
      v16 = apr_array_push(v11);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bufferForKey:", v15[2]));
      v18 = DEVICEOBJECT(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

      *v16 = objc_msgSend(v19, "gpuAddress");
      v16[1] = objc_msgSend(v19, "length");
      v16[2] = *v15;

      ++v14;
      v12 = *(_QWORD *)(v9 + 8);
      v13 += 24;
    }
    while (v14 < *(int *)(v12 + 12));
  }
  qsort(v11->elts, v11->nelts, v11->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  v20 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 16) = v20;
  *(_DWORD *)(v20 + 40) = 0;
  v21 = apr_hash_next((apr_hash_index_t *)(v20 + 16));
  if (v21)
  {
    v22 = v21;
    do
    {
      v23 = *(_QWORD **)(*((_QWORD *)v22 + 1) + 32);
      v24 = apr_palloc(a3, 0x20uLL);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "textureForKey:", v23[1]));
      v26 = DEVICEOBJECT(v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

      *v24 = objc_msgSend(v27, "uniqueIdentifier");
      v24[1] = *v23;
      v24[2] = objc_msgSend(v27, "gpuResourceID");
      v28 = v24 + 2;
      v29 = *(unsigned __int8 *)(v9 + 88);
      if (v29 != 1)
        v28 = v24;
      if (v29 == 2)
        v30 = v24 + 3;
      else
        v30 = v28;
      apr_hash_set(v245, v30, 8, v24);

      v22 = apr_hash_next(v22);
    }
    while (v22);
  }
  v31 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 16) = v31;
  *(_DWORD *)(v31 + 40) = 0;
  v32 = apr_hash_next((apr_hash_index_t *)(v31 + 16));
  if (v32)
  {
    v33 = v32;
    do
    {
      v34 = *(_QWORD **)(*((_QWORD *)v33 + 1) + 32);
      v35 = apr_palloc(a3, 0x20uLL);
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "samplerStateForKey:", v34[1]));
      v37 = DEVICEOBJECT(v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);

      *v35 = objc_msgSend(v38, "uniqueIdentifier");
      v35[1] = *v34;
      v35[2] = objc_msgSend(v38, "gpuResourceID");
      v39 = v35 + 2;
      v40 = *(unsigned __int8 *)(v9 + 88);
      if (v40 != 1)
        v39 = v35;
      if (v40 == 2)
        v41 = v35 + 3;
      else
        v41 = v39;
      apr_hash_set((apr_hash_t *)v246, v41, 8, v35);

      v33 = apr_hash_next(v33);
    }
    while (v33);
  }
  v42 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v42 + 24) = 0;
  *(_QWORD *)(v42 + 32) = 0;
  *(_QWORD *)(v42 + 16) = v42;
  *(_DWORD *)(v42 + 40) = 0;
  v43 = apr_hash_next((apr_hash_index_t *)(v42 + 16));
  if (v43)
  {
    v44 = v43;
    do
    {
      v45 = *(_QWORD **)(*((_QWORD *)v44 + 1) + 32);
      v46 = apr_palloc(a3, 0x20uLL);
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "renderPipelineStateForKey:", v45[1]));
      v48 = DEVICEOBJECT(v47);
      v49 = (void *)objc_claimAutoreleasedReturnValue(v48);

      *v46 = objc_msgSend(v49, "uniqueIdentifier");
      v46[1] = *v45;
      v46[2] = objc_msgSend(v49, "gpuResourceID");
      v50 = v46 + 2;
      v51 = *(unsigned __int8 *)(v9 + 88);
      if (v51 != 1)
        v50 = v46;
      if (v51 == 2)
        v52 = v46 + 3;
      else
        v52 = v50;
      apr_hash_set(*((apr_hash_t **)&v246 + 1), v52, 8, v46);

      v44 = apr_hash_next(v44);
    }
    while (v44);
  }
  v53 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v53 + 24) = 0;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 16) = v53;
  *(_DWORD *)(v53 + 40) = 0;
  v54 = apr_hash_next((apr_hash_index_t *)(v53 + 16));
  if (v54)
  {
    v55 = v54;
    do
    {
      v56 = *(_QWORD **)(*((_QWORD *)v55 + 1) + 32);
      v57 = apr_palloc(a3, 0x20uLL);
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "computePipelineStateForKey:", v56[1]));
      v59 = DEVICEOBJECT(v58);
      v60 = (void *)objc_claimAutoreleasedReturnValue(v59);

      *v57 = objc_msgSend(v60, "uniqueIdentifier");
      v57[1] = *v56;
      v57[2] = objc_msgSend(v60, "gpuResourceID");
      v61 = v57 + 2;
      v62 = *(unsigned __int8 *)(v9 + 88);
      if (v62 != 1)
        v61 = v57;
      if (v62 == 2)
        v63 = v57 + 3;
      else
        v63 = v61;
      apr_hash_set((apr_hash_t *)v248, v63, 8, v57);

      v55 = apr_hash_next(v55);
    }
    while (v55);
  }
  v64 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v64 + 24) = 0;
  *(_QWORD *)(v64 + 32) = 0;
  *(_QWORD *)(v64 + 16) = v64;
  *(_DWORD *)(v64 + 40) = 0;
  v65 = apr_hash_next((apr_hash_index_t *)(v64 + 16));
  if (v65)
  {
    v66 = v65;
    do
    {
      v67 = *(_QWORD **)(*((_QWORD *)v66 + 1) + 32);
      v68 = apr_palloc(a3, 0x20uLL);
      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "indirectCommandBufferForKey:", v67[1]));
      v70 = DEVICEOBJECT(v69);
      v71 = (void *)objc_claimAutoreleasedReturnValue(v70);

      *v68 = objc_msgSend(v71, "uniqueIdentifier");
      v68[1] = *v67;
      v68[2] = objc_msgSend(v71, "gpuResourceID");
      v72 = v68 + 2;
      v73 = *(unsigned __int8 *)(v9 + 88);
      if (v73 != 1)
        v72 = v68;
      if (v73 == 2)
        v74 = v68 + 3;
      else
        v74 = v72;
      apr_hash_set(*((apr_hash_t **)&v248 + 1), v74, 8, v68);

      v66 = apr_hash_next(v66);
    }
    while (v66);
  }
  v75 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v75 + 24) = 0;
  *(_QWORD *)(v75 + 32) = 0;
  *(_QWORD *)(v75 + 16) = v75;
  *(_DWORD *)(v75 + 40) = 0;
  v76 = apr_hash_next((apr_hash_index_t *)(v75 + 16));
  if (v76)
  {
    v77 = v76;
    do
    {
      v78 = *(_QWORD **)(*((_QWORD *)v77 + 1) + 32);
      v79 = apr_palloc(a3, 0x20uLL);
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "visibleFunctionTableForKey:", v78[1]));
      v81 = DEVICEOBJECT(v80);
      v82 = (void *)objc_claimAutoreleasedReturnValue(v81);

      *v79 = objc_msgSend(v82, "uniqueIdentifier");
      v79[1] = *v78;
      v79[2] = objc_msgSend(v82, "gpuResourceID");
      v83 = v79 + 2;
      v84 = *(unsigned __int8 *)(v9 + 88);
      if (v84 != 1)
        v83 = v79;
      if (v84 == 2)
        v85 = v79 + 3;
      else
        v85 = v83;
      apr_hash_set((apr_hash_t *)v251, v85, 8, v79);

      v77 = apr_hash_next(v77);
    }
    while (v77);
  }
  v86 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v86 + 24) = 0;
  *(_QWORD *)(v86 + 32) = 0;
  *(_QWORD *)(v86 + 16) = v86;
  *(_DWORD *)(v86 + 40) = 0;
  v87 = apr_hash_next((apr_hash_index_t *)(v86 + 16));
  if (v87)
  {
    v88 = v87;
    do
    {
      v89 = *(_QWORD **)(*((_QWORD *)v88 + 1) + 32);
      v90 = apr_palloc(a3, 0x20uLL);
      v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "intersectionFunctionTableForKey:", v89[1]));
      v92 = DEVICEOBJECT(v91);
      v93 = (void *)objc_claimAutoreleasedReturnValue(v92);

      *v90 = objc_msgSend(v93, "uniqueIdentifier");
      v90[1] = *v89;
      v90[2] = objc_msgSend(v93, "gpuResourceID");
      v94 = v90 + 2;
      v95 = *(unsigned __int8 *)(v9 + 88);
      if (v95 != 1)
        v94 = v90;
      if (v95 == 2)
        v96 = v90 + 3;
      else
        v96 = v94;
      apr_hash_set(*((apr_hash_t **)&v251 + 1), v96, 8, v90);

      v88 = apr_hash_next(v88);
    }
    while (v88);
  }
  v97 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v97 + 24) = 0;
  *(_QWORD *)(v97 + 32) = 0;
  *(_QWORD *)(v97 + 16) = v97;
  *(_DWORD *)(v97 + 40) = 0;
  v98 = apr_hash_next((apr_hash_index_t *)(v97 + 16));
  if (v98)
  {
    v99 = v98;
    do
    {
      v100 = *(_QWORD **)(*((_QWORD *)v99 + 1) + 32);
      v101 = apr_palloc(a3, 0x20uLL);
      v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "accelerationStructureForKey:", v100[1]));
      v103 = DEVICEOBJECT(v102);
      v104 = (void *)objc_claimAutoreleasedReturnValue(v103);

      *v101 = objc_msgSend(v104, "uniqueIdentifier");
      v101[1] = *v100;
      v101[2] = objc_msgSend(v104, "gpuResourceID");
      v105 = v101 + 2;
      v106 = *(unsigned __int8 *)(v9 + 88);
      if (v106 != 1)
        v105 = v101;
      if (v106 == 2)
        v107 = v101 + 3;
      else
        v107 = v105;
      apr_hash_set(v252, v107, 8, v101);

      v99 = apr_hash_next(v99);
    }
    while (v99);
  }

  GTMTLIndirectResources_rehash((apr_hash_index_t *)__dst, (uint64_t)&v256, 1, a3);
  v258 = *(_OWORD *)&__dst[32];
  v259 = *(_OWORD *)&__dst[48];
  v260 = *(_OWORD *)&__dst[64];
  v261 = *(_QWORD *)&__dst[80];
  v256 = *(_OWORD *)__dst;
  v257 = *(_OWORD *)&__dst[16];
  v108 = *v255;
  if (*v254)
    v109 = *(_QWORD *)(*((_QWORD *)v108 + 15) + 24) + ((unint64_t)(*v254 - 1) << 6);
  else
    v109 = 0;
  *(_OWORD *)p = 0u;
  memset(v267, 0, sizeof(v267));
  v110 = *(_DWORD *)(v109 + 8);
  v266 = 0u;
  v265 = 0u;
  if (v110 >> 2 == 1073737833)
  {
    p[1] = *(apr_pool_t **)v255[19];
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)&v267[7] + 8, *((_DWORD ***)v108 + 5), *(_QWORD *)v109, p[1]);
    GetExecuteCommandsInBufferArgs((uint64_t)&v265, v109, *((_QWORD *)v108 + 2));
    Object = GTMTLSMContext_getObject(**((_QWORD **)v108 + 5), v265, *(_QWORD *)v109);
    GTMTLCreateIndirectCommandEncoder((uint64_t)v267 + 8, Object[13]);
    v112 = (apr_pool_t *)(*((_QWORD *)&v266 + 1) + *(_QWORD *)&v267[7] * v254[1]);
    p[0] = v112;
  }
  else
  {
    v112 = 0;
  }
  v113 = *((_DWORD *)v255 + 2828);
  if (v113 == 28)
  {
    memcpy(__dst, v255 + 1421, 0x8D0uLL);
    if (*(_DWORD *)(v109 + 8) >> 2 == 1073737833)
    {
      GTMTLSMComputeCommandEncoder_loadIndirectCommand((uint64_t)__dst, (_QWORD *)v267 + 1, (uint64_t)v112, (uint64_t *)&v267[7] + 1);
      apr_pool_clear(p[1]);
    }
    v122 = GTMTLSMContext_getObject(**((_QWORD **)v108 + 5), *(uint64_t *)&__dst[8], *(_QWORD *)v109);
    v123 = v122[8];
    memset(v262, 0, 512);
    GTMTLSMComputePipelineState_computePipelineDescriptor(*((uint64_t **)v108 + 5), (uint64_t)v122, v262, a3);
    v124 = a2 + 1346;
    if (*(_WORD *)(v123 + 94))
    {
      v125 = 0;
      v126 = *(_QWORD *)(v123 + 32);
      v127 = (unsigned __int8 *)(v126 + 18);
      while (v124 != *v127 || *(v127 - 2) > 1u)
      {
        v127 += 56;
        if (*(unsigned __int16 *)(v123 + 94) == ++v125)
          goto LABEL_101;
      }
      v145 = v126 + 56 * v125;
    }
    else
    {
LABEL_101:
      v145 = 0;
    }
    v129 = v263;
    v138 = &__dst[8 * v124];
    v130 = *((_QWORD *)v138 + 4);
    v131 = *((_QWORD *)v138 + 35);
    goto LABEL_150;
  }
  if (v113 != 70)
  {
    v145 = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    goto LABEL_150;
  }
  memcpy(__dst, v255 + 1421, sizeof(__dst));
  if (*(_DWORD *)(v109 + 8) >> 2 == 1073737833)
  {
    GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)__dst, (_QWORD *)v267 + 1, (uint64_t)v112, (uint64_t *)&v267[7] + 1);
    apr_pool_clear(p[1]);
  }
  v114 = GTMTLSMContext_getObject(**((_QWORD **)v108 + 5), *(uint64_t *)&__dst[8544], *(_QWORD *)v109);
  v115 = v114[7];
  if (a2 < 0xFFFFFFFFFFFFFBBELL)
  {
    if (a2 < 0xFFFFFFFFFFFFFB7ELL)
    {
      if (a2 < 0xFFFFFFFFFFFFFB3ELL)
      {
        if (a2 >= 0xFFFFFFFFFFFFFAFELL)
        {
          v150 = a2 + 1282;
          v151 = *(unsigned __int16 *)(v115 + 204);
          if (*(_WORD *)(v115 + 204))
          {
            v152 = 0;
            v153 = *(_QWORD *)(v115 + 40);
            v154 = (unsigned __int8 *)(v153 + 18);
            while (v150 != *v154 || *(v154 - 2) > 1u)
            {
              v154 += 56;
              if (v151 == ++v152)
                goto LABEL_134;
            }
            v145 = v153 + 56 * v152;
          }
          else
          {
LABEL_134:
            v145 = 0;
          }
          v146 = (uint64_t *)(v114[9] + 368);
          v165 = &__dst[8 * v150];
          v148 = (uint64_t *)(v165 + 3584);
          v149 = (unint64_t *)(v165 + 3832);
          goto LABEL_149;
        }
        v157 = a2 + 1346;
        v158 = *(unsigned __int16 *)(v115 + 202);
        if (*(_WORD *)(v115 + 202))
        {
          v159 = 0;
          v160 = *(_QWORD *)(v115 + 56);
          v161 = (unsigned __int8 *)(v160 + 18);
          while (v157 != *v161 || *(v161 - 2) > 1u)
          {
            v161 += 56;
            if (v158 == ++v159)
              goto LABEL_144;
          }
          v145 = v160 + 56 * v159;
        }
        else
        {
LABEL_144:
          v145 = 0;
        }
        v146 = (uint64_t *)(v114[8] + 120);
        v163 = &__dst[8 * v157];
        v148 = (uint64_t *)(v163 + 6896);
        v164 = 7144;
      }
      else
      {
        v139 = a2 + 1218;
        v140 = *(unsigned __int16 *)(v115 + 206);
        if (*(_WORD *)(v115 + 206))
        {
          v141 = 0;
          v142 = *(_QWORD *)(v115 + 48);
          v143 = (unsigned __int8 *)(v142 + 18);
          while (v139 != *v143 || *(v143 - 2) > 1u)
          {
            v143 += 56;
            if (v140 == ++v141)
              goto LABEL_123;
          }
          v145 = v142 + 56 * v141;
        }
        else
        {
LABEL_123:
          v145 = 0;
        }
        v146 = (uint64_t *)(v114[9] + 360);
        v163 = &__dst[8 * v139];
        v148 = (uint64_t *)(v163 + 5240);
        v164 = 5488;
      }
      v149 = (unint64_t *)&v163[v164];
    }
    else
    {
      v132 = a2 + 1154;
      v133 = *(unsigned __int16 *)(v115 + 200);
      if (*(_WORD *)(v115 + 200))
      {
        v134 = 0;
        v135 = *(_QWORD *)(v115 + 32);
        v136 = (unsigned __int8 *)(v135 + 18);
        while (v132 != *v136 || *(v136 - 2) > 1u)
        {
          v136 += 56;
          if (v133 == ++v134)
            goto LABEL_112;
        }
        v145 = v135 + 56 * v134;
      }
      else
      {
LABEL_112:
        v145 = 0;
      }
      v146 = (uint64_t *)(v114[6] + 1176);
      v156 = &__dst[8 * v132];
      v148 = (uint64_t *)(v156 + 1928);
      v149 = (unint64_t *)(v156 + 2176);
    }
  }
  else
  {
    v116 = a2 + 1090;
    v117 = *(unsigned __int16 *)(v115 + 198);
    if (*(_WORD *)(v115 + 198))
    {
      v118 = 0;
      v119 = *(_QWORD *)(v115 + 24);
      v120 = (unsigned __int8 *)(v119 + 18);
      while (v116 != *v120 || *(v120 - 2) > 1u)
      {
        v120 += 56;
        if (v117 == ++v118)
          goto LABEL_90;
      }
      v145 = v119 + 56 * v118;
    }
    else
    {
LABEL_90:
      v145 = 0;
    }
    v146 = (uint64_t *)(v114[6] + 1296);
    v147 = &__dst[8 * v116];
    v148 = (uint64_t *)(v147 + 24);
    v149 = (unint64_t *)(v147 + 272);
  }
LABEL_149:
  v130 = *v148;
  v129 = *v146;
  v131 = *v149;
LABEL_150:
  v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v235, "functionForKey:", v129));
  v167 = DEVICEOBJECT(v166);
  v168 = (void *)objc_claimAutoreleasedReturnValue(v167);

  v234 = v168;
  v169 = objc_msgSend(v168, "newArgumentEncoderWithBufferIndex:", *(unsigned __int8 *)(v145 + 18));
  v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v235, "bufferForKey:", v130));
  v171 = objc_msgSend(v170, "length");
  v172 = v255[3];
  v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "bufferWithLength:alignment:", v171, objc_msgSend(v169, "alignment")));
  v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "blitCommandEncoder"));
  v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "heapBuffer"));
  v249 = (unint64_t)v171;
  objc_msgSend(v174, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v170, 0, v175, objc_msgSend(v173, "heapLocation"), v171);

  v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "commandBuffer"));
  v177 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), CFSTR("com.apple.gputools.replay"), CFSTR("DecodeAB Blit")));
  objc_msgSend(v176, "setLabel:", v177);

  objc_msgSend(v172, "commitCommandBuffer");
  objc_msgSend(v176, "waitUntilCompleted");
  v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "heapBuffer"));

  v233 = v173;
  v237 = (char *)objc_msgSend(v173, "heapLocation");

  v179 = apr_array_make(a3, 8, 32);
  if (*(unsigned __int8 *)(v145 + 16) > 1u)
    goto LABEL_156;
  v180 = *(unsigned __int8 **)(v145 + 8);
  if (!v180)
    goto LABEL_156;
  v181 = *v180;
  if (v181 == 1)
    goto LABEL_157;
  if (v181 == 60 && v180[22] == 1)
    v180 = (unsigned __int8 *)*((_QWORD *)v180 + 1);
  else
LABEL_156:
    v180 = 0;
LABEL_157:
  GTMTLStructType_fillArgumentIndicesRequiresPatching(v180, 0, 0, v179, 0x1FFuLL);
  v232 = v178;
  v182 = DEVICEOBJECT(v178);
  v183 = (id)objc_claimAutoreleasedReturnValue(v182);
  v184 = v169;
  v185 = (unint64_t)objc_msgSend(v184, "encodedLength");
  v231 = v184;
  v236 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "layout"));
  v186 = v131 % v185;
  v247 = v185;
  v187 = (v249 - v131 % v185) / v185;
  nelts = v179->nelts;
  v189 = apr_array_make(a3, (int)nelts + (int)v187 + (int)v187 * (int)nelts + 2, 8);
  *(_QWORD *)apr_array_push(v189) = v187;
  *(_QWORD *)apr_array_push(v189) = nelts;
  if (v179->nelts >= 1)
  {
    v190 = 0;
    v191 = 8;
    do
    {
      v192 = *(_QWORD *)&v179->elts[v191];
      *(_QWORD *)apr_array_push(v189) = v192;
      ++v190;
      v191 += 32;
    }
    while (v190 < v179->nelts);
  }
  v193 = v186 + v247;
  if (v186 + v247 <= v249)
  {
    v239 = v183;
    v194 = v261;
    v238 = v261;
    while (1)
    {
      v195 = v193;
      *(_QWORD *)apr_array_push(v189) = v186;
      if (!v194)
        break;
      if (v194 == 1)
      {
        v253 = v195;
        v196 = v183;
        v197 = v179->nelts;
        if (v197 >= 1)
        {
          v198 = v196;
          v199 = 0;
          v200 = 0;
          v201 = &v237[v186];
          v202 = v256;
          while (1)
          {
            v203 = &v179->elts[v199];
            v204 = *(_QWORD *)v203;
            v205 = *(_QWORD *)v203 - 58;
            if (v205 <= 0x3C)
              break;
LABEL_187:
            ++v200;
            v199 += 32;
            if (v200 >= v197)
              goto LABEL_221;
          }
          v206 = *((_QWORD *)v203 + 2);
          if (((1 << v205) & 0x1E00000000700003) == 0)
          {
            if (*(_QWORD *)v203 != 60)
              goto LABEL_187;
            v210 = *(_QWORD *)&v201[v206 + (_QWORD)objc_msgSend(objc_retainAutorelease(v198), "contents")];
            v213 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(v202 + 24), *(int *)(v202 + 12), v210);
            if (v213)
              v210 = v213[2] + v210 - *v213;
            goto LABEL_186;
          }
          v207 = objc_msgSend(objc_retainAutorelease(v198), "contents");
          v208 = 0;
          if (v204 > 0x72u)
          {
            if (v204 - 117 < 2)
            {
              v209 = (uint64_t *)&v260;
              goto LABEL_182;
            }
            v209 = (uint64_t *)&v259;
            if (v204 == 115)
              goto LABEL_182;
            v209 = (uint64_t *)&v259 + 1;
            if (v204 == 116)
              goto LABEL_182;
          }
          else
          {
            if (v204 > 0x4Du)
            {
              v209 = (uint64_t *)&v257 + 1;
              if (v204 != 78)
              {
                v209 = (uint64_t *)&v258;
                if (v204 != 79)
                {
                  v209 = (uint64_t *)&v258 + 1;
                  if (v204 != 80)
                    goto LABEL_183;
                }
              }
LABEL_182:
              v208 = *v209;
              goto LABEL_183;
            }
            v209 = (uint64_t *)&v256 + 1;
            if (v204 == 58)
              goto LABEL_182;
            v209 = (uint64_t *)&v257;
            if (v204 == 59)
              goto LABEL_182;
          }
LABEL_183:
          v210 = *(_QWORD *)&v201[v206 + (_QWORD)v207];
          *(_QWORD *)__dst = v210;
          v211 = *find_entry(v208, __dst, 8uLL, 0);
          if (v211)
          {
            v212 = *(_QWORD *)(v211 + 32);
            if (v212)
              v210 = *(_QWORD *)(v212 + 8);
          }
LABEL_186:
          *(_QWORD *)apr_array_push(v189) = v210;
          v197 = v179->nelts;
          goto LABEL_187;
        }
        goto LABEL_221;
      }
LABEL_222:
      v193 = v195 + v247;
      v186 = v195;
      if (v195 + v247 > v249)
        goto LABEL_223;
    }
    v253 = v195;
    v214 = v183;
    v215 = v236;
    v216 = v179->nelts;
    if (v216 < 1)
    {
LABEL_220:

LABEL_221:
      v183 = v239;

      v194 = v238;
      v195 = v253;
      goto LABEL_222;
    }
    v217 = 0;
    v218 = 0;
    v250 = v260;
    v219 = &v237[v186];
    v241 = v259;
    v240 = v258;
    v244 = v257;
    v242 = v256;
    while (1)
    {
      v220 = (uint64_t *)&v179->elts[v217];
      v222 = *v220;
      v221 = v220[1];
      if (*v220 > 78)
        break;
      if (v222 > 59)
      {
        if (v222 == 60)
        {
          v223 = (char *)objc_msgSend(v215, "virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
          v225 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(v242 + 24), *(int *)(v242 + 12), (unint64_t)v223);
          if (v225)
            v223 = &v223[v225[2] - *v225];
          goto LABEL_218;
        }
        if (v222 == 78)
        {
          v223 = (char *)objc_msgSend(v215, "uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
          *(_QWORD *)__dst = v223;
          v224 = *((_QWORD *)&v244 + 1);
          goto LABEL_215;
        }
      }
      else
      {
        if (v222 == 58)
        {
          v223 = (char *)objc_msgSend(v215, "uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
          *(_QWORD *)__dst = v223;
          v224 = *((_QWORD *)&v242 + 1);
LABEL_215:
          v227 = *find_entry(v224, __dst, 8uLL, 0);
          if (v227)
          {
            v228 = *(_QWORD *)(v227 + 32);
            if (v228)
              v223 = *(char **)(v228 + 8);
          }
LABEL_218:
          *(_QWORD *)apr_array_push(v189) = v223;
          v216 = v179->nelts;
          goto LABEL_219;
        }
        if (v222 == 59)
        {
          v223 = (char *)objc_msgSend(v215, "uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
          *(_QWORD *)__dst = v223;
          v224 = v244;
          goto LABEL_215;
        }
      }
LABEL_219:
      ++v218;
      v217 += 32;
      if (v218 >= v216)
        goto LABEL_220;
    }
    switch(v222)
    {
      case 's':
        v223 = (char *)objc_msgSend(v215, "uniqueIdentifierForVisibleFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
        *(_QWORD *)__dst = v223;
        v224 = v241;
        goto LABEL_215;
      case 't':
        v223 = (char *)objc_msgSend(v215, "uniqueIdentifierForIntersectionFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
        *(_QWORD *)__dst = v223;
        v224 = *((_QWORD *)&v241 + 1);
        goto LABEL_215;
      case 'u':
        v226 = (char *)objc_msgSend(v215, "uniqueIdentifierForPrimitiveAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
        goto LABEL_213;
      case 'v':
        v226 = (char *)objc_msgSend(v215, "uniqueIdentifierForInstanceAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
LABEL_213:
        v223 = v226;
        *(_QWORD *)__dst = v226;
        v224 = v250;
        goto LABEL_215;
      default:
        if (v222 == 79)
        {
          v223 = (char *)objc_msgSend(v215, "uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
          *(_QWORD *)__dst = v223;
          v224 = v240;
        }
        else
        {
          if (v222 != 80)
            goto LABEL_219;
          v223 = (char *)objc_msgSend(v215, "uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:", v221, v214, v219);
          *(_QWORD *)__dst = v223;
          v224 = *((_QWORD *)&v240 + 1);
        }
        break;
    }
    goto LABEL_215;
  }
LABEL_223:
  elts = v189->elts;

  return elts;
}

id GTMTLReplayDefaults_logCommandBufferHandlers()
{
  __CFString *v0;
  void *v1;
  id v2;

  v0 = CFSTR("com.apple.gputools.replay.logCommandBufferHandlers");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v1, "BOOLForKey:", CFSTR("com.apple.gputools.replay.logCommandBufferHandlers"));

  return v2;
}

void GTMTLReplayController_restoreRenderCommandEncoder(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v22;
  void *v23;
  void *v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  int v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  const char *v69;

  v7 = a3 + 10012;
  v8 = a2 + 10012;
  v9 = a1;
  v10 = a4;
  v35 = v9;
  v11 = *(_QWORD *)(a3 + 8544);
  if (*(_QWORD *)(a2 + 8544) != v11 && v11 != 0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "renderPipelineStateForKey:"));
    objc_msgSend(v35, "setRenderPipelineState:", v13);

  }
  if (*(unsigned __int8 *)(v8 + 1071) != *(unsigned __int8 *)(v7 + 1071))
    objc_msgSend(v35, "setTriangleFillMode:");
  if (*(unsigned __int8 *)(v8 + 1070) != *(unsigned __int8 *)(v7 + 1070))
    objc_msgSend(v35, "setFrontFacingWinding:");
  if (*(unsigned __int8 *)(v8 + 1068) != *(unsigned __int8 *)(v7 + 1068))
    objc_msgSend(v35, "setCullMode:");
  if (*(_QWORD *)(a2 + 9848) != *(_QWORD *)(a3 + 9848))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "depthStencilStateForKey:"));
    objc_msgSend(v35, "setDepthStencilState:", v14);

  }
  if (*(float *)(a2 + 10000) != *(float *)(a3 + 10000)
    || *(float *)(a2 + 10004) != *(float *)(a3 + 10004)
    || *(float *)(a2 + 10008) != *(float *)(a3 + 10008))
  {
    objc_msgSend(v35, "setDepthBias:slopeScale:clamp:");
  }
  if (*(unsigned __int8 *)(v8 + 1069) != *(unsigned __int8 *)(v7 + 1069))
    objc_msgSend(v35, "setDepthClipMode:");
  if (*(_DWORD *)(a2 + 10028) != *(_DWORD *)(a3 + 10028) || *(_DWORD *)(a2 + 10032) != *(_DWORD *)(a3 + 10032))
    objc_msgSend(v35, "setStencilFrontReferenceValue:backReferenceValue:");
  v15 = *(_QWORD *)(a3 + 8552);
  if (v15 != *(_QWORD *)(a2 + 8552) || memcmp((const void *)(a3 + 8560), (const void *)(a2 + 8560), 48 * v15))
    objc_msgSend(v35, "setViewports:count:", a3 + 8560, v15);
  v16 = *(_QWORD *)(a3 + 9328);
  if (v16 != *(_QWORD *)(a2 + 9328) || memcmp((const void *)(a3 + 9336), (const void *)(a2 + 9336), 32 * v16))
    objc_msgSend(v35, "setScissorRects:count:", a3 + 9336, v16);
  if ((GT_SUPPORT_0 & 2) != 0)
  {
    if (*(unsigned __int8 *)(v8 + 1072) != *(unsigned __int8 *)(v7 + 1072)
      || *(_DWORD *)(a2 + 11068) != *(_DWORD *)(a3 + 11068))
    {
      objc_msgSend(v35, "setVertexAmplificationMode:value:");
    }
    if (*(_DWORD *)(a2 + 11072) != *(_DWORD *)(a3 + 11072) || *(_QWORD *)(a2 + 9856) != *(_QWORD *)(a3 + 9856))
      objc_msgSend(v35, "setVertexAmplificationCount:viewMappings:");
  }
  if (*(_QWORD *)v8 != *(_QWORD *)v7 || *(_QWORD *)(v8 + 8) != *(_QWORD *)(v7 + 8))
  {
    LODWORD(v17) = *(_DWORD *)(a3 + 10012);
    LODWORD(v18) = *(_DWORD *)(a3 + 10016);
    LODWORD(v19) = *(_DWORD *)(a3 + 10020);
    LODWORD(v20) = *(_DWORD *)(a3 + 10024);
    objc_msgSend(v35, "setBlendColorRed:green:blue:alpha:", v17, v18, v19, v20);
  }
  if (*(unsigned __int8 *)(v8 + 1073) != *(unsigned __int8 *)(v7 + 1073)
    || (v22 = v35, *(_DWORD *)(a2 + 11076) != *(_DWORD *)(a3 + 11076)))
  {
    objc_msgSend(v35, "setVisibilityResultMode:offset:");
    v22 = v35;
  }
  v36 = a2 + 24;
  v37 = a3 + 24;
  v38 = 31;
  v39 = a2 + 272;
  v40 = a3 + 272;
  v41 = 31;
  *(_QWORD *)&v42 = a2 + 520;
  *((_QWORD *)&v42 + 1) = a3 + 520;
  *(_QWORD *)&v43 = 31;
  *((_QWORD *)&v43 + 1) = a2 + 16;
  *(_QWORD *)&v44 = a3 + 16;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = a2 + 8;
  v46 = a3 + 8;
  v47 = 1;
  v48 = a3 + 24;
  v49 = a3 + 272;
  v50 = a2 + 768;
  v51 = a3 + 768;
  v52 = 128;
  v53 = a2 + 1792;
  v54 = a3 + 1792;
  v55 = 16;
  v56 = a2 + 10036;
  v57 = a2 + 10100;
  v58 = a3 + 10036;
  v59 = a3 + 10100;
  v60 = 16;
  v61 = "setVertexBuffer:offset:atIndex:";
  v62 = "setVertexBuffer:offset:attributeStride:atIndex:";
  v63 = "setVertexAccelerationStructure:atBufferIndex:";
  v64 = "setVertexIntersectionFunctionTable:atBufferIndex:";
  v65 = "setVertexVisibleFunctionTable:atBufferIndex:";
  v66 = "setVertexBytes:length:atIndex:";
  v67 = "setVertexBytes:length:attributeStride:atIndex:";
  v68 = "setVertexTextures:withRange:";
  v69 = "setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:";
  RestoreRenderStageResources(v22, &v36, v10);
  v36 = a2 + 1928;
  v37 = a3 + 1928;
  v38 = 31;
  v39 = a2 + 2176;
  v40 = a3 + 2176;
  v41 = 31;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = a2 + 1920;
  v46 = a3 + 1920;
  v47 = 1;
  v48 = a3 + 1928;
  v49 = a3 + 2176;
  v50 = a2 + 2424;
  v51 = a3 + 2424;
  v52 = 128;
  v53 = a2 + 3448;
  v54 = a3 + 3448;
  v55 = 16;
  v56 = a2 + 10164;
  v57 = a2 + 10228;
  v58 = a3 + 10164;
  v59 = a3 + 10228;
  v60 = 16;
  v61 = "setFragmentBuffer:offset:atIndex:";
  v62 = 0;
  v63 = "setFragmentAccelerationStructure:atBufferIndex:";
  v64 = "setFragmentIntersectionFunctionTable:atBufferIndex:";
  v65 = "setFragmentVisibleFunctionTable:atBufferIndex:";
  v66 = "setFragmentBytes:length:atIndex:";
  v67 = 0;
  v68 = "setFragmentTextures:withRange:";
  v69 = "setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:";
  RestoreRenderStageResources(v35, &v36, v10);
  if (*(_QWORD *)(a2 + 9864) != *(_QWORD *)(a3 + 9864)
    || *(_DWORD *)(a2 + 10688) != *(_DWORD *)(a3 + 10688)
    || *(_DWORD *)(a2 + 10692) != *(_DWORD *)(a3 + 10692))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bufferForKey:"));
    objc_msgSend(v35, "setTessellationFactorBuffer:offset:instanceStride:", v23, *(unsigned int *)(a3 + 10688), *(unsigned int *)(a3 + 10692));

  }
  v24 = v35;
  if (*(float *)(a2 + 10676) != *(float *)(a3 + 10676))
  {
    objc_msgSend(v35, "setTessellationFactorScale:");
    v24 = v35;
  }
  v36 = a2 + 3584;
  v37 = a3 + 3584;
  v38 = 31;
  v39 = a2 + 3832;
  v40 = a3 + 3832;
  v41 = 31;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = a2 + 3576;
  v46 = a3 + 3576;
  v47 = 1;
  v48 = a3 + 3584;
  v49 = a3 + 3832;
  v50 = a2 + 4080;
  v51 = a3 + 4080;
  v52 = 128;
  v53 = a2 + 5104;
  v54 = a3 + 5104;
  v55 = 16;
  v56 = a2 + 10292;
  v57 = a2 + 10356;
  v58 = a3 + 10292;
  v59 = a3 + 10356;
  v60 = 16;
  v61 = "setObjectBuffer:offset:atIndex:";
  v62 = 0;
  v63 = "setObjectAccelerationStructure:atBufferIndex:";
  v64 = "setObjectIntersectionFunctionTable:atBufferIndex:";
  v65 = "setObjectVisibleFunctionTable:atBufferIndex:";
  v66 = "setObjectBytes:length:atIndex:";
  v67 = 0;
  v68 = "setObjectTextures:withRange:";
  v69 = "setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:";
  RestoreRenderStageResources(v24, &v36, v10);
  for (i = 0; i != 31; ++i)
  {
    v26 = *(unsigned int *)(a3 + 10944 + 4 * i);
    if ((_DWORD)v26 != *(_DWORD *)(a2 + 10944 + 4 * i))
      objc_msgSend(v35, "setObjectThreadgroupMemoryLength:atIndex:", v26, i);
  }
  v36 = a2 + 5240;
  v37 = a3 + 5240;
  v38 = 31;
  v39 = a2 + 5488;
  v40 = a3 + 5488;
  v41 = 31;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = a2 + 5232;
  v46 = a3 + 5232;
  v47 = 1;
  v48 = a3 + 5240;
  v49 = a3 + 5488;
  v50 = a2 + 5736;
  v51 = a3 + 5736;
  v52 = 128;
  v53 = a2 + 6760;
  v54 = a3 + 6760;
  v55 = 16;
  v56 = a2 + 10420;
  v57 = a2 + 10484;
  v58 = a3 + 10420;
  v59 = a3 + 10484;
  v60 = 16;
  v61 = "setMeshBuffer:offset:atIndex:";
  v62 = 0;
  v63 = "setMeshAccelerationStructure:atBufferIndex:";
  v64 = "setMeshIntersectionFunctionTable:atBufferIndex:";
  v65 = "setMeshVisibleFunctionTable:atBufferIndex:";
  v66 = "setMeshBytes:length:atIndex:";
  v67 = 0;
  v68 = "setMeshTextures:withRange:";
  v69 = "setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:";
  RestoreRenderStageResources(v35, &v36, v10);
  if ((GT_SUPPORT_0 & 1) != 0)
  {
    v36 = a2 + 6896;
    v37 = a3 + 6896;
    v38 = 31;
    v39 = a2 + 7144;
    v40 = a3 + 7144;
    v41 = 31;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = a2 + 6888;
    v46 = a3 + 6888;
    v47 = 1;
    v48 = a3 + 6896;
    v49 = a3 + 7144;
    v50 = a2 + 7392;
    v51 = a3 + 7392;
    v52 = 128;
    v53 = a2 + 8416;
    v54 = a3 + 8416;
    v55 = 16;
    v56 = a2 + 10548;
    v57 = a2 + 10612;
    v58 = a3 + 10548;
    v59 = a3 + 10612;
    v60 = 16;
    v61 = "setTileBuffer:offset:atIndex:";
    v62 = 0;
    v63 = "setTileAccelerationStructure:atBufferIndex:";
    v64 = "setTileIntersectionFunctionTable:atBufferIndex:";
    v65 = "setTileVisibleFunctionTable:atBufferIndex:";
    v66 = "setTileBytes:length:atIndex:";
    v67 = 0;
    v68 = "setTileTextures:withRange:";
    v69 = "setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:";
    RestoreRenderStageResources(v35, &v36, v10);
    v27 = 0;
    v28 = (unsigned int *)(a3 + 10820);
    v29 = (_DWORD *)(a2 + 10820);
    do
    {
      if (*(v29 - 31) != *(v28 - 31) || *v29 != (unint64_t)*v28)
        objc_msgSend(v35, "setThreadgroupMemoryLength:offset:atIndex:");
      ++v28;
      ++v27;
      ++v29;
    }
    while (v27 != 31);
  }
  v30 = 0;
  v31 = (_QWORD *)(a3 + 9936);
  v32 = (_QWORD *)(a2 + 9936);
  v33 = v35;
  do
  {
    if (*(v32 - 8) != *(v31 - 8))
    {
      objc_msgSend(v33, "setColorStoreAction:atIndex:");
      v33 = v35;
    }
    if (*v32 != *v31)
    {
      objc_msgSend(v33, "setColorStoreActionOptions:atIndex:");
      v33 = v35;
    }
    ++v31;
    ++v30;
    ++v32;
  }
  while (v30 != 8);
  if (*(unsigned __int8 *)(v8 + 1074) != *(unsigned __int8 *)(v7 + 1074))
  {
    objc_msgSend(v33, "setDepthStoreAction:");
    v33 = v35;
  }
  if (*(unsigned __int8 *)(v8 + 1076) != *(unsigned __int8 *)(v7 + 1076))
  {
    objc_msgSend(v33, "setDepthStoreActionOptions:");
    v33 = v35;
  }
  if (*(unsigned __int8 *)(v8 + 1075) != *(unsigned __int8 *)(v7 + 1075))
  {
    objc_msgSend(v33, "setStencilStoreAction:");
    v33 = v35;
  }
  if (*(unsigned __int8 *)(v8 + 1077) != *(unsigned __int8 *)(v7 + 1077))
  {
    objc_msgSend(v33, "setStencilStoreActionOptions:");
    v33 = v35;
  }
  if (*(float *)(a2 + 10680) != *(float *)(a3 + 10680))
  {
    objc_msgSend(v33, "setLineWidth:");
    v33 = v35;
  }
  v34 = *(unsigned __int8 *)(v7 + 1078);
  if (v34 != *(unsigned __int8 *)(v8 + 1078))
    objc_msgSend(v33, "setPrimitiveRestartEnabled:", v34 != 0);

}

void RestoreRenderStageResources(void *a1, uint64_t *a2, void *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  NSUInteger v8;
  NSUInteger v9;
  NSUInteger v10;
  NSUInteger v11;
  NSRange v12;
  NSUInteger v13;
  NSRange v14;
  NSUInteger location;
  NSUInteger length;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  NSUInteger v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t i;
  NSUInteger v45;
  NSUInteger v46;
  NSUInteger v47;
  NSUInteger v48;
  NSUInteger v49;
  NSRange v50;
  NSUInteger v51;
  NSRange v52;
  NSUInteger v53;
  NSUInteger v54;
  NSRange v55;
  NSUInteger v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t j;
  NSUInteger v64;
  NSUInteger v65;
  _OWORD *v66;
  NSRange v67;
  _OWORD v68[64];
  NSRange v69;
  NSRange v70;
  NSRange v71;

  v5 = a1;
  v6 = a3;
  v7 = CompareObjectIdRange(*a2, a2[1], a2[2]);
  v9 = v8;
  v10 = CompareObjectIdRange(a2[3], a2[4], a2[5]);
  v12.length = v11;
  if (v9)
    v13 = v7;
  else
    v13 = v10;
  if (v11)
    v12.location = v10;
  else
    v12.location = v13;
  v69.location = v13;
  v69.length = v9;
  v14 = NSUnionRange(v69, v12);
  v67 = v14;
  if (!v14.length)
    goto LABEL_39;
  location = v14.location;
  length = v14.length;
  do
  {
    *(_QWORD *)&v68[0] = location;
    if (((*(_QWORD *)(a2[13] + ((location >> 3) & 0x1FFFFFFFFFFFFFF8)) >> location) & 1) == 0
      && *(_QWORD *)(a2[1] + 8 * location))
    {
      v66 = (_OWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resourceForKey:"));
      if (objc_msgSend(v66, "conformsToProtocol:", &OBJC_PROTOCOL___MTLBuffer))
      {
        v65 = 0;
        v65 = *(_QWORD *)(a2[4] + 8 * *(_QWORD *)&v68[0]);
        v17 = a2[10];
        if (v17
          && ((*(_QWORD *)(v17 + ((*(_QWORD *)&v68[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SLOBYTE(v68[0])) & 1) != 0)
        {
          v64 = 0;
          v64 = *(_QWORD *)(a2[7] + 8 * *(_QWORD *)&v68[0]);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:", a2[29]));
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v18));

          objc_msgSend(v19, "setSelector:", a2[29]);
          objc_msgSend(v19, "setTarget:", v5);
          objc_msgSend(v19, "setArgument:atIndex:", &v66, 2);
          objc_msgSend(v19, "setArgument:atIndex:", &v65, 3);
          objc_msgSend(v19, "setArgument:atIndex:", &v64, 4);
          v20 = v19;
          v21 = 5;
        }
        else
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:", a2[28]));
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v25));

          objc_msgSend(v19, "setSelector:", a2[28]);
          objc_msgSend(v19, "setTarget:", v5);
          objc_msgSend(v19, "setArgument:atIndex:", &v66, 2);
          objc_msgSend(v19, "setArgument:atIndex:", &v65, 3);
          v20 = v19;
          v21 = 4;
        }
      }
      else
      {
        if (objc_msgSend(v66, "conformsToProtocol:", &OBJC_PROTOCOL___MTLAccelerationStructure) && a2[30])
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v22));

          v23 = a2[30];
        }
        else if (objc_msgSend(v66, "conformsToProtocol:", &OBJC_PROTOCOL___MTLIntersectionFunctionTable)
               && a2[31])
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v24));

          v23 = a2[31];
        }
        else
        {
          if (!objc_msgSend(v66, "conformsToProtocol:", &OBJC_PROTOCOL___MTLVisibleFunctionTable)
            || !a2[32])
          {
            goto LABEL_27;
          }
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v26));

          v23 = a2[32];
        }
        objc_msgSend(v19, "setSelector:", v23);
        objc_msgSend(v19, "setTarget:", v5);
        objc_msgSend(v19, "setArgument:atIndex:", &v66, 2);
        v20 = v19;
        v21 = 3;
      }
      objc_msgSend(v20, "setArgument:atIndex:", v68, v21);
      objc_msgSend(v19, "invoke");

LABEL_27:
    }
    ++location;
    --length;
  }
  while (length);
  if (a2[14])
  {
    v27 = 0;
    do
    {
      v28 = 0;
      v29 = (_DWORD)v27 << 6;
      do
      {
        v30 = *(_QWORD *)(a2[13] + 8 * v27) >> v28;
        if (!v30)
          break;
        v31 = v28 + __clz(__rbit64(v30));
        *(_QWORD *)&v68[0] = v31 + v29;
        v32 = a2[10];
        if (v32
          && ((*(_QWORD *)(v32 + (((unint64_t)(v31 + v29) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v31
                                                                                                  + v29)) & 1) != 0)
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:", a2[34]));
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v33));

          objc_msgSend(v34, "setSelector:", a2[34]);
          objc_msgSend(v34, "setTarget:", v5);
          objc_msgSend(v34, "setArgument:atIndex:", a2[15] + 8 * *(_QWORD *)&v68[0], 2);
          objc_msgSend(v34, "setArgument:atIndex:", a2[16] + 8 * *(_QWORD *)&v68[0], 3);
          objc_msgSend(v34, "setArgument:atIndex:", a2[7] + 8 * *(_QWORD *)&v68[0], 4);
          v35 = v34;
          v36 = 5;
        }
        else
        {
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:", a2[33]));
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v37));

          objc_msgSend(v34, "setSelector:", a2[33]);
          objc_msgSend(v34, "setTarget:", v5);
          objc_msgSend(v34, "setArgument:atIndex:", a2[15] + 8 * *(_QWORD *)&v68[0], 2);
          objc_msgSend(v34, "setArgument:atIndex:", a2[16] + 8 * *(_QWORD *)&v68[0], 3);
          v35 = v34;
          v36 = 4;
        }
        objc_msgSend(v35, "setArgument:atIndex:", v68, v36);
        objc_msgSend(v34, "invoke");

        v28 = v31 + 1;
      }
      while (v31 < 63);
      ++v27;
    }
    while (a2[14] > v27);
  }
LABEL_39:
  v67.location = CompareObjectIdRange(a2[17], a2[18], a2[19]);
  v67.length = v38;
  if (v38)
  {
    bzero(v68, 0x400uLL);
    v39 = 0;
    do
    {
      v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "textureForKey:", *(_QWORD *)(a2[18]
                                                                                           + 8 * (v39 + v67.location))));
      v41 = (void *)*((_QWORD *)v68 + v39);
      *((_QWORD *)v68 + v39) = v40;

      ++v39;
    }
    while (v39 < v67.length);
    v66 = v68;
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:", a2[35]));
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v42));

    objc_msgSend(v43, "setSelector:", a2[35]);
    objc_msgSend(v43, "setTarget:", v5);
    objc_msgSend(v43, "setArgument:atIndex:", &v66, 2);
    objc_msgSend(v43, "setArgument:atIndex:", &v67, 3);
    objc_msgSend(v43, "invoke");

    for (i = 1016; i != -8; i -= 8)
  }
  v45 = CompareObjectIdRange(a2[20], a2[21], a2[22]);
  v47 = v46;
  v67.location = v45;
  v67.length = v46;
  v48 = CompareFloatRange(a2[23], a2[25], a2[27]);
  v50.length = v49;
  if (v47)
    v51 = v45;
  else
    v51 = v48;
  if (v49)
    v50.location = v48;
  else
    v50.location = v51;
  v70.location = v51;
  v70.length = v47;
  v52 = NSUnionRange(v70, v50);
  v67 = v52;
  v53 = CompareFloatRange(a2[24], a2[26], a2[27]);
  v55.length = v54;
  if (v52.length)
    v56 = v52.location;
  else
    v56 = v53;
  if (v54)
    v55.location = v53;
  else
    v55.location = v56;
  v71.location = v56;
  v71.length = v52.length;
  v67 = NSUnionRange(v71, v55);
  if (v67.length)
  {
    v57 = 0;
    memset(v68, 0, 128);
    do
    {
      v58 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "samplerStateForKey:", *(_QWORD *)(a2[21]
                                                                                                + 8
                                                                                                * (v57 + v67.location))));
      v59 = (void *)*((_QWORD *)v68 + v57);
      *((_QWORD *)v68 + v57) = v58;

      ++v57;
    }
    while (v57 < v67.length);
    v60 = a2[26];
    v65 = a2[25] + 4 * v67.location;
    v66 = v68;
    v64 = v60 + 4 * v67.location;
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "methodSignatureForSelector:", a2[36]));
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSInvocation invocationWithMethodSignature:](NSInvocation, "invocationWithMethodSignature:", v61));

    objc_msgSend(v62, "setSelector:", a2[36]);
    objc_msgSend(v62, "setTarget:", v5);
    objc_msgSend(v62, "setArgument:atIndex:", &v66, 2);
    objc_msgSend(v62, "setArgument:atIndex:", &v65, 3);
    objc_msgSend(v62, "setArgument:atIndex:", &v64, 4);
    objc_msgSend(v62, "setArgument:atIndex:", &v67, 5);
    objc_msgSend(v62, "invoke");

    for (j = 120; j != -8; j -= 8)
  }

}

unint64_t CompareObjectIdRange(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = 0;
  if (a3)
  {
    while (*(_QWORD *)(a1 + 8 * v3) == *(_QWORD *)(a2 + 8 * v3))
    {
      if (a3 == ++v3)
      {
        v3 = a3;
        break;
      }
    }
  }
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = v3;
  while (v3 < a3)
  {
    v5 = a3 - 1;
    v6 = *(_QWORD *)(a1 - 8 + 8 * a3);
    v7 = *(_QWORD *)(a2 - 8 + 8 * a3--);
    if (v6 != v7)
    {
      v4 = v5 + 1;
      break;
    }
  }
  if (v4 == v3)
    return 0;
  else
    return v3;
}

unint64_t CompareFloatRange(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;

  v3 = 0;
  if (a3)
  {
    while (*(float *)(a1 + 4 * v3) == *(float *)(a2 + 4 * v3))
    {
      if (a3 == ++v3)
      {
        v3 = a3;
        break;
      }
    }
  }
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = v3;
  while (v3 < a3)
  {
    v5 = a3 - 1;
    v6 = *(float *)(a1 - 4 + 4 * a3);
    v7 = *(float *)(a2 - 4 + 4 * a3--);
    if (v6 != v7)
    {
      v4 = v5 + 1;
      break;
    }
  }
  if (v4 == v3)
    return 0;
  else
    return v3;
}

void GTMTLReplayController_restoreDefaultRenderCommandEncoder(void *a1, unint64_t a2, unint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v9;
  id v10;
  id v11;
  _OWORD v12[534];
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  memset(v12, 0, 512);
  v9 = *a4;
  v10 = a5;
  v11 = a1;
  GTMTLSMRenderCommandEncoder_init((uint64_t)v12, v9);
  v13 = 1;
  v14 = (double)a2;
  v15 = (double)a3;
  v16 = 0x3FF0000000000000;
  v17 = 1;
  v18 = a2;
  v19 = a3;
  GTMTLReplayController_restoreRenderCommandEncoder(v11, (uint64_t)v12, (uint64_t)a4, v10);

}

void GTMTLReplayController_restoreComputeCommandEncoder(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v12;
  unint64_t v13;
  NSUInteger v14;
  NSUInteger v15;
  NSUInteger v16;
  NSUInteger v17;
  NSRange v18;
  NSUInteger v19;
  NSRange v20;
  NSUInteger location;
  NSUInteger length;
  uint64_t *v23;
  void *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  void *v37;
  uint64_t j;
  unint64_t v39;
  NSUInteger v40;
  NSUInteger v41;
  NSUInteger v42;
  NSUInteger v43;
  NSRange v44;
  NSUInteger v45;
  NSRange v46;
  NSUInteger v47;
  NSUInteger v48;
  NSRange v49;
  NSUInteger v50;
  NSRange v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t k;
  uint64_t m;
  __int128 *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  NSRange v69;
  NSRange v70;
  NSRange v71;

  v7 = a1;
  v8 = a4;
  v9 = v8;
  v10 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a2 + 8) != v10 && v10 != 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "computePipelineStateForKey:"));
    objc_msgSend(v7, "setComputePipelineState:", v12);

  }
  v13 = CompareObjectIdRange(a2 + 32, a3 + 32, 0x1FuLL);
  v15 = v14;
  v16 = CompareObjectIdRange(a2 + 280, a3 + 280, 0x1FuLL);
  v18.length = v17;
  if (v15)
    v19 = v13;
  else
    v19 = v16;
  if (v17)
    v18.location = v16;
  else
    v18.location = v19;
  v69.location = v19;
  v69.length = v15;
  v20 = NSUnionRange(v69, v18);
  v60 = a2;
  if (v20.length)
  {
    location = v20.location;
    length = v20.length;
    v59 = a3 + 32;
    v23 = (uint64_t *)(a3 + 8 * v20.location + 280);
    do
    {
      if ((*(_QWORD *)(a3 + 8 * (location >> 6) + 16) & (1 << location)) == 0 && *(v23 - 31) != 0)
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "resourceForKey:"));
        if (objc_msgSend(v25, "conformsToProtocol:", &OBJC_PROTOCOL___MTLBuffer))
        {
          v26 = *v23;
          if ((*(_QWORD *)(a3 + 8 * (location >> 6) + 24) & (1 << location)) != 0)
            objc_msgSend(v7, "setBuffer:offset:attributeStride:atIndex:", v25, v26, v23[31], location);
          else
            objc_msgSend(v7, "setBuffer:offset:atIndex:", v25, v26, location);
        }
        else if (objc_msgSend(v25, "conformsToProtocol:", &OBJC_PROTOCOL___MTLAccelerationStructure))
        {
          objc_msgSend(v7, "setAccelerationStructure:atBufferIndex:", v25, location);
        }
        else if (objc_msgSend(v25, "conformsToProtocol:", &OBJC_PROTOCOL___MTLIntersectionFunctionTable))
        {
          objc_msgSend(v7, "setIntersectionFunctionTable:atBufferIndex:", v25, location);
        }
        else if (objc_msgSend(v25, "conformsToProtocol:", &OBJC_PROTOCOL___MTLVisibleFunctionTable))
        {
          objc_msgSend(v7, "setVisibleFunctionTable:atBufferIndex:", v25, location);
        }

      }
      ++location;
      ++v23;
      --length;
    }
    while (length);
    v27 = 0;
    a2 = v60;
    do
    {
      v28 = *(_QWORD *)(a3 + 16) >> v27;
      if (!v28)
        break;
      v29 = __clz(__rbit64(v28));
      v30 = v27 + v29;
      if (((*(_QWORD *)(a3 + 8 * (v30 >> 6) + 24) >> (v27 + v29)) & 1) != 0)
        objc_msgSend(v7, "setBytes:length:attributeStride:atIndex:", *(_QWORD *)(v59 + 8 * v30), *(_QWORD *)(a3 + 8 * v30 + 280), *(_QWORD *)(a3 + 8 * v30 + 528), v30);
      else
        objc_msgSend(v7, "setBytes:length:atIndex:", *(_QWORD *)(v59 + 8 * v30), *(_QWORD *)(a3 + 8 * v30 + 280), v30);
      v27 = v30 + 1;
    }
    while ((int)v30 < 63);
  }
  v31 = CompareObjectIdRange(a2 + 776, a3 + 776, 0x80uLL);
  if (v32)
  {
    v33 = v31;
    v34 = v32;
    bzero(&v61, 0x400uLL);
    for (i = 0; i != v34; ++i)
    {
      v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "textureForKey:", *(_QWORD *)(a3 + 8 * v33 + 776 + 8 * i), v59));
      v37 = (void *)*((_QWORD *)&v61 + i);
      *((_QWORD *)&v61 + i) = v36;

    }
    objc_msgSend(v7, "setTextures:withRange:", &v61, v33, v34);
    for (j = 1016; j != -8; j -= 8)

  }
  v39 = CompareObjectIdRange(a2 + 1800, a3 + 1800, 0x10uLL);
  v41 = v40;
  v42 = CompareFloatRange(a2 + 2120, a3 + 2120, 0x10uLL);
  v44.length = v43;
  if (v41)
    v45 = v39;
  else
    v45 = v42;
  if (v43)
    v44.location = v42;
  else
    v44.location = v45;
  v70.location = v45;
  v70.length = v41;
  v46 = NSUnionRange(v70, v44);
  v47 = CompareFloatRange(a2 + 2184, a3 + 2184, 0x10uLL);
  v49.length = v48;
  if (v46.length)
    v50 = v46.location;
  else
    v50 = v47;
  if (v48)
    v49.location = v47;
  else
    v49.location = v50;
  v71.location = v50;
  v71.length = v46.length;
  v51 = NSUnionRange(v71, v49);
  if (v51.length)
  {
    v52 = 0;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    do
    {
      v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "samplerStateForKey:", *(_QWORD *)(a3
                                                                                                + 8 * v51.location
                                                                                                + 1800
                                                                                                + 8 * v52), v59));
      v54 = (void *)*((_QWORD *)&v61 + v52);
      *((_QWORD *)&v61 + v52) = v53;

      ++v52;
    }
    while (v51.length != v52);
    objc_msgSend(v7, "setSamplerStates:lodMinClamps:lodMaxClamps:withRange:", &v61, a3 + 2120 + 4 * v51.location, a3 + 2184 + 4 * v51.location, v51.location, v51.length);
    for (k = 120; k != -8; k -= 8)

    a2 = v60;
  }
  for (m = 0; m != 31; ++m)
  {
    if (*(_DWORD *)(a2 + 1984 + 4 * m) != *(_DWORD *)(a3 + 1984 + 4 * m))
      objc_msgSend(v7, "setThreadgroupMemoryLength:atIndex:");
  }
  if ((GT_SUPPORT_0 & 0x200) != 0 && *(_DWORD *)(a3 + 2108) && *(_DWORD *)(a3 + 2112))
    objc_msgSend(v7, "setImageblockWidth:height:");
  v57 = (__int128 *)(a3 + 1928);
  if (memcmp((const void *)(a2 + 1928), v57, 0x30uLL))
  {
    v58 = v57[1];
    v61 = *v57;
    v62 = v58;
    v63 = v57[2];
    objc_msgSend(v7, "setStageInRegion:", &v61);
  }

}

uint64_t GTMTLReplayController_renderPassDescriptor(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 80) + *(unsigned int *)(a1 + 22480);
  if (*(_QWORD *)(a1 + 184) <= v1)
  {
    if (*(_QWORD *)(a1 + 11336) <= v1)
      return 0;
    v2 = a1 + 11312;
  }
  else
  {
    v2 = a1 + 160;
  }
  if (*(_DWORD *)v2 == 70 || *(_DWORD *)v2 == 65)
    return *(_QWORD *)(v2 + 56);
  return 0;
}

void GTMTLReplayController_updateCommandEncoder(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  id v10;
  void *v11;
  id MTLRenderPassDescriptor;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  id v25;

  v4 = objc_autoreleasePoolPush();
  v5 = IsFuncEnumParallelCommandEncoderCall(*(_DWORD *)(a2 + 8));
  v6 = 11312;
  if (v5)
    v6 = 160;
  v7 = a1 + v6;
  GTMTLSMCommandEncoder_processTraceFunc(a1 + v6, (uint64_t *)a2, *(_QWORD *)(*(_QWORD *)a1 + 16));
  v8 = *(_DWORD *)(a2 + 8);
  switch(v8)
  {
    case -16353:
      goto LABEL_6;
    case -16286:
      v20 = *(_QWORD *)(a1 + 22464);
      v21 = *(_QWORD *)(a1 + 22472);
      *(_QWORD *)(v7 + 8608) = 1;
      *(double *)(v7 + 8632) = (double)v20;
      *(double *)(v7 + 8640) = (double)v21;
      *(_QWORD *)(v7 + 8656) = 0x3FF0000000000000;
      *(_QWORD *)(v7 + 9384) = 1;
      *(_QWORD *)(v7 + 9408) = v20;
      *(_QWORD *)(v7 + 9416) = v21;
      break;
    case -16351:
LABEL_6:
      v9 = GTMTLReplayController_renderPassDescriptor(a1);
      v10 = *(id *)(a1 + 8);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "renderPassDescriptorMap"));
      MTLRenderPassDescriptor = MakeMTLRenderPassDescriptor(v9, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPassDescriptor);

      v24 = 0;
      v25 = 0;
      if ((GT_SUPPORT_0 & 0x400) != 0
        && (v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "rasterizationRateMap"))) != 0)
      {
        v15 = (void *)v14;
        v16 = objc_msgSend(v13, "renderTargetWidth");
        v25 = v16;
        v17 = objc_msgSend(v13, "renderTargetHeight");
        v18 = (unint64_t)v17;
        v24 = (unint64_t)v17;
        if (v16)
        {
          if (!v17)
            goto LABEL_16;
        }
        else
        {
          objc_msgSend(v15, "screenSize");
          v16 = v23;
          v25 = v23;
          if (!v18)
          {
LABEL_16:
            objc_msgSend(v15, "screenSize");
            v18 = v22;
            v24 = v22;
          }
        }
      }
      else
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "defaultDevice"));
        objc_msgSend(v13, "validate:width:height:", v19, &v25, &v24);

        v15 = 0;
        v18 = v24;
        v16 = v25;
      }
      *(_QWORD *)(a1 + 22464) = v16;
      *(_QWORD *)(a1 + 22472) = v18;
      *(_QWORD *)(v7 + 8608) = 1;
      *(double *)(v7 + 8632) = (double)(unint64_t)v16;
      *(double *)(v7 + 8640) = (double)v18;
      *(_QWORD *)(v7 + 8656) = 0x3FF0000000000000;
      *(_QWORD *)(v7 + 9384) = 1;
      *(_QWORD *)(v7 + 9408) = v16;
      *(_QWORD *)(v7 + 9416) = v18;

      break;
  }
  objc_autoreleasePoolPop(v4);
}

void GTMTLReplayController_playTo(uint64_t a1, unint64_t a2)
{
  unsigned int *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;

  v2 = (unsigned int *)(a1 + 22480);
  if (*(unsigned int *)(a1 + 22480) < a2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 120);
    do
    {
      v6 = objc_autoreleasePoolPush();
      v7 = *(_QWORD *)(v5 + 24) + ((unint64_t)*v2 << 6);
      if (GetFuncEnumConstructorType(*(_DWORD *)(v7 + 8)) == 25)
        GTMTLReplayController_restoreCommandBuffer(a1, v7);
      GTMTLReplayController_updateCommandEncoder(a1, v7);
      if (*(_DWORD *)(v7 + 8) >> 2 == 1073737833)
        GTMTLReplayController_executeCommandsInBuffer((uint64_t *)a1, (unint64_t *)v7, 0, 0xFFFFFFFFFFFFFFFFLL);
      else
        GTMTLReplayController_defaultDispatchFunction(a1, v7);
      objc_autoreleasePoolPop(v6);
      v8 = *v2 + 1;
      *v2 = v8;
    }
    while (v8 < a2);
  }
  v2[1] = 0;
}

void GTMTLReplayController_executeCommandsInBuffer(uint64_t *a1, unint64_t *a2, NSUInteger a3, NSUInteger a4)
{
  uint64_t v8;
  NSRange v9;
  apr_pool_t *v10;
  _QWORD *Object;
  id v12;
  void *v13;
  uint64_t v14;
  id MTLIndirectCommandBufferDescriptorWithoutResourceIndex;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];
  uint64_t v31;
  apr_pool_t *p;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  NSRange v36;
  NSRange v37;

  v8 = *a1;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  GetExecuteCommandsInBufferArgs((uint64_t)&v33, (uint64_t)a2, *(_QWORD *)(v8 + 16));
  v37.location = *((_QWORD *)&v33 + 1);
  v37.length = v34;
  v36.location = a3;
  v36.length = a4;
  v9 = NSIntersectionRange(v36, v37);
  if (v9.length)
  {
    v29 = 0u;
    memset(v30, 0, sizeof(v30));
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v10 = *(apr_pool_t **)a1[19];
    v31 = 0;
    p = v10;
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)v30, *(_DWORD ***)(v8 + 40), *a2, v10);
    Object = GTMTLSMContext_getObject(**(_QWORD **)(v8 + 40), v33, *a2);
    GTMTLCreateIndirectCommandEncoder((uint64_t)&v23, Object[13]);
    v12 = (id)a1[1];
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultDevice"));
    v14 = v23;
    MTLIndirectCommandBufferDescriptorWithoutResourceIndex = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex(v23);
    v16 = (void *)objc_claimAutoreleasedReturnValue(MTLIndirectCommandBufferDescriptorWithoutResourceIndex);
    v17 = objc_msgSend(v13, "newIndirectCommandBufferWithDescriptor:maxCommandCount:options:", v16, v9.length, 0);

    v18 = *((_QWORD *)&v34 + 1) + *((_QWORD *)&v29 + 1) * v9.location;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "restoreIndirectCommandBufferDataMap"));
    GTMTLEncodeIndirectCommandBufferWithRange(v17, 0, v9.length, v14, v18, (uint64_t *)v30, v19);

    v20 = *((_DWORD *)a1 + 2828);
    if (v20 == 28)
    {
      if ((GT_SUPPORT_0 & 0x10) != 0)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "computeCommandEncoderForKey:", a1[1415]));
        goto LABEL_7;
      }
    }
    else if (v20 == 70)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "renderCommandEncoderForKey:", a1[1415]));
LABEL_7:
      v22 = v21;
      objc_msgSend(v21, "executeCommandsInBuffer:withRange:", v17, 0, v9.length, v23, v24, v25, v26, v27, v28, (_QWORD)v29);

    }
    apr_pool_clear(p);

  }
}

id GTMTLReplayController_debugSubCommandStop(uint64_t a1, unsigned int a2, uint64_t a3)
{
  objc_msgSend((id)g_activityLog, "enterDebugFuncStopFromIndex:toIndex:", *(_QWORD *)(a1 + 22480), a2 | (unint64_t)(a3 << 32));
  GTMTLReplayController_debugSubCommand((unsigned int *)a1, a2, a3);
  objc_msgSend(*(id *)(a1 + 8), "commitCommandBuffers");
  return objc_msgSend((id)g_activityLog, "leaveActivity");
}

void sub_240D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 56), "leaveActivity");
  _Unwind_Resume(a1);
}

unsigned int *GTMTLReplayController_debugSubCommand(unsigned int *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  id v11;
  NSObject *v12;
  FILE *v13;
  id v14;
  char v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  unint64_t *InclusiveRange;
  int v20;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *ExclusiveRange;
  unint64_t *v26;
  int v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  NSUInteger v38;
  NSUInteger v39;
  NSUInteger v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t i;
  int v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint8_t *v53;
  __int128 v54;
  unint64_t v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  id v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  void *v100;
  id v101;
  id v102;
  id v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  void *v112;
  void *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  id v123;
  void *v124;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  const __CFString *v146;
  _OWORD v147[3];
  uint64_t v148;
  int64x2_t v149;
  const __CFString *v150;
  uint8_t buf[8];
  uint64_t v152;
  uint64_t v153;

  v3 = a3;
  v4 = (uint64_t)result;
  v5 = result + 5620;
  v6 = *(_QWORD *)(*(_QWORD *)result + 120);
  v7 = *(_DWORD *)(v6 + 12);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = v7;
  if (*v5 == (_DWORD)v8)
  {
    v9 = result[5621];
    if (v9 == (_DWORD)a3)
      return result;
    v10 = v9 < a3;
  }
  else
  {
    v10 = 1;
  }
  if (s_logUsingOsLog)
  {
    v11 = gt_default_log();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v8;
      LOWORD(v152) = 1024;
      *(_DWORD *)((char *)&v152 + 2) = v3;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "debugSubCommand - functionIndex: %u, subCommandIndex: %u", buf, 0xEu);
    }

  }
  else
  {
    v13 = __stdoutp;
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("debugSubCommand - functionIndex: %u, subCommandIndex: %u"), v8, a3)));
    fprintf(v13, "%s\n", (const char *)objc_msgSend(v14, "UTF8String"));

  }
  v15 = !v10;
  if (v8 < *v5)
    v15 = 1;
  if ((v15 & 1) != 0 || (dword_75313C & 0x1000) != 0)
    GTMTLReplayController_rewind(v4);
  v16 = *(_QWORD *)(*(_QWORD *)v4 + 112);
  v17 = *(_DWORD *)(v16 + 12);
  v18 = *(_QWORD **)(v16 + 24);
  v137 = (v8 - 1);
  InclusiveRange = GroupBuilder_findInclusiveRange(v17, v18, v137);
  if (InclusiveRange)
  {
    while (1)
    {
      v20 = *((_DWORD *)InclusiveRange + 7);
      if (v20 == -16353 || v20 == -16351)
        break;
      v22 = *((unsigned int *)InclusiveRange + 4);
      if ((_DWORD)v22)
        v23 = InclusiveRange == 0;
      else
        v23 = 1;
      InclusiveRange -= 4 * v22;
      if (v23)
      {
        InclusiveRange = 0;
        break;
      }
    }
  }
  v24 = *v5;
  ExclusiveRange = GroupBuilder_findExclusiveRange(v17, v18, (v24 - 1));
  if (ExclusiveRange)
  {
    v26 = ExclusiveRange;
    while (1)
    {
      v27 = *((_DWORD *)v26 + 7);
      if (v27 == -16353 || v27 == -16351)
        break;
      v29 = *((unsigned int *)v26 + 4);
      if ((_DWORD)v29)
        v30 = v26 == 0;
      else
        v30 = 1;
      v26 -= 4 * v29;
      if (v30)
      {
        v26 = 0;
        v31 = 0;
        goto LABEL_44;
      }
    }
    if (v26 == InclusiveRange)
      v31 = (*v26 < v24) | 2u;
    else
      v31 = *v26 < v24;
LABEL_44:
    GTMTLReplayController_restoreGroup((unsigned int *)v4, (uint64_t)ExclusiveRange, v31);
    if (!(_DWORD)v8)
      goto LABEL_51;
  }
  else
  {
    v26 = 0;
    if (!(_DWORD)v8)
    {
LABEL_51:
      v33 = 0;
      v34 = 0;
      goto LABEL_52;
    }
  }
  v32 = *(_QWORD *)(v6 + 24);
  if (!v32)
    goto LABEL_51;
  v33 = v32 + (v137 << 6);
  if (*(_DWORD *)(v33 + 8) >> 2 == 1073737833)
    v34 = (unint64_t *)(v32 + (v137 << 6));
  else
    v34 = 0;
LABEL_52:
  if (*v5)
  {
    v35 = *(_QWORD *)(v6 + 24);
    if (v35)
    {
      v36 = v35 + ((unint64_t)(*v5 - 1) << 6);
      if (*(_DWORD *)(v36 + 8) >> 2 == 1073737833)
      {
        v37 = v5[1];
        v38 = v37 + 1;
        v39 = v3 - v37;
        if ((unint64_t *)v36 == v34)
        {
          v34 = 0;
          v40 = v39;
        }
        else
        {
          v40 = ~v38;
        }
        GTMTLReplayController_executeCommandsInBuffer((uint64_t *)v4, (unint64_t *)v36, v38, v40);
      }
    }
  }
  if (InclusiveRange)
  {
    if (v26 != InclusiveRange)
    {
      v136 = v16;
      GTMTLReplayController_playTo(v4, *InclusiveRange);
      GTMTLReplayController_updateCommandEncoder(v4, *(_QWORD *)(v6 + 24) + (*InclusiveRange << 6));
      GTMTLReplayController_tileMemoryFree(v4);
      v41 = GTMTLReplayController_renderPassDescriptor(v4);
      v42 = *(_QWORD *)(*(_QWORD *)v4 + 80) + *v5;
      for (i = 8; i != 520; i += 64)
        AddMemorylessTexture((uint64_t *)v4, *(_QWORD *)(v41 + i), v42);
      AddMemorylessTexture((uint64_t *)v4, *(_QWORD *)(v41 + 680), v42);
      AddMemorylessTexture((uint64_t *)v4, *(_QWORD *)(v41 + 728), v42);
      v44 = 0;
      if (*(_WORD *)(v41 + 814) && *(_WORD *)(v41 + 812))
        v44 = ((unint64_t)*(unsigned __int16 *)(v41 + 812) + *(_QWORD *)(v4 + 22472) - 1)
            / *(unsigned __int16 *)(v41 + 812)
            * (((unint64_t)*(unsigned __int16 *)(v41 + 814) + *(_QWORD *)(v4 + 22464) - 1)
             / *(unsigned __int16 *)(v41 + 814));
      if ((GT_SUPPORT_0 & 1) != 0
        && v44
        && !((*(_DWORD *)(v41 + 800) + *(unsigned __int16 *)(v41 + 804) < 0) ^ __OFADD__(*(_DWORD *)(v41 + 800), *(unsigned __int16 *)(v41 + 804)) | (*(_DWORD *)(v41 + 800) + *(unsigned __int16 *)(v41 + 804) == 0)))
      {
        v127 = *(unsigned int *)(v41 + 800);
        v129 = *(unsigned __int16 *)(v41 + 804);
        v125 = v34;
        v126 = v33;
        v132 = v8;
        v133 = v5;
        v134 = v3;
        v131 = v44;
        v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 8), "defaultDevice"));
        v45 = objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
        v135 = (_QWORD *)v4;
        v122 = v41;
        FillAttachmentPixelFormats(v41, *(uint64_t **)(*(_QWORD *)v4 + 40), v42, v45);
        v46 = 0;
        v47 = 0;
        do
        {
          v48 = v45;
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "colorAttachments"));
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "objectAtIndexedSubscript:", v46));
          v51 = objc_msgSend(v50, "pixelFormat");

          if (v51)
          {
            v149.i64[v47] = (uint64_t)v51;
            v52 = v47 + 1;
            v53 = &buf[56 * v47];
            GTMTLPixelFormatGetInfoForDevice((uint64_t)v147, (uint64_t)v138, (uint64_t)v51);
            v54 = v147[1];
            *(_OWORD *)v53 = v147[0];
            *((_OWORD *)v53 + 1) = v54;
            *((_OWORD *)v53 + 2) = v147[2];
            *((_QWORD *)v53 + 6) = v148;
            v47 = v52;
          }
          ++v46;
          v45 = v48;
        }
        while (v46 != 8);
        v55 = (MTLPixelFormatComputeTotalSizeUsed(buf, &v149, v47, (unint64_t)objc_msgSend(v48, "rasterSampleCount") > 1)+ 7) & 0xFFFFFFFFFFFFFFF8;
        v56 = objc_alloc_init((Class)MTLCompileOptions);
        v124 = v56;
        if ((int)v127 <= 0)
        {
          v123 = 0;
          v73 = v138;
        }
        else
        {
          v57 = v56;
          v146 = CFSTR("THREADGROUP_MEMORY_LENGTH");
          v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v127));
          *(_QWORD *)&v147[0] = v58;
          v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v147, &v146, 1));
          objc_msgSend(v57, "setPreprocessorMacros:", v59);

          v145 = 0;
          v120 = v55;
          v60 = objc_msgSend(v138, "newLibraryWithSource:options:error:", CFSTR("#include <metal_stdlib>\nusing namespace metal;\n\nstruct ThreadgroupData { uint8_t data[THREADGROUP_MEMORY_LENGTH]; };\n\nkernel void ThreadgroupStore(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                                ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                                device ThreadgroupData* buffer [[ buffer(0) ]],\n                                const threadgroup ThreadgroupData& threadgroupData [[ threadgroup(0) ]])\n{\n   ushort i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   for (ushort j = 0; j < THREADGROUP_MEMORY_LENGTH; j++)\n       buffer[i].data[j] = threadgroupData.data[j];\n}\n\nkernel void ThreadgroupLoad(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                                ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                                const device ThreadgroupData* buffer [[ buffer(0) ]],\n                                threadgroup ThreadgroupData& threadgroupData [[ threadgroup(0) ]])\n{\n   ushort i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   for (ushort j = 0; j < THREADGROUP_MEMORY_LENGTH; j++)\n       threadgroupData.data[j] = buffer[i].data[j];\n}\n\nkernel void Fence()\n{\n}\n"),
                  v57,
                  &v145);
          v61 = v145;
          v62 = objc_msgSend(v60, "newFunctionWithName:", CFSTR("ThreadgroupStore"));
          objc_msgSend(v48, "setTileFunction:", v62);

          v144 = v61;
          v63 = objc_msgSend(v138, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v48, 0, 0, &v144);
          v64 = v144;

          v65 = (void *)v135[8];
          v135[8] = v63;

          v66 = objc_msgSend(v60, "newFunctionWithName:", CFSTR("ThreadgroupLoad"));
          objc_msgSend(v48, "setTileFunction:", v66);

          v143 = v64;
          v67 = objc_msgSend(v138, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v48, 0, 0, &v143);
          v68 = v143;

          v69 = (void *)v135[9];
          v135[9] = v67;

          v70 = objc_msgSend(v60, "newFunctionWithName:", CFSTR("Fence"));
          objc_msgSend(v48, "setTileFunction:", v70);

          v142 = v68;
          v71 = objc_msgSend(v138, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v48, 0, 0, &v142);
          v123 = v142;

          v72 = (void *)v135[10];
          v135[10] = v71;
          v73 = v138;

          v74 = objc_msgSend(v138, "newBufferWithLength:options:", v131 * v127, 32);
          v75 = (void *)v135[13];
          v135[13] = v74;

          v55 = v120;
        }
        v76 = v129 - v55;
        if (v129 <= v55)
        {
          v34 = v125;
          v33 = v126;
          v92 = v48;
          v4 = (uint64_t)v135;
          v113 = v123;
          v110 = v124;
        }
        else
        {
          v77 = 8;
          if ((v76 & 7) != 0)
          {
            do
            {
              if (v77 >= 0)
                v78 = v77;
              else
                v78 = v77 + 1;
              v77 = v78 >> 1;
            }
            while (v76 % (v78 >> 1));
          }
          v130 = v129 - v55;
          v79 = v76 / v77;
          v80 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v76 / v77);
          v81 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v79);
          if (v79 >= 1)
          {
            v82 = 0;
            v83 = (8 * v77);
            do
            {
              v84 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("uint%d_t _%d"), v83, v82);
              objc_msgSend(v80, "addObject:", v84);

              v85 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("(dest)->_%d = (src)->_%d"), v82, v82);
              objc_msgSend(v81, "addObject:", v85);

              v82 = (v82 + 1);
            }
            while (v79 != (_DWORD)v82);
          }
          v149.i64[0] = (uint64_t)CFSTR("IMAGEBLOCK_SAMPLE_MEMBERS");
          v86 = objc_alloc((Class)NSString);
          v128 = v80;
          v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "componentsJoinedByString:", CFSTR("; ")));
          v88 = objc_msgSend(v86, "initWithFormat:", CFSTR("\"%@\""), v87);
          *(_QWORD *)buf = v88;
          v149.i64[1] = (uint64_t)CFSTR("IMAGEBLOCK_SAMPLE_COPY(dest,src)");
          v89 = objc_alloc((Class)NSString);
          v121 = v81;
          v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "componentsJoinedByString:", CFSTR("; ")));
          v91 = objc_msgSend(v89, "initWithFormat:", CFSTR("\"%@\""), v90);
          v152 = (uint64_t)v91;
          v150 = CFSTR("SAMPLE_COUNT");
          v92 = v48;
          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v48, "rasterSampleCount")));
          v153 = (uint64_t)v93;
          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v149, 3));
          objc_msgSend(v124, "setPreprocessorMacros:", v94);

          v141 = v123;
          v95 = objc_msgSend(v138, "newLibraryWithSource:options:error:", CFSTR("#include <metal_stdlib>\nusing namespace metal;\n\nstruct ImageblockData { IMAGEBLOCK_SAMPLE_MEMBERS; };\n\nkernel void ImageblockStore(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                            ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                            ushort2 threads_per_threadgroup [[ threads_per_threadgroup ]],\n                            ushort thread_index_in_threadgroup [[ thread_index_in_threadgroup ]],\n                            ushort2 thread_position_in_threadgroup [[ thread_position_in_threadgroup ]],\n                            device ImageblockData* buffer [[ buffer(0) ]],\n                            const imageblock<ImageblockData,imageblock_layout_explicit> ib)\n{\n   uint i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   i *= threads_per_threadgroup.x * threads_per_threadgroup.y;\n   i += thread_index_in_threadgroup;\n   for (ushort j = 0; j < SAMPLE_COUNT; j++)\n   {\n       const threadgroup_imageblock ImageblockData* src = ib.data(thread_position_in_threadgroup, j, imageblock_data_rate::sample);\n       device ImageblockData* dest = buffer + i * SAMPLE_COUNT + j;       IMAGEBLOCK_SAMPLE_COPY(dest,src);\n   }\n}\n\nkernel void ImageblockLoad(ushort2 threadgroup_position_in_grid [[ threadgroup_position_in_grid ]],\n                           ushort2 threadgroups_per_grid [[ threadgroups_per_grid ]],\n                           ushort2 threads_per_threadgroup [[ threads_per_threadgroup ]],\n                           ushort thread_index_in_threadgroup [[ thread_index_in_threadgroup ]],\n                           ushort2 thread_position_in_threadgroup [[ thread_position_in_threadgroup ]],\n                           const device ImageblockData* buffer [[ buffer(0) ]],\n                           imageblock<ImageblockData,imageblock_layout_explicit> ib)\n{\n   uint i = (threadgroup_position_in_grid.y * threadgroups_per_grid.x) + threadgroup_position_in_grid.x;\n   i *= threads_per_threadgroup.x * threads_per_threadgroup.y;\n   i += thread_index_in_threadgroup;\n   for (ushort j = 0; j < SAMPLE_COUNT; j++)\n   {\n       threadgroup_imageblock ImageblockData* dest = ib.data(thread_position_in_threadgroup, j, imageblock_data_rate::sample);\n       const device ImageblockData* src = buffer + i * SAMPLE_COUNT + j;       IMAGEBLOCK_SAMPLE_COPY(dest,src);\n   }\n}\n"),
                  v124,
                  &v141);
          v96 = v141;

          objc_msgSend(v48, "setThreadgroupSizeMatchesTileSize:", 1);
          v97 = objc_msgSend(v95, "newFunctionWithName:", CFSTR("ImageblockStore"));
          objc_msgSend(v48, "setTileFunction:", v97);

          v140 = v96;
          v98 = objc_msgSend(v138, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v48, 0, 0, &v140);
          v99 = v140;

          v4 = (uint64_t)v135;
          v100 = (void *)v135[11];
          v135[11] = v98;

          v101 = objc_msgSend(v95, "newFunctionWithName:", CFSTR("ImageblockLoad"));
          objc_msgSend(v92, "setTileFunction:", v101);

          v139 = v99;
          v102 = objc_msgSend(v138, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v92, 0, 0, &v139);
          v103 = v139;

          v104 = (void *)v135[12];
          v135[12] = v102;

          v105 = *(unsigned __int16 *)(v122 + 814);
          v106 = *(unsigned __int16 *)(v122 + 812);
          v107 = objc_msgSend(v92, "rasterSampleCount");
          v108 = v130 * v131 * v105;
          v73 = v138;
          v109 = v108 * v106;
          v110 = v124;
          v111 = objc_msgSend(v138, "newBufferWithLength:options:", v109 * (_QWORD)v107, 32);
          v112 = (void *)v135[14];
          v135[14] = v111;

          v113 = v103;
          v5 = v133;
          v3 = v134;
          v8 = v132;
          v34 = v125;
          v33 = v126;
        }

      }
      GTMTLReplayController_restoreCommandEncoder(v4, *InclusiveRange, 2);
      *v5 = *(_DWORD *)InclusiveRange + 1;
      v16 = v136;
    }
  }
  else
  {
    GTMTLReplayController_tileMemoryFree(v4);
  }
  if (v34)
  {
    GTMTLReplayController_playTo(v4, v137);
    GTMTLReplayController_executeCommandsInBuffer((uint64_t *)v4, v34, 0, v3 + 1);
    *v5 = v8;
  }
  else
  {
    GTMTLReplayController_playTo(v4, v8);
  }
  v114 = GroupBuilder_findInclusiveRange(*(_DWORD *)(v16 + 12), *(_QWORD **)(v16 + 24), v8);
  v115 = GroupRange_encoderWithIndirectResources((uint64_t)v114);
  if (v115)
    GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer(v4, *(_QWORD *)(v115 + 8));
  if (!InclusiveRange || (IsFuncEnumEndEncoding(*(_DWORD *)(v33 + 8)) & 1) != 0 || (GT_SUPPORT_0 & 1) == 0)
    goto LABEL_105;
  v116 = GTMTLReplayController_renderPassDescriptor(v4);
  v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 8), "renderCommandEncoderForKey:", *(_QWORD *)(v4 + 11320)));
  v118 = v117;
  if (*(_QWORD *)(v4 + 112))
  {
    objc_msgSend(v117, "setRenderPipelineState:", *(_QWORD *)(v4 + 88));
    objc_msgSend(v118, "setTileBuffer:offset:atIndex:", *(_QWORD *)(v4 + 112), 0, 0);
    v119 = *(unsigned __int16 *)(v116 + 812);
    *(_QWORD *)buf = *(unsigned __int16 *)(v116 + 814);
    goto LABEL_102;
  }
  if (*(_QWORD *)(v4 + 104))
  {
    objc_msgSend(v117, "setRenderPipelineState:", *(_QWORD *)(v4 + 80));
    v119 = 1;
    *(_QWORD *)buf = 1;
LABEL_102:
    v152 = v119;
    v153 = 1;
    objc_msgSend(v118, "dispatchThreadsPerTile:");
    if (*(_QWORD *)(v4 + 104))
    {
      objc_msgSend(v118, "setRenderPipelineState:", *(_QWORD *)(v4 + 64));
      objc_msgSend(v118, "setThreadgroupMemoryLength:offset:atIndex:", *(unsigned int *)(v116 + 800), 0, 0);
      objc_msgSend(v118, "setTileBuffer:offset:atIndex:", *(_QWORD *)(v4 + 104), 0, 0);
      v149 = vdupq_n_s64(1uLL);
      v150 = (const __CFString *)(&dword_0 + 1);
      objc_msgSend(v118, "dispatchThreadsPerTile:", &v149);
    }
  }

LABEL_105:
  v5[1] = v3;
  return (unsigned int *)objc_msgSend(*(id *)(v4 + 24), "commitCommandBuffer");
}

void GTMTLReplayController_restoreGroup(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a3;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6)
    v7 = a2 == 0;
  else
    v7 = 1;
  if (!v7)
    GTMTLReplayController_restoreGroup(a1, a2 - 32 * v6, a3);
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 120) + 24) + (v8 << 6);
  if (IsFuncEnumCreateCommandEncoder(*(_DWORD *)(v9 + 8)))
  {
    GTMTLReplayController_restoreCommandEncoder((uint64_t)a1, v8, v3);
    GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer((uint64_t)a1, a1[5620]);
  }
  else
  {
    GTMTLReplayController_defaultDispatchFunction((uint64_t)a1, v9);
  }
}

void GTMTLReplayController_restoreCommandEncoder(uint64_t a1, uint64_t a2, char a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t k;
  uint64_t m;
  char v19;
  char v20;
  char v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t i;
  uint64_t j;
  char v37;
  char v38;
  char v39;
  void *v40;
  void *v41;
  id MTLRenderPassDescriptor;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD __dst[103];
  _DWORD v52[14];
  void *__src[9];
  _BYTE v54[8480];
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int64x2_t v62;
  uint64_t v63;

  v6 = objc_autoreleasePoolPush();
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v9 = *(id *)(a1 + 8);
  v10 = *(_QWORD *)(v8 + 24);
  bzero(v52, 0x2B90uLL);
  GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v52, (uint64_t *)(v10 + (a2 << 6)), v7);
  switch(v52[0])
  {
    case 0x1C:
      GTMTLReplayController_defaultDispatchFunction(a1, v10 + (a2 << 6));
      v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "computeCommandEncoderForKey:", *(_QWORD *)(a1 + 11320)));
      if (objc_msgSend((id)g_commandBufferDescriptor, "errorOptions"))
      {
        v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("debugIndex(%u)"), *(unsigned int *)(a1 + 22480));
        objc_msgSend(v12, "insertDebugSignpost:", v13);

      }
      GTMTLReplayController_restoreComputeCommandEncoder(v12, (uint64_t)__src, a1 + 11368, v9);
      goto LABEL_49;
    case 0x46:
      v14 = v10 + (a2 << 6);
      v15 = *(_DWORD *)(v14 + 8);
      if (v15 == -16286)
      {
        v31 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v10 + (a2 << 6)), *(unsigned __int8 *)(v14 + 13), v7);
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "parallelRenderCommandEncoderForKey:", *(_QWORD *)v31));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "renderCommandEncoder"));
        if (objc_msgSend((id)g_commandBufferDescriptor, "errorOptions"))
        {
          v34 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("debugIndex(%u)"), *(unsigned int *)(a1 + 22480));
          objc_msgSend(v33, "insertDebugSignpost:", v34);

        }
        objc_msgSend(v9, "setRenderCommandEncoder:forKey:", v33, *((_QWORD *)v31 + 1));

        if ((a3 & 1) == 0)
          goto LABEL_81;
      }
      else if (v15 == -16353)
      {
        v16 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v10 + (a2 << 6)), *(unsigned __int8 *)(v10 + (a2 << 6) + 13), v7);
        memcpy(__dst, __src[0], sizeof(__dst));
        if ((a3 & 1) != 0)
        {
          for (i = 0; i != 64; i += 8)
            BYTE1(__dst[i + 3]) = 1;
          BYTE1(__dst[87]) = 1;
          BYTE1(__dst[93]) = 1;
        }
        else if ((dword_75313C & 1) != 0)
        {
          _clearDontCareAttachments((uint64_t)__dst);
        }
        if ((a3 & 2) != 0)
        {
          for (j = 0; j != 64; j += 8)
          {
            if (__dst[j])
              v37 = 3;
            else
              v37 = 1;
            BYTE3(__dst[j + 3]) = v37;
          }
          if (__dst[84])
            v38 = 3;
          else
            v38 = 1;
          BYTE3(__dst[87]) = v38;
          if (__dst[90])
            v39 = 3;
          else
            v39 = 1;
          BYTE3(__dst[93]) = v39;
        }
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "commandBufferForKey:", *(_QWORD *)v16));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "renderPassDescriptorMapWithMemorylessSubstitutes:", *(_QWORD *)(a1 + 40)));
        MTLRenderPassDescriptor = MakeMTLRenderPassDescriptor((uint64_t)__dst, v41);
        v43 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPassDescriptor);

        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "renderCommandEncoderWithDescriptor:", v43));
        if (objc_msgSend((id)g_commandBufferDescriptor, "errorOptions"))
        {
          v44 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("debugIndex(%u)"), *(unsigned int *)(a1 + 22480));
          objc_msgSend(v33, "insertDebugSignpost:", v44);

        }
        objc_msgSend(v9, "setRenderCommandEncoder:forKey:", v33, *((_QWORD *)v16 + 1));

        if ((a3 & 1) == 0)
          goto LABEL_81;
      }
      else
      {
        v33 = 0;
        if ((a3 & 1) == 0)
        {
LABEL_81:
          v49 = *(_QWORD *)(a1 + 22464);
          v50 = *(_QWORD *)(a1 + 22472);
          v55 = 1;
          v56 = (double)v49;
          v57 = (double)v50;
          v58 = 0x3FF0000000000000;
          v59 = 1;
          v60 = v49;
          v61 = v50;
          GTMTLReplayController_restoreRenderCommandEncoder(v33, (uint64_t)__src, a1 + 11368, v9);

          goto LABEL_82;
        }
      }
      if ((GT_SUPPORT_0 & 1) != 0)
      {
        v45 = GTMTLReplayController_renderPassDescriptor(a1);
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "renderCommandEncoderForKey:", *(_QWORD *)(a1 + 11320)));
        v47 = v46;
        if (*(_QWORD *)(a1 + 112))
        {
          objc_msgSend(v46, "setRenderPipelineState:", *(_QWORD *)(a1 + 96));
          objc_msgSend(v47, "setTileBuffer:offset:atIndex:", *(_QWORD *)(a1 + 112), 0, 0);
          v48 = *(unsigned __int16 *)(v45 + 812);
          __dst[0] = *(unsigned __int16 *)(v45 + 814);
          __dst[1] = v48;
          __dst[2] = 1;
          objc_msgSend(v47, "dispatchThreadsPerTile:", __dst);
        }
        if (*(_QWORD *)(a1 + 104))
        {
          objc_msgSend(v47, "setRenderPipelineState:", *(_QWORD *)(a1 + 72));
          objc_msgSend(v47, "setThreadgroupMemoryLength:offset:atIndex:", *(unsigned int *)(v45 + 800), 0, 0);
          objc_msgSend(v47, "setTileBuffer:offset:atIndex:", *(_QWORD *)(a1 + 104), 0, 0);
          v62 = vdupq_n_s64(1uLL);
          v63 = 1;
          objc_msgSend(v47, "dispatchThreadsPerTile:", &v62);
        }

      }
      goto LABEL_81;
    case 0x41:
      v11 = GTTraceFunc_argumentBytesWithMap((_QWORD *)(v10 + (a2 << 6)), *(unsigned __int8 *)(v10 + (a2 << 6) + 13), v7);
      memcpy(__dst, __src[0], sizeof(__dst));
      if ((a3 & 1) != 0)
      {
        for (k = 0; k != 64; k += 8)
          BYTE1(__dst[k + 3]) = 1;
        BYTE1(__dst[87]) = 1;
        BYTE1(__dst[93]) = 1;
      }
      else if ((dword_75313C & 1) != 0)
      {
        _clearDontCareAttachments((uint64_t)__dst);
      }
      if ((a3 & 2) != 0)
      {
        for (m = 0; m != 64; m += 8)
        {
          if (__dst[m])
            v19 = 3;
          else
            v19 = 1;
          BYTE3(__dst[m + 3]) = v19;
        }
        if (__dst[84])
          v20 = 3;
        else
          v20 = 1;
        BYTE3(__dst[87]) = v20;
        if (__dst[90])
          v21 = 3;
        else
          v21 = 1;
        BYTE3(__dst[93]) = v21;
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "commandBufferForKey:", *(_QWORD *)v11));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "renderPassDescriptorMapWithMemorylessSubstitutes:", *(_QWORD *)(a1 + 40)));
      v24 = MakeMTLRenderPassDescriptor((uint64_t)__dst, v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "parallelRenderCommandEncoderWithDescriptor:", v25));
      if (objc_msgSend((id)g_commandBufferDescriptor, "errorOptions"))
      {
        v27 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("debugIndex(%u)"), *(unsigned int *)(a1 + 22480));
        objc_msgSend(v26, "insertDebugSignpost:", v27);

      }
      objc_msgSend(v9, "setParallelRenderCommandEncoder:forKey:", v26, *((_QWORD *)v11 + 1));

      v12 = v26;
      v28 = 0;
      v29 = (_QWORD *)(a1 + 288);
      v30 = v54;
      do
      {
        if (*(v30 - 8) != *(v29 - 8))
          objc_msgSend(v12, "setColorStoreAction:atIndex:");
        if (*v30 != *v29)
          objc_msgSend(v12, "setColorStoreActionOptions:atIndex:");
        ++v29;
        ++v28;
        ++v30;
      }
      while (v28 != 8);
      if (v54[64] != *(unsigned __int8 *)(a1 + 352))
        objc_msgSend(v12, "setDepthStoreAction:");
      if (v54[66] != *(unsigned __int8 *)(a1 + 354))
        objc_msgSend(v12, "setDepthStoreActionOptions:");
      if (v54[65] != *(unsigned __int8 *)(a1 + 353))
        objc_msgSend(v12, "setStencilStoreAction:");
      if (v54[67] != *(unsigned __int8 *)(a1 + 355))
        objc_msgSend(v12, "setStencilStoreActionOptions:");

LABEL_49:
      goto LABEL_82;
  }
  GTMTLReplayController_defaultDispatchFunction(a1, v10 + (a2 << 6));
LABEL_82:

  objc_autoreleasePoolPop(v6);
}

void GTMTLReplayController_restoreIndirectResourceUsageForCommandBuffer(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *InclusiveRange;
  _QWORD *v8;
  int FuncEnumConstructorType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *entry;
  uint64_t v15;
  uint64_t v16;
  apr_pool_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  apr_size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  apr_hash_index_t *v25;
  apr_hash_index_t *v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  int v31;
  _QWORD *Object;
  char *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  void *v42;
  uint64_t v43;
  apr_pool_t *v44;
  char *v45;
  id v46;
  uint64_t v47;
  char *v48;

  v4 = *(_QWORD **)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 272) & 2) == 0)
  {
    _restoreIndirectResourceUsage(a1, a2);
    return;
  }
  v5 = *(_DWORD *)(a1 + 11312);
  if (v5 == 70 || v5 == 28)
  {
    InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v4[14] + 12), *(_QWORD **)(v4[14] + 24), a2);
    if (InclusiveRange)
    {
      v8 = InclusiveRange;
      while (1)
      {
        FuncEnumConstructorType = GetFuncEnumConstructorType(*((_DWORD *)v8 + 7));
        if (FuncEnumConstructorType == 25 || FuncEnumConstructorType == 51)
          break;
        v10 = *((unsigned int *)v8 + 4);
        if ((_DWORD)v10)
          v8 -= 4 * v10;
        else
          v8 = 0;
        if (!v8)
          return;
      }
      v11 = *(_QWORD *)(v4[15] + 24) + (*v8 << 6);
      v12 = v4[2];
      v13 = GetFuncEnumConstructorType(*(_DWORD *)(v11 + 8))
          ? (char *)*((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v11, *(unsigned __int8 *)(v11 + 13), v12) + 1)
          : GTTraceFunc_targetContext(v11, v12);
      v48 = v13;
      if (v13)
      {
        entry = find_entry(v4[20], &v48, 8uLL, 0);
        if (*entry)
        {
          v15 = *(_QWORD *)(*entry + 32);
          if (v15)
          {
            v16 = *(int *)(*(_QWORD *)(v15 + 16) + 48);
            v17 = **(apr_pool_t ***)(a1 + 152);
            v18 = apr_palloc(v17, 8 * v16);
            v19 = v18;
            if (v18)
              bzero(v18, 8 * v16);
            v45 = (char *)&v19[v16];
            v20 = 8 * *(int *)(*(_QWORD *)(v4[5] + 280) + 12);
            v21 = apr_palloc(v17, v20);
            v22 = v21;
            if (v21)
              bzero(v21, v20);
            v23 = *(_QWORD *)(v15 + 16);
            v24 = *(id *)(a1 + 8);
            *(_QWORD *)(v23 + 24) = 0;
            *(_QWORD *)(v23 + 32) = 0;
            *(_QWORD *)(v23 + 16) = v23;
            *(_DWORD *)(v23 + 40) = 0;
            v25 = apr_hash_next((apr_hash_index_t *)(v23 + 16));
            if (!v25)
            {
              v27 = 0;
              v38 = (char *)&v19[v16];
              v29 = v38;
              goto LABEL_60;
            }
            v26 = v25;
            v44 = v17;
            v27 = 0;
            v28 = 0;
            v29 = (char *)&v19[v16];
            v46 = v24;
            while (1)
            {
              v30 = *(uint64_t **)(*((_QWORD *)v26 + 1) + 32);
              v31 = *((_DWORD *)v30 + 2);
              if (v31 <= 59)
                break;
              if (v31 <= 79)
              {
                if (v31 != 60)
                {
                  if (v31 == 72)
                  {
                    v22[(int)v28] = objc_msgSend(v24, "residencySetForKey:", *v30);
                    v28 = (v28 + 1);
                  }
                  goto LABEL_50;
                }
LABEL_45:
                Object = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)a1 + 40), *v30, *(_QWORD *)(*(_QWORD *)a1 + 80) + a2);
                if ((!Object[15] || *(_DWORD *)(a1 + 11312) != 28) && (!Object[16] || *(_DWORD *)(a1 + 11312) != 70))
                  goto LABEL_50;
LABEL_49:
                v19[v27++] = objc_msgSend(v24, "resourceForKey:", *v30);
                goto LABEL_50;
              }
              if (v31 == 80)
              {
                v47 = v28;
                v34 = v29;
                v35 = v22;
                v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "textureForKey:", *v30));
                if (objc_msgSend(v36, "storageMode") != (char *)&dword_0 + 3)
                  v19[v27++] = objc_msgSend(v24, "resourceForKey:", *v30);

                v22 = v35;
                v29 = v34;
                v24 = v46;
                v28 = v47;
                goto LABEL_50;
              }
              if (v31 == 83)
                goto LABEL_45;
LABEL_50:
              v26 = apr_hash_next(v26);
              if (!v26)
              {
                if ((_DWORD)v28)
                {
                  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "commandBufferForKey:", *(_QWORD *)(a1 + 11352)));
                  objc_msgSend(v37, "useResidencySets:count:", v22, (int)v28);

                }
                v17 = v44;
                v38 = v45;
LABEL_60:
                v39 = v38 - v29;
                v40 = (unint64_t)(v38 - v29) >> 3;
                v41 = *(_DWORD *)(a1 + 11312);
                switch(v41)
                {
                  case 17:
                    v43 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "accelerationStructureCommandEncoderForKey:", *(_QWORD *)(a1 + 11320)));
                    break;
                  case 28:
                    v43 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "computeCommandEncoderForKey:", *(_QWORD *)(a1 + 11320)));
                    break;
                  case 70:
                    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "renderCommandEncoderForKey:", *(_QWORD *)(a1 + 11320)));
                    if (!v27)
                    {
LABEL_69:
                      if ((_DWORD)v40)
                        objc_msgSend(v42, "useHeaps:count:", v29, (int)(v39 >> 3));

LABEL_72:
                      apr_pool_clear(v17);
                      _restoreIndirectResourceUsage(a1, a2);

                      return;
                    }
LABEL_68:
                    objc_msgSend(v42, "useResources:count:usage:", v19, v27, 1);
                    goto LABEL_69;
                  default:
                    goto LABEL_72;
                }
                v42 = (void *)v43;
                if (!v27)
                  goto LABEL_69;
                goto LABEL_68;
              }
            }
            if (v31 > 49)
            {
              if (v31 == 50)
              {
                *((_QWORD *)v29 - 1) = objc_msgSend(v24, "heapForKey:", *v30);
                v29 -= 8;
                goto LABEL_50;
              }
              if (v31 != 57)
                goto LABEL_50;
            }
            else if (v31 != 16 && v31 != 22)
            {
              goto LABEL_50;
            }
            goto LABEL_49;
          }
        }
      }
    }
  }
}

void _restoreIndirectResourceUsage(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int *InclusiveRange;
  int *v6;
  int v7;
  uint64_t v8;
  int FuncEnumConstructorType;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a1;
  InclusiveRange = (int *)GroupBuilder_findInclusiveRange(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 112) + 12), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 112) + 24), a2);
  if (InclusiveRange)
  {
    v6 = InclusiveRange;
    while (1)
    {
      v7 = v6[7];
      if (IsFuncEnumCreateCommandEncoder(v7))
        break;
      v8 = v6[4];
      if ((_DWORD)v8)
        v6 -= 8 * v8;
      else
        v6 = 0;
      if (!v6)
        return;
    }
    FuncEnumConstructorType = GetFuncEnumConstructorType(v7);
    if ((FuncEnumConstructorType - 17) <= 0x35
      && ((1 << (FuncEnumConstructorType - 17)) & 0x20000000000801) != 0)
    {
      v11 = *v6;
      v12 = a2 - v11;
      if (a2 > v11)
      {
        v13 = v11 << 6;
        do
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v4 + 120) + 24) + v13;
          if (IsFuncEnumUseResourceCall(*(_DWORD *)(v14 + 8)))
            GTMTLReplayController_defaultDispatchFunction(a1, v14);
          v13 += 64;
          --v12;
        }
        while (v12);
      }
    }
  }
}

uint64_t _clearDontCareAttachments(uint64_t result)
{
  uint64_t v1;
  uint64_t v7;

  v1 = 0;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    v7 = result + v1;
    if (!*(_BYTE *)(result + v1 + 25))
    {
      *(_BYTE *)(v7 + 25) = 2;
      *(_OWORD *)(v7 + 32) = xmmword_4AA510;
      *(_OWORD *)(v7 + 48) = _Q1;
    }
    v1 += 64;
  }
  while (v1 != 512);
  if (!*(_BYTE *)(result + 697))
  {
    *(_BYTE *)(result + 697) = 2;
    *(_QWORD *)(result + 704) = 0x3FE0000000000000;
  }
  if (!*(_BYTE *)(result + 745))
  {
    *(_BYTE *)(result + 745) = 2;
    *(_DWORD *)(result + 752) = -1431655766;
  }
  return result;
}

void GTMTLReplayController_debugSubCommandResume(unsigned int *a1, unsigned int a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *ExclusiveRange;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)a1;
  if (a2)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 120) + 24) + ((unint64_t)(a2 - 1) << 6);
    if (!a3)
      goto LABEL_7;
  }
  else
  {
    v6 = 0;
    if (!a3)
      goto LABEL_7;
  }
  if ((*(_DWORD *)(v6 + 8) & 0xFFFFFFFC) == 0xFFFFC1A4)
  {
    GTMTLReplayController_debugSubCommandStop((uint64_t)a1, a2, (a3 - 1));
    v7 = a2 - 1;
    goto LABEL_11;
  }
LABEL_7:
  if (*(_DWORD *)(v6 - 56) >> 2 == 1073737833)
  {
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    GetExecuteCommandsInBufferArgs((uint64_t)&v11, v6, *(_QWORD *)(v5 + 16));
    v7 = a2 - 1;
    v8 = v12;
    a1 = v4;
    v9 = v7;
  }
  else
  {
    v7 = a2 - 1;
    v9 = v7;
    v8 = 0;
  }
  GTMTLReplayController_debugSubCommandStop((uint64_t)a1, v9, v8);
LABEL_11:
  ExclusiveRange = GroupBuilder_findExclusiveRange(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 112) + 12), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v4 + 112) + 24), v7);
  GTMTLReplayController_restoreGroup(v4, (uint64_t)ExclusiveRange, 3);
}

void GTMTLReplayController_prePlayForProfiling(uint64_t a1)
{
  id v2;
  NSObject *v3;
  FILE *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  FILE *v10;
  uint64_t v11;
  __objc2_class **v12;
  unint64_t v13;
  void *v14;
  uint8_t buf[16];
  uint8_t v16[16];

  if (s_logUsingOsLog)
  {
    v2 = gt_default_log();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Pre-playing for profiling", buf, 2u);
    }

  }
  else
  {
    v4 = __stdoutp;
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Pre-playing for profiling"))));
    fprintf(v4, "%s\n", (const char *)objc_msgSend(v5, "UTF8String"));

  }
  v6 = objc_autoreleasePoolPush();
  v7 = *(_QWORD *)a1;
  if (s_logUsingOsLog)
  {
    v8 = gt_default_log();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Rewinding for profiling", v16, 2u);
    }
  }
  else
  {
    v10 = __stdoutp;
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Rewinding for profiling"))));
    fprintf(v10, "%s\n", (const char *)-[NSObject UTF8String](v9, "UTF8String"));
  }

  Rewind((_DWORD *)a1);
  if ((dword_75313C & 0x100000) != 0)
    v12 = &off_4D4488;
  else
    v12 = (__objc2_class **)CAMetalLayer_ptr;
  objc_msgSend(*(id *)(a1 + 8), "setLayerClass:", objc_opt_class(*v12, v11));
  v13 = *(_QWORD *)(v7 + 96);
  if (v13)
  {
    GTMTLReplayController_playTo(a1, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "defaultCommandQueue"));
    objc_msgSend(v14, "finish");

  }
  objc_autoreleasePoolPop(v6);
}

void GTMTLReplayController_populateUnusedResources(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v12;

  v12 = a2;
  v3 = 0;
  v4 = a1[5];
  do
  {
    v5 = *(_QWORD *)(v4 + 8 * v3 + 8);
    v6 = *(_DWORD *)(v5 + 12);
    if (v6 >= 1)
    {
      for (i = 0; i < v6; ++i)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * i);
        v9 = *(_QWORD *)(v8 + 16);
        v10 = a1[8];
        if (v10 <= v9 && a1[9] + v10 > v9)
        {
          objc_msgSend(v12, "addUnusedResourceKey:", *(_QWORD *)(v8 + 8));
          v6 = *(_DWORD *)(v5 + 12);
        }
      }
    }
    ++v3;
  }
  while (v3 != 35);

}

id GTMTLReplayController_defaultLibrary(void *a1)
{
  id v1;
  uint64_t v2;
  NSBundle *v3;
  void *v4;
  id v5;

  v1 = a1;
  v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(GTMTLReplayObjectMap, v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v1, "newDefaultLibraryWithBundle:error:", v4, 0);

  return v5;
}

void sub_243264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_243788(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_243DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_243EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_244000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2441C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_244390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(*a1);
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(a1 + 4);
    operator delete(a1);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeThreadTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = *((_DWORD *)a2 + 4);
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32) + 128);
  v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40)
    LODWORD(v8) = **(_DWORD **)(v8 + 24);
  else
    v8 = (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v9) >> -(char)v9;
  v17 = v8;
  v18 = v6 & 0xFFFFFF | (v7 << 24);
  v16 = 5;
  v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 5uLL, &v16);
  v11 = v10;
  v13 = (uint64_t)(v10 + 40);
  v12 = (char *)*((_QWORD *)v10 + 5);
  v14 = (char *)*((_QWORD *)v10 + 6);
  v15 = v12;
  if (v12 != v14)
  {
    while (*(_QWORD *)v15 != v3)
    {
      v15 += 8;
      if (v15 == v14)
      {
        v15 = (char *)*((_QWORD *)v10 + 6);
        break;
      }
    }
  }
  if (v15 == v14
    || v15 - v12 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v10 + 5, v3))
  {
    v16 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v13, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v16);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v18);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v17);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionBeginTracePoint(uint64_t **a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 128);
  v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40)
    v7 = **(_QWORD **)(v5 + 24);
  else
    v7 = (uint64_t)(*(_QWORD *)(v5 + 24) << -(char)v6) >> -(char)v6;
  v8 = v7 & 0xFFFFFF | (a2[4] << 24);
  v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(_QWORD *)(v4 + 32));
  ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v8, 1, v9, -1);
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionEndTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TracePointLocation;
  uint64_t v9;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32));
  ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 2, v9, TracePointLocation);
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionCallTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TracePointLocation;
  llvm::MDString *v9;
  uint64_t v10;
  void *String;
  size_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = *(llvm::MDString **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  if (v9)
  {
    if (*(_BYTE *)v9)
    {
      if (*(_BYTE *)v9 == 17)
      {
        v10 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, (uint64_t)v9);
        ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v10, TracePointLocation);
      }
      return;
    }
    String = (void *)llvm::MDString::getString(v9);
    if (String)
    {
      std::string::basic_string[abi:nn180100](__p, String, v12);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v15 = 0;
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(__p, "__gt_unnamed_function_call__");
  }
  v13 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, -1, (uint64_t)__p, TracePointLocation);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v13, TracePointLocation);
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeVariableTracePoint(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  llvm::DIVariable *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  llvm::MDString *v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t Subprogram;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::MDString *v32;
  void *v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  void **v37;
  int v38;
  size_t v39;
  BOOL v40;
  void **p_p;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::MDString *v46;
  void *v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  void **v51;
  int v52;
  size_t v53;
  _BOOL4 v54;
  void **v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  llvm::MDString *Filename;
  size_t v61;
  llvm::MDString *v62;
  size_t v63;
  llvm::MDString *Directory;
  size_t v65;
  uint64_t v66;
  llvm::MDString *v67;
  void *v68;
  size_t v69;
  char v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::MDString *v77;
  void *String;
  size_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *__s2;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99[2];
  _QWORD *v100;
  _QWORD *v101[2];
  void *__dst;
  uint64_t v103;
  uint64_t v104;
  void *__p;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109[2];
  uint64_t v110;
  _QWORD v111[2];

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 128);
  v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40)
    v7 = **(_QWORD **)(v5 + 24);
  else
    v7 = (uint64_t)(*(_QWORD *)(v5 + 24) << -(char)v6) >> -(char)v6;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 128);
  v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40)
    LODWORD(v10) = **(_DWORD **)(v8 + 24);
  else
    v10 = (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v9) >> -(char)v9;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *(llvm::DIVariable **)(v4 + 32);
  v13 = *(unsigned __int8 *)v12;
  if (*(_BYTE *)v12)
  {
    if (v13 == 24)
    {
      v58 = ((_QWORD *)v12 - *((unsigned int *)v12 + 2))[3];
      v101[0] = 0;
      v101[1] = 0;
      v100 = v101;
      v59 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v58, &v100);
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v101[0]);
      Filename = llvm::DIVariable::getFilename(v12);
      if (Filename)
      {
        std::string::basic_string[abi:nn180100](&__p, Filename, v61);
      }
      else
      {
        __p = 0;
        v106 = 0;
        v107 = 0;
      }
      Directory = llvm::DIVariable::getDirectory(v12);
      if (Directory)
      {
        std::string::basic_string[abi:nn180100](&__dst, Directory, v65);
      }
      else
      {
        __dst = 0;
        v103 = 0;
        v104 = 0;
      }
      v76 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (uint64_t)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v104) < 0)
        operator delete(__dst);
      if (SHIBYTE(v107) < 0)
        operator delete(__p);
      v77 = (llvm::MDString *)((_QWORD *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v77 && (String = (void *)llvm::MDString::getString(v77)) != 0)
      {
        std::string::basic_string[abi:nn180100](&__p, String, v79);
      }
      else
      {
        __p = 0;
        v106 = 0;
        v107 = 0;
      }
      v75 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v12, (uint64_t)&__p, v59, v76);
      goto LABEL_105;
    }
    if (v13 == 25)
    {
      v14 = ((_QWORD *)v12 - *((unsigned int *)v12 + 2))[3];
      v109[0] = 0;
      v109[1] = 0;
      v108 = v109;
      v15 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v14, &v108);
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v109[0]);
      v16 = llvm::DIVariable::getFilename(v12);
      if (v16)
      {
        std::string::basic_string[abi:nn180100](&__p, v16, v17);
      }
      else
      {
        __p = 0;
        v106 = 0;
        v107 = 0;
      }
      v62 = llvm::DIVariable::getDirectory(v12);
      if (v62)
      {
        std::string::basic_string[abi:nn180100](&__dst, v62, v63);
      }
      else
      {
        __dst = 0;
        v103 = 0;
        v104 = 0;
      }
      v66 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (uint64_t)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v104) < 0)
        operator delete(__dst);
      if (SHIBYTE(v107) < 0)
        operator delete(__p);
      v67 = (llvm::MDString *)((_QWORD *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v67 && (v68 = (void *)llvm::MDString::getString(v67)) != 0)
      {
        std::string::basic_string[abi:nn180100](&__p, v68, v69);
      }
      else
      {
        __p = 0;
        v106 = 0;
        v107 = 0;
      }
      v70 = *((_WORD *)v12 + 16) != 0;
      v71 = a1;
      v72 = (uint64_t)v12;
      v73 = v15;
      v74 = v66;
      goto LABEL_94;
    }
LABEL_75:
    v57 = -1;
    goto LABEL_107;
  }
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v4 + 32));
  if (v20 < 0xD)
    goto LABEL_75;
  v21 = v19;
  v22 = *v19 == 0x765F6E7275746572 && *(_QWORD *)((char *)v19 + 5) == 0x2865756C61765F6ELL;
  if (!v22)
    goto LABEL_75;
  v23 = v20;
  if (*((_BYTE *)v19 + v20 - 1) != 41)
    goto LABEL_75;
  std::string::basic_string[abi:nn180100]<0>(&__p, "return_value(");
  v24 = v106;
  if (v107 >= 0)
    v24 = HIBYTE(v107);
  if (v23 < v24)
    v24 = v23;
  v97 = v24;
  if (v24 <= v23 - 1)
    v24 = v23 - 1;
  if (v23 < v24)
    v24 = v23;
  v96 = v24;
  if (SHIBYTE(v107) < 0)
    operator delete(__p);
  v25 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 24);
  if (!v25
    || *(_BYTE *)v25 != 5
    || (Subprogram = llvm::DILocalScope::getSubprogram(*(llvm::DILocalScope **)(v25 - 8 * *(unsigned int *)(v25 + 8)))) == 0)
  {
    v27 = *(unsigned int *)(v18 + 88);
    if ((_DWORD)v27)
    {
      __s2 = (char *)v21 + v97;
      v28 = v18;
      v29 = v96 - v97;
      v92 = v28;
      v30 = *(uint64_t **)(v28 + 80);
      v31 = 8 * v27;
      v94 = v7;
      v95 = v10;
      do
      {
        Subprogram = *v30;
        v32 = *(llvm::MDString **)(*v30 - 8 * *(unsigned int *)(*v30 + 8) + 24);
        if (v32 && (v33 = (void *)llvm::MDString::getString(v32)) != 0)
        {
          std::string::basic_string[abi:nn180100](&__p, v33, v34);
          v35 = HIBYTE(v107);
          v37 = (void **)__p;
          v36 = v106;
        }
        else
        {
          v36 = 0;
          v37 = 0;
          v35 = 0;
          __p = 0;
          v106 = 0;
          v107 = 0;
        }
        v38 = (char)v35;
        if ((v35 & 0x80u) != 0)
          v35 = v36;
        v39 = v29;
        v40 = v35 == v29;
        if (v40 && v96 != v97)
        {
          if (v38 >= 0)
            p_p = &__p;
          else
            p_p = v37;
          v40 = memcmp(p_p, __s2, v39) == 0;
        }
        if (v38 < 0)
          operator delete(v37);
        if (v40)
        {
LABEL_116:
          LODWORD(v7) = v94;
          LODWORD(v10) = v95;
          goto LABEL_117;
        }
        ++v30;
        v31 -= 8;
        LODWORD(v7) = v94;
        LODWORD(v10) = v95;
        v29 = v96 - v97;
      }
      while (v31);
      v43 = *(unsigned int *)(v92 + 88);
      if ((_DWORD)v43)
      {
        v44 = *(uint64_t **)(v92 + 80);
        v45 = 8 * v43;
        while (1)
        {
          Subprogram = *v44;
          v46 = *(llvm::MDString **)(*v44 - 8 * *(unsigned int *)(*v44 + 8) + 16);
          if (v46 && (v47 = (void *)llvm::MDString::getString(v46)) != 0)
          {
            std::string::basic_string[abi:nn180100](&__p, v47, v48);
            v49 = HIBYTE(v107);
            v51 = (void **)__p;
            v50 = v106;
          }
          else
          {
            v50 = 0;
            v51 = 0;
            v49 = 0;
            __p = 0;
            v106 = 0;
            v107 = 0;
          }
          v52 = (char)v49;
          if ((v49 & 0x80u) != 0)
            v49 = v50;
          v22 = v49 == v29;
          v53 = v29;
          v54 = v49 == v29;
          if (!v22 || v96 == v97)
          {
            if (v52 < 0)
              goto LABEL_72;
          }
          else
          {
            if (v52 >= 0)
              v56 = &__p;
            else
              v56 = v51;
            v54 = memcmp(v56, __s2, v53) == 0;
            if (v52 < 0)
            {
LABEL_72:
              operator delete(v51);
              if (v54)
                goto LABEL_116;
              goto LABEL_73;
            }
          }
          if (v54)
            goto LABEL_116;
LABEL_73:
          ++v44;
          v45 -= 8;
          LODWORD(v7) = v94;
          LODWORD(v10) = v95;
          v29 = v96 - v97;
          if (!v45)
            goto LABEL_122;
        }
      }
    }
    goto LABEL_122;
  }
LABEL_117:
  v86 = *(_QWORD *)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 32);
  if (!v86
    || (v87 = *(_QWORD *)(v86 - 8 * *(unsigned int *)(v86 + 8) + 24)) == 0
    || (v88 = *(unsigned int *)(v87 + 8), !(_DWORD)v88)
    || (v89 = *(_QWORD *)(v87 - 8 * v88)) == 0)
  {
LABEL_122:
    v90 = -1;
    goto LABEL_123;
  }
  v99[0] = 0;
  v99[1] = 0;
  v98 = v99;
  v90 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v89, &v98);
  std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v99[0]);
LABEL_123:
  v91 = *(_QWORD *)(v4 + 32);
  std::string::basic_string[abi:nn180100]<0>(&__p, "ret");
  v71 = a1;
  v72 = v91;
  v73 = v90;
  v74 = -1;
  v70 = 0;
LABEL_94:
  v75 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(v71, v72, (uint64_t)&__p, v73, v74, v70);
LABEL_105:
  v57 = v75;
  if (SHIBYTE(v107) < 0)
    operator delete(__p);
LABEL_107:
  __p = (void *)(v7 & 0xFFFFFF | (v11 << 24));
  __dst = (void *)v57;
  v111[0] = 7;
  v80 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 7uLL, v111);
  v81 = v80;
  v83 = (uint64_t)(v80 + 40);
  v82 = (char *)*((_QWORD *)v80 + 5);
  v84 = (char *)*((_QWORD *)v80 + 6);
  v85 = v82;
  if (v82 != v84)
  {
    while (*(_QWORD *)v85 != v3)
    {
      v85 += 8;
      if (v85 == v84)
      {
        v85 = (char *)*((_QWORD *)v80 + 6);
        break;
      }
    }
  }
  if (v85 == v84
    || v85 - v82 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v80 + 5, v3))
  {
    v111[0] = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v83, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, v111);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, &__p);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, &__dst);
    v110 = v10;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v81 + 11, &v110);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t TracePointLocation;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = *((_DWORD *)a2 + 4);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = v3 - 8 * *(unsigned int *)(v3 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 128);
  v11 = *(_DWORD *)(v10 + 32);
  if (v11 > 0x40)
    v12 = **(_QWORD **)(v10 + 24);
  else
    v12 = (uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v11) >> -(char)v11;
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 128);
  v14 = *(_DWORD *)(v13 + 32);
  if (v14 > 0x40)
    LODWORD(v15) = **(_DWORD **)(v13 + 24);
  else
    v15 = (uint64_t)(*(_QWORD *)(v13 + 24) << -(char)v14) >> -(char)v14;
  v25 = TracePointLocation;
  v26 = v6 & 0xFFFFFF | (v7 << 24);
  v24 = v12;
  v23 = 8;
  v16 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 8uLL, &v23);
  v17 = v16;
  v19 = (uint64_t)(v16 + 40);
  v18 = (char *)*((_QWORD *)v16 + 5);
  v20 = (char *)*((_QWORD *)v16 + 6);
  v21 = v18;
  if (v18 != v20)
  {
    while (*(_QWORD *)v21 != v3)
    {
      v21 += 8;
      if (v21 == v20)
      {
        v21 = (char *)*((_QWORD *)v16 + 6);
        break;
      }
    }
  }
  if (v21 == v20
    || v21 - v18 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v16 + 5, v3))
  {
    v23 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v19, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v23);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v26);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v25);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned int>((unint64_t *)v17 + 11, &v24);
    v22 = v15;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v17 + 11, &v22);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataValueTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  void *TracePointLocation;
  llvm::DIVariable *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  llvm::MDString *v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  llvm::MDString *Filename;
  size_t v18;
  uint64_t v19;
  llvm::MDString *v20;
  size_t v21;
  llvm::MDString *Directory;
  size_t v23;
  uint64_t v24;
  llvm::MDString *v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::MDString *v30;
  void *String;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47[2];
  void *__p;
  uint64_t v49;
  uint64_t v50;
  void *__dst;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55[2];
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = *((_DWORD *)a2 + 4);
  TracePointLocation = (void *)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = *(llvm::DIVariable **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  v10 = *(unsigned __int8 *)v9;
  if (v10 == 24)
  {
    v15 = ((_QWORD *)v9 - *((unsigned int *)v9 + 2))[3];
    v47[0] = 0;
    v47[1] = 0;
    v46 = v47;
    v16 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v15, &v46);
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v47[0]);
    Filename = llvm::DIVariable::getFilename(v9);
    if (Filename)
    {
      std::string::basic_string[abi:nn180100](&__dst, Filename, v18);
    }
    else
    {
      __dst = 0;
      v52 = 0;
      v53 = 0;
    }
    Directory = llvm::DIVariable::getDirectory(v9);
    if (Directory)
    {
      std::string::basic_string[abi:nn180100](&__p, Directory, v23);
    }
    else
    {
      __p = 0;
      v49 = 0;
      v50 = 0;
    }
    v29 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (uint64_t)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v50) < 0)
      operator delete(__p);
    if (SHIBYTE(v53) < 0)
      operator delete(__dst);
    v30 = (llvm::MDString *)((_QWORD *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v30 && (String = (void *)llvm::MDString::getString(v30)) != 0)
    {
      std::string::basic_string[abi:nn180100](&__dst, String, v32);
    }
    else
    {
      __dst = 0;
      v52 = 0;
      v53 = 0;
    }
    v28 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v16, v29);
  }
  else
  {
    if (v10 != 25)
    {
      v19 = -1;
      goto LABEL_39;
    }
    v11 = ((_QWORD *)v9 - *((unsigned int *)v9 + 2))[3];
    v55[0] = 0;
    v55[1] = 0;
    v54 = v55;
    v12 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v11, &v54);
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v55[0]);
    v13 = llvm::DIVariable::getFilename(v9);
    if (v13)
    {
      std::string::basic_string[abi:nn180100](&__dst, v13, v14);
    }
    else
    {
      __dst = 0;
      v52 = 0;
      v53 = 0;
    }
    v20 = llvm::DIVariable::getDirectory(v9);
    if (v20)
    {
      std::string::basic_string[abi:nn180100](&__p, v20, v21);
    }
    else
    {
      __p = 0;
      v49 = 0;
      v50 = 0;
    }
    v24 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (uint64_t)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v50) < 0)
      operator delete(__p);
    if (SHIBYTE(v53) < 0)
      operator delete(__dst);
    v25 = (llvm::MDString *)((_QWORD *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v25 && (v26 = (void *)llvm::MDString::getString(v25)) != 0)
    {
      std::string::basic_string[abi:nn180100](&__dst, v26, v27);
    }
    else
    {
      __dst = 0;
      v52 = 0;
      v53 = 0;
    }
    v28 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v12, v24, *((_WORD *)v9 + 16) != 0);
  }
  v19 = v28;
  if (SHIBYTE(v53) < 0)
    operator delete(__dst);
LABEL_39:
  v33 = *(unsigned int *)(v3 + 8);
  v34 = *(_QWORD *)(v3 - 8 * v33 + 40);
  if (*(_BYTE *)v34 == 6)
  {
    llvm::DIExpression::getFragmentInfo(&__dst, *(_QWORD *)(v34 + 24), *(_QWORD *)(v34 + 32));
    v35 = __dst;
    if ((_BYTE)v53)
      v36 = v52;
    else
      v36 = 0;
    if (!(_BYTE)v53)
      v35 = 0;
    v33 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v36 = 0;
    v35 = 0;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v3 - 8 * v33 + 48) + 128);
  v38 = *(_DWORD *)(v37 + 32);
  if (v38 > 0x40)
    v39 = **(_QWORD **)(v37 + 24);
  else
    v39 = (uint64_t)(*(_QWORD *)(v37 + 24) << -(char)v38) >> -(char)v38;
  __dst = (void *)(v6 & 0xFFFFFF | (v7 << 24));
  __p = TracePointLocation;
  v59 = v39;
  v60 = v19;
  v57 = v36;
  v58 = v35;
  v56 = 10;
  v40 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 0xAuLL, &v56);
  v41 = v40;
  v43 = (uint64_t)(v40 + 40);
  v42 = (char *)*((_QWORD *)v40 + 5);
  v44 = (char *)*((_QWORD *)v40 + 6);
  v45 = v42;
  if (v42 != v44)
  {
    while (*(_QWORD *)v45 != v3)
    {
      v45 += 8;
      if (v45 == v44)
      {
        v45 = (char *)*((_QWORD *)v40 + 6);
        break;
      }
    }
  }
  if (v45 == v44
    || v45 - v42 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v40 + 5, v3))
  {
    v56 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v43, v3);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v41 + 11, &v56);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v41 + 11, &__dst);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v41 + 11, &__p);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v41 + 11, &v60);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v41 + 11, &v59);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v41 + 11, &v58);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v41 + 11, &v57);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TracePointLocation;
  uint64_t v19;

  v5 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v7 = *(_DWORD *)(v6 + 32);
  if (v7 > 0x40)
    v8 = **(_QWORD **)(v6 + 24);
  else
    v8 = (uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v7) >> -(char)v7;
  v9 = v8 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v19 = v9;
  v17 = 9;
  v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 9uLL, &v17);
  v11 = v10;
  v13 = (uint64_t)(v10 + 40);
  v12 = (char *)*((_QWORD *)v10 + 5);
  v14 = (char *)*((_QWORD *)v10 + 6);
  v15 = v12;
  if (v12 != v14)
  {
    while (*(_QWORD *)v15 != v5)
    {
      v15 += 8;
      if (v15 == v14)
      {
        v15 = (char *)*((_QWORD *)v10 + 6);
        break;
      }
    }
  }
  if (v15 == v14
    || v15 - v12 == -8
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v10 + 5, v5))
  {
    v17 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v13, v5);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v17);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v19);
    v16 = a3;
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &v16);
    ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v11 + 11, &TracePointLocation);
  }
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()(int **a1, uint64_t a2)
{
  void *String;
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  char v13;
  uint64_t *p_p;
  unint64_t v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  int v30;
  void *__p;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  if (!a2)
    return;
  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)));
  if (String)
  {
    std::string::basic_string[abi:nn180100](&__p, String, v5);
  }
  else
  {
    __p = 0;
    v32 = 0;
    v33 = 0;
  }
  v6 = **a1;
  v7 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  if (v7 && *(_BYTE *)v7 == 1)
  {
    v8 = *(_QWORD *)(v7 + 128);
    if (v8 && *(_BYTE *)(v8 + 16) == 3)
    {
      v10 = *(_QWORD *)(v8 - 32);
      v11 = (_QWORD *)(v10 + 24);
      if (*(_DWORD *)(v10 + 32) >= 0x41u)
        v11 = (_QWORD *)*v11;
      v6 = *(_DWORD *)v11;
    }
  }
  v12 = a1[1];
  v13 = HIBYTE(v33);
  if (v33 >= 0)
    p_p = (uint64_t *)&__p;
  else
    p_p = (uint64_t *)__p;
  if (v33 >= 0)
    v15 = HIBYTE(v33);
  else
    v15 = v32;
  v16 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](p_p, v15);
  v17 = *(int8x8_t *)(v12 + 2);
  if (!*(_QWORD *)&v17)
    goto LABEL_37;
  v18 = v16;
  v19 = (uint8x8_t)vcnt_s8(v17);
  v19.i16[0] = vaddlv_u8(v19);
  v20 = v19.u32[0];
  if (v19.u32[0] > 1uLL)
  {
    v21 = v16;
    if (v16 >= *(_QWORD *)&v17)
      v21 = v16 % *(_QWORD *)&v17;
  }
  else
  {
    v21 = (*(_QWORD *)&v17 - 1) & v16;
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)v12 + 8 * v21);
  if (!v22 || (v23 = *v22) == 0)
  {
LABEL_37:
    if (v13 < 0)
      goto LABEL_38;
    return;
  }
  while (1)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (v18 == v24)
      break;
    if (v20 > 1)
    {
      if (v24 >= *(_QWORD *)&v17)
        v24 %= *(_QWORD *)&v17;
    }
    else
    {
      v24 &= *(_QWORD *)&v17 - 1;
    }
    if (v24 != v21)
      goto LABEL_37;
LABEL_36:
    v23 = *(unsigned __int8 **)v23;
    if (!v23)
      goto LABEL_37;
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100](v23 + 16, (unsigned __int8 *)&__p))
    goto LABEL_36;
  v25 = a1[2];
  v28[0] = a2;
  v28[1] = v25;
  v29 = v6;
  v30 = 0;
  v34 = v28;
  v26 = *((_QWORD *)v23 + 8);
  if (v26)
  {
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v26 + 48))(v26, &v34);
    if (v33 < 0)
LABEL_38:
      operator delete(__p);
  }
  else
  {
    v27 = std::__throw_bad_function_call[abi:nn180100]();
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>(v27);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  llvm::MDString *v5;
  char *String;
  size_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::MDString *v12;
  char *v13;
  size_t v14;
  char *v15;
  size_t v16;
  void *__p[2];
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;

  v2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  if (!v2)
    return -1;
  v4 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8));
  if (*(_BYTE *)v4 != 15)
  {
    v4 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
    if (!v4)
    {
      v9 = 0;
      v8 = "";
      goto LABEL_10;
    }
  }
  v5 = *(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8));
  if (v5)
  {
    String = (char *)llvm::MDString::getString(v5);
    if (String)
    {
      v8 = String;
      v9 = v7;
LABEL_10:
      std::string::basic_string[abi:nn180100](__dst, v8, v9);
      goto LABEL_11;
    }
  }
  __dst[0] = 0;
  __dst[1] = 0;
  v21 = 0;
LABEL_11:
  v11 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8));
  if (*(_BYTE *)v11 != 15)
  {
    v11 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8));
    if (!v11)
    {
      v16 = 0;
      v15 = "";
      goto LABEL_18;
    }
  }
  v12 = *(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
  if (v12)
  {
    v13 = (char *)llvm::MDString::getString(v12);
    if (v13)
    {
      v15 = v13;
      v16 = v14;
LABEL_18:
      std::string::basic_string[abi:nn180100](__p, v15, v16);
      goto LABEL_19;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
LABEL_19:
  v10 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v2, (uint64_t)__dst, (uint64_t)__p, *(unsigned int *)(v2 + 4), *(unsigned __int16 *)(v2 + 2));
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
  return v10;
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_725968;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_725968;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v4 + v3);
  return v3(v4, *a2, a1[4]);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(uint64_t **a1, unint64_t a2, _QWORD **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  llvm::MDString *v37;
  void *String;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD **v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int Tag;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  llvm::MDString *v88;
  void *v89;
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t *v103;
  void **v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  llvm::MDString *v108;
  void *v109;
  size_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  llvm::DISubrange **v126;
  char *v127;
  char *v128;
  unint64_t v129;
  llvm::DISubrange *v130;
  int v131;
  uint64_t v132;
  uint64_t Count;
  unint64_t v134;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  char *v143;
  unsigned int v144;
  uint64_t LowerBound;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  char *v149;
  char *v150;
  llvm::DISubrange **v151;
  uint64_t v152;
  llvm::DISubrange **v153;
  llvm::DISubrange **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  llvm::MDString *v160;
  void *v161;
  size_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t **v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD v185[2];
  _QWORD *v186;
  _QWORD v187[2];
  _QWORD *v188;
  _QWORD *v189[2];
  void *__p[2];
  uint64_t v191;
  _QWORD **v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD **__dst;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[2];

  v5 = a1;
  v7 = a3 + 1;
  v6 = a3[1];
  if (v6)
  {
    v8 = a3 + 1;
    v9 = a3[1];
    do
    {
      v10 = v9[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v9;
      else
        v12 = v9 + 1;
      if (v11)
        v8 = (_QWORD **)v9;
      v9 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v8 != v7 && (unint64_t)v8[4] <= a2)
    {
      __dst = (_QWORD **)(&dword_0 + 3);
      v24 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, 3uLL, &__dst);
      v25 = (_QWORD *)*((_QWORD *)v24 + 5);
      v26 = (_QWORD *)*((_QWORD *)v24 + 6);
      v27 = v25;
      if (v25 != v26)
      {
        while (*v27 != a2)
        {
          if (++v27 == v26)
          {
            v27 = (_QWORD *)*((_QWORD *)v24 + 6);
            break;
          }
        }
      }
      v28 = v27 - v25;
      if (v27 == v26)
        return -1;
      else
        return v28;
    }
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v6;
        v14 = v6[4];
        if (v14 <= a2)
          break;
        v6 = *v13;
        v15 = v13;
        if (!*v13)
          goto LABEL_19;
      }
      if (v14 >= a2)
        break;
      v6 = v13[1];
      if (!v6)
      {
        v15 = v13 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v15 = a3 + 1;
    v13 = a3 + 1;
LABEL_19:
    v16 = (uint64_t *)operator new(0x28uLL);
    v16[4] = a2;
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(a3, (uint64_t)v13, v15, v16);
  }
  __dst = (_QWORD **)(&dword_0 + 3);
  v17 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v5, 3uLL, &__dst);
  v18 = (char *)*((_QWORD *)v17 + 5);
  v19 = (char *)*((_QWORD *)v17 + 6);
  v20 = v18;
  if (v18 != v19)
  {
    v20 = (char *)*((_QWORD *)v17 + 5);
    while (*(_QWORD *)v20 != a2)
    {
      v20 += 8;
      if (v20 == v19)
      {
        v20 = (char *)*((_QWORD *)v17 + 6);
        break;
      }
    }
  }
  if (v20 == v19)
    v21 = -1;
  else
    v21 = (v20 - v18) >> 3;
  if (v21 == -1)
  {
    v22 = *((_QWORD *)v17 + 7);
    if ((unint64_t)v19 >= v22)
    {
      v29 = (v19 - v18) >> 3;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61)
LABEL_248:
        abort();
      v31 = v22 - (_QWORD)v18;
      if (v31 >> 2 > v30)
        v30 = v31 >> 2;
      v11 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
      v32 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v11)
        v32 = v30;
      if (v32)
      {
        v32 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v32);
        v18 = (char *)*((_QWORD *)v17 + 5);
        v19 = (char *)*((_QWORD *)v17 + 6);
      }
      else
      {
        v33 = 0;
      }
      v34 = (unint64_t *)(v32 + 8 * v29);
      v35 = v32 + 8 * v33;
      *v34 = a2;
      v23 = v34 + 1;
      while (v19 != v18)
      {
        v36 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v34 = v36;
      }
      *((_QWORD *)v17 + 5) = v34;
      *((_QWORD *)v17 + 6) = v23;
      *((_QWORD *)v17 + 7) = v35;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_QWORD *)v19 = a2;
      v23 = v19 + 8;
    }
    *((_QWORD *)v17 + 6) = v23;
    LOBYTE(v192) = 1;
    std::vector<BOOL>::push_back((uint64_t *)v17 + 8, &v192);
    v21 = ((uint64_t)(*((_QWORD *)v17 + 6) - *((_QWORD *)v17 + 5)) >> 3) - 1;
  }
  v181 = v5;
  switch(*(_BYTE *)a2)
  {
    case 0xB:
      v37 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
      if (v37 && (String = (void *)llvm::MDString::getString(v37)) != 0)
      {
        v40 = v21;
        std::string::basic_string[abi:nn180100](&__dst, String, v39);
      }
      else
      {
        v40 = v21;
        __dst = 0;
        v196 = 0;
        v197 = 0;
      }
      v76 = *(unsigned int *)(a2 + 28);
      v77 = *(unsigned int *)(a2 + 48);
      v79 = *(_QWORD *)(a2 + 32);
      v78 = *(_QWORD *)(a2 + 40);
      Tag = llvm::DINode::getTag((llvm::DINode *)a2);
      LODWORD(__p[0]) = *(_DWORD *)(a2 + 52);
      v192 = (_QWORD **)(&dword_0 + 3);
      v81 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, &v192);
      v82 = v81;
      v84 = (uint64_t)(v81 + 40);
      v83 = (char *)*((_QWORD *)v81 + 5);
      v85 = (char *)*((_QWORD *)v81 + 6);
      v86 = v83;
      if (v83 == v85)
        goto LABEL_108;
      while (*(_QWORD *)v86 != a2)
      {
        v86 += 8;
        if (v86 == v85)
        {
          v86 = (char *)*((_QWORD *)v81 + 6);
          break;
        }
      }
LABEL_108:
      if (v86 == v85
        || v86 - v83 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v81 + 5, a2))
      {
        v87 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v84, a2);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v82 + 11, v87, (uint64_t)&__dst, v76, v79, v77, v78, Tag, 0);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned int>((unint64_t *)v82 + 11, __p);
      }
      if (SHIBYTE(v197) < 0)
        operator delete(__dst);
      return v40;
    case 0xC:
      v189[0] = 0;
      v189[1] = 0;
      v188 = v189;
      std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v188, *a3, v7);
      v41 = *(unsigned int *)(a2 + 8);
      v42 = *(_QWORD *)(a2 - 8 * v41 + 24);
      if (v42)
      {
        v196 = 0;
        v197 = 0;
        __dst = &v196;
        std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&__dst, v188, v189);
        v43 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v5, v42, &__dst);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v196);
        v44 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
      else
      {
        v44 = -v41;
        v43 = -1;
      }
      v106 = *(_QWORD *)(a2 + 52);
      v107 = v106;
      if (v106 >= 9)
        v107 = 100;
      v182 = v107;
      v108 = *(llvm::MDString **)(a2 + 8 * v44 + 16);
      if (v108 && (v109 = (void *)llvm::MDString::getString(v108)) != 0)
      {
        v111 = v21;
        std::string::basic_string[abi:nn180100](&v192, v109, v110);
      }
      else
      {
        v111 = v21;
        v192 = 0;
        v193 = 0;
        v194 = 0;
      }
      v112 = *(unsigned int *)(a2 + 28);
      v113 = *(unsigned int *)(a2 + 48);
      v115 = *(_QWORD *)(a2 + 32);
      v114 = *(_QWORD *)(a2 + 40);
      v116 = llvm::DINode::getTag((llvm::DINode *)a2);
      __p[0] = (void *)v43;
      v199[0] = 3;
      v117 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, v199);
      v118 = v117;
      v120 = (uint64_t)(v117 + 40);
      v119 = (char *)*((_QWORD *)v117 + 5);
      v121 = (char *)*((_QWORD *)v117 + 6);
      v122 = v119;
      if (v119 == v121)
        goto LABEL_146;
      while (*(_QWORD *)v122 != a2)
      {
        v122 += 8;
        if (v122 == v121)
        {
          v122 = (char *)*((_QWORD *)v117 + 6);
          break;
        }
      }
LABEL_146:
      if (v122 == v121
        || v122 - v119 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v117 + 5, a2))
      {
        v123 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v120, a2);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v118 + 11, v123, (uint64_t)&v192, v112, v115, v113, v114, v116, 2);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v118 + 11, __p);
        v124 = 100;
        if ((v106 & 0xFF00000000) != 0)
          v124 = v182;
        v199[0] = v124;
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v118 + 11, v199);
      }
      if (SHIBYTE(v194) < 0)
        operator delete(v192);
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v189[0]);
      return v111;
    case 0xD:
      v187[0] = 0;
      v187[1] = 0;
      v186 = v187;
      std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v186, *a3, v7);
      v45 = *(unsigned int *)(a2 + 8);
      v46 = *(_QWORD *)(a2 - 8 * v45 + 24);
      if (v46)
      {
        v196 = 0;
        v197 = 0;
        __dst = &v196;
        std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&__dst, v186, v187);
        v177 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v5, v46, &__dst);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v196);
        v47 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
      else
      {
        v47 = -v45;
        v177 = -1;
      }
      v180 = v21;
      v125 = *(_QWORD *)(a2 + 8 * v47 + 32);
      if (v125)
        v126 = (llvm::DISubrange **)(v125 - 8 * *(unsigned int *)(v125 + 8));
      else
        v126 = 0;
      if (v126 != (llvm::DISubrange **)v125)
      {
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v183 = *(_QWORD *)(a2 + 8 * v47 + 32);
        while (1)
        {
          v130 = *v126;
          v131 = *(unsigned __int8 *)*v126;
          if ((v131 - 11) < 4 || v131 == 33)
            break;
          if (v131 == 9)
          {
            Count = llvm::DISubrange::getCount(*v126);
            v134 = Count & 0xFFFFFFFFFFFFFFF8;
            if ((Count & 6) != 0 || v134 == 0)
            {
              v136 = -1;
            }
            else
            {
              v144 = *(_DWORD *)(v134 + 32);
              if (v144 > 0x40)
                v136 = **(_QWORD **)(v134 + 24);
              else
                v136 = (uint64_t)(*(_QWORD *)(v134 + 24) << -(char)v144) >> -(char)v144;
            }
            LowerBound = llvm::DISubrange::getLowerBound(v130);
            v146 = 0;
            if ((LowerBound & 6) == 0)
            {
              v147 = LowerBound & 0xFFFFFFFFFFFFFFF8;
              if ((LowerBound & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v148 = *(_DWORD *)(v147 + 32);
                if (v148 > 0x40)
                  v146 = **(_QWORD **)(v147 + 24);
                else
                  v146 = (uint64_t)(*(_QWORD *)(v147 + 24) << -(char)v148) >> -(char)v148;
              }
            }
            __p[0] = (void *)v146;
            v198 = 4;
            v199[0] = v136;
            v149 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v5, 4uLL, &v198);
            v150 = v149;
            v152 = (uint64_t)(v149 + 40);
            v151 = (llvm::DISubrange **)*((_QWORD *)v149 + 5);
            v153 = (llvm::DISubrange **)*((_QWORD *)v149 + 6);
            v154 = v151;
            if (v151 != v153)
            {
              while (*v154 != v130)
              {
                if (++v154 == v153)
                {
                  v154 = (llvm::DISubrange **)*((_QWORD *)v149 + 6);
                  break;
                }
              }
            }
            v155 = v154 - v151;
            if (v154 == v153)
              v156 = -1;
            else
              v156 = v155;
            if (v156 == -1
              || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v149 + 5, (uint64_t)v130))
            {
              v156 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v152, (uint64_t)v130);
              v198 = v156;
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v150 + 11, &v198);
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v150 + 11, __p);
              ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v150 + 11, v199);
            }
            if ((unint64_t)v128 < v129)
            {
              *(_QWORD *)v128 = 4;
              *((_QWORD *)v128 + 1) = v156;
              v128 += 16;
              v5 = v181;
              goto LABEL_223;
            }
            v157 = (v128 - v127) >> 4;
            v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 60)
              goto LABEL_248;
            if ((uint64_t)(v129 - (_QWORD)v127) >> 3 > v158)
              v158 = (uint64_t)(v129 - (_QWORD)v127) >> 3;
            if (v129 - (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
              v139 = 0xFFFFFFFFFFFFFFFLL;
            else
              v139 = v158;
            if (v139)
              v139 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v139);
            else
              v140 = 0;
            v141 = (_QWORD *)(v139 + 16 * v157);
            *v141 = 4;
            v141[1] = v156;
            if (v128 == v127)
            {
              v143 = (char *)(v139 + 16 * v157);
              v5 = v181;
            }
            else
            {
              v159 = v139 + 16 * v157;
              v5 = v181;
              do
              {
                v143 = (char *)(v159 - 16);
                *(_OWORD *)(v159 - 16) = *((_OWORD *)v128 - 1);
                v128 -= 16;
                v159 -= 16;
              }
              while (v128 != v127);
            }
            goto LABEL_220;
          }
LABEL_224:
          if (++v126 == (llvm::DISubrange **)v125)
          {
            v47 = -(uint64_t)*(unsigned int *)(a2 + 8);
            goto LABEL_227;
          }
        }
        v193 = 0;
        v194 = 0;
        v192 = &v193;
        std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v192, v186, v187);
        v132 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v5, v130, &v192);
        std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v193);
        if ((unint64_t)v128 < v129)
        {
          *(_QWORD *)v128 = 3;
          *((_QWORD *)v128 + 1) = v132;
          v128 += 16;
LABEL_223:
          v125 = v183;
          goto LABEL_224;
        }
        v137 = (v128 - v127) >> 4;
        v138 = v137 + 1;
        if ((unint64_t)(v137 + 1) >> 60)
          goto LABEL_248;
        if ((uint64_t)(v129 - (_QWORD)v127) >> 3 > v138)
          v138 = (uint64_t)(v129 - (_QWORD)v127) >> 3;
        if (v129 - (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
          v139 = 0xFFFFFFFFFFFFFFFLL;
        else
          v139 = v138;
        if (v139)
          v139 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v139);
        else
          v140 = 0;
        v141 = (_QWORD *)(v139 + 16 * v137);
        *v141 = 3;
        v141[1] = v132;
        if (v128 == v127)
        {
          v143 = (char *)(v139 + 16 * v137);
        }
        else
        {
          v142 = v139 + 16 * v137;
          do
          {
            v143 = (char *)(v142 - 16);
            *(_OWORD *)(v142 - 16) = *((_OWORD *)v128 - 1);
            v128 -= 16;
            v142 -= 16;
          }
          while (v128 != v127);
        }
LABEL_220:
        v129 = v139 + 16 * v140;
        v128 = (char *)(v141 + 2);
        if (v127)
          operator delete(v127);
        v127 = v143;
        goto LABEL_223;
      }
      v127 = 0;
      v128 = 0;
LABEL_227:
      v160 = *(llvm::MDString **)(a2 + 8 * v47 + 16);
      if (v160 && (v161 = (void *)llvm::MDString::getString(v160)) != 0)
      {
        std::string::basic_string[abi:nn180100](__p, v161, v162);
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v191 = 0;
      }
      v163 = *(unsigned int *)(a2 + 28);
      v164 = *(unsigned int *)(a2 + 48);
      v166 = *(_QWORD *)(a2 + 32);
      v165 = *(_QWORD *)(a2 + 40);
      v167 = llvm::DINode::getTag((llvm::DINode *)a2);
      v198 = 3;
      v199[0] = v177;
      v168 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, &v198);
      v169 = v168;
      v171 = (uint64_t)(v168 + 40);
      v170 = (char *)*((_QWORD *)v168 + 5);
      v172 = (char *)*((_QWORD *)v168 + 6);
      v173 = v170;
      if (v170 != v172)
      {
        while (*(_QWORD *)v173 != a2)
        {
          v173 += 8;
          if (v173 == v172)
          {
            v173 = (char *)*((_QWORD *)v168 + 6);
            break;
          }
        }
      }
      if (v173 == v172
        || v173 - v170 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v168 + 5, a2))
      {
        v174 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v171, a2);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v169 + 11, v174, (uint64_t)__p, v163, v166, v164, v165, v167, 1);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, v199);
        v198 = (v128 - v127) >> 4;
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, &v198);
        if (v128 != v127)
        {
          v175 = (uint64_t *)v127;
          do
          {
            v198 = *v175;
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, &v198);
            v198 = v175[1];
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v169 + 11, &v198);
            v175 += 2;
          }
          while (v175 != (uint64_t *)v128);
        }
      }
      if (SHIBYTE(v191) < 0)
        operator delete(__p[0]);
      v21 = v180;
      if (v127)
        operator delete(v127);
      v105 = (_QWORD *)v187[0];
LABEL_246:
      std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v105);
      break;
    case 0xE:
      v179 = v21;
      v48 = v185;
      v185[0] = 0;
      v185[1] = 0;
      v184 = v185;
      std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&v184, *a3, v7);
      v49 = *(unsigned int *)(a2 + 8);
      v50 = -v49;
      v51 = *(_QWORD *)(a2 - 8 * v49 + 24);
      if (v51 && (v52 = *(unsigned int *)(v51 + 8), (int)v52 >= 1))
      {
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = &v196;
        v178 = *(_QWORD *)(a2 - 8 * v49 + 24);
        do
        {
          v58 = *(_QWORD *)(v51 - 8 * *(unsigned int *)(v51 + 8) + 8 * v56);
          if (v56 || v58)
          {
            *v57 = 0;
            v57[1] = 0;
            __dst = v57;
            std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>((uint64_t *)&__dst, v184, v48);
            v59 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(v181, v58, &__dst);
            std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v196);
            if ((unint64_t)v53 >= v54)
            {
              v64 = v57;
              v65 = v52;
              v66 = v48;
              v67 = (v53 - v55) >> 4;
              v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 60)
                goto LABEL_248;
              if ((uint64_t)(v54 - (_QWORD)v55) >> 3 > v68)
                v68 = (uint64_t)(v54 - (_QWORD)v55) >> 3;
              if (v54 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
                v69 = 0xFFFFFFFFFFFFFFFLL;
              else
                v69 = v68;
              if (v69)
                v69 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v69);
              else
                v70 = 0;
              v73 = (_QWORD *)(v69 + 16 * v67);
              *v73 = 3;
              v73[1] = v59;
              if (v53 == v55)
              {
                v75 = v53;
                v55 = (char *)(v69 + 16 * v67);
                v48 = v66;
              }
              else
              {
                v74 = (char *)(v69 + 16 * v67);
                v48 = v66;
                do
                {
                  *((_OWORD *)v74 - 1) = *((_OWORD *)v53 - 1);
                  v74 -= 16;
                  v53 -= 16;
                }
                while (v53 != v55);
                v75 = v55;
                v55 = v74;
              }
              v52 = v65;
              v54 = v69 + 16 * v70;
              v53 = (char *)(v73 + 2);
              v57 = v64;
              if (v75)
                operator delete(v75);
              v51 = v178;
            }
            else
            {
              *(_QWORD *)v53 = 3;
              *((_QWORD *)v53 + 1) = v59;
              v53 += 16;
            }
          }
          else if ((unint64_t)v53 >= v54)
          {
            v60 = (v53 - v55) >> 4;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 60)
              goto LABEL_248;
            if ((uint64_t)(v54 - (_QWORD)v55) >> 3 > v61)
              v61 = (uint64_t)(v54 - (_QWORD)v55) >> 3;
            if (v54 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
              v62 = 0xFFFFFFFFFFFFFFFLL;
            else
              v62 = v61;
            if (v62)
              v62 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v62);
            else
              v63 = 0;
            v71 = (char *)(v62 + 16 * v60);
            *(_OWORD *)v71 = xmmword_4AA520;
            v72 = v71 + 16;
            if (v53 != v55)
            {
              do
              {
                *((_OWORD *)v71 - 1) = *((_OWORD *)v53 - 1);
                v71 -= 16;
                v53 -= 16;
              }
              while (v53 != v55);
              v53 = v55;
            }
            v55 = v71;
            v54 = v62 + 16 * v63;
            if (v53)
              operator delete(v53);
            v53 = v72;
          }
          else
          {
            *(_OWORD *)v53 = xmmword_4AA520;
            v53 += 16;
          }
          ++v56;
        }
        while (v56 != v52);
        v50 = -(uint64_t)*(unsigned int *)(a2 + 8);
      }
      else
      {
        v53 = 0;
        v55 = 0;
      }
      v88 = *(llvm::MDString **)(a2 + 8 * v50 + 16);
      if (v88 && (v89 = (void *)llvm::MDString::getString(v88)) != 0)
      {
        std::string::basic_string[abi:nn180100](&v192, v89, v90);
      }
      else
      {
        v192 = 0;
        v193 = 0;
        v194 = 0;
      }
      v91 = *(unsigned int *)(a2 + 28);
      v92 = *(unsigned int *)(a2 + 48);
      v94 = *(_QWORD *)(a2 + 32);
      v93 = *(_QWORD *)(a2 + 40);
      v95 = llvm::DINode::getTag((llvm::DINode *)a2);
      __p[0] = &dword_0 + 3;
      v96 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(v181, 3uLL, __p);
      v97 = v96;
      v99 = (uint64_t)(v96 + 40);
      v98 = (char *)*((_QWORD *)v96 + 5);
      v100 = (char *)*((_QWORD *)v96 + 6);
      v101 = v98;
      if (v98 != v100)
      {
        while (*(_QWORD *)v101 != a2)
        {
          v101 += 8;
          if (v101 == v100)
          {
            v101 = (char *)*((_QWORD *)v96 + 6);
            break;
          }
        }
      }
      if (v101 == v100
        || v101 - v98 == -8
        || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((char **)v96 + 5, a2))
      {
        v102 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(v99, a2);
        v103 = (unint64_t *)(v97 + 88);
        ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((unint64_t *)v97 + 11, v102, (uint64_t)&v192, v91, v94, v92, v93, v95, 3);
        __p[0] = (void *)((v53 - v55) >> 4);
        ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>((unint64_t *)v97 + 11, __p);
        if (v53 != v55)
        {
          v104 = (void **)v55;
          do
          {
            __p[0] = *v104;
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v103, __p);
            __p[0] = v104[1];
            ShaderDebugger::Metadata::MDSerializer::write<unsigned long long>(v103, __p);
            v104 += 2;
          }
          while (v104 != (void **)v53);
        }
      }
      if (SHIBYTE(v194) < 0)
        operator delete(v192);
      v21 = v179;
      if (v55)
        operator delete(v55);
      v105 = (_QWORD *)v185[0];
      goto LABEL_246;
    default:
      return v21;
  }
  return v21;
}

llvm::MDString *llvm::DIVariable::getFilename(llvm::DIVariable *this)
{
  uint64_t v1;
  llvm::MDString *result;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[2];
  if (!v1)
    return (llvm::MDString *)"";
  result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8));
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

llvm::MDString *llvm::DIVariable::getDirectory(llvm::DIVariable *this)
{
  uint64_t v1;
  llvm::MDString *result;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[2];
  if (!v1)
    return (llvm::MDString *)"";
  result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8) + 8);
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

char *std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x70uLL);
    *((_QWORD *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *((_QWORD *)v7 + 13) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *std::set<llvm::DIType *>::insert[abi:nn180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v9 = (uint64_t *)v5[1];
      v10 = v6;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = v4[4];
      if (v8[4] < v12)
      {
LABEL_9:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v6;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v6;
      }
      else
      {
        v13 = (uint64_t **)v6;
        v14 = (uint64_t **)v6;
        if (v7)
        {
          v14 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v18 = v7[4];
              if (v12 >= v18)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_16;
            }
            if (v18 >= v12)
              break;
            v14 = v13 + 1;
            v7 = v13[1];
            if (!v7)
              goto LABEL_16;
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        v15 = (uint64_t *)operator new(0x28uLL);
        v15[4] = v4[4];
        result = std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v15);
      }
      v16 = (_QWORD *)v4[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v4[2];
          v11 = *v17 == (_QWORD)v4;
          v4 = v17;
        }
        while (!v11);
      }
      v4 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void std::__destroy_at[abi:nn180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::MDString *v6;
  char *String;
  size_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  llvm::MDString *v12;
  char *v13;
  size_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  llvm::MDString *v18;
  void *v19;
  size_t v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v24;
  void *__dst;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 + 1;
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    v5 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (!v5)
    {
      v10 = 0;
      v9 = "";
      goto LABEL_8;
    }
  }
  v6 = *(llvm::MDString **)(v5 - 8 * *(unsigned int *)(v5 + 8));
  if (v6)
  {
    String = (char *)llvm::MDString::getString(v6);
    if (String)
    {
      v9 = String;
      v10 = v8;
LABEL_8:
      std::string::basic_string[abi:nn180100](&__dst, v9, v10);
      goto LABEL_9;
    }
  }
  __dst = 0;
  v26 = 0;
  v27 = 0;
LABEL_9:
  v11 = a2;
  if (*(_BYTE *)a2 == 15 || (v11 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
  {
    v12 = *(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
    if (!v12 || (v13 = (char *)llvm::MDString::getString(v12)) == 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      v24 = 0;
      goto LABEL_17;
    }
    v15 = v13;
    v16 = v14;
  }
  else
  {
    v16 = 0;
    v15 = "";
  }
  std::string::basic_string[abi:nn180100](__p, v15, v16);
LABEL_17:
  v17 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v4, (uint64_t)&__dst, (uint64_t)__p, *(unsigned int *)(a2 + 24), -1);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(__dst);
  v18 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v18 && (v19 = (void *)llvm::MDString::getString(v18)) != 0)
  {
    std::string::basic_string[abi:nn180100](&__dst, v19, v20);
  }
  else
  {
    __dst = 0;
    v26 = 0;
    v27 = 0;
  }
  v21 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, a2, (uint64_t)&__dst, v17);
  if (SHIBYTE(v27) < 0)
    operator delete(__dst);
  return v21;
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_725920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_725920;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

id StringFromArchive(_QWORD *a1, uint64_t a2, char *a3)
{
  unsigned int *FileWithFilename;
  unsigned int *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;

  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)a1, a3);
  if ((FileWithFilename[4] & 2) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *a1));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByAppendingPathComponent:", v11));

    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithContentsOfFile:encoding:error:", v12, 4, 0);
  }
  else
  {
    v7 = FileWithFilename;
    v8 = malloc_type_malloc(*FileWithFilename, 0xEA1EA036uLL);
    GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)a1, a2, (uint64_t)v7, v8, *v7, 0);
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v8, *v7, 4, 1);
  }
  return v9;
}

void GTMTLReplayController_defaultDispatchFunction(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  id v6;
  int v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t Object;
  id MTLTextureDescriptor;
  void *v13;
  id v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  NSObject *v21;
  int v22;
  int v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  id v29;
  NSObject *v30;
  char *v31;
  _QWORD *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  FILE *v37;
  id v38;
  FILE *v39;
  id v40;
  uint8_t buf[8];
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;

  if ((dword_75313C & 0x4000000) == 0 || (v4 = *(_DWORD *)(a1 + 22488)) == 0 || v4 != *(_DWORD *)(a1 + 22480))
  {
    if ((GT_SUPPORT_0 & 0x80000) == 0)
    {
      GTMTLReplayController_defaultDispatchFunction_noPinning(a1, a2);
      return;
    }
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v6 = *(id *)(a1 + 8);
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 <= -15660)
    {
      if (v7 <= -16164)
      {
        if (v7 <= -16314)
        {
          if (v7 == -16370)
            goto LABEL_73;
          v22 = -16314;
          goto LABEL_35;
        }
        if (v7 != -16313)
        {
          v23 = -16312;
LABEL_41:
          if (v7 != v23)
            goto LABEL_72;
        }
      }
      else
      {
        if (v7 <= -15779)
        {
          v8 = (v7 + 16163);
          if (v8 <= 0x2F)
          {
            if (((1 << v8) & 0x680000000001) == 0)
            {
              if (v8 == 47)
              {
                v9 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v5);
                v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "heapForKey:", *(_QWORD *)v9));
                if (objc_msgSend(v10, "type") == (char *)&dword_0 + 1)
                {
                  Object = GTMTLSMContext_lastObject(**(_QWORD **)(*(_QWORD *)a1 + 40), *((_QWORD *)v9 + 1), *(_QWORD *)a2);
                  GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, v9[16], v5);
                  MTLTextureDescriptor = _MakeMTLTextureDescriptor();
                  v13 = (void *)objc_claimAutoreleasedReturnValue(MTLTextureDescriptor);
                  v14 = objc_msgSend(v10, "newTextureWithDescriptor:offset:", v13, *(unsigned int *)(Object + 80));
                }
                else
                {
                  GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, v9[16], v5);
                  v34 = _MakeMTLTextureDescriptor();
                  v13 = (void *)objc_claimAutoreleasedReturnValue(v34);
                  v14 = objc_msgSend(v10, "newTextureWithDescriptor:", v13);
                }
                v35 = v14;

                v36 = *((_QWORD *)v9 + 1);
                if (v35)
                {
                  objc_msgSend(v6, "setTexture:forKey:", v35, v36);
                }
                else if (v36)
                {
                  GTMTLReplay_dispatchFailedToSet(a2, *((_QWORD *)v9 + 1));
                }

                goto LABEL_73;
              }
              goto LABEL_72;
            }
LABEL_73:

            return;
          }
LABEL_72:
          GTMTLReplayController_defaultDispatchFunction_noPinning(a1, a2);
          goto LABEL_73;
        }
        if (v7 == -15778)
          goto LABEL_73;
        if (v7 != -15707)
        {
          v22 = -15705;
          goto LABEL_35;
        }
      }
      v24 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v5);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bufferForKey:", *((_QWORD *)v24 + 1)));
      v26 = *((_QWORD *)v24 + 1);
      *(_QWORD *)buf = 22;
      v42 = v26;
      v43 = 0;
      v44 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, v24[40], v5);
      v45 = 0u;
      v46 = 0u;
      *((_QWORD *)&v45 + 1) = *((_QWORD *)v24 + 2);
      GTMTLReplayController_restoreMTLBufferContents(a1, buf);

      goto LABEL_73;
    }
    if (v7 > -15465)
    {
      switch(v7)
      {
        case -15356:
        case -15355:
        case -15354:
        case -15353:
          v15 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v5);
          v16 = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)a1 + 40), *((_QWORD *)v15 + 1), *(_QWORD *)a2);
          if ((GT_SUPPORT_0 & 0x100000) != 0 && v16[19])
            goto LABEL_72;
          break;
        case -15352:
        case -15351:
          if ((GT_SUPPORT_0 & 0x80000) == 0)
            goto LABEL_72;
          break;
        default:
          if (v7 != -15464)
          {
            v23 = -10237;
            goto LABEL_41;
          }
          break;
      }
      goto LABEL_73;
    }
    if (v7 > -15615)
    {
      if (v7 != -15614)
      {
        v22 = -15509;
LABEL_35:
        if (v7 == v22)
          goto LABEL_73;
        goto LABEL_72;
      }
      v31 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v5);
      v32 = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)a1 + 40), *((_QWORD *)v31 + 1), *(_QWORD *)a2);
      v19 = v32;
      if ((GT_SUPPORT_0 & 0x100000) == 0 && v32[19])
      {
        if (s_logUsingOsLog)
        {
          v33 = gt_default_log();
          v21 = objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            goto LABEL_76;
          }
LABEL_55:

          goto LABEL_68;
        }
LABEL_62:
        v37 = __stderrp;
        v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("warning: Acceleration structure indirection is not supported, but acceleration structures have indices"))));
        fprintf(v37, "%s\n", (const char *)objc_msgSend(v38, "UTF8String"));

      }
    }
    else
    {
      if (v7 == -15659)
      {
        v27 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v5);
        v28 = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)a1 + 40), *v27, *(_QWORD *)a2 - 1);
        v19 = v28;
        if ((GT_SUPPORT_0 & 0x100000) == 0 && v28[19])
        {
          if (s_logUsingOsLog)
          {
            v29 = gt_default_log();
            v30 = objc_claimAutoreleasedReturnValue(v29);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, "warning: Acceleration structure indirection is not supported, but acceleration structures have indices", buf, 2u);
            }

          }
          else
          {
            v39 = __stderrp;
            v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("warning: Acceleration structure indirection is not supported, but acceleration structures have indices"))));
            fprintf(v39, "%s\n", (const char *)objc_msgSend(v40, "UTF8String"));

          }
        }
        if (v19[6])
        {
          if ((GT_SUPPORT_0 & 0x100000) == 0 || !v19[19])
            goto LABEL_73;
          goto LABEL_72;
        }
        goto LABEL_68;
      }
      if (v7 != -15615)
        goto LABEL_72;
      v17 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a2, *(unsigned __int8 *)(a2 + 13), v5);
      v18 = GTMTLSMContext_getObject(**(_QWORD **)(*(_QWORD *)a1 + 40), *((_QWORD *)v17 + 1), *(_QWORD *)a2);
      v19 = v18;
      if ((GT_SUPPORT_0 & 0x100000) == 0 && v18[19])
      {
        if (s_logUsingOsLog)
        {
          v20 = gt_default_log();
          v21 = objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
LABEL_76:
            _os_log_error_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "warning: Acceleration structure indirection is not supported, but acceleration structures have indices", buf, 2u);
            goto LABEL_55;
          }
          goto LABEL_55;
        }
        goto LABEL_62;
      }
    }
LABEL_68:
    if (v19[18] || ((GT_SUPPORT_0 & 0x100000) == 0 || !v19[19]) && v19[20])
      goto LABEL_73;
    goto LABEL_72;
  }
}

#error "2479C0: too big function (funcsize=0)"

id _MakeMTLTextureDescriptor()
{
  uint64_t MTLTextureDescriptor;
  void *v1;
  unint64_t v2;
  unint64_t v3;

  MTLTextureDescriptor = MakeMTLTextureDescriptor();
  v1 = (void *)objc_claimAutoreleasedReturnValue(MTLTextureDescriptor);
  v2 = (unint64_t)objc_msgSend(v1, "resourceOptions");
  if ((dword_75313C & 0x40000) != 0)
    v3 = v2 & 0xFFFFFFFFFFFFFCFFLL;
  else
    v3 = v2;
  objc_msgSend(v1, "setResourceOptions:", v3);
  return v1;
}

id _MakeMTLComputePipelineDescriptor()
{
  uint64_t MTLComputePipelineDescriptor;
  void *v1;

  MTLComputePipelineDescriptor = MakeMTLComputePipelineDescriptor();
  v1 = (void *)objc_claimAutoreleasedReturnValue(MTLComputePipelineDescriptor);
  objc_msgSend(v1, "setBinaryArchives:", insertBinaryArchives);
  return v1;
}

id _MakeMTLRenderPipelineDescriptor()
{
  uint64_t MTLRenderPipelineDescriptor;
  void *v1;

  MTLRenderPipelineDescriptor = MakeMTLRenderPipelineDescriptor();
  v1 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPipelineDescriptor);
  objc_msgSend(v1, "setBinaryArchives:", insertBinaryArchives);
  return v1;
}

id _MakeMTLMeshRenderPipelineDescriptor()
{
  uint64_t MTLMeshRenderPipelineDescriptor;
  void *v1;

  MTLMeshRenderPipelineDescriptor = MakeMTLMeshRenderPipelineDescriptor();
  v1 = (void *)objc_claimAutoreleasedReturnValue(MTLMeshRenderPipelineDescriptor);
  objc_msgSend(v1, "setBinaryArchives:", insertBinaryArchives);
  return v1;
}

id _MakeMTLTileRenderPipelineDescriptor(uint64_t a1, void *a2)
{
  id MTLTileRenderPipelineDescriptor;
  void *v3;

  MTLTileRenderPipelineDescriptor = MakeMTLTileRenderPipelineDescriptor(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(MTLTileRenderPipelineDescriptor);
  objc_msgSend(v3, "setBinaryArchives:", insertBinaryArchives);
  return v3;
}

id NewCommandBuffer(void *a1)
{
  void *v1;

  if (g_commandBufferDescriptor)
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "commandBufferWithDescriptor:"));
  else
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "commandBuffer"));
  return v1;
}

id MTLDevice_newBufferWithBytes_length_options(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  apr_pool_t **v7;
  uint64_t v8;
  id v9;
  void *v10;
  char *v11;
  unsigned int *FileWithFilename;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  char *v22;
  void *v23;
  void *v24;
  apr_pool_t *v25;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  apr_pool_t *p;

  v6 = **(_QWORD **)a1;
  v7 = *(apr_pool_t ***)(a1 + 152);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v9 = *(id *)(a1 + 8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "deviceForKey:", *(_QWORD *)a3));
  p = *v7;
  v11 = GTTraceFunc_argumentBytesWithMap(a2, *(unsigned __int8 *)(a3 + 40), v8);
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(v6, v11);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = v13 & 0xFFFFFFFFFFEFFFFFLL;
  if ((v13 & 0xF0) == 0x20
    || (v15 = (uint64_t)FileWithFilename, v16 = FileWithFilename[4], (v16 & 2) == 0) && (v13 & 0xF) == 1)
  {
    v17 = objc_msgSend(v10, "newBufferWithLength:options:", *(_QWORD *)(a3 + 16), v14);
    v18 = *(_QWORD *)(a3 + 16);
    v33 = v10;
    v19 = v9;
    v20 = *(id *)(a1 + 24);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bufferWithLength:alignment:", v18, 1));
    v22 = GTTraceFunc_argumentBytesWithMap(a2, *(unsigned __int8 *)(a3 + 40), v8);
    GTCaptureArchive_fillBuffer(v6, v7, v22, (char *)objc_msgSend(v21, "contents"), *(_QWORD *)(a3 + 16), 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "blitCommandEncoder"));

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "heapBuffer"));
    objc_msgSend(v23, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v24, objc_msgSend(v21, "heapLocation"), v17, 0, *(_QWORD *)(a3 + 16));

    v9 = v19;
    v10 = v33;

  }
  else
  {
    if ((v16 & 2) != 0)
    {
      v25 = p;
      v17 = objc_msgSend(v10, "newBufferWithBytes:length:options:", GTCaptureArchive_mapDataSeperateFile(v6, FileWithFilename, p, 0), *(_QWORD *)(a3 + 16), v14);
      goto LABEL_6;
    }
    v27 = objc_msgSend(v10, "newBufferWithLength:options:", *(_QWORD *)(a3 + 16), v14);
    v28 = v10;
    v29 = v9;
    v30 = *(_QWORD *)(a1 + 152);
    v17 = objc_retainAutorelease(v27);
    v31 = objc_msgSend(v17, "contents");
    v32 = v30;
    v9 = v29;
    v10 = v28;
    GTCaptureArchive_fillBufferCompressedDeflate(v6, v32, v15, v31, *(_QWORD *)(a3 + 16), 0);
  }
  v25 = p;
LABEL_6:
  apr_pool_clear(v25);

  return v17;
}

id _MakeIOSurface(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSSet *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  const CATransform3D **v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  void *j;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  uint64_t v64;
  id v65;
  void *v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  _QWORD v82[6];
  _BYTE v83[128];
  _QWORD v84[10];

  v65 = a2;
  v68 = a1;
  if (*(_QWORD *)(a1 + 104))
  {
    v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), 0);
    v5 = objc_opt_class(NSDictionary, v4);
    v7 = objc_opt_class(NSArray, v6);
    v9 = objc_opt_class(NSString, v8);
    v11 = objc_opt_class(NSNumber, v10);
    v64 = v7;
    a1 = v68;
    v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v64, v9, v11, objc_opt_class(NSData, v12), 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v14, v3, 0));
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", kIOSurfaceCreationProperties));

  }
  else
  {
    v66 = 0;
  }
  v16 = objc_alloc_init((Class)NSMutableDictionary);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)a1));
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("address"));

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 92)));
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v18, IOSurfacePropertyKeyWidth);

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 94)));
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v19, IOSurfacePropertyKeyHeight);

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84)));
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v20, IOSurfacePropertyKeyPixelFormat);

  if (!*(_BYTE *)(a1 + 102))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 96)));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v21, IOSurfacePropertyKeyBytesPerElement);

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80)));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v22, IOSurfacePropertyKeyBytesPerRow);

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 98)));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v23, IOSurfacePropertyKeyElementWidth);

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 100)));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v24, IOSurfacePropertyKeyElementHeight);

  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 8)));
  v67 = v16;
  objc_msgSend(v16, "setObject:forKeyedSubscript:", v25, IOSurfacePropertyKeyAllocSize);

  v26 = v66;
  if (v66)
  {
    v84[0] = IOSurfacePropertyKeyAllocSize;
    v84[1] = IOSurfacePropertyKeyWidth;
    v84[2] = IOSurfacePropertyKeyHeight;
    v84[3] = IOSurfacePropertyKeyBytesPerElement;
    v84[4] = IOSurfacePropertyKeyBytesPerRow;
    v84[5] = IOSurfacePropertyKeyElementWidth;
    v84[6] = IOSurfacePropertyKeyElementHeight;
    v84[7] = IOSurfacePropertyKeyPixelFormat;
    v84[8] = CFSTR("IOSurfaceAddress");
    v84[9] = CFSTR("IOSurfaceProtectionOptions");
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v84, 10));
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v28 = v66;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v77, v83, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v78;
      do
      {
        for (i = 0; i != v30; i = (char *)i + 1)
        {
          if (*(_QWORD *)v78 != v31)
            objc_enumerationMutation(v28);
          v33 = *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v27, "containsObject:", v33) & 1) == 0)
          {
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v33));
            objc_msgSend(v67, "setObject:forKeyedSubscript:", v34, v33);

          }
        }
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v77, v83, 16);
      }
      while (v30);
    }

  }
  v35 = v68;
  if (*(_BYTE *)(v68 + 102))
  {
    v82[0] = IOSurfacePropertyKeyPlaneWidth;
    v82[1] = IOSurfacePropertyKeyPlaneHeight;
    v82[2] = IOSurfacePropertyKeyPlaneBytesPerElement;
    v82[3] = IOSurfacePropertyKeyPlaneBytesPerRow;
    v82[4] = IOSurfacePropertyKeyPlaneElementWidth;
    v82[5] = IOSurfacePropertyKeyPlaneElementHeight;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v82, 6));
    v69 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", *(unsigned __int8 *)(v68 + 102));
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectForKeyedSubscript:", IOSurfacePropertyKeyPlaneInfo));
    v37 = &CATransform3DIdentity_ptr;
    if (*(_BYTE *)(v68 + 102))
    {
      v38 = 0;
      v71 = 0;
      do
      {
        v39 = v35 + 16 * v38;
        v40 = *(unsigned __int16 *)(v39 + 22);
        v41 = *(_DWORD *)(v39 + 16);
        v42 = objc_alloc_init((Class)NSMutableDictionary);
        v43 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedShort:]((id)v37[288], "numberWithUnsignedShort:", *(unsigned __int16 *)(v39 + 20)));
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v43, IOSurfacePropertyKeyPlaneWidth);

        v44 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedShort:]((id)v37[288], "numberWithUnsignedShort:", *(unsigned __int16 *)(v39 + 22)));
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v44, IOSurfacePropertyKeyPlaneHeight);

        v45 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedShort:]((id)v37[288], "numberWithUnsignedShort:", *(unsigned __int16 *)(v39 + 24)));
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v45, IOSurfacePropertyKeyPlaneBytesPerElement);

        v46 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedInt:]((id)v37[288], "numberWithUnsignedInt:", *(unsigned int *)(v39 + 16)));
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v46, IOSurfacePropertyKeyPlaneBytesPerRow);

        if (*(_WORD *)(v39 + 26))
        {
          v47 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedShort:]((id)v37[288], "numberWithUnsignedShort:"));
          objc_msgSend(v42, "setObject:forKeyedSubscript:", v47, IOSurfacePropertyKeyPlaneElementWidth);

        }
        if (*(_WORD *)(v39 + 28))
        {
          v48 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedShort:]((id)v37[288], "numberWithUnsignedShort:"));
          objc_msgSend(v42, "setObject:forKeyedSubscript:", v48, IOSurfacePropertyKeyPlaneElementHeight);

        }
        v49 = (v41 * v40);
        v50 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedInteger:]((id)v37[288], "numberWithUnsignedInteger:", v71));
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v50, IOSurfacePropertyKeyPlaneOffset);

        v51 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedInteger:]((id)v37[288], "numberWithUnsignedInteger:", v49));
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v51, IOSurfacePropertyKeyPlaneSize);

        if (v72)
        {
          v70 = v49;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectAtIndexedSubscript:", v38));
          v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v73, v81, 16);
          if (v53)
          {
            v54 = v53;
            v55 = *(_QWORD *)v74;
            do
            {
              for (j = 0; j != v54; j = (char *)j + 1)
              {
                if (*(_QWORD *)v74 != v55)
                  objc_enumerationMutation(v52);
                v57 = *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * (_QWORD)j);
                if ((objc_msgSend(v36, "containsObject:", v57) & 1) == 0)
                {
                  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectAtIndexedSubscript:", v38));
                  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", v57));
                  objc_msgSend(v42, "setObject:forKeyedSubscript:", v59, v57);

                }
              }
              v54 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v73, v81, 16);
            }
            while (v54);
          }

          v35 = v68;
          v37 = &CATransform3DIdentity_ptr;
          v49 = v70;
        }
        v60 = objc_msgSend(v42, "copy");
        objc_msgSend(v69, "addObject:", v60);

        v71 += v49;
        ++v38;
      }
      while (v38 < *(unsigned __int8 *)(v35 + 102));
    }
    v61 = objc_msgSend(v69, "copy");
    objc_msgSend(v67, "setObject:forKeyedSubscript:", v61, IOSurfacePropertyKeyPlaneInfo);

    v26 = v66;
  }

  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "iosurfaceForProperties:", v67));
  return v62;
}

id MakeNSArray(uint64_t *a1, int a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v5 = a3;
  v6 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", a2);
  if (a2 >= 1)
  {
    v7 = a2;
    do
    {
      v8 = *a1++;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v8));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v9));
      objc_msgSend(v6, "addObject:", v10);

      --v7;
    }
    while (v7);
  }

  return v6;
}

id NewLibraryWithFile(void *a1, uint64_t a2, char *a3, char *a4, int a5, uint64_t a6, _QWORD *a7)
{
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *FileWithFilename;
  char *v25;
  id v26;
  dispatch_data_t v27;
  id v28;
  uint64_t v29;
  unsigned int *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;

  v13 = a1;
  v14 = *(void **)(a2 + 144);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a6));
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));

  if (!v16)
  {
    if (a3)
    {
      v17 = *(void **)(a2 + 128);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a6));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v18));

      if (v19)
      {
        v20 = MTLDevice_newLibraryWithFile(v13, (uint64_t)v19, a7);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      }
      else
      {
        v22 = **(_QWORD ***)a2;
        v23 = *(_QWORD *)(a2 + 152);
        FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)v22, a3);
        if (a5)
        {
          if (a4)
            v25 = a4;
          else
            v25 = a3;
          v26 = GTMTLReplayController_dumpLibrary(a2, a3, v25);
          v27 = (dispatch_data_t)objc_claimAutoreleasedReturnValue(v26);
          v28 = MTLDevice_newLibraryWithFile(v13, (uint64_t)v27, a7);
          v29 = objc_claimAutoreleasedReturnValue(v28);
        }
        else
        {
          v30 = FileWithFilename;
          if ((FileWithFilename[4] & 2) != 0)
          {
            v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *v22));
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "stringByAppendingPathComponent:", v34));

            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v35));
            v37 = MTLDevice_newLibraryWithFile(v13, (uint64_t)v36, a7);
            v21 = (void *)objc_claimAutoreleasedReturnValue(v37);

            goto LABEL_15;
          }
          v31 = malloc_type_malloc(*FileWithFilename, 0xB740AAF1uLL);
          GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)v22, v23, (uint64_t)v30, v31, *v30, 0);
          v27 = dispatch_data_create(v31, *v30, 0, _dispatch_data_destructor_free);
          v32 = MTLDevice_newLibraryWithData(v13, (uint64_t)v27, a7);
          v29 = objc_claimAutoreleasedReturnValue(v32);
        }
        v21 = (void *)v29;

      }
LABEL_15:
      v16 = v21;

      goto LABEL_16;
    }
    v16 = 0;
  }
LABEL_16:

  return v16;
}

id _MakeMTLCompileOptions(uint64_t a1, void *a2)
{
  id MTLCompileOptions;
  id v3;
  void *v4;

  if (a1)
  {
    MTLCompileOptions = MakeMTLCompileOptions(a1, a2);
    v3 = (id)objc_claimAutoreleasedReturnValue(MTLCompileOptions);
  }
  else
  {
    v3 = objc_alloc_init((Class)MTLCompileOptions);
  }
  v4 = v3;
  objc_msgSend(v3, "setDebuggingEnabled:", 1);
  return v4;
}

id NewLibraryWithSource(uint64_t a1, void *a2, char *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v25;

  v9 = a2;
  v10 = a4;
  v11 = StringFromArchive(**(_QWORD ***)a1, *(_QWORD *)(a1 + 152), a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (objc_msgSend(v10, "libraryType") == (char *)&dword_0 + 1)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "installName"));
    v14 = objc_msgSend(v13, "hasPrefix:", CFSTR("/"));

    if (v14)
    {
      v15 = *(void **)(a1 + 22568);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "installName"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "substringFromIndex:", 1));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "URLByAppendingPathComponent:", v17));

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "path"));
      objc_msgSend(v10, "setInstallName:", v19);

    }
  }
  v25 = 0;
  v20 = objc_msgSend(v9, "newLibraryWithSource:options:error:", v12, v10, &v25);
  v21 = v25;
  v22 = v21;
  if (a5)
    *a5 = objc_retainAutorelease(v21);
  v23 = ValidateLibrary(v20);
  objc_claimAutoreleasedReturnValue(v23);

  return v20;
}

void GTMTLReplay_dispatchFailedToSet(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1, 64));
  v3 = (void *)funcMap;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a2));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, v4);

}

void GTMTLReplay_dispatchFailedToGet(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  const char *v17;
  const char *FuncEnumAsString;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;

  if (a1)
  {
    v4 = (void *)funcMap;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1));
    v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

    if (v27)
      v6 = objc_msgSend(objc_retainAutorelease(v27), "bytes");
    else
      v6 = 0;
    v7 = (void *)failureMap;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

    if (v9)
    {
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v9, "integerValue") + 1));
      v11 = (void *)failureMap;
      v12 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v12);
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      v14 = (void *)failureMap;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, v15);

      if (v6)
      {
        v16 = GetFuncEnumConstructorType(v6[2]) - 1;
        if (v16 > 0x55)
          v17 = "Unknown";
        else
          v17 = (&off_727958)[v16];
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
        FuncEnumAsString = GetFuncEnumAsString(v6[2]);
      }
      else
      {
        v10 = 0;
        FuncEnumAsString = 0;
      }
      v12 = objc_alloc_init((Class)NSMutableDictionary);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a1));
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v19, CFSTR("GTErrorKeyTraceStreamID"));

      if (a2)
        objc_msgSend(v12, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("GTErrorKeyResourceUnused"));
      if (v6)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)v6));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v20, CFSTR("GTErrorKeyFunctionIndex"));

      }
      if (FuncEnumAsString)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", FuncEnumAsString));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v21, CFSTR("GTErrorKeyFenum"));

      }
      if (!v10
        || (objc_msgSend(v12, "setObject:forKeyedSubscript:", v10, CFSTR("GTErrorKeyReceiverType")),
            -[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("Unknown"))))
      {

        v10 = CFSTR("Metal object");
      }
      if (FuncEnumAsString)
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", FuncEnumAsString));
        v23 = PrettifyFenumString(v22);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ creation failed when calling %@."), v10, v24));

      }
      else
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ creation failed."), v10));
      }
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v25, NSLocalizedDescriptionKey);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.gputools.MTLReplayer"), 150, v12));
      GTMTLReplay_handleNSError(v26);

    }
  }
}

uint64_t GetEnvDefault(const char *a1, uint64_t a2)
{
  char *v3;

  v3 = getenv(a1);
  if (v3)
    return strtol(v3, 0, 0);
  else
    return a2;
}

id GTApplePMPPerfStateControl::EnableConsistentPerfState(GTApplePMPPerfStateControl *this, uint64_t a2)
{
  id v2;
  int v3;
  void *v5;
  uint64_t v6;
  _OWORD *v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  GTApplePMPPerfStateControl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;

  if (a2 <= 2)
  {
    v3 = a2;
    v5 = (void *)objc_opt_new(NSMutableDictionary, a2);
    *((_DWORD *)this + 3) = v3;
    v6 = *(_QWORD *)this;
    v7 = operator new(0x28uLL);
    *v7 = 0u;
    v7[1] = 0u;
    *((_QWORD *)v7 + 4) = v6;
    v8 = *((_DWORD *)this + 452);
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = this;
      do
      {
        v12 = *((_QWORD *)v11 + 5);
        if (v12)
        {
          v13 = (uint64_t *)((char *)this + 56 * v10 + 8 * *((unsigned int *)this + 3) + 24);
          v14 = v13;
        }
        else
        {
          v13 = (uint64_t *)((char *)v11 + 56);
          v14 = (uint64_t *)((char *)v11 + 64);
        }
        v15 = *v14;
        *((_QWORD *)v7 + (v10 >> 4)) |= *v13 << (v9 & 0x3C);
        *((_QWORD *)v7 + (v10 >> 4) + 2) |= v15 << (v9 & 0x3C);
        if (v12 && *((_QWORD *)v11 + 2))
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)v11 + *((unsigned int *)this + 3) + 3)));
          objc_msgSend(v5, "setObject:forKeyedSubscript:", v16, *((_QWORD *)v11 + 2));

          v8 = *((_DWORD *)this + 452);
        }
        ++v10;
        v11 = (GTApplePMPPerfStateControl *)((char *)v11 + 56);
        v9 += 4;
      }
      while (v10 < v8);
    }
    if (GTApplePMPPerfStateControl::SetDVFSStates(this, (uint64_t *)v7))
      v2 = 0;
    else
      v2 = objc_msgSend(v5, "copy");
    operator delete(v7);

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_2590B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GTApplePMPPerfStateControl::SetDVFSStates(GTApplePMPPerfStateControl *this, uint64_t *input)
{
  mach_port_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  void *v7;
  void *v8;
  FILE *v9;
  int v10;
  id v11;
  const char *v12;
  const char *v13;
  id v14;

  v3 = *((_DWORD *)this + 2);
  if (!v3)
    return 0;
  v4 = IOConnectCallMethod(v3, *((_DWORD *)this + 459), input, 5u, 0, 0, 0, 0, 0, 0);
  v5 = v4;
  if ((_DWORD)v4)
  {
    v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", mach_error_string(v4));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("_setDVFSStates (0x%x - %@)"), v5, v7));

    v9 = __stdoutp;
    v10 = g_runningInCI;
    v11 = objc_retainAutorelease(v8);
    v12 = (const char *)objc_msgSend(v11, "UTF8String");
    v13 = "#CI_ERROR# ";
    if (!v10)
      v13 = "";
    fprintf(v9, "%s%s %u: %s\n", v13, "IOReturn GTApplePMPPerfStateControl::SetDVFSStates(uint64_t *, uint32_t)", 303, v12);
    v14 = objc_retainAutorelease(v11);
    GTMTLReplay_handleError(101, (uint64_t)objc_msgSend(v14, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/profile/GTApplePMPPerfStateControl.mm", (uint64_t)"SetDVFSStates", 303, 2);

  }
  return v5;
}

void sub_259238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GTApplePMPPerfStateControl::DisableConsistentPerfState(GTApplePMPPerfStateControl *this)
{
  _OWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (*((_DWORD *)this + 3) != 3)
  {
    v2 = operator new(0x28uLL);
    v3 = v2;
    *v2 = 0u;
    v2[1] = 0u;
    *((_QWORD *)v2 + 4) = 0;
    v4 = *((unsigned int *)this + 452);
    if (*((_DWORD *)this + 452))
    {
      v5 = 0;
      v6 = 0;
      v7 = (uint64_t *)((char *)this + 64);
      do
      {
        *((_QWORD *)v2 + (v6 >> 4)) |= *(v7 - 1) << (v5 & 0x3C);
        v8 = *v7;
        v7 += 7;
        *((_QWORD *)v2 + (v6++ >> 4) + 2) |= v8 << (v5 & 0x3C);
        v5 += 4;
      }
      while (v4 != v6);
    }
    *((_DWORD *)this + 3) = 3;
    GTApplePMPPerfStateControl::SetDVFSStates(this, (uint64_t *)v2);
    operator delete(v3);
  }
}

void sub_259308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void GTApplePMPPerfStateControl::Close(GTApplePMPPerfStateControl *this)
{
  io_connect_t v2;
  void *v3;
  FILE *v4;
  id v5;
  id v6;

  v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    IOServiceClose(v2);
    *((_DWORD *)this + 2) = 0;
    if (g_runningInCI)
    {
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u Connection Closed"), mach_task_self_));
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR("\n#CI-INFO# ")));

      v4 = __stdoutp;
      v6 = objc_retainAutorelease(v3);
      fprintf(v4, "#CI-INFO# %s\n", (const char *)objc_msgSend(v6, "UTF8String"));

    }
  }
}

void sub_2593F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id GTMTLReplayController_getResizeRenderPipelineState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v26;

  v6 = *(void **)(a1 + 152);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  if (!v8)
  {
    v9 = *(id *)(a1 + 80);
    v10 = v9;
    v11 = *(_DWORD *)(a2 + 8);
    v12 = 10;
    v13 = 90;
    if ((v11 & 0x800010) == 0x10)
      v13 = a3;
    if ((v11 & 0x40) == 0)
      v12 = v13;
    if ((v11 & 0x20) != 0)
      v14 = 55;
    else
      v14 = v12;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "colorAttachments"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v16, "setPixelFormat:", v14);

    v17 = *(_DWORD *)(a2 + 8);
    v18 = (_QWORD *)(a1 + 88);
    if ((v17 & 0x40000) != 0)
      v18 = (_QWORD *)(a1 + 104);
    if ((v17 & 0x80000) != 0)
      v18 = (_QWORD *)(a1 + 96);
    if ((v17 & 0x40) != 0)
      v18 = (_QWORD *)(a1 + 120);
    if ((v17 & 0x20) != 0)
      v19 = (_QWORD *)(a1 + 112);
    else
      v19 = v18;
    objc_msgSend(v10, "setFragmentFunction:", *v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "fragmentFunction"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "device"));

    v26 = 0;
    v8 = objc_msgSend(v21, "newRenderPipelineStateWithDescriptor:error:", v10, &v26);
    v22 = v26;
    v23 = *(void **)(a1 + 152);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v8, v24);

  }
  return v8;
}

id GTMTLReplayController_resizeTexture(void *a1, uint64_t a2, void *a3, void *a4, unint64_t a5, unint64_t a6, void **a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id ResizeRenderPipelineState;
  void *v32;
  _QWORD *v33;
  id v34;
  void *v35;
  void *v36;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  _OWORD v44[3];
  uint64_t v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  NSErrorUserInfoKey v58;
  id v59;

  v13 = a3;
  v14 = a4;
  v15 = a1;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "device"));
  v17 = objc_msgSend(v14, "pixelFormat");
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v47 = 0u;
  GTMTLPixelFormatGetInfoForDevice((uint64_t)&v47, (uint64_t)v16, (uint64_t)v17);
  v18 = 10;
  v19 = 90;
  if ((DWORD2(v47) & 0x800010) == 0x10)
    v19 = (uint64_t)v17;
  if ((BYTE8(v47) & 0x40) == 0)
    v18 = v19;
  if ((BYTE8(v47) & 0x20) != 0)
    v20 = 55;
  else
    v20 = v18;
  v43 = a6;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v20, a5, a6, 0));
  objc_msgSend(v21, "setUsage:", 5);
  objc_msgSend(v21, "setResourceOptions:", 32);
  objc_msgSend(v21, "setAllowGPUOptimizedContents:", 0);
  v46 = 0;
  v22 = objc_msgSend(v15, "newTextureWithDescriptor:error:", v21, &v46);

  v23 = v46;
  v24 = v23;
  if (v22)
  {
    v38 = v23;
    v40 = v16;
    v53 = 0u;
    v54 = 0u;
    v55 = 0;
    v57 = 0u;
    v52 = 0u;
    v51 = 1065353216;
    LODWORD(v53) = 1065353216;
    DWORD1(v54) = 1065353216;
    v56 = 1065353216;
    v25 = objc_alloc_init((Class)MTLRenderPassDescriptor);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "colorAttachments"));
    v27 = v13;
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v28, "setTexture:", v22);

    v42 = v27;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "renderCommandEncoderWithDescriptor:", v25));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ResizeTexture")));
    objc_msgSend(v29, "setLabel:", v30);

    v44[0] = v47;
    v44[1] = v48;
    v44[2] = v49;
    v45 = v50;
    ResizeRenderPipelineState = GTMTLReplayController_getResizeRenderPipelineState(a2, (uint64_t)v44, (uint64_t)v17);
    v32 = (void *)objc_claimAutoreleasedReturnValue(ResizeRenderPipelineState);
    objc_msgSend(v29, "setRenderPipelineState:", v32);

    objc_msgSend(v29, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a2 + 144), 0, 0);
    objc_msgSend(v29, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a2 + 144), 96, 1);
    if ((unint64_t)objc_msgSend(v14, "width") >= a5 || (unint64_t)objc_msgSend(v14, "height") >= v43)
      v33 = (_QWORD *)(a2 + 136);
    else
      v33 = (_QWORD *)(a2 + 128);
    objc_msgSend(v29, "setFragmentSamplerState:atIndex:", *v33, 0, v38, v40);
    objc_msgSend(v29, "setFragmentTexture:atIndex:", v14, 0);
    objc_msgSend(v29, "setFragmentBytes:length:atIndex:", &v51, 80, 0);
    objc_msgSend(v29, "drawPrimitives:vertexStart:vertexCount:", 3, 0, 6);
    objc_msgSend(v29, "endEncoding");
    v34 = v22;

    v16 = v41;
    v13 = v42;
    v24 = v39;
  }
  else
  {
    if (v23)
    {
      v58 = NSUnderlyingErrorKey;
      v59 = v23;
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1));
    }
    else
    {
      v35 = 0;
    }
    GTMTLReplay_fillError(a7, 101, v35);
    if (a7)
      v36 = *a7;
    else
      v36 = 0;
    GTMTLReplay_handleNSError(v36);

  }
  return v22;
}

id GTMTLReplayClient_retrieveTexturesForResize(id *a1, void *a2, void *a3, int a4, void **a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  const CATransform3D **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint32_t *v21;
  void *v22;
  int *v23;
  uint64_t v24;
  uint64_t PlanePixelFormat;
  unsigned __int8 v26;
  _BOOL4 v27;
  void *v28;
  void *v29;
  int v30;
  unsigned __int8 v31;
  id v32;
  uint32_t *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  char v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  void **v65;
  const __CFString **v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void **v76;
  void *v77;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  void *v88;
  void *v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  int v94;
  id v95;
  void *v96;
  uint32_t *v97;
  _QWORD v98[3];
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  const __CFString *v112;
  void *v113;
  const __CFString *v114;
  void *v115;
  NSErrorUserInfoKey v116;
  id v117;

  v8 = a2;
  v9 = a3;
  v10 = a1[1];
  v11 = a1[3];
  v83 = a1[2];
  v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "defaultDevice"));
  v81 = objc_msgSend(v90, "maxTextureWidth2D");
  v111 = 0uLL;
  v82 = objc_alloc_init((Class)MTLTextureDescriptor);
  objc_msgSend(v82, "setResourceOptions:", 32);
  v12 = objc_msgSend(v9, "count");
  v13 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v8, "count"));
  v14 = v13;
  v15 = &CATransform3DIdentity_ptr;
  v91 = v12;
  if (!v12)
  {
    v63 = v9;
    v84 = 0;
    v17 = v8;
LABEL_76:
    v68 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D stringWithFormat:]((id)v15[296], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("com.apple.gputools.replay"), CFSTR("TextureBlit")));
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "commandBuffer"));
    objc_msgSend(v69, "setLabel:", v68);

    objc_msgSend(v11, "commitCommandBuffer");
    v70 = v14;
    goto LABEL_88;
  }
  v76 = a5;
  v77 = v10;
  v79 = v11;
  v84 = 0;
  v85 = v13;
  v16 = 0;
  v86 = v9;
  v87 = v8;
  v17 = v8;
  v18 = v9;
  while (1)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", v16));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndexedSubscript:", v16));
    v21 = (uint32_t *)objc_msgSend(v19, "pixelFormat");
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureAttachmentIndex")));
    v23 = (int *)objc_msgSend(v22, "unsignedIntegerValue");

    if (v21 == &stru_B8.reserved3)
      break;
    PlanePixelFormat = GetPlanePixelFormat((uint64_t)v21, 0);
    v24 = (uint64_t)v21;
    if (!PlanePixelFormat)
      goto LABEL_9;
    objc_msgSend(v14, "addObject:", v19);
LABEL_68:

    if (v91 == (id)++v16)
    {
      v63 = v18;
      if (v84)
        GTMTLReplay_commitCommandBuffer(v84);
      else
        v84 = 0;
      v10 = v77;
      v11 = v79;
      v15 = &CATransform3DIdentity_ptr;
      goto LABEL_76;
    }
  }
  v24 = 260;
  if (v23 == (int *)((char *)&dword_8 + 1))
    v24 = 261;
LABEL_9:
  v97 = (uint32_t *)v24;
  v26 = objc_msgSend(v19, "usage");
  v27 = (v26 & 1) == 0;
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureLevel")));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureSlice")));
  v96 = v28;
  v95 = objc_msgSend(v28, "unsignedIntegerValue");
  v92 = v29;
  v93 = objc_msgSend(v29, "unsignedIntegerValue");
  v30 = 0;
  switch((unint64_t)objc_msgSend(v19, "textureType"))
  {
    case 0uLL:
    case 1uLL:
    case 7uLL:
    case 9uLL:
      v30 = 0;
      if (v21 != v97)
      {
        v27 = 1;
        goto LABEL_22;
      }
      v94 = 0;
      goto LABEL_30;
    case 2uLL:
      v30 = 0;
      if (!v28)
        goto LABEL_21;
      goto LABEL_22;
    case 3uLL:
    case 5uLL:
    case 6uLL:
      goto LABEL_22;
    case 4uLL:
    case 8uLL:
      if ((v26 & 1) != 0)
        v27 = 0;
      else
        v27 = a4;
      if (!a4 || v21 == v97)
      {
        v30 = a4;
LABEL_27:
        v94 = 0;
        if ((v30 & 1) == 0 && !v27)
        {
          v32 = v19;
          v14 = v85;
          v18 = v86;
          v17 = v87;
          v33 = v97;
          v34 = v93;
          v35 = v95;
          goto LABEL_63;
        }
      }
      else
      {
        v30 = 1;
LABEL_22:
        v31 = objc_msgSend(v19, "usage");
        v94 = 1;
        if ((v30 & 1) == 0 && (v31 & 0x10) != 0 && !v27)
        {
          v32 = v19;
          v14 = v85;
          v18 = v86;
          v17 = v87;
          v33 = v97;
          v34 = v93;
          v35 = v95;
          goto LABEL_61;
        }
      }
LABEL_30:
      v36 = objc_msgSend(v19, "width");
      v37 = objc_msgSend(v19, "height");
      if (v96)
      {
        v110 = 0;
        v108 = 0u;
        v109 = 0u;
        v107 = 0u;
        GTMTLPixelFormatGetInfoForDevice((uint64_t)&v107, (uint64_t)v90, (uint64_t)v21);
        v38 = ((unint64_t)DWORD2(v107) >> 11) & 4;
        if ((~DWORD2(v107) & 0x60) == 0)
        {
          if (v23 == (int *)((char *)&dword_8 + 1))
          {
            v38 |= 2uLL;
          }
          else if (v23 == &dword_8)
          {
            v38 |= 1uLL;
          }
        }
        v106 = 0;
        v104 = 0u;
        v105 = 0u;
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v100, (uint64_t)v90, (uint64_t)v21, (uint64_t)v36, (uint64_t)v37, 1, (uint64_t)objc_msgSend(v19, "sampleCount"), (uint64_t)v95, v38);
        v37 = (id)*((_QWORD *)&v100 + 1);
        v36 = (id)v100;
        v39 = v101;
      }
      else
      {
        v39 = 1;
      }
      if (v81 >= v36)
        v40 = v36;
      else
        v40 = v81;
      v41 = 5;
      if (!v30)
        v41 = 1;
      if (v94)
        v42 = v41 | 0x10;
      else
        v42 = v41;
      objc_msgSend(v82, "setPixelFormat:", v21);
      objc_msgSend(v82, "setWidth:", v40);
      objc_msgSend(v82, "setHeight:", v37);
      objc_msgSend(v82, "setUsage:", v42);
      v99 = 0;
      v32 = objc_msgSend(v83, "newTextureWithDescriptor:error:", v82, &v99);
      v43 = v99;
      v89 = v43;
      if (v32)
      {
        v44 = v20;
        v45 = v39;
        v88 = v44;
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureDepthPlane")));
        v47 = objc_msgSend(v46, "unsignedIntegerValue");

        if (!v30)
        {
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "blitCommandEncoder"));
          v98[0] = 0;
          v98[1] = 0;
          v98[2] = v47;
          *(_QWORD *)&v100 = v40;
          *((_QWORD *)&v100 + 1) = v37;
          *(_QWORD *)&v101 = v45;
          v107 = v111;
          *(_QWORD *)&v108 = 0;
          objc_msgSend(v53, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v19, v93, v95, v98, &v100, v32, 0, 0, &v107);

          v18 = v86;
          v17 = v87;
          v14 = v85;
          v33 = v97;
          v20 = v88;
          goto LABEL_60;
        }
        v80 = v47;
        *(_QWORD *)&v103 = 0;
        v101 = 0u;
        v102 = 0u;
        v100 = 0u;
        GTMTLPixelFormatGetInfoForDevice((uint64_t)&v100, (uint64_t)v90, (uint64_t)v21);
        v48 = BYTE8(v100);
        v49 = objc_alloc_init((Class)MTLRenderPassDescriptor);
        v50 = v49;
        if ((v48 & 0x20) != 0)
        {
          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "depthAttachment"));
          objc_msgSend(v52, "setTexture:", v19);
          objc_msgSend(v52, "setLevel:", v95);
          objc_msgSend(v52, "setSlice:", v93);
          objc_msgSend(v52, "setDepthPlane:", v47);
          objc_msgSend(v52, "setResolveTexture:", v32);
          objc_msgSend(v52, "setLoadAction:", 1);
          objc_msgSend(v52, "setStoreAction:", 2);
          v17 = v87;
          v20 = v88;
          v33 = v97;
          if ((v48 & 0x40) == 0)
          {
            v14 = v85;
LABEL_57:
            v55 = v84;
            if (!v84)
            {
              v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "defaultCommandQueue"));
              v57 = v17;
              v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "commandBuffer"));

              v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), CFSTR("com.apple.gputools.replay"), CFSTR("ThumbnailsResolve")));
              objc_msgSend(v58, "setLabel:", v59);

              v55 = v58;
              v17 = v57;
              v33 = v97;
            }
            v84 = v55;
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "renderCommandEncoderWithDescriptor:", v50));
            objc_msgSend(v60, "endEncoding");

            v18 = v86;
LABEL_60:

            v35 = 0;
            v34 = 0;
            if (v94)
            {
LABEL_61:
              v61 = v32;
              v32 = objc_msgSend(v32, "newTextureViewWithPixelFormat:textureType:levels:slices:", v33, 2, v35, 1, v34, 1);

              if (!v32)
              {
                v63 = v18;
                v114 = CFSTR("GTErrorKeyMTLPixelFormat");
                v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v33));
                v115 = v64;
                v65 = &v115;
                v66 = &v114;
LABEL_78:
                v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v66, 1));

                GTMTLReplay_fillError(v76, 101, v19);
                if (v76)
                  v71 = *v76;
                else
                  v71 = 0;
                v10 = v77;
                v11 = v79;
                v72 = v92;
                v73 = v96;
                GTMTLReplay_handleNSError(v71);
                goto LABEL_87;
              }
LABEL_67:
              objc_msgSend(v14, "addObject:", v32);

              v19 = v32;
              goto LABEL_68;
            }
LABEL_63:
            if (objc_msgSend(v32, "textureType") == &dword_4 || objc_msgSend(v32, "textureType") == &dword_8)
            {
              v62 = objc_msgSend(v32, "newTextureViewWithPixelFormat:textureType:levels:slices:", v33, objc_msgSend(v32, "textureType"), v35, 1, v34, 1);

              if (!v62)
              {
                v63 = v18;
                v112 = CFSTR("GTErrorKeyMTLPixelFormat");
                v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v33));
                v113 = v64;
                v65 = &v113;
                v66 = &v112;
                goto LABEL_78;
              }
              v32 = v62;
            }
            goto LABEL_67;
          }
          v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "stencilAttachment"));

          v52 = (void *)v54;
        }
        else
        {
          v17 = v87;
          v20 = v88;
          v33 = v97;
          if ((v48 & 0x40) != 0)
          {
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "stencilAttachment"));
          }
          else
          {
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "colorAttachments"));
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectAtIndexedSubscript:", 0));

          }
        }
        v14 = v85;
        objc_msgSend(v52, "setTexture:", v19);
        objc_msgSend(v52, "setLevel:", v95);
        objc_msgSend(v52, "setSlice:", v93);
        objc_msgSend(v52, "setDepthPlane:", v80);
        objc_msgSend(v52, "setResolveTexture:", v32);
        objc_msgSend(v52, "setLoadAction:", 1);
        objc_msgSend(v52, "setStoreAction:", 2);
        goto LABEL_57;
      }
      if (v43)
      {
        v116 = NSUnderlyingErrorKey;
        v117 = v43;
        v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v117, &v116, 1));
      }
      else
      {
        v67 = 0;
      }
      v63 = v86;
      v17 = v87;
      v10 = v77;
      v11 = v79;
      v14 = v85;
      v73 = v96;
      GTMTLReplay_fillError(v76, 101, v67);
      if (v76)
        v74 = *v76;
      else
        v74 = 0;
      GTMTLReplay_handleNSError(v74);

      v72 = v92;
LABEL_87:

      v70 = 0;
LABEL_88:

      return v70;
    default:
      v30 = 0;
LABEL_21:
      if (v21 != v97)
        goto LABEL_22;
      goto LABEL_27;
  }
}

void GTMTLReplayClient_resizeResolution(unint64_t *a1, void *a2, unint64_t *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("width")));
  v7 = objc_msgSend(v6, "unsignedIntegerValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("height")));
  v9 = objc_msgSend(v8, "unsignedIntegerValue");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("format")));
  v11 = objc_msgSend(v10, "unsignedIntegerValue");

  v12 = *a3;
  v13 = a3[1];
  v14 = *a3;
  v15 = v13;
  if (*a3 < (unint64_t)v7 && v13 < (unint64_t)v9 && v11)
  {
    v16 = (float)(unint64_t)v7 / (float)v12;
    v14 = (unint64_t)(float)(v16 * (float)v12);
    v15 = (unint64_t)(float)(v16 * (float)v13);
  }
  if (v14 <= (unint64_t)v7)
  {
    if (v15 <= (unint64_t)v9 || !v11)
      goto LABEL_17;
    goto LABEL_11;
  }
  if (!v11)
    goto LABEL_17;
  if (v15 > (unint64_t)v9)
  {
LABEL_11:
    v20 = (float)(unint64_t)v9 / (float)v13;
    v18 = v20 * (float)v12;
    v19 = v20 * (float)v13;
    if (v18 > (float)(unint64_t)v7)
    {
      v21 = (float)(unint64_t)v7 / v18;
      v18 = v18 * v21;
      v19 = v19 * v21;
    }
    goto LABEL_13;
  }
  v17 = (float)(unint64_t)v7 / (float)v14;
  v18 = v17 * (float)v14;
  v19 = v17 * (float)v15;
LABEL_13:
  v15 = (unint64_t)v19;
  v14 = (unint64_t)v18;
  if ((unint64_t)v18 <= 8)
    v14 = 8;
  if (v15 <= 0x10)
    v15 = 16;
LABEL_17:
  if (v7)
    v12 = v14;
  if (v9)
    v13 = v15;
  *a1 = v12;
  a1[1] = v13;
  a1[2] = 1;
}

void AccelerationStructureViewerServer::ReplayerTransport::~ReplayerTransport(id *this)
{
  AccelerationStructureViewerServer::ReplayerTransport::~ReplayerTransport(this);
  operator delete();
}

{
  id *v2;

  *this = off_725A10;
  v2 = this + 1;
  objc_storeWeak(this + 1, 0);

  objc_destroyWeak(v2);
}

uint64_t AccelerationStructureViewerServer::ReplayerTransport::connect(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t AccelerationStructureViewerServer::ReplayerTransport::disconnect(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void AccelerationStructureViewerServer::ReplayerTransport::send(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id WeakRetained;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      v13 = a3 == 0;
    else
      v13 = 1;
    if (v13 || (v14 = atomic_load((unsigned int *)(v12 + 48)), *(_QWORD *)(a1 + 40) >= v14))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a5, a6));
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = ___ZN33AccelerationStructureViewerServer17ReplayerTransport4sendEPNS_8EndpointEbmPvm_block_invoke;
      v18[3] = &unk_725A48;
      v21 = a1;
      v23 = a3;
      v19 = WeakRetained;
      v22 = a4;
      v16 = v15;
      v20 = v16;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", v18));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 264), "addOperation:", v17);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a4);
    }
  }

}

void sub_25A6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AccelerationStructureViewerServer::ReplayerTransport::teardown(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  _BYTE *v9;
  uint64_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void *(*v14)(_QWORD *);
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  _OWORD v19[66];
  _BYTE *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[4];

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    if (!objc_msgSend(WeakRetained, "sessionID") && objc_msgSend(v7, "requestID"))
    {
      v12 = _NSConcreteStackBlock;
      v13 = 3221225472;
      v14 = ___ZN33AccelerationStructureViewerServer17ReplayerTransport8teardownEPNS_8EndpointEP7NSError_block_invoke;
      v15 = &unk_725E60;
      v18 = a1;
      v16 = v7;
      v17 = v5;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBlockOperation blockOperationWithBlock:](NSBlockOperation, "blockOperationWithBlock:", &v12));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 264), "addOperation:", v11, v12, v13, v14, v15);

      v8 = v16;
      goto LABEL_12;
    }
    v24[0] = off_724220;
    v8 = v5;
    v24[1] = v8;
    v24[2] = 0;
    *(_QWORD *)&v19[0] = off_724120;
    *(_OWORD *)((char *)v19 + 8) = 0u;
    AccelerationStructureViewer::DataSourceError::encode((uint64_t)v24, (uint64_t)v19);
    v9 = 0;
    v10 = *(_QWORD *)&v19[1];
    v23 = 0;
    v22 = 0u;
    if (*(_QWORD *)&v19[1] != -1)
    {
      std::vector<unsigned char>::__append((unint64_t *)&v22, *(_QWORD *)&v19[1] + 1);
      v9 = (_BYTE *)v22;
    }
    *(_QWORD *)&v19[0] = off_724168;
    memset((char *)v19 + 8, 0, 24);
    v20 = v9 + 1;
    v21 = v10;
    AccelerationStructureViewer::DataSourceError::encode((uint64_t)v24, (uint64_t)v19);
    if (v19[1] == v21)
    {
      *v9 = 6;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, 0, 0, v9, v10 + 1);
    }
    else if (!v9)
    {
LABEL_9:

LABEL_12:
      goto LABEL_13;
    }
    operator delete(v9);
    goto LABEL_9;
  }
LABEL_13:

}

void sub_25A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZN33AccelerationStructureViewerServer17ReplayerTransport4sendEPNS_8EndpointEbmPvm_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  void *v10;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(v3 + 32);
    if (!v4)
      goto LABEL_9;
    if (!*(_BYTE *)(a1 + 64))
      goto LABEL_7;
    v5 = atomic_load((unsigned int *)(v4 + 48));
    if (*(_QWORD *)(v3 + 40) < v5)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 16) + 24))(*(_QWORD *)(v3 + 16), *(_QWORD *)(a1 + 56));
      return;
    }
    v2 = *(void **)(a1 + 32);
    if (*(_QWORD *)(v3 + 32))
    {
LABEL_7:
      v9 = CFSTR("sessionId");
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v2, "sessionID")));
      v10 = v6;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[GTTransportMessage_replayer messageWithKind:attributes:payload:](GTTransportMessage_replayer, "messageWithKind:attributes:payload:", 4609, v7, *(_QWORD *)(a1 + 40)));

      objc_msgSend(*(id *)(v3 + 32), "send:inReplyTo:error:", v8, 0, 0);
    }
    else
    {
LABEL_9:
      (*(void (**)(_QWORD, id, _QWORD, _QWORD))(*(_QWORD *)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48), objc_msgSend(v2, "sessionID"), *(_QWORD *)(a1 + 40), 0);
    }
  }
}

void sub_25AB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_25AC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GTAccelerationStructureServerSession;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_25AD1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_25ADEC(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_25B23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  id *v3;
  void *v4;

  objc_destroyWeak(v3);

  _Unwind_Resume(a1);
}

void sub_25B458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_25B4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_25CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,void *a32,uint64_t a33,void *a34,void *a35,void *a36)
{
  void *v36;

  _Unwind_Resume(a1);
}

void GTMTLReplayWireframeRenderer_initWithDevice(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  id v59;

  *(_QWORD *)(a1 + 48) = 1;
  v3 = a2;
  v4 = GTMTLReplayController_defaultLibrary(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("wireframeCreationFragment"));
  objc_msgSend(v6, "setLabel:", CFSTR("wireframeCreationFragment"));
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 16) = 10;
  v9 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("createOutlineTexture"));
  v59 = 0;
  v10 = objc_msgSend(v3, "newComputePipelineStateWithFunction:error:", v9, &v59);
  v11 = v59;
  v12 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;

  v13 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("createOutlineTextureMS"));
  v58 = v11;
  v14 = objc_msgSend(v3, "newComputePipelineStateWithFunction:error:", v13, &v58);
  v15 = v58;

  v16 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;

  v17 = objc_alloc_init((Class)NSMutableDictionary);
  v18 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v17;

  v19 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  v20 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v19;

  v21 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("passthoughVertex"));
  objc_msgSend(*(id *)(a1 + 80), "setVertexFunction:", v21);

  v22 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("fragmentShader"));
  v23 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v22;

  v24 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("fragmentShaderUint"));
  v25 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v24;

  v26 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("fragmentShaderSint"));
  v27 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v26;

  v28 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("depthShader"));
  v29 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v28;

  v30 = objc_msgSend(v5, "newFunctionWithName:", CFSTR("stencilShader"));
  v31 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v30;

  v32 = objc_alloc_init((Class)MTLSamplerDescriptor);
  objc_msgSend(v32, "setMinFilter:", 0);
  objc_msgSend(v32, "setMagFilter:", 0);
  objc_msgSend(v32, "setMipFilter:", 0);
  v33 = objc_msgSend(v3, "newSamplerStateWithDescriptor:", v32);
  v34 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v33;

  objc_msgSend(v32, "setMinFilter:", 1);
  objc_msgSend(v32, "setMagFilter:", 1);
  objc_msgSend(v32, "setMipFilter:", 2);
  v35 = objc_msgSend(v3, "newSamplerStateWithDescriptor:", v32);
  v36 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v35;

  v37 = objc_claimAutoreleasedReturnValue(+[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, 128, 128, 0));
  v38 = *(id *)a1;
  *(_QWORD *)a1 = v37;

  objc_msgSend(*(id *)a1, "setUsage:", 21);
  objc_msgSend(*(id *)a1, "setResourceOptions:", 32);
  v39 = objc_alloc_init((Class)MTLRenderPassDescriptor);
  v40 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v39;

  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "colorAttachments"));
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "objectAtIndexedSubscript:", 0));

  objc_msgSend(v42, "setLoadAction:", 2);
  objc_msgSend(v42, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  v43 = objc_msgSend(v3, "newBufferWithBytes:length:options:", &GTMTLReplayWireframeRenderer_initWithDevice_posData, 144, 0);
  v44 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v43;

  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "vertexDescriptor"));
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "attributes"));
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndexedSubscript:", 0));
  objc_msgSend(v47, "setFormat:", 31);

  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "attributes"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectAtIndexedSubscript:", 1));
  objc_msgSend(v49, "setFormat:", 29);

  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "attributes"));
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectAtIndexedSubscript:", 1));
  objc_msgSend(v51, "setBufferIndex:", 1);

  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "layouts"));
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectAtIndexedSubscript:", 0));
  objc_msgSend(v53, "setStride:", 16);

  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "layouts"));
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectAtIndexedSubscript:", 1));
  objc_msgSend(v55, "setStride:", 8);

  v56 = objc_msgSend(v3, "newBufferWithLength:options:", 0x2000000, 0);
  v57 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v56;

}

id GTMTLReplayController_generateWireframeTexture(uint64_t a1, _QWORD *a2, uint64_t a3, apr_allocator_t *a4, void **a5)
{
  int v6;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id MTLRenderPassDescriptor;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  _QWORD *Object;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  void *v35;
  uint64_t v36;
  id *v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  id *location;
  char v63;
  unsigned int v64;
  uint64_t v66;
  id v68;
  _QWORD __dst[1387];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79[4];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  id v85;
  _QWORD v86[2];
  apr_pool_t *newpool;
  const __CFString *v88;
  void *v89;

  v6 = (int)a4;
  v8 = (_DWORD *)(a1 + 22480);
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, a4);
  v66 = *(_QWORD *)a1;
  v68 = *(id *)(a1 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v10 = (*v8 - 1);
  if (v10 >= *(int *)(v9 + 12))
  {
    GTMTLReplay_fillError(a5, 101, &__NSDictionary0__struct);
    if (a5)
      v16 = *a5;
    else
      v16 = 0;
  }
  else
  {
    v85 = 0;
    v86[0] = 0;
    v86[1] = 0;
    v11 = GTMTLReplayController_renderPassDescriptor(a1);
    if (v11)
    {
      v12 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "renderPassDescriptorMap"));
      MTLRenderPassDescriptor = MakeMTLRenderPassDescriptor(v12, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(MTLRenderPassDescriptor);

      if (!v15)
      {
        GTMTLReplay_fillError(a5, 101, &__NSDictionary0__struct);
        if (a5)
          v17 = *a5;
        else
          v17 = 0;
        GTMTLReplay_handleNSError(v17);
LABEL_41:

        goto LABEL_42;
      }
      if ((GT_SUPPORT_0 & 0x80) != 0)
      {
        objc_msgSend((id)a2[1], "setRenderTargetArrayLength:", *(unsigned __int16 *)(v12 + 806));
        v18 = *(unsigned __int16 *)(v12 + 806);
        if (v18 <= 1)
          v18 = 1;
        v64 = v18;
        if ((GT_SUPPORT_0 & 0x100) == 0)
          goto LABEL_19;
      }
      else
      {
        v64 = 1;
        if ((GT_SUPPORT_0 & 0x100) == 0)
          goto LABEL_19;
      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "rasterizationRateMapForKey:", *(_QWORD *)(v12 + 784)));
      objc_msgSend((id)a2[1], "setRasterizationRateMap:", v19);

      objc_msgSend(v15, "setRasterizationRateMap:", 0);
LABEL_19:
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "defaultDevice"));
      v21 = objc_msgSend(v15, "validate:width:height:", v20, &v85, v86);

      if ((v21 & 1) != 0)
      {

        v22 = *(_QWORD *)(v9 + 24) + (v10 << 6);
        v23 = *(_DWORD *)(v22 + 8);
        v24 = IsFuncEnumDrawCall(v23);
        v84 = 0u;
        v83 = 0u;
        v82 = 0u;
        v81 = 0u;
        v80 = 0u;
        memset(v79, 0, sizeof(v79));
        v78 = 0u;
        v77 = 0u;
        v76 = 0u;
        v75 = 0u;
        v74 = 0u;
        v73 = 0u;
        v72 = 0u;
        v71 = 0u;
        v70 = 0u;
        memcpy(__dst, (const void *)(a1 + 11368), sizeof(__dst));
        if ((v23 & 0xFFFFFFFC) == 0xFFFFC1A4)
          v25 = 1;
        else
          v25 = v24;
        v63 = v25;
        if ((v23 & 0xFFFFFFFC) == 0xFFFFC1A4)
        {
          *((_QWORD *)&v84 + 1) = **(_QWORD **)(a1 + 152);
          GTMTLSMContext_indirectCommandBufferResources((uint64_t)&v79[1], *(_DWORD ***)(v66 + 40), *(_QWORD *)v22, *((apr_pool_t **)&v84 + 1));
          GetExecuteCommandsInBufferArgs((uint64_t)&v70, v22, *(_QWORD *)(v66 + 16));
          Object = GTMTLSMContext_getObject(**(_QWORD **)(v66 + 40), v70, *(_QWORD *)v22);
          if (!Object)
          {
            GTMTLReplay_fillError(a5, 101, &__NSDictionary0__struct);
            if (a5)
              v35 = *a5;
            else
              v35 = 0;
LABEL_50:
            GTMTLReplay_handleNSError(v35);
            goto LABEL_42;
          }
          GTMTLCreateIndirectCommandEncoder((uint64_t)&v72 + 8, Object[13]);
          v28 = *((_QWORD *)&v71 + 1) + v79[0] * v8[1];
          *(_QWORD *)&v84 = v28;
          GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)__dst, (_QWORD *)&v72 + 1, v28, &v79[1]);
          v23 = *(_DWORD *)(v22 + 8);
        }
        else
        {
          v28 = 0;
        }
        v29 = *(_QWORD *)(a1 + 19912);
        if (v23 >> 2 == 1073737833 && !*(_BYTE *)(*((_QWORD *)&v72 + 1) + 11))
          v29 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(v80, *(_QWORD *)(v28 + *((_QWORD *)&v73 + 1)));
        v30 = GTMTLSMContext_getObject(**(_QWORD **)(v66 + 40), v29, *(_QWORD *)v22);
        if (v30)
        {
          v61 = v30;
          if ((v25 & v6) == 1)
          {
            v31 = v30[6];
            if (v31)
              v32 = *(_QWORD *)(v31 + 1272);
            else
              v32 = 1;
            v36 = v30[9];
            if (v36)
              v32 = *(unsigned __int8 *)(v36 + 508);
          }
          else
          {
            v32 = 1;
          }
          v37 = (id *)(a2 + 4);
          v38 = 5;
          if (a3 == 1)
            v38 = 4;
          else
            v37 = (id *)(a2 + 5);
          location = v37;
          v39 = (id)a2[v38];
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "defaultDevice"));
          if (!v39
            || (v41 = objc_msgSend(v39, "width"), v41 != v85)
            || (v42 = objc_msgSend(v39, "height"), v42 != (id)v86[0])
            || objc_msgSend(v39, "arrayLength") != (id)v64
            || objc_msgSend(v39, "sampleCount") != (id)v32)
          {

            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a2[1], "colorAttachments"));
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectAtIndexedSubscript:", 0));
            objc_msgSend(v44, "setTexture:", 0);

            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a2[1], "colorAttachments"));
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectAtIndexedSubscript:", 0));
            objc_msgSend(v46, "setResolveTexture:", 0);

            objc_msgSend((id)*a2, "setWidth:", v85);
            objc_msgSend((id)*a2, "setHeight:", v86[0]);
            v47 = 2;
            if (v64 > 1)
              v47 = 3;
            v48 = 4;
            if (v64 > 1)
              v48 = 8;
            if (v32 <= 1)
              v49 = v47;
            else
              v49 = v48;
            objc_msgSend((id)*a2, "setTextureType:", v49);
            a2[6] = v32;
            objc_msgSend((id)*a2, "setArrayLength:", v64);
            objc_msgSend((id)*a2, "setSampleCount:", v32);
            v50 = objc_msgSend(v40, "newTextureWithDescriptor:", *a2);
            if (!v50)
            {
              v88 = CFSTR("GTErrorKeyMTLTextureDescriptor");
              v56 = SerializeMTLTextureDescriptorToDictionary((void *)*a2);
              v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
              v89 = v57;
              v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v89, &v88, 1));

              GTMTLReplay_fillError(a5, 101, v58);
              if (a5)
                v59 = *a5;
              else
                v59 = 0;
              GTMTLReplay_handleNSError(v59);

              v60 = 0;
              v33 = 0;
LABEL_79:

              goto LABEL_43;
            }
            v39 = v50;
            objc_storeStrong(location, v50);
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a2[1], "colorAttachments"));
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectAtIndexedSubscript:", 0));
            objc_msgSend(v52, "setStoreAction:", 1);

          }
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a2[1], "colorAttachments"));
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectAtIndexedSubscript:", 0));
          objc_msgSend(v54, "setTexture:", v39);

          if ((v63 & 1) != 0)
          {
            v55 = (char *)&loc_25DAE8
                + 4
                * byte_4A5D88[GTMTLSMRenderPipelineState_renderPipelineDescriptorType(*(uint64_t **)(v66 + 40), v61)];
            __asm { BR              X10 }
          }
          v33 = v39;
          v60 = v33;
          goto LABEL_79;
        }
        GTMTLReplay_fillError(a5, 101, &__NSDictionary0__struct);
        if (a5)
          v35 = *a5;
        else
          v35 = 0;
        goto LABEL_50;
      }
      GTMTLReplay_fillError(a5, 101, &__NSDictionary0__struct);
      if (a5)
        v27 = *a5;
      else
        v27 = 0;
      GTMTLReplay_handleNSError(v27);
      goto LABEL_41;
    }
    GTMTLReplay_fillError(a5, 101, &__NSDictionary0__struct);
    if (a5)
      v16 = *a5;
    else
      v16 = 0;
  }
  GTMTLReplay_handleNSError(v16);
LABEL_42:
  v33 = 0;
LABEL_43:

  apr_pool_destroy(newpool);
  return v33;
}

void sub_25E3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  apr_pool_destroy(*(apr_pool_t **)(v1 - 160));
  _Unwind_Resume(a1);
}

_QWORD *GroupBuilder_getCommandEncoder(int a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *InclusiveRange;
  uint64_t v4;

  InclusiveRange = GroupBuilder_findInclusiveRange(a1, a2, a3);
  while (InclusiveRange)
  {
    if (IsFuncEnumCreateCommandEncoder(*((_DWORD *)InclusiveRange + 7)))
      break;
    v4 = *((unsigned int *)InclusiveRange + 4);
    if ((_DWORD)v4)
      InclusiveRange -= 4 * v4;
    else
      InclusiveRange = 0;
  }
  return InclusiveRange;
}

id GTMTLReplayController_generateOutlineTexture(uint64_t a1, uint64_t a2, void **a3)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v35;
  id v36;
  void *v37;
  unint64_t v38;
  _QWORD v39[3];
  _QWORD v40[3];
  void *v41;
  const __CFString *v42;
  id v43;
  NSErrorUserInfoKey v44;
  void *v45;

  v41 = 0;
  v6 = GTMTLReplayController_generateWireframeTexture(a1, (_QWORD *)a2, 0, (apr_allocator_t *)((char *)&dword_0 + 1), &v41);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = v41;
  v9 = v8;
  if (!v7)
  {
    if (v8)
    {
      v44 = NSUnderlyingErrorKey;
      v45 = v8;
      v10 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1));
    }
    else
    {
      v10 = 0;
    }
    GTMTLReplay_fillError(a3, 101, v10);
    if (a3)
      v33 = *a3;
    else
      v33 = 0;
    GTMTLReplay_handleNSError(v33);
    v13 = 0;
    goto LABEL_30;
  }
  v10 = objc_msgSend(*(id *)a2, "copy");
  objc_msgSend(v10, "setUsage:", 18);
  if ((unint64_t)objc_msgSend(v7, "sampleCount") >= 2)
  {
    objc_msgSend(v10, "setSampleCount:", 1);
    if (objc_msgSend(v7, "textureType") == &dword_4)
    {
      v11 = 2;
LABEL_9:
      objc_msgSend(v10, "setTextureType:", v11);
      goto LABEL_10;
    }
    if (objc_msgSend(v7, "textureType") == &dword_8)
    {
      v11 = 3;
      goto LABEL_9;
    }
  }
LABEL_10:
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "device"));
  v13 = objc_msgSend(v12, "newTextureWithDescriptor:", v10);

  if (v13)
  {
    v36 = v10;
    v37 = v9;
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "defaultCommandQueue"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "commandBuffer"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), CFSTR("com.apple.gputools.replay"), CFSTR("GenerateOutlineTexture")));
    objc_msgSend(v14, "setLabel:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "computeCommandEncoder"));
    v17 = objc_msgSend(v7, "sampleCount");
    v18 = 56;
    if ((unint64_t)v17 > 1)
      v18 = 64;
    objc_msgSend(v16, "setComputePipelineState:", *(_QWORD *)(a2 + v18));
    v38 = (unint64_t)objc_msgSend(*(id *)(a2 + 56), "threadExecutionWidth");
    v19 = (unint64_t)objc_msgSend(*(id *)(a2 + 56), "maxTotalThreadsPerThreadgroup");
    v20 = objc_msgSend(v7, "width");
    v21 = objc_msgSend(v7, "height");
    if (objc_msgSend(v7, "arrayLength"))
    {
      v22 = 0;
      v23 = v19 / v38;
      v24 = ((unint64_t)v20 + v38 - 1) / v38;
      v25 = ((unint64_t)v21 + v23 - 1) / v23;
      do
      {
        v26 = objc_msgSend(v7, "pixelFormat");
        if ((unint64_t)objc_msgSend(v7, "sampleCount") >= 2)
          v27 = 4;
        else
          v27 = 2;
        v28 = objc_msgSend(v7, "newTextureViewWithPixelFormat:textureType:levels:slices:", v26, v27, 0, objc_msgSend(v7, "mipmapLevelCount"), v22, 1);
        v29 = objc_msgSend(v13, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v13, "pixelFormat"), 2, 0, objc_msgSend(v13, "mipmapLevelCount"), v22, 1);
        objc_msgSend(v16, "setTexture:atIndex:", v28, 0);
        objc_msgSend(v16, "setTexture:atIndex:", v29, 1);
        v40[0] = v24;
        v40[1] = v25;
        v40[2] = 1;
        v39[0] = v38;
        v39[1] = v23;
        v39[2] = 1;
        objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", v40, v39);

        ++v22;
      }
      while (v22 < (unint64_t)objc_msgSend(v7, "arrayLength"));
    }
    objc_msgSend(v16, "endEncoding");
    GTMTLReplay_commitCommandBuffer(v14);
    v30 = v13;

    v10 = v36;
    v9 = v37;
    v31 = v35;
  }
  else
  {
    v42 = CFSTR("GTErrorKeyMTLTextureDescriptor");
    v43 = v10;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
    GTMTLReplay_fillError(a3, 101, v31);
    if (a3)
      v32 = *a3;
    else
      v32 = 0;
    GTMTLReplay_handleNSError(v32);
  }

LABEL_30:
  return v13;
}

void sub_25EBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_25F014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void sub_25FCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10)
{
  void *v10;

  operator delete(v10);

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned int>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void sub_25FDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_260100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2602EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_26087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void **a23)
{
  void *v23;

  a23 = (void **)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a23);

  a23 = (void **)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a23);
  _Unwind_Resume(a1);
}

void sub_260F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  std::deque<ProfileEvent>::~deque[abi:nn180100](&a10);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a47);
  a35 = (void **)&a53;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&a35);
  std::deque<unsigned int>::~deque[abi:nn180100](v53 - 224);
  std::deque<unsigned int>::~deque[abi:nn180100](v53 - 176);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((_QWORD *)(v53 - 128));
  _Unwind_Resume(a1);
}

void sub_2610F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t *a10)
{
  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>::reset[abi:nn180100](&a10);

  _Unwind_Resume(a1);
}

void sub_262640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  _Unwind_Resume(a1);
}

void sub_265570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::mutex *a41)
{
  void *v41;

  operator delete(v41);
  std::mutex::unlock(a41);

  _Block_object_dispose(&STACK[0x670], 8);
  _Unwind_Resume(a1);
}

void sub_265EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_266564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_2669C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a10;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&a16);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_26704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_267264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2681E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, id *location, id *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  id *v60;
  void *v61;
  void *v62;
  uint64_t v63;

  objc_destroyWeak(v60);
  _Block_object_dispose(&a60, 8);
  std::vector<std::vector<-[DYPMTLShaderProfilerHelper adjustHWBiasAndFinalizeResult]::ClauseInfo>>::~vector[abi:nn180100](a14);
  std::vector<-[DYPMTLShaderProfilerHelper adjustHWBiasAndFinalizeResult]::ClauseInfo>::~vector[abi:nn180100]((void **)(v63 - 224));
  std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table(v63 - 192);

  objc_destroyWeak((id *)(v63 - 152));
  _Unwind_Resume(a1);
}

void sub_26B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,void *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  void *v67;
  void *v68;
  void *v69;

  *(_QWORD *)(v65 - 232) = &a56;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v65 - 232));
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::~__hash_table((uint64_t)&a47);
  std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table((uint64_t)&a59);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>>>::~__hash_table((uint64_t)&a65);
  if (STACK[0x2C8])
    operator delete((void *)STACK[0x2C8]);
  _Block_object_dispose(&STACK[0x2E0], 8);
  a65 = a21;
  std::vector<std::unordered_map<std::string,BinaryInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a65);
  _Block_object_dispose(&STACK[0x328], 8);
  STACK[0x2E0] = a22;
  std::vector<std::unordered_map<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x2E0]);
  _Block_object_dispose(&STACK[0x370], 8);
  STACK[0x328] = a23;
  std::vector<std::unordered_map<std::string,std::unordered_map<unsigned int,ClauseData>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x328]);
  _Block_object_dispose(&STACK[0x3B8], 8);
  STACK[0x370] = a24;
  std::vector<std::vector<InstructionPCInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x370]);
  _Block_object_dispose(&STACK[0x400], 8);
  STACK[0x3B8] = a25;
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x3B8]);
  if (a28)
    operator delete(a28);
  if (a37)
    operator delete(a37);

  _Block_object_dispose(&STACK[0x4D0], 8);
  v67 = (void *)STACK[0x500];
  if (STACK[0x500])
  {
    STACK[0x508] = (unint64_t)v67;
    operator delete(v67);
  }
  _Block_object_dispose(&STACK[0x518], 8);
  STACK[0x4D0] = a19;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x4D0]);
  _Block_object_dispose(&STACK[0x560], 8);
  v68 = (void *)STACK[0x590];
  if (STACK[0x590])
  {
    STACK[0x598] = (unint64_t)v68;
    operator delete(v68);
  }
  _Block_object_dispose(&STACK[0x5A8], 8);
  v69 = (void *)STACK[0x5D8];
  if (STACK[0x5D8])
  {
    STACK[0x5E0] = (unint64_t)v69;
    operator delete(v69);
  }
  STACK[0x5A8] = (unint64_t)&STACK[0x5F0];
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x5A8]);
  _Block_object_dispose(&STACK[0x630], 8);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>>>::~__hash_table(a20);
  if (SLOBYTE(STACK[0x6A7]) < 0)
    operator delete((void *)STACK[0x690]);

  STACK[0x630] = (unint64_t)&STACK[0x6A8];
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x630]);

  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unique_ptr<std::vector<double>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  id *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (id *)v1[3];
      v1[3] = 0;
      if (v3)
        std::default_delete<ShaderBinaryStatsInfo>::operator()[abi:nn180100](v3);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::default_delete<ShaderBinaryStatsInfo>::operator()[abi:nn180100](id *a1)
{
  void **v2;

  v2 = a1 + 2;
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v2);

  operator delete();
}

void std::vector<std::pair<ShaderBinaryStatsInfo *,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0)
        operator delete(v2[4]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,0>(uint64_t a1)
{
  std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>::reset[abi:nn180100]((uint64_t **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void ***v2;
  void ***v4;
  void *v5;

  v1 = *a1;
  v2 = (void ***)**a1;
  if (v2)
  {
    v4 = (void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>::reset[abi:nn180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>::reset[abi:nn180100](void ***result, void **a2)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        v6 = (char *)v2[1];
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    operator delete();
  }
  return result;
}

void std::vector<std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void ***v2;
  void ***v4;
  void *v5;

  v1 = *a1;
  v2 = (void ***)**a1;
  if (v2)
  {
    v4 = (void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::reset[abi:nn180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::reset[abi:nn180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v2);
    operator delete();
  }
  return result;
}

void std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<std::vector<double>>::operator()[abi:nn180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<std::vector<double>>::operator()[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t std::pair<ShaderBinaryInfo * {__strong},std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));

  return a1;
}

uint64_t __Block_byref_object_copy__549(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__550(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>>>::~__hash_table(a1 + 48);
}

void sub_26C560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)va1);
  std::pair<ShaderBinaryInfo * {__strong},std::string>::~pair((uint64_t)va);

  _Unwind_Resume(a1);
}

void std::vector<std::vector<ShaderProfilerUSCSampleInfo>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  size_t v28;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      v28 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v28);
      *(_QWORD *)(a1 + 8) = (char *)v4 + v28;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v10);
    v12 = &v11[24 * v5];
    v14 = &v11[24 * v13];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v12, v15);
    v16 = &v12[v15];
    v18 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(a1 + 8);
    if (v17 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v17)
        return;
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v19 = *(_OWORD *)(v17 - 3);
        v17 -= 3;
        *(_OWORD *)v12 = v19;
        *((_QWORD *)v12 + 2) = v17[2];
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
      }
      while (v17 != v18);
      v20 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v17 != v20)
      {
        v21 = v17;
        do
        {
          v23 = (void *)*(v21 - 3);
          v21 -= 3;
          v22 = v23;
          if (v23)
          {
            *(v17 - 2) = v22;
            operator delete(v22);
          }
          v17 = v21;
        }
        while (v21 != v20);
        v17 = v20;
      }
      if (!v17)
        return;
    }
    operator delete(v17);
    return;
  }
  if (a2 < v5)
  {
    v24 = &v3[3 * a2];
    if (v4 != v24)
    {
      v25 = *(_QWORD **)(a1 + 8);
      do
      {
        v27 = (void *)*(v25 - 3);
        v25 -= 3;
        v26 = v27;
        if (v27)
        {
          *(v4 - 2) = v26;
          operator delete(v26);
        }
        v4 = v25;
      }
      while (v25 != v24);
    }
    *(_QWORD *)(a1 + 8) = v24;
  }
}

__n128 __Block_byref_object_copy__552(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__553(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__509(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__510(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__513(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__514(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<ShaderProfilerUSCSampleInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;

  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      abort();
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 40;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(a2);
    v5 = &v4[40 * v3];
    v7 = &v4[40 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *(_OWORD *)(v8 - 40);
        v12 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v12;
        *(_OWORD *)(v10 - 40) = v11;
        v10 -= 40;
        v8 -= 40;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void sub_26CF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(40 * a1);
}

double std::__introsort<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *,false>(uint64_t a1, double *a2, uint64_t a3, char a4, double result)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t k;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t m;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  double *j;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  BOOL v87;
  unsigned int v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  unsigned int v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  __int128 v114;
  int64_t v115;
  int64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  unsigned int v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  __int128 v133;
  __int128 v134;
  int64_t v135;
  double *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  double *v146;
  __int128 v147;
  __int128 v148;
  double *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  BOOL v164;
  unsigned int v165;
  unsigned int v166;
  __int128 v167;
  __int128 v168;
  BOOL v169;
  double *v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  __int128 v178;
  unsigned int v179;
  BOOL v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  double *v191;
  int64_t v192;
  unint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;

__n128 __Block_byref_object_copy__560(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__561(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__563(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__564(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<InstructionPCInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__566(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__567(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<std::string,std::unordered_map<unsigned int,ClauseData>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__569(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__570(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__572(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__573(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<std::string,BinaryInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void sub_26F72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BinaryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BinaryInfo>,void *>>>>::reset[abi:nn180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<ShaderBinaryInfo * {__strong},std::string>::pair[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(id *)a2;
  v4 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    a1[3] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_26F870(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__init_with_size[abi:nn180100]<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*,std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__vallocate[abi:nn180100](result, a4);
    if (a2 == a3)
    {
      v7 = (_QWORD *)v6[1];
    }
    else
    {
      v7 = (_QWORD *)v6[1];
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v8 = *a2;
        v9 = a2[1];
        v10 = v9 - *a2;
        if (v9 != *a2)
        {
          if (v10 < 0)
            abort();
          result = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v10 >> 5);
          *v7 = result;
          v7[1] = result;
          v7[2] = &result[4 * v11];
          do
          {
            v12 = std::pair<ShaderBinaryInfo * {__strong},std::string>::pair[abi:nn180100](result, v8);
            v8 += 32;
            result = v12 + 4;
          }
          while (v8 != v9);
          v7[1] = result;
        }
        a2 += 3;
        v7 += 3;
      }
      while (a2 != a3);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_26F94C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<ShaderProfilerUSCSampleInfo>>::__init_with_size[abi:nn180100]<std::vector<ShaderProfilerUSCSampleInfo>*,std::vector<ShaderProfilerUSCSampleInfo>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v5 = result;
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a4);
    v6 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * v7];
    if (a2 != a3)
    {
      v17 = v5;
      v8 = 0;
      do
      {
        v9 = a2 + v8;
        v10 = &v6[v8 / 8];
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        v12 = *(_BYTE **)(a2 + v8);
        v11 = *(_BYTE **)(a2 + v8 + 8);
        v13 = v11 - v12;
        if (v11 != v12)
        {
          if (0xCCCCCCCCCCCCCCCDLL * (v13 >> 3) >= 0x666666666666667)
            abort();
          v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(0xCCCCCCCCCCCCCCCDLL * (v13 >> 3));
          v15 = &v6[v8 / 8];
          *v15 = v14;
          v10[1] = v14;
          v15[2] = &v14[40 * v16];
          result = memmove(v14, v12, v13);
          v10[1] = &v14[8 * (v13 >> 3)];
        }
        v8 += 24;
      }
      while (v9 + 24 != a3);
      v6 = (_QWORD *)((char *)v6 + v8);
      v5 = v17;
    }
    v5[1] = v6;
  }
  return result;
}

void sub_26FA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(a9 + 8) = v9;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v8 = *(v6 - 3);
        v6 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (uint64_t)*(v4 - 2);
          v10 = v7;
          if ((void *)v9 != v7)
          {
            do
            {
              v9 -= 32;
              std::allocator<std::pair<ShaderBinaryInfo * {__strong},std::string>>::destroy[abi:nn180100](v9);
            }
            while ((void *)v9 != v7);
            v10 = *v6;
          }
          *(v4 - 2) = v7;
          operator delete(v10);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  unsigned __int8 **v17;
  unsigned __int8 *i;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  uint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned __int8 **v41;
  unint64_t v42;
  void *v44;
  _QWORD v45[2];
  char v46;

  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (uint64_t *)a2;
  else
    v10 = *(uint64_t **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v10, v11);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v4 = v12;
      if (v12 >= v14)
        v4 = v12 % v14;
    }
    else
    {
      v4 = (v14 - 1) & v12;
    }
    v17 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v17)
    {
      for (i = *v17; i; i = *(unsigned __int8 **)i)
      {
        v19 = *((_QWORD *)i + 1);
        if (v19 == v13)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14)
              v19 %= v14;
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4)
            break;
        }
      }
    }
  }
  v20 = (_QWORD *)(a1 + 16);
  v21 = operator new(0x30uLL);
  v45[0] = v21;
  v45[1] = a1 + 16;
  v46 = 0;
  *v21 = 0;
  v21[1] = v13;
  v22 = (std::string *)(v21 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v21[4] = *(_QWORD *)(a3 + 16);
  }
  v23 = *a4;
  *a4 = 0;
  v21[5] = v23;
  v46 = 1;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (!v14 || (float)(v25 * (float)v14) < v24)
  {
    v26 = 1;
    if (v14 >= 3)
      v26 = (v14 & (v14 - 1)) != 0;
    v27 = v26 | (2 * v14);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = (int8x8_t)v28;
    else
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_39;
    if (*(_QWORD *)&prime < v14)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (*(_QWORD *)&prime <= v36)
        prime = (int8x8_t)v36;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v30 = operator new(8 * *(_QWORD *)&prime);
          v31 = *(void **)a1;
          *(_QWORD *)a1 = v30;
          if (v31)
            operator delete(v31);
          v32 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v32++) = 0;
          while (*(_QWORD *)&prime != v32);
          v33 = (_QWORD *)*v20;
          if (*v20)
          {
            v34 = v33[1];
            v35 = (uint8x8_t)vcnt_s8(prime);
            v35.i16[0] = vaddlv_u8(v35);
            if (v35.u32[0] > 1uLL)
            {
              if (v34 >= *(_QWORD *)&prime)
                v34 %= *(_QWORD *)&prime;
            }
            else
            {
              v34 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v20;
            v39 = (_QWORD *)*v33;
            if (*v33)
            {
              do
              {
                v40 = v39[1];
                if (v35.u32[0] > 1uLL)
                {
                  if (v40 >= *(_QWORD *)&prime)
                    v40 %= *(_QWORD *)&prime;
                }
                else
                {
                  v40 &= *(_QWORD *)&prime - 1;
                }
                if (v40 != v34)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v33;
                    goto LABEL_64;
                  }
                  *v33 = *v39;
                  *v39 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v40);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v40) = v39;
                  v39 = v33;
                }
                v40 = v34;
LABEL_64:
                v33 = v39;
                v39 = (_QWORD *)*v39;
                v34 = v40;
              }
              while (v39);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_68;
        }
        v44 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v44)
          operator delete(v44);
        v14 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_68:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v4 = v13 % v14;
      else
        v4 = v13;
    }
    else
    {
      v4 = (v14 - 1) & v13;
    }
  }
  v41 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  i = (unsigned __int8 *)v45[0];
  if (v41)
  {
    *(_QWORD *)v45[0] = *v41;
LABEL_81:
    *v41 = i;
    goto LABEL_82;
  }
  *(_QWORD *)v45[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v20;
  if (*(_QWORD *)i)
  {
    v42 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v42 >= v14)
        v42 %= v14;
    }
    else
    {
      v42 &= v14 - 1;
    }
    v41 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_81;
  }
LABEL_82:
  v45[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>>>>::reset[abi:nn180100]((uint64_t)v45);
  return i;
}

void sub_26FFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<ClauseData>>(unint64_t a1)
{
  if (a1 >= 0x924924924924925)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(28 * a1);
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(__int128 *a1, __int128 *a2, std::string *this)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      v5 = (__int128 *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != a2);
  }
  return this;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *k;
  unsigned int v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *j;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  BOOL v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unint64_t v107;
  unsigned int v108;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 2;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = ((char *)a2 - (char *)i) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v46 = *v8;
        v47 = *i;
        if (*v8 < *i || v47 >= v46 && *(a2 - 1) < i[1])
        {
          *i = v46;
          *(a2 - 2) = v47;
          v48 = i[1];
          i[1] = *(a2 - 1);
          *(a2 - 1) = v48;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, i + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, i + 2, i + 4, a2 - 2);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, i + 2, i + 4, i + 6, a2 - 2);
      default:
        if (v10 <= 191)
        {
          v49 = i + 2;
          v51 = i == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 0;
              v53 = i;
              do
              {
                v54 = v53;
                v53 = v49;
                v55 = v54[2];
                v56 = *v54;
                if (v55 < *v54 || v56 >= v55 && v54[3] < v54[1])
                {
                  v58 = v54[2];
                  v57 = v54[3];
                  v59 = v54[1];
                  v54[2] = v56;
                  v53[1] = v59;
                  v60 = i;
                  if (v54 != i)
                  {
                    v61 = v52;
                    do
                    {
                      v62 = *(unsigned int *)((char *)i + v61 - 8);
                      if (v62 <= v58)
                      {
                        if (v62 < v58)
                        {
                          v60 = v54;
                          goto LABEL_113;
                        }
                        v60 = (unsigned int *)((char *)i + v61);
                        v63 = *(unsigned int *)((char *)i + v61 - 4);
                        if (v63 <= v57)
                          goto LABEL_113;
                      }
                      else
                      {
                        v63 = *(unsigned int *)((char *)i + v61 - 4);
                      }
                      v54 -= 2;
                      v64 = (unsigned int *)((char *)i + v61);
                      *v64 = v62;
                      v64[1] = v63;
                      v61 -= 8;
                    }
                    while (v61);
                    v60 = i;
                  }
LABEL_113:
                  *v60 = v58;
                  v60[1] = v57;
                }
                v49 = v53 + 2;
                v52 += 8;
              }
              while (v53 + 2 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v80 = v7;
              v7 = v49;
              v81 = v80[2];
              v82 = *v80;
              if (v81 < *v80 || v82 >= v81 && v80[3] < v80[1])
              {
                v83 = *v49;
                v84 = v49[1];
                do
                {
                  do
                  {
                    v85 = v80;
                    v86 = *(v80 - 2);
                    v80 -= 2;
                    v87 = v80[3];
                    v80[4] = v82;
                    v80[5] = v87;
                    v82 = v86;
                    v88 = v86 >= v83;
                  }
                  while (v86 > v83);
                }
                while (v88 && *(v85 - 1) > v84);
                *v85 = v83;
                v85[1] = v84;
              }
              v49 = v7 + 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (i != a2)
          {
            v65 = (v11 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &i[2 * v68];
                if (2 * v67 + 2 < (uint64_t)v11)
                {
                  v70 = v69[2];
                  if (*v69 < v70 || v70 >= *v69 && i[2 * v68 + 1] < v69[3])
                  {
                    v69 += 2;
                    v68 = 2 * v67 + 2;
                  }
                }
                v71 = &i[2 * v67];
                v72 = *v69;
                if (*v69 >= *v71 && (*v71 < v72 || v69[1] >= i[2 * v67 + 1]))
                {
                  result = (unint64_t)&i[2 * v67];
                  v73 = *(_DWORD *)result;
                  v74 = *(_DWORD *)(result + 4);
                  *v71 = v72;
                  *(_DWORD *)(result + 4) = v69[1];
                  if (v65 >= v68)
                  {
                    while (1)
                    {
                      v76 = 2 * v68;
                      v68 = (2 * v68) | 1;
                      v75 = &i[2 * v68];
                      v77 = v76 + 2;
                      if (v77 < (uint64_t)v11)
                      {
                        result = (unint64_t)(v75 + 2);
                        v78 = v75[2];
                        if (*v75 < v78 || v78 >= *v75 && i[2 * v68 + 1] < v75[3])
                        {
                          v75 += 2;
                          v68 = v77;
                        }
                      }
                      v79 = *v75;
                      if (*v75 < v73)
                        break;
                      if (v79 <= v73)
                      {
                        result = v75[1];
                        if (result < v74)
                          break;
                      }
                      *v69 = v79;
                      v69[1] = v75[1];
                      v69 = v75;
                      if (v65 < v68)
                        goto LABEL_129;
                    }
                  }
                  v75 = v69;
LABEL_129:
                  *v75 = v73;
                  v75[1] = v74;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v89 = (unint64_t)v10 >> 3;
            do
            {
              v90 = 0;
              v91 = *(_QWORD *)i;
              v92 = v89 - 2;
              if (v89 < 2)
                v92 = v89 - 1;
              v93 = v92 >> 1;
              v94 = i;
              do
              {
                v95 = v94;
                v96 = v90 + 1;
                v94 += 2 * v90 + 2;
                v97 = 2 * v90;
                v90 = (2 * v90) | 1;
                v98 = v97 + 2;
                if (v98 < v89)
                {
                  result = v94[2];
                  if (*v94 < result
                    || result >= *v94 && (result = v94[3], v95[2 * v96 + 1] < result))
                  {
                    v94 += 2;
                    v90 = v98;
                  }
                }
                *v95 = *v94;
                v95[1] = v94[1];
              }
              while (v90 <= v93);
              if (v94 == a2 - 2)
              {
                *(_QWORD *)v94 = v91;
              }
              else
              {
                *v94 = *(a2 - 2);
                v94[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v91;
                v99 = (char *)v94 - (char *)i + 8;
                if (v99 >= 9)
                {
                  v100 = (v99 >> 3) - 2;
                  v101 = v100 >> 1;
                  v102 = &i[2 * (v100 >> 1)];
                  v103 = *v102;
                  if (*v102 < *v94 || *v94 >= v103 && i[2 * v101 + 1] < v94[1])
                  {
                    v104 = *v94;
                    v105 = v94[1];
                    *v94 = v103;
                    v94[1] = v102[1];
                    if (v100 >= 2)
                    {
                      while (1)
                      {
                        v107 = v101 - 1;
                        v101 = (v101 - 1) >> 1;
                        v106 = &i[2 * v101];
                        v108 = *v106;
                        if (*v106 >= v104)
                        {
                          if (v108 > v104)
                            break;
                          result = i[2 * v101 + 1];
                          if (result >= v105)
                            break;
                        }
                        else
                        {
                          result = v106[1];
                        }
                        *v102 = v108;
                        v102[1] = result;
                        v102 = &i[2 * v101];
                        if (v107 <= 1)
                          goto LABEL_176;
                      }
                    }
                    v106 = v102;
LABEL_176:
                    *v106 = v104;
                    v106[1] = v105;
                  }
                }
              }
              a2 -= 2;
              v30 = v89-- <= 2;
            }
            while (!v30);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &i[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(&v7[2 * (v11 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v7, &v7[2 * (v11 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v7 + 2, v13 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v13 - 2, v13, &v7[2 * v12 + 2]);
          v14 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(v7 - 2);
          if (v15 >= *v7 && (*v7 < v15 || *(v7 - 1) >= v7[1]))
          {
            v34 = *v7;
            v33 = v7[1];
            v35 = *v8;
            if (*v8 <= *v7 && (v35 < v34 || *(a2 - 1) <= v33))
            {
              for (i = v7 + 2; i < a2 && *i <= v34 && (*i < v34 || i[1] <= v33); i += 2)
                ;
            }
            else
            {
              i = v7;
              do
              {
                v37 = i[2];
                i += 2;
                v36 = v37;
              }
              while (v37 <= v34 && (v36 < v34 || i[1] <= v33));
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 2; v35 > v34 || v35 >= v34 && j[1] > v33; j -= 2)
              {
                v39 = *(j - 2);
                v35 = v39;
              }
            }
            if (i < j)
            {
              v40 = *i;
              v41 = *j;
              do
              {
                *i = v41;
                *j = v40;
                v42 = i[1];
                i[1] = j[1];
                j[1] = v42;
                do
                {
                  v43 = i[2];
                  i += 2;
                  v40 = v43;
                }
                while (v43 <= v34 && (v40 < v34 || i[1] <= v33));
                do
                {
                  do
                  {
                    v44 = *(j - 2);
                    j -= 2;
                    v41 = v44;
                    v45 = v44 >= v34;
                  }
                  while (v44 > v34);
                }
                while (v45 && j[1] > v33);
              }
              while (i < j);
            }
            if (i - 2 != v7)
            {
              *v7 = *(i - 2);
              v7[1] = *(i - 1);
            }
            a4 = 0;
            *(i - 2) = v34;
            *(i - 1) = v33;
            continue;
          }
        }
        v16 = v7 + 2;
        v17 = *(_QWORD *)v7;
        v18 = HIDWORD(*(_QWORD *)v7);
        while (1)
        {
          v19 = *v16;
          if (*v16 >= v17 && (v19 > v17 || v16[1] >= v18))
            break;
          v16 += 2;
        }
        if (v16 - 2 == v7)
        {
          k = a2;
          if (v16 < a2)
          {
            v23 = *v8;
            k = a2 - 2;
            if (*v8 >= v17)
            {
              k = a2 - 2;
              do
              {
                if (v23 <= v17)
                {
                  if (k[1] < v18 || v16 >= k)
                    break;
                }
                else if (v16 >= k)
                {
                  break;
                }
                v25 = *(k - 2);
                k -= 2;
                v23 = v25;
              }
              while (v25 >= v17);
            }
          }
        }
        else
        {
          v20 = *v8;
          for (k = a2 - 2; v20 >= v17 && (v20 > v17 || k[1] >= v18); k -= 2)
          {
            v22 = *(k - 2);
            v20 = v22;
          }
        }
        i = v16;
        if (v16 < k)
        {
          v26 = *k;
          i = v16;
          v27 = k;
          do
          {
            *i = v26;
            *v27 = v19;
            v28 = i[1];
            i[1] = v27[1];
            v27[1] = v28;
            do
            {
              do
              {
                v29 = i[2];
                i += 2;
                v19 = v29;
                v30 = v29 > v17;
              }
              while (v29 < v17);
            }
            while (!v30 && i[1] < v18);
            do
            {
              v31 = *(v27 - 2);
              v27 -= 2;
              v26 = v31;
            }
            while (v31 >= v17 && (v26 > v17 || v27[1] >= v18));
          }
          while (i < v27);
        }
        if (i - 2 != v7)
        {
          *v7 = *(i - 2);
          v7[1] = *(i - 1);
        }
        *(i - 2) = v17;
        *(i - 1) = v18;
        if (v16 < k)
        {
LABEL_50:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(v7, i - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v7, i - 2);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(i, a2);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_50;
        }
        a2 = i - 2;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,BinaryInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unordered_map<unsigned int,ClauseData>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<std::unordered_map<std::string,BinaryInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<std::string,BinaryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BinaryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BinaryInfo>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<std::string,std::unordered_map<unsigned int,ClauseData>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<InstructionPCInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<InstructionPCInfo>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<unsigned long long const,std::pair<ShaderBinaryInfo * {__strong},std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<unsigned long long const,std::pair<ShaderBinaryInfo * {__strong},std::string>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));

}

void std::vector<InstructionPCInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<InstructionPCInfo>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<InstructionPCInfo>::destroy[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }

}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unordered_map<unsigned int,ClauseData>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,BinaryInfo>,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 48);
      do
      {
        v7 = *(void **)(v5 - 56);
        v5 -= 56;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      v8 = a2 + 1;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *a2;
      v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        v15 = *result;
        *result = *v8;
        *v8 = v15;
      }
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
LABEL_17:
      v8 = v6;
      goto LABEL_18;
    }
    *result = v3;
    *a2 = v4;
    v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    v13 = *a3;
    v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      v6 = a3 + 1;
      result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unsigned int *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14)
        break;
      v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      v16 = v9;
      goto LABEL_21;
    }
    v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15)
      goto LABEL_18;
    v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;
  _BOOL4 v15;
  __int128 v16;
  _BYTE v17[28];
  _BYTE v18[28];
  _BYTE v19[28];
  _BYTE v20[28];

  v3 = *a2;
  v4 = a2[5];
  v5 = *a2 < *(_DWORD *)a1;
  if (*a2 == *(_DWORD *)a1)
    v5 = v4 < *(_DWORD *)(a1 + 20);
  v6 = *(_DWORD *)(a3 + 20) < v4;
  v7 = *(_DWORD *)a3 == v3;
  v8 = *(_DWORD *)a3 < v3;
  if (v7)
    v8 = v6;
  if (v5)
  {
    if (v8)
    {
      *(_OWORD *)v17 = *(_OWORD *)a1;
      *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 12);
      v9 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 12) = v9;
LABEL_17:
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v17[12];
      result = *(__n128 *)v17;
      *(_OWORD *)a3 = *(_OWORD *)v17;
      return result;
    }
    *(_OWORD *)v20 = *(_OWORD *)a1;
    *(_OWORD *)&v20[12] = *(_OWORD *)(a1 + 12);
    v14 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = v14;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v20[12];
    result = *(__n128 *)v20;
    *(_OWORD *)a2 = *(_OWORD *)v20;
    v15 = *(_DWORD *)a3 < *a2;
    if (*(_DWORD *)a3 == *a2)
      v15 = *(_DWORD *)(a3 + 20) < a2[5];
    if (v15)
    {
      *(_OWORD *)v17 = *(_OWORD *)a2;
      *(_OWORD *)&v17[12] = *(_OWORD *)(a2 + 3);
      v16 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 3) = v16;
      goto LABEL_17;
    }
  }
  else if (v8)
  {
    *(_OWORD *)v18 = *(_OWORD *)a2;
    *(_OWORD *)&v18[12] = *(_OWORD *)(a2 + 3);
    v10 = *(_OWORD *)(a3 + 12);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 3) = v10;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v18[12];
    result = *(__n128 *)v18;
    *(_OWORD *)a3 = *(_OWORD *)v18;
    v12 = *a2 < *(_DWORD *)a1;
    if (*a2 == *(_DWORD *)a1)
      v12 = a2[5] < *(_DWORD *)(a1 + 20);
    if (v12)
    {
      *(_OWORD *)v19 = *(_OWORD *)a1;
      *(_OWORD *)&v19[12] = *(_OWORD *)(a1 + 12);
      v13 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 12) = v13;
      *(_OWORD *)(a2 + 3) = *(_OWORD *)&v19[12];
      result = *(__n128 *)v19;
      *(_OWORD *)a2 = *(_OWORD *)v19;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  _BOOL4 v9;
  __int128 v10;
  _BOOL4 v11;
  __int128 v12;
  _BOOL4 v13;
  __int128 v14;
  _BYTE v15[28];
  _BYTE v16[28];
  _BYTE v17[28];

  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, (int *)a2, a3).n128_u64[0];
  v9 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3)
    v9 = *(_DWORD *)(a4 + 20) < *(_DWORD *)(a3 + 20);
  if (v9)
  {
    *(_OWORD *)v15 = *(_OWORD *)a3;
    *(_OWORD *)&v15[12] = *(_OWORD *)(a3 + 12);
    v10 = *(_OWORD *)(a4 + 12);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 12) = v10;
    *(_OWORD *)(a4 + 12) = *(_OWORD *)&v15[12];
    result = *(__n128 *)v15;
    *(_OWORD *)a4 = *(_OWORD *)v15;
    v11 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2)
      v11 = *(_DWORD *)(a3 + 20) < *(_DWORD *)(a2 + 20);
    if (v11)
    {
      *(_OWORD *)v16 = *(_OWORD *)a2;
      *(_OWORD *)&v16[12] = *(_OWORD *)(a2 + 12);
      v12 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 12) = v12;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v16[12];
      result = *(__n128 *)v16;
      *(_OWORD *)a3 = *(_OWORD *)v16;
      v13 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1)
        v13 = *(_DWORD *)(a2 + 20) < *(_DWORD *)(a1 + 20);
      if (v13)
      {
        *(_OWORD *)v17 = *(_OWORD *)a1;
        *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 12);
        v14 = *(_OWORD *)(a2 + 12);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = v14;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v17[12];
        result = *(__n128 *)v17;
        *(_OWORD *)a2 = *(_OWORD *)v17;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  _OWORD *v7;
  BOOL v8;
  _BOOL4 v9;
  __int128 v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  _BOOL4 v35;
  unsigned int v36;
  unsigned int v37;
  _BOOL4 v38;
  unsigned int v39;
  _BOOL4 v40;
  _BYTE v41[28];
  __int128 v42;
  _BYTE v43[28];
  _BYTE v44[28];
  _BYTE v45[28];
  _BYTE v46[28];

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = (_OWORD *)(a2 - 28);
      v6 = *(_DWORD *)(a2 - 28);
      v8 = v6 == *(_DWORD *)a1;
      v9 = v6 < *(_DWORD *)a1;
      if (v8)
        v9 = *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 20);
      if (v9)
      {
        *(_OWORD *)v41 = *(_OWORD *)a1;
        *(_OWORD *)&v41[12] = *(_OWORD *)(a1 + 12);
        v10 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 12) = v10;
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v41[12];
        *v7 = *(_OWORD *)v41;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, (int *)(a1 + 28), a2 - 28);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, a1 + 28, a1 + 56, a2 - 28);
      return 1;
    case 5:
      v25 = (_OWORD *)(a1 + 28);
      v26 = (_OWORD *)(a1 + 56);
      v27 = (_OWORD *)(a1 + 84);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, a1 + 28, a1 + 56, a1 + 84);
      v29 = *(_DWORD *)(a2 - 28);
      v28 = a2 - 28;
      v30 = *(_DWORD *)(a1 + 84);
      v31 = v29 < v30;
      if (v29 == v30)
        v31 = *(_DWORD *)(v28 + 20) < *(_DWORD *)(a1 + 104);
      if (v31)
      {
        *(_OWORD *)v43 = *v27;
        *(_OWORD *)&v43[12] = *(_OWORD *)(a1 + 96);
        v32 = *(_OWORD *)(v28 + 12);
        *v27 = *(_OWORD *)v28;
        *(_OWORD *)(a1 + 96) = v32;
        *(_OWORD *)(v28 + 12) = *(_OWORD *)&v43[12];
        *(_OWORD *)v28 = *(_OWORD *)v43;
        v33 = *(_DWORD *)(a1 + 84);
        v34 = *(_DWORD *)(a1 + 56);
        v8 = v33 == v34;
        v35 = v33 < v34;
        if (v8)
          v35 = *(_DWORD *)(a1 + 104) < *(_DWORD *)(a1 + 76);
        if (v35)
        {
          *(_OWORD *)v44 = *v26;
          *(_OWORD *)&v44[12] = *(_OWORD *)(a1 + 68);
          *v26 = *v27;
          *(_OWORD *)(a1 + 68) = *(_OWORD *)(a1 + 96);
          *v27 = *(_OWORD *)v44;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)&v44[12];
          v36 = *(_DWORD *)(a1 + 56);
          v37 = *(_DWORD *)(a1 + 28);
          v8 = v36 == v37;
          v38 = v36 < v37;
          if (v8)
            v38 = *(_DWORD *)(a1 + 76) < *(_DWORD *)(a1 + 48);
          if (v38)
          {
            *(_OWORD *)v45 = *v25;
            *(_OWORD *)&v45[12] = *(_OWORD *)(a1 + 40);
            *v25 = *v26;
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 68);
            *v26 = *(_OWORD *)v45;
            *(_OWORD *)(a1 + 68) = *(_OWORD *)&v45[12];
            v39 = *(_DWORD *)(a1 + 28);
            v8 = v39 == *(_DWORD *)a1;
            v40 = v39 < *(_DWORD *)a1;
            if (v8)
              v40 = *(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 20);
            if (v40)
            {
              *(_OWORD *)v46 = *(_OWORD *)a1;
              *(_OWORD *)&v46[12] = *(_OWORD *)(a1 + 12);
              *(_OWORD *)a1 = *v25;
              *(_OWORD *)(a1 + 12) = *(_OWORD *)(a1 + 40);
              *v25 = *(_OWORD *)v46;
              *(_OWORD *)(a1 + 40) = *(_OWORD *)&v46[12];
            }
          }
        }
      }
      return 1;
    default:
      v11 = (_DWORD *)(a1 + 56);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:]::$_6 &,ClauseData *>(a1, (int *)(a1 + 28), a1 + 56);
      v12 = a1 + 84;
      if (a1 + 84 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_DWORD *)v12;
    v16 = *(_DWORD *)(v12 + 20);
    v17 = *(_DWORD *)v12 < *v11;
    if (*(_DWORD *)v12 == *v11)
      v17 = v16 < v11[5];
    if (v17)
    {
      v42 = *(_OWORD *)(v12 + 4);
      v18 = *(_DWORD *)(v12 + 24);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 84) = *(_OWORD *)(a1 + v19 + 56);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(a1 + v19 + 68);
        if (v19 == -56)
          break;
        v21 = *(_DWORD *)(v20 + 28);
        v22 = v16 < *(_DWORD *)(v20 + 48);
        v8 = v15 == v21;
        v23 = v15 < v21;
        if (!v8)
          v22 = v23;
        v19 -= 28;
        if (!v22)
        {
          v24 = a1 + v19 + 84;
          goto LABEL_19;
        }
      }
      v24 = a1;
LABEL_19:
      *(_DWORD *)v24 = v15;
      *(_OWORD *)(v24 + 4) = v42;
      *(_DWORD *)(v24 + 20) = v16;
      *(_DWORD *)(v24 + 24) = v18;
      if (++v14 == 8)
        return v12 + 28 == a2;
    }
    v11 = (_DWORD *)v12;
    v13 += 28;
    v12 += 28;
    if (v12 == a2)
      return 1;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelper>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,BinaryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,BinaryInfo>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,BinaryInfo>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned int,ClauseData>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unordered_map<unsigned int,ClauseData>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::allocator<std::pair<ShaderBinaryInfo * {__strong},std::string>>::destroy[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));

}

char *std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  v3 = 3 * a2;
  result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

_QWORD *__copy_helper_block_ea8_88c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE120c106_ZTSNSt3__14pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE152c146_ZTSNSt3__16vectorINS0_INS_4pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS8_ISB_EEEENS8_ISD_EEEE176c86_ZTSNSt3__16vectorINS0_I27ShaderProfilerUSCSampleInfoNS_9allocatorIS1_EEEENS2_IS4_EEEE(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;

  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  v5 = *(_BYTE **)(a2 + 88);
  v4 = *(_BYTE **)(a2 + 96);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](a1 + 11, v6 >> 3);
    v7 = (char *)a1[12];
    memmove(v7, v5, v6);
    a1[12] = &v7[v6];
  }
  std::pair<ShaderBinaryInfo * {__strong},std::string>::pair[abi:nn180100](a1 + 15, a2 + 120);
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__init_with_size[abi:nn180100]<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*,std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>*>(a1 + 19, *(uint64_t **)(a2 + 152), *(uint64_t **)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3));
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  return std::vector<std::vector<ShaderProfilerUSCSampleInfo>>::__init_with_size[abi:nn180100]<std::vector<ShaderProfilerUSCSampleInfo>*,std::vector<ShaderProfilerUSCSampleInfo>*>(a1 + 22, *(_QWORD *)(a2 + 176), *(_QWORD *)(a2 + 184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3));
}

void sub_272804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  std::pair<ShaderBinaryInfo * {__strong},std::string>::~pair(v4);
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 96) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_88c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE120c106_ZTSNSt3__14pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE152c146_ZTSNSt3__16vectorINS0_INS_4pairIU8__strongP16ShaderBinaryInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS8_ISB_EEEENS8_ISD_EEEE176c86_ZTSNSt3__16vectorINS0_I27ShaderProfilerUSCSampleInfoNS_9allocatorIS1_EEEENS2_IS4_EEEE(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = (void **)(a1 + 152);
  v4 = (void **)(a1 + 176);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = v2;
  std::vector<std::vector<std::pair<ShaderBinaryInfo * {__strong},std::string>>>::__destroy_vector::operator()[abi:nn180100](&v4);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));

  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_272AC4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DrawDurationInfo>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::unordered_map<unsigned int,ClauseData>>::~pair(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<DYMTLShaderProfilerProcessedUSCSample>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(20 * a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DrawDurationInfo>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

BOOL USCSampleComparator::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a2 + 12);
  v4 = v2 >= v3;
  if (v2 == v3)
  {
    v5 = *(_DWORD *)(a1 + 32);
    v6 = *(_DWORD *)(a2 + 32);
    v4 = v5 >= v6;
    if (v5 == v6)
    {
      v4 = *(_DWORD *)a1 >= *(_DWORD *)a2;
      if (*(_DWORD *)a1 == *(_DWORD *)a2)
      {
        v7 = *(_DWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a2 + 8);
        v4 = v7 >= v8;
        if (v7 == v8)
          v4 = *(_QWORD *)(a1 + 24) >= *(_QWORD *)(a2 + 24);
      }
    }
  }
  return !v4;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL8 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;

  v6 = USCSampleComparator::operator()(a2, a1);
  result = USCSampleComparator::operator()(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = *(_OWORD *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a3 + 32);
      v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 32) = v11;
    }
    else
    {
      v23 = *(_OWORD *)a1;
      v24 = *(_OWORD *)(a1 + 16);
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a2 + 32) = v25;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v24;
      result = USCSampleComparator::operator()(a3, a2);
      if (!result)
        return result;
      v8 = *(_OWORD *)a2;
      v9 = *(_OWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 32);
      v28 = *(_QWORD *)(a3 + 32);
      v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      *(_QWORD *)(a2 + 32) = v28;
    }
    *(_QWORD *)(a3 + 32) = v10;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
  }
  else if (result)
  {
    v13 = *(_OWORD *)a2;
    v14 = *(_OWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a3 + 32);
    v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v14;
    result = USCSampleComparator::operator()(a2, a1);
    if (result)
    {
      v18 = *(_OWORD *)a1;
      v19 = *(_OWORD *)(a1 + 16);
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(a2 + 32);
      v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 32) = v21;
      *(_QWORD *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a2, a3);
  if (USCSampleComparator::operator()(a4, a3))
  {
    v9 = *(_OWORD *)a3;
    v10 = *(_OWORD *)(a3 + 16);
    v11 = *(_QWORD *)(a3 + 32);
    v12 = *(_QWORD *)(a4 + 32);
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_QWORD *)(a4 + 32) = v11;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = v10;
    if (USCSampleComparator::operator()(a3, a2))
    {
      v14 = *(__n128 *)a2;
      v15 = *(_OWORD *)(a2 + 16);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      *(_QWORD *)(a2 + 32) = v17;
      *(_QWORD *)(a3 + 32) = v16;
      *(__n128 *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v15;
      if (USCSampleComparator::operator()(a2, a1))
      {
        result = *(__n128 *)a1;
        v19 = *(_OWORD *)(a1 + 16);
        v20 = *(_QWORD *)(a1 + 32);
        v21 = *(_QWORD *)(a2 + 32);
        v22 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
        *(_QWORD *)(a1 + 32) = v21;
        *(_QWORD *)(a2 + 32) = v20;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a2, a3, a4);
  if (USCSampleComparator::operator()(a5, a4))
  {
    v11 = *(_OWORD *)a4;
    v12 = *(_OWORD *)(a4 + 16);
    v13 = *(_QWORD *)(a4 + 32);
    v14 = *(_QWORD *)(a5 + 32);
    v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(_QWORD *)(a4 + 32) = v14;
    *(_QWORD *)(a5 + 32) = v13;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = v12;
    if (USCSampleComparator::operator()(a4, a3))
    {
      v16 = *(_OWORD *)a3;
      v17 = *(_OWORD *)(a3 + 16);
      v18 = *(_QWORD *)(a3 + 32);
      v19 = *(_QWORD *)(a4 + 32);
      v20 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v20;
      *(_QWORD *)(a3 + 32) = v19;
      *(_QWORD *)(a4 + 32) = v18;
      *(_OWORD *)a4 = v16;
      *(_OWORD *)(a4 + 16) = v17;
      if (USCSampleComparator::operator()(a3, a2))
      {
        v21 = *(__n128 *)a2;
        v22 = *(_OWORD *)(a2 + 16);
        v23 = *(_QWORD *)(a2 + 32);
        v24 = *(_QWORD *)(a3 + 32);
        v25 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v25;
        *(_QWORD *)(a2 + 32) = v24;
        *(_QWORD *)(a3 + 32) = v23;
        *(__n128 *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v22;
        if (USCSampleComparator::operator()(a2, a1))
        {
          result = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v27 = *(_QWORD *)(a1 + 32);
          v28 = *(_QWORD *)(a2 + 32);
          v29 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v29;
          *(_QWORD *)(a1 + 32) = v28;
          *(_QWORD *)(a2 + 32) = v27;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 40;
      if (!USCSampleComparator::operator()(a2 - 40, a1))
        return 1;
      v7 = *(_OWORD *)a1;
      v8 = *(_OWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(v6 + 32);
      v11 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(v6 + 32) = v9;
      result = 1;
      *(_OWORD *)v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v12 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,USCSampleComparator &,ShaderProfilerUSCSampleInfo *>(a1, a1 + 40, a1 + 80);
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (2)
  {
    if (!USCSampleComparator::operator()(v13, v12))
      goto LABEL_20;
    v16 = *(_QWORD *)v13;
    v17 = *(_DWORD *)(v13 + 8);
    v18 = *(_DWORD *)(v13 + 12);
    v20 = *(_QWORD *)(v13 + 16);
    v19 = *(_QWORD *)(v13 + 24);
    v21 = *(_QWORD *)(v13 + 32);
    v22 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v12;
    *(_OWORD *)(v13 + 16) = v22;
    v23 = a1;
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v12 + 32);
    if (v12 == a1)
      goto LABEL_19;
    v24 = v14;
    while (1)
    {
      v25 = a1 + v24;
      v26 = (_DWORD *)(a1 + v24 + 40);
      v27 = *(_DWORD *)(a1 + v24 + 52);
      v28 = v18 >= v27;
      if (v18 == v27)
      {
        v29 = *(_DWORD *)(v25 + 72);
        v28 = v21 >= v29;
        if ((_DWORD)v21 == v29)
        {
          v28 = v16 >= *v26;
          if ((_DWORD)v16 == *v26)
          {
            v30 = *(_DWORD *)(a1 + v24 + 48);
            v28 = v17 >= v30;
            if (v17 == v30)
            {
              if (v19 >= *(_QWORD *)(a1 + v24 + 64))
              {
                v23 = a1 + v24 + 80;
                goto LABEL_19;
              }
              goto LABEL_16;
            }
          }
        }
      }
      if (v28)
        break;
LABEL_16:
      v12 -= 40;
      v31 = *(_OWORD *)(a1 + v24 + 56);
      *(_OWORD *)(v25 + 80) = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 96) = v31;
      *(_QWORD *)(v25 + 112) = *(_QWORD *)(a1 + v24 + 72);
      v24 -= 40;
      if (v24 == -80)
      {
        v23 = a1;
        goto LABEL_19;
      }
    }
    v23 = v12;
LABEL_19:
    *(_QWORD *)v23 = v16;
    *(_DWORD *)(v23 + 8) = v17;
    *(_DWORD *)(v23 + 12) = v18;
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = v19;
    ++v15;
    *(_QWORD *)(v23 + 32) = v21;
    if (v15 != 8)
    {
LABEL_20:
      v12 = v13;
      v14 += 40;
      v13 += 40;
      if (v13 == a2)
        return 1;
      continue;
    }
    return v13 + 40 == a2;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryInfo * {__strong},std::string>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<unsigned long long const,std::pair<ShaderBinaryInfo * {__strong},std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<std::pair<ShaderBinaryInfo * {__strong},std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::allocator<std::pair<ShaderBinaryInfo * {__strong},std::string>>::destroy[abi:nn180100](i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 __Block_byref_object_copy__545(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void **__Block_byref_object_dispose__546(uint64_t a1)
{
  return std::vector<std::vector<-[DYPMTLShaderProfilerHelper adjustHWBiasAndFinalizeResult]::ClauseInfo>>::~vector[abi:nn180100]((void **)(a1 + 48));
}

void sub_2736FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_2737F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_273C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_273D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_273DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_273E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_273FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_2741C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::vector<double>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    abort();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[8 * v5];
  v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    v18 = *((_QWORD *)v13 - 1);
    v13 -= 8;
    *((_QWORD *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

_OWORD *std::vector<std::pair<unsigned long long,unsigned long long>>::__init_with_size[abi:nn180100]<std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>*>(_OWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    if (a4 >> 60)
      abort();
    v6 = result;
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = *a2++;
      *result++ = v8;
    }
    v6[1] = result;
  }
  return result;
}

uint64_t __Block_byref_object_copy__3220(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3221(uint64_t a1)
{

}

uint64_t std::__split_buffer<std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<std::vector<std::vector<std::pair<unsigned int,double>>>>::reset[abi:nn180100]((void ***)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<std::vector<double>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<std::vector<double>>::operator()[abi:nn180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::reset[abi:nn180100]((void ***)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 __Block_byref_object_copy__500(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__501(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::unordered_map<long,std::unordered_map<unsigned int,DrawDurationInfo>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__503(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__504(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__506(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__507(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<std::vector<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData,std::allocator<GRCInfo::MergeCounterData(NSArray *,NSArray*<NSArray*<NSString *>>,NSArray *,std::vector<std::unordered_map<unsigned int,GRCInfo::EncoderCounterInfo>> &,NSMutableDictionary<NSArray*,NSNumber *> *)::CounterValueData>>>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void sub_274F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  void *v63;
  void *v64;
  void *v65;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:nn180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >> 61)
      abort();
    v6 = result;
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = *a2++;
      *result++ = v8;
    }
    v6[1] = result;
  }
  return result;
}

__n128 __Block_byref_object_copy__528(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__529(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void sub_2763B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  uint64_t v28;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unordered_map<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unordered_map<unsigned int,GTEncoderSampleIndexInfo>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<long,std::unordered_map<unsigned int,DrawDurationInfo>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (_QWORD *)*(v4 - 3);
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table((uint64_t)(v6 + 3));
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v9 = (void *)*(v4 - 5);
        v4 -= 5;
        v8 = v9;
        *v4 = 0;
        if (v9)
          operator delete(v8);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::pair<unsigned long long,unsigned long long>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(_QWORD *)(a3 + 16);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_2767CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void __copy_helper_block_ea8_112c101_ZTSNSt3__14pairIP21ShaderBinaryStatsInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE(std::string *a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  a1[4].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
  v2 = a1 + 5;
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 120);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 136);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_112c101_ZTSNSt3__14pairIP21ShaderBinaryStatsInfoNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<unsigned int,DrawDurationInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<unsigned int,DrawDurationInfo>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<unsigned int,DrawDurationInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DrawDurationInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DrawDurationInfo>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::vector<ShaderProfilerUSCSampleInfo>::__insert_with_size[abi:nn180100]<std::__wrap_iter<ShaderProfilerUSCSampleInfo*>,std::__wrap_iter<ShaderProfilerUSCSampleInfo*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;

  if (a5 < 1)
    return;
  v6 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v10) >> 3)) < a5)
  {
    v11 = *(char **)a1;
    v12 = a5 - 0x3333333333333333 * ((uint64_t)(v10 - *(_QWORD *)a1) >> 3);
    if (v12 > 0x666666666666666)
      abort();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - v11) >> 3);
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (uint64_t)v11) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v12)
      v15 = v12;
    if (v14 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v15;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v16);
    else
      v17 = 0;
    v27 = v16 + 40 * v13;
    v28 = 5 * a5;
    v29 = (char *)(v27 + 40 * a5);
    v30 = 8 * v28;
    v31 = v27;
    do
    {
      v32 = *(_OWORD *)v6;
      v33 = *((_OWORD *)v6 + 1);
      *(_QWORD *)(v31 + 32) = *((_QWORD *)v6 + 4);
      *(_OWORD *)v31 = v32;
      *(_OWORD *)(v31 + 16) = v33;
      v31 += 40;
      v6 += 40;
      v30 -= 40;
    }
    while (v30);
    v34 = *(char **)a1;
    if (*(char **)a1 == __dst)
    {
      v38 = v16 + 40 * v13;
    }
    else
    {
      v35 = __dst;
      do
      {
        v36 = *(_OWORD *)(v35 - 40);
        v37 = *(_OWORD *)(v35 - 24);
        v38 = v27 - 40;
        *(_QWORD *)(v27 - 8) = *((_QWORD *)v35 - 1);
        *(_OWORD *)(v27 - 24) = v37;
        *(_OWORD *)(v27 - 40) = v36;
        v35 -= 40;
        v27 -= 40;
      }
      while (v35 != v34);
    }
    v39 = v16 + 40 * v17;
    v40 = *(_BYTE **)(a1 + 8);
    v41 = v40 - __dst;
    if (v40 != __dst)
      memmove(v29, __dst, v40 - __dst);
    v42 = *(char **)a1;
    *(_QWORD *)a1 = v38;
    *(_QWORD *)(a1 + 8) = &v29[v41];
    *(_QWORD *)(a1 + 16) = v39;
    if (v42)
      operator delete(v42);
    return;
  }
  v18 = v10 - (_QWORD)__dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)) >= a5)
  {
    v19 = &__src[40 * a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &__dst[40 * a5];
    v23 = &v21[-40 * a5];
    v24 = v21;
    if ((unint64_t)v23 < v10)
    {
      v24 = v21;
      do
      {
        v25 = *(_OWORD *)v23;
        v26 = *((_OWORD *)v23 + 1);
        *((_QWORD *)v24 + 4) = *((_QWORD *)v23 + 4);
        *(_OWORD *)v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        v23 += 40;
        v24 += 40;
      }
      while ((unint64_t)v23 < v10);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&__dst[40 * a5], __dst, v21 - v22);
    if (v19 != v6)
      memmove(__dst, v6, v19 - v6);
    return;
  }
  v19 = &__src[8 * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v10 - (_QWORD)__dst) >> 3)], a4 - v19);
  v21 = (char *)(v10 + v20);
  *(_QWORD *)(a1 + 8) = v10 + v20;
  if (v18 >= 1)
    goto LABEL_17;
}

_QWORD *__copy_helper_block_ea8_80c53_ZTSNSt3__16vectorINS_4pairIjjEENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v2 = (_QWORD *)(a1 + 80);
  v2[2] = 0;
  return std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:nn180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(v2, *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
}

void __destroy_helper_block_ea8_80c53_ZTSNSt3__16vectorINS_4pairIjjEENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

void ProfileEventHelper::~ProfileEventHelper(ProfileEventHelper *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 456);
  v4 = (void **)((char *)this + 432);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 392);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)this + 352);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((_QWORD *)this + 38);
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  std::deque<unsigned int>::~deque[abi:nn180100]((uint64_t)this + 200);
  std::deque<unsigned int>::~deque[abi:nn180100]((uint64_t)this + 152);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((_QWORD *)this + 13);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((_QWORD *)this + 7);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((_QWORD *)this + 1);
}

void ProfileEventHelper::ProcessQueue(ProfileEventHelper *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void **v20;
  unint64_t *v21;
  void **v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *i;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  char **v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unsigned int v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  _BOOL4 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  int v92;
  uint64_t v93;
  int v94;
  _BOOL4 v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int64x2_t *v100;
  char *v101;
  int v102;
  uint64_t v103;

  v2 = (void **)*((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 18) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 15);
      v2 = (void **)(*((_QWORD *)this + 14) + 8);
      *((_QWORD *)this + 14) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  *((_QWORD *)this + 17) = v6;
LABEL_8:
  v7 = *(_DWORD *)this;
  std::deque<unsigned int>::push_front((char **)this + 19, (_DWORD *)this + 124);
  std::deque<unsigned int>::push_front((char **)this + 25, (_DWORD *)this + 125);
  std::deque<ProfileEvent>::operator=((_QWORD *)this + 7, (_QWORD *)this + 1);
  v9 = *((_QWORD *)this + 12);
  if (v9)
  {
    v10 = (char *)this + 456;
    v11 = (char *)this + 352;
    do
    {
      ++*(_DWORD *)this;
      v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + ((*((_QWORD *)this + 11) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*((_QWORD *)this + 11) & 0x1FFLL));
      ++*((_QWORD *)this + 11);
      *((_QWORD *)this + 12) = v9 - 1;
      std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 56);
      if (v12 >> 28)
      {
        if (v12 >> 28 == 2 && *((_DWORD *)this + 1) == 6)
          LODWORD(v12) = v12 & 0xFFFFFFF | 0x80000000;
        v13 = v12 >> 28;
        v14 = (v12 >> 28) - 3;
        if (v14 >= 6)
        {
          if (v13 == 2)
          {
            for (i = (_QWORD *)*((_QWORD *)this + 54); i != *((_QWORD **)this + 55); i += 3)
            {
              v26 = (_DWORD *)*i;
              if (*i != i[1] && *v26 >> 28 == 1)
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v11, v26[1], v26[1]);
                *(_DWORD *)*i = *(_DWORD *)*i & 0xFFFFFFF | 0x20000000;
                *(_DWORD *)(*i + 4) = *(_DWORD *)this;
                break;
              }
            }
          }
          else if (v13 == 1)
          {
            v19 = *(unsigned int *)this;
            v18 = *((_DWORD *)this + 1);
            *((_DWORD *)this + 1) = v18 + 1;
            v20 = (void **)(*((_QWORD *)this + 54) + 24 * v18);
            v22 = v20 + 1;
            v21 = (unint64_t *)v20[1];
            v23 = (unint64_t)v20[2];
            if ((unint64_t)v21 >= v23)
            {
              v27 = ((char *)v21 - (_BYTE *)*v20) >> 3;
              if ((unint64_t)(v27 + 1) >> 61)
LABEL_110:
                abort();
              v28 = v23 - (_QWORD)*v20;
              v29 = v28 >> 2;
              if (v28 >> 2 <= (unint64_t)(v27 + 1))
                v29 = v27 + 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v29;
              if (v30)
                v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v30);
              else
                v31 = 0;
              v32 = (unint64_t *)(v30 + 8 * v27);
              *v32 = v12 | (unint64_t)(v19 << 32);
              v24 = v32 + 1;
              v33 = (char *)*v22;
              v34 = (char *)*v20;
              if (*v22 == *v20)
              {
                v10 = (char *)this + 456;
              }
              else
              {
                v10 = (char *)this + 456;
                do
                {
                  v35 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *--v32 = v35;
                }
                while (v33 != v34);
                v33 = (char *)*v20;
              }
              *v20 = v32;
              *v22 = v24;
              v20[2] = (void *)(v30 + 8 * v31);
              if (v33)
                operator delete(v33);
            }
            else
            {
              *v21 = v12 | (unint64_t)(v19 << 32);
              v24 = v21 + 1;
              v10 = (char *)this + 456;
            }
            v11 = (char *)this + 352;
            *v22 = v24;
          }
        }
        else
        {
          v15 = (_QWORD *)(*((_QWORD *)this + 54) + 24 * v14);
          if (*v15 == v15[1])
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v11, *(_DWORD *)this, *(_DWORD *)this);
          }
          else
          {
            v16 = *(_DWORD *)(*v15 + 4);
            LODWORD(v103) = v12 >> 28;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v10, v13, &v103)+ 5) = v16;
            v17 = *((_QWORD *)this + 54) + 24 * v14;
            *(_QWORD *)(v17 + 8) -= 8;
          }
        }
      }
      v9 = *((_QWORD *)this + 12);
    }
    while (v9);
  }
  v36 = 0;
  v100 = (int64x2_t *)((char *)this + 104);
  do
  {
    v37 = (_QWORD *)(*((_QWORD *)this + 54) + v36);
    if (*v37 != v37[1])
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)this + 352, *(_DWORD *)(*v37 + 4), *(_DWORD *)(*v37 + 4));
    v36 += 24;
  }
  while (v36 != 144);
  v38 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 36) = v38;
  *((_DWORD *)this + 1) = 0;
  v39 = *((_QWORD *)this + 6);
  if (v39)
  {
    v40 = 0;
    v41 = 0;
    v101 = (char *)this + 392;
    while (1)
    {
      v42 = *((_QWORD *)this + 5);
      ++v7;
      v103 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + ((v42 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v42 & 0x1FF));
      v43 = v103;
      *((_QWORD *)this + 5) = v42 + 1;
      *((_QWORD *)this + 6) = v39 - 1;
      std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 8);
      if ((v43 & 0xF0000000) == 0x10000000)
      {
        ++*((_DWORD *)this + 1);
        if (!std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((_QWORD *)this + 44, v7))goto LABEL_63;
      }
      else if (v43 >> 28
             && !std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((_QWORD *)this + 44, v7))
      {
        if ((v43 & 0xF0000000) == 0x20000000 && *((_DWORD *)this + 1) == 6)
        {
          LODWORD(v103) = v43 & 0xFFFFFFF | 0x80000000;
          v43 = v103;
        }
LABEL_63:
        v45 = *((_QWORD *)this + 18);
        v44 = v43 & 0xFFFFFFF;
        if (v45)
          v41 += (v44 - v40) / v45;
        v102 = v43 & 0xFFFFFFF;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, v43 & 0xFFFFFFF, &v102)+ 5) = v41;
        v46 = v43 >> 28;
        v47 = (v43 >> 28) - 3;
        if (v47 >= 6)
        {
          if (v46 - 1 <= 1)
          {
            HIDWORD(v103) = v7;
            std::deque<ProfileEvent>::emplace_back<ProfileEvent&>(v100, &v103);
          }
        }
        else
        {
          v48 = std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((_QWORD *)this + 57, v46);
          if (v48)
          {
            v49 = *((_QWORD *)this + 14);
            if (*((_QWORD *)this + 15) != v49)
            {
              v50 = *((_QWORD *)this + 17);
              v51 = (char **)(v49 + 8 * (v50 >> 9));
              v52 = *v51;
              v53 = &(*v51)[8 * (v50 & 0x1FF)];
              v54 = *(_QWORD *)(v49 + (((*((_QWORD *)this + 18) + v50) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*((_QWORD *)this + 18) + v50) & 0x1FF);
              if (v53 != (char *)v54)
              {
                while (*((_DWORD *)v53 + 1) != *((_DWORD *)v48 + 5))
                {
                  v53 += 8;
                  if (v53 - v52 == 4096)
                  {
                    v55 = v51[1];
                    ++v51;
                    v52 = v55;
                    v53 = v55;
                  }
                  if (v53 == (char *)v54)
                    goto LABEL_58;
                }
                v56 = *(_DWORD *)v53;
                std::deque<ProfileEvent>::erase(v100, (char *)v51, (uint64_t)v53);
                v102 = v56 & 0xFFFFFFF;
                v57 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, v56 & 0xFFFFFFF, &v102)+ 5);
                v102 = v44;
                v58 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v101, v44, &v102);
                v59 = *((_QWORD *)this + 24);
                v60 = (*((unsigned int *)this + 125) | (v59 << 36)) & 0x3000000FFFLL;
                if (v59 < 2 || (v61 = *((_QWORD *)this + 30), v61 < 2))
                {
                  v65 = 0;
                  v62 = 0;
                }
                else
                {
                  v62 = 0;
                  v63 = *((_QWORD *)this + 23);
                  v64 = *((_QWORD *)this + 20);
                  v65 = *(_DWORD *)(*(_QWORD *)(v64 + (((unint64_t)(v63 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * ((v63 + 1) & 0x3FF));
                  v66 = *((_QWORD *)this + 29);
                  v67 = *((_QWORD *)this + 26);
                  v60 |= (unint64_t)(*(_DWORD *)(*(_QWORD *)(v67
                                                                  + (((unint64_t)(v66 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((v66 + 1) & 0x3FF)) & 0xFFF) << 12;
                  if (v59 >= 3 && v61 != 2)
                  {
                    v62 = *(_DWORD *)(*(_QWORD *)(v64 + (((unint64_t)(v63 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * ((v63 + 2) & 0x3FF));
                    v60 |= (unint64_t)(*(_DWORD *)(*(_QWORD *)(v67
                                                                    + (((unint64_t)(v66 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                        + 4 * ((v66 + 2) & 0x3FF)) & 0xFFF) << 24;
                  }
                }
                v68 = *((_DWORD *)v58 + 5) - v57;
                v70 = *((_DWORD *)this + 62);
                v69 = *((_DWORD *)this + 63);
                v71 = *((_DWORD *)this + 124);
                if (v70 == -1)
                  v72 = v56 >> 28 == 2;
                else
                  v72 = v62;
                v73 = *((_QWORD *)this + 36);
                v74 = *((_QWORD *)this + 37);
                if (v73 >= v74)
                {
                  v76 = *((_QWORD *)this + 35);
                  v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v73 - v76) >> 3);
                  v78 = v77 + 1;
                  if (v77 + 1 > 0x666666666666666)
                    goto LABEL_110;
                  v79 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74 - v76) >> 3);
                  if (2 * v79 > v78)
                    v78 = 2 * v79;
                  if (v79 >= 0x333333333333333)
                    v80 = 0x666666666666666;
                  else
                    v80 = v78;
                  if (v80)
                  {
                    v99 = v60;
                    v97 = v68;
                    v98 = v65;
                    v95 = v72;
                    v96 = *((_DWORD *)this + 124);
                    v94 = *((_DWORD *)this + 63);
                    v80 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v80);
                    v69 = v94;
                    v72 = v95;
                    v71 = v96;
                    v68 = v97;
                    v65 = v98;
                    v60 = v99;
                  }
                  else
                  {
                    v81 = 0;
                  }
                  v82 = v80 + 40 * v77;
                  *(_DWORD *)v82 = v70;
                  *(_DWORD *)(v82 + 4) = v69;
                  *(_DWORD *)(v82 + 8) = v68;
                  *(_DWORD *)(v82 + 12) = v71;
                  *(_DWORD *)(v82 + 16) = v65;
                  *(_DWORD *)(v82 + 20) = v72;
                  *(_QWORD *)(v82 + 24) = v60;
                  *(_DWORD *)(v82 + 32) = v47;
                  *(_DWORD *)(v82 + 36) = 0;
                  v84 = (char *)*((_QWORD *)this + 35);
                  v83 = (char *)*((_QWORD *)this + 36);
                  v85 = v82;
                  if (v83 != v84)
                  {
                    do
                    {
                      v8 = *(_OWORD *)(v83 - 40);
                      v86 = *(_OWORD *)(v83 - 24);
                      *(_QWORD *)(v85 - 8) = *((_QWORD *)v83 - 1);
                      *(_OWORD *)(v85 - 24) = v86;
                      *(_OWORD *)(v85 - 40) = v8;
                      v85 -= 40;
                      v83 -= 40;
                    }
                    while (v83 != v84);
                    v83 = (char *)*((_QWORD *)this + 35);
                  }
                  v75 = v82 + 40;
                  *((_QWORD *)this + 35) = v85;
                  *((_QWORD *)this + 36) = v82 + 40;
                  *((_QWORD *)this + 37) = v80 + 40 * v81;
                  if (v83)
                    operator delete(v83);
                }
                else
                {
                  *(_DWORD *)v73 = v70;
                  *(_DWORD *)(v73 + 4) = v69;
                  *(_DWORD *)(v73 + 8) = v68;
                  *(_DWORD *)(v73 + 12) = v71;
                  *(_DWORD *)(v73 + 16) = v65;
                  *(_DWORD *)(v73 + 20) = v72;
                  *(_QWORD *)(v73 + 24) = v60;
                  v75 = v73 + 40;
                  *(_DWORD *)(v73 + 32) = v47;
                  *(_DWORD *)(v73 + 36) = 0;
                }
                *((_QWORD *)this + 36) = v75;
              }
            }
          }
        }
        goto LABEL_58;
      }
      v44 = v40;
LABEL_58:
      v39 = *((_QWORD *)this + 6);
      v40 = v44;
      if (!v39)
      {
        v87 = *((_QWORD *)this + 35);
        v38 = *((_QWORD *)this + 36);
        goto LABEL_103;
      }
    }
  }
  v87 = v38;
LABEL_103:
  v88 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - v87) >> 3));
  if (v38 == v87)
    v89 = 0;
  else
    v89 = v88;
  std::__introsort<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>(v87, v38, v89, 1, *(double *)&v8);
  v90 = (char *)*((_QWORD *)this + 35);
  v91 = (char *)*((_QWORD *)this + 36);
  if (v90 != v91)
  {
    v92 = 0;
    v93 = *((_QWORD *)this + 35);
    do
    {
      *(_DWORD *)(v93 + 32) = v92++;
      v93 += 40;
    }
    while ((char *)v93 != v91);
  }
  std::vector<ShaderProfilerUSCSampleInfo>::__insert_with_size[abi:nn180100]<std::__wrap_iter<ShaderProfilerUSCSampleInfo*>,std::__wrap_iter<ShaderProfilerUSCSampleInfo*>>((uint64_t)this + 256, *((char **)this + 33), v90, v91, 0xCCCCCCCCCCCCCCCDLL * ((v91 - v90) >> 3));
}

void ProfileEventHelper::ProcessQueueLegacy(ProfileEventHelper *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int **v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t j;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  int v63;
  _BOOL4 v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;

  v2 = (void **)*((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 18) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 15);
      v2 = (void **)(*((_QWORD *)this + 14) + 8);
      *((_QWORD *)this + 14) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  *((_QWORD *)this + 17) = v6;
LABEL_8:
  std::deque<unsigned int>::push_front((char **)this + 19, (_DWORD *)this + 124);
  std::deque<unsigned int>::push_front((char **)this + 25, (_DWORD *)this + 125);
  std::deque<ProfileEvent>::operator=((_QWORD *)this + 7, (_QWORD *)this + 1);
  *(_DWORD *)this = 0;
  for (i = *((_QWORD *)this + 12); i; i = *((_QWORD *)this + 12))
  {
    ++*(_DWORD *)this;
    v8 = *((_QWORD *)this + 11);
    v70 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
    v9 = v70;
    *((_QWORD *)this + 11) = v8 + 1;
    *((_QWORD *)this + 12) = i - 1;
    std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 56);
    if (v9 >> 28)
    {
      switch(v9 >> 28)
      {
        case 1u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          HIDWORD(v70) = *(_DWORD *)this;
          std::deque<ProfileEvent>::emplace_back<ProfileEvent&>((_QWORD *)this + 38, &v70);
          break;
        case 2u:
          v10 = *((_QWORD *)this + 39);
          if (*((_QWORD *)this + 40) != v10)
          {
            v11 = *((_QWORD *)this + 42);
            v12 = (int **)(v10 + 8 * (v11 >> 9));
            v13 = *v12;
            v14 = &(*v12)[2 * (v11 & 0x1FF)];
            v15 = *(_QWORD *)(v10 + (((*((_QWORD *)this + 43) + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * ((*((_QWORD *)this + 43) + v11) & 0x1FF);
            while (v14 != (int *)v15)
            {
              if (*v14 >> 28 == 1)
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)this + 352, v14[1], v14[1]);
                *v14 = *v14 & 0xFFFFFFF | 0x20000000;
                goto LABEL_12;
              }
              v14 += 2;
              if ((char *)v14 - (char *)v13 == 4096)
              {
                v16 = v12[1];
                ++v12;
                v13 = v16;
                v14 = v16;
              }
            }
          }
          break;
        case 3u:
          v17 = *((_QWORD *)this + 43);
          if (v17)
          {
            ++*((_QWORD *)this + 42);
            *((_QWORD *)this + 43) = v17 - 1;
            std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 304);
          }
          break;
        default:
          continue;
      }
    }
LABEL_12:
    ;
  }
  for (j = *((_QWORD *)this + 43); j; j = *((_QWORD *)this + 43))
  {
    v19 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 39) + ((*((_QWORD *)this + 42) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*((_QWORD *)this + 42) & 0x1FFLL)
                    + 4);
    ++*((_QWORD *)this + 42);
    *((_QWORD *)this + 43) = j - 1;
    std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 304);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)this + 352, v19, v19);
  }
  *(_DWORD *)this = 0;
  v20 = *((_QWORD *)this + 6);
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      ++*(_DWORD *)this;
      v24 = *((_QWORD *)this + 5);
      v70 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + ((v24 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v24 & 0x1FF));
      v25 = v70;
      *((_QWORD *)this + 5) = v24 + 1;
      *((_QWORD *)this + 6) = v20 - 1;
      std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 8);
      if (v25 >> 28
        && !std::__hash_table<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,GTEncoderSampleIndexInfo>>>::find<unsigned int>((_QWORD *)this + 44, *(_DWORD *)this))
      {
        v27 = *((_QWORD *)this + 18);
        v26 = v25 & 0xFFFFFFF;
        if (v27)
          v22 += (v26 - v21) / v27;
        v69 = v25 & 0xFFFFFFF;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 392, v25 & 0xFFFFFFF, &v69)+ 5) = v22;
        v28 = v25 >> 28;
        if (v25 >> 28 <= 7)
        {
          if (((1 << v28) & 0xF6) != 0)
          {
            std::deque<ProfileEvent>::emplace_back<ProfileEvent&>((_QWORD *)this + 13, &v70);
          }
          else if (v28 == 3)
          {
            v29 = *((_QWORD *)this + 18);
            if (v29)
            {
              v30 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14)
                                          + ((*((_QWORD *)this + 17) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*((_QWORD *)this + 17) & 0x1FFLL));
              ++*((_QWORD *)this + 17);
              *((_QWORD *)this + 18) = v29 - 1;
              std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 104);
              v69 = v30 & 0xFFFFFFF;
              v31 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 392, v30 & 0xFFFFFFF, &v69)+ 5);
              v69 = v26;
              v32 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 392, v26, &v69);
              v33 = *((_QWORD *)this + 24);
              v34 = (*((unsigned int *)this + 125) | (v33 << 36)) & 0x3000000FFFLL;
              v68 = v23;
              if (v33 < 2 || (v35 = *((_QWORD *)this + 30), v35 < 2))
              {
                v39 = 0;
                v36 = 0;
              }
              else
              {
                v36 = 0;
                v37 = *((_QWORD *)this + 23);
                v38 = *((_QWORD *)this + 20);
                v39 = *(_DWORD *)(*(_QWORD *)(v38 + (((unint64_t)(v37 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * ((v37 + 1) & 0x3FF));
                v40 = *((_QWORD *)this + 29);
                v41 = *((_QWORD *)this + 26);
                v34 |= (unint64_t)(*(_DWORD *)(*(_QWORD *)(v41
                                                                + (((unint64_t)(v40 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                    + 4 * ((v40 + 1) & 0x3FF)) & 0xFFF) << 12;
                if (v33 >= 3 && v35 != 2)
                {
                  v36 = *(_DWORD *)(*(_QWORD *)(v38 + (((unint64_t)(v37 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * ((v37 + 2) & 0x3FF));
                  v34 |= (unint64_t)(*(_DWORD *)(*(_QWORD *)(v41
                                                                  + (((unint64_t)(v40 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                      + 4 * ((v40 + 2) & 0x3FF)) & 0xFFF) << 24;
                }
              }
              v42 = *((_DWORD *)v32 + 5) - v31;
              v44 = *((_DWORD *)this + 62);
              v43 = *((_DWORD *)this + 63);
              v45 = *((_DWORD *)this + 124);
              if (v44 == -1)
                v46 = v30 >> 28 == 2;
              else
                v46 = v36;
              v47 = *((_QWORD *)this + 33);
              v48 = *((_QWORD *)this + 34);
              if (v47 >= v48)
              {
                v50 = *((_QWORD *)this + 32);
                v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v50) >> 3);
                v52 = v51 + 1;
                if (v51 + 1 > 0x666666666666666)
                  abort();
                v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v50) >> 3);
                if (2 * v53 > v52)
                  v52 = 2 * v53;
                if (v53 >= 0x333333333333333)
                  v54 = 0x666666666666666;
                else
                  v54 = v52;
                if (v54)
                {
                  v67 = v34;
                  v55 = v39;
                  v65 = *((_DWORD *)this + 124);
                  v66 = v42;
                  v63 = *((_DWORD *)this + 63);
                  v64 = v46;
                  v54 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<ShaderProfilerUSCSampleInfo>>(v54);
                  v43 = v63;
                  v46 = v64;
                  v45 = v65;
                  v42 = v66;
                  v39 = v55;
                  v34 = v67;
                }
                else
                {
                  v56 = 0;
                }
                v57 = v54 + 40 * v51;
                *(_DWORD *)v57 = v44;
                *(_DWORD *)(v57 + 4) = v43;
                *(_DWORD *)(v57 + 8) = v42;
                *(_DWORD *)(v57 + 12) = v45;
                *(_DWORD *)(v57 + 16) = v39;
                *(_DWORD *)(v57 + 20) = v46;
                *(_QWORD *)(v57 + 24) = v34;
                v23 = v68;
                *(_QWORD *)(v57 + 32) = v68;
                v59 = (char *)*((_QWORD *)this + 32);
                v58 = (char *)*((_QWORD *)this + 33);
                v60 = v57;
                if (v58 != v59)
                {
                  do
                  {
                    v61 = *(_OWORD *)(v58 - 40);
                    v62 = *(_OWORD *)(v58 - 24);
                    *(_QWORD *)(v60 - 8) = *((_QWORD *)v58 - 1);
                    *(_OWORD *)(v60 - 24) = v62;
                    *(_OWORD *)(v60 - 40) = v61;
                    v60 -= 40;
                    v58 -= 40;
                  }
                  while (v58 != v59);
                  v58 = (char *)*((_QWORD *)this + 32);
                }
                v49 = v57 + 40;
                *((_QWORD *)this + 32) = v60;
                *((_QWORD *)this + 33) = v57 + 40;
                *((_QWORD *)this + 34) = v54 + 40 * v56;
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_DWORD *)v47 = v44;
                *(_DWORD *)(v47 + 4) = v43;
                *(_DWORD *)(v47 + 8) = v42;
                *(_DWORD *)(v47 + 12) = v45;
                *(_DWORD *)(v47 + 16) = v39;
                *(_DWORD *)(v47 + 20) = v46;
                *(_QWORD *)(v47 + 24) = v34;
                v49 = v47 + 40;
                *(_QWORD *)(v47 + 32) = v23;
              }
              ++v23;
              *((_QWORD *)this + 33) = v49;
            }
          }
        }
      }
      else
      {
        v26 = v21;
      }
      v20 = *((_QWORD *)this + 6);
      v21 = v26;
    }
    while (v20);
  }
}

void std::deque<ProfileEvent>::emplace_back<unsigned int &,unsigned int &>(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;

  v6 = a1[2];
  v7 = a1[1];
  v8 = ((v6 - v7) << 6) - 1;
  if (v6 == v7)
    v8 = 0;
  v9 = a1[5] + a1[4];
  if (v8 == v9)
  {
    std::deque<ProfileEvent>::__add_back_capacity(a1);
    v7 = a1[1];
    v9 = a1[5] + a1[4];
  }
  v10 = (int *)(*(_QWORD *)(v7 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
  *v10 = *a2 & 0xFFFFFFF | (*a3 << 28);
  v10[1] = -1;
  ++a1[5];
}

void std::deque<ProfileEvent>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *i;
  char *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(_QWORD *)v6 = v8;
      a1[2] += 8;
      return;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v28 = 1;
      else
        v28 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v28);
      v30 = &v29[8 * (v28 >> 2)];
      v32 = &v29[8 * v31];
      v33 = (uint64_t *)a1[1];
      v6 = v30;
      v34 = a1[2] - (_QWORD)v33;
      if (v34)
      {
        v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        v35 = 8 * (v34 >> 3);
        v36 = &v29[8 * (v28 >> 2)];
        do
        {
          v37 = *v33++;
          *(_QWORD *)v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  v19 = a1[2];
  v20 = (v19 - a1[1]) >> 3;
  v21 = a1[3];
  v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(_QWORD *)&v49 = operator new(0x1000uLL);
      std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(a1, &v49);
      return;
    }
    *(_QWORD *)&v49 = operator new(0x1000uLL);
    std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v49);
    v39 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v40 = *v39;
    v7 = (char *)(v39 + 1);
    v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_31;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v41 = 1;
      else
        v41 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v41);
      v30 = &v29[8 * (v41 >> 2)];
      v32 = &v29[8 * v42];
      v43 = (uint64_t *)a1[1];
      v6 = v30;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v29[8 * (v41 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1)
    v23 = 1;
  else
    v23 = v22 >> 2;
  v51 = a1 + 3;
  *(_QWORD *)&v49 = std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v23);
  *((_QWORD *)&v49 + 1) = v49 + 8 * v20;
  *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
  *((_QWORD *)&v50 + 1) = v49 + 8 * v24;
  v48 = operator new(0x1000uLL);
  std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v49, &v48);
  for (i = (_QWORD *)a1[2];
        i != (_QWORD *)a1[1];
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  v26 = (char *)*a1;
  v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26)
    operator delete(v26);
}

void sub_277D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<unsigned int>::push_front(char **a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  _QWORD *v47;

  v4 = (unint64_t)a1[4];
  if (!v4)
  {
    v5 = a1[1];
    v6 = a1[2];
    v7 = ((v6 - v5) << 7) - 1;
    if (v6 == v5)
      v7 = 0;
    if ((unint64_t)(v7 - (_QWORD)a1[5]) < 0x400)
    {
      v8 = a1[3];
      v9 = *a1;
      v10 = v8 - *a1;
      if (v6 - v5 >= (unint64_t)v10)
      {
        if (v8 == v9)
          v11 = 1;
        else
          v11 = v10 >> 2;
        v47 = a1 + 3;
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v11);
        v44 = v43;
        v45 = v43;
        v46 = &v43[8 * v12];
        v42 = operator new(0x1000uLL);
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v43, &v42);
        v14 = (uint64_t *)a1[1];
        v13 = a1[2];
        v15 = v45;
        while (v14 != (uint64_t *)v13)
        {
          if (v15 == v46)
          {
            v17 = v43;
            v16 = v44;
            if (v44 <= v43)
            {
              if (v15 == v43)
                v23 = 1;
              else
                v23 = (v15 - v43) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v23);
              v27 = v15 - v16;
              v26 = v15 == v16;
              v15 = &v24[8 * (v23 >> 2)];
              if (!v26)
              {
                v15 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v16;
                  v16 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v43 = v24;
              v44 = &v24[8 * (v23 >> 2)];
              v45 = v15;
              v46 = &v24[8 * v25];
              if (v17)
                operator delete(v17);
            }
            else
            {
              v18 = (v44 - v43) >> 3;
              if (v18 >= -1)
                v19 = v18 + 1;
              else
                v19 = v18 + 2;
              v20 = &v44[-8 * (v19 >> 1)];
              v21 = v15 - v44;
              if (v15 != v44)
              {
                memmove(&v44[-8 * (v19 >> 1)], v44, v15 - v44);
                v15 = v16;
              }
              v22 = &v15[-8 * (v19 >> 1)];
              v15 = &v20[v21];
              v44 = v22;
              v45 = &v20[v21];
            }
          }
          v31 = *v14++;
          *(_QWORD *)v15 = v31;
          v15 = v45 + 8;
          v45 += 8;
          v13 = a1[2];
        }
        v32 = *a1;
        v33 = v44;
        *a1 = v43;
        a1[1] = v33;
        v34 = v46;
        a1[2] = v15;
        a1[3] = v34;
        if (v15 - v33 == 8)
          v35 = 512;
        else
          v35 = (uint64_t)(a1[4] + 1024);
        a1[4] = (char *)v35;
        if (v32)
          operator delete(v32);
      }
      else
      {
        if (v5 == v9)
        {
          v43 = (char *)operator new(0x1000uLL);
          std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(a1, &v43);
          v36 = a1[2];
          v43 = (char *)*((_QWORD *)v36 - 1);
          a1[2] = v36 - 8;
        }
        else
        {
          v43 = (char *)operator new(0x1000uLL);
        }
        std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v43);
        if (a1[2] - a1[1] == 8)
          v37 = 512;
        else
          v37 = (uint64_t)(a1[4] + 1024);
        a1[4] = (char *)v37;
      }
    }
    else
    {
      a1[4] = (_BYTE *)(&stru_3D8 + 40);
      v43 = (char *)*((_QWORD *)v6 - 1);
      a1[2] = v6 - 8;
      std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v43);
    }
    v4 = (unint64_t)a1[4];
  }
  v38 = a1[1];
  v39 = &v38[8 * (v4 >> 10)];
  if (a1[2] == v38)
    v40 = 0;
  else
    v40 = *(_QWORD *)v39 + 4 * (v4 & 0x3FF);
  if (v40 == *(_QWORD *)v39)
    v40 = *((_QWORD *)v39 - 1) + 4096;
  *(_DWORD *)(v40 - 4) = *a2;
  v41 = (uint64_t)(a1[5] + 1);
  a1[4] = (char *)(v4 - 1);
  a1[5] = (char *)v41;
}

void sub_27807C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  operator delete(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<ProfileEvent>::operator=(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;

  if (a1 == a2)
    return a1;
  v3 = a2[4];
  v4 = a2[1];
  v5 = (char *)(v4 + 8 * (v3 >> 9));
  if (a2[2] == v4)
  {
    v6 = 0;
    v9 = 0;
    v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 9));
  }
  else
  {
    v6 = (_BYTE *)(*(_QWORD *)v5 + 8 * (a2[4] & 0x1FFLL));
    v7 = a2[5] + v3;
    v8 = (char *)(v4 + 8 * (v7 >> 9));
    v9 = *(_QWORD *)v8 + 8 * (v7 & 0x1FF);
  }
  if ((_BYTE *)v9 == v6)
  {
    v10 = 0;
  }
  else
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 3) + ((v8 - v5) << 6) - ((uint64_t)&v6[-*(_QWORD *)v5] >> 3);
    v11 = a1[5];
    if (v11 < v10)
    {
      v13 = std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v5, (uint64_t)v6, v11);
      v14 = v12;
      v15 = a1[1];
      if (a1[2] == v15)
        v16 = 0;
      else
        v16 = *(_QWORD *)(v15 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
      v29 = (char *)(v15 + 8 * (a1[4] >> 9));
      v30 = v16;
      std::__for_each_segment[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>>>((uint64_t *)v5, v6, v13, v12, (uint64_t)&v29);
      std::deque<ProfileEvent>::__append_with_size[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>>(a1, v13, v14, v10 - a1[5]);
      return a1;
    }
  }
  v17 = a1[1];
  v18 = (char *)(v17 + 8 * (a1[4] >> 9));
  if (a1[2] == v17)
    v19 = 0;
  else
    v19 = *(_QWORD *)v18 + 8 * (a1[4] & 0x1FFLL);
  v20 = std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v5, (uint64_t)v6, v10);
  v29 = v18;
  v30 = v19;
  std::__for_each_segment[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>>>((uint64_t *)v5, v6, v20, v21, (uint64_t)&v29);
  v22 = a1[5];
  v23 = a1[4] + v22;
  v24 = a1[1];
  v25 = (char *)(v24 + 8 * (v23 >> 9));
  if (a1[2] == v24)
    v26 = 0;
  else
    v26 = *(_QWORD *)v25 + 8 * (v23 & 0x1FF);
  if (v26 != v30)
  {
    v27 = ((v26 - *(_QWORD *)v25) >> 3) + ((v25 - v29) << 6) - ((v30 - *(_QWORD *)v29) >> 3);
    if (v27 >= 1)
    {
      a1[5] = v22 - v27;
      while (std::deque<ProfileEvent>::__maybe_remove_back_spare[abi:nn180100](a1))
        ;
    }
  }
  return a1;
}

void std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
}

void std::deque<ProfileEvent>::emplace_back<ProfileEvent&>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<ProfileEvent>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

_QWORD *std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 3);
    if (v3 < 1)
      result -= (unint64_t)(511 - v3) >> 9;
    else
      result += (unint64_t)v3 >> 9;
  }
  return result;
}

double std::__for_each_segment[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>>>(uint64_t *a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t *v8;
  _QWORD *v9;
  char *i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  double result;
  uint64_t v22;
  __int128 v23;

  if (a1 == a3)
  {
    v19 = *(_QWORD **)a5;
    v20 = *(char **)(a5 + 8);
    v18 = a4;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v22, a2, (_BYTE *)(*a1 + 4096), *(_QWORD **)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    v9 = *(_QWORD **)a5;
    for (i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      v11 = 0;
      v12 = *v8;
      v13 = (char *)*v9;
      while (1)
      {
        v14 = v13 - i + 4096;
        if ((4096 - 8 * v11) >> 3 >= v14 >> 3)
          v15 = v14 >> 3;
        else
          v15 = (4096 - 8 * v11) >> 3;
        if (v15)
          memmove(i, (const void *)(v12 + 8 * v11), 8 * v15);
        v11 += v15;
        if (v11 == 512)
          break;
        v16 = (char *)v9[1];
        ++v9;
        v13 = v16;
        i = v16;
      }
      i += 8 * v15;
      if ((char *)(*v9 + 4096) == i)
      {
        v17 = (char *)v9[1];
        ++v9;
        i = v17;
      }
      *(_QWORD *)a5 = v9;
      *(_QWORD *)(a5 + 8) = i;
    }
    a2 = (_BYTE *)*a3;
    v18 = a4;
    v19 = v9;
    v20 = i;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v22, a2, v18, v19, v20);
  result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

char *std::deque<ProfileEvent>::__append_with_size[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>>(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  __int128 v68;
  __int128 v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *result;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  _QWORD *v108;

  v4 = a4;
  v8 = (char *)a1[1];
  v9 = (char *)a1[2];
  v10 = v9 - v8;
  if (v9 == v8)
    v11 = 0;
  else
    v11 = ((v9 - v8) << 6) - 1;
  v12 = a1[4];
  v13 = a1[5];
  v14 = v13 + v12;
  v15 = v11 - (v13 + v12);
  v16 = a4 >= v15;
  v17 = a4 - v15;
  if (v17 != 0 && v16)
  {
    if (v9 == v8)
      v18 = v17 + 1;
    else
      v18 = v17;
    v19 = v18 >> 9;
    if ((v18 & 0x1FF) != 0)
      ++v19;
    if (v19 >= v12 >> 9)
      v20 = v12 >> 9;
    else
      v20 = v19;
    if (v19 <= v12 >> 9)
    {
      for (a1[4] = v12 - (v20 << 9); v20; --v20)
      {
        v27 = (_QWORD *)a1[1];
        v30 = *v27;
        v28 = (char *)(v27 + 1);
        v29 = v30;
        a1[1] = v28;
        if (v9 == (char *)a1[3])
        {
          v31 = (uint64_t)&v28[-*a1];
          if ((unint64_t)v28 <= *a1)
          {
            if (v9 == (char *)*a1)
              v39 = 1;
            else
              v39 = (uint64_t)&v9[-*a1] >> 2;
            v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v39);
            v42 = &v40[8 * (v39 >> 2)];
            v43 = (uint64_t *)a1[1];
            v9 = v42;
            v44 = a1[2] - (_QWORD)v43;
            if (v44)
            {
              v9 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
              v45 = 8 * (v44 >> 3);
              v46 = &v40[8 * (v39 >> 2)];
              do
              {
                v47 = *v43++;
                *(_QWORD *)v46 = v47;
                v46 += 8;
                v45 -= 8;
              }
              while (v45);
            }
            v48 = (char *)*a1;
            *a1 = v40;
            a1[1] = v42;
            a1[2] = v9;
            a1[3] = &v40[8 * v41];
            if (v48)
            {
              operator delete(v48);
              v9 = (char *)a1[2];
            }
          }
          else
          {
            v32 = v31 >> 3;
            v33 = v31 >> 3 < -1;
            v34 = (v31 >> 3) + 2;
            if (v33)
              v35 = v34;
            else
              v35 = v32 + 1;
            v36 = &v28[-8 * (v35 >> 1)];
            v37 = v9 - v28;
            if (v9 != v28)
            {
              memmove(&v28[-8 * (v35 >> 1)], v28, v9 - v28);
              v9 = (char *)a1[1];
            }
            v38 = &v9[-8 * (v35 >> 1)];
            v9 = &v36[v37];
            a1[1] = v38;
            a1[2] = &v36[v37];
          }
        }
        *(_QWORD *)v9 = v29;
        v9 = (char *)(a1[2] + 8);
        a1[2] = v9;
      }
    }
    else
    {
      v21 = v19 - v20;
      v22 = a1[3] - *a1;
      if (v21 <= (v22 >> 3) - (v10 >> 3))
      {
        if (v21)
        {
          while (a1[3] != a1[2])
          {
            *(_QWORD *)&v106 = operator new(0x1000uLL);
            std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(a1, &v106);
            if (!--v21)
            {
              v9 = (char *)a1[2];
              goto LABEL_78;
            }
          }
          for (i = 0; i != v21; ++i)
          {
            *(_QWORD *)&v106 = operator new(0x1000uLL);
            std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)a1, &v106);
            v9 = (char *)a1[2];
            if (&v9[-a1[1]] == (char *)&dword_8)
              v71 = 511;
            else
              v71 = 512;
            v72 = v71 + a1[4];
            a1[4] = v72;
          }
          v20 += v21;
        }
        else
        {
LABEL_78:
          v72 = a1[4];
        }
        for (a1[4] = v72 - (v20 << 9); v20; --v20)
        {
          v73 = (_QWORD *)a1[1];
          v76 = *v73;
          v74 = (char *)(v73 + 1);
          v75 = v76;
          a1[1] = v74;
          if (v9 == (char *)a1[3])
          {
            v77 = (uint64_t)&v74[-*a1];
            if ((unint64_t)v74 <= *a1)
            {
              if (v9 == (char *)*a1)
                v84 = 1;
              else
                v84 = (uint64_t)&v9[-*a1] >> 2;
              v85 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v84);
              v87 = &v85[8 * (v84 >> 2)];
              v88 = (uint64_t *)a1[1];
              v9 = v87;
              v89 = a1[2] - (_QWORD)v88;
              if (v89)
              {
                v9 = &v87[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = &v85[8 * (v84 >> 2)];
                do
                {
                  v92 = *v88++;
                  *(_QWORD *)v91 = v92;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v93 = (char *)*a1;
              *a1 = v85;
              a1[1] = v87;
              a1[2] = v9;
              a1[3] = &v85[8 * v86];
              if (v93)
              {
                operator delete(v93);
                v9 = (char *)a1[2];
              }
            }
            else
            {
              v78 = v77 >> 3;
              v33 = v77 >> 3 < -1;
              v79 = (v77 >> 3) + 2;
              if (v33)
                v80 = v79;
              else
                v80 = v78 + 1;
              v81 = &v74[-8 * (v80 >> 1)];
              v82 = v9 - v74;
              if (v9 != v74)
              {
                memmove(&v74[-8 * (v80 >> 1)], v74, v9 - v74);
                v9 = (char *)a1[1];
              }
              v83 = &v9[-8 * (v80 >> 1)];
              v9 = &v81[v82];
              a1[1] = v83;
              a1[2] = &v81[v82];
            }
          }
          *(_QWORD *)v9 = v75;
          v9 = (char *)(a1[2] + 8);
          a1[2] = v9;
        }
      }
      else
      {
        v23 = v10 >> 3;
        if (v22 >> 2 <= v21 + (v10 >> 3))
          v24 = v21 + v23;
        else
          v24 = v22 >> 2;
        v25 = v23 - v20;
        v108 = a1 + 3;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v24);
        else
          v26 = 0;
        *(_QWORD *)&v106 = v24;
        *((_QWORD *)&v106 + 1) = v24 + 8 * v25;
        *(_QWORD *)&v107 = *((_QWORD *)&v106 + 1);
        *((_QWORD *)&v107 + 1) = v24 + 8 * v26;
        do
        {
          v105 = operator new(0x1000uLL);
          std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_back(&v106, &v105);
          --v21;
        }
        while (v21);
        v103 = v20 << 9;
        v104 = v4;
        if (v20)
        {
          v49 = (_QWORD *)a1[1];
          v50 = (char *)v107;
          do
          {
            if (v50 == *((char **)&v107 + 1))
            {
              v51 = (char *)*((_QWORD *)&v106 + 1);
              v52 = (void *)v106;
              if (*((_QWORD *)&v106 + 1) <= (unint64_t)v106)
              {
                if (v50 == (char *)v106)
                  v58 = 1;
                else
                  v58 = (uint64_t)&v50[-v106] >> 2;
                v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v58);
                v62 = v50 - v51;
                v61 = v50 == v51;
                v50 = &v59[8 * (v58 >> 2)];
                if (!v61)
                {
                  v50 = &v59[8 * (v58 >> 2) + (v62 & 0xFFFFFFFFFFFFFFF8)];
                  v63 = 8 * (v62 >> 3);
                  v64 = &v59[8 * (v58 >> 2)];
                  do
                  {
                    v65 = *(_QWORD *)v51;
                    v51 += 8;
                    *(_QWORD *)v64 = v65;
                    v64 += 8;
                    v63 -= 8;
                  }
                  while (v63);
                }
                *(_QWORD *)&v106 = v59;
                *((_QWORD *)&v106 + 1) = &v59[8 * (v58 >> 2)];
                *(_QWORD *)&v107 = v50;
                *((_QWORD *)&v107 + 1) = &v59[8 * v60];
                if (v52)
                  operator delete(v52);
              }
              else
              {
                v53 = (uint64_t)(*((_QWORD *)&v106 + 1) - v106) >> 3;
                if (v53 >= -1)
                  v54 = v53 + 1;
                else
                  v54 = v53 + 2;
                v55 = *((_QWORD *)&v106 + 1) - 8 * (v54 >> 1);
                v56 = &v50[-*((_QWORD *)&v106 + 1)];
                if (v50 != *((char **)&v106 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v106 + 1) - 8 * (v54 >> 1)), *((const void **)&v106 + 1), (size_t)&v50[-*((_QWORD *)&v106 + 1)]);
                  v50 = v51;
                }
                v57 = &v50[-8 * (v54 >> 1)];
                v50 = &v56[v55];
                *((_QWORD *)&v106 + 1) = v57;
                *(_QWORD *)&v107 = &v56[v55];
              }
            }
            *(_QWORD *)v50 = *v49;
            v50 = (char *)(v107 + 8);
            *(_QWORD *)&v107 = v107 + 8;
            v49 = (_QWORD *)(a1[1] + 8);
            a1[1] = v49;
            --v20;
          }
          while (v20);
        }
        v66 = (_QWORD *)a1[2];
        v4 = v104;
        while (v66 != (_QWORD *)a1[1])
          std::__split_buffer<GTMMappedBuffer::UsedBlock *>::push_front((uint64_t)&v106, --v66);
        v69 = v106;
        v68 = v107;
        *(_QWORD *)&v106 = *a1;
        v67 = (void *)v106;
        *((_QWORD *)&v106 + 1) = v66;
        *(_OWORD *)a1 = v69;
        *((_OWORD *)a1 + 1) = v68;
        a1[4] -= v103;
        if (v67)
        {
          operator delete(v67);
          v9 = (char *)a1[2];
        }
        else
        {
          v9 = (char *)v68;
        }
      }
    }
    v13 = a1[5];
    v8 = (char *)a1[1];
    v14 = a1[4] + v13;
  }
  v94 = &v8[8 * (v14 >> 9)];
  if (v9 == v8)
    v95 = 0;
  else
    v95 = *(_QWORD *)v94 + 8 * (v14 & 0x1FF);
  result = (char *)std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v94, v95, v4);
  while (v95 != v97)
  {
    v98 = (_QWORD *)(v94 == result ? v97 : *(_QWORD *)v94 + 4096);
    if ((_QWORD *)v95 == v98)
    {
      v98 = (_QWORD *)v95;
    }
    else
    {
      v99 = (_QWORD *)v95;
      do
      {
        v100 = *a3++;
        *v99++ = v100;
        if ((uint32_t *)((char *)a3 - *a2) == &stru_FF8.dylib.name.offset)
        {
          v101 = (uint64_t *)a2[1];
          ++a2;
          a3 = v101;
        }
      }
      while (v99 != v98);
      v13 = a1[5];
    }
    v13 += ((uint64_t)v98 - v95) >> 3;
    a1[5] = v13;
    if (v94 == result)
      break;
    v102 = *((_QWORD *)v94 + 1);
    v94 += 8;
    v95 = v102;
  }
  return result;
}

void sub_278AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::deque<ProfileEvent>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 6) - 1;
  v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x3FF;
}

_QWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(_QWORD *result, _BYTE *__src, _BYTE *a3, _QWORD *a4, char *__dst)
{
  _QWORD *v6;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = a4;
  v8 = result;
  if (__src != a3)
  {
    v9 = __src;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      if ((a3 - v9) >> 3 >= v11 >> 3)
        v12 = v11 >> 3;
      else
        v12 = (a3 - v9) >> 3;
      if (v12)
        result = memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)v6[1];
      ++v6;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)(*v6 + 4096) == __dst)
    {
      v14 = (char *)v6[1];
      ++v6;
      __dst = v14;
    }
  }
  *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void std::deque<ProfileEvent>::erase(int64x2_t *a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  char *v10;
  char **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char **v17;
  char **v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char **v23;
  uint64_t v24;
  char **v25;
  char *v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char **v37;
  char *v38;
  char **v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  char **v48;
  char *v49;
  uint64_t v50;
  char **v51;
  char *v52;

  v4 = a1->i64[1];
  v5 = a1[1].i64[0];
  v6 = (char *)(v4 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
  if (v5 == v4)
    v7 = 0;
  else
    v7 = *(_QWORD *)v6 + 8 * (a1[2].i64[0] & 0x1FF);
  if (v7 == a3)
    v8 = 0;
  else
    v8 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v6) << 6) - ((v7 - *(_QWORD *)v6) >> 3);
  v9 = (char **)std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>::operator+[abi:nn180100](v6, v7, v8);
  v11 = v9;
  v12 = v10;
  v13 = a1[2].i64[1];
  v14 = v10 - *v9;
  v15 = v14 >> 3;
  if (v8 <= (unint64_t)(v13 - 1) >> 1)
  {
    if (v14 < -7)
    {
      v18 = &v9[-((unint64_t)(510 - v15) >> 9)];
      v19 = &(*v18)[8 * (~(510 - (_WORD)v15) & 0x1FF)];
    }
    else
    {
      v18 = &v9[(unint64_t)(v15 + 1) >> 9];
      v19 = &(*v18)[8 * (((_WORD)v15 + 1) & 0x1FF)];
    }
    if (v6 == (char *)v9)
    {
      v36 = (char *)v7;
      v35 = v12;
    }
    else
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ProfileEvent *,std::__deque_iterator<ProfileEvent,ProfileEvent *,ProfileEvent&,ProfileEvent **,long,512l>,0>(&v50, *v9, v10, v18, v19);
      v25 = v51;
      v26 = v52;
      v27 = (char *)(v11 - 1);
      if (v11 - 1 != (char **)v6)
      {
        v28 = *v51;
        do
        {
          v29 = *(_BYTE **)v27;
          v30 = (char *)(*(_QWORD *)v27 + 4096);
          while (1)
          {
            v31 = v26 - v28;
            if ((v30 - v29) >> 3 >= v31 >> 3)
              v32 = v31 >> 3;
            else
              v32 = (v30 - v29) >> 3;
            v30 -= 8 * v32;
            v26 -= 8 * v32;
            if (v32)
              memmove(v26, v30, 8 * v32);
            if (v30 == v29)
              break;
            v33 = *--v25;
            v28 = v33;
            v26 = v33 + 4096;
          }
          v28 = *v25;
          if (*v25 + 4096 == v26)
          {
            v34 = v25[1];
            ++v25;
            v28 = v34;
            v26 = v34;
          }
          v27 -= 8;
        }
        while (v27 != v6);
      }
      v35 = (char *)(*(_QWORD *)v6 + 4096);
      v36 = (char *)v7;
      v18 = v25;
      v19 = v26;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ProfileEvent *,std::__deque_iterator<ProfileEvent,ProfileEvent *,ProfileEvent&,ProfileEvent **,long,512l>,0>(&v50, v36, v35, v18, v19);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_4A4EE0);
    std::deque<ProfileEvent>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)a1);
  }
  else
  {
    if (v14 < -7)
    {
      v20 = 510 - v15;
      v16 = ~(_WORD)v20;
      v17 = &v9[-(v20 >> 9)];
    }
    else
    {
      v16 = v15 + 1;
      v17 = &v9[(unint64_t)(v15 + 1) >> 9];
    }
    v21 = &(*v17)[8 * (v16 & 0x1FF)];
    v22 = a1[2].i64[0] + v13;
    v23 = (char **)(v4 + 8 * (v22 >> 9));
    if (v5 == v4)
      v24 = 0;
    else
      v24 = (uint64_t)&(*v23)[8 * (v22 & 0x1FF)];
    if (v17 == v23)
    {
      v47 = (_BYTE *)v24;
      v48 = v9;
      v49 = v12;
    }
    else
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v50, v21, *v17 + 4096, v9, v12);
      v37 = v51;
      v38 = v52;
      v39 = v17 + 1;
      if (v17 + 1 != v23)
      {
        v40 = *v51;
        do
        {
          v41 = 0;
          v42 = *v39;
          while (1)
          {
            v43 = v40 - v38 + 4096;
            if ((4096 - 8 * v41) >> 3 >= v43 >> 3)
              v44 = v43 >> 3;
            else
              v44 = (4096 - 8 * v41) >> 3;
            if (v44)
              memmove(v38, &v42[8 * v41], 8 * v44);
            v41 += v44;
            if (v41 == 512)
              break;
            v45 = v37[1];
            ++v37;
            v40 = v45;
            v38 = v45;
          }
          v38 += 8 * v44;
          v40 = *v37;
          if (*v37 + 4096 == v38)
          {
            v46 = v37[1];
            ++v37;
            v40 = v46;
            v38 = v46;
          }
          ++v39;
        }
        while (v39 != v23);
      }
      v21 = *v23;
      v47 = (_BYTE *)v24;
      v48 = v37;
      v49 = v38;
    }
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ProfileEvent const*,ProfileEvent const*,std::__deque_iterator<ProfileEvent,ProfileEvent*,ProfileEvent&,ProfileEvent**,long,512l>,0>(&v50, v21, v47, v48, v49);
    --a1[2].i64[1];
    std::deque<ProfileEvent>::__maybe_remove_back_spare[abi:nn180100](a1);
  }
}

double std::__introsort<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, double result)
{
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;
  unsigned int v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  BOOL v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  unsigned int v48;
  unsigned int v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  BOOL v57;
  uint64_t v58;
  _DWORD *v59;
  _OWORD *v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  _OWORD *v105;
  unsigned int v106;
  int v107;
  _OWORD *v108;
  __int128 v109;
  unsigned int v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

__int128 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(__int128 *result, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v3 = *((_DWORD *)a2 + 8);
  v4 = *((_DWORD *)a3 + 8);
  if (v3 >= *((_DWORD *)result + 8))
  {
    if (v4 < v3)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = *((_QWORD *)a2 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = a3[1];
      *a2 = *a3;
      a2[1] = v14;
      *((_QWORD *)a2 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      *a3 = v10;
      a3[1] = v11;
      if (*((_DWORD *)a2 + 8) < *((_DWORD *)result + 8))
      {
        v15 = *result;
        v16 = result[1];
        v17 = *((_QWORD *)result + 4);
        v18 = *((_QWORD *)a2 + 4);
        v19 = a2[1];
        *result = *a2;
        result[1] = v19;
        *((_QWORD *)result + 4) = v18;
        *((_QWORD *)a2 + 4) = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v20 = *result;
      v21 = result[1];
      v22 = *((_QWORD *)result + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = a2[1];
      *result = *a2;
      result[1] = v24;
      *((_QWORD *)result + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      *a2 = v20;
      a2[1] = v21;
      if (*((_DWORD *)a3 + 8) >= *((_DWORD *)a2 + 8))
        return result;
      v5 = *a2;
      v6 = a2[1];
      v7 = *((_QWORD *)a2 + 4);
      v25 = *((_QWORD *)a3 + 4);
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      *((_QWORD *)a2 + 4) = v25;
    }
    else
    {
      v5 = *result;
      v6 = result[1];
      v7 = *((_QWORD *)result + 4);
      v8 = *((_QWORD *)a3 + 4);
      v9 = a3[1];
      *result = *a3;
      result[1] = v9;
      *((_QWORD *)result + 4) = v8;
    }
    *((_QWORD *)a3 + 4) = v7;
    *a3 = v5;
    a3[1] = v6;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 32) < *(_DWORD *)(a3 + 32))
  {
    result = *(__n128 *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = *(_QWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    if (*(_DWORD *)(a3 + 32) < *(_DWORD *)(a2 + 32))
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(_QWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)(a2 + 32) < *(_DWORD *)(a1 + 32))
      {
        result = *(__n128 *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)(a5 + 32) < *(_DWORD *)(a4 + 32))
  {
    result = *(__n128 *)a4;
    v11 = *(_OWORD *)(a4 + 16);
    v12 = *(_QWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a5 + 32);
    v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(_QWORD *)(a4 + 32) = v13;
    *(_QWORD *)(a5 + 32) = v12;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (*(_DWORD *)(a4 + 32) < *(_DWORD *)(a3 + 32))
    {
      result = *(__n128 *)a3;
      v15 = *(_OWORD *)(a3 + 16);
      v16 = *(_QWORD *)(a3 + 32);
      v17 = *(_QWORD *)(a4 + 32);
      v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(_QWORD *)(a3 + 32) = v17;
      *(_QWORD *)(a4 + 32) = v16;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(_DWORD *)(a3 + 32) < *(_DWORD *)(a2 + 32))
      {
        result = *(__n128 *)a2;
        v19 = *(_OWORD *)(a2 + 16);
        v20 = *(_QWORD *)(a2 + 32);
        v21 = *(_QWORD *)(a3 + 32);
        v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(_QWORD *)(a2 + 32) = v21;
        *(_QWORD *)(a3 + 32) = v20;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v19;
        if (*(_DWORD *)(a2 + 32) < *(_DWORD *)(a1 + 32))
        {
          result = *(__n128 *)a1;
          v23 = *(_OWORD *)(a1 + 16);
          v24 = *(_QWORD *)(a1 + 32);
          v25 = *(_QWORD *)(a2 + 32);
          v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(_QWORD *)(a1 + 32) = v25;
          *(_QWORD *)(a2 + 32) = v24;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 32))
      {
        v6 = *(_OWORD *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(_QWORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_DWORD *)(v12 + 32);
    if (v15 < *(_DWORD *)(v11 + 32))
    {
      v21 = *(_OWORD *)v12;
      v22 = *(_OWORD *)(v12 + 16);
      v16 = *(_DWORD *)(v12 + 36);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_QWORD *)(v18 + 152) = *(_QWORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(_DWORD *)(v18 + 72))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_OWORD *)v20 = v21;
      *(_OWORD *)(v20 + 16) = v22;
      *(_DWORD *)(v20 + 32) = v15;
      *(_DWORD *)(v20 + 36) = v16;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<ProfileEvent *,std::__deque_iterator<ProfileEvent,ProfileEvent *,ProfileEvent&,ProfileEvent **,long,512l>,0>(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a2) >> 3;
      v11 -= 8 * v13;
      a5 -= 8 * v13;
      if (v13)
        result = memmove(a5, v11, 8 * v13);
      if (v11 == a2)
        break;
      v14 = *--v6;
      v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void std::vector<std::vector<ProfileEvent>>::resize(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  v4 = (uint64_t)v2 - *(_QWORD *)a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  if (v5 <= 0x11)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v2) >> 3) >= 18 - v5)
    {
      bzero(*(void **)(a1 + 8), 24 * ((408 - v4) / 0x18uLL) + 24);
      *(_QWORD *)(a1 + 8) = &v2[3 * ((408 - v4) / 0x18uLL) + 3];
      return;
    }
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v3) >> 3);
    v8 = 0x5555555555555556 * ((v6 - (uint64_t)v3) >> 3);
    if (v8 <= 0x12)
      v8 = 18;
    if (v7 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v8;
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = 3 * v9;
    v11 = (char *)operator new(24 * v9);
    v12 = &v11[8 * (v4 >> 3)];
    v13 = &v11[8 * v10];
    v14 = 24 * ((408 - v4) / 0x18uLL) + 24;
    bzero(v12, v14);
    v15 = &v12[v14];
    if (v2 == v3)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v13;
      if (!v2)
        return;
    }
    else
    {
      do
      {
        v16 = v12;
        *((_QWORD *)v12 - 1) = 0;
        v17 = *(_OWORD *)(v2 - 3);
        v2 -= 3;
        *(_OWORD *)(v12 - 24) = v17;
        v12 -= 24;
        *((_QWORD *)v16 - 1) = v2[2];
        *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      while (v2 != v3);
      v18 = *(_QWORD **)a1;
      v2 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v13;
      if (v2 != v18)
      {
        v19 = v2;
        do
        {
          v21 = (void *)*(v19 - 3);
          v19 -= 3;
          v20 = v21;
          if (v21)
          {
            *(v2 - 2) = v20;
            operator delete(v20);
          }
          v2 = v19;
        }
        while (v19 != v18);
        v2 = v18;
      }
      if (!v2)
        return;
    }
    operator delete(v2);
    return;
  }
  if (v4 != 432)
  {
    v22 = v3 + 54;
    if (v2 != v3 + 54)
    {
      v23 = *(_QWORD **)(a1 + 8);
      do
      {
        v25 = (void *)*(v23 - 3);
        v23 -= 3;
        v24 = v25;
        if (v25)
        {
          *(v2 - 2) = v24;
          operator delete(v24);
        }
        v2 = v23;
      }
      while (v23 != v22);
    }
    *(_QWORD *)(a1 + 8) = v22;
  }
}

void std::vector<std::vector<std::unique_ptr<std::vector<double>>>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  void **v21;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[24 * v5];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v3 - 24);
        v3 -= 24;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = *((_QWORD *)v3 + 2);
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v3 + 1) = 0;
        *((_QWORD *)v3 + 2) = 0;
      }
      while (v3 != v4);
      v19 = *a1;
      v3 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v3 != v19)
      {
        do
        {
          v3 -= 24;
          v21 = (void **)v3;
          std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](&v21);
        }
        while (v3 != v19);
        v3 = v19;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v20 = &v4[24 * a2];
    while (v3 != v20)
    {
      v3 -= 24;
      v21 = (void **)v3;
      std::vector<std::unique_ptr<std::vector<double>>>::__destroy_vector::operator()[abi:nn180100](&v21);
    }
    a1[1] = v20;
  }
}

int64x2_t *std::vector<std::unique_ptr<std::vector<double>>>::reserve(int64x2_t *result)
{
  uint64_t v1;
  char *v2;
  int64x2_t *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  int64x2_t *v13;

  v1 = result[1].i64[0];
  v2 = (char *)result->i64[0];
  if ((unint64_t)(v1 - result->i64[0]) <= 0x9F)
  {
    v3 = result;
    v4 = (char *)result->i64[1];
    v13 = result + 1;
    v5 = (char *)operator new(0xA0uLL);
    v6 = &v5[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == v2)
    {
      v9 = vdupq_n_s64((unint64_t)v4);
      v7 = &v5[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v7 = &v5[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v8 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v7 - 1) = v8;
        v7 -= 8;
      }
      while (v4 != v2);
      v9 = *v3;
      v1 = v3[1].i64[0];
    }
    v3->i64[0] = (uint64_t)v7;
    v3->i64[1] = (uint64_t)v6;
    v11 = v9;
    v3[1].i64[0] = (uint64_t)(v5 + 160);
    v12 = v1;
    v10 = v9.i64[0];
    return (int64x2_t *)std::__split_buffer<std::unique_ptr<std::vector<double>>>::~__split_buffer((uint64_t)&v10);
  }
  return result;
}

void sub_27A724(uint64_t a1, ...)
{
  id *v1;
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a1);
  std::vector<std::vector<DYMTLEncoderInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);

  operator delete();
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::pair<ShaderBinaryStatsInfo *,std::string>>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unique_ptr<ShaderBinaryStatsInfo>>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  id *v2;

  if (a1)
  {
    v2 = (id *)__p[3];
    __p[3] = 0;
    if (v2)
      std::default_delete<ShaderBinaryStatsInfo>::operator()[abi:nn180100](v2);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__split_buffer<std::pair<ShaderBinaryStatsInfo *,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<ProfileEvent>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = (uint64_t *)(*(_QWORD *)v7 + 8 * (v4 & 0x1FF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = *(_QWORD *)v10 + 8 * (v9 & 0x1FF);
  }
  if ((uint64_t *)v11 == v8)
    v12 = 0;
  else
    v12 = ((v11 - *(_QWORD *)v10) >> 3) + ((v10 - v7) << 6) - (((uint64_t)v8 - *(_QWORD *)v7) >> 3);
  std::deque<ProfileEvent>::__append_with_size[abi:nn180100]<std::__deque_iterator<ProfileEvent,ProfileEvent const*,ProfileEvent const&,ProfileEvent const* const*,long,512l>>((_QWORD *)a1, v7, v8, v12);
  return a1;
}

void sub_27A968(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<ProfileEvent *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void sub_27B010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a15);
  std::deque<ProfileEvent>::~deque[abi:nn180100](&a21);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a27);
  std::deque<ProfileEvent>::~deque[abi:nn180100]((_QWORD *)(v27 - 144));
  _Unwind_Resume(a1);
}

void sub_27B9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  uint64_t v24;

  if (v23)
    operator delete(v23);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a17);
  std::deque<ProfileEvent>::~deque[abi:nn180100](&a23);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v24 - 128);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[DYPMTLShaderProfilerHelper _processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:]::$_1::operator() const(std::queue<ProfileEvent>)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 32))
      {
        v6 = *(_OWORD *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(_QWORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      v21 = (__int128 *)(a1 + 40);
      v22 = (__int128 *)(a1 + 80);
      v23 = (__int128 *)(a1 + 120);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>(a1, a1 + 40, a1 + 80, a1 + 120);
      if (*(_DWORD *)(a2 - 8) >= *(_DWORD *)(a1 + 152))
        return 1;
      v24 = *v23;
      v25 = *(_OWORD *)(a1 + 136);
      v26 = *(_QWORD *)(a1 + 152);
      v27 = *(_QWORD *)(a2 - 8);
      v28 = *(_OWORD *)(a2 - 24);
      *v23 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v28;
      *(_QWORD *)(a1 + 152) = v27;
      *(_QWORD *)(a2 - 8) = v26;
      *(_OWORD *)(a2 - 24) = v25;
      *(_OWORD *)(a2 - 40) = v24;
      if (*(_DWORD *)(a1 + 152) >= *(_DWORD *)(a1 + 112))
        return 1;
      v29 = *(_QWORD *)(a1 + 112);
      v31 = *v22;
      v30 = *(_OWORD *)(a1 + 96);
      v32 = *(_OWORD *)(a1 + 136);
      *v22 = *v23;
      *(_OWORD *)(a1 + 96) = v32;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 152);
      *v23 = v31;
      *(_OWORD *)(a1 + 136) = v30;
      *(_QWORD *)(a1 + 152) = v29;
      if (*(_DWORD *)(a1 + 112) >= *(_DWORD *)(a1 + 72))
        return 1;
      v33 = *(_QWORD *)(a1 + 72);
      v35 = *v21;
      v34 = *(_OWORD *)(a1 + 56);
      v36 = *(_OWORD *)(a1 + 96);
      *v21 = *v22;
      *(_OWORD *)(a1 + 56) = v36;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v22 = v35;
      *(_OWORD *)(a1 + 96) = v34;
      *(_QWORD *)(a1 + 112) = v33;
      if (*(_DWORD *)(a1 + 72) >= *(_DWORD *)(a1 + 32))
        return 1;
      v37 = *(_QWORD *)(a1 + 32);
      v39 = *(_OWORD *)a1;
      v38 = *(_OWORD *)(a1 + 16);
      v40 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v40;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v21 = v39;
      *(_OWORD *)(a1 + 56) = v38;
      result = 1;
      *(_QWORD *)(a1 + 72) = v37;
      return result;
    default:
      v11 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ProfileEventHelper::ProcessQueue(void)::{lambda(ShaderProfilerUSCSampleInfo const&,ShaderProfilerUSCSampleInfo&)#1} &,ShaderProfilerUSCSampleInfo*>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_DWORD *)(v12 + 32);
    if (v15 < *(_DWORD *)(v11 + 32))
    {
      v41 = *(_OWORD *)v12;
      v42 = *(_OWORD *)(v12 + 16);
      v16 = *(_DWORD *)(v12 + 36);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_QWORD *)(v18 + 152) = *(_QWORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(_DWORD *)(v18 + 72))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(_OWORD *)v20 = v41;
      *(_OWORD *)(v20 + 16) = v42;
      *(_DWORD *)(v20 + 32) = v15;
      *(_DWORD *)(v20 + 36) = v16;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

GTMTLReplayRasterMapQuery *GTMTLReplayClient_queryRasterMap(uint64_t a1, uint64_t a2, void **a3)
{
  void *v3;
  void *v4;
  void *v6;
  id v7;
  unint64_t v8;
  id v9;
  double v10;
  double v11;
  unint64_t v12;
  void *v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  unint64_t v18;
  int v19;
  double v20;
  void *v21;
  void *v22;
  GTMTLReplayRasterMapLayerQuery *v23;
  GTMTLReplayRasterMapQuery *v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSErrorUserInfoKey v37;
  const __CFString *v38;

  if (a1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "rasterizationRateMapForKey:", a2));
    v4 = v3;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    if (v3)
    {
      objc_msgSend(v3, "screenSize");
      v32 = 0uLL;
      v33 = 0;
      objc_msgSend(v4, "physicalGranularity");
    }
    else
    {
      v32 = 0uLL;
      v33 = 0;
    }
    v7 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v4, "layerCount"));
    if (objc_msgSend(v4, "layerCount"))
    {
      v8 = 0;
      do
      {
        v30 = 0uLL;
        v31 = 0;
        if (v4)
          objc_msgSend(v4, "physicalSizeForLayer:", v8);
        v9 = objc_alloc_init((Class)NSMutableArray);
        if ((_QWORD)v30)
        {
          v12 = 0;
          do
          {
            *(float *)&v10 = (float)v12;
            LODWORD(v11) = 0;
            objc_msgSend(v4, "mapPhysicalToScreenCoordinates:forLayer:", v8, v10, v11);
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"));
            objc_msgSend(v9, "addObject:", v13);

            v12 += v32;
          }
          while (v12 < (unint64_t)v30);
        }
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v34));
        objc_msgSend(v9, "addObject:", v14);

        v15 = objc_alloc_init((Class)NSMutableArray);
        if (*((_QWORD *)&v30 + 1))
        {
          v18 = 0;
          do
          {
            *(float *)&v17 = (float)v18;
            LODWORD(v16) = 0;
            objc_msgSend(v4, "mapPhysicalToScreenCoordinates:forLayer:", v8, v16, v17);
            LODWORD(v20) = v19;
            v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20));
            objc_msgSend(v15, "addObject:", v21);

            v18 += *((_QWORD *)&v32 + 1);
          }
          while (v18 < *((_QWORD *)&v30 + 1));
        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v35));
        objc_msgSend(v15, "addObject:", v22);

        v23 = objc_alloc_init(GTMTLReplayRasterMapLayerQuery);
        v28 = v30;
        v29 = 0;
        -[GTMTLReplayRasterMapLayerQuery setSize:](v23, "setSize:", &v28);
        -[GTMTLReplayRasterMapLayerQuery setHorizontalLogicalCoordinatesAtPhysicalTileBoundaries:](v23, "setHorizontalLogicalCoordinatesAtPhysicalTileBoundaries:", v9);
        -[GTMTLReplayRasterMapLayerQuery setVerticalLogicalCoordinatesAtPhysicalTileBoundaries:](v23, "setVerticalLogicalCoordinatesAtPhysicalTileBoundaries:", v15);
        objc_msgSend(v7, "setObject:atIndexedSubscript:", v23, v8);

        ++v8;
      }
      while (v8 < (unint64_t)objc_msgSend(v4, "layerCount"));
    }
    v24 = objc_alloc_init(GTMTLReplayRasterMapQuery);
    v26 = v32;
    v27 = v33;
    -[GTMTLReplayRasterMapQuery setPhysicalGranularity:](v24, "setPhysicalGranularity:", &v26);
    -[GTMTLReplayRasterMapQuery setLayers:](v24, "setLayers:", v7);

  }
  else
  {
    v37 = NSLocalizedDescriptionKey;
    v38 = CFSTR("Raster map query failed: controller not initialized");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
    GTMTLReplay_fillError(a3, 101, v4);
    if (a3)
      v6 = *a3;
    else
      v6 = 0;
    GTMTLReplay_handleNSError(v6);
    v24 = 0;
  }

  return v24;
}

void *HarvestResourceObject(id *a1, apr_pool_t *a2, void *a3, unsigned int ***a4, void **a5)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  NSObject *v22;
  _DWORD *v23;
  NSObject *v24;
  apr_allocator_t *v25;
  uint64_t *AliasStream;
  uint64_t v27;
  id v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t *v33;
  id v34;
  NSObject *v35;
  void *v36;
  id v37;
  NSObject *v38;
  FILE *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  apr_hash_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  NSErrorUserInfoKey v59;
  id v60;
  NSString *v61;
  int v62;
  FILE *v63;
  GTMTLReplayRasterMapQuery *RasterMap;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *i;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  NSObject *v90;
  apr_hash_t *v91;
  id v92;
  NSObject *v93;
  id v94;
  NSObject *v95;
  apr_pool_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  apr_hash_t *v110;
  id v111;
  NSObject *v112;
  void *v113;
  const char *v114;
  FILE *v115;
  const char *v116;
  id v117;
  FILE *v118;
  id v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *Object;
  _QWORD *v126;
  id PostMeshData;
  FILE *v128;
  apr_allocator_t *v129;
  _QWORD *v130;
  unint64_t v131;
  apr_pool_t *v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  apr_array_header_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  void *v141;
  id v142;
  void *v143;
  uint64_t v144;
  apr_hash_index_t *v145;
  apr_hash_index_t *v146;
  apr_hash_index_t *v147;
  uint64_t v148;
  _QWORD *v149;
  void *v150;
  id v151;
  void *v152;
  uint64_t v153;
  apr_hash_index_t *v154;
  apr_hash_index_t *v155;
  apr_hash_index_t *v156;
  uint64_t v157;
  _QWORD *v158;
  void *v159;
  id v160;
  void *v161;
  apr_array_header_t *v162;
  uint64_t nelts;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  apr_hash_index_t *v171;
  apr_hash_index_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  apr_hash_index_t *v177;
  apr_hash_index_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  char *elts;
  int v183;
  int elt_size;
  id v185;
  uint64_t v186;
  uint64_t *v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  uint64_t v193;
  char *v194;
  void *v195;
  void *v196;
  id v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  id v203;
  id MTLIndirectCommandBufferDescriptorWithoutResourceIndex;
  void *v205;
  id v206;
  void *v207;
  char *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  id v213;
  unsigned int *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  FILE *v218;
  id *v219;
  id v220;
  uint64_t v221;
  FILE *v222;
  id v223;
  FILE *v224;
  id v225;
  id v226;
  id v227;
  void *v228;
  id v229;
  id v230;
  id MTLTextureDescriptorFromTextureWithoutResourceIndex;
  void *v232;
  void *v233;
  apr_hash_t *v234;
  apr_hash_t *v235;
  char v236;
  void *v237;
  uint64_t v238;
  void *v239;
  void *v240;
  id v241;
  void *v242;
  int v243;
  void *v244;
  void *v245;
  id v246;
  void *v247;
  apr_hash_t *v248;
  void *v249;
  void *v250;
  unint64_t v251;
  id v252;
  void *v253;
  void *v254;
  void *v255;
  id v256;
  void *v257;
  id v258;
  id v259;
  void *v260;
  id v261;
  void *v262;
  void *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  id v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  id v273;
  id NSError;
  void *v275;
  void *v276;
  unsigned int *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int *v280;
  id v282;
  void *v283;
  id v284;
  void *v285;
  id v286;
  void *v287;
  id v288;
  void *v289;
  id v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  id v295;
  id v296;
  void *v297;
  id v298;
  NSObject *v299;
  void *v300;
  const char *v301;
  FILE *v302;
  const char *v303;
  id v304;
  void *v305;
  void *v306;
  void *v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  id v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  apr_array_header_t *v318;
  unint64_t v319;
  unint64_t v320;
  char v321;
  char *v322;
  char *v323;
  id v324;
  void *v325;
  uint64_t v326;
  unint64_t v327;
  apr_array_header_t *v328;
  int v329;
  uint64_t v330;
  void *v331;
  apr_array_header_t *v332;
  apr_array_header_t *v333;
  uint64_t v334;
  unint64_t v335;
  char v336;
  char *v337;
  int v338;
  int v339;
  unsigned int v340;
  _QWORD *v341;
  const char *v342;
  uint64_t v343;
  uint64_t *v344;
  char *v345;
  const char *v346;
  unsigned __int8 v347;
  char *v348;
  _QWORD *v349;
  char *v350;
  char *v351;
  apr_pool_t *v352;
  char *v353;
  _QWORD *v354;
  const char *v355;
  char v356;
  NSString *v357;
  void *v358;
  id v359;
  apr_pool_t *v360;
  apr_pool_t *v361;
  id v362;
  id v363;
  int v364;
  id v365;
  uint64_t v366;
  id v367;
  void *v368;
  void *v369;
  NSString *v370;
  void *v371;
  void *v372;
  void *v373;
  void *v374;
  id v375;
  id v376;
  void *v377;
  void *v378;
  id v379;
  id v380;
  unsigned int v381;
  char *v382;
  char *v383;
  unint64_t v384;
  BOOL v385;
  unint64_t v386;
  id v387;
  NSObject *v388;
  void *v389;
  const char *v390;
  FILE *v391;
  const char *v392;
  id v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  char *v398;
  unint64_t v399;
  NSString *v400;
  uint64_t **v401;
  apr_pool_t *v402;
  apr_pool_t *v403;
  uint64_t v404;
  uint64_t v405;
  id v406;
  uint64_t v407;
  void *v408;
  id v409;
  apr_hash_t *v411;
  apr_hash_t *v412;
  id v413;
  uint64_t v414;
  id v415;
  void *v416;
  void *v417;
  apr_hash_t *ht;
  apr_hash_t *htc;
  apr_hash_t *hta;
  apr_hash_t *htb;
  void *v423;
  char *obj;
  id obja;
  apr_pool_t *p;
  apr_pool_t *pa;
  apr_pool_t *pb;
  apr_pool_t *pc;
  apr_pool_t *pd;
  apr_pool_t *pe;
  id v432[11];
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  _QWORD v442[5];
  _QWORD v443[5];
  _QWORD v444[5];
  _QWORD v445[5];
  _QWORD v446[5];
  _QWORD v447[5];
  _QWORD v448[5];
  _QWORD v449[5];
  _QWORD v450[5];
  _QWORD v451[4];
  id v452;
  void *v453;
  void *v454;
  void *v455;
  void *v456;
  void *v457;
  void *v458;
  void *v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  _QWORD v463[2];
  _QWORD v464[2];
  _QWORD v465[3];
  _QWORD v466[2];
  _QWORD v467[2];
  _QWORD v468[2];
  _QWORD v469[3];
  _QWORD v470[3];
  _BYTE v471[128];
  _QWORD v472[2];
  void *v473;
  NSErrorUserInfoKey v474;
  void *v475;
  NSErrorUserInfoKey v476;
  void *v477;
  NSErrorUserInfoKey v478;
  void *v479;
  apr_hash_t *v480;
  void *v481;
  const __CFString *v482;
  void *v483;
  id v484;
  NSErrorUserInfoKey v485;
  id v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  _BYTE __dst[11096];
  _OWORD v504[694];
  apr_pool_t *v505[2];
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  NSErrorUserInfoKey v521;
  NSErrorUserInfoKey v522;

  v7 = a3;
  objc_msgSend((id)g_activityLog, "enterHarvestResourceObjectWithAttributes:", v7);
  v423 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("requestID")));
  v413 = objc_msgSend(v8, "unsignedLongLongValue");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("streamref")));
  v414 = (uint64_t)objc_msgSend(v9, "unsignedLongLongValue");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("type")));
  v11 = objc_msgSend(v10, "unsignedIntValue");

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("object")));
  obj = (char *)objc_msgSend(v12, "unsignedLongLongValue");

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("functionIndex")));
  v14 = objc_msgSend(v13, "unsignedIntValue");

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("functionIndex")));
  v16 = (unint64_t)objc_msgSend(v15, "unsignedLongLongValue");

  v417 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("resolution")));
  v416 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("objectThreadgroupRange")));
  objc_msgSend((*a4)[2], "appendBytes:length:", "MTSP", 8);
  v460 = 0u;
  v461 = 0u;
  v462 = 0u;
  DWORD2(v460) = 7;
  LODWORD(v461) = 2;
  DYTraceEncode_InternalData((uint64_t)&v460, **a4);
  v17 = **a4;
  v18 = *v17;
  if ((*((_BYTE *)v17 + 33) & 0x10) != 0)
  {
    v20 = **a4;
    v19 = *v17;
    do
    {
      v20 = (unsigned int *)((char *)v20 + v18);
      v18 = *v20;
      v19 += v18;
    }
    while ((*((_BYTE *)v20 + 33) & 0x20) == 0);
  }
  else
  {
    v19 = *v17;
  }
  objc_msgSend((*a4)[2], "appendBytes:length:", v17, v19);
  v21 = HIDWORD(v16);
  v22 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    LODWORD(v504[0]) = 67109120;
    DWORD1(v504[0]) = v14;
    _os_signpost_emit_with_name_impl(&dword_0, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "debugFuncStop %u", (uint8_t *)v504, 8u);
  }
  GTMTLReplayController_debugSubCommandStop((uint64_t)a1, v14, v21);
  v23 = a1 + 2810;
  v24 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    LOWORD(v504[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_0, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4AAB5F, (uint8_t *)v504, 2u);
  }
  if ((int)v11 > 21)
  {
    if ((_DWORD)v11 != 22)
    {
      if ((_DWORD)v11 != 24)
      {
        if ((_DWORD)v11 == 39)
        {
          ht = (apr_hash_t *)a1[1];
          AliasStream = (uint64_t *)GetAliasStream(*((_QWORD *)*a1 + 3), (uint64_t)obj, *((_QWORD *)*a1 + 10) + v14 - 1);
          if (AliasStream)
            v27 = *AliasStream;
          else
            v27 = 0;
          if (s_logUsingOsLog)
          {
            v37 = gt_tagged_log(1uLL);
            v38 = objc_claimAutoreleasedReturnValue(v37);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              LODWORD(v504[0]) = 134217984;
              *(_QWORD *)((char *)v504 + 4) = v27;
              _os_log_impl(&dword_0, v38, OS_LOG_TYPE_INFO, "Harvesting rasterization rate map %llu", (uint8_t *)v504, 0xCu);
            }
          }
          else
          {
            v63 = __stdoutp;
            v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting rasterization rate map %llu"), v27)));
            fprintf(v63, "%s\n", (const char *)-[NSObject UTF8String](v38, "UTF8String"));
          }

          RasterMap = GTMTLReplayClient_queryRasterMap((uint64_t)a1, v27, a5);
          v65 = (void *)objc_claimAutoreleasedReturnValue(RasterMap);
          if (!v65)
          {
            GTMTLReplay_fillError(a5, 101, &__NSDictionary0__struct);
            if (a5)
              v88 = *a5;
            else
              v88 = 0;
            GTMTLReplay_handleNSError(v88);
            v36 = 0;
            goto LABEL_238;
          }
          pa = (apr_pool_t *)objc_alloc_init((Class)NSMutableArray);
          v440 = 0u;
          v441 = 0u;
          v438 = 0u;
          v439 = 0u;
          v408 = v65;
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "layers"));
          v67 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v438, v471, 16);
          if (v67)
          {
            v68 = *(_QWORD *)v439;
            obja = v66;
            do
            {
              for (i = 0; i != v67; i = (char *)i + 1)
              {
                if (*(_QWORD *)v439 != v68)
                  objc_enumerationMutation(obja);
                v70 = *(void **)(*((_QWORD *)&v438 + 1) + 8 * (_QWORD)i);
                v469[0] = CFSTR("RasterizationRateLayerPhysicalSize");
                if (v70)
                {
                  objc_msgSend(v70, "size");
                  v71 = v435;
                }
                else
                {
                  v71 = 0;
                  v435 = 0;
                  v436 = 0;
                  v437 = 0;
                }
                v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v71));
                v468[0] = v72;
                if (v70)
                {
                  objc_msgSend(v70, "size");
                  v73 = v433;
                }
                else
                {
                  v73 = 0;
                  v432[10] = 0;
                  v433 = 0;
                  v434 = 0;
                }
                v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v73));
                v468[1] = v74;
                v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v468, 2));
                v470[0] = v75;
                v469[1] = CFSTR("RasterizationRateLayerHorizontalLogicalCoordinatesAtPhysicalTileBoundaries");
                v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "horizontalLogicalCoordinatesAtPhysicalTileBoundaries"));
                v470[1] = v76;
                v469[2] = CFSTR("RasterizationRateLayerVerticalLogicalCoordinatesAtPhysicalTileBoundaries");
                v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "verticalLogicalCoordinatesAtPhysicalTileBoundaries"));
                v470[2] = v77;
                v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v470, v469, 3));
                -[apr_pool_t addObject:](pa, "addObject:", v78);

              }
              v66 = obja;
              v67 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v438, v471, 16);
            }
            while (v67);
          }

          v466[0] = CFSTR("RasterizationRateMapPhysicalGranularity");
          objc_msgSend(v408, "physicalGranularity");
          v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v432[7]));
          v465[0] = v79;
          objc_msgSend(v408, "physicalGranularity");
          v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v432[5]));
          v465[1] = v80;
          objc_msgSend(v408, "physicalGranularity");
          v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v432[3]));
          v465[2] = v81;
          v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v465, 3));
          v466[1] = CFSTR("RasterizationRateLayers");
          v467[0] = v82;
          v467[1] = pa;
          v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v467, v466, 2));
          v432[0] = 0;
          v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v83, 0, v432));
          v85 = v432[0];
          objc_msgSend(a4[1], "setObject:forKeyedSubscript:", v84, CFSTR("MTLRasterizationRateMap-DerivedMetadata"));

          if (v85)
          {
            v463[0] = NSLocalizedDescriptionKey;
            v463[1] = NSUnderlyingErrorKey;
            v464[0] = CFSTR("Serializing MTLRasterizationRateMap-DerivedMetadata failed.");
            v464[1] = v85;
            v86 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v464, v463, 2));
            GTMTLReplay_fillError(a5, 101, v86);
            if (a5)
              v87 = *a5;
            else
              v87 = 0;
            GTMTLReplay_handleNSError(v87);

            goto LABEL_222;
          }

LABEL_211:
          v36 = &dword_0 + 1;
LABEL_223:
          v197 = v408;
LABEL_237:

LABEL_238:
          goto LABEL_239;
        }
        goto LABEL_34;
      }
      v32 = v414;
      if (!v414)
      {
        v33 = (uint64_t *)GetAliasStream(*((_QWORD *)*a1 + 3), (uint64_t)obj, *((_QWORD *)*a1 + 10) + v14 - 1);
        if (v33)
          v32 = *v33;
        else
          v32 = 0;
      }
      ht = (apr_hash_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[1], "indirectCommandBufferForKey:", v32));
      if (s_logUsingOsLog)
      {
        v111 = gt_tagged_log(1uLL);
        v112 = objc_claimAutoreleasedReturnValue(v111);
        if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
        {
          v113 = (void *)objc_claimAutoreleasedReturnValue(-[apr_hash_t label](ht, "label"));
          if (v113)
          {
            v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[apr_hash_t label](ht, "label")));
            v114 = (const char *)-[NSObject UTF8String](v24, "UTF8String");
          }
          else
          {
            v114 = "no label";
          }
          LODWORD(v504[0]) = 134218242;
          *(_QWORD *)((char *)v504 + 4) = v32;
          WORD6(v504[0]) = 2080;
          *(_QWORD *)((char *)v504 + 14) = v114;
          _os_log_impl(&dword_0, v112, OS_LOG_TYPE_INFO, "Harvesting Indirect Command Buffer %llu (%s)", (uint8_t *)v504, 0x16u);
          if (v113)

        }
      }
      else
      {
        v115 = __stdoutp;
        v112 = objc_claimAutoreleasedReturnValue(-[apr_hash_t label](ht, "label"));
        if (v112)
        {
          a2 = (apr_pool_t *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[apr_hash_t label](ht, "label")));
          v116 = (const char *)-[apr_pool_t UTF8String](a2, "UTF8String");
        }
        else
        {
          v116 = "no label";
        }
        v117 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting Indirect Command Buffer %llu (%s)"), v32, v116)));
        fprintf(v115, "%s\n", (const char *)objc_msgSend(v117, "UTF8String"));

        if (v112)
        else
          v112 = 0;
      }

      v202 = GTMTLSMContext_getObject(**((_QWORD **)*a1 + 5), v32, *((_QWORD *)*a1 + 10) + v14 - 1)[13];
      v197 = (id)objc_claimAutoreleasedReturnValue(-[apr_hash_t device](ht, "device"));
      v203 = -[apr_hash_t size](ht, "size");
      MTLIndirectCommandBufferDescriptorWithoutResourceIndex = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex(v202);
      v205 = (void *)objc_claimAutoreleasedReturnValue(MTLIndirectCommandBufferDescriptorWithoutResourceIndex);
      v206 = objc_msgSend(v197, "newIndirectCommandBufferWithDescriptor:maxCommandCount:options:", v205, v203, 0);

      v207 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "blitCommandEncoder"));
      objc_msgSend(v207, "copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:", ht, 0, v203, v206, 0);

      if (v414)
        v208 = (char *)v414;
      else
        v208 = obj;
      v209 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLIndirectCommandBuffer-0x%llx-Fetch"), v208));
      v472[0] = v206;
      v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v202, 24));
      v472[1] = v210;
      v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v472, 2));

      objc_msgSend(a4[1], "setObject:forKeyedSubscript:", v211, v209);
      memset(v504, 0, 112);
      GTMTLCreateIndirectCommandEncoder((uint64_t)v504, v202);
      if (a4[2] && v413)
      {
        v212 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v413));
        objc_msgSend(a4[2], "setObject:forKeyedSubscript:", v212, v209);

      }
      v443[0] = 0;
      v443[1] = v208;
      v213 = objc_retainAutorelease(v209);
      v443[2] = objc_msgSend(v213, "UTF8String");
      v443[3] = 0;
      v443[4] = *((_QWORD *)&v504[6] + 1) * (_QWORD)v203;
      DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v443, **a4);
      v214 = **a4;
      v215 = *v214;
      if ((*((_BYTE *)v214 + 33) & 0x10) != 0)
      {
        v217 = **a4;
        v216 = *v214;
        do
        {
          v217 = (unsigned int *)((char *)v217 + v215);
          v215 = *v217;
          v216 += v215;
        }
        while ((*((_BYTE *)v217 + 33) & 0x20) == 0);
      }
      else
      {
        v216 = *v214;
      }
      objc_msgSend((*a4)[2], "appendBytes:length:", v214, v216);

LABEL_236:
      v36 = &dword_0 + 1;
      goto LABEL_237;
    }
    if (s_logUsingOsLog)
    {
      v30 = gt_tagged_log(1uLL);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        LOWORD(v504[0]) = 0;
        _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "Harvesting threadgroup buffer", (uint8_t *)v504, 2u);
      }
    }
    else
    {
      v39 = __stdoutp;
      v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting threadgroup buffer"))));
      fprintf(v39, "%s\n", (const char *)-[NSObject UTF8String](v31, "UTF8String"));
    }

    GTMTLReplayController_rewind((uint64_t)a1);
    GTMTLReplayController_debugSubCommand((unsigned int *)a1, v14, v21);
    if (*((_DWORD *)a1 + 2828) != 70)
      goto LABEL_227;
    v40 = obj + 1025;
    v41 = (_QWORD)(obj + 1025) << 32;
    v42 = *(unsigned int *)((char *)a1 + (v41 >> 30) + 22064);
    if (!(_DWORD)v42)
      goto LABEL_227;
    if (((_DWORD)obj + 1025) >= 0x1FuLL)
      goto LABEL_227;
    v43 = (uint64_t **)*a1;
    v44 = (apr_hash_t *)*((_QWORD *)*a1 + 10);
    v45 = *v23;
    v46 = *(unsigned int *)((char *)a1 + (v41 >> 30) + 22188);
    v47 = GTMTLReplayController_renderPassDescriptor((uint64_t)a1);
    v48 = *(unsigned __int16 *)(v47 + 814);
    if (!*(_WORD *)(v47 + 814) || (v49 = v47, ht = v44, v50 = *(unsigned __int16 *)(v47 + 812), !*(_WORD *)(v47 + 812)))
    {
LABEL_227:
      NSError = MakeNSError(101, &__NSDictionary0__struct);
      v53 = (id)objc_claimAutoreleasedReturnValue(NSError);
      GTMTLReplay_handleNSError(v53);
      ht = (apr_hash_t *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
      goto LABEL_228;
    }
    v404 = v46;
    v407 = v45;
    v51 = a1[2808];
    v52 = a1[2809];
    v53 = a1[1];
    p = (apr_pool_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "defaultDevice"));
    v415 = a1[3];
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v415, "bufferWithLength:alignment:", ((unint64_t)v51 + (v48 - 1))/ v48* v42* (((unint64_t)v52 + (v50 - 1))/ v50), 1));
    if (v54)
    {
      if ((GT_SUPPORT_0 & 1) != 0)
      {
        v411 = (apr_hash_t *)objc_alloc_init((Class)MTLCompileOptions);
        v505[0] = (apr_pool_t *)CFSTR("THREADGROUP_MEMORY_LENGTH");
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v42));
        *(_QWORD *)__dst = v55;
        v505[1] = (apr_pool_t *)CFSTR("THREADGROUP_MEMORY_INDEX");
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v40));
        *(_QWORD *)&__dst[8] = v56;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", __dst, v505, 2));
        -[apr_hash_t setPreprocessorMacros:](v411, "setPreprocessorMacros:", v57);

        *(_QWORD *)&v487 = 0;
        v58 = -[apr_pool_t newLibraryWithSource:options:error:](p, "newLibraryWithSource:options:error:", CFSTR("#include <metal_stdlib>\nusing namespace metal;\n\nkernel void dumpThreadgroupData(uint2 threadgroupInGrid [[ threadgroup_position_in_grid ]],\n                                uint2 threadgroupsPerGrid [[ threadgroups_per_grid ]],\n                                device uint8_t* threadgroupBufferDump [[ buffer(0) ]],\n                                threadgroup uint8_t* threadgroupData [[ threadgroup(THREADGROUP_MEMORY_INDEX) ]])\n{\n   uint tileIndex = (threadgroupInGrid.y * threadgroupsPerGrid.x) + threadgroupInGrid.x;\n   uint offset = THREADGROUP_MEMORY_LENGTH * tileIndex;\n\n   for (int i = 0; i < THREADGROUP_MEMORY_LENGTH; i++)\n   {\n       threadgroupBufferDump[offset + i] = threadgroupData[i];\n   }\n}\n"),
                v411,
                &v487);
        v402 = (apr_pool_t *)(id)v487;
        if (v58)
        {
          v400 = (NSString *)objc_msgSend(v58, "newFunctionWithName:", CFSTR("dumpThreadgroupData"));
          if (v400)
          {
            v59 = (NSErrorUserInfoKey)objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
            -[NSString setLabel:](v59, "setLabel:", CFSTR("Tile Pipeline for dumping Threadgroup data"));
            -[NSString setTileFunction:](v59, "setTileFunction:", v400);
            FillAttachmentPixelFormats(v49, v43[5], (unint64_t)ht + v407, v59);
            v522 = (NSErrorUserInfoKey)v402;
            v60 = -[apr_pool_t newRenderPipelineStateWithTileDescriptor:error:](p, "newRenderPipelineStateWithTileDescriptor:error:", v59, &v522);
            v61 = v522;

            if (v60)
            {
              v62 = 0;
            }
            else
            {
              v521 = 0;
              GTMTLReplay_fillError(&v521, 101, &__NSDictionary0__struct);
              v370 = v521;
              GTMTLReplay_handleNSError(v370);
              ht = (apr_hash_t *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));

              v60 = 0;
              v62 = 1;
            }
            v402 = (apr_pool_t *)v61;
          }
          else
          {
            v522 = 0;
            GTMTLReplay_fillError(&v522, 101, &__NSDictionary0__struct);
            v59 = v522;
            GTMTLReplay_handleNSError(v59);
            ht = (apr_hash_t *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
            v60 = 0;
            v62 = 1;
          }

        }
        else
        {
          v522 = 0;
          GTMTLReplay_fillError(&v522, 101, &__NSDictionary0__struct);
          v400 = v522;
          GTMTLReplay_handleNSError(v400);
          ht = (apr_hash_t *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
          v60 = 0;
          v62 = 1;
        }

        if (v62)
          goto LABEL_341;
        v371 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "renderCommandEncoderForKey:", a1[1415]));
        objc_msgSend(v371, "pushDebugGroup:", CFSTR("Dump Tile Threadgroup Data"));
        objc_msgSend(v371, "setRenderPipelineState:", v60);
        v372 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "heapBuffer"));
        objc_msgSend(v371, "setTileBuffer:offset:atIndex:", v372, objc_msgSend(v54, "heapLocation"), 0);

        objc_msgSend(v371, "setThreadgroupMemoryLength:offset:atIndex:", v42, v404, (int)v40);
        v504[0] = vdupq_n_s64(1uLL);
        *(_QWORD *)&v504[1] = 1;
        objc_msgSend(v371, "dispatchThreadsPerTile:", v504);
        objc_msgSend(v371, "popDebugGroup");

      }
      ht = (apr_hash_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "data"));
      goto LABEL_344;
    }
    v282 = MakeNSError(101, &__NSDictionary0__struct);
    v60 = (id)objc_claimAutoreleasedReturnValue(v282);
    GTMTLReplay_handleNSError(v60);
    ht = (apr_hash_t *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
LABEL_341:

LABEL_344:
LABEL_228:

    objc_msgSend(a1[1], "commitCommandBuffers");
    v275 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLBuffer-0x%llx-Fetch"), obj));
    objc_msgSend(a4[1], "setObject:forKeyedSubscript:", ht, v275);
    if (a4[2] && v413)
    {
      v276 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v413));
      objc_msgSend(a4[2], "setObject:forKeyedSubscript:", v276, v275);

    }
    v442[0] = 0;
    v442[1] = obj;
    v197 = objc_retainAutorelease(v275);
    v442[2] = objc_msgSend(v197, "UTF8String");
    v442[3] = 0;
    v442[4] = -[apr_hash_t length](ht, "length");
    DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v442, **a4);
    v277 = **a4;
    v278 = *v277;
    if ((*((_BYTE *)v277 + 33) & 0x10) != 0)
    {
      v280 = **a4;
      v279 = *v277;
      do
      {
        v280 = (unsigned int *)((char *)v280 + v278);
        v278 = *v280;
        v279 += v278;
      }
      while ((*((_BYTE *)v280 + 33) & 0x20) == 0);
    }
    else
    {
      v279 = *v277;
    }
    objc_msgSend((*a4)[2], "appendBytes:length:", v277, v279);
    goto LABEL_236;
  }
  if ((_DWORD)v11 == 1)
  {
    if (obj == (char *)-3)
    {
      if (s_logUsingOsLog)
      {
        v94 = gt_tagged_log(1uLL);
        v95 = objc_claimAutoreleasedReturnValue(v94);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
        {
          LOWORD(v504[0]) = 0;
          _os_log_impl(&dword_0, v95, OS_LOG_TYPE_INFO, "Harvesting solid wireframe texture", (uint8_t *)v504, 2u);
        }
      }
      else
      {
        v224 = __stdoutp;
        v95 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting solid wireframe texture"))));
        fprintf(v224, "%s\n", (const char *)-[NSObject UTF8String](v95, "UTF8String"));
      }

      v458 = 0;
      v219 = &v458;
      v225 = GTMTLReplayController_generateWireframeTexture((uint64_t)a1, a2, 0, (apr_allocator_t *)((char *)&dword_0 + 1), &v458);
      v221 = objc_claimAutoreleasedReturnValue(v225);
      goto LABEL_186;
    }
    if (obj == (char *)-2)
    {
      if (s_logUsingOsLog)
      {
        v92 = gt_tagged_log(1uLL);
        v93 = objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
        {
          LOWORD(v504[0]) = 0;
          _os_log_impl(&dword_0, v93, OS_LOG_TYPE_INFO, "Harvesting outline texture", (uint8_t *)v504, 2u);
        }
      }
      else
      {
        v222 = __stdoutp;
        v93 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting outline texture"))));
        fprintf(v222, "%s\n", (const char *)-[NSObject UTF8String](v93, "UTF8String"));
      }

      v457 = 0;
      v219 = &v457;
      v223 = GTMTLReplayController_generateOutlineTexture((uint64_t)a1, (uint64_t)a2, &v457);
      v221 = objc_claimAutoreleasedReturnValue(v223);
      goto LABEL_186;
    }
    if (obj == (char *)-1)
    {
      if (s_logUsingOsLog)
      {
        v34 = gt_tagged_log(1uLL);
        v35 = objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          LOWORD(v504[0]) = 0;
          _os_log_impl(&dword_0, v35, OS_LOG_TYPE_INFO, "Harvesting wireframe texture", (uint8_t *)v504, 2u);
        }
      }
      else
      {
        v218 = __stdoutp;
        v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting wireframe texture"))));
        fprintf(v218, "%s\n", (const char *)-[NSObject UTF8String](v35, "UTF8String"));
      }

      v459 = 0;
      v219 = &v459;
      v220 = GTMTLReplayController_generateWireframeTexture((uint64_t)a1, a2, 1, 0, &v459);
      v221 = objc_claimAutoreleasedReturnValue(v220);
LABEL_186:
      v226 = (id)v221;
      v227 = *v219;
LABEL_187:
      if (v226)
        goto LABEL_188;
      if (v227)
      {
        v485 = NSUnderlyingErrorKey;
        v486 = v227;
        v236 = 0;
        v237 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v486, &v485, 1));
      }
      else
      {
        v237 = 0;
        v236 = 1;
      }
      goto LABEL_271;
    }
    if ((unint64_t)obj < 0xFFFFFFFFFFFFFDFFLL)
    {
      v186 = v414;
      if (!v414)
      {
        v187 = (uint64_t *)GetAliasStream(*((_QWORD *)*a1 + 3), (uint64_t)obj, *((_QWORD *)*a1 + 10) + v14 - 1);
        if (v187)
          v186 = *v187;
        else
          v186 = 0;
      }
      v296 = a1[5];
      v297 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v186));
      v226 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v296, "objectForKeyedSubscript:", v297));

      if (!v226)
        v226 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[1], "textureForKey:", v186));
      if (s_logUsingOsLog)
      {
        v298 = gt_tagged_log(1uLL);
        v299 = objc_claimAutoreleasedReturnValue(v298);
        if (os_log_type_enabled(v299, OS_LOG_TYPE_INFO))
        {
          v300 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v226, "label"));
          if (v300)
          {
            v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v226, "label")));
            v301 = (const char *)-[NSObject UTF8String](v24, "UTF8String");
          }
          else
          {
            v301 = "no label";
          }
          LODWORD(v504[0]) = 134218242;
          *(_QWORD *)((char *)v504 + 4) = v186;
          WORD6(v504[0]) = 2080;
          *(_QWORD *)((char *)v504 + 14) = v301;
          _os_log_impl(&dword_0, v299, OS_LOG_TYPE_INFO, "Harvesting texture %llu (%s)", (uint8_t *)v504, 0x16u);
          if (v300)

        }
      }
      else
      {
        v302 = __stdoutp;
        v299 = objc_claimAutoreleasedReturnValue(objc_msgSend(v226, "label"));
        if (v299)
        {
          v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v226, "label")));
          v303 = (const char *)objc_msgSend(v23, "UTF8String");
        }
        else
        {
          v303 = "no label";
        }
        v304 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting texture %llu (%s)"), v186, v303)));
        fprintf(v302, "%s\n", (const char *)objc_msgSend(v304, "UTF8String"));

        if (v299)
        else
          v299 = 0;
      }

      v305 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedThumbnailTextureID")));
      v306 = v305;
      if (v305)
        obj = (char *)objc_msgSend(v305, "unsignedLongLongValue");

      v227 = 0;
      if (v226)
      {
LABEL_188:
        v408 = v227;
        v484 = v226;
        v228 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v484, 1));
        GTMTLReplayClient_waitForUntrackedWritesToComplete((uint64_t)a1, v228);

        memset(v504, 0, 24);
        v229 = objc_msgSend(v226, "width");
        v230 = objc_msgSend(v226, "height");
        *(_QWORD *)&v504[0] = v229;
        *((_QWORD *)&v504[0] + 1) = v230;
        *(_QWORD *)&v504[1] = 1;
        memset(__dst, 0, 24);
        *(_OWORD *)v505 = v504[0];
        *(_QWORD *)&v506 = 1;
        GTMTLReplayClient_resizeResolution((unint64_t *)__dst, v417, (unint64_t *)v505);
        if (objc_msgSend(v226, "storageMode") == (char *)&dword_0 + 3)
        {
          v504[0] = *(_OWORD *)__dst;
          *(_QWORD *)&v504[1] = *(_QWORD *)&__dst[16];
          MTLTextureDescriptorFromTextureWithoutResourceIndex = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v226);
          v232 = (void *)objc_claimAutoreleasedReturnValue(MTLTextureDescriptorFromTextureWithoutResourceIndex);
          objc_msgSend(v232, "setWidth:", *(_QWORD *)&v504[0]);
          objc_msgSend(v232, "setHeight:", *((_QWORD *)&v504[0] + 1));
          objc_msgSend(v232, "setDepth:", *(_QWORD *)&v504[1]);
          objc_msgSend(v232, "setStorageMode:", 2);
          v233 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v226, "device"));
          v234 = (apr_hash_t *)objc_msgSend(v233, "newTextureWithDescriptor:", v232);

          if (!v234)
          {
            v482 = CFSTR("GTErrorKeyMTLTextureDescriptor");
            v256 = SerializeMTLTextureDescriptorToDictionary(v232);
            v247 = (void *)objc_claimAutoreleasedReturnValue(v256);
            v483 = v247;
            v248 = (apr_hash_t *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v483, &v482, 1));
            GTMTLReplay_fillError(a5, 102, v248);
            ht = 0;
LABEL_221:

            goto LABEL_222;
          }

          v235 = v234;
        }
        else
        {
          v235 = (apr_hash_t *)v226;
        }
        v238 = *(_QWORD *)&v504[0] ^ *(_QWORD *)__dst | *((_QWORD *)&v504[0] + 1) ^ *(_QWORD *)&__dst[8] | *(_QWORD *)&v504[1] ^ *(_QWORD *)&__dst[16];
        ht = v235;
        if (-[apr_hash_t textureType](v235, "textureType") == &dword_4
          || -[apr_hash_t textureType](v235, "textureType") == &dword_8)
        {
          v239 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("resolveMultisampleTexture")));
          v240 = v239;
          if (v239)
            v241 = v239;
          else
            v241 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v238 != 0));
          v242 = v241;

          v243 = objc_msgSend(v242, "BOOLValue");
        }
        else
        {
          v243 = 0;
        }
        if (v238 | v414)
        {
          v481 = v423;
          v244 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v481, 1));
          v480 = v235;
          v245 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v480, 1));
          v455 = 0;
          v246 = GTMTLReplayClient_retrieveTexturesForResize(a1, v244, v245, v243, &v455);
          v247 = (void *)objc_claimAutoreleasedReturnValue(v246);
          v232 = v455;

          if (v232)
          {
            v478 = NSUnderlyingErrorKey;
            v479 = v232;
            v248 = (apr_hash_t *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v479, &v478, 1));
            GTMTLReplay_fillError(a5, 101, v248);
            if (a5)
              v249 = *a5;
            else
              v249 = 0;
            GTMTLReplay_handleNSError(v249);
            goto LABEL_221;
          }
          if (v238)
          {
            v257 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[1], "defaultCommandQueue"));
            v258 = InternalCommandBuffer(v257, CFSTR("ResizeTexture"));
            v248 = (apr_hash_t *)objc_claimAutoreleasedReturnValue(v258);

            v259 = a1[2];
            v260 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "objectAtIndexedSubscript:", 0));
            v454 = 0;
            v261 = GTMTLReplayController_resizeTexture(v259, (uint64_t)a2, v248, v260, *(unint64_t *)__dst, *(unint64_t *)&__dst[8], &v454);
            v405 = objc_claimAutoreleasedReturnValue(v261);
            v232 = v454;

            if (v232)
            {
              v476 = NSUnderlyingErrorKey;
              v477 = v232;
              v262 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v477, &v476, 1));
              GTMTLReplay_fillError(a5, 101, v262);
              if (a5)
                v263 = *a5;
              else
                v263 = 0;
              GTMTLReplay_handleNSError(v263);

              ht = (apr_hash_t *)v405;
              goto LABEL_221;
            }
            GTMTLReplay_commitCommandBuffer(v248);
          }
          else
          {
            v248 = ht;
            v405 = objc_claimAutoreleasedReturnValue(objc_msgSend(v247, "firstObject"));
          }

          if (v414)
          {
            v283 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureLevel")));
            v284 = objc_msgSend(v283, "unsignedIntegerValue");

            v285 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureSlice")));
            v286 = objc_msgSend(v285, "unsignedIntegerValue");

            v287 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureDepthPlane")));
            v288 = objc_msgSend(v287, "unsignedIntegerValue");

            v289 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureAttachmentIndex")));
            v251 = (unint64_t)objc_msgSend(v289, "unsignedIntegerValue");

            if (v251 == 8)
            {
              v251 = 0;
              v290 = v413;
            }
            else
            {
              v290 = v413;
              if (v251 == 9)
                v251 = 1;
            }
            v250 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLTexture-0x%llx-%llx-%llu-%llu-%llu-%llu-Fetch"), v414, v290, v284, v286, v288, v251));
            v235 = (apr_hash_t *)v405;
            obj = (char *)v414;
          }
          else
          {
            v250 = 0;
            v251 = -1;
            v235 = (apr_hash_t *)v405;
          }
        }
        else
        {
          v250 = 0;
          v251 = -1;
        }
        v252 = a1[3];
        v453 = 0;
        GTMTLReplayClient_harvestTexture((uint64_t)a2, v252, v235, (uint64_t)obj, a4, v251, v250, (uint64_t)v413, &v453);
        v253 = v453;
        ht = v235;
        if (!v253)
        {

          goto LABEL_211;
        }
        v254 = v253;
        v474 = NSUnderlyingErrorKey;
        v475 = v253;
        v255 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v475, &v474, 1));
        GTMTLReplay_fillError(a5, 102, v255);

LABEL_222:
        v36 = 0;
        goto LABEL_223;
      }
      v236 = 1;
      v237 = 0;
LABEL_271:
      v307 = v237;
      GTMTLReplay_fillError(a5, 102, v237);
      ht = (apr_hash_t *)v227;
      v36 = 0;
      v197 = v307;
      if ((v236 & 1) != 0)
        goto LABEL_238;
      goto LABEL_237;
    }
    GTMTLReplayController_rewind((uint64_t)a1);
    GTMTLReplayController_debugSubCommand((unsigned int *)a1, v14, v21);
    v456 = 0;
    if (*((_DWORD *)a1 + 2828) != 70)
    {
      GTMTLReplay_fillError(&v456, 101, &__NSDictionary0__struct);
      GTMTLReplay_handleNSError(v456);
      v226 = 0;
LABEL_353:
      v227 = v456;
      objc_msgSend(a1[1], "commitCommandBuffers");
      goto LABEL_187;
    }
    v96 = *(apr_pool_t **)a1[19];
    v399 = *((_QWORD *)*a1 + 10) + *v23;
    v401 = (uint64_t **)*a1;
    v97 = GTMTLSMContext_getObject(**((_QWORD **)*a1 + 5), (uint64_t)a1[2489], v399)[7];
    v98 = *(_QWORD *)(v97 + 64);
    LODWORD(v99) = *(unsigned __int16 *)(v97 + 200);
    v100 = 32;
    if (!*(_WORD *)(v97 + 200))
      v100 = 56;
    v101 = *(_QWORD *)(v97 + v100);
    if (!*(_WORD *)(v97 + 200))
      LODWORD(v99) = *(unsigned __int16 *)(v97 + 202);
    if (v98)
      v102 = 1;
    else
      v102 = (_DWORD)v99 == 0;
    if (!v102)
    {
      v103 = 0;
      v98 = v101;
      v99 = v99;
      do
      {
        v104 = *(unsigned __int8 *)(v98 + 16);
        if (v104 == 17)
        {
          if (*(_BYTE *)(v98 + 38) == 1)
            goto LABEL_279;
        }
        else if (v104 == 16)
        {
          v98 = v101 + 56 * v103;
          goto LABEL_279;
        }
        v98 += 56;
        ++v103;
        --v99;
      }
      while (v99);
      v98 = 0;
    }
LABEL_279:
    v313 = (uint64_t)(obj + 513);
    v314 = *(unsigned __int8 *)(v98 + 16);
    if (v314 == 17 || v314 == 16)
    {
      v315 = *(_QWORD *)(v98 + 24);
      if (!v315)
        v315 = *(_QWORD *)(v98 + 8);
    }
    else
    {
      v315 = 0;
    }
    v316 = *(unsigned int *)(v315 + 16);
    if ((_DWORD)v316)
    {
      v317 = *(_QWORD *)(v315 + 8);
      do
      {
        countStructMember(v317);
        v317 += 32;
        --v316;
      }
      while (v316);
    }
    v318 = apr_array_make(v96, 8, 8);
    nameStructType1(v318, v315, v313);
    v320 = v319;
    *(_QWORD *)&__dst[8] = v319;
    v322 = apr_array_pstrcat(v96, v318, v321);
    v323 = apr_psprintf(v96, v322, v313);
    *(_QWORD *)__dst = v323;
    v406 = a1[1];
    htb = (apr_hash_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(v406, "defaultDevice"));
    v324 = objc_alloc_init((Class)MTLTextureDescriptor);
    v325 = v324;
    if ((_DWORD)v320)
    {
      objc_msgSend(v324, "setTextureType:", 3);
      objc_msgSend(v325, "setArrayLength:", v320);
      v326 = 19;
    }
    else
    {
      v326 = 3;
    }
    objc_msgSend(v325, "setUsage:", v326);
    objc_msgSend(v325, "setWidth:", a1[2808]);
    objc_msgSend(v325, "setHeight:", a1[2809]);
    if ((v320 & 0xFFFF00000000) != 0)
    {
      v327 = HIDWORD(v320);
    }
    else if ((BYTE6(v320) - 3) > 0x35u)
    {
      LOWORD(v327) = 0;
    }
    else
    {
      LOWORD(v327) = word_4A8830[4 * (BYTE6(v320) - 3)];
    }
    objc_msgSend(v325, "setPixelFormat:", (unsigned __int16)v327);
    objc_msgSend(v325, "setStorageMode:", 2);
    v409 = -[apr_hash_t newTextureWithDescriptor:](htb, "newTextureWithDescriptor:", v325);
    if (!v409)
    {
      v505[0] = (apr_pool_t *)CFSTR("GTErrorKeyMTLTextureDescriptor");
      *(_QWORD *)&v504[0] = v325;
      v331 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v504, v505, 1));
      GTMTLReplay_fillError(&v456, 101, v331);
      GTMTLReplay_handleNSError(v456);

LABEL_349:
      v226 = 0;
      v373 = v409;
LABEL_352:

      goto LABEL_353;
    }
    v398 = v323;
    v403 = v96;

    if ((GT_SUPPORT_0 & 1) == 0)
    {
LABEL_351:
      apr_pool_clear(v403);
      v373 = v409;
      v226 = v409;
      goto LABEL_352;
    }
    v328 = apr_array_make(v96, 8, 8);
    *(_QWORD *)apr_array_push(v328) = "#include <metal_stdlib>\n"
                                      "#include <metal_imageblocks>\n"
                                      "#include <simd/simd.h>\n"
                                      "using namespace metal;\n"
                                      "\n"
                                      "struct ImageblockMaster {\n";
    v329 = *(unsigned __int8 *)(v98 + 16);
    pd = a2;
    if (v329 == 17 || v329 == 16)
    {
      v330 = *(_QWORD *)(v98 + 24);
      if (!v330)
        v330 = *(_QWORD *)(v98 + 8);
    }
    else
    {
      v330 = 0;
    }
    v332 = apr_array_make(v96, 8, 8);
    if (*(_DWORD *)(v330 + 16))
    {
      v333 = v332;
      v334 = 0;
      v335 = 0;
      do
      {
        v333->nelts = 0;
        processStructMember(v333, *(_QWORD *)(v330 + 8) + v334, 1, 0);
        v337 = apr_array_pstrcat(v328->pool, v333, v336);
        *(_QWORD *)apr_array_push(v328) = v337;
        ++v335;
        v334 += 32;
      }
      while (v335 < *(unsigned int *)(v330 + 16));
    }
    *(_QWORD *)apr_array_push(v328) = "};\n\n";
    v338 = *(unsigned __int8 *)(v98 + 16);
    if (v338 == 16 || v338 == 17)
    {
      v339 = *(unsigned __int8 *)(v98 + 37);
      v340 = *(unsigned __int8 *)(v98 + 36);
      *(_QWORD *)apr_array_push(v328) = "kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_ex"
                                        "plicit> imageBlock";
      a2 = pd;
      if (v339)
      {
        v341 = apr_array_push(v328);
        v342 = " [[ alias_implicit_imageblock ]]";
LABEL_317:
        *v341 = v342;
        goto LABEL_318;
      }
      if (v340 <= 7)
      {
        *(_QWORD *)apr_array_push(v328) = " [[ alias_implicit_imageblock_color";
        v345 = apr_psprintf(v328->pool, "(%u)", v340);
        *(_QWORD *)apr_array_push(v328) = v345;
        v341 = apr_array_push(v328);
        v342 = " ]]";
        goto LABEL_317;
      }
    }
    else
    {
      *(_QWORD *)apr_array_push(v328) = "kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_ex"
                                        "plicit> imageBlock";
      a2 = pd;
    }
LABEL_318:
    *(_QWORD *)apr_array_push(v328) = ",\n"
                                      "\tuint2 gid [[ thread_position_in_grid ]],\n"
                                      "\tushort2 lid [[ thread_position_in_threadgroup ]],\n"
                                      "\t";
    if ((_DWORD)v320)
      v346 = "texture2d_array";
    else
      v346 = "texture2d";
    *(_QWORD *)apr_array_push(v328) = v346;
    *(_QWORD *)apr_array_push(v328) = "<";
    v347 = BYTE6(v320) - 3;
    if ((BYTE6(v320) - 3) > 0x35u)
      v348 = 0;
    else
      v348 = off_726C78[(BYTE6(v320) - 3)];
    *(_QWORD *)apr_array_push(v328) = v348;
    *(_QWORD *)apr_array_push(v328) = ", access::write> imageBlockData [[ texture(0) ]])\n";
    *(_QWORD *)apr_array_push(v328) = "{\n";
    *(_QWORD *)apr_array_push(v328) = "\tthreadgroup_imageblock ImageblockMaster* ib = imageBlock.data(lid);\n";
    v349 = apr_array_push(v328);
    if ((_DWORD)v320)
    {
      *v349 = "\tfor (int i = 0; i < ";
      v350 = apr_psprintf(v328->pool, "%u", v320);
      *(_QWORD *)apr_array_push(v328) = v350;
      *(_QWORD *)apr_array_push(v328) = "; i++) {\n";
      *(_QWORD *)apr_array_push(v328) = "\t\t";
      if ((BYTE6(v320) - 3) > 0x35u)
        v351 = 0;
      else
        v351 = off_726E28[(BYTE6(v320) - 3)];
      v352 = v403;
      *(_QWORD *)apr_array_push(v328) = v351;
      *(_QWORD *)apr_array_push(v328) = " currData = ib->";
      *(_QWORD *)apr_array_push(v328) = v398;
      *(_QWORD *)apr_array_push(v328) = "[i];\n";
      *(_QWORD *)apr_array_push(v328) = "\t\timageBlockData.write(";
      GenerateStringForWritingDataToTexture(v328, (uint64_t)__dst);
      *(_QWORD *)apr_array_push(v328) = ", gid, i);\n";
      v354 = apr_array_push(v328);
      v355 = "\t}\n";
    }
    else
    {
      *v349 = "\t";
      v352 = v403;
      if (v347 > 0x35u)
        v353 = 0;
      else
        v353 = off_726E28[v347];
      *(_QWORD *)apr_array_push(v328) = v353;
      *(_QWORD *)apr_array_push(v328) = " currData = ib->";
      *(_QWORD *)apr_array_push(v328) = v398;
      *(_QWORD *)apr_array_push(v328) = ";\n";
      *(_QWORD *)apr_array_push(v328) = "\timageBlockData.write(";
      GenerateStringForWritingDataToTexture(v328, (uint64_t)__dst);
      v354 = apr_array_push(v328);
      v355 = ", gid);\n";
    }
    *v354 = v355;
    *(_QWORD *)apr_array_push(v328) = "}\n";
    v357 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", apr_array_pstrcat(v352, v328, v356));
    v358 = (void *)objc_claimAutoreleasedReturnValue(v357);
    v505[0] = 0;
    v359 = -[apr_hash_t newLibraryWithSource:options:error:](htb, "newLibraryWithSource:options:error:", v358, 0, v505);
    v360 = v505[0];
    v361 = v360;
    if (v360)
    {
      v522 = NSUnderlyingErrorKey;
      *(_QWORD *)&v487 = v360;
      v362 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v487, &v522, 1));
      GTMTLReplay_fillError(&v456, 101, v362);
      GTMTLReplay_handleNSError(v456);
      v363 = 0;
      v364 = 1;
    }
    else
    {
      v362 = objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
      objc_msgSend(v362, "setLabel:", CFSTR("Tile Pipeline for dumping Image Block data"));
      v365 = objc_msgSend(v359, "newFunctionWithName:", CFSTR("dumpImageBlockData"));
      objc_msgSend(v362, "setTileFunction:", v365);

      objc_msgSend(v362, "setThreadgroupSizeMatchesTileSize:", 1);
      v366 = GTMTLReplayController_renderPassDescriptor((uint64_t)a1);
      FillAttachmentPixelFormats(v366, v401[5], v399, v362);
      *(_QWORD *)&v487 = 0;
      v363 = -[apr_hash_t newRenderPipelineStateWithTileDescriptor:error:](htb, "newRenderPipelineStateWithTileDescriptor:error:", v362, &v487);
      v367 = (id)v487;
      v368 = v367;
      if (v367)
      {
        v521 = NSUnderlyingErrorKey;
        v522 = (NSErrorUserInfoKey)v367;
        v369 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v522, &v521, 1));
        GTMTLReplay_fillError(&v456, 101, v369);
        GTMTLReplay_handleNSError(v456);

        v364 = 1;
      }
      else
      {
        v364 = 0;
      }

    }
    if (v364)
    {

      goto LABEL_349;
    }
    v374 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v406, "renderCommandEncoderForKey:", a1[1415]));
    objc_msgSend(v374, "pushDebugGroup:", CFSTR("Dump Tile Data"));
    objc_msgSend(v374, "setRenderPipelineState:", v363);
    objc_msgSend(v374, "setTileTexture:atIndex:", v409, 0);
    v375 = objc_msgSend(v374, "tileWidth");
    v376 = objc_msgSend(v374, "tileHeight");
    *(_QWORD *)&v504[0] = v375;
    *((_QWORD *)&v504[0] + 1) = v376;
    *(_QWORD *)&v504[1] = 1;
    objc_msgSend(v374, "dispatchThreadsPerTile:", v504);
    objc_msgSend(v374, "popDebugGroup");

    goto LABEL_351;
  }
  if ((_DWORD)v11 != 2)
  {
LABEL_34:
    htc = (apr_hash_t *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("kDYMessageFetchResourceObject: %u invalidType"), v11)));
    GTMTLReplay_handleError(101, (uint64_t)-[apr_hash_t UTF8String](htc, "UTF8String"), "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/GPUTools/GTMTLCapture/replayer/GTMTLReplay_harvestResource.m", (uint64_t)"HarvestResourceObject", 573, 32);
    v36 = &dword_0 + 1;

    goto LABEL_239;
  }
  if (obj == (char *)-1347)
  {
    if (s_logUsingOsLog)
    {
      v89 = gt_tagged_log(1uLL);
      v90 = objc_claimAutoreleasedReturnValue(v89);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
      {
        LOWORD(v504[0]) = 0;
        _os_log_impl(&dword_0, v90, OS_LOG_TYPE_INFO, "Harvesting translation buffer", (uint8_t *)v504, 2u);
      }
    }
    else
    {
      v128 = __stdoutp;
      v90 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting translation buffer"))));
      fprintf(v128, "%s\n", (const char *)-[NSObject UTF8String](v90, "UTF8String"));
    }

    v505[0] = 0;
    apr_pool_create_ex(v505, 0, 0, v129);
    v130 = *a1;
    memset(v504, 0, 88);
    v131 = v130[10] + v14;
    v132 = v505[0];
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)v504, (_DWORD **)v130[5], v131, v505[0]);
    v133 = v130[1];
    v134 = a1[1];
    v135 = *(_QWORD *)&v504[0];
    v136 = apr_array_make(v132, *(_DWORD *)(*(_QWORD *)&v504[0] + 12), 24);
    hta = apr_hash_make(v132);
    pc = v132;
    v412 = apr_hash_make(v132);
    if (*(int *)(v135 + 12) >= 1)
    {
      v137 = 0;
      v138 = 16;
      do
      {
        v139 = *(_QWORD *)(v135 + 24);
        v140 = apr_array_push(v136);
        v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "bufferForKey:", *(_QWORD *)(v139 + v138)));
        v142 = DEVICEOBJECT(v141);
        v143 = (void *)objc_claimAutoreleasedReturnValue(v142);

        *v140 = objc_msgSend(v143, "gpuAddress");
        v140[1] = objc_msgSend(v143, "length");
        v140[2] = *(_QWORD *)(v139 + v138);

        ++v137;
        v138 += 24;
      }
      while (v137 < *(int *)(v135 + 12));
    }
    qsort(v136->elts, v136->nelts, v136->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
    v144 = *((_QWORD *)&v504[1] + 1);
    v145 = (apr_hash_index_t *)(*((_QWORD *)&v504[1] + 1) + 16);
    *(_QWORD *)(*((_QWORD *)&v504[1] + 1) + 24) = 0;
    *(_QWORD *)(v144 + 32) = 0;
    *(_QWORD *)(v144 + 16) = v144;
    *(_DWORD *)(v144 + 40) = 0;
    v146 = apr_hash_next(v145);
    if (v146)
    {
      v147 = v146;
      do
      {
        v148 = *(_QWORD *)(*((_QWORD *)v147 + 1) + 32);
        v149 = apr_palloc(pc, 0x20uLL);
        v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "renderPipelineStateForKey:", *(_QWORD *)(v148 + 8)));
        v151 = DEVICEOBJECT(v150);
        v152 = (void *)objc_claimAutoreleasedReturnValue(v151);

        *v149 = objc_msgSend(v152, "uniqueIdentifier");
        v149[1] = *(_QWORD *)(v148 + 8);
        v149[2] = objc_msgSend(v152, "gpuResourceID");
        apr_hash_set(hta, v149, 8, v149);

        v147 = apr_hash_next(v147);
      }
      while (v147);
    }
    v153 = *(_QWORD *)&v504[2];
    v154 = (apr_hash_index_t *)(*(_QWORD *)&v504[2] + 16);
    *(_QWORD *)(*(_QWORD *)&v504[2] + 24) = 0;
    *(_QWORD *)(v153 + 32) = 0;
    *(_QWORD *)(v153 + 16) = v153;
    *(_DWORD *)(v153 + 40) = 0;
    v155 = apr_hash_next(v154);
    if (v155)
    {
      v156 = v155;
      do
      {
        v157 = *(_QWORD *)(*((_QWORD *)v156 + 1) + 32);
        v158 = apr_palloc(pc, 0x20uLL);
        v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "computePipelineStateForKey:", *(_QWORD *)(v157 + 8)));
        v160 = DEVICEOBJECT(v159);
        v161 = (void *)objc_claimAutoreleasedReturnValue(v160);

        *v158 = objc_msgSend(v161, "uniqueIdentifier");
        v158[1] = *(_QWORD *)(v157 + 8);
        v158[2] = objc_msgSend(v161, "gpuResourceID");
        apr_hash_set(v412, v158, 8, v158);

        v156 = apr_hash_next(v156);
      }
      while (v156);
    }
    v162 = apr_array_make(pc, 3 * v136->nelts + 2 * (*((_DWORD *)v412 + 12) + *((_DWORD *)hta + 12)) + 3, 8);
    nelts = v136->nelts;
    *(_QWORD *)apr_array_push(v162) = nelts;
    if (v136->nelts >= 1)
    {
      v164 = 0;
      v165 = 0;
      do
      {
        v166 = &v136->elts[v164];
        *(_QWORD *)__dst = *((_QWORD *)v166 + 2);
        v167 = *(_QWORD *)(*(_QWORD *)(*find_entry(v133, __dst, 8uLL, 0) + 32) + 8);
        *(_QWORD *)apr_array_push(v162) = v167;
        v168 = *(_QWORD *)v166;
        *(_QWORD *)apr_array_push(v162) = v168;
        v169 = *((_QWORD *)v166 + 1);
        *(_QWORD *)apr_array_push(v162) = v169;
        ++v165;
        v164 += 24;
      }
      while (v165 < v136->nelts);
    }
    v170 = *((unsigned int *)hta + 12);
    *(_QWORD *)apr_array_push(v162) = v170;
    *((_DWORD *)hta + 10) = 0;
    *((_QWORD *)hta + 2) = hta;
    *((_QWORD *)hta + 3) = 0;
    *((_QWORD *)hta + 4) = 0;
    v171 = apr_hash_next((apr_hash_t *)((char *)hta + 16));
    if (v171)
    {
      v172 = v171;
      do
      {
        v173 = *(uint64_t **)(*((_QWORD *)v172 + 1) + 32);
        *(_QWORD *)__dst = v173[1];
        v174 = *(_QWORD *)(*(_QWORD *)(*find_entry(v133, __dst, 8uLL, 0) + 32) + 8);
        *(_QWORD *)apr_array_push(v162) = v174;
        v175 = *v173;
        *(_QWORD *)apr_array_push(v162) = v175;
        v172 = apr_hash_next(v172);
      }
      while (v172);
    }
    v176 = *((unsigned int *)v412 + 12);
    *(_QWORD *)apr_array_push(v162) = v176;
    *((_DWORD *)v412 + 10) = 0;
    *((_QWORD *)v412 + 2) = v412;
    *((_QWORD *)v412 + 3) = 0;
    *((_QWORD *)v412 + 4) = 0;
    v177 = apr_hash_next((apr_hash_t *)((char *)v412 + 16));
    if (v177)
    {
      v178 = v177;
      do
      {
        v179 = *(uint64_t **)(*((_QWORD *)v178 + 1) + 32);
        *(_QWORD *)__dst = v179[1];
        v180 = *(_QWORD *)(*(_QWORD *)(*find_entry(v133, __dst, 8uLL, 0) + 32) + 8);
        *(_QWORD *)apr_array_push(v162) = v180;
        v181 = *v179;
        *(_QWORD *)apr_array_push(v162) = v181;
        v178 = apr_hash_next(v178);
      }
      while (v178);
    }
    elts = v162->elts;
    elt_size = v162->elt_size;
    v183 = v162->nelts;

    v185 = objc_alloc((Class)NSData);
    v450[0] = _NSConcreteStackBlock;
    v450[1] = 3221225472;
    v450[2] = __HarvestResourceObject_block_invoke_137;
    v450[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
    v450[4] = pc;
    v110 = (apr_hash_t *)objc_msgSend(v185, "initWithBytesNoCopy:length:deallocator:", elts, elt_size * (uint64_t)v183, v450);
    goto LABEL_146;
  }
  if (obj != (char *)-1026)
  {
    if ((unint64_t)obj > 0xFFFFFFFFFFFFFBFELL)
    {
      v91 = 0;
LABEL_153:
      v193 = 0;
LABEL_154:
      if (v414)
        v194 = (char *)v414;
      else
        v194 = obj;
      v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLBuffer-0x%llx-Fetch"), v194));
      objc_msgSend(a4[1], "setObject:forKeyedSubscript:", v91, v195);
      ht = v91;
      if (a4[2] && v413)
      {
        v196 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v413));
        objc_msgSend(a4[2], "setObject:forKeyedSubscript:", v196, v195);

      }
      v444[0] = 0;
      v444[1] = v194;
      v197 = objc_retainAutorelease(v195);
      v444[2] = objc_msgSend(v197, "UTF8String");
      v444[3] = v193;
      v444[4] = -[apr_hash_t length](ht, "length");
      DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v444, **a4);
      v198 = **a4;
      v199 = *v198;
      if ((*((_BYTE *)v198 + 33) & 0x10) != 0)
      {
        v201 = **a4;
        v200 = *v198;
        do
        {
          v201 = (unsigned int *)((char *)v201 + v199);
          v199 = *v201;
          v200 += v199;
        }
        while ((*((_BYTE *)v201 + 33) & 0x20) == 0);
      }
      else
      {
        v200 = *v198;
      }
      objc_msgSend((*a4)[2], "appendBytes:length:", v198, v200);
      goto LABEL_236;
    }
    if ((unint64_t)obj < 0xFFFFFFFFFFFFFBBELL)
    {
      if ((unint64_t)obj < 0xFFFFFFFFFFFFFB7ELL)
      {
        if ((unint64_t)obj < 0xFFFFFFFFFFFFFB3ELL)
        {
          if ((unint64_t)obj < 0xFFFFFFFFFFFFFAFELL)
          {
            if ((unint64_t)obj < 0xFFFFFFFFFFFFFABELL)
            {
              pe = (apr_pool_t *)a1[3];
              v343 = v414;
              if (!v414)
              {
                v344 = (uint64_t *)GetAliasStream(*((_QWORD *)*a1 + 3), (uint64_t)obj, *((_QWORD *)*a1 + 10) + v14 - 1);
                if (v344)
                  v343 = *v344;
                else
                  v343 = 0;
              }
              v377 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[1], "bufferForKey:", v343));
              v378 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("range.location")));
              v379 = objc_msgSend(v378, "unsignedIntValue");
              v380 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v423, "objectForKeyedSubscript:", CFSTR("range.length")));
              v381 = objc_msgSend(v380, "unsignedIntValue");

              v382 = (char *)objc_msgSend(v377, "length");
              v383 = v382;
              if (v381)
              {
                v384 = v381 + (unint64_t)v379;
                if (v384 >= (unint64_t)v382)
                  v384 = (unint64_t)v382;
                v385 = v384 >= v379;
                v386 = v384 - v379;
                if (v385)
                  v193 = v379;
                else
                  v193 = 0;
                if (v385)
                  v383 = (char *)v386;
                else
                  v383 = 0;
              }
              else
              {
                v193 = 0;
              }
              if (s_logUsingOsLog)
              {
                v387 = gt_tagged_log(1uLL);
                v388 = objc_claimAutoreleasedReturnValue(v387);
                if (os_log_type_enabled(v388, OS_LOG_TYPE_INFO))
                {
                  v389 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v377, "label"));
                  if (v389)
                  {
                    v379 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v377, "label")));
                    v390 = (const char *)objc_msgSend(v379, "UTF8String");
                  }
                  else
                  {
                    v390 = "no label";
                  }
                  LODWORD(v504[0]) = 134218754;
                  *(_QWORD *)((char *)v504 + 4) = v343;
                  WORD6(v504[0]) = 2080;
                  *(_QWORD *)((char *)v504 + 14) = v390;
                  WORD3(v504[1]) = 2048;
                  *((_QWORD *)&v504[1] + 1) = v193;
                  LOWORD(v504[2]) = 2048;
                  *(_QWORD *)((char *)&v504[2] + 2) = &v383[v193];
                  _os_log_impl(&dword_0, v388, OS_LOG_TYPE_INFO, "Harvesting buffer %llu (%s) range: %llu - %llu", (uint8_t *)v504, 0x2Au);
                  if (v389)

                }
              }
              else
              {
                v391 = __stdoutp;
                v388 = objc_claimAutoreleasedReturnValue(objc_msgSend(v377, "label"));
                if (v388)
                {
                  v380 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v377, "label")));
                  v392 = (const char *)objc_msgSend(v380, "UTF8String");
                }
                else
                {
                  v392 = "no label";
                }
                v393 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting buffer %llu (%s) range: %llu - %llu"), v343, v392, v193, &v383[v193])));
                fprintf(v391, "%s\n", (const char *)objc_msgSend(v393, "UTF8String"));

                if (v388)
                else
                  v388 = 0;
              }

              v394 = (void *)objc_claimAutoreleasedReturnValue(-[apr_pool_t bufferWithLength:alignment:](pe, "bufferWithLength:alignment:", v383, 1));
              v473 = v377;
              v395 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v473, 1));
              GTMTLReplayClient_waitForUntrackedWritesToComplete((uint64_t)a1, v395);

              v396 = (void *)objc_claimAutoreleasedReturnValue(-[apr_pool_t blitCommandEncoder](pe, "blitCommandEncoder"));
              v397 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v394, "heapBuffer"));
              objc_msgSend(v396, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v377, v193, v397, objc_msgSend(v394, "heapLocation"), v383);

              v91 = (apr_hash_t *)objc_claimAutoreleasedReturnValue(objc_msgSend(v394, "data"));
              goto LABEL_154;
            }
            *(_QWORD *)&v504[0] = 0;
            apr_pool_create_ex((apr_pool_t **)v504, 0, 0, v25);
            v308 = *(_QWORD *)&v504[0];
            v309 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer(a1, (unint64_t)obj, *(apr_pool_t **)&v504[0]);
            v311 = v310;
            v312 = objc_alloc((Class)NSData);
            v445[0] = _NSConcreteStackBlock;
            v445[1] = 3221225472;
            v445[2] = __HarvestResourceObject_block_invoke_6;
            v445[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
            v445[4] = v308;
            v110 = (apr_hash_t *)objc_msgSend(v312, "initWithBytesNoCopy:length:deallocator:", v309, v311, v445);
          }
          else
          {
            *(_QWORD *)&v504[0] = 0;
            apr_pool_create_ex((apr_pool_t **)v504, 0, 0, v25);
            v291 = *(_QWORD *)&v504[0];
            v292 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer(a1, (unint64_t)obj, *(apr_pool_t **)&v504[0]);
            v294 = v293;
            v295 = objc_alloc((Class)NSData);
            v446[0] = _NSConcreteStackBlock;
            v446[1] = 3221225472;
            v446[2] = __HarvestResourceObject_block_invoke_5;
            v446[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
            v446[4] = v291;
            v110 = (apr_hash_t *)objc_msgSend(v295, "initWithBytesNoCopy:length:deallocator:", v292, v294, v446);
          }
        }
        else
        {
          *(_QWORD *)&v504[0] = 0;
          apr_pool_create_ex((apr_pool_t **)v504, 0, 0, v25);
          v269 = *(_QWORD *)&v504[0];
          v270 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer(a1, (unint64_t)obj, *(apr_pool_t **)&v504[0]);
          v272 = v271;
          v273 = objc_alloc((Class)NSData);
          v447[0] = _NSConcreteStackBlock;
          v447[1] = 3221225472;
          v447[2] = __HarvestResourceObject_block_invoke_4;
          v447[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
          v447[4] = v269;
          v110 = (apr_hash_t *)objc_msgSend(v273, "initWithBytesNoCopy:length:deallocator:", v270, v272, v447);
        }
      }
      else
      {
        *(_QWORD *)&v504[0] = 0;
        apr_pool_create_ex((apr_pool_t **)v504, 0, 0, v25);
        v264 = *(_QWORD *)&v504[0];
        v265 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer(a1, (unint64_t)obj, *(apr_pool_t **)&v504[0]);
        v267 = v266;
        v268 = objc_alloc((Class)NSData);
        v448[0] = _NSConcreteStackBlock;
        v448[1] = 3221225472;
        v448[2] = __HarvestResourceObject_block_invoke_3;
        v448[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
        v448[4] = v264;
        v110 = (apr_hash_t *)objc_msgSend(v268, "initWithBytesNoCopy:length:deallocator:", v265, v267, v448);
      }
    }
    else
    {
      *(_QWORD *)&v504[0] = 0;
      apr_pool_create_ex((apr_pool_t **)v504, 0, 0, v25);
      v105 = *(_QWORD *)&v504[0];
      v106 = DYMTLIndirectArgumentBufferManager_decodeArgumentBuffer(a1, (unint64_t)obj, *(apr_pool_t **)&v504[0]);
      v108 = v107;
      v109 = objc_alloc((Class)NSData);
      v449[0] = _NSConcreteStackBlock;
      v449[1] = 3221225472;
      v449[2] = __HarvestResourceObject_block_invoke_2;
      v449[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
      v449[4] = v105;
      v110 = (apr_hash_t *)objc_msgSend(v109, "initWithBytesNoCopy:length:deallocator:", v106, v108, v449);
    }
LABEL_146:
    v91 = v110;
    goto LABEL_153;
  }
  if (s_logUsingOsLog)
  {
    v28 = gt_tagged_log(1uLL);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      LOWORD(v504[0]) = 0;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "Harvesting vertex data", (uint8_t *)v504, 2u);
    }
  }
  else
  {
    v118 = __stdoutp;
    v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Harvesting vertex data"))));
    fprintf(v118, "%s\n", (const char *)-[NSObject UTF8String](v29, "UTF8String"));
  }

  pb = a2;
  v119 = v416;
  v120 = a1[1];
  v121 = (uint64_t)*a1;
  v122 = *((_QWORD *)*a1 + 15);
  v123 = (*v23 - 1);
  v124 = *(_QWORD *)(v122 + 24) + (v123 << 6);
  v520 = 0u;
  v519 = 0u;
  v518 = 0u;
  v517 = 0u;
  v516 = 0u;
  v515 = 0u;
  v514 = 0u;
  v513 = 0u;
  v512 = 0u;
  v511 = 0u;
  v510 = 0u;
  v509 = 0u;
  v508 = 0u;
  v507 = 0u;
  v506 = 0u;
  *(_OWORD *)v505 = 0u;
  memcpy(v504, a1 + 1421, 0x2B58uLL);
  if (*(_DWORD *)(v124 + 8) >> 2 == 1073737833)
  {
    *((_QWORD *)&v520 + 1) = *(_QWORD *)a1[19];
    GTMTLSMContext_indirectCommandBufferResources((uint64_t)&v514 + 8, *(_DWORD ***)(v121 + 40), *(_QWORD *)v124, *((apr_pool_t **)&v520 + 1));
    GetExecuteCommandsInBufferArgs((uint64_t)v505, v124, *(_QWORD *)(v121 + 16));
    Object = GTMTLSMContext_getObject(**(_QWORD **)(v121 + 40), (uint64_t)v505[0], *(_QWORD *)v124);
    GTMTLCreateIndirectCommandEncoder((uint64_t)&v507 + 8, Object[13]);
    *(_QWORD *)&v520 = *((_QWORD *)&v506 + 1) + v514 * *((unsigned int *)a1 + 5621);
    GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)v504, (_QWORD *)&v507 + 1, v520, (uint64_t *)&v514 + 1);
  }
  v126 = GTMTLSMContext_getObject(**(_QWORD **)(v121 + 40), *(uint64_t *)&v504[534], *(_QWORD *)v124);
  if (v126[9])
  {
    memcpy(__dst, v504, sizeof(__dst));
    v499 = v517;
    v500 = v518;
    v501 = v519;
    v502 = v520;
    v495 = v513;
    v496 = v514;
    v497 = v515;
    v498 = v516;
    v491 = v509;
    v492 = v510;
    v493 = v511;
    v494 = v512;
    v487 = *(_OWORD *)v505;
    v488 = v506;
    v489 = v507;
    v490 = v508;
    PostMeshData = GTMTLReplayController_generatePostMeshData((uint64_t)a1, v120, v121, v122, v123, v124, (uint64_t)__dst, (uint64_t)v126, (uint64_t)&v487, (uint64_t)pb, v119, a5);
  }
  else
  {
    memcpy(__dst, v504, sizeof(__dst));
    v499 = v517;
    v500 = v518;
    v501 = v519;
    v502 = v520;
    v495 = v513;
    v496 = v514;
    v497 = v515;
    v498 = v516;
    v491 = v509;
    v492 = v510;
    v493 = v511;
    v494 = v512;
    v487 = *(_OWORD *)v505;
    v488 = v506;
    v489 = v507;
    v490 = v508;
    PostMeshData = GTMTLReplayController_generatePostVertexData((uint64_t)a1, v120, v121, v122, v123, v124, (uint64_t)__dst, (uint64_t)v126, (uint64_t)&v487, (uint64_t)pb, a5);
  }
  v36 = (void *)objc_claimAutoreleasedReturnValue(PostMeshData);

  if (v36)
  {
    v188 = objc_alloc((Class)NSData);
    v189 = objc_retainAutorelease(v36);
    v190 = objc_msgSend(v189, "contents");
    v191 = objc_msgSend(v189, "length");
    v451[0] = _NSConcreteStackBlock;
    v451[1] = 3221225472;
    v451[2] = __HarvestResourceObject_block_invoke;
    v451[3] = &unk_725CF0;
    v192 = v189;
    v452 = v192;
    v91 = (apr_hash_t *)objc_msgSend(v188, "initWithBytesNoCopy:length:deallocator:", v190, v191, v451);

    goto LABEL_153;
  }
LABEL_239:

  objc_msgSend((id)g_activityLog, "leaveActivity");
  return v36;
}

void sub_2806A8(_Unwind_Exception *a1)
{
  objc_msgSend((id)g_activityLog, "leaveActivity");
  _Unwind_Resume(a1);
}

void GTMTLReplayClient_waitForUntrackedWritesToComplete(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i), "hazardTrackingMode", (_QWORD)v9) == (char *)&dword_0 + 1)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "defaultCommandQueue"));
          objc_msgSend(v8, "finish");

          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

}

uint64_t GetPlanePixelFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = 0;
  if (a1 > 539)
  {
    v4 = a1 - 550;
    v5 = 10;
    if (!a2)
      v5 = 554;
    v6 = 30;
    if (!a2)
      v6 = 10;
    v7 = 578;
    if (!a2)
      v7 = 576;
    if (a1 != 543)
      v7 = 0;
    if (a1 == 540)
      v8 = v6;
    else
      v8 = v7;
    if (v4 >= 2)
      return v8;
    else
      return v5;
  }
  else
  {
    if (a1 <= 519)
    {
      if (a1 != 500 && a1 != 503)
        return result;
LABEL_22:
      if (a2)
        return 30;
      else
        return 10;
    }
    if (a1 == 520 || a1 == 523)
      goto LABEL_22;
  }
  return result;
}

void GTMTLReplayClient_harvestTexture(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned int ***a5, unint64_t a6, void *a7, uint64_t a8, void **a9)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id MTLTextureDescriptorFromTextureWithoutResourceIndex;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  char *v35;
  NSString *v36;
  id v37;
  unint64_t v38;
  uint64_t PlanePixelFormat;
  uint64_t v40;
  id v41;
  uint64_t v42;
  int64x2_t v43;
  char v44;
  int8x16_t v45;
  unint64_t v46;
  int8x16_t *v47;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  const __CFString *v65;
  const __CFString *v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  int v74;
  double v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  _DWORD *v88;
  size_t v89;
  id *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  _DWORD *v100;
  void *v101;
  void *v102;
  id v103;
  uint64_t v104;
  void *v105;
  void *v106;
  id v107;
  const char *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int **v114;
  unsigned int *v115;
  unsigned int *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t j;
  void *v121;
  id v122;
  id v123;
  void *v124;
  unsigned int ***v125;
  size_t v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  size_t v136;
  void *v137;
  char *v138;
  id v140;
  void *v141;
  _DWORD *v142;
  char *v143;
  _DWORD *v144;
  unint64_t v145;
  int8x16_t v146;
  void *v147;
  id v148;
  uint64_t v149;
  id v150;
  uint64_t i;
  void *v152;
  void *v153;
  id v154;
  __int128 v155;
  int8x16_t v156;
  id v157;
  _QWORD v158[4];
  id v159;
  size_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  id v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  NSErrorUserInfoKey v182;
  id v183;
  const __CFString *v184;
  void *v185;
  id v186[2];
  NSErrorUserInfoKey v187;
  _QWORD v188[5];
  _QWORD v189[2];
  _QWORD v190[8];
  __int128 v191;

  v13 = a2;
  v14 = a3;
  v15 = a7;
  v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "device"));
  v16 = v14;
  v17 = v13;
  v137 = v17;
  if (v16)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "device"));
    v19 = v16;
    if (objc_msgSend(v16, "storageMode") == (char *)&dword_0 + 3)
    {
      MTLTextureDescriptorFromTextureWithoutResourceIndex = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue(MTLTextureDescriptorFromTextureWithoutResourceIndex);
      objc_msgSend(v19, "setStorageMode:", 2);
      v21 = objc_msgSend(v18, "newTextureWithDescriptor:", v19);

      if (!v21)
      {
        v190[0] = CFSTR("GTErrorKeyMTLTextureDescriptor");
        v32 = SerializeMTLTextureDescriptorToDictionary(v19);
        v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        *(_QWORD *)&v175 = v33;
        v26 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v175, v190, 1));

        GTMTLReplay_fillError(a9, 101, v26);
        if (a9)
          v34 = *a9;
        else
          v34 = 0;
        GTMTLReplay_handleNSError(v34);
        v31 = 0;
        goto LABEL_23;
      }

      v19 = v21;
    }
    if (objc_msgSend(v19, "isFramebufferOnly"))
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "blitCommandEncoder"));

      if (v22)
        objc_msgSend(v17, "commitCommandBuffer");
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "resourcePool"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "commandBuffer"));
      *(_QWORD *)&v175 = 0;
      v25 = GTMTLReplayController_resizeTexture(v23, a1, v24, v19, (unint64_t)objc_msgSend(v19, "width"), (unint64_t)objc_msgSend(v19, "height"), (void **)&v175);
      v26 = (id)objc_claimAutoreleasedReturnValue(v25);
      v27 = (id)v175;

      if (v27)
      {
        v187 = NSUnderlyingErrorKey;
        v190[0] = v27;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v190, &v187, 1));
        GTMTLReplay_fillError(a9, 101, v28);
        if (a9)
          v29 = *a9;
        else
          v29 = 0;
        GTMTLReplay_handleNSError(v29);

        v31 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      v26 = v19;
    }
    v26 = v26;
    v31 = v26;
LABEL_23:

    goto LABEL_24;
  }
  GTMTLReplay_fillError(a9, 101, &__NSDictionary0__struct);
  if (a9)
    v30 = *a9;
  else
    v30 = 0;
  GTMTLReplay_handleNSError(v30);
  v31 = 0;
LABEL_24:

  v35 = (char *)objc_msgSend(v31, "pixelFormat");
  v140 = objc_msgSend(v31, "sampleCount");
  v173 = 0uLL;
  v174 = 0;
  v36 = (NSString *)objc_msgSend(v31, "width");
  v37 = objc_msgSend(v31, "height");
  v154 = objc_msgSend(v31, "depth");
  v191 = 0uLL;
  memset(v190, 0, 56);
  GTMTLPixelFormatGetInfoForDevice((uint64_t)v190, (uint64_t)v141, (uint64_t)v35);
  *(_QWORD *)&v191 = 0;
  if ((~LODWORD(v190[1]) & 0x60) != 0)
  {
    if ((v190[1] & 0x2000) != 0)
      *(_QWORD *)&v191 = 4;
    v38 = 1;
  }
  else
  {
    v191 = xmmword_4AA550;
    v38 = 2;
  }
  v189[0] = v35;
  v189[1] = v35;
  v187 = v36;
  v188[0] = v37;
  v188[1] = v154;
  v188[2] = v36;
  v188[3] = v37;
  v188[4] = v154;
  v186[0] = v16;
  v122 = v186[0];
  v186[1] = v122;
  PlanePixelFormat = GetPlanePixelFormat((uint64_t)v35, 0);
  v125 = a5;
  v121 = v31;
  if (!PlanePixelFormat)
    goto LABEL_58;
  v40 = PlanePixelFormat;
  v41 = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v122);
  v152 = (void *)objc_claimAutoreleasedReturnValue(v41);
  v148 = objc_alloc_init((Class)MTLRenderPassDescriptor);
  v150 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  v42 = 0;
  v43.i64[0] = (uint64_t)v36;
  v43.i64[1] = (uint64_t)v37;
  v44 = 1;
  v156 = (int8x16_t)v43;
  v146 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v43, vdupq_n_s64(1uLL)), 1uLL);
  while (1)
  {
    v189[v42] = v40;
    if (v35 == (_BYTE *)&stru_1F8.addr + 7 || (v45 = v156, v35 == (_BYTE *)&stru_1F8.addr + 4))
    {
      if ((v44 & 1) != 0)
        v46 = -1;
      else
        v46 = 0;
      v45 = vbslq_s8((int8x16_t)vdupq_n_s64(v46), v156, v146);
    }
    v47 = (int8x16_t *)&v188[3 * v42 - 1];
    *v47 = v45;
    v47[1].i64[0] = (uint64_t)v154;
    objc_msgSend(v152, "setWidth:", v45.i64[0]);
    objc_msgSend(v152, "setHeight:", v188[3 * v42]);
    objc_msgSend(v152, "setPixelFormat:", v40);
    v48 = objc_msgSend(v141, "newTextureWithDescriptor:", v152);
    v49 = v186[v42];
    v186[v42] = v48;

    if (!v48)
    {
      v184 = CFSTR("GTErrorKeyMTLTextureDescriptor");
      v59 = SerializeMTLTextureDescriptorToDictionary(v152);
      v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
      v185 = v60;
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v185, &v184, 1));

      GTMTLReplay_fillError(a9, 101, v61);
      v50 = (uint64_t)v35;
      if (a9)
        v62 = *a9;
      else
        v62 = 0;
      v73 = v137;
      GTMTLReplay_handleNSError(v62);
      v74 = 1;
      goto LABEL_56;
    }
    v50 = (uint64_t)v35;
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "colorAttachments"));
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectAtIndexedSubscript:", v42));
    objc_msgSend(v52, "setTexture:", v48);

    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "colorAttachments"));
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectAtIndexedSubscript:", v42));
    objc_msgSend(v54, "setLoadAction:", 0);

    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "colorAttachments"));
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectAtIndexedSubscript:", v42));
    objc_msgSend(v56, "setStoreAction:", 1);

    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v150, "colorAttachments"));
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "objectAtIndexedSubscript:", v42));
    objc_msgSend(v58, "setPixelFormat:", v40);

    if ((v44 & 1) == 0)
      break;
    v35 = (char *)v50;
    v40 = GetPlanePixelFormat(v50, 1);
    v44 = 0;
    v42 = 1;
  }
  v63 = GTMTLReplayController_defaultLibrary(v141);
  v61 = (void *)objc_claimAutoreleasedReturnValue(v63);
  v64 = objc_msgSend(v61, "newFunctionWithName:", CFSTR("Harvest2PVertex"));
  objc_msgSend(v150, "setVertexFunction:", v64);

  v65 = CFSTR("Harvest2PFragmentDownloadYCbCr");
  if (((1 << (v50 + 12)) & 0x90000900009) == 0)
    v65 = CFSTR("Harvest2PFragmentDownload");
  if ((unint64_t)(v50 - 500) <= 0x2B)
    v66 = v65;
  else
    v66 = CFSTR("Harvest2PFragmentDownload");
  v67 = objc_msgSend(v61, "newFunctionWithName:", v66);
  objc_msgSend(v150, "setFragmentFunction:", v67);

  v172 = 0;
  v68 = objc_msgSend(v141, "newRenderPipelineStateWithDescriptor:error:", v150, &v172);
  v69 = v172;
  if (v69)
  {
    v70 = v69;
    v182 = NSUnderlyingErrorKey;
    v183 = v69;
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v183, &v182, 1));
    GTMTLReplay_fillError(a9, 101, v71);
    if (a9)
      v72 = *a9;
    else
      v72 = 0;
    GTMTLReplay_handleNSError(v72);

    v74 = 1;
    v73 = v137;
  }
  else
  {
    v73 = v137;
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "renderCommandEncoderWithDescriptor:", v148));
    objc_msgSend(v71, "setRenderPipelineState:", v68);
    objc_msgSend(v71, "setFragmentTexture:atIndex:", v122, 0);
    objc_msgSend(v71, "drawPrimitives:vertexStart:vertexCount:", 3, 0, 3);
    v74 = 0;
  }

LABEL_56:
  if (!v74)
  {
    v38 = 2;
    v31 = v121;
    v35 = (char *)v50;
LABEL_58:
    v123 = objc_msgSend(v31, "mipmapLevelCount");
    v138 = v35;
    if (objc_msgSend(v31, "textureType") == (char *)&dword_4 + 1
      || objc_msgSend(v31, "textureType") == (char *)&dword_4 + 2)
    {
      v128 = 6 * (_QWORD)objc_msgSend(v31, "arrayLength");
    }
    else
    {
      v128 = (uint64_t)objc_msgSend(v31, "arrayLength");
    }
    v76 = a6;
    v73 = v137;
    if (v123)
    {
      v149 = 0;
      v127 = (48 * (_WORD)v38 + 279) & 0x300;
      v145 = v38;
      v124 = v15;
      do
      {
        v77 = 0;
        v78 = 0;
        v79 = 0;
        v134 = 0;
        v135 = 0;
        v132 = 1;
        v133 = 0;
        v80 = v188;
        v136 = v127;
        do
        {
          if (v38 <= v76 || v76 == v77)
          {
            v181 = 0;
            v179 = 0u;
            v180 = 0u;
            v177 = 0u;
            v178 = 0u;
            v81 = v189[v77];
            v175 = 0u;
            v176 = 0u;
            *(_QWORD *)&v75 = GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v175, (uint64_t)v141, v81, *(v80 - 1), *v80, v80[1], (uint64_t)v140, v149, *((_QWORD *)&v191 + v77)).n128_u64[0];
            if (v77)
              v82 = v76 == v77;
            else
              v82 = 1;
            v83 = v133;
            if (v82)
              v83 = v175;
            v84 = v134;
            if (v82)
              v84 = *((_QWORD *)&v175 + 1);
            v133 = v83;
            v134 = v84;
            if (v82)
              v85 = v176;
            else
              v85 = v135;
            v79 += v180;
            v78 += *((_QWORD *)&v180 + 1);
            v135 = v85;
            v136 += v181;
            v86 = v132;
            if (v132 <= *((_QWORD *)&v179 + 1))
              v86 = *((_QWORD *)&v179 + 1);
            v132 = v86;
          }
          ++v77;
          v80 += 3;
        }
        while (v38 != v77);
        if (v128)
        {
          for (i = 0; i != v128; ++i)
          {
            v130 = v79;
            v131 = v78;
            v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "bufferWithLength:alignment:", v136, v132, v75));
            v88 = objc_msgSend(v87, "contents");
            v89 = v127;
            bzero(v88, v127);
            *(_QWORD *)v88 = 0x63617074757265;
            v88[2] = 65538;
            v88[3] = v127;
            v153 = v87;
            v143 = (char *)objc_msgSend(v87, "heapLocation");
            v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "blitCommandEncoder"));
            v144 = v88;
            v142 = v88 + 6;
            v90 = v186;
            v91 = (uint64_t *)&v191;
            v92 = v189;
            v93 = v188;
            v94 = v76;
            v95 = v38;
            do
            {
              if (v38 <= v76 || !v94)
              {
                v181 = 0;
                v179 = 0u;
                v180 = 0u;
                v177 = 0u;
                v178 = 0u;
                v175 = 0u;
                v176 = 0u;
                v96 = *v91;
                GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v175, (uint64_t)v141, *v92, *(v93 - 1), *v93, v93[1], (uint64_t)v140, v149, *v91);
                v97 = v176;
                v98 = v175;
                v155 = v180;
                v99 = v180;
                v100 = &v142[12 * *((_QWORD *)v144 + 2)];
                *(_QWORD *)v100 = v138;
                *(_OWORD *)(v100 + 2) = v98;
                *((_QWORD *)v100 + 3) = v97;
                *((_OWORD *)v100 + 2) = v99;
                ++*((_QWORD *)v144 + 2);
                v157 = *v90;
                v170 = v98;
                v171 = v97;
                v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "heapBuffer"));
                v168 = v173;
                v169 = v174;
                objc_msgSend(v147, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", v157, i, v149, &v168, &v170, v101, &v143[v89], v155, v96);

                if ((v190[1] & 0x2000) != 0)
                {
                  v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "commandBuffer"));
                  v158[0] = _NSConcreteStackBlock;
                  v158[1] = 3221225472;
                  v158[2] = __GTMTLReplayClient_harvestTexture_block_invoke;
                  v158[3] = &unk_725D38;
                  v159 = v153;
                  v160 = v89;
                  v165 = v179;
                  v166 = v180;
                  v167 = v181;
                  v161 = v175;
                  v162 = v176;
                  v163 = v177;
                  v164 = v178;
                  objc_msgSend(v102, "addCompletedHandler:", v158);

                }
                v89 += v181;
                v76 = a6;
                v38 = v145;
              }
              ++v90;
              ++v91;
              --v94;
              ++v92;
              v93 += 3;
              --v95;
            }
            while (v95);
            v15 = v124;
            if (v124)
            {
              v103 = v124;
              v104 = a8;
            }
            else
            {
              v104 = a8;
              v103 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLTexture-0x%llx-%llx-%llu-%llu-Fetch"), a4, a8, v149, i));
            }
            v73 = v137;
            v79 = v130;
            v78 = v131;
            v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "data"));
            objc_msgSend(v125[1], "setObject:forKeyedSubscript:", v105, v103);

            if (v104 && v125[2])
            {
              v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v104));
              objc_msgSend(v125[2], "setObject:forKeyedSubscript:", v106, v103);

            }
            v107 = objc_retainAutorelease(v103);
            v108 = (const char *)objc_msgSend(v107, "UTF8String");
            v109 = **v125;
            *((_QWORD *)v109 + 1) = 0;
            *((_QWORD *)v109 + 2) = 0;
            *((_QWORD *)v109 + 3) = 0;
            *(_QWORD *)v109 = 0xFFFFC09400000024;
            v109[8] = 0;
            strcpy((char *)v109 + 36, "C@6ulululU<b>ululul");
            *((_QWORD *)v109 + 7) = a4;
            *((_QWORD *)v109 + 8) = 0;
            *((_QWORD *)v109 + 9) = 0;
            *((_QWORD *)v109 + 10) = 0;
            *((_QWORD *)v109 + 11) = v133;
            *((_QWORD *)v109 + 12) = v134;
            *((_QWORD *)v109 + 13) = v135;
            *((_QWORD *)v109 + 14) = v149;
            *((_QWORD *)v109 + 15) = i;
            *v109 = 128;
            AppendString(v108, (int *)v109);
            v110 = *v109;
            v111 = ((_DWORD)v110 + 3) & 0xFFFFFFFC;
            bzero((char *)v109 + v110, v111 - v110);
            *v109 = v111;
            *(_QWORD *)((char *)v109 + v111) = v130;
            v112 = *v109 + 8;
            *v109 = v112;
            *(_QWORD *)((char *)v109 + v112) = v131;
            v113 = *v109 + 8;
            *v109 = v113;
            *(_QWORD *)((char *)v109 + v113) = v136;
            *v109 += 8;
            v114 = *v125;
            v115 = **v125;
            v115[1] = -10236;
            v116 = v114[2];
            v117 = *v115;
            if ((*((_BYTE *)v115 + 33) & 0x10) != 0)
            {
              v118 = *v115;
              v119 = v115;
              v38 = v145;
              do
              {
                v119 = (unsigned int *)((char *)v119 + v118);
                v118 = *v119;
                v117 += v118;
              }
              while ((*((_BYTE *)v119 + 33) & 0x20) == 0);
            }
            else
            {
              v38 = v145;
            }
            objc_msgSend(v116, "appendBytes:length:");

          }
        }
        ++v149;
      }
      while ((id)v149 != v123);
    }
  }
  for (j = 1; j != -1; --j)

}

void AddAttachmentToArray(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];

  v9 = a1;
  v10 = *find_entry(a4, a2, 8uLL, 0);
  if (v10)
    v11 = *(_QWORD *)(v10 + 32);
  else
    v11 = 0;
  v12 = *find_entry(a4, (_BYTE *)a2 + 8, 8uLL, 0);
  if (v12)
    v12 = *(_QWORD *)(v12 + 32);
  if (v11 && (*(_QWORD *)(v11 + 32) & 0x8000000000000000) == 0)
  {
    v23 = *a2;
    v13 = *(_QWORD *)(*(_QWORD *)(*find_entry(a5, &v23, 8uLL, 0) + 32) + 8);
    v26[0] = CFSTR("DependencyGraphRequestedTextureID");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v13));
    v27[0] = v14;
    v26[1] = CFSTR("DependencyGraphRequestedTextureAttachmentIndex");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
    v27[1] = v15;
    v26[2] = CFSTR("DependencyGraphRequestedTextureSlice");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 10)));
    v27[2] = v16;
    v26[3] = CFSTR("DependencyGraphRequestedTextureLevel");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 26)));
    v27[3] = v17;
    v26[4] = CFSTR("DependencyGraphRequestedTextureDepthPlane");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 9)));
    v27[4] = v18;
    v19 = v27;
    v20 = v26;
LABEL_12:
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v20, 5));
    objc_msgSend(v9, "addObject:", v22);

    goto LABEL_13;
  }
  if (v12 && (*(_QWORD *)(v12 + 32) & 0x8000000000000000) == 0)
  {
    v23 = a2[1];
    v21 = *(_QWORD *)(*(_QWORD *)(*find_entry(a5, &v23, 8uLL, 0) + 32) + 8);
    v24[0] = CFSTR("DependencyGraphRequestedTextureID");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v21));
    v25[0] = v14;
    v24[1] = CFSTR("DependencyGraphRequestedTextureAttachmentIndex");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
    v25[1] = v15;
    v24[2] = CFSTR("DependencyGraphRequestedTextureSlice");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 11)));
    v25[2] = v16;
    v24[3] = CFSTR("DependencyGraphRequestedTextureLevel");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 24)));
    v25[3] = v17;
    v24[4] = CFSTR("DependencyGraphRequestedTextureDepthPlane");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 8)));
    v25[4] = v18;
    v19 = v25;
    v20 = v24;
    goto LABEL_12;
  }
LABEL_13:

}

unint64_t GTMTLReplayHost_IsFuncEnumSampledEncoder(int a1, int a2, _BYTE *a3)
{
  int v6;
  int FuncEnumConstructorType;
  unint64_t result;

  if (!IsFuncEnumCreateCommandEncoder(a1))
  {
    if (a3)
    {
      result = 0;
      *a3 = 0;
      return result;
    }
    return 0;
  }
  if (a2)
    v6 = -16286;
  else
    v6 = -16351;
  if (v6 == a1)
    return 0;
  FuncEnumConstructorType = GetFuncEnumConstructorType(a1);
  if ((FuncEnumConstructorType - 17) >= 0x36)
    return 0;
  else
    return (0x21000000000811uLL >> (FuncEnumConstructorType - 17)) & 1;
}

id GTMTLReplayHost_generateDerivedDataPayload(uint64_t a1, int a2)
{
  id v4;
  uint64_t v5;
  const CATransform3D **v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  int FuncEnumConstructorType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *Object;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  unint64_t v64;
  id v65;
  int v66;
  void *v67;
  id v68;
  _QWORD *v69;
  id v70;
  uint64_t v71[2];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[12];
  __int128 v75;
  _QWORD v76[12];
  _QWORD v77[12];

  v68 = objc_alloc_init((Class)NSMutableArray);
  v4 = objc_alloc_init((Class)NSMutableArray);
  v63 = objc_alloc_init((Class)NSMutableDictionary);
  v65 = objc_alloc_init((Class)NSMutableDictionary);
  v59 = objc_alloc_init((Class)NSMutableDictionary);
  v60 = objc_alloc_init((Class)NSMutableArray);
  v62 = objc_alloc_init((Class)NSMutableArray);
  v61 = objc_alloc_init((Class)NSMutableArray);
  v58 = objc_alloc_init((Class)NSMutableArray);
  v57 = objc_alloc_init((Class)NSMutableArray);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = &CATransform3DIdentity_ptr;
  v67 = v4;
  if (*(int *)(v5 + 12) < 1)
  {
    v51 = 0;
    goto LABEL_55;
  }
  v55 = 0;
  v56 = a1;
  v7 = 0;
  v8 = 0;
  v69 = *(_QWORD **)(a1 + 120);
  v66 = a2;
  do
  {
    v9 = v8;
    v10 = 32 * v8;
    while (1)
    {
      v11 = *(_QWORD *)(v5 + 24);
      v12 = *(_QWORD *)(v11 + v10);
      v13 = v69[3];
      v14 = v13 + (v12 << 6);
      v15 = *(_DWORD *)(v14 + 8);
      if (v15 != -10224)
        break;
      v16 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedInteger:]((id)v6[288], "numberWithUnsignedInteger:", v7));
      objc_msgSend(v68, "addObject:", v16);

      v6 = &CATransform3DIdentity_ptr;
      v7 = 0;
      ++v9;
      v10 += 32;
      if (v9 >= *(int *)(v5 + 12))
        goto LABEL_53;
    }
    FuncEnumConstructorType = GetFuncEnumConstructorType(v15);
    if (FuncEnumConstructorType == 51)
    {
      if ((*(_BYTE *)(v13 + (v12 << 6) + 15) & 0x40) == 0 || (v18 = v11 + 32 * v9, *(_DWORD *)(v18 + 28) == -12543))
      {
        v22 = *(int *)(v11 + 32 * v9 + 20);
        v20 = 0;
        if ((int)v22 >= 1)
        {
          v23 = v11 + 60;
          do
          {
            v20 += GTMTLReplayHost_IsFuncEnumSampledEncoder(*(_DWORD *)(v23 + v10), v66, 0);
            v23 += 32;
            --v22;
          }
          while (v22);
        }
        goto LABEL_36;
      }
      goto LABEL_48;
    }
    if (FuncEnumConstructorType == 25)
    {
      if ((*(_BYTE *)(v13 + (v12 << 6) + 15) & 0x40) == 0 || (v18 = v11 + 32 * v9, *(_DWORD *)(v18 + 28) == -12544))
      {
        v19 = *(int *)(v11 + 32 * v9 + 20);
        if ((int)v19 < 1)
        {
          v20 = 0;
        }
        else
        {
          v20 = 0;
          v21 = v11 + 60;
          do
          {
            v20 += GTMTLReplayHost_IsFuncEnumSampledEncoder(*(_DWORD *)(v21 + v10), v66, 0);
            v21 += 32;
            --v19;
          }
          while (v19);
        }
LABEL_36:
        ++v7;
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v20));
        objc_msgSend(v67, "addObject:", v31);

        v6 = &CATransform3DIdentity_ptr;
        goto LABEL_50;
      }
      goto LABEL_48;
    }
    if (GTMTLReplayHost_IsFuncEnumSampledEncoder(v15, v66, v71))
    {
      v54 = (unint64_t *)(v11 + 32 * v9 + 8);
      v24 = v12 + 1;
      v64 = *v54;
      if (v24 >= *v54)
      {
        v25 = 0;
      }
      else
      {
        v25 = 0;
        do
        {
          v26 = v69[3] + (v24 << 6);
          v27 = *(_DWORD *)(v26 + 8);
          if (IsFuncEnumSampledCall(v27, v66))
          {
            ++v25;
          }
          else if (v27 >> 2 == 1073737833)
          {
            GetExecuteCommandsInBufferArgs((uint64_t)v71, v26, *(_QWORD *)(v56 + 16));
            v75 = 0u;
            memset(v74, 0, sizeof(v74));
            Object = GTMTLSMContext_getObject(**(_QWORD **)(v56 + 40), v71[0], *(_QWORD *)v26);
            GTMTLCreateIndirectCommandEncoder((uint64_t)v74, Object[13]);
            v29 = v72;
            if (v72)
            {
              v30 = v71[1] << 32;
              do
              {
                if (*(_QWORD *)(v73 + v74[1] + *((_QWORD *)&v75 + 1) * (v30 >> 32)))
                  ++v25;
                v30 += 0x100000000;
                --v29;
              }
              while (v29);
            }
            v64 = *v54;
          }
          ++v24;
        }
        while (v24 < v64);
      }
      v32 = objc_msgSend(v65, "count", v54);
      v33 = *(_QWORD *)v14 - *(_QWORD *)(v56 + 80);
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v25));
      objc_msgSend(v62, "addObject:", v34);

      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v25));
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v33));
      objc_msgSend(v63, "setObject:forKeyedSubscript:", v35, v36);

      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v25));
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v32));
      objc_msgSend(v65, "setObject:forKeyedSubscript:", v37, v38);

      v55 += v25;
      v39 = GetFuncEnumConstructorType(*(_DWORD *)(v14 + 8));
      if (((1 << v39) & 0x10220000) != 0)
        v40 = 1;
      else
        v40 = 2;
      if (v39 <= 0x1C)
        v41 = v40;
      else
        v41 = 2;
      v42 = v39;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v41));
      objc_msgSend(v61, "addObject:", v43);

      if ((v42 | 4) == 0x15)
      {
        v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v32));
        v45 = v60;
      }
      else
      {
        v46 = objc_msgSend(v59, "count");
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v25));
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v46));
        objc_msgSend(v59, "setObject:forKeyedSubscript:", v47, v48);

        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v25));
        objc_msgSend(v58, "addObject:", v49);

        v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v41));
        v45 = v57;
      }
      objc_msgSend(v45, "addObject:", v44);

      v18 = v11 + 32 * v9;
LABEL_48:
      LODWORD(v9) = *(_DWORD *)(v18 + 20) + v9;
    }
    v6 = &CATransform3DIdentity_ptr;
LABEL_50:
    v8 = v9 + 1;
  }
  while ((int)v9 + 1 < *(_DWORD *)(v5 + 12));
  if (v7)
  {
    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v7));
    objc_msgSend(v68, "addObject:", v50);

    v6 = &CATransform3DIdentity_ptr;
  }
LABEL_53:
  v4 = v67;
  v51 = v55;
LABEL_55:
  v76[0] = CFSTR("blitEncoderIndices");
  v76[1] = CFSTR("perCommandBufferEncoderCount");
  v77[0] = v60;
  v77[1] = v4;
  v76[2] = CFSTR("perEncoderDrawCallCount");
  v76[3] = CFSTR("perEncoderIndexDrawCallCount");
  v77[2] = v63;
  v77[3] = v65;
  v77[4] = v68;
  v76[4] = CFSTR("perFrameCommandBufferCount");
  v76[5] = CFSTR("totalDrawCallCount");
  v52 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedInteger:]((id)v6[288], "numberWithUnsignedInteger:", v51));
  v77[5] = v52;
  v77[6] = &off_739B08;
  v76[6] = CFSTR("uscSamplingPeriod");
  v76[7] = CFSTR("withoutBlitPerEncoderIndexDrawCallCount");
  v77[7] = v59;
  v77[8] = v62;
  v76[8] = CFSTR("activePerEncoderDrawCallCount");
  v76[9] = CFSTR("perEncoderKickCount");
  v77[9] = v61;
  v77[10] = v58;
  v76[10] = CFSTR("splitEncoderCommandCount");
  v76[11] = CFSTR("splitPerEncoderKickCount");
  v77[11] = v57;
  v70 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v77, v76, 12));

  return v70;
}

BOOL IsFuncEnumSampledCall(int a1, int a2)
{
  _BOOL8 result;
  int v5;

  if ((IsFuncEnumDrawCall(a1) & 1) != 0)
    return 1;
  result = 1;
  if (a1 <= -16138)
  {
    if (a1 == -16327)
      return result;
    v5 = -16220;
    goto LABEL_10;
  }
  if (((a1 + 16137) > 0x3B || ((1 << (a1 + 9)) & 0xC00000000000001) == 0)
    && a1 != -15486)
  {
    v5 = -15297;
LABEL_10:
    if (a1 != v5)
    {
      result = IsFuncEnumSampledBlitCall(a1);
      if (!result)
      {
        if (a2)
          return IsFuncEnumSampledBlitCallAGX(a1);
      }
    }
  }
  return result;
}

uint64_t RenderPassDescriptorContainsClear(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!a1)
    return 0;
  if (*(_QWORD *)(a1 + 680) && *(_BYTE *)(a1 + 697) == 2 || *(_QWORD *)(a1 + 728) && *(_BYTE *)(a1 + 745) == 2)
    return 1;
  v2 = 0;
  v1 = 1;
  while (!*(_QWORD *)(a1 + v2 + 8) || *(_BYTE *)(a1 + v2 + 25) != 2)
  {
    v2 += 64;
    if (v2 == 512)
      return 0;
  }
  return v1;
}

uint64_t SoftwareCounterForFunc(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  result = 0;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 <= -16219)
  {
    if (v4 == -16251)
      goto LABEL_15;
    if (v4 == -16249 || v4 == -16248)
      return *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)a1, *(unsigned __int8 *)(a1 + 13), a2) + 2);
  }
  else
  {
    if (v4 <= -16148)
    {
      if (v4 != -16218)
      {
        if (v4 != -16217)
          return result;
        return *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)a1, *(unsigned __int8 *)(a1 + 13), a2) + 2);
      }
LABEL_15:
      GTTraceFunc_argumentBytesWithMap((_QWORD *)a1, *(unsigned __int8 *)(a1 + 13), a2);
      return 0;
    }
    if (v4 == -16147 || v4 == -16145)
      goto LABEL_15;
  }
  return result;
}

uint64_t SoftwareCounterForIndirectCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = 0;
  switch(*(_QWORD *)(a3 + a1))
  {
    case 1:
      result = 0;
      break;
    case 2:
      result = *(_QWORD *)(a3 + a2 + 8);
      break;
    case 4:
      result = 0;
      break;
    case 8:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

id GTMTLReplayHost_collectSoftwareEncoderCounters(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t RenderPassDescriptor;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *Object;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[2];
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[12];
  __int128 v51;
  _QWORD v52[3];

  v39 = objc_alloc_init((Class)NSMutableArray);
  v43 = a1;
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_DWORD *)(v4 + 12);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(v43 + 120);
    v38 = v4;
    v45 = v7;
    v46 = *(_QWORD *)(v43 + 16);
    v42 = a2;
    do
    {
      v8 = *(_QWORD *)(v4 + 24);
      v9 = (_QWORD *)(v8 + 32 * v6);
      v10 = *(_QWORD *)(v7 + 24) + (*v9 << 6);
      if (GTMTLReplayHost_IsFuncEnumSampledEncoder(*(_DWORD *)(v10 + 8), a2, 0))
      {
        RenderPassDescriptor = GetRenderPassDescriptor((uint64_t *)v10, v46);
        v12 = RenderPassDescriptorContainsClear(RenderPassDescriptor);
        v13 = *(_DWORD *)v9;
        v15 = v9[1];
        v14 = v9 + 1;
        v16 = v13 + 1;
        v41 = v8;
        v40 = v12;
        if (v15 <= v13 + 1)
        {
          v19 = 0;
          v18 = 0;
        }
        else
        {
          v17 = v14;
          v18 = 0;
          v19 = 0;
          v20 = v16;
          v44 = v14;
          do
          {
            v21 = *(_QWORD *)(v7 + 24) + (v20 << 6);
            v22 = *(_DWORD *)(v21 + 8);
            if (IsFuncEnumSampledCall(v22, a2))
            {
              v19 += SoftwareCounterForFunc(v21, v46);
              v18 += v23;
            }
            else if (v22 >> 2 == 1073737833)
            {
              GetExecuteCommandsInBufferArgs((uint64_t)v47, v21, *(_QWORD *)(v43 + 16));
              v51 = 0u;
              memset(v50, 0, sizeof(v50));
              Object = GTMTLSMContext_getObject(**(_QWORD **)(v43 + 40), v47[0], *(_QWORD *)v21);
              GTMTLCreateIndirectCommandEncoder((uint64_t)v50, Object[13]);
              v25 = v48;
              if (v48)
              {
                v26 = v49;
                v27 = v51;
                v28 = v50[1];
                v29 = v47[1] << 32;
                do
                {
                  v30 = v26 + *((_QWORD *)&v27 + 1) * (v29 >> 32);
                  if (*(_QWORD *)(v30 + v28))
                  {
                    v19 += SoftwareCounterForIndirectCommand(v28, v27, v30);
                    v18 += v31;
                  }
                  v29 += 0x100000000;
                  --v25;
                }
                while (v25);
              }
              a2 = v42;
              v17 = v44;
              v7 = v45;
            }
            v20 = ++v16;
          }
          while (*v17 > (unint64_t)v16);
        }
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v40, v38));
        v52[0] = v32;
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v19));
        v52[1] = v33;
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v18));
        v52[2] = v34;
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v52, 3));
        objc_msgSend(v39, "addObject:", v35);

        v7 = v45;
        v6 += *(_DWORD *)(v41 + 32 * v6 + 20);
        v4 = v38;
        v5 = *(_DWORD *)(v38 + 12);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v36 = objc_msgSend(v39, "copy", v38);

  return v36;
}

id GTMTLReplayHost_rawCounters(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *i;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *j;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  v1 = a1;
  v2 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v1, "count"));
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = v1;
  v16 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v16)
  {
    v15 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v16; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v15)
          objc_enumerationMutation(v3);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), v15));
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("counters")));
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v18;
          do
          {
            for (j = 0; j != v8; j = (char *)j + 1)
            {
              if (*(_QWORD *)v18 != v9)
                objc_enumerationMutation(v6);
              v11 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)j);
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v11));

              if (!v12)
                objc_msgSend(v2, "addObject:", v11);
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          }
          while (v8);
        }

      }
      v16 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v16);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));
  return v13;
}

id GTMTLReplayHost_rawCountersToNormalizeSet(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];

  v1 = a1;
  v2 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v1, "count"));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v26;
    v18 = *(_QWORD *)v26;
    do
    {
      v7 = 0;
      v19 = v5;
      do
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v7)));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("subtype")));
        if (objc_msgSend(v9, "isEqualToString:", CFSTR("Normalize")))
        {
          v20 = v9;
          v23 = 0u;
          v24 = 0u;
          v21 = 0u;
          v22 = 0u;
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("counters")));
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
          if (v11)
          {
            v12 = v11;
            v13 = *(_QWORD *)v22;
            do
            {
              for (i = 0; i != v12; i = (char *)i + 1)
              {
                if (*(_QWORD *)v22 != v13)
                  objc_enumerationMutation(v10);
                v15 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
                v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v15));

                if (!v16)
                  objc_msgSend(v2, "addObject:", v15);
              }
              v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
            }
            while (v12);
          }

          v6 = v18;
          v5 = v19;
          v9 = v20;
        }

        v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v5);
  }

  return v2;
}

id GTMTLReplayHost_createPerCounterCommandData(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v3, "count"));
  v19 = v4;
  v6 = objc_msgSend(v4, "count");
  if (objc_msgSend(v3, "count"))
  {
    v7 = 0;
    do
    {
      v8 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v6);
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v9 = v19;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v21;
        do
        {
          v13 = 0;
          do
          {
            if (*(_QWORD *)v21 != v12)
              objc_enumerationMutation(v9);
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v13), "objectAtIndexedSubscript:", v7));
            objc_msgSend(v8, "addObject:", v14);

            v13 = (char *)v13 + 1;
          }
          while (v11 != v13);
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        }
        while (v11);
      }

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v7));
      v16 = objc_msgSend(v8, "copy");
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v16, v15);

      ++v7;
    }
    while (v7 < (unint64_t)objc_msgSend(v3, "count"));
  }
  v17 = objc_msgSend(v5, "copy");

  return v17;
}

id GTMTLReplayClient_getThumbnailInfo(uint64_t a1, uint64_t a2, unint64_t *a3, int a4, void *a5, void *a6, uint64_t a7)
{
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSNumber *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *InclusiveRange;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[4];
  _QWORD v37[4];

  LODWORD(v22) = a4;
  v12 = a5;
  v13 = a6;
  v32 = 0;
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  GTMTLSMContext_getTextureDescriptor(*(uint64_t **)(a2 + 40), a1, *a3, (uint64_t)v30);
  v14 = *(_QWORD *)(a2 + 8);
  v33 = a1;
  v15 = *(_QWORD *)(*(_QWORD *)(*find_entry(v14, &v33, 8uLL, 0) + 32) + 8);
  v37[0] = &off_739B20;
  v36[0] = CFSTR("type");
  v36[1] = CFSTR("object");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v15));
  v37[1] = v16;
  v37[2] = v12;
  v36[2] = CFSTR("resolution");
  v36[3] = CFSTR("format");
  v17 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", ResizeFormat(WORD1(v31)));
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v37[3] = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 4));

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "count")));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("format")));
  v22 = (int)v22;
  InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(a7 + 12), *(_QWORD **)(a7 + 24), (int)v22);
  if (InclusiveRange)
  {
    v24 = InclusiveRange;
    while (GetFuncEnumConstructorType(*((_DWORD *)v24 + 7)) != 25)
    {
      v25 = *((unsigned int *)v24 + 4);
      if ((_DWORD)v25)
        v24 -= 4 * v25;
      else
        v24 = 0;
      if (!v24)
        goto LABEL_8;
    }
    v26 = objc_msgSend(v19, "mutableCopy");
    v22 = v24[1];
  }
  else
  {
LABEL_8:
    v26 = objc_msgSend(v19, "mutableCopy");
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v22 + 1));
  objc_msgSend(v26, "setObject:forKeyedSubscript:", v27, CFSTR("functionIndex"));

  objc_msgSend(v26, "setObject:forKeyedSubscript:", v20, CFSTR("DependencyGraphRequestedThumbnailTextureID"));
  objc_msgSend(v13, "addObject:", v26);

  v34[0] = CFSTR("object");
  v34[1] = CFSTR("format");
  v35[0] = v20;
  v35[1] = v21;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 2));

  return v28;
}

uint64_t ResizeFormat(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result + 6;
  if ((unint64_t)(result - 250) > 0xC)
    goto LABEL_6;
  if (((1 << v1) & 0x425) != 0)
    return 252;
  if (((1 << v1) & 0x1808) != 0)
    return 253;
LABEL_6:
  v2 = 10;
  v3 = 90;
  if ((unint64_t)(result - 2) < 0x7C)
    v3 = result;
  if (result != 1)
    v2 = v3;
  if ((unint64_t)(result - 552) >= 4)
    return v2;
  return result;
}

id GTMTLReplayClient_generateThumbnails(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  void *i;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  char *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  id ThumbnailInfo;
  void *v30;
  void *v31;
  uint64_t *v32;
  _QWORD *Object;
  int v34;
  _QWORD *InclusiveRange;
  _QWORD *v36;
  int v37;
  uint64_t v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned __int16 *v45;
  BOOL v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned __int8 *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  NSNumber *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  NSNumber *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  NSNumber *v87;
  void *v88;
  void *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  void *v100;
  id v101;
  unint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  _OWORD *v110;
  void *v111;
  id v112;
  int *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t *v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  id v123;
  id v124;
  unint64_t *v125;
  void *v126;
  unsigned __int16 *v127;
  uint64_t v128;
  id v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  _QWORD v141[2];
  _QWORD v142[2];
  _QWORD v143[8];
  _QWORD v144[8];
  _QWORD v145[8];
  _QWORD v146[8];
  _QWORD v147[8];
  _QWORD v148[8];
  _BYTE v149[128];

  v5 = a2;
  v124 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("attachments")));
  v111 = v5;
  v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("resolution")));
  v115 = a1[2];
  v7 = a1[15];
  v122 = a1;
  v119 = a1[14];
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v136, v149, 16);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = *(_QWORD *)v137;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v137 != v12)
          objc_enumerationMutation(v8);
        v14 = objc_msgSend(&off_738BB0, "indexOfObject:", *(_QWORD *)(*((_QWORD *)&v136 + 1) + 8 * (_QWORD)i));
        v15 = 1 << (char)v14;
        if (v14 == (id)0x7FFFFFFFFFFFFFFFLL)
          v15 = 0;
        v11 |= v15;
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v136, v149, 16);
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }

  v118 = objc_msgSend(v8, "containsObject:", CFSTR("All"));
  v123 = objc_alloc_init((Class)NSMutableDictionary);
  v129 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 8);
  v16 = (uint64_t)v122;
  v17 = v115;
  if (*(int *)(v7 + 12) >= 1)
  {
    v18 = 0;
    v19 = 0;
    v110 = (__int128 *)((char *)&v132 + 8);
    v112 = v8;
    v120 = v7;
    while (1)
    {
      v20 = *(_QWORD *)(v7 + 24);
      v21 = v20 + (v18 << 6);
      v23 = (int *)(v21 + 8);
      v22 = *(_DWORD *)(v21 + 8);
      if (v22 > -16134)
        break;
      if (v22 > -16360)
      {
        if (v22 != -16359 && v22 != -16358)
          goto LABEL_38;
        goto LABEL_32;
      }
      if (v22 == -20474)
      {
        v32 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v20 + (v18 << 6) + 13), v17);
        Object = GTMTLSMContext_getObject(**(_QWORD **)(v16 + 40), *v32, *(_QWORD *)v21);
        if (Object)
        {
          v27 = Object[9];
          goto LABEL_35;
        }
      }
      else if (v22 == -20457)
      {
        v25 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v20 + (v18 << 6) + 13), v17);
        v26 = GTMTLSMContext_getObject(**(_QWORD **)(v16 + 40), *v25, *(_QWORD *)v21);
        if (v26)
        {
          v27 = v26[12];
LABEL_35:
          ThumbnailInfo = GTMTLReplayClient_getThumbnailInfo(v27, v16, (unint64_t *)v21, v18, v126, v124, v119);
          v30 = (void *)objc_claimAutoreleasedReturnValue(ThumbnailInfo);
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18));
          objc_msgSend(v123, "setObject:forKeyedSubscript:", v30, v31);

          goto LABEL_118;
        }
      }
LABEL_38:
      v125 = (unint64_t *)v21;
      v34 = *v23;
      if ((IsFuncEnumDrawCall(*v23) & 1) != 0 || (v34 & 0xFFFFFFFC) == 0xFFFFC1A4)
      {
        if (v19 && *v19 <= v18 && v19[1] >= v18)
          goto LABEL_108;
        InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(v119 + 12), *(_QWORD **)(v119 + 24), v18);
        if (InclusiveRange)
        {
          v36 = InclusiveRange;
          while (1)
          {
            v37 = *((_DWORD *)v36 + 7);
            if (v37 == -16353 || v37 == -16351)
              break;
            v39 = *((unsigned int *)v36 + 4);
            if ((_DWORD)v39)
              v40 = v36 == 0;
            else
              v40 = 1;
            v36 -= 4 * v39;
            if (v40)
              goto LABEL_54;
          }
          bzero(&v130, 0x2B90uLL);
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v130, (uint64_t *)(*(_QWORD *)(v7 + 24) + (*v36 << 6)), v17);
          v116 = v36;
          v113 = v23;
          v114 = v18;
          if ((_DWORD)v130 == 70 || (_DWORD)v130 == 65)
            v41 = v134;
          else
            v41 = 0;
          objc_msgSend(v129, "removeAllObjects", v110);
          v42 = 0;
          v43 = 0;
          v121 = v41;
          do
          {
            if (((v11 >> v43) & 1) != 0)
            {
              v44 = &v41[v42];
              if (v41[v42 + 1])
              {
                v45 = (unsigned __int16 *)(v44 + 2);
                v46 = *v44 == 0;
                if (*v44)
                  v47 = *v44;
                else
                  v47 = v41[v42 + 1];
                v133 = 0;
                v131 = 0u;
                v132 = 0u;
                v130 = 0u;
                if (v46)
                  v48 = (unsigned __int16 *)v44 + 11;
                else
                  v48 = (unsigned __int16 *)v44 + 10;
                if (v46)
                  v49 = (unsigned __int8 *)(v44 + 3);
                else
                  v49 = (unsigned __int8 *)v44 + 26;
                v50 = (unsigned __int16 *)v44 + 9;
                if (v46)
                  v50 = v45;
                v127 = v50;
                GTMTLSMContext_getTextureDescriptor((uint64_t *)v122[5], v47, *v125, (uint64_t)&v130);
                v51 = v122[1];
                v140 = v47;
                v52 = *(_QWORD *)(*(_QWORD *)(*find_entry(v51, &v140, 8uLL, 0) + 32) + 8);
                v148[0] = &off_739B20;
                v147[0] = CFSTR("type");
                v147[1] = CFSTR("DependencyGraphRequestedTextureAttachmentIndex");
                v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v43));
                v148[1] = v53;
                v147[2] = CFSTR("object");
                v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v52));
                v148[2] = v54;
                v148[3] = v126;
                v147[3] = CFSTR("resolution");
                v147[4] = CFSTR("DependencyGraphRequestedTextureSlice");
                v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v48));
                v148[4] = v55;
                v147[5] = CFSTR("DependencyGraphRequestedTextureLevel");
                v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v49));
                v148[5] = v56;
                v147[6] = CFSTR("DependencyGraphRequestedTextureDepthPlane");
                v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v127));
                v148[6] = v57;
                v147[7] = CFSTR("format");
                v58 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", ResizeFormat(WORD1(v132)));
                v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
                v148[7] = v59;
                v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v148, v147, 8));
                objc_msgSend(v129, "addObject:", v60);

                v41 = v121;
                v7 = v120;

                if (!v118)
                {
                  v8 = v112;
                  v16 = (uint64_t)v122;
                  v18 = v114;
                  v17 = v115;
                  v19 = v116;
                  goto LABEL_107;
                }
              }
            }
            ++v43;
            v42 += 8;
          }
          while (v42 != 64);
          v19 = v116;
          if ((v11 & 0x100) == 0 || !v41[85])
            goto LABEL_90;
          v61 = v41[84];
          v62 = v61 ? v41[84] : v41[85];
          v133 = 0;
          v131 = 0u;
          v132 = 0u;
          v130 = 0u;
          v63 = v61 ? 692 : 694;
          v64 = v61 ? 698 : 696;
          v65 = v61 ? 690 : 688;
          GTMTLSMContext_getTextureDescriptor((uint64_t *)v122[5], v62, *v125, (uint64_t)&v130);
          v66 = v122[1];
          v140 = v62;
          v67 = *(_QWORD *)(*(_QWORD *)(*find_entry(v66, &v140, 8uLL, 0) + 32) + 8);
          v145[0] = CFSTR("type");
          v145[1] = CFSTR("DependencyGraphRequestedTextureAttachmentIndex");
          v146[0] = &off_739B20;
          v146[1] = &off_739B38;
          v145[2] = CFSTR("object");
          v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v67));
          v146[2] = v68;
          v146[3] = v126;
          v145[3] = CFSTR("resolution");
          v145[4] = CFSTR("DependencyGraphRequestedTextureSlice");
          v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int16 *)((char *)v121 + v63)));
          v146[4] = v69;
          v145[5] = CFSTR("DependencyGraphRequestedTextureLevel");
          v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned __int8 *)v121 + v64)));
          v146[5] = v70;
          v145[6] = CFSTR("DependencyGraphRequestedTextureDepthPlane");
          v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int16 *)((char *)v121 + v65)));
          v146[6] = v71;
          v145[7] = CFSTR("format");
          v72 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", ResizeFormat(WORD1(v132)));
          v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
          v146[7] = v73;
          v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v146, v145, 8));
          objc_msgSend(v129, "addObject:", v74);

          v7 = v120;
          v41 = v121;

          v19 = v116;
          if (!v118)
          {
            v8 = v112;
            v16 = (uint64_t)v122;
            v18 = v114;
            v17 = v115;
          }
          else
          {
LABEL_90:
            v8 = v112;
            v16 = (uint64_t)v122;
            if ((v11 & 0x200) != 0 && v41[91])
            {
              v75 = v41[90];
              v76 = v41;
              if (v75)
                v77 = v41[90];
              else
                v77 = v41[91];
              v133 = 0;
              v131 = 0u;
              v132 = 0u;
              v130 = 0u;
              if (v75)
                v78 = 740;
              else
                v78 = 742;
              if (v75)
                v79 = 746;
              else
                v79 = 744;
              v80 = 738;
              if (!v75)
                v80 = 736;
              v128 = v80;
              GTMTLSMContext_getTextureDescriptor((uint64_t *)v122[5], v77, *v125, (uint64_t)&v130);
              v81 = v122[1];
              v140 = v77;
              v82 = *(_QWORD *)(*(_QWORD *)(*find_entry(v81, &v140, 8uLL, 0) + 32) + 8);
              v143[0] = CFSTR("type");
              v143[1] = CFSTR("DependencyGraphRequestedTextureAttachmentIndex");
              v144[0] = &off_739B20;
              v144[1] = &off_739B50;
              v143[2] = CFSTR("object");
              v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v82));
              v144[2] = v83;
              v144[3] = v126;
              v143[3] = CFSTR("resolution");
              v143[4] = CFSTR("DependencyGraphRequestedTextureSlice");
              v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int16 *)((char *)v76 + v78)));
              v144[4] = v84;
              v143[5] = CFSTR("DependencyGraphRequestedTextureLevel");
              v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned __int8 *)v76 + v79)));
              v144[5] = v85;
              v143[6] = CFSTR("DependencyGraphRequestedTextureDepthPlane");
              v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int16 *)((char *)v76 + v128)));
              v144[6] = v86;
              v143[7] = CFSTR("format");
              v87 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", ResizeFormat(WORD1(v132)));
              v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
              v144[7] = v88;
              v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v144, v143, 8));
              objc_msgSend(v129, "addObject:", v89);

              v7 = v120;
              v16 = (uint64_t)v122;

              v19 = v116;
            }
            v18 = v114;
            v17 = v115;
          }
LABEL_107:
          v23 = v113;
LABEL_108:
          if (objc_msgSend(v129, "count", v110))
          {
            v117 = v19;
            if (*v23 >> 2 == 1073737833)
            {
              GetExecuteCommandsInBufferArgs((uint64_t)&v130, *(_QWORD *)(v7 + 24) + (v18 << 6), *(_QWORD *)(v16 + 16));
              v110[5] = 0u;
              v110[6] = 0u;
              v110[3] = 0u;
              v110[4] = 0u;
              v110[1] = 0u;
              v110[2] = 0u;
              *v110 = 0u;
              v90 = GTMTLSMContext_getObject(**(_QWORD **)(v16 + 40), v130, *v125);
              GTMTLCreateIndirectCommandEncoder((uint64_t)v110, v90[13]);
              v91 = v131;
              if ((_QWORD)v131)
              {
                v92 = 0;
                v93 = v135;
                v94 = *((_QWORD *)&v130 + 1) << 32;
                v95 = (_QWORD *)(*((_QWORD *)&v131 + 1) + v133 + v135 * *((_QWORD *)&v130 + 1));
                do
                {
                  if (*v95)
                  {
                    v96 = v18;
                    v97 = v94 | v18;
                    v98 = _processThumbnailAttachments(v124, v129, v97);
                    v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
                    v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v97));
                    objc_msgSend(v123, "setObject:forKeyedSubscript:", v99, v100);

                    v18 = v96;
                  }
                  v95 = (_QWORD *)((char *)v95 + v93);
                  ++v92;
                  v94 += 0x100000000;
                }
                while (v91 > v92);
              }
              v16 = (uint64_t)v122;
              v17 = v115;
              v7 = v120;
            }
            else
            {
              v101 = _processThumbnailAttachments(v124, v129, v18);
              v102 = v18;
              v103 = (void *)objc_claimAutoreleasedReturnValue(v101);
              v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v102));
              objc_msgSend(v123, "setObject:forKeyedSubscript:", v103, v104);

              v18 = v102;
            }
            v19 = v117;
          }
          goto LABEL_118;
        }
LABEL_54:
        v19 = 0;
      }
LABEL_118:
      if ((uint64_t)++v18 >= *(int *)(v7 + 12))
        goto LABEL_119;
    }
    if (v22 <= -7159)
    {
      if (v22 != -16133)
      {
        if (v22 == -15310)
        {
          v27 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v20 + (v18 << 6) + 13), v17)+ 1);
          if (v27)
            goto LABEL_35;
        }
        goto LABEL_38;
      }
LABEL_32:
      v24 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v20 + (v18 << 6) + 13), v17) + 8;
    }
    else
    {
      if (v22 != -7156 && v22 != -7157 && v22 != -7158)
        goto LABEL_38;
      v24 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v21, *(unsigned __int8 *)(v20 + (v18 << 6) + 13), v17);
    }
    v28 = GTMTLSMContext_getObject(**(_QWORD **)(v16 + 40), *(_QWORD *)v24, *(_QWORD *)v21);
    if (v28)
    {
      v27 = v28[6];
      goto LABEL_35;
    }
    goto LABEL_38;
  }
LABEL_119:
  v105 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)&v130 = 1;
  v106 = *(_QWORD *)(*(_QWORD *)(*find_entry(v105, &v130, 8uLL, 0) + 32) + 8);
  v141[0] = CFSTR("device");
  v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v106));
  v141[1] = CFSTR("object");
  v142[0] = v107;
  v142[1] = v123;
  v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v142, v141, 2));

  return v108;
}

id _processThumbnailAttachments(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id obj;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[2];
  _QWORD v34[2];
  _BYTE v35[128];

  v5 = a1;
  v6 = a2;
  v26 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v6, "count"));
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v24 = *(_QWORD *)v28;
    v25 = a3 + 1;
    do
    {
      v10 = 0;
      v11 = v9;
      do
      {
        if (*(_QWORD *)v28 != v24)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureAttachmentIndex")));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("format")));
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "count")));
        v33[0] = CFSTR("object");
        v33[1] = CFSTR("format");
        v34[0] = v15;
        v34[1] = v14;
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v34, v33, 2));

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&off_738BB0, "objectAtIndexedSubscript:", objc_msgSend(v13, "unsignedIntegerValue")));
        objc_msgSend(v26, "setObject:forKeyedSubscript:", v9, v16);

        v17 = objc_msgSend(v12, "mutableCopy");
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v25));
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, CFSTR("functionIndex"));

        objc_msgSend(v17, "setObject:forKeyedSubscript:", v15, CFSTR("DependencyGraphRequestedThumbnailTextureID"));
        objc_msgSend(v5, "addObject:", v17);

        v10 = (char *)v10 + 1;
        v11 = v9;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("object")));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("format")));
  v31[0] = CFSTR("object");
  v31[1] = CFSTR("format");
  v32[0] = v19;
  v32[1] = v20;
  v31[2] = CFSTR("target");
  v32[2] = v26;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 3));

  return v21;
}

id GTMTLReplayClient_generateDependencyGraphThumbnails(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  void *i;
  void *v15;
  void *v16;
  uint64_t *AliasStream;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id NSError;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  NSNumber *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *j;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v46;
  id obj;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  char *v58;
  char *v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[2];
  _QWORD v83[2];
  _BYTE v84[128];
  _QWORD v85[5];
  _QWORD v86[5];
  _QWORD v87[2];
  _QWORD v88[2];
  _QWORD v89[2];
  _QWORD v90[2];
  _BYTE v91[128];
  _BYTE v92[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTexturesForThumbnail")));
  v46 = v5;
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("resolution")));
  v49 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v7, "count"));
  v50 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allKeys"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sortedArrayUsingSelector:", "compare:"));

  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  obj = v9;
  v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v92, 16);
  if (v51)
  {
    v48 = *(_QWORD *)v79;
    v55 = a1;
    v56 = v6;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v79 != v48)
          objc_enumerationMutation(obj);
        v53 = v10;
        v11 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * v10);
        v12 = (char *)objc_msgSend(v11, "unsignedLongLongValue");
        v52 = v11;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", v11));
        v60 = objc_alloc_init((Class)NSMutableArray);
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v54 = v13;
        v62 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v74, v91, 16);
        if (v62)
        {
          v61 = *(_QWORD *)v75;
          v58 = v12 + 1;
          v59 = v12;
          do
          {
            for (i = 0; i != v62; i = (char *)i + 1)
            {
              if (*(_QWORD *)v75 != v61)
                objc_enumerationMutation(v54);
              v15 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)i);
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureID")));
              AliasStream = (uint64_t *)GetAliasStream(*(_QWORD *)(a1 + 24), (uint64_t)objc_msgSend(v16, "unsignedLongLongValue"), (unint64_t)&v12[*(_QWORD *)(a1 + 80)]);
              if (AliasStream)
                v18 = *AliasStream;
              else
                v18 = 0;
              v73 = 0;
              v71 = 0u;
              v72 = 0u;
              v70 = 0u;
              GTMTLSMContext_getTextureDescriptor(*(uint64_t **)(a1 + 40), v18, (unint64_t)&v12[*(_QWORD *)(a1 + 80)], (uint64_t)&v70);
              if (DWORD2(v71))
              {
                v19 = WORD1(v72);
                if ((unint64_t)WORD1(v72) - 261 >= 2)
                {
                  if (WORD1(v72) == 1)
                    v19 = 10;
                }
                else
                {
                  v19 = 253;
                }
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("DependencyGraphRequestedTextureAttachmentIndex")));
                v64 = v24;
                if (v24 && (v19 == 260 || v19 == 255))
                {
                  v25 = v6;
                  if (objc_msgSend(v24, "unsignedIntegerValue") == (char *)&dword_8 + 1)
                  {
                    WORD1(v72) = 253;
                    v19 = 253;
                  }
                }
                else
                {
                  v25 = v6;
                }
                v26 = objc_msgSend(v15, "mutableCopy");
                v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v25, "count")));
                v88[0] = v27;
                v87[0] = CFSTR("DependencyGraphRequestedThumbnailTextureID");
                v87[1] = CFSTR("format");
                v28 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", ResizeFormat(v19));
                v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
                v88[1] = v29;
                v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v88, v87, 2));
                objc_msgSend(v26, "addEntriesFromDictionary:", v30);

                v63 = v26;
                objc_msgSend(v60, "addObject:", v26);
                v85[0] = CFSTR("type");
                v85[1] = CFSTR("object");
                v86[0] = &off_739B20;
                v65 = v16;
                v86[1] = v16;
                v85[2] = CFSTR("functionIndex");
                v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v58));
                v86[2] = v31;
                v86[3] = v57;
                v85[3] = CFSTR("resolution");
                v85[4] = CFSTR("DependencyGraphRequestedThumbnailTextureID");
                v86[4] = v27;
                v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v86, v85, 5));
                v33 = objc_msgSend(v32, "mutableCopy");

                v68 = 0u;
                v69 = 0u;
                v66 = 0u;
                v67 = 0u;
                v34 = objc_msgSend(&off_738BC8, "countByEnumeratingWithState:objects:count:", &v66, v84, 16);
                if (v34)
                {
                  v35 = v34;
                  v36 = *(_QWORD *)v67;
                  do
                  {
                    for (j = 0; j != v35; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v67 != v36)
                        objc_enumerationMutation(&off_738BC8);
                      v38 = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)j);
                      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v38));
                      if (v39)
                        objc_msgSend(v33, "setObject:forKeyedSubscript:", v39, v38);

                    }
                    v35 = objc_msgSend(&off_738BC8, "countByEnumeratingWithState:objects:count:", &v66, v84, 16);
                  }
                  while (v35);
                }
                v6 = v56;
                objc_msgSend(v56, "addObject:", v33);

                a1 = v55;
                v12 = v59;
                v23 = v64;
                v16 = v65;
              }
              else
              {
                v90[0] = CFSTR("Failed to generate dependency graph thumbnail");
                v89[0] = NSLocalizedDescriptionKey;
                v89[1] = CFSTR("GTErrorKeyTraceStreamID");
                v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v18));
                v90[1] = v20;
                v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v90, v89, 2));
                NSError = MakeNSError(101, v21);
                v23 = (id)objc_claimAutoreleasedReturnValue(NSError);

                GTMTLReplay_handleNSError(v23);
              }

            }
            v62 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v74, v91, 16);
          }
          while (v62);
        }

        objc_msgSend(v49, "setObject:forKeyedSubscript:", v60, v52);
        v10 = v53 + 1;
      }
      while ((id)(v53 + 1) != v51);
      v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v92, 16);
    }
    while (v51);
  }

  v40 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v70 = 1;
  v41 = *(_QWORD *)(*(_QWORD *)(*find_entry(v40, &v70, 8uLL, 0) + 32) + 8);
  v82[0] = CFSTR("device");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v41));
  v82[1] = CFSTR("object");
  v83[0] = v42;
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v49));
  v83[1] = v43;
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v83, v82, 2));

  return v44;
}

void GTMTLReplayErrorHandling_initWithObserver(id obj)
{
  objc_storeStrong((id *)&_observer, obj);
}

id GTMTLReplay_dictionaryFromCommandBuffer(void *a1)
{
  id v1;
  const CATransform3D **v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  void *j;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  uint64_t v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  id v106;
  id obj;
  id obja;
  _QWORD v109[10];
  _QWORD v110[10];
  const __CFString *v111;
  const __CFString *v112;
  const __CFString *v113;
  const __CFString *v114;
  const __CFString *v115;
  const __CFString *v116;
  const __CFString *v117;
  const __CFString *v118;
  const __CFString *v119;
  const __CFString *v120;
  const __CFString *v121;
  void *v122;
  void *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _QWORD v149[4];
  _QWORD v150[4];

  v1 = a1;
  v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "error"));
  v109[0] = CFSTR("retainedReferences");
  v2 = &CATransform3DIdentity_ptr;
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v1, "retainedReferences")));
  v110[0] = v77;
  v109[1] = CFSTR("label");
  v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "label"));
  if (v76)
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "label"));
  else
    v3 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v75 = (void *)v3;
  v110[1] = v3;
  v109[2] = CFSTR("kernelStartTime");
  objc_msgSend(v1, "kernelStartTime");
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v110[2] = v74;
  v109[3] = CFSTR("kernelEndTime");
  objc_msgSend(v1, "kernelEndTime");
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v110[3] = v73;
  v109[4] = CFSTR("GPUStartTime");
  objc_msgSend(v1, "GPUStartTime");
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v110[4] = v72;
  v109[5] = CFSTR("GPUEndTime");
  objc_msgSend(v1, "GPUEndTime");
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v110[5] = v71;
  v109[6] = CFSTR("status");
  v79 = v1;
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "status")));
  v110[6] = v70;
  v109[7] = CFSTR("error");
  if (v78)
  {
    v4 = v78;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("MTLCommandBufferEncoderInfoErrorKey")));

    v111 = CFSTR("domain");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain"));
    v122 = v7;
    v112 = CFSTR("code");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v4, "code")));
    v123 = v8;
    v113 = CFSTR("localizedDescription");
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
    v10 = (void *)v9;
    v124 = v9;
    v114 = CFSTR("commandBufferEncoderInfo");
    if (v6)
    {
      v97 = (void *)v9;
      v99 = v8;
      v101 = v7;
      v103 = v6;
      v105 = v4;
      v11 = v6;
      v12 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v11, "count"));
      v133 = 0u;
      v134 = 0u;
      v135 = 0u;
      v136 = 0u;
      obj = v11;
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v133, &v141, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v134;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(_QWORD *)v134 != v15)
              objc_enumerationMutation(obj);
            v17 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * (_QWORD)i);
            *(_QWORD *)&v137 = CFSTR("label");
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "label"));
            if (v18)
              v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "label"));
            else
              v19 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
            v20 = (void *)v19;
            *(_QWORD *)&v145 = v19;
            *((_QWORD *)&v137 + 1) = CFSTR("debugSignposts");
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "debugSignposts"));
            if (v21)
              v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "debugSignposts"));
            else
              v22 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
            v23 = (void *)v22;
            *((_QWORD *)&v145 + 1) = v22;
            *(_QWORD *)&v138 = CFSTR("errorState");
            v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v17, "errorState")));
            *(_QWORD *)&v146 = v24;
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v145, &v137, 3));
            objc_msgSend(v12, "addObject:", v25);

          }
          v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v133, &v141, 16);
        }
        while (v14);
      }

      v26 = objc_msgSend(v12, "copy");
      v2 = &CATransform3DIdentity_ptr;
      v6 = v103;
      v4 = v105;
      v8 = v99;
      v7 = v101;
      v10 = v97;
    }
    else
    {
      v26 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    }
    v125 = v26;
    v27 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v122, &v111, 4));

  }
  else
  {
    v27 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  }
  v69 = (void *)v27;
  v110[7] = v27;
  v109[8] = CFSTR("errorOptions");
  v68 = (void *)objc_claimAutoreleasedReturnValue(-[CATransform3D numberWithUnsignedInteger:]((id)v2[288], "numberWithUnsignedInteger:", objc_msgSend(v79, "errorOptions")));
  v110[8] = v68;
  v109[9] = CFSTR("logs");
  v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "logs"));
  v82 = objc_alloc_init((Class)NSMutableArray);
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = 0u;
  v80 = v28;
  v83 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v137, &v133, 16);
  if (v83)
  {
    v81 = *(_QWORD *)v138;
    do
    {
      v29 = 0;
      do
      {
        if (*(_QWORD *)v138 != v81)
          objc_enumerationMutation(v80);
        v30 = *(void **)(*((_QWORD *)&v137 + 1) + 8 * v29);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "function"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "buffer"));
        v95 = v29;
        if ((objc_opt_respondsToSelector(v30, "encoderIdentifier") & 1) != 0)
          v33 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v30, "performSelector:", "encoderIdentifier")));
        else
          v33 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
        v98 = (void *)v33;
        if ((objc_opt_respondsToSelector(v30, "encoderLabel") & 1) != 0)
          v34 = objc_msgSend(v30, "performSelector:", "encoderLabel");
        else
          v34 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
        v35 = (uint64_t)v34;
        v93 = v34;
        v111 = CFSTR("type");
        v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v30, "type")));
        v122 = v92;
        v112 = CFSTR("encoderMethodIdentifier");
        v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v30, "encoderMethodIdentifier")));
        v123 = v91;
        v124 = v35;
        v113 = CFSTR("encoderLabel");
        v114 = CFSTR("encoderIdentifier");
        v125 = v98;
        v115 = CFSTR("function");
        v94 = v31;
        v96 = v32;
        if (v31)
        {
          v36 = v31;
          *(_QWORD *)&v145 = CFSTR("label");
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "label"));
          if (v37)
            v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "label"));
          else
            v38 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
          v40 = (void *)v38;
          v141 = v38;
          *((_QWORD *)&v145 + 1) = CFSTR("functionType");
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v36, "functionType")));
          v142 = (uint64_t)v41;
          *(_QWORD *)&v146 = CFSTR("name");
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "name"));
          v143 = v42;
          v39 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v141, &v145, 3));

          v32 = v96;
        }
        else
        {
          v39 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
        }
        v126 = v39;
        v116 = CFSTR("logMessage");
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "description"));
        if (v89)
          v43 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "description"));
        else
          v43 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
        v88 = (void *)v43;
        v127 = v43;
        v117 = CFSTR("addressSpace");
        v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v30, "addressSpace")));
        v128 = v87;
        v118 = CFSTR("buffer");
        v90 = (void *)v39;
        if (v32)
        {
          v44 = v32;
          *(_QWORD *)&v145 = CFSTR("length");
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v44, "length")));
          v141 = (uint64_t)v45;
          *((_QWORD *)&v145 + 1) = CFSTR("label");
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "label"));
          if (v46)
            v47 = objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "label"));
          else
            v47 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
          v32 = (void *)v47;
          v142 = v47;
          *(_QWORD *)&v146 = CFSTR("resourceOptions");
          v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v44, "resourceOptions")));
          v143 = v49;
          *((_QWORD *)&v146 + 1) = CFSTR("allocatedSize");
          v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v44, "allocatedSize")));
          v144 = v50;
          v48 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v141, &v145, 4));

        }
        else
        {
          v48 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
        }
        v86 = (void *)v48;
        v129 = v48;
        v119 = CFSTR("offset");
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v30, "offset")));
        v130 = v85;
        v120 = CFSTR("operation");
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v30, "operation")));
        v131 = v84;
        v121 = CFSTR("errorStackTrace");
        v51 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "errorStackTrace"));
        v104 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v51, "count"));
        v145 = 0u;
        v146 = 0u;
        v147 = 0u;
        v148 = 0u;
        v100 = v51;
        v106 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v145, &v141, 16);
        if (v106)
        {
          v102 = *(_QWORD *)v146;
          do
          {
            for (j = 0; j != v106; j = (char *)j + 1)
            {
              if (*(_QWORD *)v146 != v102)
                objc_enumerationMutation(v100);
              v53 = *(id *)(*((_QWORD *)&v145 + 1) + 8 * (_QWORD)j);
              v149[0] = CFSTR("functionName");
              v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "functionName"));
              if (v54)
                v55 = objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "functionName"));
              else
                v55 = objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
              v56 = (void *)v55;
              v150[0] = v55;
              v149[1] = CFSTR("URL");
              v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "URL"));
              v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "path"));
              obja = (id)v54;
              if (v58)
              {
                v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "URL"));
                v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "path"));
              }
              else
              {
                v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
              }
              v150[1] = v59;
              v149[2] = CFSTR("line");
              v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v53, "line")));
              v150[2] = v60;
              v149[3] = CFSTR("column");
              v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v53, "column")));
              v150[3] = v61;
              v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v150, v149, 4));

              if (v58)
              {

                v59 = v32;
              }

              objc_msgSend(v104, "addObject:", v62);
            }
            v106 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v145, &v141, 16);
          }
          while (v106);
        }

        v63 = objc_msgSend(v104, "copy");
        v132 = v63;
        v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v122, &v111, 11));
        objc_msgSend(v82, "addObject:", v64);

        v29 = v95 + 1;
      }
      while ((id)(v95 + 1) != v83);
      v83 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v137, &v133, 16);
    }
    while (v83);
  }

  v65 = objc_msgSend(v82, "copy");
  v110[9] = v65;
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v110, v109, 10));

  return v66;
}

void GTMTLReplay_handleError(int a1, uint64_t a2, char *__s1, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id NSError;
  void *v23;
  _QWORD v24[4];
  _QWORD v25[4];

  v12 = strstr(__s1, "gputools");
  if (a6 > 15)
  {
    if (a6 > 63)
    {
      if (a6 == 64)
      {
        v13 = "Access tracking";
        goto LABEL_16;
      }
      if (a6 == 128)
      {
        v13 = "Post vertex";
        goto LABEL_16;
      }
    }
    else
    {
      if (a6 == 16)
      {
        v13 = "Wireframe";
        goto LABEL_16;
      }
      if (a6 == 32)
      {
        v13 = "Fetch resource";
LABEL_16:
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %@"), v15, v16));

        goto LABEL_17;
      }
    }
LABEL_15:
    v13 = "Internal";
    goto LABEL_16;
  }
  v13 = "Shader Profiler";
  switch(a6)
  {
    case 1:
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
      break;
    case 2:
      goto LABEL_16;
    case 4:
      v13 = "Shader Debugger";
      goto LABEL_16;
    case 8:
      v13 = "Thumbnails";
      goto LABEL_16;
    default:
      goto LABEL_15;
  }
LABEL_17:
  if (v12)
    v17 = v12;
  else
    v17 = __s1;
  v25[0] = v14;
  v24[0] = NSLocalizedDescriptionKey;
  v24[1] = CFSTR("GTErrorKeyFile");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
  v25[1] = v18;
  v24[2] = CFSTR("GTErrorKeyFunction");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a4));
  v25[2] = v19;
  v24[3] = CFSTR("GTErrorKeyLine");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
  v25[3] = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 4));
  NSError = MakeNSError(a1, v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue(NSError);

  GTMTLReplay_handleNSError(v23);
}

id MakeNSError(int a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  _opaque_pthread_t *v14;
  uint64_t v15;
  pthread_t *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const char *label;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v3 = a2;
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v10, (_QWORD)v23));
        objc_msgSend(v4, "setObject:forKey:", v11, v10);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v7);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  if (v12)
    objc_msgSend(v4, "setObject:forKey:", v12, CFSTR("GTErrorKeyCallStack"));
  if (a1 == 100)
  {
LABEL_11:
    v13 = (id)g_activityLog;
    if (!v13)
      goto LABEL_26;
    goto LABEL_19;
  }
  v14 = pthread_self();
  pthread_rwlock_rdlock(&rwlock);
  v15 = 0;
  v16 = (pthread_t *)threadLocalLogs;
  while (!pthread_equal(v14, *v16))
  {
    ++v15;
    v16 += 2;
    if (v15 == 7)
    {
      v13 = 0;
      goto LABEL_18;
    }
  }
  v13 = (id)threadLocalLogs[2 * v15 + 1];
LABEL_18:
  pthread_rwlock_unlock(&rwlock);
  if (!v13)
  {
    label = dispatch_queue_get_label(0);
    if (strncmp(label, "gputools.MTLReplayer.serialQueue", 0x20uLL))
      goto LABEL_26;
    goto LABEL_11;
  }
LABEL_19:
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "getBreadcrumbSummary", (_QWORD)v23));
  if (objc_msgSend(v17, "count"))
    objc_msgSend(v4, "setObject:forKey:", v17, CFSTR("GTErrorKeyReplayerContext"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "getBreadcrumbsAsJSON"));
  if (v18)
    objc_msgSend(v4, "setObject:forKey:", v18, CFSTR("GTErrorKeyReplayerBreadcrumbs"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "gputracePath"));
  if (v19)
    objc_msgSend(v4, "setObject:forKey:", v19, CFSTR("GTErrorKeyGputracePath"));

LABEL_26:
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.gputools.MTLReplayer"), a1, v4, (_QWORD)v23));

  return v20;
}

void GTMTLReplay_handleNSError(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  id v28;
  FILE *v29;
  id v30;
  void *v31;
  unsigned int v32;
  char *v33;
  const __CFString *v34;
  __CFString *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  unsigned int v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  id v56;
  _BYTE v57[128];

  v1 = a1;
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "domain"));

  if (v2 != CFSTR("com.apple.gputools.MTLReplayer"))
    goto LABEL_10;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "userInfo"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", NSLocalizedDescriptionKey));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "userInfo"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", NSLocalizedFailureReasonErrorKey));

  if (v4 && v6 != 0)
  {
LABEL_10:
    v11 = v1;
    goto LABEL_11;
  }
  v8 = objc_alloc((Class)NSMutableDictionary);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "userInfo"));
  v10 = objc_msgSend(v8, "initWithDictionary:", v9);

  if (!v4)
  {
    v30 = v1;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "domain"));
    v32 = objc_msgSend(v31, "isEqualToString:", CFSTR("com.apple.gputools.MTLReplayer"));

    if (v32)
    {
      v33 = (char *)objc_msgSend(v30, "code");
      if (v33 == &stru_B8.segname[1])
      {
        v35 = (__CFString *)objc_alloc_init((Class)NSMutableString);
        -[__CFString appendString:](v35, "appendString:", CFSTR("The replayer encountered an error during command buffer"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "userInfo"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("GTErrorKeyMTLCommandBuffer")));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("label")));

        if (v38)
        {
          v40 = objc_opt_class(NSString, v39);
          if ((objc_opt_isKindOfClass(v38, v40) & 1) != 0)
            -[__CFString appendFormat:](v35, "appendFormat:", CFSTR(" \"%@\""), v38);
        }
        -[__CFString appendString:](v35, "appendString:", CFSTR(" execution."));

      }
      else
      {
        v34 = CFSTR("The replayer encountered an internal error.");
        if (v33 != (_BYTE *)&stru_20.flags + 1)
          v34 = 0;
        if (v33 == (_BYTE *)&stru_20.flags + 2)
          v35 = CFSTR("The replayer could not harvest a resource.");
        else
          v35 = (__CFString *)v34;
      }
    }
    else
    {
      v35 = 0;
    }

    objc_msgSend(v10, "setObject:forKeyedSubscript:", v35, NSLocalizedDescriptionKey);
    if (v6)
      goto LABEL_46;
    goto LABEL_38;
  }
  if (!v6)
  {
LABEL_38:
    v41 = v1;
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "domain"));
    v43 = objc_msgSend(v42, "isEqualToString:", CFSTR("com.apple.gputools.MTLReplayer"));

    if (v43 && objc_msgSend(v41, "code") == &stru_B8.segname[1])
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "userInfo"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("GTErrorKeyMTLCommandBuffer")));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("error")));

      v48 = objc_opt_class(NSDictionary, v47);
      if ((objc_opt_isKindOfClass(v46, v48) & 1) != 0)
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectForKeyedSubscript:", CFSTR("localizedDescription")));
      else
        v49 = 0;

    }
    else
    {
      v49 = 0;
    }

    objc_msgSend(v10, "setObject:forKeyedSubscript:", v49, NSLocalizedFailureReasonErrorKey);
  }
LABEL_46:
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "domain"));
  v11 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v50, objc_msgSend(v1, "code"), v10));

LABEL_11:
  v12 = v11;
  if (v12)
  {
    v13 = objc_alloc_init((Class)NSMutableString);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "domain"));
    v15 = objc_msgSend(v12, "code");
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedDescription"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedFailureReason"));
    objc_msgSend(v13, "appendFormat:", CFSTR("Replayer error\nDomain: %@\nCode: %d\nDescription: %@\nReason: %@\n"), v14, v15, v16, v17);

    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userInfo"));
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v52;
      do
      {
        for (i = 0; i != v20; i = (char *)i + 1)
        {
          if (*(_QWORD *)v52 != v21)
            objc_enumerationMutation(v18);
          v23 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i);
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userInfo"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v23));
          objc_msgSend(v13, "appendFormat:", CFSTR("%@: %@\n"), v23, v25);

        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
      }
      while (v20);
    }

    if (s_logUsingOsLog)
    {
      v26 = gt_default_log();
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
      {
        v28 = objc_msgSend(objc_retainAutorelease(v13), "UTF8String");
        *(_DWORD *)buf = 136315138;
        v56 = v28;
        _os_log_fault_impl(&dword_0, v27, OS_LOG_TYPE_FAULT, "fail: %s", buf, 0xCu);
      }
    }
    else
    {
      v29 = __stderrp;
      v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("fail: %s"), objc_msgSend(objc_retainAutorelease(v13), "UTF8String"))));
      fprintf(v29, "%s\n", (const char *)-[NSObject UTF8String](v27, "UTF8String"));
    }

  }
  objc_msgSend((id)_observer, "notifyError:", v12);

}

void GTMTLReplay_handleUnderlyingNSError(void *a1, void *a2)
{
  id v3;
  void *v4;
  id NSError;
  id v6;
  id v7;

  v7 = a2;
  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, NSLocalizedDescriptionKey);

  if (v7)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, NSUnderlyingErrorKey);
  NSError = MakeNSError(101, v4);
  v6 = (id)objc_claimAutoreleasedReturnValue(NSError);
  GTMTLReplay_handleNSError(v6);

}

_QWORD *GTMTLReplay_fillError(_QWORD *result, int a2, void *a3)
{
  _QWORD *v3;
  id NSError;

  if (result)
  {
    v3 = result;
    NSError = MakeNSError(a2, a3);
    result = (id)objc_claimAutoreleasedReturnValue(NSError);
    *v3 = result;
  }
  return result;
}

void GTMTLReplay_handleCommandBufferError(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.gputools.MTLReplayer"), 201, a1));
  GTMTLReplay_handleNSError(v1);

}

void HandleCrashSignal(uint64_t a1)
{
  NSString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id NSError;
  id v9;
  sigaction v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v11[0] = NSLocalizedDescriptionKey;
  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", strsignal(a1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v11[1] = CFSTR("GTErrorKeyProcessSignal");
  v12[0] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sys_signame[(int)a1]));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "uppercaseString"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SIG%@"), v5));
  v12[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 2));
  NSError = MakeNSError(100, v7);
  v9 = (id)objc_claimAutoreleasedReturnValue(NSError);

  GTMTLReplay_handleNSError(v9);
  v10 = *(sigaction *)&oldHandlers[2 * (int)a1];
  sigaction(a1, &v10, 0);
  if (v10.__sigaction_u.__sa_handler != (void (__cdecl *)(int))((char *)&dword_0 + 1))
  {
    if (v10.__sigaction_u.__sa_handler)
      ((void (*)(uint64_t))v10.__sigaction_u.__sa_handler)(a1);
    else
      raise(a1);
  }

}

id SerializeMTLTextureDescriptorToDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[14];
  _QWORD v20[14];

  v19[0] = CFSTR("textureType");
  v1 = a1;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "textureType")));
  v20[0] = v18;
  v19[1] = CFSTR("pixelFormat");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "pixelFormat")));
  v20[1] = v17;
  v19[2] = CFSTR("width");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "width")));
  v20[2] = v16;
  v19[3] = CFSTR("height");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "height")));
  v20[3] = v15;
  v19[4] = CFSTR("depth");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "depth")));
  v20[4] = v14;
  v19[5] = CFSTR("mipmapLevelCount");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "mipmapLevelCount")));
  v20[5] = v13;
  v19[6] = CFSTR("sampleCount");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "sampleCount")));
  v20[6] = v2;
  v19[7] = CFSTR("arrayLength");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "arrayLength")));
  v20[7] = v3;
  v19[8] = CFSTR("cpuCacheMode");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "cpuCacheMode")));
  v20[8] = v4;
  v19[9] = CFSTR("storageMode");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "storageMode")));
  v20[9] = v5;
  v19[10] = CFSTR("hazardTrackingMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "hazardTrackingMode")));
  v20[10] = v6;
  v19[11] = CFSTR("allowGPUOptimizedContents");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v1, "allowGPUOptimizedContents")));
  v20[11] = v7;
  v19[12] = CFSTR("usage");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "usage")));
  v20[12] = v8;
  v19[13] = CFSTR("swizzleKey");
  v9 = objc_msgSend(v1, "swizzleKey");

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9));
  v20[13] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 14));

  return v11;
}

id GTAGXProfilingSupportHelper::RemappedCSV(GTAGXProfilingSupportHelper *this)
{
  std::string *p_p;
  void *v2;
  void *v3;
  std::string __p;

  RemappingCSVPath(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v2));

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_286AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *RemappingCSVPath(std::string *a1)
{
  std::string *v2;

  v2 = (std::string *)std::string::basic_string[abi:nn180100]<0>(a1, "/Apple");
  std::string::append(v2, "Internal/");
  std::string::append(a1, "Library/");
  std::string::append(a1, "AGX/");
  std::string::append(a1, "AGXRawCounterMapping");
  return std::string::append(a1, ".csv");
}

void sub_286B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void GTAGXProfilingSupportHelper::Initialize(GTAGXProfilingSupportHelper *this, NSDictionary *a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  GTAGXProfilingSupportHelper *v6;

  v6 = this;
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[GTAGXProfilingSupportHelper objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("gpu_gen")));
  objc_msgSend(v2, "unsignedIntValue");

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GTAGXProfilingSupportHelper objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("num_cores")));
  objc_msgSend(v3, "unsignedIntValue");

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[GTAGXProfilingSupportHelper objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("num_mgpus")));
  objc_msgSend(v4, "unsignedIntValue");

  v5 = (id)objc_claimAutoreleasedReturnValue(-[GTAGXProfilingSupportHelper objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("gpu_rev")));
  if ((objc_msgSend(v5, "isEqualToString:", CFSTR("A0")) & 1) == 0
    && (objc_msgSend(v5, "isEqualToString:", CFSTR("A1")) & 1) == 0
    && (objc_msgSend(v5, "isEqualToString:", CFSTR("B0")) & 1) == 0
    && (objc_msgSend(v5, "isEqualToString:", CFSTR("B1")) & 1) == 0
    && (objc_msgSend(v5, "isEqualToString:", CFSTR("C0")) & 1) == 0)
  {
    objc_msgSend(v5, "isEqualToString:", CFSTR("C1"));
  }

  agxps_gpu_create();
}

void sub_287A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  if (*(char *)(v56 - 185) < 0)
    operator delete(*(void **)(v56 - 208));

  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_impl<char const*&,std::vector<std::string>>(uint64_t *a1, char *a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v43;
  _QWORD v44[2];
  char v45;

  v6 = a1 + 2;
  v7 = (char *)operator new(0x40uLL);
  v44[0] = v7;
  v44[1] = v6;
  v45 = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)v7 + 2, a2);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 7) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v45 = 1;
  v8 = v7[39];
  if (v8 >= 0)
    v9 = (uint64_t *)(v7 + 16);
  else
    v9 = (uint64_t *)*((_QWORD *)v7 + 2);
  if (v8 >= 0)
    v10 = v7[39];
  else
    v10 = *((_QWORD *)v7 + 3);
  *((_QWORD *)v7 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  *((_QWORD *)v7 + 1) = v11;
  v12 = a1[1];
  if (!v12)
    goto LABEL_23;
  v13 = v11;
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = v11;
    if (v12 <= v11)
      v16 = v11 % v12;
  }
  else
  {
    v16 = (v12 - 1) & v11;
  }
  v17 = *(void ***)(*a1 + 8 * v16);
  if (!v17 || (v18 = (char *)*v17) == 0)
  {
LABEL_23:
    v20 = (float)(unint64_t)(a1[3] + 1);
    v21 = *((float *)a1 + 8);
    if (!v12 || (float)(v21 * (float)v12) < v20)
    {
      v22 = 1;
      if (v12 >= 3)
        v22 = (v12 & (v12 - 1)) != 0;
      v23 = v22 | (2 * v12);
      v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v12 = a1[1];
      }
      if (*(_QWORD *)&prime > v12)
        goto LABEL_91;
      if (*(_QWORD *)&prime >= v12)
        goto LABEL_64;
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v12)
      {
        v12 = a1[1];
        goto LABEL_64;
      }
      if (prime)
      {
LABEL_91:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v26 = operator new(8 * *(_QWORD *)&prime);
        v27 = (void *)*a1;
        *a1 = (uint64_t)v26;
        if (v27)
          operator delete(v27);
        v28 = 0;
        a1[1] = (uint64_t)prime;
        do
          *(_QWORD *)(*a1 + 8 * v28++) = 0;
        while (*(_QWORD *)&prime != v28);
        v29 = (_QWORD *)*v6;
        if (*v6)
        {
          v30 = v29[1];
          v31 = (uint8x8_t)vcnt_s8(prime);
          v31.i16[0] = vaddlv_u8(v31);
          if (v31.u32[0] > 1uLL)
          {
            if (v30 >= *(_QWORD *)&prime)
              v30 %= *(_QWORD *)&prime;
          }
          else
          {
            v30 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*a1 + 8 * v30) = v6;
          v35 = (_QWORD *)*v29;
          if (*v29)
          {
            do
            {
              v36 = v35[1];
              if (v31.u32[0] > 1uLL)
              {
                if (v36 >= *(_QWORD *)&prime)
                  v36 %= *(_QWORD *)&prime;
              }
              else
              {
                v36 &= *(_QWORD *)&prime - 1;
              }
              if (v36 != v30)
              {
                if (!*(_QWORD *)(*a1 + 8 * v36))
                {
                  *(_QWORD *)(*a1 + 8 * v36) = v29;
                  goto LABEL_60;
                }
                *v29 = *v35;
                *v35 = **(_QWORD **)(*a1 + 8 * v36);
                **(_QWORD **)(*a1 + 8 * v36) = v35;
                v35 = v29;
              }
              v36 = v30;
LABEL_60:
              v29 = v35;
              v35 = (_QWORD *)*v35;
              v30 = v36;
            }
            while (v35);
          }
        }
        v12 = (unint64_t)prime;
      }
      else
      {
        v43 = (void *)*a1;
        *a1 = 0;
        if (v43)
          operator delete(v43);
        v12 = 0;
        a1[1] = 0;
      }
    }
LABEL_64:
    v37 = *((_QWORD *)v7 + 1);
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.u32[0] > 1uLL)
    {
      if (v37 >= v12)
        v37 %= v12;
    }
    else
    {
      v37 &= v12 - 1;
    }
    v39 = *a1;
    v40 = *(_QWORD **)(*a1 + 8 * v37);
    if (v40)
    {
      *(_QWORD *)v7 = *v40;
    }
    else
    {
      *(_QWORD *)v7 = *v6;
      *v6 = v7;
      *(_QWORD *)(v39 + 8 * v37) = v6;
      if (!*(_QWORD *)v7)
      {
LABEL_77:
        ++a1[3];
        v44[0] = 0;
        goto LABEL_78;
      }
      v41 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v38.u32[0] > 1uLL)
      {
        if (v41 >= v12)
          v41 %= v12;
      }
      else
      {
        v41 &= v12 - 1;
      }
      v40 = (_QWORD *)(*a1 + 8 * v41);
    }
    *v40 = v7;
    goto LABEL_77;
  }
  while (1)
  {
    v19 = *((_QWORD *)v18 + 1);
    if (v19 == v13)
      break;
    if (v15 > 1)
    {
      if (v19 >= v12)
        v19 %= v12;
    }
    else
    {
      v19 &= v12 - 1;
    }
    if (v19 != v16)
      goto LABEL_23;
LABEL_22:
    v18 = *(char **)v18;
    if (!v18)
      goto LABEL_23;
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v18 + 16, (unsigned __int8 *)v7 + 16))
    goto LABEL_22;
  v7 = v18;
LABEL_78:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)v44);
  return v7;
}

void sub_288170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (uint64_t *)a2;
  else
    v8 = *(uint64_t **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v12)
        v3 = v10 % v12;
    }
    else
    {
      v3 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3)
            break;
        }
      }
    }
  }
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = v11;
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  v18[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v24);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *v18 = *v26;
LABEL_44:
    *v26 = v18;
    goto LABEL_45;
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v25 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    v27 = *(_QWORD *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12)
        v27 %= v12;
    }
    else
    {
      v27 &= v12 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
}

void sub_2883C0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<char const*&>(std::__split_buffer<std::string>::pointer *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__split_buffer<std::string>::pointer v10;
  std::__split_buffer<std::string>::pointer v11;
  std::__split_buffer<std::string>::pointer begin;
  __int128 v13;
  int64x2_t v14;
  std::__split_buffer<std::string>::pointer v15;
  std::string *v16;
  std::__split_buffer<std::string> v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v6 = (std::allocator<std::string> *)(a1 + 2);
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v18.__end_cap_.__value_ = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v7);
  else
    v8 = 0;
  v18.__first_ = (std::__split_buffer<std::string>::pointer)v7;
  v18.__begin_ = (std::__split_buffer<std::string>::pointer)(v7 + 24 * v2);
  v18.__end_ = v18.__begin_;
  v18.__end_cap_.__value_ = (std::string *)(v7 + 24 * v8);
  std::string::basic_string[abi:nn180100]<0>(v18.__begin_->__r_.__value_.__r.__words, *a2);
  v10 = *a1;
  v9 = (unint64_t)a1[1];
  begin = v18.__begin_;
  v11 = v18.__begin_;
  if ((std::__split_buffer<std::string>::pointer)v9 == *a1)
  {
    v14 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v9 - 24);
      begin[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 - 8);
      *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v13;
      --begin;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      v9 -= 24;
    }
    while ((std::__split_buffer<std::string>::pointer)v9 != v10);
    v14 = *(int64x2_t *)a1;
  }
  v15 = v11 + 1;
  *a1 = begin;
  a1[1] = v11 + 1;
  *(int64x2_t *)&v18.__begin_ = v14;
  v16 = a1[2];
  a1[2] = v18.__end_cap_.__value_;
  v18.__end_cap_.__value_ = v16;
  v18.__first_ = (std::__split_buffer<std::string>::pointer)v14.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v18);
  return v15;
}

void sub_288510(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  std::string *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v4 = (uint64_t)a2;
  v6 = a1[2];
  v7 = (std::string *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3) < a3)
  {
    if (v7)
    {
      std::vector<std::string>::__clear[abi:nn180100](a1);
      operator delete((void *)*a1);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a3 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_30;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a3)
      v9 = a3;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_30:
      abort();
    v11 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v10);
    *a1 = (uint64_t)v11;
    a1[1] = (uint64_t)v11;
    a1[2] = (uint64_t)&v11[v12];
    v13 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>((uint64_t *)v4, v11);
LABEL_21:
    a1[1] = (uint64_t)v13;
    return;
  }
  v14 = (std::string *)a1[1];
  v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v7) >> 3);
  if (v15 < a3)
  {
    if ((char *)v14 - (char *)v7 >= 1)
    {
      v16 = v15 + 1;
      v17 = a2;
      do
      {
        v17 = (_QWORD *)*v17;
        --v16;
      }
      while (v16 > 1);
      if (v17 != a2)
      {
        do
        {
          std::string::operator=(v7, (const std::string *)(v4 + 16));
          v4 = *(_QWORD *)v4;
          ++v7;
        }
        while ((_QWORD *)v4 != v17);
        v14 = (std::string *)a1[1];
      }
      v4 = (uint64_t)v17;
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>((uint64_t *)v4, v14);
    goto LABEL_21;
  }
  if (a2)
  {
    do
    {
      std::string::operator=(v7, (const std::string *)(v4 + 16));
      v4 = *(_QWORD *)v4;
      ++v7;
    }
    while (v4);
    v14 = (std::string *)a1[1];
  }
  while (v14 != v7)
  {
    if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14[-1].__r_.__value_.__l.__data_);
    --v14;
  }
  a1[1] = (uint64_t)v7;
}

void sub_2886C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2886D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>(uint64_t *a1, std::string *this)
{
  uint64_t *v3;
  __int128 v4;

  if (a1)
  {
    v3 = a1;
    do
    {
      if (*((char *)v3 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(this, (const std::string::value_type *)v3[2], v3[3]);
      }
      else
      {
        v4 = *((_OWORD *)v3 + 1);
        this->__r_.__value_.__r.__words[2] = v3[4];
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
      }
      v3 = (uint64_t *)*v3;
      ++this;
    }
    while (v3);
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t *GTAGXProfilingSupportHelper::GetCountersForDerivedCounter(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v1 = (unsigned __int8 *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v3 = v2;
  }
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  v5 = *((_QWORD *)&xmmword_752A98 + 1);
  if (!*((_QWORD *)&xmmword_752A98 + 1))
    goto LABEL_21;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_752A98 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *((_QWORD *)&xmmword_752A98 + 1))
      v9 = v4 % *((_QWORD *)&xmmword_752A98 + 1);
  }
  else
  {
    v9 = (*((_QWORD *)&xmmword_752A98 + 1) - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(xmmword_752A98 + 8 * v9);
  if (v10)
  {
    for (i = *v10; i; i = *(unsigned __int8 **)i)
    {
      v12 = *((_QWORD *)i + 1);
      if (v6 == v12)
      {
        if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1))
          break;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= v5)
            v12 %= v5;
        }
        else
        {
          v12 &= v5 - 1;
        }
        if (v12 != v9)
          goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    i = 0;
  }
  if (i)
    return (uint64_t *)(i + 40);
  else
    return 0;
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

id GTShaderDebuggerMDSerializerError(unsigned int a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  NSErrorUserInfoKey v9;
  const __CFString *v10;

  v3 = a2;
  v4 = v3;
  if (v3)
    v5 = (const __CFString *)v3;
  else
    v5 = &stru_7282A8;
  v9 = NSLocalizedDescriptionKey;
  v10 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("GTShaderDebuggerMDSerializerErrorDomain"), a1, v6));

  return v7;
}

void sub_2889D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

llvm::Module *std::unique_ptr<llvm::Module>::reset[abi:nn180100](llvm::Module **a1)
{
  llvm::Module *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    llvm::Module::~Module(result);
    operator delete();
  }
  return result;
}

void std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  llvm::Module **v2;
  llvm::Module **v4;
  void *v5;

  v1 = *a1;
  v2 = (llvm::Module **)**a1;
  if (v2)
  {
    v4 = (llvm::Module **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::Module>::reset[abi:nn180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

apr_array_header_t *GetQueueForRef(apr_pool_t **a1, uint64_t a2)
{
  uint64_t v3;
  apr_array_header_t *v4;
  apr_pool_t *v5;
  _QWORD *v6;
  uint64_t v8;

  v8 = a2;
  v3 = *find_entry((uint64_t)a1, &v8, 8uLL, 0);
  if (!v3 || (v4 = *(apr_array_header_t **)(v3 + 32)) == 0)
  {
    v5 = *a1;
    v4 = apr_array_make(*a1, 4, 8);
    v6 = apr_palloc(v5, 8uLL);
    *v6 = v8;
    apr_hash_set((apr_hash_t *)a1, v6, 8, v4);
  }
  return v4;
}

void GTMTLReplayController_restoreMTLBufferContents(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  apr_pool_t **v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  apr_pool_t *v15;
  id v16;

  v4 = **(_QWORD **)a1;
  v5 = *(apr_pool_t ***)(a1 + 152);
  v6 = (char *)a2[3];
  v7 = *(id *)(a1 + 8);
  v16 = v7;
  if (*a2 == 50)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bufferForHeapKey:", a2[1]));
  }
  else
  {
    if (*a2 != 22)
    {
      v9 = 0;
      goto LABEL_7;
    }
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bufferForKey:", a2[1]));
  }
  v9 = (void *)v8;
LABEL_7:
  v10 = a2[5];
  v11 = *(id *)(a1 + 24);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bufferWithLength:alignment:", v10, 1));
  GTCaptureArchive_fillBuffer(v4, v5, v6, (char *)objc_msgSend(v12, "contents"), a2[5], 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "blitCommandEncoder"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "heapBuffer"));
  objc_msgSend(v13, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v14, objc_msgSend(v12, "heapLocation"), v9, a2[4], a2[5]);

  v15 = *v5;
  apr_pool_clear(v15);

}

void GTMTLReplayController_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  apr_pool_t **v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  char *v11;
  uint64_t v12;
  id NSError;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  int *v20;
  id v21;
  int *v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int8x8_t v36;
  int8x8_t v37;
  int32x2_t v38;
  id MTLTextureDescriptorFromTextureWithoutResourceIndex;
  void *v40;
  uint64_t v41;
  int64x2_t v42;
  char v43;
  uint64_t v44;
  int8x16_t v45;
  unint64_t v46;
  int8x16_t *v47;
  id v48;
  void *v49;
  unint64_t v50;
  apr_size_t *v51;
  uint64_t *v52;
  uint64_t v53;
  double v54;
  apr_size_t v55;
  apr_size_t v56;
  char *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  apr_pool_t **v81;
  id v82;
  void *v83;
  uint64_t PlanePixelFormat;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int *v90;
  uint64_t v91;
  int8x16_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  int8x16_t v96;
  void *v97;
  id v98;
  id v99;
  void *v100;
  uint64_t v101;
  id v102;
  _QWORD v103[3];
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  apr_size_t size[2];
  uint64_t v112;
  _OWORD v113[3];
  uint64_t v114;
  id v115;
  id v116;
  _QWORD v117[6];
  _QWORD v118[2];
  __int128 v119;

  v4 = **(_QWORD **)a1;
  v5 = *(apr_pool_t ***)(a1 + 152);
  v6 = *(id *)(a1 + 8);
  v7 = v6;
  v101 = a2;
  if (!*(_QWORD *)(a2 + 8))
  {
    NSError = MakeNSError(101, &__NSDictionary0__struct);
    v9 = (id)objc_claimAutoreleasedReturnValue(NSError);
    GTMTLReplay_handleNSError(v9);
    goto LABEL_63;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "textureForKey:"));
  v9 = v8;
  if (!v8)
  {
    v14 = MakeNSError(101, &__NSDictionary0__struct);
    v10 = (id)objc_claimAutoreleasedReturnValue(v14);
    GTMTLReplay_handleNSError(v10);
    goto LABEL_62;
  }
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "device"));
  v11 = (char *)objc_msgSend(v9, "pixelFormat");
  v98 = objc_msgSend(v9, "sampleCount");
  v114 = 0;
  memset(v113, 0, sizeof(v113));
  GTMTLPixelFormatGetInfoForDevice((uint64_t)v113, (uint64_t)v10, (uint64_t)v11);
  *(_QWORD *)&v119 = 0;
  v83 = v7;
  if ((~DWORD2(v113[0]) & 0x60) != 0)
  {
    if ((WORD4(v113[0]) & 0x2000) != 0)
    {
      v12 = 4;
      *(_QWORD *)&v119 = 4;
    }
    else
    {
      v12 = 0;
    }
    v91 = 1;
  }
  else
  {
    v119 = xmmword_4AA550;
    v91 = 2;
    v12 = 1;
  }
  v88 = *(unsigned __int16 *)(a2 + 36);
  v87 = *(unsigned __int16 *)(a2 + 38);
  v86 = *(unsigned __int16 *)(a2 + 40);
  v15 = *(unsigned __int16 *)(a2 + 42);
  v16 = *(unsigned __int16 *)(a2 + 44);
  v17 = *(unsigned __int16 *)(a2 + 46);
  v112 = 0;
  v110 = 0u;
  *(_OWORD *)size = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v93 = v17;
  v95 = v16;
  GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v106, (uint64_t)v10, (uint64_t)v11, v15, v16, v17, (uint64_t)v98, 0, v12);
  v18 = *(unsigned int *)GTCaptureArchive_getFileWithFilename(v4, *(char **)(a2 + 24));
  v85 = *(id *)(a1 + 24);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "bufferWithLength:alignment:", v18, *((_QWORD *)&v110 + 1)));
  GTCaptureArchive_fillBuffer(v4, v5, *(char **)(v101 + 24), (char *)objc_msgSend(v19, "contents"), v18, 0);
  v20 = (int *)objc_msgSend(v19, "contents");
  v100 = v19;
  v21 = objc_msgSend(v19, "length");
  v22 = 0;
  v23 = 0;
  if (v20 && (unint64_t)v21 >= 0x10)
  {
    if (*(_QWORD *)v20 == 0x63617074757265)
    {
      if (*((_WORD *)v20 + 4) == 1)
        v23 = v20[3] + 16;
      else
        v23 = v20[3];
      v22 = v20;
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
  }
  if ((BYTE9(v113[0]) & 0x20) != 0
    && ((*(_BYTE *)(*(_QWORD *)a1 + 272) & 1) != 0 || strncmp(*(const char **)(v101 + 24), "MTLTexture-", 0xBuLL)))
  {
    v24 = (char *)objc_msgSend(v100, "contents") + v23;
    v25 = size[1];
    v26 = (char *)apr_palloc(*v5, size[1]);
    if ((int)v108 >= 1)
    {
      v27 = 0;
      v28 = v108;
      v29 = DWORD2(v107);
      v30 = DWORD2(v107);
      v31 = 8 * SDWORD2(v107);
      v32 = v26;
      do
      {
        if (v29 >= 1)
        {
          v33 = 0;
          do
          {
            v34 = *(_QWORD *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v33, v27), 8uLL), vand_s8((int8x8_t)__PAIR64__(v33, v27), (int8x8_t)0xFFFF0000FFFFLL)) & 0xFF00FF00FF00FFLL;
            v35 = *(_QWORD *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v34, 4uLL), (int8x8_t)v34) & 0xFF0FFF0FFF0FFF0FLL;
            v36 = vand_s8(vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v35, 2uLL), (int8x8_t)v35), (int8x8_t)0x3333333333333333);
            v37 = (int8x8_t)vshl_u32((uint32x2_t)v36, (uint32x2_t)0x200000001);
            v36.i32[1] *= 2;
            v38 = (int32x2_t)vand_s8(vorr_s8(v37, v36), (int8x8_t)0xAAAAAAAA55555555);
            *(_QWORD *)&v32[8 * v33++] = *(_QWORD *)&v24[8
                                                       * vorr_s8((int8x8_t)v38, (int8x8_t)vdup_lane_s32(v38, 1)).i32[0]];
          }
          while (v30 != v33);
        }
        ++v27;
        v32 += v31;
      }
      while (v27 != v28);
    }
    memcpy(v24, v26, v25);
  }
  v81 = v5;
  v82 = v9;
  v118[0] = v11;
  v118[1] = v11;
  v117[0] = v15;
  v117[1] = v95;
  v117[2] = v93;
  v117[3] = v15;
  v117[4] = v95;
  v117[5] = v93;
  v115 = v9;
  v99 = v115;
  v116 = v99;
  v90 = v22;
  PlanePixelFormat = GetPlanePixelFormat((uint64_t)v11, 0);
  if (PlanePixelFormat)
  {
    MTLTextureDescriptorFromTextureWithoutResourceIndex = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v99);
    v40 = (void *)objc_claimAutoreleasedReturnValue(MTLTextureDescriptorFromTextureWithoutResourceIndex);
    v41 = 0;
    v42.i64[0] = v15;
    v42.i64[1] = v95;
    v43 = 1;
    v96 = (int8x16_t)v42;
    v92 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v42, vdupq_n_s64(1uLL)), 1uLL);
    v44 = PlanePixelFormat;
    while (1)
    {
      v118[v41] = v44;
      if (v11 == (_BYTE *)&stru_1F8.addr + 7 || (v45 = v96, v11 == (_BYTE *)&stru_1F8.addr + 4))
      {
        if ((v43 & 1) != 0)
          v46 = -1;
        else
          v46 = 0;
        v45 = vbslq_s8((int8x16_t)vdupq_n_s64(v46), v96, v92);
      }
      v47 = (int8x16_t *)&v117[3 * v41];
      *v47 = v45;
      v47[1].i64[0] = v93;
      objc_msgSend(v40, "setWidth:", v45.i64[0]);
      objc_msgSend(v40, "setHeight:", v117[3 * v41 + 1]);
      objc_msgSend(v40, "setPixelFormat:", v44);
      v48 = objc_msgSend(v10, "newTextureWithDescriptor:", v40);
      v49 = *(&v115 + v41);
      *(&v115 + v41) = v48;

      if ((v43 & 1) == 0)
        break;
      v44 = GetPlanePixelFormat((uint64_t)v11, 1);
      v43 = 0;
      v41 = 1;
    }

    v91 = 2;
    v22 = v90;
  }
  v94 = v10;
  v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "blitCommandEncoder"));
  v50 = 0;
  v51 = (apr_size_t *)(v22 + 16);
  v52 = v117;
  v89 = v11;
  do
  {
    v53 = *((_QWORD *)&v119 + v50);
    *(_QWORD *)&v54 = GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)&v106, (uint64_t)v10, v118[v50], *v52, v52[1], v52[2], (uint64_t)v98, 0, v53).n128_u64[0];
    if (v22 && *((_WORD *)v22 + 5) == 1 && *((_QWORD *)v22 + 2) >= v50)
    {
      v55 = *(v51 - 1);
      v56 = *v51;
    }
    else
    {
      v55 = *(unsigned int *)(v101 + 48);
      v56 = *(unsigned int *)(v101 + 52);
    }
    v57 = (char *)objc_msgSend(v99, "textureType", v54);
    if ((unint64_t)v57 < 2)
      goto LABEL_46;
    if (v57 != (_BYTE *)&dword_4 + 3)
    {
      if (!v55)
LABEL_46:
        v55 = size[0];
      v56 = v108 * v55;
      goto LABEL_54;
    }
    if (!v55)
      v55 = size[0];
    if (!v56)
      v56 = v55 * v108;
LABEL_54:
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "heapBuffer"));
    v59 = (char *)objc_msgSend(v100, "heapLocation");
    v60 = (uint64_t)*(&v115 + v50);
    v61 = *(unsigned __int16 *)(v101 + 32);
    v62 = *(unsigned __int16 *)(v101 + 34);
    v104 = *(_OWORD *)v52;
    v105 = v52[2];
    v103[0] = v88;
    v103[1] = v87;
    v103[2] = v86;
    objc_msgSend(v97, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v58, &v59[v23], v55, v56, &v104, v60, v61, v62, v103, v53);

    v23 += v112;
    ++v50;
    v51 += 6;
    v52 += 3;
    v22 = v90;
    v10 = v94;
  }
  while (v91 != v50);
  if (PlanePixelFormat)
  {
    v63 = GTMTLReplayController_defaultLibrary(v94);
    v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
    v65 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "colorAttachments"));
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v67, "setPixelFormat:", v89);

    v68 = objc_msgSend(v64, "newFunctionWithName:", CFSTR("Harvest2PVertexForDownloader"));
    objc_msgSend(v65, "setVertexFunction:", v68);

    v69 = objc_msgSend(v64, "newFunctionWithName:", CFSTR("Harvest2PFragmentUpload"));
    objc_msgSend(v65, "setFragmentFunction:", v69);

    v102 = 0;
    v70 = objc_msgSend(v94, "newRenderPipelineStateWithDescriptor:error:", v65, &v102);
    v71 = v102;
    v72 = objc_alloc_init((Class)MTLRenderPassDescriptor);
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "colorAttachments"));
    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v74, "setTexture:", v99);

    v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "colorAttachments"));
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v76, "setLoadAction:", 0);

    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "colorAttachments"));
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v78, "setStoreAction:", 1);

    v10 = v94;
    v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "renderCommandEncoderWithDescriptor:", v72));
    objc_msgSend(v79, "setRenderPipelineState:", v70);
    objc_msgSend(v79, "setFragmentTexture:atIndex:", v115, 0);
    objc_msgSend(v79, "setFragmentTexture:atIndex:", v116, 1);

    objc_msgSend(v79, "drawPrimitives:vertexStart:vertexCount:", 3, 0, 3);
  }
  apr_pool_clear(*v81);

  v80 = 8;
  v9 = v82;
  do
  {

    v80 -= 8;
  }
  while (v80 != -8);

  v7 = v83;
LABEL_62:

LABEL_63:
}

char *GTMTLReplayController_makeDataSource(const char *a1, apr_pool_t *a2)
{
  void *v4;
  char *v5;
  const char *v6;
  char *v7;
  int v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  off_t st_size;
  size_t v13;
  ssize_t v14;
  ssize_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  apr_allocator_t *v20;
  apr_pool_t *v21;
  apr_allocator_t *v22;
  apr_pool_t *v23;
  pthread_mutex_t *v24;
  uint64_t v25;
  vm_address_t v26;
  char *v27;
  apr_array_header_t *v28;
  apr_allocator_t *v29;
  void *v30;
  apr_array_header_t *v31;
  void *v32;
  int nelts;
  apr_array_header_t *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  apr_pool_t *v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  __int16 v42;
  apr_array_header_t *v43;
  void *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unsigned int *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  apr_pool_t *v62;
  unint64_t *v63;
  apr_hash_t *v64;
  apr_hash_t *v65;
  apr_pool_t *v66;
  unint64_t v67;
  unint64_t v68;
  apr_hash_t *v69;
  void *v70;
  uint64_t v71;
  apr_pool_t *v72;
  unint64_t *v73;
  apr_array_header_t *v74;
  int v75;
  BOOL v76;
  unint64_t *v77;
  _BOOL4 v78;
  BOOL v79;
  int v80;
  BOOL v81;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int pool_high;
  unint64_t v88;
  uint64_t v89;
  int v90;
  apr_array_header_t *v91;
  int v92;
  apr_pool_t **v93;
  apr_pool_t *v94;
  char *v95;
  char *Data;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  apr_hash_t *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t *AliasStream2;
  uint64_t v106;
  uint64_t v107;
  apr_array_header_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  int v114;
  apr_array_header_t *v115;
  int v116;
  uint64_t *v117;
  uint64_t v118;
  size_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  _QWORD *v131;
  int v132;
  apr_array_header_t *v133;
  _QWORD *v134;
  uint64_t v135;
  apr_array_header_t *UniqueIdentifierResourceGroup;
  apr_array_header_t *v137;
  apr_array_header_t *v138;
  int v139;
  int FuncEnumConstructorType;
  uint64_t v141;
  uint64_t v142;
  apr_hash_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *elts;
  uint64_t *v150;
  uint64_t v151;
  char *v152;
  size_t v153;
  dispatch_data_t v154;
  void *v155;
  apr_status_t (__cdecl *v156)(void *);
  unint64_t v157;
  _QWORD *entry;
  _QWORD *v159;
  char *v160;
  int v161;
  int v162;
  char *v163;
  _DWORD *v164;
  apr_array_header_t *v165;
  _DWORD *v166;
  int v167;
  apr_hash_t *v168;
  apr_pool_t **v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t DeviceObjectStreamRef;
  _QWORD *v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  int v178;
  int v179;
  apr_hash_index_t *v180;
  apr_hash_index_t *v181;
  uint64_t v182;
  apr_array_header_t *v183;
  _QWORD *v184;
  _QWORD *v185;
  apr_hash_index_t *v186;
  apr_pool_t *v187;
  apr_hash_index_t *v188;
  uint64_t v189;
  apr_array_header_t *v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t pool_low;
  uint64_t v194;
  apr_array_header_t *v195;
  int v196;
  int v197;
  void *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  apr_hash_t *v202;
  apr_hash_t *v203;
  apr_hash_index_t *v204;
  apr_hash_index_t *v205;
  uint64_t i;
  unsigned int v207;
  int v208;
  _DWORD *v209;
  signed int v210;
  BOOL v211;
  void *v212;
  int v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  apr_array_header_t *v219;
  apr_hash_index_t *v220;
  unint64_t v221;
  uint64_t j;
  unsigned int v223;
  int v224;
  uint64_t v225;
  char *v226;
  char v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t *v230;
  _QWORD *v231;
  unint64_t v232;
  unint64_t v233;
  char *v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  apr_allocator_t *v241;
  unint64_t v242;
  apr_pool_t *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t *v253;
  char *v254;
  apr_array_header_t *v255;
  apr_array_header_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  char *v265;
  apr_array_header_t *QueueForRef;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  char *v273;
  void *v274;
  int v275;
  void *v276;
  void *v277;
  uint64_t v278;
  int v279;
  apr_pool_t *v280;
  char v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  int v287;
  apr_pool_t *v288;
  char v289;
  void *v290;
  apr_array_header_t *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  apr_array_header_t *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t k;
  uint64_t v304;
  unint64_t v305;
  BOOL v306;
  unint64_t v307;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  unint64_t v314;
  uint64_t v315;
  apr_pool_t *v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  apr_array_header_t *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t m;
  uint64_t v329;
  unint64_t v330;
  void *v332;
  apr_pool_t *v333;
  apr_array_header_t *v334;
  uint64_t v335;
  apr_hash_t *v336;
  uint64_t v337;
  apr_array_header_t *v338;
  _QWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  apr_array_header_t *v342;
  uint64_t v343;
  apr_hash_t *v344;
  uint64_t v345;
  apr_array_header_t *v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  apr_hash_t *v350;
  char *v351;
  uint64_t v352;
  apr_array_header_t *v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  int v363;
  uint64_t v364;
  unint64_t *v365;
  _QWORD *v366;
  unint64_t v367;
  uint64_t v369;
  uint64_t v370;
  apr_array_header_t *v371;
  _QWORD *v372;
  apr_hash_t *v373;
  apr_array_header_t *v374;
  uint64_t v375;
  _DWORD *v376;
  uint64_t v377;
  char *v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  unint64_t v384;
  _QWORD *v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  apr_array_header_t **v390;
  apr_pool_t *v391;
  apr_allocator_t *v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  apr_hash_index_t *v396;
  apr_hash_index_t *v397;
  apr_hash_index_t *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  apr_pool_t *v413;
  apr_array_header_t *v414;
  uint64_t v415;
  apr_hash_index_t *v416;
  apr_hash_index_t *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned int v429;
  int v430;
  uint64_t v431;
  apr_allocator_t *v432;
  apr_pool_t *v433;
  apr_array_header_t *v434;
  apr_hash_t *v435;
  uint64_t v436;
  apr_hash_index_t *v437;
  apr_hash_index_t *v438;
  _DWORD *v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unsigned int v452;
  int v453;
  uint64_t v454;
  _QWORD *v455;
  int v456;
  int v457;
  apr_array_header_t *v458;
  _QWORD *v459;
  uint64_t v460;
  char *v461;
  __int128 v462;
  int v463;
  uint64_t v464;
  apr_hash_index_t *v465;
  apr_hash_index_t *v466;
  apr_hash_index_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unsigned int v477;
  int v478;
  uint64_t v479;
  int v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  char *v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  apr_pool_t *v490;
  uint64_t v491;
  _OWORD *v492;
  uint64_t v493;
  uint64_t v494;
  __int128 *v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  _OWORD *v499;
  int v500;
  int v501;
  _DWORD *v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *Object;
  __int16 v515;
  _BOOL4 v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v520;
  uint64_t v521;
  _OWORD *v522;
  __int128 *v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  _OWORD *v527;
  int v528;
  _DWORD *v529;
  int v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  char *v540;
  uint64_t v541;
  apr_pool_t **v542;
  uint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  uint64_t v546;
  apr_hash_index_t *v547;
  apr_hash_index_t *v548;
  uint64_t v549;
  uint64_t *v550;
  uint64_t v551;
  _QWORD *v552;
  apr_pool_t *v553;
  apr_hash_t *v554;
  _QWORD *v555;
  uint64_t v556;
  unint64_t v557;
  apr_pool_t *v558;
  int *v559;
  apr_array_header_t *v560;
  uint64_t v561;
  apr_hash_t *v562;
  uint64_t v563;
  apr_allocator_t *v564;
  _QWORD *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  apr_array_header_t *v569;
  char *v570;
  apr_array_header_t *v571;
  unint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  const char *v575;
  uint64_t v576;
  const char *v577;
  char *v578;
  void *v579;
  void *v580;
  unsigned __int8 v581;
  void *v582;
  id v583;
  void *v584;
  void *v585;
  id v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  _QWORD *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int *v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  unsigned int v603;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  apr_array_header_t *v610;
  uint64_t v611;
  unint64_t v612;
  char *v613;
  unint64_t v614;
  char *v615;
  int v616;
  int v617;
  void *v618;
  off_t v619;
  _OWORD *v620;
  apr_allocator_t *v621;
  apr_status_t (__cdecl *v622)(void *);
  _QWORD *v623;
  apr_pool_t *v624;
  char *v625;
  int v626;
  int v627;
  const UInt8 *v628;
  uint64_t v629;
  off_t v630;
  size_t v631;
  ssize_t v632;
  ssize_t v633;
  const __CFData *v635;
  const __CFDictionary *v636;
  const __CFString *Value;
  const __CFUUID *v638;
  unint64_t v639;
  const char *v640;
  apr_array_header_t *v641;
  uint64_t tv_nsec;
  apr_array_header_t *v643;
  apr_hash_t *v644;
  char *v645;
  apr_pool_t *v646;
  char *v647;
  apr_hash_index_t *v648;
  unint64_t v649;
  unint64_t *v650;
  apr_pool_t **v651;
  apr_hash_t *v652;
  unsigned int *v653;
  unint64_t *v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  BOOL v658;
  apr_hash_t *ht;
  apr_hash_t *hta;
  __darwin_ino64_t st_ino;
  uint64_t v662;
  apr_array_header_t *v663;
  apr_array_header_t *v664;
  apr_pool_t *v665;
  apr_pool_t *v666;
  apr_pool_t *v667;
  apr_pool_t *v668;
  apr_pool_t *v669;
  apr_array_header_t *arr;
  apr_array_header_t *arra;
  apr_array_header_t *arrb;
  apr_array_header_t *arrc;
  apr_array_header_t *arrd;
  apr_array_header_t *arre;
  apr_array_header_t *arrf;
  apr_array_header_t *arrg;
  int v678;
  apr_array_header_t *v679;
  apr_array_header_t *v680;
  apr_pool_t *parent;
  char *v682;
  id v683;
  id v684;
  CFErrorRef error;
  char *appended;
  char *v687;
  char *v688;
  char *v689;
  apr_pool_t *v690[6];
  apr_array_header_t *v691;
  apr_array_header_t *v692;
  apr_pool_t *p;
  apr_pool_t *newpool;
  stat v695;
  stat v696;
  uint8_t buf[32];
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  uint64_t v709;

  v4 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v4))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = a1;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "LoadArchive %{public}s", buf, 0xCu);
  }

  bzero(buf, 0x400uLL);
  v5 = realpath_DARWIN_EXTSN(a1, (char *)buf);
  memset(&v696.st_blksize, 0, 32);
  v640 = a1;
  if (v5)
    v6 = v5;
  else
    v6 = a1;
  memset(&v696, 0, 112);
  v7 = gt_filepath_merge(v6, "index", a2);
  v8 = open(v7, 0);
  parent = a2;
  if ((v8 & 0x80000000) == 0)
  {
    v9 = v8;
    fstat(v8, &v696);
    v10 = apr_palloc(a2, v696.st_size);
    v11 = 0;
    st_size = v696.st_size;
    do
    {
      if ((unint64_t)(st_size - v11) >= 0x100000)
        v13 = 0x100000;
      else
        v13 = st_size - v11;
      v14 = read(v9, (char *)v10 + v11, v13);
      if (v14 == -1)
        v15 = 0;
      else
        v15 = v14;
      v11 += v15;
    }
    while (v14 != -1 && v11 != st_size);
    close(v9);
    if (v696.st_size >= 0x14uLL && *v10 == 1667851384 && !v10[1])
    {
      v17 = v10[2];
      if (v696.st_size - 20 >= (unint64_t)(12 * v17))
      {
        v606 = (uint64_t)&v10[3 * v17 + 5];
        v607 = v10[3];
        if (v696.st_size - (12 * (unint64_t)v17 + 20) >= 24 * v607)
        {
          v608 = v606 + 24 * v607;
          v609 = v10[4];
          if ((unint64_t)v10 + v696.st_size - v608 >= 2 * v609)
          {
            v610 = apr_array_make(parent, v609, 8);
            v611 = v10[4];
            if (!(_DWORD)v611)
            {
LABEL_725:
              v615 = gt_filepath_merge(v6, "store0", parent);
              v616 = open(v615, 0);
              if ((v616 & 0x80000000) == 0)
              {
                v617 = v616;
                memset(&v695, 0, sizeof(v695));
                fstat(v616, &v695);
                v618 = mmap(0, v695.st_size, 1, 2, v617, 0);
                v619 = v695.st_size;
                close(v617);
                v620 = apr_palloc(parent, 0x70uLL);
                v18 = (uint64_t)v620;
                if (v620)
                {
                  v620[5] = 0u;
                  v620[6] = 0u;
                  v620[3] = 0u;
                  v620[4] = 0u;
                  v620[1] = 0u;
                  v620[2] = 0u;
                  *v620 = 0u;
                }
                *(_QWORD *)v620 = apr_pstrdup(parent, v6);
                *(_QWORD *)(v18 + 8) = parent;
                *(_QWORD *)(v18 + 16) = v10;
                *(_QWORD *)(v18 + 24) = v696.st_size;
                *(_QWORD *)(v18 + 32) = v10 + 5;
                *(_QWORD *)(v18 + 40) = v606;
                *(_QWORD *)(v18 + 48) = v610;
                a2 = parent;
                *(_QWORD *)(v18 + 56) = *((_QWORD *)v10 + 1);
                *(_QWORD *)(v18 + 64) = v618;
                *(_QWORD *)(v18 + 72) = v619;
                *(_QWORD *)(v18 + 80) = apr_array_make(parent, 4, 24);
                *(_QWORD *)(v18 + 88) = apr_hash_make(parent);
                v690[0] = 0;
                if (!apr_pool_create_ex(v690, parent, 0, v621))
                {
                  v623 = (_QWORD *)(v18 + 96);
                  v624 = v690[0];
                  v625 = gt_filepath_merge(v6, "metadata", v690[0]);
                  v626 = open(v625, 0);
                  if (v626 < 0)
                  {
                    *v623 = 0;
                    *(_QWORD *)(v18 + 104) = 0;
                  }
                  else
                  {
                    v627 = v626;
                    memset(&v695, 0, sizeof(v695));
                    fstat(v626, &v695);
                    v628 = (const UInt8 *)apr_palloc(v624, v695.st_size);
                    v629 = 0;
                    v630 = v695.st_size;
                    do
                    {
                      if ((unint64_t)(v630 - v629) >= 0x100000)
                        v631 = 0x100000;
                      else
                        v631 = v630 - v629;
                      v632 = read(v627, (void *)&v628[v629], v631);
                      if (v632 == -1)
                        v633 = 0;
                      else
                        v633 = v632;
                      v629 += v633;
                    }
                    while (v632 != -1 && v629 != v630);
                    close(v627);
                    v635 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v628, v695.st_size, kCFAllocatorNull);
                    error = 0;
                    v636 = (const __CFDictionary *)CFPropertyListCreateWithData(kCFAllocatorDefault, v635, 0, 0, &error);
                    CFRelease(v635);
                    if (error)
                    {
                      *v623 = 0;
                      *(_QWORD *)(v18 + 104) = 0;
                      a2 = parent;
                    }
                    else
                    {
                      Value = (const __CFString *)CFDictionaryGetValue(v636, CFSTR("(uuid)"));
                      a2 = parent;
                      if (Value)
                      {
                        v638 = CFUUIDCreateFromString(kCFAllocatorDefault, Value);
                        *(CFUUIDBytes *)(v18 + 96) = CFUUIDGetUUIDBytes(v638);
                        CFRelease(v638);
                      }
                      else
                      {
                        *v623 = 0;
                        *(_QWORD *)(v18 + 104) = 0;
                      }
                    }
                    CFRelease(v636);
                  }
                  apr_pool_destroy(v624);
                }
                apr_pool_cleanup_register(a2, (const void *)v18, (apr_status_t (__cdecl *)(void *))GTCaptureArchive_cleanup, v622);
                goto LABEL_24;
              }
              a2 = parent;
              goto LABEL_23;
            }
            v612 = 0;
            v613 = (char *)v10 + v696.st_size;
            v614 = v608 + 2 * v611;
            while ((unint64_t)v613 > v614)
            {
              *(_QWORD *)apr_array_push(v610) = v614;
              v614 += *(unsigned __int16 *)(v608 + 2 * v612++);
              if (v612 >= v10[4])
                goto LABEL_725;
            }
          }
        }
        v18 = 0;
        a2 = parent;
        goto LABEL_24;
      }
    }
  }
LABEL_23:
  v18 = 0;
LABEL_24:
  v19 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v19))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4AAB5F, buf, 2u);
  }

  if (!v18)
    return 0;
  newpool = 0;
  apr_pool_create_ex(&newpool, a2, 0, v20);
  memset(&v695.st_ino, 0, 88);
  v21 = newpool;
  *(_QWORD *)&v695.st_dev = v18;
  v695.st_ino = (__darwin_ino64_t)GTCaptureArchiveDecompressor_create(newpool);
  *(_QWORD *)buf = 0;
  apr_pool_create_ex((apr_pool_t **)buf, 0, 0, v22);
  v23 = *(apr_pool_t **)buf;
  v24 = (pthread_mutex_t *)apr_palloc(*(apr_pool_t **)buf, 0x200uLL);
  v25 = (uint64_t)v24;
  if (v24)
  {
    *(_OWORD *)&v24[7].__opaque[24] = 0u;
    *(_OWORD *)&v24[7].__opaque[40] = 0u;
    *(_OWORD *)&v24[7].__sig = 0u;
    *(_OWORD *)&v24[7].__opaque[8] = 0u;
    *(_OWORD *)&v24[6].__opaque[24] = 0u;
    *(_OWORD *)&v24[6].__opaque[40] = 0u;
    *(_OWORD *)&v24[6].__sig = 0u;
    *(_OWORD *)&v24[6].__opaque[8] = 0u;
    *(_OWORD *)&v24[5].__opaque[24] = 0u;
    *(_OWORD *)&v24[5].__opaque[40] = 0u;
    *(_OWORD *)&v24[5].__sig = 0u;
    *(_OWORD *)&v24[5].__opaque[8] = 0u;
    *(_OWORD *)&v24[4].__opaque[24] = 0u;
    *(_OWORD *)&v24[4].__opaque[40] = 0u;
    *(_OWORD *)&v24[4].__sig = 0u;
    *(_OWORD *)&v24[4].__opaque[8] = 0u;
    *(_OWORD *)&v24[3].__opaque[24] = 0u;
    *(_OWORD *)&v24[3].__opaque[40] = 0u;
    *(_OWORD *)&v24[3].__sig = 0u;
    *(_OWORD *)&v24[3].__opaque[8] = 0u;
    *(_OWORD *)&v24[2].__opaque[24] = 0u;
    *(_OWORD *)&v24[2].__opaque[40] = 0u;
    *(_OWORD *)&v24[2].__sig = 0u;
    *(_OWORD *)&v24[2].__opaque[8] = 0u;
    *(_OWORD *)&v24[1].__opaque[24] = 0u;
    *(_OWORD *)&v24[1].__opaque[40] = 0u;
    *(_OWORD *)&v24[1].__sig = 0u;
    *(_OWORD *)&v24[1].__opaque[8] = 0u;
    *(_OWORD *)&v24->__opaque[24] = 0u;
    *(_OWORD *)&v24->__opaque[40] = 0u;
    *(_OWORD *)&v24->__sig = 0u;
    *(_OWORD *)&v24->__opaque[8] = 0u;
  }
  pthread_mutex_init(v24, 0);
  *(_QWORD *)(v25 + 88) = apr_hash_make(v23);
  v26 = GTCoreAlloc(0x148uLL);
  pthread_mutex_init((pthread_mutex_t *)(v26 + 264), 0);
  *(_QWORD *)(v25 + 64) = v26;
  *(_QWORD *)(v25 + 112) = GTTraceContext_openStream(v25, 0);
  atomic_store(0, (unsigned __int8 *)(v25 + 120));
  atomic_store(0, (unsigned int *)(v25 + 104));
  *(_QWORD *)&v695.st_uid = v25;
  *(_QWORD *)&v695.st_rdev = apr_hash_make(a2);
  v695.st_atimespec.tv_sec = (__darwin_time_t)apr_hash_make(a2);
  v695.st_atimespec.tv_nsec = (uint64_t)a2;
  memset(&v695.st_mtimespec, 0, 48);
  st_ino = v695.st_ino;
  v656 = *(_QWORD *)&v695.st_uid;
  v27 = (char *)apr_palloc(a2, 0x118uLL);
  if (v27)
  {
    *(_OWORD *)(v27 + 8) = 0u;
    *(_OWORD *)(v27 + 248) = 0u;
    *(_OWORD *)(v27 + 264) = 0u;
    *(_OWORD *)(v27 + 216) = 0u;
    *(_OWORD *)(v27 + 232) = 0u;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 168) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 24) = 0u;
    *(_OWORD *)(v27 + 40) = 0u;
  }
  *(_QWORD *)v27 = v18;
  v682 = v27;
  *(_OWORD *)(v27 + 24) = *(_OWORD *)&v695.st_rdev;
  v28 = apr_array_make(a2, 128, 64);
  atomic_store(1u, (unsigned int *)(*(_QWORD *)&v695.st_uid + 104));
  p = 0;
  apr_pool_create_ex(&p, v21, 0, v29);
  v30 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v30))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v30, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "SortArchiveStrings", buf, 2u);
  }

  v31 = apr_array_copy(p, *(const apr_array_header_t **)(v18 + 48));
  qsort(v31->elts, v31->nelts, v31->elt_size, (int (__cdecl *)(const void *, const void *))GTCaptureArchive_strcmp);
  v32 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v32))
  {
    nelts = v31->nelts;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = nelts;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v32, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "x%d", buf, 8u);
  }

  v34 = apr_array_make(v21, 4, 8);
  GTCaptureArchive_filenamesWithPrefix(v31->nelts, (const char **)v31->elts, "startup", v34);
  GTCaptureArchive_filenamesWithPrefix(v31->nelts, (const char **)v31->elts, "device-resources", v34);
  if ((dword_75313C & 0x800) == 0)
    GTCaptureArchive_filenamesWithPrefix(v31->nelts, (const char **)v31->elts, "unused-device-resources", v34);
  v35 = v682;
  v664 = v28;
  v665 = (apr_pool_t *)v18;
  if (v34->nelts >= 1)
  {
    v36 = 0;
    ht = (apr_hash_t *)v34;
    while (1)
    {
      v37 = *(char **)&v34->elts[8 * v36];
      v38 = p;
      v39 = GTCaptureArchive_mapData(v18, st_ino, v37, p);
      v41 = v40;
      v678 = strncmp(v37, "unused-device-resources", 0x17uLL);
      v42 = dword_75313C;
      v43 = apr_array_make(v38, 16, 8);
      v44 = g_signpostLog;
      if (os_signpost_enabled((os_log_t)v44))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v37;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v41;
        _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v44, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "ReadTrace %{public}s (%{xcode:size-in-bytes}zu)", buf, 0x16u);
      }

      v45 = atomic_load((unint64_t *)(*(_QWORD *)&v695.st_uid + 72));
      arr = (apr_array_header_t *)v45;
      if (v41 >= 9)
        break;
LABEL_65:
      v35 = v682;
      v28 = v664;
      if (v43->nelts)
      {
        v57 = 0;
        do
          AddResourceRestoreRequest(v664, (uint64_t)&v695, *(_QWORD *)&v43->elts[8 * v57++], 0xFFFFFFFFFFFFFFFFLL);
        while (v57 < v43->nelts);
      }
      v58 = g_signpostLog;
      v34 = (apr_array_header_t *)ht;
      if (os_signpost_enabled((os_log_t)v58))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v58, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4AAB5F, buf, 2u);
      }

      apr_pool_clear(p);
      v18 = (uint64_t)v665;
      if (!v678)
      {
        v59 = atomic_load((unint64_t *)(*(_QWORD *)&v695.st_uid + 72));
        *((_QWORD *)v682 + 8) = arr;
        *((_QWORD *)v682 + 9) = v59 - (_QWORD)arr;
      }
      if (++v36 >= *((int *)ht + 3))
        goto LABEL_73;
    }
    v46 = (v678 | v42 & 0x400) != 0;
    v47 = 8;
    while (1)
    {
      v48 = (unsigned int *)((char *)v39 + v47);
      GTTraceFbufToFunc(&v695, (char *)v39 + v47);
      v49 = *(unsigned int *)((char *)v39 + v47 + 4);
      if (v49 <= -10241)
      {
        if (v49 == -16313 || v49 == -16236 || v49 == -16234)
        {
LABEL_58:
          if (v46)
            *(_QWORD *)apr_array_push(v43) = v48;
        }
      }
      else
      {
        v50 = v49 + 10240;
        v306 = v50 > 0x32;
        v51 = (1 << v50) & 0x440000020011DLL;
        if (!v306 && v51 != 0)
          goto LABEL_58;
      }
      v55 = *v48;
      if ((*((_BYTE *)v48 + 33) & 0x10) != 0)
      {
        v56 = *v48;
        do
        {
          v48 = (unsigned int *)((char *)v48 + v55);
          v55 = *v48;
          v56 += v55;
        }
        while ((*((_BYTE *)v48 + 33) & 0x20) == 0);
      }
      else
      {
        v56 = *v48;
      }
      v47 += v56;
      if (v47 >= v41)
        goto LABEL_65;
    }
  }
LABEL_73:
  qsort(v28->elts, v28->nelts, v28->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLDataSource_compareRestores);
  v60 = atomic_load((unint64_t *)(*(_QWORD *)&v695.st_uid + 72));
  if (!(v35[8] + v35[9]))
    v35[8] = v60;
  v61 = v28->nelts;
  v62 = parent;
  if ((int)v61 >= 1)
  {
    v63 = (unint64_t *)(v28->elts + 16);
    do
    {
      *v63 = v60;
      v63 += 8;
      --v61;
    }
    while (v61);
  }
  v691 = 0;
  v692 = 0;
  LODWORD(v690[0]) = 1;
  *(_OWORD *)((char *)v690 + 4) = 0u;
  memset((char *)&v690[2] + 4, 0, 28);
  v692 = apr_array_make(parent, 15, 8);
  v691 = apr_array_make(parent, 2048, 32);
  v35[16] = apr_array_make(parent, 128, 8);
  v35[18] = apr_hash_make(parent);
  v35[21] = apr_hash_make(parent);
  v64 = apr_hash_make(parent);
  v35[22] = v64;
  v65 = (apr_hash_t *)v35[21];
  v66 = p;
  v653 = GTCaptureArchive_mapData((uint64_t)v665, st_ino, "capture", p);
  v68 = v67;
  v69 = apr_hash_make(v66);
  hta = apr_hash_make(v66);
  v70 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v70))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "capture";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v68;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v70, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-2-restore", "ReadTrace %{public}s (%{xcode:size-in-bytes}zu)", buf, 0x16u);
  }

  if (v68 >= 9)
  {
    v658 = 0;
    v650 = (unint64_t *)(v656 + 80);
    v644 = v64;
    v647 = (char *)v69 + 24;
    v648 = (apr_hash_t *)((char *)v69 + 16);
    v71 = 8;
    v72 = (apr_pool_t *)v60;
    v654 = (unint64_t *)(v656 + 72);
    v655 = v60;
    v651 = (apr_pool_t **)v69;
    v652 = v65;
    v73 = (unint64_t *)(v656 + 72);
    v649 = v68;
    v639 = v60;
    while (1)
    {
      v666 = v72;
      v74 = (apr_array_header_t *)((char *)v653 + v71);
      v75 = *(unsigned int *)((char *)v653 + v71 + 4);
      v76 = (v75 + 15345) > 0x38 || ((0x17C40BE00017E7FuLL >> (v75 - 15)) & 1) == 0;
      v657 = v71;
      if (!v76)
        break;
      v77 = v650;
      if (!v658)
      {
        v81 = GetFuncEnumConstructorType(v75) == 25;
LABEL_97:
        v78 = v81;
        goto LABEL_106;
      }
      v78 = 0;
      if (v75 <= -15909)
      {
        v79 = v75 == -16361;
        v80 = -16202;
      }
      else
      {
        v79 = v75 == -15908 || v75 == -15318;
        v80 = -15316;
      }
      if (!v79 && v75 != v80)
        v78 = 1;
LABEL_106:
      v679 = v74;
      v658 = v78;
      if (IsFuncEnumDestructor(v75))
      {
        v83 = *(_QWORD *)&v74[1].elt_size;
        v84 = *(_QWORD *)&v695.st_rdev;
        v85 = atomic_load((unint64_t *)(*(_QWORD *)&v695.st_uid + 72));
        if (GetAliasStream(v84, v83, v85))
        {
          GTTraceFbufToFunc(&v695, v74);
LABEL_191:
          pool_high = HIDWORD(v74->pool);
          goto LABEL_192;
        }
      }
      if (((uint64_t)v74[1].pool & 2) != 0
        || v78 && AddResourceRestoreRequest(v28, (uint64_t)&v695, (uint64_t)v74, (unint64_t)v666))
      {
        do
          v86 = __ldaxr(v73);
        while (__stlxr(v86 + 1, v73));
        pool_high = HIDWORD(v74->pool);
        if (GetFuncEnumConstructorType(pool_high))
        {
          do
            v88 = __ldaxr(v77);
          while (__stlxr(v88 + 1, v77));
          goto LABEL_191;
        }
        goto LABEL_192;
      }
      if (HIDWORD(v74->pool) == -10229)
      {
        v89 = (uint64_t)&v74[1].pool + 4;
        v90 = strcmp((const char *)&v74[1].pool + 4, "CUUUU");
        v91 = v74;
        v92 = v90;
        v689 = 0;
        error = *(CFErrorRef *)&v91[1].nelts;
        *(_QWORD *)buf = 16;
        appended = (char *)AppendString_11072((const char **)&appended, v89, (uint64_t *)buf);
        v687 = (char *)AppendString_11072((const char **)&v687, v89, (uint64_t *)buf);
        v688 = (char *)AppendString_11072((const char **)&v688, v89, (uint64_t *)buf);
        if (!v92)
          v689 = (char *)AppendString_11072((const char **)&v689, v89, (uint64_t *)buf);
        v93 = (apr_pool_t **)*((_QWORD *)v682 + 18);
        v94 = *v93;
        v95 = (char *)apr_palloc(*v93, 0x80uLL);
        if (v95)
        {
          *((_QWORD *)v95 + 15) = 0;
          *(_OWORD *)(v95 + 104) = 0u;
          *(_OWORD *)(v95 + 88) = 0u;
          *(_OWORD *)(v95 + 72) = 0u;
          *(_OWORD *)(v95 + 56) = 0u;
          *(_OWORD *)(v95 + 40) = 0u;
          *(_OWORD *)(v95 + 24) = 0u;
          *(_OWORD *)(v95 + 8) = 0u;
        }
        *(_QWORD *)v95 = error;
        v645 = v95;
        apr_hash_set((apr_hash_t *)v93, v95, 8, v95);
        v646 = *(apr_pool_t **)v695.st_ino;
        Data = GTCaptureArchive_readData(*(const char ***)&v695.st_dev, (apr_pool_t **)v695.st_ino, appended, *(apr_pool_t **)v695.st_ino, 0);
        v97 = *((_QWORD *)Data + 1);
        arra = apr_array_make(v94, v97, 8);
        v662 = v97;
        if (v97)
        {
          v98 = 0;
          v99 = (uint64_t *)(Data + 16);
          do
          {
            v101 = *v99++;
            v100 = v101;
            v102 = apr_hash_make(v94);
            *(_QWORD *)apr_array_push(arra) = v102;
            if (v101)
            {
              v103 = 0;
              do
              {
                v104 = apr_palloc(v94, 8uLL);
                AliasStream2 = (uint64_t *)GetAliasStream2((uint64_t)&v695, *v99);
                if (AliasStream2)
                  v106 = *AliasStream2;
                else
                  v106 = 0;
                *v104 = v106;
                v107 = v99[1];
                v108 = apr_array_make(v94, v107, 16);
                apr_hash_set(v102, v104, 8, v108);
                for (v99 += 2; v107; --v107)
                {
                  v109 = (uint64_t *)GetAliasStream2((uint64_t)&v695, *v99);
                  if (v109)
                  {
                    v110 = *v109;
                    if (*v109)
                    {
                      v111 = v99[1];
                      v112 = apr_array_push(v108);
                      *v112 = v110;
                      v112[1] = v111;
                    }
                  }
                  v99 += 2;
                }
                qsort(v108->elts, v108->nelts, v108->elt_size, (int (__cdecl *)(const void *, const void *))DYMTLMutableBufferAncestor_compare);
                ++v103;
              }
              while (v103 != v100);
            }
            ++v98;
          }
          while (v98 != v662);
        }
        *((_QWORD *)v645 + 12) = arra;
        apr_pool_clear(v646);
        v113 = GTCaptureArchive_readData(*(const char ***)&v695.st_dev, (apr_pool_t **)v695.st_ino, v687, v646, 0);
        v114 = *((_DWORD *)v113 + 2);
        v115 = apr_array_make(v94, 32, 40);
        arrb = apr_array_make(v94, v114, 16);
        if (v114 >= 1)
        {
          v116 = 0;
          v117 = (uint64_t *)(v113 + 16);
          do
          {
            v118 = v115->nelts;
            v120 = *v117++;
            v119 = v120;
            v121 = apr_array_push(arrb);
            *v121 = v118;
            v121[1] = v120;
            v122 = v120;
            if (v120)
            {
              do
              {
                v123 = apr_array_push(v115);
                v124 = v117 + 5;
                v125 = (uint64_t *)GetAliasStream2((uint64_t)&v695, *v117);
                if (v125)
                  v126 = *v125;
                else
                  v126 = 0;
                *v123 = v126;
                v123[1] = v117[1];
                v123[2] = v117[2];
                v127 = (uint64_t *)GetAliasStream2((uint64_t)&v695, v117[3]);
                if (v127)
                  v128 = *v127;
                else
                  v128 = 0;
                v123[3] = v128;
                v123[4] = v117[4];
                v117 += 5;
                --v122;
              }
              while (v122);
              v117 = v124;
            }
            qsort(&v115->elts[40 * (int)v118], v119, v115->elt_size, (int (__cdecl *)(const void *, const void *))GTTrackerIndirectArgumentBufferInfo_compare);
            ++v116;
          }
          while (v116 != v114);
        }
        *((_QWORD *)v645 + 13) = v115;
        *((_QWORD *)v645 + 14) = arrb;
        apr_pool_clear(v646);
        v129 = (unsigned int *)GTCaptureArchive_readData(*(const char ***)&v695.st_dev, (apr_pool_t **)v695.st_ino, v688, v646, 0);
        memset(&v696.st_rdev, 0, 48);
        v130 = *v129;
        v131 = v129 + 4;
        v132 = v129[2];
        v133 = apr_array_make(v94, v132, 24);
        if (v132 >= 1)
        {
          do
          {
            v134 = apr_array_push(v133);
            v134[2] = *v131;
            *v134 = v131[1];
            v135 = v131[2];
            v131 += 3;
            v134[1] = v135;
            --v132;
          }
          while (v132);
        }
        *(_QWORD *)buf = v131;
        *(_QWORD *)&v696.st_dev = v133;
        UniqueIdentifierResourceGroup = LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
        v696.st_ino = (__darwin_ino64_t)UniqueIdentifierResourceGroup;
        arrc = LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
        *(_QWORD *)&v696.st_uid = arrc;
        if (v130 <= 0x16)
        {
          v663 = apr_array_make(v94, 0, 32);
          *(_QWORD *)&v696.st_rdev = v663;
          v643 = apr_array_make(v94, 0, 32);
          v696.st_atimespec.tv_sec = (__darwin_time_t)v643;
          tv_nsec = (uint64_t)apr_array_make(v94, 0, 32);
          v696.st_atimespec.tv_nsec = tv_nsec;
          v28 = v664;
        }
        else
        {
          v663 = LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
          *(_QWORD *)&v696.st_rdev = v663;
          v643 = LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
          v696.st_atimespec.tv_sec = (__darwin_time_t)v643;
          v696.st_atimespec.tv_nsec = (uint64_t)LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
          v28 = v664;
          tv_nsec = v696.st_atimespec.tv_nsec;
          if (v130 > 0x2E)
          {
            v641 = LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
            v696.st_mtimespec.tv_sec = (__darwin_time_t)v641;
            if (v130 >= 0x36)
            {
              v137 = LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
              v696.st_mtimespec.tv_nsec = (uint64_t)v137;
              v138 = LoadUniqueIdentifierResourceGroup((int **)buf, v130, v94);
LABEL_160:
              v146 = (uint64_t)v138;
              v696.st_ctimespec.tv_sec = (__darwin_time_t)v138;
              if (v133->nelts >= 1)
              {
                v147 = 0;
                v148 = 16;
                do
                {
                  elts = v133->elts;
                  v150 = (uint64_t *)GetAliasStream2((uint64_t)&v695, *(_QWORD *)&elts[v148]);
                  if (v150)
                    v151 = *v150;
                  else
                    v151 = 0;
                  *(_QWORD *)&elts[v148] = v151;
                  ++v147;
                  v148 += 24;
                }
                while (v147 < v133->nelts);
              }
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, (uint64_t)UniqueIdentifierResourceGroup);
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, (uint64_t)arrc);
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, (uint64_t)v663);
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, (uint64_t)v643);
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, tv_nsec);
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, (uint64_t)v641);
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, (uint64_t)v137);
              ConvertUniqueIdentifierResources((uint64_t *)&v695.st_dev, v146);
              GTMTLIndirectResources_optimizeByKey((uint64_t *)buf, (uint64_t *)&v696.st_dev, 0, v94);
              *(_OWORD *)(v645 + 40) = v698;
              *(_OWORD *)(v645 + 56) = v699;
              *(_OWORD *)(v645 + 72) = v700;
              *((_QWORD *)v645 + 11) = v701;
              *(_OWORD *)(v645 + 8) = *(_OWORD *)buf;
              *(_OWORD *)(v645 + 24) = *(_OWORD *)&buf[16];
              apr_pool_clear(v646);
              if (v689)
              {
                v152 = GTCaptureArchive_readData(*(const char ***)&v695.st_dev, (apr_pool_t **)v695.st_ino, v689, v94, 0);
                v154 = dispatch_data_create(v152, v153, 0, &__block_literal_global_2229);
                v155 = (void *)*((_QWORD *)v645 + 15);
                *((_QWORD *)v645 + 15) = v154;

                apr_pool_cleanup_register(v94, v645, (apr_status_t (__cdecl *)(void *))DYMTLIndirectArgumentBufferManager_cleanup, v156);
              }
              v74 = v679;
              v62 = parent;
              v60 = v639;
              v64 = v644;
              v68 = v649;
              v73 = v654;
              do
                v157 = __ldaxr(v654);
              while (__stlxr(v157 + 1, v654));
              goto LABEL_191;
            }
LABEL_159:
            v137 = apr_array_make(v94, 0, 32);
            v696.st_mtimespec.tv_nsec = (uint64_t)v137;
            v138 = apr_array_make(v94, 0, 32);
            goto LABEL_160;
          }
        }
        v641 = apr_array_make(v94, 0, 32);
        v696.st_mtimespec.tv_sec = (__darwin_time_t)v641;
        goto LABEL_159;
      }
      GTTraceFbufToFunc(&v695, v74);
      v139 = HIDWORD(v74->pool);
      FuncEnumConstructorType = GetFuncEnumConstructorType(v139);
      if (FuncEnumConstructorType == 51 || FuncEnumConstructorType == 25)
      {
        v141 = (uint64_t)&v74[1].pool + 4;
        v142 = (LODWORD(v74->pool) - 36);
        *(_QWORD *)&v696.st_dev = 0;
        FBDecoder_DecodeArguments((unsigned int *)&v696, v141, v142, (uint64_t)buf, 0x10uLL);
        *(_DWORD *)&v696.st_mode = 0;
        FBDecoder_DecodeArguments((unsigned int *)&v696, v141, v142, (uint64_t)buf, 0x10uLL);
        *(_QWORD *)&v696.st_dev = **(_QWORD **)buf;
        v143 = (apr_hash_t *)*((_QWORD *)v682 + 18);
        v144 = *(uint64_t **)(*(_QWORD *)(*find_entry(*((_QWORD *)v682 + 3), &v696, 8uLL, 0) + 32) + 8);
        if (v144)
          v145 = *v144;
        else
          v145 = 0;
        entry = find_entry((uint64_t)v143, &v696, 8uLL, 0);
        if (*entry)
        {
          v159 = *(_QWORD **)(*entry + 32);
          if (v159)
          {
            *(_QWORD *)buf = *v159;
            apr_hash_set(v143, buf, 8, 0);
            *v159 = v145;
            apr_hash_set(v143, v159, 8, v159);
          }
        }
        v139 = HIDWORD(v679->pool);
        v73 = v654;
      }
      v160 = (char *)v666 - v60;
      if (v139 == -12281
        || (IsFuncEnumPushDebugGroup(v139) & 1) != 0
        || IsFuncEnumCreateCommandEncoder(v139)
        || (v161 = GetFuncEnumConstructorType(v139), v161 == 51)
        || v161 == 25)
      {
        v162 = v692->nelts;
        if (v162)
          v163 = &v692->elts[8 * v162 - 8];
        else
          v163 = 0;
        v164 = apr_array_push(v692);
        v165 = v691;
        *v164 = v691->nelts;
        v164[1] = v139;
        v166 = apr_array_push(v165);
        v166[7] = v164[1];
        if (v163)
          v167 = *v164 - *(_DWORD *)v163;
        else
          v167 = 0;
        v166[4] = v167;
        *(_QWORD *)v166 = v160;
      }
      else
      {
        if (v139 != -12280 && (IsFuncEnumPopDebugGroup(v139) & 1) == 0 && (IsFuncEnumEndEncoding(v139) & 1) == 0)
        {
          if (v139 > -15344)
          {
            if ((v139 + 15343) > 0x1B || ((1 << (v139 - 17)) & 0xA000001) == 0)
              goto LABEL_188;
          }
          else if (v139 != -16361 && v139 != -16202 && v139 != -15908)
          {
            goto LABEL_188;
          }
        }
        if ((IsFuncEnumEndEncoding(v139) & 1) != 0)
          goto LABEL_259;
        if (v139 > -15344)
        {
          if ((v139 + 15343) <= 0x1B && ((1 << (v139 - 17)) & 0xA000001) != 0)
          {
LABEL_259:
            while (1)
            {
              v195 = v692;
              if (!v692)
                break;
              v196 = v692->nelts;
              if (!v196 || !IsFuncEnumPushDebugGroup(*(_DWORD *)&v692->elts[8 * v196 - 4]))
                goto LABEL_264;
              GroupBuilder_popGroup((uint64_t)v690, (uint64_t)v666 - v60);
            }
LABEL_268:
            *(_QWORD *)&buf[16] = 0;
            *(_QWORD *)&buf[24] = 0;
            v698 = 0uLL;
            *(_DWORD *)buf = v690[0];
            *(_DWORD *)&buf[4] = 500;
            *(_QWORD *)&buf[8] = "!apr_is_empty_array(builder->stack)";
            GTError_addError((int *)v690, (uint64_t)buf);
            goto LABEL_188;
          }
        }
        else if (v139 == -16361 || v139 == -16202 || v139 == -15908)
        {
          goto LABEL_259;
        }
        v195 = v692;
        if (!v692)
          goto LABEL_268;
LABEL_264:
        v197 = v195->nelts;
        if (!v197)
          goto LABEL_268;
        if (!IsFuncEnumPopDebugGroup(v139)
          || IsFuncEnumPushDebugGroup(*(_DWORD *)&v195->elts[8 * v197 - 4]))
        {
          GroupBuilder_popGroup((uint64_t)v690, (uint64_t)v666 - v60);
        }
      }
LABEL_188:
      v74 = v679;
      pool_high = HIDWORD(v679->pool);
      v64 = v644;
      if (IsFuncEnumGPUCommandCall(pool_high) || (pool_high & 0xFFFFFFFC) == 0xFFFFC1A4)
      {
        *(_QWORD *)apr_array_push(*((apr_array_header_t **)v682 + 16)) = v160;
        goto LABEL_191;
      }
LABEL_192:
      if (pool_high == -15597)
      {
        *(_QWORD *)buf = *(_QWORD *)&v74[1].nelts;
        *(_QWORD *)&v696.st_dev = 16;
        AppendString_11072((const char **)&buf[8], (uint64_t)&v74[1].pool + 4, (uint64_t *)&v696.st_dev);
        DeviceObjectStreamRef = GetDeviceObjectStreamRef((uint64_t)&v695, *(uint64_t *)buf);
        v169 = v651;
        v173 = apr_palloc(*v651, 8uLL);
        *v173 = DeviceObjectStreamRef;
        apr_hash_set((apr_hash_t *)v651, v173, 8, &RecordVisibleFunctionTableMutation_sValue);
        v168 = v652;
      }
      else
      {
        v169 = v651;
        v168 = v652;
        if (pool_high != -15598)
          goto LABEL_197;
        v170 = GetDeviceObjectStreamRef((uint64_t)&v695, *(_QWORD *)&v74[1].nelts);
        v171 = apr_palloc(*v651, 8uLL);
        *v171 = v170;
        apr_hash_set((apr_hash_t *)v651, v171, 8, &RecordVisibleFunctionTableMutation_sValue);
      }
      pool_high = HIDWORD(v74->pool);
LABEL_197:
      if (pool_high > -15531)
      {
        if (pool_high > -15259)
        {
          if (pool_high != -15258)
          {
            v174 = -15257;
            goto LABEL_211;
          }
        }
        else if (pool_high != -15530)
        {
          v174 = -15529;
LABEL_211:
          if (pool_high != v174)
            goto LABEL_214;
        }
LABEL_212:
        v175 = *(_QWORD *)&v74[1].nelts;
        goto LABEL_213;
      }
      if (pool_high > -15546)
      {
        if (pool_high == -15545)
          goto LABEL_212;
        if (pool_high != -15544)
          goto LABEL_214;
        *(_QWORD *)&v698 = 0;
        memset(buf, 0, sizeof(buf));
        DYTraceDecode_MTLArgumentEncoder_setBuffers_offsets_withRange((uint64_t)buf, (uint64_t)v74, (LODWORD(v74->pool) - 36), 0);
      }
      else
      {
        if (pool_high == -15559)
          goto LABEL_212;
        if (pool_high != -15558)
          goto LABEL_214;
        memset(buf, 0, sizeof(buf));
        DYTraceDecode_MTLArgumentEncoder_setIndirectCommandBuffers_withRange((uint64_t)buf, (uint64_t)v74, (LODWORD(v74->pool) - 36), 0);
      }
      v175 = *(_QWORD *)buf;
LABEL_213:
      v176 = GetDeviceObjectStreamRef((uint64_t)&v695, v175);
      v177 = apr_palloc(*(apr_pool_t **)hta, 8uLL);
      *v177 = v176;
      v74 = v679;
      apr_hash_set(hta, v177, 8, &RecordIntersectionFunctionTableMutation_sValue);
LABEL_214:
      v178 = HIDWORD(v74->pool);
      if (v178 <= -15909)
      {
        if (v178 == -16361)
          goto LABEL_221;
        v179 = -16202;
      }
      else
      {
        if (v178 == -15908 || v178 == -15316)
        {
LABEL_221:
          v169[2] = (apr_pool_t *)v169;
          *(_QWORD *)v647 = 0;
          *((_QWORD *)v647 + 1) = 0;
          *((_DWORD *)v647 + 4) = 0;
          v180 = apr_hash_next(v648);
          if (v180)
          {
            v181 = v180;
            do
            {
              *(_QWORD *)buf = 0;
              *(_QWORD *)buf = **(_QWORD **)(*((_QWORD *)v181 + 1) + 16);
              v182 = *find_entry((uint64_t)v168, buf, 8uLL, 0);
              if (!v182 || (v183 = *(apr_array_header_t **)(v182 + 32)) == 0)
              {
                v183 = apr_array_make(v62, 8, 16);
                v184 = apr_palloc(v62, 8uLL);
                *v184 = *(_QWORD *)buf;
                apr_hash_set(v168, v184, 8, v183);
              }
              v185 = apr_array_push(v183);
              *v185 = v655 + 1;
              v185[1] = (char *)v666 - v655;
              v181 = apr_hash_next(v181);
            }
            while (v181);
          }
          *((_QWORD *)hta + 2) = hta;
          *((_QWORD *)hta + 3) = 0;
          *((_QWORD *)hta + 4) = 0;
          *((_DWORD *)hta + 10) = 0;
          v186 = apr_hash_next((apr_hash_t *)((char *)hta + 16));
          v187 = v666;
          if (v186)
          {
            v188 = v186;
            do
            {
              *(_QWORD *)buf = 0;
              *(_QWORD *)buf = **(_QWORD **)(*((_QWORD *)v188 + 1) + 16);
              v189 = *find_entry((uint64_t)v64, buf, 8uLL, 0);
              if (!v189 || (v190 = *(apr_array_header_t **)(v189 + 32)) == 0)
              {
                v190 = apr_array_make(v62, 8, 16);
                v191 = apr_palloc(v62, 8uLL);
                *v191 = *(_QWORD *)buf;
                apr_hash_set(v64, v191, 8, v190);
              }
              v192 = apr_array_push(v190);
              *v192 = v655 + 1;
              v192[1] = (char *)v666 - v655;
              v188 = apr_hash_next(v188);
            }
            while (v188);
          }
          apr_hash_clear((apr_hash_t *)v169);
          apr_hash_clear(hta);
          v655 = (unint64_t)v666;
          v68 = v649;
          v73 = v654;
          v74 = v679;
          goto LABEL_234;
        }
        v179 = -15318;
      }
      if (v178 == v179)
        goto LABEL_221;
      v187 = v666;
LABEL_234:
      pool_low = LODWORD(v74->pool);
      if ((BYTE1(v74[1].pool) & 0x10) != 0)
      {
        v194 = LODWORD(v74->pool);
        do
        {
          v74 = (apr_array_header_t *)((char *)v74 + pool_low);
          pool_low = LODWORD(v74->pool);
          v194 += pool_low;
        }
        while ((BYTE1(v74[1].pool) & 0x20) == 0);
      }
      else
      {
        v194 = LODWORD(v74->pool);
      }
      v71 = v194 + v657;
      v72 = (apr_pool_t *)((char *)v187 + 1);
      if (v194 + v657 >= v68)
        goto LABEL_269;
    }
    v77 = v650;
    if (v658)
    {
      v78 = v75 != -15343;
      goto LABEL_106;
    }
    v81 = GetFuncEnumConstructorType(v75) == 51;
    goto LABEL_97;
  }
LABEL_269:
  v198 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v198))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v198, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-2-restore", (const char *)&unk_4AAB5F, buf, 2u);
  }

  apr_pool_clear(p);
  v199 = atomic_load((unint64_t *)(*(_QWORD *)&v695.st_uid + 72));
  *((_QWORD *)v682 + 10) = v60;
  *((_QWORD *)v682 + 11) = v199 - v60;
  while (v692 && v692->nelts)
    GroupBuilder_popGroup((uint64_t)v690, v199);
  *((_QWORD *)v682 + 14) = v691;
  apr_pool_destroy(p);
  v200 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v200))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v200, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "BuildMemoryMap", buf, 2u);
  }

  v201 = *(_QWORD *)&v695.st_uid;
  pthread_mutex_lock(*(pthread_mutex_t **)&v695.st_uid);
  v202 = apr_hash_copy(v62, *(const apr_hash_t **)(v201 + 88));
  pthread_mutex_unlock((pthread_mutex_t *)v201);
  *((_QWORD *)v682 + 1) = v202;
  v203 = apr_hash_make(v62);
  *((_QWORD *)v202 + 3) = 0;
  *((_QWORD *)v202 + 4) = 0;
  *((_QWORD *)v202 + 2) = v202;
  *((_DWORD *)v202 + 10) = 0;
  v204 = apr_hash_next((apr_hash_t *)((char *)v202 + 16));
  if (v204)
  {
    v205 = v204;
    do
    {
      for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v205 + 1) + 32) + 24) + 8); i; i = *(_QWORD *)(i + 40))
      {
        v207 = atomic_load((unsigned int *)(i + 4));
        v208 = v207 - 64;
        if ((int)(v207 - 64) >= 1)
        {
          v209 = (_DWORD *)(i + 64);
          do
          {
            apr_hash_set(v203, v209, 9, v209);
            v210 = (v209[3] + 23) & 0xFFFFFFF8;
            v209 = (_DWORD *)((char *)v209 + v210);
            v211 = __OFSUB__(v208, v210);
            v208 -= v210;
          }
          while (!((v208 < 0) ^ v211 | (v208 == 0)));
        }
      }
      v205 = apr_hash_next(v205);
    }
    while (v205);
  }
  *((_QWORD *)v682 + 2) = v203;
  v212 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v212))
  {
    v213 = *(_DWORD *)(*((_QWORD *)v682 + 2) + 48);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v213;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v212, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "%d", buf, 8u);
  }

  v214 = *((_QWORD *)v682 + 10);
  v215 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v215))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v215, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "OrderDispatchCommandBuffers", buf, 2u);
  }

  v216 = *((_QWORD *)v682 + 1);
  v218 = *((_QWORD *)v682 + 10);
  v217 = *((_QWORD *)v682 + 11);
  v219 = apr_array_make(v62, v217, 64);
  v219->nelts = v217;
  *(_DWORD *)(v216 + 40) = 0;
  *(_QWORD *)(v216 + 16) = v216;
  *(_QWORD *)(v216 + 24) = 0;
  *(_QWORD *)(v216 + 32) = 0;
  v220 = apr_hash_next((apr_hash_index_t *)(v216 + 16));
  if (v220)
  {
    v221 = v217 + v218;
    do
    {
      for (j = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v220 + 1) + 32) + 32); j; j = *(_QWORD *)(j + 40))
      {
        v223 = atomic_load((unsigned int *)(j + 4));
        v224 = (v223 >> 6) - 1;
        if (v223 >> 6 == 1)
        {
          v225 = 0;
        }
        else
        {
          v225 = v224;
          v226 = (char *)(j + (v223 & 0xFFFFFFC0) - 49);
          do
          {
            v227 = *v226;
            v226 -= 64;
            if ((v227 & 8) != 0)
              break;
            --v225;
          }
          while (v225);
        }
        if (v223 < 0x80)
        {
          v228 = j + 64;
        }
        else
        {
          v228 = j + 64;
          do
          {
            v229 = v224 >> 1;
            v230 = (unint64_t *)(v228 + (v224 >> 1 << 6));
            v232 = *v230;
            v231 = v230 + 8;
            v224 += ~(v224 >> 1);
            if (v232 >= v218)
              v224 = v229;
            else
              v228 = (unint64_t)v231;
          }
          while (v224 > 0);
        }
        v233 = j + 64 + (v225 << 6);
        while (v228 < v233)
        {
          if (*(_QWORD *)v228 < v218 || *(_QWORD *)v228 >= v221)
            goto LABEL_315;
          v235 = &v219->elts[64 * (*(_QWORD *)v228 - v218)];
          v236 = *(_OWORD *)v228;
          v237 = *(_OWORD *)(v228 + 16);
          v238 = *(_OWORD *)(v228 + 48);
          *((_OWORD *)v235 + 2) = *(_OWORD *)(v228 + 32);
          *((_OWORD *)v235 + 3) = v238;
          *(_OWORD *)v235 = v236;
          *((_OWORD *)v235 + 1) = v237;
          v228 += 64;
        }
      }
LABEL_315:
      v220 = apr_hash_next(v220);
    }
    while (v220);
  }
  *((_QWORD *)v682 + 15) = v219;
  v239 = *((_QWORD *)v682 + 1);
  v240 = *((_QWORD *)v682 + 2);
  v680 = apr_array_make(parent, 8, 8);
  if (!v219->nelts)
    goto LABEL_369;
  v242 = *(_QWORD *)v219->elts;
  *(_QWORD *)buf = 0;
  apr_pool_create_ex((apr_pool_t **)buf, parent, 0, v241);
  v243 = *(apr_pool_t **)buf;
  arrd = (apr_array_header_t *)apr_hash_make(*(apr_pool_t **)buf);
  if (v219->nelts < 1)
    goto LABEL_368;
  v244 = 0;
  do
  {
    v245 = (uint64_t)&v219->elts[64 * v244];
    v246 = *(_DWORD *)(v245 + 8);
    if (v246 <= -15909)
    {
      if (v246 == -16362)
      {
        *(_QWORD *)&v696.st_dev = 0;
        *(_QWORD *)&v696.st_dev = GTTraceFunc_targetContext(v245, v240);
        v261 = find_entry(v239, &v696, 8uLL, 0);
        if (*v261
          && (v262 = *(_QWORD *)(*v261 + 32)) != 0
          && (v263 = *(_QWORD *)(v262 + 32)) != 0
          && (*(_BYTE *)(v263 + 79) & 8) != 0)
        {
          v264 = (unint64_t *)(v263 + 64);
        }
        else
        {
          v264 = 0;
        }
        if (v242 <= *v264)
        {
          v265 = GTTraceFunc_targetContext((uint64_t)v264, v240);
          QueueForRef = GetQueueForRef(&arrd->pool, (uint64_t)v265);
          v267 = *(_QWORD *)&v696.st_dev;
          *(_QWORD *)apr_array_push(QueueForRef) = v267;
        }
        goto LABEL_363;
      }
      if (v246 != -16361 && v246 != -16202)
        goto LABEL_363;
    }
    else if (((v246 + 15343) > 0x1B || ((1 << (v246 - 17)) & 0xA000001) == 0) && v246 != -15908)
    {
      goto LABEL_363;
    }
    *(_QWORD *)&v696.st_dev = 0;
    *(_QWORD *)&v696.st_dev = GTTraceFunc_targetContext(v245, v240);
    v250 = find_entry(v239, &v696, 8uLL, 0);
    if (*v250
      && (v251 = *(_QWORD *)(*v250 + 32)) != 0
      && (v252 = *(_QWORD *)(v251 + 32)) != 0
      && (*(_BYTE *)(v252 + 79) & 8) != 0)
    {
      v253 = (unint64_t *)(v252 + 64);
    }
    else
    {
      v253 = 0;
    }
    if (v242 <= *v253)
    {
      v254 = GTTraceFunc_targetContext((uint64_t)v253, v240);
      v255 = GetQueueForRef(&arrd->pool, (uint64_t)v254);
      v256 = v255;
      v257 = *(_QWORD *)&v696.st_dev;
      v258 = v255->nelts;
      if ((int)v258 < 1)
        goto LABEL_353;
      v259 = 0;
      v260 = v255->elts;
      while (*(_QWORD *)&v260[8 * v259] != *(_QWORD *)&v696.st_dev)
      {
        if (v258 == ++v259)
          goto LABEL_353;
      }
      if ((_DWORD)v258 == (_DWORD)v259)
      {
LABEL_353:
        *(_QWORD *)apr_array_push(v256) = v257;
        v260 = v256->elts;
        LODWORD(v268) = v256->nelts;
      }
      else
      {
        LODWORD(v268) = v258;
        LODWORD(v258) = v259;
      }
      *(_QWORD *)&v260[8 * (int)v258] |= 0x8000000000000000;
      if ((int)v268 < 1)
      {
        LODWORD(v270) = 0;
      }
      else
      {
        v269 = *(_QWORD *)v260;
        if ((*(_QWORD *)v260 & 0x8000000000000000) != 0)
        {
          v271 = 1;
          do
          {
            v270 = v271;
            *(_QWORD *)apr_array_push(v680) = v269 & 0x7FFFFFFFFFFFFFFFLL;
            v268 = v256->nelts;
            v260 = v256->elts;
            if (v270 >= v268)
              break;
            v269 = *(_QWORD *)&v260[8 * v270];
            v271 = v270 + 1;
          }
          while (v269 < 0);
        }
        else
        {
          LODWORD(v270) = 0;
        }
      }
      v272 = v268 - v270;
      v256->nelts = v272;
      memmove(v260, &v260[8 * v270], v256->elt_size * (uint64_t)v272);
    }
LABEL_363:
    ++v244;
  }
  while (v244 < v219->nelts);
  v243 = *(apr_pool_t **)buf;
LABEL_368:
  apr_pool_destroy(v243);
LABEL_369:
  v274 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v274))
  {
    v275 = *(_DWORD *)(*((_QWORD *)v682 + 15) + 12);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v275;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v274, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "%d", buf, 8u);
  }

  v276 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v276))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v276, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "BuildDeviceMirror", buf, 2u);
  }

  *((_QWORD *)v682 + 5) = GTMTLSMContext_buildDeviceMirrorWithIgnoreFlags(*((_QWORD *)v682 + 1), *((_QWORD *)v682 + 2), *((_QWORD *)v682 + 15), *((_QWORD *)v682 + 10), *((_QWORD *)v682 + 11), parent);
  v277 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v277))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v277, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4AAB5F, buf, 2u);
  }

  *((_QWORD *)v682 + 12) = 0;
  v278 = *((_QWORD *)v682 + 14);
  arre = (apr_array_header_t *)*((_QWORD *)v682 + 15);
  *((_QWORD *)v682 + 13) = arre->nelts;
  v279 = *(_DWORD *)(v278 + 12);
  if (v279 >= 1)
  {
    v667 = 0;
    v280 = 0;
    v281 = 0;
    v282 = 0;
    v283 = 0;
    v284 = *(_QWORD *)(v278 + 24);
    while (1)
    {
      v285 = v284 + 32 * v282;
      v286 = *(_DWORD *)(v285 + 28);
      v287 = GetFuncEnumConstructorType(v286);
      if (v287 == 51)
        break;
      if (v287 == 25)
      {
        v288 = *(apr_pool_t **)v285;
        if ((arre->elts[64 * *(_QWORD *)v285 + 15] & 0x40) == 0 || v286 == -12544)
        {
          v289 = v281 | (v283 == 0);
          v280 = v667;
          goto LABEL_385;
        }
        goto LABEL_388;
      }
LABEL_389:
      if (++v282 >= v279)
        goto LABEL_390;
    }
    v288 = *(apr_pool_t **)v285;
    if ((arre->elts[64 * *(_QWORD *)v285 + 15] & 0x40) == 0 || v286 == -12543)
    {
      v289 = v281 | (v283 == 0);
LABEL_385:
      if ((v289 & 1) == 0)
      {
        *((_QWORD *)v682 + 12) = v288;
        v667 = v288;
        v280 = v288;
      }
      *((_QWORD *)v682 + 13) = *(_QWORD *)(v284 + 32 * v282 + 8) - (_QWORD)v280 + 1;
      v281 = 1;
    }
LABEL_388:
    v282 += *(_DWORD *)(v284 + 32 * v282 + 20);
    ++v283;
    goto LABEL_389;
  }
LABEL_390:
  v290 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v290))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v290, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", "Delta", buf, 2u);
  }

  v291 = apr_array_make(parent, 128, 8);
  *((_QWORD *)v682 + 25) = v291;
  GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v682 + 5) + 200), v214, v291);
  v292 = v291->nelts;
  if ((int)v292 >= 1)
  {
    v293 = v292 + 1;
    do
    {
      v294 = (v293 - 2);
      v295 = v291->elts;
      if (*(_BYTE *)(*(_QWORD *)&v295[8 * v294] + 60) != 1)
      {
        LODWORD(v292) = v292 - 1;
        v291->nelts = v292;
        *(_QWORD *)&v295[8 * v294] = *(_QWORD *)&v295[8 * (int)v292];
      }
      --v293;
    }
    while (v293 > 1);
  }
  v296 = 0;
  v297 = (apr_array_header_t *)*((_QWORD *)v682 + 25);
  v298 = *((_QWORD *)v682 + 5);
  v299 = *((_QWORD *)v682 + 10);
  v300 = v299 + *((_QWORD *)v682 + 11);
  do
  {
    v301 = *(_QWORD *)(v298 + 8 * v296 + 8);
    v302 = *(_DWORD *)(v301 + 12);
    if (v302 >= 1)
    {
      for (k = 0; k < v302; ++k)
      {
        v304 = *(_QWORD *)(*(_QWORD *)(v301 + 24) + 8 * k);
        v305 = *(_QWORD *)(v304 + 16);
        v306 = v299 <= v305 && v300 > v305;
        if (!v306)
        {
          v307 = *(_QWORD *)(v304 + 24);
          if (v299 <= v307 && v300 > v307)
          {
            *(_QWORD *)apr_array_push(v297) = v304;
            v302 = *(_DWORD *)(v301 + 12);
          }
        }
      }
    }
    ++v296;
  }
  while (v296 != 35);
  v309 = *((_QWORD *)v682 + 8);
  v310 = *((_QWORD *)v682 + 9);
  v311 = v297->nelts;
  v297->nelts = 0;
  if ((int)v311 < 1)
  {
    v313 = 0;
    v316 = parent;
  }
  else
  {
    v312 = 0;
    v313 = 0;
    v314 = v310 + v309;
    v315 = 8 * v311;
    v316 = parent;
    do
    {
      v317 = v297->elts;
      v318 = *(_QWORD *)&v317[v312];
      v319 = *(_QWORD *)(v318 + 16);
      if (v309 > v319 || v314 <= v319)
      {
        v297->nelts = v313 + 1;
        *(_QWORD *)&v317[v312] = *(_QWORD *)&v317[8 * v313];
        *(_QWORD *)&v297->elts[8 * v313++] = v318;
      }
      v312 += 8;
    }
    while (v315 != v312);
  }
  qsort(v297->elts, v313, 8uLL, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v682 + 5) + 120), v214, v297);
  GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v682 + 5) + 136), v214, v297);
  GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v682 + 5) + 128), v214, v297);
  v321 = apr_array_make(v316, 128, 8);
  v322 = 0;
  *((_QWORD *)v682 + 24) = v321;
  v323 = *((_QWORD *)v682 + 5);
  v324 = *((_QWORD *)v682 + 10);
  v325 = v324 + *((_QWORD *)v682 + 11);
  do
  {
    v326 = *(_QWORD *)(v323 + 8 * v322 + 8);
    v327 = *(_DWORD *)(v326 + 12);
    if (v327 >= 1)
    {
      for (m = 0; m < v327; ++m)
      {
        v329 = *(_QWORD *)(*(_QWORD *)(v326 + 24) + 8 * m);
        v330 = *(_QWORD *)(v329 + 16);
        if (v324 <= v330 && v325 > v330)
        {
          *(_QWORD *)apr_array_push(v321) = v329;
          v327 = *(_DWORD *)(v326 + 12);
        }
      }
    }
    ++v322;
  }
  while (v322 != 35);
  v332 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)v332))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_0, (os_log_t)v332, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Replayer-1-serial", (const char *)&unk_4AAB5F, buf, 2u);
  }

  v333 = newpool;
  v334 = apr_array_make(newpool, 128, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v682 + 5) + 56), v214, v334);
  if (v334->nelts >= 1)
  {
    v335 = 0;
    v336 = (apr_hash_t *)*((_QWORD *)v682 + 21);
    do
    {
      *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)&v334->elts[8 * v335] + 8);
      v337 = *find_entry((uint64_t)v336, buf, 8uLL, 0);
      if (!v337 || (v338 = *(apr_array_header_t **)(v337 + 32)) == 0)
      {
        v338 = apr_array_make(parent, 8, 16);
        v339 = apr_palloc(parent, 8uLL);
        *v339 = *(_QWORD *)buf;
        apr_hash_set(v336, v339, 8, v338);
      }
      v340 = apr_array_push(v338);
      v341 = *((_QWORD *)v682 + 10);
      *v340 = 0;
      v340[1] = v341;
      ++v335;
    }
    while (v335 < v334->nelts);
  }
  v342 = apr_array_make(v333, 128, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v682 + 5) + 64), v214, v342);
  if (v342->nelts >= 1)
  {
    v343 = 0;
    v344 = (apr_hash_t *)*((_QWORD *)v682 + 22);
    do
    {
      *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)&v342->elts[8 * v343] + 8);
      v345 = *find_entry((uint64_t)v344, buf, 8uLL, 0);
      if (!v345 || (v346 = *(apr_array_header_t **)(v345 + 32)) == 0)
      {
        v346 = apr_array_make(parent, 8, 16);
        v347 = apr_palloc(parent, 8uLL);
        *v347 = *(_QWORD *)buf;
        apr_hash_set(v344, v347, 8, v346);
      }
      v348 = apr_array_push(v346);
      v349 = *((_QWORD *)v682 + 10);
      *v348 = 0;
      v348[1] = v349;
      ++v343;
    }
    while (v343 < v342->nelts);
  }
  v668 = v333;
  v350 = apr_hash_make(parent);
  v351 = v682;
  v352 = *((_QWORD *)v682 + 5);
  v353 = *(apr_array_header_t **)(v352 + 200);
  v354 = v353->nelts;
  if (v354 >= 1)
  {
    v355 = 0;
    v356 = *(_QWORD *)(*((_QWORD *)v682 + 14) + 24) + 32 * *(int *)(*((_QWORD *)v682 + 14) + 12);
    arrf = *(apr_array_header_t **)(v352 + 200);
    do
    {
      v357 = *(_QWORD *)&v353->elts[8 * v355];
      if (*(_BYTE *)(v357 + 60) == 1)
      {
        v359 = (uint64_t *)(v357 + 32);
        v358 = *(_QWORD *)(v357 + 32);
        if (v358)
        {
          v360 = 0;
          do
          {
            v361 = *((_QWORD *)v351 + 14);
            v362 = *(_QWORD **)(v361 + 24);
            v363 = *(_DWORD *)(v361 + 12);
            if (v363 >= 1)
            {
              do
              {
                v364 = v363 >> 1;
                v365 = &v362[4 * v364];
                v367 = *v365;
                v366 = v365 + 4;
                v363 += ~(v363 >> 1);
                if (v367 > *(_DWORD *)(v358 + 24) - *((_DWORD *)v351 + 20))
                  v363 = v364;
                else
                  v362 = v366;
              }
              while (v363 > 0);
            }
            if (v362 != (_QWORD *)v356 && v362 != v360)
            {
              v369 = *(_QWORD *)(*((_QWORD *)v351 + 15) + 24) + (*v362 << 6);
              *(_QWORD *)buf = 0;
              *(_QWORD *)buf = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v369, *(unsigned __int8 *)(v369 + 13), *((_QWORD *)v351 + 2))+ 1);
              v370 = *find_entry((uint64_t)v350, buf, 8uLL, 0);
              if (!v370 || (v371 = *(apr_array_header_t **)(v370 + 32)) == 0)
              {
                v371 = apr_array_make(parent, 1, 8);
                v372 = apr_palloc(parent, 8uLL);
                *v372 = *(_QWORD *)buf;
                apr_hash_set(v350, v372, 8, v371);
              }
              *(_QWORD *)apr_array_push(v371) = v357;
              v358 = *v359;
              v360 = v362;
              v351 = v682;
            }
            v357 = v358;
            v359 = (uint64_t *)(v358 + 32);
            v358 = *(_QWORD *)(v358 + 32);
          }
          while (v358);
          v353 = arrf;
          v354 = arrf->nelts;
        }
      }
      ++v355;
    }
    while (v355 < v354);
  }
  *((_QWORD *)v351 + 23) = v350;
  v373 = apr_hash_make(parent);
  *((_QWORD *)v351 + 17) = v373;
  *(_QWORD *)&v696.st_dev = 0;
  v374 = v664;
  if (v664->nelts >= 1)
  {
    v375 = 0;
    v376 = 0;
    LODWORD(v377) = 0;
    while (1)
    {
      v378 = &v374->elts[64 * v375];
      v380 = *((_QWORD *)v378 + 2);
      v379 = (unint64_t *)(v378 + 16);
      if (v214 < v380)
        break;
      v374 = v664;
      if (!v376)
        goto LABEL_475;
LABEL_476:
      v386 = v376[3] + 1;
      v376[3] = v386;
      v376[4] = v386;
      if (++v375 >= v374->nelts)
        goto LABEL_477;
    }
    v377 = (int)v377;
    do
    {
      v381 = *(_QWORD *)&v680->elts[8 * v377++];
      *(_QWORD *)&v696.st_dev = v381;
      v382 = *((_QWORD *)v682 + 1);
      *(_QWORD *)buf = v381;
      v383 = find_entry(v382, buf, 8uLL, 0);
      v384 = CommandBufferCommitIndex(*(_QWORD *)(*(_QWORD *)(*v383 + 32) + 32));
    }
    while (v384 < *v379);
    v214 = v384;
    v374 = v664;
LABEL_475:
    v376 = apr_palloc(parent, 0x20uLL);
    *(_QWORD *)v376 = parent;
    v376[2] = v374->elt_size;
    v376[3] = 0;
    v376[4] = 0;
    *((_QWORD *)v376 + 3) = &v374->elts[v375 * v374->elt_size];
    v385 = apr_palloc(parent, 8uLL);
    *v385 = *(_QWORD *)&v696.st_dev;
    apr_hash_set(v373, v385, 8, v376);
    goto LABEL_476;
  }
LABEL_477:
  *(_QWORD *)&v696.st_dev = 0;
  v387 = *find_entry((uint64_t)v373, &v696, 8uLL, 0);
  if (!v387)
  {
    v389 = v682;
    *((_QWORD *)v682 + 26) = 0;
    v390 = (apr_array_header_t **)(v682 + 208);
    v391 = v668;
    goto LABEL_481;
  }
  v388 = *(_QWORD *)(v387 + 32);
  v389 = v682;
  *((_QWORD *)v682 + 26) = v388;
  v390 = (apr_array_header_t **)(v682 + 208);
  v391 = v668;
  if (!v388)
LABEL_481:
    *v390 = apr_array_make(parent, 0, 64);
  v669 = (apr_pool_t *)v390;
  v393 = GTResourceTrackerMake(*((_QWORD *)v389 + 1), *((_QWORD *)v389 + 2), v391);
  if (v680->nelts >= 1)
  {
    v394 = 0;
    do
      GTResourceTrackerProcessCommandBuffer((uint64_t)v393, *(apr_pool_t **)&v680->elts[8 * v394++], 1);
    while (v394 < v680->nelts);
  }
  if (*(_DWORD *)(v393[3] + 48))
  {
    v395 = *v393;
    v396 = (apr_hash_index_t *)(*v393 + 16);
    *(_QWORD *)(v395 + 24) = 0;
    *(_QWORD *)(v395 + 32) = 0;
    *(_QWORD *)(v395 + 16) = v395;
    *(_DWORD *)(v395 + 40) = 0;
    v397 = apr_hash_next(v396);
    if (v397)
    {
      v398 = v397;
      do
      {
        v399 = *(_QWORD *)(*((_QWORD *)v398 + 1) + 32);
        if (!v399)
          goto LABEL_510;
        v400 = *(_QWORD *)(v399 + 32);
        if (!v400 || (*(_BYTE *)(v400 + 79) & 8) == 0)
          goto LABEL_510;
        v401 = (uint64_t *)(v400 + 64);
        v402 = GetFuncEnumConstructorType(*(_DWORD *)(v400 + 72));
        switch(v402)
        {
          case 16:
            memset(buf, 0, 24);
            v707 = 0u;
            v708 = 0u;
            v705 = 0u;
            v706 = 0u;
            v703 = 0u;
            v704 = 0u;
            v701 = 0u;
            v702 = 0u;
            v699 = 0u;
            v700 = 0u;
            v698 = 0u;
            *(_DWORD *)buf = 16;
            WORD1(v702) = 2;
            *(_QWORD *)&buf[24] = -1;
            *(_QWORD *)&v700 = -1;
            GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)buf, v393[1], v401);
            if (!(_QWORD)v699)
              goto LABEL_510;
            v411 = *find_entry(v393[3], &v699, 8uLL, 0);
            if (!v411)
              goto LABEL_510;
            v412 = *(_QWORD *)(v411 + 32);
            if (!v412)
              goto LABEL_510;
            v405 = *(_QWORD *)(v412 + 8);
            v406 = *(_QWORD *)&buf[8];
            if (v405 > IsHeapResourceMadeAliasable(v395, *(uint64_t *)&buf[8], v405))
              goto LABEL_510;
            v407 = v393;
            v408 = 16;
            break;
          case 80:
            memset(buf, 0, 24);
            v707 = 0u;
            v708 = 0u;
            v705 = 0u;
            v706 = 0u;
            v703 = 0u;
            v704 = 0u;
            v701 = 0u;
            v702 = 0u;
            v699 = 0u;
            v700 = 0u;
            v698 = 0u;
            *(_DWORD *)buf = 80;
            WORD1(v702) = 2;
            *(_QWORD *)&buf[24] = -1;
            *(_QWORD *)&v700 = -1;
            v709 = 0xFFFFFFFFLL;
            GTMTLSMTexture_processTraceFuncWithMap((char *)buf, v393[1], v401);
            if (!(_QWORD)v699)
              goto LABEL_510;
            v409 = *find_entry(v393[3], &v699, 8uLL, 0);
            if (!v409)
              goto LABEL_510;
            v410 = *(_QWORD *)(v409 + 32);
            if (!v410)
              goto LABEL_510;
            v405 = *(_QWORD *)(v410 + 8);
            v406 = *(_QWORD *)&buf[8];
            if (v405 > IsHeapResourceMadeAliasable(v395, *(uint64_t *)&buf[8], v405))
              goto LABEL_510;
            v407 = v393;
            v408 = 80;
            break;
          case 22:
            memset(buf, 0, 24);
            v702 = 0u;
            v703 = 0u;
            v704 = 0u;
            v705 = 0u;
            v700 = 0u;
            v701 = 0u;
            v698 = 0u;
            v699 = 0u;
            *(_DWORD *)buf = 22;
            WORD1(v702) = 2;
            *(_QWORD *)&buf[24] = -1;
            *(_QWORD *)&v700 = -1;
            *(_QWORD *)&v703 = -1;
            GTMTLSMBuffer_processTraceFuncWithMap((char *)buf, v393[1], v401);
            if (!(_QWORD)v699)
              goto LABEL_510;
            v403 = *find_entry(v393[3], &v699, 8uLL, 0);
            if (!v403)
              goto LABEL_510;
            v404 = *(_QWORD *)(v403 + 32);
            if (!v404)
              goto LABEL_510;
            v405 = *(_QWORD *)(v404 + 8);
            v406 = *(_QWORD *)&buf[8];
            if (v405 > IsHeapResourceMadeAliasable(v395, *(uint64_t *)&buf[8], v405))
              goto LABEL_510;
            v407 = v393;
            v408 = 22;
            break;
          default:
            goto LABEL_510;
        }
        GTResourceTrackerResourceRead(v407, v408, v406, v405);
LABEL_510:
        v398 = apr_hash_next(v398);
      }
      while (v398);
    }
    apr_hash_clear((apr_hash_t *)v393[3]);
  }
  *(_QWORD *)&v696.st_dev = 0;
  apr_pool_create_ex((apr_pool_t **)&v696, *(apr_pool_t **)v393[4], 0, v392);
  v413 = *(apr_pool_t **)&v696.st_dev;
  v414 = apr_array_make(*(apr_pool_t **)&v696.st_dev, 16, 8);
  v415 = v393[4];
  *(_DWORD *)(v415 + 40) = 0;
  *(_QWORD *)(v415 + 16) = v415;
  *(_QWORD *)(v415 + 24) = 0;
  *(_QWORD *)(v415 + 32) = 0;
  v416 = apr_hash_next((apr_hash_index_t *)(v415 + 16));
  if (v416)
  {
    v417 = v416;
    do
    {
      v418 = *(_QWORD *)(*((_QWORD *)v417 + 1) + 32);
      if (*(_DWORD *)(v418 + 40) == 16)
        *(_QWORD *)apr_array_push(v414) = v418;
      v417 = apr_hash_next(v417);
    }
    while (v417);
  }
  if (v414->nelts >= 1)
  {
    v419 = 0;
    do
    {
      v420 = *(_QWORD *)&v414->elts[8 * v419];
      memset(buf, 0, 24);
      v707 = 0u;
      v708 = 0u;
      v705 = 0u;
      v706 = 0u;
      v703 = 0u;
      v704 = 0u;
      v701 = 0u;
      v702 = 0u;
      v699 = 0u;
      v700 = 0u;
      v698 = 0u;
      *(_DWORD *)buf = 16;
      WORD1(v702) = 2;
      *(_QWORD *)&buf[24] = -1;
      *(_QWORD *)&v700 = -1;
      v421 = *(_QWORD *)(*(_QWORD *)(*find_entry(*v393, (_BYTE *)(v420 + 8), 8uLL, 0) + 32) + 32);
      if (v421)
      {
        v422 = 0;
        while (1)
        {
          v423 = atomic_load((unsigned int *)(v421 + 4));
          v424 = v422 + (v423 >> 6) - 1;
          if ((int)v424 > 0)
            break;
          v421 = *(_QWORD *)(v421 + 40);
          v422 = v424;
          if (!v421)
          {
            v422 = v424;
            goto LABEL_526;
          }
        }
      }
      else
      {
        v422 = 0;
      }
      v424 = 0;
LABEL_526:
      v425 = v422 | (unint64_t)(v424 << 32);
LABEL_527:
      v426 = v421 + 64;
      while (v421 && (*(_BYTE *)(v426 + ((uint64_t)(HIDWORD(v425) - (int)v425) << 6) + 15) & 8) != 0)
      {
        v427 = v426 + ((uint64_t)(HIDWORD(v425) - (int)v425) << 6);
        GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)buf, v393[1], (uint64_t *)v427);
        if (*(_DWORD *)(v427 + 8) == -15552 && (_QWORD)v703 != 0)
          GTResourceTrackerUsingAccelerationStructureDescriptor(v393, (uint64_t *)v703, *(_QWORD *)v427);
        v429 = atomic_load((unsigned int *)(v421 + 4));
        v430 = v425 + (v429 >> 6);
        v431 = (HIDWORD(v425) + 1);
        v425 = (v431 << 32) | v425;
        if ((_DWORD)v431 == v430 - 1)
        {
          v425 = (v431 << 32) | v431;
          v421 = *(_QWORD *)(v421 + 40);
          goto LABEL_527;
        }
      }
      ++v419;
    }
    while (v419 < v414->nelts);
    v413 = *(apr_pool_t **)&v696.st_dev;
  }
  apr_pool_destroy(v413);
  *(_QWORD *)&v696.st_dev = 0;
  apr_pool_create_ex((apr_pool_t **)&v696, *(apr_pool_t **)v393[4], 0, v432);
  v433 = *(apr_pool_t **)&v696.st_dev;
  v434 = apr_array_make(*(apr_pool_t **)&v696.st_dev, 16, 16);
  v435 = apr_hash_make(v433);
  v436 = v393[2];
  *(_DWORD *)(v436 + 40) = 0;
  *(_QWORD *)(v436 + 16) = v436;
  *(_QWORD *)(v436 + 24) = 0;
  *(_QWORD *)(v436 + 32) = 0;
  v437 = apr_hash_next((apr_hash_index_t *)(v436 + 16));
  if (v437)
  {
    v438 = v437;
    arrg = (apr_array_header_t *)v435;
    do
    {
      v439 = *(_DWORD **)(*((_QWORD *)v438 + 1) + 32);
      v440 = v439[2];
      if (v440 == 2)
      {
        v444 = *(_QWORD *)(*find_entry(*v393, *(_BYTE **)(*((_QWORD *)v438 + 1) + 32), 8uLL, 0) + 32);
        memset(buf, 0, 24);
        v698 = 0u;
        *(_DWORD *)buf = 2;
        *(_QWORD *)&v699 = 0;
        *(_QWORD *)&buf[24] = -1;
        v445 = *(_QWORD *)(v444 + 32);
        if (v445)
        {
          v446 = 0;
          while (1)
          {
            v447 = atomic_load((unsigned int *)(v445 + 4));
            v448 = v446 + (v447 >> 6) - 1;
            if ((int)v448 > 0)
              break;
            v445 = *(_QWORD *)(v445 + 40);
            v446 = v448;
            if (!v445)
            {
              v446 = v448;
              goto LABEL_556;
            }
          }
        }
        else
        {
          v446 = 0;
        }
        v448 = 0;
LABEL_556:
        v449 = v446 | (unint64_t)(v448 << 32);
LABEL_557:
        v450 = v445 + 64;
        while (v445)
        {
          if ((*(_BYTE *)(v450 + ((uint64_t)(HIDWORD(v449) - (int)v449) << 6) + 15) & 8) == 0)
            break;
          v451 = v450 + ((uint64_t)(HIDWORD(v449) - (int)v449) << 6);
          GTMTLSMDrawable_processTraceFuncWithMap((char *)buf, v393[1], (uint64_t *)v451);
          if (*(_DWORD *)(v451 + 8) == -7167)
            break;
          v452 = atomic_load((unsigned int *)(v445 + 4));
          v453 = v449 + (v452 >> 6);
          v454 = (HIDWORD(v449) + 1);
          v449 = (v454 << 32) | v449;
          if ((_DWORD)v454 == v453 - 1)
          {
            v449 = (v454 << 32) | v454;
            v445 = *(_QWORD *)(v445 + 40);
            goto LABEL_557;
          }
        }
        v433 = *(apr_pool_t **)&v696.st_dev;
        v455 = apr_palloc(*(apr_pool_t **)&v696.st_dev, 8uLL);
        *v455 = v699;
        v435 = (apr_hash_t *)arrg;
        apr_hash_set((apr_hash_t *)arrg, v455, 8, v439);
      }
      else if (v440 == 80)
      {
        v441 = *find_entry(*v393, *(_BYTE **)(*((_QWORD *)v438 + 1) + 32), 8uLL, 0);
        if (v441)
        {
          v442 = *(_QWORD *)(v441 + 32);
          if (v442)
          {
            v443 = *(_QWORD *)(v442 + 32);
            if (v443)
            {
              if ((*(_BYTE *)(v443 + 79) & 8) != 0)
              {
                memset(buf, 0, 24);
                v707 = 0u;
                v708 = 0u;
                v705 = 0u;
                v706 = 0u;
                v703 = 0u;
                v704 = 0u;
                v701 = 0u;
                v702 = 0u;
                v699 = 0u;
                v700 = 0u;
                v698 = 0u;
                *(_DWORD *)buf = 80;
                WORD1(v702) = 2;
                *(_QWORD *)&buf[24] = -1;
                *(_QWORD *)&v700 = -1;
                v709 = 0xFFFFFFFFLL;
                GTMTLSMTexture_processTraceFuncWithMap((char *)buf, v393[1], (uint64_t *)(v443 + 64));
                if ((_QWORD)v708 || *((_QWORD *)&v702 + 1) && *(_BYTE *)(*((_QWORD *)&v702 + 1) + 44))
                  *(_OWORD *)apr_array_push(v434) = *(_OWORD *)v439;
              }
            }
          }
        }
      }
      v438 = apr_hash_next(v438);
    }
    while (v438);
  }
  v456 = v434->nelts;
  if (v456 < 1)
  {
    v458 = v680;
    if (!v456)
      goto LABEL_608;
  }
  else
  {
    v457 = 0;
    v458 = v680;
    do
    {
      v459 = find_entry((uint64_t)v435, &v434->elts[16 * v457], 8uLL, 0);
      if (*v459 && *(_QWORD *)(*v459 + 32))
      {
        v460 = v434->nelts - 1;
        v434->nelts = v460;
        v461 = v434->elts;
        v462 = *(_OWORD *)&v461[16 * v457];
        *(_OWORD *)&v461[16 * v457] = *(_OWORD *)&v461[16 * v460];
        *(_OWORD *)&v434->elts[16 * v460] = v462;
      }
      else
      {
        ++v457;
      }
      v463 = v434->nelts;
    }
    while (v457 < v463);
    if (!v463)
      goto LABEL_608;
  }
  v464 = *v393;
  v465 = (apr_hash_index_t *)(*v393 + 16);
  *(_QWORD *)(v464 + 24) = 0;
  *(_QWORD *)(v464 + 32) = 0;
  *(_QWORD *)(v464 + 16) = v464;
  *(_DWORD *)(v464 + 40) = 0;
  v466 = apr_hash_next(v465);
  if (v466)
  {
    v467 = v466;
    do
    {
      v468 = *(_QWORD *)(*((_QWORD *)v467 + 1) + 32);
      if (v468)
      {
        v469 = *(_QWORD *)(v468 + 32);
        if (v469)
        {
          if ((*(_BYTE *)(v469 + 79) & 8) != 0 && GetFuncEnumConstructorType(*(_DWORD *)(v469 + 72)) == 2)
          {
            memset(buf, 0, 24);
            v698 = 0u;
            *(_DWORD *)buf = 2;
            *(_QWORD *)&v699 = 0;
            *(_QWORD *)&buf[24] = -1;
            GTMTLSMDrawable_processTraceFuncWithMap((char *)buf, v393[1], (uint64_t *)(v469 + 64));
            v470 = *(_QWORD *)(v468 + 32);
            if (v470)
            {
              v471 = 0;
              while (1)
              {
                v472 = atomic_load((unsigned int *)(v470 + 4));
                v473 = v471 + (v472 >> 6) - 1;
                if ((int)v473 > 1)
                  break;
                v470 = *(_QWORD *)(v470 + 40);
                v471 = v473;
                if (!v470)
                {
                  v471 = v473;
                  goto LABEL_592;
                }
              }
              v473 = 1;
            }
            else
            {
              v471 = 0;
              v473 = 0;
            }
LABEL_592:
            v474 = v471 | (unint64_t)(v473 << 32);
LABEL_593:
            v475 = v470 + 64;
            while (v470)
            {
              if ((*(_BYTE *)(v475 + ((uint64_t)(HIDWORD(v474) - (int)v474) << 6) + 15) & 8) == 0)
                break;
              v476 = v475 + ((uint64_t)(HIDWORD(v474) - (int)v474) << 6);
              GTMTLSMDrawable_processTraceFuncWithMap((char *)buf, v393[1], (uint64_t *)v476);
              if (*(_DWORD *)(v476 + 8) == -7167)
                break;
              v477 = atomic_load((unsigned int *)(v470 + 4));
              v478 = v474 + (v477 >> 6);
              v479 = (HIDWORD(v474) + 1);
              v474 = (v479 << 32) | v474;
              if ((_DWORD)v479 == v478 - 1)
              {
                v474 = (v479 << 32) | v479;
                v470 = *(_QWORD *)(v470 + 40);
                goto LABEL_593;
              }
            }
            v480 = v434->nelts;
            if (v480 >= 1)
            {
              v481 = 0;
              v482 = v699;
              v483 = *(_QWORD *)&buf[8];
              do
              {
                if (*(_QWORD *)&v434->elts[16 * v481] == v482)
                {
                  GTResourceTrackerUsingResource(v393[2], 2, v483, *v393, v393[1]);
                  v484 = v434->nelts - 1;
                  v434->nelts = v484;
                  v485 = v434->elts;
                  v486 = *(_OWORD *)&v485[16 * v481];
                  *(_OWORD *)&v485[16 * v481] = *(_OWORD *)&v485[16 * v484];
                  *(_OWORD *)&v434->elts[16 * v484] = v486;
                  v480 = v434->nelts;
                }
                else
                {
                  ++v481;
                }
              }
              while (v481 < v480);
            }
            v458 = v680;
          }
        }
      }
      v467 = apr_hash_next(v467);
    }
    while (v467);
    v433 = *(apr_pool_t **)&v696.st_dev;
  }
LABEL_608:
  apr_pool_destroy(v433);
  v487 = *(_QWORD *)v669;
  v488 = *(unsigned int *)(*(_QWORD *)v669 + 12);
  *(_DWORD *)(*(_QWORD *)v669 + 12) = 0;
  if ((int)v488 < 1)
  {
    v500 = 0;
    v490 = parent;
  }
  else
  {
    v489 = 0;
    v490 = parent;
    do
    {
      v491 = *(_QWORD *)(v487 + 24);
      v492 = (_OWORD *)(v491 + v489);
      v493 = *(_QWORD *)(v491 + v489);
      if (v493 != 16 && v493 != 57)
      {
        v494 = *(int *)(v487 + 12);
        *(_DWORD *)(v487 + 12) = v494 + 1;
        *(_OWORD *)buf = *v492;
        *(_OWORD *)&buf[16] = v492[1];
        v698 = v492[2];
        v699 = v492[3];
        v495 = (__int128 *)(v491 + (v494 << 6));
        v496 = v495[3];
        v498 = *v495;
        v497 = v495[1];
        v492[2] = v495[2];
        v492[3] = v496;
        *v492 = v498;
        v492[1] = v497;
        v499 = (_OWORD *)(*(_QWORD *)(v487 + 24) + (v494 << 6));
        *v499 = *(_OWORD *)buf;
        v499[1] = *(_OWORD *)&buf[16];
        v499[2] = v698;
        v499[3] = v699;
      }
      v489 += 64;
    }
    while (v488 << 6 != v489);
    v500 = *(_DWORD *)(v487 + 12);
  }
  *(_DWORD *)(v487 + 16) = v500;
  v501 = v488 - v500;
  v502 = apr_palloc(v490, 0x20uLL);
  *(_QWORD *)v502 = v490;
  v503 = *(_DWORD *)(v487 + 8);
  v502[3] = v501;
  v502[4] = v501;
  v502[2] = v503;
  *((_QWORD *)v502 + 3) = *(_QWORD *)(v487 + 24) + *(int *)(v487 + 8) * (uint64_t)v500;
  *((_QWORD *)v682 + 30) = v502;
  v504 = *((_QWORD *)v682 + 25);
  if (*(int *)(v504 + 12) >= 1)
  {
    v505 = 0;
    do
    {
      v506 = find_entry(v393[4], (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v504 + 24) + 8 * v505) + 8), 8uLL, 0);
      if (*v506)
      {
        v507 = *(_QWORD *)(*v506 + 32);
        if (v507)
          *(_QWORD *)(v507 + 32) = 0x7FFFFFFFFFFFFFFFLL;
      }
      ++v505;
      v504 = *((_QWORD *)v682 + 25);
    }
    while (v505 < *(int *)(v504 + 12));
  }
  v508 = *(unsigned int *)(v487 + 12);
  *(_DWORD *)(v487 + 12) = 0;
  if ((int)v508 >= 1)
  {
    v509 = 0;
    while (1)
    {
      v510 = *(_QWORD *)(v487 + 24);
      v511 = *find_entry(v393[4], (_BYTE *)(v510 + v509 + 8), 8uLL, 0);
      if (v511)
      {
        v512 = *(_QWORD *)(v511 + 32);
        if (v512)
        {
          v513 = *(_QWORD *)(v510 + v509);
          if (v513 == 80)
            goto LABEL_631;
          if (v513 == 22)
            break;
        }
      }
LABEL_642:
      v509 += 64;
      if (v508 << 6 == v509)
      {
        v528 = *(_DWORD *)(v487 + 12);
        v458 = v680;
        v490 = parent;
        goto LABEL_645;
      }
    }
    Object = GTMTLSMContext_getObject(**((_QWORD **)v682 + 5), *(_QWORD *)(v510 + v509 + 8), *((_QWORD *)v682 + 10));
    v515 = *((_WORD *)Object + 48);
    if ((IsFuncEnumSharedResourceConstructor(*((_DWORD *)Object + 1)) & 1) != 0 || (v515 & 0xE0) == 0)
      *(_QWORD *)(v512 + 32) = 0x7FFFFFFFFFFFFFFFLL;
LABEL_631:
    v516 = (dword_75313C & 0x10) == 0 || *(_BYTE *)(v512 + 48) == 0;
    v517 = *(_QWORD *)(v512 + 32);
    if (v517 != -1)
    {
      v518 = *(_QWORD *)(v512 + 24);
      if (v518 == -1 || v518 > v517)
        v516 = 0;
      if (v516)
      {
        v520 = *(int *)(v487 + 12);
        *(_DWORD *)(v487 + 12) = v520 + 1;
        v521 = *(_QWORD *)(v487 + 24);
        v522 = (_OWORD *)(v521 + v509);
        *(_OWORD *)buf = *(_OWORD *)(v521 + v509);
        *(_OWORD *)&buf[16] = *(_OWORD *)(v521 + v509 + 16);
        v698 = *(_OWORD *)(v521 + v509 + 32);
        v699 = *(_OWORD *)(v521 + v509 + 48);
        v523 = (__int128 *)(v521 + (v520 << 6));
        v524 = v523[3];
        v526 = *v523;
        v525 = v523[1];
        v522[2] = v523[2];
        v522[3] = v524;
        *v522 = v526;
        v522[1] = v525;
        v527 = (_OWORD *)(*(_QWORD *)(v487 + 24) + (v520 << 6));
        *v527 = *(_OWORD *)buf;
        v527[1] = *(_OWORD *)&buf[16];
        v527[2] = v698;
        v527[3] = v699;
      }
    }
    goto LABEL_642;
  }
  v528 = 0;
LABEL_645:
  *(_DWORD *)(v487 + 16) = v528;
  v529 = apr_palloc(v490, 0x20uLL);
  *(_QWORD *)v529 = v490;
  v530 = *(_DWORD *)(v487 + 8);
  v529[3] = v508 - v528;
  v529[4] = v508 - v528;
  v529[2] = v530;
  *((_QWORD *)v529 + 3) = *(_QWORD *)(v487 + 24) + *(int *)(v487 + 8) * (uint64_t)v528;
  *((_QWORD *)v682 + 27) = v529;
  v531 = *(_QWORD *)(*((_QWORD *)v682 + 5) + 280);
  v532 = *(_QWORD *)(v531 + 24);
  *((_QWORD *)v682 + 32) = apr_array_make(v490, *(_DWORD *)(v531 + 12), 8);
  LODWORD(v533) = *(_DWORD *)(v531 + 12);
  if ((int)v533 >= 1)
  {
    v534 = 0;
    do
    {
      v535 = *(_QWORD *)(v532 + 8 * v534);
      if (v535)
        v536 = *(_QWORD *)(v535 + 8);
      else
        v536 = 0;
      v537 = *((_QWORD *)v682 + 1);
      *(_QWORD *)buf = v536;
      v538 = *find_entry(v537, buf, 8uLL, 0);
      if (v538)
        v539 = *(_QWORD *)(v538 + 32);
      else
        v539 = 0;
      if (*(_QWORD *)GTTraceStream_lastFunc(v539) >= *((_QWORD *)v682 + 10))
        *(_QWORD *)apr_array_push(*((apr_array_header_t **)v682 + 32)) = v535;
      ++v534;
      v533 = *(int *)(v531 + 12);
    }
    while (v534 < v533);
  }
  v540 = v682;
  *((_QWORD *)v682 + 33) = apr_array_make(v490, v533, 8);
  v541 = *(_QWORD *)(*((_QWORD *)v682 + 5) + 184);
  v542 = (apr_pool_t **)apr_hash_make(v490);
  if (*(int *)(v541 + 12) >= 1)
  {
    v543 = 0;
    do
    {
      v544 = *((_QWORD *)v540 + 1);
      *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v541 + 24) + 8 * v543) + 8);
      v545 = find_entry(v544, buf, 8uLL, 0);
      if (*v545)
        v546 = *(_QWORD *)(*v545 + 32);
      else
        v546 = 0;
      v540 = v682;
      GatherCommandQueueResidencySetsUpToIndexInternal(v542, v546, *((_QWORD *)v682 + 2), *((_QWORD *)v682 + 11) + *((_QWORD *)v682 + 10), 0);
      ++v543;
    }
    while (v543 < *(int *)(v541 + 12));
  }
  v547 = apr_hash_first(*v542, (apr_hash_t *)v542);
  if (v547)
  {
    v548 = v547;
    do
    {
      v549 = **(_QWORD **)(*((_QWORD *)v548 + 1) + 16);
      *(_QWORD *)apr_array_push(*((apr_array_header_t **)v540 + 33)) = v549;
      v548 = apr_hash_next(v548);
    }
    while (v548);
  }
  *((_QWORD *)v540 + 20) = apr_hash_make(v490);
  v550 = (uint64_t *)v540;
  if (v458->nelts >= 1)
  {
    v551 = 0;
    do
    {
      v552 = GTResourceTrackerMake(v550[1], v550[2], v490);
      v553 = *(apr_pool_t **)&v458->elts[8 * v551];
      GTResourceTrackerProcessCommandBuffer((uint64_t)v552, v553, 0);
      v554 = (apr_hash_t *)*((_QWORD *)v682 + 20);
      v555 = apr_palloc(v490, 8uLL);
      *v555 = v553;
      v550 = (uint64_t *)v682;
      apr_hash_set(v554, v555, 8, v552);
      ++v551;
    }
    while (v551 < v458->nelts);
  }
  v556 = v550[5];
  v557 = v550[10];
  v558 = newpool;
  v559 = (int *)apr_hash_make(newpool);
  v560 = apr_array_make(v558, 8, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(v556 + 80), v557, v560);
  if (v560->nelts >= 1)
  {
    v561 = 0;
    v562 = 0;
    do
    {
      v563 = *(_QWORD *)&v560->elts[8 * v561];
      if (*(_BYTE *)(*(_QWORD *)(v563 + 48) + 19) == 2)
      {
        if (!v562)
        {
          v562 = apr_hash_make(v558);
          GTMTLSMContext_buildResourceChildrenMap((uint64_t *)v556, v557, (uint64_t)v562, v564);
        }
        v565 = find_entry((uint64_t)v562, (_BYTE *)(v563 + 8), 8uLL, 0);
        if (*v565)
        {
          v566 = *(_QWORD *)(*v565 + 32);
          if (v566)
          {
            if (*(int *)(v566 + 12) >= 1)
            {
              v567 = 0;
              do
              {
                v568 = *(_QWORD *)(*(_QWORD *)(v566 + 24) + 8 * v567);
                apr_hash_set((apr_hash_t *)v559, (const void *)(v568 + 8), 8, (const void *)v568);
                ++v567;
              }
              while (v567 < *(int *)(v566 + 12));
            }
          }
        }
      }
      ++v561;
    }
    while (v561 < v560->nelts);
  }
  v569 = apr_array_make(parent, v559[12], 64);
  v570 = v682;
  *((_QWORD *)v682 + 29) = v569;
  PushSparseDownloadRequests(*((_OWORD **)v682 + 27), v569, (uint64_t)v559);
  qsort(*(void **)(*((_QWORD *)v570 + 29) + 24), *(int *)(*((_QWORD *)v570 + 29) + 12), *(int *)(*((_QWORD *)v570 + 29) + 8), (int (__cdecl *)(const void *, const void *))CompareRequestByTextureLevel);
  v571 = apr_array_make(parent, v559[12], 64);
  *((_QWORD *)v682 + 28) = v571;
  PushSparseDownloadRequests(*((_OWORD **)v682 + 26), v571, (uint64_t)v559);
  qsort(*(void **)(*((_QWORD *)v570 + 28) + 24), *(int *)(*((_QWORD *)v570 + 28) + 12), *(int *)(*((_QWORD *)v570 + 28) + 8), (int (__cdecl *)(const void *, const void *))CompareRequestByTextureLevel);
  v572 = *((_QWORD *)v682 + 34) & 0xFFFFFFFFFFFFFFFELL | (GTCaptureArchive_getFileWithFilename(*(_QWORD *)v682, "gttrace-dump") == 0);
  *((_QWORD *)v682 + 34) = v572;
  v573 = (uint64_t *)*((_QWORD *)v682 + 5);
  if (*(int *)(v573[9] + 12) <= 0)
  {
    v587 = *((_QWORD *)v682 + 15);
    v588 = v573[4];
    v589 = *(unsigned int *)(v588 + 12);
    if ((int)v589 >= 1)
    {
      v590 = *(_QWORD *)(v588 + 24);
      do
      {
        v591 = *(_QWORD **)v590;
        if (*(_QWORD *)(*(_QWORD *)v590 + 168) || v591[28] || v591[35] || v591[42] || v591[49])
          goto LABEL_680;
        v590 += 8;
      }
      while (--v589);
    }
    v592 = v573[5];
    v593 = *(unsigned int *)(v592 + 12);
    if ((int)v593 >= 1)
    {
      v594 = *(_QWORD *)(v592 + 24);
      while (!*(_QWORD *)(*(_QWORD *)v594 + 168))
      {
        v594 += 8;
        if (!--v593)
          goto LABEL_701;
      }
      goto LABEL_680;
    }
LABEL_701:
    v595 = *(int *)(v587 + 12);
    if ((int)v595 >= 1)
    {
      v596 = (int *)(*(_QWORD *)(v587 + 24) + 8);
      do
      {
        v597 = *v596;
        v596 += 16;
        if ((IsFuncEnumUseResourceCall(v597) & 1) != 0)
          goto LABEL_680;
      }
      while (--v595);
    }
    v598 = v573[2];
    v599 = *(unsigned int *)(v598 + 12);
    if ((int)v599 >= 1)
    {
      v600 = *(uint64_t **)(v598 + 24);
      v601 = v599 - 1;
      do
      {
        v602 = *v600++;
        v603 = *(_DWORD *)(v602 + 4) + 15690;
      }
      while (v603 >= 3 && v601-- != 0);
      if (v603 < 3)
        goto LABEL_680;
    }
    v576 = 0;
    v578 = v682;
    *((_QWORD *)v682 + 34) = v572 & 0xFFFFFFFFFFFFFFFDLL;
    v577 = v640;
  }
  else
  {
LABEL_680:
    *((_QWORD *)v682 + 34) = v572 | 2;
    v574 = GTMTLSMContext_getObject(*v573, 1, *((_QWORD *)v682 + 10))[5];
    v575 = *(const char **)(v574 + 72);
    if (!v575 || !strcmp(v575, "Apple"))
      v576 = 4 * (*(_QWORD *)(v574 + 32) != 0);
    else
      v576 = 0;
    v577 = v640;
    v578 = v682;
  }
  *((_QWORD *)v578 + 34) = *((_QWORD *)v578 + 34) & 0xFFFFFFFFFFFFFFFBLL | v576;
  v579 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s/overrides/database"), v577));
  v580 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v581 = objc_msgSend(v580, "fileExistsAtPath:", v579);

  if ((v581 & 1) != 0)
  {
    v684 = 0;
    v582 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:options:error:](NSData, "dataWithContentsOfFile:options:error:", v579, 0, &v684));
    v583 = v684;
    if (v582)
    {
      v584 = (void *)objc_claimAutoreleasedReturnValue(+[GTCaptureArchiveOverrides allowedClasses](GTCaptureArchiveOverrides, "allowedClasses"));
      v683 = v583;
      v585 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v584, v582, &v683));
      v586 = v683;

      v583 = v586;
    }
    else
    {
      v585 = 0;
    }

  }
  else
  {
    v585 = 0;
  }
  v273 = v682;
  objc_storeStrong((id *)v682 + 6, v585);
  apr_pool_destroy(newpool);

  return v273;
}

