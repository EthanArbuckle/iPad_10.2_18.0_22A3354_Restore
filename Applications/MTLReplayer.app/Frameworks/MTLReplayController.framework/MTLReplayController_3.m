void sub_1499AC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  unsigned __int16 *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  char *v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  char *v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  char *v251;
  unint64_t v252;
  char *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  char *v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  char *v299;
  unint64_t v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v8 = (char *)v6[143];
      v22 = v6[144];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (char *)v6[142];
        v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_424;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 144), v27);
          v8 = (char *)v6[143];
          v10 = (char *)v6[142];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v32 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v8 = (char *)v6[143];
      v9 = v6[144];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[142];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_424;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 144), v14);
          v8 = (char *)v6[143];
          v10 = (char *)v6[142];
        }
        else
        {
          v15 = 0;
        }
        v29 = &v15[8 * v11];
        v30 = &v15[8 * v14];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v31 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[142] = v29;
        v6[143] = v23;
        v6[144] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v23 = v8 + 8;
LABEL_37:
    v6[143] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v36 = (char *)v34[146];
      v44 = v34[147];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (char *)v34[145];
        v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_424;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 147), v49);
          v36 = (char *)v34[146];
          v38 = (char *)v34[145];
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[8 * v46];
        v52 = &v50[8 * v49];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v54 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v36 = (char *)v34[146];
      v37 = v34[147];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (char *)v34[145];
        v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_424;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 147), v42);
          v36 = (char *)v34[146];
          v38 = (char *)v34[145];
        }
        else
        {
          v43 = 0;
        }
        v51 = &v43[8 * v39];
        v52 = &v43[8 * v42];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v53 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[145] = v51;
        v34[146] = v45;
        v34[147] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v36 = v35;
    v45 = v36 + 8;
LABEL_69:
    v34[146] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v67 = a1[1];
      v57 = *(_QWORD **)v67;
      v58 = *(unsigned __int16 *)(a1[2] + 44);
      v59 = *(char **)(*(_QWORD *)v67 + 1192);
      v68 = *(_QWORD *)(*(_QWORD *)v67 + 1200);
      if ((unint64_t)v59 >= v68)
      {
        v61 = (char *)v57[148];
        v70 = (v59 - v61) >> 3;
        if ((unint64_t)(v70 + 1) >> 61)
          goto LABEL_424;
        v71 = v68 - (_QWORD)v61;
        v72 = (uint64_t)(v68 - (_QWORD)v61) >> 2;
        if (v72 <= v70 + 1)
          v72 = v70 + 1;
        if (v71 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        if (v73)
        {
          v74 = (char *)sub_40FC((uint64_t)(v57 + 150), v73);
          v59 = (char *)v57[149];
          v61 = (char *)v57[148];
        }
        else
        {
          v74 = 0;
        }
        v75 = &v74[8 * v70];
        v76 = &v74[8 * v73];
        *(_QWORD *)v75 = v58;
        v69 = v75 + 8;
        while (v59 != v61)
        {
          v78 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *((_QWORD *)v75 - 1) = v78;
          v75 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = a1[1];
      v57 = *(_QWORD **)v56;
      v58 = *(unsigned __int16 *)(a1[2] + 44);
      v59 = *(char **)(*(_QWORD *)v56 + 1192);
      v60 = *(_QWORD *)(*(_QWORD *)v56 + 1200);
      if ((unint64_t)v59 >= v60)
      {
        v61 = (char *)v57[148];
        v62 = (v59 - v61) >> 3;
        if ((unint64_t)(v62 + 1) >> 61)
          goto LABEL_424;
        v63 = v60 - (_QWORD)v61;
        v64 = (uint64_t)(v60 - (_QWORD)v61) >> 2;
        if (v64 <= v62 + 1)
          v64 = v62 + 1;
        if (v63 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
        {
          v66 = (char *)sub_40FC((uint64_t)(v57 + 150), v65);
          v59 = (char *)v57[149];
          v61 = (char *)v57[148];
        }
        else
        {
          v66 = 0;
        }
        v75 = &v66[8 * v62];
        v76 = &v66[8 * v65];
        *(_QWORD *)v75 = v58;
        v69 = v75 + 8;
        while (v59 != v61)
        {
          v77 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *((_QWORD *)v75 - 1) = v77;
          v75 -= 8;
        }
LABEL_99:
        v57[148] = v75;
        v57[149] = v69;
        v57[150] = v76;
        if (v61)
          operator delete(v61);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v59 = v58;
    v69 = v59 + 8;
LABEL_101:
    v57[149] = v69;
LABEL_102:
    v79 = 1 << *(_DWORD *)(v3 + 48);
    if (v79 == 2)
    {
      v91 = a1[1];
      v81 = *(_QWORD **)v91;
      v82 = *(unsigned __int16 *)(a1[2] + 32);
      v83 = *(char **)(*(_QWORD *)v91 + 1216);
      v92 = *(_QWORD *)(*(_QWORD *)v91 + 1224);
      if ((unint64_t)v83 >= v92)
      {
        v85 = (char *)v81[151];
        v94 = (v83 - v85) >> 3;
        if ((unint64_t)(v94 + 1) >> 61)
          goto LABEL_424;
        v95 = v92 - (_QWORD)v85;
        v96 = (uint64_t)(v92 - (_QWORD)v85) >> 2;
        if (v96 <= v94 + 1)
          v96 = v94 + 1;
        if (v95 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v96;
        if (v97)
        {
          v98 = (char *)sub_40FC((uint64_t)(v81 + 153), v97);
          v83 = (char *)v81[152];
          v85 = (char *)v81[151];
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[8 * v94];
        v100 = &v98[8 * v97];
        *(_QWORD *)v99 = v82;
        v93 = v99 + 8;
        while (v83 != v85)
        {
          v102 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v79 != 1)
        goto LABEL_134;
      v80 = a1[1];
      v81 = *(_QWORD **)v80;
      v82 = *(unsigned __int16 *)(a1[2] + 32);
      v83 = *(char **)(*(_QWORD *)v80 + 1216);
      v84 = *(_QWORD *)(*(_QWORD *)v80 + 1224);
      if ((unint64_t)v83 >= v84)
      {
        v85 = (char *)v81[151];
        v86 = (v83 - v85) >> 3;
        if ((unint64_t)(v86 + 1) >> 61)
          goto LABEL_424;
        v87 = v84 - (_QWORD)v85;
        v88 = (uint64_t)(v84 - (_QWORD)v85) >> 2;
        if (v88 <= v86 + 1)
          v88 = v86 + 1;
        if (v87 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
        {
          v90 = (char *)sub_40FC((uint64_t)(v81 + 153), v89);
          v83 = (char *)v81[152];
          v85 = (char *)v81[151];
        }
        else
        {
          v90 = 0;
        }
        v99 = &v90[8 * v86];
        v100 = &v90[8 * v89];
        *(_QWORD *)v99 = v82;
        v93 = v99 + 8;
        while (v83 != v85)
        {
          v101 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v81[151] = v99;
        v81[152] = v93;
        v81[153] = v100;
        if (v85)
          operator delete(v85);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v83 = v82;
    v93 = v83 + 8;
LABEL_133:
    v81[152] = v93;
LABEL_134:
    v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      v115 = a1[1];
      v105 = *(_QWORD **)v115;
      v106 = *(unsigned __int16 *)(a1[2] + 38);
      v107 = *(char **)(*(_QWORD *)v115 + 1240);
      v116 = *(_QWORD *)(*(_QWORD *)v115 + 1248);
      if ((unint64_t)v107 >= v116)
      {
        v109 = (char *)v105[154];
        v118 = (v107 - v109) >> 3;
        if ((unint64_t)(v118 + 1) >> 61)
          goto LABEL_424;
        v119 = v116 - (_QWORD)v109;
        v120 = (uint64_t)(v116 - (_QWORD)v109) >> 2;
        if (v120 <= v118 + 1)
          v120 = v118 + 1;
        if (v119 >= 0x7FFFFFFFFFFFFFF8)
          v121 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v121 = v120;
        if (v121)
        {
          v122 = (char *)sub_40FC((uint64_t)(v105 + 156), v121);
          v107 = (char *)v105[155];
          v109 = (char *)v105[154];
        }
        else
        {
          v122 = 0;
        }
        v123 = &v122[8 * v118];
        v124 = &v122[8 * v121];
        *(_QWORD *)v123 = v106;
        v117 = v123 + 8;
        while (v107 != v109)
        {
          v126 = *((_QWORD *)v107 - 1);
          v107 -= 8;
          *((_QWORD *)v123 - 1) = v126;
          v123 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1)
        goto LABEL_166;
      v104 = a1[1];
      v105 = *(_QWORD **)v104;
      v106 = *(unsigned __int16 *)(a1[2] + 38);
      v107 = *(char **)(*(_QWORD *)v104 + 1240);
      v108 = *(_QWORD *)(*(_QWORD *)v104 + 1248);
      if ((unint64_t)v107 >= v108)
      {
        v109 = (char *)v105[154];
        v110 = (v107 - v109) >> 3;
        if ((unint64_t)(v110 + 1) >> 61)
          goto LABEL_424;
        v111 = v108 - (_QWORD)v109;
        v112 = (uint64_t)(v108 - (_QWORD)v109) >> 2;
        if (v112 <= v110 + 1)
          v112 = v110 + 1;
        if (v111 >= 0x7FFFFFFFFFFFFFF8)
          v113 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v113 = v112;
        if (v113)
        {
          v114 = (char *)sub_40FC((uint64_t)(v105 + 156), v113);
          v107 = (char *)v105[155];
          v109 = (char *)v105[154];
        }
        else
        {
          v114 = 0;
        }
        v123 = &v114[8 * v110];
        v124 = &v114[8 * v113];
        *(_QWORD *)v123 = v106;
        v117 = v123 + 8;
        while (v107 != v109)
        {
          v125 = *((_QWORD *)v107 - 1);
          v107 -= 8;
          *((_QWORD *)v123 - 1) = v125;
          v123 -= 8;
        }
LABEL_163:
        v105[154] = v123;
        v105[155] = v117;
        v105[156] = v124;
        if (v109)
          operator delete(v109);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v107 = v106;
    v117 = v107 + 8;
LABEL_165:
    v105[155] = v117;
LABEL_166:
    v127 = 1 << *(_DWORD *)(v3 + 48);
    if (v127 == 2)
    {
      v139 = a1[1];
      v129 = *(_QWORD **)v139;
      v130 = *(unsigned __int16 *)(a1[2] + 26);
      v131 = *(char **)(*(_QWORD *)v139 + 1264);
      v140 = *(_QWORD *)(*(_QWORD *)v139 + 1272);
      if ((unint64_t)v131 >= v140)
      {
        v133 = (char *)v129[157];
        v142 = (v131 - v133) >> 3;
        if ((unint64_t)(v142 + 1) >> 61)
          goto LABEL_424;
        v143 = v140 - (_QWORD)v133;
        v144 = (uint64_t)(v140 - (_QWORD)v133) >> 2;
        if (v144 <= v142 + 1)
          v144 = v142 + 1;
        if (v143 >= 0x7FFFFFFFFFFFFFF8)
          v145 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v145 = v144;
        if (v145)
        {
          v146 = (char *)sub_40FC((uint64_t)(v129 + 159), v145);
          v131 = (char *)v129[158];
          v133 = (char *)v129[157];
        }
        else
        {
          v146 = 0;
        }
        v147 = &v146[8 * v142];
        v148 = &v146[8 * v145];
        *(_QWORD *)v147 = v130;
        v141 = v147 + 8;
        while (v131 != v133)
        {
          v150 = *((_QWORD *)v131 - 1);
          v131 -= 8;
          *((_QWORD *)v147 - 1) = v150;
          v147 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v127 != 1)
        goto LABEL_198;
      v128 = a1[1];
      v129 = *(_QWORD **)v128;
      v130 = *(unsigned __int16 *)(a1[2] + 26);
      v131 = *(char **)(*(_QWORD *)v128 + 1264);
      v132 = *(_QWORD *)(*(_QWORD *)v128 + 1272);
      if ((unint64_t)v131 >= v132)
      {
        v133 = (char *)v129[157];
        v134 = (v131 - v133) >> 3;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_424;
        v135 = v132 - (_QWORD)v133;
        v136 = (uint64_t)(v132 - (_QWORD)v133) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v129 + 159), v137);
          v131 = (char *)v129[158];
          v133 = (char *)v129[157];
        }
        else
        {
          v138 = 0;
        }
        v147 = &v138[8 * v134];
        v148 = &v138[8 * v137];
        *(_QWORD *)v147 = v130;
        v141 = v147 + 8;
        while (v131 != v133)
        {
          v149 = *((_QWORD *)v131 - 1);
          v131 -= 8;
          *((_QWORD *)v147 - 1) = v149;
          v147 -= 8;
        }
LABEL_195:
        v129[157] = v147;
        v129[158] = v141;
        v129[159] = v148;
        if (v133)
          operator delete(v133);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v131 = v130;
    v141 = v131 + 8;
LABEL_197:
    v129[158] = v141;
LABEL_198:
    v151 = 1 << *(_DWORD *)(v3 + 48);
    if (v151 == 2)
    {
      v163 = a1[1];
      v153 = *(_QWORD **)v163;
      v154 = *(unsigned __int16 *)(a1[2] + 40);
      v155 = *(char **)(*(_QWORD *)v163 + 1288);
      v164 = *(_QWORD *)(*(_QWORD *)v163 + 1296);
      if ((unint64_t)v155 >= v164)
      {
        v157 = (char *)v153[160];
        v166 = (v155 - v157) >> 3;
        if ((unint64_t)(v166 + 1) >> 61)
          goto LABEL_424;
        v167 = v164 - (_QWORD)v157;
        v168 = (uint64_t)(v164 - (_QWORD)v157) >> 2;
        if (v168 <= v166 + 1)
          v168 = v166 + 1;
        if (v167 >= 0x7FFFFFFFFFFFFFF8)
          v169 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v169 = v168;
        if (v169)
        {
          v170 = (char *)sub_40FC((uint64_t)(v153 + 162), v169);
          v155 = (char *)v153[161];
          v157 = (char *)v153[160];
        }
        else
        {
          v170 = 0;
        }
        v171 = &v170[8 * v166];
        v172 = &v170[8 * v169];
        *(_QWORD *)v171 = v154;
        v165 = v171 + 8;
        while (v155 != v157)
        {
          v174 = *((_QWORD *)v155 - 1);
          v155 -= 8;
          *((_QWORD *)v171 - 1) = v174;
          v171 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v151 != 1)
        goto LABEL_230;
      v152 = a1[1];
      v153 = *(_QWORD **)v152;
      v154 = *(unsigned __int16 *)(a1[2] + 40);
      v155 = *(char **)(*(_QWORD *)v152 + 1288);
      v156 = *(_QWORD *)(*(_QWORD *)v152 + 1296);
      if ((unint64_t)v155 >= v156)
      {
        v157 = (char *)v153[160];
        v158 = (v155 - v157) >> 3;
        if ((unint64_t)(v158 + 1) >> 61)
          goto LABEL_424;
        v159 = v156 - (_QWORD)v157;
        v160 = (uint64_t)(v156 - (_QWORD)v157) >> 2;
        if (v160 <= v158 + 1)
          v160 = v158 + 1;
        if (v159 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v160;
        if (v161)
        {
          v162 = (char *)sub_40FC((uint64_t)(v153 + 162), v161);
          v155 = (char *)v153[161];
          v157 = (char *)v153[160];
        }
        else
        {
          v162 = 0;
        }
        v171 = &v162[8 * v158];
        v172 = &v162[8 * v161];
        *(_QWORD *)v171 = v154;
        v165 = v171 + 8;
        while (v155 != v157)
        {
          v173 = *((_QWORD *)v155 - 1);
          v155 -= 8;
          *((_QWORD *)v171 - 1) = v173;
          v171 -= 8;
        }
LABEL_227:
        v153[160] = v171;
        v153[161] = v165;
        v153[162] = v172;
        if (v157)
          operator delete(v157);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v155 = v154;
    v165 = v155 + 8;
LABEL_229:
    v153[161] = v165;
LABEL_230:
    v175 = 1 << *(_DWORD *)(v3 + 48);
    if (v175 == 2)
    {
      v187 = a1[1];
      v177 = *(_QWORD **)v187;
      v178 = *(unsigned __int16 *)(a1[2] + 28);
      v179 = *(char **)(*(_QWORD *)v187 + 1312);
      v188 = *(_QWORD *)(*(_QWORD *)v187 + 1320);
      if ((unint64_t)v179 >= v188)
      {
        v181 = (char *)v177[163];
        v190 = (v179 - v181) >> 3;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_424;
        v191 = v188 - (_QWORD)v181;
        v192 = (uint64_t)(v188 - (_QWORD)v181) >> 2;
        if (v192 <= v190 + 1)
          v192 = v190 + 1;
        if (v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
        {
          v194 = (char *)sub_40FC((uint64_t)(v177 + 165), v193);
          v179 = (char *)v177[164];
          v181 = (char *)v177[163];
        }
        else
        {
          v194 = 0;
        }
        v195 = &v194[8 * v190];
        v196 = &v194[8 * v193];
        *(_QWORD *)v195 = v178;
        v189 = v195 + 8;
        while (v179 != v181)
        {
          v198 = *((_QWORD *)v179 - 1);
          v179 -= 8;
          *((_QWORD *)v195 - 1) = v198;
          v195 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v175 != 1)
        goto LABEL_262;
      v176 = a1[1];
      v177 = *(_QWORD **)v176;
      v178 = *(unsigned __int16 *)(a1[2] + 28);
      v179 = *(char **)(*(_QWORD *)v176 + 1312);
      v180 = *(_QWORD *)(*(_QWORD *)v176 + 1320);
      if ((unint64_t)v179 >= v180)
      {
        v181 = (char *)v177[163];
        v182 = (v179 - v181) >> 3;
        if ((unint64_t)(v182 + 1) >> 61)
          goto LABEL_424;
        v183 = v180 - (_QWORD)v181;
        v184 = (uint64_t)(v180 - (_QWORD)v181) >> 2;
        if (v184 <= v182 + 1)
          v184 = v182 + 1;
        if (v183 >= 0x7FFFFFFFFFFFFFF8)
          v185 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v185 = v184;
        if (v185)
        {
          v186 = (char *)sub_40FC((uint64_t)(v177 + 165), v185);
          v179 = (char *)v177[164];
          v181 = (char *)v177[163];
        }
        else
        {
          v186 = 0;
        }
        v195 = &v186[8 * v182];
        v196 = &v186[8 * v185];
        *(_QWORD *)v195 = v178;
        v189 = v195 + 8;
        while (v179 != v181)
        {
          v197 = *((_QWORD *)v179 - 1);
          v179 -= 8;
          *((_QWORD *)v195 - 1) = v197;
          v195 -= 8;
        }
LABEL_259:
        v177[163] = v195;
        v177[164] = v189;
        v177[165] = v196;
        if (v181)
          operator delete(v181);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v179 = v178;
    v189 = v179 + 8;
LABEL_261:
    v177[164] = v189;
LABEL_262:
    v199 = 1 << *(_DWORD *)(v3 + 48);
    if (v199 == 2)
    {
      v211 = a1[1];
      v201 = *(_QWORD **)v211;
      v202 = *(unsigned __int16 *)(a1[2] + 46);
      v203 = *(char **)(*(_QWORD *)v211 + 1336);
      v212 = *(_QWORD *)(*(_QWORD *)v211 + 1344);
      if ((unint64_t)v203 >= v212)
      {
        v205 = (char *)v201[166];
        v214 = (v203 - v205) >> 3;
        if ((unint64_t)(v214 + 1) >> 61)
          goto LABEL_424;
        v215 = v212 - (_QWORD)v205;
        v216 = (uint64_t)(v212 - (_QWORD)v205) >> 2;
        if (v216 <= v214 + 1)
          v216 = v214 + 1;
        if (v215 >= 0x7FFFFFFFFFFFFFF8)
          v217 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v217 = v216;
        if (v217)
        {
          v218 = (char *)sub_40FC((uint64_t)(v201 + 168), v217);
          v203 = (char *)v201[167];
          v205 = (char *)v201[166];
        }
        else
        {
          v218 = 0;
        }
        v219 = &v218[8 * v214];
        v220 = &v218[8 * v217];
        *(_QWORD *)v219 = v202;
        v213 = v219 + 8;
        while (v203 != v205)
        {
          v222 = *((_QWORD *)v203 - 1);
          v203 -= 8;
          *((_QWORD *)v219 - 1) = v222;
          v219 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v199 != 1)
        goto LABEL_294;
      v200 = a1[1];
      v201 = *(_QWORD **)v200;
      v202 = *(unsigned __int16 *)(a1[2] + 46);
      v203 = *(char **)(*(_QWORD *)v200 + 1336);
      v204 = *(_QWORD *)(*(_QWORD *)v200 + 1344);
      if ((unint64_t)v203 >= v204)
      {
        v205 = (char *)v201[166];
        v206 = (v203 - v205) >> 3;
        if ((unint64_t)(v206 + 1) >> 61)
          goto LABEL_424;
        v207 = v204 - (_QWORD)v205;
        v208 = (uint64_t)(v204 - (_QWORD)v205) >> 2;
        if (v208 <= v206 + 1)
          v208 = v206 + 1;
        if (v207 >= 0x7FFFFFFFFFFFFFF8)
          v209 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v209 = v208;
        if (v209)
        {
          v210 = (char *)sub_40FC((uint64_t)(v201 + 168), v209);
          v203 = (char *)v201[167];
          v205 = (char *)v201[166];
        }
        else
        {
          v210 = 0;
        }
        v219 = &v210[8 * v206];
        v220 = &v210[8 * v209];
        *(_QWORD *)v219 = v202;
        v213 = v219 + 8;
        while (v203 != v205)
        {
          v221 = *((_QWORD *)v203 - 1);
          v203 -= 8;
          *((_QWORD *)v219 - 1) = v221;
          v219 -= 8;
        }
LABEL_291:
        v201[166] = v219;
        v201[167] = v213;
        v201[168] = v220;
        if (v205)
          operator delete(v205);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v203 = v202;
    v213 = v203 + 8;
LABEL_293:
    v201[167] = v213;
LABEL_294:
    v223 = 1 << *(_DWORD *)(v3 + 48);
    if (v223 == 2)
    {
      v235 = a1[1];
      v225 = *(_QWORD **)v235;
      v226 = *(unsigned __int16 *)(a1[2] + 34);
      v227 = *(char **)(*(_QWORD *)v235 + 1360);
      v236 = *(_QWORD *)(*(_QWORD *)v235 + 1368);
      if ((unint64_t)v227 >= v236)
      {
        v229 = (char *)v225[169];
        v238 = (v227 - v229) >> 3;
        if ((unint64_t)(v238 + 1) >> 61)
          goto LABEL_424;
        v239 = v236 - (_QWORD)v229;
        v240 = (uint64_t)(v236 - (_QWORD)v229) >> 2;
        if (v240 <= v238 + 1)
          v240 = v238 + 1;
        if (v239 >= 0x7FFFFFFFFFFFFFF8)
          v241 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v241 = v240;
        if (v241)
        {
          v242 = (char *)sub_40FC((uint64_t)(v225 + 171), v241);
          v227 = (char *)v225[170];
          v229 = (char *)v225[169];
        }
        else
        {
          v242 = 0;
        }
        v243 = &v242[8 * v238];
        v244 = &v242[8 * v241];
        *(_QWORD *)v243 = v226;
        v237 = v243 + 8;
        while (v227 != v229)
        {
          v246 = *((_QWORD *)v227 - 1);
          v227 -= 8;
          *((_QWORD *)v243 - 1) = v246;
          v243 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v223 != 1)
        goto LABEL_326;
      v224 = a1[1];
      v225 = *(_QWORD **)v224;
      v226 = *(unsigned __int16 *)(a1[2] + 34);
      v227 = *(char **)(*(_QWORD *)v224 + 1360);
      v228 = *(_QWORD *)(*(_QWORD *)v224 + 1368);
      if ((unint64_t)v227 >= v228)
      {
        v229 = (char *)v225[169];
        v230 = (v227 - v229) >> 3;
        if ((unint64_t)(v230 + 1) >> 61)
          goto LABEL_424;
        v231 = v228 - (_QWORD)v229;
        v232 = (uint64_t)(v228 - (_QWORD)v229) >> 2;
        if (v232 <= v230 + 1)
          v232 = v230 + 1;
        if (v231 >= 0x7FFFFFFFFFFFFFF8)
          v233 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v233 = v232;
        if (v233)
        {
          v234 = (char *)sub_40FC((uint64_t)(v225 + 171), v233);
          v227 = (char *)v225[170];
          v229 = (char *)v225[169];
        }
        else
        {
          v234 = 0;
        }
        v243 = &v234[8 * v230];
        v244 = &v234[8 * v233];
        *(_QWORD *)v243 = v226;
        v237 = v243 + 8;
        while (v227 != v229)
        {
          v245 = *((_QWORD *)v227 - 1);
          v227 -= 8;
          *((_QWORD *)v243 - 1) = v245;
          v243 -= 8;
        }
LABEL_323:
        v225[169] = v243;
        v225[170] = v237;
        v225[171] = v244;
        if (v229)
          operator delete(v229);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v227 = v226;
    v237 = v227 + 8;
LABEL_325:
    v225[170] = v237;
LABEL_326:
    v247 = 1 << *(_DWORD *)(v3 + 48);
    if (v247 == 2)
    {
      v259 = a1[1];
      v249 = *(_QWORD **)v259;
      v250 = *(unsigned __int16 *)(a1[2] + 42);
      v251 = *(char **)(*(_QWORD *)v259 + 1384);
      v260 = *(_QWORD *)(*(_QWORD *)v259 + 1392);
      if ((unint64_t)v251 >= v260)
      {
        v253 = (char *)v249[172];
        v262 = (v251 - v253) >> 3;
        if ((unint64_t)(v262 + 1) >> 61)
          goto LABEL_424;
        v263 = v260 - (_QWORD)v253;
        v264 = (uint64_t)(v260 - (_QWORD)v253) >> 2;
        if (v264 <= v262 + 1)
          v264 = v262 + 1;
        if (v263 >= 0x7FFFFFFFFFFFFFF8)
          v265 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v265 = v264;
        if (v265)
        {
          v266 = (char *)sub_40FC((uint64_t)(v249 + 174), v265);
          v251 = (char *)v249[173];
          v253 = (char *)v249[172];
        }
        else
        {
          v266 = 0;
        }
        v267 = &v266[8 * v262];
        v268 = &v266[8 * v265];
        *(_QWORD *)v267 = v250;
        v261 = v267 + 8;
        while (v251 != v253)
        {
          v270 = *((_QWORD *)v251 - 1);
          v251 -= 8;
          *((_QWORD *)v267 - 1) = v270;
          v267 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v247 != 1)
        goto LABEL_358;
      v248 = a1[1];
      v249 = *(_QWORD **)v248;
      v250 = *(unsigned __int16 *)(a1[2] + 42);
      v251 = *(char **)(*(_QWORD *)v248 + 1384);
      v252 = *(_QWORD *)(*(_QWORD *)v248 + 1392);
      if ((unint64_t)v251 >= v252)
      {
        v253 = (char *)v249[172];
        v254 = (v251 - v253) >> 3;
        if ((unint64_t)(v254 + 1) >> 61)
          goto LABEL_424;
        v255 = v252 - (_QWORD)v253;
        v256 = (uint64_t)(v252 - (_QWORD)v253) >> 2;
        if (v256 <= v254 + 1)
          v256 = v254 + 1;
        if (v255 >= 0x7FFFFFFFFFFFFFF8)
          v257 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v257 = v256;
        if (v257)
        {
          v258 = (char *)sub_40FC((uint64_t)(v249 + 174), v257);
          v251 = (char *)v249[173];
          v253 = (char *)v249[172];
        }
        else
        {
          v258 = 0;
        }
        v267 = &v258[8 * v254];
        v268 = &v258[8 * v257];
        *(_QWORD *)v267 = v250;
        v261 = v267 + 8;
        while (v251 != v253)
        {
          v269 = *((_QWORD *)v251 - 1);
          v251 -= 8;
          *((_QWORD *)v267 - 1) = v269;
          v267 -= 8;
        }
LABEL_355:
        v249[172] = v267;
        v249[173] = v261;
        v249[174] = v268;
        if (v253)
          operator delete(v253);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v251 = v250;
    v261 = v251 + 8;
LABEL_357:
    v249[173] = v261;
LABEL_358:
    v271 = 1 << *(_DWORD *)(v3 + 48);
    if (v271 == 2)
    {
      v283 = a1[1];
      v273 = *(_QWORD **)v283;
      v274 = *(unsigned __int16 *)(a1[2] + 30);
      v275 = *(char **)(*(_QWORD *)v283 + 1408);
      v284 = *(_QWORD *)(*(_QWORD *)v283 + 1416);
      if ((unint64_t)v275 >= v284)
      {
        v277 = (char *)v273[175];
        v286 = (v275 - v277) >> 3;
        if ((unint64_t)(v286 + 1) >> 61)
          goto LABEL_424;
        v287 = v284 - (_QWORD)v277;
        v288 = (uint64_t)(v284 - (_QWORD)v277) >> 2;
        if (v288 <= v286 + 1)
          v288 = v286 + 1;
        if (v287 >= 0x7FFFFFFFFFFFFFF8)
          v289 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v289 = v288;
        if (v289)
        {
          v290 = (char *)sub_40FC((uint64_t)(v273 + 177), v289);
          v275 = (char *)v273[176];
          v277 = (char *)v273[175];
        }
        else
        {
          v290 = 0;
        }
        v291 = &v290[8 * v286];
        v292 = &v290[8 * v289];
        *(_QWORD *)v291 = v274;
        v285 = v291 + 8;
        while (v275 != v277)
        {
          v294 = *((_QWORD *)v275 - 1);
          v275 -= 8;
          *((_QWORD *)v291 - 1) = v294;
          v291 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v271 != 1)
        goto LABEL_390;
      v272 = a1[1];
      v273 = *(_QWORD **)v272;
      v274 = *(unsigned __int16 *)(a1[2] + 30);
      v275 = *(char **)(*(_QWORD *)v272 + 1408);
      v276 = *(_QWORD *)(*(_QWORD *)v272 + 1416);
      if ((unint64_t)v275 >= v276)
      {
        v277 = (char *)v273[175];
        v278 = (v275 - v277) >> 3;
        if ((unint64_t)(v278 + 1) >> 61)
          goto LABEL_424;
        v279 = v276 - (_QWORD)v277;
        v280 = (uint64_t)(v276 - (_QWORD)v277) >> 2;
        if (v280 <= v278 + 1)
          v280 = v278 + 1;
        if (v279 >= 0x7FFFFFFFFFFFFFF8)
          v281 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v281 = v280;
        if (v281)
        {
          v282 = (char *)sub_40FC((uint64_t)(v273 + 177), v281);
          v275 = (char *)v273[176];
          v277 = (char *)v273[175];
        }
        else
        {
          v282 = 0;
        }
        v291 = &v282[8 * v278];
        v292 = &v282[8 * v281];
        *(_QWORD *)v291 = v274;
        v285 = v291 + 8;
        while (v275 != v277)
        {
          v293 = *((_QWORD *)v275 - 1);
          v275 -= 8;
          *((_QWORD *)v291 - 1) = v293;
          v291 -= 8;
        }
LABEL_387:
        v273[175] = v291;
        v273[176] = v285;
        v273[177] = v292;
        if (v277)
          operator delete(v277);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v275 = v274;
    v285 = v275 + 8;
LABEL_389:
    v273[176] = v285;
LABEL_390:
    v295 = 1 << *(_DWORD *)(v3 + 48);
    if (v295 == 2)
    {
      v307 = a1[2];
      v297 = *(_QWORD **)a1[1];
      v298 = *(_WORD *)(v307 + 50) & 0x7FFF;
      v299 = (char *)v297[179];
      v308 = v297[180];
      if ((unint64_t)v299 >= v308)
      {
        v301 = (char *)v297[178];
        v310 = (v299 - v301) >> 3;
        if (!((unint64_t)(v310 + 1) >> 61))
        {
          v311 = v308 - (_QWORD)v301;
          v312 = (uint64_t)(v308 - (_QWORD)v301) >> 2;
          if (v312 <= v310 + 1)
            v312 = v310 + 1;
          if (v311 >= 0x7FFFFFFFFFFFFFF8)
            v313 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v313 = v312;
          if (v313)
          {
            v314 = (char *)sub_40FC((uint64_t)(v297 + 180), v313);
            v299 = (char *)v297[179];
            v301 = (char *)v297[178];
          }
          else
          {
            v314 = 0;
          }
          v315 = &v314[8 * v310];
          v316 = &v314[8 * v313];
          *(_QWORD *)v315 = v298;
          v309 = v315 + 8;
          while (v299 != v301)
          {
            v318 = *((_QWORD *)v299 - 1);
            v299 -= 8;
            *((_QWORD *)v315 - 1) = v318;
            v315 -= 8;
          }
          goto LABEL_419;
        }
LABEL_424:
        sub_4074();
      }
    }
    else
    {
      if (v295 != 1)
      {
LABEL_422:
        *a2 = 1;
        return;
      }
      v296 = a1[2];
      v297 = *(_QWORD **)a1[1];
      v298 = *(_WORD *)(v296 + 50) & 0x7FFF;
      v299 = (char *)v297[179];
      v300 = v297[180];
      if ((unint64_t)v299 >= v300)
      {
        v301 = (char *)v297[178];
        v302 = (v299 - v301) >> 3;
        if (!((unint64_t)(v302 + 1) >> 61))
        {
          v303 = v300 - (_QWORD)v301;
          v304 = (uint64_t)(v300 - (_QWORD)v301) >> 2;
          if (v304 <= v302 + 1)
            v304 = v302 + 1;
          if (v303 >= 0x7FFFFFFFFFFFFFF8)
            v305 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v305 = v304;
          if (v305)
          {
            v306 = (char *)sub_40FC((uint64_t)(v297 + 180), v305);
            v299 = (char *)v297[179];
            v301 = (char *)v297[178];
          }
          else
          {
            v306 = 0;
          }
          v315 = &v306[8 * v302];
          v316 = &v306[8 * v305];
          *(_QWORD *)v315 = v298;
          v309 = v315 + 8;
          while (v299 != v301)
          {
            v317 = *((_QWORD *)v299 - 1);
            v299 -= 8;
            *((_QWORD *)v315 - 1) = v317;
            v315 -= 8;
          }
LABEL_419:
          v297[178] = v315;
          v297[179] = v309;
          v297[180] = v316;
          if (v301)
            operator delete(v301);
          goto LABEL_421;
        }
        goto LABEL_424;
      }
    }
    *(_QWORD *)v299 = v298;
    v309 = v299 + 8;
LABEL_421:
    v297[179] = v309;
    goto LABEL_422;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (unsigned __int16 *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[143] - 8) += v17[24] & 0x7FFF;
    *(_QWORD *)(v19[146] - 8) += v17[18] & 0x7FFF;
    *(_QWORD *)(v19[149] - 8) += v17[22];
    *(_QWORD *)(v19[152] - 8) += v17[16];
    *(_QWORD *)(v19[155] - 8) += v17[19];
    *(_QWORD *)(v19[158] - 8) += v17[13];
    *(_QWORD *)(v19[161] - 8) += v17[20];
    *(_QWORD *)(v19[164] - 8) += v17[14];
    *(_QWORD *)(v19[167] - 8) += v17[23];
    *(_QWORD *)(v19[170] - 8) += v17[17];
    v20 = (unsigned __int16 *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[173] - 8) += v20[21];
    *(_QWORD *)(v21[176] - 8) += v20[15];
    *(_QWORD *)(v21[179] - 8) += v20[25] & 0x7FFF;
  }
}

void sub_14AE74(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t *v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t *v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  uint64_t *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  char *v249;
  uint64_t *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t *v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  char *v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  uint64_t *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  char *v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  uint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t *v304;
  unint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  uint64_t v312;
  unint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  uint64_t *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;

  v3 = *a1;
  if (*a2 == 1)
  {
    v11 = *(_DWORD *)(v3 + 48);
    if (!v11)
    {
      v12 = a1[2];
      v13 = *(_QWORD *)a1[1];
      *(_QWORD *)(*(_QWORD *)(v13 + 784) - 8) += *(_DWORD *)(v12 + 36) & 0x3FFFF;
      *(_QWORD *)(*(_QWORD *)(v13 + 808) - 8) += *(_DWORD *)(v12 + 32) & 0x3FFFF;
    }
    if (v11 <= 1)
    {
      v14 = a1[2];
      v15 = *(_QWORD *)a1[1];
      *(_QWORD *)(*(_QWORD *)(v15 + 832) - 8) += *(_DWORD *)(v14 + 28) & 0x3FFFF;
      *(_QWORD *)(*(_QWORD *)(v15 + 856) - 8) += ((unint64_t)*(unsigned int *)(v14 + 24) >> 1) & 0x3FFFF;
    }
    if (v11)
    {
      v16 = 1 << v11;
      if (v16 == 4)
      {
        v27 = (_DWORD *)a1[2];
        v28 = *(_QWORD **)a1[1];
        *(_QWORD *)(v28[119] - 8) += v27[11] & 0x3FFFF;
        *(_QWORD *)(v28[122] - 8) += v27[10] & 0x3FFFF;
        *(_QWORD *)(v28[125] - 8) += v27[9] & 0x3FFFF;
        v29 = v27[8] & 0x3FFFF;
        v30 = v28[128];
LABEL_28:
        *(_QWORD *)(v30 - 8) += v29;
        return;
      }
      if (v16 == 2)
      {
        v17 = a1[2];
        v18 = *(_QWORD **)a1[1];
        *(_QWORD *)(v18[116] - 8) += *(unsigned __int16 *)(v17 + 62);
        *(_QWORD *)(v18[119] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
        *(_QWORD *)(v18[122] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
        *(_QWORD *)(v18[125] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
        v19 = *(_DWORD *)(v17 + 32) & 0x3FFFF;
        v20 = v18[128];
        goto LABEL_27;
      }
      if (v16 != 1)
        return;
      v17 = a1[2];
      v18 = *(_QWORD **)a1[1];
    }
    else
    {
      v17 = a1[2];
      v18 = *(_QWORD **)a1[1];
      *(_QWORD *)(v18[110] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
      *(_QWORD *)(v18[113] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    }
    v19 = *(unsigned __int16 *)(v17 + 62);
    v20 = v18[116];
LABEL_27:
    *(_QWORD *)(v20 - 8) += v19;
    *(_QWORD *)(v18[131] - 8) += *(_DWORD *)(v17 + 48) & 0xFFFFF;
    *(_QWORD *)(v18[134] - 8) += *(_DWORD *)(v17 + 56) & 0xFFFFF;
    *(_QWORD *)(v18[137] - 8) += *(unsigned __int16 *)(v17 + 60);
    v29 = *(_DWORD *)(v17 + 52) & 0xFFFFF;
    v30 = v18[140];
    goto LABEL_28;
  }
  if (*a2)
    return;
  v5 = *(_DWORD *)(v3 + 48);
  if (!v5)
  {
    v6 = *(_QWORD **)a1[1];
    v7 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    v8 = (uint64_t *)v6[98];
    v9 = v6[99];
    if ((unint64_t)v8 >= v9)
    {
      v21 = (uint64_t *)v6[97];
      v22 = v8 - v21;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_442;
      v23 = v9 - (_QWORD)v21;
      v24 = (uint64_t)(v9 - (_QWORD)v21) >> 2;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)sub_40FC((uint64_t)(v6 + 99), v25);
        v8 = (uint64_t *)v6[98];
        v21 = (uint64_t *)v6[97];
      }
      else
      {
        v26 = 0;
      }
      v31 = (uint64_t *)&v26[8 * v22];
      v32 = &v26[8 * v25];
      *v31 = v7;
      v10 = v31 + 1;
      while (v8 != v21)
      {
        v33 = *--v8;
        *--v31 = v33;
      }
      v6[97] = v31;
      v6[98] = v10;
      v6[99] = v32;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    v6[98] = v10;
    v5 = *(_DWORD *)(v3 + 48);
    if (!v5)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v36 = (uint64_t *)v34[101];
      v37 = v34[102];
      if ((unint64_t)v36 >= v37)
      {
        v39 = (uint64_t *)v34[100];
        v40 = v36 - v39;
        if ((unint64_t)(v40 + 1) >> 61)
          goto LABEL_442;
        v41 = v37 - (_QWORD)v39;
        v42 = (uint64_t)(v37 - (_QWORD)v39) >> 2;
        if (v42 <= v40 + 1)
          v42 = v40 + 1;
        if (v41 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        if (v43)
        {
          v44 = (char *)sub_40FC((uint64_t)(v34 + 102), v43);
          v36 = (uint64_t *)v34[101];
          v39 = (uint64_t *)v34[100];
        }
        else
        {
          v44 = 0;
        }
        v45 = (uint64_t *)&v44[8 * v40];
        v46 = &v44[8 * v43];
        *v45 = v35;
        v38 = v45 + 1;
        while (v36 != v39)
        {
          v47 = *--v36;
          *--v45 = v47;
        }
        v34[100] = v45;
        v34[101] = v38;
        v34[102] = v46;
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v36 = v35;
        v38 = v36 + 1;
      }
      v34[101] = v38;
      v5 = *(_DWORD *)(v3 + 48);
    }
  }
  v48 = 1 << v5;
  if (v48 == 2)
  {
    v49 = *(_QWORD **)a1[1];
    v50 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    v51 = (uint64_t *)v49[104];
    v59 = v49[105];
    if ((unint64_t)v51 >= v59)
    {
      v53 = (uint64_t *)v49[103];
      v61 = v51 - v53;
      if ((unint64_t)(v61 + 1) >> 61)
        goto LABEL_442;
      v62 = v59 - (_QWORD)v53;
      v63 = (uint64_t)(v59 - (_QWORD)v53) >> 2;
      if (v63 <= v61 + 1)
        v63 = v61 + 1;
      if (v62 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
      {
        v65 = (char *)sub_40FC((uint64_t)(v49 + 105), v64);
        v51 = (uint64_t *)v49[104];
        v53 = (uint64_t *)v49[103];
      }
      else
      {
        v65 = 0;
      }
      v66 = (uint64_t *)&v65[8 * v61];
      v67 = &v65[8 * v64];
      *v66 = v50;
      v60 = v66 + 1;
      while (v51 != v53)
      {
        v69 = *--v51;
        *--v66 = v69;
      }
      goto LABEL_82;
    }
  }
  else
  {
    if (v48 != 1)
      goto LABEL_85;
    v49 = *(_QWORD **)a1[1];
    v50 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    v51 = (uint64_t *)v49[104];
    v52 = v49[105];
    if ((unint64_t)v51 >= v52)
    {
      v53 = (uint64_t *)v49[103];
      v54 = v51 - v53;
      if ((unint64_t)(v54 + 1) >> 61)
        goto LABEL_442;
      v55 = v52 - (_QWORD)v53;
      v56 = (uint64_t)(v52 - (_QWORD)v53) >> 2;
      if (v56 <= v54 + 1)
        v56 = v54 + 1;
      if (v55 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      if (v57)
      {
        v58 = (char *)sub_40FC((uint64_t)(v49 + 105), v57);
        v51 = (uint64_t *)v49[104];
        v53 = (uint64_t *)v49[103];
      }
      else
      {
        v58 = 0;
      }
      v66 = (uint64_t *)&v58[8 * v54];
      v67 = &v58[8 * v57];
      *v66 = v50;
      v60 = v66 + 1;
      while (v51 != v53)
      {
        v68 = *--v51;
        *--v66 = v68;
      }
LABEL_82:
      v49[103] = v66;
      v49[104] = v60;
      v49[105] = v67;
      if (v53)
        operator delete(v53);
      goto LABEL_84;
    }
  }
  *v51 = v50;
  v60 = v51 + 1;
LABEL_84:
  v49[104] = v60;
LABEL_85:
  v70 = *(_DWORD *)(v3 + 48);
  if (1 << v70 == 2)
  {
    v71 = *(_QWORD **)a1[1];
    v72 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x3FFFF;
    v73 = (unint64_t *)v71[107];
    v81 = v71[108];
    if ((unint64_t)v73 >= v81)
    {
      v75 = (unint64_t *)v71[106];
      v83 = v73 - v75;
      if ((unint64_t)(v83 + 1) >> 61)
        goto LABEL_442;
      v84 = v81 - (_QWORD)v75;
      v85 = (uint64_t)(v81 - (_QWORD)v75) >> 2;
      if (v85 <= v83 + 1)
        v85 = v83 + 1;
      if (v84 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v85;
      if (v86)
      {
        v87 = (char *)sub_40FC((uint64_t)(v71 + 108), v86);
        v73 = (unint64_t *)v71[107];
        v75 = (unint64_t *)v71[106];
      }
      else
      {
        v87 = 0;
      }
      v88 = (unint64_t *)&v87[8 * v83];
      v89 = &v87[8 * v86];
      *v88 = v72;
      v82 = v88 + 1;
      while (v73 != v75)
      {
        v91 = *--v73;
        *--v88 = v91;
      }
      goto LABEL_114;
    }
LABEL_97:
    *v73 = v72;
    v82 = v73 + 1;
LABEL_116:
    v71[107] = v82;
    v70 = *(_DWORD *)(v3 + 48);
    goto LABEL_117;
  }
  if (1 << v70 == 1)
  {
    v71 = *(_QWORD **)a1[1];
    v72 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x3FFFF;
    v73 = (unint64_t *)v71[107];
    v74 = v71[108];
    if ((unint64_t)v73 >= v74)
    {
      v75 = (unint64_t *)v71[106];
      v76 = v73 - v75;
      if ((unint64_t)(v76 + 1) >> 61)
        goto LABEL_442;
      v77 = v74 - (_QWORD)v75;
      v78 = (uint64_t)(v74 - (_QWORD)v75) >> 2;
      if (v78 <= v76 + 1)
        v78 = v76 + 1;
      if (v77 >= 0x7FFFFFFFFFFFFFF8)
        v79 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v79 = v78;
      if (v79)
      {
        v80 = (char *)sub_40FC((uint64_t)(v71 + 108), v79);
        v73 = (unint64_t *)v71[107];
        v75 = (unint64_t *)v71[106];
      }
      else
      {
        v80 = 0;
      }
      v88 = (unint64_t *)&v80[8 * v76];
      v89 = &v80[8 * v79];
      *v88 = v72;
      v82 = v88 + 1;
      while (v73 != v75)
      {
        v90 = *--v73;
        *--v88 = v90;
      }
LABEL_114:
      v71[106] = v88;
      v71[107] = v82;
      v71[108] = v89;
      if (v75)
        operator delete(v75);
      goto LABEL_116;
    }
    goto LABEL_97;
  }
LABEL_117:
  if (!v70)
  {
    v92 = *(_QWORD **)a1[1];
    v93 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
    v94 = (uint64_t *)v92[110];
    v95 = v92[111];
    if ((unint64_t)v94 >= v95)
    {
      v97 = (uint64_t *)v92[109];
      v98 = v94 - v97;
      if ((unint64_t)(v98 + 1) >> 61)
        goto LABEL_442;
      v99 = v95 - (_QWORD)v97;
      v100 = (uint64_t)(v95 - (_QWORD)v97) >> 2;
      if (v100 <= v98 + 1)
        v100 = v98 + 1;
      if (v99 >= 0x7FFFFFFFFFFFFFF8)
        v101 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v101 = v100;
      if (v101)
      {
        v102 = (char *)sub_40FC((uint64_t)(v92 + 111), v101);
        v94 = (uint64_t *)v92[110];
        v97 = (uint64_t *)v92[109];
      }
      else
      {
        v102 = 0;
      }
      v103 = (uint64_t *)&v102[8 * v98];
      v104 = &v102[8 * v101];
      *v103 = v93;
      v96 = v103 + 1;
      while (v94 != v97)
      {
        v105 = *--v94;
        *--v103 = v105;
      }
      v92[109] = v103;
      v92[110] = v96;
      v92[111] = v104;
      if (v97)
        operator delete(v97);
    }
    else
    {
      *v94 = v93;
      v96 = v94 + 1;
    }
    v92[110] = v96;
    v70 = *(_DWORD *)(v3 + 48);
    if (!v70)
    {
      v106 = *(_QWORD **)a1[1];
      v107 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v108 = (uint64_t *)v106[113];
      v109 = v106[114];
      if ((unint64_t)v108 >= v109)
      {
        v111 = (uint64_t *)v106[112];
        v112 = v108 - v111;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_442;
        v113 = v109 - (_QWORD)v111;
        v114 = (uint64_t)(v109 - (_QWORD)v111) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v106 + 114), v115);
          v108 = (uint64_t *)v106[113];
          v111 = (uint64_t *)v106[112];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v107;
        v110 = v117 + 1;
        while (v108 != v111)
        {
          v119 = *--v108;
          *--v117 = v119;
        }
        v106[112] = v117;
        v106[113] = v110;
        v106[114] = v118;
        if (v111)
          operator delete(v111);
      }
      else
      {
        *v108 = v107;
        v110 = v108 + 1;
      }
      v106[113] = v110;
      v70 = *(_DWORD *)(v3 + 48);
    }
  }
  v120 = 1 << v70;
  if (v120 == 2)
  {
    v132 = a1[1];
    v122 = *(_QWORD **)v132;
    v123 = *(unsigned __int16 *)(a1[2] + 62);
    v124 = *(char **)(*(_QWORD *)v132 + 928);
    v133 = *(_QWORD *)(*(_QWORD *)v132 + 936);
    if ((unint64_t)v124 >= v133)
    {
      v126 = (char *)v122[115];
      v135 = (v124 - v126) >> 3;
      if ((unint64_t)(v135 + 1) >> 61)
        goto LABEL_442;
      v136 = v133 - (_QWORD)v126;
      v137 = (uint64_t)(v133 - (_QWORD)v126) >> 2;
      if (v137 <= v135 + 1)
        v137 = v135 + 1;
      if (v136 >= 0x7FFFFFFFFFFFFFF8)
        v138 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v138 = v137;
      if (v138)
      {
        v139 = (char *)sub_40FC((uint64_t)(v122 + 117), v138);
        v124 = (char *)v122[116];
        v126 = (char *)v122[115];
      }
      else
      {
        v139 = 0;
      }
      v140 = &v139[8 * v135];
      v141 = &v139[8 * v138];
      *(_QWORD *)v140 = v123;
      v134 = v140 + 8;
      while (v124 != v126)
      {
        v143 = *((_QWORD *)v124 - 1);
        v124 -= 8;
        *((_QWORD *)v140 - 1) = v143;
        v140 -= 8;
      }
      goto LABEL_181;
    }
  }
  else
  {
    if (v120 != 1)
      goto LABEL_184;
    v121 = a1[1];
    v122 = *(_QWORD **)v121;
    v123 = *(unsigned __int16 *)(a1[2] + 62);
    v124 = *(char **)(*(_QWORD *)v121 + 928);
    v125 = *(_QWORD *)(*(_QWORD *)v121 + 936);
    if ((unint64_t)v124 >= v125)
    {
      v126 = (char *)v122[115];
      v127 = (v124 - v126) >> 3;
      if ((unint64_t)(v127 + 1) >> 61)
        goto LABEL_442;
      v128 = v125 - (_QWORD)v126;
      v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
      if (v129 <= v127 + 1)
        v129 = v127 + 1;
      if (v128 >= 0x7FFFFFFFFFFFFFF8)
        v130 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v130 = v129;
      if (v130)
      {
        v131 = (char *)sub_40FC((uint64_t)(v122 + 117), v130);
        v124 = (char *)v122[116];
        v126 = (char *)v122[115];
      }
      else
      {
        v131 = 0;
      }
      v140 = &v131[8 * v127];
      v141 = &v131[8 * v130];
      *(_QWORD *)v140 = v123;
      v134 = v140 + 8;
      while (v124 != v126)
      {
        v142 = *((_QWORD *)v124 - 1);
        v124 -= 8;
        *((_QWORD *)v140 - 1) = v142;
        v140 -= 8;
      }
LABEL_181:
      v122[115] = v140;
      v122[116] = v134;
      v122[117] = v141;
      if (v126)
        operator delete(v126);
      goto LABEL_183;
    }
  }
  *(_QWORD *)v124 = v123;
  v134 = v124 + 8;
LABEL_183:
  v122[116] = v134;
LABEL_184:
  v144 = 1 << *(_DWORD *)(v3 + 48);
  if (v144 == 4)
  {
    v145 = *(_QWORD **)a1[1];
    v146 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
    v147 = (uint64_t *)v145[119];
    v155 = v145[120];
    if ((unint64_t)v147 >= v155)
    {
      v149 = (uint64_t *)v145[118];
      v157 = v147 - v149;
      if ((unint64_t)(v157 + 1) >> 61)
        goto LABEL_442;
      v158 = v155 - (_QWORD)v149;
      v159 = (uint64_t)(v155 - (_QWORD)v149) >> 2;
      if (v159 <= v157 + 1)
        v159 = v157 + 1;
      if (v158 >= 0x7FFFFFFFFFFFFFF8)
        v160 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v160 = v159;
      if (v160)
      {
        v161 = (char *)sub_40FC((uint64_t)(v145 + 120), v160);
        v147 = (uint64_t *)v145[119];
        v149 = (uint64_t *)v145[118];
      }
      else
      {
        v161 = 0;
      }
      v162 = (uint64_t *)&v161[8 * v157];
      v163 = &v161[8 * v160];
      *v162 = v146;
      v156 = v162 + 1;
      while (v147 != v149)
      {
        v165 = *--v147;
        *--v162 = v165;
      }
      goto LABEL_213;
    }
  }
  else
  {
    if (v144 != 2)
      goto LABEL_216;
    v145 = *(_QWORD **)a1[1];
    v146 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
    v147 = (uint64_t *)v145[119];
    v148 = v145[120];
    if ((unint64_t)v147 >= v148)
    {
      v149 = (uint64_t *)v145[118];
      v150 = v147 - v149;
      if ((unint64_t)(v150 + 1) >> 61)
        goto LABEL_442;
      v151 = v148 - (_QWORD)v149;
      v152 = (uint64_t)(v148 - (_QWORD)v149) >> 2;
      if (v152 <= v150 + 1)
        v152 = v150 + 1;
      if (v151 >= 0x7FFFFFFFFFFFFFF8)
        v153 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v153 = v152;
      if (v153)
      {
        v154 = (char *)sub_40FC((uint64_t)(v145 + 120), v153);
        v147 = (uint64_t *)v145[119];
        v149 = (uint64_t *)v145[118];
      }
      else
      {
        v154 = 0;
      }
      v162 = (uint64_t *)&v154[8 * v150];
      v163 = &v154[8 * v153];
      *v162 = v146;
      v156 = v162 + 1;
      while (v147 != v149)
      {
        v164 = *--v147;
        *--v162 = v164;
      }
LABEL_213:
      v145[118] = v162;
      v145[119] = v156;
      v145[120] = v163;
      if (v149)
        operator delete(v149);
      goto LABEL_215;
    }
  }
  *v147 = v146;
  v156 = v147 + 1;
LABEL_215:
  v145[119] = v156;
LABEL_216:
  v166 = 1 << *(_DWORD *)(v3 + 48);
  if (v166 == 4)
  {
    v167 = *(_QWORD **)a1[1];
    v168 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    v169 = (uint64_t *)v167[122];
    v177 = v167[123];
    if ((unint64_t)v169 >= v177)
    {
      v171 = (uint64_t *)v167[121];
      v179 = v169 - v171;
      if ((unint64_t)(v179 + 1) >> 61)
        goto LABEL_442;
      v180 = v177 - (_QWORD)v171;
      v181 = (uint64_t)(v177 - (_QWORD)v171) >> 2;
      if (v181 <= v179 + 1)
        v181 = v179 + 1;
      if (v180 >= 0x7FFFFFFFFFFFFFF8)
        v182 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v182 = v181;
      if (v182)
      {
        v183 = (char *)sub_40FC((uint64_t)(v167 + 123), v182);
        v169 = (uint64_t *)v167[122];
        v171 = (uint64_t *)v167[121];
      }
      else
      {
        v183 = 0;
      }
      v184 = (uint64_t *)&v183[8 * v179];
      v185 = &v183[8 * v182];
      *v184 = v168;
      v178 = v184 + 1;
      while (v169 != v171)
      {
        v187 = *--v169;
        *--v184 = v187;
      }
      goto LABEL_245;
    }
  }
  else
  {
    if (v166 != 2)
      goto LABEL_248;
    v167 = *(_QWORD **)a1[1];
    v168 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    v169 = (uint64_t *)v167[122];
    v170 = v167[123];
    if ((unint64_t)v169 >= v170)
    {
      v171 = (uint64_t *)v167[121];
      v172 = v169 - v171;
      if ((unint64_t)(v172 + 1) >> 61)
        goto LABEL_442;
      v173 = v170 - (_QWORD)v171;
      v174 = (uint64_t)(v170 - (_QWORD)v171) >> 2;
      if (v174 <= v172 + 1)
        v174 = v172 + 1;
      if (v173 >= 0x7FFFFFFFFFFFFFF8)
        v175 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v175 = v174;
      if (v175)
      {
        v176 = (char *)sub_40FC((uint64_t)(v167 + 123), v175);
        v169 = (uint64_t *)v167[122];
        v171 = (uint64_t *)v167[121];
      }
      else
      {
        v176 = 0;
      }
      v184 = (uint64_t *)&v176[8 * v172];
      v185 = &v176[8 * v175];
      *v184 = v168;
      v178 = v184 + 1;
      while (v169 != v171)
      {
        v186 = *--v169;
        *--v184 = v186;
      }
LABEL_245:
      v167[121] = v184;
      v167[122] = v178;
      v167[123] = v185;
      if (v171)
        operator delete(v171);
      goto LABEL_247;
    }
  }
  *v169 = v168;
  v178 = v169 + 1;
LABEL_247:
  v167[122] = v178;
LABEL_248:
  v188 = 1 << *(_DWORD *)(v3 + 48);
  if (v188 == 4)
  {
    v189 = *(_QWORD **)a1[1];
    v190 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    v191 = (uint64_t *)v189[125];
    v199 = v189[126];
    if ((unint64_t)v191 >= v199)
    {
      v193 = (uint64_t *)v189[124];
      v201 = v191 - v193;
      if ((unint64_t)(v201 + 1) >> 61)
        goto LABEL_442;
      v202 = v199 - (_QWORD)v193;
      v203 = (uint64_t)(v199 - (_QWORD)v193) >> 2;
      if (v203 <= v201 + 1)
        v203 = v201 + 1;
      if (v202 >= 0x7FFFFFFFFFFFFFF8)
        v204 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v204 = v203;
      if (v204)
      {
        v205 = (char *)sub_40FC((uint64_t)(v189 + 126), v204);
        v191 = (uint64_t *)v189[125];
        v193 = (uint64_t *)v189[124];
      }
      else
      {
        v205 = 0;
      }
      v206 = (uint64_t *)&v205[8 * v201];
      v207 = &v205[8 * v204];
      *v206 = v190;
      v200 = v206 + 1;
      while (v191 != v193)
      {
        v209 = *--v191;
        *--v206 = v209;
      }
      goto LABEL_277;
    }
  }
  else
  {
    if (v188 != 2)
      goto LABEL_280;
    v189 = *(_QWORD **)a1[1];
    v190 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    v191 = (uint64_t *)v189[125];
    v192 = v189[126];
    if ((unint64_t)v191 >= v192)
    {
      v193 = (uint64_t *)v189[124];
      v194 = v191 - v193;
      if ((unint64_t)(v194 + 1) >> 61)
        goto LABEL_442;
      v195 = v192 - (_QWORD)v193;
      v196 = (uint64_t)(v192 - (_QWORD)v193) >> 2;
      if (v196 <= v194 + 1)
        v196 = v194 + 1;
      if (v195 >= 0x7FFFFFFFFFFFFFF8)
        v197 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v197 = v196;
      if (v197)
      {
        v198 = (char *)sub_40FC((uint64_t)(v189 + 126), v197);
        v191 = (uint64_t *)v189[125];
        v193 = (uint64_t *)v189[124];
      }
      else
      {
        v198 = 0;
      }
      v206 = (uint64_t *)&v198[8 * v194];
      v207 = &v198[8 * v197];
      *v206 = v190;
      v200 = v206 + 1;
      while (v191 != v193)
      {
        v208 = *--v191;
        *--v206 = v208;
      }
LABEL_277:
      v189[124] = v206;
      v189[125] = v200;
      v189[126] = v207;
      if (v193)
        operator delete(v193);
      goto LABEL_279;
    }
  }
  *v191 = v190;
  v200 = v191 + 1;
LABEL_279:
  v189[125] = v200;
LABEL_280:
  v210 = 1 << *(_DWORD *)(v3 + 48);
  if (v210 == 4)
  {
    v211 = *(_QWORD **)a1[1];
    v212 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    v213 = (uint64_t *)v211[128];
    v221 = v211[129];
    if ((unint64_t)v213 >= v221)
    {
      v215 = (uint64_t *)v211[127];
      v223 = v213 - v215;
      if ((unint64_t)(v223 + 1) >> 61)
        goto LABEL_442;
      v224 = v221 - (_QWORD)v215;
      v225 = (uint64_t)(v221 - (_QWORD)v215) >> 2;
      if (v225 <= v223 + 1)
        v225 = v223 + 1;
      if (v224 >= 0x7FFFFFFFFFFFFFF8)
        v226 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v226 = v225;
      if (v226)
      {
        v227 = (char *)sub_40FC((uint64_t)(v211 + 129), v226);
        v213 = (uint64_t *)v211[128];
        v215 = (uint64_t *)v211[127];
      }
      else
      {
        v227 = 0;
      }
      v228 = (uint64_t *)&v227[8 * v223];
      v229 = &v227[8 * v226];
      *v228 = v212;
      v222 = v228 + 1;
      while (v213 != v215)
      {
        v231 = *--v213;
        *--v228 = v231;
      }
      goto LABEL_309;
    }
  }
  else
  {
    if (v210 != 2)
      goto LABEL_312;
    v211 = *(_QWORD **)a1[1];
    v212 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    v213 = (uint64_t *)v211[128];
    v214 = v211[129];
    if ((unint64_t)v213 >= v214)
    {
      v215 = (uint64_t *)v211[127];
      v216 = v213 - v215;
      if ((unint64_t)(v216 + 1) >> 61)
        goto LABEL_442;
      v217 = v214 - (_QWORD)v215;
      v218 = (uint64_t)(v214 - (_QWORD)v215) >> 2;
      if (v218 <= v216 + 1)
        v218 = v216 + 1;
      if (v217 >= 0x7FFFFFFFFFFFFFF8)
        v219 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v219 = v218;
      if (v219)
      {
        v220 = (char *)sub_40FC((uint64_t)(v211 + 129), v219);
        v213 = (uint64_t *)v211[128];
        v215 = (uint64_t *)v211[127];
      }
      else
      {
        v220 = 0;
      }
      v228 = (uint64_t *)&v220[8 * v216];
      v229 = &v220[8 * v219];
      *v228 = v212;
      v222 = v228 + 1;
      while (v213 != v215)
      {
        v230 = *--v213;
        *--v228 = v230;
      }
LABEL_309:
      v211[127] = v228;
      v211[128] = v222;
      v211[129] = v229;
      if (v215)
        operator delete(v215);
      goto LABEL_311;
    }
  }
  *v213 = v212;
  v222 = v213 + 1;
LABEL_311:
  v211[128] = v222;
LABEL_312:
  v232 = 1 << *(_DWORD *)(v3 + 48);
  if (v232 == 2)
  {
    v233 = *(_QWORD **)a1[1];
    v234 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
    v235 = (uint64_t *)v233[131];
    v243 = v233[132];
    if ((unint64_t)v235 >= v243)
    {
      v237 = (uint64_t *)v233[130];
      v245 = v235 - v237;
      if ((unint64_t)(v245 + 1) >> 61)
        goto LABEL_442;
      v246 = v243 - (_QWORD)v237;
      v247 = (uint64_t)(v243 - (_QWORD)v237) >> 2;
      if (v247 <= v245 + 1)
        v247 = v245 + 1;
      if (v246 >= 0x7FFFFFFFFFFFFFF8)
        v248 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v248 = v247;
      if (v248)
      {
        v249 = (char *)sub_40FC((uint64_t)(v233 + 132), v248);
        v235 = (uint64_t *)v233[131];
        v237 = (uint64_t *)v233[130];
      }
      else
      {
        v249 = 0;
      }
      v250 = (uint64_t *)&v249[8 * v245];
      v251 = &v249[8 * v248];
      *v250 = v234;
      v244 = v250 + 1;
      while (v235 != v237)
      {
        v253 = *--v235;
        *--v250 = v253;
      }
      goto LABEL_341;
    }
  }
  else
  {
    if (v232 != 1)
      goto LABEL_344;
    v233 = *(_QWORD **)a1[1];
    v234 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
    v235 = (uint64_t *)v233[131];
    v236 = v233[132];
    if ((unint64_t)v235 >= v236)
    {
      v237 = (uint64_t *)v233[130];
      v238 = v235 - v237;
      if ((unint64_t)(v238 + 1) >> 61)
        goto LABEL_442;
      v239 = v236 - (_QWORD)v237;
      v240 = (uint64_t)(v236 - (_QWORD)v237) >> 2;
      if (v240 <= v238 + 1)
        v240 = v238 + 1;
      if (v239 >= 0x7FFFFFFFFFFFFFF8)
        v241 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v241 = v240;
      if (v241)
      {
        v242 = (char *)sub_40FC((uint64_t)(v233 + 132), v241);
        v235 = (uint64_t *)v233[131];
        v237 = (uint64_t *)v233[130];
      }
      else
      {
        v242 = 0;
      }
      v250 = (uint64_t *)&v242[8 * v238];
      v251 = &v242[8 * v241];
      *v250 = v234;
      v244 = v250 + 1;
      while (v235 != v237)
      {
        v252 = *--v235;
        *--v250 = v252;
      }
LABEL_341:
      v233[130] = v250;
      v233[131] = v244;
      v233[132] = v251;
      if (v237)
        operator delete(v237);
      goto LABEL_343;
    }
  }
  *v235 = v234;
  v244 = v235 + 1;
LABEL_343:
  v233[131] = v244;
LABEL_344:
  v254 = 1 << *(_DWORD *)(v3 + 48);
  if (v254 == 2)
  {
    v255 = *(_QWORD **)a1[1];
    v256 = *(_DWORD *)(a1[2] + 56) & 0xFFFFFLL;
    v257 = (uint64_t *)v255[134];
    v265 = v255[135];
    if ((unint64_t)v257 >= v265)
    {
      v259 = (uint64_t *)v255[133];
      v267 = v257 - v259;
      if ((unint64_t)(v267 + 1) >> 61)
        goto LABEL_442;
      v268 = v265 - (_QWORD)v259;
      v269 = (uint64_t)(v265 - (_QWORD)v259) >> 2;
      if (v269 <= v267 + 1)
        v269 = v267 + 1;
      if (v268 >= 0x7FFFFFFFFFFFFFF8)
        v270 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v270 = v269;
      if (v270)
      {
        v271 = (char *)sub_40FC((uint64_t)(v255 + 135), v270);
        v257 = (uint64_t *)v255[134];
        v259 = (uint64_t *)v255[133];
      }
      else
      {
        v271 = 0;
      }
      v272 = (uint64_t *)&v271[8 * v267];
      v273 = &v271[8 * v270];
      *v272 = v256;
      v266 = v272 + 1;
      while (v257 != v259)
      {
        v275 = *--v257;
        *--v272 = v275;
      }
      goto LABEL_373;
    }
  }
  else
  {
    if (v254 != 1)
      goto LABEL_376;
    v255 = *(_QWORD **)a1[1];
    v256 = *(_DWORD *)(a1[2] + 56) & 0xFFFFFLL;
    v257 = (uint64_t *)v255[134];
    v258 = v255[135];
    if ((unint64_t)v257 >= v258)
    {
      v259 = (uint64_t *)v255[133];
      v260 = v257 - v259;
      if ((unint64_t)(v260 + 1) >> 61)
        goto LABEL_442;
      v261 = v258 - (_QWORD)v259;
      v262 = (uint64_t)(v258 - (_QWORD)v259) >> 2;
      if (v262 <= v260 + 1)
        v262 = v260 + 1;
      if (v261 >= 0x7FFFFFFFFFFFFFF8)
        v263 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v263 = v262;
      if (v263)
      {
        v264 = (char *)sub_40FC((uint64_t)(v255 + 135), v263);
        v257 = (uint64_t *)v255[134];
        v259 = (uint64_t *)v255[133];
      }
      else
      {
        v264 = 0;
      }
      v272 = (uint64_t *)&v264[8 * v260];
      v273 = &v264[8 * v263];
      *v272 = v256;
      v266 = v272 + 1;
      while (v257 != v259)
      {
        v274 = *--v257;
        *--v272 = v274;
      }
LABEL_373:
      v255[133] = v272;
      v255[134] = v266;
      v255[135] = v273;
      if (v259)
        operator delete(v259);
      goto LABEL_375;
    }
  }
  *v257 = v256;
  v266 = v257 + 1;
LABEL_375:
  v255[134] = v266;
LABEL_376:
  v276 = 1 << *(_DWORD *)(v3 + 48);
  if (v276 == 2)
  {
    v288 = a1[1];
    v278 = *(_QWORD **)v288;
    v279 = *(unsigned __int16 *)(a1[2] + 60);
    v280 = *(char **)(*(_QWORD *)v288 + 1096);
    v289 = *(_QWORD *)(*(_QWORD *)v288 + 1104);
    if ((unint64_t)v280 >= v289)
    {
      v282 = (char *)v278[136];
      v291 = (v280 - v282) >> 3;
      if ((unint64_t)(v291 + 1) >> 61)
        goto LABEL_442;
      v292 = v289 - (_QWORD)v282;
      v293 = (uint64_t)(v289 - (_QWORD)v282) >> 2;
      if (v293 <= v291 + 1)
        v293 = v291 + 1;
      if (v292 >= 0x7FFFFFFFFFFFFFF8)
        v294 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v294 = v293;
      if (v294)
      {
        v295 = (char *)sub_40FC((uint64_t)(v278 + 138), v294);
        v280 = (char *)v278[137];
        v282 = (char *)v278[136];
      }
      else
      {
        v295 = 0;
      }
      v296 = &v295[8 * v291];
      v297 = &v295[8 * v294];
      *(_QWORD *)v296 = v279;
      v290 = v296 + 8;
      while (v280 != v282)
      {
        v299 = *((_QWORD *)v280 - 1);
        v280 -= 8;
        *((_QWORD *)v296 - 1) = v299;
        v296 -= 8;
      }
      goto LABEL_405;
    }
  }
  else
  {
    if (v276 != 1)
      goto LABEL_408;
    v277 = a1[1];
    v278 = *(_QWORD **)v277;
    v279 = *(unsigned __int16 *)(a1[2] + 60);
    v280 = *(char **)(*(_QWORD *)v277 + 1096);
    v281 = *(_QWORD *)(*(_QWORD *)v277 + 1104);
    if ((unint64_t)v280 >= v281)
    {
      v282 = (char *)v278[136];
      v283 = (v280 - v282) >> 3;
      if ((unint64_t)(v283 + 1) >> 61)
        goto LABEL_442;
      v284 = v281 - (_QWORD)v282;
      v285 = (uint64_t)(v281 - (_QWORD)v282) >> 2;
      if (v285 <= v283 + 1)
        v285 = v283 + 1;
      if (v284 >= 0x7FFFFFFFFFFFFFF8)
        v286 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v286 = v285;
      if (v286)
      {
        v287 = (char *)sub_40FC((uint64_t)(v278 + 138), v286);
        v280 = (char *)v278[137];
        v282 = (char *)v278[136];
      }
      else
      {
        v287 = 0;
      }
      v296 = &v287[8 * v283];
      v297 = &v287[8 * v286];
      *(_QWORD *)v296 = v279;
      v290 = v296 + 8;
      while (v280 != v282)
      {
        v298 = *((_QWORD *)v280 - 1);
        v280 -= 8;
        *((_QWORD *)v296 - 1) = v298;
        v296 -= 8;
      }
LABEL_405:
      v278[136] = v296;
      v278[137] = v290;
      v278[138] = v297;
      if (v282)
        operator delete(v282);
      goto LABEL_407;
    }
  }
  *(_QWORD *)v280 = v279;
  v290 = v280 + 8;
LABEL_407:
  v278[137] = v290;
LABEL_408:
  v300 = 1 << *(_DWORD *)(v3 + 48);
  if (v300 == 2)
  {
    v312 = a1[2];
    v302 = *(_QWORD **)a1[1];
    v303 = *(_DWORD *)(v312 + 52) & 0xFFFFFLL;
    v304 = (uint64_t *)v302[140];
    v313 = v302[141];
    if ((unint64_t)v304 >= v313)
    {
      v306 = (uint64_t *)v302[139];
      v315 = v304 - v306;
      if (!((unint64_t)(v315 + 1) >> 61))
      {
        v316 = v313 - (_QWORD)v306;
        v317 = (uint64_t)(v313 - (_QWORD)v306) >> 2;
        if (v317 <= v315 + 1)
          v317 = v315 + 1;
        if (v316 >= 0x7FFFFFFFFFFFFFF8)
          v318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v318 = v317;
        if (v318)
        {
          v319 = (char *)sub_40FC((uint64_t)(v302 + 141), v318);
          v304 = (uint64_t *)v302[140];
          v306 = (uint64_t *)v302[139];
        }
        else
        {
          v319 = 0;
        }
        v320 = (uint64_t *)&v319[8 * v315];
        v321 = &v319[8 * v318];
        *v320 = v303;
        v314 = v320 + 1;
        while (v304 != v306)
        {
          v323 = *--v304;
          *--v320 = v323;
        }
        goto LABEL_437;
      }
LABEL_442:
      sub_4074();
    }
LABEL_420:
    *v304 = v303;
    v314 = v304 + 1;
LABEL_439:
    v302[140] = v314;
    goto LABEL_440;
  }
  if (v300 == 1)
  {
    v301 = a1[2];
    v302 = *(_QWORD **)a1[1];
    v303 = *(_DWORD *)(v301 + 52) & 0xFFFFFLL;
    v304 = (uint64_t *)v302[140];
    v305 = v302[141];
    if ((unint64_t)v304 >= v305)
    {
      v306 = (uint64_t *)v302[139];
      v307 = v304 - v306;
      if (!((unint64_t)(v307 + 1) >> 61))
      {
        v308 = v305 - (_QWORD)v306;
        v309 = (uint64_t)(v305 - (_QWORD)v306) >> 2;
        if (v309 <= v307 + 1)
          v309 = v307 + 1;
        if (v308 >= 0x7FFFFFFFFFFFFFF8)
          v310 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v310 = v309;
        if (v310)
        {
          v311 = (char *)sub_40FC((uint64_t)(v302 + 141), v310);
          v304 = (uint64_t *)v302[140];
          v306 = (uint64_t *)v302[139];
        }
        else
        {
          v311 = 0;
        }
        v320 = (uint64_t *)&v311[8 * v307];
        v321 = &v311[8 * v310];
        *v320 = v303;
        v314 = v320 + 1;
        while (v304 != v306)
        {
          v322 = *--v304;
          *--v320 = v322;
        }
LABEL_437:
        v302[139] = v320;
        v302[140] = v314;
        v302[141] = v321;
        if (v306)
          operator delete(v306);
        goto LABEL_439;
      }
      goto LABEL_442;
    }
    goto LABEL_420;
  }
LABEL_440:
  *a2 = 1;
}

void sub_14C498(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  unsigned int *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[773];
      v19 = v6[774];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[772];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_136;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 774), v24);
          v8 = (uint64_t *)v6[773];
          v10 = (uint64_t *)v6[772];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[773];
      v9 = v6[774];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[772];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_136;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 774), v14);
          v8 = (uint64_t *)v6[773];
          v10 = (uint64_t *)v6[772];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[772] = v26;
        v6[773] = v20;
        v6[774] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[773] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[776];
      v41 = v31[777];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[775];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_136;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 777), v46);
          v33 = (uint64_t *)v31[776];
          v35 = (uint64_t *)v31[775];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[776];
      v34 = v31[777];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[775];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_136;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 777), v39);
          v33 = (uint64_t *)v31[776];
          v35 = (uint64_t *)v31[775];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[775] = v48;
        v31[776] = v42;
        v31[777] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[776] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[779];
      v63 = v53[780];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[778];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_136;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 780), v68);
          v55 = (uint64_t *)v53[779];
          v57 = (uint64_t *)v53[778];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[779];
      v56 = v53[780];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[778];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_136;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 780), v61);
          v55 = (uint64_t *)v53[779];
          v57 = (uint64_t *)v53[778];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[778] = v70;
        v53[779] = v64;
        v53[780] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[779] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v86 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = ((unint64_t)*(unsigned int *)(v86 + 24) >> 1) & 0x7FFFF;
      v78 = (unint64_t *)v76[782];
      v87 = v76[783];
      if ((unint64_t)v78 >= v87)
      {
        v80 = (unint64_t *)v76[781];
        v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          v90 = v87 - (_QWORD)v80;
          v91 = (uint64_t)(v87 - (_QWORD)v80) >> 2;
          if (v91 <= v89 + 1)
            v91 = v89 + 1;
          if (v90 >= 0x7FFFFFFFFFFFFFF8)
            v92 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v92 = v91;
          if (v92)
          {
            v93 = (char *)sub_40FC((uint64_t)(v76 + 783), v92);
            v78 = (unint64_t *)v76[782];
            v80 = (unint64_t *)v76[781];
          }
          else
          {
            v93 = 0;
          }
          v94 = (unint64_t *)&v93[8 * v89];
          v95 = &v93[8 * v92];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v97 = *--v78;
            *--v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_4074();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      v75 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = ((unint64_t)*(unsigned int *)(v75 + 24) >> 1) & 0x7FFFF;
      v78 = (unint64_t *)v76[782];
      v79 = v76[783];
      if ((unint64_t)v78 >= v79)
      {
        v80 = (unint64_t *)v76[781];
        v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          v82 = v79 - (_QWORD)v80;
          v83 = (uint64_t)(v79 - (_QWORD)v80) >> 2;
          if (v83 <= v81 + 1)
            v83 = v81 + 1;
          if (v82 >= 0x7FFFFFFFFFFFFFF8)
            v84 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            v85 = (char *)sub_40FC((uint64_t)(v76 + 783), v84);
            v78 = (unint64_t *)v76[782];
            v80 = (unint64_t *)v76[781];
          }
          else
          {
            v85 = 0;
          }
          v94 = (unint64_t *)&v85[8 * v81];
          v95 = &v85[8 * v84];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v96 = *--v78;
            *--v94 = v96;
          }
LABEL_131:
          v76[781] = v94;
          v76[782] = v88;
          v76[783] = v95;
          if (v80)
            operator delete(v80);
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *v78 = v77;
    v88 = v78 + 1;
LABEL_133:
    v76[782] = v88;
    goto LABEL_134;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = (unsigned int *)a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[773] - 8) += v17[9] & 0xFFFFF;
    *(_QWORD *)(v18[776] - 8) += v17[7] & 0x1FFFF;
    *(_QWORD *)(v18[779] - 8) += v17[8] & 0xFFFFF;
    *(_QWORD *)(v18[782] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
  }
}

void sub_14CBB4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  unsigned int *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  uint64_t *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t *v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  uint64_t *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t *v344;
  unint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  uint64_t *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t *v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  char *v380;
  uint64_t *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t *v388;
  unint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  unint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  uint64_t *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t *v410;
  unint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  unint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  char *v424;
  uint64_t *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t *v433;
  unint64_t v434;
  uint64_t *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  char *v440;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  uint64_t *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[656];
      v22 = v6[657];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (uint64_t *)v6[655];
        v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_648;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 657), v27);
          v8 = (uint64_t *)v6[656];
          v10 = (uint64_t *)v6[655];
        }
        else
        {
          v28 = 0;
        }
        v29 = (uint64_t *)&v28[8 * v24];
        v30 = &v28[8 * v27];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v32 = *--v8;
          *--v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[656];
      v9 = v6[657];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[655];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_648;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 657), v14);
          v8 = (uint64_t *)v6[656];
          v10 = (uint64_t *)v6[655];
        }
        else
        {
          v15 = 0;
        }
        v29 = (uint64_t *)&v15[8 * v11];
        v30 = &v15[8 * v14];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v31 = *--v8;
          *--v29 = v31;
        }
LABEL_35:
        v6[655] = v29;
        v6[656] = v23;
        v6[657] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v23 = v8 + 1;
LABEL_37:
    v6[656] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[659];
      v44 = v34[660];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (uint64_t *)v34[658];
        v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_648;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 660), v49);
          v36 = (uint64_t *)v34[659];
          v38 = (uint64_t *)v34[658];
        }
        else
        {
          v50 = 0;
        }
        v51 = (uint64_t *)&v50[8 * v46];
        v52 = &v50[8 * v49];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v54 = *--v36;
          *--v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[659];
      v37 = v34[660];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (uint64_t *)v34[658];
        v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_648;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 660), v42);
          v36 = (uint64_t *)v34[659];
          v38 = (uint64_t *)v34[658];
        }
        else
        {
          v43 = 0;
        }
        v51 = (uint64_t *)&v43[8 * v39];
        v52 = &v43[8 * v42];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v53 = *--v36;
          *--v51 = v53;
        }
LABEL_67:
        v34[658] = v51;
        v34[659] = v45;
        v34[660] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *v36 = v35;
    v45 = v36 + 1;
LABEL_69:
    v34[659] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      v58 = (unint64_t *)v56[662];
      v66 = v56[663];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (unint64_t *)v56[661];
        v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_648;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 663), v71);
          v58 = (unint64_t *)v56[662];
          v60 = (unint64_t *)v56[661];
        }
        else
        {
          v72 = 0;
        }
        v73 = (unint64_t *)&v72[8 * v68];
        v74 = &v72[8 * v71];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v76 = *--v58;
          *--v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      v58 = (unint64_t *)v56[662];
      v59 = v56[663];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (unint64_t *)v56[661];
        v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_648;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 663), v64);
          v58 = (unint64_t *)v56[662];
          v60 = (unint64_t *)v56[661];
        }
        else
        {
          v65 = 0;
        }
        v73 = (unint64_t *)&v65[8 * v61];
        v74 = &v65[8 * v64];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v75 = *--v58;
          *--v73 = v75;
        }
LABEL_99:
        v56[661] = v73;
        v56[662] = v67;
        v56[663] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *v58 = v57;
    v67 = v58 + 1;
LABEL_101:
    v56[662] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v80 = (uint64_t *)v78[665];
      v88 = v78[666];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (uint64_t *)v78[664];
        v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_648;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 666), v93);
          v80 = (uint64_t *)v78[665];
          v82 = (uint64_t *)v78[664];
        }
        else
        {
          v94 = 0;
        }
        v95 = (uint64_t *)&v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v98 = *--v80;
          *--v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v80 = (uint64_t *)v78[665];
      v81 = v78[666];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (uint64_t *)v78[664];
        v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_648;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 666), v86);
          v80 = (uint64_t *)v78[665];
          v82 = (uint64_t *)v78[664];
        }
        else
        {
          v87 = 0;
        }
        v95 = (uint64_t *)&v87[8 * v83];
        v96 = &v87[8 * v86];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v97 = *--v80;
          *--v95 = v97;
        }
LABEL_131:
        v78[664] = v95;
        v78[665] = v89;
        v78[666] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *v80 = v79;
    v89 = v80 + 1;
LABEL_133:
    v78[665] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[668];
      v110 = v100[669];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[667];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_648;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 669), v115);
          v102 = (uint64_t *)v100[668];
          v104 = (uint64_t *)v100[667];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[668];
      v103 = v100[669];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[667];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_648;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 669), v108);
          v102 = (uint64_t *)v100[668];
          v104 = (uint64_t *)v100[667];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[667] = v117;
        v100[668] = v111;
        v100[669] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[668] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v124 = (uint64_t *)v122[671];
      v132 = v122[672];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (uint64_t *)v122[670];
        v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_648;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 672), v137);
          v124 = (uint64_t *)v122[671];
          v126 = (uint64_t *)v122[670];
        }
        else
        {
          v138 = 0;
        }
        v139 = (uint64_t *)&v138[8 * v134];
        v140 = &v138[8 * v137];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v142 = *--v124;
          *--v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v124 = (uint64_t *)v122[671];
      v125 = v122[672];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (uint64_t *)v122[670];
        v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_648;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 672), v130);
          v124 = (uint64_t *)v122[671];
          v126 = (uint64_t *)v122[670];
        }
        else
        {
          v131 = 0;
        }
        v139 = (uint64_t *)&v131[8 * v127];
        v140 = &v131[8 * v130];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v141 = *--v124;
          *--v139 = v141;
        }
LABEL_195:
        v122[670] = v139;
        v122[671] = v133;
        v122[672] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *v124 = v123;
    v133 = v124 + 1;
LABEL_197:
    v122[671] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[674];
      v154 = v144[675];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (uint64_t *)v144[673];
        v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_648;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 675), v159);
          v146 = (uint64_t *)v144[674];
          v148 = (uint64_t *)v144[673];
        }
        else
        {
          v160 = 0;
        }
        v161 = (uint64_t *)&v160[8 * v156];
        v162 = &v160[8 * v159];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v164 = *--v146;
          *--v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[674];
      v147 = v144[675];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (uint64_t *)v144[673];
        v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_648;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 675), v152);
          v146 = (uint64_t *)v144[674];
          v148 = (uint64_t *)v144[673];
        }
        else
        {
          v153 = 0;
        }
        v161 = (uint64_t *)&v153[8 * v149];
        v162 = &v153[8 * v152];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v163 = *--v146;
          *--v161 = v163;
        }
LABEL_227:
        v144[673] = v161;
        v144[674] = v155;
        v144[675] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *v146 = v145;
    v155 = v146 + 1;
LABEL_229:
    v144[674] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      v168 = (uint64_t *)v166[677];
      v176 = v166[678];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (uint64_t *)v166[676];
        v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_648;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 678), v181);
          v168 = (uint64_t *)v166[677];
          v170 = (uint64_t *)v166[676];
        }
        else
        {
          v182 = 0;
        }
        v183 = (uint64_t *)&v182[8 * v178];
        v184 = &v182[8 * v181];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v186 = *--v168;
          *--v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      v168 = (uint64_t *)v166[677];
      v169 = v166[678];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (uint64_t *)v166[676];
        v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_648;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 678), v174);
          v168 = (uint64_t *)v166[677];
          v170 = (uint64_t *)v166[676];
        }
        else
        {
          v175 = 0;
        }
        v183 = (uint64_t *)&v175[8 * v171];
        v184 = &v175[8 * v174];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v185 = *--v168;
          *--v183 = v185;
        }
LABEL_259:
        v166[676] = v183;
        v166[677] = v177;
        v166[678] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *v168 = v167;
    v177 = v168 + 1;
LABEL_261:
    v166[677] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[680];
      v198 = v188[681];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (uint64_t *)v188[679];
        v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_648;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 681), v203);
          v190 = (uint64_t *)v188[680];
          v192 = (uint64_t *)v188[679];
        }
        else
        {
          v204 = 0;
        }
        v205 = (uint64_t *)&v204[8 * v200];
        v206 = &v204[8 * v203];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v208 = *--v190;
          *--v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[680];
      v191 = v188[681];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (uint64_t *)v188[679];
        v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_648;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 681), v196);
          v190 = (uint64_t *)v188[680];
          v192 = (uint64_t *)v188[679];
        }
        else
        {
          v197 = 0;
        }
        v205 = (uint64_t *)&v197[8 * v193];
        v206 = &v197[8 * v196];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v207 = *--v190;
          *--v205 = v207;
        }
LABEL_291:
        v188[679] = v205;
        v188[680] = v199;
        v188[681] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *v190 = v189;
    v199 = v190 + 1;
LABEL_293:
    v188[680] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      v212 = (uint64_t *)v210[683];
      v220 = v210[684];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (uint64_t *)v210[682];
        v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_648;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 684), v225);
          v212 = (uint64_t *)v210[683];
          v214 = (uint64_t *)v210[682];
        }
        else
        {
          v226 = 0;
        }
        v227 = (uint64_t *)&v226[8 * v222];
        v228 = &v226[8 * v225];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v230 = *--v212;
          *--v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      v212 = (uint64_t *)v210[683];
      v213 = v210[684];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (uint64_t *)v210[682];
        v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_648;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 684), v218);
          v212 = (uint64_t *)v210[683];
          v214 = (uint64_t *)v210[682];
        }
        else
        {
          v219 = 0;
        }
        v227 = (uint64_t *)&v219[8 * v215];
        v228 = &v219[8 * v218];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v229 = *--v212;
          *--v227 = v229;
        }
LABEL_323:
        v210[682] = v227;
        v210[683] = v221;
        v210[684] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *v212 = v211;
    v221 = v212 + 1;
LABEL_325:
    v210[683] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[686];
      v242 = v232[687];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (uint64_t *)v232[685];
        v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_648;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 687), v247);
          v234 = (uint64_t *)v232[686];
          v236 = (uint64_t *)v232[685];
        }
        else
        {
          v248 = 0;
        }
        v249 = (uint64_t *)&v248[8 * v244];
        v250 = &v248[8 * v247];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v252 = *--v234;
          *--v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[686];
      v235 = v232[687];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (uint64_t *)v232[685];
        v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_648;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 687), v240);
          v234 = (uint64_t *)v232[686];
          v236 = (uint64_t *)v232[685];
        }
        else
        {
          v241 = 0;
        }
        v249 = (uint64_t *)&v241[8 * v237];
        v250 = &v241[8 * v240];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v251 = *--v234;
          *--v249 = v251;
        }
LABEL_355:
        v232[685] = v249;
        v232[686] = v243;
        v232[687] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *v234 = v233;
    v243 = v234 + 1;
LABEL_357:
    v232[686] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      v256 = (uint64_t *)v254[689];
      v264 = v254[690];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (uint64_t *)v254[688];
        v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_648;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 690), v269);
          v256 = (uint64_t *)v254[689];
          v258 = (uint64_t *)v254[688];
        }
        else
        {
          v270 = 0;
        }
        v271 = (uint64_t *)&v270[8 * v266];
        v272 = &v270[8 * v269];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v274 = *--v256;
          *--v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      v256 = (uint64_t *)v254[689];
      v257 = v254[690];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (uint64_t *)v254[688];
        v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_648;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 690), v262);
          v256 = (uint64_t *)v254[689];
          v258 = (uint64_t *)v254[688];
        }
        else
        {
          v263 = 0;
        }
        v271 = (uint64_t *)&v263[8 * v259];
        v272 = &v263[8 * v262];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v273 = *--v256;
          *--v271 = v273;
        }
LABEL_387:
        v254[688] = v271;
        v254[689] = v265;
        v254[690] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *v256 = v255;
    v265 = v256 + 1;
LABEL_389:
    v254[689] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[692];
      v286 = v276[693];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (uint64_t *)v276[691];
        v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_648;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 693), v291);
          v278 = (uint64_t *)v276[692];
          v280 = (uint64_t *)v276[691];
        }
        else
        {
          v292 = 0;
        }
        v293 = (uint64_t *)&v292[8 * v288];
        v294 = &v292[8 * v291];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v296 = *--v278;
          *--v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[692];
      v279 = v276[693];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (uint64_t *)v276[691];
        v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_648;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 693), v284);
          v278 = (uint64_t *)v276[692];
          v280 = (uint64_t *)v276[691];
        }
        else
        {
          v285 = 0;
        }
        v293 = (uint64_t *)&v285[8 * v281];
        v294 = &v285[8 * v284];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v295 = *--v278;
          *--v293 = v295;
        }
LABEL_419:
        v276[691] = v293;
        v276[692] = v287;
        v276[693] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *v278 = v277;
    v287 = v278 + 1;
LABEL_421:
    v276[692] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v300 = (uint64_t *)v298[695];
      v308 = v298[696];
      if ((unint64_t)v300 >= v308)
      {
        v302 = (uint64_t *)v298[694];
        v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61)
          goto LABEL_648;
        v311 = v308 - (_QWORD)v302;
        v312 = (uint64_t)(v308 - (_QWORD)v302) >> 2;
        if (v312 <= v310 + 1)
          v312 = v310 + 1;
        if (v311 >= 0x7FFFFFFFFFFFFFF8)
          v313 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v313 = v312;
        if (v313)
        {
          v314 = (char *)sub_40FC((uint64_t)(v298 + 696), v313);
          v300 = (uint64_t *)v298[695];
          v302 = (uint64_t *)v298[694];
        }
        else
        {
          v314 = 0;
        }
        v315 = (uint64_t *)&v314[8 * v310];
        v316 = &v314[8 * v313];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v318 = *--v300;
          *--v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1)
        goto LABEL_454;
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v300 = (uint64_t *)v298[695];
      v301 = v298[696];
      if ((unint64_t)v300 >= v301)
      {
        v302 = (uint64_t *)v298[694];
        v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61)
          goto LABEL_648;
        v304 = v301 - (_QWORD)v302;
        v305 = (uint64_t)(v301 - (_QWORD)v302) >> 2;
        if (v305 <= v303 + 1)
          v305 = v303 + 1;
        if (v304 >= 0x7FFFFFFFFFFFFFF8)
          v306 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v306 = v305;
        if (v306)
        {
          v307 = (char *)sub_40FC((uint64_t)(v298 + 696), v306);
          v300 = (uint64_t *)v298[695];
          v302 = (uint64_t *)v298[694];
        }
        else
        {
          v307 = 0;
        }
        v315 = (uint64_t *)&v307[8 * v303];
        v316 = &v307[8 * v306];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v317 = *--v300;
          *--v315 = v317;
        }
LABEL_451:
        v298[694] = v315;
        v298[695] = v309;
        v298[696] = v316;
        if (v302)
          operator delete(v302);
        goto LABEL_453;
      }
    }
    *v300 = v299;
    v309 = v300 + 1;
LABEL_453:
    v298[695] = v309;
LABEL_454:
    v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[698];
      v330 = v320[699];
      if ((unint64_t)v322 >= v330)
      {
        v324 = (uint64_t *)v320[697];
        v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_648;
        v333 = v330 - (_QWORD)v324;
        v334 = (uint64_t)(v330 - (_QWORD)v324) >> 2;
        if (v334 <= v332 + 1)
          v334 = v332 + 1;
        if (v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
        {
          v336 = (char *)sub_40FC((uint64_t)(v320 + 699), v335);
          v322 = (uint64_t *)v320[698];
          v324 = (uint64_t *)v320[697];
        }
        else
        {
          v336 = 0;
        }
        v337 = (uint64_t *)&v336[8 * v332];
        v338 = &v336[8 * v335];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v340 = *--v322;
          *--v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1)
        goto LABEL_486;
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[698];
      v323 = v320[699];
      if ((unint64_t)v322 >= v323)
      {
        v324 = (uint64_t *)v320[697];
        v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61)
          goto LABEL_648;
        v326 = v323 - (_QWORD)v324;
        v327 = (uint64_t)(v323 - (_QWORD)v324) >> 2;
        if (v327 <= v325 + 1)
          v327 = v325 + 1;
        if (v326 >= 0x7FFFFFFFFFFFFFF8)
          v328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v328 = v327;
        if (v328)
        {
          v329 = (char *)sub_40FC((uint64_t)(v320 + 699), v328);
          v322 = (uint64_t *)v320[698];
          v324 = (uint64_t *)v320[697];
        }
        else
        {
          v329 = 0;
        }
        v337 = (uint64_t *)&v329[8 * v325];
        v338 = &v329[8 * v328];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v339 = *--v322;
          *--v337 = v339;
        }
LABEL_483:
        v320[697] = v337;
        v320[698] = v331;
        v320[699] = v338;
        if (v324)
          operator delete(v324);
        goto LABEL_485;
      }
    }
    *v322 = v321;
    v331 = v322 + 1;
LABEL_485:
    v320[698] = v331;
LABEL_486:
    v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      v342 = *(_QWORD **)a1[1];
      v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v344 = (uint64_t *)v342[701];
      v352 = v342[702];
      if ((unint64_t)v344 >= v352)
      {
        v346 = (uint64_t *)v342[700];
        v354 = v344 - v346;
        if ((unint64_t)(v354 + 1) >> 61)
          goto LABEL_648;
        v355 = v352 - (_QWORD)v346;
        v356 = (uint64_t)(v352 - (_QWORD)v346) >> 2;
        if (v356 <= v354 + 1)
          v356 = v354 + 1;
        if (v355 >= 0x7FFFFFFFFFFFFFF8)
          v357 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v357 = v356;
        if (v357)
        {
          v358 = (char *)sub_40FC((uint64_t)(v342 + 702), v357);
          v344 = (uint64_t *)v342[701];
          v346 = (uint64_t *)v342[700];
        }
        else
        {
          v358 = 0;
        }
        v359 = (uint64_t *)&v358[8 * v354];
        v360 = &v358[8 * v357];
        *v359 = v343;
        v353 = v359 + 1;
        while (v344 != v346)
        {
          v362 = *--v344;
          *--v359 = v362;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1)
        goto LABEL_518;
      v342 = *(_QWORD **)a1[1];
      v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v344 = (uint64_t *)v342[701];
      v345 = v342[702];
      if ((unint64_t)v344 >= v345)
      {
        v346 = (uint64_t *)v342[700];
        v347 = v344 - v346;
        if ((unint64_t)(v347 + 1) >> 61)
          goto LABEL_648;
        v348 = v345 - (_QWORD)v346;
        v349 = (uint64_t)(v345 - (_QWORD)v346) >> 2;
        if (v349 <= v347 + 1)
          v349 = v347 + 1;
        if (v348 >= 0x7FFFFFFFFFFFFFF8)
          v350 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v350 = v349;
        if (v350)
        {
          v351 = (char *)sub_40FC((uint64_t)(v342 + 702), v350);
          v344 = (uint64_t *)v342[701];
          v346 = (uint64_t *)v342[700];
        }
        else
        {
          v351 = 0;
        }
        v359 = (uint64_t *)&v351[8 * v347];
        v360 = &v351[8 * v350];
        *v359 = v343;
        v353 = v359 + 1;
        while (v344 != v346)
        {
          v361 = *--v344;
          *--v359 = v361;
        }
LABEL_515:
        v342[700] = v359;
        v342[701] = v353;
        v342[702] = v360;
        if (v346)
          operator delete(v346);
        goto LABEL_517;
      }
    }
    *v344 = v343;
    v353 = v344 + 1;
LABEL_517:
    v342[701] = v353;
LABEL_518:
    v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[704];
      v374 = v364[705];
      if ((unint64_t)v366 >= v374)
      {
        v368 = (uint64_t *)v364[703];
        v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61)
          goto LABEL_648;
        v377 = v374 - (_QWORD)v368;
        v378 = (uint64_t)(v374 - (_QWORD)v368) >> 2;
        if (v378 <= v376 + 1)
          v378 = v376 + 1;
        if (v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
        {
          v380 = (char *)sub_40FC((uint64_t)(v364 + 705), v379);
          v366 = (uint64_t *)v364[704];
          v368 = (uint64_t *)v364[703];
        }
        else
        {
          v380 = 0;
        }
        v381 = (uint64_t *)&v380[8 * v376];
        v382 = &v380[8 * v379];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v384 = *--v366;
          *--v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1)
        goto LABEL_550;
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[704];
      v367 = v364[705];
      if ((unint64_t)v366 >= v367)
      {
        v368 = (uint64_t *)v364[703];
        v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61)
          goto LABEL_648;
        v370 = v367 - (_QWORD)v368;
        v371 = (uint64_t)(v367 - (_QWORD)v368) >> 2;
        if (v371 <= v369 + 1)
          v371 = v369 + 1;
        if (v370 >= 0x7FFFFFFFFFFFFFF8)
          v372 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v372 = v371;
        if (v372)
        {
          v373 = (char *)sub_40FC((uint64_t)(v364 + 705), v372);
          v366 = (uint64_t *)v364[704];
          v368 = (uint64_t *)v364[703];
        }
        else
        {
          v373 = 0;
        }
        v381 = (uint64_t *)&v373[8 * v369];
        v382 = &v373[8 * v372];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v383 = *--v366;
          *--v381 = v383;
        }
LABEL_547:
        v364[703] = v381;
        v364[704] = v375;
        v364[705] = v382;
        if (v368)
          operator delete(v368);
        goto LABEL_549;
      }
    }
    *v366 = v365;
    v375 = v366 + 1;
LABEL_549:
    v364[704] = v375;
LABEL_550:
    v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      v386 = *(_QWORD **)a1[1];
      v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      v388 = (uint64_t *)v386[707];
      v396 = v386[708];
      if ((unint64_t)v388 >= v396)
      {
        v390 = (uint64_t *)v386[706];
        v398 = v388 - v390;
        if ((unint64_t)(v398 + 1) >> 61)
          goto LABEL_648;
        v399 = v396 - (_QWORD)v390;
        v400 = (uint64_t)(v396 - (_QWORD)v390) >> 2;
        if (v400 <= v398 + 1)
          v400 = v398 + 1;
        if (v399 >= 0x7FFFFFFFFFFFFFF8)
          v401 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v401 = v400;
        if (v401)
        {
          v402 = (char *)sub_40FC((uint64_t)(v386 + 708), v401);
          v388 = (uint64_t *)v386[707];
          v390 = (uint64_t *)v386[706];
        }
        else
        {
          v402 = 0;
        }
        v403 = (uint64_t *)&v402[8 * v398];
        v404 = &v402[8 * v401];
        *v403 = v387;
        v397 = v403 + 1;
        while (v388 != v390)
        {
          v406 = *--v388;
          *--v403 = v406;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1)
        goto LABEL_582;
      v386 = *(_QWORD **)a1[1];
      v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      v388 = (uint64_t *)v386[707];
      v389 = v386[708];
      if ((unint64_t)v388 >= v389)
      {
        v390 = (uint64_t *)v386[706];
        v391 = v388 - v390;
        if ((unint64_t)(v391 + 1) >> 61)
          goto LABEL_648;
        v392 = v389 - (_QWORD)v390;
        v393 = (uint64_t)(v389 - (_QWORD)v390) >> 2;
        if (v393 <= v391 + 1)
          v393 = v391 + 1;
        if (v392 >= 0x7FFFFFFFFFFFFFF8)
          v394 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v394 = v393;
        if (v394)
        {
          v395 = (char *)sub_40FC((uint64_t)(v386 + 708), v394);
          v388 = (uint64_t *)v386[707];
          v390 = (uint64_t *)v386[706];
        }
        else
        {
          v395 = 0;
        }
        v403 = (uint64_t *)&v395[8 * v391];
        v404 = &v395[8 * v394];
        *v403 = v387;
        v397 = v403 + 1;
        while (v388 != v390)
        {
          v405 = *--v388;
          *--v403 = v405;
        }
LABEL_579:
        v386[706] = v403;
        v386[707] = v397;
        v386[708] = v404;
        if (v390)
          operator delete(v390);
        goto LABEL_581;
      }
    }
    *v388 = v387;
    v397 = v388 + 1;
LABEL_581:
    v386[707] = v397;
LABEL_582:
    v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      v408 = *(_QWORD **)a1[1];
      v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v410 = (uint64_t *)v408[710];
      v418 = v408[711];
      if ((unint64_t)v410 >= v418)
      {
        v412 = (uint64_t *)v408[709];
        v420 = v410 - v412;
        if ((unint64_t)(v420 + 1) >> 61)
          goto LABEL_648;
        v421 = v418 - (_QWORD)v412;
        v422 = (uint64_t)(v418 - (_QWORD)v412) >> 2;
        if (v422 <= v420 + 1)
          v422 = v420 + 1;
        if (v421 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v422;
        if (v423)
        {
          v424 = (char *)sub_40FC((uint64_t)(v408 + 711), v423);
          v410 = (uint64_t *)v408[710];
          v412 = (uint64_t *)v408[709];
        }
        else
        {
          v424 = 0;
        }
        v425 = (uint64_t *)&v424[8 * v420];
        v426 = &v424[8 * v423];
        *v425 = v409;
        v419 = v425 + 1;
        while (v410 != v412)
        {
          v428 = *--v410;
          *--v425 = v428;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v407 != 1)
        goto LABEL_614;
      v408 = *(_QWORD **)a1[1];
      v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v410 = (uint64_t *)v408[710];
      v411 = v408[711];
      if ((unint64_t)v410 >= v411)
      {
        v412 = (uint64_t *)v408[709];
        v413 = v410 - v412;
        if ((unint64_t)(v413 + 1) >> 61)
          goto LABEL_648;
        v414 = v411 - (_QWORD)v412;
        v415 = (uint64_t)(v411 - (_QWORD)v412) >> 2;
        if (v415 <= v413 + 1)
          v415 = v413 + 1;
        if (v414 >= 0x7FFFFFFFFFFFFFF8)
          v416 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v416 = v415;
        if (v416)
        {
          v417 = (char *)sub_40FC((uint64_t)(v408 + 711), v416);
          v410 = (uint64_t *)v408[710];
          v412 = (uint64_t *)v408[709];
        }
        else
        {
          v417 = 0;
        }
        v425 = (uint64_t *)&v417[8 * v413];
        v426 = &v417[8 * v416];
        *v425 = v409;
        v419 = v425 + 1;
        while (v410 != v412)
        {
          v427 = *--v410;
          *--v425 = v427;
        }
LABEL_611:
        v408[709] = v425;
        v408[710] = v419;
        v408[711] = v426;
        if (v412)
          operator delete(v412);
        goto LABEL_613;
      }
    }
    *v410 = v409;
    v419 = v410 + 1;
LABEL_613:
    v408[710] = v419;
LABEL_614:
    v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      v441 = a1[2];
      v431 = *(_QWORD **)a1[1];
      v432 = *(_DWORD *)(v441 + 100) & 0x7FFFFLL;
      v433 = (uint64_t *)v431[713];
      v442 = v431[714];
      if ((unint64_t)v433 >= v442)
      {
        v435 = (uint64_t *)v431[712];
        v444 = v433 - v435;
        if (!((unint64_t)(v444 + 1) >> 61))
        {
          v445 = v442 - (_QWORD)v435;
          v446 = (uint64_t)(v442 - (_QWORD)v435) >> 2;
          if (v446 <= v444 + 1)
            v446 = v444 + 1;
          if (v445 >= 0x7FFFFFFFFFFFFFF8)
            v447 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v447 = v446;
          if (v447)
          {
            v448 = (char *)sub_40FC((uint64_t)(v431 + 714), v447);
            v433 = (uint64_t *)v431[713];
            v435 = (uint64_t *)v431[712];
          }
          else
          {
            v448 = 0;
          }
          v449 = (uint64_t *)&v448[8 * v444];
          v450 = &v448[8 * v447];
          *v449 = v432;
          v443 = v449 + 1;
          while (v433 != v435)
          {
            v452 = *--v433;
            *--v449 = v452;
          }
          goto LABEL_643;
        }
LABEL_648:
        sub_4074();
      }
    }
    else
    {
      if (v429 != 1)
      {
LABEL_646:
        *a2 = 1;
        return;
      }
      v430 = a1[2];
      v431 = *(_QWORD **)a1[1];
      v432 = *(_DWORD *)(v430 + 100) & 0x7FFFFLL;
      v433 = (uint64_t *)v431[713];
      v434 = v431[714];
      if ((unint64_t)v433 >= v434)
      {
        v435 = (uint64_t *)v431[712];
        v436 = v433 - v435;
        if (!((unint64_t)(v436 + 1) >> 61))
        {
          v437 = v434 - (_QWORD)v435;
          v438 = (uint64_t)(v434 - (_QWORD)v435) >> 2;
          if (v438 <= v436 + 1)
            v438 = v436 + 1;
          if (v437 >= 0x7FFFFFFFFFFFFFF8)
            v439 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v439 = v438;
          if (v439)
          {
            v440 = (char *)sub_40FC((uint64_t)(v431 + 714), v439);
            v433 = (uint64_t *)v431[713];
            v435 = (uint64_t *)v431[712];
          }
          else
          {
            v440 = 0;
          }
          v449 = (uint64_t *)&v440[8 * v436];
          v450 = &v440[8 * v439];
          *v449 = v432;
          v443 = v449 + 1;
          while (v433 != v435)
          {
            v451 = *--v433;
            *--v449 = v451;
          }
LABEL_643:
          v431[712] = v449;
          v431[713] = v443;
          v431[714] = v450;
          if (v435)
            operator delete(v435);
          goto LABEL_645;
        }
        goto LABEL_648;
      }
    }
    *v433 = v432;
    v443 = v433 + 1;
LABEL_645:
    v431[713] = v443;
    goto LABEL_646;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (unsigned int *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[656] - 8) += v17[12] & 0x7FFFF;
    *(_QWORD *)(v19[659] - 8) += v17[22] & 0x7FFFF;
    *(_QWORD *)(v19[662] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
    *(_QWORD *)(v19[665] - 8) += v17[16] & 0x7FFFF;
    *(_QWORD *)(v19[668] - 8) += v17[8] & 0x7FFFF;
    *(_QWORD *)(v19[671] - 8) += v17[18] & 0x7FFFF;
    *(_QWORD *)(v19[674] - 8) += v17[11] & 0x7FFFF;
    *(_QWORD *)(v19[677] - 8) += v17[21] & 0x7FFFF;
    *(_QWORD *)(v19[680] - 8) += v17[10] & 0x7FFFF;
    *(_QWORD *)(v19[683] - 8) += v17[20] & 0x7FFFF;
    v20 = (_DWORD *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[686] - 8) += v20[14] & 0x7FFFF;
    *(_QWORD *)(v21[689] - 8) += v20[24] & 0x7FFFF;
    *(_QWORD *)(v21[692] - 8) += v20[15] & 0x7FFFF;
    *(_QWORD *)(v21[695] - 8) += v20[13] & 0x7FFFF;
    *(_QWORD *)(v21[698] - 8) += v20[23] & 0x7FFFF;
    *(_QWORD *)(v21[701] - 8) += v20[7] & 0x7FFFF;
    *(_QWORD *)(v21[704] - 8) += v20[17] & 0x7FFFF;
    *(_QWORD *)(v21[707] - 8) += v20[9] & 0x7FFFF;
    *(_QWORD *)(v21[710] - 8) += v20[19] & 0x7FFFF;
    *(_QWORD *)(v21[713] - 8) += v20[25] & 0x7FFFF;
  }
}

void sub_14ED5C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  char *v300;
  unint64_t v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  uint64_t *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  _QWORD *v342;
  uint64_t v343;
  char *v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t *v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  char *v380;
  uint64_t *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  _QWORD *v386;
  uint64_t v387;
  char *v388;
  unint64_t v389;
  char *v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  unint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t *v411;
  unint64_t v412;
  uint64_t *v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  char *v418;
  uint64_t v419;
  unint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  uint64_t *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v8 = (char *)v6[716];
      v22 = v6[717];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (char *)v6[715];
        v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_616;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 717), v27);
          v8 = (char *)v6[716];
          v10 = (char *)v6[715];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v32 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v8 = (char *)v6[716];
      v9 = v6[717];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[715];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_616;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 717), v14);
          v8 = (char *)v6[716];
          v10 = (char *)v6[715];
        }
        else
        {
          v15 = 0;
        }
        v29 = &v15[8 * v11];
        v30 = &v15[8 * v14];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v31 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[715] = v29;
        v6[716] = v23;
        v6[717] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v23 = v8 + 8;
LABEL_37:
    v6[716] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[719];
      v44 = v34[720];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (uint64_t *)v34[718];
        v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_616;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 720), v49);
          v36 = (uint64_t *)v34[719];
          v38 = (uint64_t *)v34[718];
        }
        else
        {
          v50 = 0;
        }
        v51 = (uint64_t *)&v50[8 * v46];
        v52 = &v50[8 * v49];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v54 = *--v36;
          *--v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[719];
      v37 = v34[720];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (uint64_t *)v34[718];
        v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_616;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 720), v42);
          v36 = (uint64_t *)v34[719];
          v38 = (uint64_t *)v34[718];
        }
        else
        {
          v43 = 0;
        }
        v51 = (uint64_t *)&v43[8 * v39];
        v52 = &v43[8 * v42];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v53 = *--v36;
          *--v51 = v53;
        }
LABEL_67:
        v34[718] = v51;
        v34[719] = v45;
        v34[720] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *v36 = v35;
    v45 = v36 + 1;
LABEL_69:
    v34[719] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v58 = (char *)v56[722];
      v66 = v56[723];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (char *)v56[721];
        v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_616;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 723), v71);
          v58 = (char *)v56[722];
          v60 = (char *)v56[721];
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[8 * v68];
        v74 = &v72[8 * v71];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v76 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v58 = (char *)v56[722];
      v59 = v56[723];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (char *)v56[721];
        v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_616;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 723), v64);
          v58 = (char *)v56[722];
          v60 = (char *)v56[721];
        }
        else
        {
          v65 = 0;
        }
        v73 = &v65[8 * v61];
        v74 = &v65[8 * v64];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v75 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[721] = v73;
        v56[722] = v67;
        v56[723] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v58 = v57;
    v67 = v58 + 8;
LABEL_101:
    v56[722] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      v80 = (char *)v78[725];
      v88 = v78[726];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (char *)v78[724];
        v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_616;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 726), v93);
          v80 = (char *)v78[725];
          v82 = (char *)v78[724];
        }
        else
        {
          v94 = 0;
        }
        v95 = &v94[8 * v90];
        v96 = &v94[8 * v93];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v98 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      v80 = (char *)v78[725];
      v81 = v78[726];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (char *)v78[724];
        v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_616;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 726), v86);
          v80 = (char *)v78[725];
          v82 = (char *)v78[724];
        }
        else
        {
          v87 = 0;
        }
        v95 = &v87[8 * v83];
        v96 = &v87[8 * v86];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v97 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[724] = v95;
        v78[725] = v89;
        v78[726] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v80 = v79;
    v89 = v80 + 8;
LABEL_133:
    v78[725] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[728];
      v110 = v100[729];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[727];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_616;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 729), v115);
          v102 = (uint64_t *)v100[728];
          v104 = (uint64_t *)v100[727];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[728];
      v103 = v100[729];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[727];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_616;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 729), v108);
          v102 = (uint64_t *)v100[728];
          v104 = (uint64_t *)v100[727];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[727] = v117;
        v100[728] = v111;
        v100[729] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[728] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v124 = (char *)v122[731];
      v132 = v122[732];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (char *)v122[730];
        v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_616;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 732), v137);
          v124 = (char *)v122[731];
          v126 = (char *)v122[730];
        }
        else
        {
          v138 = 0;
        }
        v139 = &v138[8 * v134];
        v140 = &v138[8 * v137];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v142 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v124 = (char *)v122[731];
      v125 = v122[732];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (char *)v122[730];
        v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_616;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 732), v130);
          v124 = (char *)v122[731];
          v126 = (char *)v122[730];
        }
        else
        {
          v131 = 0;
        }
        v139 = &v131[8 * v127];
        v140 = &v131[8 * v130];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v141 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[730] = v139;
        v122[731] = v133;
        v122[732] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v124 = v123;
    v133 = v124 + 8;
LABEL_197:
    v122[731] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[734];
      v154 = v144[735];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (uint64_t *)v144[733];
        v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_616;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 735), v159);
          v146 = (uint64_t *)v144[734];
          v148 = (uint64_t *)v144[733];
        }
        else
        {
          v160 = 0;
        }
        v161 = (uint64_t *)&v160[8 * v156];
        v162 = &v160[8 * v159];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v164 = *--v146;
          *--v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[734];
      v147 = v144[735];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (uint64_t *)v144[733];
        v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_616;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 735), v152);
          v146 = (uint64_t *)v144[734];
          v148 = (uint64_t *)v144[733];
        }
        else
        {
          v153 = 0;
        }
        v161 = (uint64_t *)&v153[8 * v149];
        v162 = &v153[8 * v152];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v163 = *--v146;
          *--v161 = v163;
        }
LABEL_227:
        v144[733] = v161;
        v144[734] = v155;
        v144[735] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *v146 = v145;
    v155 = v146 + 1;
LABEL_229:
    v144[734] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v168 = (char *)v166[737];
      v176 = v166[738];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (char *)v166[736];
        v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_616;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 738), v181);
          v168 = (char *)v166[737];
          v170 = (char *)v166[736];
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[8 * v178];
        v184 = &v182[8 * v181];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v186 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v168 = (char *)v166[737];
      v169 = v166[738];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (char *)v166[736];
        v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_616;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 738), v174);
          v168 = (char *)v166[737];
          v170 = (char *)v166[736];
        }
        else
        {
          v175 = 0;
        }
        v183 = &v175[8 * v171];
        v184 = &v175[8 * v174];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v185 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[736] = v183;
        v166[737] = v177;
        v166[738] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v168 = v167;
    v177 = v168 + 8;
LABEL_261:
    v166[737] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[740];
      v198 = v188[741];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (uint64_t *)v188[739];
        v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_616;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 741), v203);
          v190 = (uint64_t *)v188[740];
          v192 = (uint64_t *)v188[739];
        }
        else
        {
          v204 = 0;
        }
        v205 = (uint64_t *)&v204[8 * v200];
        v206 = &v204[8 * v203];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v208 = *--v190;
          *--v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[740];
      v191 = v188[741];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (uint64_t *)v188[739];
        v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_616;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 741), v196);
          v190 = (uint64_t *)v188[740];
          v192 = (uint64_t *)v188[739];
        }
        else
        {
          v197 = 0;
        }
        v205 = (uint64_t *)&v197[8 * v193];
        v206 = &v197[8 * v196];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v207 = *--v190;
          *--v205 = v207;
        }
LABEL_291:
        v188[739] = v205;
        v188[740] = v199;
        v188[741] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *v190 = v189;
    v199 = v190 + 1;
LABEL_293:
    v188[740] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v212 = (char *)v210[743];
      v220 = v210[744];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (char *)v210[742];
        v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_616;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 744), v225);
          v212 = (char *)v210[743];
          v214 = (char *)v210[742];
        }
        else
        {
          v226 = 0;
        }
        v227 = &v226[8 * v222];
        v228 = &v226[8 * v225];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v230 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v212 = (char *)v210[743];
      v213 = v210[744];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (char *)v210[742];
        v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_616;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 744), v218);
          v212 = (char *)v210[743];
          v214 = (char *)v210[742];
        }
        else
        {
          v219 = 0;
        }
        v227 = &v219[8 * v215];
        v228 = &v219[8 * v218];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v229 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[742] = v227;
        v210[743] = v221;
        v210[744] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v212 = v211;
    v221 = v212 + 8;
LABEL_325:
    v210[743] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[746];
      v242 = v232[747];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (uint64_t *)v232[745];
        v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_616;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 747), v247);
          v234 = (uint64_t *)v232[746];
          v236 = (uint64_t *)v232[745];
        }
        else
        {
          v248 = 0;
        }
        v249 = (uint64_t *)&v248[8 * v244];
        v250 = &v248[8 * v247];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v252 = *--v234;
          *--v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[746];
      v235 = v232[747];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (uint64_t *)v232[745];
        v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_616;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 747), v240);
          v234 = (uint64_t *)v232[746];
          v236 = (uint64_t *)v232[745];
        }
        else
        {
          v241 = 0;
        }
        v249 = (uint64_t *)&v241[8 * v237];
        v250 = &v241[8 * v240];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v251 = *--v234;
          *--v249 = v251;
        }
LABEL_355:
        v232[745] = v249;
        v232[746] = v243;
        v232[747] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *v234 = v233;
    v243 = v234 + 1;
LABEL_357:
    v232[746] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v256 = (char *)v254[749];
      v264 = v254[750];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (char *)v254[748];
        v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_616;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 750), v269);
          v256 = (char *)v254[749];
          v258 = (char *)v254[748];
        }
        else
        {
          v270 = 0;
        }
        v271 = &v270[8 * v266];
        v272 = &v270[8 * v269];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v274 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v256 = (char *)v254[749];
      v257 = v254[750];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (char *)v254[748];
        v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_616;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 750), v262);
          v256 = (char *)v254[749];
          v258 = (char *)v254[748];
        }
        else
        {
          v263 = 0;
        }
        v271 = &v263[8 * v259];
        v272 = &v263[8 * v262];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v273 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[748] = v271;
        v254[749] = v265;
        v254[750] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v256 = v255;
    v265 = v256 + 8;
LABEL_389:
    v254[749] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[752];
      v286 = v276[753];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (uint64_t *)v276[751];
        v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_616;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 753), v291);
          v278 = (uint64_t *)v276[752];
          v280 = (uint64_t *)v276[751];
        }
        else
        {
          v292 = 0;
        }
        v293 = (uint64_t *)&v292[8 * v288];
        v294 = &v292[8 * v291];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v296 = *--v278;
          *--v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[752];
      v279 = v276[753];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (uint64_t *)v276[751];
        v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_616;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 753), v284);
          v278 = (uint64_t *)v276[752];
          v280 = (uint64_t *)v276[751];
        }
        else
        {
          v285 = 0;
        }
        v293 = (uint64_t *)&v285[8 * v281];
        v294 = &v285[8 * v284];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v295 = *--v278;
          *--v293 = v295;
        }
LABEL_419:
        v276[751] = v293;
        v276[752] = v287;
        v276[753] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *v278 = v277;
    v287 = v278 + 1;
LABEL_421:
    v276[752] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v298 = *(_QWORD **)a1[1];
      v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v300 = (char *)v298[755];
      v308 = v298[756];
      if ((unint64_t)v300 >= v308)
      {
        v302 = (char *)v298[754];
        v310 = (v300 - v302) >> 3;
        if ((unint64_t)(v310 + 1) >> 61)
          goto LABEL_616;
        v311 = v308 - (_QWORD)v302;
        v312 = (uint64_t)(v308 - (_QWORD)v302) >> 2;
        if (v312 <= v310 + 1)
          v312 = v310 + 1;
        if (v311 >= 0x7FFFFFFFFFFFFFF8)
          v313 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v313 = v312;
        if (v313)
        {
          v314 = (char *)sub_40FC((uint64_t)(v298 + 756), v313);
          v300 = (char *)v298[755];
          v302 = (char *)v298[754];
        }
        else
        {
          v314 = 0;
        }
        v315 = &v314[8 * v310];
        v316 = &v314[8 * v313];
        *(_QWORD *)v315 = v299;
        v309 = v315 + 8;
        while (v300 != v302)
        {
          v318 = *((_QWORD *)v300 - 1);
          v300 -= 8;
          *((_QWORD *)v315 - 1) = v318;
          v315 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1)
        goto LABEL_454;
      v298 = *(_QWORD **)a1[1];
      v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v300 = (char *)v298[755];
      v301 = v298[756];
      if ((unint64_t)v300 >= v301)
      {
        v302 = (char *)v298[754];
        v303 = (v300 - v302) >> 3;
        if ((unint64_t)(v303 + 1) >> 61)
          goto LABEL_616;
        v304 = v301 - (_QWORD)v302;
        v305 = (uint64_t)(v301 - (_QWORD)v302) >> 2;
        if (v305 <= v303 + 1)
          v305 = v303 + 1;
        if (v304 >= 0x7FFFFFFFFFFFFFF8)
          v306 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v306 = v305;
        if (v306)
        {
          v307 = (char *)sub_40FC((uint64_t)(v298 + 756), v306);
          v300 = (char *)v298[755];
          v302 = (char *)v298[754];
        }
        else
        {
          v307 = 0;
        }
        v315 = &v307[8 * v303];
        v316 = &v307[8 * v306];
        *(_QWORD *)v315 = v299;
        v309 = v315 + 8;
        while (v300 != v302)
        {
          v317 = *((_QWORD *)v300 - 1);
          v300 -= 8;
          *((_QWORD *)v315 - 1) = v317;
          v315 -= 8;
        }
LABEL_451:
        v298[754] = v315;
        v298[755] = v309;
        v298[756] = v316;
        if (v302)
          operator delete(v302);
        goto LABEL_453;
      }
    }
    *(_QWORD *)v300 = v299;
    v309 = v300 + 8;
LABEL_453:
    v298[755] = v309;
LABEL_454:
    v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[758];
      v330 = v320[759];
      if ((unint64_t)v322 >= v330)
      {
        v324 = (uint64_t *)v320[757];
        v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_616;
        v333 = v330 - (_QWORD)v324;
        v334 = (uint64_t)(v330 - (_QWORD)v324) >> 2;
        if (v334 <= v332 + 1)
          v334 = v332 + 1;
        if (v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
        {
          v336 = (char *)sub_40FC((uint64_t)(v320 + 759), v335);
          v322 = (uint64_t *)v320[758];
          v324 = (uint64_t *)v320[757];
        }
        else
        {
          v336 = 0;
        }
        v337 = (uint64_t *)&v336[8 * v332];
        v338 = &v336[8 * v335];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v340 = *--v322;
          *--v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1)
        goto LABEL_486;
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[758];
      v323 = v320[759];
      if ((unint64_t)v322 >= v323)
      {
        v324 = (uint64_t *)v320[757];
        v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61)
          goto LABEL_616;
        v326 = v323 - (_QWORD)v324;
        v327 = (uint64_t)(v323 - (_QWORD)v324) >> 2;
        if (v327 <= v325 + 1)
          v327 = v325 + 1;
        if (v326 >= 0x7FFFFFFFFFFFFFF8)
          v328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v328 = v327;
        if (v328)
        {
          v329 = (char *)sub_40FC((uint64_t)(v320 + 759), v328);
          v322 = (uint64_t *)v320[758];
          v324 = (uint64_t *)v320[757];
        }
        else
        {
          v329 = 0;
        }
        v337 = (uint64_t *)&v329[8 * v325];
        v338 = &v329[8 * v328];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v339 = *--v322;
          *--v337 = v339;
        }
LABEL_483:
        v320[757] = v337;
        v320[758] = v331;
        v320[759] = v338;
        if (v324)
          operator delete(v324);
        goto LABEL_485;
      }
    }
    *v322 = v321;
    v331 = v322 + 1;
LABEL_485:
    v320[758] = v331;
LABEL_486:
    v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      v342 = *(_QWORD **)a1[1];
      v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v344 = (char *)v342[761];
      v352 = v342[762];
      if ((unint64_t)v344 >= v352)
      {
        v346 = (char *)v342[760];
        v354 = (v344 - v346) >> 3;
        if ((unint64_t)(v354 + 1) >> 61)
          goto LABEL_616;
        v355 = v352 - (_QWORD)v346;
        v356 = (uint64_t)(v352 - (_QWORD)v346) >> 2;
        if (v356 <= v354 + 1)
          v356 = v354 + 1;
        if (v355 >= 0x7FFFFFFFFFFFFFF8)
          v357 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v357 = v356;
        if (v357)
        {
          v358 = (char *)sub_40FC((uint64_t)(v342 + 762), v357);
          v344 = (char *)v342[761];
          v346 = (char *)v342[760];
        }
        else
        {
          v358 = 0;
        }
        v359 = &v358[8 * v354];
        v360 = &v358[8 * v357];
        *(_QWORD *)v359 = v343;
        v353 = v359 + 8;
        while (v344 != v346)
        {
          v362 = *((_QWORD *)v344 - 1);
          v344 -= 8;
          *((_QWORD *)v359 - 1) = v362;
          v359 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1)
        goto LABEL_518;
      v342 = *(_QWORD **)a1[1];
      v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v344 = (char *)v342[761];
      v345 = v342[762];
      if ((unint64_t)v344 >= v345)
      {
        v346 = (char *)v342[760];
        v347 = (v344 - v346) >> 3;
        if ((unint64_t)(v347 + 1) >> 61)
          goto LABEL_616;
        v348 = v345 - (_QWORD)v346;
        v349 = (uint64_t)(v345 - (_QWORD)v346) >> 2;
        if (v349 <= v347 + 1)
          v349 = v347 + 1;
        if (v348 >= 0x7FFFFFFFFFFFFFF8)
          v350 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v350 = v349;
        if (v350)
        {
          v351 = (char *)sub_40FC((uint64_t)(v342 + 762), v350);
          v344 = (char *)v342[761];
          v346 = (char *)v342[760];
        }
        else
        {
          v351 = 0;
        }
        v359 = &v351[8 * v347];
        v360 = &v351[8 * v350];
        *(_QWORD *)v359 = v343;
        v353 = v359 + 8;
        while (v344 != v346)
        {
          v361 = *((_QWORD *)v344 - 1);
          v344 -= 8;
          *((_QWORD *)v359 - 1) = v361;
          v359 -= 8;
        }
LABEL_515:
        v342[760] = v359;
        v342[761] = v353;
        v342[762] = v360;
        if (v346)
          operator delete(v346);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v344 = v343;
    v353 = v344 + 8;
LABEL_517:
    v342[761] = v353;
LABEL_518:
    v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[764];
      v374 = v364[765];
      if ((unint64_t)v366 >= v374)
      {
        v368 = (uint64_t *)v364[763];
        v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61)
          goto LABEL_616;
        v377 = v374 - (_QWORD)v368;
        v378 = (uint64_t)(v374 - (_QWORD)v368) >> 2;
        if (v378 <= v376 + 1)
          v378 = v376 + 1;
        if (v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
        {
          v380 = (char *)sub_40FC((uint64_t)(v364 + 765), v379);
          v366 = (uint64_t *)v364[764];
          v368 = (uint64_t *)v364[763];
        }
        else
        {
          v380 = 0;
        }
        v381 = (uint64_t *)&v380[8 * v376];
        v382 = &v380[8 * v379];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v384 = *--v366;
          *--v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1)
        goto LABEL_550;
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[764];
      v367 = v364[765];
      if ((unint64_t)v366 >= v367)
      {
        v368 = (uint64_t *)v364[763];
        v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61)
          goto LABEL_616;
        v370 = v367 - (_QWORD)v368;
        v371 = (uint64_t)(v367 - (_QWORD)v368) >> 2;
        if (v371 <= v369 + 1)
          v371 = v369 + 1;
        if (v370 >= 0x7FFFFFFFFFFFFFF8)
          v372 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v372 = v371;
        if (v372)
        {
          v373 = (char *)sub_40FC((uint64_t)(v364 + 765), v372);
          v366 = (uint64_t *)v364[764];
          v368 = (uint64_t *)v364[763];
        }
        else
        {
          v373 = 0;
        }
        v381 = (uint64_t *)&v373[8 * v369];
        v382 = &v373[8 * v372];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v383 = *--v366;
          *--v381 = v383;
        }
LABEL_547:
        v364[763] = v381;
        v364[764] = v375;
        v364[765] = v382;
        if (v368)
          operator delete(v368);
        goto LABEL_549;
      }
    }
    *v366 = v365;
    v375 = v366 + 1;
LABEL_549:
    v364[764] = v375;
LABEL_550:
    v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      v386 = *(_QWORD **)a1[1];
      v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v388 = (char *)v386[767];
      v396 = v386[768];
      if ((unint64_t)v388 >= v396)
      {
        v390 = (char *)v386[766];
        v398 = (v388 - v390) >> 3;
        if ((unint64_t)(v398 + 1) >> 61)
          goto LABEL_616;
        v399 = v396 - (_QWORD)v390;
        v400 = (uint64_t)(v396 - (_QWORD)v390) >> 2;
        if (v400 <= v398 + 1)
          v400 = v398 + 1;
        if (v399 >= 0x7FFFFFFFFFFFFFF8)
          v401 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v401 = v400;
        if (v401)
        {
          v402 = (char *)sub_40FC((uint64_t)(v386 + 768), v401);
          v388 = (char *)v386[767];
          v390 = (char *)v386[766];
        }
        else
        {
          v402 = 0;
        }
        v403 = &v402[8 * v398];
        v404 = &v402[8 * v401];
        *(_QWORD *)v403 = v387;
        v397 = v403 + 8;
        while (v388 != v390)
        {
          v406 = *((_QWORD *)v388 - 1);
          v388 -= 8;
          *((_QWORD *)v403 - 1) = v406;
          v403 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1)
        goto LABEL_582;
      v386 = *(_QWORD **)a1[1];
      v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v388 = (char *)v386[767];
      v389 = v386[768];
      if ((unint64_t)v388 >= v389)
      {
        v390 = (char *)v386[766];
        v391 = (v388 - v390) >> 3;
        if ((unint64_t)(v391 + 1) >> 61)
          goto LABEL_616;
        v392 = v389 - (_QWORD)v390;
        v393 = (uint64_t)(v389 - (_QWORD)v390) >> 2;
        if (v393 <= v391 + 1)
          v393 = v391 + 1;
        if (v392 >= 0x7FFFFFFFFFFFFFF8)
          v394 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v394 = v393;
        if (v394)
        {
          v395 = (char *)sub_40FC((uint64_t)(v386 + 768), v394);
          v388 = (char *)v386[767];
          v390 = (char *)v386[766];
        }
        else
        {
          v395 = 0;
        }
        v403 = &v395[8 * v391];
        v404 = &v395[8 * v394];
        *(_QWORD *)v403 = v387;
        v397 = v403 + 8;
        while (v388 != v390)
        {
          v405 = *((_QWORD *)v388 - 1);
          v388 -= 8;
          *((_QWORD *)v403 - 1) = v405;
          v403 -= 8;
        }
LABEL_579:
        v386[766] = v403;
        v386[767] = v397;
        v386[768] = v404;
        if (v390)
          operator delete(v390);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v388 = v387;
    v397 = v388 + 8;
LABEL_581:
    v386[767] = v397;
LABEL_582:
    v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      v419 = a1[2];
      v409 = *(_QWORD **)a1[1];
      v410 = *(_DWORD *)(v419 + 56) & 0x7FFFFLL;
      v411 = (uint64_t *)v409[770];
      v420 = v409[771];
      if ((unint64_t)v411 >= v420)
      {
        v413 = (uint64_t *)v409[769];
        v422 = v411 - v413;
        if (!((unint64_t)(v422 + 1) >> 61))
        {
          v423 = v420 - (_QWORD)v413;
          v424 = (uint64_t)(v420 - (_QWORD)v413) >> 2;
          if (v424 <= v422 + 1)
            v424 = v422 + 1;
          if (v423 >= 0x7FFFFFFFFFFFFFF8)
            v425 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v425 = v424;
          if (v425)
          {
            v426 = (char *)sub_40FC((uint64_t)(v409 + 771), v425);
            v411 = (uint64_t *)v409[770];
            v413 = (uint64_t *)v409[769];
          }
          else
          {
            v426 = 0;
          }
          v427 = (uint64_t *)&v426[8 * v422];
          v428 = &v426[8 * v425];
          *v427 = v410;
          v421 = v427 + 1;
          while (v411 != v413)
          {
            v430 = *--v411;
            *--v427 = v430;
          }
          goto LABEL_611;
        }
LABEL_616:
        sub_4074();
      }
    }
    else
    {
      if (v407 != 1)
      {
LABEL_614:
        *a2 = 1;
        return;
      }
      v408 = a1[2];
      v409 = *(_QWORD **)a1[1];
      v410 = *(_DWORD *)(v408 + 56) & 0x7FFFFLL;
      v411 = (uint64_t *)v409[770];
      v412 = v409[771];
      if ((unint64_t)v411 >= v412)
      {
        v413 = (uint64_t *)v409[769];
        v414 = v411 - v413;
        if (!((unint64_t)(v414 + 1) >> 61))
        {
          v415 = v412 - (_QWORD)v413;
          v416 = (uint64_t)(v412 - (_QWORD)v413) >> 2;
          if (v416 <= v414 + 1)
            v416 = v414 + 1;
          if (v415 >= 0x7FFFFFFFFFFFFFF8)
            v417 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v417 = v416;
          if (v417)
          {
            v418 = (char *)sub_40FC((uint64_t)(v409 + 771), v417);
            v411 = (uint64_t *)v409[770];
            v413 = (uint64_t *)v409[769];
          }
          else
          {
            v418 = 0;
          }
          v427 = (uint64_t *)&v418[8 * v414];
          v428 = &v418[8 * v417];
          *v427 = v410;
          v421 = v427 + 1;
          while (v411 != v413)
          {
            v429 = *--v411;
            *--v427 = v429;
          }
LABEL_611:
          v409[769] = v427;
          v409[770] = v421;
          v409[771] = v428;
          if (v413)
            operator delete(v413);
          goto LABEL_613;
        }
        goto LABEL_616;
      }
    }
    *v411 = v410;
    v421 = v411 + 1;
LABEL_613:
    v409[770] = v421;
    goto LABEL_614;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[716] - 8) += *(_WORD *)(v17 + 36) & 0x7FFF;
    *(_QWORD *)(v19[719] - 8) += *(_DWORD *)(v17 + 68) & 0x7FFFF;
    *(_QWORD *)(v19[722] - 8) += *(_WORD *)(v17 + 42) & 0x7FFF;
    *(_QWORD *)(v19[725] - 8) += (unsigned __int16)*(_DWORD *)(v17 + 24) >> 1;
    *(_QWORD *)(v19[728] - 8) += *(_DWORD *)(v17 + 44) & 0x7FFFF;
    *(_QWORD *)(v19[731] - 8) += *(_WORD *)(v17 + 28) & 0x7FFF;
    *(_QWORD *)(v19[734] - 8) += *(_DWORD *)(v17 + 52) & 0x7FFFF;
    *(_QWORD *)(v19[737] - 8) += *(_WORD *)(v17 + 34) & 0x7FFF;
    *(_QWORD *)(v19[740] - 8) += *(_DWORD *)(v17 + 64) & 0x7FFFF;
    *(_QWORD *)(v19[743] - 8) += *(_WORD *)(v17 + 32) & 0x7FFF;
    v20 = a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[746] - 8) += *(_DWORD *)(v20 + 60) & 0x7FFFF;
    *(_QWORD *)(v21[749] - 8) += *(_WORD *)(v20 + 40) & 0x7FFF;
    *(_QWORD *)(v21[752] - 8) += *(_DWORD *)(v20 + 76) & 0x7FFFF;
    *(_QWORD *)(v21[755] - 8) += *(_WORD *)(v20 + 38) & 0x7FFF;
    *(_QWORD *)(v21[758] - 8) += *(_DWORD *)(v20 + 72) & 0x7FFFF;
    *(_QWORD *)(v21[761] - 8) += *(_WORD *)(v20 + 26) & 0x7FFF;
    *(_QWORD *)(v21[764] - 8) += *(_DWORD *)(v20 + 48) & 0x7FFFF;
    *(_QWORD *)(v21[767] - 8) += *(_WORD *)(v20 + 30) & 0x7FFF;
    *(_QWORD *)(v21[770] - 8) += *(_DWORD *)(v20 + 56) & 0x7FFFF;
  }
}

void sub_150D5C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 32) >> 17;
      v8 = (unint64_t *)v6[182];
      v19 = v6[183];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (unint64_t *)v6[181];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_168;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 183), v24);
          v8 = (unint64_t *)v6[182];
          v10 = (unint64_t *)v6[181];
        }
        else
        {
          v25 = 0;
        }
        v26 = (unint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 32) >> 17;
      v8 = (unint64_t *)v6[182];
      v9 = v6[183];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (unint64_t *)v6[181];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_168;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 183), v14);
          v8 = (unint64_t *)v6[182];
          v10 = (unint64_t *)v6[181];
        }
        else
        {
          v15 = 0;
        }
        v26 = (unint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[181] = v26;
        v6[182] = v20;
        v6[183] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[182] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[185];
      v41 = v31[186];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[184];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_168;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 186), v46);
          v33 = (uint64_t *)v31[185];
          v35 = (uint64_t *)v31[184];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[185];
      v34 = v31[186];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[184];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_168;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 186), v39);
          v33 = (uint64_t *)v31[185];
          v35 = (uint64_t *)v31[184];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[184] = v48;
        v31[185] = v42;
        v31[186] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[185] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v55 = (uint64_t *)v53[188];
      v63 = v53[189];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[187];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_168;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 189), v68);
          v55 = (uint64_t *)v53[188];
          v57 = (uint64_t *)v53[187];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v55 = (uint64_t *)v53[188];
      v56 = v53[189];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[187];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_168;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 189), v61);
          v55 = (uint64_t *)v53[188];
          v57 = (uint64_t *)v53[187];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[187] = v70;
        v53[188] = v64;
        v53[189] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[188] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v86 = a1[1];
      v76 = *(_QWORD **)v86;
      v77 = *(unsigned __int16 *)(a1[2] + 26);
      v78 = *(char **)(*(_QWORD *)v86 + 1528);
      v87 = *(_QWORD *)(*(_QWORD *)v86 + 1536);
      if ((unint64_t)v78 >= v87)
      {
        v80 = (char *)v76[190];
        v89 = (v78 - v80) >> 3;
        if ((unint64_t)(v89 + 1) >> 61)
          goto LABEL_168;
        v90 = v87 - (_QWORD)v80;
        v91 = (uint64_t)(v87 - (_QWORD)v80) >> 2;
        if (v91 <= v89 + 1)
          v91 = v89 + 1;
        if (v90 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
        {
          v93 = (char *)sub_40FC((uint64_t)(v76 + 192), v92);
          v78 = (char *)v76[191];
          v80 = (char *)v76[190];
        }
        else
        {
          v93 = 0;
        }
        v94 = &v93[8 * v89];
        v95 = &v93[8 * v92];
        *(_QWORD *)v94 = v77;
        v88 = v94 + 8;
        while (v78 != v80)
        {
          v97 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v94 - 1) = v97;
          v94 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = a1[1];
      v76 = *(_QWORD **)v75;
      v77 = *(unsigned __int16 *)(a1[2] + 26);
      v78 = *(char **)(*(_QWORD *)v75 + 1528);
      v79 = *(_QWORD *)(*(_QWORD *)v75 + 1536);
      if ((unint64_t)v78 >= v79)
      {
        v80 = (char *)v76[190];
        v81 = (v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          goto LABEL_168;
        v82 = v79 - (_QWORD)v80;
        v83 = (uint64_t)(v79 - (_QWORD)v80) >> 2;
        if (v83 <= v81 + 1)
          v83 = v81 + 1;
        if (v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
        {
          v85 = (char *)sub_40FC((uint64_t)(v76 + 192), v84);
          v78 = (char *)v76[191];
          v80 = (char *)v76[190];
        }
        else
        {
          v85 = 0;
        }
        v94 = &v85[8 * v81];
        v95 = &v85[8 * v84];
        *(_QWORD *)v94 = v77;
        v88 = v94 + 8;
        while (v78 != v80)
        {
          v96 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v94 - 1) = v96;
          v94 -= 8;
        }
LABEL_131:
        v76[190] = v94;
        v76[191] = v88;
        v76[192] = v95;
        if (v80)
          operator delete(v80);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v78 = v77;
    v88 = v78 + 8;
LABEL_133:
    v76[191] = v88;
LABEL_134:
    v98 = 1 << *(_DWORD *)(v3 + 48);
    if (v98 == 2)
    {
      v111 = a1[1];
      v112 = a1[2];
      v101 = *(_QWORD **)v111;
      v102 = *(unsigned __int16 *)(v112 + 24);
      v103 = *(char **)(*(_QWORD *)v111 + 1552);
      v113 = *(_QWORD *)(*(_QWORD *)v111 + 1560);
      if ((unint64_t)v103 >= v113)
      {
        v105 = (char *)v101[193];
        v115 = (v103 - v105) >> 3;
        if (!((unint64_t)(v115 + 1) >> 61))
        {
          v116 = v113 - (_QWORD)v105;
          v117 = (uint64_t)(v113 - (_QWORD)v105) >> 2;
          if (v117 <= v115 + 1)
            v117 = v115 + 1;
          if (v116 >= 0x7FFFFFFFFFFFFFF8)
            v118 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v118 = v117;
          if (v118)
          {
            v119 = (char *)sub_40FC((uint64_t)(v101 + 195), v118);
            v103 = (char *)v101[194];
            v105 = (char *)v101[193];
          }
          else
          {
            v119 = 0;
          }
          v120 = &v119[8 * v115];
          v121 = &v119[8 * v118];
          *(_QWORD *)v120 = v102;
          v114 = v120 + 8;
          while (v103 != v105)
          {
            v123 = *((_QWORD *)v103 - 1);
            v103 -= 8;
            *((_QWORD *)v120 - 1) = v123;
            v120 -= 8;
          }
          goto LABEL_163;
        }
LABEL_168:
        sub_4074();
      }
    }
    else
    {
      if (v98 != 1)
      {
LABEL_166:
        *a2 = 1;
        return;
      }
      v99 = a1[1];
      v100 = a1[2];
      v101 = *(_QWORD **)v99;
      v102 = *(unsigned __int16 *)(v100 + 24);
      v103 = *(char **)(*(_QWORD *)v99 + 1552);
      v104 = *(_QWORD *)(*(_QWORD *)v99 + 1560);
      if ((unint64_t)v103 >= v104)
      {
        v105 = (char *)v101[193];
        v106 = (v103 - v105) >> 3;
        if (!((unint64_t)(v106 + 1) >> 61))
        {
          v107 = v104 - (_QWORD)v105;
          v108 = (uint64_t)(v104 - (_QWORD)v105) >> 2;
          if (v108 <= v106 + 1)
            v108 = v106 + 1;
          if (v107 >= 0x7FFFFFFFFFFFFFF8)
            v109 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v109 = v108;
          if (v109)
          {
            v110 = (char *)sub_40FC((uint64_t)(v101 + 195), v109);
            v103 = (char *)v101[194];
            v105 = (char *)v101[193];
          }
          else
          {
            v110 = 0;
          }
          v120 = &v110[8 * v106];
          v121 = &v110[8 * v109];
          *(_QWORD *)v120 = v102;
          v114 = v120 + 8;
          while (v103 != v105)
          {
            v122 = *((_QWORD *)v103 - 1);
            v103 -= 8;
            *((_QWORD *)v120 - 1) = v122;
            v120 -= 8;
          }
LABEL_163:
          v101[193] = v120;
          v101[194] = v114;
          v101[195] = v121;
          if (v105)
            operator delete(v105);
          goto LABEL_165;
        }
        goto LABEL_168;
      }
    }
    *(_QWORD *)v103 = v102;
    v114 = v103 + 8;
LABEL_165:
    v101[194] = v114;
    goto LABEL_166;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[182] - 8) += (unint64_t)*(unsigned int *)(v17 + 32) >> 17;
    *(_QWORD *)(v18[185] - 8) += *(_DWORD *)(v17 + 32) & 0x1FFFF;
    *(_QWORD *)(v18[188] - 8) += *(_DWORD *)(v17 + 28) & 0x1FFFF;
    *(_QWORD *)(v18[191] - 8) += *(unsigned __int16 *)(v17 + 26);
    *(_QWORD *)(v18[194] - 8) += *(unsigned __int16 *)(v17 + 24);
  }
}

void sub_1515B4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _WORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _WORD *v20;
  _QWORD *v21;
  unsigned __int16 *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  _QWORD *v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _QWORD *v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  _QWORD *v214;
  uint64_t v215;
  char *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  _QWORD *v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _QWORD *v258;
  uint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  _QWORD *v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  unint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  _QWORD *v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  _QWORD *v324;
  uint64_t v325;
  char *v326;
  unint64_t v327;
  char *v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  char *v333;
  unint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  _QWORD *v346;
  uint64_t v347;
  char *v348;
  unint64_t v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  unint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  _QWORD *v368;
  uint64_t v369;
  char *v370;
  unint64_t v371;
  char *v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  unint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  char *v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  _QWORD *v390;
  uint64_t v391;
  char *v392;
  unint64_t v393;
  char *v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  char *v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  char *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  _QWORD *v412;
  uint64_t v413;
  char *v414;
  unint64_t v415;
  char *v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  char *v421;
  unint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  _QWORD *v434;
  uint64_t v435;
  char *v436;
  unint64_t v437;
  char *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  char *v443;
  unint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  char *v450;
  char *v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  _QWORD *v456;
  uint64_t v457;
  char *v458;
  unint64_t v459;
  char *v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  char *v465;
  unint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  char *v472;
  char *v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  _QWORD *v478;
  uint64_t v479;
  char *v480;
  unint64_t v481;
  char *v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  char *v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  char *v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  _QWORD *v500;
  uint64_t v501;
  char *v502;
  unint64_t v503;
  char *v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  char *v509;
  unint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  char *v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  _QWORD *v522;
  uint64_t v523;
  char *v524;
  unint64_t v525;
  char *v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char *v531;
  unint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  char *v538;
  char *v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  _QWORD *v544;
  uint64_t v545;
  char *v546;
  unint64_t v547;
  char *v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  char *v553;
  unint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  char *v560;
  char *v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  _QWORD *v566;
  uint64_t v567;
  char *v568;
  unint64_t v569;
  char *v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  unint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  char *v582;
  char *v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  _QWORD *v588;
  uint64_t v589;
  char *v590;
  unint64_t v591;
  char *v592;
  uint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  char *v597;
  unint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  char *v604;
  char *v605;
  char *v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  _QWORD *v610;
  unint64_t v611;
  unint64_t *v612;
  unint64_t v613;
  unint64_t *v614;
  uint64_t v615;
  unint64_t v616;
  unint64_t v617;
  unint64_t v618;
  char *v619;
  unint64_t v620;
  _QWORD *v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unint64_t v625;
  char *v626;
  unint64_t *v627;
  char *v628;
  unint64_t v629;
  unint64_t v630;
  int v631;
  _QWORD *v632;
  uint64_t v633;
  char *v634;
  unint64_t v635;
  char *v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  char *v641;
  unint64_t v642;
  _QWORD *v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  char *v648;
  char *v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  _QWORD *v654;
  uint64_t v655;
  char *v656;
  unint64_t v657;
  char *v658;
  uint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  char *v663;
  unint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t v669;
  char *v670;
  char *v671;
  char *v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  _QWORD *v676;
  uint64_t v677;
  char *v678;
  unint64_t v679;
  char *v680;
  uint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  char *v685;
  unint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  char *v692;
  char *v693;
  char *v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  _QWORD *v699;
  uint64_t v700;
  char *v701;
  unint64_t v702;
  char *v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  char *v708;
  uint64_t v709;
  unint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  char *v716;
  char *v717;
  char *v718;
  uint64_t v719;
  uint64_t v720;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      v8 = (char *)v6[320];
      v26 = v6[321];
      if ((unint64_t)v8 >= v26)
      {
        v10 = (char *)v6[319];
        v28 = (v8 - v10) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_1032;
        v29 = v26 - (_QWORD)v10;
        v30 = (uint64_t)(v26 - (_QWORD)v10) >> 2;
        if (v30 <= v28 + 1)
          v30 = v28 + 1;
        if (v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)sub_40FC((uint64_t)(v6 + 321), v31);
          v8 = (char *)v6[320];
          v10 = (char *)v6[319];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[8 * v28];
        v34 = &v32[8 * v31];
        *(_QWORD *)v33 = v7;
        v27 = v33 + 8;
        while (v8 != v10)
        {
          v36 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      v8 = (char *)v6[320];
      v9 = v6[321];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[319];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_1032;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 321), v14);
          v8 = (char *)v6[320];
          v10 = (char *)v6[319];
        }
        else
        {
          v15 = 0;
        }
        v33 = &v15[8 * v11];
        v34 = &v15[8 * v14];
        *(_QWORD *)v33 = v7;
        v27 = v33 + 8;
        while (v8 != v10)
        {
          v35 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v6[319] = v33;
        v6[320] = v27;
        v6[321] = v34;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v27 = v8 + 8;
LABEL_37:
    v6[320] = v27;
LABEL_38:
    v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      v38 = *(_QWORD **)a1[1];
      v39 = *(_WORD *)(a1[2] + 66) & 0x1FFF;
      v40 = (char *)v38[323];
      v48 = v38[324];
      if ((unint64_t)v40 >= v48)
      {
        v42 = (char *)v38[322];
        v50 = (v40 - v42) >> 3;
        if ((unint64_t)(v50 + 1) >> 61)
          goto LABEL_1032;
        v51 = v48 - (_QWORD)v42;
        v52 = (uint64_t)(v48 - (_QWORD)v42) >> 2;
        if (v52 <= v50 + 1)
          v52 = v50 + 1;
        if (v51 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
        {
          v54 = (char *)sub_40FC((uint64_t)(v38 + 324), v53);
          v40 = (char *)v38[323];
          v42 = (char *)v38[322];
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[8 * v50];
        v56 = &v54[8 * v53];
        *(_QWORD *)v55 = v39;
        v49 = v55 + 8;
        while (v40 != v42)
        {
          v58 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v55 - 1) = v58;
          v55 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1)
        goto LABEL_70;
      v38 = *(_QWORD **)a1[1];
      v39 = *(_WORD *)(a1[2] + 66) & 0x1FFF;
      v40 = (char *)v38[323];
      v41 = v38[324];
      if ((unint64_t)v40 >= v41)
      {
        v42 = (char *)v38[322];
        v43 = (v40 - v42) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_1032;
        v44 = v41 - (_QWORD)v42;
        v45 = (uint64_t)(v41 - (_QWORD)v42) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v38 + 324), v46);
          v40 = (char *)v38[323];
          v42 = (char *)v38[322];
        }
        else
        {
          v47 = 0;
        }
        v55 = &v47[8 * v43];
        v56 = &v47[8 * v46];
        *(_QWORD *)v55 = v39;
        v49 = v55 + 8;
        while (v40 != v42)
        {
          v57 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v55 - 1) = v57;
          v55 -= 8;
        }
LABEL_67:
        v38[322] = v55;
        v38[323] = v49;
        v38[324] = v56;
        if (v42)
          operator delete(v42);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v40 = v39;
    v49 = v40 + 8;
LABEL_69:
    v38[323] = v49;
LABEL_70:
    v59 = 1 << *(_DWORD *)(v3 + 48);
    if (v59 == 2)
    {
      v60 = *(_QWORD **)a1[1];
      v61 = *(_WORD *)(a1[2] + 50) & 0x1FFF;
      v62 = (char *)v60[326];
      v70 = v60[327];
      if ((unint64_t)v62 >= v70)
      {
        v64 = (char *)v60[325];
        v72 = (v62 - v64) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          goto LABEL_1032;
        v73 = v70 - (_QWORD)v64;
        v74 = (uint64_t)(v70 - (_QWORD)v64) >> 2;
        if (v74 <= v72 + 1)
          v74 = v72 + 1;
        if (v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
        {
          v76 = (char *)sub_40FC((uint64_t)(v60 + 327), v75);
          v62 = (char *)v60[326];
          v64 = (char *)v60[325];
        }
        else
        {
          v76 = 0;
        }
        v77 = &v76[8 * v72];
        v78 = &v76[8 * v75];
        *(_QWORD *)v77 = v61;
        v71 = v77 + 8;
        while (v62 != v64)
        {
          v80 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v77 - 1) = v80;
          v77 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v59 != 1)
        goto LABEL_102;
      v60 = *(_QWORD **)a1[1];
      v61 = *(_WORD *)(a1[2] + 50) & 0x1FFF;
      v62 = (char *)v60[326];
      v63 = v60[327];
      if ((unint64_t)v62 >= v63)
      {
        v64 = (char *)v60[325];
        v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_1032;
        v66 = v63 - (_QWORD)v64;
        v67 = (uint64_t)(v63 - (_QWORD)v64) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v60 + 327), v68);
          v62 = (char *)v60[326];
          v64 = (char *)v60[325];
        }
        else
        {
          v69 = 0;
        }
        v77 = &v69[8 * v65];
        v78 = &v69[8 * v68];
        *(_QWORD *)v77 = v61;
        v71 = v77 + 8;
        while (v62 != v64)
        {
          v79 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v77 - 1) = v79;
          v77 -= 8;
        }
LABEL_99:
        v60[325] = v77;
        v60[326] = v71;
        v60[327] = v78;
        if (v64)
          operator delete(v64);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v62 = v61;
    v71 = v62 + 8;
LABEL_101:
    v60[326] = v71;
LABEL_102:
    v81 = 1 << *(_DWORD *)(v3 + 48);
    if (v81 == 2)
    {
      v82 = *(_QWORD **)a1[1];
      v83 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      v84 = (char *)v82[329];
      v92 = v82[330];
      if ((unint64_t)v84 >= v92)
      {
        v86 = (char *)v82[328];
        v94 = (v84 - v86) >> 3;
        if ((unint64_t)(v94 + 1) >> 61)
          goto LABEL_1032;
        v95 = v92 - (_QWORD)v86;
        v96 = (uint64_t)(v92 - (_QWORD)v86) >> 2;
        if (v96 <= v94 + 1)
          v96 = v94 + 1;
        if (v95 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v96;
        if (v97)
        {
          v98 = (char *)sub_40FC((uint64_t)(v82 + 330), v97);
          v84 = (char *)v82[329];
          v86 = (char *)v82[328];
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[8 * v94];
        v100 = &v98[8 * v97];
        *(_QWORD *)v99 = v83;
        v93 = v99 + 8;
        while (v84 != v86)
        {
          v102 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v81 != 1)
        goto LABEL_134;
      v82 = *(_QWORD **)a1[1];
      v83 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      v84 = (char *)v82[329];
      v85 = v82[330];
      if ((unint64_t)v84 >= v85)
      {
        v86 = (char *)v82[328];
        v87 = (v84 - v86) >> 3;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_1032;
        v88 = v85 - (_QWORD)v86;
        v89 = (uint64_t)(v85 - (_QWORD)v86) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v82 + 330), v90);
          v84 = (char *)v82[329];
          v86 = (char *)v82[328];
        }
        else
        {
          v91 = 0;
        }
        v99 = &v91[8 * v87];
        v100 = &v91[8 * v90];
        *(_QWORD *)v99 = v83;
        v93 = v99 + 8;
        while (v84 != v86)
        {
          v101 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v82[328] = v99;
        v82[329] = v93;
        v82[330] = v100;
        if (v86)
          operator delete(v86);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v84 = v83;
    v93 = v84 + 8;
LABEL_133:
    v82[329] = v93;
LABEL_134:
    v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      v104 = *(_QWORD **)a1[1];
      v105 = *(_WORD *)(a1[2] + 84) & 0x1FFF;
      v106 = (char *)v104[332];
      v114 = v104[333];
      if ((unint64_t)v106 >= v114)
      {
        v108 = (char *)v104[331];
        v116 = (v106 - v108) >> 3;
        if ((unint64_t)(v116 + 1) >> 61)
          goto LABEL_1032;
        v117 = v114 - (_QWORD)v108;
        v118 = (uint64_t)(v114 - (_QWORD)v108) >> 2;
        if (v118 <= v116 + 1)
          v118 = v116 + 1;
        if (v117 >= 0x7FFFFFFFFFFFFFF8)
          v119 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v119 = v118;
        if (v119)
        {
          v120 = (char *)sub_40FC((uint64_t)(v104 + 333), v119);
          v106 = (char *)v104[332];
          v108 = (char *)v104[331];
        }
        else
        {
          v120 = 0;
        }
        v121 = &v120[8 * v116];
        v122 = &v120[8 * v119];
        *(_QWORD *)v121 = v105;
        v115 = v121 + 8;
        while (v106 != v108)
        {
          v124 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v121 - 1) = v124;
          v121 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1)
        goto LABEL_166;
      v104 = *(_QWORD **)a1[1];
      v105 = *(_WORD *)(a1[2] + 84) & 0x1FFF;
      v106 = (char *)v104[332];
      v107 = v104[333];
      if ((unint64_t)v106 >= v107)
      {
        v108 = (char *)v104[331];
        v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_1032;
        v110 = v107 - (_QWORD)v108;
        v111 = (uint64_t)(v107 - (_QWORD)v108) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v104 + 333), v112);
          v106 = (char *)v104[332];
          v108 = (char *)v104[331];
        }
        else
        {
          v113 = 0;
        }
        v121 = &v113[8 * v109];
        v122 = &v113[8 * v112];
        *(_QWORD *)v121 = v105;
        v115 = v121 + 8;
        while (v106 != v108)
        {
          v123 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v121 - 1) = v123;
          v121 -= 8;
        }
LABEL_163:
        v104[331] = v121;
        v104[332] = v115;
        v104[333] = v122;
        if (v108)
          operator delete(v108);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v106 = v105;
    v115 = v106 + 8;
LABEL_165:
    v104[332] = v115;
LABEL_166:
    v125 = 1 << *(_DWORD *)(v3 + 48);
    if (v125 == 2)
    {
      v126 = *(_QWORD **)a1[1];
      v127 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      v128 = (char *)v126[335];
      v136 = v126[336];
      if ((unint64_t)v128 >= v136)
      {
        v130 = (char *)v126[334];
        v138 = (v128 - v130) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_1032;
        v139 = v136 - (_QWORD)v130;
        v140 = (uint64_t)(v136 - (_QWORD)v130) >> 2;
        if (v140 <= v138 + 1)
          v140 = v138 + 1;
        if (v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
        {
          v142 = (char *)sub_40FC((uint64_t)(v126 + 336), v141);
          v128 = (char *)v126[335];
          v130 = (char *)v126[334];
        }
        else
        {
          v142 = 0;
        }
        v143 = &v142[8 * v138];
        v144 = &v142[8 * v141];
        *(_QWORD *)v143 = v127;
        v137 = v143 + 8;
        while (v128 != v130)
        {
          v146 = *((_QWORD *)v128 - 1);
          v128 -= 8;
          *((_QWORD *)v143 - 1) = v146;
          v143 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v125 != 1)
        goto LABEL_198;
      v126 = *(_QWORD **)a1[1];
      v127 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      v128 = (char *)v126[335];
      v129 = v126[336];
      if ((unint64_t)v128 >= v129)
      {
        v130 = (char *)v126[334];
        v131 = (v128 - v130) >> 3;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_1032;
        v132 = v129 - (_QWORD)v130;
        v133 = (uint64_t)(v129 - (_QWORD)v130) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v126 + 336), v134);
          v128 = (char *)v126[335];
          v130 = (char *)v126[334];
        }
        else
        {
          v135 = 0;
        }
        v143 = &v135[8 * v131];
        v144 = &v135[8 * v134];
        *(_QWORD *)v143 = v127;
        v137 = v143 + 8;
        while (v128 != v130)
        {
          v145 = *((_QWORD *)v128 - 1);
          v128 -= 8;
          *((_QWORD *)v143 - 1) = v145;
          v143 -= 8;
        }
LABEL_195:
        v126[334] = v143;
        v126[335] = v137;
        v126[336] = v144;
        if (v130)
          operator delete(v130);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v128 = v127;
    v137 = v128 + 8;
LABEL_197:
    v126[335] = v137;
LABEL_198:
    v147 = 1 << *(_DWORD *)(v3 + 48);
    if (v147 == 2)
    {
      v148 = *(_QWORD **)a1[1];
      v149 = *(_WORD *)(a1[2] + 52) & 0x1FFF;
      v150 = (char *)v148[338];
      v158 = v148[339];
      if ((unint64_t)v150 >= v158)
      {
        v152 = (char *)v148[337];
        v160 = (v150 - v152) >> 3;
        if ((unint64_t)(v160 + 1) >> 61)
          goto LABEL_1032;
        v161 = v158 - (_QWORD)v152;
        v162 = (uint64_t)(v158 - (_QWORD)v152) >> 2;
        if (v162 <= v160 + 1)
          v162 = v160 + 1;
        if (v161 >= 0x7FFFFFFFFFFFFFF8)
          v163 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v163 = v162;
        if (v163)
        {
          v164 = (char *)sub_40FC((uint64_t)(v148 + 339), v163);
          v150 = (char *)v148[338];
          v152 = (char *)v148[337];
        }
        else
        {
          v164 = 0;
        }
        v165 = &v164[8 * v160];
        v166 = &v164[8 * v163];
        *(_QWORD *)v165 = v149;
        v159 = v165 + 8;
        while (v150 != v152)
        {
          v168 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v165 - 1) = v168;
          v165 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v147 != 1)
        goto LABEL_230;
      v148 = *(_QWORD **)a1[1];
      v149 = *(_WORD *)(a1[2] + 52) & 0x1FFF;
      v150 = (char *)v148[338];
      v151 = v148[339];
      if ((unint64_t)v150 >= v151)
      {
        v152 = (char *)v148[337];
        v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_1032;
        v154 = v151 - (_QWORD)v152;
        v155 = (uint64_t)(v151 - (_QWORD)v152) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v148 + 339), v156);
          v150 = (char *)v148[338];
          v152 = (char *)v148[337];
        }
        else
        {
          v157 = 0;
        }
        v165 = &v157[8 * v153];
        v166 = &v157[8 * v156];
        *(_QWORD *)v165 = v149;
        v159 = v165 + 8;
        while (v150 != v152)
        {
          v167 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v165 - 1) = v167;
          v165 -= 8;
        }
LABEL_227:
        v148[337] = v165;
        v148[338] = v159;
        v148[339] = v166;
        if (v152)
          operator delete(v152);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v150 = v149;
    v159 = v150 + 8;
LABEL_229:
    v148[338] = v159;
LABEL_230:
    v169 = 1 << *(_DWORD *)(v3 + 48);
    if (v169 == 2)
    {
      v170 = *(_QWORD **)a1[1];
      v171 = *(_WORD *)(a1[2] + 36) & 0x1FFF;
      v172 = (char *)v170[341];
      v180 = v170[342];
      if ((unint64_t)v172 >= v180)
      {
        v174 = (char *)v170[340];
        v182 = (v172 - v174) >> 3;
        if ((unint64_t)(v182 + 1) >> 61)
          goto LABEL_1032;
        v183 = v180 - (_QWORD)v174;
        v184 = (uint64_t)(v180 - (_QWORD)v174) >> 2;
        if (v184 <= v182 + 1)
          v184 = v182 + 1;
        if (v183 >= 0x7FFFFFFFFFFFFFF8)
          v185 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v185 = v184;
        if (v185)
        {
          v186 = (char *)sub_40FC((uint64_t)(v170 + 342), v185);
          v172 = (char *)v170[341];
          v174 = (char *)v170[340];
        }
        else
        {
          v186 = 0;
        }
        v187 = &v186[8 * v182];
        v188 = &v186[8 * v185];
        *(_QWORD *)v187 = v171;
        v181 = v187 + 8;
        while (v172 != v174)
        {
          v190 = *((_QWORD *)v172 - 1);
          v172 -= 8;
          *((_QWORD *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v169 != 1)
        goto LABEL_262;
      v170 = *(_QWORD **)a1[1];
      v171 = *(_WORD *)(a1[2] + 36) & 0x1FFF;
      v172 = (char *)v170[341];
      v173 = v170[342];
      if ((unint64_t)v172 >= v173)
      {
        v174 = (char *)v170[340];
        v175 = (v172 - v174) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_1032;
        v176 = v173 - (_QWORD)v174;
        v177 = (uint64_t)(v173 - (_QWORD)v174) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v170 + 342), v178);
          v172 = (char *)v170[341];
          v174 = (char *)v170[340];
        }
        else
        {
          v179 = 0;
        }
        v187 = &v179[8 * v175];
        v188 = &v179[8 * v178];
        *(_QWORD *)v187 = v171;
        v181 = v187 + 8;
        while (v172 != v174)
        {
          v189 = *((_QWORD *)v172 - 1);
          v172 -= 8;
          *((_QWORD *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v170[340] = v187;
        v170[341] = v181;
        v170[342] = v188;
        if (v174)
          operator delete(v174);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v172 = v171;
    v181 = v172 + 8;
LABEL_261:
    v170[341] = v181;
LABEL_262:
    v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 86) & 0x1FFF;
      v194 = (char *)v192[344];
      v202 = v192[345];
      if ((unint64_t)v194 >= v202)
      {
        v196 = (char *)v192[343];
        v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61)
          goto LABEL_1032;
        v205 = v202 - (_QWORD)v196;
        v206 = (uint64_t)(v202 - (_QWORD)v196) >> 2;
        if (v206 <= v204 + 1)
          v206 = v204 + 1;
        if (v205 >= 0x7FFFFFFFFFFFFFF8)
          v207 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v207 = v206;
        if (v207)
        {
          v208 = (char *)sub_40FC((uint64_t)(v192 + 345), v207);
          v194 = (char *)v192[344];
          v196 = (char *)v192[343];
        }
        else
        {
          v208 = 0;
        }
        v209 = &v208[8 * v204];
        v210 = &v208[8 * v207];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v212 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1)
        goto LABEL_294;
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 86) & 0x1FFF;
      v194 = (char *)v192[344];
      v195 = v192[345];
      if ((unint64_t)v194 >= v195)
      {
        v196 = (char *)v192[343];
        v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_1032;
        v198 = v195 - (_QWORD)v196;
        v199 = (uint64_t)(v195 - (_QWORD)v196) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v192 + 345), v200);
          v194 = (char *)v192[344];
          v196 = (char *)v192[343];
        }
        else
        {
          v201 = 0;
        }
        v209 = &v201[8 * v197];
        v210 = &v201[8 * v200];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v211 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[343] = v209;
        v192[344] = v203;
        v192[345] = v210;
        if (v196)
          operator delete(v196);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v194 = v193;
    v203 = v194 + 8;
LABEL_293:
    v192[344] = v203;
LABEL_294:
    v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      v214 = *(_QWORD **)a1[1];
      v215 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      v216 = (char *)v214[347];
      v224 = v214[348];
      if ((unint64_t)v216 >= v224)
      {
        v218 = (char *)v214[346];
        v226 = (v216 - v218) >> 3;
        if ((unint64_t)(v226 + 1) >> 61)
          goto LABEL_1032;
        v227 = v224 - (_QWORD)v218;
        v228 = (uint64_t)(v224 - (_QWORD)v218) >> 2;
        if (v228 <= v226 + 1)
          v228 = v226 + 1;
        if (v227 >= 0x7FFFFFFFFFFFFFF8)
          v229 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v229 = v228;
        if (v229)
        {
          v230 = (char *)sub_40FC((uint64_t)(v214 + 348), v229);
          v216 = (char *)v214[347];
          v218 = (char *)v214[346];
        }
        else
        {
          v230 = 0;
        }
        v231 = &v230[8 * v226];
        v232 = &v230[8 * v229];
        *(_QWORD *)v231 = v215;
        v225 = v231 + 8;
        while (v216 != v218)
        {
          v234 = *((_QWORD *)v216 - 1);
          v216 -= 8;
          *((_QWORD *)v231 - 1) = v234;
          v231 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1)
        goto LABEL_326;
      v214 = *(_QWORD **)a1[1];
      v215 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      v216 = (char *)v214[347];
      v217 = v214[348];
      if ((unint64_t)v216 >= v217)
      {
        v218 = (char *)v214[346];
        v219 = (v216 - v218) >> 3;
        if ((unint64_t)(v219 + 1) >> 61)
          goto LABEL_1032;
        v220 = v217 - (_QWORD)v218;
        v221 = (uint64_t)(v217 - (_QWORD)v218) >> 2;
        if (v221 <= v219 + 1)
          v221 = v219 + 1;
        if (v220 >= 0x7FFFFFFFFFFFFFF8)
          v222 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v222 = v221;
        if (v222)
        {
          v223 = (char *)sub_40FC((uint64_t)(v214 + 348), v222);
          v216 = (char *)v214[347];
          v218 = (char *)v214[346];
        }
        else
        {
          v223 = 0;
        }
        v231 = &v223[8 * v219];
        v232 = &v223[8 * v222];
        *(_QWORD *)v231 = v215;
        v225 = v231 + 8;
        while (v216 != v218)
        {
          v233 = *((_QWORD *)v216 - 1);
          v216 -= 8;
          *((_QWORD *)v231 - 1) = v233;
          v231 -= 8;
        }
LABEL_323:
        v214[346] = v231;
        v214[347] = v225;
        v214[348] = v232;
        if (v218)
          operator delete(v218);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v216 = v215;
    v225 = v216 + 8;
LABEL_325:
    v214[347] = v225;
LABEL_326:
    v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      v236 = *(_QWORD **)a1[1];
      v237 = *(_WORD *)(a1[2] + 54) & 0x1FFF;
      v238 = (char *)v236[350];
      v246 = v236[351];
      if ((unint64_t)v238 >= v246)
      {
        v240 = (char *)v236[349];
        v248 = (v238 - v240) >> 3;
        if ((unint64_t)(v248 + 1) >> 61)
          goto LABEL_1032;
        v249 = v246 - (_QWORD)v240;
        v250 = (uint64_t)(v246 - (_QWORD)v240) >> 2;
        if (v250 <= v248 + 1)
          v250 = v248 + 1;
        if (v249 >= 0x7FFFFFFFFFFFFFF8)
          v251 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v251 = v250;
        if (v251)
        {
          v252 = (char *)sub_40FC((uint64_t)(v236 + 351), v251);
          v238 = (char *)v236[350];
          v240 = (char *)v236[349];
        }
        else
        {
          v252 = 0;
        }
        v253 = &v252[8 * v248];
        v254 = &v252[8 * v251];
        *(_QWORD *)v253 = v237;
        v247 = v253 + 8;
        while (v238 != v240)
        {
          v256 = *((_QWORD *)v238 - 1);
          v238 -= 8;
          *((_QWORD *)v253 - 1) = v256;
          v253 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1)
        goto LABEL_358;
      v236 = *(_QWORD **)a1[1];
      v237 = *(_WORD *)(a1[2] + 54) & 0x1FFF;
      v238 = (char *)v236[350];
      v239 = v236[351];
      if ((unint64_t)v238 >= v239)
      {
        v240 = (char *)v236[349];
        v241 = (v238 - v240) >> 3;
        if ((unint64_t)(v241 + 1) >> 61)
          goto LABEL_1032;
        v242 = v239 - (_QWORD)v240;
        v243 = (uint64_t)(v239 - (_QWORD)v240) >> 2;
        if (v243 <= v241 + 1)
          v243 = v241 + 1;
        if (v242 >= 0x7FFFFFFFFFFFFFF8)
          v244 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v244 = v243;
        if (v244)
        {
          v245 = (char *)sub_40FC((uint64_t)(v236 + 351), v244);
          v238 = (char *)v236[350];
          v240 = (char *)v236[349];
        }
        else
        {
          v245 = 0;
        }
        v253 = &v245[8 * v241];
        v254 = &v245[8 * v244];
        *(_QWORD *)v253 = v237;
        v247 = v253 + 8;
        while (v238 != v240)
        {
          v255 = *((_QWORD *)v238 - 1);
          v238 -= 8;
          *((_QWORD *)v253 - 1) = v255;
          v253 -= 8;
        }
LABEL_355:
        v236[349] = v253;
        v236[350] = v247;
        v236[351] = v254;
        if (v240)
          operator delete(v240);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v238 = v237;
    v247 = v238 + 8;
LABEL_357:
    v236[350] = v247;
LABEL_358:
    v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      v258 = *(_QWORD **)a1[1];
      v259 = *(_WORD *)(a1[2] + 38) & 0x1FFF;
      v260 = (char *)v258[353];
      v268 = v258[354];
      if ((unint64_t)v260 >= v268)
      {
        v262 = (char *)v258[352];
        v270 = (v260 - v262) >> 3;
        if ((unint64_t)(v270 + 1) >> 61)
          goto LABEL_1032;
        v271 = v268 - (_QWORD)v262;
        v272 = (uint64_t)(v268 - (_QWORD)v262) >> 2;
        if (v272 <= v270 + 1)
          v272 = v270 + 1;
        if (v271 >= 0x7FFFFFFFFFFFFFF8)
          v273 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v273 = v272;
        if (v273)
        {
          v274 = (char *)sub_40FC((uint64_t)(v258 + 354), v273);
          v260 = (char *)v258[353];
          v262 = (char *)v258[352];
        }
        else
        {
          v274 = 0;
        }
        v275 = &v274[8 * v270];
        v276 = &v274[8 * v273];
        *(_QWORD *)v275 = v259;
        v269 = v275 + 8;
        while (v260 != v262)
        {
          v278 = *((_QWORD *)v260 - 1);
          v260 -= 8;
          *((_QWORD *)v275 - 1) = v278;
          v275 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1)
        goto LABEL_390;
      v258 = *(_QWORD **)a1[1];
      v259 = *(_WORD *)(a1[2] + 38) & 0x1FFF;
      v260 = (char *)v258[353];
      v261 = v258[354];
      if ((unint64_t)v260 >= v261)
      {
        v262 = (char *)v258[352];
        v263 = (v260 - v262) >> 3;
        if ((unint64_t)(v263 + 1) >> 61)
          goto LABEL_1032;
        v264 = v261 - (_QWORD)v262;
        v265 = (uint64_t)(v261 - (_QWORD)v262) >> 2;
        if (v265 <= v263 + 1)
          v265 = v263 + 1;
        if (v264 >= 0x7FFFFFFFFFFFFFF8)
          v266 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v266 = v265;
        if (v266)
        {
          v267 = (char *)sub_40FC((uint64_t)(v258 + 354), v266);
          v260 = (char *)v258[353];
          v262 = (char *)v258[352];
        }
        else
        {
          v267 = 0;
        }
        v275 = &v267[8 * v263];
        v276 = &v267[8 * v266];
        *(_QWORD *)v275 = v259;
        v269 = v275 + 8;
        while (v260 != v262)
        {
          v277 = *((_QWORD *)v260 - 1);
          v260 -= 8;
          *((_QWORD *)v275 - 1) = v277;
          v275 -= 8;
        }
LABEL_387:
        v258[352] = v275;
        v258[353] = v269;
        v258[354] = v276;
        if (v262)
          operator delete(v262);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v260 = v259;
    v269 = v260 + 8;
LABEL_389:
    v258[353] = v269;
LABEL_390:
    v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      v280 = *(_QWORD **)a1[1];
      v281 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      v282 = (char *)v280[356];
      v290 = v280[357];
      if ((unint64_t)v282 >= v290)
      {
        v284 = (char *)v280[355];
        v292 = (v282 - v284) >> 3;
        if ((unint64_t)(v292 + 1) >> 61)
          goto LABEL_1032;
        v293 = v290 - (_QWORD)v284;
        v294 = (uint64_t)(v290 - (_QWORD)v284) >> 2;
        if (v294 <= v292 + 1)
          v294 = v292 + 1;
        if (v293 >= 0x7FFFFFFFFFFFFFF8)
          v295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v295 = v294;
        if (v295)
        {
          v296 = (char *)sub_40FC((uint64_t)(v280 + 357), v295);
          v282 = (char *)v280[356];
          v284 = (char *)v280[355];
        }
        else
        {
          v296 = 0;
        }
        v297 = &v296[8 * v292];
        v298 = &v296[8 * v295];
        *(_QWORD *)v297 = v281;
        v291 = v297 + 8;
        while (v282 != v284)
        {
          v300 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v297 - 1) = v300;
          v297 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v279 != 1)
        goto LABEL_422;
      v280 = *(_QWORD **)a1[1];
      v281 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      v282 = (char *)v280[356];
      v283 = v280[357];
      if ((unint64_t)v282 >= v283)
      {
        v284 = (char *)v280[355];
        v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61)
          goto LABEL_1032;
        v286 = v283 - (_QWORD)v284;
        v287 = (uint64_t)(v283 - (_QWORD)v284) >> 2;
        if (v287 <= v285 + 1)
          v287 = v285 + 1;
        if (v286 >= 0x7FFFFFFFFFFFFFF8)
          v288 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v288 = v287;
        if (v288)
        {
          v289 = (char *)sub_40FC((uint64_t)(v280 + 357), v288);
          v282 = (char *)v280[356];
          v284 = (char *)v280[355];
        }
        else
        {
          v289 = 0;
        }
        v297 = &v289[8 * v285];
        v298 = &v289[8 * v288];
        *(_QWORD *)v297 = v281;
        v291 = v297 + 8;
        while (v282 != v284)
        {
          v299 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v297 - 1) = v299;
          v297 -= 8;
        }
LABEL_419:
        v280[355] = v297;
        v280[356] = v291;
        v280[357] = v298;
        if (v284)
          operator delete(v284);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v282 = v281;
    v291 = v282 + 8;
LABEL_421:
    v280[356] = v291;
LABEL_422:
    v301 = 1 << *(_DWORD *)(v3 + 48);
    if (v301 == 2)
    {
      v302 = *(_QWORD **)a1[1];
      v303 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      v304 = (char *)v302[359];
      v312 = v302[360];
      if ((unint64_t)v304 >= v312)
      {
        v306 = (char *)v302[358];
        v314 = (v304 - v306) >> 3;
        if ((unint64_t)(v314 + 1) >> 61)
          goto LABEL_1032;
        v315 = v312 - (_QWORD)v306;
        v316 = (uint64_t)(v312 - (_QWORD)v306) >> 2;
        if (v316 <= v314 + 1)
          v316 = v314 + 1;
        if (v315 >= 0x7FFFFFFFFFFFFFF8)
          v317 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v317 = v316;
        if (v317)
        {
          v318 = (char *)sub_40FC((uint64_t)(v302 + 360), v317);
          v304 = (char *)v302[359];
          v306 = (char *)v302[358];
        }
        else
        {
          v318 = 0;
        }
        v319 = &v318[8 * v314];
        v320 = &v318[8 * v317];
        *(_QWORD *)v319 = v303;
        v313 = v319 + 8;
        while (v304 != v306)
        {
          v322 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *((_QWORD *)v319 - 1) = v322;
          v319 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v301 != 1)
        goto LABEL_454;
      v302 = *(_QWORD **)a1[1];
      v303 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      v304 = (char *)v302[359];
      v305 = v302[360];
      if ((unint64_t)v304 >= v305)
      {
        v306 = (char *)v302[358];
        v307 = (v304 - v306) >> 3;
        if ((unint64_t)(v307 + 1) >> 61)
          goto LABEL_1032;
        v308 = v305 - (_QWORD)v306;
        v309 = (uint64_t)(v305 - (_QWORD)v306) >> 2;
        if (v309 <= v307 + 1)
          v309 = v307 + 1;
        if (v308 >= 0x7FFFFFFFFFFFFFF8)
          v310 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v310 = v309;
        if (v310)
        {
          v311 = (char *)sub_40FC((uint64_t)(v302 + 360), v310);
          v304 = (char *)v302[359];
          v306 = (char *)v302[358];
        }
        else
        {
          v311 = 0;
        }
        v319 = &v311[8 * v307];
        v320 = &v311[8 * v310];
        *(_QWORD *)v319 = v303;
        v313 = v319 + 8;
        while (v304 != v306)
        {
          v321 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *((_QWORD *)v319 - 1) = v321;
          v319 -= 8;
        }
LABEL_451:
        v302[358] = v319;
        v302[359] = v313;
        v302[360] = v320;
        if (v306)
          operator delete(v306);
        goto LABEL_453;
      }
    }
    *(_QWORD *)v304 = v303;
    v313 = v304 + 8;
LABEL_453:
    v302[359] = v313;
LABEL_454:
    v323 = 1 << *(_DWORD *)(v3 + 48);
    if (v323 == 2)
    {
      v324 = *(_QWORD **)a1[1];
      v325 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      v326 = (char *)v324[362];
      v334 = v324[363];
      if ((unint64_t)v326 >= v334)
      {
        v328 = (char *)v324[361];
        v336 = (v326 - v328) >> 3;
        if ((unint64_t)(v336 + 1) >> 61)
          goto LABEL_1032;
        v337 = v334 - (_QWORD)v328;
        v338 = (uint64_t)(v334 - (_QWORD)v328) >> 2;
        if (v338 <= v336 + 1)
          v338 = v336 + 1;
        if (v337 >= 0x7FFFFFFFFFFFFFF8)
          v339 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v339 = v338;
        if (v339)
        {
          v340 = (char *)sub_40FC((uint64_t)(v324 + 363), v339);
          v326 = (char *)v324[362];
          v328 = (char *)v324[361];
        }
        else
        {
          v340 = 0;
        }
        v341 = &v340[8 * v336];
        v342 = &v340[8 * v339];
        *(_QWORD *)v341 = v325;
        v335 = v341 + 8;
        while (v326 != v328)
        {
          v344 = *((_QWORD *)v326 - 1);
          v326 -= 8;
          *((_QWORD *)v341 - 1) = v344;
          v341 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v323 != 1)
        goto LABEL_486;
      v324 = *(_QWORD **)a1[1];
      v325 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      v326 = (char *)v324[362];
      v327 = v324[363];
      if ((unint64_t)v326 >= v327)
      {
        v328 = (char *)v324[361];
        v329 = (v326 - v328) >> 3;
        if ((unint64_t)(v329 + 1) >> 61)
          goto LABEL_1032;
        v330 = v327 - (_QWORD)v328;
        v331 = (uint64_t)(v327 - (_QWORD)v328) >> 2;
        if (v331 <= v329 + 1)
          v331 = v329 + 1;
        if (v330 >= 0x7FFFFFFFFFFFFFF8)
          v332 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v332 = v331;
        if (v332)
        {
          v333 = (char *)sub_40FC((uint64_t)(v324 + 363), v332);
          v326 = (char *)v324[362];
          v328 = (char *)v324[361];
        }
        else
        {
          v333 = 0;
        }
        v341 = &v333[8 * v329];
        v342 = &v333[8 * v332];
        *(_QWORD *)v341 = v325;
        v335 = v341 + 8;
        while (v326 != v328)
        {
          v343 = *((_QWORD *)v326 - 1);
          v326 -= 8;
          *((_QWORD *)v341 - 1) = v343;
          v341 -= 8;
        }
LABEL_483:
        v324[361] = v341;
        v324[362] = v335;
        v324[363] = v342;
        if (v328)
          operator delete(v328);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v326 = v325;
    v335 = v326 + 8;
LABEL_485:
    v324[362] = v335;
LABEL_486:
    v345 = 1 << *(_DWORD *)(v3 + 48);
    if (v345 == 2)
    {
      v346 = *(_QWORD **)a1[1];
      v347 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      v348 = (char *)v346[365];
      v356 = v346[366];
      if ((unint64_t)v348 >= v356)
      {
        v350 = (char *)v346[364];
        v358 = (v348 - v350) >> 3;
        if ((unint64_t)(v358 + 1) >> 61)
          goto LABEL_1032;
        v359 = v356 - (_QWORD)v350;
        v360 = (uint64_t)(v356 - (_QWORD)v350) >> 2;
        if (v360 <= v358 + 1)
          v360 = v358 + 1;
        if (v359 >= 0x7FFFFFFFFFFFFFF8)
          v361 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v361 = v360;
        if (v361)
        {
          v362 = (char *)sub_40FC((uint64_t)(v346 + 366), v361);
          v348 = (char *)v346[365];
          v350 = (char *)v346[364];
        }
        else
        {
          v362 = 0;
        }
        v363 = &v362[8 * v358];
        v364 = &v362[8 * v361];
        *(_QWORD *)v363 = v347;
        v357 = v363 + 8;
        while (v348 != v350)
        {
          v366 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v363 - 1) = v366;
          v363 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v345 != 1)
        goto LABEL_518;
      v346 = *(_QWORD **)a1[1];
      v347 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      v348 = (char *)v346[365];
      v349 = v346[366];
      if ((unint64_t)v348 >= v349)
      {
        v350 = (char *)v346[364];
        v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61)
          goto LABEL_1032;
        v352 = v349 - (_QWORD)v350;
        v353 = (uint64_t)(v349 - (_QWORD)v350) >> 2;
        if (v353 <= v351 + 1)
          v353 = v351 + 1;
        if (v352 >= 0x7FFFFFFFFFFFFFF8)
          v354 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v354 = v353;
        if (v354)
        {
          v355 = (char *)sub_40FC((uint64_t)(v346 + 366), v354);
          v348 = (char *)v346[365];
          v350 = (char *)v346[364];
        }
        else
        {
          v355 = 0;
        }
        v363 = &v355[8 * v351];
        v364 = &v355[8 * v354];
        *(_QWORD *)v363 = v347;
        v357 = v363 + 8;
        while (v348 != v350)
        {
          v365 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v363 - 1) = v365;
          v363 -= 8;
        }
LABEL_515:
        v346[364] = v363;
        v346[365] = v357;
        v346[366] = v364;
        if (v350)
          operator delete(v350);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v348 = v347;
    v357 = v348 + 8;
LABEL_517:
    v346[365] = v357;
LABEL_518:
    v367 = 1 << *(_DWORD *)(v3 + 48);
    if (v367 == 2)
    {
      v368 = *(_QWORD **)a1[1];
      v369 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      v370 = (char *)v368[368];
      v378 = v368[369];
      if ((unint64_t)v370 >= v378)
      {
        v372 = (char *)v368[367];
        v380 = (v370 - v372) >> 3;
        if ((unint64_t)(v380 + 1) >> 61)
          goto LABEL_1032;
        v381 = v378 - (_QWORD)v372;
        v382 = (uint64_t)(v378 - (_QWORD)v372) >> 2;
        if (v382 <= v380 + 1)
          v382 = v380 + 1;
        if (v381 >= 0x7FFFFFFFFFFFFFF8)
          v383 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v383 = v382;
        if (v383)
        {
          v384 = (char *)sub_40FC((uint64_t)(v368 + 369), v383);
          v370 = (char *)v368[368];
          v372 = (char *)v368[367];
        }
        else
        {
          v384 = 0;
        }
        v385 = &v384[8 * v380];
        v386 = &v384[8 * v383];
        *(_QWORD *)v385 = v369;
        v379 = v385 + 8;
        while (v370 != v372)
        {
          v388 = *((_QWORD *)v370 - 1);
          v370 -= 8;
          *((_QWORD *)v385 - 1) = v388;
          v385 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v367 != 1)
        goto LABEL_550;
      v368 = *(_QWORD **)a1[1];
      v369 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      v370 = (char *)v368[368];
      v371 = v368[369];
      if ((unint64_t)v370 >= v371)
      {
        v372 = (char *)v368[367];
        v373 = (v370 - v372) >> 3;
        if ((unint64_t)(v373 + 1) >> 61)
          goto LABEL_1032;
        v374 = v371 - (_QWORD)v372;
        v375 = (uint64_t)(v371 - (_QWORD)v372) >> 2;
        if (v375 <= v373 + 1)
          v375 = v373 + 1;
        if (v374 >= 0x7FFFFFFFFFFFFFF8)
          v376 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v376 = v375;
        if (v376)
        {
          v377 = (char *)sub_40FC((uint64_t)(v368 + 369), v376);
          v370 = (char *)v368[368];
          v372 = (char *)v368[367];
        }
        else
        {
          v377 = 0;
        }
        v385 = &v377[8 * v373];
        v386 = &v377[8 * v376];
        *(_QWORD *)v385 = v369;
        v379 = v385 + 8;
        while (v370 != v372)
        {
          v387 = *((_QWORD *)v370 - 1);
          v370 -= 8;
          *((_QWORD *)v385 - 1) = v387;
          v385 -= 8;
        }
LABEL_547:
        v368[367] = v385;
        v368[368] = v379;
        v368[369] = v386;
        if (v372)
          operator delete(v372);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v370 = v369;
    v379 = v370 + 8;
LABEL_549:
    v368[368] = v379;
LABEL_550:
    v389 = 1 << *(_DWORD *)(v3 + 48);
    if (v389 == 2)
    {
      v390 = *(_QWORD **)a1[1];
      v391 = *(_WORD *)(a1[2] + 62) & 0x1FFF;
      v392 = (char *)v390[371];
      v400 = v390[372];
      if ((unint64_t)v392 >= v400)
      {
        v394 = (char *)v390[370];
        v402 = (v392 - v394) >> 3;
        if ((unint64_t)(v402 + 1) >> 61)
          goto LABEL_1032;
        v403 = v400 - (_QWORD)v394;
        v404 = (uint64_t)(v400 - (_QWORD)v394) >> 2;
        if (v404 <= v402 + 1)
          v404 = v402 + 1;
        if (v403 >= 0x7FFFFFFFFFFFFFF8)
          v405 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v405 = v404;
        if (v405)
        {
          v406 = (char *)sub_40FC((uint64_t)(v390 + 372), v405);
          v392 = (char *)v390[371];
          v394 = (char *)v390[370];
        }
        else
        {
          v406 = 0;
        }
        v407 = &v406[8 * v402];
        v408 = &v406[8 * v405];
        *(_QWORD *)v407 = v391;
        v401 = v407 + 8;
        while (v392 != v394)
        {
          v410 = *((_QWORD *)v392 - 1);
          v392 -= 8;
          *((_QWORD *)v407 - 1) = v410;
          v407 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v389 != 1)
        goto LABEL_582;
      v390 = *(_QWORD **)a1[1];
      v391 = *(_WORD *)(a1[2] + 62) & 0x1FFF;
      v392 = (char *)v390[371];
      v393 = v390[372];
      if ((unint64_t)v392 >= v393)
      {
        v394 = (char *)v390[370];
        v395 = (v392 - v394) >> 3;
        if ((unint64_t)(v395 + 1) >> 61)
          goto LABEL_1032;
        v396 = v393 - (_QWORD)v394;
        v397 = (uint64_t)(v393 - (_QWORD)v394) >> 2;
        if (v397 <= v395 + 1)
          v397 = v395 + 1;
        if (v396 >= 0x7FFFFFFFFFFFFFF8)
          v398 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v398 = v397;
        if (v398)
        {
          v399 = (char *)sub_40FC((uint64_t)(v390 + 372), v398);
          v392 = (char *)v390[371];
          v394 = (char *)v390[370];
        }
        else
        {
          v399 = 0;
        }
        v407 = &v399[8 * v395];
        v408 = &v399[8 * v398];
        *(_QWORD *)v407 = v391;
        v401 = v407 + 8;
        while (v392 != v394)
        {
          v409 = *((_QWORD *)v392 - 1);
          v392 -= 8;
          *((_QWORD *)v407 - 1) = v409;
          v407 -= 8;
        }
LABEL_579:
        v390[370] = v407;
        v390[371] = v401;
        v390[372] = v408;
        if (v394)
          operator delete(v394);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v392 = v391;
    v401 = v392 + 8;
LABEL_581:
    v390[371] = v401;
LABEL_582:
    v411 = 1 << *(_DWORD *)(v3 + 48);
    if (v411 == 2)
    {
      v412 = *(_QWORD **)a1[1];
      v413 = *(_WORD *)(a1[2] + 46) & 0x1FFF;
      v414 = (char *)v412[374];
      v422 = v412[375];
      if ((unint64_t)v414 >= v422)
      {
        v416 = (char *)v412[373];
        v424 = (v414 - v416) >> 3;
        if ((unint64_t)(v424 + 1) >> 61)
          goto LABEL_1032;
        v425 = v422 - (_QWORD)v416;
        v426 = (uint64_t)(v422 - (_QWORD)v416) >> 2;
        if (v426 <= v424 + 1)
          v426 = v424 + 1;
        if (v425 >= 0x7FFFFFFFFFFFFFF8)
          v427 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v427 = v426;
        if (v427)
        {
          v428 = (char *)sub_40FC((uint64_t)(v412 + 375), v427);
          v414 = (char *)v412[374];
          v416 = (char *)v412[373];
        }
        else
        {
          v428 = 0;
        }
        v429 = &v428[8 * v424];
        v430 = &v428[8 * v427];
        *(_QWORD *)v429 = v413;
        v423 = v429 + 8;
        while (v414 != v416)
        {
          v432 = *((_QWORD *)v414 - 1);
          v414 -= 8;
          *((_QWORD *)v429 - 1) = v432;
          v429 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v411 != 1)
        goto LABEL_614;
      v412 = *(_QWORD **)a1[1];
      v413 = *(_WORD *)(a1[2] + 46) & 0x1FFF;
      v414 = (char *)v412[374];
      v415 = v412[375];
      if ((unint64_t)v414 >= v415)
      {
        v416 = (char *)v412[373];
        v417 = (v414 - v416) >> 3;
        if ((unint64_t)(v417 + 1) >> 61)
          goto LABEL_1032;
        v418 = v415 - (_QWORD)v416;
        v419 = (uint64_t)(v415 - (_QWORD)v416) >> 2;
        if (v419 <= v417 + 1)
          v419 = v417 + 1;
        if (v418 >= 0x7FFFFFFFFFFFFFF8)
          v420 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v420 = v419;
        if (v420)
        {
          v421 = (char *)sub_40FC((uint64_t)(v412 + 375), v420);
          v414 = (char *)v412[374];
          v416 = (char *)v412[373];
        }
        else
        {
          v421 = 0;
        }
        v429 = &v421[8 * v417];
        v430 = &v421[8 * v420];
        *(_QWORD *)v429 = v413;
        v423 = v429 + 8;
        while (v414 != v416)
        {
          v431 = *((_QWORD *)v414 - 1);
          v414 -= 8;
          *((_QWORD *)v429 - 1) = v431;
          v429 -= 8;
        }
LABEL_611:
        v412[373] = v429;
        v412[374] = v423;
        v412[375] = v430;
        if (v416)
          operator delete(v416);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v414 = v413;
    v423 = v414 + 8;
LABEL_613:
    v412[374] = v423;
LABEL_614:
    v433 = 1 << *(_DWORD *)(v3 + 48);
    if (v433 == 2)
    {
      v434 = *(_QWORD **)a1[1];
      v435 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      v436 = (char *)v434[377];
      v444 = v434[378];
      if ((unint64_t)v436 >= v444)
      {
        v438 = (char *)v434[376];
        v446 = (v436 - v438) >> 3;
        if ((unint64_t)(v446 + 1) >> 61)
          goto LABEL_1032;
        v447 = v444 - (_QWORD)v438;
        v448 = (uint64_t)(v444 - (_QWORD)v438) >> 2;
        if (v448 <= v446 + 1)
          v448 = v446 + 1;
        if (v447 >= 0x7FFFFFFFFFFFFFF8)
          v449 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v449 = v448;
        if (v449)
        {
          v450 = (char *)sub_40FC((uint64_t)(v434 + 378), v449);
          v436 = (char *)v434[377];
          v438 = (char *)v434[376];
        }
        else
        {
          v450 = 0;
        }
        v451 = &v450[8 * v446];
        v452 = &v450[8 * v449];
        *(_QWORD *)v451 = v435;
        v445 = v451 + 8;
        while (v436 != v438)
        {
          v454 = *((_QWORD *)v436 - 1);
          v436 -= 8;
          *((_QWORD *)v451 - 1) = v454;
          v451 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v433 != 1)
        goto LABEL_646;
      v434 = *(_QWORD **)a1[1];
      v435 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      v436 = (char *)v434[377];
      v437 = v434[378];
      if ((unint64_t)v436 >= v437)
      {
        v438 = (char *)v434[376];
        v439 = (v436 - v438) >> 3;
        if ((unint64_t)(v439 + 1) >> 61)
          goto LABEL_1032;
        v440 = v437 - (_QWORD)v438;
        v441 = (uint64_t)(v437 - (_QWORD)v438) >> 2;
        if (v441 <= v439 + 1)
          v441 = v439 + 1;
        if (v440 >= 0x7FFFFFFFFFFFFFF8)
          v442 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v442 = v441;
        if (v442)
        {
          v443 = (char *)sub_40FC((uint64_t)(v434 + 378), v442);
          v436 = (char *)v434[377];
          v438 = (char *)v434[376];
        }
        else
        {
          v443 = 0;
        }
        v451 = &v443[8 * v439];
        v452 = &v443[8 * v442];
        *(_QWORD *)v451 = v435;
        v445 = v451 + 8;
        while (v436 != v438)
        {
          v453 = *((_QWORD *)v436 - 1);
          v436 -= 8;
          *((_QWORD *)v451 - 1) = v453;
          v451 -= 8;
        }
LABEL_643:
        v434[376] = v451;
        v434[377] = v445;
        v434[378] = v452;
        if (v438)
          operator delete(v438);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v436 = v435;
    v445 = v436 + 8;
LABEL_645:
    v434[377] = v445;
LABEL_646:
    v455 = 1 << *(_DWORD *)(v3 + 48);
    if (v455 == 2)
    {
      v456 = *(_QWORD **)a1[1];
      v457 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      v458 = (char *)v456[380];
      v466 = v456[381];
      if ((unint64_t)v458 >= v466)
      {
        v460 = (char *)v456[379];
        v468 = (v458 - v460) >> 3;
        if ((unint64_t)(v468 + 1) >> 61)
          goto LABEL_1032;
        v469 = v466 - (_QWORD)v460;
        v470 = (uint64_t)(v466 - (_QWORD)v460) >> 2;
        if (v470 <= v468 + 1)
          v470 = v468 + 1;
        if (v469 >= 0x7FFFFFFFFFFFFFF8)
          v471 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v471 = v470;
        if (v471)
        {
          v472 = (char *)sub_40FC((uint64_t)(v456 + 381), v471);
          v458 = (char *)v456[380];
          v460 = (char *)v456[379];
        }
        else
        {
          v472 = 0;
        }
        v473 = &v472[8 * v468];
        v474 = &v472[8 * v471];
        *(_QWORD *)v473 = v457;
        v467 = v473 + 8;
        while (v458 != v460)
        {
          v476 = *((_QWORD *)v458 - 1);
          v458 -= 8;
          *((_QWORD *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v455 != 1)
        goto LABEL_678;
      v456 = *(_QWORD **)a1[1];
      v457 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      v458 = (char *)v456[380];
      v459 = v456[381];
      if ((unint64_t)v458 >= v459)
      {
        v460 = (char *)v456[379];
        v461 = (v458 - v460) >> 3;
        if ((unint64_t)(v461 + 1) >> 61)
          goto LABEL_1032;
        v462 = v459 - (_QWORD)v460;
        v463 = (uint64_t)(v459 - (_QWORD)v460) >> 2;
        if (v463 <= v461 + 1)
          v463 = v461 + 1;
        if (v462 >= 0x7FFFFFFFFFFFFFF8)
          v464 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v464 = v463;
        if (v464)
        {
          v465 = (char *)sub_40FC((uint64_t)(v456 + 381), v464);
          v458 = (char *)v456[380];
          v460 = (char *)v456[379];
        }
        else
        {
          v465 = 0;
        }
        v473 = &v465[8 * v461];
        v474 = &v465[8 * v464];
        *(_QWORD *)v473 = v457;
        v467 = v473 + 8;
        while (v458 != v460)
        {
          v475 = *((_QWORD *)v458 - 1);
          v458 -= 8;
          *((_QWORD *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_675:
        v456[379] = v473;
        v456[380] = v467;
        v456[381] = v474;
        if (v460)
          operator delete(v460);
        goto LABEL_677;
      }
    }
    *(_QWORD *)v458 = v457;
    v467 = v458 + 8;
LABEL_677:
    v456[380] = v467;
LABEL_678:
    v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      v478 = *(_QWORD **)a1[1];
      v479 = *(_WORD *)(a1[2] + 64) & 0x1FFF;
      v480 = (char *)v478[383];
      v488 = v478[384];
      if ((unint64_t)v480 >= v488)
      {
        v482 = (char *)v478[382];
        v490 = (v480 - v482) >> 3;
        if ((unint64_t)(v490 + 1) >> 61)
          goto LABEL_1032;
        v491 = v488 - (_QWORD)v482;
        v492 = (uint64_t)(v488 - (_QWORD)v482) >> 2;
        if (v492 <= v490 + 1)
          v492 = v490 + 1;
        if (v491 >= 0x7FFFFFFFFFFFFFF8)
          v493 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v493 = v492;
        if (v493)
        {
          v494 = (char *)sub_40FC((uint64_t)(v478 + 384), v493);
          v480 = (char *)v478[383];
          v482 = (char *)v478[382];
        }
        else
        {
          v494 = 0;
        }
        v495 = &v494[8 * v490];
        v496 = &v494[8 * v493];
        *(_QWORD *)v495 = v479;
        v489 = v495 + 8;
        while (v480 != v482)
        {
          v498 = *((_QWORD *)v480 - 1);
          v480 -= 8;
          *((_QWORD *)v495 - 1) = v498;
          v495 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v477 != 1)
        goto LABEL_710;
      v478 = *(_QWORD **)a1[1];
      v479 = *(_WORD *)(a1[2] + 64) & 0x1FFF;
      v480 = (char *)v478[383];
      v481 = v478[384];
      if ((unint64_t)v480 >= v481)
      {
        v482 = (char *)v478[382];
        v483 = (v480 - v482) >> 3;
        if ((unint64_t)(v483 + 1) >> 61)
          goto LABEL_1032;
        v484 = v481 - (_QWORD)v482;
        v485 = (uint64_t)(v481 - (_QWORD)v482) >> 2;
        if (v485 <= v483 + 1)
          v485 = v483 + 1;
        if (v484 >= 0x7FFFFFFFFFFFFFF8)
          v486 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v486 = v485;
        if (v486)
        {
          v487 = (char *)sub_40FC((uint64_t)(v478 + 384), v486);
          v480 = (char *)v478[383];
          v482 = (char *)v478[382];
        }
        else
        {
          v487 = 0;
        }
        v495 = &v487[8 * v483];
        v496 = &v487[8 * v486];
        *(_QWORD *)v495 = v479;
        v489 = v495 + 8;
        while (v480 != v482)
        {
          v497 = *((_QWORD *)v480 - 1);
          v480 -= 8;
          *((_QWORD *)v495 - 1) = v497;
          v495 -= 8;
        }
LABEL_707:
        v478[382] = v495;
        v478[383] = v489;
        v478[384] = v496;
        if (v482)
          operator delete(v482);
        goto LABEL_709;
      }
    }
    *(_QWORD *)v480 = v479;
    v489 = v480 + 8;
LABEL_709:
    v478[383] = v489;
LABEL_710:
    v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      v500 = *(_QWORD **)a1[1];
      v501 = *(_WORD *)(a1[2] + 48) & 0x1FFF;
      v502 = (char *)v500[386];
      v510 = v500[387];
      if ((unint64_t)v502 >= v510)
      {
        v504 = (char *)v500[385];
        v512 = (v502 - v504) >> 3;
        if ((unint64_t)(v512 + 1) >> 61)
          goto LABEL_1032;
        v513 = v510 - (_QWORD)v504;
        v514 = (uint64_t)(v510 - (_QWORD)v504) >> 2;
        if (v514 <= v512 + 1)
          v514 = v512 + 1;
        if (v513 >= 0x7FFFFFFFFFFFFFF8)
          v515 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v515 = v514;
        if (v515)
        {
          v516 = (char *)sub_40FC((uint64_t)(v500 + 387), v515);
          v502 = (char *)v500[386];
          v504 = (char *)v500[385];
        }
        else
        {
          v516 = 0;
        }
        v517 = &v516[8 * v512];
        v518 = &v516[8 * v515];
        *(_QWORD *)v517 = v501;
        v511 = v517 + 8;
        while (v502 != v504)
        {
          v520 = *((_QWORD *)v502 - 1);
          v502 -= 8;
          *((_QWORD *)v517 - 1) = v520;
          v517 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v499 != 1)
        goto LABEL_742;
      v500 = *(_QWORD **)a1[1];
      v501 = *(_WORD *)(a1[2] + 48) & 0x1FFF;
      v502 = (char *)v500[386];
      v503 = v500[387];
      if ((unint64_t)v502 >= v503)
      {
        v504 = (char *)v500[385];
        v505 = (v502 - v504) >> 3;
        if ((unint64_t)(v505 + 1) >> 61)
          goto LABEL_1032;
        v506 = v503 - (_QWORD)v504;
        v507 = (uint64_t)(v503 - (_QWORD)v504) >> 2;
        if (v507 <= v505 + 1)
          v507 = v505 + 1;
        if (v506 >= 0x7FFFFFFFFFFFFFF8)
          v508 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v508 = v507;
        if (v508)
        {
          v509 = (char *)sub_40FC((uint64_t)(v500 + 387), v508);
          v502 = (char *)v500[386];
          v504 = (char *)v500[385];
        }
        else
        {
          v509 = 0;
        }
        v517 = &v509[8 * v505];
        v518 = &v509[8 * v508];
        *(_QWORD *)v517 = v501;
        v511 = v517 + 8;
        while (v502 != v504)
        {
          v519 = *((_QWORD *)v502 - 1);
          v502 -= 8;
          *((_QWORD *)v517 - 1) = v519;
          v517 -= 8;
        }
LABEL_739:
        v500[385] = v517;
        v500[386] = v511;
        v500[387] = v518;
        if (v504)
          operator delete(v504);
        goto LABEL_741;
      }
    }
    *(_QWORD *)v502 = v501;
    v511 = v502 + 8;
LABEL_741:
    v500[386] = v511;
LABEL_742:
    v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      v522 = *(_QWORD **)a1[1];
      v523 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v524 = (char *)v522[389];
      v532 = v522[390];
      if ((unint64_t)v524 >= v532)
      {
        v526 = (char *)v522[388];
        v534 = (v524 - v526) >> 3;
        if ((unint64_t)(v534 + 1) >> 61)
          goto LABEL_1032;
        v535 = v532 - (_QWORD)v526;
        v536 = (uint64_t)(v532 - (_QWORD)v526) >> 2;
        if (v536 <= v534 + 1)
          v536 = v534 + 1;
        if (v535 >= 0x7FFFFFFFFFFFFFF8)
          v537 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v537 = v536;
        if (v537)
        {
          v538 = (char *)sub_40FC((uint64_t)(v522 + 390), v537);
          v524 = (char *)v522[389];
          v526 = (char *)v522[388];
        }
        else
        {
          v538 = 0;
        }
        v539 = &v538[8 * v534];
        v540 = &v538[8 * v537];
        *(_QWORD *)v539 = v523;
        v533 = v539 + 8;
        while (v524 != v526)
        {
          v542 = *((_QWORD *)v524 - 1);
          v524 -= 8;
          *((_QWORD *)v539 - 1) = v542;
          v539 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v521 != 1)
        goto LABEL_774;
      v522 = *(_QWORD **)a1[1];
      v523 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v524 = (char *)v522[389];
      v525 = v522[390];
      if ((unint64_t)v524 >= v525)
      {
        v526 = (char *)v522[388];
        v527 = (v524 - v526) >> 3;
        if ((unint64_t)(v527 + 1) >> 61)
          goto LABEL_1032;
        v528 = v525 - (_QWORD)v526;
        v529 = (uint64_t)(v525 - (_QWORD)v526) >> 2;
        if (v529 <= v527 + 1)
          v529 = v527 + 1;
        if (v528 >= 0x7FFFFFFFFFFFFFF8)
          v530 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v530 = v529;
        if (v530)
        {
          v531 = (char *)sub_40FC((uint64_t)(v522 + 390), v530);
          v524 = (char *)v522[389];
          v526 = (char *)v522[388];
        }
        else
        {
          v531 = 0;
        }
        v539 = &v531[8 * v527];
        v540 = &v531[8 * v530];
        *(_QWORD *)v539 = v523;
        v533 = v539 + 8;
        while (v524 != v526)
        {
          v541 = *((_QWORD *)v524 - 1);
          v524 -= 8;
          *((_QWORD *)v539 - 1) = v541;
          v539 -= 8;
        }
LABEL_771:
        v522[388] = v539;
        v522[389] = v533;
        v522[390] = v540;
        if (v526)
          operator delete(v526);
        goto LABEL_773;
      }
    }
    *(_QWORD *)v524 = v523;
    v533 = v524 + 8;
LABEL_773:
    v522[389] = v533;
LABEL_774:
    v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      v544 = *(_QWORD **)a1[1];
      v545 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      v546 = (char *)v544[392];
      v554 = v544[393];
      if ((unint64_t)v546 >= v554)
      {
        v548 = (char *)v544[391];
        v556 = (v546 - v548) >> 3;
        if ((unint64_t)(v556 + 1) >> 61)
          goto LABEL_1032;
        v557 = v554 - (_QWORD)v548;
        v558 = (uint64_t)(v554 - (_QWORD)v548) >> 2;
        if (v558 <= v556 + 1)
          v558 = v556 + 1;
        if (v557 >= 0x7FFFFFFFFFFFFFF8)
          v559 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v559 = v558;
        if (v559)
        {
          v560 = (char *)sub_40FC((uint64_t)(v544 + 393), v559);
          v546 = (char *)v544[392];
          v548 = (char *)v544[391];
        }
        else
        {
          v560 = 0;
        }
        v561 = &v560[8 * v556];
        v562 = &v560[8 * v559];
        *(_QWORD *)v561 = v545;
        v555 = v561 + 8;
        while (v546 != v548)
        {
          v564 = *((_QWORD *)v546 - 1);
          v546 -= 8;
          *((_QWORD *)v561 - 1) = v564;
          v561 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v543 != 1)
        goto LABEL_806;
      v544 = *(_QWORD **)a1[1];
      v545 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      v546 = (char *)v544[392];
      v547 = v544[393];
      if ((unint64_t)v546 >= v547)
      {
        v548 = (char *)v544[391];
        v549 = (v546 - v548) >> 3;
        if ((unint64_t)(v549 + 1) >> 61)
          goto LABEL_1032;
        v550 = v547 - (_QWORD)v548;
        v551 = (uint64_t)(v547 - (_QWORD)v548) >> 2;
        if (v551 <= v549 + 1)
          v551 = v549 + 1;
        if (v550 >= 0x7FFFFFFFFFFFFFF8)
          v552 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v552 = v551;
        if (v552)
        {
          v553 = (char *)sub_40FC((uint64_t)(v544 + 393), v552);
          v546 = (char *)v544[392];
          v548 = (char *)v544[391];
        }
        else
        {
          v553 = 0;
        }
        v561 = &v553[8 * v549];
        v562 = &v553[8 * v552];
        *(_QWORD *)v561 = v545;
        v555 = v561 + 8;
        while (v546 != v548)
        {
          v563 = *((_QWORD *)v546 - 1);
          v546 -= 8;
          *((_QWORD *)v561 - 1) = v563;
          v561 -= 8;
        }
LABEL_803:
        v544[391] = v561;
        v544[392] = v555;
        v544[393] = v562;
        if (v548)
          operator delete(v548);
        goto LABEL_805;
      }
    }
    *(_QWORD *)v546 = v545;
    v555 = v546 + 8;
LABEL_805:
    v544[392] = v555;
LABEL_806:
    v565 = 1 << *(_DWORD *)(v3 + 48);
    if (v565 == 2)
    {
      v566 = *(_QWORD **)a1[1];
      v567 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      v568 = (char *)v566[395];
      v576 = v566[396];
      if ((unint64_t)v568 >= v576)
      {
        v570 = (char *)v566[394];
        v578 = (v568 - v570) >> 3;
        if ((unint64_t)(v578 + 1) >> 61)
          goto LABEL_1032;
        v579 = v576 - (_QWORD)v570;
        v580 = (uint64_t)(v576 - (_QWORD)v570) >> 2;
        if (v580 <= v578 + 1)
          v580 = v578 + 1;
        if (v579 >= 0x7FFFFFFFFFFFFFF8)
          v581 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v581 = v580;
        if (v581)
        {
          v582 = (char *)sub_40FC((uint64_t)(v566 + 396), v581);
          v568 = (char *)v566[395];
          v570 = (char *)v566[394];
        }
        else
        {
          v582 = 0;
        }
        v583 = &v582[8 * v578];
        v584 = &v582[8 * v581];
        *(_QWORD *)v583 = v567;
        v577 = v583 + 8;
        while (v568 != v570)
        {
          v586 = *((_QWORD *)v568 - 1);
          v568 -= 8;
          *((_QWORD *)v583 - 1) = v586;
          v583 -= 8;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v565 != 1)
        goto LABEL_838;
      v566 = *(_QWORD **)a1[1];
      v567 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      v568 = (char *)v566[395];
      v569 = v566[396];
      if ((unint64_t)v568 >= v569)
      {
        v570 = (char *)v566[394];
        v571 = (v568 - v570) >> 3;
        if ((unint64_t)(v571 + 1) >> 61)
          goto LABEL_1032;
        v572 = v569 - (_QWORD)v570;
        v573 = (uint64_t)(v569 - (_QWORD)v570) >> 2;
        if (v573 <= v571 + 1)
          v573 = v571 + 1;
        if (v572 >= 0x7FFFFFFFFFFFFFF8)
          v574 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v574 = v573;
        if (v574)
        {
          v575 = (char *)sub_40FC((uint64_t)(v566 + 396), v574);
          v568 = (char *)v566[395];
          v570 = (char *)v566[394];
        }
        else
        {
          v575 = 0;
        }
        v583 = &v575[8 * v571];
        v584 = &v575[8 * v574];
        *(_QWORD *)v583 = v567;
        v577 = v583 + 8;
        while (v568 != v570)
        {
          v585 = *((_QWORD *)v568 - 1);
          v568 -= 8;
          *((_QWORD *)v583 - 1) = v585;
          v583 -= 8;
        }
LABEL_835:
        v566[394] = v583;
        v566[395] = v577;
        v566[396] = v584;
        if (v570)
          operator delete(v570);
        goto LABEL_837;
      }
    }
    *(_QWORD *)v568 = v567;
    v577 = v568 + 8;
LABEL_837:
    v566[395] = v577;
LABEL_838:
    v587 = 1 << *(_DWORD *)(v3 + 48);
    if (v587 == 2)
    {
      v588 = *(_QWORD **)a1[1];
      v589 = *(_WORD *)(a1[2] + 40) & 0x1FFF;
      v590 = (char *)v588[398];
      v598 = v588[399];
      if ((unint64_t)v590 >= v598)
      {
        v592 = (char *)v588[397];
        v600 = (v590 - v592) >> 3;
        if ((unint64_t)(v600 + 1) >> 61)
          goto LABEL_1032;
        v601 = v598 - (_QWORD)v592;
        v602 = (uint64_t)(v598 - (_QWORD)v592) >> 2;
        if (v602 <= v600 + 1)
          v602 = v600 + 1;
        if (v601 >= 0x7FFFFFFFFFFFFFF8)
          v603 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v603 = v602;
        if (v603)
        {
          v604 = (char *)sub_40FC((uint64_t)(v588 + 399), v603);
          v590 = (char *)v588[398];
          v592 = (char *)v588[397];
        }
        else
        {
          v604 = 0;
        }
        v605 = &v604[8 * v600];
        v606 = &v604[8 * v603];
        *(_QWORD *)v605 = v589;
        v599 = v605 + 8;
        while (v590 != v592)
        {
          v608 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *((_QWORD *)v605 - 1) = v608;
          v605 -= 8;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v587 != 1)
        goto LABEL_870;
      v588 = *(_QWORD **)a1[1];
      v589 = *(_WORD *)(a1[2] + 40) & 0x1FFF;
      v590 = (char *)v588[398];
      v591 = v588[399];
      if ((unint64_t)v590 >= v591)
      {
        v592 = (char *)v588[397];
        v593 = (v590 - v592) >> 3;
        if ((unint64_t)(v593 + 1) >> 61)
          goto LABEL_1032;
        v594 = v591 - (_QWORD)v592;
        v595 = (uint64_t)(v591 - (_QWORD)v592) >> 2;
        if (v595 <= v593 + 1)
          v595 = v593 + 1;
        if (v594 >= 0x7FFFFFFFFFFFFFF8)
          v596 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v596 = v595;
        if (v596)
        {
          v597 = (char *)sub_40FC((uint64_t)(v588 + 399), v596);
          v590 = (char *)v588[398];
          v592 = (char *)v588[397];
        }
        else
        {
          v597 = 0;
        }
        v605 = &v597[8 * v593];
        v606 = &v597[8 * v596];
        *(_QWORD *)v605 = v589;
        v599 = v605 + 8;
        while (v590 != v592)
        {
          v607 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *((_QWORD *)v605 - 1) = v607;
          v605 -= 8;
        }
LABEL_867:
        v588[397] = v605;
        v588[398] = v599;
        v588[399] = v606;
        if (v592)
          operator delete(v592);
        goto LABEL_869;
      }
    }
    *(_QWORD *)v590 = v589;
    v599 = v590 + 8;
LABEL_869:
    v588[398] = v599;
LABEL_870:
    v609 = 1 << *(_DWORD *)(v3 + 48);
    if (v609 == 2)
    {
      v610 = *(_QWORD **)a1[1];
      v611 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 24) >> 1) & 0x1FFF;
      v612 = (unint64_t *)v610[401];
      v620 = v610[402];
      if ((unint64_t)v612 >= v620)
      {
        v614 = (unint64_t *)v610[400];
        v622 = v612 - v614;
        if ((unint64_t)(v622 + 1) >> 61)
          goto LABEL_1032;
        v623 = v620 - (_QWORD)v614;
        v624 = (uint64_t)(v620 - (_QWORD)v614) >> 2;
        if (v624 <= v622 + 1)
          v624 = v622 + 1;
        if (v623 >= 0x7FFFFFFFFFFFFFF8)
          v625 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v625 = v624;
        if (v625)
        {
          v626 = (char *)sub_40FC((uint64_t)(v610 + 402), v625);
          v612 = (unint64_t *)v610[401];
          v614 = (unint64_t *)v610[400];
        }
        else
        {
          v626 = 0;
        }
        v627 = (unint64_t *)&v626[8 * v622];
        v628 = &v626[8 * v625];
        *v627 = v611;
        v621 = v627 + 1;
        while (v612 != v614)
        {
          v630 = *--v612;
          *--v627 = v630;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v609 != 1)
        goto LABEL_902;
      v610 = *(_QWORD **)a1[1];
      v611 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 24) >> 1) & 0x1FFF;
      v612 = (unint64_t *)v610[401];
      v613 = v610[402];
      if ((unint64_t)v612 >= v613)
      {
        v614 = (unint64_t *)v610[400];
        v615 = v612 - v614;
        if ((unint64_t)(v615 + 1) >> 61)
          goto LABEL_1032;
        v616 = v613 - (_QWORD)v614;
        v617 = (uint64_t)(v613 - (_QWORD)v614) >> 2;
        if (v617 <= v615 + 1)
          v617 = v615 + 1;
        if (v616 >= 0x7FFFFFFFFFFFFFF8)
          v618 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v618 = v617;
        if (v618)
        {
          v619 = (char *)sub_40FC((uint64_t)(v610 + 402), v618);
          v612 = (unint64_t *)v610[401];
          v614 = (unint64_t *)v610[400];
        }
        else
        {
          v619 = 0;
        }
        v627 = (unint64_t *)&v619[8 * v615];
        v628 = &v619[8 * v618];
        *v627 = v611;
        v621 = v627 + 1;
        while (v612 != v614)
        {
          v629 = *--v612;
          *--v627 = v629;
        }
LABEL_899:
        v610[400] = v627;
        v610[401] = v621;
        v610[402] = v628;
        if (v614)
          operator delete(v614);
        goto LABEL_901;
      }
    }
    *v612 = v611;
    v621 = v612 + 1;
LABEL_901:
    v610[401] = v621;
LABEL_902:
    v631 = 1 << *(_DWORD *)(v3 + 48);
    if (v631 == 2)
    {
      v632 = *(_QWORD **)a1[1];
      v633 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      v634 = (char *)v632[404];
      v642 = v632[405];
      if ((unint64_t)v634 >= v642)
      {
        v636 = (char *)v632[403];
        v644 = (v634 - v636) >> 3;
        if ((unint64_t)(v644 + 1) >> 61)
          goto LABEL_1032;
        v645 = v642 - (_QWORD)v636;
        v646 = (uint64_t)(v642 - (_QWORD)v636) >> 2;
        if (v646 <= v644 + 1)
          v646 = v644 + 1;
        if (v645 >= 0x7FFFFFFFFFFFFFF8)
          v647 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v647 = v646;
        if (v647)
        {
          v648 = (char *)sub_40FC((uint64_t)(v632 + 405), v647);
          v634 = (char *)v632[404];
          v636 = (char *)v632[403];
        }
        else
        {
          v648 = 0;
        }
        v649 = &v648[8 * v644];
        v650 = &v648[8 * v647];
        *(_QWORD *)v649 = v633;
        v643 = v649 + 8;
        while (v634 != v636)
        {
          v652 = *((_QWORD *)v634 - 1);
          v634 -= 8;
          *((_QWORD *)v649 - 1) = v652;
          v649 -= 8;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v631 != 1)
        goto LABEL_934;
      v632 = *(_QWORD **)a1[1];
      v633 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      v634 = (char *)v632[404];
      v635 = v632[405];
      if ((unint64_t)v634 >= v635)
      {
        v636 = (char *)v632[403];
        v637 = (v634 - v636) >> 3;
        if ((unint64_t)(v637 + 1) >> 61)
          goto LABEL_1032;
        v638 = v635 - (_QWORD)v636;
        v639 = (uint64_t)(v635 - (_QWORD)v636) >> 2;
        if (v639 <= v637 + 1)
          v639 = v637 + 1;
        if (v638 >= 0x7FFFFFFFFFFFFFF8)
          v640 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v640 = v639;
        if (v640)
        {
          v641 = (char *)sub_40FC((uint64_t)(v632 + 405), v640);
          v634 = (char *)v632[404];
          v636 = (char *)v632[403];
        }
        else
        {
          v641 = 0;
        }
        v649 = &v641[8 * v637];
        v650 = &v641[8 * v640];
        *(_QWORD *)v649 = v633;
        v643 = v649 + 8;
        while (v634 != v636)
        {
          v651 = *((_QWORD *)v634 - 1);
          v634 -= 8;
          *((_QWORD *)v649 - 1) = v651;
          v649 -= 8;
        }
LABEL_931:
        v632[403] = v649;
        v632[404] = v643;
        v632[405] = v650;
        if (v636)
          operator delete(v636);
        goto LABEL_933;
      }
    }
    *(_QWORD *)v634 = v633;
    v643 = v634 + 8;
LABEL_933:
    v632[404] = v643;
LABEL_934:
    v653 = 1 << *(_DWORD *)(v3 + 48);
    if (v653 == 2)
    {
      v654 = *(_QWORD **)a1[1];
      v655 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      v656 = (char *)v654[407];
      v664 = v654[408];
      if ((unint64_t)v656 >= v664)
      {
        v658 = (char *)v654[406];
        v666 = (v656 - v658) >> 3;
        if ((unint64_t)(v666 + 1) >> 61)
          goto LABEL_1032;
        v667 = v664 - (_QWORD)v658;
        v668 = (uint64_t)(v664 - (_QWORD)v658) >> 2;
        if (v668 <= v666 + 1)
          v668 = v666 + 1;
        if (v667 >= 0x7FFFFFFFFFFFFFF8)
          v669 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v669 = v668;
        if (v669)
        {
          v670 = (char *)sub_40FC((uint64_t)(v654 + 408), v669);
          v656 = (char *)v654[407];
          v658 = (char *)v654[406];
        }
        else
        {
          v670 = 0;
        }
        v671 = &v670[8 * v666];
        v672 = &v670[8 * v669];
        *(_QWORD *)v671 = v655;
        v665 = v671 + 8;
        while (v656 != v658)
        {
          v674 = *((_QWORD *)v656 - 1);
          v656 -= 8;
          *((_QWORD *)v671 - 1) = v674;
          v671 -= 8;
        }
        goto LABEL_963;
      }
    }
    else
    {
      if (v653 != 1)
        goto LABEL_966;
      v654 = *(_QWORD **)a1[1];
      v655 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      v656 = (char *)v654[407];
      v657 = v654[408];
      if ((unint64_t)v656 >= v657)
      {
        v658 = (char *)v654[406];
        v659 = (v656 - v658) >> 3;
        if ((unint64_t)(v659 + 1) >> 61)
          goto LABEL_1032;
        v660 = v657 - (_QWORD)v658;
        v661 = (uint64_t)(v657 - (_QWORD)v658) >> 2;
        if (v661 <= v659 + 1)
          v661 = v659 + 1;
        if (v660 >= 0x7FFFFFFFFFFFFFF8)
          v662 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v662 = v661;
        if (v662)
        {
          v663 = (char *)sub_40FC((uint64_t)(v654 + 408), v662);
          v656 = (char *)v654[407];
          v658 = (char *)v654[406];
        }
        else
        {
          v663 = 0;
        }
        v671 = &v663[8 * v659];
        v672 = &v663[8 * v662];
        *(_QWORD *)v671 = v655;
        v665 = v671 + 8;
        while (v656 != v658)
        {
          v673 = *((_QWORD *)v656 - 1);
          v656 -= 8;
          *((_QWORD *)v671 - 1) = v673;
          v671 -= 8;
        }
LABEL_963:
        v654[406] = v671;
        v654[407] = v665;
        v654[408] = v672;
        if (v658)
          operator delete(v658);
        goto LABEL_965;
      }
    }
    *(_QWORD *)v656 = v655;
    v665 = v656 + 8;
LABEL_965:
    v654[407] = v665;
LABEL_966:
    v675 = 1 << *(_DWORD *)(v3 + 48);
    if (v675 == 2)
    {
      v676 = *(_QWORD **)a1[1];
      v677 = *(_WORD *)(a1[2] + 42) & 0x1FFF;
      v678 = (char *)v676[410];
      v686 = v676[411];
      if ((unint64_t)v678 >= v686)
      {
        v680 = (char *)v676[409];
        v688 = (v678 - v680) >> 3;
        if ((unint64_t)(v688 + 1) >> 61)
          goto LABEL_1032;
        v689 = v686 - (_QWORD)v680;
        v690 = (uint64_t)(v686 - (_QWORD)v680) >> 2;
        if (v690 <= v688 + 1)
          v690 = v688 + 1;
        if (v689 >= 0x7FFFFFFFFFFFFFF8)
          v691 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v691 = v690;
        if (v691)
        {
          v692 = (char *)sub_40FC((uint64_t)(v676 + 411), v691);
          v678 = (char *)v676[410];
          v680 = (char *)v676[409];
        }
        else
        {
          v692 = 0;
        }
        v693 = &v692[8 * v688];
        v694 = &v692[8 * v691];
        *(_QWORD *)v693 = v677;
        v687 = v693 + 8;
        while (v678 != v680)
        {
          v696 = *((_QWORD *)v678 - 1);
          v678 -= 8;
          *((_QWORD *)v693 - 1) = v696;
          v693 -= 8;
        }
        goto LABEL_995;
      }
    }
    else
    {
      if (v675 != 1)
        goto LABEL_998;
      v676 = *(_QWORD **)a1[1];
      v677 = *(_WORD *)(a1[2] + 42) & 0x1FFF;
      v678 = (char *)v676[410];
      v679 = v676[411];
      if ((unint64_t)v678 >= v679)
      {
        v680 = (char *)v676[409];
        v681 = (v678 - v680) >> 3;
        if ((unint64_t)(v681 + 1) >> 61)
          goto LABEL_1032;
        v682 = v679 - (_QWORD)v680;
        v683 = (uint64_t)(v679 - (_QWORD)v680) >> 2;
        if (v683 <= v681 + 1)
          v683 = v681 + 1;
        if (v682 >= 0x7FFFFFFFFFFFFFF8)
          v684 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v684 = v683;
        if (v684)
        {
          v685 = (char *)sub_40FC((uint64_t)(v676 + 411), v684);
          v678 = (char *)v676[410];
          v680 = (char *)v676[409];
        }
        else
        {
          v685 = 0;
        }
        v693 = &v685[8 * v681];
        v694 = &v685[8 * v684];
        *(_QWORD *)v693 = v677;
        v687 = v693 + 8;
        while (v678 != v680)
        {
          v695 = *((_QWORD *)v678 - 1);
          v678 -= 8;
          *((_QWORD *)v693 - 1) = v695;
          v693 -= 8;
        }
LABEL_995:
        v676[409] = v693;
        v676[410] = v687;
        v676[411] = v694;
        if (v680)
          operator delete(v680);
        goto LABEL_997;
      }
    }
    *(_QWORD *)v678 = v677;
    v687 = v678 + 8;
LABEL_997:
    v676[410] = v687;
LABEL_998:
    v697 = 1 << *(_DWORD *)(v3 + 48);
    if (v697 == 2)
    {
      v709 = a1[2];
      v699 = *(_QWORD **)a1[1];
      v700 = *(_WORD *)(v709 + 26) & 0x1FFF;
      v701 = (char *)v699[413];
      v710 = v699[414];
      if ((unint64_t)v701 >= v710)
      {
        v703 = (char *)v699[412];
        v712 = (v701 - v703) >> 3;
        if (!((unint64_t)(v712 + 1) >> 61))
        {
          v713 = v710 - (_QWORD)v703;
          v714 = (uint64_t)(v710 - (_QWORD)v703) >> 2;
          if (v714 <= v712 + 1)
            v714 = v712 + 1;
          if (v713 >= 0x7FFFFFFFFFFFFFF8)
            v715 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v715 = v714;
          if (v715)
          {
            v716 = (char *)sub_40FC((uint64_t)(v699 + 414), v715);
            v701 = (char *)v699[413];
            v703 = (char *)v699[412];
          }
          else
          {
            v716 = 0;
          }
          v717 = &v716[8 * v712];
          v718 = &v716[8 * v715];
          *(_QWORD *)v717 = v700;
          v711 = v717 + 8;
          while (v701 != v703)
          {
            v720 = *((_QWORD *)v701 - 1);
            v701 -= 8;
            *((_QWORD *)v717 - 1) = v720;
            v717 -= 8;
          }
          goto LABEL_1027;
        }
LABEL_1032:
        sub_4074();
      }
    }
    else
    {
      if (v697 != 1)
      {
LABEL_1030:
        *a2 = 1;
        return;
      }
      v698 = a1[2];
      v699 = *(_QWORD **)a1[1];
      v700 = *(_WORD *)(v698 + 26) & 0x1FFF;
      v701 = (char *)v699[413];
      v702 = v699[414];
      if ((unint64_t)v701 >= v702)
      {
        v703 = (char *)v699[412];
        v704 = (v701 - v703) >> 3;
        if (!((unint64_t)(v704 + 1) >> 61))
        {
          v705 = v702 - (_QWORD)v703;
          v706 = (uint64_t)(v702 - (_QWORD)v703) >> 2;
          if (v706 <= v704 + 1)
            v706 = v704 + 1;
          if (v705 >= 0x7FFFFFFFFFFFFFF8)
            v707 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v707 = v706;
          if (v707)
          {
            v708 = (char *)sub_40FC((uint64_t)(v699 + 414), v707);
            v701 = (char *)v699[413];
            v703 = (char *)v699[412];
          }
          else
          {
            v708 = 0;
          }
          v717 = &v708[8 * v704];
          v718 = &v708[8 * v707];
          *(_QWORD *)v717 = v700;
          v711 = v717 + 8;
          while (v701 != v703)
          {
            v719 = *((_QWORD *)v701 - 1);
            v701 -= 8;
            *((_QWORD *)v717 - 1) = v719;
            v717 -= 8;
          }
LABEL_1027:
          v699[412] = v717;
          v699[413] = v711;
          v699[414] = v718;
          if (v703)
            operator delete(v703);
          goto LABEL_1029;
        }
        goto LABEL_1032;
      }
    }
    *(_QWORD *)v701 = v700;
    v711 = v701 + 8;
LABEL_1029:
    v699[413] = v711;
    goto LABEL_1030;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (_WORD *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[320] - 8) += v17[41] & 0x1FFF;
    *(_QWORD *)(v19[323] - 8) += v17[33] & 0x1FFF;
    *(_QWORD *)(v19[326] - 8) += v17[25] & 0x1FFF;
    *(_QWORD *)(v19[329] - 8) += v17[17] & 0x1FFF;
    *(_QWORD *)(v19[332] - 8) += v17[42] & 0x1FFF;
    *(_QWORD *)(v19[335] - 8) += v17[34] & 0x1FFF;
    *(_QWORD *)(v19[338] - 8) += v17[26] & 0x1FFF;
    *(_QWORD *)(v19[341] - 8) += v17[18] & 0x1FFF;
    *(_QWORD *)(v19[344] - 8) += v17[43] & 0x1FFF;
    *(_QWORD *)(v19[347] - 8) += v17[35] & 0x1FFF;
    v20 = (_WORD *)a1[2];
    v21 = *(_QWORD **)a1[1];
    *(_QWORD *)(v21[350] - 8) += v20[27] & 0x1FFF;
    *(_QWORD *)(v21[353] - 8) += v20[19] & 0x1FFF;
    *(_QWORD *)(v21[356] - 8) += v20[38] & 0x1FFF;
    *(_QWORD *)(v21[359] - 8) += v20[30] & 0x1FFF;
    *(_QWORD *)(v21[362] - 8) += v20[22] & 0x1FFF;
    *(_QWORD *)(v21[365] - 8) += v20[14] & 0x1FFF;
    *(_QWORD *)(v21[368] - 8) += v20[39] & 0x1FFF;
    *(_QWORD *)(v21[371] - 8) += v20[31] & 0x1FFF;
    *(_QWORD *)(v21[374] - 8) += v20[23] & 0x1FFF;
    *(_QWORD *)(v21[377] - 8) += v20[15] & 0x1FFF;
    v22 = (unsigned __int16 *)a1[2];
    v23 = *(_QWORD **)a1[1];
    *(_QWORD *)(v23[380] - 8) += v22[40] & 0x1FFF;
    *(_QWORD *)(v23[383] - 8) += v22[32] & 0x1FFF;
    *(_QWORD *)(v23[386] - 8) += v22[24] & 0x1FFF;
    *(_QWORD *)(v23[389] - 8) += v22[16] & 0x1FFF;
    *(_QWORD *)(v23[392] - 8) += v22[36] & 0x1FFF;
    *(_QWORD *)(v23[395] - 8) += v22[28] & 0x1FFF;
    *(_QWORD *)(v23[398] - 8) += v22[20] & 0x1FFF;
    *(_QWORD *)(v23[401] - 8) += ((unint64_t)v22[12] >> 1) & 0x1FFF;
    *(_QWORD *)(v23[404] - 8) += v22[37] & 0x1FFF;
    *(_QWORD *)(v23[407] - 8) += v22[29] & 0x1FFF;
    v24 = a1[2];
    v25 = (_QWORD *)*v18;
    *(_QWORD *)(v25[410] - 8) += *(_WORD *)(v24 + 42) & 0x1FFF;
    *(_QWORD *)(v25[413] - 8) += *(_WORD *)(v24 + 26) & 0x1FFF;
  }
}

void sub_15494C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v8 = (char *)v6[299];
      v19 = v6[300];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[298];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_232;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 300), v24);
          v8 = (char *)v6[299];
          v10 = (char *)v6[298];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v8 = (char *)v6[299];
      v9 = v6[300];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[298];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_232;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 300), v14);
          v8 = (char *)v6[299];
          v10 = (char *)v6[298];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[298] = v26;
        v6[299] = v20;
        v6[300] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[299] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v33 = (char *)v31[302];
      v41 = v31[303];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (char *)v31[301];
        v43 = (v33 - v35) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_232;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 303), v46);
          v33 = (char *)v31[302];
          v35 = (char *)v31[301];
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[8 * v43];
        v49 = &v47[8 * v46];
        *(_QWORD *)v48 = v32;
        v42 = v48 + 8;
        while (v33 != v35)
        {
          v51 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *((_QWORD *)v48 - 1) = v51;
          v48 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v33 = (char *)v31[302];
      v34 = v31[303];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (char *)v31[301];
        v36 = (v33 - v35) >> 3;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_232;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 303), v39);
          v33 = (char *)v31[302];
          v35 = (char *)v31[301];
        }
        else
        {
          v40 = 0;
        }
        v48 = &v40[8 * v36];
        v49 = &v40[8 * v39];
        *(_QWORD *)v48 = v32;
        v42 = v48 + 8;
        while (v33 != v35)
        {
          v50 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *((_QWORD *)v48 - 1) = v50;
          v48 -= 8;
        }
LABEL_67:
        v31[301] = v48;
        v31[302] = v42;
        v31[303] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v33 = v32;
    v42 = v33 + 8;
LABEL_69:
    v31[302] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v55 = (char *)v53[305];
      v63 = v53[306];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[304];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_232;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 306), v68);
          v55 = (char *)v53[305];
          v57 = (char *)v53[304];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v55 = (char *)v53[305];
      v56 = v53[306];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[304];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_232;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 306), v61);
          v55 = (char *)v53[305];
          v57 = (char *)v53[304];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[304] = v70;
        v53[305] = v64;
        v53[306] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[305] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = (*(_QWORD *)(a1[2] + 32) >> 33) & 0x7FFFLL;
      v77 = (uint64_t *)v75[308];
      v85 = v75[309];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (uint64_t *)v75[307];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_232;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 309), v90);
          v77 = (uint64_t *)v75[308];
          v79 = (uint64_t *)v75[307];
        }
        else
        {
          v91 = 0;
        }
        v92 = (uint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = (*(_QWORD *)(a1[2] + 32) >> 33) & 0x7FFFLL;
      v77 = (uint64_t *)v75[308];
      v78 = v75[309];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (uint64_t *)v75[307];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_232;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 309), v83);
          v77 = (uint64_t *)v75[308];
          v79 = (uint64_t *)v75[307];
        }
        else
        {
          v84 = 0;
        }
        v92 = (uint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[307] = v92;
        v75[308] = v86;
        v75[309] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[308] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_QWORD *)(a1[2] + 32) & 0x1FFFFFFFFLL;
      v99 = (uint64_t *)v97[311];
      v107 = v97[312];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[310];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_232;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 312), v112);
          v99 = (uint64_t *)v97[311];
          v101 = (uint64_t *)v97[310];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_QWORD *)(a1[2] + 32) & 0x1FFFFFFFFLL;
      v99 = (uint64_t *)v97[311];
      v100 = v97[312];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[310];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_232;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 312), v105);
          v99 = (uint64_t *)v97[311];
          v101 = (uint64_t *)v97[310];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[310] = v114;
        v97[311] = v108;
        v97[312] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[311] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v119 = *(_QWORD **)a1[1];
      v120 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v121 = (char *)v119[314];
      v129 = v119[315];
      if ((unint64_t)v121 >= v129)
      {
        v123 = (char *)v119[313];
        v131 = (v121 - v123) >> 3;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_232;
        v132 = v129 - (_QWORD)v123;
        v133 = (uint64_t)(v129 - (_QWORD)v123) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v119 + 315), v134);
          v121 = (char *)v119[314];
          v123 = (char *)v119[313];
        }
        else
        {
          v135 = 0;
        }
        v136 = &v135[8 * v131];
        v137 = &v135[8 * v134];
        *(_QWORD *)v136 = v120;
        v130 = v136 + 8;
        while (v121 != v123)
        {
          v139 = *((_QWORD *)v121 - 1);
          v121 -= 8;
          *((_QWORD *)v136 - 1) = v139;
          v136 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = *(_QWORD **)a1[1];
      v120 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v121 = (char *)v119[314];
      v122 = v119[315];
      if ((unint64_t)v121 >= v122)
      {
        v123 = (char *)v119[313];
        v124 = (v121 - v123) >> 3;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_232;
        v125 = v122 - (_QWORD)v123;
        v126 = (uint64_t)(v122 - (_QWORD)v123) >> 2;
        if (v126 <= v124 + 1)
          v126 = v124 + 1;
        if (v125 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          v128 = (char *)sub_40FC((uint64_t)(v119 + 315), v127);
          v121 = (char *)v119[314];
          v123 = (char *)v119[313];
        }
        else
        {
          v128 = 0;
        }
        v136 = &v128[8 * v124];
        v137 = &v128[8 * v127];
        *(_QWORD *)v136 = v120;
        v130 = v136 + 8;
        while (v121 != v123)
        {
          v138 = *((_QWORD *)v121 - 1);
          v121 -= 8;
          *((_QWORD *)v136 - 1) = v138;
          v136 -= 8;
        }
LABEL_195:
        v119[313] = v136;
        v119[314] = v130;
        v119[315] = v137;
        if (v123)
          operator delete(v123);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v121 = v120;
    v130 = v121 + 8;
LABEL_197:
    v119[314] = v130;
LABEL_198:
    v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      v153 = a1[1];
      v154 = a1[2];
      v143 = *(_QWORD **)v153;
      v144 = *(unsigned int *)(v154 + 24);
      v145 = *(char **)(*(_QWORD *)v153 + 2536);
      v155 = *(_QWORD *)(*(_QWORD *)v153 + 2544);
      if ((unint64_t)v145 >= v155)
      {
        v147 = (char *)v143[316];
        v157 = (v145 - v147) >> 3;
        if (!((unint64_t)(v157 + 1) >> 61))
        {
          v158 = v155 - (_QWORD)v147;
          v159 = (uint64_t)(v155 - (_QWORD)v147) >> 2;
          if (v159 <= v157 + 1)
            v159 = v157 + 1;
          if (v158 >= 0x7FFFFFFFFFFFFFF8)
            v160 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v160 = v159;
          if (v160)
          {
            v161 = (char *)sub_40FC((uint64_t)(v143 + 318), v160);
            v145 = (char *)v143[317];
            v147 = (char *)v143[316];
          }
          else
          {
            v161 = 0;
          }
          v162 = &v161[8 * v157];
          v163 = &v161[8 * v160];
          *(_QWORD *)v162 = v144;
          v156 = v162 + 8;
          while (v145 != v147)
          {
            v165 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *((_QWORD *)v162 - 1) = v165;
            v162 -= 8;
          }
          goto LABEL_227;
        }
LABEL_232:
        sub_4074();
      }
    }
    else
    {
      if (v140 != 1)
      {
LABEL_230:
        *a2 = 1;
        return;
      }
      v141 = a1[1];
      v142 = a1[2];
      v143 = *(_QWORD **)v141;
      v144 = *(unsigned int *)(v142 + 24);
      v145 = *(char **)(*(_QWORD *)v141 + 2536);
      v146 = *(_QWORD *)(*(_QWORD *)v141 + 2544);
      if ((unint64_t)v145 >= v146)
      {
        v147 = (char *)v143[316];
        v148 = (v145 - v147) >> 3;
        if (!((unint64_t)(v148 + 1) >> 61))
        {
          v149 = v146 - (_QWORD)v147;
          v150 = (uint64_t)(v146 - (_QWORD)v147) >> 2;
          if (v150 <= v148 + 1)
            v150 = v148 + 1;
          if (v149 >= 0x7FFFFFFFFFFFFFF8)
            v151 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v151 = v150;
          if (v151)
          {
            v152 = (char *)sub_40FC((uint64_t)(v143 + 318), v151);
            v145 = (char *)v143[317];
            v147 = (char *)v143[316];
          }
          else
          {
            v152 = 0;
          }
          v162 = &v152[8 * v148];
          v163 = &v152[8 * v151];
          *(_QWORD *)v162 = v144;
          v156 = v162 + 8;
          while (v145 != v147)
          {
            v164 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *((_QWORD *)v162 - 1) = v164;
            v162 -= 8;
          }
LABEL_227:
          v143[316] = v162;
          v143[317] = v156;
          v143[318] = v163;
          if (v147)
            operator delete(v147);
          goto LABEL_229;
        }
        goto LABEL_232;
      }
    }
    *(_QWORD *)v145 = v144;
    v156 = v145 + 8;
LABEL_229:
    v143[317] = v156;
    goto LABEL_230;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[299] - 8) += *(_WORD *)(v17 + 42) & 0x7FFF;
    *(_QWORD *)(v18[302] - 8) += *(_WORD *)(v17 + 40) & 0x7FFF;
    *(_QWORD *)(v18[305] - 8) += *(_WORD *)(v17 + 38) & 0x7FFF;
    *(_QWORD *)(v18[308] - 8) += (*(_QWORD *)(v17 + 32) >> 33) & 0x7FFFLL;
    *(_QWORD *)(v18[311] - 8) += *(_QWORD *)(v17 + 32) & 0x1FFFFFFFFLL;
    *(_QWORD *)(v18[314] - 8) += *(_WORD *)(v17 + 44) & 0x7FFF;
    *(_QWORD *)(v18[317] - 8) += *(unsigned int *)(v17 + 24);
  }
}

void sub_1554E4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v8 = (char *)v6[293];
      v19 = v6[294];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[292];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_72;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 294), v24);
          v8 = (char *)v6[293];
          v10 = (char *)v6[292];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v8 = (char *)v6[293];
      v9 = v6[294];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[292];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_72;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 294), v14);
          v8 = (char *)v6[293];
          v10 = (char *)v6[292];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[292] = v26;
        v6[293] = v20;
        v6[294] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[293] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v42 = a1[2];
      v32 = *(_QWORD **)a1[1];
      v33 = *(_WORD *)(v42 + 24) & 0x7FFF;
      v34 = (char *)v32[296];
      v43 = v32[297];
      if ((unint64_t)v34 >= v43)
      {
        v36 = (char *)v32[295];
        v45 = (v34 - v36) >> 3;
        if (!((unint64_t)(v45 + 1) >> 61))
        {
          v46 = v43 - (_QWORD)v36;
          v47 = (uint64_t)(v43 - (_QWORD)v36) >> 2;
          if (v47 <= v45 + 1)
            v47 = v45 + 1;
          if (v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
          {
            v49 = (char *)sub_40FC((uint64_t)(v32 + 297), v48);
            v34 = (char *)v32[296];
            v36 = (char *)v32[295];
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[8 * v45];
          v51 = &v49[8 * v48];
          *(_QWORD *)v50 = v33;
          v44 = v50 + 8;
          while (v34 != v36)
          {
            v53 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v50 - 1) = v53;
            v50 -= 8;
          }
          goto LABEL_67;
        }
LABEL_72:
        sub_4074();
      }
    }
    else
    {
      if (v30 != 1)
      {
LABEL_70:
        *a2 = 1;
        return;
      }
      v31 = a1[2];
      v32 = *(_QWORD **)a1[1];
      v33 = *(_WORD *)(v31 + 24) & 0x7FFF;
      v34 = (char *)v32[296];
      v35 = v32[297];
      if ((unint64_t)v34 >= v35)
      {
        v36 = (char *)v32[295];
        v37 = (v34 - v36) >> 3;
        if (!((unint64_t)(v37 + 1) >> 61))
        {
          v38 = v35 - (_QWORD)v36;
          v39 = (uint64_t)(v35 - (_QWORD)v36) >> 2;
          if (v39 <= v37 + 1)
            v39 = v37 + 1;
          if (v38 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
          {
            v41 = (char *)sub_40FC((uint64_t)(v32 + 297), v40);
            v34 = (char *)v32[296];
            v36 = (char *)v32[295];
          }
          else
          {
            v41 = 0;
          }
          v50 = &v41[8 * v37];
          v51 = &v41[8 * v40];
          *(_QWORD *)v50 = v33;
          v44 = v50 + 8;
          while (v34 != v36)
          {
            v52 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v50 - 1) = v52;
            v50 -= 8;
          }
LABEL_67:
          v32[295] = v50;
          v32[296] = v44;
          v32[297] = v51;
          if (v36)
            operator delete(v36);
          goto LABEL_69;
        }
        goto LABEL_72;
      }
    }
    *(_QWORD *)v34 = v33;
    v44 = v34 + 8;
LABEL_69:
    v32[296] = v44;
    goto LABEL_70;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD *)a1[1];
    *(_QWORD *)(*(_QWORD *)(v18 + 2344) - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(_QWORD *)(*(_QWORD *)(v18 + 2368) - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
  }
}

void sub_155890(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t *v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v8 = (char *)v6[500];
      v19 = v6[501];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[499];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_328;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 501), v24);
          v8 = (char *)v6[500];
          v10 = (char *)v6[499];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v8 = (char *)v6[500];
      v9 = v6[501];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[499];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_328;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 501), v14);
          v8 = (char *)v6[500];
          v10 = (char *)v6[499];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[499] = v26;
        v6[500] = v20;
        v6[501] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[500] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[503];
      v41 = v31[504];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[502];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_328;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 504), v46);
          v33 = (uint64_t *)v31[503];
          v35 = (uint64_t *)v31[502];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[503];
      v34 = v31[504];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[502];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_328;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 504), v39);
          v33 = (uint64_t *)v31[503];
          v35 = (uint64_t *)v31[502];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[502] = v48;
        v31[503] = v42;
        v31[504] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[503] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v55 = (char *)v53[506];
      v63 = v53[507];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[505];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_328;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 507), v68);
          v55 = (char *)v53[506];
          v57 = (char *)v53[505];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v55 = (char *)v53[506];
      v56 = v53[507];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[505];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_328;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 507), v61);
          v55 = (char *)v53[506];
          v57 = (char *)v53[505];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[505] = v70;
        v53[506] = v64;
        v53[507] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[506] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v77 = (uint64_t *)v75[509];
      v85 = v75[510];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (uint64_t *)v75[508];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_328;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 510), v90);
          v77 = (uint64_t *)v75[509];
          v79 = (uint64_t *)v75[508];
        }
        else
        {
          v91 = 0;
        }
        v92 = (uint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v77 = (uint64_t *)v75[509];
      v78 = v75[510];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (uint64_t *)v75[508];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_328;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 510), v83);
          v77 = (uint64_t *)v75[509];
          v79 = (uint64_t *)v75[508];
        }
        else
        {
          v84 = 0;
        }
        v92 = (uint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[508] = v92;
        v75[509] = v86;
        v75[510] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[509] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v99 = (uint64_t *)v97[512];
      v107 = v97[513];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[511];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_328;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 513), v112);
          v99 = (uint64_t *)v97[512];
          v101 = (uint64_t *)v97[511];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v99 = (uint64_t *)v97[512];
      v100 = v97[513];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[511];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_328;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 513), v105);
          v99 = (uint64_t *)v97[512];
          v101 = (uint64_t *)v97[511];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[511] = v114;
        v97[512] = v108;
        v97[513] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[512] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v130 = a1[1];
      v120 = *(_QWORD **)v130;
      v121 = *(unsigned __int16 *)(a1[2] + 46);
      v122 = *(char **)(*(_QWORD *)v130 + 4120);
      v131 = *(_QWORD *)(*(_QWORD *)v130 + 4128);
      if ((unint64_t)v122 >= v131)
      {
        v124 = (char *)v120[514];
        v133 = (v122 - v124) >> 3;
        if ((unint64_t)(v133 + 1) >> 61)
          goto LABEL_328;
        v134 = v131 - (_QWORD)v124;
        v135 = (uint64_t)(v131 - (_QWORD)v124) >> 2;
        if (v135 <= v133 + 1)
          v135 = v133 + 1;
        if (v134 >= 0x7FFFFFFFFFFFFFF8)
          v136 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v136 = v135;
        if (v136)
        {
          v137 = (char *)sub_40FC((uint64_t)(v120 + 516), v136);
          v122 = (char *)v120[515];
          v124 = (char *)v120[514];
        }
        else
        {
          v137 = 0;
        }
        v138 = &v137[8 * v133];
        v139 = &v137[8 * v136];
        *(_QWORD *)v138 = v121;
        v132 = v138 + 8;
        while (v122 != v124)
        {
          v141 = *((_QWORD *)v122 - 1);
          v122 -= 8;
          *((_QWORD *)v138 - 1) = v141;
          v138 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = a1[1];
      v120 = *(_QWORD **)v119;
      v121 = *(unsigned __int16 *)(a1[2] + 46);
      v122 = *(char **)(*(_QWORD *)v119 + 4120);
      v123 = *(_QWORD *)(*(_QWORD *)v119 + 4128);
      if ((unint64_t)v122 >= v123)
      {
        v124 = (char *)v120[514];
        v125 = (v122 - v124) >> 3;
        if ((unint64_t)(v125 + 1) >> 61)
          goto LABEL_328;
        v126 = v123 - (_QWORD)v124;
        v127 = (uint64_t)(v123 - (_QWORD)v124) >> 2;
        if (v127 <= v125 + 1)
          v127 = v125 + 1;
        if (v126 >= 0x7FFFFFFFFFFFFFF8)
          v128 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v128 = v127;
        if (v128)
        {
          v129 = (char *)sub_40FC((uint64_t)(v120 + 516), v128);
          v122 = (char *)v120[515];
          v124 = (char *)v120[514];
        }
        else
        {
          v129 = 0;
        }
        v138 = &v129[8 * v125];
        v139 = &v129[8 * v128];
        *(_QWORD *)v138 = v121;
        v132 = v138 + 8;
        while (v122 != v124)
        {
          v140 = *((_QWORD *)v122 - 1);
          v122 -= 8;
          *((_QWORD *)v138 - 1) = v140;
          v138 -= 8;
        }
LABEL_195:
        v120[514] = v138;
        v120[515] = v132;
        v120[516] = v139;
        if (v124)
          operator delete(v124);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v122 = v121;
    v132 = v122 + 8;
LABEL_197:
    v120[515] = v132;
LABEL_198:
    v142 = 1 << *(_DWORD *)(v3 + 48);
    if (v142 == 2)
    {
      v154 = a1[1];
      v144 = *(_QWORD **)v154;
      v145 = *(unsigned __int16 *)(a1[2] + 44);
      v146 = *(char **)(*(_QWORD *)v154 + 4144);
      v155 = *(_QWORD *)(*(_QWORD *)v154 + 4152);
      if ((unint64_t)v146 >= v155)
      {
        v148 = (char *)v144[517];
        v157 = (v146 - v148) >> 3;
        if ((unint64_t)(v157 + 1) >> 61)
          goto LABEL_328;
        v158 = v155 - (_QWORD)v148;
        v159 = (uint64_t)(v155 - (_QWORD)v148) >> 2;
        if (v159 <= v157 + 1)
          v159 = v157 + 1;
        if (v158 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v159;
        if (v160)
        {
          v161 = (char *)sub_40FC((uint64_t)(v144 + 519), v160);
          v146 = (char *)v144[518];
          v148 = (char *)v144[517];
        }
        else
        {
          v161 = 0;
        }
        v162 = &v161[8 * v157];
        v163 = &v161[8 * v160];
        *(_QWORD *)v162 = v145;
        v156 = v162 + 8;
        while (v146 != v148)
        {
          v165 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v162 - 1) = v165;
          v162 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v142 != 1)
        goto LABEL_230;
      v143 = a1[1];
      v144 = *(_QWORD **)v143;
      v145 = *(unsigned __int16 *)(a1[2] + 44);
      v146 = *(char **)(*(_QWORD *)v143 + 4144);
      v147 = *(_QWORD *)(*(_QWORD *)v143 + 4152);
      if ((unint64_t)v146 >= v147)
      {
        v148 = (char *)v144[517];
        v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_328;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 519), v152);
          v146 = (char *)v144[518];
          v148 = (char *)v144[517];
        }
        else
        {
          v153 = 0;
        }
        v162 = &v153[8 * v149];
        v163 = &v153[8 * v152];
        *(_QWORD *)v162 = v145;
        v156 = v162 + 8;
        while (v146 != v148)
        {
          v164 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v162 - 1) = v164;
          v162 -= 8;
        }
LABEL_227:
        v144[517] = v162;
        v144[518] = v156;
        v144[519] = v163;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v146 = v145;
    v156 = v146 + 8;
LABEL_229:
    v144[518] = v156;
LABEL_230:
    v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      v178 = a1[1];
      v168 = *(_QWORD **)v178;
      v169 = *(unsigned __int16 *)(a1[2] + 28);
      v170 = *(char **)(*(_QWORD *)v178 + 4168);
      v179 = *(_QWORD *)(*(_QWORD *)v178 + 4176);
      if ((unint64_t)v170 >= v179)
      {
        v172 = (char *)v168[520];
        v181 = (v170 - v172) >> 3;
        if ((unint64_t)(v181 + 1) >> 61)
          goto LABEL_328;
        v182 = v179 - (_QWORD)v172;
        v183 = (uint64_t)(v179 - (_QWORD)v172) >> 2;
        if (v183 <= v181 + 1)
          v183 = v181 + 1;
        if (v182 >= 0x7FFFFFFFFFFFFFF8)
          v184 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        if (v184)
        {
          v185 = (char *)sub_40FC((uint64_t)(v168 + 522), v184);
          v170 = (char *)v168[521];
          v172 = (char *)v168[520];
        }
        else
        {
          v185 = 0;
        }
        v186 = &v185[8 * v181];
        v187 = &v185[8 * v184];
        *(_QWORD *)v186 = v169;
        v180 = v186 + 8;
        while (v170 != v172)
        {
          v189 = *((_QWORD *)v170 - 1);
          v170 -= 8;
          *((_QWORD *)v186 - 1) = v189;
          v186 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v166 != 1)
        goto LABEL_262;
      v167 = a1[1];
      v168 = *(_QWORD **)v167;
      v169 = *(unsigned __int16 *)(a1[2] + 28);
      v170 = *(char **)(*(_QWORD *)v167 + 4168);
      v171 = *(_QWORD *)(*(_QWORD *)v167 + 4176);
      if ((unint64_t)v170 >= v171)
      {
        v172 = (char *)v168[520];
        v173 = (v170 - v172) >> 3;
        if ((unint64_t)(v173 + 1) >> 61)
          goto LABEL_328;
        v174 = v171 - (_QWORD)v172;
        v175 = (uint64_t)(v171 - (_QWORD)v172) >> 2;
        if (v175 <= v173 + 1)
          v175 = v173 + 1;
        if (v174 >= 0x7FFFFFFFFFFFFFF8)
          v176 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v176 = v175;
        if (v176)
        {
          v177 = (char *)sub_40FC((uint64_t)(v168 + 522), v176);
          v170 = (char *)v168[521];
          v172 = (char *)v168[520];
        }
        else
        {
          v177 = 0;
        }
        v186 = &v177[8 * v173];
        v187 = &v177[8 * v176];
        *(_QWORD *)v186 = v169;
        v180 = v186 + 8;
        while (v170 != v172)
        {
          v188 = *((_QWORD *)v170 - 1);
          v170 -= 8;
          *((_QWORD *)v186 - 1) = v188;
          v186 -= 8;
        }
LABEL_259:
        v168[520] = v186;
        v168[521] = v180;
        v168[522] = v187;
        if (v172)
          operator delete(v172);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v170 = v169;
    v180 = v170 + 8;
LABEL_261:
    v168[521] = v180;
LABEL_262:
    v190 = 1 << *(_DWORD *)(v3 + 48);
    if (v190 == 2)
    {
      v191 = *(_QWORD **)a1[1];
      v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v193 = (uint64_t *)v191[524];
      v201 = v191[525];
      if ((unint64_t)v193 >= v201)
      {
        v195 = (uint64_t *)v191[523];
        v203 = v193 - v195;
        if ((unint64_t)(v203 + 1) >> 61)
          goto LABEL_328;
        v204 = v201 - (_QWORD)v195;
        v205 = (uint64_t)(v201 - (_QWORD)v195) >> 2;
        if (v205 <= v203 + 1)
          v205 = v203 + 1;
        if (v204 >= 0x7FFFFFFFFFFFFFF8)
          v206 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v206 = v205;
        if (v206)
        {
          v207 = (char *)sub_40FC((uint64_t)(v191 + 525), v206);
          v193 = (uint64_t *)v191[524];
          v195 = (uint64_t *)v191[523];
        }
        else
        {
          v207 = 0;
        }
        v208 = (uint64_t *)&v207[8 * v203];
        v209 = &v207[8 * v206];
        *v208 = v192;
        v202 = v208 + 1;
        while (v193 != v195)
        {
          v211 = *--v193;
          *--v208 = v211;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v190 != 1)
        goto LABEL_294;
      v191 = *(_QWORD **)a1[1];
      v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v193 = (uint64_t *)v191[524];
      v194 = v191[525];
      if ((unint64_t)v193 >= v194)
      {
        v195 = (uint64_t *)v191[523];
        v196 = v193 - v195;
        if ((unint64_t)(v196 + 1) >> 61)
          goto LABEL_328;
        v197 = v194 - (_QWORD)v195;
        v198 = (uint64_t)(v194 - (_QWORD)v195) >> 2;
        if (v198 <= v196 + 1)
          v198 = v196 + 1;
        if (v197 >= 0x7FFFFFFFFFFFFFF8)
          v199 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v199 = v198;
        if (v199)
        {
          v200 = (char *)sub_40FC((uint64_t)(v191 + 525), v199);
          v193 = (uint64_t *)v191[524];
          v195 = (uint64_t *)v191[523];
        }
        else
        {
          v200 = 0;
        }
        v208 = (uint64_t *)&v200[8 * v196];
        v209 = &v200[8 * v199];
        *v208 = v192;
        v202 = v208 + 1;
        while (v193 != v195)
        {
          v210 = *--v193;
          *--v208 = v210;
        }
LABEL_291:
        v191[523] = v208;
        v191[524] = v202;
        v191[525] = v209;
        if (v195)
          operator delete(v195);
        goto LABEL_293;
      }
    }
    *v193 = v192;
    v202 = v193 + 1;
LABEL_293:
    v191[524] = v202;
LABEL_294:
    v212 = 1 << *(_DWORD *)(v3 + 48);
    if (v212 == 2)
    {
      v224 = a1[2];
      v214 = *(_QWORD **)a1[1];
      v215 = *(_DWORD *)(v224 + 52) & 0x1FFFFLL;
      v216 = (uint64_t *)v214[527];
      v225 = v214[528];
      if ((unint64_t)v216 >= v225)
      {
        v218 = (uint64_t *)v214[526];
        v227 = v216 - v218;
        if (!((unint64_t)(v227 + 1) >> 61))
        {
          v228 = v225 - (_QWORD)v218;
          v229 = (uint64_t)(v225 - (_QWORD)v218) >> 2;
          if (v229 <= v227 + 1)
            v229 = v227 + 1;
          if (v228 >= 0x7FFFFFFFFFFFFFF8)
            v230 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v230 = v229;
          if (v230)
          {
            v231 = (char *)sub_40FC((uint64_t)(v214 + 528), v230);
            v216 = (uint64_t *)v214[527];
            v218 = (uint64_t *)v214[526];
          }
          else
          {
            v231 = 0;
          }
          v232 = (uint64_t *)&v231[8 * v227];
          v233 = &v231[8 * v230];
          *v232 = v215;
          v226 = v232 + 1;
          while (v216 != v218)
          {
            v235 = *--v216;
            *--v232 = v235;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v212 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v213 = a1[2];
      v214 = *(_QWORD **)a1[1];
      v215 = *(_DWORD *)(v213 + 52) & 0x1FFFFLL;
      v216 = (uint64_t *)v214[527];
      v217 = v214[528];
      if ((unint64_t)v216 >= v217)
      {
        v218 = (uint64_t *)v214[526];
        v219 = v216 - v218;
        if (!((unint64_t)(v219 + 1) >> 61))
        {
          v220 = v217 - (_QWORD)v218;
          v221 = (uint64_t)(v217 - (_QWORD)v218) >> 2;
          if (v221 <= v219 + 1)
            v221 = v219 + 1;
          if (v220 >= 0x7FFFFFFFFFFFFFF8)
            v222 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v222 = v221;
          if (v222)
          {
            v223 = (char *)sub_40FC((uint64_t)(v214 + 528), v222);
            v216 = (uint64_t *)v214[527];
            v218 = (uint64_t *)v214[526];
          }
          else
          {
            v223 = 0;
          }
          v232 = (uint64_t *)&v223[8 * v219];
          v233 = &v223[8 * v222];
          *v232 = v215;
          v226 = v232 + 1;
          while (v216 != v218)
          {
            v234 = *--v216;
            *--v232 = v234;
          }
LABEL_323:
          v214[526] = v232;
          v214[527] = v226;
          v214[528] = v233;
          if (v218)
            operator delete(v218);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *v216 = v215;
    v226 = v216 + 1;
LABEL_325:
    v214[527] = v226;
    goto LABEL_326;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[500] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(_QWORD *)(v18[503] - 8) += *(_DWORD *)(v17 + 40) & 0x1FFFF;
    *(_QWORD *)(v18[506] - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(_QWORD *)(v18[509] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(_QWORD *)(v18[512] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(_QWORD *)(v18[515] - 8) += *(unsigned __int16 *)(v17 + 46);
    *(_QWORD *)(v18[518] - 8) += *(unsigned __int16 *)(v17 + 44);
    *(_QWORD *)(v18[521] - 8) += *(unsigned __int16 *)(v17 + 28);
    *(_QWORD *)(v18[524] - 8) += *(_DWORD *)(v17 + 48) & 0x1FFFF;
    *(_QWORD *)(v18[527] - 8) += *(_DWORD *)(v17 + 52) & 0x1FFFF;
  }
}

void sub_156930(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t *v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  uint64_t *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  unint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t *v239;
  unint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  char *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  uint64_t *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t *v261;
  unint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  unint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  uint64_t *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  unint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  uint64_t *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  char *v306;
  unint64_t v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  uint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  char *v330;
  unint64_t v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  char *v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  char *v354;
  unint64_t v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  uint64_t v362;
  unint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  char *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  char *v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  char *v385;
  uint64_t v386;
  unint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t *v401;
  unint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  char *v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  char *v415;
  uint64_t *v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  _QWORD *v421;
  uint64_t v422;
  char *v423;
  unint64_t v424;
  char *v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  char *v430;
  unint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  char *v437;
  char *v438;
  char *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  _QWORD *v443;
  uint64_t v444;
  char *v445;
  unint64_t v446;
  char *v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  char *v452;
  unint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  char *v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  char *v468;
  unint64_t v469;
  char *v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  char *v475;
  uint64_t v476;
  unint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  char *v483;
  char *v484;
  char *v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  _QWORD *v489;
  uint64_t v490;
  uint64_t *v491;
  unint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  char *v498;
  unint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  char *v505;
  uint64_t *v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t *v513;
  unint64_t v514;
  uint64_t *v515;
  uint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  char *v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  char *v527;
  uint64_t *v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  _QWORD *v534;
  uint64_t v535;
  uint64_t *v536;
  unint64_t v537;
  uint64_t *v538;
  uint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  char *v543;
  uint64_t v544;
  unint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  char *v551;
  uint64_t *v552;
  char *v553;
  uint64_t v554;
  uint64_t v555;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      v8 = (unint64_t *)v6[416];
      v25 = v6[417];
      if ((unint64_t)v8 >= v25)
      {
        v10 = (unint64_t *)v6[415];
        v27 = v8 - v10;
        if ((unint64_t)(v27 + 1) >> 61)
          goto LABEL_776;
        v28 = v25 - (_QWORD)v10;
        v29 = (uint64_t)(v25 - (_QWORD)v10) >> 2;
        if (v29 <= v27 + 1)
          v29 = v27 + 1;
        if (v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          v31 = (char *)sub_40FC((uint64_t)(v6 + 417), v30);
          v8 = (unint64_t *)v6[416];
          v10 = (unint64_t *)v6[415];
        }
        else
        {
          v31 = 0;
        }
        v32 = (unint64_t *)&v31[8 * v27];
        v33 = &v31[8 * v30];
        *v32 = v7;
        v26 = v32 + 1;
        while (v8 != v10)
        {
          v35 = *--v8;
          *--v32 = v35;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      v8 = (unint64_t *)v6[416];
      v9 = v6[417];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (unint64_t *)v6[415];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_776;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 417), v14);
          v8 = (unint64_t *)v6[416];
          v10 = (unint64_t *)v6[415];
        }
        else
        {
          v15 = 0;
        }
        v32 = (unint64_t *)&v15[8 * v11];
        v33 = &v15[8 * v14];
        *v32 = v7;
        v26 = v32 + 1;
        while (v8 != v10)
        {
          v34 = *--v8;
          *--v32 = v34;
        }
LABEL_35:
        v6[415] = v32;
        v6[416] = v26;
        v6[417] = v33;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v26 = v8 + 1;
LABEL_37:
    v6[416] = v26;
LABEL_38:
    v36 = 1 << *(_DWORD *)(v3 + 48);
    if (v36 == 2)
    {
      v37 = *(_QWORD **)a1[1];
      v38 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v39 = (uint64_t *)v37[419];
      v47 = v37[420];
      if ((unint64_t)v39 >= v47)
      {
        v41 = (uint64_t *)v37[418];
        v49 = v39 - v41;
        if ((unint64_t)(v49 + 1) >> 61)
          goto LABEL_776;
        v50 = v47 - (_QWORD)v41;
        v51 = (uint64_t)(v47 - (_QWORD)v41) >> 2;
        if (v51 <= v49 + 1)
          v51 = v49 + 1;
        if (v50 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
        {
          v53 = (char *)sub_40FC((uint64_t)(v37 + 420), v52);
          v39 = (uint64_t *)v37[419];
          v41 = (uint64_t *)v37[418];
        }
        else
        {
          v53 = 0;
        }
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v38;
        v48 = v54 + 1;
        while (v39 != v41)
        {
          v57 = *--v39;
          *--v54 = v57;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v36 != 1)
        goto LABEL_70;
      v37 = *(_QWORD **)a1[1];
      v38 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v39 = (uint64_t *)v37[419];
      v40 = v37[420];
      if ((unint64_t)v39 >= v40)
      {
        v41 = (uint64_t *)v37[418];
        v42 = v39 - v41;
        if ((unint64_t)(v42 + 1) >> 61)
          goto LABEL_776;
        v43 = v40 - (_QWORD)v41;
        v44 = (uint64_t)(v40 - (_QWORD)v41) >> 2;
        if (v44 <= v42 + 1)
          v44 = v42 + 1;
        if (v43 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
        {
          v46 = (char *)sub_40FC((uint64_t)(v37 + 420), v45);
          v39 = (uint64_t *)v37[419];
          v41 = (uint64_t *)v37[418];
        }
        else
        {
          v46 = 0;
        }
        v54 = (uint64_t *)&v46[8 * v42];
        v55 = &v46[8 * v45];
        *v54 = v38;
        v48 = v54 + 1;
        while (v39 != v41)
        {
          v56 = *--v39;
          *--v54 = v56;
        }
LABEL_67:
        v37[418] = v54;
        v37[419] = v48;
        v37[420] = v55;
        if (v41)
          operator delete(v41);
        goto LABEL_69;
      }
    }
    *v39 = v38;
    v48 = v39 + 1;
LABEL_69:
    v37[419] = v48;
LABEL_70:
    v58 = 1 << *(_DWORD *)(v3 + 48);
    if (v58 == 2)
    {
      v59 = *(_QWORD **)a1[1];
      v60 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v61 = (char *)v59[422];
      v69 = v59[423];
      if ((unint64_t)v61 >= v69)
      {
        v63 = (char *)v59[421];
        v71 = (v61 - v63) >> 3;
        if ((unint64_t)(v71 + 1) >> 61)
          goto LABEL_776;
        v72 = v69 - (_QWORD)v63;
        v73 = (uint64_t)(v69 - (_QWORD)v63) >> 2;
        if (v73 <= v71 + 1)
          v73 = v71 + 1;
        if (v72 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
        {
          v75 = (char *)sub_40FC((uint64_t)(v59 + 423), v74);
          v61 = (char *)v59[422];
          v63 = (char *)v59[421];
        }
        else
        {
          v75 = 0;
        }
        v76 = &v75[8 * v71];
        v77 = &v75[8 * v74];
        *(_QWORD *)v76 = v60;
        v70 = v76 + 8;
        while (v61 != v63)
        {
          v79 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *((_QWORD *)v76 - 1) = v79;
          v76 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v58 != 1)
        goto LABEL_102;
      v59 = *(_QWORD **)a1[1];
      v60 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v61 = (char *)v59[422];
      v62 = v59[423];
      if ((unint64_t)v61 >= v62)
      {
        v63 = (char *)v59[421];
        v64 = (v61 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          goto LABEL_776;
        v65 = v62 - (_QWORD)v63;
        v66 = (uint64_t)(v62 - (_QWORD)v63) >> 2;
        if (v66 <= v64 + 1)
          v66 = v64 + 1;
        if (v65 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
        {
          v68 = (char *)sub_40FC((uint64_t)(v59 + 423), v67);
          v61 = (char *)v59[422];
          v63 = (char *)v59[421];
        }
        else
        {
          v68 = 0;
        }
        v76 = &v68[8 * v64];
        v77 = &v68[8 * v67];
        *(_QWORD *)v76 = v60;
        v70 = v76 + 8;
        while (v61 != v63)
        {
          v78 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *((_QWORD *)v76 - 1) = v78;
          v76 -= 8;
        }
LABEL_99:
        v59[421] = v76;
        v59[422] = v70;
        v59[423] = v77;
        if (v63)
          operator delete(v63);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v61 = v60;
    v70 = v61 + 8;
LABEL_101:
    v59[422] = v70;
LABEL_102:
    v80 = 1 << *(_DWORD *)(v3 + 48);
    if (v80 == 2)
    {
      v81 = *(_QWORD **)a1[1];
      v82 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v83 = (char *)v81[425];
      v91 = v81[426];
      if ((unint64_t)v83 >= v91)
      {
        v85 = (char *)v81[424];
        v93 = (v83 - v85) >> 3;
        if ((unint64_t)(v93 + 1) >> 61)
          goto LABEL_776;
        v94 = v91 - (_QWORD)v85;
        v95 = (uint64_t)(v91 - (_QWORD)v85) >> 2;
        if (v95 <= v93 + 1)
          v95 = v93 + 1;
        if (v94 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v96 = v95;
        if (v96)
        {
          v97 = (char *)sub_40FC((uint64_t)(v81 + 426), v96);
          v83 = (char *)v81[425];
          v85 = (char *)v81[424];
        }
        else
        {
          v97 = 0;
        }
        v98 = &v97[8 * v93];
        v99 = &v97[8 * v96];
        *(_QWORD *)v98 = v82;
        v92 = v98 + 8;
        while (v83 != v85)
        {
          v101 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v98 - 1) = v101;
          v98 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v80 != 1)
        goto LABEL_134;
      v81 = *(_QWORD **)a1[1];
      v82 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v83 = (char *)v81[425];
      v84 = v81[426];
      if ((unint64_t)v83 >= v84)
      {
        v85 = (char *)v81[424];
        v86 = (v83 - v85) >> 3;
        if ((unint64_t)(v86 + 1) >> 61)
          goto LABEL_776;
        v87 = v84 - (_QWORD)v85;
        v88 = (uint64_t)(v84 - (_QWORD)v85) >> 2;
        if (v88 <= v86 + 1)
          v88 = v86 + 1;
        if (v87 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
        {
          v90 = (char *)sub_40FC((uint64_t)(v81 + 426), v89);
          v83 = (char *)v81[425];
          v85 = (char *)v81[424];
        }
        else
        {
          v90 = 0;
        }
        v98 = &v90[8 * v86];
        v99 = &v90[8 * v89];
        *(_QWORD *)v98 = v82;
        v92 = v98 + 8;
        while (v83 != v85)
        {
          v100 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v98 - 1) = v100;
          v98 -= 8;
        }
LABEL_131:
        v81[424] = v98;
        v81[425] = v92;
        v81[426] = v99;
        if (v85)
          operator delete(v85);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v83 = v82;
    v92 = v83 + 8;
LABEL_133:
    v81[425] = v92;
LABEL_134:
    v102 = 1 << *(_DWORD *)(v3 + 48);
    if (v102 == 2)
    {
      v103 = *(_QWORD **)a1[1];
      v104 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v105 = (char *)v103[428];
      v113 = v103[429];
      if ((unint64_t)v105 >= v113)
      {
        v107 = (char *)v103[427];
        v115 = (v105 - v107) >> 3;
        if ((unint64_t)(v115 + 1) >> 61)
          goto LABEL_776;
        v116 = v113 - (_QWORD)v107;
        v117 = (uint64_t)(v113 - (_QWORD)v107) >> 2;
        if (v117 <= v115 + 1)
          v117 = v115 + 1;
        if (v116 >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v117;
        if (v118)
        {
          v119 = (char *)sub_40FC((uint64_t)(v103 + 429), v118);
          v105 = (char *)v103[428];
          v107 = (char *)v103[427];
        }
        else
        {
          v119 = 0;
        }
        v120 = &v119[8 * v115];
        v121 = &v119[8 * v118];
        *(_QWORD *)v120 = v104;
        v114 = v120 + 8;
        while (v105 != v107)
        {
          v123 = *((_QWORD *)v105 - 1);
          v105 -= 8;
          *((_QWORD *)v120 - 1) = v123;
          v120 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v102 != 1)
        goto LABEL_166;
      v103 = *(_QWORD **)a1[1];
      v104 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v105 = (char *)v103[428];
      v106 = v103[429];
      if ((unint64_t)v105 >= v106)
      {
        v107 = (char *)v103[427];
        v108 = (v105 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61)
          goto LABEL_776;
        v109 = v106 - (_QWORD)v107;
        v110 = (uint64_t)(v106 - (_QWORD)v107) >> 2;
        if (v110 <= v108 + 1)
          v110 = v108 + 1;
        if (v109 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v110;
        if (v111)
        {
          v112 = (char *)sub_40FC((uint64_t)(v103 + 429), v111);
          v105 = (char *)v103[428];
          v107 = (char *)v103[427];
        }
        else
        {
          v112 = 0;
        }
        v120 = &v112[8 * v108];
        v121 = &v112[8 * v111];
        *(_QWORD *)v120 = v104;
        v114 = v120 + 8;
        while (v105 != v107)
        {
          v122 = *((_QWORD *)v105 - 1);
          v105 -= 8;
          *((_QWORD *)v120 - 1) = v122;
          v120 -= 8;
        }
LABEL_163:
        v103[427] = v120;
        v103[428] = v114;
        v103[429] = v121;
        if (v107)
          operator delete(v107);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v105 = v104;
    v114 = v105 + 8;
LABEL_165:
    v103[428] = v114;
LABEL_166:
    v124 = 1 << *(_DWORD *)(v3 + 48);
    if (v124 == 2)
    {
      v125 = *(_QWORD **)a1[1];
      v126 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v127 = (char *)v125[431];
      v135 = v125[432];
      if ((unint64_t)v127 >= v135)
      {
        v129 = (char *)v125[430];
        v137 = (v127 - v129) >> 3;
        if ((unint64_t)(v137 + 1) >> 61)
          goto LABEL_776;
        v138 = v135 - (_QWORD)v129;
        v139 = (uint64_t)(v135 - (_QWORD)v129) >> 2;
        if (v139 <= v137 + 1)
          v139 = v137 + 1;
        if (v138 >= 0x7FFFFFFFFFFFFFF8)
          v140 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v140 = v139;
        if (v140)
        {
          v141 = (char *)sub_40FC((uint64_t)(v125 + 432), v140);
          v127 = (char *)v125[431];
          v129 = (char *)v125[430];
        }
        else
        {
          v141 = 0;
        }
        v142 = &v141[8 * v137];
        v143 = &v141[8 * v140];
        *(_QWORD *)v142 = v126;
        v136 = v142 + 8;
        while (v127 != v129)
        {
          v145 = *((_QWORD *)v127 - 1);
          v127 -= 8;
          *((_QWORD *)v142 - 1) = v145;
          v142 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v124 != 1)
        goto LABEL_198;
      v125 = *(_QWORD **)a1[1];
      v126 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v127 = (char *)v125[431];
      v128 = v125[432];
      if ((unint64_t)v127 >= v128)
      {
        v129 = (char *)v125[430];
        v130 = (v127 - v129) >> 3;
        if ((unint64_t)(v130 + 1) >> 61)
          goto LABEL_776;
        v131 = v128 - (_QWORD)v129;
        v132 = (uint64_t)(v128 - (_QWORD)v129) >> 2;
        if (v132 <= v130 + 1)
          v132 = v130 + 1;
        if (v131 >= 0x7FFFFFFFFFFFFFF8)
          v133 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v133 = v132;
        if (v133)
        {
          v134 = (char *)sub_40FC((uint64_t)(v125 + 432), v133);
          v127 = (char *)v125[431];
          v129 = (char *)v125[430];
        }
        else
        {
          v134 = 0;
        }
        v142 = &v134[8 * v130];
        v143 = &v134[8 * v133];
        *(_QWORD *)v142 = v126;
        v136 = v142 + 8;
        while (v127 != v129)
        {
          v144 = *((_QWORD *)v127 - 1);
          v127 -= 8;
          *((_QWORD *)v142 - 1) = v144;
          v142 -= 8;
        }
LABEL_195:
        v125[430] = v142;
        v125[431] = v136;
        v125[432] = v143;
        if (v129)
          operator delete(v129);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v127 = v126;
    v136 = v127 + 8;
LABEL_197:
    v125[431] = v136;
LABEL_198:
    v146 = 1 << *(_DWORD *)(v3 + 48);
    if (v146 == 2)
    {
      v158 = a1[1];
      v148 = *(_QWORD **)v158;
      v149 = *(unsigned __int16 *)(a1[2] + 60);
      v150 = *(char **)(*(_QWORD *)v158 + 3472);
      v159 = *(_QWORD *)(*(_QWORD *)v158 + 3480);
      if ((unint64_t)v150 >= v159)
      {
        v152 = (char *)v148[433];
        v161 = (v150 - v152) >> 3;
        if ((unint64_t)(v161 + 1) >> 61)
          goto LABEL_776;
        v162 = v159 - (_QWORD)v152;
        v163 = (uint64_t)(v159 - (_QWORD)v152) >> 2;
        if (v163 <= v161 + 1)
          v163 = v161 + 1;
        if (v162 >= 0x7FFFFFFFFFFFFFF8)
          v164 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v164 = v163;
        if (v164)
        {
          v165 = (char *)sub_40FC((uint64_t)(v148 + 435), v164);
          v150 = (char *)v148[434];
          v152 = (char *)v148[433];
        }
        else
        {
          v165 = 0;
        }
        v166 = &v165[8 * v161];
        v167 = &v165[8 * v164];
        *(_QWORD *)v166 = v149;
        v160 = v166 + 8;
        while (v150 != v152)
        {
          v169 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v166 - 1) = v169;
          v166 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v146 != 1)
        goto LABEL_230;
      v147 = a1[1];
      v148 = *(_QWORD **)v147;
      v149 = *(unsigned __int16 *)(a1[2] + 60);
      v150 = *(char **)(*(_QWORD *)v147 + 3472);
      v151 = *(_QWORD *)(*(_QWORD *)v147 + 3480);
      if ((unint64_t)v150 >= v151)
      {
        v152 = (char *)v148[433];
        v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_776;
        v154 = v151 - (_QWORD)v152;
        v155 = (uint64_t)(v151 - (_QWORD)v152) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v148 + 435), v156);
          v150 = (char *)v148[434];
          v152 = (char *)v148[433];
        }
        else
        {
          v157 = 0;
        }
        v166 = &v157[8 * v153];
        v167 = &v157[8 * v156];
        *(_QWORD *)v166 = v149;
        v160 = v166 + 8;
        while (v150 != v152)
        {
          v168 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v166 - 1) = v168;
          v166 -= 8;
        }
LABEL_227:
        v148[433] = v166;
        v148[434] = v160;
        v148[435] = v167;
        if (v152)
          operator delete(v152);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v150 = v149;
    v160 = v150 + 8;
LABEL_229:
    v148[434] = v160;
LABEL_230:
    v170 = 1 << *(_DWORD *)(v3 + 48);
    if (v170 == 2)
    {
      v171 = *(_QWORD **)a1[1];
      v172 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v173 = (uint64_t *)v171[437];
      v181 = v171[438];
      if ((unint64_t)v173 >= v181)
      {
        v175 = (uint64_t *)v171[436];
        v183 = v173 - v175;
        if ((unint64_t)(v183 + 1) >> 61)
          goto LABEL_776;
        v184 = v181 - (_QWORD)v175;
        v185 = (uint64_t)(v181 - (_QWORD)v175) >> 2;
        if (v185 <= v183 + 1)
          v185 = v183 + 1;
        if (v184 >= 0x7FFFFFFFFFFFFFF8)
          v186 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v186 = v185;
        if (v186)
        {
          v187 = (char *)sub_40FC((uint64_t)(v171 + 438), v186);
          v173 = (uint64_t *)v171[437];
          v175 = (uint64_t *)v171[436];
        }
        else
        {
          v187 = 0;
        }
        v188 = (uint64_t *)&v187[8 * v183];
        v189 = &v187[8 * v186];
        *v188 = v172;
        v182 = v188 + 1;
        while (v173 != v175)
        {
          v191 = *--v173;
          *--v188 = v191;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v170 != 1)
        goto LABEL_262;
      v171 = *(_QWORD **)a1[1];
      v172 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v173 = (uint64_t *)v171[437];
      v174 = v171[438];
      if ((unint64_t)v173 >= v174)
      {
        v175 = (uint64_t *)v171[436];
        v176 = v173 - v175;
        if ((unint64_t)(v176 + 1) >> 61)
          goto LABEL_776;
        v177 = v174 - (_QWORD)v175;
        v178 = (uint64_t)(v174 - (_QWORD)v175) >> 2;
        if (v178 <= v176 + 1)
          v178 = v176 + 1;
        if (v177 >= 0x7FFFFFFFFFFFFFF8)
          v179 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v179 = v178;
        if (v179)
        {
          v180 = (char *)sub_40FC((uint64_t)(v171 + 438), v179);
          v173 = (uint64_t *)v171[437];
          v175 = (uint64_t *)v171[436];
        }
        else
        {
          v180 = 0;
        }
        v188 = (uint64_t *)&v180[8 * v176];
        v189 = &v180[8 * v179];
        *v188 = v172;
        v182 = v188 + 1;
        while (v173 != v175)
        {
          v190 = *--v173;
          *--v188 = v190;
        }
LABEL_259:
        v171[436] = v188;
        v171[437] = v182;
        v171[438] = v189;
        if (v175)
          operator delete(v175);
        goto LABEL_261;
      }
    }
    *v173 = v172;
    v182 = v173 + 1;
LABEL_261:
    v171[437] = v182;
LABEL_262:
    v192 = 1 << *(_DWORD *)(v3 + 48);
    if (v192 == 2)
    {
      v193 = *(_QWORD **)a1[1];
      v194 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v195 = (uint64_t *)v193[440];
      v203 = v193[441];
      if ((unint64_t)v195 >= v203)
      {
        v197 = (uint64_t *)v193[439];
        v205 = v195 - v197;
        if ((unint64_t)(v205 + 1) >> 61)
          goto LABEL_776;
        v206 = v203 - (_QWORD)v197;
        v207 = (uint64_t)(v203 - (_QWORD)v197) >> 2;
        if (v207 <= v205 + 1)
          v207 = v205 + 1;
        if (v206 >= 0x7FFFFFFFFFFFFFF8)
          v208 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v208 = v207;
        if (v208)
        {
          v209 = (char *)sub_40FC((uint64_t)(v193 + 441), v208);
          v195 = (uint64_t *)v193[440];
          v197 = (uint64_t *)v193[439];
        }
        else
        {
          v209 = 0;
        }
        v210 = (uint64_t *)&v209[8 * v205];
        v211 = &v209[8 * v208];
        *v210 = v194;
        v204 = v210 + 1;
        while (v195 != v197)
        {
          v213 = *--v195;
          *--v210 = v213;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v192 != 1)
        goto LABEL_294;
      v193 = *(_QWORD **)a1[1];
      v194 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v195 = (uint64_t *)v193[440];
      v196 = v193[441];
      if ((unint64_t)v195 >= v196)
      {
        v197 = (uint64_t *)v193[439];
        v198 = v195 - v197;
        if ((unint64_t)(v198 + 1) >> 61)
          goto LABEL_776;
        v199 = v196 - (_QWORD)v197;
        v200 = (uint64_t)(v196 - (_QWORD)v197) >> 2;
        if (v200 <= v198 + 1)
          v200 = v198 + 1;
        if (v199 >= 0x7FFFFFFFFFFFFFF8)
          v201 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v201 = v200;
        if (v201)
        {
          v202 = (char *)sub_40FC((uint64_t)(v193 + 441), v201);
          v195 = (uint64_t *)v193[440];
          v197 = (uint64_t *)v193[439];
        }
        else
        {
          v202 = 0;
        }
        v210 = (uint64_t *)&v202[8 * v198];
        v211 = &v202[8 * v201];
        *v210 = v194;
        v204 = v210 + 1;
        while (v195 != v197)
        {
          v212 = *--v195;
          *--v210 = v212;
        }
LABEL_291:
        v193[439] = v210;
        v193[440] = v204;
        v193[441] = v211;
        if (v197)
          operator delete(v197);
        goto LABEL_293;
      }
    }
    *v195 = v194;
    v204 = v195 + 1;
LABEL_293:
    v193[440] = v204;
LABEL_294:
    v214 = 1 << *(_DWORD *)(v3 + 48);
    if (v214 == 2)
    {
      v215 = *(_QWORD **)a1[1];
      v216 = *(_DWORD *)(a1[2] + 88) & 0x1FFFFLL;
      v217 = (uint64_t *)v215[443];
      v225 = v215[444];
      if ((unint64_t)v217 >= v225)
      {
        v219 = (uint64_t *)v215[442];
        v227 = v217 - v219;
        if ((unint64_t)(v227 + 1) >> 61)
          goto LABEL_776;
        v228 = v225 - (_QWORD)v219;
        v229 = (uint64_t)(v225 - (_QWORD)v219) >> 2;
        if (v229 <= v227 + 1)
          v229 = v227 + 1;
        if (v228 >= 0x7FFFFFFFFFFFFFF8)
          v230 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v230 = v229;
        if (v230)
        {
          v231 = (char *)sub_40FC((uint64_t)(v215 + 444), v230);
          v217 = (uint64_t *)v215[443];
          v219 = (uint64_t *)v215[442];
        }
        else
        {
          v231 = 0;
        }
        v232 = (uint64_t *)&v231[8 * v227];
        v233 = &v231[8 * v230];
        *v232 = v216;
        v226 = v232 + 1;
        while (v217 != v219)
        {
          v235 = *--v217;
          *--v232 = v235;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v214 != 1)
        goto LABEL_326;
      v215 = *(_QWORD **)a1[1];
      v216 = *(_DWORD *)(a1[2] + 88) & 0x1FFFFLL;
      v217 = (uint64_t *)v215[443];
      v218 = v215[444];
      if ((unint64_t)v217 >= v218)
      {
        v219 = (uint64_t *)v215[442];
        v220 = v217 - v219;
        if ((unint64_t)(v220 + 1) >> 61)
          goto LABEL_776;
        v221 = v218 - (_QWORD)v219;
        v222 = (uint64_t)(v218 - (_QWORD)v219) >> 2;
        if (v222 <= v220 + 1)
          v222 = v220 + 1;
        if (v221 >= 0x7FFFFFFFFFFFFFF8)
          v223 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v223 = v222;
        if (v223)
        {
          v224 = (char *)sub_40FC((uint64_t)(v215 + 444), v223);
          v217 = (uint64_t *)v215[443];
          v219 = (uint64_t *)v215[442];
        }
        else
        {
          v224 = 0;
        }
        v232 = (uint64_t *)&v224[8 * v220];
        v233 = &v224[8 * v223];
        *v232 = v216;
        v226 = v232 + 1;
        while (v217 != v219)
        {
          v234 = *--v217;
          *--v232 = v234;
        }
LABEL_323:
        v215[442] = v232;
        v215[443] = v226;
        v215[444] = v233;
        if (v219)
          operator delete(v219);
        goto LABEL_325;
      }
    }
    *v217 = v216;
    v226 = v217 + 1;
LABEL_325:
    v215[443] = v226;
LABEL_326:
    v236 = 1 << *(_DWORD *)(v3 + 48);
    if (v236 == 2)
    {
      v237 = *(_QWORD **)a1[1];
      v238 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      v239 = (uint64_t *)v237[446];
      v247 = v237[447];
      if ((unint64_t)v239 >= v247)
      {
        v241 = (uint64_t *)v237[445];
        v249 = v239 - v241;
        if ((unint64_t)(v249 + 1) >> 61)
          goto LABEL_776;
        v250 = v247 - (_QWORD)v241;
        v251 = (uint64_t)(v247 - (_QWORD)v241) >> 2;
        if (v251 <= v249 + 1)
          v251 = v249 + 1;
        if (v250 >= 0x7FFFFFFFFFFFFFF8)
          v252 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v252 = v251;
        if (v252)
        {
          v253 = (char *)sub_40FC((uint64_t)(v237 + 447), v252);
          v239 = (uint64_t *)v237[446];
          v241 = (uint64_t *)v237[445];
        }
        else
        {
          v253 = 0;
        }
        v254 = (uint64_t *)&v253[8 * v249];
        v255 = &v253[8 * v252];
        *v254 = v238;
        v248 = v254 + 1;
        while (v239 != v241)
        {
          v257 = *--v239;
          *--v254 = v257;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v236 != 1)
        goto LABEL_358;
      v237 = *(_QWORD **)a1[1];
      v238 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      v239 = (uint64_t *)v237[446];
      v240 = v237[447];
      if ((unint64_t)v239 >= v240)
      {
        v241 = (uint64_t *)v237[445];
        v242 = v239 - v241;
        if ((unint64_t)(v242 + 1) >> 61)
          goto LABEL_776;
        v243 = v240 - (_QWORD)v241;
        v244 = (uint64_t)(v240 - (_QWORD)v241) >> 2;
        if (v244 <= v242 + 1)
          v244 = v242 + 1;
        if (v243 >= 0x7FFFFFFFFFFFFFF8)
          v245 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v245 = v244;
        if (v245)
        {
          v246 = (char *)sub_40FC((uint64_t)(v237 + 447), v245);
          v239 = (uint64_t *)v237[446];
          v241 = (uint64_t *)v237[445];
        }
        else
        {
          v246 = 0;
        }
        v254 = (uint64_t *)&v246[8 * v242];
        v255 = &v246[8 * v245];
        *v254 = v238;
        v248 = v254 + 1;
        while (v239 != v241)
        {
          v256 = *--v239;
          *--v254 = v256;
        }
LABEL_355:
        v237[445] = v254;
        v237[446] = v248;
        v237[447] = v255;
        if (v241)
          operator delete(v241);
        goto LABEL_357;
      }
    }
    *v239 = v238;
    v248 = v239 + 1;
LABEL_357:
    v237[446] = v248;
LABEL_358:
    v258 = 1 << *(_DWORD *)(v3 + 48);
    if (v258 == 2)
    {
      v259 = *(_QWORD **)a1[1];
      v260 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      v261 = (uint64_t *)v259[449];
      v269 = v259[450];
      if ((unint64_t)v261 >= v269)
      {
        v263 = (uint64_t *)v259[448];
        v271 = v261 - v263;
        if ((unint64_t)(v271 + 1) >> 61)
          goto LABEL_776;
        v272 = v269 - (_QWORD)v263;
        v273 = (uint64_t)(v269 - (_QWORD)v263) >> 2;
        if (v273 <= v271 + 1)
          v273 = v271 + 1;
        if (v272 >= 0x7FFFFFFFFFFFFFF8)
          v274 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v274 = v273;
        if (v274)
        {
          v275 = (char *)sub_40FC((uint64_t)(v259 + 450), v274);
          v261 = (uint64_t *)v259[449];
          v263 = (uint64_t *)v259[448];
        }
        else
        {
          v275 = 0;
        }
        v276 = (uint64_t *)&v275[8 * v271];
        v277 = &v275[8 * v274];
        *v276 = v260;
        v270 = v276 + 1;
        while (v261 != v263)
        {
          v279 = *--v261;
          *--v276 = v279;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v258 != 1)
        goto LABEL_390;
      v259 = *(_QWORD **)a1[1];
      v260 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      v261 = (uint64_t *)v259[449];
      v262 = v259[450];
      if ((unint64_t)v261 >= v262)
      {
        v263 = (uint64_t *)v259[448];
        v264 = v261 - v263;
        if ((unint64_t)(v264 + 1) >> 61)
          goto LABEL_776;
        v265 = v262 - (_QWORD)v263;
        v266 = (uint64_t)(v262 - (_QWORD)v263) >> 2;
        if (v266 <= v264 + 1)
          v266 = v264 + 1;
        if (v265 >= 0x7FFFFFFFFFFFFFF8)
          v267 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v267 = v266;
        if (v267)
        {
          v268 = (char *)sub_40FC((uint64_t)(v259 + 450), v267);
          v261 = (uint64_t *)v259[449];
          v263 = (uint64_t *)v259[448];
        }
        else
        {
          v268 = 0;
        }
        v276 = (uint64_t *)&v268[8 * v264];
        v277 = &v268[8 * v267];
        *v276 = v260;
        v270 = v276 + 1;
        while (v261 != v263)
        {
          v278 = *--v261;
          *--v276 = v278;
        }
LABEL_387:
        v259[448] = v276;
        v259[449] = v270;
        v259[450] = v277;
        if (v263)
          operator delete(v263);
        goto LABEL_389;
      }
    }
    *v261 = v260;
    v270 = v261 + 1;
LABEL_389:
    v259[449] = v270;
LABEL_390:
    v280 = 1 << *(_DWORD *)(v3 + 48);
    if (v280 == 2)
    {
      v281 = *(_QWORD **)a1[1];
      v282 = *(_DWORD *)(a1[2] + 76) & 0x1FFFFLL;
      v283 = (uint64_t *)v281[452];
      v291 = v281[453];
      if ((unint64_t)v283 >= v291)
      {
        v285 = (uint64_t *)v281[451];
        v293 = v283 - v285;
        if ((unint64_t)(v293 + 1) >> 61)
          goto LABEL_776;
        v294 = v291 - (_QWORD)v285;
        v295 = (uint64_t)(v291 - (_QWORD)v285) >> 2;
        if (v295 <= v293 + 1)
          v295 = v293 + 1;
        if (v294 >= 0x7FFFFFFFFFFFFFF8)
          v296 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v296 = v295;
        if (v296)
        {
          v297 = (char *)sub_40FC((uint64_t)(v281 + 453), v296);
          v283 = (uint64_t *)v281[452];
          v285 = (uint64_t *)v281[451];
        }
        else
        {
          v297 = 0;
        }
        v298 = (uint64_t *)&v297[8 * v293];
        v299 = &v297[8 * v296];
        *v298 = v282;
        v292 = v298 + 1;
        while (v283 != v285)
        {
          v301 = *--v283;
          *--v298 = v301;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v280 != 1)
        goto LABEL_422;
      v281 = *(_QWORD **)a1[1];
      v282 = *(_DWORD *)(a1[2] + 76) & 0x1FFFFLL;
      v283 = (uint64_t *)v281[452];
      v284 = v281[453];
      if ((unint64_t)v283 >= v284)
      {
        v285 = (uint64_t *)v281[451];
        v286 = v283 - v285;
        if ((unint64_t)(v286 + 1) >> 61)
          goto LABEL_776;
        v287 = v284 - (_QWORD)v285;
        v288 = (uint64_t)(v284 - (_QWORD)v285) >> 2;
        if (v288 <= v286 + 1)
          v288 = v286 + 1;
        if (v287 >= 0x7FFFFFFFFFFFFFF8)
          v289 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v289 = v288;
        if (v289)
        {
          v290 = (char *)sub_40FC((uint64_t)(v281 + 453), v289);
          v283 = (uint64_t *)v281[452];
          v285 = (uint64_t *)v281[451];
        }
        else
        {
          v290 = 0;
        }
        v298 = (uint64_t *)&v290[8 * v286];
        v299 = &v290[8 * v289];
        *v298 = v282;
        v292 = v298 + 1;
        while (v283 != v285)
        {
          v300 = *--v283;
          *--v298 = v300;
        }
LABEL_419:
        v281[451] = v298;
        v281[452] = v292;
        v281[453] = v299;
        if (v285)
          operator delete(v285);
        goto LABEL_421;
      }
    }
    *v283 = v282;
    v292 = v283 + 1;
LABEL_421:
    v281[452] = v292;
LABEL_422:
    v302 = 1 << *(_DWORD *)(v3 + 48);
    if (v302 == 2)
    {
      v314 = a1[1];
      v304 = *(_QWORD **)v314;
      v305 = *(unsigned __int16 *)(a1[2] + 64);
      v306 = *(char **)(*(_QWORD *)v314 + 3640);
      v315 = *(_QWORD *)(*(_QWORD *)v314 + 3648);
      if ((unint64_t)v306 >= v315)
      {
        v308 = (char *)v304[454];
        v317 = (v306 - v308) >> 3;
        if ((unint64_t)(v317 + 1) >> 61)
          goto LABEL_776;
        v318 = v315 - (_QWORD)v308;
        v319 = (uint64_t)(v315 - (_QWORD)v308) >> 2;
        if (v319 <= v317 + 1)
          v319 = v317 + 1;
        if (v318 >= 0x7FFFFFFFFFFFFFF8)
          v320 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v320 = v319;
        if (v320)
        {
          v321 = (char *)sub_40FC((uint64_t)(v304 + 456), v320);
          v306 = (char *)v304[455];
          v308 = (char *)v304[454];
        }
        else
        {
          v321 = 0;
        }
        v322 = &v321[8 * v317];
        v323 = &v321[8 * v320];
        *(_QWORD *)v322 = v305;
        v316 = v322 + 8;
        while (v306 != v308)
        {
          v325 = *((_QWORD *)v306 - 1);
          v306 -= 8;
          *((_QWORD *)v322 - 1) = v325;
          v322 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v302 != 1)
        goto LABEL_454;
      v303 = a1[1];
      v304 = *(_QWORD **)v303;
      v305 = *(unsigned __int16 *)(a1[2] + 64);
      v306 = *(char **)(*(_QWORD *)v303 + 3640);
      v307 = *(_QWORD *)(*(_QWORD *)v303 + 3648);
      if ((unint64_t)v306 >= v307)
      {
        v308 = (char *)v304[454];
        v309 = (v306 - v308) >> 3;
        if ((unint64_t)(v309 + 1) >> 61)
          goto LABEL_776;
        v310 = v307 - (_QWORD)v308;
        v311 = (uint64_t)(v307 - (_QWORD)v308) >> 2;
        if (v311 <= v309 + 1)
          v311 = v309 + 1;
        if (v310 >= 0x7FFFFFFFFFFFFFF8)
          v312 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v312 = v311;
        if (v312)
        {
          v313 = (char *)sub_40FC((uint64_t)(v304 + 456), v312);
          v306 = (char *)v304[455];
          v308 = (char *)v304[454];
        }
        else
        {
          v313 = 0;
        }
        v322 = &v313[8 * v309];
        v323 = &v313[8 * v312];
        *(_QWORD *)v322 = v305;
        v316 = v322 + 8;
        while (v306 != v308)
        {
          v324 = *((_QWORD *)v306 - 1);
          v306 -= 8;
          *((_QWORD *)v322 - 1) = v324;
          v322 -= 8;
        }
LABEL_451:
        v304[454] = v322;
        v304[455] = v316;
        v304[456] = v323;
        if (v308)
          operator delete(v308);
        goto LABEL_453;
      }
    }
    *(_QWORD *)v306 = v305;
    v316 = v306 + 8;
LABEL_453:
    v304[455] = v316;
LABEL_454:
    v326 = 1 << *(_DWORD *)(v3 + 48);
    if (v326 == 2)
    {
      v338 = a1[1];
      v328 = *(_QWORD **)v338;
      v329 = *(unsigned __int16 *)(a1[2] + 66);
      v330 = *(char **)(*(_QWORD *)v338 + 3664);
      v339 = *(_QWORD *)(*(_QWORD *)v338 + 3672);
      if ((unint64_t)v330 >= v339)
      {
        v332 = (char *)v328[457];
        v341 = (v330 - v332) >> 3;
        if ((unint64_t)(v341 + 1) >> 61)
          goto LABEL_776;
        v342 = v339 - (_QWORD)v332;
        v343 = (uint64_t)(v339 - (_QWORD)v332) >> 2;
        if (v343 <= v341 + 1)
          v343 = v341 + 1;
        if (v342 >= 0x7FFFFFFFFFFFFFF8)
          v344 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v344 = v343;
        if (v344)
        {
          v345 = (char *)sub_40FC((uint64_t)(v328 + 459), v344);
          v330 = (char *)v328[458];
          v332 = (char *)v328[457];
        }
        else
        {
          v345 = 0;
        }
        v346 = &v345[8 * v341];
        v347 = &v345[8 * v344];
        *(_QWORD *)v346 = v329;
        v340 = v346 + 8;
        while (v330 != v332)
        {
          v349 = *((_QWORD *)v330 - 1);
          v330 -= 8;
          *((_QWORD *)v346 - 1) = v349;
          v346 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v326 != 1)
        goto LABEL_486;
      v327 = a1[1];
      v328 = *(_QWORD **)v327;
      v329 = *(unsigned __int16 *)(a1[2] + 66);
      v330 = *(char **)(*(_QWORD *)v327 + 3664);
      v331 = *(_QWORD *)(*(_QWORD *)v327 + 3672);
      if ((unint64_t)v330 >= v331)
      {
        v332 = (char *)v328[457];
        v333 = (v330 - v332) >> 3;
        if ((unint64_t)(v333 + 1) >> 61)
          goto LABEL_776;
        v334 = v331 - (_QWORD)v332;
        v335 = (uint64_t)(v331 - (_QWORD)v332) >> 2;
        if (v335 <= v333 + 1)
          v335 = v333 + 1;
        if (v334 >= 0x7FFFFFFFFFFFFFF8)
          v336 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v336 = v335;
        if (v336)
        {
          v337 = (char *)sub_40FC((uint64_t)(v328 + 459), v336);
          v330 = (char *)v328[458];
          v332 = (char *)v328[457];
        }
        else
        {
          v337 = 0;
        }
        v346 = &v337[8 * v333];
        v347 = &v337[8 * v336];
        *(_QWORD *)v346 = v329;
        v340 = v346 + 8;
        while (v330 != v332)
        {
          v348 = *((_QWORD *)v330 - 1);
          v330 -= 8;
          *((_QWORD *)v346 - 1) = v348;
          v346 -= 8;
        }
LABEL_483:
        v328[457] = v346;
        v328[458] = v340;
        v328[459] = v347;
        if (v332)
          operator delete(v332);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v330 = v329;
    v340 = v330 + 8;
LABEL_485:
    v328[458] = v340;
LABEL_486:
    v350 = 1 << *(_DWORD *)(v3 + 48);
    if (v350 == 2)
    {
      v362 = a1[1];
      v352 = *(_QWORD **)v362;
      v353 = *(unsigned __int16 *)(a1[2] + 84);
      v354 = *(char **)(*(_QWORD *)v362 + 3688);
      v363 = *(_QWORD *)(*(_QWORD *)v362 + 3696);
      if ((unint64_t)v354 >= v363)
      {
        v356 = (char *)v352[460];
        v365 = (v354 - v356) >> 3;
        if ((unint64_t)(v365 + 1) >> 61)
          goto LABEL_776;
        v366 = v363 - (_QWORD)v356;
        v367 = (uint64_t)(v363 - (_QWORD)v356) >> 2;
        if (v367 <= v365 + 1)
          v367 = v365 + 1;
        if (v366 >= 0x7FFFFFFFFFFFFFF8)
          v368 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v368 = v367;
        if (v368)
        {
          v369 = (char *)sub_40FC((uint64_t)(v352 + 462), v368);
          v354 = (char *)v352[461];
          v356 = (char *)v352[460];
        }
        else
        {
          v369 = 0;
        }
        v370 = &v369[8 * v365];
        v371 = &v369[8 * v368];
        *(_QWORD *)v370 = v353;
        v364 = v370 + 8;
        while (v354 != v356)
        {
          v373 = *((_QWORD *)v354 - 1);
          v354 -= 8;
          *((_QWORD *)v370 - 1) = v373;
          v370 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v350 != 1)
        goto LABEL_518;
      v351 = a1[1];
      v352 = *(_QWORD **)v351;
      v353 = *(unsigned __int16 *)(a1[2] + 84);
      v354 = *(char **)(*(_QWORD *)v351 + 3688);
      v355 = *(_QWORD *)(*(_QWORD *)v351 + 3696);
      if ((unint64_t)v354 >= v355)
      {
        v356 = (char *)v352[460];
        v357 = (v354 - v356) >> 3;
        if ((unint64_t)(v357 + 1) >> 61)
          goto LABEL_776;
        v358 = v355 - (_QWORD)v356;
        v359 = (uint64_t)(v355 - (_QWORD)v356) >> 2;
        if (v359 <= v357 + 1)
          v359 = v357 + 1;
        if (v358 >= 0x7FFFFFFFFFFFFFF8)
          v360 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v360 = v359;
        if (v360)
        {
          v361 = (char *)sub_40FC((uint64_t)(v352 + 462), v360);
          v354 = (char *)v352[461];
          v356 = (char *)v352[460];
        }
        else
        {
          v361 = 0;
        }
        v370 = &v361[8 * v357];
        v371 = &v361[8 * v360];
        *(_QWORD *)v370 = v353;
        v364 = v370 + 8;
        while (v354 != v356)
        {
          v372 = *((_QWORD *)v354 - 1);
          v354 -= 8;
          *((_QWORD *)v370 - 1) = v372;
          v370 -= 8;
        }
LABEL_515:
        v352[460] = v370;
        v352[461] = v364;
        v352[462] = v371;
        if (v356)
          operator delete(v356);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v354 = v353;
    v364 = v354 + 8;
LABEL_517:
    v352[461] = v364;
LABEL_518:
    v374 = 1 << *(_DWORD *)(v3 + 48);
    if (v374 == 2)
    {
      v386 = a1[1];
      v376 = *(_QWORD **)v386;
      v377 = *(unsigned __int16 *)(a1[2] + 86);
      v378 = *(char **)(*(_QWORD *)v386 + 3712);
      v387 = *(_QWORD *)(*(_QWORD *)v386 + 3720);
      if ((unint64_t)v378 >= v387)
      {
        v380 = (char *)v376[463];
        v389 = (v378 - v380) >> 3;
        if ((unint64_t)(v389 + 1) >> 61)
          goto LABEL_776;
        v390 = v387 - (_QWORD)v380;
        v391 = (uint64_t)(v387 - (_QWORD)v380) >> 2;
        if (v391 <= v389 + 1)
          v391 = v389 + 1;
        if (v390 >= 0x7FFFFFFFFFFFFFF8)
          v392 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v392 = v391;
        if (v392)
        {
          v393 = (char *)sub_40FC((uint64_t)(v376 + 465), v392);
          v378 = (char *)v376[464];
          v380 = (char *)v376[463];
        }
        else
        {
          v393 = 0;
        }
        v394 = &v393[8 * v389];
        v395 = &v393[8 * v392];
        *(_QWORD *)v394 = v377;
        v388 = v394 + 8;
        while (v378 != v380)
        {
          v397 = *((_QWORD *)v378 - 1);
          v378 -= 8;
          *((_QWORD *)v394 - 1) = v397;
          v394 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v374 != 1)
        goto LABEL_550;
      v375 = a1[1];
      v376 = *(_QWORD **)v375;
      v377 = *(unsigned __int16 *)(a1[2] + 86);
      v378 = *(char **)(*(_QWORD *)v375 + 3712);
      v379 = *(_QWORD *)(*(_QWORD *)v375 + 3720);
      if ((unint64_t)v378 >= v379)
      {
        v380 = (char *)v376[463];
        v381 = (v378 - v380) >> 3;
        if ((unint64_t)(v381 + 1) >> 61)
          goto LABEL_776;
        v382 = v379 - (_QWORD)v380;
        v383 = (uint64_t)(v379 - (_QWORD)v380) >> 2;
        if (v383 <= v381 + 1)
          v383 = v381 + 1;
        if (v382 >= 0x7FFFFFFFFFFFFFF8)
          v384 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v384 = v383;
        if (v384)
        {
          v385 = (char *)sub_40FC((uint64_t)(v376 + 465), v384);
          v378 = (char *)v376[464];
          v380 = (char *)v376[463];
        }
        else
        {
          v385 = 0;
        }
        v394 = &v385[8 * v381];
        v395 = &v385[8 * v384];
        *(_QWORD *)v394 = v377;
        v388 = v394 + 8;
        while (v378 != v380)
        {
          v396 = *((_QWORD *)v378 - 1);
          v378 -= 8;
          *((_QWORD *)v394 - 1) = v396;
          v394 -= 8;
        }
LABEL_547:
        v376[463] = v394;
        v376[464] = v388;
        v376[465] = v395;
        if (v380)
          operator delete(v380);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v378 = v377;
    v388 = v378 + 8;
LABEL_549:
    v376[464] = v388;
LABEL_550:
    v398 = 1 << *(_DWORD *)(v3 + 48);
    if (v398 == 2)
    {
      v399 = *(_QWORD **)a1[1];
      v400 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v401 = (uint64_t *)v399[467];
      v409 = v399[468];
      if ((unint64_t)v401 >= v409)
      {
        v403 = (uint64_t *)v399[466];
        v411 = v401 - v403;
        if ((unint64_t)(v411 + 1) >> 61)
          goto LABEL_776;
        v412 = v409 - (_QWORD)v403;
        v413 = (uint64_t)(v409 - (_QWORD)v403) >> 2;
        if (v413 <= v411 + 1)
          v413 = v411 + 1;
        if (v412 >= 0x7FFFFFFFFFFFFFF8)
          v414 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v414 = v413;
        if (v414)
        {
          v415 = (char *)sub_40FC((uint64_t)(v399 + 468), v414);
          v401 = (uint64_t *)v399[467];
          v403 = (uint64_t *)v399[466];
        }
        else
        {
          v415 = 0;
        }
        v416 = (uint64_t *)&v415[8 * v411];
        v417 = &v415[8 * v414];
        *v416 = v400;
        v410 = v416 + 1;
        while (v401 != v403)
        {
          v419 = *--v401;
          *--v416 = v419;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v398 != 1)
        goto LABEL_582;
      v399 = *(_QWORD **)a1[1];
      v400 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v401 = (uint64_t *)v399[467];
      v402 = v399[468];
      if ((unint64_t)v401 >= v402)
      {
        v403 = (uint64_t *)v399[466];
        v404 = v401 - v403;
        if ((unint64_t)(v404 + 1) >> 61)
          goto LABEL_776;
        v405 = v402 - (_QWORD)v403;
        v406 = (uint64_t)(v402 - (_QWORD)v403) >> 2;
        if (v406 <= v404 + 1)
          v406 = v404 + 1;
        if (v405 >= 0x7FFFFFFFFFFFFFF8)
          v407 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v407 = v406;
        if (v407)
        {
          v408 = (char *)sub_40FC((uint64_t)(v399 + 468), v407);
          v401 = (uint64_t *)v399[467];
          v403 = (uint64_t *)v399[466];
        }
        else
        {
          v408 = 0;
        }
        v416 = (uint64_t *)&v408[8 * v404];
        v417 = &v408[8 * v407];
        *v416 = v400;
        v410 = v416 + 1;
        while (v401 != v403)
        {
          v418 = *--v401;
          *--v416 = v418;
        }
LABEL_579:
        v399[466] = v416;
        v399[467] = v410;
        v399[468] = v417;
        if (v403)
          operator delete(v403);
        goto LABEL_581;
      }
    }
    *v401 = v400;
    v410 = v401 + 1;
LABEL_581:
    v399[467] = v410;
LABEL_582:
    v420 = 1 << *(_DWORD *)(v3 + 48);
    if (v420 == 2)
    {
      v421 = *(_QWORD **)a1[1];
      v422 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      v423 = (char *)v421[470];
      v431 = v421[471];
      if ((unint64_t)v423 >= v431)
      {
        v425 = (char *)v421[469];
        v433 = (v423 - v425) >> 3;
        if ((unint64_t)(v433 + 1) >> 61)
          goto LABEL_776;
        v434 = v431 - (_QWORD)v425;
        v435 = (uint64_t)(v431 - (_QWORD)v425) >> 2;
        if (v435 <= v433 + 1)
          v435 = v433 + 1;
        if (v434 >= 0x7FFFFFFFFFFFFFF8)
          v436 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v436 = v435;
        if (v436)
        {
          v437 = (char *)sub_40FC((uint64_t)(v421 + 471), v436);
          v423 = (char *)v421[470];
          v425 = (char *)v421[469];
        }
        else
        {
          v437 = 0;
        }
        v438 = &v437[8 * v433];
        v439 = &v437[8 * v436];
        *(_QWORD *)v438 = v422;
        v432 = v438 + 8;
        while (v423 != v425)
        {
          v441 = *((_QWORD *)v423 - 1);
          v423 -= 8;
          *((_QWORD *)v438 - 1) = v441;
          v438 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v420 != 1)
        goto LABEL_614;
      v421 = *(_QWORD **)a1[1];
      v422 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      v423 = (char *)v421[470];
      v424 = v421[471];
      if ((unint64_t)v423 >= v424)
      {
        v425 = (char *)v421[469];
        v426 = (v423 - v425) >> 3;
        if ((unint64_t)(v426 + 1) >> 61)
          goto LABEL_776;
        v427 = v424 - (_QWORD)v425;
        v428 = (uint64_t)(v424 - (_QWORD)v425) >> 2;
        if (v428 <= v426 + 1)
          v428 = v426 + 1;
        if (v427 >= 0x7FFFFFFFFFFFFFF8)
          v429 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v429 = v428;
        if (v429)
        {
          v430 = (char *)sub_40FC((uint64_t)(v421 + 471), v429);
          v423 = (char *)v421[470];
          v425 = (char *)v421[469];
        }
        else
        {
          v430 = 0;
        }
        v438 = &v430[8 * v426];
        v439 = &v430[8 * v429];
        *(_QWORD *)v438 = v422;
        v432 = v438 + 8;
        while (v423 != v425)
        {
          v440 = *((_QWORD *)v423 - 1);
          v423 -= 8;
          *((_QWORD *)v438 - 1) = v440;
          v438 -= 8;
        }
LABEL_611:
        v421[469] = v438;
        v421[470] = v432;
        v421[471] = v439;
        if (v425)
          operator delete(v425);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v423 = v422;
    v432 = v423 + 8;
LABEL_613:
    v421[470] = v432;
LABEL_614:
    v442 = 1 << *(_DWORD *)(v3 + 48);
    if (v442 == 2)
    {
      v443 = *(_QWORD **)a1[1];
      v444 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v445 = (char *)v443[473];
      v453 = v443[474];
      if ((unint64_t)v445 >= v453)
      {
        v447 = (char *)v443[472];
        v455 = (v445 - v447) >> 3;
        if ((unint64_t)(v455 + 1) >> 61)
          goto LABEL_776;
        v456 = v453 - (_QWORD)v447;
        v457 = (uint64_t)(v453 - (_QWORD)v447) >> 2;
        if (v457 <= v455 + 1)
          v457 = v455 + 1;
        if (v456 >= 0x7FFFFFFFFFFFFFF8)
          v458 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v458 = v457;
        if (v458)
        {
          v459 = (char *)sub_40FC((uint64_t)(v443 + 474), v458);
          v445 = (char *)v443[473];
          v447 = (char *)v443[472];
        }
        else
        {
          v459 = 0;
        }
        v460 = &v459[8 * v455];
        v461 = &v459[8 * v458];
        *(_QWORD *)v460 = v444;
        v454 = v460 + 8;
        while (v445 != v447)
        {
          v463 = *((_QWORD *)v445 - 1);
          v445 -= 8;
          *((_QWORD *)v460 - 1) = v463;
          v460 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v442 != 1)
        goto LABEL_646;
      v443 = *(_QWORD **)a1[1];
      v444 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v445 = (char *)v443[473];
      v446 = v443[474];
      if ((unint64_t)v445 >= v446)
      {
        v447 = (char *)v443[472];
        v448 = (v445 - v447) >> 3;
        if ((unint64_t)(v448 + 1) >> 61)
          goto LABEL_776;
        v449 = v446 - (_QWORD)v447;
        v450 = (uint64_t)(v446 - (_QWORD)v447) >> 2;
        if (v450 <= v448 + 1)
          v450 = v448 + 1;
        if (v449 >= 0x7FFFFFFFFFFFFFF8)
          v451 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v451 = v450;
        if (v451)
        {
          v452 = (char *)sub_40FC((uint64_t)(v443 + 474), v451);
          v445 = (char *)v443[473];
          v447 = (char *)v443[472];
        }
        else
        {
          v452 = 0;
        }
        v460 = &v452[8 * v448];
        v461 = &v452[8 * v451];
        *(_QWORD *)v460 = v444;
        v454 = v460 + 8;
        while (v445 != v447)
        {
          v462 = *((_QWORD *)v445 - 1);
          v445 -= 8;
          *((_QWORD *)v460 - 1) = v462;
          v460 -= 8;
        }
LABEL_643:
        v443[472] = v460;
        v443[473] = v454;
        v443[474] = v461;
        if (v447)
          operator delete(v447);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v445 = v444;
    v454 = v445 + 8;
LABEL_645:
    v443[473] = v454;
LABEL_646:
    v464 = 1 << *(_DWORD *)(v3 + 48);
    if (v464 == 2)
    {
      v476 = a1[1];
      v466 = *(_QWORD **)v476;
      v467 = *(unsigned __int16 *)(a1[2] + 62);
      v468 = *(char **)(*(_QWORD *)v476 + 3808);
      v477 = *(_QWORD *)(*(_QWORD *)v476 + 3816);
      if ((unint64_t)v468 >= v477)
      {
        v470 = (char *)v466[475];
        v479 = (v468 - v470) >> 3;
        if ((unint64_t)(v479 + 1) >> 61)
          goto LABEL_776;
        v480 = v477 - (_QWORD)v470;
        v481 = (uint64_t)(v477 - (_QWORD)v470) >> 2;
        if (v481 <= v479 + 1)
          v481 = v479 + 1;
        if (v480 >= 0x7FFFFFFFFFFFFFF8)
          v482 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v482 = v481;
        if (v482)
        {
          v483 = (char *)sub_40FC((uint64_t)(v466 + 477), v482);
          v468 = (char *)v466[476];
          v470 = (char *)v466[475];
        }
        else
        {
          v483 = 0;
        }
        v484 = &v483[8 * v479];
        v485 = &v483[8 * v482];
        *(_QWORD *)v484 = v467;
        v478 = v484 + 8;
        while (v468 != v470)
        {
          v487 = *((_QWORD *)v468 - 1);
          v468 -= 8;
          *((_QWORD *)v484 - 1) = v487;
          v484 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v464 != 1)
        goto LABEL_678;
      v465 = a1[1];
      v466 = *(_QWORD **)v465;
      v467 = *(unsigned __int16 *)(a1[2] + 62);
      v468 = *(char **)(*(_QWORD *)v465 + 3808);
      v469 = *(_QWORD *)(*(_QWORD *)v465 + 3816);
      if ((unint64_t)v468 >= v469)
      {
        v470 = (char *)v466[475];
        v471 = (v468 - v470) >> 3;
        if ((unint64_t)(v471 + 1) >> 61)
          goto LABEL_776;
        v472 = v469 - (_QWORD)v470;
        v473 = (uint64_t)(v469 - (_QWORD)v470) >> 2;
        if (v473 <= v471 + 1)
          v473 = v471 + 1;
        if (v472 >= 0x7FFFFFFFFFFFFFF8)
          v474 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v474 = v473;
        if (v474)
        {
          v475 = (char *)sub_40FC((uint64_t)(v466 + 477), v474);
          v468 = (char *)v466[476];
          v470 = (char *)v466[475];
        }
        else
        {
          v475 = 0;
        }
        v484 = &v475[8 * v471];
        v485 = &v475[8 * v474];
        *(_QWORD *)v484 = v467;
        v478 = v484 + 8;
        while (v468 != v470)
        {
          v486 = *((_QWORD *)v468 - 1);
          v468 -= 8;
          *((_QWORD *)v484 - 1) = v486;
          v484 -= 8;
        }
LABEL_675:
        v466[475] = v484;
        v466[476] = v478;
        v466[477] = v485;
        if (v470)
          operator delete(v470);
        goto LABEL_677;
      }
    }
    *(_QWORD *)v468 = v467;
    v478 = v468 + 8;
LABEL_677:
    v466[476] = v478;
LABEL_678:
    v488 = 1 << *(_DWORD *)(v3 + 48);
    if (v488 == 2)
    {
      v489 = *(_QWORD **)a1[1];
      v490 = (*(unsigned __int16 *)(a1[2] + 68) | (*(unsigned __int8 *)(a1[2] + 70) << 16)) & 0x1FFFFLL;
      v491 = (uint64_t *)v489[479];
      v499 = v489[480];
      if ((unint64_t)v491 >= v499)
      {
        v493 = (uint64_t *)v489[478];
        v501 = v491 - v493;
        if ((unint64_t)(v501 + 1) >> 61)
          goto LABEL_776;
        v502 = v499 - (_QWORD)v493;
        v503 = (uint64_t)(v499 - (_QWORD)v493) >> 2;
        if (v503 <= v501 + 1)
          v503 = v501 + 1;
        if (v502 >= 0x7FFFFFFFFFFFFFF8)
          v504 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v504 = v503;
        if (v504)
        {
          v505 = (char *)sub_40FC((uint64_t)(v489 + 480), v504);
          v491 = (uint64_t *)v489[479];
          v493 = (uint64_t *)v489[478];
        }
        else
        {
          v505 = 0;
        }
        v506 = (uint64_t *)&v505[8 * v501];
        v507 = &v505[8 * v504];
        *v506 = v490;
        v500 = v506 + 1;
        while (v491 != v493)
        {
          v509 = *--v491;
          *--v506 = v509;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v488 != 1)
        goto LABEL_710;
      v489 = *(_QWORD **)a1[1];
      v490 = (*(unsigned __int16 *)(a1[2] + 68) | (*(unsigned __int8 *)(a1[2] + 70) << 16)) & 0x1FFFFLL;
      v491 = (uint64_t *)v489[479];
      v492 = v489[480];
      if ((unint64_t)v491 >= v492)
      {
        v493 = (uint64_t *)v489[478];
        v494 = v491 - v493;
        if ((unint64_t)(v494 + 1) >> 61)
          goto LABEL_776;
        v495 = v492 - (_QWORD)v493;
        v496 = (uint64_t)(v492 - (_QWORD)v493) >> 2;
        if (v496 <= v494 + 1)
          v496 = v494 + 1;
        if (v495 >= 0x7FFFFFFFFFFFFFF8)
          v497 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v497 = v496;
        if (v497)
        {
          v498 = (char *)sub_40FC((uint64_t)(v489 + 480), v497);
          v491 = (uint64_t *)v489[479];
          v493 = (uint64_t *)v489[478];
        }
        else
        {
          v498 = 0;
        }
        v506 = (uint64_t *)&v498[8 * v494];
        v507 = &v498[8 * v497];
        *v506 = v490;
        v500 = v506 + 1;
        while (v491 != v493)
        {
          v508 = *--v491;
          *--v506 = v508;
        }
LABEL_707:
        v489[478] = v506;
        v489[479] = v500;
        v489[480] = v507;
        if (v493)
          operator delete(v493);
        goto LABEL_709;
      }
    }
    *v491 = v490;
    v500 = v491 + 1;
LABEL_709:
    v489[479] = v500;
LABEL_710:
    v510 = 1 << *(_DWORD *)(v3 + 48);
    if (v510 == 2)
    {
      v511 = *(_QWORD **)a1[1];
      v512 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v513 = (uint64_t *)v511[482];
      v521 = v511[483];
      if ((unint64_t)v513 >= v521)
      {
        v515 = (uint64_t *)v511[481];
        v523 = v513 - v515;
        if ((unint64_t)(v523 + 1) >> 61)
          goto LABEL_776;
        v524 = v521 - (_QWORD)v515;
        v525 = (uint64_t)(v521 - (_QWORD)v515) >> 2;
        if (v525 <= v523 + 1)
          v525 = v523 + 1;
        if (v524 >= 0x7FFFFFFFFFFFFFF8)
          v526 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v526 = v525;
        if (v526)
        {
          v527 = (char *)sub_40FC((uint64_t)(v511 + 483), v526);
          v513 = (uint64_t *)v511[482];
          v515 = (uint64_t *)v511[481];
        }
        else
        {
          v527 = 0;
        }
        v528 = (uint64_t *)&v527[8 * v523];
        v529 = &v527[8 * v526];
        *v528 = v512;
        v522 = v528 + 1;
        while (v513 != v515)
        {
          v531 = *--v513;
          *--v528 = v531;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v510 != 1)
        goto LABEL_742;
      v511 = *(_QWORD **)a1[1];
      v512 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v513 = (uint64_t *)v511[482];
      v514 = v511[483];
      if ((unint64_t)v513 >= v514)
      {
        v515 = (uint64_t *)v511[481];
        v516 = v513 - v515;
        if ((unint64_t)(v516 + 1) >> 61)
          goto LABEL_776;
        v517 = v514 - (_QWORD)v515;
        v518 = (uint64_t)(v514 - (_QWORD)v515) >> 2;
        if (v518 <= v516 + 1)
          v518 = v516 + 1;
        if (v517 >= 0x7FFFFFFFFFFFFFF8)
          v519 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v519 = v518;
        if (v519)
        {
          v520 = (char *)sub_40FC((uint64_t)(v511 + 483), v519);
          v513 = (uint64_t *)v511[482];
          v515 = (uint64_t *)v511[481];
        }
        else
        {
          v520 = 0;
        }
        v528 = (uint64_t *)&v520[8 * v516];
        v529 = &v520[8 * v519];
        *v528 = v512;
        v522 = v528 + 1;
        while (v513 != v515)
        {
          v530 = *--v513;
          *--v528 = v530;
        }
LABEL_739:
        v511[481] = v528;
        v511[482] = v522;
        v511[483] = v529;
        if (v515)
          operator delete(v515);
        goto LABEL_741;
      }
    }
    *v513 = v512;
    v522 = v513 + 1;
LABEL_741:
    v511[482] = v522;
LABEL_742:
    v532 = 1 << *(_DWORD *)(v3 + 48);
    if (v532 == 2)
    {
      v544 = a1[2];
      v534 = *(_QWORD **)a1[1];
      v535 = *(_DWORD *)(v544 + 36) & 0x1FFFFLL;
      v536 = (uint64_t *)v534[485];
      v545 = v534[486];
      if ((unint64_t)v536 >= v545)
      {
        v538 = (uint64_t *)v534[484];
        v547 = v536 - v538;
        if (!((unint64_t)(v547 + 1) >> 61))
        {
          v548 = v545 - (_QWORD)v538;
          v549 = (uint64_t)(v545 - (_QWORD)v538) >> 2;
          if (v549 <= v547 + 1)
            v549 = v547 + 1;
          if (v548 >= 0x7FFFFFFFFFFFFFF8)
            v550 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v550 = v549;
          if (v550)
          {
            v551 = (char *)sub_40FC((uint64_t)(v534 + 486), v550);
            v536 = (uint64_t *)v534[485];
            v538 = (uint64_t *)v534[484];
          }
          else
          {
            v551 = 0;
          }
          v552 = (uint64_t *)&v551[8 * v547];
          v553 = &v551[8 * v550];
          *v552 = v535;
          v546 = v552 + 1;
          while (v536 != v538)
          {
            v555 = *--v536;
            *--v552 = v555;
          }
          goto LABEL_771;
        }
LABEL_776:
        sub_4074();
      }
    }
    else
    {
      if (v532 != 1)
      {
LABEL_774:
        *a2 = 1;
        return;
      }
      v533 = a1[2];
      v534 = *(_QWORD **)a1[1];
      v535 = *(_DWORD *)(v533 + 36) & 0x1FFFFLL;
      v536 = (uint64_t *)v534[485];
      v537 = v534[486];
      if ((unint64_t)v536 >= v537)
      {
        v538 = (uint64_t *)v534[484];
        v539 = v536 - v538;
        if (!((unint64_t)(v539 + 1) >> 61))
        {
          v540 = v537 - (_QWORD)v538;
          v541 = (uint64_t)(v537 - (_QWORD)v538) >> 2;
          if (v541 <= v539 + 1)
            v541 = v539 + 1;
          if (v540 >= 0x7FFFFFFFFFFFFFF8)
            v542 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v542 = v541;
          if (v542)
          {
            v543 = (char *)sub_40FC((uint64_t)(v534 + 486), v542);
            v536 = (uint64_t *)v534[485];
            v538 = (uint64_t *)v534[484];
          }
          else
          {
            v543 = 0;
          }
          v552 = (uint64_t *)&v543[8 * v539];
          v553 = &v543[8 * v542];
          *v552 = v535;
          v546 = v552 + 1;
          while (v536 != v538)
          {
            v554 = *--v536;
            *--v552 = v554;
          }
LABEL_771:
          v534[484] = v552;
          v534[485] = v546;
          v534[486] = v553;
          if (v538)
            operator delete(v538);
          goto LABEL_773;
        }
        goto LABEL_776;
      }
    }
    *v536 = v535;
    v546 = v536 + 1;
LABEL_773:
    v534[485] = v546;
    goto LABEL_774;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = *(_DWORD *)(v17 + 40);
    v17 += 40;
    v20 = (_QWORD *)*v18;
    *(_QWORD *)(v20[416] - 8) += (unint64_t)v19 >> 17;
    *(_QWORD *)(v20[419] - 8) += *(_DWORD *)v17 & 0x1FFFF;
    *(_QWORD *)(v20[422] - 8) += *(_WORD *)(v17 - 12) & 0x7FFF;
    *(_QWORD *)(v20[425] - 8) += *(_WORD *)(v17 - 10) & 0x7FFF;
    *(_QWORD *)(v20[428] - 8) += *(_WORD *)(v17 - 16) & 0x7FFF;
    *(_QWORD *)(v20[431] - 8) += *(_WORD *)(v17 - 14) & 0x7FFF;
    *(_QWORD *)(v20[434] - 8) += *(unsigned __int16 *)(v17 + 20);
    *(_QWORD *)(v20[437] - 8) += *(_DWORD *)(v17 + 12) & 0x1FFFF;
    *(_QWORD *)(v20[440] - 8) += *(_DWORD *)(v17 + 8) & 0x1FFFF;
    *(_QWORD *)(v20[443] - 8) += *(_DWORD *)(v17 + 48) & 0x1FFFF;
    v21 = a1[2];
    v22 = *(_QWORD **)a1[1];
    *(_QWORD *)(v22[446] - 8) += *(_DWORD *)(v21 + 80) & 0x7FFFF;
    *(_QWORD *)(v22[449] - 8) += *(_DWORD *)(v21 + 72) & 0x1FFFF;
    *(_QWORD *)(v22[452] - 8) += *(_DWORD *)(v21 + 76) & 0x1FFFF;
    *(_QWORD *)(v22[455] - 8) += *(unsigned __int16 *)(v21 + 64);
    *(_QWORD *)(v22[458] - 8) += *(unsigned __int16 *)(v21 + 66);
    *(_QWORD *)(v22[461] - 8) += *(unsigned __int16 *)(v21 + 84);
    *(_QWORD *)(v22[464] - 8) += *(unsigned __int16 *)(v21 + 86);
    *(_QWORD *)(v22[467] - 8) += *(_DWORD *)(v21 + 56) & 0x1FFFF;
    *(_QWORD *)(v22[470] - 8) += *(_WORD *)(v21 + 46) & 0x3FFF;
    *(_QWORD *)(v22[473] - 8) += *(_WORD *)(v21 + 44) & 0x3FFF;
    v23 = a1[2];
    v24 = (_QWORD *)*v18;
    *(_QWORD *)(v24[476] - 8) += *(unsigned __int16 *)(v23 + 62);
    *(_QWORD *)(v24[479] - 8) += (*(unsigned __int16 *)(v23 + 68) | (*(unsigned __int8 *)(v23 + 70) << 16)) & 0x1FFFF;
    *(_QWORD *)(v24[482] - 8) += *(_DWORD *)(v23 + 32) & 0x1FFFF;
    *(_QWORD *)(v24[485] - 8) += *(_DWORD *)(v23 + 36) & 0x1FFFF;
  }
}

void sub_158FCC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[488];
      v19 = v6[489];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[487];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_136;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 489), v24);
          v8 = (uint64_t *)v6[488];
          v10 = (uint64_t *)v6[487];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[488];
      v9 = v6[489];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[487];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_136;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 489), v14);
          v8 = (uint64_t *)v6[488];
          v10 = (uint64_t *)v6[487];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[487] = v26;
        v6[488] = v20;
        v6[489] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[488] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      v33 = (uint64_t *)v31[491];
      v41 = v31[492];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[490];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_136;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 492), v46);
          v33 = (uint64_t *)v31[491];
          v35 = (uint64_t *)v31[490];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      v33 = (uint64_t *)v31[491];
      v34 = v31[492];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[490];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_136;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 492), v39);
          v33 = (uint64_t *)v31[491];
          v35 = (uint64_t *)v31[490];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[490] = v48;
        v31[491] = v42;
        v31[492] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[491] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v55 = (uint64_t *)v53[494];
      v63 = v53[495];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[493];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_136;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 495), v68);
          v55 = (uint64_t *)v53[494];
          v57 = (uint64_t *)v53[493];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v55 = (uint64_t *)v53[494];
      v56 = v53[495];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[493];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_136;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 495), v61);
          v55 = (uint64_t *)v53[494];
          v57 = (uint64_t *)v53[493];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[493] = v70;
        v53[494] = v64;
        v53[495] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[494] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v86 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = *(_DWORD *)(v86 + 24) & 0x3FFFFFLL;
      v78 = (uint64_t *)v76[497];
      v87 = v76[498];
      if ((unint64_t)v78 >= v87)
      {
        v80 = (uint64_t *)v76[496];
        v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          v90 = v87 - (_QWORD)v80;
          v91 = (uint64_t)(v87 - (_QWORD)v80) >> 2;
          if (v91 <= v89 + 1)
            v91 = v89 + 1;
          if (v90 >= 0x7FFFFFFFFFFFFFF8)
            v92 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v92 = v91;
          if (v92)
          {
            v93 = (char *)sub_40FC((uint64_t)(v76 + 498), v92);
            v78 = (uint64_t *)v76[497];
            v80 = (uint64_t *)v76[496];
          }
          else
          {
            v93 = 0;
          }
          v94 = (uint64_t *)&v93[8 * v89];
          v95 = &v93[8 * v92];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v97 = *--v78;
            *--v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_4074();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      v75 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = *(_DWORD *)(v75 + 24) & 0x3FFFFFLL;
      v78 = (uint64_t *)v76[497];
      v79 = v76[498];
      if ((unint64_t)v78 >= v79)
      {
        v80 = (uint64_t *)v76[496];
        v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          v82 = v79 - (_QWORD)v80;
          v83 = (uint64_t)(v79 - (_QWORD)v80) >> 2;
          if (v83 <= v81 + 1)
            v83 = v81 + 1;
          if (v82 >= 0x7FFFFFFFFFFFFFF8)
            v84 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            v85 = (char *)sub_40FC((uint64_t)(v76 + 498), v84);
            v78 = (uint64_t *)v76[497];
            v80 = (uint64_t *)v76[496];
          }
          else
          {
            v85 = 0;
          }
          v94 = (uint64_t *)&v85[8 * v81];
          v95 = &v85[8 * v84];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v96 = *--v78;
            *--v94 = v96;
          }
LABEL_131:
          v76[496] = v94;
          v76[497] = v88;
          v76[498] = v95;
          if (v80)
            operator delete(v80);
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *v78 = v77;
    v88 = v78 + 1;
LABEL_133:
    v76[497] = v88;
    goto LABEL_134;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = (_DWORD *)a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[488] - 8) += v17[8] & 0x7FFFF;
    *(_QWORD *)(v18[491] - 8) += v17[9] & 0x3FFFFF;
    *(_QWORD *)(v18[494] - 8) += v17[7] & 0x3FFFFF;
    *(_QWORD *)(v18[497] - 8) += v17[6] & 0x3FFFFF;
  }
}

void sub_1596A8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  _QWORD *v185;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      v8 = (char *)v6[596];
      v19 = v6[597];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[595];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_328;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 597), v24);
          v8 = (char *)v6[596];
          v10 = (char *)v6[595];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      v8 = (char *)v6[596];
      v9 = v6[597];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[595];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_328;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 597), v14);
          v8 = (char *)v6[596];
          v10 = (char *)v6[595];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[595] = v26;
        v6[596] = v20;
        v6[597] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[596] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[599];
      v41 = v31[600];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[598];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_328;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 600), v46);
          v33 = (uint64_t *)v31[599];
          v35 = (uint64_t *)v31[598];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[599];
      v34 = v31[600];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[598];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_328;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 600), v39);
          v33 = (uint64_t *)v31[599];
          v35 = (uint64_t *)v31[598];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[598] = v48;
        v31[599] = v42;
        v31[600] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[599] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v55 = (char *)v53[602];
      v63 = v53[603];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[601];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_328;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 603), v68);
          v55 = (char *)v53[602];
          v57 = (char *)v53[601];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v55 = (char *)v53[602];
      v56 = v53[603];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[601];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_328;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 603), v61);
          v55 = (char *)v53[602];
          v57 = (char *)v53[601];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[601] = v70;
        v53[602] = v64;
        v53[603] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[602] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      v77 = (unint64_t *)v75[605];
      v85 = v75[606];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (unint64_t *)v75[604];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_328;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 606), v90);
          v77 = (unint64_t *)v75[605];
          v79 = (unint64_t *)v75[604];
        }
        else
        {
          v91 = 0;
        }
        v92 = (unint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      v77 = (unint64_t *)v75[605];
      v78 = v75[606];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (unint64_t *)v75[604];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_328;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 606), v83);
          v77 = (unint64_t *)v75[605];
          v79 = (unint64_t *)v75[604];
        }
        else
        {
          v84 = 0;
        }
        v92 = (unint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[604] = v92;
        v75[605] = v86;
        v75[606] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[605] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      v99 = (uint64_t *)v97[608];
      v107 = v97[609];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[607];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_328;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 609), v112);
          v99 = (uint64_t *)v97[608];
          v101 = (uint64_t *)v97[607];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      v99 = (uint64_t *)v97[608];
      v100 = v97[609];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[607];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_328;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 609), v105);
          v99 = (uint64_t *)v97[608];
          v101 = (uint64_t *)v97[607];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[607] = v114;
        v97[608] = v108;
        v97[609] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[608] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[611];
      v129 = v119[612];
      if ((unint64_t)v121 >= v129)
      {
        v123 = (uint64_t *)v119[610];
        v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_328;
        v132 = v129 - (_QWORD)v123;
        v133 = (uint64_t)(v129 - (_QWORD)v123) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v119 + 612), v134);
          v121 = (uint64_t *)v119[611];
          v123 = (uint64_t *)v119[610];
        }
        else
        {
          v135 = 0;
        }
        v136 = (uint64_t *)&v135[8 * v131];
        v137 = &v135[8 * v134];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v139 = *--v121;
          *--v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[611];
      v122 = v119[612];
      if ((unint64_t)v121 >= v122)
      {
        v123 = (uint64_t *)v119[610];
        v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_328;
        v125 = v122 - (_QWORD)v123;
        v126 = (uint64_t)(v122 - (_QWORD)v123) >> 2;
        if (v126 <= v124 + 1)
          v126 = v124 + 1;
        if (v125 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          v128 = (char *)sub_40FC((uint64_t)(v119 + 612), v127);
          v121 = (uint64_t *)v119[611];
          v123 = (uint64_t *)v119[610];
        }
        else
        {
          v128 = 0;
        }
        v136 = (uint64_t *)&v128[8 * v124];
        v137 = &v128[8 * v127];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v138 = *--v121;
          *--v136 = v138;
        }
LABEL_195:
        v119[610] = v136;
        v119[611] = v130;
        v119[612] = v137;
        if (v123)
          operator delete(v123);
        goto LABEL_197;
      }
    }
    *v121 = v120;
    v130 = v121 + 1;
LABEL_197:
    v119[611] = v130;
LABEL_198:
    v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      v141 = *(_QWORD **)a1[1];
      v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      v143 = (char *)v141[614];
      v151 = v141[615];
      if ((unint64_t)v143 >= v151)
      {
        v145 = (char *)v141[613];
        v153 = (v143 - v145) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_328;
        v154 = v151 - (_QWORD)v145;
        v155 = (uint64_t)(v151 - (_QWORD)v145) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v141 + 615), v156);
          v143 = (char *)v141[614];
          v145 = (char *)v141[613];
        }
        else
        {
          v157 = 0;
        }
        v158 = &v157[8 * v153];
        v159 = &v157[8 * v156];
        *(_QWORD *)v158 = v142;
        v152 = v158 + 8;
        while (v143 != v145)
        {
          v161 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *((_QWORD *)v158 - 1) = v161;
          v158 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1)
        goto LABEL_230;
      v141 = *(_QWORD **)a1[1];
      v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      v143 = (char *)v141[614];
      v144 = v141[615];
      if ((unint64_t)v143 >= v144)
      {
        v145 = (char *)v141[613];
        v146 = (v143 - v145) >> 3;
        if ((unint64_t)(v146 + 1) >> 61)
          goto LABEL_328;
        v147 = v144 - (_QWORD)v145;
        v148 = (uint64_t)(v144 - (_QWORD)v145) >> 2;
        if (v148 <= v146 + 1)
          v148 = v146 + 1;
        if (v147 >= 0x7FFFFFFFFFFFFFF8)
          v149 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v149 = v148;
        if (v149)
        {
          v150 = (char *)sub_40FC((uint64_t)(v141 + 615), v149);
          v143 = (char *)v141[614];
          v145 = (char *)v141[613];
        }
        else
        {
          v150 = 0;
        }
        v158 = &v150[8 * v146];
        v159 = &v150[8 * v149];
        *(_QWORD *)v158 = v142;
        v152 = v158 + 8;
        while (v143 != v145)
        {
          v160 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *((_QWORD *)v158 - 1) = v160;
          v158 -= 8;
        }
LABEL_227:
        v141[613] = v158;
        v141[614] = v152;
        v141[615] = v159;
        if (v145)
          operator delete(v145);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v143 = v142;
    v152 = v143 + 8;
LABEL_229:
    v141[614] = v152;
LABEL_230:
    v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      v163 = *(_QWORD **)a1[1];
      v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      v165 = (char *)v163[617];
      v173 = v163[618];
      if ((unint64_t)v165 >= v173)
      {
        v167 = (char *)v163[616];
        v175 = (v165 - v167) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_328;
        v176 = v173 - (_QWORD)v167;
        v177 = (uint64_t)(v173 - (_QWORD)v167) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v163 + 618), v178);
          v165 = (char *)v163[617];
          v167 = (char *)v163[616];
        }
        else
        {
          v179 = 0;
        }
        v180 = &v179[8 * v175];
        v181 = &v179[8 * v178];
        *(_QWORD *)v180 = v164;
        v174 = v180 + 8;
        while (v165 != v167)
        {
          v183 = *((_QWORD *)v165 - 1);
          v165 -= 8;
          *((_QWORD *)v180 - 1) = v183;
          v180 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1)
        goto LABEL_262;
      v163 = *(_QWORD **)a1[1];
      v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      v165 = (char *)v163[617];
      v166 = v163[618];
      if ((unint64_t)v165 >= v166)
      {
        v167 = (char *)v163[616];
        v168 = (v165 - v167) >> 3;
        if ((unint64_t)(v168 + 1) >> 61)
          goto LABEL_328;
        v169 = v166 - (_QWORD)v167;
        v170 = (uint64_t)(v166 - (_QWORD)v167) >> 2;
        if (v170 <= v168 + 1)
          v170 = v168 + 1;
        if (v169 >= 0x7FFFFFFFFFFFFFF8)
          v171 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v171 = v170;
        if (v171)
        {
          v172 = (char *)sub_40FC((uint64_t)(v163 + 618), v171);
          v165 = (char *)v163[617];
          v167 = (char *)v163[616];
        }
        else
        {
          v172 = 0;
        }
        v180 = &v172[8 * v168];
        v181 = &v172[8 * v171];
        *(_QWORD *)v180 = v164;
        v174 = v180 + 8;
        while (v165 != v167)
        {
          v182 = *((_QWORD *)v165 - 1);
          v165 -= 8;
          *((_QWORD *)v180 - 1) = v182;
          v180 -= 8;
        }
LABEL_259:
        v163[616] = v180;
        v163[617] = v174;
        v163[618] = v181;
        if (v167)
          operator delete(v167);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v165 = v164;
    v174 = v165 + 8;
LABEL_261:
    v163[617] = v174;
LABEL_262:
    v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      v185 = *(_QWORD **)a1[1];
      v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      v187 = (char *)v185[620];
      v195 = v185[621];
      if ((unint64_t)v187 >= v195)
      {
        v189 = (char *)v185[619];
        v197 = (v187 - v189) >> 3;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_328;
        v198 = v195 - (_QWORD)v189;
        v199 = (uint64_t)(v195 - (_QWORD)v189) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v185 + 621), v200);
          v187 = (char *)v185[620];
          v189 = (char *)v185[619];
        }
        else
        {
          v201 = 0;
        }
        v202 = &v201[8 * v197];
        v203 = &v201[8 * v200];
        *(_QWORD *)v202 = v186;
        v196 = v202 + 8;
        while (v187 != v189)
        {
          v205 = *((_QWORD *)v187 - 1);
          v187 -= 8;
          *((_QWORD *)v202 - 1) = v205;
          v202 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1)
        goto LABEL_294;
      v185 = *(_QWORD **)a1[1];
      v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      v187 = (char *)v185[620];
      v188 = v185[621];
      if ((unint64_t)v187 >= v188)
      {
        v189 = (char *)v185[619];
        v190 = (v187 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_328;
        v191 = v188 - (_QWORD)v189;
        v192 = (uint64_t)(v188 - (_QWORD)v189) >> 2;
        if (v192 <= v190 + 1)
          v192 = v190 + 1;
        if (v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
        {
          v194 = (char *)sub_40FC((uint64_t)(v185 + 621), v193);
          v187 = (char *)v185[620];
          v189 = (char *)v185[619];
        }
        else
        {
          v194 = 0;
        }
        v202 = &v194[8 * v190];
        v203 = &v194[8 * v193];
        *(_QWORD *)v202 = v186;
        v196 = v202 + 8;
        while (v187 != v189)
        {
          v204 = *((_QWORD *)v187 - 1);
          v187 -= 8;
          *((_QWORD *)v202 - 1) = v204;
          v202 -= 8;
        }
LABEL_291:
        v185[619] = v202;
        v185[620] = v196;
        v185[621] = v203;
        if (v189)
          operator delete(v189);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v187 = v186;
    v196 = v187 + 8;
LABEL_293:
    v185[620] = v196;
LABEL_294:
    v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      v218 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_WORD *)(v218 + 26) & 0x3FFF;
      v210 = (char *)v208[623];
      v219 = v208[624];
      if ((unint64_t)v210 >= v219)
      {
        v212 = (char *)v208[622];
        v221 = (v210 - v212) >> 3;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          v222 = v219 - (_QWORD)v212;
          v223 = (uint64_t)(v219 - (_QWORD)v212) >> 2;
          if (v223 <= v221 + 1)
            v223 = v221 + 1;
          if (v222 >= 0x7FFFFFFFFFFFFFF8)
            v224 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v224 = v223;
          if (v224)
          {
            v225 = (char *)sub_40FC((uint64_t)(v208 + 624), v224);
            v210 = (char *)v208[623];
            v212 = (char *)v208[622];
          }
          else
          {
            v225 = 0;
          }
          v226 = &v225[8 * v221];
          v227 = &v225[8 * v224];
          *(_QWORD *)v226 = v209;
          v220 = v226 + 8;
          while (v210 != v212)
          {
            v229 = *((_QWORD *)v210 - 1);
            v210 -= 8;
            *((_QWORD *)v226 - 1) = v229;
            v226 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v207 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_WORD *)(v207 + 26) & 0x3FFF;
      v210 = (char *)v208[623];
      v211 = v208[624];
      if ((unint64_t)v210 >= v211)
      {
        v212 = (char *)v208[622];
        v213 = (v210 - v212) >> 3;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          v214 = v211 - (_QWORD)v212;
          v215 = (uint64_t)(v211 - (_QWORD)v212) >> 2;
          if (v215 <= v213 + 1)
            v215 = v213 + 1;
          if (v214 >= 0x7FFFFFFFFFFFFFF8)
            v216 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v216 = v215;
          if (v216)
          {
            v217 = (char *)sub_40FC((uint64_t)(v208 + 624), v216);
            v210 = (char *)v208[623];
            v212 = (char *)v208[622];
          }
          else
          {
            v217 = 0;
          }
          v226 = &v217[8 * v213];
          v227 = &v217[8 * v216];
          *(_QWORD *)v226 = v209;
          v220 = v226 + 8;
          while (v210 != v212)
          {
            v228 = *((_QWORD *)v210 - 1);
            v210 -= 8;
            *((_QWORD *)v226 - 1) = v228;
            v226 -= 8;
          }
LABEL_323:
          v208[622] = v226;
          v208[623] = v220;
          v208[624] = v227;
          if (v212)
            operator delete(v212);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(_QWORD *)v210 = v209;
    v220 = v210 + 8;
LABEL_325:
    v208[623] = v220;
    goto LABEL_326;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[596] - 8) += *(_WORD *)(v17 + 34) & 0x1FFF;
    *(_QWORD *)(v18[599] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    *(_QWORD *)(v18[602] - 8) += *(_WORD *)(v17 + 32) & 0x1FFF;
    *(_QWORD *)(v18[605] - 8) += ((unint64_t)*(unsigned int *)(v17 + 36) >> 13) & 0x3FFFF;
    *(_QWORD *)(v18[608] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFF;
    *(_QWORD *)(v18[611] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
    *(_QWORD *)(v18[614] - 8) += *(_WORD *)(v17 + 28) & 0x3FFF;
    *(_QWORD *)(v18[617] - 8) += *(_WORD *)(v17 + 24) & 0x3FFF;
    *(_QWORD *)(v18[620] - 8) += *(_WORD *)(v17 + 30) & 0x3FFF;
    *(_QWORD *)(v18[623] - 8) += *(_WORD *)(v17 + 26) & 0x3FFF;
  }
}

void sub_15A7B4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  uint64_t *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  unint64_t *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  int *v296;
  int **v297;
  uint64_t v298;
  unint64_t v299;
  int v300;
  unint64_t v301;
  _QWORD *v302;

  v4 = *a1;
  if (*a2 == 1)
  {
    v297 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v296 = *v297;
    v298 = (char *)v297[1] - (char *)*v297;
    if (v298)
    {
      v299 = v298 >> 2;
      if (v299 <= 1)
        v299 = 1;
      do
      {
        v300 = *v296++;
        switch(v300)
        {
          case 144:
            v301 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4240);
            goto LABEL_410;
          case 145:
            v301 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4264);
            goto LABEL_410;
          case 146:
            v301 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4288);
            goto LABEL_410;
          case 147:
            v301 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4312);
            goto LABEL_410;
          case 148:
            v301 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4336);
            goto LABEL_410;
          case 149:
            v301 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4360);
            goto LABEL_410;
          case 150:
            v301 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4384);
            goto LABEL_410;
          case 151:
            v301 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4408);
            goto LABEL_410;
          case 152:
            v301 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4432);
            goto LABEL_410;
          case 153:
            v301 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4456);
            goto LABEL_410;
          case 154:
            v301 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4480);
            goto LABEL_410;
          case 155:
            v301 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4504);
            goto LABEL_410;
          case 156:
            v301 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4528);
            goto LABEL_410;
          case 157:
            v301 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4552);
            goto LABEL_410;
          case 158:
            v301 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4576);
            goto LABEL_410;
          case 159:
            v301 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4600);
            goto LABEL_410;
          case 160:
            v301 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4624);
            goto LABEL_410;
          case 161:
            v301 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4648);
            goto LABEL_410;
          case 162:
            v301 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4672);
            goto LABEL_410;
          case 163:
            v301 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4696);
            goto LABEL_410;
          case 164:
            v301 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4720);
            goto LABEL_410;
          case 165:
            v301 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4744);
LABEL_410:
            *(_QWORD *)(*v302 - 8) += v301;
            break;
          default:
            break;
        }
        --v299;
      }
      while (v299);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x90:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            v12 = (char *)v10[530];
            v13 = v10[531];
            if ((unint64_t)v12 >= v13)
            {
              v120 = (char *)v10[529];
              v121 = (v12 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61)
                goto LABEL_414;
              v122 = v13 - (_QWORD)v120;
              v123 = (uint64_t)(v13 - (_QWORD)v120) >> 2;
              if (v123 <= v121 + 1)
                v123 = v121 + 1;
              if (v122 >= 0x7FFFFFFFFFFFFFF8)
                v124 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
              {
                v125 = (char *)sub_40FC((uint64_t)(v10 + 531), v124);
                v12 = (char *)v10[530];
                v120 = (char *)v10[529];
              }
              else
              {
                v125 = 0;
              }
              v252 = &v125[8 * v121];
              *(_QWORD *)v252 = v11;
              v14 = v252 + 8;
              while (v12 != v120)
              {
                v253 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v252 - 1) = v253;
                v252 -= 8;
              }
              v10[529] = v252;
              v10[530] = v14;
              v10[531] = &v125[8 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[530] = v14;
            break;
          case 0x91:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            v17 = (char *)v15[533];
            v18 = v15[534];
            if ((unint64_t)v17 >= v18)
            {
              v126 = (char *)v15[532];
              v127 = (v17 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61)
                goto LABEL_414;
              v128 = v18 - (_QWORD)v126;
              v129 = (uint64_t)(v18 - (_QWORD)v126) >> 2;
              if (v129 <= v127 + 1)
                v129 = v127 + 1;
              if (v128 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              if (v130)
              {
                v131 = (char *)sub_40FC((uint64_t)(v15 + 534), v130);
                v17 = (char *)v15[533];
                v126 = (char *)v15[532];
              }
              else
              {
                v131 = 0;
              }
              v254 = &v131[8 * v127];
              *(_QWORD *)v254 = v16;
              v19 = v254 + 8;
              while (v17 != v126)
              {
                v255 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v254 - 1) = v255;
                v254 -= 8;
              }
              v15[532] = v254;
              v15[533] = v19;
              v15[534] = &v131[8 * v130];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[533] = v19;
            break;
          case 0x92:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            v22 = (char *)v20[536];
            v23 = v20[537];
            if ((unint64_t)v22 >= v23)
            {
              v132 = (char *)v20[535];
              v133 = (v22 - v132) >> 3;
              if ((unint64_t)(v133 + 1) >> 61)
                goto LABEL_414;
              v134 = v23 - (_QWORD)v132;
              v135 = (uint64_t)(v23 - (_QWORD)v132) >> 2;
              if (v135 <= v133 + 1)
                v135 = v133 + 1;
              if (v134 >= 0x7FFFFFFFFFFFFFF8)
                v136 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v136 = v135;
              if (v136)
              {
                v137 = (char *)sub_40FC((uint64_t)(v20 + 537), v136);
                v22 = (char *)v20[536];
                v132 = (char *)v20[535];
              }
              else
              {
                v137 = 0;
              }
              v256 = &v137[8 * v133];
              *(_QWORD *)v256 = v21;
              v24 = v256 + 8;
              while (v22 != v132)
              {
                v257 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v256 - 1) = v257;
                v256 -= 8;
              }
              v20[535] = v256;
              v20[536] = v24;
              v20[537] = &v137[8 * v136];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[536] = v24;
            break;
          case 0x93:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v27 = (char *)v25[539];
            v28 = v25[540];
            if ((unint64_t)v27 >= v28)
            {
              v138 = (char *)v25[538];
              v139 = (v27 - v138) >> 3;
              if ((unint64_t)(v139 + 1) >> 61)
                goto LABEL_414;
              v140 = v28 - (_QWORD)v138;
              v141 = (uint64_t)(v28 - (_QWORD)v138) >> 2;
              if (v141 <= v139 + 1)
                v141 = v139 + 1;
              if (v140 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v142 = v141;
              if (v142)
              {
                v143 = (char *)sub_40FC((uint64_t)(v25 + 540), v142);
                v27 = (char *)v25[539];
                v138 = (char *)v25[538];
              }
              else
              {
                v143 = 0;
              }
              v258 = &v143[8 * v139];
              *(_QWORD *)v258 = v26;
              v29 = v258 + 8;
              while (v27 != v138)
              {
                v259 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v258 - 1) = v259;
                v258 -= 8;
              }
              v25[538] = v258;
              v25[539] = v29;
              v25[540] = &v143[8 * v142];
              if (v138)
                operator delete(v138);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[539] = v29;
            break;
          case 0x94:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v32 = (char *)v30[542];
            v33 = v30[543];
            if ((unint64_t)v32 >= v33)
            {
              v144 = (char *)v30[541];
              v145 = (v32 - v144) >> 3;
              if ((unint64_t)(v145 + 1) >> 61)
                goto LABEL_414;
              v146 = v33 - (_QWORD)v144;
              v147 = (uint64_t)(v33 - (_QWORD)v144) >> 2;
              if (v147 <= v145 + 1)
                v147 = v145 + 1;
              if (v146 >= 0x7FFFFFFFFFFFFFF8)
                v148 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v148 = v147;
              if (v148)
              {
                v149 = (char *)sub_40FC((uint64_t)(v30 + 543), v148);
                v32 = (char *)v30[542];
                v144 = (char *)v30[541];
              }
              else
              {
                v149 = 0;
              }
              v260 = &v149[8 * v145];
              *(_QWORD *)v260 = v31;
              v34 = v260 + 8;
              while (v32 != v144)
              {
                v261 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v260 - 1) = v261;
                v260 -= 8;
              }
              v30[541] = v260;
              v30[542] = v34;
              v30[543] = &v149[8 * v148];
              if (v144)
                operator delete(v144);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[542] = v34;
            break;
          case 0x95:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v37 = (char *)v35[545];
            v38 = v35[546];
            if ((unint64_t)v37 >= v38)
            {
              v150 = (char *)v35[544];
              v151 = (v37 - v150) >> 3;
              if ((unint64_t)(v151 + 1) >> 61)
                goto LABEL_414;
              v152 = v38 - (_QWORD)v150;
              v153 = (uint64_t)(v38 - (_QWORD)v150) >> 2;
              if (v153 <= v151 + 1)
                v153 = v151 + 1;
              if (v152 >= 0x7FFFFFFFFFFFFFF8)
                v154 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v154 = v153;
              if (v154)
              {
                v155 = (char *)sub_40FC((uint64_t)(v35 + 546), v154);
                v37 = (char *)v35[545];
                v150 = (char *)v35[544];
              }
              else
              {
                v155 = 0;
              }
              v262 = &v155[8 * v151];
              *(_QWORD *)v262 = v36;
              v39 = v262 + 8;
              while (v37 != v150)
              {
                v263 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v262 - 1) = v263;
                v262 -= 8;
              }
              v35[544] = v262;
              v35[545] = v39;
              v35[546] = &v155[8 * v154];
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[545] = v39;
            break;
          case 0x96:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v42 = (uint64_t *)v40[548];
            v43 = v40[549];
            if ((unint64_t)v42 >= v43)
            {
              v156 = (uint64_t *)v40[547];
              v157 = v42 - v156;
              if ((unint64_t)(v157 + 1) >> 61)
                goto LABEL_414;
              v158 = v43 - (_QWORD)v156;
              v159 = (uint64_t)(v43 - (_QWORD)v156) >> 2;
              if (v159 <= v157 + 1)
                v159 = v157 + 1;
              if (v158 >= 0x7FFFFFFFFFFFFFF8)
                v160 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v160 = v159;
              if (v160)
              {
                v161 = (char *)sub_40FC((uint64_t)(v40 + 549), v160);
                v42 = (uint64_t *)v40[548];
                v156 = (uint64_t *)v40[547];
              }
              else
              {
                v161 = 0;
              }
              v264 = (uint64_t *)&v161[8 * v157];
              *v264 = v41;
              v44 = v264 + 1;
              while (v42 != v156)
              {
                v265 = *--v42;
                *--v264 = v265;
              }
              v40[547] = v264;
              v40[548] = v44;
              v40[549] = &v161[8 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[548] = v44;
            break;
          case 0x97:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            v47 = (char *)v45[551];
            v48 = v45[552];
            if ((unint64_t)v47 >= v48)
            {
              v162 = (char *)v45[550];
              v163 = (v47 - v162) >> 3;
              if ((unint64_t)(v163 + 1) >> 61)
                goto LABEL_414;
              v164 = v48 - (_QWORD)v162;
              v165 = (uint64_t)(v48 - (_QWORD)v162) >> 2;
              if (v165 <= v163 + 1)
                v165 = v163 + 1;
              if (v164 >= 0x7FFFFFFFFFFFFFF8)
                v166 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v166 = v165;
              if (v166)
              {
                v167 = (char *)sub_40FC((uint64_t)(v45 + 552), v166);
                v47 = (char *)v45[551];
                v162 = (char *)v45[550];
              }
              else
              {
                v167 = 0;
              }
              v266 = &v167[8 * v163];
              *(_QWORD *)v266 = v46;
              v49 = v266 + 8;
              while (v47 != v162)
              {
                v267 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v266 - 1) = v267;
                v266 -= 8;
              }
              v45[550] = v266;
              v45[551] = v49;
              v45[552] = &v167[8 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[551] = v49;
            break;
          case 0x98:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            v52 = (char *)v50[554];
            v53 = v50[555];
            if ((unint64_t)v52 >= v53)
            {
              v168 = (char *)v50[553];
              v169 = (v52 - v168) >> 3;
              if ((unint64_t)(v169 + 1) >> 61)
                goto LABEL_414;
              v170 = v53 - (_QWORD)v168;
              v171 = (uint64_t)(v53 - (_QWORD)v168) >> 2;
              if (v171 <= v169 + 1)
                v171 = v169 + 1;
              if (v170 >= 0x7FFFFFFFFFFFFFF8)
                v172 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v172 = v171;
              if (v172)
              {
                v173 = (char *)sub_40FC((uint64_t)(v50 + 555), v172);
                v52 = (char *)v50[554];
                v168 = (char *)v50[553];
              }
              else
              {
                v173 = 0;
              }
              v268 = &v173[8 * v169];
              *(_QWORD *)v268 = v51;
              v54 = v268 + 8;
              while (v52 != v168)
              {
                v269 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v268 - 1) = v269;
                v268 -= 8;
              }
              v50[553] = v268;
              v50[554] = v54;
              v50[555] = &v173[8 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[554] = v54;
            break;
          case 0x99:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            v57 = (char *)v55[557];
            v58 = v55[558];
            if ((unint64_t)v57 >= v58)
            {
              v174 = (char *)v55[556];
              v175 = (v57 - v174) >> 3;
              if ((unint64_t)(v175 + 1) >> 61)
                goto LABEL_414;
              v176 = v58 - (_QWORD)v174;
              v177 = (uint64_t)(v58 - (_QWORD)v174) >> 2;
              if (v177 <= v175 + 1)
                v177 = v175 + 1;
              if (v176 >= 0x7FFFFFFFFFFFFFF8)
                v178 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v178 = v177;
              if (v178)
              {
                v179 = (char *)sub_40FC((uint64_t)(v55 + 558), v178);
                v57 = (char *)v55[557];
                v174 = (char *)v55[556];
              }
              else
              {
                v179 = 0;
              }
              v270 = &v179[8 * v175];
              *(_QWORD *)v270 = v56;
              v59 = v270 + 8;
              while (v57 != v174)
              {
                v271 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v270 - 1) = v271;
                v270 -= 8;
              }
              v55[556] = v270;
              v55[557] = v59;
              v55[558] = &v179[8 * v178];
              if (v174)
                operator delete(v174);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[557] = v59;
            break;
          case 0x9A:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v62 = (char *)v60[560];
            v63 = v60[561];
            if ((unint64_t)v62 >= v63)
            {
              v180 = (char *)v60[559];
              v181 = (v62 - v180) >> 3;
              if ((unint64_t)(v181 + 1) >> 61)
                goto LABEL_414;
              v182 = v63 - (_QWORD)v180;
              v183 = (uint64_t)(v63 - (_QWORD)v180) >> 2;
              if (v183 <= v181 + 1)
                v183 = v181 + 1;
              if (v182 >= 0x7FFFFFFFFFFFFFF8)
                v184 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v184 = v183;
              if (v184)
              {
                v185 = (char *)sub_40FC((uint64_t)(v60 + 561), v184);
                v62 = (char *)v60[560];
                v180 = (char *)v60[559];
              }
              else
              {
                v185 = 0;
              }
              v272 = &v185[8 * v181];
              *(_QWORD *)v272 = v61;
              v64 = v272 + 8;
              while (v62 != v180)
              {
                v273 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v272 - 1) = v273;
                v272 -= 8;
              }
              v60[559] = v272;
              v60[560] = v64;
              v60[561] = &v185[8 * v184];
              if (v180)
                operator delete(v180);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[560] = v64;
            break;
          case 0x9B:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            v67 = (char *)v65[563];
            v68 = v65[564];
            if ((unint64_t)v67 >= v68)
            {
              v186 = (char *)v65[562];
              v187 = (v67 - v186) >> 3;
              if ((unint64_t)(v187 + 1) >> 61)
                goto LABEL_414;
              v188 = v68 - (_QWORD)v186;
              v189 = (uint64_t)(v68 - (_QWORD)v186) >> 2;
              if (v189 <= v187 + 1)
                v189 = v187 + 1;
              if (v188 >= 0x7FFFFFFFFFFFFFF8)
                v190 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v190 = v189;
              if (v190)
              {
                v191 = (char *)sub_40FC((uint64_t)(v65 + 564), v190);
                v67 = (char *)v65[563];
                v186 = (char *)v65[562];
              }
              else
              {
                v191 = 0;
              }
              v274 = &v191[8 * v187];
              *(_QWORD *)v274 = v66;
              v69 = v274 + 8;
              while (v67 != v186)
              {
                v275 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v274 - 1) = v275;
                v274 -= 8;
              }
              v65[562] = v274;
              v65[563] = v69;
              v65[564] = &v191[8 * v190];
              if (v186)
                operator delete(v186);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[563] = v69;
            break;
          case 0x9C:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v72 = (char *)v70[566];
            v73 = v70[567];
            if ((unint64_t)v72 >= v73)
            {
              v192 = (char *)v70[565];
              v193 = (v72 - v192) >> 3;
              if ((unint64_t)(v193 + 1) >> 61)
                goto LABEL_414;
              v194 = v73 - (_QWORD)v192;
              v195 = (uint64_t)(v73 - (_QWORD)v192) >> 2;
              if (v195 <= v193 + 1)
                v195 = v193 + 1;
              if (v194 >= 0x7FFFFFFFFFFFFFF8)
                v196 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v196 = v195;
              if (v196)
              {
                v197 = (char *)sub_40FC((uint64_t)(v70 + 567), v196);
                v72 = (char *)v70[566];
                v192 = (char *)v70[565];
              }
              else
              {
                v197 = 0;
              }
              v276 = &v197[8 * v193];
              *(_QWORD *)v276 = v71;
              v74 = v276 + 8;
              while (v72 != v192)
              {
                v277 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v276 - 1) = v277;
                v276 -= 8;
              }
              v70[565] = v276;
              v70[566] = v74;
              v70[567] = &v197[8 * v196];
              if (v192)
                operator delete(v192);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[566] = v74;
            break;
          case 0x9D:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            v77 = (uint64_t *)v75[569];
            v78 = v75[570];
            if ((unint64_t)v77 >= v78)
            {
              v198 = (uint64_t *)v75[568];
              v199 = v77 - v198;
              if ((unint64_t)(v199 + 1) >> 61)
                goto LABEL_414;
              v200 = v78 - (_QWORD)v198;
              v201 = (uint64_t)(v78 - (_QWORD)v198) >> 2;
              if (v201 <= v199 + 1)
                v201 = v199 + 1;
              if (v200 >= 0x7FFFFFFFFFFFFFF8)
                v202 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v202 = v201;
              if (v202)
              {
                v203 = (char *)sub_40FC((uint64_t)(v75 + 570), v202);
                v77 = (uint64_t *)v75[569];
                v198 = (uint64_t *)v75[568];
              }
              else
              {
                v203 = 0;
              }
              v278 = (uint64_t *)&v203[8 * v199];
              *v278 = v76;
              v79 = v278 + 1;
              while (v77 != v198)
              {
                v279 = *--v77;
                *--v278 = v279;
              }
              v75[568] = v278;
              v75[569] = v79;
              v75[570] = &v203[8 * v202];
              if (v198)
                operator delete(v198);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[569] = v79;
            break;
          case 0x9E:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            v82 = (char *)v80[572];
            v83 = v80[573];
            if ((unint64_t)v82 >= v83)
            {
              v204 = (char *)v80[571];
              v205 = (v82 - v204) >> 3;
              if ((unint64_t)(v205 + 1) >> 61)
                goto LABEL_414;
              v206 = v83 - (_QWORD)v204;
              v207 = (uint64_t)(v83 - (_QWORD)v204) >> 2;
              if (v207 <= v205 + 1)
                v207 = v205 + 1;
              if (v206 >= 0x7FFFFFFFFFFFFFF8)
                v208 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v208 = v207;
              if (v208)
              {
                v209 = (char *)sub_40FC((uint64_t)(v80 + 573), v208);
                v82 = (char *)v80[572];
                v204 = (char *)v80[571];
              }
              else
              {
                v209 = 0;
              }
              v280 = &v209[8 * v205];
              *(_QWORD *)v280 = v81;
              v84 = v280 + 8;
              while (v82 != v204)
              {
                v281 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v280 - 1) = v281;
                v280 -= 8;
              }
              v80[571] = v280;
              v80[572] = v84;
              v80[573] = &v209[8 * v208];
              if (v204)
                operator delete(v204);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[572] = v84;
            break;
          case 0x9F:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            v87 = (char *)v85[575];
            v88 = v85[576];
            if ((unint64_t)v87 >= v88)
            {
              v210 = (char *)v85[574];
              v211 = (v87 - v210) >> 3;
              if ((unint64_t)(v211 + 1) >> 61)
                goto LABEL_414;
              v212 = v88 - (_QWORD)v210;
              v213 = (uint64_t)(v88 - (_QWORD)v210) >> 2;
              if (v213 <= v211 + 1)
                v213 = v211 + 1;
              if (v212 >= 0x7FFFFFFFFFFFFFF8)
                v214 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v214 = v213;
              if (v214)
              {
                v215 = (char *)sub_40FC((uint64_t)(v85 + 576), v214);
                v87 = (char *)v85[575];
                v210 = (char *)v85[574];
              }
              else
              {
                v215 = 0;
              }
              v282 = &v215[8 * v211];
              *(_QWORD *)v282 = v86;
              v89 = v282 + 8;
              while (v87 != v210)
              {
                v283 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v282 - 1) = v283;
                v282 -= 8;
              }
              v85[574] = v282;
              v85[575] = v89;
              v85[576] = &v215[8 * v214];
              if (v210)
                operator delete(v210);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[575] = v89;
            break;
          case 0xA0:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v92 = (char *)v90[578];
            v93 = v90[579];
            if ((unint64_t)v92 >= v93)
            {
              v216 = (char *)v90[577];
              v217 = (v92 - v216) >> 3;
              if ((unint64_t)(v217 + 1) >> 61)
                goto LABEL_414;
              v218 = v93 - (_QWORD)v216;
              v219 = (uint64_t)(v93 - (_QWORD)v216) >> 2;
              if (v219 <= v217 + 1)
                v219 = v217 + 1;
              if (v218 >= 0x7FFFFFFFFFFFFFF8)
                v220 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v220 = v219;
              if (v220)
              {
                v221 = (char *)sub_40FC((uint64_t)(v90 + 579), v220);
                v92 = (char *)v90[578];
                v216 = (char *)v90[577];
              }
              else
              {
                v221 = 0;
              }
              v284 = &v221[8 * v217];
              *(_QWORD *)v284 = v91;
              v94 = v284 + 8;
              while (v92 != v216)
              {
                v285 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v284 - 1) = v285;
                v284 -= 8;
              }
              v90[577] = v284;
              v90[578] = v94;
              v90[579] = &v221[8 * v220];
              if (v216)
                operator delete(v216);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[578] = v94;
            break;
          case 0xA1:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            v97 = (char *)v95[581];
            v98 = v95[582];
            if ((unint64_t)v97 >= v98)
            {
              v222 = (char *)v95[580];
              v223 = (v97 - v222) >> 3;
              if ((unint64_t)(v223 + 1) >> 61)
                goto LABEL_414;
              v224 = v98 - (_QWORD)v222;
              v225 = (uint64_t)(v98 - (_QWORD)v222) >> 2;
              if (v225 <= v223 + 1)
                v225 = v223 + 1;
              if (v224 >= 0x7FFFFFFFFFFFFFF8)
                v226 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v226 = v225;
              if (v226)
              {
                v227 = (char *)sub_40FC((uint64_t)(v95 + 582), v226);
                v97 = (char *)v95[581];
                v222 = (char *)v95[580];
              }
              else
              {
                v227 = 0;
              }
              v286 = &v227[8 * v223];
              *(_QWORD *)v286 = v96;
              v99 = v286 + 8;
              while (v97 != v222)
              {
                v287 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v286 - 1) = v287;
                v286 -= 8;
              }
              v95[580] = v286;
              v95[581] = v99;
              v95[582] = &v227[8 * v226];
              if (v222)
                operator delete(v222);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[581] = v99;
            break;
          case 0xA2:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            v102 = (char *)v100[584];
            v103 = v100[585];
            if ((unint64_t)v102 >= v103)
            {
              v228 = (char *)v100[583];
              v229 = (v102 - v228) >> 3;
              if ((unint64_t)(v229 + 1) >> 61)
                goto LABEL_414;
              v230 = v103 - (_QWORD)v228;
              v231 = (uint64_t)(v103 - (_QWORD)v228) >> 2;
              if (v231 <= v229 + 1)
                v231 = v229 + 1;
              if (v230 >= 0x7FFFFFFFFFFFFFF8)
                v232 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v232 = v231;
              if (v232)
              {
                v233 = (char *)sub_40FC((uint64_t)(v100 + 585), v232);
                v102 = (char *)v100[584];
                v228 = (char *)v100[583];
              }
              else
              {
                v233 = 0;
              }
              v288 = &v233[8 * v229];
              *(_QWORD *)v288 = v101;
              v104 = v288 + 8;
              while (v102 != v228)
              {
                v289 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v288 - 1) = v289;
                v288 -= 8;
              }
              v100[583] = v288;
              v100[584] = v104;
              v100[585] = &v233[8 * v232];
              if (v228)
                operator delete(v228);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[584] = v104;
            break;
          case 0xA3:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            v107 = (char *)v105[587];
            v108 = v105[588];
            if ((unint64_t)v107 >= v108)
            {
              v234 = (char *)v105[586];
              v235 = (v107 - v234) >> 3;
              if ((unint64_t)(v235 + 1) >> 61)
                goto LABEL_414;
              v236 = v108 - (_QWORD)v234;
              v237 = (uint64_t)(v108 - (_QWORD)v234) >> 2;
              if (v237 <= v235 + 1)
                v237 = v235 + 1;
              if (v236 >= 0x7FFFFFFFFFFFFFF8)
                v238 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v238 = v237;
              if (v238)
              {
                v239 = (char *)sub_40FC((uint64_t)(v105 + 588), v238);
                v107 = (char *)v105[587];
                v234 = (char *)v105[586];
              }
              else
              {
                v239 = 0;
              }
              v290 = &v239[8 * v235];
              *(_QWORD *)v290 = v106;
              v109 = v290 + 8;
              while (v107 != v234)
              {
                v291 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v290 - 1) = v291;
                v290 -= 8;
              }
              v105[586] = v290;
              v105[587] = v109;
              v105[588] = &v239[8 * v238];
              if (v234)
                operator delete(v234);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[587] = v109;
            break;
          case 0xA4:
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            v112 = (char *)v110[590];
            v113 = v110[591];
            if ((unint64_t)v112 >= v113)
            {
              v240 = (char *)v110[589];
              v241 = (v112 - v240) >> 3;
              if ((unint64_t)(v241 + 1) >> 61)
                goto LABEL_414;
              v242 = v113 - (_QWORD)v240;
              v243 = (uint64_t)(v113 - (_QWORD)v240) >> 2;
              if (v243 <= v241 + 1)
                v243 = v241 + 1;
              if (v242 >= 0x7FFFFFFFFFFFFFF8)
                v244 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v244 = v243;
              if (v244)
              {
                v245 = (char *)sub_40FC((uint64_t)(v110 + 591), v244);
                v112 = (char *)v110[590];
                v240 = (char *)v110[589];
              }
              else
              {
                v245 = 0;
              }
              v292 = &v245[8 * v241];
              *(_QWORD *)v292 = v111;
              v114 = v292 + 8;
              while (v112 != v240)
              {
                v293 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v292 - 1) = v293;
                v292 -= 8;
              }
              v110[589] = v292;
              v110[590] = v114;
              v110[591] = &v245[8 * v244];
              if (v240)
                operator delete(v240);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[590] = v114;
            break;
          case 0xA5:
            v115 = *(_QWORD **)a1[2];
            v116 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            v117 = (unint64_t *)v115[593];
            v118 = v115[594];
            if ((unint64_t)v117 >= v118)
            {
              v246 = (unint64_t *)v115[592];
              v247 = v117 - v246;
              if ((unint64_t)(v247 + 1) >> 61)
LABEL_414:
                sub_4074();
              v248 = v118 - (_QWORD)v246;
              v249 = (uint64_t)(v118 - (_QWORD)v246) >> 2;
              if (v249 <= v247 + 1)
                v249 = v247 + 1;
              if (v248 >= 0x7FFFFFFFFFFFFFF8)
                v250 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v250 = v249;
              if (v250)
              {
                v251 = (char *)sub_40FC((uint64_t)(v115 + 594), v250);
                v117 = (unint64_t *)v115[593];
                v246 = (unint64_t *)v115[592];
              }
              else
              {
                v251 = 0;
              }
              v294 = (unint64_t *)&v251[8 * v247];
              *v294 = v116;
              v119 = v294 + 1;
              while (v117 != v246)
              {
                v295 = *--v117;
                *--v294 = v295;
              }
              v115[592] = v294;
              v115[593] = v119;
              v115[594] = &v251[8 * v250];
              if (v246)
                operator delete(v246);
            }
            else
            {
              *v117 = v116;
              v119 = v117 + 1;
            }
            v115[593] = v119;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_15BCDC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  int *v142;
  int **v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;

  v4 = *a1;
  if (*a2 == 1)
  {
    v143 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v142 = *v143;
    v144 = (char *)v143[1] - (char *)*v143;
    if (v144)
    {
      v145 = v144 >> 2;
      if (v145 <= 1)
        v145 = 1;
      do
      {
        v146 = *v142++;
        switch(v146)
        {
          case 176:
            v147 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5008);
            goto LABEL_194;
          case 177:
            v147 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5032);
            goto LABEL_194;
          case 178:
            v147 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5056);
            goto LABEL_194;
          case 179:
            v147 = *(unsigned __int16 *)(a1[3] + 58);
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5080);
            goto LABEL_194;
          case 180:
            v147 = *(unsigned __int16 *)(a1[3] + 56);
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5104);
            goto LABEL_194;
          case 181:
            v147 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5128);
            goto LABEL_194;
          case 182:
            v147 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5152);
            goto LABEL_194;
          case 183:
            v147 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5176);
            goto LABEL_194;
          case 184:
            v147 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5200);
            goto LABEL_194;
          case 185:
            v147 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 5224);
LABEL_194:
            *(_QWORD *)(*v148 - 8) += v147;
            break;
          default:
            break;
        }
        --v145;
      }
      while (v145);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xB0:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            v12 = (uint64_t *)v10[626];
            v13 = v10[627];
            if ((unint64_t)v12 >= v13)
            {
              v62 = (uint64_t *)v10[625];
              v63 = v12 - v62;
              if ((unint64_t)(v63 + 1) >> 61)
                goto LABEL_198;
              v64 = v13 - (_QWORD)v62;
              v65 = (uint64_t)(v13 - (_QWORD)v62) >> 2;
              if (v65 <= v63 + 1)
                v65 = v63 + 1;
              if (v64 >= 0x7FFFFFFFFFFFFFF8)
                v66 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v66 = v65;
              if (v66)
              {
                v67 = (char *)sub_40FC((uint64_t)(v10 + 627), v66);
                v12 = (uint64_t *)v10[626];
                v62 = (uint64_t *)v10[625];
              }
              else
              {
                v67 = 0;
              }
              v122 = (uint64_t *)&v67[8 * v63];
              *v122 = v11;
              v14 = v122 + 1;
              while (v12 != v62)
              {
                v123 = *--v12;
                *--v122 = v123;
              }
              v10[625] = v122;
              v10[626] = v14;
              v10[627] = &v67[8 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[626] = v14;
            break;
          case 0xB1:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            v17 = (uint64_t *)v15[629];
            v18 = v15[630];
            if ((unint64_t)v17 >= v18)
            {
              v68 = (uint64_t *)v15[628];
              v69 = v17 - v68;
              if ((unint64_t)(v69 + 1) >> 61)
                goto LABEL_198;
              v70 = v18 - (_QWORD)v68;
              v71 = (uint64_t)(v18 - (_QWORD)v68) >> 2;
              if (v71 <= v69 + 1)
                v71 = v69 + 1;
              if (v70 >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              if (v72)
              {
                v73 = (char *)sub_40FC((uint64_t)(v15 + 630), v72);
                v17 = (uint64_t *)v15[629];
                v68 = (uint64_t *)v15[628];
              }
              else
              {
                v73 = 0;
              }
              v124 = (uint64_t *)&v73[8 * v69];
              *v124 = v16;
              v19 = v124 + 1;
              while (v17 != v68)
              {
                v125 = *--v17;
                *--v124 = v125;
              }
              v15[628] = v124;
              v15[629] = v19;
              v15[630] = &v73[8 * v72];
              if (v68)
                operator delete(v68);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[629] = v19;
            break;
          case 0xB2:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            v22 = (uint64_t *)v20[632];
            v23 = v20[633];
            if ((unint64_t)v22 >= v23)
            {
              v74 = (uint64_t *)v20[631];
              v75 = v22 - v74;
              if ((unint64_t)(v75 + 1) >> 61)
                goto LABEL_198;
              v76 = v23 - (_QWORD)v74;
              v77 = (uint64_t)(v23 - (_QWORD)v74) >> 2;
              if (v77 <= v75 + 1)
                v77 = v75 + 1;
              if (v76 >= 0x7FFFFFFFFFFFFFF8)
                v78 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v78 = v77;
              if (v78)
              {
                v79 = (char *)sub_40FC((uint64_t)(v20 + 633), v78);
                v22 = (uint64_t *)v20[632];
                v74 = (uint64_t *)v20[631];
              }
              else
              {
                v79 = 0;
              }
              v126 = (uint64_t *)&v79[8 * v75];
              *v126 = v21;
              v24 = v126 + 1;
              while (v22 != v74)
              {
                v127 = *--v22;
                *--v126 = v127;
              }
              v20[631] = v126;
              v20[632] = v24;
              v20[633] = &v79[8 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[632] = v24;
            break;
          case 0xB3:
            v25 = a1[2];
            v26 = *(_QWORD **)v25;
            v27 = *(unsigned __int16 *)(a1[3] + 58);
            v28 = *(char **)(*(_QWORD *)v25 + 5080);
            v29 = *(_QWORD *)(*(_QWORD *)v25 + 5088);
            if ((unint64_t)v28 >= v29)
            {
              v80 = (char *)v26[634];
              v81 = (v28 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61)
                goto LABEL_198;
              v82 = v29 - (_QWORD)v80;
              v83 = (uint64_t)(v29 - (_QWORD)v80) >> 2;
              if (v83 <= v81 + 1)
                v83 = v81 + 1;
              if (v82 >= 0x7FFFFFFFFFFFFFF8)
                v84 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v84 = v83;
              if (v84)
              {
                v85 = (char *)sub_40FC((uint64_t)(v26 + 636), v84);
                v28 = (char *)v26[635];
                v80 = (char *)v26[634];
              }
              else
              {
                v85 = 0;
              }
              v128 = &v85[8 * v81];
              *(_QWORD *)v128 = v27;
              v30 = v128 + 8;
              while (v28 != v80)
              {
                v129 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v128 - 1) = v129;
                v128 -= 8;
              }
              v26[634] = v128;
              v26[635] = v30;
              v26[636] = &v85[8 * v84];
              if (v80)
                operator delete(v80);
            }
            else
            {
              *(_QWORD *)v28 = v27;
              v30 = v28 + 8;
            }
            v26[635] = v30;
            break;
          case 0xB4:
            v31 = a1[2];
            v32 = *(_QWORD **)v31;
            v33 = *(unsigned __int16 *)(a1[3] + 56);
            v34 = *(char **)(*(_QWORD *)v31 + 5104);
            v35 = *(_QWORD *)(*(_QWORD *)v31 + 5112);
            if ((unint64_t)v34 >= v35)
            {
              v86 = (char *)v32[637];
              v87 = (v34 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61)
                goto LABEL_198;
              v88 = v35 - (_QWORD)v86;
              v89 = (uint64_t)(v35 - (_QWORD)v86) >> 2;
              if (v89 <= v87 + 1)
                v89 = v87 + 1;
              if (v88 >= 0x7FFFFFFFFFFFFFF8)
                v90 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v90 = v89;
              if (v90)
              {
                v91 = (char *)sub_40FC((uint64_t)(v32 + 639), v90);
                v34 = (char *)v32[638];
                v86 = (char *)v32[637];
              }
              else
              {
                v91 = 0;
              }
              v130 = &v91[8 * v87];
              *(_QWORD *)v130 = v33;
              v36 = v130 + 8;
              while (v34 != v86)
              {
                v131 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v130 - 1) = v131;
                v130 -= 8;
              }
              v32[637] = v130;
              v32[638] = v36;
              v32[639] = &v91[8 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_QWORD *)v34 = v33;
              v36 = v34 + 8;
            }
            v32[638] = v36;
            break;
          case 0xB5:
            v37 = *(_QWORD **)a1[2];
            v38 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            v39 = (uint64_t *)v37[641];
            v40 = v37[642];
            if ((unint64_t)v39 >= v40)
            {
              v92 = (uint64_t *)v37[640];
              v93 = v39 - v92;
              if ((unint64_t)(v93 + 1) >> 61)
                goto LABEL_198;
              v94 = v40 - (_QWORD)v92;
              v95 = (uint64_t)(v40 - (_QWORD)v92) >> 2;
              if (v95 <= v93 + 1)
                v95 = v93 + 1;
              if (v94 >= 0x7FFFFFFFFFFFFFF8)
                v96 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v96 = v95;
              if (v96)
              {
                v97 = (char *)sub_40FC((uint64_t)(v37 + 642), v96);
                v39 = (uint64_t *)v37[641];
                v92 = (uint64_t *)v37[640];
              }
              else
              {
                v97 = 0;
              }
              v132 = (uint64_t *)&v97[8 * v93];
              *v132 = v38;
              v41 = v132 + 1;
              while (v39 != v92)
              {
                v133 = *--v39;
                *--v132 = v133;
              }
              v37[640] = v132;
              v37[641] = v41;
              v37[642] = &v97[8 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *v39 = v38;
              v41 = v39 + 1;
            }
            v37[641] = v41;
            break;
          case 0xB6:
            v42 = *(_QWORD **)a1[2];
            v43 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            v44 = (uint64_t *)v42[644];
            v45 = v42[645];
            if ((unint64_t)v44 >= v45)
            {
              v98 = (uint64_t *)v42[643];
              v99 = v44 - v98;
              if ((unint64_t)(v99 + 1) >> 61)
                goto LABEL_198;
              v100 = v45 - (_QWORD)v98;
              v101 = (uint64_t)(v45 - (_QWORD)v98) >> 2;
              if (v101 <= v99 + 1)
                v101 = v99 + 1;
              if (v100 >= 0x7FFFFFFFFFFFFFF8)
                v102 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
              {
                v103 = (char *)sub_40FC((uint64_t)(v42 + 645), v102);
                v44 = (uint64_t *)v42[644];
                v98 = (uint64_t *)v42[643];
              }
              else
              {
                v103 = 0;
              }
              v134 = (uint64_t *)&v103[8 * v99];
              *v134 = v43;
              v46 = v134 + 1;
              while (v44 != v98)
              {
                v135 = *--v44;
                *--v134 = v135;
              }
              v42[643] = v134;
              v42[644] = v46;
              v42[645] = &v103[8 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *v44 = v43;
              v46 = v44 + 1;
            }
            v42[644] = v46;
            break;
          case 0xB7:
            v47 = *(_QWORD **)a1[2];
            v48 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            v49 = (uint64_t *)v47[647];
            v50 = v47[648];
            if ((unint64_t)v49 >= v50)
            {
              v104 = (uint64_t *)v47[646];
              v105 = v49 - v104;
              if ((unint64_t)(v105 + 1) >> 61)
                goto LABEL_198;
              v106 = v50 - (_QWORD)v104;
              v107 = (uint64_t)(v50 - (_QWORD)v104) >> 2;
              if (v107 <= v105 + 1)
                v107 = v105 + 1;
              if (v106 >= 0x7FFFFFFFFFFFFFF8)
                v108 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v108 = v107;
              if (v108)
              {
                v109 = (char *)sub_40FC((uint64_t)(v47 + 648), v108);
                v49 = (uint64_t *)v47[647];
                v104 = (uint64_t *)v47[646];
              }
              else
              {
                v109 = 0;
              }
              v136 = (uint64_t *)&v109[8 * v105];
              *v136 = v48;
              v51 = v136 + 1;
              while (v49 != v104)
              {
                v137 = *--v49;
                *--v136 = v137;
              }
              v47[646] = v136;
              v47[647] = v51;
              v47[648] = &v109[8 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *v49 = v48;
              v51 = v49 + 1;
            }
            v47[647] = v51;
            break;
          case 0xB8:
            v52 = *(_QWORD **)a1[2];
            v53 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            v54 = (uint64_t *)v52[650];
            v55 = v52[651];
            if ((unint64_t)v54 >= v55)
            {
              v110 = (uint64_t *)v52[649];
              v111 = v54 - v110;
              if ((unint64_t)(v111 + 1) >> 61)
                goto LABEL_198;
              v112 = v55 - (_QWORD)v110;
              v113 = (uint64_t)(v55 - (_QWORD)v110) >> 2;
              if (v113 <= v111 + 1)
                v113 = v111 + 1;
              if (v112 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v113;
              if (v114)
              {
                v115 = (char *)sub_40FC((uint64_t)(v52 + 651), v114);
                v54 = (uint64_t *)v52[650];
                v110 = (uint64_t *)v52[649];
              }
              else
              {
                v115 = 0;
              }
              v138 = (uint64_t *)&v115[8 * v111];
              *v138 = v53;
              v56 = v138 + 1;
              while (v54 != v110)
              {
                v139 = *--v54;
                *--v138 = v139;
              }
              v52[649] = v138;
              v52[650] = v56;
              v52[651] = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v54 = v53;
              v56 = v54 + 1;
            }
            v52[650] = v56;
            break;
          case 0xB9:
            v57 = *(_QWORD **)a1[2];
            v58 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            v59 = (uint64_t *)v57[653];
            v60 = v57[654];
            if ((unint64_t)v59 >= v60)
            {
              v116 = (uint64_t *)v57[652];
              v117 = v59 - v116;
              if ((unint64_t)(v117 + 1) >> 61)
LABEL_198:
                sub_4074();
              v118 = v60 - (_QWORD)v116;
              v119 = (uint64_t)(v60 - (_QWORD)v116) >> 2;
              if (v119 <= v117 + 1)
                v119 = v117 + 1;
              if (v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
              {
                v121 = (char *)sub_40FC((uint64_t)(v57 + 654), v120);
                v59 = (uint64_t *)v57[653];
                v116 = (uint64_t *)v57[652];
              }
              else
              {
                v121 = 0;
              }
              v140 = (uint64_t *)&v121[8 * v117];
              *v140 = v58;
              v61 = v140 + 1;
              while (v59 != v116)
              {
                v141 = *--v59;
                *--v140 = v141;
              }
              v57[652] = v140;
              v57[653] = v61;
              v57[654] = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *v59 = v58;
              v61 = v59 + 1;
            }
            v57[653] = v61;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_15C714(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  int *v426;
  int **v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  _WORD *v431;
  _QWORD *v432;

  v4 = *a1;
  if (*a2 == 1)
  {
    v427 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v426 = *v427;
    v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      v429 = v428 >> 2;
      if (v429 <= 1)
        v429 = 1;
      do
      {
        v430 = *v426++;
        switch(v430)
        {
          case '!':
            v431 = (_WORD *)(a1[3] + 34);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1576);
            goto LABEL_590;
          case '"':
            v431 = (_WORD *)(a1[3] + 26);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1600);
            goto LABEL_590;
          case '#':
            v431 = (_WORD *)(a1[3] + 36);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1624);
            goto LABEL_590;
          case '$':
            v431 = (_WORD *)(a1[3] + 28);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1648);
            goto LABEL_590;
          case '%':
            v431 = (_WORD *)(a1[3] + 38);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1672);
            goto LABEL_590;
          case '&':
            v431 = (_WORD *)(a1[3] + 30);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1696);
            goto LABEL_590;
          case '\'':
            v431 = (_WORD *)(a1[3] + 40);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1720);
            goto LABEL_590;
          case '(':
            v431 = (_WORD *)(a1[3] + 32);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1744);
            goto LABEL_590;
          case ')':
            v431 = (_WORD *)(a1[3] + 50);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1768);
            goto LABEL_590;
          case '*':
            v431 = (_WORD *)(a1[3] + 42);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1792);
            goto LABEL_590;
          case '+':
            v431 = (_WORD *)(a1[3] + 52);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1816);
            goto LABEL_590;
          case ',':
            v431 = (_WORD *)(a1[3] + 44);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1840);
            goto LABEL_590;
          case '-':
            v431 = (_WORD *)(a1[3] + 54);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1864);
            goto LABEL_590;
          case '.':
            v431 = (_WORD *)(a1[3] + 46);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1888);
            goto LABEL_590;
          case '/':
            v431 = (_WORD *)(a1[3] + 56);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1912);
            goto LABEL_590;
          case '0':
            v431 = (_WORD *)(a1[3] + 48);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1936);
            goto LABEL_590;
          case '1':
            v431 = (_WORD *)(a1[3] + 66);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1960);
            goto LABEL_590;
          case '2':
            v431 = (_WORD *)(a1[3] + 58);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1984);
            goto LABEL_590;
          case '3':
            v431 = (_WORD *)(a1[3] + 68);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2008);
            goto LABEL_590;
          case '4':
            v431 = (_WORD *)(a1[3] + 60);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2032);
            goto LABEL_590;
          case '5':
            v431 = (_WORD *)(a1[3] + 70);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2056);
            goto LABEL_590;
          case '6':
            v431 = (_WORD *)(a1[3] + 62);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2080);
            goto LABEL_590;
          case '7':
            v431 = (_WORD *)(a1[3] + 72);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2104);
            goto LABEL_590;
          case '8':
            v431 = (_WORD *)(a1[3] + 64);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2128);
            goto LABEL_590;
          case '9':
            v431 = (_WORD *)(a1[3] + 82);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2152);
            goto LABEL_590;
          case ':':
            v431 = (_WORD *)(a1[3] + 74);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2176);
            goto LABEL_590;
          case ';':
            v431 = (_WORD *)(a1[3] + 84);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2200);
            goto LABEL_590;
          case '<':
            v431 = (_WORD *)(a1[3] + 76);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2224);
            goto LABEL_590;
          case '=':
            v431 = (_WORD *)(a1[3] + 86);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2248);
            goto LABEL_590;
          case '>':
            v431 = (_WORD *)(a1[3] + 78);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2272);
            goto LABEL_590;
          case '?':
            v431 = (_WORD *)(a1[3] + 88);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2296);
            goto LABEL_590;
          case '@':
            v431 = (_WORD *)(a1[3] + 80);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2320);
LABEL_590:
            *(_QWORD *)(*v432 - 8) += *v431 & 0x7FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case '!':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v12 = (char *)v10[197];
            v13 = v10[198];
            if ((unint64_t)v12 >= v13)
            {
              v170 = (char *)v10[196];
              v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_594;
              v172 = v13 - (_QWORD)v170;
              v173 = (uint64_t)(v13 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v10 + 198), v174);
                v12 = (char *)v10[197];
                v170 = (char *)v10[196];
              }
              else
              {
                v175 = 0;
              }
              v362 = &v175[8 * v171];
              *(_QWORD *)v362 = v11;
              v14 = v362 + 8;
              while (v12 != v170)
              {
                v363 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[196] = v362;
              v10[197] = v14;
              v10[198] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[197] = v14;
            break;
          case '"':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v17 = (char *)v15[200];
            v18 = v15[201];
            if ((unint64_t)v17 >= v18)
            {
              v176 = (char *)v15[199];
              v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_594;
              v178 = v18 - (_QWORD)v176;
              v179 = (uint64_t)(v18 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v15 + 201), v180);
                v17 = (char *)v15[200];
                v176 = (char *)v15[199];
              }
              else
              {
                v181 = 0;
              }
              v364 = &v181[8 * v177];
              *(_QWORD *)v364 = v16;
              v19 = v364 + 8;
              while (v17 != v176)
              {
                v365 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[199] = v364;
              v15[200] = v19;
              v15[201] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[200] = v19;
            break;
          case '#':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v22 = (char *)v20[203];
            v23 = v20[204];
            if ((unint64_t)v22 >= v23)
            {
              v182 = (char *)v20[202];
              v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_594;
              v184 = v23 - (_QWORD)v182;
              v185 = (uint64_t)(v23 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v20 + 204), v186);
                v22 = (char *)v20[203];
                v182 = (char *)v20[202];
              }
              else
              {
                v187 = 0;
              }
              v366 = &v187[8 * v183];
              *(_QWORD *)v366 = v21;
              v24 = v366 + 8;
              while (v22 != v182)
              {
                v367 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[202] = v366;
              v20[203] = v24;
              v20[204] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[203] = v24;
            break;
          case '$':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v27 = (char *)v25[206];
            v28 = v25[207];
            if ((unint64_t)v27 >= v28)
            {
              v188 = (char *)v25[205];
              v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_594;
              v190 = v28 - (_QWORD)v188;
              v191 = (uint64_t)(v28 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v25 + 207), v192);
                v27 = (char *)v25[206];
                v188 = (char *)v25[205];
              }
              else
              {
                v193 = 0;
              }
              v368 = &v193[8 * v189];
              *(_QWORD *)v368 = v26;
              v29 = v368 + 8;
              while (v27 != v188)
              {
                v369 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[205] = v368;
              v25[206] = v29;
              v25[207] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[206] = v29;
            break;
          case '%':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v32 = (char *)v30[209];
            v33 = v30[210];
            if ((unint64_t)v32 >= v33)
            {
              v194 = (char *)v30[208];
              v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_594;
              v196 = v33 - (_QWORD)v194;
              v197 = (uint64_t)(v33 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v30 + 210), v198);
                v32 = (char *)v30[209];
                v194 = (char *)v30[208];
              }
              else
              {
                v199 = 0;
              }
              v370 = &v199[8 * v195];
              *(_QWORD *)v370 = v31;
              v34 = v370 + 8;
              while (v32 != v194)
              {
                v371 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[208] = v370;
              v30[209] = v34;
              v30[210] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[209] = v34;
            break;
          case '&':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v37 = (char *)v35[212];
            v38 = v35[213];
            if ((unint64_t)v37 >= v38)
            {
              v200 = (char *)v35[211];
              v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_594;
              v202 = v38 - (_QWORD)v200;
              v203 = (uint64_t)(v38 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v35 + 213), v204);
                v37 = (char *)v35[212];
                v200 = (char *)v35[211];
              }
              else
              {
                v205 = 0;
              }
              v372 = &v205[8 * v201];
              *(_QWORD *)v372 = v36;
              v39 = v372 + 8;
              while (v37 != v200)
              {
                v373 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[211] = v372;
              v35[212] = v39;
              v35[213] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[212] = v39;
            break;
          case '\'':
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v42 = (char *)v40[215];
            v43 = v40[216];
            if ((unint64_t)v42 >= v43)
            {
              v206 = (char *)v40[214];
              v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_594;
              v208 = v43 - (_QWORD)v206;
              v209 = (uint64_t)(v43 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v40 + 216), v210);
                v42 = (char *)v40[215];
                v206 = (char *)v40[214];
              }
              else
              {
                v211 = 0;
              }
              v374 = &v211[8 * v207];
              *(_QWORD *)v374 = v41;
              v44 = v374 + 8;
              while (v42 != v206)
              {
                v375 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[214] = v374;
              v40[215] = v44;
              v40[216] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[215] = v44;
            break;
          case '(':
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v47 = (char *)v45[218];
            v48 = v45[219];
            if ((unint64_t)v47 >= v48)
            {
              v212 = (char *)v45[217];
              v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_594;
              v214 = v48 - (_QWORD)v212;
              v215 = (uint64_t)(v48 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v45 + 219), v216);
                v47 = (char *)v45[218];
                v212 = (char *)v45[217];
              }
              else
              {
                v217 = 0;
              }
              v376 = &v217[8 * v213];
              *(_QWORD *)v376 = v46;
              v49 = v376 + 8;
              while (v47 != v212)
              {
                v377 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[217] = v376;
              v45[218] = v49;
              v45[219] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[218] = v49;
            break;
          case ')':
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v52 = (char *)v50[221];
            v53 = v50[222];
            if ((unint64_t)v52 >= v53)
            {
              v218 = (char *)v50[220];
              v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_594;
              v220 = v53 - (_QWORD)v218;
              v221 = (uint64_t)(v53 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v50 + 222), v222);
                v52 = (char *)v50[221];
                v218 = (char *)v50[220];
              }
              else
              {
                v223 = 0;
              }
              v378 = &v223[8 * v219];
              *(_QWORD *)v378 = v51;
              v54 = v378 + 8;
              while (v52 != v218)
              {
                v379 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[220] = v378;
              v50[221] = v54;
              v50[222] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[221] = v54;
            break;
          case '*':
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v57 = (char *)v55[224];
            v58 = v55[225];
            if ((unint64_t)v57 >= v58)
            {
              v224 = (char *)v55[223];
              v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61)
                goto LABEL_594;
              v226 = v58 - (_QWORD)v224;
              v227 = (uint64_t)(v58 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v55 + 225), v228);
                v57 = (char *)v55[224];
                v224 = (char *)v55[223];
              }
              else
              {
                v229 = 0;
              }
              v380 = &v229[8 * v225];
              *(_QWORD *)v380 = v56;
              v59 = v380 + 8;
              while (v57 != v224)
              {
                v381 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[223] = v380;
              v55[224] = v59;
              v55[225] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[224] = v59;
            break;
          case '+':
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            v62 = (char *)v60[227];
            v63 = v60[228];
            if ((unint64_t)v62 >= v63)
            {
              v230 = (char *)v60[226];
              v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61)
                goto LABEL_594;
              v232 = v63 - (_QWORD)v230;
              v233 = (uint64_t)(v63 - (_QWORD)v230) >> 2;
              if (v233 <= v231 + 1)
                v233 = v231 + 1;
              if (v232 >= 0x7FFFFFFFFFFFFFF8)
                v234 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v234 = v233;
              if (v234)
              {
                v235 = (char *)sub_40FC((uint64_t)(v60 + 228), v234);
                v62 = (char *)v60[227];
                v230 = (char *)v60[226];
              }
              else
              {
                v235 = 0;
              }
              v382 = &v235[8 * v231];
              *(_QWORD *)v382 = v61;
              v64 = v382 + 8;
              while (v62 != v230)
              {
                v383 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[226] = v382;
              v60[227] = v64;
              v60[228] = &v235[8 * v234];
              if (v230)
                operator delete(v230);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[227] = v64;
            break;
          case ',':
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v67 = (char *)v65[230];
            v68 = v65[231];
            if ((unint64_t)v67 >= v68)
            {
              v236 = (char *)v65[229];
              v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61)
                goto LABEL_594;
              v238 = v68 - (_QWORD)v236;
              v239 = (uint64_t)(v68 - (_QWORD)v236) >> 2;
              if (v239 <= v237 + 1)
                v239 = v237 + 1;
              if (v238 >= 0x7FFFFFFFFFFFFFF8)
                v240 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v240 = v239;
              if (v240)
              {
                v241 = (char *)sub_40FC((uint64_t)(v65 + 231), v240);
                v67 = (char *)v65[230];
                v236 = (char *)v65[229];
              }
              else
              {
                v241 = 0;
              }
              v384 = &v241[8 * v237];
              *(_QWORD *)v384 = v66;
              v69 = v384 + 8;
              while (v67 != v236)
              {
                v385 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[229] = v384;
              v65[230] = v69;
              v65[231] = &v241[8 * v240];
              if (v236)
                operator delete(v236);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[230] = v69;
            break;
          case '-':
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            v72 = (char *)v70[233];
            v73 = v70[234];
            if ((unint64_t)v72 >= v73)
            {
              v242 = (char *)v70[232];
              v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61)
                goto LABEL_594;
              v244 = v73 - (_QWORD)v242;
              v245 = (uint64_t)(v73 - (_QWORD)v242) >> 2;
              if (v245 <= v243 + 1)
                v245 = v243 + 1;
              if (v244 >= 0x7FFFFFFFFFFFFFF8)
                v246 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v246 = v245;
              if (v246)
              {
                v247 = (char *)sub_40FC((uint64_t)(v70 + 234), v246);
                v72 = (char *)v70[233];
                v242 = (char *)v70[232];
              }
              else
              {
                v247 = 0;
              }
              v386 = &v247[8 * v243];
              *(_QWORD *)v386 = v71;
              v74 = v386 + 8;
              while (v72 != v242)
              {
                v387 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[232] = v386;
              v70[233] = v74;
              v70[234] = &v247[8 * v246];
              if (v242)
                operator delete(v242);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[233] = v74;
            break;
          case '.':
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            v77 = (char *)v75[236];
            v78 = v75[237];
            if ((unint64_t)v77 >= v78)
            {
              v248 = (char *)v75[235];
              v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61)
                goto LABEL_594;
              v250 = v78 - (_QWORD)v248;
              v251 = (uint64_t)(v78 - (_QWORD)v248) >> 2;
              if (v251 <= v249 + 1)
                v251 = v249 + 1;
              if (v250 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v251;
              if (v252)
              {
                v253 = (char *)sub_40FC((uint64_t)(v75 + 237), v252);
                v77 = (char *)v75[236];
                v248 = (char *)v75[235];
              }
              else
              {
                v253 = 0;
              }
              v388 = &v253[8 * v249];
              *(_QWORD *)v388 = v76;
              v79 = v388 + 8;
              while (v77 != v248)
              {
                v389 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[235] = v388;
              v75[236] = v79;
              v75[237] = &v253[8 * v252];
              if (v248)
                operator delete(v248);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[236] = v79;
            break;
          case '/':
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            v82 = (char *)v80[239];
            v83 = v80[240];
            if ((unint64_t)v82 >= v83)
            {
              v254 = (char *)v80[238];
              v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61)
                goto LABEL_594;
              v256 = v83 - (_QWORD)v254;
              v257 = (uint64_t)(v83 - (_QWORD)v254) >> 2;
              if (v257 <= v255 + 1)
                v257 = v255 + 1;
              if (v256 >= 0x7FFFFFFFFFFFFFF8)
                v258 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v258 = v257;
              if (v258)
              {
                v259 = (char *)sub_40FC((uint64_t)(v80 + 240), v258);
                v82 = (char *)v80[239];
                v254 = (char *)v80[238];
              }
              else
              {
                v259 = 0;
              }
              v390 = &v259[8 * v255];
              *(_QWORD *)v390 = v81;
              v84 = v390 + 8;
              while (v82 != v254)
              {
                v391 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[238] = v390;
              v80[239] = v84;
              v80[240] = &v259[8 * v258];
              if (v254)
                operator delete(v254);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[239] = v84;
            break;
          case '0':
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v87 = (char *)v85[242];
            v88 = v85[243];
            if ((unint64_t)v87 >= v88)
            {
              v260 = (char *)v85[241];
              v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61)
                goto LABEL_594;
              v262 = v88 - (_QWORD)v260;
              v263 = (uint64_t)(v88 - (_QWORD)v260) >> 2;
              if (v263 <= v261 + 1)
                v263 = v261 + 1;
              if (v262 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v263;
              if (v264)
              {
                v265 = (char *)sub_40FC((uint64_t)(v85 + 243), v264);
                v87 = (char *)v85[242];
                v260 = (char *)v85[241];
              }
              else
              {
                v265 = 0;
              }
              v392 = &v265[8 * v261];
              *(_QWORD *)v392 = v86;
              v89 = v392 + 8;
              while (v87 != v260)
              {
                v393 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[241] = v392;
              v85[242] = v89;
              v85[243] = &v265[8 * v264];
              if (v260)
                operator delete(v260);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[242] = v89;
            break;
          case '1':
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 66) & 0x7FFF;
            v92 = (char *)v90[245];
            v93 = v90[246];
            if ((unint64_t)v92 >= v93)
            {
              v266 = (char *)v90[244];
              v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61)
                goto LABEL_594;
              v268 = v93 - (_QWORD)v266;
              v269 = (uint64_t)(v93 - (_QWORD)v266) >> 2;
              if (v269 <= v267 + 1)
                v269 = v267 + 1;
              if (v268 >= 0x7FFFFFFFFFFFFFF8)
                v270 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v270 = v269;
              if (v270)
              {
                v271 = (char *)sub_40FC((uint64_t)(v90 + 246), v270);
                v92 = (char *)v90[245];
                v266 = (char *)v90[244];
              }
              else
              {
                v271 = 0;
              }
              v394 = &v271[8 * v267];
              *(_QWORD *)v394 = v91;
              v94 = v394 + 8;
              while (v92 != v266)
              {
                v395 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[244] = v394;
              v90[245] = v94;
              v90[246] = &v271[8 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[245] = v94;
            break;
          case '2':
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            v97 = (char *)v95[248];
            v98 = v95[249];
            if ((unint64_t)v97 >= v98)
            {
              v272 = (char *)v95[247];
              v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61)
                goto LABEL_594;
              v274 = v98 - (_QWORD)v272;
              v275 = (uint64_t)(v98 - (_QWORD)v272) >> 2;
              if (v275 <= v273 + 1)
                v275 = v273 + 1;
              if (v274 >= 0x7FFFFFFFFFFFFFF8)
                v276 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v276 = v275;
              if (v276)
              {
                v277 = (char *)sub_40FC((uint64_t)(v95 + 249), v276);
                v97 = (char *)v95[248];
                v272 = (char *)v95[247];
              }
              else
              {
                v277 = 0;
              }
              v396 = &v277[8 * v273];
              *(_QWORD *)v396 = v96;
              v99 = v396 + 8;
              while (v97 != v272)
              {
                v397 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[247] = v396;
              v95[248] = v99;
              v95[249] = &v277[8 * v276];
              if (v272)
                operator delete(v272);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[248] = v99;
            break;
          case '3':
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 68) & 0x7FFF;
            v102 = (char *)v100[251];
            v103 = v100[252];
            if ((unint64_t)v102 >= v103)
            {
              v278 = (char *)v100[250];
              v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61)
                goto LABEL_594;
              v280 = v103 - (_QWORD)v278;
              v281 = (uint64_t)(v103 - (_QWORD)v278) >> 2;
              if (v281 <= v279 + 1)
                v281 = v279 + 1;
              if (v280 >= 0x7FFFFFFFFFFFFFF8)
                v282 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v282 = v281;
              if (v282)
              {
                v283 = (char *)sub_40FC((uint64_t)(v100 + 252), v282);
                v102 = (char *)v100[251];
                v278 = (char *)v100[250];
              }
              else
              {
                v283 = 0;
              }
              v398 = &v283[8 * v279];
              *(_QWORD *)v398 = v101;
              v104 = v398 + 8;
              while (v102 != v278)
              {
                v399 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[250] = v398;
              v100[251] = v104;
              v100[252] = &v283[8 * v282];
              if (v278)
                operator delete(v278);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[251] = v104;
            break;
          case '4':
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            v107 = (char *)v105[254];
            v108 = v105[255];
            if ((unint64_t)v107 >= v108)
            {
              v284 = (char *)v105[253];
              v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61)
                goto LABEL_594;
              v286 = v108 - (_QWORD)v284;
              v287 = (uint64_t)(v108 - (_QWORD)v284) >> 2;
              if (v287 <= v285 + 1)
                v287 = v285 + 1;
              if (v286 >= 0x7FFFFFFFFFFFFFF8)
                v288 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v288 = v287;
              if (v288)
              {
                v289 = (char *)sub_40FC((uint64_t)(v105 + 255), v288);
                v107 = (char *)v105[254];
                v284 = (char *)v105[253];
              }
              else
              {
                v289 = 0;
              }
              v400 = &v289[8 * v285];
              *(_QWORD *)v400 = v106;
              v109 = v400 + 8;
              while (v107 != v284)
              {
                v401 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[253] = v400;
              v105[254] = v109;
              v105[255] = &v289[8 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[254] = v109;
            break;
          case '5':
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 70) & 0x7FFF;
            v112 = (char *)v110[257];
            v113 = v110[258];
            if ((unint64_t)v112 >= v113)
            {
              v290 = (char *)v110[256];
              v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61)
                goto LABEL_594;
              v292 = v113 - (_QWORD)v290;
              v293 = (uint64_t)(v113 - (_QWORD)v290) >> 2;
              if (v293 <= v291 + 1)
                v293 = v291 + 1;
              if (v292 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v293;
              if (v294)
              {
                v295 = (char *)sub_40FC((uint64_t)(v110 + 258), v294);
                v112 = (char *)v110[257];
                v290 = (char *)v110[256];
              }
              else
              {
                v295 = 0;
              }
              v402 = &v295[8 * v291];
              *(_QWORD *)v402 = v111;
              v114 = v402 + 8;
              while (v112 != v290)
              {
                v403 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[256] = v402;
              v110[257] = v114;
              v110[258] = &v295[8 * v294];
              if (v290)
                operator delete(v290);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[257] = v114;
            break;
          case '6':
            v115 = *(_QWORD **)a1[2];
            v116 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            v117 = (char *)v115[260];
            v118 = v115[261];
            if ((unint64_t)v117 >= v118)
            {
              v296 = (char *)v115[259];
              v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61)
                goto LABEL_594;
              v298 = v118 - (_QWORD)v296;
              v299 = (uint64_t)(v118 - (_QWORD)v296) >> 2;
              if (v299 <= v297 + 1)
                v299 = v297 + 1;
              if (v298 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v299;
              if (v300)
              {
                v301 = (char *)sub_40FC((uint64_t)(v115 + 261), v300);
                v117 = (char *)v115[260];
                v296 = (char *)v115[259];
              }
              else
              {
                v301 = 0;
              }
              v404 = &v301[8 * v297];
              *(_QWORD *)v404 = v116;
              v119 = v404 + 8;
              while (v117 != v296)
              {
                v405 = *((_QWORD *)v117 - 1);
                v117 -= 8;
                *((_QWORD *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[259] = v404;
              v115[260] = v119;
              v115[261] = &v301[8 * v300];
              if (v296)
                operator delete(v296);
            }
            else
            {
              *(_QWORD *)v117 = v116;
              v119 = v117 + 8;
            }
            v115[260] = v119;
            break;
          case '7':
            v120 = *(_QWORD **)a1[2];
            v121 = *(_WORD *)(a1[3] + 72) & 0x7FFF;
            v122 = (char *)v120[263];
            v123 = v120[264];
            if ((unint64_t)v122 >= v123)
            {
              v302 = (char *)v120[262];
              v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61)
                goto LABEL_594;
              v304 = v123 - (_QWORD)v302;
              v305 = (uint64_t)(v123 - (_QWORD)v302) >> 2;
              if (v305 <= v303 + 1)
                v305 = v303 + 1;
              if (v304 >= 0x7FFFFFFFFFFFFFF8)
                v306 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v306 = v305;
              if (v306)
              {
                v307 = (char *)sub_40FC((uint64_t)(v120 + 264), v306);
                v122 = (char *)v120[263];
                v302 = (char *)v120[262];
              }
              else
              {
                v307 = 0;
              }
              v406 = &v307[8 * v303];
              *(_QWORD *)v406 = v121;
              v124 = v406 + 8;
              while (v122 != v302)
              {
                v407 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[262] = v406;
              v120[263] = v124;
              v120[264] = &v307[8 * v306];
              if (v302)
                operator delete(v302);
            }
            else
            {
              *(_QWORD *)v122 = v121;
              v124 = v122 + 8;
            }
            v120[263] = v124;
            break;
          case '8':
            v125 = *(_QWORD **)a1[2];
            v126 = *(_WORD *)(a1[3] + 64) & 0x7FFF;
            v127 = (char *)v125[266];
            v128 = v125[267];
            if ((unint64_t)v127 >= v128)
            {
              v308 = (char *)v125[265];
              v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61)
                goto LABEL_594;
              v310 = v128 - (_QWORD)v308;
              v311 = (uint64_t)(v128 - (_QWORD)v308) >> 2;
              if (v311 <= v309 + 1)
                v311 = v309 + 1;
              if (v310 >= 0x7FFFFFFFFFFFFFF8)
                v312 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v312 = v311;
              if (v312)
              {
                v313 = (char *)sub_40FC((uint64_t)(v125 + 267), v312);
                v127 = (char *)v125[266];
                v308 = (char *)v125[265];
              }
              else
              {
                v313 = 0;
              }
              v408 = &v313[8 * v309];
              *(_QWORD *)v408 = v126;
              v129 = v408 + 8;
              while (v127 != v308)
              {
                v409 = *((_QWORD *)v127 - 1);
                v127 -= 8;
                *((_QWORD *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[265] = v408;
              v125[266] = v129;
              v125[267] = &v313[8 * v312];
              if (v308)
                operator delete(v308);
            }
            else
            {
              *(_QWORD *)v127 = v126;
              v129 = v127 + 8;
            }
            v125[266] = v129;
            break;
          case '9':
            v130 = *(_QWORD **)a1[2];
            v131 = *(_WORD *)(a1[3] + 82) & 0x7FFF;
            v132 = (char *)v130[269];
            v133 = v130[270];
            if ((unint64_t)v132 >= v133)
            {
              v314 = (char *)v130[268];
              v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61)
                goto LABEL_594;
              v316 = v133 - (_QWORD)v314;
              v317 = (uint64_t)(v133 - (_QWORD)v314) >> 2;
              if (v317 <= v315 + 1)
                v317 = v315 + 1;
              if (v316 >= 0x7FFFFFFFFFFFFFF8)
                v318 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v318 = v317;
              if (v318)
              {
                v319 = (char *)sub_40FC((uint64_t)(v130 + 270), v318);
                v132 = (char *)v130[269];
                v314 = (char *)v130[268];
              }
              else
              {
                v319 = 0;
              }
              v410 = &v319[8 * v315];
              *(_QWORD *)v410 = v131;
              v134 = v410 + 8;
              while (v132 != v314)
              {
                v411 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[268] = v410;
              v130[269] = v134;
              v130[270] = &v319[8 * v318];
              if (v314)
                operator delete(v314);
            }
            else
            {
              *(_QWORD *)v132 = v131;
              v134 = v132 + 8;
            }
            v130[269] = v134;
            break;
          case ':':
            v135 = *(_QWORD **)a1[2];
            v136 = *(_WORD *)(a1[3] + 74) & 0x7FFF;
            v137 = (char *)v135[272];
            v138 = v135[273];
            if ((unint64_t)v137 >= v138)
            {
              v320 = (char *)v135[271];
              v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61)
                goto LABEL_594;
              v322 = v138 - (_QWORD)v320;
              v323 = (uint64_t)(v138 - (_QWORD)v320) >> 2;
              if (v323 <= v321 + 1)
                v323 = v321 + 1;
              if (v322 >= 0x7FFFFFFFFFFFFFF8)
                v324 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v324 = v323;
              if (v324)
              {
                v325 = (char *)sub_40FC((uint64_t)(v135 + 273), v324);
                v137 = (char *)v135[272];
                v320 = (char *)v135[271];
              }
              else
              {
                v325 = 0;
              }
              v412 = &v325[8 * v321];
              *(_QWORD *)v412 = v136;
              v139 = v412 + 8;
              while (v137 != v320)
              {
                v413 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[271] = v412;
              v135[272] = v139;
              v135[273] = &v325[8 * v324];
              if (v320)
                operator delete(v320);
            }
            else
            {
              *(_QWORD *)v137 = v136;
              v139 = v137 + 8;
            }
            v135[272] = v139;
            break;
          case ';':
            v140 = *(_QWORD **)a1[2];
            v141 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            v142 = (char *)v140[275];
            v143 = v140[276];
            if ((unint64_t)v142 >= v143)
            {
              v326 = (char *)v140[274];
              v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61)
                goto LABEL_594;
              v328 = v143 - (_QWORD)v326;
              v329 = (uint64_t)(v143 - (_QWORD)v326) >> 2;
              if (v329 <= v327 + 1)
                v329 = v327 + 1;
              if (v328 >= 0x7FFFFFFFFFFFFFF8)
                v330 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v330 = v329;
              if (v330)
              {
                v331 = (char *)sub_40FC((uint64_t)(v140 + 276), v330);
                v142 = (char *)v140[275];
                v326 = (char *)v140[274];
              }
              else
              {
                v331 = 0;
              }
              v414 = &v331[8 * v327];
              *(_QWORD *)v414 = v141;
              v144 = v414 + 8;
              while (v142 != v326)
              {
                v415 = *((_QWORD *)v142 - 1);
                v142 -= 8;
                *((_QWORD *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[274] = v414;
              v140[275] = v144;
              v140[276] = &v331[8 * v330];
              if (v326)
                operator delete(v326);
            }
            else
            {
              *(_QWORD *)v142 = v141;
              v144 = v142 + 8;
            }
            v140[275] = v144;
            break;
          case '<':
            v145 = *(_QWORD **)a1[2];
            v146 = *(_WORD *)(a1[3] + 76) & 0x7FFF;
            v147 = (char *)v145[278];
            v148 = v145[279];
            if ((unint64_t)v147 >= v148)
            {
              v332 = (char *)v145[277];
              v333 = (v147 - v332) >> 3;
              if ((unint64_t)(v333 + 1) >> 61)
                goto LABEL_594;
              v334 = v148 - (_QWORD)v332;
              v335 = (uint64_t)(v148 - (_QWORD)v332) >> 2;
              if (v335 <= v333 + 1)
                v335 = v333 + 1;
              if (v334 >= 0x7FFFFFFFFFFFFFF8)
                v336 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v336 = v335;
              if (v336)
              {
                v337 = (char *)sub_40FC((uint64_t)(v145 + 279), v336);
                v147 = (char *)v145[278];
                v332 = (char *)v145[277];
              }
              else
              {
                v337 = 0;
              }
              v416 = &v337[8 * v333];
              *(_QWORD *)v416 = v146;
              v149 = v416 + 8;
              while (v147 != v332)
              {
                v417 = *((_QWORD *)v147 - 1);
                v147 -= 8;
                *((_QWORD *)v416 - 1) = v417;
                v416 -= 8;
              }
              v145[277] = v416;
              v145[278] = v149;
              v145[279] = &v337[8 * v336];
              if (v332)
                operator delete(v332);
            }
            else
            {
              *(_QWORD *)v147 = v146;
              v149 = v147 + 8;
            }
            v145[278] = v149;
            break;
          case '=':
            v150 = *(_QWORD **)a1[2];
            v151 = *(_WORD *)(a1[3] + 86) & 0x7FFF;
            v152 = (char *)v150[281];
            v153 = v150[282];
            if ((unint64_t)v152 >= v153)
            {
              v338 = (char *)v150[280];
              v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61)
                goto LABEL_594;
              v340 = v153 - (_QWORD)v338;
              v341 = (uint64_t)(v153 - (_QWORD)v338) >> 2;
              if (v341 <= v339 + 1)
                v341 = v339 + 1;
              if (v340 >= 0x7FFFFFFFFFFFFFF8)
                v342 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v342 = v341;
              if (v342)
              {
                v343 = (char *)sub_40FC((uint64_t)(v150 + 282), v342);
                v152 = (char *)v150[281];
                v338 = (char *)v150[280];
              }
              else
              {
                v343 = 0;
              }
              v418 = &v343[8 * v339];
              *(_QWORD *)v418 = v151;
              v154 = v418 + 8;
              while (v152 != v338)
              {
                v419 = *((_QWORD *)v152 - 1);
                v152 -= 8;
                *((_QWORD *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[280] = v418;
              v150[281] = v154;
              v150[282] = &v343[8 * v342];
              if (v338)
                operator delete(v338);
            }
            else
            {
              *(_QWORD *)v152 = v151;
              v154 = v152 + 8;
            }
            v150[281] = v154;
            break;
          case '>':
            v155 = *(_QWORD **)a1[2];
            v156 = *(_WORD *)(a1[3] + 78) & 0x7FFF;
            v157 = (char *)v155[284];
            v158 = v155[285];
            if ((unint64_t)v157 >= v158)
            {
              v344 = (char *)v155[283];
              v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61)
                goto LABEL_594;
              v346 = v158 - (_QWORD)v344;
              v347 = (uint64_t)(v158 - (_QWORD)v344) >> 2;
              if (v347 <= v345 + 1)
                v347 = v345 + 1;
              if (v346 >= 0x7FFFFFFFFFFFFFF8)
                v348 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v348 = v347;
              if (v348)
              {
                v349 = (char *)sub_40FC((uint64_t)(v155 + 285), v348);
                v157 = (char *)v155[284];
                v344 = (char *)v155[283];
              }
              else
              {
                v349 = 0;
              }
              v420 = &v349[8 * v345];
              *(_QWORD *)v420 = v156;
              v159 = v420 + 8;
              while (v157 != v344)
              {
                v421 = *((_QWORD *)v157 - 1);
                v157 -= 8;
                *((_QWORD *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[283] = v420;
              v155[284] = v159;
              v155[285] = &v349[8 * v348];
              if (v344)
                operator delete(v344);
            }
            else
            {
              *(_QWORD *)v157 = v156;
              v159 = v157 + 8;
            }
            v155[284] = v159;
            break;
          case '?':
            v160 = *(_QWORD **)a1[2];
            v161 = *(_WORD *)(a1[3] + 88) & 0x7FFF;
            v162 = (char *)v160[287];
            v163 = v160[288];
            if ((unint64_t)v162 >= v163)
            {
              v350 = (char *)v160[286];
              v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61)
                goto LABEL_594;
              v352 = v163 - (_QWORD)v350;
              v353 = (uint64_t)(v163 - (_QWORD)v350) >> 2;
              if (v353 <= v351 + 1)
                v353 = v351 + 1;
              if (v352 >= 0x7FFFFFFFFFFFFFF8)
                v354 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v354 = v353;
              if (v354)
              {
                v355 = (char *)sub_40FC((uint64_t)(v160 + 288), v354);
                v162 = (char *)v160[287];
                v350 = (char *)v160[286];
              }
              else
              {
                v355 = 0;
              }
              v422 = &v355[8 * v351];
              *(_QWORD *)v422 = v161;
              v164 = v422 + 8;
              while (v162 != v350)
              {
                v423 = *((_QWORD *)v162 - 1);
                v162 -= 8;
                *((_QWORD *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[286] = v422;
              v160[287] = v164;
              v160[288] = &v355[8 * v354];
              if (v350)
                operator delete(v350);
            }
            else
            {
              *(_QWORD *)v162 = v161;
              v164 = v162 + 8;
            }
            v160[287] = v164;
            break;
          case '@':
            v165 = *(_QWORD **)a1[2];
            v166 = *(_WORD *)(a1[3] + 80) & 0x7FFF;
            v167 = (char *)v165[290];
            v168 = v165[291];
            if ((unint64_t)v167 >= v168)
            {
              v356 = (char *)v165[289];
              v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61)
LABEL_594:
                sub_4074();
              v358 = v168 - (_QWORD)v356;
              v359 = (uint64_t)(v168 - (_QWORD)v356) >> 2;
              if (v359 <= v357 + 1)
                v359 = v357 + 1;
              if (v358 >= 0x7FFFFFFFFFFFFFF8)
                v360 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v360 = v359;
              if (v360)
              {
                v361 = (char *)sub_40FC((uint64_t)(v165 + 291), v360);
                v167 = (char *)v165[290];
                v356 = (char *)v165[289];
              }
              else
              {
                v361 = 0;
              }
              v424 = &v361[8 * v357];
              *(_QWORD *)v424 = v166;
              v169 = v424 + 8;
              while (v167 != v356)
              {
                v425 = *((_QWORD *)v167 - 1);
                v167 -= 8;
                *((_QWORD *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[289] = v424;
              v165[290] = v169;
              v165[291] = &v361[8 * v360];
              if (v356)
                operator delete(v356);
            }
            else
            {
              *(_QWORD *)v167 = v166;
              v169 = v167 + 8;
            }
            v165[290] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_15E3D0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  int *v189;
  int **v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  _QWORD *v195;

  v4 = *a1;
  if (*a2 == 1)
  {
    v190 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v189 = *v190;
    v191 = (char *)v190[1] - (char *)*v190;
    if (v191)
    {
      v192 = v191 >> 2;
      if (v192 <= 1)
        v192 = 1;
      do
      {
        v193 = *v189++;
        switch(v193)
        {
          case 15:
            v194 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1144);
            goto LABEL_248;
          case 16:
            v194 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1168);
            goto LABEL_248;
          case 17:
            v194 = *(unsigned __int16 *)(a1[3] + 44);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1192);
            goto LABEL_248;
          case 18:
            v194 = *(unsigned __int16 *)(a1[3] + 32);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1216);
            goto LABEL_248;
          case 19:
            v194 = *(unsigned __int16 *)(a1[3] + 38);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1240);
            goto LABEL_248;
          case 20:
            v194 = *(unsigned __int16 *)(a1[3] + 26);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1264);
            goto LABEL_248;
          case 21:
            v194 = *(unsigned __int16 *)(a1[3] + 40);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1288);
            goto LABEL_248;
          case 22:
            v194 = *(unsigned __int16 *)(a1[3] + 28);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1312);
            goto LABEL_248;
          case 23:
            v194 = *(unsigned __int16 *)(a1[3] + 46);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1336);
            goto LABEL_248;
          case 24:
            v194 = *(unsigned __int16 *)(a1[3] + 34);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1360);
            goto LABEL_248;
          case 25:
            v194 = *(unsigned __int16 *)(a1[3] + 42);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1384);
            goto LABEL_248;
          case 26:
            v194 = *(unsigned __int16 *)(a1[3] + 30);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1408);
            goto LABEL_248;
          case 27:
            v194 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1432);
LABEL_248:
            *(_QWORD *)(*v195 - 8) += v194;
            break;
          default:
            break;
        }
        --v192;
      }
      while (v192);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xF:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v12 = (char *)v10[143];
            v13 = v10[144];
            if ((unint64_t)v12 >= v13)
            {
              v85 = (char *)v10[142];
              v86 = (v12 - v85) >> 3;
              if ((unint64_t)(v86 + 1) >> 61)
                goto LABEL_252;
              v87 = v13 - (_QWORD)v85;
              v88 = (uint64_t)(v13 - (_QWORD)v85) >> 2;
              if (v88 <= v86 + 1)
                v88 = v86 + 1;
              if (v87 >= 0x7FFFFFFFFFFFFFF8)
                v89 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v89 = v88;
              if (v89)
              {
                v90 = (char *)sub_40FC((uint64_t)(v10 + 144), v89);
                v12 = (char *)v10[143];
                v85 = (char *)v10[142];
              }
              else
              {
                v90 = 0;
              }
              v163 = &v90[8 * v86];
              *(_QWORD *)v163 = v11;
              v14 = v163 + 8;
              while (v12 != v85)
              {
                v164 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v163 - 1) = v164;
                v163 -= 8;
              }
              v10[142] = v163;
              v10[143] = v14;
              v10[144] = &v90[8 * v89];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[143] = v14;
            break;
          case 0x10:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v17 = (char *)v15[146];
            v18 = v15[147];
            if ((unint64_t)v17 >= v18)
            {
              v91 = (char *)v15[145];
              v92 = (v17 - v91) >> 3;
              if ((unint64_t)(v92 + 1) >> 61)
                goto LABEL_252;
              v93 = v18 - (_QWORD)v91;
              v94 = (uint64_t)(v18 - (_QWORD)v91) >> 2;
              if (v94 <= v92 + 1)
                v94 = v92 + 1;
              if (v93 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v94;
              if (v95)
              {
                v96 = (char *)sub_40FC((uint64_t)(v15 + 147), v95);
                v17 = (char *)v15[146];
                v91 = (char *)v15[145];
              }
              else
              {
                v96 = 0;
              }
              v165 = &v96[8 * v92];
              *(_QWORD *)v165 = v16;
              v19 = v165 + 8;
              while (v17 != v91)
              {
                v166 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v165 - 1) = v166;
                v165 -= 8;
              }
              v15[145] = v165;
              v15[146] = v19;
              v15[147] = &v96[8 * v95];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[146] = v19;
            break;
          case 0x11:
            v20 = a1[2];
            v21 = *(_QWORD **)v20;
            v22 = *(unsigned __int16 *)(a1[3] + 44);
            v23 = *(char **)(*(_QWORD *)v20 + 1192);
            v24 = *(_QWORD *)(*(_QWORD *)v20 + 1200);
            if ((unint64_t)v23 >= v24)
            {
              v97 = (char *)v21[148];
              v98 = (v23 - v97) >> 3;
              if ((unint64_t)(v98 + 1) >> 61)
                goto LABEL_252;
              v99 = v24 - (_QWORD)v97;
              v100 = (uint64_t)(v24 - (_QWORD)v97) >> 2;
              if (v100 <= v98 + 1)
                v100 = v98 + 1;
              if (v99 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v100;
              if (v101)
              {
                v102 = (char *)sub_40FC((uint64_t)(v21 + 150), v101);
                v23 = (char *)v21[149];
                v97 = (char *)v21[148];
              }
              else
              {
                v102 = 0;
              }
              v167 = &v102[8 * v98];
              *(_QWORD *)v167 = v22;
              v25 = v167 + 8;
              while (v23 != v97)
              {
                v168 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v167 - 1) = v168;
                v167 -= 8;
              }
              v21[148] = v167;
              v21[149] = v25;
              v21[150] = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v23 = v22;
              v25 = v23 + 8;
            }
            v21[149] = v25;
            break;
          case 0x12:
            v26 = a1[2];
            v27 = *(_QWORD **)v26;
            v28 = *(unsigned __int16 *)(a1[3] + 32);
            v29 = *(char **)(*(_QWORD *)v26 + 1216);
            v30 = *(_QWORD *)(*(_QWORD *)v26 + 1224);
            if ((unint64_t)v29 >= v30)
            {
              v103 = (char *)v27[151];
              v104 = (v29 - v103) >> 3;
              if ((unint64_t)(v104 + 1) >> 61)
                goto LABEL_252;
              v105 = v30 - (_QWORD)v103;
              v106 = (uint64_t)(v30 - (_QWORD)v103) >> 2;
              if (v106 <= v104 + 1)
                v106 = v104 + 1;
              if (v105 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v106;
              if (v107)
              {
                v108 = (char *)sub_40FC((uint64_t)(v27 + 153), v107);
                v29 = (char *)v27[152];
                v103 = (char *)v27[151];
              }
              else
              {
                v108 = 0;
              }
              v169 = &v108[8 * v104];
              *(_QWORD *)v169 = v28;
              v31 = v169 + 8;
              while (v29 != v103)
              {
                v170 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v169 - 1) = v170;
                v169 -= 8;
              }
              v27[151] = v169;
              v27[152] = v31;
              v27[153] = &v108[8 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_QWORD *)v29 = v28;
              v31 = v29 + 8;
            }
            v27[152] = v31;
            break;
          case 0x13:
            v32 = a1[2];
            v33 = *(_QWORD **)v32;
            v34 = *(unsigned __int16 *)(a1[3] + 38);
            v35 = *(char **)(*(_QWORD *)v32 + 1240);
            v36 = *(_QWORD *)(*(_QWORD *)v32 + 1248);
            if ((unint64_t)v35 >= v36)
            {
              v109 = (char *)v33[154];
              v110 = (v35 - v109) >> 3;
              if ((unint64_t)(v110 + 1) >> 61)
                goto LABEL_252;
              v111 = v36 - (_QWORD)v109;
              v112 = (uint64_t)(v36 - (_QWORD)v109) >> 2;
              if (v112 <= v110 + 1)
                v112 = v110 + 1;
              if (v111 >= 0x7FFFFFFFFFFFFFF8)
                v113 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v113 = v112;
              if (v113)
              {
                v114 = (char *)sub_40FC((uint64_t)(v33 + 156), v113);
                v35 = (char *)v33[155];
                v109 = (char *)v33[154];
              }
              else
              {
                v114 = 0;
              }
              v171 = &v114[8 * v110];
              *(_QWORD *)v171 = v34;
              v37 = v171 + 8;
              while (v35 != v109)
              {
                v172 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *((_QWORD *)v171 - 1) = v172;
                v171 -= 8;
              }
              v33[154] = v171;
              v33[155] = v37;
              v33[156] = &v114[8 * v113];
              if (v109)
                operator delete(v109);
            }
            else
            {
              *(_QWORD *)v35 = v34;
              v37 = v35 + 8;
            }
            v33[155] = v37;
            break;
          case 0x14:
            v38 = a1[2];
            v39 = *(_QWORD **)v38;
            v40 = *(unsigned __int16 *)(a1[3] + 26);
            v41 = *(char **)(*(_QWORD *)v38 + 1264);
            v42 = *(_QWORD *)(*(_QWORD *)v38 + 1272);
            if ((unint64_t)v41 >= v42)
            {
              v115 = (char *)v39[157];
              v116 = (v41 - v115) >> 3;
              if ((unint64_t)(v116 + 1) >> 61)
                goto LABEL_252;
              v117 = v42 - (_QWORD)v115;
              v118 = (uint64_t)(v42 - (_QWORD)v115) >> 2;
              if (v118 <= v116 + 1)
                v118 = v116 + 1;
              if (v117 >= 0x7FFFFFFFFFFFFFF8)
                v119 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v119 = v118;
              if (v119)
              {
                v120 = (char *)sub_40FC((uint64_t)(v39 + 159), v119);
                v41 = (char *)v39[158];
                v115 = (char *)v39[157];
              }
              else
              {
                v120 = 0;
              }
              v173 = &v120[8 * v116];
              *(_QWORD *)v173 = v40;
              v43 = v173 + 8;
              while (v41 != v115)
              {
                v174 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *((_QWORD *)v173 - 1) = v174;
                v173 -= 8;
              }
              v39[157] = v173;
              v39[158] = v43;
              v39[159] = &v120[8 * v119];
              if (v115)
                operator delete(v115);
            }
            else
            {
              *(_QWORD *)v41 = v40;
              v43 = v41 + 8;
            }
            v39[158] = v43;
            break;
          case 0x15:
            v44 = a1[2];
            v45 = *(_QWORD **)v44;
            v46 = *(unsigned __int16 *)(a1[3] + 40);
            v47 = *(char **)(*(_QWORD *)v44 + 1288);
            v48 = *(_QWORD *)(*(_QWORD *)v44 + 1296);
            if ((unint64_t)v47 >= v48)
            {
              v121 = (char *)v45[160];
              v122 = (v47 - v121) >> 3;
              if ((unint64_t)(v122 + 1) >> 61)
                goto LABEL_252;
              v123 = v48 - (_QWORD)v121;
              v124 = (uint64_t)(v48 - (_QWORD)v121) >> 2;
              if (v124 <= v122 + 1)
                v124 = v122 + 1;
              if (v123 >= 0x7FFFFFFFFFFFFFF8)
                v125 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v125 = v124;
              if (v125)
              {
                v126 = (char *)sub_40FC((uint64_t)(v45 + 162), v125);
                v47 = (char *)v45[161];
                v121 = (char *)v45[160];
              }
              else
              {
                v126 = 0;
              }
              v175 = &v126[8 * v122];
              *(_QWORD *)v175 = v46;
              v49 = v175 + 8;
              while (v47 != v121)
              {
                v176 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v175 - 1) = v176;
                v175 -= 8;
              }
              v45[160] = v175;
              v45[161] = v49;
              v45[162] = &v126[8 * v125];
              if (v121)
                operator delete(v121);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[161] = v49;
            break;
          case 0x16:
            v50 = a1[2];
            v51 = *(_QWORD **)v50;
            v52 = *(unsigned __int16 *)(a1[3] + 28);
            v53 = *(char **)(*(_QWORD *)v50 + 1312);
            v54 = *(_QWORD *)(*(_QWORD *)v50 + 1320);
            if ((unint64_t)v53 >= v54)
            {
              v127 = (char *)v51[163];
              v128 = (v53 - v127) >> 3;
              if ((unint64_t)(v128 + 1) >> 61)
                goto LABEL_252;
              v129 = v54 - (_QWORD)v127;
              v130 = (uint64_t)(v54 - (_QWORD)v127) >> 2;
              if (v130 <= v128 + 1)
                v130 = v128 + 1;
              if (v129 >= 0x7FFFFFFFFFFFFFF8)
                v131 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v131 = v130;
              if (v131)
              {
                v132 = (char *)sub_40FC((uint64_t)(v51 + 165), v131);
                v53 = (char *)v51[164];
                v127 = (char *)v51[163];
              }
              else
              {
                v132 = 0;
              }
              v177 = &v132[8 * v128];
              *(_QWORD *)v177 = v52;
              v55 = v177 + 8;
              while (v53 != v127)
              {
                v178 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v177 - 1) = v178;
                v177 -= 8;
              }
              v51[163] = v177;
              v51[164] = v55;
              v51[165] = &v132[8 * v131];
              if (v127)
                operator delete(v127);
            }
            else
            {
              *(_QWORD *)v53 = v52;
              v55 = v53 + 8;
            }
            v51[164] = v55;
            break;
          case 0x17:
            v56 = a1[2];
            v57 = *(_QWORD **)v56;
            v58 = *(unsigned __int16 *)(a1[3] + 46);
            v59 = *(char **)(*(_QWORD *)v56 + 1336);
            v60 = *(_QWORD *)(*(_QWORD *)v56 + 1344);
            if ((unint64_t)v59 >= v60)
            {
              v133 = (char *)v57[166];
              v134 = (v59 - v133) >> 3;
              if ((unint64_t)(v134 + 1) >> 61)
                goto LABEL_252;
              v135 = v60 - (_QWORD)v133;
              v136 = (uint64_t)(v60 - (_QWORD)v133) >> 2;
              if (v136 <= v134 + 1)
                v136 = v134 + 1;
              if (v135 >= 0x7FFFFFFFFFFFFFF8)
                v137 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v137 = v136;
              if (v137)
              {
                v138 = (char *)sub_40FC((uint64_t)(v57 + 168), v137);
                v59 = (char *)v57[167];
                v133 = (char *)v57[166];
              }
              else
              {
                v138 = 0;
              }
              v179 = &v138[8 * v134];
              *(_QWORD *)v179 = v58;
              v61 = v179 + 8;
              while (v59 != v133)
              {
                v180 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v179 - 1) = v180;
                v179 -= 8;
              }
              v57[166] = v179;
              v57[167] = v61;
              v57[168] = &v138[8 * v137];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *(_QWORD *)v59 = v58;
              v61 = v59 + 8;
            }
            v57[167] = v61;
            break;
          case 0x18:
            v62 = a1[2];
            v63 = *(_QWORD **)v62;
            v64 = *(unsigned __int16 *)(a1[3] + 34);
            v65 = *(char **)(*(_QWORD *)v62 + 1360);
            v66 = *(_QWORD *)(*(_QWORD *)v62 + 1368);
            if ((unint64_t)v65 >= v66)
            {
              v139 = (char *)v63[169];
              v140 = (v65 - v139) >> 3;
              if ((unint64_t)(v140 + 1) >> 61)
                goto LABEL_252;
              v141 = v66 - (_QWORD)v139;
              v142 = (uint64_t)(v66 - (_QWORD)v139) >> 2;
              if (v142 <= v140 + 1)
                v142 = v140 + 1;
              if (v141 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v142;
              if (v143)
              {
                v144 = (char *)sub_40FC((uint64_t)(v63 + 171), v143);
                v65 = (char *)v63[170];
                v139 = (char *)v63[169];
              }
              else
              {
                v144 = 0;
              }
              v181 = &v144[8 * v140];
              *(_QWORD *)v181 = v64;
              v67 = v181 + 8;
              while (v65 != v139)
              {
                v182 = *((_QWORD *)v65 - 1);
                v65 -= 8;
                *((_QWORD *)v181 - 1) = v182;
                v181 -= 8;
              }
              v63[169] = v181;
              v63[170] = v67;
              v63[171] = &v144[8 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_QWORD *)v65 = v64;
              v67 = v65 + 8;
            }
            v63[170] = v67;
            break;
          case 0x19:
            v68 = a1[2];
            v69 = *(_QWORD **)v68;
            v70 = *(unsigned __int16 *)(a1[3] + 42);
            v71 = *(char **)(*(_QWORD *)v68 + 1384);
            v72 = *(_QWORD *)(*(_QWORD *)v68 + 1392);
            if ((unint64_t)v71 >= v72)
            {
              v145 = (char *)v69[172];
              v146 = (v71 - v145) >> 3;
              if ((unint64_t)(v146 + 1) >> 61)
                goto LABEL_252;
              v147 = v72 - (_QWORD)v145;
              v148 = (uint64_t)(v72 - (_QWORD)v145) >> 2;
              if (v148 <= v146 + 1)
                v148 = v146 + 1;
              if (v147 >= 0x7FFFFFFFFFFFFFF8)
                v149 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v149 = v148;
              if (v149)
              {
                v150 = (char *)sub_40FC((uint64_t)(v69 + 174), v149);
                v71 = (char *)v69[173];
                v145 = (char *)v69[172];
              }
              else
              {
                v150 = 0;
              }
              v183 = &v150[8 * v146];
              *(_QWORD *)v183 = v70;
              v73 = v183 + 8;
              while (v71 != v145)
              {
                v184 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *((_QWORD *)v183 - 1) = v184;
                v183 -= 8;
              }
              v69[172] = v183;
              v69[173] = v73;
              v69[174] = &v150[8 * v149];
              if (v145)
                operator delete(v145);
            }
            else
            {
              *(_QWORD *)v71 = v70;
              v73 = v71 + 8;
            }
            v69[173] = v73;
            break;
          case 0x1A:
            v74 = a1[2];
            v75 = *(_QWORD **)v74;
            v76 = *(unsigned __int16 *)(a1[3] + 30);
            v77 = *(char **)(*(_QWORD *)v74 + 1408);
            v78 = *(_QWORD *)(*(_QWORD *)v74 + 1416);
            if ((unint64_t)v77 >= v78)
            {
              v151 = (char *)v75[175];
              v152 = (v77 - v151) >> 3;
              if ((unint64_t)(v152 + 1) >> 61)
                goto LABEL_252;
              v153 = v78 - (_QWORD)v151;
              v154 = (uint64_t)(v78 - (_QWORD)v151) >> 2;
              if (v154 <= v152 + 1)
                v154 = v152 + 1;
              if (v153 >= 0x7FFFFFFFFFFFFFF8)
                v155 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v155 = v154;
              if (v155)
              {
                v156 = (char *)sub_40FC((uint64_t)(v75 + 177), v155);
                v77 = (char *)v75[176];
                v151 = (char *)v75[175];
              }
              else
              {
                v156 = 0;
              }
              v185 = &v156[8 * v152];
              *(_QWORD *)v185 = v76;
              v79 = v185 + 8;
              while (v77 != v151)
              {
                v186 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v185 - 1) = v186;
                v185 -= 8;
              }
              v75[175] = v185;
              v75[176] = v79;
              v75[177] = &v156[8 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[176] = v79;
            break;
          case 0x1B:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v82 = (char *)v80[179];
            v83 = v80[180];
            if ((unint64_t)v82 >= v83)
            {
              v157 = (char *)v80[178];
              v158 = (v82 - v157) >> 3;
              if ((unint64_t)(v158 + 1) >> 61)
LABEL_252:
                sub_4074();
              v159 = v83 - (_QWORD)v157;
              v160 = (uint64_t)(v83 - (_QWORD)v157) >> 2;
              if (v160 <= v158 + 1)
                v160 = v158 + 1;
              if (v159 >= 0x7FFFFFFFFFFFFFF8)
                v161 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v161 = v160;
              if (v161)
              {
                v162 = (char *)sub_40FC((uint64_t)(v80 + 180), v161);
                v82 = (char *)v80[179];
                v157 = (char *)v80[178];
              }
              else
              {
                v162 = 0;
              }
              v187 = &v162[8 * v158];
              *(_QWORD *)v187 = v81;
              v84 = v187 + 8;
              while (v82 != v157)
              {
                v188 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v187 - 1) = v188;
                v187 -= 8;
              }
              v80[178] = v187;
              v80[179] = v84;
              v80[180] = &v162[8 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[179] = v84;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_15EFE4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  int *v207;
  int **v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  _QWORD *v213;

  v4 = *a1;
  if (*a2 == 1)
  {
    v208 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v207 = *v208;
    v209 = (char *)v208[1] - (char *)*v208;
    if (v209)
    {
      v210 = v209 >> 2;
      if (v210 <= 1)
        v210 = 1;
      do
      {
        v211 = *v207++;
        switch(v211)
        {
          case 0:
            v212 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 784);
            goto LABEL_284;
          case 1:
            v212 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 808);
            goto LABEL_284;
          case 2:
            v212 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 832);
            goto LABEL_284;
          case 3:
            v212 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 856);
            goto LABEL_284;
          case 4:
            v212 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 880);
            goto LABEL_284;
          case 5:
            v212 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 904);
            goto LABEL_284;
          case 6:
            v212 = *(unsigned __int16 *)(a1[3] + 62);
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 928);
            goto LABEL_284;
          case 7:
            v212 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 952);
            goto LABEL_284;
          case 8:
            v212 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 976);
            goto LABEL_284;
          case 9:
            v212 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1000);
            goto LABEL_284;
          case 10:
            v212 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1024);
            goto LABEL_284;
          case 11:
            v212 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1048);
            goto LABEL_284;
          case 12:
            v212 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1072);
            goto LABEL_284;
          case 13:
            v212 = *(unsigned __int16 *)(a1[3] + 60);
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1096);
            goto LABEL_284;
          case 14:
            v212 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1120);
LABEL_284:
            *(_QWORD *)(*v213 - 8) += v212;
            break;
          default:
            break;
        }
        --v210;
      }
      while (v210);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v12 = (uint64_t *)v10[98];
            v13 = v10[99];
            if ((unint64_t)v12 >= v13)
            {
              v87 = (uint64_t *)v10[97];
              v88 = v12 - v87;
              if ((unint64_t)(v88 + 1) >> 61)
                goto LABEL_288;
              v89 = v13 - (_QWORD)v87;
              v90 = (uint64_t)(v13 - (_QWORD)v87) >> 2;
              if (v90 <= v88 + 1)
                v90 = v88 + 1;
              if (v89 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v90;
              if (v91)
              {
                v92 = (char *)sub_40FC((uint64_t)(v10 + 99), v91);
                v12 = (uint64_t *)v10[98];
                v87 = (uint64_t *)v10[97];
              }
              else
              {
                v92 = 0;
              }
              v177 = (uint64_t *)&v92[8 * v88];
              *v177 = v11;
              v14 = v177 + 1;
              while (v12 != v87)
              {
                v178 = *--v12;
                *--v177 = v178;
              }
              v10[97] = v177;
              v10[98] = v14;
              v10[99] = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[98] = v14;
            break;
          case 1:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v17 = (uint64_t *)v15[101];
            v18 = v15[102];
            if ((unint64_t)v17 >= v18)
            {
              v93 = (uint64_t *)v15[100];
              v94 = v17 - v93;
              if ((unint64_t)(v94 + 1) >> 61)
                goto LABEL_288;
              v95 = v18 - (_QWORD)v93;
              v96 = (uint64_t)(v18 - (_QWORD)v93) >> 2;
              if (v96 <= v94 + 1)
                v96 = v94 + 1;
              if (v95 >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v96;
              if (v97)
              {
                v98 = (char *)sub_40FC((uint64_t)(v15 + 102), v97);
                v17 = (uint64_t *)v15[101];
                v93 = (uint64_t *)v15[100];
              }
              else
              {
                v98 = 0;
              }
              v179 = (uint64_t *)&v98[8 * v94];
              *v179 = v16;
              v19 = v179 + 1;
              while (v17 != v93)
              {
                v180 = *--v17;
                *--v179 = v180;
              }
              v15[100] = v179;
              v15[101] = v19;
              v15[102] = &v98[8 * v97];
              if (v93)
                operator delete(v93);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[101] = v19;
            break;
          case 2:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v22 = (uint64_t *)v20[104];
            v23 = v20[105];
            if ((unint64_t)v22 >= v23)
            {
              v99 = (uint64_t *)v20[103];
              v100 = v22 - v99;
              if ((unint64_t)(v100 + 1) >> 61)
                goto LABEL_288;
              v101 = v23 - (_QWORD)v99;
              v102 = (uint64_t)(v23 - (_QWORD)v99) >> 2;
              if (v102 <= v100 + 1)
                v102 = v100 + 1;
              if (v101 >= 0x7FFFFFFFFFFFFFF8)
                v103 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v103 = v102;
              if (v103)
              {
                v104 = (char *)sub_40FC((uint64_t)(v20 + 105), v103);
                v22 = (uint64_t *)v20[104];
                v99 = (uint64_t *)v20[103];
              }
              else
              {
                v104 = 0;
              }
              v181 = (uint64_t *)&v104[8 * v100];
              *v181 = v21;
              v24 = v181 + 1;
              while (v22 != v99)
              {
                v182 = *--v22;
                *--v181 = v182;
              }
              v20[103] = v181;
              v20[104] = v24;
              v20[105] = &v104[8 * v103];
              if (v99)
                operator delete(v99);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[104] = v24;
            break;
          case 3:
            v25 = *(_QWORD **)a1[2];
            v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            v27 = (unint64_t *)v25[107];
            v28 = v25[108];
            if ((unint64_t)v27 >= v28)
            {
              v105 = (unint64_t *)v25[106];
              v106 = v27 - v105;
              if ((unint64_t)(v106 + 1) >> 61)
                goto LABEL_288;
              v107 = v28 - (_QWORD)v105;
              v108 = (uint64_t)(v28 - (_QWORD)v105) >> 2;
              if (v108 <= v106 + 1)
                v108 = v106 + 1;
              if (v107 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v108;
              if (v109)
              {
                v110 = (char *)sub_40FC((uint64_t)(v25 + 108), v109);
                v27 = (unint64_t *)v25[107];
                v105 = (unint64_t *)v25[106];
              }
              else
              {
                v110 = 0;
              }
              v183 = (unint64_t *)&v110[8 * v106];
              *v183 = v26;
              v29 = v183 + 1;
              while (v27 != v105)
              {
                v184 = *--v27;
                *--v183 = v184;
              }
              v25[106] = v183;
              v25[107] = v29;
              v25[108] = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[107] = v29;
            break;
          case 4:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            v32 = (uint64_t *)v30[110];
            v33 = v30[111];
            if ((unint64_t)v32 >= v33)
            {
              v111 = (uint64_t *)v30[109];
              v112 = v32 - v111;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_288;
              v113 = v33 - (_QWORD)v111;
              v114 = (uint64_t)(v33 - (_QWORD)v111) >> 2;
              if (v114 <= v112 + 1)
                v114 = v112 + 1;
              if (v113 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                v116 = (char *)sub_40FC((uint64_t)(v30 + 111), v115);
                v32 = (uint64_t *)v30[110];
                v111 = (uint64_t *)v30[109];
              }
              else
              {
                v116 = 0;
              }
              v185 = (uint64_t *)&v116[8 * v112];
              *v185 = v31;
              v34 = v185 + 1;
              while (v32 != v111)
              {
                v186 = *--v32;
                *--v185 = v186;
              }
              v30[109] = v185;
              v30[110] = v34;
              v30[111] = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[110] = v34;
            break;
          case 5:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v37 = (uint64_t *)v35[113];
            v38 = v35[114];
            if ((unint64_t)v37 >= v38)
            {
              v117 = (uint64_t *)v35[112];
              v118 = v37 - v117;
              if ((unint64_t)(v118 + 1) >> 61)
                goto LABEL_288;
              v119 = v38 - (_QWORD)v117;
              v120 = (uint64_t)(v38 - (_QWORD)v117) >> 2;
              if (v120 <= v118 + 1)
                v120 = v118 + 1;
              if (v119 >= 0x7FFFFFFFFFFFFFF8)
                v121 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                v122 = (char *)sub_40FC((uint64_t)(v35 + 114), v121);
                v37 = (uint64_t *)v35[113];
                v117 = (uint64_t *)v35[112];
              }
              else
              {
                v122 = 0;
              }
              v187 = (uint64_t *)&v122[8 * v118];
              *v187 = v36;
              v39 = v187 + 1;
              while (v37 != v117)
              {
                v188 = *--v37;
                *--v187 = v188;
              }
              v35[112] = v187;
              v35[113] = v39;
              v35[114] = &v122[8 * v121];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[113] = v39;
            break;
          case 6:
            v40 = a1[2];
            v41 = *(_QWORD **)v40;
            v42 = *(unsigned __int16 *)(a1[3] + 62);
            v43 = *(char **)(*(_QWORD *)v40 + 928);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 936);
            if ((unint64_t)v43 >= v44)
            {
              v123 = (char *)v41[115];
              v124 = (v43 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61)
                goto LABEL_288;
              v125 = v44 - (_QWORD)v123;
              v126 = (uint64_t)(v44 - (_QWORD)v123) >> 2;
              if (v126 <= v124 + 1)
                v126 = v124 + 1;
              if (v125 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v126;
              if (v127)
              {
                v128 = (char *)sub_40FC((uint64_t)(v41 + 117), v127);
                v43 = (char *)v41[116];
                v123 = (char *)v41[115];
              }
              else
              {
                v128 = 0;
              }
              v189 = &v128[8 * v124];
              *(_QWORD *)v189 = v42;
              v45 = v189 + 8;
              while (v43 != v123)
              {
                v190 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v189 - 1) = v190;
                v189 -= 8;
              }
              v41[115] = v189;
              v41[116] = v45;
              v41[117] = &v128[8 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[116] = v45;
            break;
          case 7:
            v46 = *(_QWORD **)a1[2];
            v47 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            v48 = (uint64_t *)v46[119];
            v49 = v46[120];
            if ((unint64_t)v48 >= v49)
            {
              v129 = (uint64_t *)v46[118];
              v130 = v48 - v129;
              if ((unint64_t)(v130 + 1) >> 61)
                goto LABEL_288;
              v131 = v49 - (_QWORD)v129;
              v132 = (uint64_t)(v49 - (_QWORD)v129) >> 2;
              if (v132 <= v130 + 1)
                v132 = v130 + 1;
              if (v131 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v132;
              if (v133)
              {
                v134 = (char *)sub_40FC((uint64_t)(v46 + 120), v133);
                v48 = (uint64_t *)v46[119];
                v129 = (uint64_t *)v46[118];
              }
              else
              {
                v134 = 0;
              }
              v191 = (uint64_t *)&v134[8 * v130];
              *v191 = v47;
              v50 = v191 + 1;
              while (v48 != v129)
              {
                v192 = *--v48;
                *--v191 = v192;
              }
              v46[118] = v191;
              v46[119] = v50;
              v46[120] = &v134[8 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *v48 = v47;
              v50 = v48 + 1;
            }
            v46[119] = v50;
            break;
          case 8:
            v51 = *(_QWORD **)a1[2];
            v52 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v53 = (uint64_t *)v51[122];
            v54 = v51[123];
            if ((unint64_t)v53 >= v54)
            {
              v135 = (uint64_t *)v51[121];
              v136 = v53 - v135;
              if ((unint64_t)(v136 + 1) >> 61)
                goto LABEL_288;
              v137 = v54 - (_QWORD)v135;
              v138 = (uint64_t)(v54 - (_QWORD)v135) >> 2;
              if (v138 <= v136 + 1)
                v138 = v136 + 1;
              if (v137 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v138;
              if (v139)
              {
                v140 = (char *)sub_40FC((uint64_t)(v51 + 123), v139);
                v53 = (uint64_t *)v51[122];
                v135 = (uint64_t *)v51[121];
              }
              else
              {
                v140 = 0;
              }
              v193 = (uint64_t *)&v140[8 * v136];
              *v193 = v52;
              v55 = v193 + 1;
              while (v53 != v135)
              {
                v194 = *--v53;
                *--v193 = v194;
              }
              v51[121] = v193;
              v51[122] = v55;
              v51[123] = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *v53 = v52;
              v55 = v53 + 1;
            }
            v51[122] = v55;
            break;
          case 9:
            v56 = *(_QWORD **)a1[2];
            v57 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v58 = (uint64_t *)v56[125];
            v59 = v56[126];
            if ((unint64_t)v58 >= v59)
            {
              v141 = (uint64_t *)v56[124];
              v142 = v58 - v141;
              if ((unint64_t)(v142 + 1) >> 61)
                goto LABEL_288;
              v143 = v59 - (_QWORD)v141;
              v144 = (uint64_t)(v59 - (_QWORD)v141) >> 2;
              if (v144 <= v142 + 1)
                v144 = v142 + 1;
              if (v143 >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                v146 = (char *)sub_40FC((uint64_t)(v56 + 126), v145);
                v58 = (uint64_t *)v56[125];
                v141 = (uint64_t *)v56[124];
              }
              else
              {
                v146 = 0;
              }
              v195 = (uint64_t *)&v146[8 * v142];
              *v195 = v57;
              v60 = v195 + 1;
              while (v58 != v141)
              {
                v196 = *--v58;
                *--v195 = v196;
              }
              v56[124] = v195;
              v56[125] = v60;
              v56[126] = &v146[8 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *v58 = v57;
              v60 = v58 + 1;
            }
            v56[125] = v60;
            break;
          case 0xA:
            v61 = *(_QWORD **)a1[2];
            v62 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v63 = (uint64_t *)v61[128];
            v64 = v61[129];
            if ((unint64_t)v63 >= v64)
            {
              v147 = (uint64_t *)v61[127];
              v148 = v63 - v147;
              if ((unint64_t)(v148 + 1) >> 61)
                goto LABEL_288;
              v149 = v64 - (_QWORD)v147;
              v150 = (uint64_t)(v64 - (_QWORD)v147) >> 2;
              if (v150 <= v148 + 1)
                v150 = v148 + 1;
              if (v149 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_40FC((uint64_t)(v61 + 129), v151);
                v63 = (uint64_t *)v61[128];
                v147 = (uint64_t *)v61[127];
              }
              else
              {
                v152 = 0;
              }
              v197 = (uint64_t *)&v152[8 * v148];
              *v197 = v62;
              v65 = v197 + 1;
              while (v63 != v147)
              {
                v198 = *--v63;
                *--v197 = v198;
              }
              v61[127] = v197;
              v61[128] = v65;
              v61[129] = &v152[8 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *v63 = v62;
              v65 = v63 + 1;
            }
            v61[128] = v65;
            break;
          case 0xB:
            v66 = *(_QWORD **)a1[2];
            v67 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            v68 = (uint64_t *)v66[131];
            v69 = v66[132];
            if ((unint64_t)v68 >= v69)
            {
              v153 = (uint64_t *)v66[130];
              v154 = v68 - v153;
              if ((unint64_t)(v154 + 1) >> 61)
                goto LABEL_288;
              v155 = v69 - (_QWORD)v153;
              v156 = (uint64_t)(v69 - (_QWORD)v153) >> 2;
              if (v156 <= v154 + 1)
                v156 = v154 + 1;
              if (v155 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v156;
              if (v157)
              {
                v158 = (char *)sub_40FC((uint64_t)(v66 + 132), v157);
                v68 = (uint64_t *)v66[131];
                v153 = (uint64_t *)v66[130];
              }
              else
              {
                v158 = 0;
              }
              v199 = (uint64_t *)&v158[8 * v154];
              *v199 = v67;
              v70 = v199 + 1;
              while (v68 != v153)
              {
                v200 = *--v68;
                *--v199 = v200;
              }
              v66[130] = v199;
              v66[131] = v70;
              v66[132] = &v158[8 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *v68 = v67;
              v70 = v68 + 1;
            }
            v66[131] = v70;
            break;
          case 0xC:
            v71 = *(_QWORD **)a1[2];
            v72 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            v73 = (uint64_t *)v71[134];
            v74 = v71[135];
            if ((unint64_t)v73 >= v74)
            {
              v159 = (uint64_t *)v71[133];
              v160 = v73 - v159;
              if ((unint64_t)(v160 + 1) >> 61)
                goto LABEL_288;
              v161 = v74 - (_QWORD)v159;
              v162 = (uint64_t)(v74 - (_QWORD)v159) >> 2;
              if (v162 <= v160 + 1)
                v162 = v160 + 1;
              if (v161 >= 0x7FFFFFFFFFFFFFF8)
                v163 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v163 = v162;
              if (v163)
              {
                v164 = (char *)sub_40FC((uint64_t)(v71 + 135), v163);
                v73 = (uint64_t *)v71[134];
                v159 = (uint64_t *)v71[133];
              }
              else
              {
                v164 = 0;
              }
              v201 = (uint64_t *)&v164[8 * v160];
              *v201 = v72;
              v75 = v201 + 1;
              while (v73 != v159)
              {
                v202 = *--v73;
                *--v201 = v202;
              }
              v71[133] = v201;
              v71[134] = v75;
              v71[135] = &v164[8 * v163];
              if (v159)
                operator delete(v159);
            }
            else
            {
              *v73 = v72;
              v75 = v73 + 1;
            }
            v71[134] = v75;
            break;
          case 0xD:
            v76 = a1[2];
            v77 = *(_QWORD **)v76;
            v78 = *(unsigned __int16 *)(a1[3] + 60);
            v79 = *(char **)(*(_QWORD *)v76 + 1096);
            v80 = *(_QWORD *)(*(_QWORD *)v76 + 1104);
            if ((unint64_t)v79 >= v80)
            {
              v165 = (char *)v77[136];
              v166 = (v79 - v165) >> 3;
              if ((unint64_t)(v166 + 1) >> 61)
                goto LABEL_288;
              v167 = v80 - (_QWORD)v165;
              v168 = (uint64_t)(v80 - (_QWORD)v165) >> 2;
              if (v168 <= v166 + 1)
                v168 = v166 + 1;
              if (v167 >= 0x7FFFFFFFFFFFFFF8)
                v169 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v169 = v168;
              if (v169)
              {
                v170 = (char *)sub_40FC((uint64_t)(v77 + 138), v169);
                v79 = (char *)v77[137];
                v165 = (char *)v77[136];
              }
              else
              {
                v170 = 0;
              }
              v203 = &v170[8 * v166];
              *(_QWORD *)v203 = v78;
              v81 = v203 + 8;
              while (v79 != v165)
              {
                v204 = *((_QWORD *)v79 - 1);
                v79 -= 8;
                *((_QWORD *)v203 - 1) = v204;
                v203 -= 8;
              }
              v77[136] = v203;
              v77[137] = v81;
              v77[138] = &v170[8 * v169];
              if (v165)
                operator delete(v165);
            }
            else
            {
              *(_QWORD *)v79 = v78;
              v81 = v79 + 8;
            }
            v77[137] = v81;
            break;
          case 0xE:
            v82 = *(_QWORD **)a1[2];
            v83 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            v84 = (uint64_t *)v82[140];
            v85 = v82[141];
            if ((unint64_t)v84 >= v85)
            {
              v171 = (uint64_t *)v82[139];
              v172 = v84 - v171;
              if ((unint64_t)(v172 + 1) >> 61)
LABEL_288:
                sub_4074();
              v173 = v85 - (_QWORD)v171;
              v174 = (uint64_t)(v85 - (_QWORD)v171) >> 2;
              if (v174 <= v172 + 1)
                v174 = v172 + 1;
              if (v173 >= 0x7FFFFFFFFFFFFFF8)
                v175 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v175 = v174;
              if (v175)
              {
                v176 = (char *)sub_40FC((uint64_t)(v82 + 141), v175);
                v84 = (uint64_t *)v82[140];
                v171 = (uint64_t *)v82[139];
              }
              else
              {
                v176 = 0;
              }
              v205 = (uint64_t *)&v176[8 * v172];
              *v205 = v83;
              v86 = v205 + 1;
              while (v84 != v171)
              {
                v206 = *--v84;
                *--v205 = v206;
              }
              v82[139] = v205;
              v82[140] = v86;
              v82[141] = &v176[8 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *v84 = v83;
              v86 = v84 + 1;
            }
            v82[140] = v86;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_15FDE8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int *v62;
  int **v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  _QWORD *v68;

  v4 = *a1;
  if (*a2 == 1)
  {
    v63 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v62 = *v63;
    v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      v65 = v64 >> 2;
      if (v65 <= 1)
        v65 = 1;
      do
      {
        v66 = *v62++;
        switch(v66)
        {
          case 225:
            v67 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 6184);
            goto LABEL_86;
          case 226:
            v67 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 6208);
            goto LABEL_86;
          case 227:
            v67 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 6232);
            goto LABEL_86;
          case 228:
            v67 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 6256);
LABEL_86:
            *(_QWORD *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xE1:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            v12 = (uint64_t *)v10[773];
            v13 = v10[774];
            if ((unint64_t)v12 >= v13)
            {
              v30 = (uint64_t *)v10[772];
              v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_90;
              v32 = v13 - (_QWORD)v30;
              v33 = (uint64_t)(v13 - (_QWORD)v30) >> 2;
              if (v33 <= v31 + 1)
                v33 = v31 + 1;
              if (v32 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v33;
              if (v34)
              {
                v35 = (char *)sub_40FC((uint64_t)(v10 + 774), v34);
                v12 = (uint64_t *)v10[773];
                v30 = (uint64_t *)v10[772];
              }
              else
              {
                v35 = 0;
              }
              v54 = (uint64_t *)&v35[8 * v31];
              *v54 = v11;
              v14 = v54 + 1;
              while (v12 != v30)
              {
                v55 = *--v12;
                *--v54 = v55;
              }
              v10[772] = v54;
              v10[773] = v14;
              v10[774] = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[773] = v14;
            break;
          case 0xE2:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[776];
            v18 = v15[777];
            if ((unint64_t)v17 >= v18)
            {
              v36 = (uint64_t *)v15[775];
              v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61)
                goto LABEL_90;
              v38 = v18 - (_QWORD)v36;
              v39 = (uint64_t)(v18 - (_QWORD)v36) >> 2;
              if (v39 <= v37 + 1)
                v39 = v37 + 1;
              if (v38 >= 0x7FFFFFFFFFFFFFF8)
                v40 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v40 = v39;
              if (v40)
              {
                v41 = (char *)sub_40FC((uint64_t)(v15 + 777), v40);
                v17 = (uint64_t *)v15[776];
                v36 = (uint64_t *)v15[775];
              }
              else
              {
                v41 = 0;
              }
              v56 = (uint64_t *)&v41[8 * v37];
              *v56 = v16;
              v19 = v56 + 1;
              while (v17 != v36)
              {
                v57 = *--v17;
                *--v56 = v57;
              }
              v15[775] = v56;
              v15[776] = v19;
              v15[777] = &v41[8 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[776] = v19;
            break;
          case 0xE3:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            v22 = (uint64_t *)v20[779];
            v23 = v20[780];
            if ((unint64_t)v22 >= v23)
            {
              v42 = (uint64_t *)v20[778];
              v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61)
                goto LABEL_90;
              v44 = v23 - (_QWORD)v42;
              v45 = (uint64_t)(v23 - (_QWORD)v42) >> 2;
              if (v45 <= v43 + 1)
                v45 = v43 + 1;
              if (v44 >= 0x7FFFFFFFFFFFFFF8)
                v46 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v46 = v45;
              if (v46)
              {
                v47 = (char *)sub_40FC((uint64_t)(v20 + 780), v46);
                v22 = (uint64_t *)v20[779];
                v42 = (uint64_t *)v20[778];
              }
              else
              {
                v47 = 0;
              }
              v58 = (uint64_t *)&v47[8 * v43];
              *v58 = v21;
              v24 = v58 + 1;
              while (v22 != v42)
              {
                v59 = *--v22;
                *--v58 = v59;
              }
              v20[778] = v58;
              v20[779] = v24;
              v20[780] = &v47[8 * v46];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[779] = v24;
            break;
          case 0xE4:
            v25 = *(_QWORD **)a1[2];
            v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            v27 = (unint64_t *)v25[782];
            v28 = v25[783];
            if ((unint64_t)v27 >= v28)
            {
              v48 = (unint64_t *)v25[781];
              v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61)
LABEL_90:
                sub_4074();
              v50 = v28 - (_QWORD)v48;
              v51 = (uint64_t)(v28 - (_QWORD)v48) >> 2;
              if (v51 <= v49 + 1)
                v51 = v49 + 1;
              if (v50 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              if (v52)
              {
                v53 = (char *)sub_40FC((uint64_t)(v25 + 783), v52);
                v27 = (unint64_t *)v25[782];
                v48 = (unint64_t *)v25[781];
              }
              else
              {
                v53 = 0;
              }
              v60 = (unint64_t *)&v53[8 * v49];
              *v60 = v26;
              v29 = v60 + 1;
              while (v27 != v48)
              {
                v61 = *--v27;
                *--v60 = v61;
              }
              v25[781] = v60;
              v25[782] = v29;
              v25[783] = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[782] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1602C0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  uint64_t *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  int *v270;
  int **v271;
  uint64_t v272;
  unint64_t v273;
  int v274;
  int v275;
  _QWORD *v276;

  v4 = *a1;
  if (*a2 == 1)
  {
    v271 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v270 = *v271;
    v272 = (char *)v271[1] - (char *)*v271;
    if (v272)
    {
      v273 = v272 >> 2;
      if (v273 <= 1)
        v273 = 1;
      do
      {
        v274 = *v270++;
        switch(v274)
        {
          case 186:
            v275 = *(_DWORD *)(a1[3] + 48);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5248);
            goto LABEL_374;
          case 187:
            v275 = *(_DWORD *)(a1[3] + 88);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5272);
            goto LABEL_374;
          case 188:
            v275 = *(_DWORD *)(a1[3] + 24) >> 1;
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5296);
            goto LABEL_374;
          case 189:
            v275 = *(_DWORD *)(a1[3] + 64);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5320);
            goto LABEL_374;
          case 190:
            v275 = *(_DWORD *)(a1[3] + 32);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5344);
            goto LABEL_374;
          case 191:
            v275 = *(_DWORD *)(a1[3] + 72);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5368);
            goto LABEL_374;
          case 192:
            v275 = *(_DWORD *)(a1[3] + 44);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5392);
            goto LABEL_374;
          case 193:
            v275 = *(_DWORD *)(a1[3] + 84);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5416);
            goto LABEL_374;
          case 194:
            v275 = *(_DWORD *)(a1[3] + 40);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5440);
            goto LABEL_374;
          case 195:
            v275 = *(_DWORD *)(a1[3] + 80);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5464);
            goto LABEL_374;
          case 196:
            v275 = *(_DWORD *)(a1[3] + 56);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5488);
            goto LABEL_374;
          case 197:
            v275 = *(_DWORD *)(a1[3] + 96);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5512);
            goto LABEL_374;
          case 198:
            v275 = *(_DWORD *)(a1[3] + 60);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5536);
            goto LABEL_374;
          case 199:
            v275 = *(_DWORD *)(a1[3] + 52);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5560);
            goto LABEL_374;
          case 200:
            v275 = *(_DWORD *)(a1[3] + 92);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5584);
            goto LABEL_374;
          case 201:
            v275 = *(_DWORD *)(a1[3] + 28);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5608);
            goto LABEL_374;
          case 202:
            v275 = *(_DWORD *)(a1[3] + 68);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5632);
            goto LABEL_374;
          case 203:
            v275 = *(_DWORD *)(a1[3] + 36);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5656);
            goto LABEL_374;
          case 204:
            v275 = *(_DWORD *)(a1[3] + 76);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5680);
            goto LABEL_374;
          case 205:
            v275 = *(_DWORD *)(a1[3] + 100);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5704);
LABEL_374:
            *(_QWORD *)(*v276 - 8) += v275 & 0x7FFFF;
            break;
          default:
            break;
        }
        --v273;
      }
      while (v273);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xBA:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            v12 = (uint64_t *)v10[656];
            v13 = v10[657];
            if ((unint64_t)v12 >= v13)
            {
              v110 = (uint64_t *)v10[655];
              v111 = v12 - v110;
              if ((unint64_t)(v111 + 1) >> 61)
                goto LABEL_378;
              v112 = v13 - (_QWORD)v110;
              v113 = (uint64_t)(v13 - (_QWORD)v110) >> 2;
              if (v113 <= v111 + 1)
                v113 = v111 + 1;
              if (v112 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v113;
              if (v114)
              {
                v115 = (char *)sub_40FC((uint64_t)(v10 + 657), v114);
                v12 = (uint64_t *)v10[656];
                v110 = (uint64_t *)v10[655];
              }
              else
              {
                v115 = 0;
              }
              v230 = (uint64_t *)&v115[8 * v111];
              *v230 = v11;
              v14 = v230 + 1;
              while (v12 != v110)
              {
                v231 = *--v12;
                *--v230 = v231;
              }
              v10[655] = v230;
              v10[656] = v14;
              v10[657] = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[656] = v14;
            break;
          case 0xBB:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 88) & 0x7FFFFLL;
            v17 = (uint64_t *)v15[659];
            v18 = v15[660];
            if ((unint64_t)v17 >= v18)
            {
              v116 = (uint64_t *)v15[658];
              v117 = v17 - v116;
              if ((unint64_t)(v117 + 1) >> 61)
                goto LABEL_378;
              v118 = v18 - (_QWORD)v116;
              v119 = (uint64_t)(v18 - (_QWORD)v116) >> 2;
              if (v119 <= v117 + 1)
                v119 = v117 + 1;
              if (v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
              {
                v121 = (char *)sub_40FC((uint64_t)(v15 + 660), v120);
                v17 = (uint64_t *)v15[659];
                v116 = (uint64_t *)v15[658];
              }
              else
              {
                v121 = 0;
              }
              v232 = (uint64_t *)&v121[8 * v117];
              *v232 = v16;
              v19 = v232 + 1;
              while (v17 != v116)
              {
                v233 = *--v17;
                *--v232 = v233;
              }
              v15[658] = v232;
              v15[659] = v19;
              v15[660] = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[659] = v19;
            break;
          case 0xBC:
            v20 = *(_QWORD **)a1[2];
            v21 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            v22 = (unint64_t *)v20[662];
            v23 = v20[663];
            if ((unint64_t)v22 >= v23)
            {
              v122 = (unint64_t *)v20[661];
              v123 = v22 - v122;
              if ((unint64_t)(v123 + 1) >> 61)
                goto LABEL_378;
              v124 = v23 - (_QWORD)v122;
              v125 = (uint64_t)(v23 - (_QWORD)v122) >> 2;
              if (v125 <= v123 + 1)
                v125 = v123 + 1;
              if (v124 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v125;
              if (v126)
              {
                v127 = (char *)sub_40FC((uint64_t)(v20 + 663), v126);
                v22 = (unint64_t *)v20[662];
                v122 = (unint64_t *)v20[661];
              }
              else
              {
                v127 = 0;
              }
              v234 = (unint64_t *)&v127[8 * v123];
              *v234 = v21;
              v24 = v234 + 1;
              while (v22 != v122)
              {
                v235 = *--v22;
                *--v234 = v235;
              }
              v20[661] = v234;
              v20[662] = v24;
              v20[663] = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[662] = v24;
            break;
          case 0xBD:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            v27 = (uint64_t *)v25[665];
            v28 = v25[666];
            if ((unint64_t)v27 >= v28)
            {
              v128 = (uint64_t *)v25[664];
              v129 = v27 - v128;
              if ((unint64_t)(v129 + 1) >> 61)
                goto LABEL_378;
              v130 = v28 - (_QWORD)v128;
              v131 = (uint64_t)(v28 - (_QWORD)v128) >> 2;
              if (v131 <= v129 + 1)
                v131 = v129 + 1;
              if (v130 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v131;
              if (v132)
              {
                v133 = (char *)sub_40FC((uint64_t)(v25 + 666), v132);
                v27 = (uint64_t *)v25[665];
                v128 = (uint64_t *)v25[664];
              }
              else
              {
                v133 = 0;
              }
              v236 = (uint64_t *)&v133[8 * v129];
              *v236 = v26;
              v29 = v236 + 1;
              while (v27 != v128)
              {
                v237 = *--v27;
                *--v236 = v237;
              }
              v25[664] = v236;
              v25[665] = v29;
              v25[666] = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[665] = v29;
            break;
          case 0xBE:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            v32 = (uint64_t *)v30[668];
            v33 = v30[669];
            if ((unint64_t)v32 >= v33)
            {
              v134 = (uint64_t *)v30[667];
              v135 = v32 - v134;
              if ((unint64_t)(v135 + 1) >> 61)
                goto LABEL_378;
              v136 = v33 - (_QWORD)v134;
              v137 = (uint64_t)(v33 - (_QWORD)v134) >> 2;
              if (v137 <= v135 + 1)
                v137 = v135 + 1;
              if (v136 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v137;
              if (v138)
              {
                v139 = (char *)sub_40FC((uint64_t)(v30 + 669), v138);
                v32 = (uint64_t *)v30[668];
                v134 = (uint64_t *)v30[667];
              }
              else
              {
                v139 = 0;
              }
              v238 = (uint64_t *)&v139[8 * v135];
              *v238 = v31;
              v34 = v238 + 1;
              while (v32 != v134)
              {
                v239 = *--v32;
                *--v238 = v239;
              }
              v30[667] = v238;
              v30[668] = v34;
              v30[669] = &v139[8 * v138];
              if (v134)
                operator delete(v134);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[668] = v34;
            break;
          case 0xBF:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            v37 = (uint64_t *)v35[671];
            v38 = v35[672];
            if ((unint64_t)v37 >= v38)
            {
              v140 = (uint64_t *)v35[670];
              v141 = v37 - v140;
              if ((unint64_t)(v141 + 1) >> 61)
                goto LABEL_378;
              v142 = v38 - (_QWORD)v140;
              v143 = (uint64_t)(v38 - (_QWORD)v140) >> 2;
              if (v143 <= v141 + 1)
                v143 = v141 + 1;
              if (v142 >= 0x7FFFFFFFFFFFFFF8)
                v144 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v144 = v143;
              if (v144)
              {
                v145 = (char *)sub_40FC((uint64_t)(v35 + 672), v144);
                v37 = (uint64_t *)v35[671];
                v140 = (uint64_t *)v35[670];
              }
              else
              {
                v145 = 0;
              }
              v240 = (uint64_t *)&v145[8 * v141];
              *v240 = v36;
              v39 = v240 + 1;
              while (v37 != v140)
              {
                v241 = *--v37;
                *--v240 = v241;
              }
              v35[670] = v240;
              v35[671] = v39;
              v35[672] = &v145[8 * v144];
              if (v140)
                operator delete(v140);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[671] = v39;
            break;
          case 0xC0:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            v42 = (uint64_t *)v40[674];
            v43 = v40[675];
            if ((unint64_t)v42 >= v43)
            {
              v146 = (uint64_t *)v40[673];
              v147 = v42 - v146;
              if ((unint64_t)(v147 + 1) >> 61)
                goto LABEL_378;
              v148 = v43 - (_QWORD)v146;
              v149 = (uint64_t)(v43 - (_QWORD)v146) >> 2;
              if (v149 <= v147 + 1)
                v149 = v147 + 1;
              if (v148 >= 0x7FFFFFFFFFFFFFF8)
                v150 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v150 = v149;
              if (v150)
              {
                v151 = (char *)sub_40FC((uint64_t)(v40 + 675), v150);
                v42 = (uint64_t *)v40[674];
                v146 = (uint64_t *)v40[673];
              }
              else
              {
                v151 = 0;
              }
              v242 = (uint64_t *)&v151[8 * v147];
              *v242 = v41;
              v44 = v242 + 1;
              while (v42 != v146)
              {
                v243 = *--v42;
                *--v242 = v243;
              }
              v40[673] = v242;
              v40[674] = v44;
              v40[675] = &v151[8 * v150];
              if (v146)
                operator delete(v146);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[674] = v44;
            break;
          case 0xC1:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_DWORD *)(a1[3] + 84) & 0x7FFFFLL;
            v47 = (uint64_t *)v45[677];
            v48 = v45[678];
            if ((unint64_t)v47 >= v48)
            {
              v152 = (uint64_t *)v45[676];
              v153 = v47 - v152;
              if ((unint64_t)(v153 + 1) >> 61)
                goto LABEL_378;
              v154 = v48 - (_QWORD)v152;
              v155 = (uint64_t)(v48 - (_QWORD)v152) >> 2;
              if (v155 <= v153 + 1)
                v155 = v153 + 1;
              if (v154 >= 0x7FFFFFFFFFFFFFF8)
                v156 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v156 = v155;
              if (v156)
              {
                v157 = (char *)sub_40FC((uint64_t)(v45 + 678), v156);
                v47 = (uint64_t *)v45[677];
                v152 = (uint64_t *)v45[676];
              }
              else
              {
                v157 = 0;
              }
              v244 = (uint64_t *)&v157[8 * v153];
              *v244 = v46;
              v49 = v244 + 1;
              while (v47 != v152)
              {
                v245 = *--v47;
                *--v244 = v245;
              }
              v45[676] = v244;
              v45[677] = v49;
              v45[678] = &v157[8 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *v47 = v46;
              v49 = v47 + 1;
            }
            v45[677] = v49;
            break;
          case 0xC2:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            v52 = (uint64_t *)v50[680];
            v53 = v50[681];
            if ((unint64_t)v52 >= v53)
            {
              v158 = (uint64_t *)v50[679];
              v159 = v52 - v158;
              if ((unint64_t)(v159 + 1) >> 61)
                goto LABEL_378;
              v160 = v53 - (_QWORD)v158;
              v161 = (uint64_t)(v53 - (_QWORD)v158) >> 2;
              if (v161 <= v159 + 1)
                v161 = v159 + 1;
              if (v160 >= 0x7FFFFFFFFFFFFFF8)
                v162 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v162 = v161;
              if (v162)
              {
                v163 = (char *)sub_40FC((uint64_t)(v50 + 681), v162);
                v52 = (uint64_t *)v50[680];
                v158 = (uint64_t *)v50[679];
              }
              else
              {
                v163 = 0;
              }
              v246 = (uint64_t *)&v163[8 * v159];
              *v246 = v51;
              v54 = v246 + 1;
              while (v52 != v158)
              {
                v247 = *--v52;
                *--v246 = v247;
              }
              v50[679] = v246;
              v50[680] = v54;
              v50[681] = &v163[8 * v162];
              if (v158)
                operator delete(v158);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[680] = v54;
            break;
          case 0xC3:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            v57 = (uint64_t *)v55[683];
            v58 = v55[684];
            if ((unint64_t)v57 >= v58)
            {
              v164 = (uint64_t *)v55[682];
              v165 = v57 - v164;
              if ((unint64_t)(v165 + 1) >> 61)
                goto LABEL_378;
              v166 = v58 - (_QWORD)v164;
              v167 = (uint64_t)(v58 - (_QWORD)v164) >> 2;
              if (v167 <= v165 + 1)
                v167 = v165 + 1;
              if (v166 >= 0x7FFFFFFFFFFFFFF8)
                v168 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v168 = v167;
              if (v168)
              {
                v169 = (char *)sub_40FC((uint64_t)(v55 + 684), v168);
                v57 = (uint64_t *)v55[683];
                v164 = (uint64_t *)v55[682];
              }
              else
              {
                v169 = 0;
              }
              v248 = (uint64_t *)&v169[8 * v165];
              *v248 = v56;
              v59 = v248 + 1;
              while (v57 != v164)
              {
                v249 = *--v57;
                *--v248 = v249;
              }
              v55[682] = v248;
              v55[683] = v59;
              v55[684] = &v169[8 * v168];
              if (v164)
                operator delete(v164);
            }
            else
            {
              *v57 = v56;
              v59 = v57 + 1;
            }
            v55[683] = v59;
            break;
          case 0xC4:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            v62 = (uint64_t *)v60[686];
            v63 = v60[687];
            if ((unint64_t)v62 >= v63)
            {
              v170 = (uint64_t *)v60[685];
              v171 = v62 - v170;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_378;
              v172 = v63 - (_QWORD)v170;
              v173 = (uint64_t)(v63 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v60 + 687), v174);
                v62 = (uint64_t *)v60[686];
                v170 = (uint64_t *)v60[685];
              }
              else
              {
                v175 = 0;
              }
              v250 = (uint64_t *)&v175[8 * v171];
              *v250 = v61;
              v64 = v250 + 1;
              while (v62 != v170)
              {
                v251 = *--v62;
                *--v250 = v251;
              }
              v60[685] = v250;
              v60[686] = v64;
              v60[687] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *v62 = v61;
              v64 = v62 + 1;
            }
            v60[686] = v64;
            break;
          case 0xC5:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_DWORD *)(a1[3] + 96) & 0x7FFFFLL;
            v67 = (uint64_t *)v65[689];
            v68 = v65[690];
            if ((unint64_t)v67 >= v68)
            {
              v176 = (uint64_t *)v65[688];
              v177 = v67 - v176;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_378;
              v178 = v68 - (_QWORD)v176;
              v179 = (uint64_t)(v68 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v65 + 690), v180);
                v67 = (uint64_t *)v65[689];
                v176 = (uint64_t *)v65[688];
              }
              else
              {
                v181 = 0;
              }
              v252 = (uint64_t *)&v181[8 * v177];
              *v252 = v66;
              v69 = v252 + 1;
              while (v67 != v176)
              {
                v253 = *--v67;
                *--v252 = v253;
              }
              v65[688] = v252;
              v65[689] = v69;
              v65[690] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *v67 = v66;
              v69 = v67 + 1;
            }
            v65[689] = v69;
            break;
          case 0xC6:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            v72 = (uint64_t *)v70[692];
            v73 = v70[693];
            if ((unint64_t)v72 >= v73)
            {
              v182 = (uint64_t *)v70[691];
              v183 = v72 - v182;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_378;
              v184 = v73 - (_QWORD)v182;
              v185 = (uint64_t)(v73 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v70 + 693), v186);
                v72 = (uint64_t *)v70[692];
                v182 = (uint64_t *)v70[691];
              }
              else
              {
                v187 = 0;
              }
              v254 = (uint64_t *)&v187[8 * v183];
              *v254 = v71;
              v74 = v254 + 1;
              while (v72 != v182)
              {
                v255 = *--v72;
                *--v254 = v255;
              }
              v70[691] = v254;
              v70[692] = v74;
              v70[693] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[692] = v74;
            break;
          case 0xC7:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            v77 = (uint64_t *)v75[695];
            v78 = v75[696];
            if ((unint64_t)v77 >= v78)
            {
              v188 = (uint64_t *)v75[694];
              v189 = v77 - v188;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_378;
              v190 = v78 - (_QWORD)v188;
              v191 = (uint64_t)(v78 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v75 + 696), v192);
                v77 = (uint64_t *)v75[695];
                v188 = (uint64_t *)v75[694];
              }
              else
              {
                v193 = 0;
              }
              v256 = (uint64_t *)&v193[8 * v189];
              *v256 = v76;
              v79 = v256 + 1;
              while (v77 != v188)
              {
                v257 = *--v77;
                *--v256 = v257;
              }
              v75[694] = v256;
              v75[695] = v79;
              v75[696] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[695] = v79;
            break;
          case 0xC8:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_DWORD *)(a1[3] + 92) & 0x7FFFFLL;
            v82 = (uint64_t *)v80[698];
            v83 = v80[699];
            if ((unint64_t)v82 >= v83)
            {
              v194 = (uint64_t *)v80[697];
              v195 = v82 - v194;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_378;
              v196 = v83 - (_QWORD)v194;
              v197 = (uint64_t)(v83 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v80 + 699), v198);
                v82 = (uint64_t *)v80[698];
                v194 = (uint64_t *)v80[697];
              }
              else
              {
                v199 = 0;
              }
              v258 = (uint64_t *)&v199[8 * v195];
              *v258 = v81;
              v84 = v258 + 1;
              while (v82 != v194)
              {
                v259 = *--v82;
                *--v258 = v259;
              }
              v80[697] = v258;
              v80[698] = v84;
              v80[699] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *v82 = v81;
              v84 = v82 + 1;
            }
            v80[698] = v84;
            break;
          case 0xC9:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            v87 = (uint64_t *)v85[701];
            v88 = v85[702];
            if ((unint64_t)v87 >= v88)
            {
              v200 = (uint64_t *)v85[700];
              v201 = v87 - v200;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_378;
              v202 = v88 - (_QWORD)v200;
              v203 = (uint64_t)(v88 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v85 + 702), v204);
                v87 = (uint64_t *)v85[701];
                v200 = (uint64_t *)v85[700];
              }
              else
              {
                v205 = 0;
              }
              v260 = (uint64_t *)&v205[8 * v201];
              *v260 = v86;
              v89 = v260 + 1;
              while (v87 != v200)
              {
                v261 = *--v87;
                *--v260 = v261;
              }
              v85[700] = v260;
              v85[701] = v89;
              v85[702] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *v87 = v86;
              v89 = v87 + 1;
            }
            v85[701] = v89;
            break;
          case 0xCA:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            v92 = (uint64_t *)v90[704];
            v93 = v90[705];
            if ((unint64_t)v92 >= v93)
            {
              v206 = (uint64_t *)v90[703];
              v207 = v92 - v206;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_378;
              v208 = v93 - (_QWORD)v206;
              v209 = (uint64_t)(v93 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v90 + 705), v210);
                v92 = (uint64_t *)v90[704];
                v206 = (uint64_t *)v90[703];
              }
              else
              {
                v211 = 0;
              }
              v262 = (uint64_t *)&v211[8 * v207];
              *v262 = v91;
              v94 = v262 + 1;
              while (v92 != v206)
              {
                v263 = *--v92;
                *--v262 = v263;
              }
              v90[703] = v262;
              v90[704] = v94;
              v90[705] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *v92 = v91;
              v94 = v92 + 1;
            }
            v90[704] = v94;
            break;
          case 0xCB:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            v97 = (uint64_t *)v95[707];
            v98 = v95[708];
            if ((unint64_t)v97 >= v98)
            {
              v212 = (uint64_t *)v95[706];
              v213 = v97 - v212;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_378;
              v214 = v98 - (_QWORD)v212;
              v215 = (uint64_t)(v98 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v95 + 708), v216);
                v97 = (uint64_t *)v95[707];
                v212 = (uint64_t *)v95[706];
              }
              else
              {
                v217 = 0;
              }
              v264 = (uint64_t *)&v217[8 * v213];
              *v264 = v96;
              v99 = v264 + 1;
              while (v97 != v212)
              {
                v265 = *--v97;
                *--v264 = v265;
              }
              v95[706] = v264;
              v95[707] = v99;
              v95[708] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *v97 = v96;
              v99 = v97 + 1;
            }
            v95[707] = v99;
            break;
          case 0xCC:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            v102 = (uint64_t *)v100[710];
            v103 = v100[711];
            if ((unint64_t)v102 >= v103)
            {
              v218 = (uint64_t *)v100[709];
              v219 = v102 - v218;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_378;
              v220 = v103 - (_QWORD)v218;
              v221 = (uint64_t)(v103 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v100 + 711), v222);
                v102 = (uint64_t *)v100[710];
                v218 = (uint64_t *)v100[709];
              }
              else
              {
                v223 = 0;
              }
              v266 = (uint64_t *)&v223[8 * v219];
              *v266 = v101;
              v104 = v266 + 1;
              while (v102 != v218)
              {
                v267 = *--v102;
                *--v266 = v267;
              }
              v100[709] = v266;
              v100[710] = v104;
              v100[711] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *v102 = v101;
              v104 = v102 + 1;
            }
            v100[710] = v104;
            break;
          case 0xCD:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_DWORD *)(a1[3] + 100) & 0x7FFFFLL;
            v107 = (uint64_t *)v105[713];
            v108 = v105[714];
            if ((unint64_t)v107 >= v108)
            {
              v224 = (uint64_t *)v105[712];
              v225 = v107 - v224;
              if ((unint64_t)(v225 + 1) >> 61)
LABEL_378:
                sub_4074();
              v226 = v108 - (_QWORD)v224;
              v227 = (uint64_t)(v108 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v105 + 714), v228);
                v107 = (uint64_t *)v105[713];
                v224 = (uint64_t *)v105[712];
              }
              else
              {
                v229 = 0;
              }
              v268 = (uint64_t *)&v229[8 * v225];
              *v268 = v106;
              v109 = v268 + 1;
              while (v107 != v224)
              {
                v269 = *--v107;
                *--v268 = v269;
              }
              v105[712] = v268;
              v105[713] = v109;
              v105[714] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *v107 = v106;
              v109 = v107 + 1;
            }
            v105[713] = v109;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1615D0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  int *v257;
  int **v258;
  uint64_t v259;
  unint64_t v260;
  int v261;
  uint64_t v262;
  _QWORD *v263;

  v4 = *a1;
  if (*a2 == 1)
  {
    v258 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v257 = *v258;
    v259 = (char *)v258[1] - (char *)*v258;
    if (v259)
    {
      v260 = v259 >> 2;
      if (v260 <= 1)
        v260 = 1;
      do
      {
        v261 = *v257++;
        switch(v261)
        {
          case 206:
            v262 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5728);
            goto LABEL_356;
          case 207:
            v262 = *(_DWORD *)(a1[3] + 68) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5752);
            goto LABEL_356;
          case 208:
            v262 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5776);
            goto LABEL_356;
          case 209:
            v262 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5800);
            goto LABEL_356;
          case 210:
            v262 = *(_DWORD *)(a1[3] + 44) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5824);
            goto LABEL_356;
          case 211:
            v262 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5848);
            goto LABEL_356;
          case 212:
            v262 = *(_DWORD *)(a1[3] + 52) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5872);
            goto LABEL_356;
          case 213:
            v262 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5896);
            goto LABEL_356;
          case 214:
            v262 = *(_DWORD *)(a1[3] + 64) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5920);
            goto LABEL_356;
          case 215:
            v262 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5944);
            goto LABEL_356;
          case 216:
            v262 = *(_DWORD *)(a1[3] + 60) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5968);
            goto LABEL_356;
          case 217:
            v262 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5992);
            goto LABEL_356;
          case 218:
            v262 = *(_DWORD *)(a1[3] + 76) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 6016);
            goto LABEL_356;
          case 219:
            v262 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 6040);
            goto LABEL_356;
          case 220:
            v262 = *(_DWORD *)(a1[3] + 72) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 6064);
            goto LABEL_356;
          case 221:
            v262 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 6088);
            goto LABEL_356;
          case 222:
            v262 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 6112);
            goto LABEL_356;
          case 223:
            v262 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 6136);
            goto LABEL_356;
          case 224:
            v262 = *(_DWORD *)(a1[3] + 56) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 6160);
LABEL_356:
            *(_QWORD *)(*v263 - 8) += v262;
            break;
          default:
            break;
        }
        --v260;
      }
      while (v260);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xCE:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v12 = (char *)v10[716];
            v13 = v10[717];
            if ((unint64_t)v12 >= v13)
            {
              v105 = (char *)v10[715];
              v106 = (v12 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61)
                goto LABEL_360;
              v107 = v13 - (_QWORD)v105;
              v108 = (uint64_t)(v13 - (_QWORD)v105) >> 2;
              if (v108 <= v106 + 1)
                v108 = v106 + 1;
              if (v107 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v108;
              if (v109)
              {
                v110 = (char *)sub_40FC((uint64_t)(v10 + 717), v109);
                v12 = (char *)v10[716];
                v105 = (char *)v10[715];
              }
              else
              {
                v110 = 0;
              }
              v219 = &v110[8 * v106];
              *(_QWORD *)v219 = v11;
              v14 = v219 + 8;
              while (v12 != v105)
              {
                v220 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v219 - 1) = v220;
                v219 -= 8;
              }
              v10[715] = v219;
              v10[716] = v14;
              v10[717] = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[716] = v14;
            break;
          case 0xCF:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            v17 = (uint64_t *)v15[719];
            v18 = v15[720];
            if ((unint64_t)v17 >= v18)
            {
              v111 = (uint64_t *)v15[718];
              v112 = v17 - v111;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_360;
              v113 = v18 - (_QWORD)v111;
              v114 = (uint64_t)(v18 - (_QWORD)v111) >> 2;
              if (v114 <= v112 + 1)
                v114 = v112 + 1;
              if (v113 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                v116 = (char *)sub_40FC((uint64_t)(v15 + 720), v115);
                v17 = (uint64_t *)v15[719];
                v111 = (uint64_t *)v15[718];
              }
              else
              {
                v116 = 0;
              }
              v221 = (uint64_t *)&v116[8 * v112];
              *v221 = v16;
              v19 = v221 + 1;
              while (v17 != v111)
              {
                v222 = *--v17;
                *--v221 = v222;
              }
              v15[718] = v221;
              v15[719] = v19;
              v15[720] = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[719] = v19;
            break;
          case 0xD0:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v22 = (char *)v20[722];
            v23 = v20[723];
            if ((unint64_t)v22 >= v23)
            {
              v117 = (char *)v20[721];
              v118 = (v22 - v117) >> 3;
              if ((unint64_t)(v118 + 1) >> 61)
                goto LABEL_360;
              v119 = v23 - (_QWORD)v117;
              v120 = (uint64_t)(v23 - (_QWORD)v117) >> 2;
              if (v120 <= v118 + 1)
                v120 = v118 + 1;
              if (v119 >= 0x7FFFFFFFFFFFFFF8)
                v121 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                v122 = (char *)sub_40FC((uint64_t)(v20 + 723), v121);
                v22 = (char *)v20[722];
                v117 = (char *)v20[721];
              }
              else
              {
                v122 = 0;
              }
              v223 = &v122[8 * v118];
              *(_QWORD *)v223 = v21;
              v24 = v223 + 8;
              while (v22 != v117)
              {
                v224 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v223 - 1) = v224;
                v223 -= 8;
              }
              v20[721] = v223;
              v20[722] = v24;
              v20[723] = &v122[8 * v121];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[722] = v24;
            break;
          case 0xD1:
            v25 = *(_QWORD **)a1[2];
            v26 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            v27 = (char *)v25[725];
            v28 = v25[726];
            if ((unint64_t)v27 >= v28)
            {
              v123 = (char *)v25[724];
              v124 = (v27 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61)
                goto LABEL_360;
              v125 = v28 - (_QWORD)v123;
              v126 = (uint64_t)(v28 - (_QWORD)v123) >> 2;
              if (v126 <= v124 + 1)
                v126 = v124 + 1;
              if (v125 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v126;
              if (v127)
              {
                v128 = (char *)sub_40FC((uint64_t)(v25 + 726), v127);
                v27 = (char *)v25[725];
                v123 = (char *)v25[724];
              }
              else
              {
                v128 = 0;
              }
              v225 = &v128[8 * v124];
              *(_QWORD *)v225 = v26;
              v29 = v225 + 8;
              while (v27 != v123)
              {
                v226 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v225 - 1) = v226;
                v225 -= 8;
              }
              v25[724] = v225;
              v25[725] = v29;
              v25[726] = &v128[8 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[725] = v29;
            break;
          case 0xD2:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            v32 = (uint64_t *)v30[728];
            v33 = v30[729];
            if ((unint64_t)v32 >= v33)
            {
              v129 = (uint64_t *)v30[727];
              v130 = v32 - v129;
              if ((unint64_t)(v130 + 1) >> 61)
                goto LABEL_360;
              v131 = v33 - (_QWORD)v129;
              v132 = (uint64_t)(v33 - (_QWORD)v129) >> 2;
              if (v132 <= v130 + 1)
                v132 = v130 + 1;
              if (v131 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v132;
              if (v133)
              {
                v134 = (char *)sub_40FC((uint64_t)(v30 + 729), v133);
                v32 = (uint64_t *)v30[728];
                v129 = (uint64_t *)v30[727];
              }
              else
              {
                v134 = 0;
              }
              v227 = (uint64_t *)&v134[8 * v130];
              *v227 = v31;
              v34 = v227 + 1;
              while (v32 != v129)
              {
                v228 = *--v32;
                *--v227 = v228;
              }
              v30[727] = v227;
              v30[728] = v34;
              v30[729] = &v134[8 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[728] = v34;
            break;
          case 0xD3:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v37 = (char *)v35[731];
            v38 = v35[732];
            if ((unint64_t)v37 >= v38)
            {
              v135 = (char *)v35[730];
              v136 = (v37 - v135) >> 3;
              if ((unint64_t)(v136 + 1) >> 61)
                goto LABEL_360;
              v137 = v38 - (_QWORD)v135;
              v138 = (uint64_t)(v38 - (_QWORD)v135) >> 2;
              if (v138 <= v136 + 1)
                v138 = v136 + 1;
              if (v137 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v138;
              if (v139)
              {
                v140 = (char *)sub_40FC((uint64_t)(v35 + 732), v139);
                v37 = (char *)v35[731];
                v135 = (char *)v35[730];
              }
              else
              {
                v140 = 0;
              }
              v229 = &v140[8 * v136];
              *(_QWORD *)v229 = v36;
              v39 = v229 + 8;
              while (v37 != v135)
              {
                v230 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v229 - 1) = v230;
                v229 -= 8;
              }
              v35[730] = v229;
              v35[731] = v39;
              v35[732] = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[731] = v39;
            break;
          case 0xD4:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            v42 = (uint64_t *)v40[734];
            v43 = v40[735];
            if ((unint64_t)v42 >= v43)
            {
              v141 = (uint64_t *)v40[733];
              v142 = v42 - v141;
              if ((unint64_t)(v142 + 1) >> 61)
                goto LABEL_360;
              v143 = v43 - (_QWORD)v141;
              v144 = (uint64_t)(v43 - (_QWORD)v141) >> 2;
              if (v144 <= v142 + 1)
                v144 = v142 + 1;
              if (v143 >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                v146 = (char *)sub_40FC((uint64_t)(v40 + 735), v145);
                v42 = (uint64_t *)v40[734];
                v141 = (uint64_t *)v40[733];
              }
              else
              {
                v146 = 0;
              }
              v231 = (uint64_t *)&v146[8 * v142];
              *v231 = v41;
              v44 = v231 + 1;
              while (v42 != v141)
              {
                v232 = *--v42;
                *--v231 = v232;
              }
              v40[733] = v231;
              v40[734] = v44;
              v40[735] = &v146[8 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[734] = v44;
            break;
          case 0xD5:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v47 = (char *)v45[737];
            v48 = v45[738];
            if ((unint64_t)v47 >= v48)
            {
              v147 = (char *)v45[736];
              v148 = (v47 - v147) >> 3;
              if ((unint64_t)(v148 + 1) >> 61)
                goto LABEL_360;
              v149 = v48 - (_QWORD)v147;
              v150 = (uint64_t)(v48 - (_QWORD)v147) >> 2;
              if (v150 <= v148 + 1)
                v150 = v148 + 1;
              if (v149 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_40FC((uint64_t)(v45 + 738), v151);
                v47 = (char *)v45[737];
                v147 = (char *)v45[736];
              }
              else
              {
                v152 = 0;
              }
              v233 = &v152[8 * v148];
              *(_QWORD *)v233 = v46;
              v49 = v233 + 8;
              while (v47 != v147)
              {
                v234 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v233 - 1) = v234;
                v233 -= 8;
              }
              v45[736] = v233;
              v45[737] = v49;
              v45[738] = &v152[8 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[737] = v49;
            break;
          case 0xD6:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            v52 = (uint64_t *)v50[740];
            v53 = v50[741];
            if ((unint64_t)v52 >= v53)
            {
              v153 = (uint64_t *)v50[739];
              v154 = v52 - v153;
              if ((unint64_t)(v154 + 1) >> 61)
                goto LABEL_360;
              v155 = v53 - (_QWORD)v153;
              v156 = (uint64_t)(v53 - (_QWORD)v153) >> 2;
              if (v156 <= v154 + 1)
                v156 = v154 + 1;
              if (v155 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v156;
              if (v157)
              {
                v158 = (char *)sub_40FC((uint64_t)(v50 + 741), v157);
                v52 = (uint64_t *)v50[740];
                v153 = (uint64_t *)v50[739];
              }
              else
              {
                v158 = 0;
              }
              v235 = (uint64_t *)&v158[8 * v154];
              *v235 = v51;
              v54 = v235 + 1;
              while (v52 != v153)
              {
                v236 = *--v52;
                *--v235 = v236;
              }
              v50[739] = v235;
              v50[740] = v54;
              v50[741] = &v158[8 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[740] = v54;
            break;
          case 0xD7:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v57 = (char *)v55[743];
            v58 = v55[744];
            if ((unint64_t)v57 >= v58)
            {
              v159 = (char *)v55[742];
              v160 = (v57 - v159) >> 3;
              if ((unint64_t)(v160 + 1) >> 61)
                goto LABEL_360;
              v161 = v58 - (_QWORD)v159;
              v162 = (uint64_t)(v58 - (_QWORD)v159) >> 2;
              if (v162 <= v160 + 1)
                v162 = v160 + 1;
              if (v161 >= 0x7FFFFFFFFFFFFFF8)
                v163 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v163 = v162;
              if (v163)
              {
                v164 = (char *)sub_40FC((uint64_t)(v55 + 744), v163);
                v57 = (char *)v55[743];
                v159 = (char *)v55[742];
              }
              else
              {
                v164 = 0;
              }
              v237 = &v164[8 * v160];
              *(_QWORD *)v237 = v56;
              v59 = v237 + 8;
              while (v57 != v159)
              {
                v238 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v237 - 1) = v238;
                v237 -= 8;
              }
              v55[742] = v237;
              v55[743] = v59;
              v55[744] = &v164[8 * v163];
              if (v159)
                operator delete(v159);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[743] = v59;
            break;
          case 0xD8:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            v62 = (uint64_t *)v60[746];
            v63 = v60[747];
            if ((unint64_t)v62 >= v63)
            {
              v165 = (uint64_t *)v60[745];
              v166 = v62 - v165;
              if ((unint64_t)(v166 + 1) >> 61)
                goto LABEL_360;
              v167 = v63 - (_QWORD)v165;
              v168 = (uint64_t)(v63 - (_QWORD)v165) >> 2;
              if (v168 <= v166 + 1)
                v168 = v166 + 1;
              if (v167 >= 0x7FFFFFFFFFFFFFF8)
                v169 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v169 = v168;
              if (v169)
              {
                v170 = (char *)sub_40FC((uint64_t)(v60 + 747), v169);
                v62 = (uint64_t *)v60[746];
                v165 = (uint64_t *)v60[745];
              }
              else
              {
                v170 = 0;
              }
              v239 = (uint64_t *)&v170[8 * v166];
              *v239 = v61;
              v64 = v239 + 1;
              while (v62 != v165)
              {
                v240 = *--v62;
                *--v239 = v240;
              }
              v60[745] = v239;
              v60[746] = v64;
              v60[747] = &v170[8 * v169];
              if (v165)
                operator delete(v165);
            }
            else
            {
              *v62 = v61;
              v64 = v62 + 1;
            }
            v60[746] = v64;
            break;
          case 0xD9:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v67 = (char *)v65[749];
            v68 = v65[750];
            if ((unint64_t)v67 >= v68)
            {
              v171 = (char *)v65[748];
              v172 = (v67 - v171) >> 3;
              if ((unint64_t)(v172 + 1) >> 61)
                goto LABEL_360;
              v173 = v68 - (_QWORD)v171;
              v174 = (uint64_t)(v68 - (_QWORD)v171) >> 2;
              if (v174 <= v172 + 1)
                v174 = v172 + 1;
              if (v173 >= 0x7FFFFFFFFFFFFFF8)
                v175 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v175 = v174;
              if (v175)
              {
                v176 = (char *)sub_40FC((uint64_t)(v65 + 750), v175);
                v67 = (char *)v65[749];
                v171 = (char *)v65[748];
              }
              else
              {
                v176 = 0;
              }
              v241 = &v176[8 * v172];
              *(_QWORD *)v241 = v66;
              v69 = v241 + 8;
              while (v67 != v171)
              {
                v242 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v241 - 1) = v242;
                v241 -= 8;
              }
              v65[748] = v241;
              v65[749] = v69;
              v65[750] = &v176[8 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[749] = v69;
            break;
          case 0xDA:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            v72 = (uint64_t *)v70[752];
            v73 = v70[753];
            if ((unint64_t)v72 >= v73)
            {
              v177 = (uint64_t *)v70[751];
              v178 = v72 - v177;
              if ((unint64_t)(v178 + 1) >> 61)
                goto LABEL_360;
              v179 = v73 - (_QWORD)v177;
              v180 = (uint64_t)(v73 - (_QWORD)v177) >> 2;
              if (v180 <= v178 + 1)
                v180 = v178 + 1;
              if (v179 >= 0x7FFFFFFFFFFFFFF8)
                v181 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v181 = v180;
              if (v181)
              {
                v182 = (char *)sub_40FC((uint64_t)(v70 + 753), v181);
                v72 = (uint64_t *)v70[752];
                v177 = (uint64_t *)v70[751];
              }
              else
              {
                v182 = 0;
              }
              v243 = (uint64_t *)&v182[8 * v178];
              *v243 = v71;
              v74 = v243 + 1;
              while (v72 != v177)
              {
                v244 = *--v72;
                *--v243 = v244;
              }
              v70[751] = v243;
              v70[752] = v74;
              v70[753] = &v182[8 * v181];
              if (v177)
                operator delete(v177);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[752] = v74;
            break;
          case 0xDB:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v77 = (char *)v75[755];
            v78 = v75[756];
            if ((unint64_t)v77 >= v78)
            {
              v183 = (char *)v75[754];
              v184 = (v77 - v183) >> 3;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_360;
              v185 = v78 - (_QWORD)v183;
              v186 = (uint64_t)(v78 - (_QWORD)v183) >> 2;
              if (v186 <= v184 + 1)
                v186 = v184 + 1;
              if (v185 >= 0x7FFFFFFFFFFFFFF8)
                v187 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v187 = v186;
              if (v187)
              {
                v188 = (char *)sub_40FC((uint64_t)(v75 + 756), v187);
                v77 = (char *)v75[755];
                v183 = (char *)v75[754];
              }
              else
              {
                v188 = 0;
              }
              v245 = &v188[8 * v184];
              *(_QWORD *)v245 = v76;
              v79 = v245 + 8;
              while (v77 != v183)
              {
                v246 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v245 - 1) = v246;
                v245 -= 8;
              }
              v75[754] = v245;
              v75[755] = v79;
              v75[756] = &v188[8 * v187];
              if (v183)
                operator delete(v183);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[755] = v79;
            break;
          case 0xDC:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            v82 = (uint64_t *)v80[758];
            v83 = v80[759];
            if ((unint64_t)v82 >= v83)
            {
              v189 = (uint64_t *)v80[757];
              v190 = v82 - v189;
              if ((unint64_t)(v190 + 1) >> 61)
                goto LABEL_360;
              v191 = v83 - (_QWORD)v189;
              v192 = (uint64_t)(v83 - (_QWORD)v189) >> 2;
              if (v192 <= v190 + 1)
                v192 = v190 + 1;
              if (v191 >= 0x7FFFFFFFFFFFFFF8)
                v193 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v193 = v192;
              if (v193)
              {
                v194 = (char *)sub_40FC((uint64_t)(v80 + 759), v193);
                v82 = (uint64_t *)v80[758];
                v189 = (uint64_t *)v80[757];
              }
              else
              {
                v194 = 0;
              }
              v247 = (uint64_t *)&v194[8 * v190];
              *v247 = v81;
              v84 = v247 + 1;
              while (v82 != v189)
              {
                v248 = *--v82;
                *--v247 = v248;
              }
              v80[757] = v247;
              v80[758] = v84;
              v80[759] = &v194[8 * v193];
              if (v189)
                operator delete(v189);
            }
            else
            {
              *v82 = v81;
              v84 = v82 + 1;
            }
            v80[758] = v84;
            break;
          case 0xDD:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v87 = (char *)v85[761];
            v88 = v85[762];
            if ((unint64_t)v87 >= v88)
            {
              v195 = (char *)v85[760];
              v196 = (v87 - v195) >> 3;
              if ((unint64_t)(v196 + 1) >> 61)
                goto LABEL_360;
              v197 = v88 - (_QWORD)v195;
              v198 = (uint64_t)(v88 - (_QWORD)v195) >> 2;
              if (v198 <= v196 + 1)
                v198 = v196 + 1;
              if (v197 >= 0x7FFFFFFFFFFFFFF8)
                v199 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v199 = v198;
              if (v199)
              {
                v200 = (char *)sub_40FC((uint64_t)(v85 + 762), v199);
                v87 = (char *)v85[761];
                v195 = (char *)v85[760];
              }
              else
              {
                v200 = 0;
              }
              v249 = &v200[8 * v196];
              *(_QWORD *)v249 = v86;
              v89 = v249 + 8;
              while (v87 != v195)
              {
                v250 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v249 - 1) = v250;
                v249 -= 8;
              }
              v85[760] = v249;
              v85[761] = v89;
              v85[762] = &v200[8 * v199];
              if (v195)
                operator delete(v195);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[761] = v89;
            break;
          case 0xDE:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            v92 = (uint64_t *)v90[764];
            v93 = v90[765];
            if ((unint64_t)v92 >= v93)
            {
              v201 = (uint64_t *)v90[763];
              v202 = v92 - v201;
              if ((unint64_t)(v202 + 1) >> 61)
                goto LABEL_360;
              v203 = v93 - (_QWORD)v201;
              v204 = (uint64_t)(v93 - (_QWORD)v201) >> 2;
              if (v204 <= v202 + 1)
                v204 = v202 + 1;
              if (v203 >= 0x7FFFFFFFFFFFFFF8)
                v205 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v205 = v204;
              if (v205)
              {
                v206 = (char *)sub_40FC((uint64_t)(v90 + 765), v205);
                v92 = (uint64_t *)v90[764];
                v201 = (uint64_t *)v90[763];
              }
              else
              {
                v206 = 0;
              }
              v251 = (uint64_t *)&v206[8 * v202];
              *v251 = v91;
              v94 = v251 + 1;
              while (v92 != v201)
              {
                v252 = *--v92;
                *--v251 = v252;
              }
              v90[763] = v251;
              v90[764] = v94;
              v90[765] = &v206[8 * v205];
              if (v201)
                operator delete(v201);
            }
            else
            {
              *v92 = v91;
              v94 = v92 + 1;
            }
            v90[764] = v94;
            break;
          case 0xDF:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v97 = (char *)v95[767];
            v98 = v95[768];
            if ((unint64_t)v97 >= v98)
            {
              v207 = (char *)v95[766];
              v208 = (v97 - v207) >> 3;
              if ((unint64_t)(v208 + 1) >> 61)
                goto LABEL_360;
              v209 = v98 - (_QWORD)v207;
              v210 = (uint64_t)(v98 - (_QWORD)v207) >> 2;
              if (v210 <= v208 + 1)
                v210 = v208 + 1;
              if (v209 >= 0x7FFFFFFFFFFFFFF8)
                v211 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v211 = v210;
              if (v211)
              {
                v212 = (char *)sub_40FC((uint64_t)(v95 + 768), v211);
                v97 = (char *)v95[767];
                v207 = (char *)v95[766];
              }
              else
              {
                v212 = 0;
              }
              v253 = &v212[8 * v208];
              *(_QWORD *)v253 = v96;
              v99 = v253 + 8;
              while (v97 != v207)
              {
                v254 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v253 - 1) = v254;
                v253 -= 8;
              }
              v95[766] = v253;
              v95[767] = v99;
              v95[768] = &v212[8 * v211];
              if (v207)
                operator delete(v207);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[767] = v99;
            break;
          case 0xE0:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            v102 = (uint64_t *)v100[770];
            v103 = v100[771];
            if ((unint64_t)v102 >= v103)
            {
              v213 = (uint64_t *)v100[769];
              v214 = v102 - v213;
              if ((unint64_t)(v214 + 1) >> 61)
LABEL_360:
                sub_4074();
              v215 = v103 - (_QWORD)v213;
              v216 = (uint64_t)(v103 - (_QWORD)v213) >> 2;
              if (v216 <= v214 + 1)
                v216 = v214 + 1;
              if (v215 >= 0x7FFFFFFFFFFFFFF8)
                v217 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v217 = v216;
              if (v217)
              {
                v218 = (char *)sub_40FC((uint64_t)(v100 + 771), v217);
                v102 = (uint64_t *)v100[770];
                v213 = (uint64_t *)v100[769];
              }
              else
              {
                v218 = 0;
              }
              v255 = (uint64_t *)&v218[8 * v214];
              *v255 = v101;
              v104 = v255 + 1;
              while (v102 != v213)
              {
                v256 = *--v102;
                *--v255 = v256;
              }
              v100[769] = v255;
              v100[770] = v104;
              v100[771] = &v218[8 * v217];
              if (v213)
                operator delete(v213);
            }
            else
            {
              *v102 = v101;
              v104 = v102 + 1;
            }
            v100[770] = v104;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_162840(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int *v77;
  int **v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;

  v4 = *a1;
  if (*a2 == 1)
  {
    v78 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v77 = *v78;
    v79 = (char *)v78[1] - (char *)*v78;
    if (v79)
    {
      v80 = v79 >> 2;
      if (v80 <= 1)
        v80 = 1;
      do
      {
        v81 = *v77++;
        switch(v81)
        {
          case 28:
            v82 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1456);
            goto LABEL_104;
          case 29:
            v82 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1480);
            goto LABEL_104;
          case 30:
            v82 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1504);
            goto LABEL_104;
          case 31:
            v82 = *(unsigned __int16 *)(a1[3] + 26);
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1528);
            goto LABEL_104;
          case 32:
            v82 = *(unsigned __int16 *)(a1[3] + 24);
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1552);
LABEL_104:
            *(_QWORD *)(*v83 - 8) += v82;
            break;
          default:
            break;
        }
        --v80;
      }
      while (v80);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x1C:
            v10 = *(_QWORD **)a1[2];
            v11 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            v12 = (unint64_t *)v10[182];
            v13 = v10[183];
            if ((unint64_t)v12 >= v13)
            {
              v37 = (unint64_t *)v10[181];
              v38 = v12 - v37;
              if ((unint64_t)(v38 + 1) >> 61)
                goto LABEL_108;
              v39 = v13 - (_QWORD)v37;
              v40 = (uint64_t)(v13 - (_QWORD)v37) >> 2;
              if (v40 <= v38 + 1)
                v40 = v38 + 1;
              if (v39 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              if (v41)
              {
                v42 = (char *)sub_40FC((uint64_t)(v10 + 183), v41);
                v12 = (unint64_t *)v10[182];
                v37 = (unint64_t *)v10[181];
              }
              else
              {
                v42 = 0;
              }
              v67 = (unint64_t *)&v42[8 * v38];
              *v67 = v11;
              v14 = v67 + 1;
              while (v12 != v37)
              {
                v68 = *--v12;
                *--v67 = v68;
              }
              v10[181] = v67;
              v10[182] = v14;
              v10[183] = &v42[8 * v41];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[182] = v14;
            break;
          case 0x1D:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[185];
            v18 = v15[186];
            if ((unint64_t)v17 >= v18)
            {
              v43 = (uint64_t *)v15[184];
              v44 = v17 - v43;
              if ((unint64_t)(v44 + 1) >> 61)
                goto LABEL_108;
              v45 = v18 - (_QWORD)v43;
              v46 = (uint64_t)(v18 - (_QWORD)v43) >> 2;
              if (v46 <= v44 + 1)
                v46 = v44 + 1;
              if (v45 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
              {
                v48 = (char *)sub_40FC((uint64_t)(v15 + 186), v47);
                v17 = (uint64_t *)v15[185];
                v43 = (uint64_t *)v15[184];
              }
              else
              {
                v48 = 0;
              }
              v69 = (uint64_t *)&v48[8 * v44];
              *v69 = v16;
              v19 = v69 + 1;
              while (v17 != v43)
              {
                v70 = *--v17;
                *--v69 = v70;
              }
              v15[184] = v69;
              v15[185] = v19;
              v15[186] = &v48[8 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[185] = v19;
            break;
          case 0x1E:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            v22 = (uint64_t *)v20[188];
            v23 = v20[189];
            if ((unint64_t)v22 >= v23)
            {
              v49 = (uint64_t *)v20[187];
              v50 = v22 - v49;
              if ((unint64_t)(v50 + 1) >> 61)
                goto LABEL_108;
              v51 = v23 - (_QWORD)v49;
              v52 = (uint64_t)(v23 - (_QWORD)v49) >> 2;
              if (v52 <= v50 + 1)
                v52 = v50 + 1;
              if (v51 >= 0x7FFFFFFFFFFFFFF8)
                v53 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v53 = v52;
              if (v53)
              {
                v54 = (char *)sub_40FC((uint64_t)(v20 + 189), v53);
                v22 = (uint64_t *)v20[188];
                v49 = (uint64_t *)v20[187];
              }
              else
              {
                v54 = 0;
              }
              v71 = (uint64_t *)&v54[8 * v50];
              *v71 = v21;
              v24 = v71 + 1;
              while (v22 != v49)
              {
                v72 = *--v22;
                *--v71 = v72;
              }
              v20[187] = v71;
              v20[188] = v24;
              v20[189] = &v54[8 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[188] = v24;
            break;
          case 0x1F:
            v25 = a1[2];
            v26 = *(_QWORD **)v25;
            v27 = *(unsigned __int16 *)(a1[3] + 26);
            v28 = *(char **)(*(_QWORD *)v25 + 1528);
            v29 = *(_QWORD *)(*(_QWORD *)v25 + 1536);
            if ((unint64_t)v28 >= v29)
            {
              v55 = (char *)v26[190];
              v56 = (v28 - v55) >> 3;
              if ((unint64_t)(v56 + 1) >> 61)
                goto LABEL_108;
              v57 = v29 - (_QWORD)v55;
              v58 = (uint64_t)(v29 - (_QWORD)v55) >> 2;
              if (v58 <= v56 + 1)
                v58 = v56 + 1;
              if (v57 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v58;
              if (v59)
              {
                v60 = (char *)sub_40FC((uint64_t)(v26 + 192), v59);
                v28 = (char *)v26[191];
                v55 = (char *)v26[190];
              }
              else
              {
                v60 = 0;
              }
              v73 = &v60[8 * v56];
              *(_QWORD *)v73 = v27;
              v30 = v73 + 8;
              while (v28 != v55)
              {
                v74 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v73 - 1) = v74;
                v73 -= 8;
              }
              v26[190] = v73;
              v26[191] = v30;
              v26[192] = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v28 = v27;
              v30 = v28 + 8;
            }
            v26[191] = v30;
            break;
          case 0x20:
            v31 = a1[2];
            v32 = *(_QWORD **)v31;
            v33 = *(unsigned __int16 *)(a1[3] + 24);
            v34 = *(char **)(*(_QWORD *)v31 + 1552);
            v35 = *(_QWORD *)(*(_QWORD *)v31 + 1560);
            if ((unint64_t)v34 >= v35)
            {
              v61 = (char *)v32[193];
              v62 = (v34 - v61) >> 3;
              if ((unint64_t)(v62 + 1) >> 61)
LABEL_108:
                sub_4074();
              v63 = v35 - (_QWORD)v61;
              v64 = (uint64_t)(v35 - (_QWORD)v61) >> 2;
              if (v64 <= v62 + 1)
                v64 = v62 + 1;
              if (v63 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v64;
              if (v65)
              {
                v66 = (char *)sub_40FC((uint64_t)(v32 + 195), v65);
                v34 = (char *)v32[194];
                v61 = (char *)v32[193];
              }
              else
              {
                v66 = 0;
              }
              v75 = &v66[8 * v62];
              *(_QWORD *)v75 = v33;
              v36 = v75 + 8;
              while (v34 != v61)
              {
                v76 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              v32[193] = v75;
              v32[194] = v36;
              v32[195] = &v66[8 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v34 = v33;
              v36 = v34 + 8;
            }
            v32[194] = v36;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_162DB4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  unint64_t *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  int *v426;
  int **v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  int v431;
  _QWORD *v432;

  v4 = *a1;
  if (*a2 == 1)
  {
    v427 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v426 = *v427;
    v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      v429 = v428 >> 2;
      if (v429 <= 1)
        v429 = 1;
      do
      {
        v430 = *v426++;
        switch(v430)
        {
          case 'J':
            LOWORD(v431) = *(_WORD *)(a1[3] + 82);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2560);
            goto LABEL_590;
          case 'K':
            LOWORD(v431) = *(_WORD *)(a1[3] + 66);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2584);
            goto LABEL_590;
          case 'L':
            LOWORD(v431) = *(_WORD *)(a1[3] + 50);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2608);
            goto LABEL_590;
          case 'M':
            LOWORD(v431) = *(_WORD *)(a1[3] + 34);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2632);
            goto LABEL_590;
          case 'N':
            LOWORD(v431) = *(_WORD *)(a1[3] + 84);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2656);
            goto LABEL_590;
          case 'O':
            LOWORD(v431) = *(_WORD *)(a1[3] + 68);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2680);
            goto LABEL_590;
          case 'P':
            LOWORD(v431) = *(_WORD *)(a1[3] + 52);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2704);
            goto LABEL_590;
          case 'Q':
            LOWORD(v431) = *(_WORD *)(a1[3] + 36);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2728);
            goto LABEL_590;
          case 'R':
            LOWORD(v431) = *(_WORD *)(a1[3] + 86);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2752);
            goto LABEL_590;
          case 'S':
            LOWORD(v431) = *(_WORD *)(a1[3] + 70);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2776);
            goto LABEL_590;
          case 'T':
            LOWORD(v431) = *(_WORD *)(a1[3] + 54);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2800);
            goto LABEL_590;
          case 'U':
            LOWORD(v431) = *(_WORD *)(a1[3] + 38);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2824);
            goto LABEL_590;
          case 'V':
            LOWORD(v431) = *(_WORD *)(a1[3] + 76);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2848);
            goto LABEL_590;
          case 'W':
            LOWORD(v431) = *(_WORD *)(a1[3] + 60);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2872);
            goto LABEL_590;
          case 'X':
            LOWORD(v431) = *(_WORD *)(a1[3] + 44);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2896);
            goto LABEL_590;
          case 'Y':
            LOWORD(v431) = *(_WORD *)(a1[3] + 28);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2920);
            goto LABEL_590;
          case 'Z':
            LOWORD(v431) = *(_WORD *)(a1[3] + 78);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2944);
            goto LABEL_590;
          case '[':
            LOWORD(v431) = *(_WORD *)(a1[3] + 62);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2968);
            goto LABEL_590;
          case '\\':
            LOWORD(v431) = *(_WORD *)(a1[3] + 46);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2992);
            goto LABEL_590;
          case ']':
            LOWORD(v431) = *(_WORD *)(a1[3] + 30);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3016);
            goto LABEL_590;
          case '^':
            LOWORD(v431) = *(_WORD *)(a1[3] + 80);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3040);
            goto LABEL_590;
          case '_':
            LOWORD(v431) = *(_WORD *)(a1[3] + 64);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3064);
            goto LABEL_590;
            LOWORD(v431) = *(_WORD *)(a1[3] + 48);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3088);
            goto LABEL_590;
          case 'a':
            LOWORD(v431) = *(_WORD *)(a1[3] + 32);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3112);
            goto LABEL_590;
          case 'b':
            LOWORD(v431) = *(_WORD *)(a1[3] + 72);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3136);
            goto LABEL_590;
          case 'c':
            LOWORD(v431) = *(_WORD *)(a1[3] + 56);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3160);
            goto LABEL_590;
          case 'd':
            LOWORD(v431) = *(_WORD *)(a1[3] + 40);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3184);
            goto LABEL_590;
          case 'e':
            v431 = *(unsigned __int16 *)(a1[3] + 24) >> 1;
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3208);
            goto LABEL_590;
          case 'f':
            LOWORD(v431) = *(_WORD *)(a1[3] + 74);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3232);
            goto LABEL_590;
          case 'g':
            LOWORD(v431) = *(_WORD *)(a1[3] + 58);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3256);
            goto LABEL_590;
          case 'h':
            LOWORD(v431) = *(_WORD *)(a1[3] + 42);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3280);
            goto LABEL_590;
          case 'i':
            LOWORD(v431) = *(_WORD *)(a1[3] + 26);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3304);
LABEL_590:
            *(_QWORD *)(*v432 - 8) += v431 & 0x1FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'J':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            v12 = (char *)v10[320];
            v13 = v10[321];
            if ((unint64_t)v12 >= v13)
            {
              v170 = (char *)v10[319];
              v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_594;
              v172 = v13 - (_QWORD)v170;
              v173 = (uint64_t)(v13 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v10 + 321), v174);
                v12 = (char *)v10[320];
                v170 = (char *)v10[319];
              }
              else
              {
                v175 = 0;
              }
              v362 = &v175[8 * v171];
              *(_QWORD *)v362 = v11;
              v14 = v362 + 8;
              while (v12 != v170)
              {
                v363 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[319] = v362;
              v10[320] = v14;
              v10[321] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[320] = v14;
            break;
          case 'K':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 66) & 0x1FFF;
            v17 = (char *)v15[323];
            v18 = v15[324];
            if ((unint64_t)v17 >= v18)
            {
              v176 = (char *)v15[322];
              v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_594;
              v178 = v18 - (_QWORD)v176;
              v179 = (uint64_t)(v18 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v15 + 324), v180);
                v17 = (char *)v15[323];
                v176 = (char *)v15[322];
              }
              else
              {
                v181 = 0;
              }
              v364 = &v181[8 * v177];
              *(_QWORD *)v364 = v16;
              v19 = v364 + 8;
              while (v17 != v176)
              {
                v365 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[322] = v364;
              v15[323] = v19;
              v15[324] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[323] = v19;
            break;
          case 'L':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 50) & 0x1FFF;
            v22 = (char *)v20[326];
            v23 = v20[327];
            if ((unint64_t)v22 >= v23)
            {
              v182 = (char *)v20[325];
              v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_594;
              v184 = v23 - (_QWORD)v182;
              v185 = (uint64_t)(v23 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v20 + 327), v186);
                v22 = (char *)v20[326];
                v182 = (char *)v20[325];
              }
              else
              {
                v187 = 0;
              }
              v366 = &v187[8 * v183];
              *(_QWORD *)v366 = v21;
              v24 = v366 + 8;
              while (v22 != v182)
              {
                v367 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[325] = v366;
              v20[326] = v24;
              v20[327] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[326] = v24;
            break;
          case 'M':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            v27 = (char *)v25[329];
            v28 = v25[330];
            if ((unint64_t)v27 >= v28)
            {
              v188 = (char *)v25[328];
              v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_594;
              v190 = v28 - (_QWORD)v188;
              v191 = (uint64_t)(v28 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v25 + 330), v192);
                v27 = (char *)v25[329];
                v188 = (char *)v25[328];
              }
              else
              {
                v193 = 0;
              }
              v368 = &v193[8 * v189];
              *(_QWORD *)v368 = v26;
              v29 = v368 + 8;
              while (v27 != v188)
              {
                v369 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[328] = v368;
              v25[329] = v29;
              v25[330] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[329] = v29;
            break;
          case 'N':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 84) & 0x1FFF;
            v32 = (char *)v30[332];
            v33 = v30[333];
            if ((unint64_t)v32 >= v33)
            {
              v194 = (char *)v30[331];
              v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_594;
              v196 = v33 - (_QWORD)v194;
              v197 = (uint64_t)(v33 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v30 + 333), v198);
                v32 = (char *)v30[332];
                v194 = (char *)v30[331];
              }
              else
              {
                v199 = 0;
              }
              v370 = &v199[8 * v195];
              *(_QWORD *)v370 = v31;
              v34 = v370 + 8;
              while (v32 != v194)
              {
                v371 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[331] = v370;
              v30[332] = v34;
              v30[333] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[332] = v34;
            break;
          case 'O':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            v37 = (char *)v35[335];
            v38 = v35[336];
            if ((unint64_t)v37 >= v38)
            {
              v200 = (char *)v35[334];
              v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_594;
              v202 = v38 - (_QWORD)v200;
              v203 = (uint64_t)(v38 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v35 + 336), v204);
                v37 = (char *)v35[335];
                v200 = (char *)v35[334];
              }
              else
              {
                v205 = 0;
              }
              v372 = &v205[8 * v201];
              *(_QWORD *)v372 = v36;
              v39 = v372 + 8;
              while (v37 != v200)
              {
                v373 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[334] = v372;
              v35[335] = v39;
              v35[336] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[335] = v39;
            break;
          case 'P':
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 52) & 0x1FFF;
            v42 = (char *)v40[338];
            v43 = v40[339];
            if ((unint64_t)v42 >= v43)
            {
              v206 = (char *)v40[337];
              v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_594;
              v208 = v43 - (_QWORD)v206;
              v209 = (uint64_t)(v43 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v40 + 339), v210);
                v42 = (char *)v40[338];
                v206 = (char *)v40[337];
              }
              else
              {
                v211 = 0;
              }
              v374 = &v211[8 * v207];
              *(_QWORD *)v374 = v41;
              v44 = v374 + 8;
              while (v42 != v206)
              {
                v375 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[337] = v374;
              v40[338] = v44;
              v40[339] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[338] = v44;
            break;
          case 'Q':
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 36) & 0x1FFF;
            v47 = (char *)v45[341];
            v48 = v45[342];
            if ((unint64_t)v47 >= v48)
            {
              v212 = (char *)v45[340];
              v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_594;
              v214 = v48 - (_QWORD)v212;
              v215 = (uint64_t)(v48 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v45 + 342), v216);
                v47 = (char *)v45[341];
                v212 = (char *)v45[340];
              }
              else
              {
                v217 = 0;
              }
              v376 = &v217[8 * v213];
              *(_QWORD *)v376 = v46;
              v49 = v376 + 8;
              while (v47 != v212)
              {
                v377 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[340] = v376;
              v45[341] = v49;
              v45[342] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[341] = v49;
            break;
          case 'R':
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 86) & 0x1FFF;
            v52 = (char *)v50[344];
            v53 = v50[345];
            if ((unint64_t)v52 >= v53)
            {
              v218 = (char *)v50[343];
              v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_594;
              v220 = v53 - (_QWORD)v218;
              v221 = (uint64_t)(v53 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v50 + 345), v222);
                v52 = (char *)v50[344];
                v218 = (char *)v50[343];
              }
              else
              {
                v223 = 0;
              }
              v378 = &v223[8 * v219];
              *(_QWORD *)v378 = v51;
              v54 = v378 + 8;
              while (v52 != v218)
              {
                v379 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[343] = v378;
              v50[344] = v54;
              v50[345] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[344] = v54;
            break;
          case 'S':
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            v57 = (char *)v55[347];
            v58 = v55[348];
            if ((unint64_t)v57 >= v58)
            {
              v224 = (char *)v55[346];
              v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61)
                goto LABEL_594;
              v226 = v58 - (_QWORD)v224;
              v227 = (uint64_t)(v58 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v55 + 348), v228);
                v57 = (char *)v55[347];
                v224 = (char *)v55[346];
              }
              else
              {
                v229 = 0;
              }
              v380 = &v229[8 * v225];
              *(_QWORD *)v380 = v56;
              v59 = v380 + 8;
              while (v57 != v224)
              {
                v381 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[346] = v380;
              v55[347] = v59;
              v55[348] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[347] = v59;
            break;
          case 'T':
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 54) & 0x1FFF;
            v62 = (char *)v60[350];
            v63 = v60[351];
            if ((unint64_t)v62 >= v63)
            {
              v230 = (char *)v60[349];
              v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61)
                goto LABEL_594;
              v232 = v63 - (_QWORD)v230;
              v233 = (uint64_t)(v63 - (_QWORD)v230) >> 2;
              if (v233 <= v231 + 1)
                v233 = v231 + 1;
              if (v232 >= 0x7FFFFFFFFFFFFFF8)
                v234 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v234 = v233;
              if (v234)
              {
                v235 = (char *)sub_40FC((uint64_t)(v60 + 351), v234);
                v62 = (char *)v60[350];
                v230 = (char *)v60[349];
              }
              else
              {
                v235 = 0;
              }
              v382 = &v235[8 * v231];
              *(_QWORD *)v382 = v61;
              v64 = v382 + 8;
              while (v62 != v230)
              {
                v383 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[349] = v382;
              v60[350] = v64;
              v60[351] = &v235[8 * v234];
              if (v230)
                operator delete(v230);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[350] = v64;
            break;
          case 'U':
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 38) & 0x1FFF;
            v67 = (char *)v65[353];
            v68 = v65[354];
            if ((unint64_t)v67 >= v68)
            {
              v236 = (char *)v65[352];
              v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61)
                goto LABEL_594;
              v238 = v68 - (_QWORD)v236;
              v239 = (uint64_t)(v68 - (_QWORD)v236) >> 2;
              if (v239 <= v237 + 1)
                v239 = v237 + 1;
              if (v238 >= 0x7FFFFFFFFFFFFFF8)
                v240 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v240 = v239;
              if (v240)
              {
                v241 = (char *)sub_40FC((uint64_t)(v65 + 354), v240);
                v67 = (char *)v65[353];
                v236 = (char *)v65[352];
              }
              else
              {
                v241 = 0;
              }
              v384 = &v241[8 * v237];
              *(_QWORD *)v384 = v66;
              v69 = v384 + 8;
              while (v67 != v236)
              {
                v385 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[352] = v384;
              v65[353] = v69;
              v65[354] = &v241[8 * v240];
              if (v236)
                operator delete(v236);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[353] = v69;
            break;
          case 'V':
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            v72 = (char *)v70[356];
            v73 = v70[357];
            if ((unint64_t)v72 >= v73)
            {
              v242 = (char *)v70[355];
              v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61)
                goto LABEL_594;
              v244 = v73 - (_QWORD)v242;
              v245 = (uint64_t)(v73 - (_QWORD)v242) >> 2;
              if (v245 <= v243 + 1)
                v245 = v243 + 1;
              if (v244 >= 0x7FFFFFFFFFFFFFF8)
                v246 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v246 = v245;
              if (v246)
              {
                v247 = (char *)sub_40FC((uint64_t)(v70 + 357), v246);
                v72 = (char *)v70[356];
                v242 = (char *)v70[355];
              }
              else
              {
                v247 = 0;
              }
              v386 = &v247[8 * v243];
              *(_QWORD *)v386 = v71;
              v74 = v386 + 8;
              while (v72 != v242)
              {
                v387 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[355] = v386;
              v70[356] = v74;
              v70[357] = &v247[8 * v246];
              if (v242)
                operator delete(v242);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[356] = v74;
            break;
          case 'W':
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            v77 = (char *)v75[359];
            v78 = v75[360];
            if ((unint64_t)v77 >= v78)
            {
              v248 = (char *)v75[358];
              v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61)
                goto LABEL_594;
              v250 = v78 - (_QWORD)v248;
              v251 = (uint64_t)(v78 - (_QWORD)v248) >> 2;
              if (v251 <= v249 + 1)
                v251 = v249 + 1;
              if (v250 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v251;
              if (v252)
              {
                v253 = (char *)sub_40FC((uint64_t)(v75 + 360), v252);
                v77 = (char *)v75[359];
                v248 = (char *)v75[358];
              }
              else
              {
                v253 = 0;
              }
              v388 = &v253[8 * v249];
              *(_QWORD *)v388 = v76;
              v79 = v388 + 8;
              while (v77 != v248)
              {
                v389 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[358] = v388;
              v75[359] = v79;
              v75[360] = &v253[8 * v252];
              if (v248)
                operator delete(v248);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[359] = v79;
            break;
          case 'X':
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            v82 = (char *)v80[362];
            v83 = v80[363];
            if ((unint64_t)v82 >= v83)
            {
              v254 = (char *)v80[361];
              v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61)
                goto LABEL_594;
              v256 = v83 - (_QWORD)v254;
              v257 = (uint64_t)(v83 - (_QWORD)v254) >> 2;
              if (v257 <= v255 + 1)
                v257 = v255 + 1;
              if (v256 >= 0x7FFFFFFFFFFFFFF8)
                v258 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v258 = v257;
              if (v258)
              {
                v259 = (char *)sub_40FC((uint64_t)(v80 + 363), v258);
                v82 = (char *)v80[362];
                v254 = (char *)v80[361];
              }
              else
              {
                v259 = 0;
              }
              v390 = &v259[8 * v255];
              *(_QWORD *)v390 = v81;
              v84 = v390 + 8;
              while (v82 != v254)
              {
                v391 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[361] = v390;
              v80[362] = v84;
              v80[363] = &v259[8 * v258];
              if (v254)
                operator delete(v254);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[362] = v84;
            break;
          case 'Y':
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            v87 = (char *)v85[365];
            v88 = v85[366];
            if ((unint64_t)v87 >= v88)
            {
              v260 = (char *)v85[364];
              v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61)
                goto LABEL_594;
              v262 = v88 - (_QWORD)v260;
              v263 = (uint64_t)(v88 - (_QWORD)v260) >> 2;
              if (v263 <= v261 + 1)
                v263 = v261 + 1;
              if (v262 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v263;
              if (v264)
              {
                v265 = (char *)sub_40FC((uint64_t)(v85 + 366), v264);
                v87 = (char *)v85[365];
                v260 = (char *)v85[364];
              }
              else
              {
                v265 = 0;
              }
              v392 = &v265[8 * v261];
              *(_QWORD *)v392 = v86;
              v89 = v392 + 8;
              while (v87 != v260)
              {
                v393 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[364] = v392;
              v85[365] = v89;
              v85[366] = &v265[8 * v264];
              if (v260)
                operator delete(v260);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[365] = v89;
            break;
          case 'Z':
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            v92 = (char *)v90[368];
            v93 = v90[369];
            if ((unint64_t)v92 >= v93)
            {
              v266 = (char *)v90[367];
              v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61)
                goto LABEL_594;
              v268 = v93 - (_QWORD)v266;
              v269 = (uint64_t)(v93 - (_QWORD)v266) >> 2;
              if (v269 <= v267 + 1)
                v269 = v267 + 1;
              if (v268 >= 0x7FFFFFFFFFFFFFF8)
                v270 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v270 = v269;
              if (v270)
              {
                v271 = (char *)sub_40FC((uint64_t)(v90 + 369), v270);
                v92 = (char *)v90[368];
                v266 = (char *)v90[367];
              }
              else
              {
                v271 = 0;
              }
              v394 = &v271[8 * v267];
              *(_QWORD *)v394 = v91;
              v94 = v394 + 8;
              while (v92 != v266)
              {
                v395 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[367] = v394;
              v90[368] = v94;
              v90[369] = &v271[8 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[368] = v94;
            break;
          case '[':
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 62) & 0x1FFF;
            v97 = (char *)v95[371];
            v98 = v95[372];
            if ((unint64_t)v97 >= v98)
            {
              v272 = (char *)v95[370];
              v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61)
                goto LABEL_594;
              v274 = v98 - (_QWORD)v272;
              v275 = (uint64_t)(v98 - (_QWORD)v272) >> 2;
              if (v275 <= v273 + 1)
                v275 = v273 + 1;
              if (v274 >= 0x7FFFFFFFFFFFFFF8)
                v276 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v276 = v275;
              if (v276)
              {
                v277 = (char *)sub_40FC((uint64_t)(v95 + 372), v276);
                v97 = (char *)v95[371];
                v272 = (char *)v95[370];
              }
              else
              {
                v277 = 0;
              }
              v396 = &v277[8 * v273];
              *(_QWORD *)v396 = v96;
              v99 = v396 + 8;
              while (v97 != v272)
              {
                v397 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[370] = v396;
              v95[371] = v99;
              v95[372] = &v277[8 * v276];
              if (v272)
                operator delete(v272);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[371] = v99;
            break;
          case '\\':
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 46) & 0x1FFF;
            v102 = (char *)v100[374];
            v103 = v100[375];
            if ((unint64_t)v102 >= v103)
            {
              v278 = (char *)v100[373];
              v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61)
                goto LABEL_594;
              v280 = v103 - (_QWORD)v278;
              v281 = (uint64_t)(v103 - (_QWORD)v278) >> 2;
              if (v281 <= v279 + 1)
                v281 = v279 + 1;
              if (v280 >= 0x7FFFFFFFFFFFFFF8)
                v282 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v282 = v281;
              if (v282)
              {
                v283 = (char *)sub_40FC((uint64_t)(v100 + 375), v282);
                v102 = (char *)v100[374];
                v278 = (char *)v100[373];
              }
              else
              {
                v283 = 0;
              }
              v398 = &v283[8 * v279];
              *(_QWORD *)v398 = v101;
              v104 = v398 + 8;
              while (v102 != v278)
              {
                v399 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[373] = v398;
              v100[374] = v104;
              v100[375] = &v283[8 * v282];
              if (v278)
                operator delete(v278);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[374] = v104;
            break;
          case ']':
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            v107 = (char *)v105[377];
            v108 = v105[378];
            if ((unint64_t)v107 >= v108)
            {
              v284 = (char *)v105[376];
              v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61)
                goto LABEL_594;
              v286 = v108 - (_QWORD)v284;
              v287 = (uint64_t)(v108 - (_QWORD)v284) >> 2;
              if (v287 <= v285 + 1)
                v287 = v285 + 1;
              if (v286 >= 0x7FFFFFFFFFFFFFF8)
                v288 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v288 = v287;
              if (v288)
              {
                v289 = (char *)sub_40FC((uint64_t)(v105 + 378), v288);
                v107 = (char *)v105[377];
                v284 = (char *)v105[376];
              }
              else
              {
                v289 = 0;
              }
              v400 = &v289[8 * v285];
              *(_QWORD *)v400 = v106;
              v109 = v400 + 8;
              while (v107 != v284)
              {
                v401 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[376] = v400;
              v105[377] = v109;
              v105[378] = &v289[8 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[377] = v109;
            break;
          case '^':
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            v112 = (char *)v110[380];
            v113 = v110[381];
            if ((unint64_t)v112 >= v113)
            {
              v290 = (char *)v110[379];
              v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61)
                goto LABEL_594;
              v292 = v113 - (_QWORD)v290;
              v293 = (uint64_t)(v113 - (_QWORD)v290) >> 2;
              if (v293 <= v291 + 1)
                v293 = v291 + 1;
              if (v292 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v293;
              if (v294)
              {
                v295 = (char *)sub_40FC((uint64_t)(v110 + 381), v294);
                v112 = (char *)v110[380];
                v290 = (char *)v110[379];
              }
              else
              {
                v295 = 0;
              }
              v402 = &v295[8 * v291];
              *(_QWORD *)v402 = v111;
              v114 = v402 + 8;
              while (v112 != v290)
              {
                v403 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[379] = v402;
              v110[380] = v114;
              v110[381] = &v295[8 * v294];
              if (v290)
                operator delete(v290);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[380] = v114;
            break;
          case '_':
            v115 = *(_QWORD **)a1[2];
            v116 = *(_WORD *)(a1[3] + 64) & 0x1FFF;
            v117 = (char *)v115[383];
            v118 = v115[384];
            if ((unint64_t)v117 >= v118)
            {
              v296 = (char *)v115[382];
              v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61)
                goto LABEL_594;
              v298 = v118 - (_QWORD)v296;
              v299 = (uint64_t)(v118 - (_QWORD)v296) >> 2;
              if (v299 <= v297 + 1)
                v299 = v297 + 1;
              if (v298 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v299;
              if (v300)
              {
                v301 = (char *)sub_40FC((uint64_t)(v115 + 384), v300);
                v117 = (char *)v115[383];
                v296 = (char *)v115[382];
              }
              else
              {
                v301 = 0;
              }
              v404 = &v301[8 * v297];
              *(_QWORD *)v404 = v116;
              v119 = v404 + 8;
              while (v117 != v296)
              {
                v405 = *((_QWORD *)v117 - 1);
                v117 -= 8;
                *((_QWORD *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[382] = v404;
              v115[383] = v119;
              v115[384] = &v301[8 * v300];
              if (v296)
                operator delete(v296);
            }
            else
            {
              *(_QWORD *)v117 = v116;
              v119 = v117 + 8;
            }
            v115[383] = v119;
            break;
            v120 = *(_QWORD **)a1[2];
            v121 = *(_WORD *)(a1[3] + 48) & 0x1FFF;
            v122 = (char *)v120[386];
            v123 = v120[387];
            if ((unint64_t)v122 >= v123)
            {
              v302 = (char *)v120[385];
              v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61)
                goto LABEL_594;
              v304 = v123 - (_QWORD)v302;
              v305 = (uint64_t)(v123 - (_QWORD)v302) >> 2;
              if (v305 <= v303 + 1)
                v305 = v303 + 1;
              if (v304 >= 0x7FFFFFFFFFFFFFF8)
                v306 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v306 = v305;
              if (v306)
              {
                v307 = (char *)sub_40FC((uint64_t)(v120 + 387), v306);
                v122 = (char *)v120[386];
                v302 = (char *)v120[385];
              }
              else
              {
                v307 = 0;
              }
              v406 = &v307[8 * v303];
              *(_QWORD *)v406 = v121;
              v124 = v406 + 8;
              while (v122 != v302)
              {
                v407 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[385] = v406;
              v120[386] = v124;
              v120[387] = &v307[8 * v306];
              if (v302)
                operator delete(v302);
            }
            else
            {
              *(_QWORD *)v122 = v121;
              v124 = v122 + 8;
            }
            v120[386] = v124;
            break;
          case 'a':
            v125 = *(_QWORD **)a1[2];
            v126 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v127 = (char *)v125[389];
            v128 = v125[390];
            if ((unint64_t)v127 >= v128)
            {
              v308 = (char *)v125[388];
              v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61)
                goto LABEL_594;
              v310 = v128 - (_QWORD)v308;
              v311 = (uint64_t)(v128 - (_QWORD)v308) >> 2;
              if (v311 <= v309 + 1)
                v311 = v309 + 1;
              if (v310 >= 0x7FFFFFFFFFFFFFF8)
                v312 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v312 = v311;
              if (v312)
              {
                v313 = (char *)sub_40FC((uint64_t)(v125 + 390), v312);
                v127 = (char *)v125[389];
                v308 = (char *)v125[388];
              }
              else
              {
                v313 = 0;
              }
              v408 = &v313[8 * v309];
              *(_QWORD *)v408 = v126;
              v129 = v408 + 8;
              while (v127 != v308)
              {
                v409 = *((_QWORD *)v127 - 1);
                v127 -= 8;
                *((_QWORD *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[388] = v408;
              v125[389] = v129;
              v125[390] = &v313[8 * v312];
              if (v308)
                operator delete(v308);
            }
            else
            {
              *(_QWORD *)v127 = v126;
              v129 = v127 + 8;
            }
            v125[389] = v129;
            break;
          case 'b':
            v130 = *(_QWORD **)a1[2];
            v131 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            v132 = (char *)v130[392];
            v133 = v130[393];
            if ((unint64_t)v132 >= v133)
            {
              v314 = (char *)v130[391];
              v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61)
                goto LABEL_594;
              v316 = v133 - (_QWORD)v314;
              v317 = (uint64_t)(v133 - (_QWORD)v314) >> 2;
              if (v317 <= v315 + 1)
                v317 = v315 + 1;
              if (v316 >= 0x7FFFFFFFFFFFFFF8)
                v318 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v318 = v317;
              if (v318)
              {
                v319 = (char *)sub_40FC((uint64_t)(v130 + 393), v318);
                v132 = (char *)v130[392];
                v314 = (char *)v130[391];
              }
              else
              {
                v319 = 0;
              }
              v410 = &v319[8 * v315];
              *(_QWORD *)v410 = v131;
              v134 = v410 + 8;
              while (v132 != v314)
              {
                v411 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[391] = v410;
              v130[392] = v134;
              v130[393] = &v319[8 * v318];
              if (v314)
                operator delete(v314);
            }
            else
            {
              *(_QWORD *)v132 = v131;
              v134 = v132 + 8;
            }
            v130[392] = v134;
            break;
          case 'c':
            v135 = *(_QWORD **)a1[2];
            v136 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            v137 = (char *)v135[395];
            v138 = v135[396];
            if ((unint64_t)v137 >= v138)
            {
              v320 = (char *)v135[394];
              v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61)
                goto LABEL_594;
              v322 = v138 - (_QWORD)v320;
              v323 = (uint64_t)(v138 - (_QWORD)v320) >> 2;
              if (v323 <= v321 + 1)
                v323 = v321 + 1;
              if (v322 >= 0x7FFFFFFFFFFFFFF8)
                v324 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v324 = v323;
              if (v324)
              {
                v325 = (char *)sub_40FC((uint64_t)(v135 + 396), v324);
                v137 = (char *)v135[395];
                v320 = (char *)v135[394];
              }
              else
              {
                v325 = 0;
              }
              v412 = &v325[8 * v321];
              *(_QWORD *)v412 = v136;
              v139 = v412 + 8;
              while (v137 != v320)
              {
                v413 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[394] = v412;
              v135[395] = v139;
              v135[396] = &v325[8 * v324];
              if (v320)
                operator delete(v320);
            }
            else
            {
              *(_QWORD *)v137 = v136;
              v139 = v137 + 8;
            }
            v135[395] = v139;
            break;
          case 'd':
            v140 = *(_QWORD **)a1[2];
            v141 = *(_WORD *)(a1[3] + 40) & 0x1FFF;
            v142 = (char *)v140[398];
            v143 = v140[399];
            if ((unint64_t)v142 >= v143)
            {
              v326 = (char *)v140[397];
              v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61)
                goto LABEL_594;
              v328 = v143 - (_QWORD)v326;
              v329 = (uint64_t)(v143 - (_QWORD)v326) >> 2;
              if (v329 <= v327 + 1)
                v329 = v327 + 1;
              if (v328 >= 0x7FFFFFFFFFFFFFF8)
                v330 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v330 = v329;
              if (v330)
              {
                v331 = (char *)sub_40FC((uint64_t)(v140 + 399), v330);
                v142 = (char *)v140[398];
                v326 = (char *)v140[397];
              }
              else
              {
                v331 = 0;
              }
              v414 = &v331[8 * v327];
              *(_QWORD *)v414 = v141;
              v144 = v414 + 8;
              while (v142 != v326)
              {
                v415 = *((_QWORD *)v142 - 1);
                v142 -= 8;
                *((_QWORD *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[397] = v414;
              v140[398] = v144;
              v140[399] = &v331[8 * v330];
              if (v326)
                operator delete(v326);
            }
            else
            {
              *(_QWORD *)v142 = v141;
              v144 = v142 + 8;
            }
            v140[398] = v144;
            break;
          case 'e':
            v145 = *(_QWORD **)a1[2];
            v146 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 24) >> 1) & 0x1FFF;
            v147 = (unint64_t *)v145[401];
            v148 = v145[402];
            if ((unint64_t)v147 >= v148)
            {
              v332 = (unint64_t *)v145[400];
              v333 = v147 - v332;
              if ((unint64_t)(v333 + 1) >> 61)
                goto LABEL_594;
              v334 = v148 - (_QWORD)v332;
              v335 = (uint64_t)(v148 - (_QWORD)v332) >> 2;
              if (v335 <= v333 + 1)
                v335 = v333 + 1;
              if (v334 >= 0x7FFFFFFFFFFFFFF8)
                v336 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v336 = v335;
              if (v336)
              {
                v337 = (char *)sub_40FC((uint64_t)(v145 + 402), v336);
                v147 = (unint64_t *)v145[401];
                v332 = (unint64_t *)v145[400];
              }
              else
              {
                v337 = 0;
              }
              v416 = (unint64_t *)&v337[8 * v333];
              *v416 = v146;
              v149 = v416 + 1;
              while (v147 != v332)
              {
                v417 = *--v147;
                *--v416 = v417;
              }
              v145[400] = v416;
              v145[401] = v149;
              v145[402] = &v337[8 * v336];
              if (v332)
                operator delete(v332);
            }
            else
            {
              *v147 = v146;
              v149 = v147 + 1;
            }
            v145[401] = v149;
            break;
          case 'f':
            v150 = *(_QWORD **)a1[2];
            v151 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            v152 = (char *)v150[404];
            v153 = v150[405];
            if ((unint64_t)v152 >= v153)
            {
              v338 = (char *)v150[403];
              v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61)
                goto LABEL_594;
              v340 = v153 - (_QWORD)v338;
              v341 = (uint64_t)(v153 - (_QWORD)v338) >> 2;
              if (v341 <= v339 + 1)
                v341 = v339 + 1;
              if (v340 >= 0x7FFFFFFFFFFFFFF8)
                v342 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v342 = v341;
              if (v342)
              {
                v343 = (char *)sub_40FC((uint64_t)(v150 + 405), v342);
                v152 = (char *)v150[404];
                v338 = (char *)v150[403];
              }
              else
              {
                v343 = 0;
              }
              v418 = &v343[8 * v339];
              *(_QWORD *)v418 = v151;
              v154 = v418 + 8;
              while (v152 != v338)
              {
                v419 = *((_QWORD *)v152 - 1);
                v152 -= 8;
                *((_QWORD *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[403] = v418;
              v150[404] = v154;
              v150[405] = &v343[8 * v342];
              if (v338)
                operator delete(v338);
            }
            else
            {
              *(_QWORD *)v152 = v151;
              v154 = v152 + 8;
            }
            v150[404] = v154;
            break;
          case 'g':
            v155 = *(_QWORD **)a1[2];
            v156 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            v157 = (char *)v155[407];
            v158 = v155[408];
            if ((unint64_t)v157 >= v158)
            {
              v344 = (char *)v155[406];
              v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61)
                goto LABEL_594;
              v346 = v158 - (_QWORD)v344;
              v347 = (uint64_t)(v158 - (_QWORD)v344) >> 2;
              if (v347 <= v345 + 1)
                v347 = v345 + 1;
              if (v346 >= 0x7FFFFFFFFFFFFFF8)
                v348 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v348 = v347;
              if (v348)
              {
                v349 = (char *)sub_40FC((uint64_t)(v155 + 408), v348);
                v157 = (char *)v155[407];
                v344 = (char *)v155[406];
              }
              else
              {
                v349 = 0;
              }
              v420 = &v349[8 * v345];
              *(_QWORD *)v420 = v156;
              v159 = v420 + 8;
              while (v157 != v344)
              {
                v421 = *((_QWORD *)v157 - 1);
                v157 -= 8;
                *((_QWORD *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[406] = v420;
              v155[407] = v159;
              v155[408] = &v349[8 * v348];
              if (v344)
                operator delete(v344);
            }
            else
            {
              *(_QWORD *)v157 = v156;
              v159 = v157 + 8;
            }
            v155[407] = v159;
            break;
          case 'h':
            v160 = *(_QWORD **)a1[2];
            v161 = *(_WORD *)(a1[3] + 42) & 0x1FFF;
            v162 = (char *)v160[410];
            v163 = v160[411];
            if ((unint64_t)v162 >= v163)
            {
              v350 = (char *)v160[409];
              v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61)
                goto LABEL_594;
              v352 = v163 - (_QWORD)v350;
              v353 = (uint64_t)(v163 - (_QWORD)v350) >> 2;
              if (v353 <= v351 + 1)
                v353 = v351 + 1;
              if (v352 >= 0x7FFFFFFFFFFFFFF8)
                v354 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v354 = v353;
              if (v354)
              {
                v355 = (char *)sub_40FC((uint64_t)(v160 + 411), v354);
                v162 = (char *)v160[410];
                v350 = (char *)v160[409];
              }
              else
              {
                v355 = 0;
              }
              v422 = &v355[8 * v351];
              *(_QWORD *)v422 = v161;
              v164 = v422 + 8;
              while (v162 != v350)
              {
                v423 = *((_QWORD *)v162 - 1);
                v162 -= 8;
                *((_QWORD *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[409] = v422;
              v160[410] = v164;
              v160[411] = &v355[8 * v354];
              if (v350)
                operator delete(v350);
            }
            else
            {
              *(_QWORD *)v162 = v161;
              v164 = v162 + 8;
            }
            v160[410] = v164;
            break;
          case 'i':
            v165 = *(_QWORD **)a1[2];
            v166 = *(_WORD *)(a1[3] + 26) & 0x1FFF;
            v167 = (char *)v165[413];
            v168 = v165[414];
            if ((unint64_t)v167 >= v168)
            {
              v356 = (char *)v165[412];
              v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61)
LABEL_594:
                sub_4074();
              v358 = v168 - (_QWORD)v356;
              v359 = (uint64_t)(v168 - (_QWORD)v356) >> 2;
              if (v359 <= v357 + 1)
                v359 = v357 + 1;
              if (v358 >= 0x7FFFFFFFFFFFFFF8)
                v360 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v360 = v359;
              if (v360)
              {
                v361 = (char *)sub_40FC((uint64_t)(v165 + 414), v360);
                v167 = (char *)v165[413];
                v356 = (char *)v165[412];
              }
              else
              {
                v361 = 0;
              }
              v424 = &v361[8 * v357];
              *(_QWORD *)v424 = v166;
              v169 = v424 + 8;
              while (v167 != v356)
              {
                v425 = *((_QWORD *)v167 - 1);
                v167 -= 8;
                *((_QWORD *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[412] = v424;
              v165[413] = v169;
              v165[414] = &v361[8 * v360];
              if (v356)
                operator delete(v356);
            }
            else
            {
              *(_QWORD *)v167 = v166;
              v169 = v167 + 8;
            }
            v165[413] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_164A70(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  int *v102;
  int **v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;

  v4 = *a1;
  if (*a2 == 1)
  {
    v103 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v102 = *v103;
    v104 = (char *)v103[1] - (char *)*v103;
    if (v104)
    {
      v105 = v104 >> 2;
      if (v105 <= 1)
        v105 = 1;
      do
      {
        v106 = *v102++;
        switch(v106)
        {
          case 'C':
            v107 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2392);
            goto LABEL_140;
          case 'D':
            v107 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2416);
            goto LABEL_140;
          case 'E':
            v107 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2440);
            goto LABEL_140;
          case 'F':
            v107 = (*(_QWORD *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2464);
            goto LABEL_140;
          case 'G':
            v107 = *(_QWORD *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2488);
            goto LABEL_140;
          case 'H':
            v107 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2512);
            goto LABEL_140;
          case 'I':
            v107 = *(unsigned int *)(a1[3] + 24);
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2536);
LABEL_140:
            *(_QWORD *)(*v108 - 8) += v107;
            break;
          default:
            break;
        }
        --v105;
      }
      while (v105);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'C':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v12 = (char *)v10[299];
            v13 = v10[300];
            if ((unint64_t)v12 >= v13)
            {
              v46 = (char *)v10[298];
              v47 = (v12 - v46) >> 3;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_144;
              v48 = v13 - (_QWORD)v46;
              v49 = (uint64_t)(v13 - (_QWORD)v46) >> 2;
              if (v49 <= v47 + 1)
                v49 = v47 + 1;
              if (v48 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v49;
              if (v50)
              {
                v51 = (char *)sub_40FC((uint64_t)(v10 + 300), v50);
                v12 = (char *)v10[299];
                v46 = (char *)v10[298];
              }
              else
              {
                v51 = 0;
              }
              v88 = &v51[8 * v47];
              *(_QWORD *)v88 = v11;
              v14 = v88 + 8;
              while (v12 != v46)
              {
                v89 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v88 - 1) = v89;
                v88 -= 8;
              }
              v10[298] = v88;
              v10[299] = v14;
              v10[300] = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[299] = v14;
            break;
          case 'D':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v17 = (char *)v15[302];
            v18 = v15[303];
            if ((unint64_t)v17 >= v18)
            {
              v52 = (char *)v15[301];
              v53 = (v17 - v52) >> 3;
              if ((unint64_t)(v53 + 1) >> 61)
                goto LABEL_144;
              v54 = v18 - (_QWORD)v52;
              v55 = (uint64_t)(v18 - (_QWORD)v52) >> 2;
              if (v55 <= v53 + 1)
                v55 = v53 + 1;
              if (v54 >= 0x7FFFFFFFFFFFFFF8)
                v56 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v56 = v55;
              if (v56)
              {
                v57 = (char *)sub_40FC((uint64_t)(v15 + 303), v56);
                v17 = (char *)v15[302];
                v52 = (char *)v15[301];
              }
              else
              {
                v57 = 0;
              }
              v90 = &v57[8 * v53];
              *(_QWORD *)v90 = v16;
              v19 = v90 + 8;
              while (v17 != v52)
              {
                v91 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v90 - 1) = v91;
                v90 -= 8;
              }
              v15[301] = v90;
              v15[302] = v19;
              v15[303] = &v57[8 * v56];
              if (v52)
                operator delete(v52);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[302] = v19;
            break;
          case 'E':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v22 = (char *)v20[305];
            v23 = v20[306];
            if ((unint64_t)v22 >= v23)
            {
              v58 = (char *)v20[304];
              v59 = (v22 - v58) >> 3;
              if ((unint64_t)(v59 + 1) >> 61)
                goto LABEL_144;
              v60 = v23 - (_QWORD)v58;
              v61 = (uint64_t)(v23 - (_QWORD)v58) >> 2;
              if (v61 <= v59 + 1)
                v61 = v59 + 1;
              if (v60 >= 0x7FFFFFFFFFFFFFF8)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v61;
              if (v62)
              {
                v63 = (char *)sub_40FC((uint64_t)(v20 + 306), v62);
                v22 = (char *)v20[305];
                v58 = (char *)v20[304];
              }
              else
              {
                v63 = 0;
              }
              v92 = &v63[8 * v59];
              *(_QWORD *)v92 = v21;
              v24 = v92 + 8;
              while (v22 != v58)
              {
                v93 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v92 - 1) = v93;
                v92 -= 8;
              }
              v20[304] = v92;
              v20[305] = v24;
              v20[306] = &v63[8 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[305] = v24;
            break;
          case 'F':
            v25 = *(_QWORD **)a1[2];
            v26 = (*(_QWORD *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            v27 = (uint64_t *)v25[308];
            v28 = v25[309];
            if ((unint64_t)v27 >= v28)
            {
              v64 = (uint64_t *)v25[307];
              v65 = v27 - v64;
              if ((unint64_t)(v65 + 1) >> 61)
                goto LABEL_144;
              v66 = v28 - (_QWORD)v64;
              v67 = (uint64_t)(v28 - (_QWORD)v64) >> 2;
              if (v67 <= v65 + 1)
                v67 = v65 + 1;
              if (v66 >= 0x7FFFFFFFFFFFFFF8)
                v68 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v68 = v67;
              if (v68)
              {
                v69 = (char *)sub_40FC((uint64_t)(v25 + 309), v68);
                v27 = (uint64_t *)v25[308];
                v64 = (uint64_t *)v25[307];
              }
              else
              {
                v69 = 0;
              }
              v94 = (uint64_t *)&v69[8 * v65];
              *v94 = v26;
              v29 = v94 + 1;
              while (v27 != v64)
              {
                v95 = *--v27;
                *--v94 = v95;
              }
              v25[307] = v94;
              v25[308] = v29;
              v25[309] = &v69[8 * v68];
              if (v64)
                operator delete(v64);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[308] = v29;
            break;
          case 'G':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_QWORD *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            v32 = (uint64_t *)v30[311];
            v33 = v30[312];
            if ((unint64_t)v32 >= v33)
            {
              v70 = (uint64_t *)v30[310];
              v71 = v32 - v70;
              if ((unint64_t)(v71 + 1) >> 61)
                goto LABEL_144;
              v72 = v33 - (_QWORD)v70;
              v73 = (uint64_t)(v33 - (_QWORD)v70) >> 2;
              if (v73 <= v71 + 1)
                v73 = v71 + 1;
              if (v72 >= 0x7FFFFFFFFFFFFFF8)
                v74 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v74 = v73;
              if (v74)
              {
                v75 = (char *)sub_40FC((uint64_t)(v30 + 312), v74);
                v32 = (uint64_t *)v30[311];
                v70 = (uint64_t *)v30[310];
              }
              else
              {
                v75 = 0;
              }
              v96 = (uint64_t *)&v75[8 * v71];
              *v96 = v31;
              v34 = v96 + 1;
              while (v32 != v70)
              {
                v97 = *--v32;
                *--v96 = v97;
              }
              v30[310] = v96;
              v30[311] = v34;
              v30[312] = &v75[8 * v74];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[311] = v34;
            break;
          case 'H':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v37 = (char *)v35[314];
            v38 = v35[315];
            if ((unint64_t)v37 >= v38)
            {
              v76 = (char *)v35[313];
              v77 = (v37 - v76) >> 3;
              if ((unint64_t)(v77 + 1) >> 61)
                goto LABEL_144;
              v78 = v38 - (_QWORD)v76;
              v79 = (uint64_t)(v38 - (_QWORD)v76) >> 2;
              if (v79 <= v77 + 1)
                v79 = v77 + 1;
              if (v78 >= 0x7FFFFFFFFFFFFFF8)
                v80 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v80 = v79;
              if (v80)
              {
                v81 = (char *)sub_40FC((uint64_t)(v35 + 315), v80);
                v37 = (char *)v35[314];
                v76 = (char *)v35[313];
              }
              else
              {
                v81 = 0;
              }
              v98 = &v81[8 * v77];
              *(_QWORD *)v98 = v36;
              v39 = v98 + 8;
              while (v37 != v76)
              {
                v99 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v98 - 1) = v99;
                v98 -= 8;
              }
              v35[313] = v98;
              v35[314] = v39;
              v35[315] = &v81[8 * v80];
              if (v76)
                operator delete(v76);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[314] = v39;
            break;
          case 'I':
            v40 = a1[2];
            v41 = *(_QWORD **)v40;
            v42 = *(unsigned int *)(a1[3] + 24);
            v43 = *(char **)(*(_QWORD *)v40 + 2536);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 2544);
            if ((unint64_t)v43 >= v44)
            {
              v82 = (char *)v41[316];
              v83 = (v43 - v82) >> 3;
              if ((unint64_t)(v83 + 1) >> 61)
LABEL_144:
                sub_4074();
              v84 = v44 - (_QWORD)v82;
              v85 = (uint64_t)(v44 - (_QWORD)v82) >> 2;
              if (v85 <= v83 + 1)
                v85 = v83 + 1;
              if (v84 >= 0x7FFFFFFFFFFFFFF8)
                v86 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v86 = v85;
              if (v86)
              {
                v87 = (char *)sub_40FC((uint64_t)(v41 + 318), v86);
                v43 = (char *)v41[317];
                v82 = (char *)v41[316];
              }
              else
              {
                v87 = 0;
              }
              v100 = &v87[8 * v83];
              *(_QWORD *)v100 = v42;
              v45 = v100 + 8;
              while (v43 != v82)
              {
                v101 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v100 - 1) = v101;
                v100 -= 8;
              }
              v41[316] = v100;
              v41[317] = v45;
              v41[318] = &v87[8 * v86];
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[317] = v45;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1651A4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int *v37;
  int **v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  _WORD *v43;
  _QWORD *v44;

  v4 = *a1;
  if (*a2 == 1)
  {
    v38 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v37 = *v38;
    v39 = (char *)v38[1] - (char *)*v38;
    if (!v39)
      goto LABEL_54;
    v40 = v39 >> 2;
    if (v40 <= 1)
      v40 = 1;
    while (1)
    {
      v42 = *v37++;
      v41 = v42;
      if (v42 == 66)
        break;
      if (v41 == 65)
      {
        v43 = (_WORD *)(a1[3] + 26);
        v44 = (_QWORD *)(*(_QWORD *)a1[2] + 2344);
LABEL_52:
        *(_QWORD *)(*v44 - 8) += *v43 & 0x7FFF;
      }
      if (!--v40)
        goto LABEL_54;
    }
    v43 = (_WORD *)(a1[3] + 24);
    v44 = (_QWORD *)(*(_QWORD *)a1[2] + 2368);
    goto LABEL_52;
  }
  if (*a2)
    return;
  v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
  v6 = v5[1] - *v5;
  if (v6)
  {
    v7 = 0;
    v8 = v6 >> 2;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    do
    {
      v10 = *(_DWORD *)(*v5 + 4 * v7);
      if (v10 == 66)
      {
        v16 = *(_QWORD **)a1[2];
        v17 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
        v18 = (char *)v16[296];
        v19 = v16[297];
        if ((unint64_t)v18 >= v19)
        {
          v27 = (char *)v16[295];
          v28 = (v18 - v27) >> 3;
          if ((unint64_t)(v28 + 1) >> 61)
LABEL_56:
            sub_4074();
          v29 = v19 - (_QWORD)v27;
          v30 = (uint64_t)(v19 - (_QWORD)v27) >> 2;
          if (v30 <= v28 + 1)
            v30 = v28 + 1;
          if (v29 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
          {
            v32 = (char *)sub_40FC((uint64_t)(v16 + 297), v31);
            v18 = (char *)v16[296];
            v27 = (char *)v16[295];
          }
          else
          {
            v32 = 0;
          }
          v35 = &v32[8 * v28];
          *(_QWORD *)v35 = v17;
          v20 = v35 + 8;
          while (v18 != v27)
          {
            v36 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v35 - 1) = v36;
            v35 -= 8;
          }
          v16[295] = v35;
          v16[296] = v20;
          v16[297] = &v32[8 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v18 = v17;
          v20 = v18 + 8;
        }
        v16[296] = v20;
      }
      else if (v10 == 65)
      {
        v11 = *(_QWORD **)a1[2];
        v12 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
        v13 = (char *)v11[293];
        v14 = v11[294];
        if ((unint64_t)v13 >= v14)
        {
          v21 = (char *)v11[292];
          v22 = (v13 - v21) >> 3;
          if ((unint64_t)(v22 + 1) >> 61)
            goto LABEL_56;
          v23 = v14 - (_QWORD)v21;
          v24 = (uint64_t)(v14 - (_QWORD)v21) >> 2;
          if (v24 <= v22 + 1)
            v24 = v22 + 1;
          if (v23 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            v26 = (char *)sub_40FC((uint64_t)(v11 + 294), v25);
            v13 = (char *)v11[293];
            v21 = (char *)v11[292];
          }
          else
          {
            v26 = 0;
          }
          v33 = &v26[8 * v22];
          *(_QWORD *)v33 = v12;
          v15 = v33 + 8;
          while (v13 != v21)
          {
            v34 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v33 - 1) = v34;
            v33 -= 8;
          }
          v11[292] = v33;
          v11[293] = v15;
          v11[294] = &v26[8 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v13 = v12;
          v15 = v13 + 8;
        }
        v11[293] = v15;
      }
      ++v7;
    }
    while (v7 != v9);
  }
LABEL_54:
  *a2 = 1;
}

void sub_165468(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  int *v143;
  int **v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  _QWORD *v149;

  v4 = *a1;
  if (*a2 == 1)
  {
    v144 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v143 = *v144;
    v145 = (char *)v144[1] - (char *)*v144;
    if (v145)
    {
      v146 = v145 >> 2;
      if ((unint64_t)(v145 >> 2) <= 1)
        v146 = 1;
      do
      {
        v147 = *v143++;
        switch(v147)
        {
          case 134:
            v148 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4000);
            goto LABEL_194;
          case 135:
            v148 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4024);
            goto LABEL_194;
          case 136:
            v148 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4048);
            goto LABEL_194;
          case 137:
            v148 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4072);
            goto LABEL_194;
          case 138:
            v148 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4096);
            goto LABEL_194;
          case 139:
            v148 = *(unsigned __int16 *)(a1[3] + 46);
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4120);
            goto LABEL_194;
          case 140:
            v148 = *(unsigned __int16 *)(a1[3] + 44);
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4144);
            goto LABEL_194;
          case 141:
            v148 = *(unsigned __int16 *)(a1[3] + 28);
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4168);
            goto LABEL_194;
          case 142:
            v148 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4192);
            goto LABEL_194;
          case 143:
            v148 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            v149 = (_QWORD *)(*(_QWORD *)a1[2] + 4216);
LABEL_194:
            *(_QWORD *)(*v149 - 8) += v148;
            break;
          default:
            break;
        }
        --v146;
      }
      while (v146);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x86:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v12 = (char *)v10[500];
            v13 = v10[501];
            if ((unint64_t)v12 >= v13)
            {
              v63 = (char *)v10[499];
              v64 = (v12 - v63) >> 3;
              if ((unint64_t)(v64 + 1) >> 61)
                goto LABEL_198;
              v65 = v13 - (_QWORD)v63;
              v66 = (uint64_t)(v13 - (_QWORD)v63) >> 2;
              if (v66 <= v64 + 1)
                v66 = v64 + 1;
              if (v65 >= 0x7FFFFFFFFFFFFFF8)
                v67 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v67 = v66;
              if (v67)
              {
                v68 = (char *)sub_40FC((uint64_t)(v10 + 501), v67);
                v12 = (char *)v10[500];
                v63 = (char *)v10[499];
              }
              else
              {
                v68 = 0;
              }
              v123 = &v68[8 * v64];
              *(_QWORD *)v123 = v11;
              v14 = v123 + 8;
              while (v12 != v63)
              {
                v124 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v123 - 1) = v124;
                v123 -= 8;
              }
              v10[499] = v123;
              v10[500] = v14;
              v10[501] = &v68[8 * v67];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[500] = v14;
            break;
          case 0x87:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[503];
            v18 = v15[504];
            if ((unint64_t)v17 >= v18)
            {
              v69 = (uint64_t *)v15[502];
              v70 = v17 - v69;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_198;
              v71 = v18 - (_QWORD)v69;
              v72 = (uint64_t)(v18 - (_QWORD)v69) >> 2;
              if (v72 <= v70 + 1)
                v72 = v70 + 1;
              if (v71 >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v72;
              if (v73)
              {
                v74 = (char *)sub_40FC((uint64_t)(v15 + 504), v73);
                v17 = (uint64_t *)v15[503];
                v69 = (uint64_t *)v15[502];
              }
              else
              {
                v74 = 0;
              }
              v125 = (uint64_t *)&v74[8 * v70];
              *v125 = v16;
              v19 = v125 + 1;
              while (v17 != v69)
              {
                v126 = *--v17;
                *--v125 = v126;
              }
              v15[502] = v125;
              v15[503] = v19;
              v15[504] = &v74[8 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[503] = v19;
            break;
          case 0x88:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v22 = (char *)v20[506];
            v23 = v20[507];
            if ((unint64_t)v22 >= v23)
            {
              v75 = (char *)v20[505];
              v76 = (v22 - v75) >> 3;
              if ((unint64_t)(v76 + 1) >> 61)
                goto LABEL_198;
              v77 = v23 - (_QWORD)v75;
              v78 = (uint64_t)(v23 - (_QWORD)v75) >> 2;
              if (v78 <= v76 + 1)
                v78 = v76 + 1;
              if (v77 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v78;
              if (v79)
              {
                v80 = (char *)sub_40FC((uint64_t)(v20 + 507), v79);
                v22 = (char *)v20[506];
                v75 = (char *)v20[505];
              }
              else
              {
                v80 = 0;
              }
              v127 = &v80[8 * v76];
              *(_QWORD *)v127 = v21;
              v24 = v127 + 8;
              while (v22 != v75)
              {
                v128 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v127 - 1) = v128;
                v127 -= 8;
              }
              v20[505] = v127;
              v20[506] = v24;
              v20[507] = &v80[8 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[506] = v24;
            break;
          case 0x89:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v27 = (uint64_t *)v25[509];
            v28 = v25[510];
            if ((unint64_t)v27 >= v28)
            {
              v81 = (uint64_t *)v25[508];
              v82 = v27 - v81;
              if ((unint64_t)(v82 + 1) >> 61)
                goto LABEL_198;
              v83 = v28 - (_QWORD)v81;
              v84 = (uint64_t)(v28 - (_QWORD)v81) >> 2;
              if (v84 <= v82 + 1)
                v84 = v82 + 1;
              if (v83 >= 0x7FFFFFFFFFFFFFF8)
                v85 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v85 = v84;
              if (v85)
              {
                v86 = (char *)sub_40FC((uint64_t)(v25 + 510), v85);
                v27 = (uint64_t *)v25[509];
                v81 = (uint64_t *)v25[508];
              }
              else
              {
                v86 = 0;
              }
              v129 = (uint64_t *)&v86[8 * v82];
              *v129 = v26;
              v29 = v129 + 1;
              while (v27 != v81)
              {
                v130 = *--v27;
                *--v129 = v130;
              }
              v25[508] = v129;
              v25[509] = v29;
              v25[510] = &v86[8 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[509] = v29;
            break;
          case 0x8A:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v32 = (uint64_t *)v30[512];
            v33 = v30[513];
            if ((unint64_t)v32 >= v33)
            {
              v87 = (uint64_t *)v30[511];
              v88 = v32 - v87;
              if ((unint64_t)(v88 + 1) >> 61)
                goto LABEL_198;
              v89 = v33 - (_QWORD)v87;
              v90 = (uint64_t)(v33 - (_QWORD)v87) >> 2;
              if (v90 <= v88 + 1)
                v90 = v88 + 1;
              if (v89 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v90;
              if (v91)
              {
                v92 = (char *)sub_40FC((uint64_t)(v30 + 513), v91);
                v32 = (uint64_t *)v30[512];
                v87 = (uint64_t *)v30[511];
              }
              else
              {
                v92 = 0;
              }
              v131 = (uint64_t *)&v92[8 * v88];
              *v131 = v31;
              v34 = v131 + 1;
              while (v32 != v87)
              {
                v132 = *--v32;
                *--v131 = v132;
              }
              v30[511] = v131;
              v30[512] = v34;
              v30[513] = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[512] = v34;
            break;
          case 0x8B:
            v35 = a1[2];
            v36 = *(_QWORD **)v35;
            v37 = *(unsigned __int16 *)(a1[3] + 46);
            v38 = *(char **)(*(_QWORD *)v35 + 4120);
            v39 = *(_QWORD *)(*(_QWORD *)v35 + 4128);
            if ((unint64_t)v38 >= v39)
            {
              v93 = (char *)v36[514];
              v94 = (v38 - v93) >> 3;
              if ((unint64_t)(v94 + 1) >> 61)
                goto LABEL_198;
              v95 = v39 - (_QWORD)v93;
              v96 = (uint64_t)(v39 - (_QWORD)v93) >> 2;
              if (v96 <= v94 + 1)
                v96 = v94 + 1;
              if (v95 >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v96;
              if (v97)
              {
                v98 = (char *)sub_40FC((uint64_t)(v36 + 516), v97);
                v38 = (char *)v36[515];
                v93 = (char *)v36[514];
              }
              else
              {
                v98 = 0;
              }
              v133 = &v98[8 * v94];
              *(_QWORD *)v133 = v37;
              v40 = v133 + 8;
              while (v38 != v93)
              {
                v134 = *((_QWORD *)v38 - 1);
                v38 -= 8;
                *((_QWORD *)v133 - 1) = v134;
                v133 -= 8;
              }
              v36[514] = v133;
              v36[515] = v40;
              v36[516] = &v98[8 * v97];
              if (v93)
                operator delete(v93);
            }
            else
            {
              *(_QWORD *)v38 = v37;
              v40 = v38 + 8;
            }
            v36[515] = v40;
            break;
          case 0x8C:
            v41 = a1[2];
            v42 = *(_QWORD **)v41;
            v43 = *(unsigned __int16 *)(a1[3] + 44);
            v44 = *(char **)(*(_QWORD *)v41 + 4144);
            v45 = *(_QWORD *)(*(_QWORD *)v41 + 4152);
            if ((unint64_t)v44 >= v45)
            {
              v99 = (char *)v42[517];
              v100 = (v44 - v99) >> 3;
              if ((unint64_t)(v100 + 1) >> 61)
                goto LABEL_198;
              v101 = v45 - (_QWORD)v99;
              v102 = (uint64_t)(v45 - (_QWORD)v99) >> 2;
              if (v102 <= v100 + 1)
                v102 = v100 + 1;
              if (v101 >= 0x7FFFFFFFFFFFFFF8)
                v103 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v103 = v102;
              if (v103)
              {
                v104 = (char *)sub_40FC((uint64_t)(v42 + 519), v103);
                v44 = (char *)v42[518];
                v99 = (char *)v42[517];
              }
              else
              {
                v104 = 0;
              }
              v135 = &v104[8 * v100];
              *(_QWORD *)v135 = v43;
              v46 = v135 + 8;
              while (v44 != v99)
              {
                v136 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v135 - 1) = v136;
                v135 -= 8;
              }
              v42[517] = v135;
              v42[518] = v46;
              v42[519] = &v104[8 * v103];
              if (v99)
                operator delete(v99);
            }
            else
            {
              *(_QWORD *)v44 = v43;
              v46 = v44 + 8;
            }
            v42[518] = v46;
            break;
          case 0x8D:
            v47 = a1[2];
            v48 = *(_QWORD **)v47;
            v49 = *(unsigned __int16 *)(a1[3] + 28);
            v50 = *(char **)(*(_QWORD *)v47 + 4168);
            v51 = *(_QWORD *)(*(_QWORD *)v47 + 4176);
            if ((unint64_t)v50 >= v51)
            {
              v105 = (char *)v48[520];
              v106 = (v50 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61)
                goto LABEL_198;
              v107 = v51 - (_QWORD)v105;
              v108 = (uint64_t)(v51 - (_QWORD)v105) >> 2;
              if (v108 <= v106 + 1)
                v108 = v106 + 1;
              if (v107 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v108;
              if (v109)
              {
                v110 = (char *)sub_40FC((uint64_t)(v48 + 522), v109);
                v50 = (char *)v48[521];
                v105 = (char *)v48[520];
              }
              else
              {
                v110 = 0;
              }
              v137 = &v110[8 * v106];
              *(_QWORD *)v137 = v49;
              v52 = v137 + 8;
              while (v50 != v105)
              {
                v138 = *((_QWORD *)v50 - 1);
                v50 -= 8;
                *((_QWORD *)v137 - 1) = v138;
                v137 -= 8;
              }
              v48[520] = v137;
              v48[521] = v52;
              v48[522] = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_QWORD *)v50 = v49;
              v52 = v50 + 8;
            }
            v48[521] = v52;
            break;
          case 0x8E:
            v53 = *(_QWORD **)a1[2];
            v54 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            v55 = (uint64_t *)v53[524];
            v56 = v53[525];
            if ((unint64_t)v55 >= v56)
            {
              v111 = (uint64_t *)v53[523];
              v112 = v55 - v111;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_198;
              v113 = v56 - (_QWORD)v111;
              v114 = (uint64_t)(v56 - (_QWORD)v111) >> 2;
              if (v114 <= v112 + 1)
                v114 = v112 + 1;
              if (v113 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                v116 = (char *)sub_40FC((uint64_t)(v53 + 525), v115);
                v55 = (uint64_t *)v53[524];
                v111 = (uint64_t *)v53[523];
              }
              else
              {
                v116 = 0;
              }
              v139 = (uint64_t *)&v116[8 * v112];
              *v139 = v54;
              v57 = v139 + 1;
              while (v55 != v111)
              {
                v140 = *--v55;
                *--v139 = v140;
              }
              v53[523] = v139;
              v53[524] = v57;
              v53[525] = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *v55 = v54;
              v57 = v55 + 1;
            }
            v53[524] = v57;
            break;
          case 0x8F:
            v58 = *(_QWORD **)a1[2];
            v59 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            v60 = (uint64_t *)v58[527];
            v61 = v58[528];
            if ((unint64_t)v60 >= v61)
            {
              v117 = (uint64_t *)v58[526];
              v118 = v60 - v117;
              if ((unint64_t)(v118 + 1) >> 61)
LABEL_198:
                sub_4074();
              v119 = v61 - (_QWORD)v117;
              v120 = (uint64_t)(v61 - (_QWORD)v117) >> 2;
              if (v120 <= v118 + 1)
                v120 = v118 + 1;
              if (v119 >= 0x7FFFFFFFFFFFFFF8)
                v121 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                v122 = (char *)sub_40FC((uint64_t)(v58 + 528), v121);
                v60 = (uint64_t *)v58[527];
                v117 = (uint64_t *)v58[526];
              }
              else
              {
                v122 = 0;
              }
              v141 = (uint64_t *)&v122[8 * v118];
              *v141 = v59;
              v62 = v141 + 1;
              while (v60 != v117)
              {
                v142 = *--v60;
                *--v141 = v142;
              }
              v58[526] = v141;
              v58[527] = v62;
              v58[528] = &v122[8 * v121];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *v60 = v59;
              v62 = v60 + 1;
            }
            v58[527] = v62;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_165E60(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  char *v237;
  uint64_t *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  uint64_t *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  int *v328;
  int **v329;
  uint64_t v330;
  unint64_t v331;
  int v332;
  unint64_t v333;
  _QWORD *v334;

  v4 = *a1;
  if (*a2 == 1)
  {
    v329 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v328 = *v329;
    v330 = (char *)v329[1] - (char *)*v329;
    if (v330)
    {
      v331 = v330 >> 2;
      if (v331 <= 1)
        v331 = 1;
      do
      {
        v332 = *v328++;
        switch(v332)
        {
          case 106:
            v333 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3328);
            goto LABEL_446;
          case 107:
            v333 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3352);
            goto LABEL_446;
          case 108:
            v333 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3376);
            goto LABEL_446;
          case 109:
            v333 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3400);
            goto LABEL_446;
          case 110:
            v333 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3424);
            goto LABEL_446;
          case 111:
            v333 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3448);
            goto LABEL_446;
          case 112:
            v333 = *(unsigned __int16 *)(a1[3] + 60);
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3472);
            goto LABEL_446;
          case 113:
            v333 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3496);
            goto LABEL_446;
          case 114:
            v333 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3520);
            goto LABEL_446;
          case 115:
            v333 = *(_DWORD *)(a1[3] + 88) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3544);
            goto LABEL_446;
          case 116:
            v333 = *(_DWORD *)(a1[3] + 80) & 0x7FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3568);
            goto LABEL_446;
          case 117:
            v333 = *(_DWORD *)(a1[3] + 72) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3592);
            goto LABEL_446;
          case 118:
            v333 = *(_DWORD *)(a1[3] + 76) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3616);
            goto LABEL_446;
          case 119:
            v333 = *(unsigned __int16 *)(a1[3] + 64);
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3640);
            goto LABEL_446;
          case 120:
            v333 = *(unsigned __int16 *)(a1[3] + 66);
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3664);
            goto LABEL_446;
          case 121:
            v333 = *(unsigned __int16 *)(a1[3] + 84);
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3688);
            goto LABEL_446;
          case 122:
            v333 = *(unsigned __int16 *)(a1[3] + 86);
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3712);
            goto LABEL_446;
          case 123:
            v333 = *(_DWORD *)(a1[3] + 56) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3736);
            goto LABEL_446;
          case 124:
            v333 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3760);
            goto LABEL_446;
          case 125:
            v333 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3784);
            goto LABEL_446;
          case 126:
            v333 = *(unsigned __int16 *)(a1[3] + 62);
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3808);
            goto LABEL_446;
          case 127:
            v333 = (*(unsigned __int16 *)(a1[3] + 68) | (*(unsigned __int8 *)(a1[3] + 70) << 16)) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3832);
            goto LABEL_446;
          case 128:
            v333 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3856);
            goto LABEL_446;
          case 129:
            v333 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            v334 = (_QWORD *)(*(_QWORD *)a1[2] + 3880);
LABEL_446:
            *(_QWORD *)(*v334 - 8) += v333;
            break;
          default:
            break;
        }
        --v331;
      }
      while (v331);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x6A:
            v10 = *(_QWORD **)a1[2];
            v11 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            v12 = (unint64_t *)v10[416];
            v13 = v10[417];
            if ((unint64_t)v12 >= v13)
            {
              v136 = (unint64_t *)v10[415];
              v137 = v12 - v136;
              if ((unint64_t)(v137 + 1) >> 61)
                goto LABEL_450;
              v138 = v13 - (_QWORD)v136;
              v139 = (uint64_t)(v13 - (_QWORD)v136) >> 2;
              if (v139 <= v137 + 1)
                v139 = v137 + 1;
              if (v138 >= 0x7FFFFFFFFFFFFFF8)
                v140 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v140 = v139;
              if (v140)
              {
                v141 = (char *)sub_40FC((uint64_t)(v10 + 417), v140);
                v12 = (unint64_t *)v10[416];
                v136 = (unint64_t *)v10[415];
              }
              else
              {
                v141 = 0;
              }
              v280 = (unint64_t *)&v141[8 * v137];
              *v280 = v11;
              v14 = v280 + 1;
              while (v12 != v136)
              {
                v281 = *--v12;
                *--v280 = v281;
              }
              v10[415] = v280;
              v10[416] = v14;
              v10[417] = &v141[8 * v140];
              if (v136)
                operator delete(v136);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[416] = v14;
            break;
          case 0x6B:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[419];
            v18 = v15[420];
            if ((unint64_t)v17 >= v18)
            {
              v142 = (uint64_t *)v15[418];
              v143 = v17 - v142;
              if ((unint64_t)(v143 + 1) >> 61)
                goto LABEL_450;
              v144 = v18 - (_QWORD)v142;
              v145 = (uint64_t)(v18 - (_QWORD)v142) >> 2;
              if (v145 <= v143 + 1)
                v145 = v143 + 1;
              if (v144 >= 0x7FFFFFFFFFFFFFF8)
                v146 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v146 = v145;
              if (v146)
              {
                v147 = (char *)sub_40FC((uint64_t)(v15 + 420), v146);
                v17 = (uint64_t *)v15[419];
                v142 = (uint64_t *)v15[418];
              }
              else
              {
                v147 = 0;
              }
              v282 = (uint64_t *)&v147[8 * v143];
              *v282 = v16;
              v19 = v282 + 1;
              while (v17 != v142)
              {
                v283 = *--v17;
                *--v282 = v283;
              }
              v15[418] = v282;
              v15[419] = v19;
              v15[420] = &v147[8 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[419] = v19;
            break;
          case 0x6C:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v22 = (char *)v20[422];
            v23 = v20[423];
            if ((unint64_t)v22 >= v23)
            {
              v148 = (char *)v20[421];
              v149 = (v22 - v148) >> 3;
              if ((unint64_t)(v149 + 1) >> 61)
                goto LABEL_450;
              v150 = v23 - (_QWORD)v148;
              v151 = (uint64_t)(v23 - (_QWORD)v148) >> 2;
              if (v151 <= v149 + 1)
                v151 = v149 + 1;
              if (v150 >= 0x7FFFFFFFFFFFFFF8)
                v152 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v152 = v151;
              if (v152)
              {
                v153 = (char *)sub_40FC((uint64_t)(v20 + 423), v152);
                v22 = (char *)v20[422];
                v148 = (char *)v20[421];
              }
              else
              {
                v153 = 0;
              }
              v284 = &v153[8 * v149];
              *(_QWORD *)v284 = v21;
              v24 = v284 + 8;
              while (v22 != v148)
              {
                v285 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v284 - 1) = v285;
                v284 -= 8;
              }
              v20[421] = v284;
              v20[422] = v24;
              v20[423] = &v153[8 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[422] = v24;
            break;
          case 0x6D:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v27 = (char *)v25[425];
            v28 = v25[426];
            if ((unint64_t)v27 >= v28)
            {
              v154 = (char *)v25[424];
              v155 = (v27 - v154) >> 3;
              if ((unint64_t)(v155 + 1) >> 61)
                goto LABEL_450;
              v156 = v28 - (_QWORD)v154;
              v157 = (uint64_t)(v28 - (_QWORD)v154) >> 2;
              if (v157 <= v155 + 1)
                v157 = v155 + 1;
              if (v156 >= 0x7FFFFFFFFFFFFFF8)
                v158 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v158 = v157;
              if (v158)
              {
                v159 = (char *)sub_40FC((uint64_t)(v25 + 426), v158);
                v27 = (char *)v25[425];
                v154 = (char *)v25[424];
              }
              else
              {
                v159 = 0;
              }
              v286 = &v159[8 * v155];
              *(_QWORD *)v286 = v26;
              v29 = v286 + 8;
              while (v27 != v154)
              {
                v287 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v286 - 1) = v287;
                v286 -= 8;
              }
              v25[424] = v286;
              v25[425] = v29;
              v25[426] = &v159[8 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[425] = v29;
            break;
          case 0x6E:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v32 = (char *)v30[428];
            v33 = v30[429];
            if ((unint64_t)v32 >= v33)
            {
              v160 = (char *)v30[427];
              v161 = (v32 - v160) >> 3;
              if ((unint64_t)(v161 + 1) >> 61)
                goto LABEL_450;
              v162 = v33 - (_QWORD)v160;
              v163 = (uint64_t)(v33 - (_QWORD)v160) >> 2;
              if (v163 <= v161 + 1)
                v163 = v161 + 1;
              if (v162 >= 0x7FFFFFFFFFFFFFF8)
                v164 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v164 = v163;
              if (v164)
              {
                v165 = (char *)sub_40FC((uint64_t)(v30 + 429), v164);
                v32 = (char *)v30[428];
                v160 = (char *)v30[427];
              }
              else
              {
                v165 = 0;
              }
              v288 = &v165[8 * v161];
              *(_QWORD *)v288 = v31;
              v34 = v288 + 8;
              while (v32 != v160)
              {
                v289 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v288 - 1) = v289;
                v288 -= 8;
              }
              v30[427] = v288;
              v30[428] = v34;
              v30[429] = &v165[8 * v164];
              if (v160)
                operator delete(v160);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[428] = v34;
            break;
          case 0x6F:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v37 = (char *)v35[431];
            v38 = v35[432];
            if ((unint64_t)v37 >= v38)
            {
              v166 = (char *)v35[430];
              v167 = (v37 - v166) >> 3;
              if ((unint64_t)(v167 + 1) >> 61)
                goto LABEL_450;
              v168 = v38 - (_QWORD)v166;
              v169 = (uint64_t)(v38 - (_QWORD)v166) >> 2;
              if (v169 <= v167 + 1)
                v169 = v167 + 1;
              if (v168 >= 0x7FFFFFFFFFFFFFF8)
                v170 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v170 = v169;
              if (v170)
              {
                v171 = (char *)sub_40FC((uint64_t)(v35 + 432), v170);
                v37 = (char *)v35[431];
                v166 = (char *)v35[430];
              }
              else
              {
                v171 = 0;
              }
              v290 = &v171[8 * v167];
              *(_QWORD *)v290 = v36;
              v39 = v290 + 8;
              while (v37 != v166)
              {
                v291 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v290 - 1) = v291;
                v290 -= 8;
              }
              v35[430] = v290;
              v35[431] = v39;
              v35[432] = &v171[8 * v170];
              if (v166)
                operator delete(v166);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[431] = v39;
            break;
          case 0x70:
            v40 = a1[2];
            v41 = *(_QWORD **)v40;
            v42 = *(unsigned __int16 *)(a1[3] + 60);
            v43 = *(char **)(*(_QWORD *)v40 + 3472);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 3480);
            if ((unint64_t)v43 >= v44)
            {
              v172 = (char *)v41[433];
              v173 = (v43 - v172) >> 3;
              if ((unint64_t)(v173 + 1) >> 61)
                goto LABEL_450;
              v174 = v44 - (_QWORD)v172;
              v175 = (uint64_t)(v44 - (_QWORD)v172) >> 2;
              if (v175 <= v173 + 1)
                v175 = v173 + 1;
              if (v174 >= 0x7FFFFFFFFFFFFFF8)
                v176 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v176 = v175;
              if (v176)
              {
                v177 = (char *)sub_40FC((uint64_t)(v41 + 435), v176);
                v43 = (char *)v41[434];
                v172 = (char *)v41[433];
              }
              else
              {
                v177 = 0;
              }
              v292 = &v177[8 * v173];
              *(_QWORD *)v292 = v42;
              v45 = v292 + 8;
              while (v43 != v172)
              {
                v293 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v292 - 1) = v293;
                v292 -= 8;
              }
              v41[433] = v292;
              v41[434] = v45;
              v41[435] = &v177[8 * v176];
              if (v172)
                operator delete(v172);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[434] = v45;
            break;
          case 0x71:
            v46 = *(_QWORD **)a1[2];
            v47 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            v48 = (uint64_t *)v46[437];
            v49 = v46[438];
            if ((unint64_t)v48 >= v49)
            {
              v178 = (uint64_t *)v46[436];
              v179 = v48 - v178;
              if ((unint64_t)(v179 + 1) >> 61)
                goto LABEL_450;
              v180 = v49 - (_QWORD)v178;
              v181 = (uint64_t)(v49 - (_QWORD)v178) >> 2;
              if (v181 <= v179 + 1)
                v181 = v179 + 1;
              if (v180 >= 0x7FFFFFFFFFFFFFF8)
                v182 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v182 = v181;
              if (v182)
              {
                v183 = (char *)sub_40FC((uint64_t)(v46 + 438), v182);
                v48 = (uint64_t *)v46[437];
                v178 = (uint64_t *)v46[436];
              }
              else
              {
                v183 = 0;
              }
              v294 = (uint64_t *)&v183[8 * v179];
              *v294 = v47;
              v50 = v294 + 1;
              while (v48 != v178)
              {
                v295 = *--v48;
                *--v294 = v295;
              }
              v46[436] = v294;
              v46[437] = v50;
              v46[438] = &v183[8 * v182];
              if (v178)
                operator delete(v178);
            }
            else
            {
              *v48 = v47;
              v50 = v48 + 1;
            }
            v46[437] = v50;
            break;
          case 0x72:
            v51 = *(_QWORD **)a1[2];
            v52 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            v53 = (uint64_t *)v51[440];
            v54 = v51[441];
            if ((unint64_t)v53 >= v54)
            {
              v184 = (uint64_t *)v51[439];
              v185 = v53 - v184;
              if ((unint64_t)(v185 + 1) >> 61)
                goto LABEL_450;
              v186 = v54 - (_QWORD)v184;
              v187 = (uint64_t)(v54 - (_QWORD)v184) >> 2;
              if (v187 <= v185 + 1)
                v187 = v185 + 1;
              if (v186 >= 0x7FFFFFFFFFFFFFF8)
                v188 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v188 = v187;
              if (v188)
              {
                v189 = (char *)sub_40FC((uint64_t)(v51 + 441), v188);
                v53 = (uint64_t *)v51[440];
                v184 = (uint64_t *)v51[439];
              }
              else
              {
                v189 = 0;
              }
              v296 = (uint64_t *)&v189[8 * v185];
              *v296 = v52;
              v55 = v296 + 1;
              while (v53 != v184)
              {
                v297 = *--v53;
                *--v296 = v297;
              }
              v51[439] = v296;
              v51[440] = v55;
              v51[441] = &v189[8 * v188];
              if (v184)
                operator delete(v184);
            }
            else
            {
              *v53 = v52;
              v55 = v53 + 1;
            }
            v51[440] = v55;
            break;
          case 0x73:
            v56 = *(_QWORD **)a1[2];
            v57 = *(_DWORD *)(a1[3] + 88) & 0x1FFFFLL;
            v58 = (uint64_t *)v56[443];
            v59 = v56[444];
            if ((unint64_t)v58 >= v59)
            {
              v190 = (uint64_t *)v56[442];
              v191 = v58 - v190;
              if ((unint64_t)(v191 + 1) >> 61)
                goto LABEL_450;
              v192 = v59 - (_QWORD)v190;
              v193 = (uint64_t)(v59 - (_QWORD)v190) >> 2;
              if (v193 <= v191 + 1)
                v193 = v191 + 1;
              if (v192 >= 0x7FFFFFFFFFFFFFF8)
                v194 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v194 = v193;
              if (v194)
              {
                v195 = (char *)sub_40FC((uint64_t)(v56 + 444), v194);
                v58 = (uint64_t *)v56[443];
                v190 = (uint64_t *)v56[442];
              }
              else
              {
                v195 = 0;
              }
              v298 = (uint64_t *)&v195[8 * v191];
              *v298 = v57;
              v60 = v298 + 1;
              while (v58 != v190)
              {
                v299 = *--v58;
                *--v298 = v299;
              }
              v56[442] = v298;
              v56[443] = v60;
              v56[444] = &v195[8 * v194];
              if (v190)
                operator delete(v190);
            }
            else
            {
              *v58 = v57;
              v60 = v58 + 1;
            }
            v56[443] = v60;
            break;
          case 0x74:
            v61 = *(_QWORD **)a1[2];
            v62 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            v63 = (uint64_t *)v61[446];
            v64 = v61[447];
            if ((unint64_t)v63 >= v64)
            {
              v196 = (uint64_t *)v61[445];
              v197 = v63 - v196;
              if ((unint64_t)(v197 + 1) >> 61)
                goto LABEL_450;
              v198 = v64 - (_QWORD)v196;
              v199 = (uint64_t)(v64 - (_QWORD)v196) >> 2;
              if (v199 <= v197 + 1)
                v199 = v197 + 1;
              if (v198 >= 0x7FFFFFFFFFFFFFF8)
                v200 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v200 = v199;
              if (v200)
              {
                v201 = (char *)sub_40FC((uint64_t)(v61 + 447), v200);
                v63 = (uint64_t *)v61[446];
                v196 = (uint64_t *)v61[445];
              }
              else
              {
                v201 = 0;
              }
              v300 = (uint64_t *)&v201[8 * v197];
              *v300 = v62;
              v65 = v300 + 1;
              while (v63 != v196)
              {
                v301 = *--v63;
                *--v300 = v301;
              }
              v61[445] = v300;
              v61[446] = v65;
              v61[447] = &v201[8 * v200];
              if (v196)
                operator delete(v196);
            }
            else
            {
              *v63 = v62;
              v65 = v63 + 1;
            }
            v61[446] = v65;
            break;
          case 0x75:
            v66 = *(_QWORD **)a1[2];
            v67 = *(_DWORD *)(a1[3] + 72) & 0x1FFFFLL;
            v68 = (uint64_t *)v66[449];
            v69 = v66[450];
            if ((unint64_t)v68 >= v69)
            {
              v202 = (uint64_t *)v66[448];
              v203 = v68 - v202;
              if ((unint64_t)(v203 + 1) >> 61)
                goto LABEL_450;
              v204 = v69 - (_QWORD)v202;
              v205 = (uint64_t)(v69 - (_QWORD)v202) >> 2;
              if (v205 <= v203 + 1)
                v205 = v203 + 1;
              if (v204 >= 0x7FFFFFFFFFFFFFF8)
                v206 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v206 = v205;
              if (v206)
              {
                v207 = (char *)sub_40FC((uint64_t)(v66 + 450), v206);
                v68 = (uint64_t *)v66[449];
                v202 = (uint64_t *)v66[448];
              }
              else
              {
                v207 = 0;
              }
              v302 = (uint64_t *)&v207[8 * v203];
              *v302 = v67;
              v70 = v302 + 1;
              while (v68 != v202)
              {
                v303 = *--v68;
                *--v302 = v303;
              }
              v66[448] = v302;
              v66[449] = v70;
              v66[450] = &v207[8 * v206];
              if (v202)
                operator delete(v202);
            }
            else
            {
              *v68 = v67;
              v70 = v68 + 1;
            }
            v66[449] = v70;
            break;
          case 0x76:
            v71 = *(_QWORD **)a1[2];
            v72 = *(_DWORD *)(a1[3] + 76) & 0x1FFFFLL;
            v73 = (uint64_t *)v71[452];
            v74 = v71[453];
            if ((unint64_t)v73 >= v74)
            {
              v208 = (uint64_t *)v71[451];
              v209 = v73 - v208;
              if ((unint64_t)(v209 + 1) >> 61)
                goto LABEL_450;
              v210 = v74 - (_QWORD)v208;
              v211 = (uint64_t)(v74 - (_QWORD)v208) >> 2;
              if (v211 <= v209 + 1)
                v211 = v209 + 1;
              if (v210 >= 0x7FFFFFFFFFFFFFF8)
                v212 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v212 = v211;
              if (v212)
              {
                v213 = (char *)sub_40FC((uint64_t)(v71 + 453), v212);
                v73 = (uint64_t *)v71[452];
                v208 = (uint64_t *)v71[451];
              }
              else
              {
                v213 = 0;
              }
              v304 = (uint64_t *)&v213[8 * v209];
              *v304 = v72;
              v75 = v304 + 1;
              while (v73 != v208)
              {
                v305 = *--v73;
                *--v304 = v305;
              }
              v71[451] = v304;
              v71[452] = v75;
              v71[453] = &v213[8 * v212];
              if (v208)
                operator delete(v208);
            }
            else
            {
              *v73 = v72;
              v75 = v73 + 1;
            }
            v71[452] = v75;
            break;
          case 0x77:
            v76 = a1[2];
            v77 = *(_QWORD **)v76;
            v78 = *(unsigned __int16 *)(a1[3] + 64);
            v79 = *(char **)(*(_QWORD *)v76 + 3640);
            v80 = *(_QWORD *)(*(_QWORD *)v76 + 3648);
            if ((unint64_t)v79 >= v80)
            {
              v214 = (char *)v77[454];
              v215 = (v79 - v214) >> 3;
              if ((unint64_t)(v215 + 1) >> 61)
                goto LABEL_450;
              v216 = v80 - (_QWORD)v214;
              v217 = (uint64_t)(v80 - (_QWORD)v214) >> 2;
              if (v217 <= v215 + 1)
                v217 = v215 + 1;
              if (v216 >= 0x7FFFFFFFFFFFFFF8)
                v218 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v218 = v217;
              if (v218)
              {
                v219 = (char *)sub_40FC((uint64_t)(v77 + 456), v218);
                v79 = (char *)v77[455];
                v214 = (char *)v77[454];
              }
              else
              {
                v219 = 0;
              }
              v306 = &v219[8 * v215];
              *(_QWORD *)v306 = v78;
              v81 = v306 + 8;
              while (v79 != v214)
              {
                v307 = *((_QWORD *)v79 - 1);
                v79 -= 8;
                *((_QWORD *)v306 - 1) = v307;
                v306 -= 8;
              }
              v77[454] = v306;
              v77[455] = v81;
              v77[456] = &v219[8 * v218];
              if (v214)
                operator delete(v214);
            }
            else
            {
              *(_QWORD *)v79 = v78;
              v81 = v79 + 8;
            }
            v77[455] = v81;
            break;
          case 0x78:
            v82 = a1[2];
            v83 = *(_QWORD **)v82;
            v84 = *(unsigned __int16 *)(a1[3] + 66);
            v85 = *(char **)(*(_QWORD *)v82 + 3664);
            v86 = *(_QWORD *)(*(_QWORD *)v82 + 3672);
            if ((unint64_t)v85 >= v86)
            {
              v220 = (char *)v83[457];
              v221 = (v85 - v220) >> 3;
              if ((unint64_t)(v221 + 1) >> 61)
                goto LABEL_450;
              v222 = v86 - (_QWORD)v220;
              v223 = (uint64_t)(v86 - (_QWORD)v220) >> 2;
              if (v223 <= v221 + 1)
                v223 = v221 + 1;
              if (v222 >= 0x7FFFFFFFFFFFFFF8)
                v224 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v224 = v223;
              if (v224)
              {
                v225 = (char *)sub_40FC((uint64_t)(v83 + 459), v224);
                v85 = (char *)v83[458];
                v220 = (char *)v83[457];
              }
              else
              {
                v225 = 0;
              }
              v308 = &v225[8 * v221];
              *(_QWORD *)v308 = v84;
              v87 = v308 + 8;
              while (v85 != v220)
              {
                v309 = *((_QWORD *)v85 - 1);
                v85 -= 8;
                *((_QWORD *)v308 - 1) = v309;
                v308 -= 8;
              }
              v83[457] = v308;
              v83[458] = v87;
              v83[459] = &v225[8 * v224];
              if (v220)
                operator delete(v220);
            }
            else
            {
              *(_QWORD *)v85 = v84;
              v87 = v85 + 8;
            }
            v83[458] = v87;
            break;
          case 0x79:
            v88 = a1[2];
            v89 = *(_QWORD **)v88;
            v90 = *(unsigned __int16 *)(a1[3] + 84);
            v91 = *(char **)(*(_QWORD *)v88 + 3688);
            v92 = *(_QWORD *)(*(_QWORD *)v88 + 3696);
            if ((unint64_t)v91 >= v92)
            {
              v226 = (char *)v89[460];
              v227 = (v91 - v226) >> 3;
              if ((unint64_t)(v227 + 1) >> 61)
                goto LABEL_450;
              v228 = v92 - (_QWORD)v226;
              v229 = (uint64_t)(v92 - (_QWORD)v226) >> 2;
              if (v229 <= v227 + 1)
                v229 = v227 + 1;
              if (v228 >= 0x7FFFFFFFFFFFFFF8)
                v230 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v230 = v229;
              if (v230)
              {
                v231 = (char *)sub_40FC((uint64_t)(v89 + 462), v230);
                v91 = (char *)v89[461];
                v226 = (char *)v89[460];
              }
              else
              {
                v231 = 0;
              }
              v310 = &v231[8 * v227];
              *(_QWORD *)v310 = v90;
              v93 = v310 + 8;
              while (v91 != v226)
              {
                v311 = *((_QWORD *)v91 - 1);
                v91 -= 8;
                *((_QWORD *)v310 - 1) = v311;
                v310 -= 8;
              }
              v89[460] = v310;
              v89[461] = v93;
              v89[462] = &v231[8 * v230];
              if (v226)
                operator delete(v226);
            }
            else
            {
              *(_QWORD *)v91 = v90;
              v93 = v91 + 8;
            }
            v89[461] = v93;
            break;
          case 0x7A:
            v94 = a1[2];
            v95 = *(_QWORD **)v94;
            v96 = *(unsigned __int16 *)(a1[3] + 86);
            v97 = *(char **)(*(_QWORD *)v94 + 3712);
            v98 = *(_QWORD *)(*(_QWORD *)v94 + 3720);
            if ((unint64_t)v97 >= v98)
            {
              v232 = (char *)v95[463];
              v233 = (v97 - v232) >> 3;
              if ((unint64_t)(v233 + 1) >> 61)
                goto LABEL_450;
              v234 = v98 - (_QWORD)v232;
              v235 = (uint64_t)(v98 - (_QWORD)v232) >> 2;
              if (v235 <= v233 + 1)
                v235 = v233 + 1;
              if (v234 >= 0x7FFFFFFFFFFFFFF8)
                v236 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v236 = v235;
              if (v236)
              {
                v237 = (char *)sub_40FC((uint64_t)(v95 + 465), v236);
                v97 = (char *)v95[464];
                v232 = (char *)v95[463];
              }
              else
              {
                v237 = 0;
              }
              v312 = &v237[8 * v233];
              *(_QWORD *)v312 = v96;
              v99 = v312 + 8;
              while (v97 != v232)
              {
                v313 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v312 - 1) = v313;
                v312 -= 8;
              }
              v95[463] = v312;
              v95[464] = v99;
              v95[465] = &v237[8 * v236];
              if (v232)
                operator delete(v232);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[464] = v99;
            break;
          case 0x7B:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_DWORD *)(a1[3] + 56) & 0x1FFFFLL;
            v102 = (uint64_t *)v100[467];
            v103 = v100[468];
            if ((unint64_t)v102 >= v103)
            {
              v238 = (uint64_t *)v100[466];
              v239 = v102 - v238;
              if ((unint64_t)(v239 + 1) >> 61)
                goto LABEL_450;
              v240 = v103 - (_QWORD)v238;
              v241 = (uint64_t)(v103 - (_QWORD)v238) >> 2;
              if (v241 <= v239 + 1)
                v241 = v239 + 1;
              if (v240 >= 0x7FFFFFFFFFFFFFF8)
                v242 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v242 = v241;
              if (v242)
              {
                v243 = (char *)sub_40FC((uint64_t)(v100 + 468), v242);
                v102 = (uint64_t *)v100[467];
                v238 = (uint64_t *)v100[466];
              }
              else
              {
                v243 = 0;
              }
              v314 = (uint64_t *)&v243[8 * v239];
              *v314 = v101;
              v104 = v314 + 1;
              while (v102 != v238)
              {
                v315 = *--v102;
                *--v314 = v315;
              }
              v100[466] = v314;
              v100[467] = v104;
              v100[468] = &v243[8 * v242];
              if (v238)
                operator delete(v238);
            }
            else
            {
              *v102 = v101;
              v104 = v102 + 1;
            }
            v100[467] = v104;
            break;
          case 0x7C:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            v107 = (char *)v105[470];
            v108 = v105[471];
            if ((unint64_t)v107 >= v108)
            {
              v244 = (char *)v105[469];
              v245 = (v107 - v244) >> 3;
              if ((unint64_t)(v245 + 1) >> 61)
                goto LABEL_450;
              v246 = v108 - (_QWORD)v244;
              v247 = (uint64_t)(v108 - (_QWORD)v244) >> 2;
              if (v247 <= v245 + 1)
                v247 = v245 + 1;
              if (v246 >= 0x7FFFFFFFFFFFFFF8)
                v248 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v248 = v247;
              if (v248)
              {
                v249 = (char *)sub_40FC((uint64_t)(v105 + 471), v248);
                v107 = (char *)v105[470];
                v244 = (char *)v105[469];
              }
              else
              {
                v249 = 0;
              }
              v316 = &v249[8 * v245];
              *(_QWORD *)v316 = v106;
              v109 = v316 + 8;
              while (v107 != v244)
              {
                v317 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v316 - 1) = v317;
                v316 -= 8;
              }
              v105[469] = v316;
              v105[470] = v109;
              v105[471] = &v249[8 * v248];
              if (v244)
                operator delete(v244);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[470] = v109;
            break;
          case 0x7D:
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v112 = (char *)v110[473];
            v113 = v110[474];
            if ((unint64_t)v112 >= v113)
            {
              v250 = (char *)v110[472];
              v251 = (v112 - v250) >> 3;
              if ((unint64_t)(v251 + 1) >> 61)
                goto LABEL_450;
              v252 = v113 - (_QWORD)v250;
              v253 = (uint64_t)(v113 - (_QWORD)v250) >> 2;
              if (v253 <= v251 + 1)
                v253 = v251 + 1;
              if (v252 >= 0x7FFFFFFFFFFFFFF8)
                v254 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v254 = v253;
              if (v254)
              {
                v255 = (char *)sub_40FC((uint64_t)(v110 + 474), v254);
                v112 = (char *)v110[473];
                v250 = (char *)v110[472];
              }
              else
              {
                v255 = 0;
              }
              v318 = &v255[8 * v251];
              *(_QWORD *)v318 = v111;
              v114 = v318 + 8;
              while (v112 != v250)
              {
                v319 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v318 - 1) = v319;
                v318 -= 8;
              }
              v110[472] = v318;
              v110[473] = v114;
              v110[474] = &v255[8 * v254];
              if (v250)
                operator delete(v250);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[473] = v114;
            break;
          case 0x7E:
            v115 = a1[2];
            v116 = *(_QWORD **)v115;
            v117 = *(unsigned __int16 *)(a1[3] + 62);
            v118 = *(char **)(*(_QWORD *)v115 + 3808);
            v119 = *(_QWORD *)(*(_QWORD *)v115 + 3816);
            if ((unint64_t)v118 >= v119)
            {
              v256 = (char *)v116[475];
              v257 = (v118 - v256) >> 3;
              if ((unint64_t)(v257 + 1) >> 61)
                goto LABEL_450;
              v258 = v119 - (_QWORD)v256;
              v259 = (uint64_t)(v119 - (_QWORD)v256) >> 2;
              if (v259 <= v257 + 1)
                v259 = v257 + 1;
              if (v258 >= 0x7FFFFFFFFFFFFFF8)
                v260 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v260 = v259;
              if (v260)
              {
                v261 = (char *)sub_40FC((uint64_t)(v116 + 477), v260);
                v118 = (char *)v116[476];
                v256 = (char *)v116[475];
              }
              else
              {
                v261 = 0;
              }
              v320 = &v261[8 * v257];
              *(_QWORD *)v320 = v117;
              v120 = v320 + 8;
              while (v118 != v256)
              {
                v321 = *((_QWORD *)v118 - 1);
                v118 -= 8;
                *((_QWORD *)v320 - 1) = v321;
                v320 -= 8;
              }
              v116[475] = v320;
              v116[476] = v120;
              v116[477] = &v261[8 * v260];
              if (v256)
                operator delete(v256);
            }
            else
            {
              *(_QWORD *)v118 = v117;
              v120 = v118 + 8;
            }
            v116[476] = v120;
            break;
          case 0x7F:
            v121 = *(_QWORD **)a1[2];
            v122 = (*(unsigned __int16 *)(a1[3] + 68) | (*(unsigned __int8 *)(a1[3] + 70) << 16)) & 0x1FFFFLL;
            v123 = (uint64_t *)v121[479];
            v124 = v121[480];
            if ((unint64_t)v123 >= v124)
            {
              v262 = (uint64_t *)v121[478];
              v263 = v123 - v262;
              if ((unint64_t)(v263 + 1) >> 61)
                goto LABEL_450;
              v264 = v124 - (_QWORD)v262;
              v265 = (uint64_t)(v124 - (_QWORD)v262) >> 2;
              if (v265 <= v263 + 1)
                v265 = v263 + 1;
              if (v264 >= 0x7FFFFFFFFFFFFFF8)
                v266 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v266 = v265;
              if (v266)
              {
                v267 = (char *)sub_40FC((uint64_t)(v121 + 480), v266);
                v123 = (uint64_t *)v121[479];
                v262 = (uint64_t *)v121[478];
              }
              else
              {
                v267 = 0;
              }
              v322 = (uint64_t *)&v267[8 * v263];
              *v322 = v122;
              v125 = v322 + 1;
              while (v123 != v262)
              {
                v323 = *--v123;
                *--v322 = v323;
              }
              v121[478] = v322;
              v121[479] = v125;
              v121[480] = &v267[8 * v266];
              if (v262)
                operator delete(v262);
            }
            else
            {
              *v123 = v122;
              v125 = v123 + 1;
            }
            v121[479] = v125;
            break;
          case 0x80:
            v126 = *(_QWORD **)a1[2];
            v127 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            v128 = (uint64_t *)v126[482];
            v129 = v126[483];
            if ((unint64_t)v128 >= v129)
            {
              v268 = (uint64_t *)v126[481];
              v269 = v128 - v268;
              if ((unint64_t)(v269 + 1) >> 61)
                goto LABEL_450;
              v270 = v129 - (_QWORD)v268;
              v271 = (uint64_t)(v129 - (_QWORD)v268) >> 2;
              if (v271 <= v269 + 1)
                v271 = v269 + 1;
              if (v270 >= 0x7FFFFFFFFFFFFFF8)
                v272 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v272 = v271;
              if (v272)
              {
                v273 = (char *)sub_40FC((uint64_t)(v126 + 483), v272);
                v128 = (uint64_t *)v126[482];
                v268 = (uint64_t *)v126[481];
              }
              else
              {
                v273 = 0;
              }
              v324 = (uint64_t *)&v273[8 * v269];
              *v324 = v127;
              v130 = v324 + 1;
              while (v128 != v268)
              {
                v325 = *--v128;
                *--v324 = v325;
              }
              v126[481] = v324;
              v126[482] = v130;
              v126[483] = &v273[8 * v272];
              if (v268)
                operator delete(v268);
            }
            else
            {
              *v128 = v127;
              v130 = v128 + 1;
            }
            v126[482] = v130;
            break;
          case 0x81:
            v131 = *(_QWORD **)a1[2];
            v132 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            v133 = (uint64_t *)v131[485];
            v134 = v131[486];
            if ((unint64_t)v133 >= v134)
            {
              v274 = (uint64_t *)v131[484];
              v275 = v133 - v274;
              if ((unint64_t)(v275 + 1) >> 61)
LABEL_450:
                sub_4074();
              v276 = v134 - (_QWORD)v274;
              v277 = (uint64_t)(v134 - (_QWORD)v274) >> 2;
              if (v277 <= v275 + 1)
                v277 = v275 + 1;
              if (v276 >= 0x7FFFFFFFFFFFFFF8)
                v278 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v278 = v277;
              if (v278)
              {
                v279 = (char *)sub_40FC((uint64_t)(v131 + 486), v278);
                v133 = (uint64_t *)v131[485];
                v274 = (uint64_t *)v131[484];
              }
              else
              {
                v279 = 0;
              }
              v326 = (uint64_t *)&v279[8 * v275];
              *v326 = v132;
              v135 = v326 + 1;
              while (v133 != v274)
              {
                v327 = *--v133;
                *--v326 = v327;
              }
              v131[484] = v326;
              v131[485] = v135;
              v131[486] = &v279[8 * v278];
              if (v274)
                operator delete(v274);
            }
            else
            {
              *v133 = v132;
              v135 = v133 + 1;
            }
            v131[485] = v135;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_167418(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int *v62;
  int **v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;

  v4 = *a1;
  if (*a2 == 1)
  {
    v63 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v62 = *v63;
    v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      v65 = v64 >> 2;
      if (v65 <= 1)
        v65 = 1;
      do
      {
        v66 = *v62++;
        switch(v66)
        {
          case 130:
            v67 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3904);
            goto LABEL_86;
          case 131:
            v67 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3928);
            goto LABEL_86;
          case 132:
            v67 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3952);
            goto LABEL_86;
          case 133:
            v67 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3976);
LABEL_86:
            *(_QWORD *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x82:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            v12 = (uint64_t *)v10[488];
            v13 = v10[489];
            if ((unint64_t)v12 >= v13)
            {
              v30 = (uint64_t *)v10[487];
              v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_90;
              v32 = v13 - (_QWORD)v30;
              v33 = (uint64_t)(v13 - (_QWORD)v30) >> 2;
              if (v33 <= v31 + 1)
                v33 = v31 + 1;
              if (v32 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v33;
              if (v34)
              {
                v35 = (char *)sub_40FC((uint64_t)(v10 + 489), v34);
                v12 = (uint64_t *)v10[488];
                v30 = (uint64_t *)v10[487];
              }
              else
              {
                v35 = 0;
              }
              v54 = (uint64_t *)&v35[8 * v31];
              *v54 = v11;
              v14 = v54 + 1;
              while (v12 != v30)
              {
                v55 = *--v12;
                *--v54 = v55;
              }
              v10[487] = v54;
              v10[488] = v14;
              v10[489] = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[488] = v14;
            break;
          case 0x83:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFFLL;
            v17 = (uint64_t *)v15[491];
            v18 = v15[492];
            if ((unint64_t)v17 >= v18)
            {
              v36 = (uint64_t *)v15[490];
              v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61)
                goto LABEL_90;
              v38 = v18 - (_QWORD)v36;
              v39 = (uint64_t)(v18 - (_QWORD)v36) >> 2;
              if (v39 <= v37 + 1)
                v39 = v37 + 1;
              if (v38 >= 0x7FFFFFFFFFFFFFF8)
                v40 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v40 = v39;
              if (v40)
              {
                v41 = (char *)sub_40FC((uint64_t)(v15 + 492), v40);
                v17 = (uint64_t *)v15[491];
                v36 = (uint64_t *)v15[490];
              }
              else
              {
                v41 = 0;
              }
              v56 = (uint64_t *)&v41[8 * v37];
              *v56 = v16;
              v19 = v56 + 1;
              while (v17 != v36)
              {
                v57 = *--v17;
                *--v56 = v57;
              }
              v15[490] = v56;
              v15[491] = v19;
              v15[492] = &v41[8 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[491] = v19;
            break;
          case 0x84:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
            v22 = (uint64_t *)v20[494];
            v23 = v20[495];
            if ((unint64_t)v22 >= v23)
            {
              v42 = (uint64_t *)v20[493];
              v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61)
                goto LABEL_90;
              v44 = v23 - (_QWORD)v42;
              v45 = (uint64_t)(v23 - (_QWORD)v42) >> 2;
              if (v45 <= v43 + 1)
                v45 = v43 + 1;
              if (v44 >= 0x7FFFFFFFFFFFFFF8)
                v46 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v46 = v45;
              if (v46)
              {
                v47 = (char *)sub_40FC((uint64_t)(v20 + 495), v46);
                v22 = (uint64_t *)v20[494];
                v42 = (uint64_t *)v20[493];
              }
              else
              {
                v47 = 0;
              }
              v58 = (uint64_t *)&v47[8 * v43];
              *v58 = v21;
              v24 = v58 + 1;
              while (v22 != v42)
              {
                v59 = *--v22;
                *--v58 = v59;
              }
              v20[493] = v58;
              v20[494] = v24;
              v20[495] = &v47[8 * v46];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[494] = v24;
            break;
          case 0x85:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFFLL;
            v27 = (uint64_t *)v25[497];
            v28 = v25[498];
            if ((unint64_t)v27 >= v28)
            {
              v48 = (uint64_t *)v25[496];
              v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61)
LABEL_90:
                sub_4074();
              v50 = v28 - (_QWORD)v48;
              v51 = (uint64_t)(v28 - (_QWORD)v48) >> 2;
              if (v51 <= v49 + 1)
                v51 = v49 + 1;
              if (v50 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              if (v52)
              {
                v53 = (char *)sub_40FC((uint64_t)(v25 + 498), v52);
                v27 = (uint64_t *)v25[497];
                v48 = (uint64_t *)v25[496];
              }
              else
              {
                v53 = 0;
              }
              v60 = (uint64_t *)&v53[8 * v49];
              *v60 = v26;
              v29 = v60 + 1;
              while (v27 != v48)
              {
                v61 = *--v27;
                *--v60 = v61;
              }
              v25[496] = v60;
              v25[497] = v29;
              v25[498] = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[497] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1678C0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  int *v140;
  int **v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  _QWORD *v146;

  v4 = *a1;
  if (*a2 == 1)
  {
    v141 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v140 = *v141;
    v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      v143 = v142 >> 2;
      if (v143 <= 1)
        v143 = 1;
      do
      {
        v144 = *v140++;
        switch(v144)
        {
          case 166:
            v145 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4768);
            goto LABEL_194;
          case 167:
            v145 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4792);
            goto LABEL_194;
          case 168:
            v145 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4816);
            goto LABEL_194;
          case 169:
            v145 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4840);
            goto LABEL_194;
          case 170:
            v145 = *(_DWORD *)(a1[3] + 36) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4864);
            goto LABEL_194;
          case 171:
            v145 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4888);
            goto LABEL_194;
          case 172:
            v145 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4912);
            goto LABEL_194;
          case 173:
            v145 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4936);
            goto LABEL_194;
          case 174:
            v145 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4960);
            goto LABEL_194;
          case 175:
            v145 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4984);
LABEL_194:
            *(_QWORD *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xA6:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            v12 = (char *)v10[596];
            v13 = v10[597];
            if ((unint64_t)v12 >= v13)
            {
              v60 = (char *)v10[595];
              v61 = (v12 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_198;
              v62 = v13 - (_QWORD)v60;
              v63 = (uint64_t)(v13 - (_QWORD)v60) >> 2;
              if (v63 <= v61 + 1)
                v63 = v61 + 1;
              if (v62 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
              {
                v65 = (char *)sub_40FC((uint64_t)(v10 + 597), v64);
                v12 = (char *)v10[596];
                v60 = (char *)v10[595];
              }
              else
              {
                v65 = 0;
              }
              v120 = &v65[8 * v61];
              *(_QWORD *)v120 = v11;
              v14 = v120 + 8;
              while (v12 != v60)
              {
                v121 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v120 - 1) = v121;
                v120 -= 8;
              }
              v10[595] = v120;
              v10[596] = v14;
              v10[597] = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[596] = v14;
            break;
          case 0xA7:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v17 = (uint64_t *)v15[599];
            v18 = v15[600];
            if ((unint64_t)v17 >= v18)
            {
              v66 = (uint64_t *)v15[598];
              v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_198;
              v68 = v18 - (_QWORD)v66;
              v69 = (uint64_t)(v18 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v15 + 600), v70);
                v17 = (uint64_t *)v15[599];
                v66 = (uint64_t *)v15[598];
              }
              else
              {
                v71 = 0;
              }
              v122 = (uint64_t *)&v71[8 * v67];
              *v122 = v16;
              v19 = v122 + 1;
              while (v17 != v66)
              {
                v123 = *--v17;
                *--v122 = v123;
              }
              v15[598] = v122;
              v15[599] = v19;
              v15[600] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[599] = v19;
            break;
          case 0xA8:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v22 = (char *)v20[602];
            v23 = v20[603];
            if ((unint64_t)v22 >= v23)
            {
              v72 = (char *)v20[601];
              v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_198;
              v74 = v23 - (_QWORD)v72;
              v75 = (uint64_t)(v23 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v20 + 603), v76);
                v22 = (char *)v20[602];
                v72 = (char *)v20[601];
              }
              else
              {
                v77 = 0;
              }
              v124 = &v77[8 * v73];
              *(_QWORD *)v124 = v21;
              v24 = v124 + 8;
              while (v22 != v72)
              {
                v125 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[601] = v124;
              v20[602] = v24;
              v20[603] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[602] = v24;
            break;
          case 0xA9:
            v25 = *(_QWORD **)a1[2];
            v26 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            v27 = (unint64_t *)v25[605];
            v28 = v25[606];
            if ((unint64_t)v27 >= v28)
            {
              v78 = (unint64_t *)v25[604];
              v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_198;
              v80 = v28 - (_QWORD)v78;
              v81 = (uint64_t)(v28 - (_QWORD)v78) >> 2;
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              if (v80 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
              {
                v83 = (char *)sub_40FC((uint64_t)(v25 + 606), v82);
                v27 = (unint64_t *)v25[605];
                v78 = (unint64_t *)v25[604];
              }
              else
              {
                v83 = 0;
              }
              v126 = (unint64_t *)&v83[8 * v79];
              *v126 = v26;
              v29 = v126 + 1;
              while (v27 != v78)
              {
                v127 = *--v27;
                *--v126 = v127;
              }
              v25[604] = v126;
              v25[605] = v29;
              v25[606] = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[605] = v29;
            break;
          case 0xAA:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 36) & 0x1FFFLL;
            v32 = (uint64_t *)v30[608];
            v33 = v30[609];
            if ((unint64_t)v32 >= v33)
            {
              v84 = (uint64_t *)v30[607];
              v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61)
                goto LABEL_198;
              v86 = v33 - (_QWORD)v84;
              v87 = (uint64_t)(v33 - (_QWORD)v84) >> 2;
              if (v87 <= v85 + 1)
                v87 = v85 + 1;
              if (v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
              {
                v89 = (char *)sub_40FC((uint64_t)(v30 + 609), v88);
                v32 = (uint64_t *)v30[608];
                v84 = (uint64_t *)v30[607];
              }
              else
              {
                v89 = 0;
              }
              v128 = (uint64_t *)&v89[8 * v85];
              *v128 = v31;
              v34 = v128 + 1;
              while (v32 != v84)
              {
                v129 = *--v32;
                *--v128 = v129;
              }
              v30[607] = v128;
              v30[608] = v34;
              v30[609] = &v89[8 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[608] = v34;
            break;
          case 0xAB:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            v37 = (uint64_t *)v35[611];
            v38 = v35[612];
            if ((unint64_t)v37 >= v38)
            {
              v90 = (uint64_t *)v35[610];
              v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_198;
              v92 = v38 - (_QWORD)v90;
              v93 = (uint64_t)(v38 - (_QWORD)v90) >> 2;
              if (v93 <= v91 + 1)
                v93 = v91 + 1;
              if (v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
              {
                v95 = (char *)sub_40FC((uint64_t)(v35 + 612), v94);
                v37 = (uint64_t *)v35[611];
                v90 = (uint64_t *)v35[610];
              }
              else
              {
                v95 = 0;
              }
              v130 = (uint64_t *)&v95[8 * v91];
              *v130 = v36;
              v39 = v130 + 1;
              while (v37 != v90)
              {
                v131 = *--v37;
                *--v130 = v131;
              }
              v35[610] = v130;
              v35[611] = v39;
              v35[612] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[611] = v39;
            break;
          case 0xAC:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            v42 = (char *)v40[614];
            v43 = v40[615];
            if ((unint64_t)v42 >= v43)
            {
              v96 = (char *)v40[613];
              v97 = (v42 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_198;
              v98 = v43 - (_QWORD)v96;
              v99 = (uint64_t)(v43 - (_QWORD)v96) >> 2;
              if (v99 <= v97 + 1)
                v99 = v97 + 1;
              if (v98 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
              {
                v101 = (char *)sub_40FC((uint64_t)(v40 + 615), v100);
                v42 = (char *)v40[614];
                v96 = (char *)v40[613];
              }
              else
              {
                v101 = 0;
              }
              v132 = &v101[8 * v97];
              *(_QWORD *)v132 = v41;
              v44 = v132 + 8;
              while (v42 != v96)
              {
                v133 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v132 - 1) = v133;
                v132 -= 8;
              }
              v40[613] = v132;
              v40[614] = v44;
              v40[615] = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[614] = v44;
            break;
          case 0xAD:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            v47 = (char *)v45[617];
            v48 = v45[618];
            if ((unint64_t)v47 >= v48)
            {
              v102 = (char *)v45[616];
              v103 = (v47 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61)
                goto LABEL_198;
              v104 = v48 - (_QWORD)v102;
              v105 = (uint64_t)(v48 - (_QWORD)v102) >> 2;
              if (v105 <= v103 + 1)
                v105 = v103 + 1;
              if (v104 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v105;
              if (v106)
              {
                v107 = (char *)sub_40FC((uint64_t)(v45 + 618), v106);
                v47 = (char *)v45[617];
                v102 = (char *)v45[616];
              }
              else
              {
                v107 = 0;
              }
              v134 = &v107[8 * v103];
              *(_QWORD *)v134 = v46;
              v49 = v134 + 8;
              while (v47 != v102)
              {
                v135 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              v45[616] = v134;
              v45[617] = v49;
              v45[618] = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[617] = v49;
            break;
          case 0xAE:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            v52 = (char *)v50[620];
            v53 = v50[621];
            if ((unint64_t)v52 >= v53)
            {
              v108 = (char *)v50[619];
              v109 = (v52 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_198;
              v110 = v53 - (_QWORD)v108;
              v111 = (uint64_t)(v53 - (_QWORD)v108) >> 2;
              if (v111 <= v109 + 1)
                v111 = v109 + 1;
              if (v110 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v111;
              if (v112)
              {
                v113 = (char *)sub_40FC((uint64_t)(v50 + 621), v112);
                v52 = (char *)v50[620];
                v108 = (char *)v50[619];
              }
              else
              {
                v113 = 0;
              }
              v136 = &v113[8 * v109];
              *(_QWORD *)v136 = v51;
              v54 = v136 + 8;
              while (v52 != v108)
              {
                v137 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v136 - 1) = v137;
                v136 -= 8;
              }
              v50[619] = v136;
              v50[620] = v54;
              v50[621] = &v113[8 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[620] = v54;
            break;
          case 0xAF:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            v57 = (char *)v55[623];
            v58 = v55[624];
            if ((unint64_t)v57 >= v58)
            {
              v114 = (char *)v55[622];
              v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61)
LABEL_198:
                sub_4074();
              v116 = v58 - (_QWORD)v114;
              v117 = (uint64_t)(v58 - (_QWORD)v114) >> 2;
              if (v117 <= v115 + 1)
                v117 = v115 + 1;
              if (v116 >= 0x7FFFFFFFFFFFFFF8)
                v118 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_40FC((uint64_t)(v55 + 624), v118);
                v57 = (char *)v55[623];
                v114 = (char *)v55[622];
              }
              else
              {
                v119 = 0;
              }
              v138 = &v119[8 * v115];
              *(_QWORD *)v138 = v56;
              v59 = v138 + 8;
              while (v57 != v114)
              {
                v139 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v138 - 1) = v139;
                v138 -= 8;
              }
              v55[622] = v138;
              v55[623] = v59;
              v55[624] = &v119[8 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[623] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_168308()
{
  operator delete();
}

uint64_t sub_16831C(int a1, char *__s1)
{
  uint64_t result;

  if (!__s1)
    return 229;
  result = strcmp(__s1, "D7642F4CD8A1F1052D8874FFCB84623EEB5AD8DB476AAA36BB13F44E0122717D");
  if ((_DWORD)result)
  {
    if (!strcmp(__s1, "ECCE75AB7F80F9519A3E08E3A0EE71610AE67E3B82829786B02D98C09276F560"))
    {
      return 1;
    }
    else if (!strcmp(__s1, "0D43CB377576A411251DB7D5579117D02FC1BB178830D97B5332A806AC122B37"))
    {
      return 2;
    }
    else if (!strcmp(__s1, "9E7E7B3180DA596EBA2925972639C8DC058E97904ADA86E8FA31E691D63CA97B"))
    {
      return 3;
    }
    else if (!strcmp(__s1, "FE4E8A2782700A8DEC84E195627096B91A904FF6F486B78EF381501FB9667E0F"))
    {
      return 4;
    }
    else if (!strcmp(__s1, "35E9B0A78729DBBE416E11951D26DDC657D957CE37E23B41A2915BB6CC8CF792"))
    {
      return 5;
    }
    else if (!strcmp(__s1, "992E7CAEB9808CFC06F5E69E0B80D0ABB3328FC59FA76FED7BB9529EBBC6E484"))
    {
      return 6;
    }
    else if (!strcmp(__s1, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2"))
    {
      return 7;
    }
    else if (!strcmp(__s1, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956"))
    {
      return 8;
    }
    else if (!strcmp(__s1, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B"))
    {
      return 9;
    }
    else if (!strcmp(__s1, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB"))
    {
      return 10;
    }
    else if (!strcmp(__s1, "C04589D08BD1AA2481137A423CC2E81C537B75011557AB0EA579F58E489D9981"))
    {
      return 11;
    }
    else if (!strcmp(__s1, "7C3CD59A80673DD0787DF037FB1FB45E0EB635BFDB2554E10CBF5D056FEDAB78"))
    {
      return 12;
    }
    else if (!strcmp(__s1, "E484E42F34BF2E406D25EB38451C67D3C3C9CB9DEB9222C4F5E21E7E6729C787"))
    {
      return 13;
    }
    else if (!strcmp(__s1, "A1CD5E72A4CAD33DD4C2190F293103B9FD8B40FFE76B1A99A195768465964F91"))
    {
      return 14;
    }
    else if (!strcmp(__s1, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53"))
    {
      return 15;
    }
    else if (!strcmp(__s1, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91"))
    {
      return 16;
    }
    else if (!strcmp(__s1, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B"))
    {
      return 17;
    }
    else if (!strcmp(__s1, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC"))
    {
      return 18;
    }
    else if (!strcmp(__s1, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8"))
    {
      return 19;
    }
    else if (!strcmp(__s1, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF"))
    {
      return 20;
    }
    else if (!strcmp(__s1, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0"))
    {
      return 21;
    }
    else if (!strcmp(__s1, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D"))
    {
      return 22;
    }
    else if (!strcmp(__s1, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457"))
    {
      return 23;
    }
    else if (!strcmp(__s1, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C"))
    {
      return 24;
    }
    else if (!strcmp(__s1, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E"))
    {
      return 25;
    }
    else if (!strcmp(__s1, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033"))
    {
      return 26;
    }
    else if (!strcmp(__s1, "3AFE7FC24E518305DB9BB516AE4AA6725E13A423016B31BAFEBFD6FA09AFAFCD"))
    {
      return 27;
    }
    else if (!strcmp(__s1, "37C7DEA7C7AC62E48672D62B73746ED032AC86A05AA223DB4F373D44F106CD6A"))
    {
      return 28;
    }
    else if (!strcmp(__s1, "42EA38C66C2CC54A764D5E204FF38F3402542A5F05B7731D549F22D745429051"))
    {
      return 29;
    }
    else if (!strcmp(__s1, "F6D454657EA6A999B3D168C1A68D6592B2F348BA088B279DBF0A992754767224"))
    {
      return 30;
    }
    else if (!strcmp(__s1, "63CA0F7A21417297C42CDF8868259FBCECF5C6A5C1C994C3A1CA5F608179B458"))
    {
      return 31;
    }
    else if (!strcmp(__s1, "75D1CF68BBA66F3E658B115EF614F1449D832863CAF5F46D092488791378897F"))
    {
      return 32;
    }
    else if (!strcmp(__s1, "F4B1ED932C463D5EE2A9E1F0BEC7DDE12141635B8C1BC09662243EA36A1E2ECE"))
    {
      return 33;
    }
    else if (!strcmp(__s1, "511B8B14F417FD34A16CC128C14014AD2B4C5A60B3B053D963C78631DD6B3B89"))
    {
      return 34;
    }
    else if (!strcmp(__s1, "932639B5CA9FD3BE98F2787A2CDE095AAE9CE2D64A911486D12757EFBFD85140"))
    {
      return 35;
    }
    else if (!strcmp(__s1, "09ADF2F2D849AAB1B547CE687B45B30560D5965A6EE176E97CBC14EB63728DE2"))
    {
      return 36;
    }
    else if (!strcmp(__s1, "C2DF6BB1B96D7879744E5D54DEB55C12D7A9ECFF52AF539FC1FA63882B058A70"))
    {
      return 37;
    }
    else if (!strcmp(__s1, "8C96A68570A6DF5B4ABA9577C27042A37A60B8FBD6BC9DE3F909EC683406A5CD"))
    {
      return 38;
    }
    else if (!strcmp(__s1, "7B36DACFCE6FC736238A397E5EF2F7E25BE954A649117EE12A916CE79F75B94A"))
    {
      return 39;
    }
    else if (!strcmp(__s1, "80C734FBB111112ADB288D1CA5E1A6D5381987D38F4DFA08EFE8CC3C5F1CF131"))
    {
      return 40;
    }
    else if (!strcmp(__s1, "3A6B5C3F24147C27899AEB7FF2FE3FB579A0D79BE4AB9BE54E7F31F7AED99F24"))
    {
      return 41;
    }
    else if (!strcmp(__s1, "23C55391915968963B369CFA8F5BE79A370ADD2CB37A32A0C9267269406EC6E8"))
    {
      return 42;
    }
    else if (!strcmp(__s1, "1394031F165B7EE472518C80605434939287CE630C3E2BF45774C422646BDB52"))
    {
      return 43;
    }
    else if (!strcmp(__s1, "B664BC44BBFB5AB784B0240FFB637DC636A9B7CEE13D6D556ED1D4ED56E9DEF8"))
    {
      return 44;
    }
    else if (!strcmp(__s1, "2AD526A49877323714C9104CAF0E3F117082A43D0955315AF0F43F7AADFF2586"))
    {
      return 45;
    }
    else if (!strcmp(__s1, "0559E51C335EC81412374E33F830E804DF39F2FF796E95308A25A8A8BFA0475A"))
    {
      return 46;
    }
    else if (!strcmp(__s1, "656B51D5FF08D489CFD54BA967A44D9FBB3DEE2BEF089EADFF59F0176430773E"))
    {
      return 47;
    }
    else if (!strcmp(__s1, "08E5DC7B9F52DFF7963D2715D3927A1356E247326CAF5C76830A7D7227B991B0"))
    {
      return 48;
    }
    else if (!strcmp(__s1, "97566BDFEF237739AC2EFF164112983D98FCFAC0EE4F30C671D4908D02520208"))
    {
      return 49;
    }
    else if (!strcmp(__s1, "5ABE83ED58C646C0795991EFC53EFAF95AD3FA933AFD23A5181FDC1D4DFDFBA0"))
    {
      return 50;
    }
    else if (!strcmp(__s1, "F7FED94B5F000049299482FDF5F0D7700B1A29309A0313344D1B861FDC715239"))
    {
      return 51;
    }
    else if (!strcmp(__s1, "CD2FFA0725298FE71DCD34C05D62ABC16C9F0A5690297DF5376D65198C5D7890"))
    {
      return 52;
    }
    else if (!strcmp(__s1, "DE73E30C620D682FA8317A0FEB5087A2C63811110674D46B9894D955808CBC9E"))
    {
      return 53;
    }
    else if (!strcmp(__s1, "B1981D6FA7779DA1E867116607CFA5B05E44C5C8D8A9E8AD1906FEF7F8BA1874"))
    {
      return 54;
    }
    else if (!strcmp(__s1, "B942A1DFEF5624B827CF986CC919BB4891C1C421645311F2355CE6766AEBEF2E"))
    {
      return 55;
    }
    else if (!strcmp(__s1, "B2D70BAA5FA87BB6C253C5314B6E833D882783F1E906897B196FCC4D6572D5C6"))
    {
      return 56;
    }
    else if (!strcmp(__s1, "AD07330BE6EF87E08C9E5D058B4CBD9F71C39D7C1B916A834F263B5E7B3DFC43"))
    {
      return 57;
    }
    else if (!strcmp(__s1, "9AD2DE6034B18A80CF5573485FEEE0B7EBF72DF6DD292271C9B412FBDF8037C5"))
    {
      return 58;
    }
    else if (!strcmp(__s1, "2BBC664C4BF8238D5FC7A5376438D13CE61B9EBC1FF8EC52F6F5A80543BEACD4"))
    {
      return 59;
    }
    else if (!strcmp(__s1, "B4E21A931309227166902DC5A3E8BACAE69D267A7E733A61139712AC108C6E4E"))
    {
      return 60;
    }
    else if (!strcmp(__s1, "B0FE94C089261C381766B5366AEB1C6ACBF46BC57B4298D568C5EDFCABE30A8A"))
    {
      return 61;
    }
    else if (!strcmp(__s1, "3EFF071A6AD7AF2F6FD8A87059C9CDD5937E87D8B9B4D215C449748133129BDE"))
    {
      return 62;
    }
    else if (!strcmp(__s1, "0B5AF8D437BA25AB6225EADB7A0FC92659AAB2122AC993E00CFA2F83B0E143B3"))
    {
      return 63;
    }
    else if (!strcmp(__s1, "EE48140733BA4D00D8E6CB099101E0BBB6FDB2F71FC05FC0FEAC8A6CF3100B14"))
    {
      return 64;
    }
    else if (!strcmp(__s1, "152B31D6CDC80AD2A7F1593F1E81074F9FEB957043B213E8537F5C9098DFD449"))
    {
      return 65;
    }
    else if (!strcmp(__s1, "0E8C0AF79B626C37D4BD04D61ACC6B1841B7F784FEF6692E84A2B1971C771CF6"))
    {
      return 66;
    }
    else if (!strcmp(__s1, "12038A812C239440324EDCEB54DA13B6B7D0C4D89F61582F9A4628C4409FAAE6"))
    {
      return 67;
    }
    else if (!strcmp(__s1, "12ADE1668F06776E2CE9CC2CC563E0BD45A5346C6D883D748FD3C132E7EB8A2F"))
    {
      return 68;
    }
    else if (!strcmp(__s1, "D5D2B254E0B808929711EBFC999F2E0F884DB9876C90B056E230E4DD6D3261CE"))
    {
      return 69;
    }
    else if (!strcmp(__s1, "CA5FDEAD1B2DEC16F5B525E9AE3CA7C4EDC163EEE950D7A77A7C5284A607369F"))
    {
      return 70;
    }
    else if (!strcmp(__s1, "28B92DE785184753FAF5508E080CB8FE784D6A5214E5E6382751D52534A72FCE"))
    {
      return 71;
    }
    else if (!strcmp(__s1, "316635C054256728753D20516A98550DBF581EBA16691321F7BBCE3A9177E09D"))
    {
      return 72;
    }
    else if (!strcmp(__s1, "D2D14661D9692EBD5065F06CB4C2AC7DD14339CAEA538D5AFA4A2B5813E87D5D"))
    {
      return 73;
    }
    else if (!strcmp(__s1, "96775CCE99E1AD0C194329938D933579304BAD868B3720C34D20D27536E7AEE7"))
    {
      return 74;
    }
    else if (!strcmp(__s1, "615761368EF9DB43D1A8DF2EF1CC087B17906454F025A1E1C5BB95B022582B9B"))
    {
      return 75;
    }
    else if (!strcmp(__s1, "2A5A81F290FDE6D31DB132DD493737A7252C441023286294F3C77CE48DD4E2F0"))
    {
      return 76;
    }
    else if (!strcmp(__s1, "7262FC4EB2434704063840AB716EF14B50F3A0E5E3457E8EBF9E014325CAE94F"))
    {
      return 77;
    }
    else if (!strcmp(__s1, "A2B9B85B3AADE88EBF43D3DB522C31E6A781700C0112047F72FA920A638A69BE"))
    {
      return 78;
    }
    else if (!strcmp(__s1, "D97205C2B224673AE923C3A7A003D96258A1A774E1C9E3CD513B0706C6657D48"))
    {
      return 79;
    }
    else if (!strcmp(__s1, "0C60DB8A2A73C9B343C4B279EDF24580976BD74BD0294B1AAC17B0A4273D8C28"))
    {
      return 80;
    }
    else if (!strcmp(__s1, "27A93DA3DF54447DCB9F371C54907BEFA8F17B7FA905EDAC2B523C7A0D93A918"))
    {
      return 81;
    }
    else if (!strcmp(__s1, "F98BB9D35C454CA00A884F6B9621A30F2C78A880A96D81B5E661391D74E8455A"))
    {
      return 82;
    }
    else if (!strcmp(__s1, "AC00030F77E6F4E41BF49DC8D7A42C68813DB0C3B652C340B340C01873EB0AB7"))
    {
      return 83;
    }
    else if (!strcmp(__s1, "BA7A33DF7A125E9EE5C1036DD6DADB3B74CC4B9BA9C5C1B235C131E70B7B4E41"))
    {
      return 84;
    }
    else if (!strcmp(__s1, "038FA673BF47F15B7C5236E4863A96C910C3993AB31529A041DE199F3EEB66CB"))
    {
      return 85;
    }
    else if (!strcmp(__s1, "E44B08E42854960D4B0277D46D6181F8B07FAC3C3CCF5A6B31AA9DC9FA4057D6"))
    {
      return 86;
    }
    else if (!strcmp(__s1, "B80C09BAE4062CCC534F6E6EF6EA6E0ABEFF12048A342EB3138E7B76890D8D3B"))
    {
      return 87;
    }
    else if (!strcmp(__s1, "00EB2F035A98609505AB8DAB9B98D1FECEAA766F368932F7FE6316AE8BAEFBE0"))
    {
      return 88;
    }
    else if (!strcmp(__s1, "6368DD78E9738AAB3001F4C17EBE26BFB0414CDCC1399D092A48AB5A57536454"))
    {
      return 89;
    }
    else if (!strcmp(__s1, "C0909793BE0330B378C0CD09F0D9B9F09F599EC8C6B94C37ABA9011E83596F90"))
    {
      return 90;
    }
    else if (!strcmp(__s1, "11221127E966E92C6C18F64D312E8C9AF73DB3A9DB792E4442FCECE644A8E7B1"))
    {
      return 91;
    }
    else if (!strcmp(__s1, "FED7B076A3D7DE52B6D9A21D14FB1A49BABF975B73BE74181C4EA26976162724"))
    {
      return 92;
    }
    else if (!strcmp(__s1, "26456E27CBF6165D84C883AC666AF50E5EAAA39D07887C37BD3A9BD26A74B2FE"))
    {
      return 93;
    }
    else if (!strcmp(__s1, "F365A0CC0EEB38797FCD82D5E4AC3B2ACF44EB34D333D4AB1AD8D8891B7F8892"))
    {
      return 94;
    }
    else if (!strcmp(__s1, "A5F302F870E09D718474CBCADD4E0B3589351A5007777F1B805169B54226B875"))
    {
      return 95;
    }
    else if (!strcmp(__s1, "903B8B51F5368A75F9777D9155C6A2664116770701ED241A6D1662131A802333"))
    {
      return 96;
    }
    else if (!strcmp(__s1, "DD96D75C3E233EE9B4528803691C00E98D5F49F2B4B3B83676332ABFBB65DE07"))
    {
      return 97;
    }
    else if (!strcmp(__s1, "F2F4280636DC1065AEFE537517EE6B816C8133EF2E5C106D92DDD2B0E0DFC69D"))
    {
      return 98;
    }
    else if (!strcmp(__s1, "EA4B7DF630D01A5FC30F51DEEC420CB0F667CC57639F1C1D8E67D97B12524E0C"))
    {
      return 99;
    }
    else if (!strcmp(__s1, "89DBD24AAAD1D4D50F3F74A7040B52C5B06B4768F1E09DC89D4067D243744882"))
    {
      return 100;
    }
    else if (!strcmp(__s1, "F942A7256C77ACD182AE0B767F21133B11937660A61610A18CD14087D1F2F71C"))
    {
      return 101;
    }
    else if (!strcmp(__s1, "A739EE6D2886FEBC60795D1D8803BF19A1A3463541AB6024A90DBB8E4650F589"))
    {
      return 102;
    }
    else if (!strcmp(__s1, "7B872939683DD4D93E917C20089932C93AACDE7E7C0738CB78026B6FC178B1D9"))
    {
      return 103;
    }
    else if (!strcmp(__s1, "9EB2D21E75D0AA677C8D110763485DB3A78262C89D05CA0C3AF7EBD2D6AB99DD"))
    {
      return 104;
    }
    else if (!strcmp(__s1, "AC7E4629ABFA704A6369754CB199383D2901F0916E230FB75D765420550E8244"))
    {
      return 105;
    }
    else if (!strcmp(__s1, "FF9225FC7116F7583194D2D2F948E6CFD131F9020C7B7C9D61A8DE2F46571C5F"))
    {
      return 106;
    }
    else if (!strcmp(__s1, "3216E3D0006FC749B832DD3C33FF4B7CAE3CE455B3FE030A3EB061DC0356D829"))
    {
      return 107;
    }
    else if (!strcmp(__s1, "41E40C57A9236569333335DEA9CB52F0058A4BF366335B45406F04F7E0A93CD5"))
    {
      return 108;
    }
    else if (!strcmp(__s1, "2F5E861CD13CBCECC15CB691FCC7DCE54FC0755F96F1289D26AFB056BD6788D5"))
    {
      return 109;
    }
    else if (!strcmp(__s1, "0C7AC4ECF65C2CA6215B602A5C050FB69BFF2BA322B47A6890E2F0EE8CA922C0"))
    {
      return 110;
    }
    else if (!strcmp(__s1, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E"))
    {
      return 111;
    }
    else if (!strcmp(__s1, "C1F228965CE72DCBDF0563CA9125430BFC5215644CF7426375AAE844D9C393CF"))
    {
      return 112;
    }
    else if (!strcmp(__s1, "860E5D173A5DA8DE4C5A88EDDF57BFB0D9E7D010DFD109852AF3D1C8480DE485"))
    {
      return 113;
    }
    else if (!strcmp(__s1, "2FAB2C822F900089CD78CBC4AB947F23F8CD8C71D0257BB20870F2437F345683"))
    {
      return 114;
    }
    else if (!strcmp(__s1, "1E95F2EC42D9C8BCDDA799372B28B445C5807F73AC0A88117EE9819CECB7B2C2"))
    {
      return 115;
    }
    else if (!strcmp(__s1, "20FE67CA0BC6365A5F2E83A71443FCD1FF79D0FB655A2B26EF0293D935F451AD"))
    {
      return 116;
    }
    else if (!strcmp(__s1, "DFAD6694DAD2CF309685D73CC39C1523D4D92A94D9CBD4B16F3468EB89D1A732"))
    {
      return 117;
    }
    else if (!strcmp(__s1, "137C754E9BEA98B17962D83B8E9EBF70D33891C8B32A876D13CD776C2EB805CD"))
    {
      return 118;
    }
    else if (!strcmp(__s1, "97448FE09776C5C51AE32BFC9D1EE9728156924E321AAA8318E2F2A1C2A62C31"))
    {
      return 119;
    }
    else if (!strcmp(__s1, "BECA30E32A8DD8B418D4AC9150B23FC3F4AAAAFCA128274C1DE87621A54FF840"))
    {
      return 120;
    }
    else if (!strcmp(__s1, "D74797F7B8D690624B1F756C30E55986965EB05837E721FA720A2DE0B8E56C30"))
    {
      return 121;
    }
    else if (!strcmp(__s1, "5B4446A6E3D13E950BC7F482E0A1C6555A187EE5321E7294F0E604F3BA96322F"))
    {
      return 122;
    }
    else if (!strcmp(__s1, "A2AEBDCCCD11BCF937DC0DE23C78762A9FD1425DA34EE911F615F041D947D3CE"))
    {
      return 123;
    }
    else if (!strcmp(__s1, "C517BA395C2A64392D1C11AE86475E6F476E22867252458FCC5152B58A43603D"))
    {
      return 124;
    }
    else if (!strcmp(__s1, "E5FA747F28EBFE3E4BBD4BE279044F914B09502E3EB62035341300536242F90B"))
    {
      return 125;
    }
    else if (!strcmp(__s1, "7973408EAAC4FAF261DDB68AD698E34EFC1018CD38876DB49DA34E1C044F2CFC"))
    {
      return 126;
    }
    else if (!strcmp(__s1, "18974CEA3A33281B8436277C48EB0BB5EEA5111C4544565257A2EA24EEA75CDA"))
    {
      return 127;
    }
    else if (!strcmp(__s1, "7EFBE7B468F2C8FF4C34E67EDC7E8F80DB3E295C6221F8408D4440A78430C64F"))
    {
      return 128;
    }
    else if (!strcmp(__s1, "D67C31C99E39309E5E09E11F7A5E7B3576972C57135463976A5539814860D051"))
    {
      return 129;
    }
    else if (!strcmp(__s1, "3473F3E1E2A85DAEEB664F0C421CDF84D3B27258796FFBB2881208B73DEFC007"))
    {
      return 130;
    }
    else if (!strcmp(__s1, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252"))
    {
      return 131;
    }
    else if (!strcmp(__s1, "1B57426DF9B957C95C4296A880A1D75B70200B72E8554E7D713D37098154E907"))
    {
      return 132;
    }
    else if (!strcmp(__s1, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B"))
    {
      return 133;
    }
    else if (!strcmp(__s1, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC"))
    {
      return 134;
    }
    else if (!strcmp(__s1, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563"))
    {
      return 135;
    }
    else if (!strcmp(__s1, "89FBB3BDB9379AD11D47A5F312EDF73706C589F07B8C14BE99A3D604DA840455"))
    {
      return 136;
    }
    else if (!strcmp(__s1, "BEE28431C5E817DF3C9C265B3672660D03A6C89EE5236507323554958AE59578"))
    {
      return 137;
    }
    else if (!strcmp(__s1, "1F6D45D5DEB05AFFD7C7C1DAC38D882FA9A9D616990FBB135621C1F0D30CA596"))
    {
      return 138;
    }
    else if (!strcmp(__s1, "24B2EDEBE37A35C073BBC2B83505D52B7FDB9C121406C6308CF528457883D4BE"))
    {
      return 139;
    }
    else if (!strcmp(__s1, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2"))
    {
      return 140;
    }
    else if (!strcmp(__s1, "CFEE285EA42317F1E8CE16B6BAED451F1D8029F8C057963B2486EA9093B3CD28"))
    {
      return 141;
    }
    else if (!strcmp(__s1, "C46314BBA0AA01362E06989DA928CE0AED5C5A628892598193CCE37C495FE865"))
    {
      return 142;
    }
    else if (!strcmp(__s1, "DC615E09F661E340E6495BF8406FDB597D2C6B7CD5AB0CA1E1155D715C73C434"))
    {
      return 143;
    }
    else if (!strcmp(__s1, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378"))
    {
      return 144;
    }
    else if (!strcmp(__s1, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181"))
    {
      return 145;
    }
    else if (!strcmp(__s1, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5"))
    {
      return 146;
    }
    else if (!strcmp(__s1, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7"))
    {
      return 147;
    }
    else if (!strcmp(__s1, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A"))
    {
      return 148;
    }
    else if (!strcmp(__s1, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC"))
    {
      return 149;
    }
    else if (!strcmp(__s1, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6"))
    {
      return 150;
    }
    else if (!strcmp(__s1, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02"))
    {
      return 151;
    }
    else if (!strcmp(__s1, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379"))
    {
      return 152;
    }
    else if (!strcmp(__s1, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317"))
    {
      return 153;
    }
    else if (!strcmp(__s1, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853"))
    {
      return 154;
    }
    else if (!strcmp(__s1, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2"))
    {
      return 155;
    }
    else if (!strcmp(__s1, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62"))
    {
      return 156;
    }
    else if (!strcmp(__s1, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F"))
    {
      return 157;
    }
    else if (!strcmp(__s1, "3E6CC5C197ACBED66DB18F36FE33CAF7D744175ADB2FE6C6FAE97B0CBB5B21CD"))
    {
      return 158;
    }
    else if (!strcmp(__s1, "250DFDD8D5BC61F9B0D9CD91F4DDCE0E4799ED7B1264EEF03FAD66612BCA288D"))
    {
      return 159;
    }
    else if (!strcmp(__s1, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80"))
    {
      return 160;
    }
    else if (!strcmp(__s1, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26"))
    {
      return 161;
    }
    else if (!strcmp(__s1, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8"))
    {
      return 162;
    }
    else if (!strcmp(__s1, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48"))
    {
      return 163;
    }
    else if (!strcmp(__s1, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C"))
    {
      return 164;
    }
    else if (!strcmp(__s1, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E"))
    {
      return 165;
    }
    else if (!strcmp(__s1, "EA870EDD0C8AD026DB44FB5C6AC53D8875D62255F794C489EAB9F8222F0616CB"))
    {
      return 166;
    }
    else if (!strcmp(__s1, "B0D00D3E15F0D45E0DAD2FE819496F3837110BDADE01AC3A17862CDDACDEE5AB"))
    {
      return 167;
    }
    else if (!strcmp(__s1, "7B4CF9B631F81D78F2CEA2F4869D0137BE4CA667AE9B13DB22A617C2BA15C075"))
    {
      return 168;
    }
    else if (!strcmp(__s1, "CA1DD5B830AB9668FC5EBD5904EB9B0113C766FCE57EF59AEC58982AE744413A"))
    {
      return 169;
    }
    else if (!strcmp(__s1, "2D29DA77B4EF8E7B1D2F3F764587274747D1C2AB05C053B4CE38AE701116BF6A"))
    {
      return 170;
    }
    else if (!strcmp(__s1, "83156D57355E76E46E7319E18EA9D6A8D20E78958733028FD3F74C3FD9B0BCC5"))
    {
      return 171;
    }
    else if (!strcmp(__s1, "95DD082534B76465BAA6B38551429C11CD11A77CB351740B05F3D18D2CD2B990"))
    {
      return 172;
    }
    else if (!strcmp(__s1, "996E91405229B0F31165936664CCE9F7D3145963C1A14FA9DD57A320E349F123"))
    {
      return 173;
    }
    else if (!strcmp(__s1, "294111BEC0EE4CFDDCE430D197B75A1CB09E21EB1C822E16CD1CBCC982D46A3F"))
    {
      return 174;
    }
    else if (!strcmp(__s1, "727820125C45F365E03E3C14E8202CFF1E0049F24543B5D589F3956E11F5C581"))
    {
      return 175;
    }
    else if (!strcmp(__s1, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB"))
    {
      return 176;
    }
    else if (!strcmp(__s1, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42"))
    {
      return 177;
    }
    else if (!strcmp(__s1, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8"))
    {
      return 178;
    }
    else if (!strcmp(__s1, "25C93B5B4A76FFE8A20CA68271CF612F43D0B5504B6680945F3BB046DA47213A"))
    {
      return 179;
    }
    else if (!strcmp(__s1, "B6B78FABA9FD12B688986DC5EA4D4B8B731265EDEC1E5AE52B0CAA6FC31801F2"))
    {
      return 180;
    }
    else if (!strcmp(__s1, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2"))
    {
      return 181;
    }
    else if (!strcmp(__s1, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70"))
    {
      return 182;
    }
    else if (!strcmp(__s1, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89"))
    {
      return 183;
    }
    else if (!strcmp(__s1, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4"))
    {
      return 184;
    }
    else if (!strcmp(__s1, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006"))
    {
      return 185;
    }
    else if (!strcmp(__s1, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D"))
    {
      return 186;
    }
    else if (!strcmp(__s1, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85"))
    {
      return 187;
    }
    else if (!strcmp(__s1, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD"))
    {
      return 188;
    }
    else if (!strcmp(__s1, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3"))
    {
      return 189;
    }
    else if (!strcmp(__s1, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A"))
    {
      return 190;
    }
    else if (!strcmp(__s1, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472"))
    {
      return 191;
    }
    else if (!strcmp(__s1, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035"))
    {
      return 192;
    }
    else if (!strcmp(__s1, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D"))
    {
      return 193;
    }
    else if (!strcmp(__s1, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A"))
    {
      return 194;
    }
    else if (!strcmp(__s1, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46"))
    {
      return 195;
    }
    else if (!strcmp(__s1, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE"))
    {
      return 196;
    }
    else if (!strcmp(__s1, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38"))
    {
      return 197;
    }
    else if (!strcmp(__s1, "2660D91E9E44E8375C647F1F4FDD89923B3BFA26A3AF29D5937BAF8EF1E10CFE"))
    {
      return 198;
    }
    else if (!strcmp(__s1, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182"))
    {
      return 199;
    }
    else if (!strcmp(__s1, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791"))
    {
      return 200;
    }
    else if (!strcmp(__s1, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174"))
    {
      return 201;
    }
    else if (!strcmp(__s1, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69"))
    {
      return 202;
    }
    else if (!strcmp(__s1, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7"))
    {
      return 203;
    }
    else if (!strcmp(__s1, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D"))
    {
      return 204;
    }
    else if (!strcmp(__s1, "5DCA18DF36F9FA665E30157E71359C15F04492B59DA944CC2B10D7A925843DA7"))
    {
      return 205;
    }
    else if (!strcmp(__s1, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A"))
    {
      return 206;
    }
    else if (!strcmp(__s1, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D"))
    {
      return 207;
    }
    else if (!strcmp(__s1, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08"))
    {
      return 208;
    }
    else if (!strcmp(__s1, "81E23B94D526C5353E9E499DE4D53C13BAC39B09D64961C3259B99425E493446"))
    {
      return 209;
    }
    else if (!strcmp(__s1, "D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50"))
    {
      return 210;
    }
    else if (!strcmp(__s1, "EEC15933C85F49CDCD9A4DC75821303FD2E5E1A8E2651667DB103FF51457DF71"))
    {
      return 211;
    }
    else if (!strcmp(__s1, "19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682"))
    {
      return 212;
    }
    else if (!strcmp(__s1, "54D70702DEC6F85C65B8D1E26F089610058B0CDC6B23440F6FD07F26E6E23315"))
    {
      return 213;
    }
    else if (!strcmp(__s1, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5"))
    {
      return 214;
    }
    else if (!strcmp(__s1, "2C9ACA342CA7C8F4A29CA1C798155F709AC8B8D95F0D20C549DBC00F1C42184D"))
    {
      return 215;
    }
    else if (!strcmp(__s1, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1"))
    {
      return 216;
    }
    else if (!strcmp(__s1, "0AAC94B02176D8B144479EAFEE546A608C8B5E61D7A27481868626A7820E0CB1"))
    {
      return 217;
    }
    else if (!strcmp(__s1, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10"))
    {
      return 218;
    }
    else if (!strcmp(__s1, "1ADDCB1D74CE36E8E4C6007CDB14DD6A053A9C2FBDB707345B3C5E7BB07299AA"))
    {
      return 219;
    }
    else if (!strcmp(__s1, "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F"))
    {
      return 220;
    }
    else if (!strcmp(__s1, "E2D94E3051875514422124C186B05CDA6F417AF1FC67511A17055B65BED227AA"))
    {
      return 221;
    }
    else if (!strcmp(__s1, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745"))
    {
      return 222;
    }
    else if (!strcmp(__s1, "A6DE7D11FD45FD0B0F5541862F786FAAA17E530F3CBAC5CE63EFD6C7B7B8EC27"))
    {
      return 223;
    }
    else if (!strcmp(__s1, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC"))
    {
      return 224;
    }
    else if (!strcmp(__s1, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3"))
    {
      return 225;
    }
    else if (!strcmp(__s1, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85"))
    {
      return 226;
    }
    else if (!strcmp(__s1, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59"))
    {
      return 227;
    }
    else if (!strcmp(__s1, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F"))
    {
      return 228;
    }
    else
    {
      return 229;
    }
  }
  return result;
}

uint64_t sub_169C48(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char *v3;
  char *v4;

  v2 = a2 - 128;
  if (a2 < 0x80)
  {
    v3 = (char *)&unk_4A447C + 4 * (int)a2;
    return *(unsigned int *)v3;
  }
  if (v2 < 0x40)
  {
    v4 = (char *)&unk_4A467C;
LABEL_7:
    v3 = &v4[4 * v2];
    return *(unsigned int *)v3;
  }
  v2 = a2 - 192;
  if (a2 - 192 < 0x25)
  {
    v4 = (char *)&unk_4A477C;
    goto LABEL_7;
  }
  return 16;
}

uint64_t sub_169C9C(uint64_t a1, int *a2)
{
  int *v3;

  v3 = agxps_timeseries_div_ts(a2, 0, 0x41D0000000000000uLL, a2, 0);
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 8))(a1, v3);
}

void sub_169CE0(uint64_t a1@<X0>, const void *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t **v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  const void *v25[2];

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_8;
  }
  v6 = (_QWORD *)sub_4DF4(v5);
  v25[0] = a2;
  v25[1] = (const void *)strlen((const char *)a2);
  v7 = sub_16B3C0(v6, v25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!v7)
  {
LABEL_8:
    v13 = (char *)operator new(8uLL);
    *a3 = v13;
    *(_QWORD *)v13 = a2;
    v13 += 8;
    a3[1] = v13;
    a3[2] = v13;
    return;
  }
  v9 = v7;
  v10 = v8;
  if (v7 == v8)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = v7;
    do
    {
      ++v11;
      v12 = (uint64_t **)*v12;
    }
    while (v12 != v10);
  }
  sub_169EAC((void **)a3, v11);
  if (v9 != v10)
  {
    v14 = a3 + 2;
    v15 = a3[1];
    do
    {
      if ((unint64_t)v15 >= *v14)
      {
        v16 = (v15 - *a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_4074();
        v17 = *v14 - (_QWORD)*a3;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)sub_40FC((uint64_t)(a3 + 2), v19);
        else
          v20 = 0;
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v9[4];
        v15 = v21 + 8;
        v23 = *a3;
        v22 = a3[1];
        if (v22 != *a3)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = *a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_QWORD *)v15 = v9[4];
        v15 += 8;
      }
      a3[1] = v15;
      v9 = (uint64_t **)*v9;
    }
    while (v9 != v10);
  }
}

void sub_169E88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_169EAC(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_4074();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_40FC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_169F40(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_C0BC((uint64_t)a1);
  return a1;
}

void sub_169F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_169F88(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  sub_C15C();
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
      agxps_timeseries_destroy(*v2++);
    while (v2 != v3);
    v2 = *a1;
  }
  if (v2)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_169FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;

  v4 = agxps_timeseries_create(a2, a3);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(uint64_t **)a1;
    v10 = ((uint64_t)v7 - *(_QWORD *)a1) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_4074();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)sub_40FC(a1 + 16, v13);
      v9 = *(uint64_t **)a1;
      v7 = *(uint64_t **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    while (v7 != v9)
    {
      v17 = *--v7;
      *--v15 = v17;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return v5;
}

uint64_t agxps_derived_counter_gpu_descriptor_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((!a5 || a3 && a4) && (!a8 || a6 && a7))
    operator new();
  return 0;
}

void sub_16A224(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  operator delete();
}

uint64_t agxps_counter_get_raw_counters_used_by_derived_counters(unsigned int *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _BOOL4 is_valid;
  _BOOL4 v11;
  uint64_t result;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t **v16;
  unint64_t **v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *i;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t *v27[3];
  unint64_t v28[5];
  int v29;
  __int128 __p;
  __int128 v31;
  __int128 v32;
  _BYTE v33[32];
  int v34;
  uint64_t (**v35)();
  _BYTE v36[32];
  int v37;
  uint64_t (**v38)();
  _BYTE v39[32];
  int v40;

  is_valid = agxps_gpu_is_valid((uint64_t)a1);
  if (a2)
    v11 = is_valid;
  else
    v11 = 0;
  if (!a3)
    v11 = 0;
  if (!a4)
    v11 = 0;
  if (a5)
    result = v11;
  else
    result = 0;
  if ((_DWORD)result == 1)
  {
    v23 = a5;
    v24 = 0u;
    v25 = 0u;
    v26 = 1065353216;
    do
    {
      v13 = *a2;
      if (agxps_counter_is_derived(*a2))
      {
        v38 = &off_7237F0;
        memset(v39, 0, sizeof(v39));
        v40 = 1065353216;
        v35 = &off_7237F0;
        memset(v36, 0, sizeof(v36));
        v37 = 1065353216;
        v14 = sub_4FF4(a1);
        v28[0] = (unint64_t)off_723808;
        v28[1] = (unint64_t)v14;
        v28[2] = (unint64_t)a1;
        v28[3] = (unint64_t)&v38;
        v28[4] = (unint64_t)&v35;
        __p = 0u;
        v31 = 0u;
        v32 = 0u;
        memset(v33, 0, sizeof(v33));
        v29 = 1;
        v34 = 1065353216;
        sub_169F40(v27);
        v15 = sub_506C(v13);
        sub_41E8((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v15, (uint64_t)a1, (uint64_t)v28, (uint64_t)&v38, (uint64_t)&v35, (uint64_t)v27);
        v17 = (unint64_t **)*((_QWORD *)&v31 + 1);
        v16 = (unint64_t **)v32;
        while (v17 != v16)
        {
          v19 = *v17;
          v18 = v17[1];
          while (v19 != v18)
          {
            sub_16AD98((uint64_t)&v24, v19, v19);
            ++v19;
          }
          v17 += 3;
        }
        sub_169F88(v27);
        v28[0] = (unint64_t)off_723808;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v33);
        v27[0] = (uint64_t *)&v31 + 1;
        std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100]((void ***)v27);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v35 = &off_7237F0;
        sub_6E30((uint64_t)v36);
        v38 = &off_7237F0;
        sub_6E30((uint64_t)v39);
      }
      ++a2;
      --a3;
    }
    while (a3);
    v28[0] = agxps_counter_get_ident(a1, kAGXPSCounterGPUCycles);
    sub_16B544(&v24, v28);
    v28[0] = agxps_counter_get_ident(a1, kAGXPSCounterDeltaSeconds);
    sub_16B544(&v24, v28);
    v20 = *((_QWORD *)&v25 + 1);
    *v23 = *((_QWORD *)&v25 + 1);
    if (v20)
    {
      v21 = malloc_type_malloc(8 * v20, 0x100004000313F17uLL);
      *a4 = v21;
      for (i = (_QWORD *)v25; i; i = (_QWORD *)*i)
        *v21++ = i[2];
    }
    else
    {
      *a4 = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v24);
    return 1;
  }
  return result;
}

void sub_16A520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_16A5B8(uint64_t a1, char *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v2 = a1 + 8;
  sub_96CC(__p, a2);
  sub_16A628(v2, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_16A60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_16A628(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_7D04(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_81AC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_7750(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_16A88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_8250(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_16A8A8(uint64_t a1, uint64_t a2)
{
  uint64_t ident;
  _QWORD *v5;
  void *__p;
  void *v8;
  _QWORD *v9;

  ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), kAGXPSCounterGPUCycles);
  v5 = operator new(8uLL);
  __p = v5;
  *v5 = ident;
  v8 = v5 + 1;
  v9 = v5 + 1;
  sub_16AAC4(a1, (unint64_t **)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a2;
}

void sub_16A920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_16A93C(uint64_t a1, uint64_t a2)
{
  uint64_t ident;
  _QWORD *v5;
  void *__p;
  void *v8;
  _QWORD *v9;

  ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), kAGXPSCounterDeltaSeconds);
  v5 = operator new(8uLL);
  __p = v5;
  *v5 = ident;
  v8 = v5 + 1;
  v9 = v5 + 1;
  sub_16AAC4(a1, (unint64_t **)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a2;
}

void sub_16A9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_16A9D0(uint64_t a1, const void *a2)
{
  int v3;
  char **v4;
  char **v5;
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  char **v12;
  uint64_t ident;
  void **p_p;

  v3 = *(_DWORD *)(a1 + 40);
  sub_169CE0(a1, a2, (char **)&v11);
  __p = 0;
  v9 = 0;
  v10 = 0;
  v4 = (char **)v11;
  if ((v3 & 1) != 0)
    v5 = (char **)((char *)v11 + 8);
  else
    v5 = v12;
  p_p = &__p;
  while (v4 != v5)
  {
    ident = agxps_counter_get_ident(*(unsigned int **)(a1 + 16), *v4);
    sub_16B2D4((uint64_t *)&p_p, &ident);
    ++v4;
  }
  sub_16AAC4(a1, (unint64_t **)&__p);
  v6 = agxps_timeseries_create(0, 0);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = (char **)v11;
    operator delete(v11);
  }
  return v6;
}

void sub_16AA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_16AAC4(uint64_t result, unint64_t **a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29[3];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = (uint64_t *)result;
    while (1)
    {
      result = agxps_counter_is_valid(*v2);
      if ((_DWORD)result)
        break;
      if (++v2 == v3)
        return result;
    }
    v7 = *a2;
    v6 = a2[1];
    if (v6 != *a2 && (unint64_t)((char *)v6 - (char *)*a2) >= 0x10)
    {
      while (1)
      {
        result = agxps_counter_is_derived(*v7);
        if ((result & 1) != 0)
          break;
        if (++v7 == v6)
        {
          v7 = *a2;
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      result = (uint64_t)sub_16ACE4(v5 + 12, v7);
      if (!result)
      {
        v9 = (uint64_t **)*a2;
        v10 = (uint64_t **)a2[1];
        if (*a2 == (unint64_t *)v10)
        {
          v12 = *a2;
        }
        else
        {
          do
          {
            v11 = *v9++;
            v29[0] = v11;
            sub_16AD98((uint64_t)(v5 + 12), (unint64_t *)v29, v29);
          }
          while (v9 != v10);
          v12 = *a2;
          v9 = (uint64_t **)a2[1];
        }
        if ((char *)v9 - (char *)v12 == 8 && (v13 = *v12, agxps_counter_is_derived(*v12)))
        {
          v14 = v5[8];
          v15 = (unint64_t *)v5[7];
          if ((unint64_t)v15 >= v14)
          {
            v19 = (unint64_t *)v5[6];
            v20 = v15 - v19;
            if ((unint64_t)(v20 + 1) >> 61)
              sub_4074();
            v21 = v14 - (_QWORD)v19;
            v22 = (uint64_t)(v14 - (_QWORD)v19) >> 2;
            if (v22 <= v20 + 1)
              v22 = v20 + 1;
            if (v21 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
            {
              v24 = (char *)sub_40FC((uint64_t)(v5 + 8), v23);
              v19 = (unint64_t *)v5[6];
              v15 = (unint64_t *)v5[7];
            }
            else
            {
              v24 = 0;
            }
            v25 = (unint64_t *)&v24[8 * v20];
            v26 = &v24[8 * v23];
            *v25 = v13;
            v16 = v25 + 1;
            while (v15 != v19)
            {
              v27 = *--v15;
              *--v25 = v27;
            }
            v5[6] = (uint64_t)v25;
            v5[7] = (uint64_t)v16;
            v5[8] = (uint64_t)v26;
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v15 = v13;
            v16 = v15 + 1;
          }
          v5[7] = (uint64_t)v16;
          v28 = sub_506C(v13);
          sub_169F40(v29);
          sub_41E8((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v28, v5[2], (uint64_t)v5, v5[3], v5[4], (uint64_t)v29);
          return (uint64_t)sub_169F88(v29);
        }
        else
        {
          v17 = v5 + 9;
          v18 = v5[10];
          if (v18 >= v5[11])
          {
            result = sub_16B000(v17, (uint64_t)a2);
          }
          else
          {
            sub_16AFB0((uint64_t)v17, (uint64_t)a2);
            result = v18 + 24;
          }
          v5[10] = result;
        }
      }
    }
  }
  return result;
}

void sub_16ACD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_169F88((uint64_t **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_16ACE4(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_16AD98(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_7750(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_16AF9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_16AFB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_16B114(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_16AFF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_16B000(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_4074();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_8C40(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_16B114(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  sub_16B18C(a1, v14);
  v12 = a1[1];
  sub_60B3C((uint64_t)v14);
  return v12;
}

void sub_16B100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_60B3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_16B114(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2D298(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_16B170(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_16B18C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_16B200((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_16B200(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_16B2A0((uint64_t)v11);
  return v9;
}

uint64_t sub_16B2A0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_60AF8(a1);
  return a1;
}

uint64_t *sub_16B2D4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_4074();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_40FC((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t **sub_16B3C0(_QWORD *a1, const void **a2)
{
  uint64_t **v3;
  uint64_t **v4;
  size_t v5;
  const void *v6;
  uint64_t **v7;

  v3 = sub_16B430(a1, (uint64_t)a2);
  v4 = v3;
  if (v3)
  {
    v6 = *a2;
    v5 = (size_t)a2[1];
    v7 = v3;
    do
      v7 = (uint64_t **)*v7;
    while (v7 && v7[3] == (uint64_t *)v5 && !memcmp(v7[2], v6, v5));
  }
  return v4;
}

uint64_t **sub_16B430(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = sub_B0E4((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *sub_16B544(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = sub_16ACE4(a1, a2);
  if (result)
  {
    sub_16B578(a1, result);
    return (_QWORD *)(&dword_0 + 1);
  }
  return result;
}

uint64_t sub_16B578(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_16B5B8(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *sub_16B5B8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

unsigned int *sub_16B6EC(unsigned int *result)
{
  unsigned int *v1;
  uint8x8_t v2;
  uint8x8_t v3;
  uint8x8_t v5;

  if (result)
  {
    v1 = result;
    result = 0;
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F)
          operator new();
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_16B7B8(uint64_t a1, __int128 *a2)
{
  _BYTE *v3;
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int v22;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_723830;
  v3 = (_BYTE *)(a1 + 39500);
  v4 = *a2;
  v5 = a2[1];
  v6 = (_BYTE *)(a1 + 34256);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v7 = (_BYTE *)(a1 + 376);
  v8 = 152;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  do
  {
    *(v7 - 216) = 0;
    *v7 = 0;
    v7 += 224;
    --v8;
  }
  while (v8);
  v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    *v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  v10 = (_BYTE *)(a1 + 34688);
  v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    *v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  v12 = (_BYTE *)(a1 + 35400);
  v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    *v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    *v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  v15 = (_BYTE *)(a1 + 39628);
  v16 = 8;
  do
  {
    *(v15 - 12) = 0;
    *v15 = 0;
    v15 += 16;
    --v16;
  }
  while (v16);
  v17 = (_BYTE *)(a1 + 39756);
  v18 = 8;
  do
  {
    *(v17 - 12) = 0;
    *v17 = 0;
    v17 += 16;
    --v18;
  }
  while (v18);
  v19 = (_BYTE *)(a1 + 39880);
  v20 = 128;
  do
  {
    *(v19 - 8) = 0;
    *v19 = 0;
    v19 += 16;
    --v20;
  }
  while (v20);
  *(_OWORD *)(a1 + 39472) = 0u;
  bzero((void *)(a1 + 41920), 0x1CB0uLL);
  v21 = *(_DWORD *)(a1 + 28);
  if (v21 > 1023)
  {
    if (v21 > 4095)
    {
      if (v21 == 4096)
      {
        v22 = 6;
        goto LABEL_36;
      }
      if (v21 == 0x2000)
      {
        v22 = 7;
        goto LABEL_36;
      }
    }
    else
    {
      if (v21 == 1024)
      {
        v22 = 4;
        goto LABEL_36;
      }
      if (v21 == 2048)
      {
        v22 = 5;
        goto LABEL_36;
      }
    }
  }
  else if (v21 > 255)
  {
    if (v21 == 256)
    {
      v22 = 2;
      goto LABEL_36;
    }
    if (v21 == 512)
    {
      v22 = 3;
      goto LABEL_36;
    }
  }
  else
  {
    if (v21 == 64)
    {
      v22 = 0;
      goto LABEL_36;
    }
    if (v21 == 128)
    {
      v22 = 1;
LABEL_36:
      *(_DWORD *)(a1 + 100) = v22;
    }
  }
  return a1;
}

_QWORD *sub_16B99C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  int v22;
  unint64_t v23;
  _WORD *v24;
  _WORD *v25;
  unsigned int v26;
  int v27;
  __int16 v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  unint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  NSObject *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  NSObject *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unsigned int v80;
  BOOL v81;
  unsigned int v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char *v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  NSObject *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  _QWORD *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  void **v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  unint64_t v177;
  _QWORD *v178;
  void **v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  NSObject *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  void **v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t *v242;
  char *v243;
  char *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  void *v249;
  char *v250;
  char *v251;
  unint64_t v252;
  uint64_t *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  _QWORD *v257;
  _DWORD *v258;
  unint64_t v259;
  _DWORD *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  int v267;
  _QWORD *v268;
  __int16 *v269;
  unint64_t v270;
  _WORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  int v279;
  _WORD *v280;
  char *v281;
  char *v282;
  __int16 v283;
  __int16 *v284;
  __int16 v285;
  _QWORD *v286;
  _DWORD *v287;
  unint64_t v288;
  _DWORD *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  int v296;
  _QWORD *v297;
  _QWORD *v298;
  unint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  void **v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t *v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  void **v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t v334;
  unint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  char *v342;
  _QWORD *v343;
  char *v344;
  char *v345;
  char *v346;
  uint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  unint64_t v350;
  _QWORD *v351;
  void **v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  _QWORD *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  _QWORD *v362;
  _DWORD *v363;
  unint64_t v364;
  _DWORD *v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  char *v370;
  char *v371;
  int v372;
  _QWORD *v373;
  _WORD *v374;
  unint64_t v375;
  _WORD *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  char *v382;
  char *v383;
  __int16 v384;
  _QWORD *v385;
  _DWORD *v386;
  unint64_t v387;
  _DWORD *v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  int v395;
  _QWORD *v396;
  _QWORD *v397;
  unint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  _QWORD *v407;
  _QWORD *v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  unint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  uint64_t v440;
  char *v441;
  char *v442;
  uint64_t v443;
  char *v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  int64_t v449;
  uint64_t v450;
  unint64_t v451;
  char *v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  __int128 v460;
  __int128 v461;
  int v462;
  uint64_t *v463;
  char *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t *v470;
  uint64_t *v471;
  unint64_t v472;
  char v473;
  char *v474;
  unint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  int64_t v480;
  char *v481;
  uint64_t v482;
  char *v483;
  char *v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  char *v490;
  void *v491;
  char *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  char *v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  char *v500;
  unint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char *v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  char *v517;
  uint64_t v518;
  _QWORD *v519;
  char *v520;
  uint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  char *v528;
  int64_t v529;
  uint64_t v530;
  unsigned __int8 *v531;
  BOOL v532;
  unsigned int v533;
  unint64_t v534;
  unint64_t v535;
  char *v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t i;
  _QWORD *v541;
  uint64_t v542;
  uint64_t *v543;
  unint64_t v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t *v551;
  char *v552;
  char *v553;
  uint64_t v554;
  void *v555;
  uint64_t v556;
  unsigned int v557;
  unsigned int v558;
  uint64_t v559;
  uint64_t v560;
  _DWORD *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  char v568;
  uint64_t *v569;
  _BYTE *v570;
  uint64_t v571;
  unint64_t *v572;
  void **v573;
  uint64_t v574;
  uint64_t v577;
  uint64_t v578[4];
  uint64_t v579[4];
  uint64_t v580[4];
  uint64_t v581[4];
  uint64_t v582[4];
  uint64_t v583[4];
  uint64_t v584[4];
  uint64_t v585[4];
  uint64_t v586[4];
  uint64_t v587[4];
  uint64_t v588[4];
  uint64_t v589[4];
  uint64_t v590[4];
  uint64_t v591[4];
  uint64_t v592[4];
  uint64_t v593[4];
  uint64_t v594[3];
  uint64_t v595[3];
  uint64_t v596[3];
  uint64_t v597[3];
  uint64_t v598[3];
  uint64_t v599[3];
  uint64_t v600[3];
  uint64_t v601[3];
  uint64_t v602[3];
  uint64_t v603[3];
  uint64_t v604[3];
  uint64_t v605[3];
  uint64_t v606[3];
  uint64_t v607[3];
  uint64_t v608[3];
  uint64_t v609[3];
  char v610;
  unint64_t v611;
  _QWORD *v612;
  _BYTE __s1[104];
  __int128 v614;
  __int128 v615;
  __int128 __p;
  __int128 v617;
  char v618;
  void *v619;
  void *v620;
  char v621;
  int v622;
  unsigned __int8 v623;
  _DWORD v624[4];
  __int128 v625;
  __int128 v626;

  if (a2 && a3)
  {
    v612 = 0;
    v8 = *(_QWORD *)(a1 + 128);
    if (!v8)
      operator new();
    v612 = *(_QWORD **)(a1 + 128);
    if (*(_BYTE *)(a1 + 92))
      v9 = *(_QWORD *)(a1 + 56);
    else
      v9 = 0;
    if (*(_BYTE *)(a1 + 93))
      v11 = *(_QWORD *)(a1 + 72);
    else
      v11 = 0;
    sub_F2D64(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    v574 = *(_QWORD *)(v8 + 26024);
    if (a5)
      *a5 = 0;
    v13 = 8 * a3;
    v611 = 0;
    if (8 * a3)
    {
      v568 = a4;
      v561 = a5;
      v14 = 0;
      v577 = 0;
      v573 = (void **)(a1 + 41920);
      v565 = a1 + 41968;
      v564 = a1 + 39472;
      v563 = a1 + 35392;
      v560 = a1 + 39872;
      v562 = a1 + 35296;
      v566 = a1 + 34208;
      v567 = a1 + 34656;
      v571 = a1 + 160;
      v572 = (unint64_t *)(a1 + 72);
      v569 = (uint64_t *)(a1 + 56);
      v570 = (_BYTE *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x340)
        {
          memset(__s1, 0, sizeof(__s1));
          v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!(_DWORD)v12)
            goto LABEL_875;
        }
        v610 = 0;
        v12 = sub_186648((uint64_t)v624, a2, &v611, &v610);
        if (!v610)
          break;
        if (v624[0] >= 0x11u)
        {
          v17 = sub_11FD14();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(_QWORD *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          v12 = sub_11FD04();
          if ((_DWORD)v12)
            v12 = sub_11FD0C();
        }
        else
        {
          v15 = (_QWORD *)(v574 + 16 * v624[0]);
          v16 = v15[1];
          ++*v15;
          v15[1] = v611 - v14 + v16;
        }
        switch(v624[0])
        {
          case 0:
            v18 = (unsigned __int16)v625;
            if (v625 <= 0x97u)
            {
              v19 = v571 + 224 * v625;
              v20 = v612;
              if (!*(_BYTE *)(v19 + 216))
              {
                *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                v621 = 0;
                memset(&__s1[40], 0, 64);
                v614 = 0u;
                v615 = 0u;
                __p = 0u;
                v617 = 0u;
                v618 = 0;
                v622 = 0;
                sub_BF3A8(v19, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v614 + 1))
                {
                  *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(_QWORD *)&__s1[88])
                {
                  *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v20 = v612;
                v18 = (unsigned __int16)v625;
              }
              v21 = (char **)(v19 + 40);
              sub_4607C((_QWORD *)(v19 + 40), v20);
              sub_461CC(v19 + 40);
              v22 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              v12 = v19 + 56;
              v23 = *(_QWORD *)(v19 + 56);
              v24 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v24 >= v23)
              {
                v170 = (char *)v24 - *v21;
                if (v170 <= -3)
                  sub_4074();
                v171 = v170 >> 1;
                v172 = v23 - (_QWORD)*v21;
                if (v172 <= (v170 >> 1) + 1)
                  v173 = v171 + 1;
                else
                  v173 = v172;
                if (v172 >= 0x7FFFFFFFFFFFFFFELL)
                  v174 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v174 = v173;
                if (v174)
                  v12 = (uint64_t)sub_43B60(v12, v174);
                else
                  v12 = 0;
                v280 = (_WORD *)(v12 + 2 * v171);
                *v280 = v22;
                v25 = v280 + 1;
                v282 = *(char **)(v19 + 40);
                v281 = *(char **)(v19 + 48);
                if (v281 != v282)
                {
                  do
                  {
                    v283 = *((_WORD *)v281 - 1);
                    v281 -= 2;
                    *--v280 = v283;
                  }
                  while (v281 != v282);
                  v281 = *v21;
                }
                *(_QWORD *)(v19 + 40) = v280;
                *(_QWORD *)(v19 + 48) = v25;
                *(_QWORD *)(v19 + 56) = v12 + 2 * v174;
                if (v281)
                  operator delete(v281);
              }
              else
              {
                *v24 = v22;
                v25 = v24 + 1;
              }
              *(_QWORD *)(v19 + 48) = v25;
            }
            goto LABEL_856;
          case 1:
            v76 = *(unsigned int *)(a1 + 24);
            v77 = *(_QWORD *)(a1 + 72);
            if (v77 % v76)
            {
              v78 = (v77 + v76 - 1) / v76 * v76;
            }
            else
            {
              if (*(_QWORD *)(a1 + 80) == v77 && !*(_DWORD *)(a1 + 96) && *v570)
                goto LABEL_351;
              v78 = v77 + v76;
            }
            *v572 = v78;
            v144 = v612;
            v145 = (unint64_t *)v612[3259];
            v146 = v612[3260];
            if ((unint64_t)v145 >= v146)
            {
              v12 = v612[3258];
              v148 = ((uint64_t)v145 - v12) >> 3;
              if ((unint64_t)(v148 + 1) >> 61)
                sub_4074();
              v149 = v146 - v12;
              v150 = (uint64_t)(v146 - v12) >> 2;
              if (v150 <= v148 + 1)
                v150 = v148 + 1;
              if (v149 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_40FC((uint64_t)(v612 + 3260), v151);
                v145 = (unint64_t *)v144[3259];
                v12 = v144[3258];
              }
              else
              {
                v152 = 0;
              }
              v235 = (unint64_t *)&v152[8 * v148];
              *v235 = v78;
              v147 = v235 + 1;
              while (v145 != (unint64_t *)v12)
              {
                v236 = *--v145;
                *--v235 = v236;
              }
              v144[3258] = v235;
              v144[3259] = v147;
              v144[3260] = &v152[8 * v151];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v145 = v78;
              v147 = v145 + 1;
            }
            v144[3259] = v147;
            if (!(v78 % v76))
              v144[3264] = ((((_QWORD)v147 - v144[3258]) << 29) - 0x100000000) | (((v144[3256]
                                                                                                  - v144[3255]) >> 3)
                                                                                  - 1);
LABEL_351:
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_856;
          case 2:
            v45 = v612;
            v46 = v612[3259];
            v47 = v612[3258];
            if (v46 - v47 == 8 && !*(_QWORD *)(v46 - 8))
              v612[3259] = v47;
            v48 = *(_QWORD *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            v49 = sub_3D360(a1, (uint64_t)v45, v625 & 0xFFFFF, v48);
            v12 = sub_F33E4((uint64_t)v45, v570, *(unsigned int *)(a1 + 24), v572, v49);
            if (v49 < *(_QWORD *)(a1 + 72))
            {
              v50 = sub_11FD14();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&dword_0, v50, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v51 = v612;
            v52 = *(unsigned int *)(a1 + 24);
            v53 = (unint64_t *)v612[3259];
            v54 = v612[3260];
            if ((unint64_t)v53 >= v54)
            {
              v12 = v612[3258];
              v134 = ((uint64_t)v53 - v12) >> 3;
              if ((unint64_t)(v134 + 1) >> 61)
                sub_4074();
              v135 = v54 - v12;
              v136 = (uint64_t)(v54 - v12) >> 2;
              if (v136 <= v134 + 1)
                v136 = v134 + 1;
              if (v135 >= 0x7FFFFFFFFFFFFFF8)
                v137 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v137 = v136;
              if (v137)
              {
                v138 = (char *)sub_40FC((uint64_t)(v612 + 3260), v137);
                v53 = (unint64_t *)v51[3259];
                v12 = v51[3258];
              }
              else
              {
                v138 = 0;
              }
              v193 = (unint64_t *)&v138[8 * v134];
              *v193 = v49;
              v55 = v193 + 1;
              while (v53 != (unint64_t *)v12)
              {
                v194 = *--v53;
                *--v193 = v194;
              }
              v51[3258] = v193;
              v51[3259] = v55;
              v51[3260] = &v138[8 * v137];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v53 = v49;
              v55 = v53 + 1;
            }
            v51[3259] = v55;
            if (!(v49 % v52))
              v51[3264] = ((((_QWORD)v55 - v51[3258]) << 29) - 0x100000000) | (((v51[3256] - v51[3255]) >> 3)
                                                                               - 1);
            *(_QWORD *)(a1 + 72) = v49;
            *(_QWORD *)(a1 + 80) = v49;
            *(_DWORD *)(a1 + 88) = v625 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            v195 = v612;
            v196 = (uint64_t *)v612[3256];
            v197 = v612[3257];
            if ((unint64_t)v196 >= v197)
            {
              v12 = v612[3255];
              v199 = ((uint64_t)v196 - v12) >> 3;
              if ((unint64_t)(v199 + 1) >> 61)
                sub_4074();
              v200 = v197 - v12;
              v201 = (uint64_t)(v197 - v12) >> 2;
              if (v201 <= v199 + 1)
                v201 = v199 + 1;
              if (v200 >= 0x7FFFFFFFFFFFFFF8)
                v202 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v202 = v201;
              if (v202)
              {
                v203 = (char *)sub_40FC((uint64_t)(v612 + 3257), v202);
                v196 = (uint64_t *)v195[3256];
                v12 = v195[3255];
              }
              else
              {
                v203 = 0;
              }
              v204 = (uint64_t *)&v203[8 * v199];
              *v204 = v48;
              v198 = v204 + 1;
              while (v196 != (uint64_t *)v12)
              {
                v205 = *--v196;
                *--v204 = v205;
              }
              v195[3255] = v204;
              v195[3256] = v198;
              v195[3257] = &v203[8 * v202];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v196 = v48;
              v198 = v196 + 1;
            }
            v195[3256] = v198;
            *v569 = v48;
            v206 = v612;
            v207 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            v208 = (uint64_t *)v612[3262];
            v209 = v612[3263];
            if ((unint64_t)v208 >= v209)
            {
              v211 = (void **)(v612 + 3261);
              v212 = v612[3261];
              v213 = ((uint64_t)v208 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                sub_4074();
              v214 = v209 - v212;
              v215 = v214 >> 2;
              if (v214 >> 2 <= (unint64_t)(v213 + 1))
                v215 = v213 + 1;
              if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
                v12 = (uint64_t)sub_40FC((uint64_t)(v612 + 3263), v216);
              else
                v12 = 0;
              v231 = (uint64_t *)(v12 + 8 * v213);
              *v231 = v207;
              v210 = v231 + 1;
              v232 = (char *)v206[3262];
              v233 = (char *)v206[3261];
              if (v232 != v233)
              {
                do
                {
                  v234 = *((_QWORD *)v232 - 1);
                  v232 -= 8;
                  *--v231 = v234;
                }
                while (v232 != v233);
                v232 = (char *)*v211;
              }
              v206[3261] = v231;
              v206[3262] = v210;
              v206[3263] = v12 + 8 * v216;
              if (v232)
                operator delete(v232);
            }
            else
            {
              *v208 = v207;
              v210 = v208 + 1;
            }
            v206[3262] = v210;
            goto LABEL_856;
          case 3:
            v61 = v612;
            v62 = v612[3256];
            v63 = v612[3255];
            if (v62 - v63 == 8 && !*(_QWORD *)(v62 - 8))
              v612[3256] = v63;
            v64 = v61[3259];
            v65 = v61[3258];
            if (v64 - v65 == 8 && !*(_QWORD *)(v64 - 8))
              v61[3259] = v65;
            v66 = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            v67 = sub_3D360(a1, (uint64_t)v61, v625 & 0xFFFFF, *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F338C((uint64_t)v61, (_BYTE *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v569, v66);
            v12 = sub_F33E4((uint64_t)v612, v570, *(unsigned int *)(a1 + 24), v572, v67);
            if ((*((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(_QWORD *)(a1 + 56))
            {
              v68 = sub_11FD14();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&dword_0, v68, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v69 = v612;
            v70 = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            v71 = (uint64_t *)v612[3256];
            v72 = v612[3257];
            if ((unint64_t)v71 >= v72)
            {
              v12 = v612[3255];
              v139 = ((uint64_t)v71 - v12) >> 3;
              if ((unint64_t)(v139 + 1) >> 61)
                sub_4074();
              v140 = v72 - v12;
              v141 = (uint64_t)(v72 - v12) >> 2;
              if (v141 <= v139 + 1)
                v141 = v139 + 1;
              if (v140 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v142 = v141;
              if (v142)
              {
                v143 = (char *)sub_40FC((uint64_t)(v612 + 3257), v142);
                v71 = (uint64_t *)v69[3256];
                v12 = v69[3255];
              }
              else
              {
                v143 = 0;
              }
              v217 = (uint64_t *)&v143[8 * v139];
              *v217 = v70;
              v73 = v217 + 1;
              while (v71 != (uint64_t *)v12)
              {
                v218 = *--v71;
                *--v217 = v218;
              }
              v69[3255] = v217;
              v69[3256] = v73;
              v69[3257] = &v143[8 * v142];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v71 = v70;
              v73 = v71 + 1;
            }
            v69[3256] = v73;
            v219 = *v572;
            if (v67 <= *v572)
            {
              if (v67 >= *v572)
                goto LABEL_482;
              *(_QWORD *)(a1 + 80) = v219;
              v225 = (v625 & 0xFFFFF) + v67 - v219;
            }
            else
            {
              v220 = v612;
              v221 = *(unsigned int *)(a1 + 24);
              v222 = (unint64_t *)v612[3259];
              v223 = v612[3260];
              if ((unint64_t)v222 >= v223)
              {
                v12 = v612[3258];
                v226 = ((uint64_t)v222 - v12) >> 3;
                if ((unint64_t)(v226 + 1) >> 61)
                  sub_4074();
                v227 = v223 - v12;
                v228 = (uint64_t)(v223 - v12) >> 2;
                if (v228 <= v226 + 1)
                  v228 = v226 + 1;
                if (v227 >= 0x7FFFFFFFFFFFFFF8)
                  v229 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v229 = v228;
                if (v229)
                {
                  v230 = (char *)sub_40FC((uint64_t)(v612 + 3260), v229);
                  v222 = (unint64_t *)v220[3259];
                  v12 = v220[3258];
                }
                else
                {
                  v230 = 0;
                }
                v308 = (unint64_t *)&v230[8 * v226];
                *v308 = v67;
                v224 = v308 + 1;
                while (v222 != (unint64_t *)v12)
                {
                  v309 = *--v222;
                  *--v308 = v309;
                }
                v220[3258] = v308;
                v220[3259] = v224;
                v220[3260] = &v230[8 * v229];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v222 = v67;
                v224 = v222 + 1;
              }
              v220[3259] = v224;
              if (!(v67 % v221))
                v220[3264] = ((((_QWORD)v224 - v220[3258]) << 29) - 0x100000000) | (((v220[3256] - v220[3255]) >> 3)
                                                                                    - 1);
              *(_QWORD *)(a1 + 72) = v67;
              *(_QWORD *)(a1 + 80) = v67;
              v225 = v625 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v225;
LABEL_482:
            *(_DWORD *)(a1 + 96) = 0;
            v310 = v612;
            v311 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            v312 = (uint64_t *)v612[3262];
            v313 = v612[3263];
            if ((unint64_t)v312 >= v313)
            {
              v315 = (void **)(v612 + 3261);
              v316 = v612[3261];
              v317 = ((uint64_t)v312 - v316) >> 3;
              if ((unint64_t)(v317 + 1) >> 61)
                sub_4074();
              v318 = v313 - v316;
              v319 = v318 >> 2;
              if (v318 >> 2 <= (unint64_t)(v317 + 1))
                v319 = v317 + 1;
              if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8)
                v320 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v320 = v319;
              if (v320)
                v12 = (uint64_t)sub_40FC((uint64_t)(v612 + 3263), v320);
              else
                v12 = 0;
              v321 = (uint64_t *)(v12 + 8 * v317);
              *v321 = v311;
              v314 = v321 + 1;
              v322 = (char *)v310[3262];
              v323 = (char *)v310[3261];
              if (v322 != v323)
              {
                do
                {
                  v324 = *((_QWORD *)v322 - 1);
                  v322 -= 8;
                  *--v321 = v324;
                }
                while (v322 != v323);
                v322 = (char *)*v315;
              }
              v310[3261] = v321;
              v310[3262] = v314;
              v310[3263] = v12 + 8 * v320;
              if (v322)
                operator delete(v322);
            }
            else
            {
              *v312 = v311;
              v314 = v312 + 1;
            }
            v310[3262] = v314;
            v325 = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(_QWORD *)(a1 + 56) = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(_QWORD *)(a1 + 64) = v325;
            *(_DWORD *)(a1 + 100) = v626;
            goto LABEL_856;
          case 4:
            v29 = sub_11FD14();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(_QWORD *)&__s1[20] = "false";
              _os_log_error_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            v12 = sub_11FD04();
            if ((_DWORD)v12)
              v12 = sub_11FD0C();
            goto LABEL_856;
          case 5:
            v79 = v625;
            v80 = BYTE4(v625);
            v81 = (_DWORD)v625 == 1;
            if ((_DWORD)v625 == 1)
              v82 = BYTE4(v625) & 7 | 0x60;
            else
              v82 = BYTE4(v625);
            if (v82 > 0x97)
              goto LABEL_856;
            v83 = BYTE5(v625);
            v84 = DWORD2(v625);
            v85 = v571 + 224 * v82;
            if (!*(_BYTE *)(v85 + 216))
              goto LABEL_120;
            if (*(_BYTE *)(v85 + 214))
            {
              sub_13BEF4(a1, v612, *(unsigned __int8 *)(v85 + 36), 1);
LABEL_120:
              *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v82;
              v621 = 0;
              memset(&__s1[40], 0, 64);
              v614 = 0u;
              v615 = 0u;
              __p = 0u;
              v617 = 0u;
              v618 = 0;
              v622 = 0;
              sub_BF3A8(v85, (uint64_t)__s1);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((_QWORD *)&v614 + 1))
              {
                *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                operator delete(*((void **)&v614 + 1));
              }
              if (*(_QWORD *)&__s1[88])
              {
                *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                operator delete(*(void **)&__s1[88]);
              }
              if (*(_QWORD *)&__s1[64])
              {
                *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              v12 = *(_QWORD *)&__s1[40];
              if (*(_QWORD *)&__s1[40])
              {
                *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
            }
            if (!*(_BYTE *)(v85 + 216))
              sub_70A0();
            *(_BYTE *)(v85 + 215) = v81;
            *(_BYTE *)(v85 + 214) = 1;
            *(_BYTE *)(v85 + 36) = v82;
            if (v79)
            {
              v86 = *(_QWORD *)(a1 + 104);
              if (v86 == -1)
                v86 = 0;
              *(_QWORD *)(a1 + 104) = v86 + 1;
              *(_QWORD *)(v85 + 16) = v86;
              v87 = v560 + 16 * (v83 & 0x7F);
              *(_QWORD *)v87 = v86;
              *(_BYTE *)(v87 + 8) = 1;
              v80 = *(unsigned __int8 *)(v85 + 36);
            }
            else
            {
              *(_BYTE *)(v85 + 36) = v80;
              if (v84 <= 7)
              {
                v185 = *(_DWORD *)(v562 + 12 * v84);
                *(_DWORD *)(v85 + 208) = v185;
                if (v185 <= 7)
                {
                  v186 = v566 + 56 * v185;
                  if (*(_BYTE *)(v186 + 48))
                    *(_DWORD *)(v85 + 32) = *(_DWORD *)(v186 + 24);
                }
                v187 = v560 + 16 * (*(_BYTE *)(v562 + 12 * v84 + 8) & 0x7F);
                if (*(_BYTE *)(v187 + 8))
                  *(_QWORD *)(v85 + 16) = *(_QWORD *)v187;
                if (v84 - 4 <= 2)
                {
                  v188 = v567 + 40 * (v84 - 4);
                  if (*(_BYTE *)(v188 + 32))
                    *(_QWORD *)(v85 + 24) = *(_QWORD *)(v188 + 16);
                }
              }
            }
            if (v80 < 0x60)
              goto LABEL_273;
            if (v80 >= 0x68)
            {
              if (v80 <= 0x97)
                goto LABEL_856;
            }
            else if (*(_BYTE *)(v85 + 215))
            {
              goto LABEL_856;
            }
LABEL_273:
            if (*(_QWORD *)(v565 + 48 * v82 + 40))
            {
              v189 = v565 + 48 * v82;
              v191 = *(_QWORD *)(v189 + 8);
              v190 = (_QWORD *)(v189 + 8);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v191 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v190[3] & 0x1FFLL))
                            + 32))
              {
                v192 = sub_11FD14();
                if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(_QWORD *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&dword_0, v192, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_11FD04())
                  sub_11FD0C();
              }
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v190 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v190[3] & 0x1FFLL))
                       + 32) = 1;
              *(_BYTE *)(v85 + 213) = 1;
              sub_18CBDC(a1, v612);
            }
            goto LABEL_856;
          case 6:
            sub_13BEF4(a1, v612, v625, 0);
            goto LABEL_856;
          case 7:
            if (DWORD1(v625) == 1)
            {
              v74 = (*((_QWORD *)&v625 + 1) >> 5) & 0x7FFFFFFFFFFLL;
              v75 = v563 + 16 * (BYTE8(v625) & 0x1F);
              *(_QWORD *)v75 = v74;
              *(_BYTE *)(v75 + 8) = 1;
            }
            else
            {
              if (BYTE8(v625) == 255)
                goto LABEL_856;
              v129 = v563 + 16 * BYTE8(v625);
              if (!*(_BYTE *)(v129 + 8))
                goto LABEL_856;
              v74 = *(_QWORD *)v129;
            }
            if (v625 <= 0x97uLL)
            {
              v130 = v571 + 224 * v625;
              if (!*(_BYTE *)(v130 + 216))
              {
                *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                v621 = 0;
                memset(&__s1[40], 0, 64);
                v614 = 0u;
                v615 = 0u;
                __p = 0u;
                v617 = 0u;
                v618 = 0;
                v622 = 0;
                sub_BF3A8(v130, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v614 + 1))
                {
                  *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(_QWORD *)&__s1[88])
                {
                  *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                v12 = *(_QWORD *)&__s1[40];
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              v131 = *(_QWORD *)(v130 + 80);
              v132 = *(uint64_t **)(v130 + 72);
              if ((unint64_t)v132 >= v131)
              {
                v12 = *(_QWORD *)(v130 + 64);
                v237 = ((uint64_t)v132 - v12) >> 3;
                if ((unint64_t)(v237 + 1) >> 61)
                  sub_4074();
                v238 = v131 - v12;
                v239 = (uint64_t)(v131 - v12) >> 2;
                if (v239 <= v237 + 1)
                  v239 = v237 + 1;
                if (v238 >= 0x7FFFFFFFFFFFFFF8)
                  v240 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v240 = v239;
                if (v240)
                {
                  v241 = (char *)sub_40FC(v130 + 80, v240);
                  v12 = *(_QWORD *)(v130 + 64);
                  v132 = *(uint64_t **)(v130 + 72);
                }
                else
                {
                  v241 = 0;
                }
                v333 = (uint64_t *)&v241[8 * v237];
                *v333 = v74;
                v133 = v333 + 1;
                while (v132 != (uint64_t *)v12)
                {
                  v334 = *--v132;
                  *--v333 = v334;
                }
                *(_QWORD *)(v130 + 64) = v333;
                *(_QWORD *)(v130 + 72) = v133;
                *(_QWORD *)(v130 + 80) = &v241[8 * v240];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v132 = v74;
                v133 = v132 + 1;
              }
              *(_QWORD *)(v130 + 72) = v133;
            }
            goto LABEL_856;
          case 8:
            v105 = (_QWORD *)(a1 + 41920);
            v106 = *(char **)(a1 + 41936);
            v107 = v625;
            v108 = *(char **)(a1 + 41928);
            v109 = v106 - v108;
            *(_OWORD *)__s1 = v625;
            *(_OWORD *)&__s1[16] = v626;
            __s1[32] = 0;
            __s1[40] = 0;
            v623 = 0;
            if (v106 == v108)
              v110 = 0;
            else
              v110 = 2 * (v106 - v108) - 1;
            v111 = *(_QWORD *)(a1 + 41952);
            if (v110 != *(_QWORD *)(a1 + 41960) + v111)
              goto LABEL_750;
            v112 = v111 >= 0x10;
            v113 = v111 - 16;
            if (v112)
            {
              v105 = (_QWORD *)(a1 + 41920);
              *(_QWORD *)(a1 + 41952) = v113;
              v116 = *(_QWORD *)v108;
              v115 = v108 + 8;
              v114 = v116;
              *(_QWORD *)(a1 + 41928) = v115;
              if (v106 == *(char **)(a1 + 41944))
              {
                v117 = (char *)*v573;
                if (v115 <= *v573)
                {
                  if (v106 == v117)
                    v335 = 1;
                  else
                    v335 = (v106 - v117) >> 2;
                  if (v335 >> 61)
LABEL_916:
                    sub_4130();
                  v336 = (char *)operator new(8 * v335);
                  v337 = &v336[8 * (v335 >> 2)];
                  v338 = v106 - v115;
                  v532 = v106 == v115;
                  v106 = v337;
                  if (!v532)
                  {
                    v106 = &v337[v338 & 0xFFFFFFFFFFFFFFF8];
                    v339 = 8 * (v338 >> 3);
                    v340 = &v336[8 * (v335 >> 2)];
                    do
                    {
                      v341 = *(_QWORD *)v115;
                      v115 += 8;
                      *(_QWORD *)v340 = v341;
                      v340 += 8;
                      v339 -= 8;
                    }
                    while (v339);
                  }
                  v105 = (_QWORD *)(a1 + 41920);
                  *v573 = v336;
                  *(_QWORD *)(a1 + 41928) = v337;
                  *(_QWORD *)(a1 + 41936) = v106;
                  *(_QWORD *)(a1 + 41944) = &v336[8 * v335];
                  if (v117)
                  {
                    operator delete(v117);
                    v106 = *(char **)(a1 + 41936);
                  }
                }
                else
                {
                  v118 = (v115 - (_BYTE *)*v573) >> 3;
                  if (v118 >= -1)
                    v119 = v118 + 1;
                  else
                    v119 = v118 + 2;
                  v120 = &v115[-8 * (v119 >> 1)];
                  v121 = v106 - v115;
                  v105 = (_QWORD *)(a1 + 41920);
                  if (v106 != v115)
                  {
                    memmove(&v115[-8 * (v119 >> 1)], v115, v106 - v115);
                    v106 = *(char **)(a1 + 41928);
                  }
                  v122 = &v106[-8 * (v119 >> 1)];
                  v106 = &v120[v121];
                  *(_QWORD *)(a1 + 41928) = v122;
                  *(_QWORD *)(a1 + 41936) = &v120[v121];
                }
              }
              *(_QWORD *)v106 = v114;
              goto LABEL_749;
            }
            v159 = v109 >> 3;
            v160 = *(char **)(a1 + 41944);
            v161 = (char *)*v573;
            v162 = v160 - (_BYTE *)*v573;
            if (v109 >> 3 < (unint64_t)(v162 >> 3))
            {
              v163 = operator new(0x1080uLL);
              v164 = v163;
              if (v160 == v106)
              {
                if (v108 == v161)
                {
                  if (v106 == v108)
                    v434 = 1;
                  else
                    v434 = (v160 - v108) >> 2;
                  if (v434 >> 61)
                    goto LABEL_916;
                  v435 = (char *)operator new(8 * v434);
                  v342 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v436 = v342;
                  if (v106 != v108)
                  {
                    v437 = 8 * v159;
                    v438 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v439 = v108;
                    v436 = &v342[8 * v159];
                    do
                    {
                      v440 = *(_QWORD *)v439;
                      v439 += 8;
                      *(_QWORD *)v438 = v440;
                      v438 += 8;
                      v437 -= 8;
                    }
                    while (v437);
                  }
                  v343 = (_QWORD *)(a1 + 41920);
                  *v573 = v435;
                  *(_QWORD *)(a1 + 41928) = v342;
                  *(_QWORD *)(a1 + 41936) = v436;
                  *(_QWORD *)(a1 + 41944) = &v435[8 * v434];
                  if (v108)
                  {
                    operator delete(v108);
                    v342 = *(char **)(a1 + 41928);
                  }
                }
                else
                {
                  v342 = v108;
                  v343 = (_QWORD *)(a1 + 41920);
                }
                *((_QWORD *)v342 - 1) = v164;
                v442 = (char *)v343[1];
                v441 = (char *)v343[2];
                v343[1] = v442 - 8;
                v443 = *((_QWORD *)v442 - 1);
                v343[1] = v442;
                if (v441 == (char *)v343[3])
                {
                  v444 = (char *)*v573;
                  if (v442 <= *v573)
                  {
                    if (v441 == v444)
                      v451 = 1;
                    else
                      v451 = (v441 - v444) >> 2;
                    if (v451 >> 61)
                      goto LABEL_916;
                    v452 = (char *)operator new(8 * v451);
                    v453 = &v452[8 * (v451 >> 2)];
                    v454 = v441 - v442;
                    v532 = v441 == v442;
                    v441 = v453;
                    if (!v532)
                    {
                      v441 = &v453[v454 & 0xFFFFFFFFFFFFFFF8];
                      v455 = 8 * (v454 >> 3);
                      v456 = &v452[8 * (v451 >> 2)];
                      do
                      {
                        v457 = *(_QWORD *)v442;
                        v442 += 8;
                        *(_QWORD *)v456 = v457;
                        v456 += 8;
                        v455 -= 8;
                      }
                      while (v455);
                    }
                    *v573 = v452;
                    *(_QWORD *)(a1 + 41928) = v453;
                    *(_QWORD *)(a1 + 41936) = v441;
                    *(_QWORD *)(a1 + 41944) = &v452[8 * v451];
                    if (v444)
                    {
                      operator delete(v444);
                      v441 = *(char **)(a1 + 41936);
                    }
                  }
                  else
                  {
                    v445 = v107;
                    v446 = (v442 - (_BYTE *)*v573) >> 3;
                    if (v446 >= -1)
                      v447 = v446 + 1;
                    else
                      v447 = v446 + 2;
                    v448 = &v442[-8 * (v447 >> 1)];
                    v449 = v441 - v442;
                    if (v441 == v442)
                    {
                      v450 = a1 + 41920;
                    }
                    else
                    {
                      memmove(&v442[-8 * (v447 >> 1)], v442, v441 - v442);
                      v450 = a1 + 41920;
                      v442 = *(char **)(a1 + 41928);
                    }
                    v441 = &v448[v449];
                    *(_QWORD *)(v450 + 8) = &v442[-8 * (v447 >> 1)];
                    *(_QWORD *)(v450 + 16) = &v448[v449];
                    v107 = v445;
                  }
                }
                *(_QWORD *)v441 = v443;
              }
              else
              {
                *(_QWORD *)v106 = v163;
              }
              v105 = (_QWORD *)(a1 + 41920);
LABEL_749:
              v105[2] += 8;
              goto LABEL_750;
            }
            v246 = v162 >> 2;
            if (v160 == v161)
              v247 = 1;
            else
              v247 = v246;
            if (v247 >> 61)
              goto LABEL_916;
            v248 = (char *)operator new(8 * v247);
            v557 = v107;
            v249 = operator new(0x1080uLL);
            v250 = &v248[8 * v159];
            v251 = &v248[8 * v247];
            if (v159 == v247)
            {
              if (v109 < 1)
              {
                if (v106 == v108)
                  v418 = 1;
                else
                  v418 = v109 >> 2;
                if (v418 >> 61)
                  sub_4130();
                v419 = (char *)operator new(8 * v418);
                v250 = &v419[8 * (v418 >> 2)];
                v251 = &v419[8 * v418];
                operator delete(v248);
                v108 = *(char **)(a1 + 41928);
                v106 = *(char **)(a1 + 41936);
                v248 = v419;
              }
              else
              {
                v252 = v159 + 2;
                if (v159 >= -1)
                  v252 = v159 + 1;
                v250 -= 8 * (v252 >> 1);
              }
            }
            *(_QWORD *)v250 = v249;
            v420 = v250 + 8;
            if (v106 != v108)
            {
              do
              {
                if (v250 == v248)
                {
                  if (v420 >= v251)
                  {
                    if (v251 == v250)
                      v425 = 1;
                    else
                      v425 = (v251 - v250) >> 2;
                    if (v425 >> 61)
                      sub_4130();
                    v426 = (char *)operator new(8 * v425);
                    v248 = v426;
                    v421 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v422 = v421;
                    v427 = v420 - v250;
                    if (v420 != v250)
                    {
                      v422 = &v421[v427 & 0xFFFFFFFFFFFFFFF8];
                      v428 = 8 * (v427 >> 3);
                      v429 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v430 = v250;
                      do
                      {
                        v431 = *(_QWORD *)v430;
                        v430 += 8;
                        *(_QWORD *)v429 = v431;
                        v429 += 8;
                        v428 -= 8;
                      }
                      while (v428);
                    }
                    v251 = &v426[8 * v425];
                    operator delete(v250);
                  }
                  else
                  {
                    v423 = (v251 - v420) >> 3;
                    if (v423 >= -1)
                      v424 = v423 + 1;
                    else
                      v424 = v423 + 2;
                    v422 = &v420[8 * (v424 >> 1)];
                    v421 = &v250[8 * (v424 >> 1)];
                    if (v420 == v250)
                    {
                      v248 = v420;
                    }
                    else
                    {
                      memmove(&v250[8 * (v424 >> 1)], v250, v420 - v250);
                      v248 = v250;
                    }
                  }
                }
                else
                {
                  v421 = v250;
                  v422 = v420;
                }
                v432 = *((_QWORD *)v106 - 1);
                v106 -= 8;
                *((_QWORD *)v421 - 1) = v432;
                v250 = v421 - 8;
                v420 = v422;
              }
              while (v106 != *(char **)(a1 + 41928));
            }
            v105 = (_QWORD *)(a1 + 41920);
            v433 = *v573;
            *v573 = v248;
            *(_QWORD *)(a1 + 41928) = v250;
            *(_QWORD *)(a1 + 41936) = v420;
            *(_QWORD *)(a1 + 41944) = v251;
            v107 = v557;
            if (v433)
              operator delete(v433);
LABEL_750:
            v458 = v105[5] + v105[4];
            v459 = *(_QWORD *)(v105[1] + ((v458 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 264 * (v458 & 0xF);
            v460 = *(_OWORD *)__s1;
            v461 = *(_OWORD *)&__s1[16];
            *(_BYTE *)(v459 + 32) = __s1[32];
            *(_OWORD *)v459 = v460;
            *(_OWORD *)(v459 + 16) = v461;
            *(_BYTE *)(v459 + 256) = 0;
            *(_BYTE *)(v459 + 40) = 0;
            v12 = v459 + 40;
            if (v623)
            {
              sub_BF450(v12, (__int128 *)&__s1[40]);
              v462 = v623;
              ++v105[5];
              if (v462)
              {
                if (v619)
                {
                  v620 = v619;
                  operator delete(v619);
                }
                if ((_QWORD)v617)
                  operator delete((void *)v617);
                if (*((_QWORD *)&v615 + 1))
                  operator delete(*((void **)&v615 + 1));
                if ((_QWORD)v614)
                  operator delete((void *)v614);
                v12 = *(_QWORD *)&__s1[80];
                if (*(_QWORD *)&__s1[80])
                  operator delete(*(void **)&__s1[80]);
              }
            }
            else
            {
              ++v105[5];
            }
            if (v107 > 0x97)
              goto LABEL_856;
            v463 = (uint64_t *)(v565 + 48 * v107);
            v464 = (char *)v463[2];
            v465 = (char *)v463[1];
            v466 = ((v464 - v465) << 6) - 1;
            v467 = v464 - v465;
            v468 = *(_QWORD *)(a1 + 41960) + *(_QWORD *)(a1 + 41952) - 1;
            v559 = *(_QWORD *)(*(_QWORD *)(a1 + 41928) + ((v468 >> 1) & 0x7FFFFFFFFFFFFFF8));
            v470 = (unint64_t *)(v463 + 4);
            v469 = v463[4];
            if (v464 == v465)
              v466 = 0;
            v471 = v463 + 5;
            if (v466 != v463[5] + v469)
              goto LABEL_849;
            v112 = v469 >= 0x200;
            v472 = v469 - 512;
            if (v112)
            {
              v473 = *(_BYTE *)(a1 + 41960) + *(_BYTE *)(a1 + 41952) - 1;
              *v470 = v472;
              v475 = *(_QWORD *)v465;
              v474 = v465 + 8;
              v468 = v475;
              v463[1] = (uint64_t)v474;
              if (v464 == (char *)v463[3])
              {
                v476 = (char *)*v463;
                if ((unint64_t)v474 <= *v463)
                {
                  if (v464 == v476)
                    v494 = 1;
                  else
                    v494 = (v464 - v476) >> 2;
                  if (v494 >> 61)
                    sub_4130();
                  v12 = (uint64_t)operator new(8 * v494);
                  v495 = v12 + 8 * (v494 >> 2);
                  v496 = (char *)v495;
                  if (v464 != v474)
                  {
                    v496 = (char *)(v495 + ((v464 - v474) & 0xFFFFFFFFFFFFFFF8));
                    v497 = 8 * ((v464 - v474) >> 3);
                    v498 = (_QWORD *)(v12 + 8 * (v494 >> 2));
                    do
                    {
                      v499 = *(_QWORD *)v474;
                      v474 += 8;
                      *v498++ = v499;
                      v497 -= 8;
                    }
                    while (v497);
                  }
                  *v463 = v12;
                  v463[1] = v495;
                  v463[2] = (uint64_t)v496;
                  v463[3] = v12 + 8 * v494;
                  v464 = v496;
                  v470 = (unint64_t *)(v463 + 4);
                  if (v476)
                  {
                    operator delete(v476);
                    v464 = (char *)v463[2];
                  }
                }
                else
                {
                  v477 = (uint64_t)&v474[-*v463] >> 3;
                  if (v477 >= -1)
                    v478 = v477 + 1;
                  else
                    v478 = v477 + 2;
                  v479 = &v474[-8 * (v478 >> 1)];
                  v480 = v464 - v474;
                  if (v464 != v474)
                  {
                    v12 = (uint64_t)memmove(&v474[-8 * (v478 >> 1)], v474, v464 - v474);
                    v464 = (char *)v463[1];
                  }
                  v481 = &v464[-8 * (v478 >> 1)];
                  v464 = &v479[v480];
                  v463[1] = (uint64_t)v481;
                  v463[2] = (uint64_t)&v479[v480];
                  v471 = v463 + 5;
                  v470 = (unint64_t *)(v463 + 4);
                }
              }
              *(_QWORD *)v464 = v468;
              v463[2] += 8;
              LOBYTE(v468) = v473;
            }
            else
            {
              v482 = v467 >> 3;
              v483 = (char *)v463[3];
              v484 = (char *)*v463;
              v485 = (uint64_t)&v483[-*v463];
              v556 = *(_QWORD *)(a1 + 41960) + *(_QWORD *)(a1 + 41952) - 1;
              if (v467 >> 3 < (unint64_t)(v485 >> 3))
              {
                v486 = v107;
                v12 = (uint64_t)operator new(0x1000uLL);
                v487 = v12;
                if (v483 != v464)
                {
                  *(_QWORD *)v464 = v12;
                  v470 = (unint64_t *)(v463 + 4);
                  LOBYTE(v468) = v556;
LABEL_848:
                  v463[2] += 8;
                  v471 = v463 + 5;
                  goto LABEL_849;
                }
                if (v465 == v484)
                {
                  if (v464 == v465)
                    v516 = 1;
                  else
                    v516 = (v483 - v465) >> 2;
                  if (v516 >> 61)
                    sub_4130();
                  v12 = (uint64_t)operator new(8 * v516);
                  v500 = (char *)(v12 + 8 * ((v516 + 3) >> 2));
                  v517 = v500;
                  if (v464 != v465)
                  {
                    v518 = 8 * v482;
                    v519 = (_QWORD *)(v12 + 8 * ((v516 + 3) >> 2));
                    v520 = v465;
                    v517 = &v500[8 * v482];
                    do
                    {
                      v521 = *(_QWORD *)v520;
                      v520 += 8;
                      *v519++ = v521;
                      v518 -= 8;
                    }
                    while (v518);
                  }
                  *v463 = v12;
                  v463[1] = (uint64_t)v500;
                  v463[2] = (uint64_t)v517;
                  v463[3] = v12 + 8 * v516;
                  if (v465)
                  {
                    operator delete(v465);
                    v500 = (char *)v463[1];
                  }
                }
                else
                {
                  v500 = v465;
                }
                *((_QWORD *)v500 - 1) = v487;
                v523 = (char *)v463[1];
                v522 = (char *)v463[2];
                v463[1] = (uint64_t)(v523 - 8);
                v524 = *((_QWORD *)v523 - 1);
                v463[1] = (uint64_t)v523;
                v470 = (unint64_t *)(v463 + 4);
                if (v522 == (char *)v463[3])
                {
                  v525 = (char *)*v463;
                  if ((unint64_t)v523 > *v463)
                  {
                    v526 = (uint64_t)&v523[-*v463] >> 3;
                    if (v526 >= -1)
                      v527 = v526 + 1;
                    else
                      v527 = v526 + 2;
                    v528 = &v523[-8 * (v527 >> 1)];
                    v529 = v522 - v523;
                    if (v522 != v523)
                    {
                      v12 = (uint64_t)memmove(&v523[-8 * (v527 >> 1)], v523, v522 - v523);
                      v523 = (char *)v463[1];
                    }
                    v522 = &v528[v529];
                    v463[1] = (uint64_t)&v523[-8 * (v527 >> 1)];
                    v463[2] = (uint64_t)&v528[v529];
                    v107 = v486;
                    goto LABEL_846;
                  }
                  if (v522 == v525)
                    v468 = 1;
                  else
                    v468 = (v522 - v525) >> 2;
                  if (v468 >> 61)
                    sub_4130();
                  v12 = (uint64_t)operator new(8 * v468);
                  v535 = v12 + 8 * (v468 >> 2);
                  v536 = (char *)v535;
                  v470 = (unint64_t *)(v463 + 4);
                  if (v522 != v523)
                  {
                    v536 = (char *)(v535 + ((v522 - v523) & 0xFFFFFFFFFFFFFFF8));
                    v537 = 8 * ((v522 - v523) >> 3);
                    v538 = (_QWORD *)(v12 + 8 * (v468 >> 2));
                    do
                    {
                      v539 = *(_QWORD *)v523;
                      v523 += 8;
                      *v538++ = v539;
                      v537 -= 8;
                    }
                    while (v537);
                  }
                  *v463 = v12;
                  v463[1] = v535;
                  v463[2] = (uint64_t)v536;
                  v463[3] = v12 + 8 * v468;
                  v522 = v536;
                  LOBYTE(v468) = v556;
                  if (v525)
                  {
                    operator delete(v525);
                    v522 = (char *)v463[2];
                  }
                }
                else
                {
LABEL_846:
                  LOBYTE(v468) = v556;
                }
                *(_QWORD *)v522 = v524;
                goto LABEL_848;
              }
              v558 = v107;
              v488 = v485 >> 2;
              if (v483 == v484)
                v489 = 1;
              else
                v489 = v488;
              if (v489 >> 61)
                sub_4130();
              v490 = (char *)operator new(8 * v489);
              v491 = operator new(0x1000uLL);
              v492 = &v490[8 * v482];
              v468 = (unint64_t)&v490[8 * v489];
              if (v482 == v489)
              {
                v555 = v491;
                v470 = (unint64_t *)(v463 + 4);
                if (v467 < 1)
                {
                  if (v464 == v465)
                    v501 = 1;
                  else
                    v501 = v467 >> 2;
                  if (v501 >> 61)
                    sub_4130();
                  v502 = (char *)operator new(8 * v501);
                  v492 = &v502[8 * (v501 >> 2)];
                  v468 = (unint64_t)&v502[8 * v501];
                  operator delete(v490);
                  v465 = (char *)v463[1];
                  v464 = (char *)v463[2];
                  v490 = v502;
                }
                else
                {
                  v493 = v482 + 2;
                  if (v482 >= -1)
                    v493 = v482 + 1;
                  v492 -= 8 * (v493 >> 1);
                }
                v491 = v555;
              }
              else
              {
                v470 = (unint64_t *)(v463 + 4);
              }
              *(_QWORD *)v492 = v491;
              v503 = v492 + 8;
              if (v464 != v465)
              {
                do
                {
                  if (v492 == v490)
                  {
                    if ((unint64_t)v503 >= v468)
                    {
                      if ((char *)v468 == v492)
                        v508 = 1;
                      else
                        v508 = (uint64_t)(v468 - (_QWORD)v492) >> 2;
                      if (v508 >> 61)
                        sub_4130();
                      v509 = (char *)operator new(8 * v508);
                      v490 = v509;
                      v504 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v505 = v504;
                      v510 = v503 - v492;
                      if (v503 != v492)
                      {
                        v505 = &v504[v510 & 0xFFFFFFFFFFFFFFF8];
                        v511 = 8 * (v510 >> 3);
                        v512 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v513 = v492;
                        do
                        {
                          v514 = *(_QWORD *)v513;
                          v513 += 8;
                          *(_QWORD *)v512 = v514;
                          v512 += 8;
                          v511 -= 8;
                        }
                        while (v511);
                      }
                      v468 = (unint64_t)&v509[8 * v508];
                      operator delete(v492);
                    }
                    else
                    {
                      v506 = (uint64_t)(v468 - (_QWORD)v503) >> 3;
                      if (v506 >= -1)
                        v507 = v506 + 1;
                      else
                        v507 = v506 + 2;
                      v505 = &v503[8 * (v507 >> 1)];
                      v504 = &v492[8 * (v507 >> 1)];
                      if (v503 == v492)
                      {
                        v490 = v503;
                      }
                      else
                      {
                        memmove(&v492[8 * (v507 >> 1)], v492, v503 - v492);
                        v490 = v492;
                      }
                    }
                  }
                  else
                  {
                    v504 = v492;
                    v505 = v503;
                  }
                  v515 = *((_QWORD *)v464 - 1);
                  v464 -= 8;
                  *((_QWORD *)v504 - 1) = v515;
                  v492 = v504 - 8;
                  v503 = v505;
                }
                while (v464 != (char *)v463[1]);
              }
              v12 = *v463;
              *v463 = (uint64_t)v490;
              v463[1] = (uint64_t)v492;
              v463[2] = (uint64_t)v503;
              v463[3] = v468;
              v107 = v558;
              LOBYTE(v468) = v556;
              v471 = v463 + 5;
              if (v12)
                operator delete((void *)v12);
            }
LABEL_849:
            v530 = *v471;
            *(_QWORD *)(*(_QWORD *)(v463[1] + (((*v470 + *v471) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v470 + *v471) & 0x1FF)) = v559 + 264 * (v468 & 0xF);
            *v471 = v530 + 1;
            v531 = (unsigned __int8 *)(v571 + 224 * v107);
            if (v531[216])
              v532 = v531[214] == 0;
            else
              v532 = 1;
            if (v532 || v531[213])
              goto LABEL_856;
            v533 = v531[36];
            if (v533 < 0x60)
              goto LABEL_855;
            if (v533 >= 0x68)
            {
              if (v533 >= 0x98)
              {
LABEL_855:
                v534 = *(_QWORD *)(a1 + 41960) + *(_QWORD *)(a1 + 41952) - 1;
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 41928) + ((v534 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 264 * (v534 & 0xF)
                         + 32) = 1;
                v531[213] = 1;
                sub_18CBDC(a1, v612);
              }
            }
            else if (!v531[215])
            {
              goto LABEL_855;
            }
LABEL_856:
            ++v577;
            v14 = v611;
            v13 = 8 * a3;
            if (v611 >= 8 * a3)
              goto LABEL_875;
            break;
          case 9:
            if (v625 <= 0x97uLL)
            {
              v39 = v571 + 224 * v625;
              v40 = v612;
              if (!*(_BYTE *)(v39 + 216))
              {
                *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                v621 = 0;
                memset(&__s1[40], 0, 64);
                v614 = 0u;
                v615 = 0u;
                __p = 0u;
                v617 = 0u;
                v618 = 0;
                v622 = 0;
                sub_BF3A8(v39, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v614 + 1))
                {
                  *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(_QWORD *)&__s1[88])
                {
                  *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v40 = v612;
              }
              v41 = DWORD1(v625);
              sub_4607C((_QWORD *)(v39 + 40), v40);
              sub_461CC(v39 + 40);
              v42 = *(_QWORD *)(v39 + 104);
              v43 = *(_DWORD **)(v39 + 96);
              if ((unint64_t)v43 >= v42)
              {
                v12 = *(_QWORD *)(v39 + 88);
                v165 = ((uint64_t)v43 - v12) >> 2;
                if ((unint64_t)(v165 + 1) >> 62)
                  sub_4074();
                v166 = v42 - v12;
                v167 = (uint64_t)(v42 - v12) >> 1;
                if (v167 <= v165 + 1)
                  v167 = v165 + 1;
                if (v166 >= 0x7FFFFFFFFFFFFFFCLL)
                  v168 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v168 = v167;
                if (v168)
                {
                  v169 = (char *)sub_43B2C(v39 + 104, v168);
                  v12 = *(_QWORD *)(v39 + 88);
                  v43 = *(_DWORD **)(v39 + 96);
                }
                else
                {
                  v169 = 0;
                }
                v278 = &v169[4 * v165];
                *(_DWORD *)v278 = v41;
                v44 = v278 + 4;
                while (v43 != (_DWORD *)v12)
                {
                  v279 = *--v43;
                  *((_DWORD *)v278 - 1) = v279;
                  v278 -= 4;
                }
                *(_QWORD *)(v39 + 88) = v278;
                *(_QWORD *)(v39 + 96) = v44;
                *(_QWORD *)(v39 + 104) = &v169[4 * v168];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v43 = v41;
                v44 = v43 + 1;
              }
              *(_QWORD *)(v39 + 96) = v44;
            }
            goto LABEL_856;
          case 0xA:
            v95 = v612[3264];
            v96 = v625;
            *(_DWORD *)__s1 = v625;
            v97 = &v612[3 * v625];
            v98 = (unint64_t *)v97[3097];
            v99 = (unint64_t *)v97[3098];
            if (v98 == v99
              || (v100 = v625,
                  *(_QWORD *)(v612[3258] + ((v95 >> 29) & 0x7FFFFFFF8))
                - *(_QWORD *)(v612[3258] + ((*(v99 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              v101 = (void **)(v97 + 3098);
              v102 = &v612[3 * v625];
              v103 = v102[3099];
              if ((unint64_t)v99 >= v103)
              {
                v153 = (void **)(v97 + 3097);
                v154 = v99 - v98;
                if ((unint64_t)(v154 + 1) >> 61)
                  sub_4074();
                v155 = v102 + 3099;
                v156 = v103 - (_QWORD)v98;
                v157 = v156 >> 2;
                if (v156 >> 2 <= (unint64_t)(v154 + 1))
                  v157 = v154 + 1;
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
                  v158 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v158 = v157;
                if (v158)
                  v12 = (uint64_t)sub_40FC((uint64_t)v155, v158);
                else
                  v12 = 0;
                v242 = (unint64_t *)(v12 + 8 * v154);
                *v242 = v95;
                v104 = v242 + 1;
                v243 = (char *)*v101;
                v244 = (char *)*v153;
                if (*v101 != *v153)
                {
                  do
                  {
                    v245 = *((_QWORD *)v243 - 1);
                    v243 -= 8;
                    *--v242 = v245;
                  }
                  while (v243 != v244);
                  v243 = (char *)*v153;
                }
                *v153 = v242;
                *v101 = v104;
                *v155 = v12 + 8 * v158;
                if (v243)
                  operator delete(v243);
              }
              else
              {
                *v99 = v95;
                v104 = v99 + 1;
              }
              *v101 = v104;
              v100 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0xFu)
                *(_BYTE *)(v564 + *(unsigned int *)__s1) = 0;
            }
            if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
            {
              switch(v96)
              {
                case 0:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v612;
                  v609[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_18D118(v609, (_BYTE *)(v564 + v100));
                  break;
                case 1:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v612;
                  v608[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_18F5BC(v608, (_BYTE *)(v564 + v100));
                  break;
                case 2:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v612;
                  v607[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_146614(v607, (_BYTE *)(v564 + v100));
                  break;
                case 3:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v612;
                  v606[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1499AC(v606, (_BYTE *)(v564 + v100));
                  break;
                case 4:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v612;
                  v605[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_14AE74(v605, (_BYTE *)(v564 + v100));
                  break;
                case 5:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v612;
                  v604[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1906B0(v604, (_BYTE *)(v564 + v100));
                  break;
                case 6:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v612;
                  v603[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_190DCC(v603, (_BYTE *)(v564 + v100));
                  break;
                case 7:
                  v602[0] = a1;
                  v602[1] = (uint64_t)&v612;
                  v602[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_192F74(v602, (_BYTE *)(v564 + v100));
                  break;
                case 8:
                  v601[0] = a1;
                  v601[1] = (uint64_t)&v612;
                  v601[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_150D5C(v601, (_BYTE *)(v564 + v100));
                  break;
                case 9:
                  v600[0] = a1;
                  v600[1] = (uint64_t)&v612;
                  v600[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1515B4(v600, (_BYTE *)(v564 + v100));
                  break;
                case 10:
                  v599[0] = a1;
                  v599[1] = (uint64_t)&v612;
                  v599[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15494C(v599, (_BYTE *)(v564 + v100));
                  break;
                case 11:
                  v598[0] = a1;
                  v598[1] = (uint64_t)&v612;
                  v598[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1554E4(v598, (_BYTE *)(v564 + v100));
                  break;
                case 12:
                  v597[0] = a1;
                  v597[1] = (uint64_t)&v612;
                  v597[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_194F74(v597, (_BYTE *)(v564 + v100));
                  break;
                case 13:
                  v596[0] = a1;
                  v596[1] = (uint64_t)&v612;
                  v596[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_195C8C(v596, (_BYTE *)(v564 + v100));
                  break;
                case 14:
                  v595[0] = a1;
                  v595[1] = (uint64_t)&v612;
                  v595[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1974E0(v595, (_BYTE *)(v564 + v100));
                  break;
                case 15:
                  v594[0] = a1;
                  v594[1] = (uint64_t)&v612;
                  v594[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_197BBC(v594, (_BYTE *)(v564 + v100));
                  break;
                default:
                  goto LABEL_856;
              }
            }
            else
            {
              switch(v96)
              {
                case 0:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v612;
                  v593[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_198CC8(v593, (_BYTE *)(v564 + v100));
                  break;
                case 1:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v612;
                  v592[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_19A1AC(v592, (_BYTE *)(v564 + v100));
                  break;
                case 2:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v612;
                  v591[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_19ABE4(v591, (_BYTE *)(v564 + v100));
                  break;
                case 3:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v612;
                  v590[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_19C8A0(v590, (_BYTE *)(v564 + v100));
                  break;
                case 4:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v612;
                  v589[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_19D4B4(v589, (_BYTE *)(v564 + v100));
                  break;
                case 5:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v612;
                  v588[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_19E2B8(v588, (_BYTE *)(v564 + v100));
                  break;
                case 6:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v612;
                  v587[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_19E790(v587, (_BYTE *)(v564 + v100));
                  break;
                case 7:
                  v586[0] = a1;
                  v586[1] = (uint64_t)__s1;
                  v586[2] = (uint64_t)&v612;
                  v586[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_19FAA0(v586, (_BYTE *)(v564 + v100));
                  break;
                case 8:
                  v585[0] = a1;
                  v585[1] = (uint64_t)__s1;
                  v585[2] = (uint64_t)&v612;
                  v585[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1A0D10(v585, (_BYTE *)(v564 + v100));
                  break;
                case 9:
                  v584[0] = a1;
                  v584[1] = (uint64_t)__s1;
                  v584[2] = (uint64_t)&v612;
                  v584[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1A1284(v584, (_BYTE *)(v564 + v100));
                  break;
                case 10:
                  v583[0] = a1;
                  v583[1] = (uint64_t)__s1;
                  v583[2] = (uint64_t)&v612;
                  v583[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1A2F40(v583, (_BYTE *)(v564 + v100));
                  break;
                case 11:
                  v582[0] = a1;
                  v582[1] = (uint64_t)__s1;
                  v582[2] = (uint64_t)&v612;
                  v582[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1651A4(v582, (_BYTE *)(v564 + v100));
                  break;
                case 12:
                  v581[0] = a1;
                  v581[1] = (uint64_t)__s1;
                  v581[2] = (uint64_t)&v612;
                  v581[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1A3674(v581, (_BYTE *)(v564 + v100));
                  break;
                case 13:
                  v580[0] = a1;
                  v580[1] = (uint64_t)__s1;
                  v580[2] = (uint64_t)&v612;
                  v580[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1A3E74(v580, (_BYTE *)(v564 + v100));
                  break;
                case 14:
                  v579[0] = a1;
                  v579[1] = (uint64_t)__s1;
                  v579[2] = (uint64_t)&v612;
                  v579[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1A4C80(v579, (_BYTE *)(v564 + v100));
                  break;
                case 15:
                  v578[0] = a1;
                  v578[1] = (uint64_t)__s1;
                  v578[2] = (uint64_t)&v612;
                  v578[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1A5128(v578, (_BYTE *)(v564 + v100));
                  break;
                default:
                  goto LABEL_856;
              }
            }
            goto LABEL_856;
          case 0xB:
            v26 = v625;
            if (v625 > 7)
            {
              v27 = 0;
              v28 = -1;
            }
            else
            {
              v27 = dword_4A4AF0[(int)v625];
              v28 = word_4A4EF0[(int)v625];
            }
            v123 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            v124 = *((_QWORD *)&v625 + 1);
            if (*(_DWORD *)(a1 + 120) == -1)
              v125 = 0;
            else
              v125 = *(_DWORD *)(a1 + 120);
            *(_DWORD *)(a1 + 120) = v125 + 1;
            if (v26 > 7)
              goto LABEL_252;
            v126 = v566 + 56 * v26;
            if (!*(_BYTE *)(v126 + 48))
            {
              *(_QWORD *)v126 = v123;
              *(_QWORD *)(v126 + 16) = v124;
              *(_DWORD *)(v126 + 24) = v125;
              *(_DWORD *)(v126 + 28) = v27;
              *(_WORD *)(v126 + 32) = v28;
              *(_QWORD *)(v126 + 40) = 0;
LABEL_251:
              *(_BYTE *)(v126 + 48) = 1;
              goto LABEL_252;
            }
            v127 = sub_11FD14();
            if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(_QWORD *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&dword_0, v127, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            v12 = sub_11FD04();
            if ((_DWORD)v12)
              v12 = sub_11FD0C();
            v128 = *(unsigned __int8 *)(v126 + 48);
            *(_QWORD *)v126 = v123;
            *(_QWORD *)(v126 + 16) = v124;
            *(_DWORD *)(v126 + 24) = v125;
            *(_DWORD *)(v126 + 28) = v27;
            *(_WORD *)(v126 + 32) = v28;
            *(_QWORD *)(v126 + 40) = 0;
            if (!v128)
              goto LABEL_251;
LABEL_252:
            if ((v568 & 2) != 0)
            {
              v175 = v612;
              v176 = (uint64_t *)v612[2];
              v12 = (uint64_t)(v612 + 3);
              v177 = v612[3];
              if ((unint64_t)v176 >= v177)
              {
                v179 = (void **)(v612 + 1);
                v180 = v612[1];
                v181 = ((uint64_t)v176 - v180) >> 3;
                if ((unint64_t)(v181 + 1) >> 61)
                  sub_4074();
                v182 = v177 - v180;
                v183 = v182 >> 2;
                if (v182 >> 2 <= (unint64_t)(v181 + 1))
                  v183 = v181 + 1;
                if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
                  v184 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v184 = v183;
                if (v184)
                  v12 = (uint64_t)sub_40FC(v12, v184);
                else
                  v12 = 0;
                v253 = (uint64_t *)(v12 + 8 * v181);
                *v253 = v123;
                v178 = v253 + 1;
                v255 = (char *)v175[1];
                v254 = (char *)v175[2];
                if (v254 != v255)
                {
                  do
                  {
                    v256 = *((_QWORD *)v254 - 1);
                    v254 -= 8;
                    *--v253 = v256;
                  }
                  while (v254 != v255);
                  v254 = (char *)*v179;
                }
                v175[1] = v253;
                v175[2] = v178;
                v175[3] = v12 + 8 * v184;
                if (v254)
                  operator delete(v254);
              }
              else
              {
                *v176 = v123;
                v178 = v176 + 1;
              }
              v175[2] = v178;
              v257 = v612;
              v258 = (_DWORD *)v612[14];
              v259 = v612[15];
              if ((unint64_t)v258 >= v259)
              {
                v12 = v612[13];
                v261 = ((uint64_t)v258 - v12) >> 2;
                if ((unint64_t)(v261 + 1) >> 62)
                  sub_4074();
                v262 = v259 - v12;
                v263 = (uint64_t)(v259 - v12) >> 1;
                if (v263 <= v261 + 1)
                  v263 = v261 + 1;
                if (v262 >= 0x7FFFFFFFFFFFFFFCLL)
                  v264 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v264 = v263;
                if (v264)
                {
                  v265 = (char *)sub_43B2C((uint64_t)(v612 + 15), v264);
                  v12 = v257[13];
                  v258 = (_DWORD *)v257[14];
                }
                else
                {
                  v265 = 0;
                }
                v266 = &v265[4 * v261];
                *(_DWORD *)v266 = v125;
                v260 = v266 + 4;
                while (v258 != (_DWORD *)v12)
                {
                  v267 = *--v258;
                  *((_DWORD *)v266 - 1) = v267;
                  v266 -= 4;
                }
                v257[13] = v266;
                v257[14] = v260;
                v257[15] = &v265[4 * v264];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v258 = v125;
                v260 = v258 + 1;
              }
              v257[14] = v260;
              v268 = v612;
              v269 = (__int16 *)v612[20];
              v270 = v612[21];
              if ((unint64_t)v269 >= v270)
              {
                v12 = v612[19];
                v272 = (uint64_t)v269 - v12;
                if ((uint64_t)v269 - v12 <= -3)
                  sub_4074();
                v273 = v272 >> 1;
                v274 = v270 - v12;
                if (v274 <= (v272 >> 1) + 1)
                  v275 = v273 + 1;
                else
                  v275 = v274;
                if (v274 >= 0x7FFFFFFFFFFFFFFELL)
                  v276 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v276 = v275;
                if (v276)
                {
                  v277 = (char *)sub_43B60((uint64_t)(v612 + 21), v276);
                  v12 = v268[19];
                  v269 = (__int16 *)v268[20];
                }
                else
                {
                  v277 = 0;
                }
                v284 = (__int16 *)&v277[2 * v273];
                *v284 = v28;
                v271 = v284 + 1;
                while (v269 != (__int16 *)v12)
                {
                  v285 = *--v269;
                  *--v284 = v285;
                }
                v268[19] = v284;
                v268[20] = v271;
                v268[21] = &v277[2 * v276];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v269 = v28;
                v271 = v269 + 1;
              }
              v268[20] = v271;
              v286 = v612;
              v287 = (_DWORD *)v612[17];
              v288 = v612[18];
              if ((unint64_t)v287 >= v288)
              {
                v12 = v612[16];
                v290 = ((uint64_t)v287 - v12) >> 2;
                if ((unint64_t)(v290 + 1) >> 62)
                  sub_4074();
                v291 = v288 - v12;
                v292 = (uint64_t)(v288 - v12) >> 1;
                if (v292 <= v290 + 1)
                  v292 = v290 + 1;
                if (v291 >= 0x7FFFFFFFFFFFFFFCLL)
                  v293 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v293 = v292;
                if (v293)
                {
                  v294 = (char *)sub_43B2C((uint64_t)(v612 + 18), v293);
                  v12 = v286[16];
                  v287 = (_DWORD *)v286[17];
                }
                else
                {
                  v294 = 0;
                }
                v295 = &v294[4 * v290];
                *(_DWORD *)v295 = v27;
                v289 = v295 + 4;
                while (v287 != (_DWORD *)v12)
                {
                  v296 = *--v287;
                  *((_DWORD *)v295 - 1) = v296;
                  v295 -= 4;
                }
                v286[16] = v295;
                v286[17] = v289;
                v286[18] = &v294[4 * v293];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v287 = v27;
                v289 = v287 + 1;
              }
              v286[17] = v289;
              v297 = v612;
              v298 = (_QWORD *)v612[8];
              v299 = v612[9];
              if ((unint64_t)v298 >= v299)
              {
                v12 = v612[7];
                v301 = ((uint64_t)v298 - v12) >> 3;
                if ((unint64_t)(v301 + 1) >> 61)
                  sub_4074();
                v302 = v299 - v12;
                v303 = (uint64_t)(v299 - v12) >> 2;
                if (v303 <= v301 + 1)
                  v303 = v301 + 1;
                if (v302 >= 0x7FFFFFFFFFFFFFF8)
                  v304 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v304 = v303;
                if (v304)
                {
                  v305 = (char *)sub_40FC((uint64_t)(v612 + 9), v304);
                  v12 = v297[7];
                  v298 = (_QWORD *)v297[8];
                }
                else
                {
                  v305 = 0;
                }
                v306 = &v305[8 * v301];
                *(_QWORD *)v306 = v124;
                v300 = v306 + 8;
                while (v298 != (_QWORD *)v12)
                {
                  v307 = *--v298;
                  *((_QWORD *)v306 - 1) = v307;
                  v306 -= 8;
                }
                v297[7] = v306;
                v297[8] = v300;
                v297[9] = &v305[8 * v304];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v298 = v124;
                v300 = v298 + 1;
              }
              v297[8] = v300;
            }
            goto LABEL_856;
          case 0xC:
            if (v625 <= 7)
            {
              v30 = v566 + 56 * v625;
              if (*(_BYTE *)(v30 + 48))
              {
                v31 = 0;
                *(_QWORD *)(v30 + 8) = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                            - 1);
                *(_QWORD *)(v30 + 40) = 0;
                *(_WORD *)(v30 + 40) = WORD2(v625);
                v32 = a1 + 192;
                do
                {
                  if (*(_BYTE *)(v32 + 184) && *(_DWORD *)v32 == *(_DWORD *)(v30 + 24))
                    sub_13BEF4(a1, v612, v31, 1);
                  ++v31;
                  v32 += 224;
                }
                while (v31 != 152);
                v33 = 0;
                v34 = (_BYTE *)(a1 + 34688);
                do
                {
                  if (*v34 && *((_DWORD *)v34 - 2) == *(_DWORD *)(v30 + 24))
                    sub_B6964(a1, v612, v33);
                  ++v33;
                  v34 += 40;
                }
                while (v33 != 16);
                if ((v568 & 2) == 0)
                {
                  v35 = v612;
                  v36 = (_QWORD *)v612[2];
                  v37 = v612[3];
                  if ((unint64_t)v36 >= v37)
                  {
                    v326 = (void **)(v612 + 1);
                    v327 = v612[1];
                    v328 = ((uint64_t)v36 - v327) >> 3;
                    if ((unint64_t)(v328 + 1) >> 61)
                      sub_4074();
                    v329 = v37 - v327;
                    v330 = v329 >> 2;
                    if (v329 >> 2 <= (unint64_t)(v328 + 1))
                      v330 = v328 + 1;
                    if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8)
                      v331 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v331 = v330;
                    if (v331)
                      v332 = (char *)sub_40FC((uint64_t)(v612 + 3), v331);
                    else
                      v332 = 0;
                    v344 = &v332[8 * v328];
                    *(_QWORD *)v344 = *(_QWORD *)v30;
                    v38 = v344 + 8;
                    v346 = (char *)v35[1];
                    v345 = (char *)v35[2];
                    if (v345 != v346)
                    {
                      do
                      {
                        v347 = *((_QWORD *)v345 - 1);
                        v345 -= 8;
                        *((_QWORD *)v344 - 1) = v347;
                        v344 -= 8;
                      }
                      while (v345 != v346);
                      v345 = (char *)*v326;
                    }
                    v35[1] = v344;
                    v35[2] = v38;
                    v35[3] = &v332[8 * v331];
                    if (v345)
                      operator delete(v345);
                  }
                  else
                  {
                    *v36 = *(_QWORD *)v30;
                    v38 = v36 + 1;
                  }
                  v35[2] = v38;
                  v348 = v612;
                  v349 = (_QWORD *)v612[5];
                  v12 = (uint64_t)(v612 + 6);
                  v350 = v612[6];
                  if ((unint64_t)v349 >= v350)
                  {
                    v352 = (void **)(v612 + 4);
                    v353 = v612[4];
                    v354 = ((uint64_t)v349 - v353) >> 3;
                    if ((unint64_t)(v354 + 1) >> 61)
                      sub_4074();
                    v355 = v350 - v353;
                    v356 = v355 >> 2;
                    if (v355 >> 2 <= (unint64_t)(v354 + 1))
                      v356 = v354 + 1;
                    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8)
                      v357 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v357 = v356;
                    if (v357)
                      v12 = (uint64_t)sub_40FC(v12, v357);
                    else
                      v12 = 0;
                    v358 = (_QWORD *)(v12 + 8 * v354);
                    *v358 = *(_QWORD *)(v30 + 8);
                    v351 = v358 + 1;
                    v360 = (char *)v348[4];
                    v359 = (char *)v348[5];
                    if (v359 != v360)
                    {
                      do
                      {
                        v361 = *((_QWORD *)v359 - 1);
                        v359 -= 8;
                        *--v358 = v361;
                      }
                      while (v359 != v360);
                      v359 = (char *)*v352;
                    }
                    v348[4] = v358;
                    v348[5] = v351;
                    v348[6] = v12 + 8 * v357;
                    if (v359)
                      operator delete(v359);
                  }
                  else
                  {
                    *v349 = *(_QWORD *)(v30 + 8);
                    v351 = v349 + 1;
                  }
                  v348[5] = v351;
                  v362 = v612;
                  v363 = (_DWORD *)v612[14];
                  v364 = v612[15];
                  if ((unint64_t)v363 >= v364)
                  {
                    v12 = v612[13];
                    v366 = ((uint64_t)v363 - v12) >> 2;
                    if ((unint64_t)(v366 + 1) >> 62)
                      sub_4074();
                    v367 = v364 - v12;
                    v368 = (uint64_t)(v364 - v12) >> 1;
                    if (v368 <= v366 + 1)
                      v368 = v366 + 1;
                    if (v367 >= 0x7FFFFFFFFFFFFFFCLL)
                      v369 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v369 = v368;
                    if (v369)
                    {
                      v370 = (char *)sub_43B2C((uint64_t)(v612 + 15), v369);
                      v12 = v362[13];
                      v363 = (_DWORD *)v362[14];
                    }
                    else
                    {
                      v370 = 0;
                    }
                    v371 = &v370[4 * v366];
                    *(_DWORD *)v371 = *(_DWORD *)(v30 + 24);
                    v365 = v371 + 4;
                    while (v363 != (_DWORD *)v12)
                    {
                      v372 = *--v363;
                      *((_DWORD *)v371 - 1) = v372;
                      v371 -= 4;
                    }
                    v362[13] = v371;
                    v362[14] = v365;
                    v362[15] = &v370[4 * v369];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v363 = *(_DWORD *)(v30 + 24);
                    v365 = v363 + 1;
                  }
                  v362[14] = v365;
                  v373 = v612;
                  v374 = (_WORD *)v612[20];
                  v375 = v612[21];
                  if ((unint64_t)v374 >= v375)
                  {
                    v12 = v612[19];
                    v377 = (uint64_t)v374 - v12;
                    if ((uint64_t)v374 - v12 <= -3)
                      sub_4074();
                    v378 = v377 >> 1;
                    v379 = v375 - v12;
                    if (v379 <= (v377 >> 1) + 1)
                      v380 = v378 + 1;
                    else
                      v380 = v379;
                    if (v379 >= 0x7FFFFFFFFFFFFFFELL)
                      v381 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v381 = v380;
                    if (v381)
                    {
                      v382 = (char *)sub_43B60((uint64_t)(v612 + 21), v381);
                      v12 = v373[19];
                      v374 = (_WORD *)v373[20];
                    }
                    else
                    {
                      v382 = 0;
                    }
                    v383 = &v382[2 * v378];
                    *(_WORD *)v383 = *(_WORD *)(v30 + 32);
                    v376 = v383 + 2;
                    while (v374 != (_WORD *)v12)
                    {
                      v384 = *--v374;
                      *((_WORD *)v383 - 1) = v384;
                      v383 -= 2;
                    }
                    v373[19] = v383;
                    v373[20] = v376;
                    v373[21] = &v382[2 * v381];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v374 = *(_WORD *)(v30 + 32);
                    v376 = v374 + 1;
                  }
                  v373[20] = v376;
                  v385 = v612;
                  v386 = (_DWORD *)v612[17];
                  v387 = v612[18];
                  if ((unint64_t)v386 >= v387)
                  {
                    v12 = v612[16];
                    v389 = ((uint64_t)v386 - v12) >> 2;
                    if ((unint64_t)(v389 + 1) >> 62)
                      sub_4074();
                    v390 = v387 - v12;
                    v391 = (uint64_t)(v387 - v12) >> 1;
                    if (v391 <= v389 + 1)
                      v391 = v389 + 1;
                    if (v390 >= 0x7FFFFFFFFFFFFFFCLL)
                      v392 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v392 = v391;
                    if (v392)
                    {
                      v393 = (char *)sub_43B2C((uint64_t)(v612 + 18), v392);
                      v12 = v385[16];
                      v386 = (_DWORD *)v385[17];
                    }
                    else
                    {
                      v393 = 0;
                    }
                    v394 = &v393[4 * v389];
                    *(_DWORD *)v394 = *(_DWORD *)(v30 + 28);
                    v388 = v394 + 4;
                    while (v386 != (_DWORD *)v12)
                    {
                      v395 = *--v386;
                      *((_DWORD *)v394 - 1) = v395;
                      v394 -= 4;
                    }
                    v385[16] = v394;
                    v385[17] = v388;
                    v385[18] = &v393[4 * v392];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v386 = *(_DWORD *)(v30 + 28);
                    v388 = v386 + 1;
                  }
                  v385[17] = v388;
                  v396 = v612;
                  v397 = (_QWORD *)v612[8];
                  v398 = v612[9];
                  if ((unint64_t)v397 >= v398)
                  {
                    v12 = v612[7];
                    v400 = ((uint64_t)v397 - v12) >> 3;
                    if ((unint64_t)(v400 + 1) >> 61)
                      sub_4074();
                    v401 = v398 - v12;
                    v402 = (uint64_t)(v398 - v12) >> 2;
                    if (v402 <= v400 + 1)
                      v402 = v400 + 1;
                    if (v401 >= 0x7FFFFFFFFFFFFFF8)
                      v403 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v403 = v402;
                    if (v403)
                    {
                      v404 = (char *)sub_40FC((uint64_t)(v612 + 9), v403);
                      v12 = v396[7];
                      v397 = (_QWORD *)v396[8];
                    }
                    else
                    {
                      v404 = 0;
                    }
                    v405 = &v404[8 * v400];
                    *(_QWORD *)v405 = *(_QWORD *)(v30 + 16);
                    v399 = v405 + 8;
                    while (v397 != (_QWORD *)v12)
                    {
                      v406 = *--v397;
                      *((_QWORD *)v405 - 1) = v406;
                      v405 -= 8;
                    }
                    v396[7] = v405;
                    v396[8] = v399;
                    v396[9] = &v404[8 * v403];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v397 = *(_QWORD *)(v30 + 16);
                    v399 = v397 + 1;
                  }
                  v396[8] = v399;
                  v407 = v612;
                  v408 = (_QWORD *)v612[11];
                  v409 = v612[12];
                  if ((unint64_t)v408 >= v409)
                  {
                    v12 = v612[10];
                    v411 = ((uint64_t)v408 - v12) >> 3;
                    if ((unint64_t)(v411 + 1) >> 61)
                      sub_4074();
                    v412 = v409 - v12;
                    v413 = (uint64_t)(v409 - v12) >> 2;
                    if (v413 <= v411 + 1)
                      v413 = v411 + 1;
                    if (v412 >= 0x7FFFFFFFFFFFFFF8)
                      v414 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v414 = v413;
                    if (v414)
                    {
                      v415 = (char *)sub_40FC((uint64_t)(v612 + 12), v414);
                      v12 = v407[10];
                      v408 = (_QWORD *)v407[11];
                    }
                    else
                    {
                      v415 = 0;
                    }
                    v416 = &v415[8 * v411];
                    *(_QWORD *)v416 = *(_QWORD *)(v30 + 40);
                    v410 = v416 + 8;
                    while (v408 != (_QWORD *)v12)
                    {
                      v417 = *--v408;
                      *((_QWORD *)v416 - 1) = v417;
                      v416 -= 8;
                    }
                    v407[10] = v416;
                    v407[11] = v410;
                    v407[12] = &v415[8 * v414];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v408 = *(_QWORD *)(v30 + 40);
                    v410 = v408 + 1;
                  }
                  v407[11] = v410;
                }
                if (*(_BYTE *)(v30 + 48))
                  *(_BYTE *)(v30 + 48) = 0;
              }
            }
            goto LABEL_856;
          case 0xD:
            v88 = v567 + 40 * (v625 & 3);
            if (*(_BYTE *)(v88 + 32))
            {
              v89 = sub_11FD14();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&dword_0, v89, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v90 = v612[3256];
            v91 = v612[3255];
            v92 = v612[3259];
            v93 = v612[3258];
            v94 = *(_QWORD *)(a1 + 112);
            if (v94 == -1)
              v94 = 0;
            *(_QWORD *)(a1 + 112) = v94 + 1;
            if (!*(_BYTE *)(v88 + 32))
              *(_BYTE *)(v88 + 32) = 1;
            *(_QWORD *)v88 = (((v92 - v93) << 29) - 0x100000000) | (((unint64_t)(v90 - v91) >> 3)
                                                                    - 1);
            *(_QWORD *)(v88 + 16) = v94;
            *(_DWORD *)(v88 + 24) = -1;
            goto LABEL_856;
          case 0xE:
            sub_B6964(a1, v612, v625 & 3);
            goto LABEL_856;
          case 0xF:
            v56 = DWORD1(v625);
            if (DWORD1(v625) <= 7)
            {
              v57 = v562 + 12 * DWORD1(v625);
              *(_QWORD *)v57 = v625;
              *(_DWORD *)(v57 + 8) = DWORD2(v625);
              v58 = v56 - 4;
              if (v58 <= 2)
              {
                v59 = v567 + 40 * v58;
                if (*(_BYTE *)(v59 + 32))
                {
                  if (v625 <= 7)
                  {
                    v60 = v566 + 56 * v625;
                    if (*(_BYTE *)(v60 + 48))
                      *(_DWORD *)(v59 + 24) = *(_DWORD *)(v60 + 24);
                  }
                }
              }
            }
            goto LABEL_856;
          case 0x10:
            v611 = (v611 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_856;
          default:
            goto LABEL_856;
        }
      }
      if (v561)
        *v561 = 2;
    }
    else
    {
      v577 = 0;
    }
LABEL_875:
    for (i = 0; i != 218; ++i)
    {
      v541 = v612;
      if (v612[3 * i + 97] != v612[3 * i + 98])
      {
        v12 = (uint64_t)sub_1865EC(v12, i);
        v542 = v12;
        v543 = (uint64_t *)v541[3248];
        v544 = v541[3249];
        if ((unint64_t)v543 >= v544)
        {
          v546 = v541[3247];
          v547 = ((uint64_t)v543 - v546) >> 3;
          if ((unint64_t)(v547 + 1) >> 61)
            sub_4074();
          v548 = v544 - v546;
          v549 = v548 >> 2;
          if (v548 >> 2 <= (unint64_t)(v547 + 1))
            v549 = v547 + 1;
          if ((unint64_t)v548 >= 0x7FFFFFFFFFFFFFF8)
            v550 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v550 = v549;
          if (v550)
            v12 = (uint64_t)sub_40FC((uint64_t)(v541 + 3249), v550);
          else
            v12 = 0;
          v551 = (uint64_t *)(v12 + 8 * v547);
          *v551 = v542;
          v545 = v551 + 1;
          v552 = (char *)v541[3248];
          v553 = (char *)v541[3247];
          if (v552 != v553)
          {
            do
            {
              v554 = *((_QWORD *)v552 - 1);
              v552 -= 8;
              *--v551 = v554;
            }
            while (v552 != v553);
            v552 = (char *)v541[3247];
          }
          v541[3247] = v551;
          v541[3248] = v545;
          v541[3249] = v12 + 8 * v550;
          if (v552)
            operator delete(v552);
        }
        else
        {
          *v543 = v12;
          v545 = v543 + 1;
        }
        v541[3248] = v545;
      }
    }
    result = v612;
    v612[3250] = v577;
    result[3251] = v611;
  }
  else
  {
    result = 0;
    if (a5)
      *a5 = 1;
  }
  return result;
}

void sub_16F36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  void *v10;

  operator delete(__p);
  operator delete(v10);
  _Unwind_Resume(a1);
}

#error "16F43C: too big function (funcsize=0)"

void sub_185664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_186400(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  *(_QWORD *)a1 = off_723830;
  if (*(_QWORD *)(a1 + 128))
  {
    sub_F2D60();
    operator delete();
  }
  v2 = a1 + 41968;
  v3 = a1 + 49264;
  do
  {
    v4 = *(void ***)(v3 - 40);
    v5 = *(void ***)(v3 - 32);
    *(_QWORD *)(v3 - 8) = 0;
    v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        v5 = *(void ***)(v3 - 32);
        v4 = (void **)(*(_QWORD *)(v3 - 40) + 8);
        *(_QWORD *)(v3 - 40) = v4;
        v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    v7 = v6 >> 3;
    if (v7 == 1)
    {
      v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      v8 = 512;
LABEL_10:
      *(_QWORD *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      v11 = *(_QWORD *)(v3 - 40);
      v10 = *(_QWORD *)(v3 - 32);
      if (v10 != v11)
        *(_QWORD *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    v13 = *(void **)(v3 - 48);
    v3 -= 48;
    v12 = v13;
    if (v13)
      operator delete(v12);
  }
  while (v3 != v2);
  sub_93158(a1 + 41920);
  v14 = 0;
  v15 = a1 + 34024;
  do
  {
    if (*(_BYTE *)(a1 + 34200 + v14))
    {
      v16 = v15 + v14;
      v17 = *(void **)(v15 + v14 + 96);
      if (v17)
      {
        *(_QWORD *)(v16 + 104) = v17;
        operator delete(v17);
      }
      v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(_QWORD *)(v15 + v14 + 80) = v18;
        operator delete(v18);
      }
      v19 = v15 + v14;
      v20 = *(void **)(v15 + v14 + 48);
      if (v20)
      {
        *(_QWORD *)(v19 + 56) = v20;
        operator delete(v20);
      }
      v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(_QWORD *)(v15 + v14 + 32) = v21;
        operator delete(v21);
      }
      v22 = *(void **)(v15 + v14);
      if (v22)
      {
        *(_QWORD *)(v15 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 224;
  }
  while (v14 != -34048);
  v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_1865C8(uint64_t a1)
{
  sub_186400(a1);
  operator delete();
}

const char *sub_1865EC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char **v3;
  char **v4;

  v2 = a2 - 128;
  if (a2 < 0x80)
  {
    v3 = &off_723888[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    v4 = off_723C88;
LABEL_7:
    v3 = &v4[v2];
    return *v3;
  }
  v2 = a2 - 192;
  if (a2 - 192 < 0x1A)
  {
    v4 = off_723E88;
    goto LABEL_7;
  }
  return "Invalid";
}

uint64_t sub_186648(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *a4 = 1;
  v4 = *a3 & 7;
  v5 = *a3 >> 3;
  if (v4 == 7)
    v6 = *(unsigned __int16 *)(a2 + v5) >> 7;
  else
    v6 = *(unsigned __int8 *)(a2 + v5) >> v4;
  return ((uint64_t (*)(void))((char *)sub_1866A8 + 4 * byte_4A4892[v6 & 3]))();
}

uint64_t sub_1866A8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;

  *(_WORD *)(result + 8) = 3;
  *(_QWORD *)result = 0;
  v3 = *a3 + 2;
  v4 = v3 >> 3;
  v5 = v3 & 7;
  if (v5)
    v6 = (*(unsigned __int16 *)(a2 + v4) >> v5);
  else
    v6 = *(unsigned __int8 *)(a2 + v4);
  v7 = *(unsigned __int16 *)(result + 16) | v6;
  *(_WORD *)(result + 16) = v7;
  v8 = *a3;
  if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(_BYTE *)a3 + 10) & 7)) & 1) != 0)
  {
    v9 = v8 + 11;
    v10 = (v8 + 11) & 7;
    v11 = v9 >> 3;
    if (v10 > 2)
      v12 = *(_WORD *)(a2 + v11);
    else
      v12 = *(unsigned __int8 *)(a2 + v11);
    v18 = (((v12 >> v10) & 0x3F) << 8) | v7;
    *(_WORD *)(result + 16) = v18;
    if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(_BYTE *)a3 + 17) & 7)) & 1) != 0)
      v19 = v18 | 0x4000;
    else
      v19 = v18 & 0xBFFF;
    *(_WORD *)(result + 16) = v19;
    v20 = 18;
  }
  else
  {
    v13 = v7 & 0xBFFF;
    *(_WORD *)(result + 16) = v13;
    v14 = *a3 + 11;
    v15 = v14 & 7;
    v16 = v14 >> 3;
    if (v15 > 4)
      v17 = *(_WORD *)(a2 + v16);
    else
      v17 = *(unsigned __int8 *)(a2 + v16);
    *(_WORD *)(result + 16) = (((v17 >> v15) & 0xF) << 8) | v13;
    v20 = 15;
  }
  *a3 += v20;
  return result;
}

void sub_18CBDC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  char v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;

  v2 = a1 + 41928;
  if (*(_QWORD *)(a1 + 41960))
  {
    v15 = a1 + 160;
    v5 = a1 + 41968;
    v6 = *(_QWORD *)(a1 + 41952);
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      v8 = v6 & 0xF;
      v9 = (unsigned __int8 *)(v7 + 264 * (v6 & 0xF));
      if (!v9[32])
        break;
      v18 = a1;
      v16[0] = v9;
      v16[1] = &v18;
      v16[2] = a1;
      v16[3] = &v17;
      v10 = v7 + 264 * v8;
      if (*(_BYTE *)(v10 + 256))
      {
        sub_18CE24((unint64_t)v16, v10 + 40);
        if (!*(_BYTE *)(v10 + 256))
          sub_70A0();
        sub_442AC(a2, v10 + 40);
      }
      else
      {
        v11 = *v9;
        if (v11 <= 0x97)
        {
          sub_18CE24((unint64_t)v16, v15 + 224 * *v9);
          v12 = (int64x2_t *)(v5 + 48 * v11);
          if (v12[2].i64[1])
            goto LABEL_14;
          v13 = sub_11FD14();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v20 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            v21 = 1024;
            v22 = 806;
            v23 = 2080;
            v24 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_11FD04())
            sub_11FD0C();
          if (v12[2].i64[1])
LABEL_14:
            sub_4601C(v12);
        }
      }
      sub_B6870(*(_QWORD *)(*(_QWORD *)v2 + ((*(_QWORD *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 264 * (*(_QWORD *)(v2 + 24) & 0xFLL));
      v14 = *(_QWORD *)(v2 + 32) - 1;
      v6 = *(_QWORD *)(v2 + 24) + 1;
      *(_QWORD *)(v2 + 24) = v6;
      *(_QWORD *)(v2 + 32) = v14;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(_QWORD *)v2 += 8;
        v14 = *(_QWORD *)(v2 + 32);
        v6 = *(_QWORD *)(v2 + 24) - 16;
        *(_QWORD *)(v2 + 24) = v6;
      }
    }
    while (v14);
  }
}

unint64_t sub_18CE24(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  int32x2_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 4);
  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(unsigned int *)(a2 + 208);
  switch((int)v3)
  {
    case 0:
      result = sub_142F1C(*(uint64_t **)(result + 8), *(_QWORD *)(v2 + 20), *(_DWORD *)(v2 + 28), v7, v3);
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v10 = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(_QWORD *)v5 + 16);
      if (v7 <= 7)
      {
        *((_QWORD *)&v11 + 1) = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(_QWORD *)v5 + 16);
        *(_QWORD *)&v11 = v9 & 0xFFFFFFFF00000000;
        v12 = v6 + 16 * v7 + 39616;
        *(_DWORD *)v12 = v9;
        *(int32x2_t *)(v12 + 4) = vzip1_s32((int32x2_t)(v11 >> 32), (int32x2_t)v10);
        *(_BYTE *)(v12 + 12) = 1;
      }
      v14 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(_QWORD *)(v13 - 28) = v10;
      *(_QWORD *)(v13 - 36) = v9;
      *(v13 - 20) = ((v8 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v14)
        goto LABEL_23;
      break;
    case 1:
      result = sub_142F1C(*(uint64_t **)(result + 8), *(_QWORD *)(v2 + 12), *(_DWORD *)(v2 + 20), v7, v3);
      v16 = 0;
      v17 = ((HIDWORD(result) & 0x7FF) << 32) | ((v15 & 0x7FF) << 43) | (HIDWORD(v15) << 54);
      if (v7 <= 7)
      {
        v18 = (_DWORD *)(v6 + 16 * v7 + 39616);
        if (*(_BYTE *)(v6 + 16 * v7 + 39628))
        {
          v19 = *(unsigned __int16 *)(*(_QWORD *)v5 + 8);
          v20 = vadd_s32(*(int32x2_t *)(v6 + 16 * v7 + 39620), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          v21 = *v18 + (v19 & 0xF);
          v16 = v21 | ((unint64_t)v20.u32[0] << 32);
          v17 = v20.u32[1] | (unint64_t)v17;
          *v18 = v21;
          *(int32x2_t *)(v6 + 16 * v7 + 39620) = v20;
        }
      }
      v22 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(_QWORD *)(v13 - 28) = v17;
      *(_QWORD *)(v13 - 36) = v16;
      *(v13 - 20) = ((v15 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v22)
        goto LABEL_23;
      break;
    case 2:
      v23 = *(_WORD *)(v2 + 8);
      LODWORD(v24) = ((*(_WORD *)(v2 + 12) & 0x7FF) << 20) | ((*(_WORD *)(v2 + 10) & 0x3FF) << 10) | v23 & 0x3FF;
      v25 = *(uint8x8_t *)(v2 + 15);
      v26 = *(uint8x8_t *)(v2 + 23);
      if ((*(_BYTE *)(v2 + 14) & 1) != 0)
      {
        v31 = v25.u8[0];
        v27.i64[0] = vdupq_n_s16(v25.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v31 + 1).i64[1];
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v26.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        v27 = vmovl_u8(v25);
        v28 = vmovl_u8(v26);
      }
      if (v7 <= 7)
      {
        v32 = v6 + 16 * v7 + 39744;
        *(_DWORD *)v32 = v23 & 0x3FF;
        *(int8x8_t *)(v32 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(_BYTE *)(v32 + 12) = 1;
      }
      goto LABEL_22;
    case 3:
      LODWORD(v24) = *(unsigned __int8 *)(v2 + 8);
      v29 = *(uint8x8_t *)(v2 + 9);
      v30 = *(uint8x8_t *)(v2 + 17);
      if ((v24 & 1) != 0)
      {
        v33 = v29.u8[0];
        v27.i64[0] = vdupq_n_s16(v29.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v33 + 1).i64[1];
        v24 = (uint64_t)&unk_4A4000;
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v30.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        v27 = vmovl_u8(v29);
        v28 = vmovl_u8(v30);
      }
      if (v7 <= 7)
      {
        v24 = v6 + 16 * v7 + 39744;
        if (*(_BYTE *)(v6 + 16 * v7 + 39756))
          LODWORD(v24) = *(_DWORD *)v24 & 0x3FF | ((*(_DWORD *)(v6 + 16 * v7 + 39748) & 0x3FF) << 10) & 0x800FFFFF | ((*(_DWORD *)(v6 + 16 * v7 + 39752) & 0x7FF) << 20);
      }
LABEL_22:
      v34 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(uint16x8_t *)(a2 + 168) = v27;
      *(uint16x8_t *)(a2 + 184) = v28;
      *(_DWORD *)(a2 + 200) = v24;
      if (!v34)
LABEL_23:
        *v13 = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_18D118(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  uint64_t v191;
  char *v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  _QWORD *v212;
  uint64_t v213;
  char *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  _QWORD *v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  _QWORD *v256;
  uint64_t v257;
  char *v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  _QWORD *v278;
  uint64_t v279;
  char *v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t *v302;
  unint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  uint64_t *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  _QWORD *v344;
  uint64_t v345;
  char *v346;
  unint64_t v347;
  char *v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  char *v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  char *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  _QWORD *v366;
  uint64_t v367;
  char *v368;
  unint64_t v369;
  char *v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  char *v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  _QWORD *v388;
  uint64_t v389;
  char *v390;
  unint64_t v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  char *v397;
  unint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  char *v404;
  char *v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  _QWORD *v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  unint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  char *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  _QWORD *v432;
  uint64_t v433;
  char *v434;
  unint64_t v435;
  char *v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  char *v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  _QWORD *v454;
  uint64_t v455;
  char *v456;
  unint64_t v457;
  char *v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  char *v463;
  unint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  char *v470;
  char *v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  _QWORD *v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  char *v486;
  uint64_t v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  unint64_t *v495;
  char *v496;
  unint64_t v497;
  unint64_t v498;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      v8 = (char *)v6[497];
      v24 = v6[498];
      if ((unint64_t)v8 >= v24)
      {
        v10 = (char *)v6[496];
        v26 = (v8 - v10) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_712;
        v27 = v24 - (_QWORD)v10;
        v28 = (uint64_t)(v24 - (_QWORD)v10) >> 2;
        if (v28 <= v26 + 1)
          v28 = v26 + 1;
        if (v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
        {
          v30 = (char *)sub_40FC((uint64_t)(v6 + 498), v29);
          v8 = (char *)v6[497];
          v10 = (char *)v6[496];
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[8 * v26];
        v32 = &v30[8 * v29];
        *(_QWORD *)v31 = v7;
        v25 = v31 + 8;
        while (v8 != v10)
        {
          v34 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v31 - 1) = v34;
          v31 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      v8 = (char *)v6[497];
      v9 = v6[498];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[496];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_712;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 498), v14);
          v8 = (char *)v6[497];
          v10 = (char *)v6[496];
        }
        else
        {
          v15 = 0;
        }
        v31 = &v15[8 * v11];
        v32 = &v15[8 * v14];
        *(_QWORD *)v31 = v7;
        v25 = v31 + 8;
        while (v8 != v10)
        {
          v33 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v31 - 1) = v33;
          v31 -= 8;
        }
LABEL_35:
        v6[496] = v31;
        v6[497] = v25;
        v6[498] = v32;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v25 = v8 + 8;
LABEL_37:
    v6[497] = v25;
LABEL_38:
    v35 = 1 << *(_DWORD *)(v3 + 48);
    if (v35 == 2)
    {
      v36 = *(_QWORD **)a1[1];
      v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      v38 = (char *)v36[500];
      v46 = v36[501];
      if ((unint64_t)v38 >= v46)
      {
        v40 = (char *)v36[499];
        v48 = (v38 - v40) >> 3;
        if ((unint64_t)(v48 + 1) >> 61)
          goto LABEL_712;
        v49 = v46 - (_QWORD)v40;
        v50 = (uint64_t)(v46 - (_QWORD)v40) >> 2;
        if (v50 <= v48 + 1)
          v50 = v48 + 1;
        if (v49 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
        {
          v52 = (char *)sub_40FC((uint64_t)(v36 + 501), v51);
          v38 = (char *)v36[500];
          v40 = (char *)v36[499];
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[8 * v48];
        v54 = &v52[8 * v51];
        *(_QWORD *)v53 = v37;
        v47 = v53 + 8;
        while (v38 != v40)
        {
          v56 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v53 - 1) = v56;
          v53 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v35 != 1)
        goto LABEL_70;
      v36 = *(_QWORD **)a1[1];
      v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      v38 = (char *)v36[500];
      v39 = v36[501];
      if ((unint64_t)v38 >= v39)
      {
        v40 = (char *)v36[499];
        v41 = (v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          goto LABEL_712;
        v42 = v39 - (_QWORD)v40;
        v43 = (uint64_t)(v39 - (_QWORD)v40) >> 2;
        if (v43 <= v41 + 1)
          v43 = v41 + 1;
        if (v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          v45 = (char *)sub_40FC((uint64_t)(v36 + 501), v44);
          v38 = (char *)v36[500];
          v40 = (char *)v36[499];
        }
        else
        {
          v45 = 0;
        }
        v53 = &v45[8 * v41];
        v54 = &v45[8 * v44];
        *(_QWORD *)v53 = v37;
        v47 = v53 + 8;
        while (v38 != v40)
        {
          v55 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v53 - 1) = v55;
          v53 -= 8;
        }
LABEL_67:
        v36[499] = v53;
        v36[500] = v47;
        v36[501] = v54;
        if (v40)
          operator delete(v40);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v38 = v37;
    v47 = v38 + 8;
LABEL_69:
    v36[500] = v47;
LABEL_70:
    v57 = 1 << *(_DWORD *)(v3 + 48);
    if (v57 == 2)
    {
      v58 = *(_QWORD **)a1[1];
      v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      v60 = (char *)v58[503];
      v68 = v58[504];
      if ((unint64_t)v60 >= v68)
      {
        v62 = (char *)v58[502];
        v70 = (v60 - v62) >> 3;
        if ((unint64_t)(v70 + 1) >> 61)
          goto LABEL_712;
        v71 = v68 - (_QWORD)v62;
        v72 = (uint64_t)(v68 - (_QWORD)v62) >> 2;
        if (v72 <= v70 + 1)
          v72 = v70 + 1;
        if (v71 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        if (v73)
        {
          v74 = (char *)sub_40FC((uint64_t)(v58 + 504), v73);
          v60 = (char *)v58[503];
          v62 = (char *)v58[502];
        }
        else
        {
          v74 = 0;
        }
        v75 = &v74[8 * v70];
        v76 = &v74[8 * v73];
        *(_QWORD *)v75 = v59;
        v69 = v75 + 8;
        while (v60 != v62)
        {
          v78 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v75 - 1) = v78;
          v75 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v57 != 1)
        goto LABEL_102;
      v58 = *(_QWORD **)a1[1];
      v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      v60 = (char *)v58[503];
      v61 = v58[504];
      if ((unint64_t)v60 >= v61)
      {
        v62 = (char *)v58[502];
        v63 = (v60 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_712;
        v64 = v61 - (_QWORD)v62;
        v65 = (uint64_t)(v61 - (_QWORD)v62) >> 2;
        if (v65 <= v63 + 1)
          v65 = v63 + 1;
        if (v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
        {
          v67 = (char *)sub_40FC((uint64_t)(v58 + 504), v66);
          v60 = (char *)v58[503];
          v62 = (char *)v58[502];
        }
        else
        {
          v67 = 0;
        }
        v75 = &v67[8 * v63];
        v76 = &v67[8 * v66];
        *(_QWORD *)v75 = v59;
        v69 = v75 + 8;
        while (v60 != v62)
        {
          v77 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v75 - 1) = v77;
          v75 -= 8;
        }
LABEL_99:
        v58[502] = v75;
        v58[503] = v69;
        v58[504] = v76;
        if (v62)
          operator delete(v62);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v60 = v59;
    v69 = v60 + 8;
LABEL_101:
    v58[503] = v69;
LABEL_102:
    v79 = 1 << *(_DWORD *)(v3 + 48);
    if (v79 == 2)
    {
      v80 = *(_QWORD **)a1[1];
      v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v82 = (char *)v80[506];
      v90 = v80[507];
      if ((unint64_t)v82 >= v90)
      {
        v84 = (char *)v80[505];
        v92 = (v82 - v84) >> 3;
        if ((unint64_t)(v92 + 1) >> 61)
          goto LABEL_712;
        v93 = v90 - (_QWORD)v84;
        v94 = (uint64_t)(v90 - (_QWORD)v84) >> 2;
        if (v94 <= v92 + 1)
          v94 = v92 + 1;
        if (v93 >= 0x7FFFFFFFFFFFFFF8)
          v95 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v95 = v94;
        if (v95)
        {
          v96 = (char *)sub_40FC((uint64_t)(v80 + 507), v95);
          v82 = (char *)v80[506];
          v84 = (char *)v80[505];
        }
        else
        {
          v96 = 0;
        }
        v97 = &v96[8 * v92];
        v98 = &v96[8 * v95];
        *(_QWORD *)v97 = v81;
        v91 = v97 + 8;
        while (v82 != v84)
        {
          v100 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v97 - 1) = v100;
          v97 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v79 != 1)
        goto LABEL_134;
      v80 = *(_QWORD **)a1[1];
      v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v82 = (char *)v80[506];
      v83 = v80[507];
      if ((unint64_t)v82 >= v83)
      {
        v84 = (char *)v80[505];
        v85 = (v82 - v84) >> 3;
        if ((unint64_t)(v85 + 1) >> 61)
          goto LABEL_712;
        v86 = v83 - (_QWORD)v84;
        v87 = (uint64_t)(v83 - (_QWORD)v84) >> 2;
        if (v87 <= v85 + 1)
          v87 = v85 + 1;
        if (v86 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
        {
          v89 = (char *)sub_40FC((uint64_t)(v80 + 507), v88);
          v82 = (char *)v80[506];
          v84 = (char *)v80[505];
        }
        else
        {
          v89 = 0;
        }
        v97 = &v89[8 * v85];
        v98 = &v89[8 * v88];
        *(_QWORD *)v97 = v81;
        v91 = v97 + 8;
        while (v82 != v84)
        {
          v99 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v97 - 1) = v99;
          v97 -= 8;
        }
LABEL_131:
        v80[505] = v97;
        v80[506] = v91;
        v80[507] = v98;
        if (v84)
          operator delete(v84);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v82 = v81;
    v91 = v82 + 8;
LABEL_133:
    v80[506] = v91;
LABEL_134:
    v101 = 1 << *(_DWORD *)(v3 + 48);
    if (v101 == 2)
    {
      v102 = *(_QWORD **)a1[1];
      v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      v104 = (char *)v102[509];
      v112 = v102[510];
      if ((unint64_t)v104 >= v112)
      {
        v106 = (char *)v102[508];
        v114 = (v104 - v106) >> 3;
        if ((unint64_t)(v114 + 1) >> 61)
          goto LABEL_712;
        v115 = v112 - (_QWORD)v106;
        v116 = (uint64_t)(v112 - (_QWORD)v106) >> 2;
        if (v116 <= v114 + 1)
          v116 = v114 + 1;
        if (v115 >= 0x7FFFFFFFFFFFFFF8)
          v117 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v117 = v116;
        if (v117)
        {
          v118 = (char *)sub_40FC((uint64_t)(v102 + 510), v117);
          v104 = (char *)v102[509];
          v106 = (char *)v102[508];
        }
        else
        {
          v118 = 0;
        }
        v119 = &v118[8 * v114];
        v120 = &v118[8 * v117];
        *(_QWORD *)v119 = v103;
        v113 = v119 + 8;
        while (v104 != v106)
        {
          v122 = *((_QWORD *)v104 - 1);
          v104 -= 8;
          *((_QWORD *)v119 - 1) = v122;
          v119 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v101 != 1)
        goto LABEL_166;
      v102 = *(_QWORD **)a1[1];
      v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      v104 = (char *)v102[509];
      v105 = v102[510];
      if ((unint64_t)v104 >= v105)
      {
        v106 = (char *)v102[508];
        v107 = (v104 - v106) >> 3;
        if ((unint64_t)(v107 + 1) >> 61)
          goto LABEL_712;
        v108 = v105 - (_QWORD)v106;
        v109 = (uint64_t)(v105 - (_QWORD)v106) >> 2;
        if (v109 <= v107 + 1)
          v109 = v107 + 1;
        if (v108 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
        {
          v111 = (char *)sub_40FC((uint64_t)(v102 + 510), v110);
          v104 = (char *)v102[509];
          v106 = (char *)v102[508];
        }
        else
        {
          v111 = 0;
        }
        v119 = &v111[8 * v107];
        v120 = &v111[8 * v110];
        *(_QWORD *)v119 = v103;
        v113 = v119 + 8;
        while (v104 != v106)
        {
          v121 = *((_QWORD *)v104 - 1);
          v104 -= 8;
          *((_QWORD *)v119 - 1) = v121;
          v119 -= 8;
        }
LABEL_163:
        v102[508] = v119;
        v102[509] = v113;
        v102[510] = v120;
        if (v106)
          operator delete(v106);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v104 = v103;
    v113 = v104 + 8;
LABEL_165:
    v102[509] = v113;
LABEL_166:
    v123 = 1 << *(_DWORD *)(v3 + 48);
    if (v123 == 2)
    {
      v124 = *(_QWORD **)a1[1];
      v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v126 = (char *)v124[512];
      v134 = v124[513];
      if ((unint64_t)v126 >= v134)
      {
        v128 = (char *)v124[511];
        v136 = (v126 - v128) >> 3;
        if ((unint64_t)(v136 + 1) >> 61)
          goto LABEL_712;
        v137 = v134 - (_QWORD)v128;
        v138 = (uint64_t)(v134 - (_QWORD)v128) >> 2;
        if (v138 <= v136 + 1)
          v138 = v136 + 1;
        if (v137 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v138;
        if (v139)
        {
          v140 = (char *)sub_40FC((uint64_t)(v124 + 513), v139);
          v126 = (char *)v124[512];
          v128 = (char *)v124[511];
        }
        else
        {
          v140 = 0;
        }
        v141 = &v140[8 * v136];
        v142 = &v140[8 * v139];
        *(_QWORD *)v141 = v125;
        v135 = v141 + 8;
        while (v126 != v128)
        {
          v144 = *((_QWORD *)v126 - 1);
          v126 -= 8;
          *((_QWORD *)v141 - 1) = v144;
          v141 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v123 != 1)
        goto LABEL_198;
      v124 = *(_QWORD **)a1[1];
      v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v126 = (char *)v124[512];
      v127 = v124[513];
      if ((unint64_t)v126 >= v127)
      {
        v128 = (char *)v124[511];
        v129 = (v126 - v128) >> 3;
        if ((unint64_t)(v129 + 1) >> 61)
          goto LABEL_712;
        v130 = v127 - (_QWORD)v128;
        v131 = (uint64_t)(v127 - (_QWORD)v128) >> 2;
        if (v131 <= v129 + 1)
          v131 = v129 + 1;
        if (v130 >= 0x7FFFFFFFFFFFFFF8)
          v132 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v132 = v131;
        if (v132)
        {
          v133 = (char *)sub_40FC((uint64_t)(v124 + 513), v132);
          v126 = (char *)v124[512];
          v128 = (char *)v124[511];
        }
        else
        {
          v133 = 0;
        }
        v141 = &v133[8 * v129];
        v142 = &v133[8 * v132];
        *(_QWORD *)v141 = v125;
        v135 = v141 + 8;
        while (v126 != v128)
        {
          v143 = *((_QWORD *)v126 - 1);
          v126 -= 8;
          *((_QWORD *)v141 - 1) = v143;
          v141 -= 8;
        }
LABEL_195:
        v124[511] = v141;
        v124[512] = v135;
        v124[513] = v142;
        if (v128)
          operator delete(v128);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v126 = v125;
    v135 = v126 + 8;
LABEL_197:
    v124[512] = v135;
LABEL_198:
    v145 = 1 << *(_DWORD *)(v3 + 48);
    if (v145 == 2)
    {
      v146 = *(_QWORD **)a1[1];
      v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v148 = (uint64_t *)v146[515];
      v156 = v146[516];
      if ((unint64_t)v148 >= v156)
      {
        v150 = (uint64_t *)v146[514];
        v158 = v148 - v150;
        if ((unint64_t)(v158 + 1) >> 61)
          goto LABEL_712;
        v159 = v156 - (_QWORD)v150;
        v160 = (uint64_t)(v156 - (_QWORD)v150) >> 2;
        if (v160 <= v158 + 1)
          v160 = v158 + 1;
        if (v159 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v160;
        if (v161)
        {
          v162 = (char *)sub_40FC((uint64_t)(v146 + 516), v161);
          v148 = (uint64_t *)v146[515];
          v150 = (uint64_t *)v146[514];
        }
        else
        {
          v162 = 0;
        }
        v163 = (uint64_t *)&v162[8 * v158];
        v164 = &v162[8 * v161];
        *v163 = v147;
        v157 = v163 + 1;
        while (v148 != v150)
        {
          v166 = *--v148;
          *--v163 = v166;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v145 != 1)
        goto LABEL_230;
      v146 = *(_QWORD **)a1[1];
      v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v148 = (uint64_t *)v146[515];
      v149 = v146[516];
      if ((unint64_t)v148 >= v149)
      {
        v150 = (uint64_t *)v146[514];
        v151 = v148 - v150;
        if ((unint64_t)(v151 + 1) >> 61)
          goto LABEL_712;
        v152 = v149 - (_QWORD)v150;
        v153 = (uint64_t)(v149 - (_QWORD)v150) >> 2;
        if (v153 <= v151 + 1)
          v153 = v151 + 1;
        if (v152 >= 0x7FFFFFFFFFFFFFF8)
          v154 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v154 = v153;
        if (v154)
        {
          v155 = (char *)sub_40FC((uint64_t)(v146 + 516), v154);
          v148 = (uint64_t *)v146[515];
          v150 = (uint64_t *)v146[514];
        }
        else
        {
          v155 = 0;
        }
        v163 = (uint64_t *)&v155[8 * v151];
        v164 = &v155[8 * v154];
        *v163 = v147;
        v157 = v163 + 1;
        while (v148 != v150)
        {
          v165 = *--v148;
          *--v163 = v165;
        }
LABEL_227:
        v146[514] = v163;
        v146[515] = v157;
        v146[516] = v164;
        if (v150)
          operator delete(v150);
        goto LABEL_229;
      }
    }
    *v148 = v147;
    v157 = v148 + 1;
LABEL_229:
    v146[515] = v157;
LABEL_230:
    v167 = 1 << *(_DWORD *)(v3 + 48);
    if (v167 == 2)
    {
      v168 = *(_QWORD **)a1[1];
      v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      v170 = (char *)v168[518];
      v178 = v168[519];
      if ((unint64_t)v170 >= v178)
      {
        v172 = (char *)v168[517];
        v180 = (v170 - v172) >> 3;
        if ((unint64_t)(v180 + 1) >> 61)
          goto LABEL_712;
        v181 = v178 - (_QWORD)v172;
        v182 = (uint64_t)(v178 - (_QWORD)v172) >> 2;
        if (v182 <= v180 + 1)
          v182 = v180 + 1;
        if (v181 >= 0x7FFFFFFFFFFFFFF8)
          v183 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v183 = v182;
        if (v183)
        {
          v184 = (char *)sub_40FC((uint64_t)(v168 + 519), v183);
          v170 = (char *)v168[518];
          v172 = (char *)v168[517];
        }
        else
        {
          v184 = 0;
        }
        v185 = &v184[8 * v180];
        v186 = &v184[8 * v183];
        *(_QWORD *)v185 = v169;
        v179 = v185 + 8;
        while (v170 != v172)
        {
          v188 = *((_QWORD *)v170 - 1);
          v170 -= 8;
          *((_QWORD *)v185 - 1) = v188;
          v185 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v167 != 1)
        goto LABEL_262;
      v168 = *(_QWORD **)a1[1];
      v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      v170 = (char *)v168[518];
      v171 = v168[519];
      if ((unint64_t)v170 >= v171)
      {
        v172 = (char *)v168[517];
        v173 = (v170 - v172) >> 3;
        if ((unint64_t)(v173 + 1) >> 61)
          goto LABEL_712;
        v174 = v171 - (_QWORD)v172;
        v175 = (uint64_t)(v171 - (_QWORD)v172) >> 2;
        if (v175 <= v173 + 1)
          v175 = v173 + 1;
        if (v174 >= 0x7FFFFFFFFFFFFFF8)
          v176 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v176 = v175;
        if (v176)
        {
          v177 = (char *)sub_40FC((uint64_t)(v168 + 519), v176);
          v170 = (char *)v168[518];
          v172 = (char *)v168[517];
        }
        else
        {
          v177 = 0;
        }
        v185 = &v177[8 * v173];
        v186 = &v177[8 * v176];
        *(_QWORD *)v185 = v169;
        v179 = v185 + 8;
        while (v170 != v172)
        {
          v187 = *((_QWORD *)v170 - 1);
          v170 -= 8;
          *((_QWORD *)v185 - 1) = v187;
          v185 -= 8;
        }
LABEL_259:
        v168[517] = v185;
        v168[518] = v179;
        v168[519] = v186;
        if (v172)
          operator delete(v172);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v170 = v169;
    v179 = v170 + 8;
LABEL_261:
    v168[518] = v179;
LABEL_262:
    v189 = 1 << *(_DWORD *)(v3 + 48);
    if (v189 == 2)
    {
      v190 = *(_QWORD **)a1[1];
      v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      v192 = (char *)v190[521];
      v200 = v190[522];
      if ((unint64_t)v192 >= v200)
      {
        v194 = (char *)v190[520];
        v202 = (v192 - v194) >> 3;
        if ((unint64_t)(v202 + 1) >> 61)
          goto LABEL_712;
        v203 = v200 - (_QWORD)v194;
        v204 = (uint64_t)(v200 - (_QWORD)v194) >> 2;
        if (v204 <= v202 + 1)
          v204 = v202 + 1;
        if (v203 >= 0x7FFFFFFFFFFFFFF8)
          v205 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v205 = v204;
        if (v205)
        {
          v206 = (char *)sub_40FC((uint64_t)(v190 + 522), v205);
          v192 = (char *)v190[521];
          v194 = (char *)v190[520];
        }
        else
        {
          v206 = 0;
        }
        v207 = &v206[8 * v202];
        v208 = &v206[8 * v205];
        *(_QWORD *)v207 = v191;
        v201 = v207 + 8;
        while (v192 != v194)
        {
          v210 = *((_QWORD *)v192 - 1);
          v192 -= 8;
          *((_QWORD *)v207 - 1) = v210;
          v207 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v189 != 1)
        goto LABEL_294;
      v190 = *(_QWORD **)a1[1];
      v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      v192 = (char *)v190[521];
      v193 = v190[522];
      if ((unint64_t)v192 >= v193)
      {
        v194 = (char *)v190[520];
        v195 = (v192 - v194) >> 3;
        if ((unint64_t)(v195 + 1) >> 61)
          goto LABEL_712;
        v196 = v193 - (_QWORD)v194;
        v197 = (uint64_t)(v193 - (_QWORD)v194) >> 2;
        if (v197 <= v195 + 1)
          v197 = v195 + 1;
        if (v196 >= 0x7FFFFFFFFFFFFFF8)
          v198 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v198 = v197;
        if (v198)
        {
          v199 = (char *)sub_40FC((uint64_t)(v190 + 522), v198);
          v192 = (char *)v190[521];
          v194 = (char *)v190[520];
        }
        else
        {
          v199 = 0;
        }
        v207 = &v199[8 * v195];
        v208 = &v199[8 * v198];
        *(_QWORD *)v207 = v191;
        v201 = v207 + 8;
        while (v192 != v194)
        {
          v209 = *((_QWORD *)v192 - 1);
          v192 -= 8;
          *((_QWORD *)v207 - 1) = v209;
          v207 -= 8;
        }
LABEL_291:
        v190[520] = v207;
        v190[521] = v201;
        v190[522] = v208;
        if (v194)
          operator delete(v194);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v192 = v191;
    v201 = v192 + 8;
LABEL_293:
    v190[521] = v201;
LABEL_294:
    v211 = 1 << *(_DWORD *)(v3 + 48);
    if (v211 == 2)
    {
      v212 = *(_QWORD **)a1[1];
      v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      v214 = (char *)v212[524];
      v222 = v212[525];
      if ((unint64_t)v214 >= v222)
      {
        v216 = (char *)v212[523];
        v224 = (v214 - v216) >> 3;
        if ((unint64_t)(v224 + 1) >> 61)
          goto LABEL_712;
        v225 = v222 - (_QWORD)v216;
        v226 = (uint64_t)(v222 - (_QWORD)v216) >> 2;
        if (v226 <= v224 + 1)
          v226 = v224 + 1;
        if (v225 >= 0x7FFFFFFFFFFFFFF8)
          v227 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v227 = v226;
        if (v227)
        {
          v228 = (char *)sub_40FC((uint64_t)(v212 + 525), v227);
          v214 = (char *)v212[524];
          v216 = (char *)v212[523];
        }
        else
        {
          v228 = 0;
        }
        v229 = &v228[8 * v224];
        v230 = &v228[8 * v227];
        *(_QWORD *)v229 = v213;
        v223 = v229 + 8;
        while (v214 != v216)
        {
          v232 = *((_QWORD *)v214 - 1);
          v214 -= 8;
          *((_QWORD *)v229 - 1) = v232;
          v229 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v211 != 1)
        goto LABEL_326;
      v212 = *(_QWORD **)a1[1];
      v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      v214 = (char *)v212[524];
      v215 = v212[525];
      if ((unint64_t)v214 >= v215)
      {
        v216 = (char *)v212[523];
        v217 = (v214 - v216) >> 3;
        if ((unint64_t)(v217 + 1) >> 61)
          goto LABEL_712;
        v218 = v215 - (_QWORD)v216;
        v219 = (uint64_t)(v215 - (_QWORD)v216) >> 2;
        if (v219 <= v217 + 1)
          v219 = v217 + 1;
        if (v218 >= 0x7FFFFFFFFFFFFFF8)
          v220 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v220 = v219;
        if (v220)
        {
          v221 = (char *)sub_40FC((uint64_t)(v212 + 525), v220);
          v214 = (char *)v212[524];
          v216 = (char *)v212[523];
        }
        else
        {
          v221 = 0;
        }
        v229 = &v221[8 * v217];
        v230 = &v221[8 * v220];
        *(_QWORD *)v229 = v213;
        v223 = v229 + 8;
        while (v214 != v216)
        {
          v231 = *((_QWORD *)v214 - 1);
          v214 -= 8;
          *((_QWORD *)v229 - 1) = v231;
          v229 -= 8;
        }
LABEL_323:
        v212[523] = v229;
        v212[524] = v223;
        v212[525] = v230;
        if (v216)
          operator delete(v216);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v214 = v213;
    v223 = v214 + 8;
LABEL_325:
    v212[524] = v223;
LABEL_326:
    v233 = 1 << *(_DWORD *)(v3 + 48);
    if (v233 == 2)
    {
      v234 = *(_QWORD **)a1[1];
      v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      v236 = (char *)v234[527];
      v244 = v234[528];
      if ((unint64_t)v236 >= v244)
      {
        v238 = (char *)v234[526];
        v246 = (v236 - v238) >> 3;
        if ((unint64_t)(v246 + 1) >> 61)
          goto LABEL_712;
        v247 = v244 - (_QWORD)v238;
        v248 = (uint64_t)(v244 - (_QWORD)v238) >> 2;
        if (v248 <= v246 + 1)
          v248 = v246 + 1;
        if (v247 >= 0x7FFFFFFFFFFFFFF8)
          v249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v249 = v248;
        if (v249)
        {
          v250 = (char *)sub_40FC((uint64_t)(v234 + 528), v249);
          v236 = (char *)v234[527];
          v238 = (char *)v234[526];
        }
        else
        {
          v250 = 0;
        }
        v251 = &v250[8 * v246];
        v252 = &v250[8 * v249];
        *(_QWORD *)v251 = v235;
        v245 = v251 + 8;
        while (v236 != v238)
        {
          v254 = *((_QWORD *)v236 - 1);
          v236 -= 8;
          *((_QWORD *)v251 - 1) = v254;
          v251 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v233 != 1)
        goto LABEL_358;
      v234 = *(_QWORD **)a1[1];
      v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      v236 = (char *)v234[527];
      v237 = v234[528];
      if ((unint64_t)v236 >= v237)
      {
        v238 = (char *)v234[526];
        v239 = (v236 - v238) >> 3;
        if ((unint64_t)(v239 + 1) >> 61)
          goto LABEL_712;
        v240 = v237 - (_QWORD)v238;
        v241 = (uint64_t)(v237 - (_QWORD)v238) >> 2;
        if (v241 <= v239 + 1)
          v241 = v239 + 1;
        if (v240 >= 0x7FFFFFFFFFFFFFF8)
          v242 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v242 = v241;
        if (v242)
        {
          v243 = (char *)sub_40FC((uint64_t)(v234 + 528), v242);
          v236 = (char *)v234[527];
          v238 = (char *)v234[526];
        }
        else
        {
          v243 = 0;
        }
        v251 = &v243[8 * v239];
        v252 = &v243[8 * v242];
        *(_QWORD *)v251 = v235;
        v245 = v251 + 8;
        while (v236 != v238)
        {
          v253 = *((_QWORD *)v236 - 1);
          v236 -= 8;
          *((_QWORD *)v251 - 1) = v253;
          v251 -= 8;
        }
LABEL_355:
        v234[526] = v251;
        v234[527] = v245;
        v234[528] = v252;
        if (v238)
          operator delete(v238);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v236 = v235;
    v245 = v236 + 8;
LABEL_357:
    v234[527] = v245;
LABEL_358:
    v255 = 1 << *(_DWORD *)(v3 + 48);
    if (v255 == 2)
    {
      v256 = *(_QWORD **)a1[1];
      v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      v258 = (char *)v256[530];
      v266 = v256[531];
      if ((unint64_t)v258 >= v266)
      {
        v260 = (char *)v256[529];
        v268 = (v258 - v260) >> 3;
        if ((unint64_t)(v268 + 1) >> 61)
          goto LABEL_712;
        v269 = v266 - (_QWORD)v260;
        v270 = (uint64_t)(v266 - (_QWORD)v260) >> 2;
        if (v270 <= v268 + 1)
          v270 = v268 + 1;
        if (v269 >= 0x7FFFFFFFFFFFFFF8)
          v271 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v271 = v270;
        if (v271)
        {
          v272 = (char *)sub_40FC((uint64_t)(v256 + 531), v271);
          v258 = (char *)v256[530];
          v260 = (char *)v256[529];
        }
        else
        {
          v272 = 0;
        }
        v273 = &v272[8 * v268];
        v274 = &v272[8 * v271];
        *(_QWORD *)v273 = v257;
        v267 = v273 + 8;
        while (v258 != v260)
        {
          v276 = *((_QWORD *)v258 - 1);
          v258 -= 8;
          *((_QWORD *)v273 - 1) = v276;
          v273 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v255 != 1)
        goto LABEL_390;
      v256 = *(_QWORD **)a1[1];
      v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      v258 = (char *)v256[530];
      v259 = v256[531];
      if ((unint64_t)v258 >= v259)
      {
        v260 = (char *)v256[529];
        v261 = (v258 - v260) >> 3;
        if ((unint64_t)(v261 + 1) >> 61)
          goto LABEL_712;
        v262 = v259 - (_QWORD)v260;
        v263 = (uint64_t)(v259 - (_QWORD)v260) >> 2;
        if (v263 <= v261 + 1)
          v263 = v261 + 1;
        if (v262 >= 0x7FFFFFFFFFFFFFF8)
          v264 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v264 = v263;
        if (v264)
        {
          v265 = (char *)sub_40FC((uint64_t)(v256 + 531), v264);
          v258 = (char *)v256[530];
          v260 = (char *)v256[529];
        }
        else
        {
          v265 = 0;
        }
        v273 = &v265[8 * v261];
        v274 = &v265[8 * v264];
        *(_QWORD *)v273 = v257;
        v267 = v273 + 8;
        while (v258 != v260)
        {
          v275 = *((_QWORD *)v258 - 1);
          v258 -= 8;
          *((_QWORD *)v273 - 1) = v275;
          v273 -= 8;
        }
LABEL_387:
        v256[529] = v273;
        v256[530] = v267;
        v256[531] = v274;
        if (v260)
          operator delete(v260);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v258 = v257;
    v267 = v258 + 8;
LABEL_389:
    v256[530] = v267;
LABEL_390:
    v277 = 1 << *(_DWORD *)(v3 + 48);
    if (v277 == 2)
    {
      v278 = *(_QWORD **)a1[1];
      v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      v280 = (char *)v278[533];
      v288 = v278[534];
      if ((unint64_t)v280 >= v288)
      {
        v282 = (char *)v278[532];
        v290 = (v280 - v282) >> 3;
        if ((unint64_t)(v290 + 1) >> 61)
          goto LABEL_712;
        v291 = v288 - (_QWORD)v282;
        v292 = (uint64_t)(v288 - (_QWORD)v282) >> 2;
        if (v292 <= v290 + 1)
          v292 = v290 + 1;
        if (v291 >= 0x7FFFFFFFFFFFFFF8)
          v293 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v293 = v292;
        if (v293)
        {
          v294 = (char *)sub_40FC((uint64_t)(v278 + 534), v293);
          v280 = (char *)v278[533];
          v282 = (char *)v278[532];
        }
        else
        {
          v294 = 0;
        }
        v295 = &v294[8 * v290];
        v296 = &v294[8 * v293];
        *(_QWORD *)v295 = v279;
        v289 = v295 + 8;
        while (v280 != v282)
        {
          v298 = *((_QWORD *)v280 - 1);
          v280 -= 8;
          *((_QWORD *)v295 - 1) = v298;
          v295 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v277 != 1)
        goto LABEL_422;
      v278 = *(_QWORD **)a1[1];
      v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      v280 = (char *)v278[533];
      v281 = v278[534];
      if ((unint64_t)v280 >= v281)
      {
        v282 = (char *)v278[532];
        v283 = (v280 - v282) >> 3;
        if ((unint64_t)(v283 + 1) >> 61)
          goto LABEL_712;
        v284 = v281 - (_QWORD)v282;
        v285 = (uint64_t)(v281 - (_QWORD)v282) >> 2;
        if (v285 <= v283 + 1)
          v285 = v283 + 1;
        if (v284 >= 0x7FFFFFFFFFFFFFF8)
          v286 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v286 = v285;
        if (v286)
        {
          v287 = (char *)sub_40FC((uint64_t)(v278 + 534), v286);
          v280 = (char *)v278[533];
          v282 = (char *)v278[532];
        }
        else
        {
          v287 = 0;
        }
        v295 = &v287[8 * v283];
        v296 = &v287[8 * v286];
        *(_QWORD *)v295 = v279;
        v289 = v295 + 8;
        while (v280 != v282)
        {
          v297 = *((_QWORD *)v280 - 1);
          v280 -= 8;
          *((_QWORD *)v295 - 1) = v297;
          v295 -= 8;
        }
LABEL_419:
        v278[532] = v295;
        v278[533] = v289;
        v278[534] = v296;
        if (v282)
          operator delete(v282);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v280 = v279;
    v289 = v280 + 8;
LABEL_421:
    v278[533] = v289;
LABEL_422:
    v299 = 1 << *(_DWORD *)(v3 + 48);
    if (v299 == 2)
    {
      v300 = *(_QWORD **)a1[1];
      v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v302 = (uint64_t *)v300[536];
      v310 = v300[537];
      if ((unint64_t)v302 >= v310)
      {
        v304 = (uint64_t *)v300[535];
        v312 = v302 - v304;
        if ((unint64_t)(v312 + 1) >> 61)
          goto LABEL_712;
        v313 = v310 - (_QWORD)v304;
        v314 = (uint64_t)(v310 - (_QWORD)v304) >> 2;
        if (v314 <= v312 + 1)
          v314 = v312 + 1;
        if (v313 >= 0x7FFFFFFFFFFFFFF8)
          v315 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v315 = v314;
        if (v315)
        {
          v316 = (char *)sub_40FC((uint64_t)(v300 + 537), v315);
          v302 = (uint64_t *)v300[536];
          v304 = (uint64_t *)v300[535];
        }
        else
        {
          v316 = 0;
        }
        v317 = (uint64_t *)&v316[8 * v312];
        v318 = &v316[8 * v315];
        *v317 = v301;
        v311 = v317 + 1;
        while (v302 != v304)
        {
          v320 = *--v302;
          *--v317 = v320;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v299 != 1)
        goto LABEL_454;
      v300 = *(_QWORD **)a1[1];
      v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v302 = (uint64_t *)v300[536];
      v303 = v300[537];
      if ((unint64_t)v302 >= v303)
      {
        v304 = (uint64_t *)v300[535];
        v305 = v302 - v304;
        if ((unint64_t)(v305 + 1) >> 61)
          goto LABEL_712;
        v306 = v303 - (_QWORD)v304;
        v307 = (uint64_t)(v303 - (_QWORD)v304) >> 2;
        if (v307 <= v305 + 1)
          v307 = v305 + 1;
        if (v306 >= 0x7FFFFFFFFFFFFFF8)
          v308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v308 = v307;
        if (v308)
        {
          v309 = (char *)sub_40FC((uint64_t)(v300 + 537), v308);
          v302 = (uint64_t *)v300[536];
          v304 = (uint64_t *)v300[535];
        }
        else
        {
          v309 = 0;
        }
        v317 = (uint64_t *)&v309[8 * v305];
        v318 = &v309[8 * v308];
        *v317 = v301;
        v311 = v317 + 1;
        while (v302 != v304)
        {
          v319 = *--v302;
          *--v317 = v319;
        }
LABEL_451:
        v300[535] = v317;
        v300[536] = v311;
        v300[537] = v318;
        if (v304)
          operator delete(v304);
        goto LABEL_453;
      }
    }
    *v302 = v301;
    v311 = v302 + 1;
LABEL_453:
    v300[536] = v311;
LABEL_454:
    v321 = 1 << *(_DWORD *)(v3 + 48);
    if (v321 == 2)
    {
      v322 = *(_QWORD **)a1[1];
      v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      v324 = (char *)v322[539];
      v332 = v322[540];
      if ((unint64_t)v324 >= v332)
      {
        v326 = (char *)v322[538];
        v334 = (v324 - v326) >> 3;
        if ((unint64_t)(v334 + 1) >> 61)
          goto LABEL_712;
        v335 = v332 - (_QWORD)v326;
        v336 = (uint64_t)(v332 - (_QWORD)v326) >> 2;
        if (v336 <= v334 + 1)
          v336 = v334 + 1;
        if (v335 >= 0x7FFFFFFFFFFFFFF8)
          v337 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v337 = v336;
        if (v337)
        {
          v338 = (char *)sub_40FC((uint64_t)(v322 + 540), v337);
          v324 = (char *)v322[539];
          v326 = (char *)v322[538];
        }
        else
        {
          v338 = 0;
        }
        v339 = &v338[8 * v334];
        v340 = &v338[8 * v337];
        *(_QWORD *)v339 = v323;
        v333 = v339 + 8;
        while (v324 != v326)
        {
          v342 = *((_QWORD *)v324 - 1);
          v324 -= 8;
          *((_QWORD *)v339 - 1) = v342;
          v339 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v321 != 1)
        goto LABEL_486;
      v322 = *(_QWORD **)a1[1];
      v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      v324 = (char *)v322[539];
      v325 = v322[540];
      if ((unint64_t)v324 >= v325)
      {
        v326 = (char *)v322[538];
        v327 = (v324 - v326) >> 3;
        if ((unint64_t)(v327 + 1) >> 61)
          goto LABEL_712;
        v328 = v325 - (_QWORD)v326;
        v329 = (uint64_t)(v325 - (_QWORD)v326) >> 2;
        if (v329 <= v327 + 1)
          v329 = v327 + 1;
        if (v328 >= 0x7FFFFFFFFFFFFFF8)
          v330 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v330 = v329;
        if (v330)
        {
          v331 = (char *)sub_40FC((uint64_t)(v322 + 540), v330);
          v324 = (char *)v322[539];
          v326 = (char *)v322[538];
        }
        else
        {
          v331 = 0;
        }
        v339 = &v331[8 * v327];
        v340 = &v331[8 * v330];
        *(_QWORD *)v339 = v323;
        v333 = v339 + 8;
        while (v324 != v326)
        {
          v341 = *((_QWORD *)v324 - 1);
          v324 -= 8;
          *((_QWORD *)v339 - 1) = v341;
          v339 -= 8;
        }
LABEL_483:
        v322[538] = v339;
        v322[539] = v333;
        v322[540] = v340;
        if (v326)
          operator delete(v326);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v324 = v323;
    v333 = v324 + 8;
LABEL_485:
    v322[539] = v333;
LABEL_486:
    v343 = 1 << *(_DWORD *)(v3 + 48);
    if (v343 == 2)
    {
      v344 = *(_QWORD **)a1[1];
      v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      v346 = (char *)v344[542];
      v354 = v344[543];
      if ((unint64_t)v346 >= v354)
      {
        v348 = (char *)v344[541];
        v356 = (v346 - v348) >> 3;
        if ((unint64_t)(v356 + 1) >> 61)
          goto LABEL_712;
        v357 = v354 - (_QWORD)v348;
        v358 = (uint64_t)(v354 - (_QWORD)v348) >> 2;
        if (v358 <= v356 + 1)
          v358 = v356 + 1;
        if (v357 >= 0x7FFFFFFFFFFFFFF8)
          v359 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v359 = v358;
        if (v359)
        {
          v360 = (char *)sub_40FC((uint64_t)(v344 + 543), v359);
          v346 = (char *)v344[542];
          v348 = (char *)v344[541];
        }
        else
        {
          v360 = 0;
        }
        v361 = &v360[8 * v356];
        v362 = &v360[8 * v359];
        *(_QWORD *)v361 = v345;
        v355 = v361 + 8;
        while (v346 != v348)
        {
          v364 = *((_QWORD *)v346 - 1);
          v346 -= 8;
          *((_QWORD *)v361 - 1) = v364;
          v361 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v343 != 1)
        goto LABEL_518;
      v344 = *(_QWORD **)a1[1];
      v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      v346 = (char *)v344[542];
      v347 = v344[543];
      if ((unint64_t)v346 >= v347)
      {
        v348 = (char *)v344[541];
        v349 = (v346 - v348) >> 3;
        if ((unint64_t)(v349 + 1) >> 61)
          goto LABEL_712;
        v350 = v347 - (_QWORD)v348;
        v351 = (uint64_t)(v347 - (_QWORD)v348) >> 2;
        if (v351 <= v349 + 1)
          v351 = v349 + 1;
        if (v350 >= 0x7FFFFFFFFFFFFFF8)
          v352 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v352 = v351;
        if (v352)
        {
          v353 = (char *)sub_40FC((uint64_t)(v344 + 543), v352);
          v346 = (char *)v344[542];
          v348 = (char *)v344[541];
        }
        else
        {
          v353 = 0;
        }
        v361 = &v353[8 * v349];
        v362 = &v353[8 * v352];
        *(_QWORD *)v361 = v345;
        v355 = v361 + 8;
        while (v346 != v348)
        {
          v363 = *((_QWORD *)v346 - 1);
          v346 -= 8;
          *((_QWORD *)v361 - 1) = v363;
          v361 -= 8;
        }
LABEL_515:
        v344[541] = v361;
        v344[542] = v355;
        v344[543] = v362;
        if (v348)
          operator delete(v348);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v346 = v345;
    v355 = v346 + 8;
LABEL_517:
    v344[542] = v355;
LABEL_518:
    v365 = 1 << *(_DWORD *)(v3 + 48);
    if (v365 == 2)
    {
      v366 = *(_QWORD **)a1[1];
      v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v368 = (char *)v366[545];
      v376 = v366[546];
      if ((unint64_t)v368 >= v376)
      {
        v370 = (char *)v366[544];
        v378 = (v368 - v370) >> 3;
        if ((unint64_t)(v378 + 1) >> 61)
          goto LABEL_712;
        v379 = v376 - (_QWORD)v370;
        v380 = (uint64_t)(v376 - (_QWORD)v370) >> 2;
        if (v380 <= v378 + 1)
          v380 = v378 + 1;
        if (v379 >= 0x7FFFFFFFFFFFFFF8)
          v381 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v381 = v380;
        if (v381)
        {
          v382 = (char *)sub_40FC((uint64_t)(v366 + 546), v381);
          v368 = (char *)v366[545];
          v370 = (char *)v366[544];
        }
        else
        {
          v382 = 0;
        }
        v383 = &v382[8 * v378];
        v384 = &v382[8 * v381];
        *(_QWORD *)v383 = v367;
        v377 = v383 + 8;
        while (v368 != v370)
        {
          v386 = *((_QWORD *)v368 - 1);
          v368 -= 8;
          *((_QWORD *)v383 - 1) = v386;
          v383 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v365 != 1)
        goto LABEL_550;
      v366 = *(_QWORD **)a1[1];
      v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v368 = (char *)v366[545];
      v369 = v366[546];
      if ((unint64_t)v368 >= v369)
      {
        v370 = (char *)v366[544];
        v371 = (v368 - v370) >> 3;
        if ((unint64_t)(v371 + 1) >> 61)
          goto LABEL_712;
        v372 = v369 - (_QWORD)v370;
        v373 = (uint64_t)(v369 - (_QWORD)v370) >> 2;
        if (v373 <= v371 + 1)
          v373 = v371 + 1;
        if (v372 >= 0x7FFFFFFFFFFFFFF8)
          v374 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v374 = v373;
        if (v374)
        {
          v375 = (char *)sub_40FC((uint64_t)(v366 + 546), v374);
          v368 = (char *)v366[545];
          v370 = (char *)v366[544];
        }
        else
        {
          v375 = 0;
        }
        v383 = &v375[8 * v371];
        v384 = &v375[8 * v374];
        *(_QWORD *)v383 = v367;
        v377 = v383 + 8;
        while (v368 != v370)
        {
          v385 = *((_QWORD *)v368 - 1);
          v368 -= 8;
          *((_QWORD *)v383 - 1) = v385;
          v383 -= 8;
        }
LABEL_547:
        v366[544] = v383;
        v366[545] = v377;
        v366[546] = v384;
        if (v370)
          operator delete(v370);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v368 = v367;
    v377 = v368 + 8;
LABEL_549:
    v366[545] = v377;
LABEL_550:
    v387 = 1 << *(_DWORD *)(v3 + 48);
    if (v387 == 2)
    {
      v388 = *(_QWORD **)a1[1];
      v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      v390 = (char *)v388[548];
      v398 = v388[549];
      if ((unint64_t)v390 >= v398)
      {
        v392 = (char *)v388[547];
        v400 = (v390 - v392) >> 3;
        if ((unint64_t)(v400 + 1) >> 61)
          goto LABEL_712;
        v401 = v398 - (_QWORD)v392;
        v402 = (uint64_t)(v398 - (_QWORD)v392) >> 2;
        if (v402 <= v400 + 1)
          v402 = v400 + 1;
        if (v401 >= 0x7FFFFFFFFFFFFFF8)
          v403 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v403 = v402;
        if (v403)
        {
          v404 = (char *)sub_40FC((uint64_t)(v388 + 549), v403);
          v390 = (char *)v388[548];
          v392 = (char *)v388[547];
        }
        else
        {
          v404 = 0;
        }
        v405 = &v404[8 * v400];
        v406 = &v404[8 * v403];
        *(_QWORD *)v405 = v389;
        v399 = v405 + 8;
        while (v390 != v392)
        {
          v408 = *((_QWORD *)v390 - 1);
          v390 -= 8;
          *((_QWORD *)v405 - 1) = v408;
          v405 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v387 != 1)
        goto LABEL_582;
      v388 = *(_QWORD **)a1[1];
      v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      v390 = (char *)v388[548];
      v391 = v388[549];
      if ((unint64_t)v390 >= v391)
      {
        v392 = (char *)v388[547];
        v393 = (v390 - v392) >> 3;
        if ((unint64_t)(v393 + 1) >> 61)
          goto LABEL_712;
        v394 = v391 - (_QWORD)v392;
        v395 = (uint64_t)(v391 - (_QWORD)v392) >> 2;
        if (v395 <= v393 + 1)
          v395 = v393 + 1;
        if (v394 >= 0x7FFFFFFFFFFFFFF8)
          v396 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v396 = v395;
        if (v396)
        {
          v397 = (char *)sub_40FC((uint64_t)(v388 + 549), v396);
          v390 = (char *)v388[548];
          v392 = (char *)v388[547];
        }
        else
        {
          v397 = 0;
        }
        v405 = &v397[8 * v393];
        v406 = &v397[8 * v396];
        *(_QWORD *)v405 = v389;
        v399 = v405 + 8;
        while (v390 != v392)
        {
          v407 = *((_QWORD *)v390 - 1);
          v390 -= 8;
          *((_QWORD *)v405 - 1) = v407;
          v405 -= 8;
        }
LABEL_579:
        v388[547] = v405;
        v388[548] = v399;
        v388[549] = v406;
        if (v392)
          operator delete(v392);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v390 = v389;
    v399 = v390 + 8;
LABEL_581:
    v388[548] = v399;
LABEL_582:
    v409 = 1 << *(_DWORD *)(v3 + 48);
    if (v409 == 2)
    {
      v410 = *(_QWORD **)a1[1];
      v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      v412 = (char *)v410[551];
      v420 = v410[552];
      if ((unint64_t)v412 >= v420)
      {
        v414 = (char *)v410[550];
        v422 = (v412 - v414) >> 3;
        if ((unint64_t)(v422 + 1) >> 61)
          goto LABEL_712;
        v423 = v420 - (_QWORD)v414;
        v424 = (uint64_t)(v420 - (_QWORD)v414) >> 2;
        if (v424 <= v422 + 1)
          v424 = v422 + 1;
        if (v423 >= 0x7FFFFFFFFFFFFFF8)
          v425 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v425 = v424;
        if (v425)
        {
          v426 = (char *)sub_40FC((uint64_t)(v410 + 552), v425);
          v412 = (char *)v410[551];
          v414 = (char *)v410[550];
        }
        else
        {
          v426 = 0;
        }
        v427 = &v426[8 * v422];
        v428 = &v426[8 * v425];
        *(_QWORD *)v427 = v411;
        v421 = v427 + 8;
        while (v412 != v414)
        {
          v430 = *((_QWORD *)v412 - 1);
          v412 -= 8;
          *((_QWORD *)v427 - 1) = v430;
          v427 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v409 != 1)
        goto LABEL_614;
      v410 = *(_QWORD **)a1[1];
      v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      v412 = (char *)v410[551];
      v413 = v410[552];
      if ((unint64_t)v412 >= v413)
      {
        v414 = (char *)v410[550];
        v415 = (v412 - v414) >> 3;
        if ((unint64_t)(v415 + 1) >> 61)
          goto LABEL_712;
        v416 = v413 - (_QWORD)v414;
        v417 = (uint64_t)(v413 - (_QWORD)v414) >> 2;
        if (v417 <= v415 + 1)
          v417 = v415 + 1;
        if (v416 >= 0x7FFFFFFFFFFFFFF8)
          v418 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v418 = v417;
        if (v418)
        {
          v419 = (char *)sub_40FC((uint64_t)(v410 + 552), v418);
          v412 = (char *)v410[551];
          v414 = (char *)v410[550];
        }
        else
        {
          v419 = 0;
        }
        v427 = &v419[8 * v415];
        v428 = &v419[8 * v418];
        *(_QWORD *)v427 = v411;
        v421 = v427 + 8;
        while (v412 != v414)
        {
          v429 = *((_QWORD *)v412 - 1);
          v412 -= 8;
          *((_QWORD *)v427 - 1) = v429;
          v427 -= 8;
        }
LABEL_611:
        v410[550] = v427;
        v410[551] = v421;
        v410[552] = v428;
        if (v414)
          operator delete(v414);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v412 = v411;
    v421 = v412 + 8;
LABEL_613:
    v410[551] = v421;
LABEL_614:
    v431 = 1 << *(_DWORD *)(v3 + 48);
    if (v431 == 2)
    {
      v432 = *(_QWORD **)a1[1];
      v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      v434 = (char *)v432[554];
      v442 = v432[555];
      if ((unint64_t)v434 >= v442)
      {
        v436 = (char *)v432[553];
        v444 = (v434 - v436) >> 3;
        if ((unint64_t)(v444 + 1) >> 61)
          goto LABEL_712;
        v445 = v442 - (_QWORD)v436;
        v446 = (uint64_t)(v442 - (_QWORD)v436) >> 2;
        if (v446 <= v444 + 1)
          v446 = v444 + 1;
        if (v445 >= 0x7FFFFFFFFFFFFFF8)
          v447 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v447 = v446;
        if (v447)
        {
          v448 = (char *)sub_40FC((uint64_t)(v432 + 555), v447);
          v434 = (char *)v432[554];
          v436 = (char *)v432[553];
        }
        else
        {
          v448 = 0;
        }
        v449 = &v448[8 * v444];
        v450 = &v448[8 * v447];
        *(_QWORD *)v449 = v433;
        v443 = v449 + 8;
        while (v434 != v436)
        {
          v452 = *((_QWORD *)v434 - 1);
          v434 -= 8;
          *((_QWORD *)v449 - 1) = v452;
          v449 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v431 != 1)
        goto LABEL_646;
      v432 = *(_QWORD **)a1[1];
      v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      v434 = (char *)v432[554];
      v435 = v432[555];
      if ((unint64_t)v434 >= v435)
      {
        v436 = (char *)v432[553];
        v437 = (v434 - v436) >> 3;
        if ((unint64_t)(v437 + 1) >> 61)
          goto LABEL_712;
        v438 = v435 - (_QWORD)v436;
        v439 = (uint64_t)(v435 - (_QWORD)v436) >> 2;
        if (v439 <= v437 + 1)
          v439 = v437 + 1;
        if (v438 >= 0x7FFFFFFFFFFFFFF8)
          v440 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v440 = v439;
        if (v440)
        {
          v441 = (char *)sub_40FC((uint64_t)(v432 + 555), v440);
          v434 = (char *)v432[554];
          v436 = (char *)v432[553];
        }
        else
        {
          v441 = 0;
        }
        v449 = &v441[8 * v437];
        v450 = &v441[8 * v440];
        *(_QWORD *)v449 = v433;
        v443 = v449 + 8;
        while (v434 != v436)
        {
          v451 = *((_QWORD *)v434 - 1);
          v434 -= 8;
          *((_QWORD *)v449 - 1) = v451;
          v449 -= 8;
        }
LABEL_643:
        v432[553] = v449;
        v432[554] = v443;
        v432[555] = v450;
        if (v436)
          operator delete(v436);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v434 = v433;
    v443 = v434 + 8;
LABEL_645:
    v432[554] = v443;
LABEL_646:
    v453 = 1 << *(_DWORD *)(v3 + 48);
    if (v453 == 2)
    {
      v454 = *(_QWORD **)a1[1];
      v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      v456 = (char *)v454[557];
      v464 = v454[558];
      if ((unint64_t)v456 >= v464)
      {
        v458 = (char *)v454[556];
        v466 = (v456 - v458) >> 3;
        if ((unint64_t)(v466 + 1) >> 61)
          goto LABEL_712;
        v467 = v464 - (_QWORD)v458;
        v468 = (uint64_t)(v464 - (_QWORD)v458) >> 2;
        if (v468 <= v466 + 1)
          v468 = v466 + 1;
        if (v467 >= 0x7FFFFFFFFFFFFFF8)
          v469 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v469 = v468;
        if (v469)
        {
          v470 = (char *)sub_40FC((uint64_t)(v454 + 558), v469);
          v456 = (char *)v454[557];
          v458 = (char *)v454[556];
        }
        else
        {
          v470 = 0;
        }
        v471 = &v470[8 * v466];
        v472 = &v470[8 * v469];
        *(_QWORD *)v471 = v455;
        v465 = v471 + 8;
        while (v456 != v458)
        {
          v474 = *((_QWORD *)v456 - 1);
          v456 -= 8;
          *((_QWORD *)v471 - 1) = v474;
          v471 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v453 != 1)
        goto LABEL_678;
      v454 = *(_QWORD **)a1[1];
      v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      v456 = (char *)v454[557];
      v457 = v454[558];
      if ((unint64_t)v456 >= v457)
      {
        v458 = (char *)v454[556];
        v459 = (v456 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61)
          goto LABEL_712;
        v460 = v457 - (_QWORD)v458;
        v461 = (uint64_t)(v457 - (_QWORD)v458) >> 2;
        if (v461 <= v459 + 1)
          v461 = v459 + 1;
        if (v460 >= 0x7FFFFFFFFFFFFFF8)
          v462 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v462 = v461;
        if (v462)
        {
          v463 = (char *)sub_40FC((uint64_t)(v454 + 558), v462);
          v456 = (char *)v454[557];
          v458 = (char *)v454[556];
        }
        else
        {
          v463 = 0;
        }
        v471 = &v463[8 * v459];
        v472 = &v463[8 * v462];
        *(_QWORD *)v471 = v455;
        v465 = v471 + 8;
        while (v456 != v458)
        {
          v473 = *((_QWORD *)v456 - 1);
          v456 -= 8;
          *((_QWORD *)v471 - 1) = v473;
          v471 -= 8;
        }
LABEL_675:
        v454[556] = v471;
        v454[557] = v465;
        v454[558] = v472;
        if (v458)
          operator delete(v458);
        goto LABEL_677;
      }
    }
    *(_QWORD *)v456 = v455;
    v465 = v456 + 8;
LABEL_677:
    v454[557] = v465;
LABEL_678:
    v475 = 1 << *(_DWORD *)(v3 + 48);
    if (v475 == 2)
    {
      v487 = a1[2];
      v477 = *(_QWORD **)a1[1];
      v478 = (unint64_t)*(unsigned int *)(v487 + 28) >> 18;
      v479 = (unint64_t *)v477[560];
      v488 = v477[561];
      if ((unint64_t)v479 >= v488)
      {
        v481 = (unint64_t *)v477[559];
        v490 = v479 - v481;
        if (!((unint64_t)(v490 + 1) >> 61))
        {
          v491 = v488 - (_QWORD)v481;
          v492 = (uint64_t)(v488 - (_QWORD)v481) >> 2;
          if (v492 <= v490 + 1)
            v492 = v490 + 1;
          if (v491 >= 0x7FFFFFFFFFFFFFF8)
            v493 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v493 = v492;
          if (v493)
          {
            v494 = (char *)sub_40FC((uint64_t)(v477 + 561), v493);
            v479 = (unint64_t *)v477[560];
            v481 = (unint64_t *)v477[559];
          }
          else
          {
            v494 = 0;
          }
          v495 = (unint64_t *)&v494[8 * v490];
          v496 = &v494[8 * v493];
          *v495 = v478;
          v489 = v495 + 1;
          while (v479 != v481)
          {
            v498 = *--v479;
            *--v495 = v498;
          }
          goto LABEL_707;
        }
LABEL_712:
        sub_4074();
      }
    }
    else
    {
      if (v475 != 1)
      {
LABEL_710:
        *a2 = 1;
        return;
      }
      v476 = a1[2];
      v477 = *(_QWORD **)a1[1];
      v478 = (unint64_t)*(unsigned int *)(v476 + 28) >> 18;
      v479 = (unint64_t *)v477[560];
      v480 = v477[561];
      if ((unint64_t)v479 >= v480)
      {
        v481 = (unint64_t *)v477[559];
        v482 = v479 - v481;
        if (!((unint64_t)(v482 + 1) >> 61))
        {
          v483 = v480 - (_QWORD)v481;
          v484 = (uint64_t)(v480 - (_QWORD)v481) >> 2;
          if (v484 <= v482 + 1)
            v484 = v482 + 1;
          if (v483 >= 0x7FFFFFFFFFFFFFF8)
            v485 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v485 = v484;
          if (v485)
          {
            v486 = (char *)sub_40FC((uint64_t)(v477 + 561), v485);
            v479 = (unint64_t *)v477[560];
            v481 = (unint64_t *)v477[559];
          }
          else
          {
            v486 = 0;
          }
          v495 = (unint64_t *)&v486[8 * v482];
          v496 = &v486[8 * v485];
          *v495 = v478;
          v489 = v495 + 1;
          while (v479 != v481)
          {
            v497 = *--v479;
            *--v495 = v497;
          }
LABEL_707:
          v477[559] = v495;
          v477[560] = v489;
          v477[561] = v496;
          if (v481)
            operator delete(v481);
          goto LABEL_709;
        }
        goto LABEL_712;
      }
    }
    *v479 = v478;
    v489 = v479 + 1;
LABEL_709:
    v477[560] = v489;
    goto LABEL_710;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[497] - 8) += *(_WORD *)(v17 + 58) & 0x3FFF;
    *(_QWORD *)(v19[500] - 8) += *(_WORD *)(v17 + 40) & 0x3FFF;
    *(_QWORD *)(v19[503] - 8) += *(_WORD *)(v17 + 60) & 0x3FFF;
    *(_QWORD *)(v19[506] - 8) += *(_WORD *)(v17 + 42) & 0x3FFF;
    *(_QWORD *)(v19[509] - 8) += *(_WORD *)(v17 + 62) & 0x3FFF;
    *(_QWORD *)(v19[512] - 8) += *(_WORD *)(v17 + 44) & 0x3FFF;
    *(_QWORD *)(v19[515] - 8) += *(_DWORD *)(v17 + 28) & 0x3FFFF;
    *(_QWORD *)(v19[518] - 8) += *(_WORD *)(v17 + 52) & 0x3FFF;
    *(_QWORD *)(v19[521] - 8) += *(_WORD *)(v17 + 34) & 0x3FFF;
    *(_QWORD *)(v19[524] - 8) += *(_WORD *)(v17 + 54) & 0x3FFF;
    v20 = a1[2];
    v21 = *(_QWORD **)a1[1];
    *(_QWORD *)(v21[527] - 8) += *(_WORD *)(v20 + 36) & 0x3FFF;
    *(_QWORD *)(v21[530] - 8) += *(_WORD *)(v20 + 56) & 0x3FFF;
    *(_QWORD *)(v21[533] - 8) += *(_WORD *)(v20 + 38) & 0x3FFF;
    *(_QWORD *)(v21[536] - 8) += *(_DWORD *)(v20 + 24) & 0x3FFFF;
    *(_QWORD *)(v21[539] - 8) += *(_WORD *)(v20 + 68) & 0x7FF;
    *(_QWORD *)(v21[542] - 8) += *(_WORD *)(v20 + 50) & 0x7FF;
    *(_QWORD *)(v21[545] - 8) += *(_WORD *)(v20 + 32) & 0x1FFF;
    *(_QWORD *)(v21[548] - 8) += *(_WORD *)(v20 + 64) & 0x1FF;
    *(_QWORD *)(v21[551] - 8) += *(_WORD *)(v20 + 46) & 0x1FF;
    *(_QWORD *)(v21[554] - 8) += *(_WORD *)(v20 + 66) & 0x1FF;
    v22 = a1[2];
    v23 = (_QWORD *)*v18;
    *(_QWORD *)(v23[557] - 8) += *(_WORD *)(v22 + 48) & 0x1FF;
    *(_QWORD *)(v23[560] - 8) += (unint64_t)*(unsigned int *)(v22 + 28) >> 18;
  }
}

void sub_18F5BC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[593];
      v19 = v6[594];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[592];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_328;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 594), v24);
          v8 = (uint64_t *)v6[593];
          v10 = (uint64_t *)v6[592];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[593];
      v9 = v6[594];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[592];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_328;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 594), v14);
          v8 = (uint64_t *)v6[593];
          v10 = (uint64_t *)v6[592];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[592] = v26;
        v6[593] = v20;
        v6[594] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[593] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      v33 = (uint64_t *)v31[596];
      v41 = v31[597];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[595];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_328;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 597), v46);
          v33 = (uint64_t *)v31[596];
          v35 = (uint64_t *)v31[595];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      v33 = (uint64_t *)v31[596];
      v34 = v31[597];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[595];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_328;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 597), v39);
          v33 = (uint64_t *)v31[596];
          v35 = (uint64_t *)v31[595];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[595] = v48;
        v31[596] = v42;
        v31[597] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[596] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[599];
      v63 = v53[600];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[598];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_328;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 600), v68);
          v55 = (uint64_t *)v53[599];
          v57 = (uint64_t *)v53[598];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[599];
      v56 = v53[600];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[598];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_328;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 600), v61);
          v55 = (uint64_t *)v53[599];
          v57 = (uint64_t *)v53[598];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[598] = v70;
        v53[599] = v64;
        v53[600] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[599] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v86 = a1[1];
      v76 = *(_QWORD **)v86;
      v77 = *(unsigned __int16 *)(a1[2] + 58);
      v78 = *(char **)(*(_QWORD *)v86 + 4816);
      v87 = *(_QWORD *)(*(_QWORD *)v86 + 4824);
      if ((unint64_t)v78 >= v87)
      {
        v80 = (char *)v76[601];
        v89 = (v78 - v80) >> 3;
        if ((unint64_t)(v89 + 1) >> 61)
          goto LABEL_328;
        v90 = v87 - (_QWORD)v80;
        v91 = (uint64_t)(v87 - (_QWORD)v80) >> 2;
        if (v91 <= v89 + 1)
          v91 = v89 + 1;
        if (v90 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
        {
          v93 = (char *)sub_40FC((uint64_t)(v76 + 603), v92);
          v78 = (char *)v76[602];
          v80 = (char *)v76[601];
        }
        else
        {
          v93 = 0;
        }
        v94 = &v93[8 * v89];
        v95 = &v93[8 * v92];
        *(_QWORD *)v94 = v77;
        v88 = v94 + 8;
        while (v78 != v80)
        {
          v97 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v94 - 1) = v97;
          v94 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = a1[1];
      v76 = *(_QWORD **)v75;
      v77 = *(unsigned __int16 *)(a1[2] + 58);
      v78 = *(char **)(*(_QWORD *)v75 + 4816);
      v79 = *(_QWORD *)(*(_QWORD *)v75 + 4824);
      if ((unint64_t)v78 >= v79)
      {
        v80 = (char *)v76[601];
        v81 = (v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          goto LABEL_328;
        v82 = v79 - (_QWORD)v80;
        v83 = (uint64_t)(v79 - (_QWORD)v80) >> 2;
        if (v83 <= v81 + 1)
          v83 = v81 + 1;
        if (v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
        {
          v85 = (char *)sub_40FC((uint64_t)(v76 + 603), v84);
          v78 = (char *)v76[602];
          v80 = (char *)v76[601];
        }
        else
        {
          v85 = 0;
        }
        v94 = &v85[8 * v81];
        v95 = &v85[8 * v84];
        *(_QWORD *)v94 = v77;
        v88 = v94 + 8;
        while (v78 != v80)
        {
          v96 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v94 - 1) = v96;
          v94 -= 8;
        }
LABEL_131:
        v76[601] = v94;
        v76[602] = v88;
        v76[603] = v95;
        if (v80)
          operator delete(v80);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v78 = v77;
    v88 = v78 + 8;
LABEL_133:
    v76[602] = v88;
LABEL_134:
    v98 = 1 << *(_DWORD *)(v3 + 48);
    if (v98 == 2)
    {
      v110 = a1[1];
      v100 = *(_QWORD **)v110;
      v101 = *(unsigned __int16 *)(a1[2] + 56);
      v102 = *(char **)(*(_QWORD *)v110 + 4840);
      v111 = *(_QWORD *)(*(_QWORD *)v110 + 4848);
      if ((unint64_t)v102 >= v111)
      {
        v104 = (char *)v100[604];
        v113 = (v102 - v104) >> 3;
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_328;
        v114 = v111 - (_QWORD)v104;
        v115 = (uint64_t)(v111 - (_QWORD)v104) >> 2;
        if (v115 <= v113 + 1)
          v115 = v113 + 1;
        if (v114 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
        {
          v117 = (char *)sub_40FC((uint64_t)(v100 + 606), v116);
          v102 = (char *)v100[605];
          v104 = (char *)v100[604];
        }
        else
        {
          v117 = 0;
        }
        v118 = &v117[8 * v113];
        v119 = &v117[8 * v116];
        *(_QWORD *)v118 = v101;
        v112 = v118 + 8;
        while (v102 != v104)
        {
          v121 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v118 - 1) = v121;
          v118 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v98 != 1)
        goto LABEL_166;
      v99 = a1[1];
      v100 = *(_QWORD **)v99;
      v101 = *(unsigned __int16 *)(a1[2] + 56);
      v102 = *(char **)(*(_QWORD *)v99 + 4840);
      v103 = *(_QWORD *)(*(_QWORD *)v99 + 4848);
      if ((unint64_t)v102 >= v103)
      {
        v104 = (char *)v100[604];
        v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_328;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 606), v108);
          v102 = (char *)v100[605];
          v104 = (char *)v100[604];
        }
        else
        {
          v109 = 0;
        }
        v118 = &v109[8 * v105];
        v119 = &v109[8 * v108];
        *(_QWORD *)v118 = v101;
        v112 = v118 + 8;
        while (v102 != v104)
        {
          v120 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v118 - 1) = v120;
          v118 -= 8;
        }
LABEL_163:
        v100[604] = v118;
        v100[605] = v112;
        v100[606] = v119;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v102 = v101;
    v112 = v102 + 8;
LABEL_165:
    v100[605] = v112;
LABEL_166:
    v122 = 1 << *(_DWORD *)(v3 + 48);
    if (v122 == 2)
    {
      v123 = *(_QWORD **)a1[1];
      v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v125 = (uint64_t *)v123[608];
      v133 = v123[609];
      if ((unint64_t)v125 >= v133)
      {
        v127 = (uint64_t *)v123[607];
        v135 = v125 - v127;
        if ((unint64_t)(v135 + 1) >> 61)
          goto LABEL_328;
        v136 = v133 - (_QWORD)v127;
        v137 = (uint64_t)(v133 - (_QWORD)v127) >> 2;
        if (v137 <= v135 + 1)
          v137 = v135 + 1;
        if (v136 >= 0x7FFFFFFFFFFFFFF8)
          v138 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v138 = v137;
        if (v138)
        {
          v139 = (char *)sub_40FC((uint64_t)(v123 + 609), v138);
          v125 = (uint64_t *)v123[608];
          v127 = (uint64_t *)v123[607];
        }
        else
        {
          v139 = 0;
        }
        v140 = (uint64_t *)&v139[8 * v135];
        v141 = &v139[8 * v138];
        *v140 = v124;
        v134 = v140 + 1;
        while (v125 != v127)
        {
          v143 = *--v125;
          *--v140 = v143;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v122 != 1)
        goto LABEL_198;
      v123 = *(_QWORD **)a1[1];
      v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v125 = (uint64_t *)v123[608];
      v126 = v123[609];
      if ((unint64_t)v125 >= v126)
      {
        v127 = (uint64_t *)v123[607];
        v128 = v125 - v127;
        if ((unint64_t)(v128 + 1) >> 61)
          goto LABEL_328;
        v129 = v126 - (_QWORD)v127;
        v130 = (uint64_t)(v126 - (_QWORD)v127) >> 2;
        if (v130 <= v128 + 1)
          v130 = v128 + 1;
        if (v129 >= 0x7FFFFFFFFFFFFFF8)
          v131 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v131 = v130;
        if (v131)
        {
          v132 = (char *)sub_40FC((uint64_t)(v123 + 609), v131);
          v125 = (uint64_t *)v123[608];
          v127 = (uint64_t *)v123[607];
        }
        else
        {
          v132 = 0;
        }
        v140 = (uint64_t *)&v132[8 * v128];
        v141 = &v132[8 * v131];
        *v140 = v124;
        v134 = v140 + 1;
        while (v125 != v127)
        {
          v142 = *--v125;
          *--v140 = v142;
        }
LABEL_195:
        v123[607] = v140;
        v123[608] = v134;
        v123[609] = v141;
        if (v127)
          operator delete(v127);
        goto LABEL_197;
      }
    }
    *v125 = v124;
    v134 = v125 + 1;
LABEL_197:
    v123[608] = v134;
LABEL_198:
    v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      v145 = *(_QWORD **)a1[1];
      v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v147 = (uint64_t *)v145[611];
      v155 = v145[612];
      if ((unint64_t)v147 >= v155)
      {
        v149 = (uint64_t *)v145[610];
        v157 = v147 - v149;
        if ((unint64_t)(v157 + 1) >> 61)
          goto LABEL_328;
        v158 = v155 - (_QWORD)v149;
        v159 = (uint64_t)(v155 - (_QWORD)v149) >> 2;
        if (v159 <= v157 + 1)
          v159 = v157 + 1;
        if (v158 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v159;
        if (v160)
        {
          v161 = (char *)sub_40FC((uint64_t)(v145 + 612), v160);
          v147 = (uint64_t *)v145[611];
          v149 = (uint64_t *)v145[610];
        }
        else
        {
          v161 = 0;
        }
        v162 = (uint64_t *)&v161[8 * v157];
        v163 = &v161[8 * v160];
        *v162 = v146;
        v156 = v162 + 1;
        while (v147 != v149)
        {
          v165 = *--v147;
          *--v162 = v165;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v144 != 1)
        goto LABEL_230;
      v145 = *(_QWORD **)a1[1];
      v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v147 = (uint64_t *)v145[611];
      v148 = v145[612];
      if ((unint64_t)v147 >= v148)
      {
        v149 = (uint64_t *)v145[610];
        v150 = v147 - v149;
        if ((unint64_t)(v150 + 1) >> 61)
          goto LABEL_328;
        v151 = v148 - (_QWORD)v149;
        v152 = (uint64_t)(v148 - (_QWORD)v149) >> 2;
        if (v152 <= v150 + 1)
          v152 = v150 + 1;
        if (v151 >= 0x7FFFFFFFFFFFFFF8)
          v153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v153 = v152;
        if (v153)
        {
          v154 = (char *)sub_40FC((uint64_t)(v145 + 612), v153);
          v147 = (uint64_t *)v145[611];
          v149 = (uint64_t *)v145[610];
        }
        else
        {
          v154 = 0;
        }
        v162 = (uint64_t *)&v154[8 * v150];
        v163 = &v154[8 * v153];
        *v162 = v146;
        v156 = v162 + 1;
        while (v147 != v149)
        {
          v164 = *--v147;
          *--v162 = v164;
        }
LABEL_227:
        v145[610] = v162;
        v145[611] = v156;
        v145[612] = v163;
        if (v149)
          operator delete(v149);
        goto LABEL_229;
      }
    }
    *v147 = v146;
    v156 = v147 + 1;
LABEL_229:
    v145[611] = v156;
LABEL_230:
    v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      v167 = *(_QWORD **)a1[1];
      v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      v169 = (uint64_t *)v167[614];
      v177 = v167[615];
      if ((unint64_t)v169 >= v177)
      {
        v171 = (uint64_t *)v167[613];
        v179 = v169 - v171;
        if ((unint64_t)(v179 + 1) >> 61)
          goto LABEL_328;
        v180 = v177 - (_QWORD)v171;
        v181 = (uint64_t)(v177 - (_QWORD)v171) >> 2;
        if (v181 <= v179 + 1)
          v181 = v179 + 1;
        if (v180 >= 0x7FFFFFFFFFFFFFF8)
          v182 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v182 = v181;
        if (v182)
        {
          v183 = (char *)sub_40FC((uint64_t)(v167 + 615), v182);
          v169 = (uint64_t *)v167[614];
          v171 = (uint64_t *)v167[613];
        }
        else
        {
          v183 = 0;
        }
        v184 = (uint64_t *)&v183[8 * v179];
        v185 = &v183[8 * v182];
        *v184 = v168;
        v178 = v184 + 1;
        while (v169 != v171)
        {
          v187 = *--v169;
          *--v184 = v187;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v166 != 1)
        goto LABEL_262;
      v167 = *(_QWORD **)a1[1];
      v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      v169 = (uint64_t *)v167[614];
      v170 = v167[615];
      if ((unint64_t)v169 >= v170)
      {
        v171 = (uint64_t *)v167[613];
        v172 = v169 - v171;
        if ((unint64_t)(v172 + 1) >> 61)
          goto LABEL_328;
        v173 = v170 - (_QWORD)v171;
        v174 = (uint64_t)(v170 - (_QWORD)v171) >> 2;
        if (v174 <= v172 + 1)
          v174 = v172 + 1;
        if (v173 >= 0x7FFFFFFFFFFFFFF8)
          v175 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v175 = v174;
        if (v175)
        {
          v176 = (char *)sub_40FC((uint64_t)(v167 + 615), v175);
          v169 = (uint64_t *)v167[614];
          v171 = (uint64_t *)v167[613];
        }
        else
        {
          v176 = 0;
        }
        v184 = (uint64_t *)&v176[8 * v172];
        v185 = &v176[8 * v175];
        *v184 = v168;
        v178 = v184 + 1;
        while (v169 != v171)
        {
          v186 = *--v169;
          *--v184 = v186;
        }
LABEL_259:
        v167[613] = v184;
        v167[614] = v178;
        v167[615] = v185;
        if (v171)
          operator delete(v171);
        goto LABEL_261;
      }
    }
    *v169 = v168;
    v178 = v169 + 1;
LABEL_261:
    v167[614] = v178;
LABEL_262:
    v188 = 1 << *(_DWORD *)(v3 + 48);
    if (v188 == 2)
    {
      v189 = *(_QWORD **)a1[1];
      v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      v191 = (uint64_t *)v189[617];
      v199 = v189[618];
      if ((unint64_t)v191 >= v199)
      {
        v193 = (uint64_t *)v189[616];
        v201 = v191 - v193;
        if ((unint64_t)(v201 + 1) >> 61)
          goto LABEL_328;
        v202 = v199 - (_QWORD)v193;
        v203 = (uint64_t)(v199 - (_QWORD)v193) >> 2;
        if (v203 <= v201 + 1)
          v203 = v201 + 1;
        if (v202 >= 0x7FFFFFFFFFFFFFF8)
          v204 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v204 = v203;
        if (v204)
        {
          v205 = (char *)sub_40FC((uint64_t)(v189 + 618), v204);
          v191 = (uint64_t *)v189[617];
          v193 = (uint64_t *)v189[616];
        }
        else
        {
          v205 = 0;
        }
        v206 = (uint64_t *)&v205[8 * v201];
        v207 = &v205[8 * v204];
        *v206 = v190;
        v200 = v206 + 1;
        while (v191 != v193)
        {
          v209 = *--v191;
          *--v206 = v209;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v188 != 1)
        goto LABEL_294;
      v189 = *(_QWORD **)a1[1];
      v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      v191 = (uint64_t *)v189[617];
      v192 = v189[618];
      if ((unint64_t)v191 >= v192)
      {
        v193 = (uint64_t *)v189[616];
        v194 = v191 - v193;
        if ((unint64_t)(v194 + 1) >> 61)
          goto LABEL_328;
        v195 = v192 - (_QWORD)v193;
        v196 = (uint64_t)(v192 - (_QWORD)v193) >> 2;
        if (v196 <= v194 + 1)
          v196 = v194 + 1;
        if (v195 >= 0x7FFFFFFFFFFFFFF8)
          v197 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v197 = v196;
        if (v197)
        {
          v198 = (char *)sub_40FC((uint64_t)(v189 + 618), v197);
          v191 = (uint64_t *)v189[617];
          v193 = (uint64_t *)v189[616];
        }
        else
        {
          v198 = 0;
        }
        v206 = (uint64_t *)&v198[8 * v194];
        v207 = &v198[8 * v197];
        *v206 = v190;
        v200 = v206 + 1;
        while (v191 != v193)
        {
          v208 = *--v191;
          *--v206 = v208;
        }
LABEL_291:
        v189[616] = v206;
        v189[617] = v200;
        v189[618] = v207;
        if (v193)
          operator delete(v193);
        goto LABEL_293;
      }
    }
    *v191 = v190;
    v200 = v191 + 1;
LABEL_293:
    v189[617] = v200;
LABEL_294:
    v210 = 1 << *(_DWORD *)(v3 + 48);
    if (v210 == 2)
    {
      v222 = a1[2];
      v212 = *(_QWORD **)a1[1];
      v213 = *(_DWORD *)(v222 + 28) & 0xFFFFFLL;
      v214 = (uint64_t *)v212[620];
      v223 = v212[621];
      if ((unint64_t)v214 >= v223)
      {
        v216 = (uint64_t *)v212[619];
        v225 = v214 - v216;
        if (!((unint64_t)(v225 + 1) >> 61))
        {
          v226 = v223 - (_QWORD)v216;
          v227 = (uint64_t)(v223 - (_QWORD)v216) >> 2;
          if (v227 <= v225 + 1)
            v227 = v225 + 1;
          if (v226 >= 0x7FFFFFFFFFFFFFF8)
            v228 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v228 = v227;
          if (v228)
          {
            v229 = (char *)sub_40FC((uint64_t)(v212 + 621), v228);
            v214 = (uint64_t *)v212[620];
            v216 = (uint64_t *)v212[619];
          }
          else
          {
            v229 = 0;
          }
          v230 = (uint64_t *)&v229[8 * v225];
          v231 = &v229[8 * v228];
          *v230 = v213;
          v224 = v230 + 1;
          while (v214 != v216)
          {
            v233 = *--v214;
            *--v230 = v233;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v210 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v211 = a1[2];
      v212 = *(_QWORD **)a1[1];
      v213 = *(_DWORD *)(v211 + 28) & 0xFFFFFLL;
      v214 = (uint64_t *)v212[620];
      v215 = v212[621];
      if ((unint64_t)v214 >= v215)
      {
        v216 = (uint64_t *)v212[619];
        v217 = v214 - v216;
        if (!((unint64_t)(v217 + 1) >> 61))
        {
          v218 = v215 - (_QWORD)v216;
          v219 = (uint64_t)(v215 - (_QWORD)v216) >> 2;
          if (v219 <= v217 + 1)
            v219 = v217 + 1;
          if (v218 >= 0x7FFFFFFFFFFFFFF8)
            v220 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v220 = v219;
          if (v220)
          {
            v221 = (char *)sub_40FC((uint64_t)(v212 + 621), v220);
            v214 = (uint64_t *)v212[620];
            v216 = (uint64_t *)v212[619];
          }
          else
          {
            v221 = 0;
          }
          v230 = (uint64_t *)&v221[8 * v217];
          v231 = &v221[8 * v220];
          *v230 = v213;
          v224 = v230 + 1;
          while (v214 != v216)
          {
            v232 = *--v214;
            *--v230 = v232;
          }
LABEL_323:
          v212[619] = v230;
          v212[620] = v224;
          v212[621] = v231;
          if (v216)
            operator delete(v216);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *v214 = v213;
    v224 = v214 + 1;
LABEL_325:
    v212[620] = v224;
    goto LABEL_326;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[593] - 8) += *(_DWORD *)(v17 + 44) & 0xFFFFF;
    *(_QWORD *)(v18[596] - 8) += *(_DWORD *)(v17 + 48) & 0xFFFFF;
    *(_QWORD *)(v18[599] - 8) += *(_DWORD *)(v17 + 52) & 0xFFFFF;
    *(_QWORD *)(v18[602] - 8) += *(unsigned __int16 *)(v17 + 58);
    *(_QWORD *)(v18[605] - 8) += *(unsigned __int16 *)(v17 + 56);
    *(_QWORD *)(v18[608] - 8) += *(_DWORD *)(v17 + 32) & 0xFFFFF;
    *(_QWORD *)(v18[611] - 8) += *(_DWORD *)(v17 + 36) & 0xFFFFF;
    *(_QWORD *)(v18[614] - 8) += *(_DWORD *)(v17 + 40) & 0xFFFFF;
    *(_QWORD *)(v18[617] - 8) += *(_DWORD *)(v17 + 24) & 0xFFFFF;
    *(_QWORD *)(v18[620] - 8) += *(_DWORD *)(v17 + 28) & 0xFFFFF;
  }
}

void sub_1906B0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  unsigned int *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[740];
      v19 = v6[741];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[739];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_136;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 741), v24);
          v8 = (uint64_t *)v6[740];
          v10 = (uint64_t *)v6[739];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[740];
      v9 = v6[741];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[739];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_136;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 741), v14);
          v8 = (uint64_t *)v6[740];
          v10 = (uint64_t *)v6[739];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[739] = v26;
        v6[740] = v20;
        v6[741] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[740] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[743];
      v41 = v31[744];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[742];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_136;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 744), v46);
          v33 = (uint64_t *)v31[743];
          v35 = (uint64_t *)v31[742];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[743];
      v34 = v31[744];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[742];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_136;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 744), v39);
          v33 = (uint64_t *)v31[743];
          v35 = (uint64_t *)v31[742];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[742] = v48;
        v31[743] = v42;
        v31[744] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[743] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[746];
      v63 = v53[747];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[745];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_136;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 747), v68);
          v55 = (uint64_t *)v53[746];
          v57 = (uint64_t *)v53[745];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[746];
      v56 = v53[747];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[745];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_136;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 747), v61);
          v55 = (uint64_t *)v53[746];
          v57 = (uint64_t *)v53[745];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[745] = v70;
        v53[746] = v64;
        v53[747] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[746] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v86 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = ((unint64_t)*(unsigned int *)(v86 + 24) >> 1) & 0x7FFFF;
      v78 = (unint64_t *)v76[749];
      v87 = v76[750];
      if ((unint64_t)v78 >= v87)
      {
        v80 = (unint64_t *)v76[748];
        v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          v90 = v87 - (_QWORD)v80;
          v91 = (uint64_t)(v87 - (_QWORD)v80) >> 2;
          if (v91 <= v89 + 1)
            v91 = v89 + 1;
          if (v90 >= 0x7FFFFFFFFFFFFFF8)
            v92 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v92 = v91;
          if (v92)
          {
            v93 = (char *)sub_40FC((uint64_t)(v76 + 750), v92);
            v78 = (unint64_t *)v76[749];
            v80 = (unint64_t *)v76[748];
          }
          else
          {
            v93 = 0;
          }
          v94 = (unint64_t *)&v93[8 * v89];
          v95 = &v93[8 * v92];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v97 = *--v78;
            *--v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_4074();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      v75 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = ((unint64_t)*(unsigned int *)(v75 + 24) >> 1) & 0x7FFFF;
      v78 = (unint64_t *)v76[749];
      v79 = v76[750];
      if ((unint64_t)v78 >= v79)
      {
        v80 = (unint64_t *)v76[748];
        v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          v82 = v79 - (_QWORD)v80;
          v83 = (uint64_t)(v79 - (_QWORD)v80) >> 2;
          if (v83 <= v81 + 1)
            v83 = v81 + 1;
          if (v82 >= 0x7FFFFFFFFFFFFFF8)
            v84 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            v85 = (char *)sub_40FC((uint64_t)(v76 + 750), v84);
            v78 = (unint64_t *)v76[749];
            v80 = (unint64_t *)v76[748];
          }
          else
          {
            v85 = 0;
          }
          v94 = (unint64_t *)&v85[8 * v81];
          v95 = &v85[8 * v84];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v96 = *--v78;
            *--v94 = v96;
          }
LABEL_131:
          v76[748] = v94;
          v76[749] = v88;
          v76[750] = v95;
          if (v80)
            operator delete(v80);
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *v78 = v77;
    v88 = v78 + 1;
LABEL_133:
    v76[749] = v88;
    goto LABEL_134;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = (unsigned int *)a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[740] - 8) += v17[9] & 0xFFFFF;
    *(_QWORD *)(v18[743] - 8) += v17[7] & 0x1FFFF;
    *(_QWORD *)(v18[746] - 8) += v17[8] & 0xFFFFF;
    *(_QWORD *)(v18[749] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
  }
}

void sub_190DCC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  unsigned int *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  uint64_t *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t *v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  uint64_t *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t *v344;
  unint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  uint64_t *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t *v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  char *v380;
  uint64_t *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t *v388;
  unint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  unint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  uint64_t *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t *v410;
  unint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  unint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  char *v424;
  uint64_t *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t *v433;
  unint64_t v434;
  uint64_t *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  char *v440;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  uint64_t *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[623];
      v22 = v6[624];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (uint64_t *)v6[622];
        v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_648;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 624), v27);
          v8 = (uint64_t *)v6[623];
          v10 = (uint64_t *)v6[622];
        }
        else
        {
          v28 = 0;
        }
        v29 = (uint64_t *)&v28[8 * v24];
        v30 = &v28[8 * v27];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v32 = *--v8;
          *--v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[623];
      v9 = v6[624];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[622];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_648;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 624), v14);
          v8 = (uint64_t *)v6[623];
          v10 = (uint64_t *)v6[622];
        }
        else
        {
          v15 = 0;
        }
        v29 = (uint64_t *)&v15[8 * v11];
        v30 = &v15[8 * v14];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v31 = *--v8;
          *--v29 = v31;
        }
LABEL_35:
        v6[622] = v29;
        v6[623] = v23;
        v6[624] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v23 = v8 + 1;
LABEL_37:
    v6[623] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[626];
      v44 = v34[627];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (uint64_t *)v34[625];
        v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_648;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 627), v49);
          v36 = (uint64_t *)v34[626];
          v38 = (uint64_t *)v34[625];
        }
        else
        {
          v50 = 0;
        }
        v51 = (uint64_t *)&v50[8 * v46];
        v52 = &v50[8 * v49];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v54 = *--v36;
          *--v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 88) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[626];
      v37 = v34[627];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (uint64_t *)v34[625];
        v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_648;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 627), v42);
          v36 = (uint64_t *)v34[626];
          v38 = (uint64_t *)v34[625];
        }
        else
        {
          v43 = 0;
        }
        v51 = (uint64_t *)&v43[8 * v39];
        v52 = &v43[8 * v42];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v53 = *--v36;
          *--v51 = v53;
        }
LABEL_67:
        v34[625] = v51;
        v34[626] = v45;
        v34[627] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *v36 = v35;
    v45 = v36 + 1;
LABEL_69:
    v34[626] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      v58 = (unint64_t *)v56[629];
      v66 = v56[630];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (unint64_t *)v56[628];
        v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_648;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 630), v71);
          v58 = (unint64_t *)v56[629];
          v60 = (unint64_t *)v56[628];
        }
        else
        {
          v72 = 0;
        }
        v73 = (unint64_t *)&v72[8 * v68];
        v74 = &v72[8 * v71];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v76 = *--v58;
          *--v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = ((unint64_t)*(unsigned int *)(a1[2] + 24) >> 1) & 0x7FFFF;
      v58 = (unint64_t *)v56[629];
      v59 = v56[630];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (unint64_t *)v56[628];
        v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_648;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 630), v64);
          v58 = (unint64_t *)v56[629];
          v60 = (unint64_t *)v56[628];
        }
        else
        {
          v65 = 0;
        }
        v73 = (unint64_t *)&v65[8 * v61];
        v74 = &v65[8 * v64];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v75 = *--v58;
          *--v73 = v75;
        }
LABEL_99:
        v56[628] = v73;
        v56[629] = v67;
        v56[630] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *v58 = v57;
    v67 = v58 + 1;
LABEL_101:
    v56[629] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v80 = (uint64_t *)v78[632];
      v88 = v78[633];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (uint64_t *)v78[631];
        v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_648;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 633), v93);
          v80 = (uint64_t *)v78[632];
          v82 = (uint64_t *)v78[631];
        }
        else
        {
          v94 = 0;
        }
        v95 = (uint64_t *)&v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v98 = *--v80;
          *--v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v80 = (uint64_t *)v78[632];
      v81 = v78[633];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (uint64_t *)v78[631];
        v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_648;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 633), v86);
          v80 = (uint64_t *)v78[632];
          v82 = (uint64_t *)v78[631];
        }
        else
        {
          v87 = 0;
        }
        v95 = (uint64_t *)&v87[8 * v83];
        v96 = &v87[8 * v86];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v97 = *--v80;
          *--v95 = v97;
        }
LABEL_131:
        v78[631] = v95;
        v78[632] = v89;
        v78[633] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *v80 = v79;
    v89 = v80 + 1;
LABEL_133:
    v78[632] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[635];
      v110 = v100[636];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[634];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_648;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 636), v115);
          v102 = (uint64_t *)v100[635];
          v104 = (uint64_t *)v100[634];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[635];
      v103 = v100[636];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[634];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_648;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 636), v108);
          v102 = (uint64_t *)v100[635];
          v104 = (uint64_t *)v100[634];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[634] = v117;
        v100[635] = v111;
        v100[636] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[635] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v124 = (uint64_t *)v122[638];
      v132 = v122[639];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (uint64_t *)v122[637];
        v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_648;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 639), v137);
          v124 = (uint64_t *)v122[638];
          v126 = (uint64_t *)v122[637];
        }
        else
        {
          v138 = 0;
        }
        v139 = (uint64_t *)&v138[8 * v134];
        v140 = &v138[8 * v137];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v142 = *--v124;
          *--v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v124 = (uint64_t *)v122[638];
      v125 = v122[639];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (uint64_t *)v122[637];
        v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_648;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 639), v130);
          v124 = (uint64_t *)v122[638];
          v126 = (uint64_t *)v122[637];
        }
        else
        {
          v131 = 0;
        }
        v139 = (uint64_t *)&v131[8 * v127];
        v140 = &v131[8 * v130];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v141 = *--v124;
          *--v139 = v141;
        }
LABEL_195:
        v122[637] = v139;
        v122[638] = v133;
        v122[639] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *v124 = v123;
    v133 = v124 + 1;
LABEL_197:
    v122[638] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[641];
      v154 = v144[642];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (uint64_t *)v144[640];
        v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_648;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 642), v159);
          v146 = (uint64_t *)v144[641];
          v148 = (uint64_t *)v144[640];
        }
        else
        {
          v160 = 0;
        }
        v161 = (uint64_t *)&v160[8 * v156];
        v162 = &v160[8 * v159];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v164 = *--v146;
          *--v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[641];
      v147 = v144[642];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (uint64_t *)v144[640];
        v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_648;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 642), v152);
          v146 = (uint64_t *)v144[641];
          v148 = (uint64_t *)v144[640];
        }
        else
        {
          v153 = 0;
        }
        v161 = (uint64_t *)&v153[8 * v149];
        v162 = &v153[8 * v152];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v163 = *--v146;
          *--v161 = v163;
        }
LABEL_227:
        v144[640] = v161;
        v144[641] = v155;
        v144[642] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *v146 = v145;
    v155 = v146 + 1;
LABEL_229:
    v144[641] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      v168 = (uint64_t *)v166[644];
      v176 = v166[645];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (uint64_t *)v166[643];
        v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_648;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 645), v181);
          v168 = (uint64_t *)v166[644];
          v170 = (uint64_t *)v166[643];
        }
        else
        {
          v182 = 0;
        }
        v183 = (uint64_t *)&v182[8 * v178];
        v184 = &v182[8 * v181];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v186 = *--v168;
          *--v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 84) & 0x7FFFFLL;
      v168 = (uint64_t *)v166[644];
      v169 = v166[645];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (uint64_t *)v166[643];
        v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_648;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 645), v174);
          v168 = (uint64_t *)v166[644];
          v170 = (uint64_t *)v166[643];
        }
        else
        {
          v175 = 0;
        }
        v183 = (uint64_t *)&v175[8 * v171];
        v184 = &v175[8 * v174];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v185 = *--v168;
          *--v183 = v185;
        }
LABEL_259:
        v166[643] = v183;
        v166[644] = v177;
        v166[645] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *v168 = v167;
    v177 = v168 + 1;
LABEL_261:
    v166[644] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[647];
      v198 = v188[648];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (uint64_t *)v188[646];
        v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_648;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 648), v203);
          v190 = (uint64_t *)v188[647];
          v192 = (uint64_t *)v188[646];
        }
        else
        {
          v204 = 0;
        }
        v205 = (uint64_t *)&v204[8 * v200];
        v206 = &v204[8 * v203];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v208 = *--v190;
          *--v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[647];
      v191 = v188[648];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (uint64_t *)v188[646];
        v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_648;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 648), v196);
          v190 = (uint64_t *)v188[647];
          v192 = (uint64_t *)v188[646];
        }
        else
        {
          v197 = 0;
        }
        v205 = (uint64_t *)&v197[8 * v193];
        v206 = &v197[8 * v196];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v207 = *--v190;
          *--v205 = v207;
        }
LABEL_291:
        v188[646] = v205;
        v188[647] = v199;
        v188[648] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *v190 = v189;
    v199 = v190 + 1;
LABEL_293:
    v188[647] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      v212 = (uint64_t *)v210[650];
      v220 = v210[651];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (uint64_t *)v210[649];
        v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_648;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 651), v225);
          v212 = (uint64_t *)v210[650];
          v214 = (uint64_t *)v210[649];
        }
        else
        {
          v226 = 0;
        }
        v227 = (uint64_t *)&v226[8 * v222];
        v228 = &v226[8 * v225];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v230 = *--v212;
          *--v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 80) & 0x7FFFFLL;
      v212 = (uint64_t *)v210[650];
      v213 = v210[651];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (uint64_t *)v210[649];
        v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_648;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 651), v218);
          v212 = (uint64_t *)v210[650];
          v214 = (uint64_t *)v210[649];
        }
        else
        {
          v219 = 0;
        }
        v227 = (uint64_t *)&v219[8 * v215];
        v228 = &v219[8 * v218];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v229 = *--v212;
          *--v227 = v229;
        }
LABEL_323:
        v210[649] = v227;
        v210[650] = v221;
        v210[651] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *v212 = v211;
    v221 = v212 + 1;
LABEL_325:
    v210[650] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[653];
      v242 = v232[654];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (uint64_t *)v232[652];
        v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_648;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 654), v247);
          v234 = (uint64_t *)v232[653];
          v236 = (uint64_t *)v232[652];
        }
        else
        {
          v248 = 0;
        }
        v249 = (uint64_t *)&v248[8 * v244];
        v250 = &v248[8 * v247];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v252 = *--v234;
          *--v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 56) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[653];
      v235 = v232[654];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (uint64_t *)v232[652];
        v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_648;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 654), v240);
          v234 = (uint64_t *)v232[653];
          v236 = (uint64_t *)v232[652];
        }
        else
        {
          v241 = 0;
        }
        v249 = (uint64_t *)&v241[8 * v237];
        v250 = &v241[8 * v240];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v251 = *--v234;
          *--v249 = v251;
        }
LABEL_355:
        v232[652] = v249;
        v232[653] = v243;
        v232[654] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *v234 = v233;
    v243 = v234 + 1;
LABEL_357:
    v232[653] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      v256 = (uint64_t *)v254[656];
      v264 = v254[657];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (uint64_t *)v254[655];
        v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_648;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 657), v269);
          v256 = (uint64_t *)v254[656];
          v258 = (uint64_t *)v254[655];
        }
        else
        {
          v270 = 0;
        }
        v271 = (uint64_t *)&v270[8 * v266];
        v272 = &v270[8 * v269];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v274 = *--v256;
          *--v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 96) & 0x7FFFFLL;
      v256 = (uint64_t *)v254[656];
      v257 = v254[657];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (uint64_t *)v254[655];
        v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_648;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 657), v262);
          v256 = (uint64_t *)v254[656];
          v258 = (uint64_t *)v254[655];
        }
        else
        {
          v263 = 0;
        }
        v271 = (uint64_t *)&v263[8 * v259];
        v272 = &v263[8 * v262];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v273 = *--v256;
          *--v271 = v273;
        }
LABEL_387:
        v254[655] = v271;
        v254[656] = v265;
        v254[657] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *v256 = v255;
    v265 = v256 + 1;
LABEL_389:
    v254[656] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[659];
      v286 = v276[660];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (uint64_t *)v276[658];
        v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_648;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 660), v291);
          v278 = (uint64_t *)v276[659];
          v280 = (uint64_t *)v276[658];
        }
        else
        {
          v292 = 0;
        }
        v293 = (uint64_t *)&v292[8 * v288];
        v294 = &v292[8 * v291];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v296 = *--v278;
          *--v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[659];
      v279 = v276[660];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (uint64_t *)v276[658];
        v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_648;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 660), v284);
          v278 = (uint64_t *)v276[659];
          v280 = (uint64_t *)v276[658];
        }
        else
        {
          v285 = 0;
        }
        v293 = (uint64_t *)&v285[8 * v281];
        v294 = &v285[8 * v284];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v295 = *--v278;
          *--v293 = v295;
        }
LABEL_419:
        v276[658] = v293;
        v276[659] = v287;
        v276[660] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *v278 = v277;
    v287 = v278 + 1;
LABEL_421:
    v276[659] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v300 = (uint64_t *)v298[662];
      v308 = v298[663];
      if ((unint64_t)v300 >= v308)
      {
        v302 = (uint64_t *)v298[661];
        v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61)
          goto LABEL_648;
        v311 = v308 - (_QWORD)v302;
        v312 = (uint64_t)(v308 - (_QWORD)v302) >> 2;
        if (v312 <= v310 + 1)
          v312 = v310 + 1;
        if (v311 >= 0x7FFFFFFFFFFFFFF8)
          v313 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v313 = v312;
        if (v313)
        {
          v314 = (char *)sub_40FC((uint64_t)(v298 + 663), v313);
          v300 = (uint64_t *)v298[662];
          v302 = (uint64_t *)v298[661];
        }
        else
        {
          v314 = 0;
        }
        v315 = (uint64_t *)&v314[8 * v310];
        v316 = &v314[8 * v313];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v318 = *--v300;
          *--v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1)
        goto LABEL_454;
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v300 = (uint64_t *)v298[662];
      v301 = v298[663];
      if ((unint64_t)v300 >= v301)
      {
        v302 = (uint64_t *)v298[661];
        v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61)
          goto LABEL_648;
        v304 = v301 - (_QWORD)v302;
        v305 = (uint64_t)(v301 - (_QWORD)v302) >> 2;
        if (v305 <= v303 + 1)
          v305 = v303 + 1;
        if (v304 >= 0x7FFFFFFFFFFFFFF8)
          v306 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v306 = v305;
        if (v306)
        {
          v307 = (char *)sub_40FC((uint64_t)(v298 + 663), v306);
          v300 = (uint64_t *)v298[662];
          v302 = (uint64_t *)v298[661];
        }
        else
        {
          v307 = 0;
        }
        v315 = (uint64_t *)&v307[8 * v303];
        v316 = &v307[8 * v306];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v317 = *--v300;
          *--v315 = v317;
        }
LABEL_451:
        v298[661] = v315;
        v298[662] = v309;
        v298[663] = v316;
        if (v302)
          operator delete(v302);
        goto LABEL_453;
      }
    }
    *v300 = v299;
    v309 = v300 + 1;
LABEL_453:
    v298[662] = v309;
LABEL_454:
    v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[665];
      v330 = v320[666];
      if ((unint64_t)v322 >= v330)
      {
        v324 = (uint64_t *)v320[664];
        v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_648;
        v333 = v330 - (_QWORD)v324;
        v334 = (uint64_t)(v330 - (_QWORD)v324) >> 2;
        if (v334 <= v332 + 1)
          v334 = v332 + 1;
        if (v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
        {
          v336 = (char *)sub_40FC((uint64_t)(v320 + 666), v335);
          v322 = (uint64_t *)v320[665];
          v324 = (uint64_t *)v320[664];
        }
        else
        {
          v336 = 0;
        }
        v337 = (uint64_t *)&v336[8 * v332];
        v338 = &v336[8 * v335];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v340 = *--v322;
          *--v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1)
        goto LABEL_486;
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 92) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[665];
      v323 = v320[666];
      if ((unint64_t)v322 >= v323)
      {
        v324 = (uint64_t *)v320[664];
        v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61)
          goto LABEL_648;
        v326 = v323 - (_QWORD)v324;
        v327 = (uint64_t)(v323 - (_QWORD)v324) >> 2;
        if (v327 <= v325 + 1)
          v327 = v325 + 1;
        if (v326 >= 0x7FFFFFFFFFFFFFF8)
          v328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v328 = v327;
        if (v328)
        {
          v329 = (char *)sub_40FC((uint64_t)(v320 + 666), v328);
          v322 = (uint64_t *)v320[665];
          v324 = (uint64_t *)v320[664];
        }
        else
        {
          v329 = 0;
        }
        v337 = (uint64_t *)&v329[8 * v325];
        v338 = &v329[8 * v328];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v339 = *--v322;
          *--v337 = v339;
        }
LABEL_483:
        v320[664] = v337;
        v320[665] = v331;
        v320[666] = v338;
        if (v324)
          operator delete(v324);
        goto LABEL_485;
      }
    }
    *v322 = v321;
    v331 = v322 + 1;
LABEL_485:
    v320[665] = v331;
LABEL_486:
    v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      v342 = *(_QWORD **)a1[1];
      v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v344 = (uint64_t *)v342[668];
      v352 = v342[669];
      if ((unint64_t)v344 >= v352)
      {
        v346 = (uint64_t *)v342[667];
        v354 = v344 - v346;
        if ((unint64_t)(v354 + 1) >> 61)
          goto LABEL_648;
        v355 = v352 - (_QWORD)v346;
        v356 = (uint64_t)(v352 - (_QWORD)v346) >> 2;
        if (v356 <= v354 + 1)
          v356 = v354 + 1;
        if (v355 >= 0x7FFFFFFFFFFFFFF8)
          v357 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v357 = v356;
        if (v357)
        {
          v358 = (char *)sub_40FC((uint64_t)(v342 + 669), v357);
          v344 = (uint64_t *)v342[668];
          v346 = (uint64_t *)v342[667];
        }
        else
        {
          v358 = 0;
        }
        v359 = (uint64_t *)&v358[8 * v354];
        v360 = &v358[8 * v357];
        *v359 = v343;
        v353 = v359 + 1;
        while (v344 != v346)
        {
          v362 = *--v344;
          *--v359 = v362;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1)
        goto LABEL_518;
      v342 = *(_QWORD **)a1[1];
      v343 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v344 = (uint64_t *)v342[668];
      v345 = v342[669];
      if ((unint64_t)v344 >= v345)
      {
        v346 = (uint64_t *)v342[667];
        v347 = v344 - v346;
        if ((unint64_t)(v347 + 1) >> 61)
          goto LABEL_648;
        v348 = v345 - (_QWORD)v346;
        v349 = (uint64_t)(v345 - (_QWORD)v346) >> 2;
        if (v349 <= v347 + 1)
          v349 = v347 + 1;
        if (v348 >= 0x7FFFFFFFFFFFFFF8)
          v350 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v350 = v349;
        if (v350)
        {
          v351 = (char *)sub_40FC((uint64_t)(v342 + 669), v350);
          v344 = (uint64_t *)v342[668];
          v346 = (uint64_t *)v342[667];
        }
        else
        {
          v351 = 0;
        }
        v359 = (uint64_t *)&v351[8 * v347];
        v360 = &v351[8 * v350];
        *v359 = v343;
        v353 = v359 + 1;
        while (v344 != v346)
        {
          v361 = *--v344;
          *--v359 = v361;
        }
LABEL_515:
        v342[667] = v359;
        v342[668] = v353;
        v342[669] = v360;
        if (v346)
          operator delete(v346);
        goto LABEL_517;
      }
    }
    *v344 = v343;
    v353 = v344 + 1;
LABEL_517:
    v342[668] = v353;
LABEL_518:
    v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[671];
      v374 = v364[672];
      if ((unint64_t)v366 >= v374)
      {
        v368 = (uint64_t *)v364[670];
        v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61)
          goto LABEL_648;
        v377 = v374 - (_QWORD)v368;
        v378 = (uint64_t)(v374 - (_QWORD)v368) >> 2;
        if (v378 <= v376 + 1)
          v378 = v376 + 1;
        if (v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
        {
          v380 = (char *)sub_40FC((uint64_t)(v364 + 672), v379);
          v366 = (uint64_t *)v364[671];
          v368 = (uint64_t *)v364[670];
        }
        else
        {
          v380 = 0;
        }
        v381 = (uint64_t *)&v380[8 * v376];
        v382 = &v380[8 * v379];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v384 = *--v366;
          *--v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1)
        goto LABEL_550;
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[671];
      v367 = v364[672];
      if ((unint64_t)v366 >= v367)
      {
        v368 = (uint64_t *)v364[670];
        v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61)
          goto LABEL_648;
        v370 = v367 - (_QWORD)v368;
        v371 = (uint64_t)(v367 - (_QWORD)v368) >> 2;
        if (v371 <= v369 + 1)
          v371 = v369 + 1;
        if (v370 >= 0x7FFFFFFFFFFFFFF8)
          v372 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v372 = v371;
        if (v372)
        {
          v373 = (char *)sub_40FC((uint64_t)(v364 + 672), v372);
          v366 = (uint64_t *)v364[671];
          v368 = (uint64_t *)v364[670];
        }
        else
        {
          v373 = 0;
        }
        v381 = (uint64_t *)&v373[8 * v369];
        v382 = &v373[8 * v372];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v383 = *--v366;
          *--v381 = v383;
        }
LABEL_547:
        v364[670] = v381;
        v364[671] = v375;
        v364[672] = v382;
        if (v368)
          operator delete(v368);
        goto LABEL_549;
      }
    }
    *v366 = v365;
    v375 = v366 + 1;
LABEL_549:
    v364[671] = v375;
LABEL_550:
    v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      v386 = *(_QWORD **)a1[1];
      v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      v388 = (uint64_t *)v386[674];
      v396 = v386[675];
      if ((unint64_t)v388 >= v396)
      {
        v390 = (uint64_t *)v386[673];
        v398 = v388 - v390;
        if ((unint64_t)(v398 + 1) >> 61)
          goto LABEL_648;
        v399 = v396 - (_QWORD)v390;
        v400 = (uint64_t)(v396 - (_QWORD)v390) >> 2;
        if (v400 <= v398 + 1)
          v400 = v398 + 1;
        if (v399 >= 0x7FFFFFFFFFFFFFF8)
          v401 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v401 = v400;
        if (v401)
        {
          v402 = (char *)sub_40FC((uint64_t)(v386 + 675), v401);
          v388 = (uint64_t *)v386[674];
          v390 = (uint64_t *)v386[673];
        }
        else
        {
          v402 = 0;
        }
        v403 = (uint64_t *)&v402[8 * v398];
        v404 = &v402[8 * v401];
        *v403 = v387;
        v397 = v403 + 1;
        while (v388 != v390)
        {
          v406 = *--v388;
          *--v403 = v406;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1)
        goto LABEL_582;
      v386 = *(_QWORD **)a1[1];
      v387 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      v388 = (uint64_t *)v386[674];
      v389 = v386[675];
      if ((unint64_t)v388 >= v389)
      {
        v390 = (uint64_t *)v386[673];
        v391 = v388 - v390;
        if ((unint64_t)(v391 + 1) >> 61)
          goto LABEL_648;
        v392 = v389 - (_QWORD)v390;
        v393 = (uint64_t)(v389 - (_QWORD)v390) >> 2;
        if (v393 <= v391 + 1)
          v393 = v391 + 1;
        if (v392 >= 0x7FFFFFFFFFFFFFF8)
          v394 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v394 = v393;
        if (v394)
        {
          v395 = (char *)sub_40FC((uint64_t)(v386 + 675), v394);
          v388 = (uint64_t *)v386[674];
          v390 = (uint64_t *)v386[673];
        }
        else
        {
          v395 = 0;
        }
        v403 = (uint64_t *)&v395[8 * v391];
        v404 = &v395[8 * v394];
        *v403 = v387;
        v397 = v403 + 1;
        while (v388 != v390)
        {
          v405 = *--v388;
          *--v403 = v405;
        }
LABEL_579:
        v386[673] = v403;
        v386[674] = v397;
        v386[675] = v404;
        if (v390)
          operator delete(v390);
        goto LABEL_581;
      }
    }
    *v388 = v387;
    v397 = v388 + 1;
LABEL_581:
    v386[674] = v397;
LABEL_582:
    v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      v408 = *(_QWORD **)a1[1];
      v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v410 = (uint64_t *)v408[677];
      v418 = v408[678];
      if ((unint64_t)v410 >= v418)
      {
        v412 = (uint64_t *)v408[676];
        v420 = v410 - v412;
        if ((unint64_t)(v420 + 1) >> 61)
          goto LABEL_648;
        v421 = v418 - (_QWORD)v412;
        v422 = (uint64_t)(v418 - (_QWORD)v412) >> 2;
        if (v422 <= v420 + 1)
          v422 = v420 + 1;
        if (v421 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v422;
        if (v423)
        {
          v424 = (char *)sub_40FC((uint64_t)(v408 + 678), v423);
          v410 = (uint64_t *)v408[677];
          v412 = (uint64_t *)v408[676];
        }
        else
        {
          v424 = 0;
        }
        v425 = (uint64_t *)&v424[8 * v420];
        v426 = &v424[8 * v423];
        *v425 = v409;
        v419 = v425 + 1;
        while (v410 != v412)
        {
          v428 = *--v410;
          *--v425 = v428;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v407 != 1)
        goto LABEL_614;
      v408 = *(_QWORD **)a1[1];
      v409 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v410 = (uint64_t *)v408[677];
      v411 = v408[678];
      if ((unint64_t)v410 >= v411)
      {
        v412 = (uint64_t *)v408[676];
        v413 = v410 - v412;
        if ((unint64_t)(v413 + 1) >> 61)
          goto LABEL_648;
        v414 = v411 - (_QWORD)v412;
        v415 = (uint64_t)(v411 - (_QWORD)v412) >> 2;
        if (v415 <= v413 + 1)
          v415 = v413 + 1;
        if (v414 >= 0x7FFFFFFFFFFFFFF8)
          v416 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v416 = v415;
        if (v416)
        {
          v417 = (char *)sub_40FC((uint64_t)(v408 + 678), v416);
          v410 = (uint64_t *)v408[677];
          v412 = (uint64_t *)v408[676];
        }
        else
        {
          v417 = 0;
        }
        v425 = (uint64_t *)&v417[8 * v413];
        v426 = &v417[8 * v416];
        *v425 = v409;
        v419 = v425 + 1;
        while (v410 != v412)
        {
          v427 = *--v410;
          *--v425 = v427;
        }
LABEL_611:
        v408[676] = v425;
        v408[677] = v419;
        v408[678] = v426;
        if (v412)
          operator delete(v412);
        goto LABEL_613;
      }
    }
    *v410 = v409;
    v419 = v410 + 1;
LABEL_613:
    v408[677] = v419;
LABEL_614:
    v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      v441 = a1[2];
      v431 = *(_QWORD **)a1[1];
      v432 = *(_DWORD *)(v441 + 100) & 0x7FFFFLL;
      v433 = (uint64_t *)v431[680];
      v442 = v431[681];
      if ((unint64_t)v433 >= v442)
      {
        v435 = (uint64_t *)v431[679];
        v444 = v433 - v435;
        if (!((unint64_t)(v444 + 1) >> 61))
        {
          v445 = v442 - (_QWORD)v435;
          v446 = (uint64_t)(v442 - (_QWORD)v435) >> 2;
          if (v446 <= v444 + 1)
            v446 = v444 + 1;
          if (v445 >= 0x7FFFFFFFFFFFFFF8)
            v447 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v447 = v446;
          if (v447)
          {
            v448 = (char *)sub_40FC((uint64_t)(v431 + 681), v447);
            v433 = (uint64_t *)v431[680];
            v435 = (uint64_t *)v431[679];
          }
          else
          {
            v448 = 0;
          }
          v449 = (uint64_t *)&v448[8 * v444];
          v450 = &v448[8 * v447];
          *v449 = v432;
          v443 = v449 + 1;
          while (v433 != v435)
          {
            v452 = *--v433;
            *--v449 = v452;
          }
          goto LABEL_643;
        }
LABEL_648:
        sub_4074();
      }
    }
    else
    {
      if (v429 != 1)
      {
LABEL_646:
        *a2 = 1;
        return;
      }
      v430 = a1[2];
      v431 = *(_QWORD **)a1[1];
      v432 = *(_DWORD *)(v430 + 100) & 0x7FFFFLL;
      v433 = (uint64_t *)v431[680];
      v434 = v431[681];
      if ((unint64_t)v433 >= v434)
      {
        v435 = (uint64_t *)v431[679];
        v436 = v433 - v435;
        if (!((unint64_t)(v436 + 1) >> 61))
        {
          v437 = v434 - (_QWORD)v435;
          v438 = (uint64_t)(v434 - (_QWORD)v435) >> 2;
          if (v438 <= v436 + 1)
            v438 = v436 + 1;
          if (v437 >= 0x7FFFFFFFFFFFFFF8)
            v439 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v439 = v438;
          if (v439)
          {
            v440 = (char *)sub_40FC((uint64_t)(v431 + 681), v439);
            v433 = (uint64_t *)v431[680];
            v435 = (uint64_t *)v431[679];
          }
          else
          {
            v440 = 0;
          }
          v449 = (uint64_t *)&v440[8 * v436];
          v450 = &v440[8 * v439];
          *v449 = v432;
          v443 = v449 + 1;
          while (v433 != v435)
          {
            v451 = *--v433;
            *--v449 = v451;
          }
LABEL_643:
          v431[679] = v449;
          v431[680] = v443;
          v431[681] = v450;
          if (v435)
            operator delete(v435);
          goto LABEL_645;
        }
        goto LABEL_648;
      }
    }
    *v433 = v432;
    v443 = v433 + 1;
LABEL_645:
    v431[680] = v443;
    goto LABEL_646;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (unsigned int *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[623] - 8) += v17[12] & 0x7FFFF;
    *(_QWORD *)(v19[626] - 8) += v17[22] & 0x7FFFF;
    *(_QWORD *)(v19[629] - 8) += ((unint64_t)v17[6] >> 1) & 0x7FFFF;
    *(_QWORD *)(v19[632] - 8) += v17[16] & 0x7FFFF;
    *(_QWORD *)(v19[635] - 8) += v17[8] & 0x7FFFF;
    *(_QWORD *)(v19[638] - 8) += v17[18] & 0x7FFFF;
    *(_QWORD *)(v19[641] - 8) += v17[11] & 0x7FFFF;
    *(_QWORD *)(v19[644] - 8) += v17[21] & 0x7FFFF;
    *(_QWORD *)(v19[647] - 8) += v17[10] & 0x7FFFF;
    *(_QWORD *)(v19[650] - 8) += v17[20] & 0x7FFFF;
    v20 = (_DWORD *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[653] - 8) += v20[14] & 0x7FFFF;
    *(_QWORD *)(v21[656] - 8) += v20[24] & 0x7FFFF;
    *(_QWORD *)(v21[659] - 8) += v20[15] & 0x7FFFF;
    *(_QWORD *)(v21[662] - 8) += v20[13] & 0x7FFFF;
    *(_QWORD *)(v21[665] - 8) += v20[23] & 0x7FFFF;
    *(_QWORD *)(v21[668] - 8) += v20[7] & 0x7FFFF;
    *(_QWORD *)(v21[671] - 8) += v20[17] & 0x7FFFF;
    *(_QWORD *)(v21[674] - 8) += v20[9] & 0x7FFFF;
    *(_QWORD *)(v21[677] - 8) += v20[19] & 0x7FFFF;
    *(_QWORD *)(v21[680] - 8) += v20[25] & 0x7FFFF;
  }
}

void sub_192F74(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  char *v300;
  unint64_t v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  uint64_t *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  _QWORD *v342;
  uint64_t v343;
  char *v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t *v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  char *v380;
  uint64_t *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  _QWORD *v386;
  uint64_t v387;
  char *v388;
  unint64_t v389;
  char *v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  unint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t *v411;
  unint64_t v412;
  uint64_t *v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  char *v418;
  uint64_t v419;
  unint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  uint64_t *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v8 = (char *)v6[683];
      v22 = v6[684];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (char *)v6[682];
        v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_616;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 684), v27);
          v8 = (char *)v6[683];
          v10 = (char *)v6[682];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v32 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v8 = (char *)v6[683];
      v9 = v6[684];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[682];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_616;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 684), v14);
          v8 = (char *)v6[683];
          v10 = (char *)v6[682];
        }
        else
        {
          v15 = 0;
        }
        v29 = &v15[8 * v11];
        v30 = &v15[8 * v14];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v31 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[682] = v29;
        v6[683] = v23;
        v6[684] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v23 = v8 + 8;
LABEL_37:
    v6[683] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[686];
      v44 = v34[687];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (uint64_t *)v34[685];
        v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_616;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 687), v49);
          v36 = (uint64_t *)v34[686];
          v38 = (uint64_t *)v34[685];
        }
        else
        {
          v50 = 0;
        }
        v51 = (uint64_t *)&v50[8 * v46];
        v52 = &v50[8 * v49];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v54 = *--v36;
          *--v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0x7FFFFLL;
      v36 = (uint64_t *)v34[686];
      v37 = v34[687];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (uint64_t *)v34[685];
        v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_616;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 687), v42);
          v36 = (uint64_t *)v34[686];
          v38 = (uint64_t *)v34[685];
        }
        else
        {
          v43 = 0;
        }
        v51 = (uint64_t *)&v43[8 * v39];
        v52 = &v43[8 * v42];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v53 = *--v36;
          *--v51 = v53;
        }
LABEL_67:
        v34[685] = v51;
        v34[686] = v45;
        v34[687] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *v36 = v35;
    v45 = v36 + 1;
LABEL_69:
    v34[686] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v58 = (char *)v56[689];
      v66 = v56[690];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (char *)v56[688];
        v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_616;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 690), v71);
          v58 = (char *)v56[689];
          v60 = (char *)v56[688];
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[8 * v68];
        v74 = &v72[8 * v71];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v76 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v58 = (char *)v56[689];
      v59 = v56[690];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (char *)v56[688];
        v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_616;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 690), v64);
          v58 = (char *)v56[689];
          v60 = (char *)v56[688];
        }
        else
        {
          v65 = 0;
        }
        v73 = &v65[8 * v61];
        v74 = &v65[8 * v64];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v75 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[688] = v73;
        v56[689] = v67;
        v56[690] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v58 = v57;
    v67 = v58 + 8;
LABEL_101:
    v56[689] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      v80 = (char *)v78[692];
      v88 = v78[693];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (char *)v78[691];
        v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_616;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 693), v93);
          v80 = (char *)v78[692];
          v82 = (char *)v78[691];
        }
        else
        {
          v94 = 0;
        }
        v95 = &v94[8 * v90];
        v96 = &v94[8 * v93];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v98 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = (unsigned __int16)*(_DWORD *)(a1[2] + 24) >> 1;
      v80 = (char *)v78[692];
      v81 = v78[693];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (char *)v78[691];
        v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_616;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 693), v86);
          v80 = (char *)v78[692];
          v82 = (char *)v78[691];
        }
        else
        {
          v87 = 0;
        }
        v95 = &v87[8 * v83];
        v96 = &v87[8 * v86];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v97 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[691] = v95;
        v78[692] = v89;
        v78[693] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v80 = v79;
    v89 = v80 + 8;
LABEL_133:
    v78[692] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[695];
      v110 = v100[696];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[694];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_616;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 696), v115);
          v102 = (uint64_t *)v100[695];
          v104 = (uint64_t *)v100[694];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v102 = (uint64_t *)v100[695];
      v103 = v100[696];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[694];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_616;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 696), v108);
          v102 = (uint64_t *)v100[695];
          v104 = (uint64_t *)v100[694];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[694] = v117;
        v100[695] = v111;
        v100[696] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[695] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v124 = (char *)v122[698];
      v132 = v122[699];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (char *)v122[697];
        v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_616;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 699), v137);
          v124 = (char *)v122[698];
          v126 = (char *)v122[697];
        }
        else
        {
          v138 = 0;
        }
        v139 = &v138[8 * v134];
        v140 = &v138[8 * v137];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v142 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v124 = (char *)v122[698];
      v125 = v122[699];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (char *)v122[697];
        v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_616;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 699), v130);
          v124 = (char *)v122[698];
          v126 = (char *)v122[697];
        }
        else
        {
          v131 = 0;
        }
        v139 = &v131[8 * v127];
        v140 = &v131[8 * v130];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v141 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[697] = v139;
        v122[698] = v133;
        v122[699] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v124 = v123;
    v133 = v124 + 8;
LABEL_197:
    v122[698] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[701];
      v154 = v144[702];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (uint64_t *)v144[700];
        v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_616;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 702), v159);
          v146 = (uint64_t *)v144[701];
          v148 = (uint64_t *)v144[700];
        }
        else
        {
          v160 = 0;
        }
        v161 = (uint64_t *)&v160[8 * v156];
        v162 = &v160[8 * v159];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v164 = *--v146;
          *--v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 52) & 0x7FFFFLL;
      v146 = (uint64_t *)v144[701];
      v147 = v144[702];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (uint64_t *)v144[700];
        v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_616;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 702), v152);
          v146 = (uint64_t *)v144[701];
          v148 = (uint64_t *)v144[700];
        }
        else
        {
          v153 = 0;
        }
        v161 = (uint64_t *)&v153[8 * v149];
        v162 = &v153[8 * v152];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v163 = *--v146;
          *--v161 = v163;
        }
LABEL_227:
        v144[700] = v161;
        v144[701] = v155;
        v144[702] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *v146 = v145;
    v155 = v146 + 1;
LABEL_229:
    v144[701] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v168 = (char *)v166[704];
      v176 = v166[705];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (char *)v166[703];
        v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_616;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 705), v181);
          v168 = (char *)v166[704];
          v170 = (char *)v166[703];
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[8 * v178];
        v184 = &v182[8 * v181];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v186 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v168 = (char *)v166[704];
      v169 = v166[705];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (char *)v166[703];
        v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_616;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 705), v174);
          v168 = (char *)v166[704];
          v170 = (char *)v166[703];
        }
        else
        {
          v175 = 0;
        }
        v183 = &v175[8 * v171];
        v184 = &v175[8 * v174];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v185 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[703] = v183;
        v166[704] = v177;
        v166[705] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v168 = v167;
    v177 = v168 + 8;
LABEL_261:
    v166[704] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[707];
      v198 = v188[708];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (uint64_t *)v188[706];
        v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_616;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 708), v203);
          v190 = (uint64_t *)v188[707];
          v192 = (uint64_t *)v188[706];
        }
        else
        {
          v204 = 0;
        }
        v205 = (uint64_t *)&v204[8 * v200];
        v206 = &v204[8 * v203];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v208 = *--v190;
          *--v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 64) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[707];
      v191 = v188[708];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (uint64_t *)v188[706];
        v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_616;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 708), v196);
          v190 = (uint64_t *)v188[707];
          v192 = (uint64_t *)v188[706];
        }
        else
        {
          v197 = 0;
        }
        v205 = (uint64_t *)&v197[8 * v193];
        v206 = &v197[8 * v196];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v207 = *--v190;
          *--v205 = v207;
        }
LABEL_291:
        v188[706] = v205;
        v188[707] = v199;
        v188[708] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *v190 = v189;
    v199 = v190 + 1;
LABEL_293:
    v188[707] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v212 = (char *)v210[710];
      v220 = v210[711];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (char *)v210[709];
        v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_616;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 711), v225);
          v212 = (char *)v210[710];
          v214 = (char *)v210[709];
        }
        else
        {
          v226 = 0;
        }
        v227 = &v226[8 * v222];
        v228 = &v226[8 * v225];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v230 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v212 = (char *)v210[710];
      v213 = v210[711];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (char *)v210[709];
        v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_616;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 711), v218);
          v212 = (char *)v210[710];
          v214 = (char *)v210[709];
        }
        else
        {
          v219 = 0;
        }
        v227 = &v219[8 * v215];
        v228 = &v219[8 * v218];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v229 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[709] = v227;
        v210[710] = v221;
        v210[711] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v212 = v211;
    v221 = v212 + 8;
LABEL_325:
    v210[710] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[713];
      v242 = v232[714];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (uint64_t *)v232[712];
        v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_616;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 714), v247);
          v234 = (uint64_t *)v232[713];
          v236 = (uint64_t *)v232[712];
        }
        else
        {
          v248 = 0;
        }
        v249 = (uint64_t *)&v248[8 * v244];
        v250 = &v248[8 * v247];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v252 = *--v234;
          *--v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 60) & 0x7FFFFLL;
      v234 = (uint64_t *)v232[713];
      v235 = v232[714];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (uint64_t *)v232[712];
        v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_616;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 714), v240);
          v234 = (uint64_t *)v232[713];
          v236 = (uint64_t *)v232[712];
        }
        else
        {
          v241 = 0;
        }
        v249 = (uint64_t *)&v241[8 * v237];
        v250 = &v241[8 * v240];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v251 = *--v234;
          *--v249 = v251;
        }
LABEL_355:
        v232[712] = v249;
        v232[713] = v243;
        v232[714] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *v234 = v233;
    v243 = v234 + 1;
LABEL_357:
    v232[713] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v256 = (char *)v254[716];
      v264 = v254[717];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (char *)v254[715];
        v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_616;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 717), v269);
          v256 = (char *)v254[716];
          v258 = (char *)v254[715];
        }
        else
        {
          v270 = 0;
        }
        v271 = &v270[8 * v266];
        v272 = &v270[8 * v269];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v274 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v256 = (char *)v254[716];
      v257 = v254[717];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (char *)v254[715];
        v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_616;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 717), v262);
          v256 = (char *)v254[716];
          v258 = (char *)v254[715];
        }
        else
        {
          v263 = 0;
        }
        v271 = &v263[8 * v259];
        v272 = &v263[8 * v262];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v273 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[715] = v271;
        v254[716] = v265;
        v254[717] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v256 = v255;
    v265 = v256 + 8;
LABEL_389:
    v254[716] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[719];
      v286 = v276[720];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (uint64_t *)v276[718];
        v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_616;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 720), v291);
          v278 = (uint64_t *)v276[719];
          v280 = (uint64_t *)v276[718];
        }
        else
        {
          v292 = 0;
        }
        v293 = (uint64_t *)&v292[8 * v288];
        v294 = &v292[8 * v291];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v296 = *--v278;
          *--v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 76) & 0x7FFFFLL;
      v278 = (uint64_t *)v276[719];
      v279 = v276[720];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (uint64_t *)v276[718];
        v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_616;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 720), v284);
          v278 = (uint64_t *)v276[719];
          v280 = (uint64_t *)v276[718];
        }
        else
        {
          v285 = 0;
        }
        v293 = (uint64_t *)&v285[8 * v281];
        v294 = &v285[8 * v284];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v295 = *--v278;
          *--v293 = v295;
        }
LABEL_419:
        v276[718] = v293;
        v276[719] = v287;
        v276[720] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *v278 = v277;
    v287 = v278 + 1;
LABEL_421:
    v276[719] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v298 = *(_QWORD **)a1[1];
      v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v300 = (char *)v298[722];
      v308 = v298[723];
      if ((unint64_t)v300 >= v308)
      {
        v302 = (char *)v298[721];
        v310 = (v300 - v302) >> 3;
        if ((unint64_t)(v310 + 1) >> 61)
          goto LABEL_616;
        v311 = v308 - (_QWORD)v302;
        v312 = (uint64_t)(v308 - (_QWORD)v302) >> 2;
        if (v312 <= v310 + 1)
          v312 = v310 + 1;
        if (v311 >= 0x7FFFFFFFFFFFFFF8)
          v313 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v313 = v312;
        if (v313)
        {
          v314 = (char *)sub_40FC((uint64_t)(v298 + 723), v313);
          v300 = (char *)v298[722];
          v302 = (char *)v298[721];
        }
        else
        {
          v314 = 0;
        }
        v315 = &v314[8 * v310];
        v316 = &v314[8 * v313];
        *(_QWORD *)v315 = v299;
        v309 = v315 + 8;
        while (v300 != v302)
        {
          v318 = *((_QWORD *)v300 - 1);
          v300 -= 8;
          *((_QWORD *)v315 - 1) = v318;
          v315 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1)
        goto LABEL_454;
      v298 = *(_QWORD **)a1[1];
      v299 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v300 = (char *)v298[722];
      v301 = v298[723];
      if ((unint64_t)v300 >= v301)
      {
        v302 = (char *)v298[721];
        v303 = (v300 - v302) >> 3;
        if ((unint64_t)(v303 + 1) >> 61)
          goto LABEL_616;
        v304 = v301 - (_QWORD)v302;
        v305 = (uint64_t)(v301 - (_QWORD)v302) >> 2;
        if (v305 <= v303 + 1)
          v305 = v303 + 1;
        if (v304 >= 0x7FFFFFFFFFFFFFF8)
          v306 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v306 = v305;
        if (v306)
        {
          v307 = (char *)sub_40FC((uint64_t)(v298 + 723), v306);
          v300 = (char *)v298[722];
          v302 = (char *)v298[721];
        }
        else
        {
          v307 = 0;
        }
        v315 = &v307[8 * v303];
        v316 = &v307[8 * v306];
        *(_QWORD *)v315 = v299;
        v309 = v315 + 8;
        while (v300 != v302)
        {
          v317 = *((_QWORD *)v300 - 1);
          v300 -= 8;
          *((_QWORD *)v315 - 1) = v317;
          v315 -= 8;
        }
LABEL_451:
        v298[721] = v315;
        v298[722] = v309;
        v298[723] = v316;
        if (v302)
          operator delete(v302);
        goto LABEL_453;
      }
    }
    *(_QWORD *)v300 = v299;
    v309 = v300 + 8;
LABEL_453:
    v298[722] = v309;
LABEL_454:
    v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[725];
      v330 = v320[726];
      if ((unint64_t)v322 >= v330)
      {
        v324 = (uint64_t *)v320[724];
        v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_616;
        v333 = v330 - (_QWORD)v324;
        v334 = (uint64_t)(v330 - (_QWORD)v324) >> 2;
        if (v334 <= v332 + 1)
          v334 = v332 + 1;
        if (v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
        {
          v336 = (char *)sub_40FC((uint64_t)(v320 + 726), v335);
          v322 = (uint64_t *)v320[725];
          v324 = (uint64_t *)v320[724];
        }
        else
        {
          v336 = 0;
        }
        v337 = (uint64_t *)&v336[8 * v332];
        v338 = &v336[8 * v335];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v340 = *--v322;
          *--v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1)
        goto LABEL_486;
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 72) & 0x7FFFFLL;
      v322 = (uint64_t *)v320[725];
      v323 = v320[726];
      if ((unint64_t)v322 >= v323)
      {
        v324 = (uint64_t *)v320[724];
        v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61)
          goto LABEL_616;
        v326 = v323 - (_QWORD)v324;
        v327 = (uint64_t)(v323 - (_QWORD)v324) >> 2;
        if (v327 <= v325 + 1)
          v327 = v325 + 1;
        if (v326 >= 0x7FFFFFFFFFFFFFF8)
          v328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v328 = v327;
        if (v328)
        {
          v329 = (char *)sub_40FC((uint64_t)(v320 + 726), v328);
          v322 = (uint64_t *)v320[725];
          v324 = (uint64_t *)v320[724];
        }
        else
        {
          v329 = 0;
        }
        v337 = (uint64_t *)&v329[8 * v325];
        v338 = &v329[8 * v328];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v339 = *--v322;
          *--v337 = v339;
        }
LABEL_483:
        v320[724] = v337;
        v320[725] = v331;
        v320[726] = v338;
        if (v324)
          operator delete(v324);
        goto LABEL_485;
      }
    }
    *v322 = v321;
    v331 = v322 + 1;
LABEL_485:
    v320[725] = v331;
LABEL_486:
    v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      v342 = *(_QWORD **)a1[1];
      v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v344 = (char *)v342[728];
      v352 = v342[729];
      if ((unint64_t)v344 >= v352)
      {
        v346 = (char *)v342[727];
        v354 = (v344 - v346) >> 3;
        if ((unint64_t)(v354 + 1) >> 61)
          goto LABEL_616;
        v355 = v352 - (_QWORD)v346;
        v356 = (uint64_t)(v352 - (_QWORD)v346) >> 2;
        if (v356 <= v354 + 1)
          v356 = v354 + 1;
        if (v355 >= 0x7FFFFFFFFFFFFFF8)
          v357 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v357 = v356;
        if (v357)
        {
          v358 = (char *)sub_40FC((uint64_t)(v342 + 729), v357);
          v344 = (char *)v342[728];
          v346 = (char *)v342[727];
        }
        else
        {
          v358 = 0;
        }
        v359 = &v358[8 * v354];
        v360 = &v358[8 * v357];
        *(_QWORD *)v359 = v343;
        v353 = v359 + 8;
        while (v344 != v346)
        {
          v362 = *((_QWORD *)v344 - 1);
          v344 -= 8;
          *((_QWORD *)v359 - 1) = v362;
          v359 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1)
        goto LABEL_518;
      v342 = *(_QWORD **)a1[1];
      v343 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v344 = (char *)v342[728];
      v345 = v342[729];
      if ((unint64_t)v344 >= v345)
      {
        v346 = (char *)v342[727];
        v347 = (v344 - v346) >> 3;
        if ((unint64_t)(v347 + 1) >> 61)
          goto LABEL_616;
        v348 = v345 - (_QWORD)v346;
        v349 = (uint64_t)(v345 - (_QWORD)v346) >> 2;
        if (v349 <= v347 + 1)
          v349 = v347 + 1;
        if (v348 >= 0x7FFFFFFFFFFFFFF8)
          v350 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v350 = v349;
        if (v350)
        {
          v351 = (char *)sub_40FC((uint64_t)(v342 + 729), v350);
          v344 = (char *)v342[728];
          v346 = (char *)v342[727];
        }
        else
        {
          v351 = 0;
        }
        v359 = &v351[8 * v347];
        v360 = &v351[8 * v350];
        *(_QWORD *)v359 = v343;
        v353 = v359 + 8;
        while (v344 != v346)
        {
          v361 = *((_QWORD *)v344 - 1);
          v344 -= 8;
          *((_QWORD *)v359 - 1) = v361;
          v359 -= 8;
        }
LABEL_515:
        v342[727] = v359;
        v342[728] = v353;
        v342[729] = v360;
        if (v346)
          operator delete(v346);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v344 = v343;
    v353 = v344 + 8;
LABEL_517:
    v342[728] = v353;
LABEL_518:
    v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[731];
      v374 = v364[732];
      if ((unint64_t)v366 >= v374)
      {
        v368 = (uint64_t *)v364[730];
        v376 = v366 - v368;
        if ((unint64_t)(v376 + 1) >> 61)
          goto LABEL_616;
        v377 = v374 - (_QWORD)v368;
        v378 = (uint64_t)(v374 - (_QWORD)v368) >> 2;
        if (v378 <= v376 + 1)
          v378 = v376 + 1;
        if (v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
        {
          v380 = (char *)sub_40FC((uint64_t)(v364 + 732), v379);
          v366 = (uint64_t *)v364[731];
          v368 = (uint64_t *)v364[730];
        }
        else
        {
          v380 = 0;
        }
        v381 = (uint64_t *)&v380[8 * v376];
        v382 = &v380[8 * v379];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v384 = *--v366;
          *--v381 = v384;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1)
        goto LABEL_550;
      v364 = *(_QWORD **)a1[1];
      v365 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v366 = (uint64_t *)v364[731];
      v367 = v364[732];
      if ((unint64_t)v366 >= v367)
      {
        v368 = (uint64_t *)v364[730];
        v369 = v366 - v368;
        if ((unint64_t)(v369 + 1) >> 61)
          goto LABEL_616;
        v370 = v367 - (_QWORD)v368;
        v371 = (uint64_t)(v367 - (_QWORD)v368) >> 2;
        if (v371 <= v369 + 1)
          v371 = v369 + 1;
        if (v370 >= 0x7FFFFFFFFFFFFFF8)
          v372 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v372 = v371;
        if (v372)
        {
          v373 = (char *)sub_40FC((uint64_t)(v364 + 732), v372);
          v366 = (uint64_t *)v364[731];
          v368 = (uint64_t *)v364[730];
        }
        else
        {
          v373 = 0;
        }
        v381 = (uint64_t *)&v373[8 * v369];
        v382 = &v373[8 * v372];
        *v381 = v365;
        v375 = v381 + 1;
        while (v366 != v368)
        {
          v383 = *--v366;
          *--v381 = v383;
        }
LABEL_547:
        v364[730] = v381;
        v364[731] = v375;
        v364[732] = v382;
        if (v368)
          operator delete(v368);
        goto LABEL_549;
      }
    }
    *v366 = v365;
    v375 = v366 + 1;
LABEL_549:
    v364[731] = v375;
LABEL_550:
    v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      v386 = *(_QWORD **)a1[1];
      v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v388 = (char *)v386[734];
      v396 = v386[735];
      if ((unint64_t)v388 >= v396)
      {
        v390 = (char *)v386[733];
        v398 = (v388 - v390) >> 3;
        if ((unint64_t)(v398 + 1) >> 61)
          goto LABEL_616;
        v399 = v396 - (_QWORD)v390;
        v400 = (uint64_t)(v396 - (_QWORD)v390) >> 2;
        if (v400 <= v398 + 1)
          v400 = v398 + 1;
        if (v399 >= 0x7FFFFFFFFFFFFFF8)
          v401 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v401 = v400;
        if (v401)
        {
          v402 = (char *)sub_40FC((uint64_t)(v386 + 735), v401);
          v388 = (char *)v386[734];
          v390 = (char *)v386[733];
        }
        else
        {
          v402 = 0;
        }
        v403 = &v402[8 * v398];
        v404 = &v402[8 * v401];
        *(_QWORD *)v403 = v387;
        v397 = v403 + 8;
        while (v388 != v390)
        {
          v406 = *((_QWORD *)v388 - 1);
          v388 -= 8;
          *((_QWORD *)v403 - 1) = v406;
          v403 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1)
        goto LABEL_582;
      v386 = *(_QWORD **)a1[1];
      v387 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v388 = (char *)v386[734];
      v389 = v386[735];
      if ((unint64_t)v388 >= v389)
      {
        v390 = (char *)v386[733];
        v391 = (v388 - v390) >> 3;
        if ((unint64_t)(v391 + 1) >> 61)
          goto LABEL_616;
        v392 = v389 - (_QWORD)v390;
        v393 = (uint64_t)(v389 - (_QWORD)v390) >> 2;
        if (v393 <= v391 + 1)
          v393 = v391 + 1;
        if (v392 >= 0x7FFFFFFFFFFFFFF8)
          v394 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v394 = v393;
        if (v394)
        {
          v395 = (char *)sub_40FC((uint64_t)(v386 + 735), v394);
          v388 = (char *)v386[734];
          v390 = (char *)v386[733];
        }
        else
        {
          v395 = 0;
        }
        v403 = &v395[8 * v391];
        v404 = &v395[8 * v394];
        *(_QWORD *)v403 = v387;
        v397 = v403 + 8;
        while (v388 != v390)
        {
          v405 = *((_QWORD *)v388 - 1);
          v388 -= 8;
          *((_QWORD *)v403 - 1) = v405;
          v403 -= 8;
        }
LABEL_579:
        v386[733] = v403;
        v386[734] = v397;
        v386[735] = v404;
        if (v390)
          operator delete(v390);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v388 = v387;
    v397 = v388 + 8;
LABEL_581:
    v386[734] = v397;
LABEL_582:
    v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      v419 = a1[2];
      v409 = *(_QWORD **)a1[1];
      v410 = *(_DWORD *)(v419 + 56) & 0x7FFFFLL;
      v411 = (uint64_t *)v409[737];
      v420 = v409[738];
      if ((unint64_t)v411 >= v420)
      {
        v413 = (uint64_t *)v409[736];
        v422 = v411 - v413;
        if (!((unint64_t)(v422 + 1) >> 61))
        {
          v423 = v420 - (_QWORD)v413;
          v424 = (uint64_t)(v420 - (_QWORD)v413) >> 2;
          if (v424 <= v422 + 1)
            v424 = v422 + 1;
          if (v423 >= 0x7FFFFFFFFFFFFFF8)
            v425 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v425 = v424;
          if (v425)
          {
            v426 = (char *)sub_40FC((uint64_t)(v409 + 738), v425);
            v411 = (uint64_t *)v409[737];
            v413 = (uint64_t *)v409[736];
          }
          else
          {
            v426 = 0;
          }
          v427 = (uint64_t *)&v426[8 * v422];
          v428 = &v426[8 * v425];
          *v427 = v410;
          v421 = v427 + 1;
          while (v411 != v413)
          {
            v430 = *--v411;
            *--v427 = v430;
          }
          goto LABEL_611;
        }
LABEL_616:
        sub_4074();
      }
    }
    else
    {
      if (v407 != 1)
      {
LABEL_614:
        *a2 = 1;
        return;
      }
      v408 = a1[2];
      v409 = *(_QWORD **)a1[1];
      v410 = *(_DWORD *)(v408 + 56) & 0x7FFFFLL;
      v411 = (uint64_t *)v409[737];
      v412 = v409[738];
      if ((unint64_t)v411 >= v412)
      {
        v413 = (uint64_t *)v409[736];
        v414 = v411 - v413;
        if (!((unint64_t)(v414 + 1) >> 61))
        {
          v415 = v412 - (_QWORD)v413;
          v416 = (uint64_t)(v412 - (_QWORD)v413) >> 2;
          if (v416 <= v414 + 1)
            v416 = v414 + 1;
          if (v415 >= 0x7FFFFFFFFFFFFFF8)
            v417 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v417 = v416;
          if (v417)
          {
            v418 = (char *)sub_40FC((uint64_t)(v409 + 738), v417);
            v411 = (uint64_t *)v409[737];
            v413 = (uint64_t *)v409[736];
          }
          else
          {
            v418 = 0;
          }
          v427 = (uint64_t *)&v418[8 * v414];
          v428 = &v418[8 * v417];
          *v427 = v410;
          v421 = v427 + 1;
          while (v411 != v413)
          {
            v429 = *--v411;
            *--v427 = v429;
          }
LABEL_611:
          v409[736] = v427;
          v409[737] = v421;
          v409[738] = v428;
          if (v413)
            operator delete(v413);
          goto LABEL_613;
        }
        goto LABEL_616;
      }
    }
    *v411 = v410;
    v421 = v411 + 1;
LABEL_613:
    v409[737] = v421;
    goto LABEL_614;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[683] - 8) += *(_WORD *)(v17 + 36) & 0x7FFF;
    *(_QWORD *)(v19[686] - 8) += *(_DWORD *)(v17 + 68) & 0x7FFFF;
    *(_QWORD *)(v19[689] - 8) += *(_WORD *)(v17 + 42) & 0x7FFF;
    *(_QWORD *)(v19[692] - 8) += (unsigned __int16)*(_DWORD *)(v17 + 24) >> 1;
    *(_QWORD *)(v19[695] - 8) += *(_DWORD *)(v17 + 44) & 0x7FFFF;
    *(_QWORD *)(v19[698] - 8) += *(_WORD *)(v17 + 28) & 0x7FFF;
    *(_QWORD *)(v19[701] - 8) += *(_DWORD *)(v17 + 52) & 0x7FFFF;
    *(_QWORD *)(v19[704] - 8) += *(_WORD *)(v17 + 34) & 0x7FFF;
    *(_QWORD *)(v19[707] - 8) += *(_DWORD *)(v17 + 64) & 0x7FFFF;
    *(_QWORD *)(v19[710] - 8) += *(_WORD *)(v17 + 32) & 0x7FFF;
    v20 = a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[713] - 8) += *(_DWORD *)(v20 + 60) & 0x7FFFF;
    *(_QWORD *)(v21[716] - 8) += *(_WORD *)(v20 + 40) & 0x7FFF;
    *(_QWORD *)(v21[719] - 8) += *(_DWORD *)(v20 + 76) & 0x7FFFF;
    *(_QWORD *)(v21[722] - 8) += *(_WORD *)(v20 + 38) & 0x7FFF;
    *(_QWORD *)(v21[725] - 8) += *(_DWORD *)(v20 + 72) & 0x7FFFF;
    *(_QWORD *)(v21[728] - 8) += *(_WORD *)(v20 + 26) & 0x7FFF;
    *(_QWORD *)(v21[731] - 8) += *(_DWORD *)(v20 + 48) & 0x7FFFF;
    *(_QWORD *)(v21[734] - 8) += *(_WORD *)(v20 + 30) & 0x7FFF;
    *(_QWORD *)(v21[737] - 8) += *(_DWORD *)(v20 + 56) & 0x7FFFF;
  }
}

void sub_194F74(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v8 = (char *)v6[473];
      v19 = v6[474];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[472];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_264;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 474), v24);
          v8 = (char *)v6[473];
          v10 = (char *)v6[472];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v8 = (char *)v6[473];
      v9 = v6[474];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[472];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_264;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 474), v14);
          v8 = (char *)v6[473];
          v10 = (char *)v6[472];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[472] = v26;
        v6[473] = v20;
        v6[474] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[473] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[476];
      v41 = v31[477];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[475];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_264;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 477), v46);
          v33 = (uint64_t *)v31[476];
          v35 = (uint64_t *)v31[475];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[476];
      v34 = v31[477];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[475];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_264;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 477), v39);
          v33 = (uint64_t *)v31[476];
          v35 = (uint64_t *)v31[475];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[475] = v48;
        v31[476] = v42;
        v31[477] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[476] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v55 = (char *)v53[479];
      v63 = v53[480];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[478];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_264;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 480), v68);
          v55 = (char *)v53[479];
          v57 = (char *)v53[478];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v55 = (char *)v53[479];
      v56 = v53[480];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[478];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_264;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 480), v61);
          v55 = (char *)v53[479];
          v57 = (char *)v53[478];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[478] = v70;
        v53[479] = v64;
        v53[480] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[479] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v77 = (uint64_t *)v75[482];
      v85 = v75[483];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (uint64_t *)v75[481];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_264;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 483), v90);
          v77 = (uint64_t *)v75[482];
          v79 = (uint64_t *)v75[481];
        }
        else
        {
          v91 = 0;
        }
        v92 = (uint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v77 = (uint64_t *)v75[482];
      v78 = v75[483];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (uint64_t *)v75[481];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_264;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 483), v83);
          v77 = (uint64_t *)v75[482];
          v79 = (uint64_t *)v75[481];
        }
        else
        {
          v84 = 0;
        }
        v92 = (uint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[481] = v92;
        v75[482] = v86;
        v75[483] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[482] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v99 = (uint64_t *)v97[485];
      v107 = v97[486];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[484];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_264;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 486), v112);
          v99 = (uint64_t *)v97[485];
          v101 = (uint64_t *)v97[484];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v99 = (uint64_t *)v97[485];
      v100 = v97[486];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[484];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_264;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 486), v105);
          v99 = (uint64_t *)v97[485];
          v101 = (uint64_t *)v97[484];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[484] = v114;
        v97[485] = v108;
        v97[486] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[485] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v130 = a1[1];
      v120 = *(_QWORD **)v130;
      v121 = *(unsigned __int16 *)(a1[2] + 46);
      v122 = *(char **)(*(_QWORD *)v130 + 3904);
      v131 = *(_QWORD *)(*(_QWORD *)v130 + 3912);
      if ((unint64_t)v122 >= v131)
      {
        v124 = (char *)v120[487];
        v133 = (v122 - v124) >> 3;
        if ((unint64_t)(v133 + 1) >> 61)
          goto LABEL_264;
        v134 = v131 - (_QWORD)v124;
        v135 = (uint64_t)(v131 - (_QWORD)v124) >> 2;
        if (v135 <= v133 + 1)
          v135 = v133 + 1;
        if (v134 >= 0x7FFFFFFFFFFFFFF8)
          v136 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v136 = v135;
        if (v136)
        {
          v137 = (char *)sub_40FC((uint64_t)(v120 + 489), v136);
          v122 = (char *)v120[488];
          v124 = (char *)v120[487];
        }
        else
        {
          v137 = 0;
        }
        v138 = &v137[8 * v133];
        v139 = &v137[8 * v136];
        *(_QWORD *)v138 = v121;
        v132 = v138 + 8;
        while (v122 != v124)
        {
          v141 = *((_QWORD *)v122 - 1);
          v122 -= 8;
          *((_QWORD *)v138 - 1) = v141;
          v138 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = a1[1];
      v120 = *(_QWORD **)v119;
      v121 = *(unsigned __int16 *)(a1[2] + 46);
      v122 = *(char **)(*(_QWORD *)v119 + 3904);
      v123 = *(_QWORD *)(*(_QWORD *)v119 + 3912);
      if ((unint64_t)v122 >= v123)
      {
        v124 = (char *)v120[487];
        v125 = (v122 - v124) >> 3;
        if ((unint64_t)(v125 + 1) >> 61)
          goto LABEL_264;
        v126 = v123 - (_QWORD)v124;
        v127 = (uint64_t)(v123 - (_QWORD)v124) >> 2;
        if (v127 <= v125 + 1)
          v127 = v125 + 1;
        if (v126 >= 0x7FFFFFFFFFFFFFF8)
          v128 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v128 = v127;
        if (v128)
        {
          v129 = (char *)sub_40FC((uint64_t)(v120 + 489), v128);
          v122 = (char *)v120[488];
          v124 = (char *)v120[487];
        }
        else
        {
          v129 = 0;
        }
        v138 = &v129[8 * v125];
        v139 = &v129[8 * v128];
        *(_QWORD *)v138 = v121;
        v132 = v138 + 8;
        while (v122 != v124)
        {
          v140 = *((_QWORD *)v122 - 1);
          v122 -= 8;
          *((_QWORD *)v138 - 1) = v140;
          v138 -= 8;
        }
LABEL_195:
        v120[487] = v138;
        v120[488] = v132;
        v120[489] = v139;
        if (v124)
          operator delete(v124);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v122 = v121;
    v132 = v122 + 8;
LABEL_197:
    v120[488] = v132;
LABEL_198:
    v142 = 1 << *(_DWORD *)(v3 + 48);
    if (v142 == 2)
    {
      v154 = a1[1];
      v144 = *(_QWORD **)v154;
      v145 = *(unsigned __int16 *)(a1[2] + 44);
      v146 = *(char **)(*(_QWORD *)v154 + 3928);
      v155 = *(_QWORD *)(*(_QWORD *)v154 + 3936);
      if ((unint64_t)v146 >= v155)
      {
        v148 = (char *)v144[490];
        v157 = (v146 - v148) >> 3;
        if ((unint64_t)(v157 + 1) >> 61)
          goto LABEL_264;
        v158 = v155 - (_QWORD)v148;
        v159 = (uint64_t)(v155 - (_QWORD)v148) >> 2;
        if (v159 <= v157 + 1)
          v159 = v157 + 1;
        if (v158 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v159;
        if (v160)
        {
          v161 = (char *)sub_40FC((uint64_t)(v144 + 492), v160);
          v146 = (char *)v144[491];
          v148 = (char *)v144[490];
        }
        else
        {
          v161 = 0;
        }
        v162 = &v161[8 * v157];
        v163 = &v161[8 * v160];
        *(_QWORD *)v162 = v145;
        v156 = v162 + 8;
        while (v146 != v148)
        {
          v165 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v162 - 1) = v165;
          v162 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v142 != 1)
        goto LABEL_230;
      v143 = a1[1];
      v144 = *(_QWORD **)v143;
      v145 = *(unsigned __int16 *)(a1[2] + 44);
      v146 = *(char **)(*(_QWORD *)v143 + 3928);
      v147 = *(_QWORD *)(*(_QWORD *)v143 + 3936);
      if ((unint64_t)v146 >= v147)
      {
        v148 = (char *)v144[490];
        v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_264;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 492), v152);
          v146 = (char *)v144[491];
          v148 = (char *)v144[490];
        }
        else
        {
          v153 = 0;
        }
        v162 = &v153[8 * v149];
        v163 = &v153[8 * v152];
        *(_QWORD *)v162 = v145;
        v156 = v162 + 8;
        while (v146 != v148)
        {
          v164 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v162 - 1) = v164;
          v162 -= 8;
        }
LABEL_227:
        v144[490] = v162;
        v144[491] = v156;
        v144[492] = v163;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v146 = v145;
    v156 = v146 + 8;
LABEL_229:
    v144[491] = v156;
LABEL_230:
    v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      v179 = a1[1];
      v180 = a1[2];
      v169 = *(_QWORD **)v179;
      v170 = *(unsigned __int16 *)(v180 + 28);
      v171 = *(char **)(*(_QWORD *)v179 + 3952);
      v181 = *(_QWORD *)(*(_QWORD *)v179 + 3960);
      if ((unint64_t)v171 >= v181)
      {
        v173 = (char *)v169[493];
        v183 = (v171 - v173) >> 3;
        if (!((unint64_t)(v183 + 1) >> 61))
        {
          v184 = v181 - (_QWORD)v173;
          v185 = (uint64_t)(v181 - (_QWORD)v173) >> 2;
          if (v185 <= v183 + 1)
            v185 = v183 + 1;
          if (v184 >= 0x7FFFFFFFFFFFFFF8)
            v186 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v186 = v185;
          if (v186)
          {
            v187 = (char *)sub_40FC((uint64_t)(v169 + 495), v186);
            v171 = (char *)v169[494];
            v173 = (char *)v169[493];
          }
          else
          {
            v187 = 0;
          }
          v188 = &v187[8 * v183];
          v189 = &v187[8 * v186];
          *(_QWORD *)v188 = v170;
          v182 = v188 + 8;
          while (v171 != v173)
          {
            v191 = *((_QWORD *)v171 - 1);
            v171 -= 8;
            *((_QWORD *)v188 - 1) = v191;
            v188 -= 8;
          }
          goto LABEL_259;
        }
LABEL_264:
        sub_4074();
      }
    }
    else
    {
      if (v166 != 1)
      {
LABEL_262:
        *a2 = 1;
        return;
      }
      v167 = a1[1];
      v168 = a1[2];
      v169 = *(_QWORD **)v167;
      v170 = *(unsigned __int16 *)(v168 + 28);
      v171 = *(char **)(*(_QWORD *)v167 + 3952);
      v172 = *(_QWORD *)(*(_QWORD *)v167 + 3960);
      if ((unint64_t)v171 >= v172)
      {
        v173 = (char *)v169[493];
        v174 = (v171 - v173) >> 3;
        if (!((unint64_t)(v174 + 1) >> 61))
        {
          v175 = v172 - (_QWORD)v173;
          v176 = (uint64_t)(v172 - (_QWORD)v173) >> 2;
          if (v176 <= v174 + 1)
            v176 = v174 + 1;
          if (v175 >= 0x7FFFFFFFFFFFFFF8)
            v177 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v177 = v176;
          if (v177)
          {
            v178 = (char *)sub_40FC((uint64_t)(v169 + 495), v177);
            v171 = (char *)v169[494];
            v173 = (char *)v169[493];
          }
          else
          {
            v178 = 0;
          }
          v188 = &v178[8 * v174];
          v189 = &v178[8 * v177];
          *(_QWORD *)v188 = v170;
          v182 = v188 + 8;
          while (v171 != v173)
          {
            v190 = *((_QWORD *)v171 - 1);
            v171 -= 8;
            *((_QWORD *)v188 - 1) = v190;
            v188 -= 8;
          }
LABEL_259:
          v169[493] = v188;
          v169[494] = v182;
          v169[495] = v189;
          if (v173)
            operator delete(v173);
          goto LABEL_261;
        }
        goto LABEL_264;
      }
    }
    *(_QWORD *)v171 = v170;
    v182 = v171 + 8;
LABEL_261:
    v169[494] = v182;
    goto LABEL_262;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[473] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(_QWORD *)(v18[476] - 8) += *(_DWORD *)(v17 + 40) & 0x1FFFF;
    *(_QWORD *)(v18[479] - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(_QWORD *)(v18[482] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(_QWORD *)(v18[485] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(_QWORD *)(v18[488] - 8) += *(unsigned __int16 *)(v17 + 46);
    *(_QWORD *)(v18[491] - 8) += *(unsigned __int16 *)(v17 + 44);
    *(_QWORD *)(v18[494] - 8) += *(unsigned __int16 *)(v17 + 28);
  }
}

void sub_195C8C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  char *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  _QWORD *v235;
  uint64_t v236;
  char *v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  _QWORD *v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  uint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t *v305;
  unint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  unint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  uint64_t *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t *v328;
  unint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  char *v335;
  uint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  uint64_t *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      v8 = (unint64_t *)v6[416];
      v23 = v6[417];
      if ((unint64_t)v8 >= v23)
      {
        v10 = (unint64_t *)v6[415];
        v25 = v8 - v10;
        if ((unint64_t)(v25 + 1) >> 61)
          goto LABEL_488;
        v26 = v23 - (_QWORD)v10;
        v27 = (uint64_t)(v23 - (_QWORD)v10) >> 2;
        if (v27 <= v25 + 1)
          v27 = v25 + 1;
        if (v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          v29 = (char *)sub_40FC((uint64_t)(v6 + 417), v28);
          v8 = (unint64_t *)v6[416];
          v10 = (unint64_t *)v6[415];
        }
        else
        {
          v29 = 0;
        }
        v30 = (unint64_t *)&v29[8 * v25];
        v31 = &v29[8 * v28];
        *v30 = v7;
        v24 = v30 + 1;
        while (v8 != v10)
        {
          v33 = *--v8;
          *--v30 = v33;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 40) >> 17;
      v8 = (unint64_t *)v6[416];
      v9 = v6[417];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (unint64_t *)v6[415];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_488;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 417), v14);
          v8 = (unint64_t *)v6[416];
          v10 = (unint64_t *)v6[415];
        }
        else
        {
          v15 = 0;
        }
        v30 = (unint64_t *)&v15[8 * v11];
        v31 = &v15[8 * v14];
        *v30 = v7;
        v24 = v30 + 1;
        while (v8 != v10)
        {
          v32 = *--v8;
          *--v30 = v32;
        }
LABEL_35:
        v6[415] = v30;
        v6[416] = v24;
        v6[417] = v31;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v24 = v8 + 1;
LABEL_37:
    v6[416] = v24;
LABEL_38:
    v34 = 1 << *(_DWORD *)(v3 + 48);
    if (v34 == 2)
    {
      v35 = *(_QWORD **)a1[1];
      v36 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v37 = (uint64_t *)v35[419];
      v45 = v35[420];
      if ((unint64_t)v37 >= v45)
      {
        v39 = (uint64_t *)v35[418];
        v47 = v37 - v39;
        if ((unint64_t)(v47 + 1) >> 61)
          goto LABEL_488;
        v48 = v45 - (_QWORD)v39;
        v49 = (uint64_t)(v45 - (_QWORD)v39) >> 2;
        if (v49 <= v47 + 1)
          v49 = v47 + 1;
        if (v48 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
        {
          v51 = (char *)sub_40FC((uint64_t)(v35 + 420), v50);
          v37 = (uint64_t *)v35[419];
          v39 = (uint64_t *)v35[418];
        }
        else
        {
          v51 = 0;
        }
        v52 = (uint64_t *)&v51[8 * v47];
        v53 = &v51[8 * v50];
        *v52 = v36;
        v46 = v52 + 1;
        while (v37 != v39)
        {
          v55 = *--v37;
          *--v52 = v55;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v34 != 1)
        goto LABEL_70;
      v35 = *(_QWORD **)a1[1];
      v36 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v37 = (uint64_t *)v35[419];
      v38 = v35[420];
      if ((unint64_t)v37 >= v38)
      {
        v39 = (uint64_t *)v35[418];
        v40 = v37 - v39;
        if ((unint64_t)(v40 + 1) >> 61)
          goto LABEL_488;
        v41 = v38 - (_QWORD)v39;
        v42 = (uint64_t)(v38 - (_QWORD)v39) >> 2;
        if (v42 <= v40 + 1)
          v42 = v40 + 1;
        if (v41 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        if (v43)
        {
          v44 = (char *)sub_40FC((uint64_t)(v35 + 420), v43);
          v37 = (uint64_t *)v35[419];
          v39 = (uint64_t *)v35[418];
        }
        else
        {
          v44 = 0;
        }
        v52 = (uint64_t *)&v44[8 * v40];
        v53 = &v44[8 * v43];
        *v52 = v36;
        v46 = v52 + 1;
        while (v37 != v39)
        {
          v54 = *--v37;
          *--v52 = v54;
        }
LABEL_67:
        v35[418] = v52;
        v35[419] = v46;
        v35[420] = v53;
        if (v39)
          operator delete(v39);
        goto LABEL_69;
      }
    }
    *v37 = v36;
    v46 = v37 + 1;
LABEL_69:
    v35[419] = v46;
LABEL_70:
    v56 = 1 << *(_DWORD *)(v3 + 48);
    if (v56 == 2)
    {
      v57 = *(_QWORD **)a1[1];
      v58 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v59 = (char *)v57[422];
      v67 = v57[423];
      if ((unint64_t)v59 >= v67)
      {
        v61 = (char *)v57[421];
        v69 = (v59 - v61) >> 3;
        if ((unint64_t)(v69 + 1) >> 61)
          goto LABEL_488;
        v70 = v67 - (_QWORD)v61;
        v71 = (uint64_t)(v67 - (_QWORD)v61) >> 2;
        if (v71 <= v69 + 1)
          v71 = v69 + 1;
        if (v70 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v71;
        if (v72)
        {
          v73 = (char *)sub_40FC((uint64_t)(v57 + 423), v72);
          v59 = (char *)v57[422];
          v61 = (char *)v57[421];
        }
        else
        {
          v73 = 0;
        }
        v74 = &v73[8 * v69];
        v75 = &v73[8 * v72];
        *(_QWORD *)v74 = v58;
        v68 = v74 + 8;
        while (v59 != v61)
        {
          v77 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *((_QWORD *)v74 - 1) = v77;
          v74 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v56 != 1)
        goto LABEL_102;
      v57 = *(_QWORD **)a1[1];
      v58 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v59 = (char *)v57[422];
      v60 = v57[423];
      if ((unint64_t)v59 >= v60)
      {
        v61 = (char *)v57[421];
        v62 = (v59 - v61) >> 3;
        if ((unint64_t)(v62 + 1) >> 61)
          goto LABEL_488;
        v63 = v60 - (_QWORD)v61;
        v64 = (uint64_t)(v60 - (_QWORD)v61) >> 2;
        if (v64 <= v62 + 1)
          v64 = v62 + 1;
        if (v63 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
        {
          v66 = (char *)sub_40FC((uint64_t)(v57 + 423), v65);
          v59 = (char *)v57[422];
          v61 = (char *)v57[421];
        }
        else
        {
          v66 = 0;
        }
        v74 = &v66[8 * v62];
        v75 = &v66[8 * v65];
        *(_QWORD *)v74 = v58;
        v68 = v74 + 8;
        while (v59 != v61)
        {
          v76 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *((_QWORD *)v74 - 1) = v76;
          v74 -= 8;
        }
LABEL_99:
        v57[421] = v74;
        v57[422] = v68;
        v57[423] = v75;
        if (v61)
          operator delete(v61);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v59 = v58;
    v68 = v59 + 8;
LABEL_101:
    v57[422] = v68;
LABEL_102:
    v78 = 1 << *(_DWORD *)(v3 + 48);
    if (v78 == 2)
    {
      v79 = *(_QWORD **)a1[1];
      v80 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v81 = (char *)v79[425];
      v89 = v79[426];
      if ((unint64_t)v81 >= v89)
      {
        v83 = (char *)v79[424];
        v91 = (v81 - v83) >> 3;
        if ((unint64_t)(v91 + 1) >> 61)
          goto LABEL_488;
        v92 = v89 - (_QWORD)v83;
        v93 = (uint64_t)(v89 - (_QWORD)v83) >> 2;
        if (v93 <= v91 + 1)
          v93 = v91 + 1;
        if (v92 >= 0x7FFFFFFFFFFFFFF8)
          v94 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v94 = v93;
        if (v94)
        {
          v95 = (char *)sub_40FC((uint64_t)(v79 + 426), v94);
          v81 = (char *)v79[425];
          v83 = (char *)v79[424];
        }
        else
        {
          v95 = 0;
        }
        v96 = &v95[8 * v91];
        v97 = &v95[8 * v94];
        *(_QWORD *)v96 = v80;
        v90 = v96 + 8;
        while (v81 != v83)
        {
          v99 = *((_QWORD *)v81 - 1);
          v81 -= 8;
          *((_QWORD *)v96 - 1) = v99;
          v96 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v78 != 1)
        goto LABEL_134;
      v79 = *(_QWORD **)a1[1];
      v80 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v81 = (char *)v79[425];
      v82 = v79[426];
      if ((unint64_t)v81 >= v82)
      {
        v83 = (char *)v79[424];
        v84 = (v81 - v83) >> 3;
        if ((unint64_t)(v84 + 1) >> 61)
          goto LABEL_488;
        v85 = v82 - (_QWORD)v83;
        v86 = (uint64_t)(v82 - (_QWORD)v83) >> 2;
        if (v86 <= v84 + 1)
          v86 = v84 + 1;
        if (v85 >= 0x7FFFFFFFFFFFFFF8)
          v87 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v87 = v86;
        if (v87)
        {
          v88 = (char *)sub_40FC((uint64_t)(v79 + 426), v87);
          v81 = (char *)v79[425];
          v83 = (char *)v79[424];
        }
        else
        {
          v88 = 0;
        }
        v96 = &v88[8 * v84];
        v97 = &v88[8 * v87];
        *(_QWORD *)v96 = v80;
        v90 = v96 + 8;
        while (v81 != v83)
        {
          v98 = *((_QWORD *)v81 - 1);
          v81 -= 8;
          *((_QWORD *)v96 - 1) = v98;
          v96 -= 8;
        }
LABEL_131:
        v79[424] = v96;
        v79[425] = v90;
        v79[426] = v97;
        if (v83)
          operator delete(v83);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v81 = v80;
    v90 = v81 + 8;
LABEL_133:
    v79[425] = v90;
LABEL_134:
    v100 = 1 << *(_DWORD *)(v3 + 48);
    if (v100 == 2)
    {
      v101 = *(_QWORD **)a1[1];
      v102 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v103 = (char *)v101[428];
      v111 = v101[429];
      if ((unint64_t)v103 >= v111)
      {
        v105 = (char *)v101[427];
        v113 = (v103 - v105) >> 3;
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_488;
        v114 = v111 - (_QWORD)v105;
        v115 = (uint64_t)(v111 - (_QWORD)v105) >> 2;
        if (v115 <= v113 + 1)
          v115 = v113 + 1;
        if (v114 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
        {
          v117 = (char *)sub_40FC((uint64_t)(v101 + 429), v116);
          v103 = (char *)v101[428];
          v105 = (char *)v101[427];
        }
        else
        {
          v117 = 0;
        }
        v118 = &v117[8 * v113];
        v119 = &v117[8 * v116];
        *(_QWORD *)v118 = v102;
        v112 = v118 + 8;
        while (v103 != v105)
        {
          v121 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *((_QWORD *)v118 - 1) = v121;
          v118 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v100 != 1)
        goto LABEL_166;
      v101 = *(_QWORD **)a1[1];
      v102 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v103 = (char *)v101[428];
      v104 = v101[429];
      if ((unint64_t)v103 >= v104)
      {
        v105 = (char *)v101[427];
        v106 = (v103 - v105) >> 3;
        if ((unint64_t)(v106 + 1) >> 61)
          goto LABEL_488;
        v107 = v104 - (_QWORD)v105;
        v108 = (uint64_t)(v104 - (_QWORD)v105) >> 2;
        if (v108 <= v106 + 1)
          v108 = v106 + 1;
        if (v107 >= 0x7FFFFFFFFFFFFFF8)
          v109 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v109 = v108;
        if (v109)
        {
          v110 = (char *)sub_40FC((uint64_t)(v101 + 429), v109);
          v103 = (char *)v101[428];
          v105 = (char *)v101[427];
        }
        else
        {
          v110 = 0;
        }
        v118 = &v110[8 * v106];
        v119 = &v110[8 * v109];
        *(_QWORD *)v118 = v102;
        v112 = v118 + 8;
        while (v103 != v105)
        {
          v120 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *((_QWORD *)v118 - 1) = v120;
          v118 -= 8;
        }
LABEL_163:
        v101[427] = v118;
        v101[428] = v112;
        v101[429] = v119;
        if (v105)
          operator delete(v105);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v103 = v102;
    v112 = v103 + 8;
LABEL_165:
    v101[428] = v112;
LABEL_166:
    v122 = 1 << *(_DWORD *)(v3 + 48);
    if (v122 == 2)
    {
      v123 = *(_QWORD **)a1[1];
      v124 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v125 = (char *)v123[431];
      v133 = v123[432];
      if ((unint64_t)v125 >= v133)
      {
        v127 = (char *)v123[430];
        v135 = (v125 - v127) >> 3;
        if ((unint64_t)(v135 + 1) >> 61)
          goto LABEL_488;
        v136 = v133 - (_QWORD)v127;
        v137 = (uint64_t)(v133 - (_QWORD)v127) >> 2;
        if (v137 <= v135 + 1)
          v137 = v135 + 1;
        if (v136 >= 0x7FFFFFFFFFFFFFF8)
          v138 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v138 = v137;
        if (v138)
        {
          v139 = (char *)sub_40FC((uint64_t)(v123 + 432), v138);
          v125 = (char *)v123[431];
          v127 = (char *)v123[430];
        }
        else
        {
          v139 = 0;
        }
        v140 = &v139[8 * v135];
        v141 = &v139[8 * v138];
        *(_QWORD *)v140 = v124;
        v134 = v140 + 8;
        while (v125 != v127)
        {
          v143 = *((_QWORD *)v125 - 1);
          v125 -= 8;
          *((_QWORD *)v140 - 1) = v143;
          v140 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v122 != 1)
        goto LABEL_198;
      v123 = *(_QWORD **)a1[1];
      v124 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v125 = (char *)v123[431];
      v126 = v123[432];
      if ((unint64_t)v125 >= v126)
      {
        v127 = (char *)v123[430];
        v128 = (v125 - v127) >> 3;
        if ((unint64_t)(v128 + 1) >> 61)
          goto LABEL_488;
        v129 = v126 - (_QWORD)v127;
        v130 = (uint64_t)(v126 - (_QWORD)v127) >> 2;
        if (v130 <= v128 + 1)
          v130 = v128 + 1;
        if (v129 >= 0x7FFFFFFFFFFFFFF8)
          v131 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v131 = v130;
        if (v131)
        {
          v132 = (char *)sub_40FC((uint64_t)(v123 + 432), v131);
          v125 = (char *)v123[431];
          v127 = (char *)v123[430];
        }
        else
        {
          v132 = 0;
        }
        v140 = &v132[8 * v128];
        v141 = &v132[8 * v131];
        *(_QWORD *)v140 = v124;
        v134 = v140 + 8;
        while (v125 != v127)
        {
          v142 = *((_QWORD *)v125 - 1);
          v125 -= 8;
          *((_QWORD *)v140 - 1) = v142;
          v140 -= 8;
        }
LABEL_195:
        v123[430] = v140;
        v123[431] = v134;
        v123[432] = v141;
        if (v127)
          operator delete(v127);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v125 = v124;
    v134 = v125 + 8;
LABEL_197:
    v123[431] = v134;
LABEL_198:
    v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      v156 = a1[1];
      v146 = *(_QWORD **)v156;
      v147 = *(unsigned __int16 *)(a1[2] + 60);
      v148 = *(char **)(*(_QWORD *)v156 + 3472);
      v157 = *(_QWORD *)(*(_QWORD *)v156 + 3480);
      if ((unint64_t)v148 >= v157)
      {
        v150 = (char *)v146[433];
        v159 = (v148 - v150) >> 3;
        if ((unint64_t)(v159 + 1) >> 61)
          goto LABEL_488;
        v160 = v157 - (_QWORD)v150;
        v161 = (uint64_t)(v157 - (_QWORD)v150) >> 2;
        if (v161 <= v159 + 1)
          v161 = v159 + 1;
        if (v160 >= 0x7FFFFFFFFFFFFFF8)
          v162 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v162 = v161;
        if (v162)
        {
          v163 = (char *)sub_40FC((uint64_t)(v146 + 435), v162);
          v148 = (char *)v146[434];
          v150 = (char *)v146[433];
        }
        else
        {
          v163 = 0;
        }
        v164 = &v163[8 * v159];
        v165 = &v163[8 * v162];
        *(_QWORD *)v164 = v147;
        v158 = v164 + 8;
        while (v148 != v150)
        {
          v167 = *((_QWORD *)v148 - 1);
          v148 -= 8;
          *((_QWORD *)v164 - 1) = v167;
          v164 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v144 != 1)
        goto LABEL_230;
      v145 = a1[1];
      v146 = *(_QWORD **)v145;
      v147 = *(unsigned __int16 *)(a1[2] + 60);
      v148 = *(char **)(*(_QWORD *)v145 + 3472);
      v149 = *(_QWORD *)(*(_QWORD *)v145 + 3480);
      if ((unint64_t)v148 >= v149)
      {
        v150 = (char *)v146[433];
        v151 = (v148 - v150) >> 3;
        if ((unint64_t)(v151 + 1) >> 61)
          goto LABEL_488;
        v152 = v149 - (_QWORD)v150;
        v153 = (uint64_t)(v149 - (_QWORD)v150) >> 2;
        if (v153 <= v151 + 1)
          v153 = v151 + 1;
        if (v152 >= 0x7FFFFFFFFFFFFFF8)
          v154 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v154 = v153;
        if (v154)
        {
          v155 = (char *)sub_40FC((uint64_t)(v146 + 435), v154);
          v148 = (char *)v146[434];
          v150 = (char *)v146[433];
        }
        else
        {
          v155 = 0;
        }
        v164 = &v155[8 * v151];
        v165 = &v155[8 * v154];
        *(_QWORD *)v164 = v147;
        v158 = v164 + 8;
        while (v148 != v150)
        {
          v166 = *((_QWORD *)v148 - 1);
          v148 -= 8;
          *((_QWORD *)v164 - 1) = v166;
          v164 -= 8;
        }
LABEL_227:
        v146[433] = v164;
        v146[434] = v158;
        v146[435] = v165;
        if (v150)
          operator delete(v150);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v148 = v147;
    v158 = v148 + 8;
LABEL_229:
    v146[434] = v158;
LABEL_230:
    v168 = 1 << *(_DWORD *)(v3 + 48);
    if (v168 == 2)
    {
      v169 = *(_QWORD **)a1[1];
      v170 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v171 = (uint64_t *)v169[437];
      v179 = v169[438];
      if ((unint64_t)v171 >= v179)
      {
        v173 = (uint64_t *)v169[436];
        v181 = v171 - v173;
        if ((unint64_t)(v181 + 1) >> 61)
          goto LABEL_488;
        v182 = v179 - (_QWORD)v173;
        v183 = (uint64_t)(v179 - (_QWORD)v173) >> 2;
        if (v183 <= v181 + 1)
          v183 = v181 + 1;
        if (v182 >= 0x7FFFFFFFFFFFFFF8)
          v184 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        if (v184)
        {
          v185 = (char *)sub_40FC((uint64_t)(v169 + 438), v184);
          v171 = (uint64_t *)v169[437];
          v173 = (uint64_t *)v169[436];
        }
        else
        {
          v185 = 0;
        }
        v186 = (uint64_t *)&v185[8 * v181];
        v187 = &v185[8 * v184];
        *v186 = v170;
        v180 = v186 + 1;
        while (v171 != v173)
        {
          v189 = *--v171;
          *--v186 = v189;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v168 != 1)
        goto LABEL_262;
      v169 = *(_QWORD **)a1[1];
      v170 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v171 = (uint64_t *)v169[437];
      v172 = v169[438];
      if ((unint64_t)v171 >= v172)
      {
        v173 = (uint64_t *)v169[436];
        v174 = v171 - v173;
        if ((unint64_t)(v174 + 1) >> 61)
          goto LABEL_488;
        v175 = v172 - (_QWORD)v173;
        v176 = (uint64_t)(v172 - (_QWORD)v173) >> 2;
        if (v176 <= v174 + 1)
          v176 = v174 + 1;
        if (v175 >= 0x7FFFFFFFFFFFFFF8)
          v177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v177 = v176;
        if (v177)
        {
          v178 = (char *)sub_40FC((uint64_t)(v169 + 438), v177);
          v171 = (uint64_t *)v169[437];
          v173 = (uint64_t *)v169[436];
        }
        else
        {
          v178 = 0;
        }
        v186 = (uint64_t *)&v178[8 * v174];
        v187 = &v178[8 * v177];
        *v186 = v170;
        v180 = v186 + 1;
        while (v171 != v173)
        {
          v188 = *--v171;
          *--v186 = v188;
        }
LABEL_259:
        v169[436] = v186;
        v169[437] = v180;
        v169[438] = v187;
        if (v173)
          operator delete(v173);
        goto LABEL_261;
      }
    }
    *v171 = v170;
    v180 = v171 + 1;
LABEL_261:
    v169[437] = v180;
LABEL_262:
    v190 = 1 << *(_DWORD *)(v3 + 48);
    if (v190 == 2)
    {
      v191 = *(_QWORD **)a1[1];
      v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v193 = (uint64_t *)v191[440];
      v201 = v191[441];
      if ((unint64_t)v193 >= v201)
      {
        v195 = (uint64_t *)v191[439];
        v203 = v193 - v195;
        if ((unint64_t)(v203 + 1) >> 61)
          goto LABEL_488;
        v204 = v201 - (_QWORD)v195;
        v205 = (uint64_t)(v201 - (_QWORD)v195) >> 2;
        if (v205 <= v203 + 1)
          v205 = v203 + 1;
        if (v204 >= 0x7FFFFFFFFFFFFFF8)
          v206 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v206 = v205;
        if (v206)
        {
          v207 = (char *)sub_40FC((uint64_t)(v191 + 441), v206);
          v193 = (uint64_t *)v191[440];
          v195 = (uint64_t *)v191[439];
        }
        else
        {
          v207 = 0;
        }
        v208 = (uint64_t *)&v207[8 * v203];
        v209 = &v207[8 * v206];
        *v208 = v192;
        v202 = v208 + 1;
        while (v193 != v195)
        {
          v211 = *--v193;
          *--v208 = v211;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v190 != 1)
        goto LABEL_294;
      v191 = *(_QWORD **)a1[1];
      v192 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v193 = (uint64_t *)v191[440];
      v194 = v191[441];
      if ((unint64_t)v193 >= v194)
      {
        v195 = (uint64_t *)v191[439];
        v196 = v193 - v195;
        if ((unint64_t)(v196 + 1) >> 61)
          goto LABEL_488;
        v197 = v194 - (_QWORD)v195;
        v198 = (uint64_t)(v194 - (_QWORD)v195) >> 2;
        if (v198 <= v196 + 1)
          v198 = v196 + 1;
        if (v197 >= 0x7FFFFFFFFFFFFFF8)
          v199 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v199 = v198;
        if (v199)
        {
          v200 = (char *)sub_40FC((uint64_t)(v191 + 441), v199);
          v193 = (uint64_t *)v191[440];
          v195 = (uint64_t *)v191[439];
        }
        else
        {
          v200 = 0;
        }
        v208 = (uint64_t *)&v200[8 * v196];
        v209 = &v200[8 * v199];
        *v208 = v192;
        v202 = v208 + 1;
        while (v193 != v195)
        {
          v210 = *--v193;
          *--v208 = v210;
        }
LABEL_291:
        v191[439] = v208;
        v191[440] = v202;
        v191[441] = v209;
        if (v195)
          operator delete(v195);
        goto LABEL_293;
      }
    }
    *v193 = v192;
    v202 = v193 + 1;
LABEL_293:
    v191[440] = v202;
LABEL_294:
    v212 = 1 << *(_DWORD *)(v3 + 48);
    if (v212 == 2)
    {
      v213 = *(_QWORD **)a1[1];
      v214 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v215 = (uint64_t *)v213[443];
      v223 = v213[444];
      if ((unint64_t)v215 >= v223)
      {
        v217 = (uint64_t *)v213[442];
        v225 = v215 - v217;
        if ((unint64_t)(v225 + 1) >> 61)
          goto LABEL_488;
        v226 = v223 - (_QWORD)v217;
        v227 = (uint64_t)(v223 - (_QWORD)v217) >> 2;
        if (v227 <= v225 + 1)
          v227 = v225 + 1;
        if (v226 >= 0x7FFFFFFFFFFFFFF8)
          v228 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v228 = v227;
        if (v228)
        {
          v229 = (char *)sub_40FC((uint64_t)(v213 + 444), v228);
          v215 = (uint64_t *)v213[443];
          v217 = (uint64_t *)v213[442];
        }
        else
        {
          v229 = 0;
        }
        v230 = (uint64_t *)&v229[8 * v225];
        v231 = &v229[8 * v228];
        *v230 = v214;
        v224 = v230 + 1;
        while (v215 != v217)
        {
          v233 = *--v215;
          *--v230 = v233;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v212 != 1)
        goto LABEL_326;
      v213 = *(_QWORD **)a1[1];
      v214 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v215 = (uint64_t *)v213[443];
      v216 = v213[444];
      if ((unint64_t)v215 >= v216)
      {
        v217 = (uint64_t *)v213[442];
        v218 = v215 - v217;
        if ((unint64_t)(v218 + 1) >> 61)
          goto LABEL_488;
        v219 = v216 - (_QWORD)v217;
        v220 = (uint64_t)(v216 - (_QWORD)v217) >> 2;
        if (v220 <= v218 + 1)
          v220 = v218 + 1;
        if (v219 >= 0x7FFFFFFFFFFFFFF8)
          v221 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v221 = v220;
        if (v221)
        {
          v222 = (char *)sub_40FC((uint64_t)(v213 + 444), v221);
          v215 = (uint64_t *)v213[443];
          v217 = (uint64_t *)v213[442];
        }
        else
        {
          v222 = 0;
        }
        v230 = (uint64_t *)&v222[8 * v218];
        v231 = &v222[8 * v221];
        *v230 = v214;
        v224 = v230 + 1;
        while (v215 != v217)
        {
          v232 = *--v215;
          *--v230 = v232;
        }
LABEL_323:
        v213[442] = v230;
        v213[443] = v224;
        v213[444] = v231;
        if (v217)
          operator delete(v217);
        goto LABEL_325;
      }
    }
    *v215 = v214;
    v224 = v215 + 1;
LABEL_325:
    v213[443] = v224;
LABEL_326:
    v234 = 1 << *(_DWORD *)(v3 + 48);
    if (v234 == 2)
    {
      v235 = *(_QWORD **)a1[1];
      v236 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      v237 = (char *)v235[446];
      v245 = v235[447];
      if ((unint64_t)v237 >= v245)
      {
        v239 = (char *)v235[445];
        v247 = (v237 - v239) >> 3;
        if ((unint64_t)(v247 + 1) >> 61)
          goto LABEL_488;
        v248 = v245 - (_QWORD)v239;
        v249 = (uint64_t)(v245 - (_QWORD)v239) >> 2;
        if (v249 <= v247 + 1)
          v249 = v247 + 1;
        if (v248 >= 0x7FFFFFFFFFFFFFF8)
          v250 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v250 = v249;
        if (v250)
        {
          v251 = (char *)sub_40FC((uint64_t)(v235 + 447), v250);
          v237 = (char *)v235[446];
          v239 = (char *)v235[445];
        }
        else
        {
          v251 = 0;
        }
        v252 = &v251[8 * v247];
        v253 = &v251[8 * v250];
        *(_QWORD *)v252 = v236;
        v246 = v252 + 8;
        while (v237 != v239)
        {
          v255 = *((_QWORD *)v237 - 1);
          v237 -= 8;
          *((_QWORD *)v252 - 1) = v255;
          v252 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v234 != 1)
        goto LABEL_358;
      v235 = *(_QWORD **)a1[1];
      v236 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      v237 = (char *)v235[446];
      v238 = v235[447];
      if ((unint64_t)v237 >= v238)
      {
        v239 = (char *)v235[445];
        v240 = (v237 - v239) >> 3;
        if ((unint64_t)(v240 + 1) >> 61)
          goto LABEL_488;
        v241 = v238 - (_QWORD)v239;
        v242 = (uint64_t)(v238 - (_QWORD)v239) >> 2;
        if (v242 <= v240 + 1)
          v242 = v240 + 1;
        if (v241 >= 0x7FFFFFFFFFFFFFF8)
          v243 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v243 = v242;
        if (v243)
        {
          v244 = (char *)sub_40FC((uint64_t)(v235 + 447), v243);
          v237 = (char *)v235[446];
          v239 = (char *)v235[445];
        }
        else
        {
          v244 = 0;
        }
        v252 = &v244[8 * v240];
        v253 = &v244[8 * v243];
        *(_QWORD *)v252 = v236;
        v246 = v252 + 8;
        while (v237 != v239)
        {
          v254 = *((_QWORD *)v237 - 1);
          v237 -= 8;
          *((_QWORD *)v252 - 1) = v254;
          v252 -= 8;
        }
LABEL_355:
        v235[445] = v252;
        v235[446] = v246;
        v235[447] = v253;
        if (v239)
          operator delete(v239);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v237 = v236;
    v246 = v237 + 8;
LABEL_357:
    v235[446] = v246;
LABEL_358:
    v256 = 1 << *(_DWORD *)(v3 + 48);
    if (v256 == 2)
    {
      v257 = *(_QWORD **)a1[1];
      v258 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v259 = (char *)v257[449];
      v267 = v257[450];
      if ((unint64_t)v259 >= v267)
      {
        v261 = (char *)v257[448];
        v269 = (v259 - v261) >> 3;
        if ((unint64_t)(v269 + 1) >> 61)
          goto LABEL_488;
        v270 = v267 - (_QWORD)v261;
        v271 = (uint64_t)(v267 - (_QWORD)v261) >> 2;
        if (v271 <= v269 + 1)
          v271 = v269 + 1;
        if (v270 >= 0x7FFFFFFFFFFFFFF8)
          v272 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v272 = v271;
        if (v272)
        {
          v273 = (char *)sub_40FC((uint64_t)(v257 + 450), v272);
          v259 = (char *)v257[449];
          v261 = (char *)v257[448];
        }
        else
        {
          v273 = 0;
        }
        v274 = &v273[8 * v269];
        v275 = &v273[8 * v272];
        *(_QWORD *)v274 = v258;
        v268 = v274 + 8;
        while (v259 != v261)
        {
          v277 = *((_QWORD *)v259 - 1);
          v259 -= 8;
          *((_QWORD *)v274 - 1) = v277;
          v274 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v256 != 1)
        goto LABEL_390;
      v257 = *(_QWORD **)a1[1];
      v258 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v259 = (char *)v257[449];
      v260 = v257[450];
      if ((unint64_t)v259 >= v260)
      {
        v261 = (char *)v257[448];
        v262 = (v259 - v261) >> 3;
        if ((unint64_t)(v262 + 1) >> 61)
          goto LABEL_488;
        v263 = v260 - (_QWORD)v261;
        v264 = (uint64_t)(v260 - (_QWORD)v261) >> 2;
        if (v264 <= v262 + 1)
          v264 = v262 + 1;
        if (v263 >= 0x7FFFFFFFFFFFFFF8)
          v265 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v265 = v264;
        if (v265)
        {
          v266 = (char *)sub_40FC((uint64_t)(v257 + 450), v265);
          v259 = (char *)v257[449];
          v261 = (char *)v257[448];
        }
        else
        {
          v266 = 0;
        }
        v274 = &v266[8 * v262];
        v275 = &v266[8 * v265];
        *(_QWORD *)v274 = v258;
        v268 = v274 + 8;
        while (v259 != v261)
        {
          v276 = *((_QWORD *)v259 - 1);
          v259 -= 8;
          *((_QWORD *)v274 - 1) = v276;
          v274 -= 8;
        }
LABEL_387:
        v257[448] = v274;
        v257[449] = v268;
        v257[450] = v275;
        if (v261)
          operator delete(v261);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v259 = v258;
    v268 = v259 + 8;
LABEL_389:
    v257[449] = v268;
LABEL_390:
    v278 = 1 << *(_DWORD *)(v3 + 48);
    if (v278 == 2)
    {
      v290 = a1[1];
      v280 = *(_QWORD **)v290;
      v281 = *(unsigned __int16 *)(a1[2] + 62);
      v282 = *(char **)(*(_QWORD *)v290 + 3616);
      v291 = *(_QWORD *)(*(_QWORD *)v290 + 3624);
      if ((unint64_t)v282 >= v291)
      {
        v284 = (char *)v280[451];
        v293 = (v282 - v284) >> 3;
        if ((unint64_t)(v293 + 1) >> 61)
          goto LABEL_488;
        v294 = v291 - (_QWORD)v284;
        v295 = (uint64_t)(v291 - (_QWORD)v284) >> 2;
        if (v295 <= v293 + 1)
          v295 = v293 + 1;
        if (v294 >= 0x7FFFFFFFFFFFFFF8)
          v296 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v296 = v295;
        if (v296)
        {
          v297 = (char *)sub_40FC((uint64_t)(v280 + 453), v296);
          v282 = (char *)v280[452];
          v284 = (char *)v280[451];
        }
        else
        {
          v297 = 0;
        }
        v298 = &v297[8 * v293];
        v299 = &v297[8 * v296];
        *(_QWORD *)v298 = v281;
        v292 = v298 + 8;
        while (v282 != v284)
        {
          v301 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v298 - 1) = v301;
          v298 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v278 != 1)
        goto LABEL_422;
      v279 = a1[1];
      v280 = *(_QWORD **)v279;
      v281 = *(unsigned __int16 *)(a1[2] + 62);
      v282 = *(char **)(*(_QWORD *)v279 + 3616);
      v283 = *(_QWORD *)(*(_QWORD *)v279 + 3624);
      if ((unint64_t)v282 >= v283)
      {
        v284 = (char *)v280[451];
        v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61)
          goto LABEL_488;
        v286 = v283 - (_QWORD)v284;
        v287 = (uint64_t)(v283 - (_QWORD)v284) >> 2;
        if (v287 <= v285 + 1)
          v287 = v285 + 1;
        if (v286 >= 0x7FFFFFFFFFFFFFF8)
          v288 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v288 = v287;
        if (v288)
        {
          v289 = (char *)sub_40FC((uint64_t)(v280 + 453), v288);
          v282 = (char *)v280[452];
          v284 = (char *)v280[451];
        }
        else
        {
          v289 = 0;
        }
        v298 = &v289[8 * v285];
        v299 = &v289[8 * v288];
        *(_QWORD *)v298 = v281;
        v292 = v298 + 8;
        while (v282 != v284)
        {
          v300 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v298 - 1) = v300;
          v298 -= 8;
        }
LABEL_419:
        v280[451] = v298;
        v280[452] = v292;
        v280[453] = v299;
        if (v284)
          operator delete(v284);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v282 = v281;
    v292 = v282 + 8;
LABEL_421:
    v280[452] = v292;
LABEL_422:
    v302 = 1 << *(_DWORD *)(v3 + 48);
    if (v302 == 2)
    {
      v303 = *(_QWORD **)a1[1];
      v304 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v305 = (uint64_t *)v303[455];
      v313 = v303[456];
      if ((unint64_t)v305 >= v313)
      {
        v307 = (uint64_t *)v303[454];
        v315 = v305 - v307;
        if ((unint64_t)(v315 + 1) >> 61)
          goto LABEL_488;
        v316 = v313 - (_QWORD)v307;
        v317 = (uint64_t)(v313 - (_QWORD)v307) >> 2;
        if (v317 <= v315 + 1)
          v317 = v315 + 1;
        if (v316 >= 0x7FFFFFFFFFFFFFF8)
          v318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v318 = v317;
        if (v318)
        {
          v319 = (char *)sub_40FC((uint64_t)(v303 + 456), v318);
          v305 = (uint64_t *)v303[455];
          v307 = (uint64_t *)v303[454];
        }
        else
        {
          v319 = 0;
        }
        v320 = (uint64_t *)&v319[8 * v315];
        v321 = &v319[8 * v318];
        *v320 = v304;
        v314 = v320 + 1;
        while (v305 != v307)
        {
          v323 = *--v305;
          *--v320 = v323;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v302 != 1)
        goto LABEL_454;
      v303 = *(_QWORD **)a1[1];
      v304 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v305 = (uint64_t *)v303[455];
      v306 = v303[456];
      if ((unint64_t)v305 >= v306)
      {
        v307 = (uint64_t *)v303[454];
        v308 = v305 - v307;
        if ((unint64_t)(v308 + 1) >> 61)
          goto LABEL_488;
        v309 = v306 - (_QWORD)v307;
        v310 = (uint64_t)(v306 - (_QWORD)v307) >> 2;
        if (v310 <= v308 + 1)
          v310 = v308 + 1;
        if (v309 >= 0x7FFFFFFFFFFFFFF8)
          v311 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v311 = v310;
        if (v311)
        {
          v312 = (char *)sub_40FC((uint64_t)(v303 + 456), v311);
          v305 = (uint64_t *)v303[455];
          v307 = (uint64_t *)v303[454];
        }
        else
        {
          v312 = 0;
        }
        v320 = (uint64_t *)&v312[8 * v308];
        v321 = &v312[8 * v311];
        *v320 = v304;
        v314 = v320 + 1;
        while (v305 != v307)
        {
          v322 = *--v305;
          *--v320 = v322;
        }
LABEL_451:
        v303[454] = v320;
        v303[455] = v314;
        v303[456] = v321;
        if (v307)
          operator delete(v307);
        goto LABEL_453;
      }
    }
    *v305 = v304;
    v314 = v305 + 1;
LABEL_453:
    v303[455] = v314;
LABEL_454:
    v324 = 1 << *(_DWORD *)(v3 + 48);
    if (v324 == 2)
    {
      v336 = a1[2];
      v326 = *(_QWORD **)a1[1];
      v327 = *(_DWORD *)(v336 + 36) & 0x1FFFFLL;
      v328 = (uint64_t *)v326[458];
      v337 = v326[459];
      if ((unint64_t)v328 >= v337)
      {
        v330 = (uint64_t *)v326[457];
        v339 = v328 - v330;
        if (!((unint64_t)(v339 + 1) >> 61))
        {
          v340 = v337 - (_QWORD)v330;
          v341 = (uint64_t)(v337 - (_QWORD)v330) >> 2;
          if (v341 <= v339 + 1)
            v341 = v339 + 1;
          if (v340 >= 0x7FFFFFFFFFFFFFF8)
            v342 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v342 = v341;
          if (v342)
          {
            v343 = (char *)sub_40FC((uint64_t)(v326 + 459), v342);
            v328 = (uint64_t *)v326[458];
            v330 = (uint64_t *)v326[457];
          }
          else
          {
            v343 = 0;
          }
          v344 = (uint64_t *)&v343[8 * v339];
          v345 = &v343[8 * v342];
          *v344 = v327;
          v338 = v344 + 1;
          while (v328 != v330)
          {
            v347 = *--v328;
            *--v344 = v347;
          }
          goto LABEL_483;
        }
LABEL_488:
        sub_4074();
      }
    }
    else
    {
      if (v324 != 1)
      {
LABEL_486:
        *a2 = 1;
        return;
      }
      v325 = a1[2];
      v326 = *(_QWORD **)a1[1];
      v327 = *(_DWORD *)(v325 + 36) & 0x1FFFFLL;
      v328 = (uint64_t *)v326[458];
      v329 = v326[459];
      if ((unint64_t)v328 >= v329)
      {
        v330 = (uint64_t *)v326[457];
        v331 = v328 - v330;
        if (!((unint64_t)(v331 + 1) >> 61))
        {
          v332 = v329 - (_QWORD)v330;
          v333 = (uint64_t)(v329 - (_QWORD)v330) >> 2;
          if (v333 <= v331 + 1)
            v333 = v331 + 1;
          if (v332 >= 0x7FFFFFFFFFFFFFF8)
            v334 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v334 = v333;
          if (v334)
          {
            v335 = (char *)sub_40FC((uint64_t)(v326 + 459), v334);
            v328 = (uint64_t *)v326[458];
            v330 = (uint64_t *)v326[457];
          }
          else
          {
            v335 = 0;
          }
          v344 = (uint64_t *)&v335[8 * v331];
          v345 = &v335[8 * v334];
          *v344 = v327;
          v338 = v344 + 1;
          while (v328 != v330)
          {
            v346 = *--v328;
            *--v344 = v346;
          }
LABEL_483:
          v326[457] = v344;
          v326[458] = v338;
          v326[459] = v345;
          if (v330)
            operator delete(v330);
          goto LABEL_485;
        }
        goto LABEL_488;
      }
    }
    *v328 = v327;
    v338 = v328 + 1;
LABEL_485:
    v326[458] = v338;
    goto LABEL_486;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = *(_DWORD *)(v17 + 40);
    v17 += 40;
    v20 = (_QWORD *)*v18;
    *(_QWORD *)(v20[416] - 8) += (unint64_t)v19 >> 17;
    *(_QWORD *)(v20[419] - 8) += *(_DWORD *)v17 & 0x1FFFF;
    *(_QWORD *)(v20[422] - 8) += *(_WORD *)(v17 - 12) & 0x7FFF;
    *(_QWORD *)(v20[425] - 8) += *(_WORD *)(v17 - 10) & 0x7FFF;
    *(_QWORD *)(v20[428] - 8) += *(_WORD *)(v17 - 16) & 0x7FFF;
    *(_QWORD *)(v20[431] - 8) += *(_WORD *)(v17 - 14) & 0x7FFF;
    *(_QWORD *)(v20[434] - 8) += *(unsigned __int16 *)(v17 + 20);
    *(_QWORD *)(v20[437] - 8) += *(_DWORD *)(v17 + 12) & 0x1FFFF;
    *(_QWORD *)(v20[440] - 8) += *(_DWORD *)(v17 + 8) & 0x1FFFF;
    *(_QWORD *)(v20[443] - 8) += *(_DWORD *)(v17 + 16) & 0x1FFFF;
    v21 = a1[2];
    v22 = (_QWORD *)*v18;
    *(_QWORD *)(v22[446] - 8) += *(_WORD *)(v21 + 46) & 0x3FFF;
    *(_QWORD *)(v22[449] - 8) += *(_WORD *)(v21 + 44) & 0x3FFF;
    *(_QWORD *)(v22[452] - 8) += *(unsigned __int16 *)(v21 + 62);
    *(_QWORD *)(v22[455] - 8) += *(_DWORD *)(v21 + 32) & 0x1FFFF;
    *(_QWORD *)(v22[458] - 8) += *(_DWORD *)(v21 + 36) & 0x1FFFF;
  }
}

void sub_1974E0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[461];
      v19 = v6[462];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[460];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_136;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 462), v24);
          v8 = (uint64_t *)v6[461];
          v10 = (uint64_t *)v6[460];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[461];
      v9 = v6[462];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[460];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_136;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 462), v14);
          v8 = (uint64_t *)v6[461];
          v10 = (uint64_t *)v6[460];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[460] = v26;
        v6[461] = v20;
        v6[462] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[461] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      v33 = (uint64_t *)v31[464];
      v41 = v31[465];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[463];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_136;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 465), v46);
          v33 = (uint64_t *)v31[464];
          v35 = (uint64_t *)v31[463];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      v33 = (uint64_t *)v31[464];
      v34 = v31[465];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[463];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_136;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 465), v39);
          v33 = (uint64_t *)v31[464];
          v35 = (uint64_t *)v31[463];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[463] = v48;
        v31[464] = v42;
        v31[465] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[464] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v55 = (uint64_t *)v53[467];
      v63 = v53[468];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[466];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_136;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 468), v68);
          v55 = (uint64_t *)v53[467];
          v57 = (uint64_t *)v53[466];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v55 = (uint64_t *)v53[467];
      v56 = v53[468];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[466];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_136;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 468), v61);
          v55 = (uint64_t *)v53[467];
          v57 = (uint64_t *)v53[466];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[466] = v70;
        v53[467] = v64;
        v53[468] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[467] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v86 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = *(_DWORD *)(v86 + 24) & 0x3FFFFFLL;
      v78 = (uint64_t *)v76[470];
      v87 = v76[471];
      if ((unint64_t)v78 >= v87)
      {
        v80 = (uint64_t *)v76[469];
        v89 = v78 - v80;
        if (!((unint64_t)(v89 + 1) >> 61))
        {
          v90 = v87 - (_QWORD)v80;
          v91 = (uint64_t)(v87 - (_QWORD)v80) >> 2;
          if (v91 <= v89 + 1)
            v91 = v89 + 1;
          if (v90 >= 0x7FFFFFFFFFFFFFF8)
            v92 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v92 = v91;
          if (v92)
          {
            v93 = (char *)sub_40FC((uint64_t)(v76 + 471), v92);
            v78 = (uint64_t *)v76[470];
            v80 = (uint64_t *)v76[469];
          }
          else
          {
            v93 = 0;
          }
          v94 = (uint64_t *)&v93[8 * v89];
          v95 = &v93[8 * v92];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v97 = *--v78;
            *--v94 = v97;
          }
          goto LABEL_131;
        }
LABEL_136:
        sub_4074();
      }
    }
    else
    {
      if (v74 != 1)
      {
LABEL_134:
        *a2 = 1;
        return;
      }
      v75 = a1[2];
      v76 = *(_QWORD **)a1[1];
      v77 = *(_DWORD *)(v75 + 24) & 0x3FFFFFLL;
      v78 = (uint64_t *)v76[470];
      v79 = v76[471];
      if ((unint64_t)v78 >= v79)
      {
        v80 = (uint64_t *)v76[469];
        v81 = v78 - v80;
        if (!((unint64_t)(v81 + 1) >> 61))
        {
          v82 = v79 - (_QWORD)v80;
          v83 = (uint64_t)(v79 - (_QWORD)v80) >> 2;
          if (v83 <= v81 + 1)
            v83 = v81 + 1;
          if (v82 >= 0x7FFFFFFFFFFFFFF8)
            v84 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            v85 = (char *)sub_40FC((uint64_t)(v76 + 471), v84);
            v78 = (uint64_t *)v76[470];
            v80 = (uint64_t *)v76[469];
          }
          else
          {
            v85 = 0;
          }
          v94 = (uint64_t *)&v85[8 * v81];
          v95 = &v85[8 * v84];
          *v94 = v77;
          v88 = v94 + 1;
          while (v78 != v80)
          {
            v96 = *--v78;
            *--v94 = v96;
          }
LABEL_131:
          v76[469] = v94;
          v76[470] = v88;
          v76[471] = v95;
          if (v80)
            operator delete(v80);
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    *v78 = v77;
    v88 = v78 + 1;
LABEL_133:
    v76[470] = v88;
    goto LABEL_134;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = (_DWORD *)a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[461] - 8) += v17[8] & 0x7FFFF;
    *(_QWORD *)(v18[464] - 8) += v17[9] & 0x3FFFFF;
    *(_QWORD *)(v18[467] - 8) += v17[7] & 0x3FFFFF;
    *(_QWORD *)(v18[470] - 8) += v17[6] & 0x3FFFFF;
  }
}

void sub_197BBC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  _QWORD *v185;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      v8 = (char *)v6[563];
      v19 = v6[564];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[562];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_328;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 564), v24);
          v8 = (char *)v6[563];
          v10 = (char *)v6[562];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x1FFF;
      v8 = (char *)v6[563];
      v9 = v6[564];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[562];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_328;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 564), v14);
          v8 = (char *)v6[563];
          v10 = (char *)v6[562];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[562] = v26;
        v6[563] = v20;
        v6[564] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[563] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[566];
      v41 = v31[567];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[565];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_328;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 567), v46);
          v33 = (uint64_t *)v31[566];
          v35 = (uint64_t *)v31[565];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[566];
      v34 = v31[567];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[565];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_328;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 567), v39);
          v33 = (uint64_t *)v31[566];
          v35 = (uint64_t *)v31[565];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[565] = v48;
        v31[566] = v42;
        v31[567] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[566] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v55 = (char *)v53[569];
      v63 = v53[570];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[568];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_328;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 570), v68);
          v55 = (char *)v53[569];
          v57 = (char *)v53[568];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v55 = (char *)v53[569];
      v56 = v53[570];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[568];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_328;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 570), v61);
          v55 = (char *)v53[569];
          v57 = (char *)v53[568];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[568] = v70;
        v53[569] = v64;
        v53[570] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[569] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      v77 = (unint64_t *)v75[572];
      v85 = v75[573];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (unint64_t *)v75[571];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_328;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 573), v90);
          v77 = (unint64_t *)v75[572];
          v79 = (unint64_t *)v75[571];
        }
        else
        {
          v91 = 0;
        }
        v92 = (unint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = ((unint64_t)*(unsigned int *)(a1[2] + 36) >> 13) & 0x3FFFF;
      v77 = (unint64_t *)v75[572];
      v78 = v75[573];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (unint64_t *)v75[571];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_328;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 573), v83);
          v77 = (unint64_t *)v75[572];
          v79 = (unint64_t *)v75[571];
        }
        else
        {
          v84 = 0;
        }
        v92 = (unint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[571] = v92;
        v75[572] = v86;
        v75[573] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[572] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      v99 = (uint64_t *)v97[575];
      v107 = v97[576];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[574];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_328;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 576), v112);
          v99 = (uint64_t *)v97[575];
          v101 = (uint64_t *)v97[574];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 36) & 0x1FFFLL;
      v99 = (uint64_t *)v97[575];
      v100 = v97[576];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[574];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_328;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 576), v105);
          v99 = (uint64_t *)v97[575];
          v101 = (uint64_t *)v97[574];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[574] = v114;
        v97[575] = v108;
        v97[576] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[575] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[578];
      v129 = v119[579];
      if ((unint64_t)v121 >= v129)
      {
        v123 = (uint64_t *)v119[577];
        v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_328;
        v132 = v129 - (_QWORD)v123;
        v133 = (uint64_t)(v129 - (_QWORD)v123) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v119 + 579), v134);
          v121 = (uint64_t *)v119[578];
          v123 = (uint64_t *)v119[577];
        }
        else
        {
          v135 = 0;
        }
        v136 = (uint64_t *)&v135[8 * v131];
        v137 = &v135[8 * v134];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v139 = *--v121;
          *--v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[578];
      v122 = v119[579];
      if ((unint64_t)v121 >= v122)
      {
        v123 = (uint64_t *)v119[577];
        v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_328;
        v125 = v122 - (_QWORD)v123;
        v126 = (uint64_t)(v122 - (_QWORD)v123) >> 2;
        if (v126 <= v124 + 1)
          v126 = v124 + 1;
        if (v125 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          v128 = (char *)sub_40FC((uint64_t)(v119 + 579), v127);
          v121 = (uint64_t *)v119[578];
          v123 = (uint64_t *)v119[577];
        }
        else
        {
          v128 = 0;
        }
        v136 = (uint64_t *)&v128[8 * v124];
        v137 = &v128[8 * v127];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v138 = *--v121;
          *--v136 = v138;
        }
LABEL_195:
        v119[577] = v136;
        v119[578] = v130;
        v119[579] = v137;
        if (v123)
          operator delete(v123);
        goto LABEL_197;
      }
    }
    *v121 = v120;
    v130 = v121 + 1;
LABEL_197:
    v119[578] = v130;
LABEL_198:
    v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      v141 = *(_QWORD **)a1[1];
      v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      v143 = (char *)v141[581];
      v151 = v141[582];
      if ((unint64_t)v143 >= v151)
      {
        v145 = (char *)v141[580];
        v153 = (v143 - v145) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_328;
        v154 = v151 - (_QWORD)v145;
        v155 = (uint64_t)(v151 - (_QWORD)v145) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v141 + 582), v156);
          v143 = (char *)v141[581];
          v145 = (char *)v141[580];
        }
        else
        {
          v157 = 0;
        }
        v158 = &v157[8 * v153];
        v159 = &v157[8 * v156];
        *(_QWORD *)v158 = v142;
        v152 = v158 + 8;
        while (v143 != v145)
        {
          v161 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *((_QWORD *)v158 - 1) = v161;
          v158 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1)
        goto LABEL_230;
      v141 = *(_QWORD **)a1[1];
      v142 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
      v143 = (char *)v141[581];
      v144 = v141[582];
      if ((unint64_t)v143 >= v144)
      {
        v145 = (char *)v141[580];
        v146 = (v143 - v145) >> 3;
        if ((unint64_t)(v146 + 1) >> 61)
          goto LABEL_328;
        v147 = v144 - (_QWORD)v145;
        v148 = (uint64_t)(v144 - (_QWORD)v145) >> 2;
        if (v148 <= v146 + 1)
          v148 = v146 + 1;
        if (v147 >= 0x7FFFFFFFFFFFFFF8)
          v149 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v149 = v148;
        if (v149)
        {
          v150 = (char *)sub_40FC((uint64_t)(v141 + 582), v149);
          v143 = (char *)v141[581];
          v145 = (char *)v141[580];
        }
        else
        {
          v150 = 0;
        }
        v158 = &v150[8 * v146];
        v159 = &v150[8 * v149];
        *(_QWORD *)v158 = v142;
        v152 = v158 + 8;
        while (v143 != v145)
        {
          v160 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *((_QWORD *)v158 - 1) = v160;
          v158 -= 8;
        }
LABEL_227:
        v141[580] = v158;
        v141[581] = v152;
        v141[582] = v159;
        if (v145)
          operator delete(v145);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v143 = v142;
    v152 = v143 + 8;
LABEL_229:
    v141[581] = v152;
LABEL_230:
    v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      v163 = *(_QWORD **)a1[1];
      v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      v165 = (char *)v163[584];
      v173 = v163[585];
      if ((unint64_t)v165 >= v173)
      {
        v167 = (char *)v163[583];
        v175 = (v165 - v167) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_328;
        v176 = v173 - (_QWORD)v167;
        v177 = (uint64_t)(v173 - (_QWORD)v167) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v163 + 585), v178);
          v165 = (char *)v163[584];
          v167 = (char *)v163[583];
        }
        else
        {
          v179 = 0;
        }
        v180 = &v179[8 * v175];
        v181 = &v179[8 * v178];
        *(_QWORD *)v180 = v164;
        v174 = v180 + 8;
        while (v165 != v167)
        {
          v183 = *((_QWORD *)v165 - 1);
          v165 -= 8;
          *((_QWORD *)v180 - 1) = v183;
          v180 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1)
        goto LABEL_262;
      v163 = *(_QWORD **)a1[1];
      v164 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      v165 = (char *)v163[584];
      v166 = v163[585];
      if ((unint64_t)v165 >= v166)
      {
        v167 = (char *)v163[583];
        v168 = (v165 - v167) >> 3;
        if ((unint64_t)(v168 + 1) >> 61)
          goto LABEL_328;
        v169 = v166 - (_QWORD)v167;
        v170 = (uint64_t)(v166 - (_QWORD)v167) >> 2;
        if (v170 <= v168 + 1)
          v170 = v168 + 1;
        if (v169 >= 0x7FFFFFFFFFFFFFF8)
          v171 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v171 = v170;
        if (v171)
        {
          v172 = (char *)sub_40FC((uint64_t)(v163 + 585), v171);
          v165 = (char *)v163[584];
          v167 = (char *)v163[583];
        }
        else
        {
          v172 = 0;
        }
        v180 = &v172[8 * v168];
        v181 = &v172[8 * v171];
        *(_QWORD *)v180 = v164;
        v174 = v180 + 8;
        while (v165 != v167)
        {
          v182 = *((_QWORD *)v165 - 1);
          v165 -= 8;
          *((_QWORD *)v180 - 1) = v182;
          v180 -= 8;
        }
LABEL_259:
        v163[583] = v180;
        v163[584] = v174;
        v163[585] = v181;
        if (v167)
          operator delete(v167);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v165 = v164;
    v174 = v165 + 8;
LABEL_261:
    v163[584] = v174;
LABEL_262:
    v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      v185 = *(_QWORD **)a1[1];
      v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      v187 = (char *)v185[587];
      v195 = v185[588];
      if ((unint64_t)v187 >= v195)
      {
        v189 = (char *)v185[586];
        v197 = (v187 - v189) >> 3;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_328;
        v198 = v195 - (_QWORD)v189;
        v199 = (uint64_t)(v195 - (_QWORD)v189) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v185 + 588), v200);
          v187 = (char *)v185[587];
          v189 = (char *)v185[586];
        }
        else
        {
          v201 = 0;
        }
        v202 = &v201[8 * v197];
        v203 = &v201[8 * v200];
        *(_QWORD *)v202 = v186;
        v196 = v202 + 8;
        while (v187 != v189)
        {
          v205 = *((_QWORD *)v187 - 1);
          v187 -= 8;
          *((_QWORD *)v202 - 1) = v205;
          v202 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1)
        goto LABEL_294;
      v185 = *(_QWORD **)a1[1];
      v186 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
      v187 = (char *)v185[587];
      v188 = v185[588];
      if ((unint64_t)v187 >= v188)
      {
        v189 = (char *)v185[586];
        v190 = (v187 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_328;
        v191 = v188 - (_QWORD)v189;
        v192 = (uint64_t)(v188 - (_QWORD)v189) >> 2;
        if (v192 <= v190 + 1)
          v192 = v190 + 1;
        if (v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
        {
          v194 = (char *)sub_40FC((uint64_t)(v185 + 588), v193);
          v187 = (char *)v185[587];
          v189 = (char *)v185[586];
        }
        else
        {
          v194 = 0;
        }
        v202 = &v194[8 * v190];
        v203 = &v194[8 * v193];
        *(_QWORD *)v202 = v186;
        v196 = v202 + 8;
        while (v187 != v189)
        {
          v204 = *((_QWORD *)v187 - 1);
          v187 -= 8;
          *((_QWORD *)v202 - 1) = v204;
          v202 -= 8;
        }
LABEL_291:
        v185[586] = v202;
        v185[587] = v196;
        v185[588] = v203;
        if (v189)
          operator delete(v189);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v187 = v186;
    v196 = v187 + 8;
LABEL_293:
    v185[587] = v196;
LABEL_294:
    v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      v218 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_WORD *)(v218 + 26) & 0x3FFF;
      v210 = (char *)v208[590];
      v219 = v208[591];
      if ((unint64_t)v210 >= v219)
      {
        v212 = (char *)v208[589];
        v221 = (v210 - v212) >> 3;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          v222 = v219 - (_QWORD)v212;
          v223 = (uint64_t)(v219 - (_QWORD)v212) >> 2;
          if (v223 <= v221 + 1)
            v223 = v221 + 1;
          if (v222 >= 0x7FFFFFFFFFFFFFF8)
            v224 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v224 = v223;
          if (v224)
          {
            v225 = (char *)sub_40FC((uint64_t)(v208 + 591), v224);
            v210 = (char *)v208[590];
            v212 = (char *)v208[589];
          }
          else
          {
            v225 = 0;
          }
          v226 = &v225[8 * v221];
          v227 = &v225[8 * v224];
          *(_QWORD *)v226 = v209;
          v220 = v226 + 8;
          while (v210 != v212)
          {
            v229 = *((_QWORD *)v210 - 1);
            v210 -= 8;
            *((_QWORD *)v226 - 1) = v229;
            v226 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v207 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_WORD *)(v207 + 26) & 0x3FFF;
      v210 = (char *)v208[590];
      v211 = v208[591];
      if ((unint64_t)v210 >= v211)
      {
        v212 = (char *)v208[589];
        v213 = (v210 - v212) >> 3;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          v214 = v211 - (_QWORD)v212;
          v215 = (uint64_t)(v211 - (_QWORD)v212) >> 2;
          if (v215 <= v213 + 1)
            v215 = v213 + 1;
          if (v214 >= 0x7FFFFFFFFFFFFFF8)
            v216 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v216 = v215;
          if (v216)
          {
            v217 = (char *)sub_40FC((uint64_t)(v208 + 591), v216);
            v210 = (char *)v208[590];
            v212 = (char *)v208[589];
          }
          else
          {
            v217 = 0;
          }
          v226 = &v217[8 * v213];
          v227 = &v217[8 * v216];
          *(_QWORD *)v226 = v209;
          v220 = v226 + 8;
          while (v210 != v212)
          {
            v228 = *((_QWORD *)v210 - 1);
            v210 -= 8;
            *((_QWORD *)v226 - 1) = v228;
            v226 -= 8;
          }
LABEL_323:
          v208[589] = v226;
          v208[590] = v220;
          v208[591] = v227;
          if (v212)
            operator delete(v212);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(_QWORD *)v210 = v209;
    v220 = v210 + 8;
LABEL_325:
    v208[590] = v220;
    goto LABEL_326;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[563] - 8) += *(_WORD *)(v17 + 34) & 0x1FFF;
    *(_QWORD *)(v18[566] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    *(_QWORD *)(v18[569] - 8) += *(_WORD *)(v17 + 32) & 0x1FFF;
    *(_QWORD *)(v18[572] - 8) += ((unint64_t)*(unsigned int *)(v17 + 36) >> 13) & 0x3FFFF;
    *(_QWORD *)(v18[575] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFF;
    *(_QWORD *)(v18[578] - 8) += *(_DWORD *)(v17 + 44) & 0x3FFFF;
    *(_QWORD *)(v18[581] - 8) += *(_WORD *)(v17 + 28) & 0x3FFF;
    *(_QWORD *)(v18[584] - 8) += *(_WORD *)(v17 + 24) & 0x3FFF;
    *(_QWORD *)(v18[587] - 8) += *(_WORD *)(v17 + 30) & 0x3FFF;
    *(_QWORD *)(v18[590] - 8) += *(_WORD *)(v17 + 26) & 0x3FFF;
  }
}

void sub_198CC8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  uint64_t *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  unint64_t *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  int *v296;
  int **v297;
  uint64_t v298;
  unint64_t v299;
  int v300;
  unint64_t v301;
  _QWORD *v302;

  v4 = *a1;
  if (*a2 == 1)
  {
    v297 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v296 = *v297;
    v298 = (char *)v297[1] - (char *)*v297;
    if (v298)
    {
      v299 = v298 >> 2;
      if (v299 <= 1)
        v299 = 1;
      do
      {
        v300 = *v296++;
        switch(v300)
        {
          case 133:
            v301 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 3976);
            goto LABEL_410;
          case 134:
            v301 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4000);
            goto LABEL_410;
          case 135:
            v301 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4024);
            goto LABEL_410;
          case 136:
            v301 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4048);
            goto LABEL_410;
          case 137:
            v301 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4072);
            goto LABEL_410;
          case 138:
            v301 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4096);
            goto LABEL_410;
          case 139:
            v301 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4120);
            goto LABEL_410;
          case 140:
            v301 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4144);
            goto LABEL_410;
          case 141:
            v301 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4168);
            goto LABEL_410;
          case 142:
            v301 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4192);
            goto LABEL_410;
          case 143:
            v301 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4216);
            goto LABEL_410;
          case 144:
            v301 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4240);
            goto LABEL_410;
          case 145:
            v301 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4264);
            goto LABEL_410;
          case 146:
            v301 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4288);
            goto LABEL_410;
          case 147:
            v301 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4312);
            goto LABEL_410;
          case 148:
            v301 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4336);
            goto LABEL_410;
          case 149:
            v301 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4360);
            goto LABEL_410;
          case 150:
            v301 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4384);
            goto LABEL_410;
          case 151:
            v301 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4408);
            goto LABEL_410;
          case 152:
            v301 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4432);
            goto LABEL_410;
          case 153:
            v301 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4456);
            goto LABEL_410;
          case 154:
            v301 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 4480);
LABEL_410:
            *(_QWORD *)(*v302 - 8) += v301;
            break;
          default:
            break;
        }
        --v299;
      }
      while (v299);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x85:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            v12 = (char *)v10[497];
            v13 = v10[498];
            if ((unint64_t)v12 >= v13)
            {
              v120 = (char *)v10[496];
              v121 = (v12 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61)
                goto LABEL_414;
              v122 = v13 - (_QWORD)v120;
              v123 = (uint64_t)(v13 - (_QWORD)v120) >> 2;
              if (v123 <= v121 + 1)
                v123 = v121 + 1;
              if (v122 >= 0x7FFFFFFFFFFFFFF8)
                v124 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
              {
                v125 = (char *)sub_40FC((uint64_t)(v10 + 498), v124);
                v12 = (char *)v10[497];
                v120 = (char *)v10[496];
              }
              else
              {
                v125 = 0;
              }
              v252 = &v125[8 * v121];
              *(_QWORD *)v252 = v11;
              v14 = v252 + 8;
              while (v12 != v120)
              {
                v253 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v252 - 1) = v253;
                v252 -= 8;
              }
              v10[496] = v252;
              v10[497] = v14;
              v10[498] = &v125[8 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[497] = v14;
            break;
          case 0x86:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            v17 = (char *)v15[500];
            v18 = v15[501];
            if ((unint64_t)v17 >= v18)
            {
              v126 = (char *)v15[499];
              v127 = (v17 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61)
                goto LABEL_414;
              v128 = v18 - (_QWORD)v126;
              v129 = (uint64_t)(v18 - (_QWORD)v126) >> 2;
              if (v129 <= v127 + 1)
                v129 = v127 + 1;
              if (v128 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              if (v130)
              {
                v131 = (char *)sub_40FC((uint64_t)(v15 + 501), v130);
                v17 = (char *)v15[500];
                v126 = (char *)v15[499];
              }
              else
              {
                v131 = 0;
              }
              v254 = &v131[8 * v127];
              *(_QWORD *)v254 = v16;
              v19 = v254 + 8;
              while (v17 != v126)
              {
                v255 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v254 - 1) = v255;
                v254 -= 8;
              }
              v15[499] = v254;
              v15[500] = v19;
              v15[501] = &v131[8 * v130];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[500] = v19;
            break;
          case 0x87:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            v22 = (char *)v20[503];
            v23 = v20[504];
            if ((unint64_t)v22 >= v23)
            {
              v132 = (char *)v20[502];
              v133 = (v22 - v132) >> 3;
              if ((unint64_t)(v133 + 1) >> 61)
                goto LABEL_414;
              v134 = v23 - (_QWORD)v132;
              v135 = (uint64_t)(v23 - (_QWORD)v132) >> 2;
              if (v135 <= v133 + 1)
                v135 = v133 + 1;
              if (v134 >= 0x7FFFFFFFFFFFFFF8)
                v136 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v136 = v135;
              if (v136)
              {
                v137 = (char *)sub_40FC((uint64_t)(v20 + 504), v136);
                v22 = (char *)v20[503];
                v132 = (char *)v20[502];
              }
              else
              {
                v137 = 0;
              }
              v256 = &v137[8 * v133];
              *(_QWORD *)v256 = v21;
              v24 = v256 + 8;
              while (v22 != v132)
              {
                v257 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v256 - 1) = v257;
                v256 -= 8;
              }
              v20[502] = v256;
              v20[503] = v24;
              v20[504] = &v137[8 * v136];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[503] = v24;
            break;
          case 0x88:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v27 = (char *)v25[506];
            v28 = v25[507];
            if ((unint64_t)v27 >= v28)
            {
              v138 = (char *)v25[505];
              v139 = (v27 - v138) >> 3;
              if ((unint64_t)(v139 + 1) >> 61)
                goto LABEL_414;
              v140 = v28 - (_QWORD)v138;
              v141 = (uint64_t)(v28 - (_QWORD)v138) >> 2;
              if (v141 <= v139 + 1)
                v141 = v139 + 1;
              if (v140 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v142 = v141;
              if (v142)
              {
                v143 = (char *)sub_40FC((uint64_t)(v25 + 507), v142);
                v27 = (char *)v25[506];
                v138 = (char *)v25[505];
              }
              else
              {
                v143 = 0;
              }
              v258 = &v143[8 * v139];
              *(_QWORD *)v258 = v26;
              v29 = v258 + 8;
              while (v27 != v138)
              {
                v259 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v258 - 1) = v259;
                v258 -= 8;
              }
              v25[505] = v258;
              v25[506] = v29;
              v25[507] = &v143[8 * v142];
              if (v138)
                operator delete(v138);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[506] = v29;
            break;
          case 0x89:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v32 = (char *)v30[509];
            v33 = v30[510];
            if ((unint64_t)v32 >= v33)
            {
              v144 = (char *)v30[508];
              v145 = (v32 - v144) >> 3;
              if ((unint64_t)(v145 + 1) >> 61)
                goto LABEL_414;
              v146 = v33 - (_QWORD)v144;
              v147 = (uint64_t)(v33 - (_QWORD)v144) >> 2;
              if (v147 <= v145 + 1)
                v147 = v145 + 1;
              if (v146 >= 0x7FFFFFFFFFFFFFF8)
                v148 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v148 = v147;
              if (v148)
              {
                v149 = (char *)sub_40FC((uint64_t)(v30 + 510), v148);
                v32 = (char *)v30[509];
                v144 = (char *)v30[508];
              }
              else
              {
                v149 = 0;
              }
              v260 = &v149[8 * v145];
              *(_QWORD *)v260 = v31;
              v34 = v260 + 8;
              while (v32 != v144)
              {
                v261 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v260 - 1) = v261;
                v260 -= 8;
              }
              v30[508] = v260;
              v30[509] = v34;
              v30[510] = &v149[8 * v148];
              if (v144)
                operator delete(v144);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[509] = v34;
            break;
          case 0x8A:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v37 = (char *)v35[512];
            v38 = v35[513];
            if ((unint64_t)v37 >= v38)
            {
              v150 = (char *)v35[511];
              v151 = (v37 - v150) >> 3;
              if ((unint64_t)(v151 + 1) >> 61)
                goto LABEL_414;
              v152 = v38 - (_QWORD)v150;
              v153 = (uint64_t)(v38 - (_QWORD)v150) >> 2;
              if (v153 <= v151 + 1)
                v153 = v151 + 1;
              if (v152 >= 0x7FFFFFFFFFFFFFF8)
                v154 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v154 = v153;
              if (v154)
              {
                v155 = (char *)sub_40FC((uint64_t)(v35 + 513), v154);
                v37 = (char *)v35[512];
                v150 = (char *)v35[511];
              }
              else
              {
                v155 = 0;
              }
              v262 = &v155[8 * v151];
              *(_QWORD *)v262 = v36;
              v39 = v262 + 8;
              while (v37 != v150)
              {
                v263 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v262 - 1) = v263;
                v262 -= 8;
              }
              v35[511] = v262;
              v35[512] = v39;
              v35[513] = &v155[8 * v154];
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[512] = v39;
            break;
          case 0x8B:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v42 = (uint64_t *)v40[515];
            v43 = v40[516];
            if ((unint64_t)v42 >= v43)
            {
              v156 = (uint64_t *)v40[514];
              v157 = v42 - v156;
              if ((unint64_t)(v157 + 1) >> 61)
                goto LABEL_414;
              v158 = v43 - (_QWORD)v156;
              v159 = (uint64_t)(v43 - (_QWORD)v156) >> 2;
              if (v159 <= v157 + 1)
                v159 = v157 + 1;
              if (v158 >= 0x7FFFFFFFFFFFFFF8)
                v160 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v160 = v159;
              if (v160)
              {
                v161 = (char *)sub_40FC((uint64_t)(v40 + 516), v160);
                v42 = (uint64_t *)v40[515];
                v156 = (uint64_t *)v40[514];
              }
              else
              {
                v161 = 0;
              }
              v264 = (uint64_t *)&v161[8 * v157];
              *v264 = v41;
              v44 = v264 + 1;
              while (v42 != v156)
              {
                v265 = *--v42;
                *--v264 = v265;
              }
              v40[514] = v264;
              v40[515] = v44;
              v40[516] = &v161[8 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[515] = v44;
            break;
          case 0x8C:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            v47 = (char *)v45[518];
            v48 = v45[519];
            if ((unint64_t)v47 >= v48)
            {
              v162 = (char *)v45[517];
              v163 = (v47 - v162) >> 3;
              if ((unint64_t)(v163 + 1) >> 61)
                goto LABEL_414;
              v164 = v48 - (_QWORD)v162;
              v165 = (uint64_t)(v48 - (_QWORD)v162) >> 2;
              if (v165 <= v163 + 1)
                v165 = v163 + 1;
              if (v164 >= 0x7FFFFFFFFFFFFFF8)
                v166 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v166 = v165;
              if (v166)
              {
                v167 = (char *)sub_40FC((uint64_t)(v45 + 519), v166);
                v47 = (char *)v45[518];
                v162 = (char *)v45[517];
              }
              else
              {
                v167 = 0;
              }
              v266 = &v167[8 * v163];
              *(_QWORD *)v266 = v46;
              v49 = v266 + 8;
              while (v47 != v162)
              {
                v267 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v266 - 1) = v267;
                v266 -= 8;
              }
              v45[517] = v266;
              v45[518] = v49;
              v45[519] = &v167[8 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[518] = v49;
            break;
          case 0x8D:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            v52 = (char *)v50[521];
            v53 = v50[522];
            if ((unint64_t)v52 >= v53)
            {
              v168 = (char *)v50[520];
              v169 = (v52 - v168) >> 3;
              if ((unint64_t)(v169 + 1) >> 61)
                goto LABEL_414;
              v170 = v53 - (_QWORD)v168;
              v171 = (uint64_t)(v53 - (_QWORD)v168) >> 2;
              if (v171 <= v169 + 1)
                v171 = v169 + 1;
              if (v170 >= 0x7FFFFFFFFFFFFFF8)
                v172 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v172 = v171;
              if (v172)
              {
                v173 = (char *)sub_40FC((uint64_t)(v50 + 522), v172);
                v52 = (char *)v50[521];
                v168 = (char *)v50[520];
              }
              else
              {
                v173 = 0;
              }
              v268 = &v173[8 * v169];
              *(_QWORD *)v268 = v51;
              v54 = v268 + 8;
              while (v52 != v168)
              {
                v269 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v268 - 1) = v269;
                v268 -= 8;
              }
              v50[520] = v268;
              v50[521] = v54;
              v50[522] = &v173[8 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[521] = v54;
            break;
          case 0x8E:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            v57 = (char *)v55[524];
            v58 = v55[525];
            if ((unint64_t)v57 >= v58)
            {
              v174 = (char *)v55[523];
              v175 = (v57 - v174) >> 3;
              if ((unint64_t)(v175 + 1) >> 61)
                goto LABEL_414;
              v176 = v58 - (_QWORD)v174;
              v177 = (uint64_t)(v58 - (_QWORD)v174) >> 2;
              if (v177 <= v175 + 1)
                v177 = v175 + 1;
              if (v176 >= 0x7FFFFFFFFFFFFFF8)
                v178 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v178 = v177;
              if (v178)
              {
                v179 = (char *)sub_40FC((uint64_t)(v55 + 525), v178);
                v57 = (char *)v55[524];
                v174 = (char *)v55[523];
              }
              else
              {
                v179 = 0;
              }
              v270 = &v179[8 * v175];
              *(_QWORD *)v270 = v56;
              v59 = v270 + 8;
              while (v57 != v174)
              {
                v271 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v270 - 1) = v271;
                v270 -= 8;
              }
              v55[523] = v270;
              v55[524] = v59;
              v55[525] = &v179[8 * v178];
              if (v174)
                operator delete(v174);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[524] = v59;
            break;
          case 0x8F:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v62 = (char *)v60[527];
            v63 = v60[528];
            if ((unint64_t)v62 >= v63)
            {
              v180 = (char *)v60[526];
              v181 = (v62 - v180) >> 3;
              if ((unint64_t)(v181 + 1) >> 61)
                goto LABEL_414;
              v182 = v63 - (_QWORD)v180;
              v183 = (uint64_t)(v63 - (_QWORD)v180) >> 2;
              if (v183 <= v181 + 1)
                v183 = v181 + 1;
              if (v182 >= 0x7FFFFFFFFFFFFFF8)
                v184 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v184 = v183;
              if (v184)
              {
                v185 = (char *)sub_40FC((uint64_t)(v60 + 528), v184);
                v62 = (char *)v60[527];
                v180 = (char *)v60[526];
              }
              else
              {
                v185 = 0;
              }
              v272 = &v185[8 * v181];
              *(_QWORD *)v272 = v61;
              v64 = v272 + 8;
              while (v62 != v180)
              {
                v273 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v272 - 1) = v273;
                v272 -= 8;
              }
              v60[526] = v272;
              v60[527] = v64;
              v60[528] = &v185[8 * v184];
              if (v180)
                operator delete(v180);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[527] = v64;
            break;
          case 0x90:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 56) & 0x3FFF;
            v67 = (char *)v65[530];
            v68 = v65[531];
            if ((unint64_t)v67 >= v68)
            {
              v186 = (char *)v65[529];
              v187 = (v67 - v186) >> 3;
              if ((unint64_t)(v187 + 1) >> 61)
                goto LABEL_414;
              v188 = v68 - (_QWORD)v186;
              v189 = (uint64_t)(v68 - (_QWORD)v186) >> 2;
              if (v189 <= v187 + 1)
                v189 = v187 + 1;
              if (v188 >= 0x7FFFFFFFFFFFFFF8)
                v190 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v190 = v189;
              if (v190)
              {
                v191 = (char *)sub_40FC((uint64_t)(v65 + 531), v190);
                v67 = (char *)v65[530];
                v186 = (char *)v65[529];
              }
              else
              {
                v191 = 0;
              }
              v274 = &v191[8 * v187];
              *(_QWORD *)v274 = v66;
              v69 = v274 + 8;
              while (v67 != v186)
              {
                v275 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v274 - 1) = v275;
                v274 -= 8;
              }
              v65[529] = v274;
              v65[530] = v69;
              v65[531] = &v191[8 * v190];
              if (v186)
                operator delete(v186);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[530] = v69;
            break;
          case 0x91:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v72 = (char *)v70[533];
            v73 = v70[534];
            if ((unint64_t)v72 >= v73)
            {
              v192 = (char *)v70[532];
              v193 = (v72 - v192) >> 3;
              if ((unint64_t)(v193 + 1) >> 61)
                goto LABEL_414;
              v194 = v73 - (_QWORD)v192;
              v195 = (uint64_t)(v73 - (_QWORD)v192) >> 2;
              if (v195 <= v193 + 1)
                v195 = v193 + 1;
              if (v194 >= 0x7FFFFFFFFFFFFFF8)
                v196 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v196 = v195;
              if (v196)
              {
                v197 = (char *)sub_40FC((uint64_t)(v70 + 534), v196);
                v72 = (char *)v70[533];
                v192 = (char *)v70[532];
              }
              else
              {
                v197 = 0;
              }
              v276 = &v197[8 * v193];
              *(_QWORD *)v276 = v71;
              v74 = v276 + 8;
              while (v72 != v192)
              {
                v277 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v276 - 1) = v277;
                v276 -= 8;
              }
              v70[532] = v276;
              v70[533] = v74;
              v70[534] = &v197[8 * v196];
              if (v192)
                operator delete(v192);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[533] = v74;
            break;
          case 0x92:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            v77 = (uint64_t *)v75[536];
            v78 = v75[537];
            if ((unint64_t)v77 >= v78)
            {
              v198 = (uint64_t *)v75[535];
              v199 = v77 - v198;
              if ((unint64_t)(v199 + 1) >> 61)
                goto LABEL_414;
              v200 = v78 - (_QWORD)v198;
              v201 = (uint64_t)(v78 - (_QWORD)v198) >> 2;
              if (v201 <= v199 + 1)
                v201 = v199 + 1;
              if (v200 >= 0x7FFFFFFFFFFFFFF8)
                v202 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v202 = v201;
              if (v202)
              {
                v203 = (char *)sub_40FC((uint64_t)(v75 + 537), v202);
                v77 = (uint64_t *)v75[536];
                v198 = (uint64_t *)v75[535];
              }
              else
              {
                v203 = 0;
              }
              v278 = (uint64_t *)&v203[8 * v199];
              *v278 = v76;
              v79 = v278 + 1;
              while (v77 != v198)
              {
                v279 = *--v77;
                *--v278 = v279;
              }
              v75[535] = v278;
              v75[536] = v79;
              v75[537] = &v203[8 * v202];
              if (v198)
                operator delete(v198);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[536] = v79;
            break;
          case 0x93:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            v82 = (char *)v80[539];
            v83 = v80[540];
            if ((unint64_t)v82 >= v83)
            {
              v204 = (char *)v80[538];
              v205 = (v82 - v204) >> 3;
              if ((unint64_t)(v205 + 1) >> 61)
                goto LABEL_414;
              v206 = v83 - (_QWORD)v204;
              v207 = (uint64_t)(v83 - (_QWORD)v204) >> 2;
              if (v207 <= v205 + 1)
                v207 = v205 + 1;
              if (v206 >= 0x7FFFFFFFFFFFFFF8)
                v208 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v208 = v207;
              if (v208)
              {
                v209 = (char *)sub_40FC((uint64_t)(v80 + 540), v208);
                v82 = (char *)v80[539];
                v204 = (char *)v80[538];
              }
              else
              {
                v209 = 0;
              }
              v280 = &v209[8 * v205];
              *(_QWORD *)v280 = v81;
              v84 = v280 + 8;
              while (v82 != v204)
              {
                v281 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v280 - 1) = v281;
                v280 -= 8;
              }
              v80[538] = v280;
              v80[539] = v84;
              v80[540] = &v209[8 * v208];
              if (v204)
                operator delete(v204);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[539] = v84;
            break;
          case 0x94:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 50) & 0x7FF;
            v87 = (char *)v85[542];
            v88 = v85[543];
            if ((unint64_t)v87 >= v88)
            {
              v210 = (char *)v85[541];
              v211 = (v87 - v210) >> 3;
              if ((unint64_t)(v211 + 1) >> 61)
                goto LABEL_414;
              v212 = v88 - (_QWORD)v210;
              v213 = (uint64_t)(v88 - (_QWORD)v210) >> 2;
              if (v213 <= v211 + 1)
                v213 = v211 + 1;
              if (v212 >= 0x7FFFFFFFFFFFFFF8)
                v214 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v214 = v213;
              if (v214)
              {
                v215 = (char *)sub_40FC((uint64_t)(v85 + 543), v214);
                v87 = (char *)v85[542];
                v210 = (char *)v85[541];
              }
              else
              {
                v215 = 0;
              }
              v282 = &v215[8 * v211];
              *(_QWORD *)v282 = v86;
              v89 = v282 + 8;
              while (v87 != v210)
              {
                v283 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v282 - 1) = v283;
                v282 -= 8;
              }
              v85[541] = v282;
              v85[542] = v89;
              v85[543] = &v215[8 * v214];
              if (v210)
                operator delete(v210);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[542] = v89;
            break;
          case 0x95:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v92 = (char *)v90[545];
            v93 = v90[546];
            if ((unint64_t)v92 >= v93)
            {
              v216 = (char *)v90[544];
              v217 = (v92 - v216) >> 3;
              if ((unint64_t)(v217 + 1) >> 61)
                goto LABEL_414;
              v218 = v93 - (_QWORD)v216;
              v219 = (uint64_t)(v93 - (_QWORD)v216) >> 2;
              if (v219 <= v217 + 1)
                v219 = v217 + 1;
              if (v218 >= 0x7FFFFFFFFFFFFFF8)
                v220 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v220 = v219;
              if (v220)
              {
                v221 = (char *)sub_40FC((uint64_t)(v90 + 546), v220);
                v92 = (char *)v90[545];
                v216 = (char *)v90[544];
              }
              else
              {
                v221 = 0;
              }
              v284 = &v221[8 * v217];
              *(_QWORD *)v284 = v91;
              v94 = v284 + 8;
              while (v92 != v216)
              {
                v285 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v284 - 1) = v285;
                v284 -= 8;
              }
              v90[544] = v284;
              v90[545] = v94;
              v90[546] = &v221[8 * v220];
              if (v216)
                operator delete(v216);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[545] = v94;
            break;
          case 0x96:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 64) & 0x1FF;
            v97 = (char *)v95[548];
            v98 = v95[549];
            if ((unint64_t)v97 >= v98)
            {
              v222 = (char *)v95[547];
              v223 = (v97 - v222) >> 3;
              if ((unint64_t)(v223 + 1) >> 61)
                goto LABEL_414;
              v224 = v98 - (_QWORD)v222;
              v225 = (uint64_t)(v98 - (_QWORD)v222) >> 2;
              if (v225 <= v223 + 1)
                v225 = v223 + 1;
              if (v224 >= 0x7FFFFFFFFFFFFFF8)
                v226 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v226 = v225;
              if (v226)
              {
                v227 = (char *)sub_40FC((uint64_t)(v95 + 549), v226);
                v97 = (char *)v95[548];
                v222 = (char *)v95[547];
              }
              else
              {
                v227 = 0;
              }
              v286 = &v227[8 * v223];
              *(_QWORD *)v286 = v96;
              v99 = v286 + 8;
              while (v97 != v222)
              {
                v287 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v286 - 1) = v287;
                v286 -= 8;
              }
              v95[547] = v286;
              v95[548] = v99;
              v95[549] = &v227[8 * v226];
              if (v222)
                operator delete(v222);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[548] = v99;
            break;
          case 0x97:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 46) & 0x1FF;
            v102 = (char *)v100[551];
            v103 = v100[552];
            if ((unint64_t)v102 >= v103)
            {
              v228 = (char *)v100[550];
              v229 = (v102 - v228) >> 3;
              if ((unint64_t)(v229 + 1) >> 61)
                goto LABEL_414;
              v230 = v103 - (_QWORD)v228;
              v231 = (uint64_t)(v103 - (_QWORD)v228) >> 2;
              if (v231 <= v229 + 1)
                v231 = v229 + 1;
              if (v230 >= 0x7FFFFFFFFFFFFFF8)
                v232 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v232 = v231;
              if (v232)
              {
                v233 = (char *)sub_40FC((uint64_t)(v100 + 552), v232);
                v102 = (char *)v100[551];
                v228 = (char *)v100[550];
              }
              else
              {
                v233 = 0;
              }
              v288 = &v233[8 * v229];
              *(_QWORD *)v288 = v101;
              v104 = v288 + 8;
              while (v102 != v228)
              {
                v289 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v288 - 1) = v289;
                v288 -= 8;
              }
              v100[550] = v288;
              v100[551] = v104;
              v100[552] = &v233[8 * v232];
              if (v228)
                operator delete(v228);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[551] = v104;
            break;
          case 0x98:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 66) & 0x1FF;
            v107 = (char *)v105[554];
            v108 = v105[555];
            if ((unint64_t)v107 >= v108)
            {
              v234 = (char *)v105[553];
              v235 = (v107 - v234) >> 3;
              if ((unint64_t)(v235 + 1) >> 61)
                goto LABEL_414;
              v236 = v108 - (_QWORD)v234;
              v237 = (uint64_t)(v108 - (_QWORD)v234) >> 2;
              if (v237 <= v235 + 1)
                v237 = v235 + 1;
              if (v236 >= 0x7FFFFFFFFFFFFFF8)
                v238 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v238 = v237;
              if (v238)
              {
                v239 = (char *)sub_40FC((uint64_t)(v105 + 555), v238);
                v107 = (char *)v105[554];
                v234 = (char *)v105[553];
              }
              else
              {
                v239 = 0;
              }
              v290 = &v239[8 * v235];
              *(_QWORD *)v290 = v106;
              v109 = v290 + 8;
              while (v107 != v234)
              {
                v291 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v290 - 1) = v291;
                v290 -= 8;
              }
              v105[553] = v290;
              v105[554] = v109;
              v105[555] = &v239[8 * v238];
              if (v234)
                operator delete(v234);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[554] = v109;
            break;
          case 0x99:
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 48) & 0x1FF;
            v112 = (char *)v110[557];
            v113 = v110[558];
            if ((unint64_t)v112 >= v113)
            {
              v240 = (char *)v110[556];
              v241 = (v112 - v240) >> 3;
              if ((unint64_t)(v241 + 1) >> 61)
                goto LABEL_414;
              v242 = v113 - (_QWORD)v240;
              v243 = (uint64_t)(v113 - (_QWORD)v240) >> 2;
              if (v243 <= v241 + 1)
                v243 = v241 + 1;
              if (v242 >= 0x7FFFFFFFFFFFFFF8)
                v244 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v244 = v243;
              if (v244)
              {
                v245 = (char *)sub_40FC((uint64_t)(v110 + 558), v244);
                v112 = (char *)v110[557];
                v240 = (char *)v110[556];
              }
              else
              {
                v245 = 0;
              }
              v292 = &v245[8 * v241];
              *(_QWORD *)v292 = v111;
              v114 = v292 + 8;
              while (v112 != v240)
              {
                v293 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v292 - 1) = v293;
                v292 -= 8;
              }
              v110[556] = v292;
              v110[557] = v114;
              v110[558] = &v245[8 * v244];
              if (v240)
                operator delete(v240);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[557] = v114;
            break;
          case 0x9A:
            v115 = *(_QWORD **)a1[2];
            v116 = (unint64_t)*(unsigned int *)(a1[3] + 28) >> 18;
            v117 = (unint64_t *)v115[560];
            v118 = v115[561];
            if ((unint64_t)v117 >= v118)
            {
              v246 = (unint64_t *)v115[559];
              v247 = v117 - v246;
              if ((unint64_t)(v247 + 1) >> 61)
LABEL_414:
                sub_4074();
              v248 = v118 - (_QWORD)v246;
              v249 = (uint64_t)(v118 - (_QWORD)v246) >> 2;
              if (v249 <= v247 + 1)
                v249 = v247 + 1;
              if (v248 >= 0x7FFFFFFFFFFFFFF8)
                v250 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v250 = v249;
              if (v250)
              {
                v251 = (char *)sub_40FC((uint64_t)(v115 + 561), v250);
                v117 = (unint64_t *)v115[560];
                v246 = (unint64_t *)v115[559];
              }
              else
              {
                v251 = 0;
              }
              v294 = (unint64_t *)&v251[8 * v247];
              *v294 = v116;
              v119 = v294 + 1;
              while (v117 != v246)
              {
                v295 = *--v117;
                *--v294 = v295;
              }
              v115[559] = v294;
              v115[560] = v119;
              v115[561] = &v251[8 * v250];
              if (v246)
                operator delete(v246);
            }
            else
            {
              *v117 = v116;
              v119 = v117 + 1;
            }
            v115[560] = v119;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_19A1AC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  int *v142;
  int **v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;

  v4 = *a1;
  if (*a2 == 1)
  {
    v143 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v142 = *v143;
    v144 = (char *)v143[1] - (char *)*v143;
    if (v144)
    {
      v145 = v144 >> 2;
      if (v145 <= 1)
        v145 = 1;
      do
      {
        v146 = *v142++;
        switch(v146)
        {
          case 165:
            v147 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4744);
            goto LABEL_194;
          case 166:
            v147 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4768);
            goto LABEL_194;
          case 167:
            v147 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4792);
            goto LABEL_194;
          case 168:
            v147 = *(unsigned __int16 *)(a1[3] + 58);
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4816);
            goto LABEL_194;
          case 169:
            v147 = *(unsigned __int16 *)(a1[3] + 56);
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4840);
            goto LABEL_194;
          case 170:
            v147 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4864);
            goto LABEL_194;
          case 171:
            v147 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4888);
            goto LABEL_194;
          case 172:
            v147 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4912);
            goto LABEL_194;
          case 173:
            v147 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4936);
            goto LABEL_194;
          case 174:
            v147 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            v148 = (_QWORD *)(*(_QWORD *)a1[2] + 4960);
LABEL_194:
            *(_QWORD *)(*v148 - 8) += v147;
            break;
          default:
            break;
        }
        --v145;
      }
      while (v145);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xA5:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            v12 = (uint64_t *)v10[593];
            v13 = v10[594];
            if ((unint64_t)v12 >= v13)
            {
              v62 = (uint64_t *)v10[592];
              v63 = v12 - v62;
              if ((unint64_t)(v63 + 1) >> 61)
                goto LABEL_198;
              v64 = v13 - (_QWORD)v62;
              v65 = (uint64_t)(v13 - (_QWORD)v62) >> 2;
              if (v65 <= v63 + 1)
                v65 = v63 + 1;
              if (v64 >= 0x7FFFFFFFFFFFFFF8)
                v66 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v66 = v65;
              if (v66)
              {
                v67 = (char *)sub_40FC((uint64_t)(v10 + 594), v66);
                v12 = (uint64_t *)v10[593];
                v62 = (uint64_t *)v10[592];
              }
              else
              {
                v67 = 0;
              }
              v122 = (uint64_t *)&v67[8 * v63];
              *v122 = v11;
              v14 = v122 + 1;
              while (v12 != v62)
              {
                v123 = *--v12;
                *--v122 = v123;
              }
              v10[592] = v122;
              v10[593] = v14;
              v10[594] = &v67[8 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[593] = v14;
            break;
          case 0xA6:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            v17 = (uint64_t *)v15[596];
            v18 = v15[597];
            if ((unint64_t)v17 >= v18)
            {
              v68 = (uint64_t *)v15[595];
              v69 = v17 - v68;
              if ((unint64_t)(v69 + 1) >> 61)
                goto LABEL_198;
              v70 = v18 - (_QWORD)v68;
              v71 = (uint64_t)(v18 - (_QWORD)v68) >> 2;
              if (v71 <= v69 + 1)
                v71 = v69 + 1;
              if (v70 >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              if (v72)
              {
                v73 = (char *)sub_40FC((uint64_t)(v15 + 597), v72);
                v17 = (uint64_t *)v15[596];
                v68 = (uint64_t *)v15[595];
              }
              else
              {
                v73 = 0;
              }
              v124 = (uint64_t *)&v73[8 * v69];
              *v124 = v16;
              v19 = v124 + 1;
              while (v17 != v68)
              {
                v125 = *--v17;
                *--v124 = v125;
              }
              v15[595] = v124;
              v15[596] = v19;
              v15[597] = &v73[8 * v72];
              if (v68)
                operator delete(v68);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[596] = v19;
            break;
          case 0xA7:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            v22 = (uint64_t *)v20[599];
            v23 = v20[600];
            if ((unint64_t)v22 >= v23)
            {
              v74 = (uint64_t *)v20[598];
              v75 = v22 - v74;
              if ((unint64_t)(v75 + 1) >> 61)
                goto LABEL_198;
              v76 = v23 - (_QWORD)v74;
              v77 = (uint64_t)(v23 - (_QWORD)v74) >> 2;
              if (v77 <= v75 + 1)
                v77 = v75 + 1;
              if (v76 >= 0x7FFFFFFFFFFFFFF8)
                v78 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v78 = v77;
              if (v78)
              {
                v79 = (char *)sub_40FC((uint64_t)(v20 + 600), v78);
                v22 = (uint64_t *)v20[599];
                v74 = (uint64_t *)v20[598];
              }
              else
              {
                v79 = 0;
              }
              v126 = (uint64_t *)&v79[8 * v75];
              *v126 = v21;
              v24 = v126 + 1;
              while (v22 != v74)
              {
                v127 = *--v22;
                *--v126 = v127;
              }
              v20[598] = v126;
              v20[599] = v24;
              v20[600] = &v79[8 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[599] = v24;
            break;
          case 0xA8:
            v25 = a1[2];
            v26 = *(_QWORD **)v25;
            v27 = *(unsigned __int16 *)(a1[3] + 58);
            v28 = *(char **)(*(_QWORD *)v25 + 4816);
            v29 = *(_QWORD *)(*(_QWORD *)v25 + 4824);
            if ((unint64_t)v28 >= v29)
            {
              v80 = (char *)v26[601];
              v81 = (v28 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61)
                goto LABEL_198;
              v82 = v29 - (_QWORD)v80;
              v83 = (uint64_t)(v29 - (_QWORD)v80) >> 2;
              if (v83 <= v81 + 1)
                v83 = v81 + 1;
              if (v82 >= 0x7FFFFFFFFFFFFFF8)
                v84 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v84 = v83;
              if (v84)
              {
                v85 = (char *)sub_40FC((uint64_t)(v26 + 603), v84);
                v28 = (char *)v26[602];
                v80 = (char *)v26[601];
              }
              else
              {
                v85 = 0;
              }
              v128 = &v85[8 * v81];
              *(_QWORD *)v128 = v27;
              v30 = v128 + 8;
              while (v28 != v80)
              {
                v129 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v128 - 1) = v129;
                v128 -= 8;
              }
              v26[601] = v128;
              v26[602] = v30;
              v26[603] = &v85[8 * v84];
              if (v80)
                operator delete(v80);
            }
            else
            {
              *(_QWORD *)v28 = v27;
              v30 = v28 + 8;
            }
            v26[602] = v30;
            break;
          case 0xA9:
            v31 = a1[2];
            v32 = *(_QWORD **)v31;
            v33 = *(unsigned __int16 *)(a1[3] + 56);
            v34 = *(char **)(*(_QWORD *)v31 + 4840);
            v35 = *(_QWORD *)(*(_QWORD *)v31 + 4848);
            if ((unint64_t)v34 >= v35)
            {
              v86 = (char *)v32[604];
              v87 = (v34 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61)
                goto LABEL_198;
              v88 = v35 - (_QWORD)v86;
              v89 = (uint64_t)(v35 - (_QWORD)v86) >> 2;
              if (v89 <= v87 + 1)
                v89 = v87 + 1;
              if (v88 >= 0x7FFFFFFFFFFFFFF8)
                v90 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v90 = v89;
              if (v90)
              {
                v91 = (char *)sub_40FC((uint64_t)(v32 + 606), v90);
                v34 = (char *)v32[605];
                v86 = (char *)v32[604];
              }
              else
              {
                v91 = 0;
              }
              v130 = &v91[8 * v87];
              *(_QWORD *)v130 = v33;
              v36 = v130 + 8;
              while (v34 != v86)
              {
                v131 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v130 - 1) = v131;
                v130 -= 8;
              }
              v32[604] = v130;
              v32[605] = v36;
              v32[606] = &v91[8 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_QWORD *)v34 = v33;
              v36 = v34 + 8;
            }
            v32[605] = v36;
            break;
          case 0xAA:
            v37 = *(_QWORD **)a1[2];
            v38 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            v39 = (uint64_t *)v37[608];
            v40 = v37[609];
            if ((unint64_t)v39 >= v40)
            {
              v92 = (uint64_t *)v37[607];
              v93 = v39 - v92;
              if ((unint64_t)(v93 + 1) >> 61)
                goto LABEL_198;
              v94 = v40 - (_QWORD)v92;
              v95 = (uint64_t)(v40 - (_QWORD)v92) >> 2;
              if (v95 <= v93 + 1)
                v95 = v93 + 1;
              if (v94 >= 0x7FFFFFFFFFFFFFF8)
                v96 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v96 = v95;
              if (v96)
              {
                v97 = (char *)sub_40FC((uint64_t)(v37 + 609), v96);
                v39 = (uint64_t *)v37[608];
                v92 = (uint64_t *)v37[607];
              }
              else
              {
                v97 = 0;
              }
              v132 = (uint64_t *)&v97[8 * v93];
              *v132 = v38;
              v41 = v132 + 1;
              while (v39 != v92)
              {
                v133 = *--v39;
                *--v132 = v133;
              }
              v37[607] = v132;
              v37[608] = v41;
              v37[609] = &v97[8 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *v39 = v38;
              v41 = v39 + 1;
            }
            v37[608] = v41;
            break;
          case 0xAB:
            v42 = *(_QWORD **)a1[2];
            v43 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            v44 = (uint64_t *)v42[611];
            v45 = v42[612];
            if ((unint64_t)v44 >= v45)
            {
              v98 = (uint64_t *)v42[610];
              v99 = v44 - v98;
              if ((unint64_t)(v99 + 1) >> 61)
                goto LABEL_198;
              v100 = v45 - (_QWORD)v98;
              v101 = (uint64_t)(v45 - (_QWORD)v98) >> 2;
              if (v101 <= v99 + 1)
                v101 = v99 + 1;
              if (v100 >= 0x7FFFFFFFFFFFFFF8)
                v102 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
              {
                v103 = (char *)sub_40FC((uint64_t)(v42 + 612), v102);
                v44 = (uint64_t *)v42[611];
                v98 = (uint64_t *)v42[610];
              }
              else
              {
                v103 = 0;
              }
              v134 = (uint64_t *)&v103[8 * v99];
              *v134 = v43;
              v46 = v134 + 1;
              while (v44 != v98)
              {
                v135 = *--v44;
                *--v134 = v135;
              }
              v42[610] = v134;
              v42[611] = v46;
              v42[612] = &v103[8 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *v44 = v43;
              v46 = v44 + 1;
            }
            v42[611] = v46;
            break;
          case 0xAC:
            v47 = *(_QWORD **)a1[2];
            v48 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            v49 = (uint64_t *)v47[614];
            v50 = v47[615];
            if ((unint64_t)v49 >= v50)
            {
              v104 = (uint64_t *)v47[613];
              v105 = v49 - v104;
              if ((unint64_t)(v105 + 1) >> 61)
                goto LABEL_198;
              v106 = v50 - (_QWORD)v104;
              v107 = (uint64_t)(v50 - (_QWORD)v104) >> 2;
              if (v107 <= v105 + 1)
                v107 = v105 + 1;
              if (v106 >= 0x7FFFFFFFFFFFFFF8)
                v108 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v108 = v107;
              if (v108)
              {
                v109 = (char *)sub_40FC((uint64_t)(v47 + 615), v108);
                v49 = (uint64_t *)v47[614];
                v104 = (uint64_t *)v47[613];
              }
              else
              {
                v109 = 0;
              }
              v136 = (uint64_t *)&v109[8 * v105];
              *v136 = v48;
              v51 = v136 + 1;
              while (v49 != v104)
              {
                v137 = *--v49;
                *--v136 = v137;
              }
              v47[613] = v136;
              v47[614] = v51;
              v47[615] = &v109[8 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *v49 = v48;
              v51 = v49 + 1;
            }
            v47[614] = v51;
            break;
          case 0xAD:
            v52 = *(_QWORD **)a1[2];
            v53 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            v54 = (uint64_t *)v52[617];
            v55 = v52[618];
            if ((unint64_t)v54 >= v55)
            {
              v110 = (uint64_t *)v52[616];
              v111 = v54 - v110;
              if ((unint64_t)(v111 + 1) >> 61)
                goto LABEL_198;
              v112 = v55 - (_QWORD)v110;
              v113 = (uint64_t)(v55 - (_QWORD)v110) >> 2;
              if (v113 <= v111 + 1)
                v113 = v111 + 1;
              if (v112 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v113;
              if (v114)
              {
                v115 = (char *)sub_40FC((uint64_t)(v52 + 618), v114);
                v54 = (uint64_t *)v52[617];
                v110 = (uint64_t *)v52[616];
              }
              else
              {
                v115 = 0;
              }
              v138 = (uint64_t *)&v115[8 * v111];
              *v138 = v53;
              v56 = v138 + 1;
              while (v54 != v110)
              {
                v139 = *--v54;
                *--v138 = v139;
              }
              v52[616] = v138;
              v52[617] = v56;
              v52[618] = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v54 = v53;
              v56 = v54 + 1;
            }
            v52[617] = v56;
            break;
          case 0xAE:
            v57 = *(_QWORD **)a1[2];
            v58 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            v59 = (uint64_t *)v57[620];
            v60 = v57[621];
            if ((unint64_t)v59 >= v60)
            {
              v116 = (uint64_t *)v57[619];
              v117 = v59 - v116;
              if ((unint64_t)(v117 + 1) >> 61)
LABEL_198:
                sub_4074();
              v118 = v60 - (_QWORD)v116;
              v119 = (uint64_t)(v60 - (_QWORD)v116) >> 2;
              if (v119 <= v117 + 1)
                v119 = v117 + 1;
              if (v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
              {
                v121 = (char *)sub_40FC((uint64_t)(v57 + 621), v120);
                v59 = (uint64_t *)v57[620];
                v116 = (uint64_t *)v57[619];
              }
              else
              {
                v121 = 0;
              }
              v140 = (uint64_t *)&v121[8 * v117];
              *v140 = v58;
              v61 = v140 + 1;
              while (v59 != v116)
              {
                v141 = *--v59;
                *--v140 = v141;
              }
              v57[619] = v140;
              v57[620] = v61;
              v57[621] = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *v59 = v58;
              v61 = v59 + 1;
            }
            v57[620] = v61;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_19ABE4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  int *v426;
  int **v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  _WORD *v431;
  _QWORD *v432;

  v4 = *a1;
  if (*a2 == 1)
  {
    v427 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v426 = *v427;
    v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      v429 = v428 >> 2;
      if (v429 <= 1)
        v429 = 1;
      do
      {
        v430 = *v426++;
        switch(v430)
        {
          case '!':
            v431 = (_WORD *)(a1[3] + 34);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1576);
            goto LABEL_590;
          case '"':
            v431 = (_WORD *)(a1[3] + 26);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1600);
            goto LABEL_590;
          case '#':
            v431 = (_WORD *)(a1[3] + 36);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1624);
            goto LABEL_590;
          case '$':
            v431 = (_WORD *)(a1[3] + 28);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1648);
            goto LABEL_590;
          case '%':
            v431 = (_WORD *)(a1[3] + 38);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1672);
            goto LABEL_590;
          case '&':
            v431 = (_WORD *)(a1[3] + 30);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1696);
            goto LABEL_590;
          case '\'':
            v431 = (_WORD *)(a1[3] + 40);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1720);
            goto LABEL_590;
          case '(':
            v431 = (_WORD *)(a1[3] + 32);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1744);
            goto LABEL_590;
          case ')':
            v431 = (_WORD *)(a1[3] + 50);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1768);
            goto LABEL_590;
          case '*':
            v431 = (_WORD *)(a1[3] + 42);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1792);
            goto LABEL_590;
          case '+':
            v431 = (_WORD *)(a1[3] + 52);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1816);
            goto LABEL_590;
          case ',':
            v431 = (_WORD *)(a1[3] + 44);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1840);
            goto LABEL_590;
          case '-':
            v431 = (_WORD *)(a1[3] + 54);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1864);
            goto LABEL_590;
          case '.':
            v431 = (_WORD *)(a1[3] + 46);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1888);
            goto LABEL_590;
          case '/':
            v431 = (_WORD *)(a1[3] + 56);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1912);
            goto LABEL_590;
          case '0':
            v431 = (_WORD *)(a1[3] + 48);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1936);
            goto LABEL_590;
          case '1':
            v431 = (_WORD *)(a1[3] + 66);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1960);
            goto LABEL_590;
          case '2':
            v431 = (_WORD *)(a1[3] + 58);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 1984);
            goto LABEL_590;
          case '3':
            v431 = (_WORD *)(a1[3] + 68);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2008);
            goto LABEL_590;
          case '4':
            v431 = (_WORD *)(a1[3] + 60);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2032);
            goto LABEL_590;
          case '5':
            v431 = (_WORD *)(a1[3] + 70);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2056);
            goto LABEL_590;
          case '6':
            v431 = (_WORD *)(a1[3] + 62);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2080);
            goto LABEL_590;
          case '7':
            v431 = (_WORD *)(a1[3] + 72);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2104);
            goto LABEL_590;
          case '8':
            v431 = (_WORD *)(a1[3] + 64);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2128);
            goto LABEL_590;
          case '9':
            v431 = (_WORD *)(a1[3] + 82);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2152);
            goto LABEL_590;
          case ':':
            v431 = (_WORD *)(a1[3] + 74);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2176);
            goto LABEL_590;
          case ';':
            v431 = (_WORD *)(a1[3] + 84);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2200);
            goto LABEL_590;
          case '<':
            v431 = (_WORD *)(a1[3] + 76);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2224);
            goto LABEL_590;
          case '=':
            v431 = (_WORD *)(a1[3] + 86);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2248);
            goto LABEL_590;
          case '>':
            v431 = (_WORD *)(a1[3] + 78);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2272);
            goto LABEL_590;
          case '?':
            v431 = (_WORD *)(a1[3] + 88);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2296);
            goto LABEL_590;
          case '@':
            v431 = (_WORD *)(a1[3] + 80);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2320);
LABEL_590:
            *(_QWORD *)(*v432 - 8) += *v431 & 0x7FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case '!':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v12 = (char *)v10[197];
            v13 = v10[198];
            if ((unint64_t)v12 >= v13)
            {
              v170 = (char *)v10[196];
              v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_594;
              v172 = v13 - (_QWORD)v170;
              v173 = (uint64_t)(v13 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v10 + 198), v174);
                v12 = (char *)v10[197];
                v170 = (char *)v10[196];
              }
              else
              {
                v175 = 0;
              }
              v362 = &v175[8 * v171];
              *(_QWORD *)v362 = v11;
              v14 = v362 + 8;
              while (v12 != v170)
              {
                v363 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[196] = v362;
              v10[197] = v14;
              v10[198] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[197] = v14;
            break;
          case '"':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v17 = (char *)v15[200];
            v18 = v15[201];
            if ((unint64_t)v17 >= v18)
            {
              v176 = (char *)v15[199];
              v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_594;
              v178 = v18 - (_QWORD)v176;
              v179 = (uint64_t)(v18 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v15 + 201), v180);
                v17 = (char *)v15[200];
                v176 = (char *)v15[199];
              }
              else
              {
                v181 = 0;
              }
              v364 = &v181[8 * v177];
              *(_QWORD *)v364 = v16;
              v19 = v364 + 8;
              while (v17 != v176)
              {
                v365 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[199] = v364;
              v15[200] = v19;
              v15[201] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[200] = v19;
            break;
          case '#':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v22 = (char *)v20[203];
            v23 = v20[204];
            if ((unint64_t)v22 >= v23)
            {
              v182 = (char *)v20[202];
              v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_594;
              v184 = v23 - (_QWORD)v182;
              v185 = (uint64_t)(v23 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v20 + 204), v186);
                v22 = (char *)v20[203];
                v182 = (char *)v20[202];
              }
              else
              {
                v187 = 0;
              }
              v366 = &v187[8 * v183];
              *(_QWORD *)v366 = v21;
              v24 = v366 + 8;
              while (v22 != v182)
              {
                v367 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[202] = v366;
              v20[203] = v24;
              v20[204] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[203] = v24;
            break;
          case '$':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v27 = (char *)v25[206];
            v28 = v25[207];
            if ((unint64_t)v27 >= v28)
            {
              v188 = (char *)v25[205];
              v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_594;
              v190 = v28 - (_QWORD)v188;
              v191 = (uint64_t)(v28 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v25 + 207), v192);
                v27 = (char *)v25[206];
                v188 = (char *)v25[205];
              }
              else
              {
                v193 = 0;
              }
              v368 = &v193[8 * v189];
              *(_QWORD *)v368 = v26;
              v29 = v368 + 8;
              while (v27 != v188)
              {
                v369 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[205] = v368;
              v25[206] = v29;
              v25[207] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[206] = v29;
            break;
          case '%':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v32 = (char *)v30[209];
            v33 = v30[210];
            if ((unint64_t)v32 >= v33)
            {
              v194 = (char *)v30[208];
              v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_594;
              v196 = v33 - (_QWORD)v194;
              v197 = (uint64_t)(v33 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v30 + 210), v198);
                v32 = (char *)v30[209];
                v194 = (char *)v30[208];
              }
              else
              {
                v199 = 0;
              }
              v370 = &v199[8 * v195];
              *(_QWORD *)v370 = v31;
              v34 = v370 + 8;
              while (v32 != v194)
              {
                v371 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[208] = v370;
              v30[209] = v34;
              v30[210] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[209] = v34;
            break;
          case '&':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v37 = (char *)v35[212];
            v38 = v35[213];
            if ((unint64_t)v37 >= v38)
            {
              v200 = (char *)v35[211];
              v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_594;
              v202 = v38 - (_QWORD)v200;
              v203 = (uint64_t)(v38 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v35 + 213), v204);
                v37 = (char *)v35[212];
                v200 = (char *)v35[211];
              }
              else
              {
                v205 = 0;
              }
              v372 = &v205[8 * v201];
              *(_QWORD *)v372 = v36;
              v39 = v372 + 8;
              while (v37 != v200)
              {
                v373 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[211] = v372;
              v35[212] = v39;
              v35[213] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[212] = v39;
            break;
          case '\'':
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v42 = (char *)v40[215];
            v43 = v40[216];
            if ((unint64_t)v42 >= v43)
            {
              v206 = (char *)v40[214];
              v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_594;
              v208 = v43 - (_QWORD)v206;
              v209 = (uint64_t)(v43 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v40 + 216), v210);
                v42 = (char *)v40[215];
                v206 = (char *)v40[214];
              }
              else
              {
                v211 = 0;
              }
              v374 = &v211[8 * v207];
              *(_QWORD *)v374 = v41;
              v44 = v374 + 8;
              while (v42 != v206)
              {
                v375 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[214] = v374;
              v40[215] = v44;
              v40[216] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[215] = v44;
            break;
          case '(':
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v47 = (char *)v45[218];
            v48 = v45[219];
            if ((unint64_t)v47 >= v48)
            {
              v212 = (char *)v45[217];
              v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_594;
              v214 = v48 - (_QWORD)v212;
              v215 = (uint64_t)(v48 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v45 + 219), v216);
                v47 = (char *)v45[218];
                v212 = (char *)v45[217];
              }
              else
              {
                v217 = 0;
              }
              v376 = &v217[8 * v213];
              *(_QWORD *)v376 = v46;
              v49 = v376 + 8;
              while (v47 != v212)
              {
                v377 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[217] = v376;
              v45[218] = v49;
              v45[219] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[218] = v49;
            break;
          case ')':
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v52 = (char *)v50[221];
            v53 = v50[222];
            if ((unint64_t)v52 >= v53)
            {
              v218 = (char *)v50[220];
              v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_594;
              v220 = v53 - (_QWORD)v218;
              v221 = (uint64_t)(v53 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v50 + 222), v222);
                v52 = (char *)v50[221];
                v218 = (char *)v50[220];
              }
              else
              {
                v223 = 0;
              }
              v378 = &v223[8 * v219];
              *(_QWORD *)v378 = v51;
              v54 = v378 + 8;
              while (v52 != v218)
              {
                v379 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[220] = v378;
              v50[221] = v54;
              v50[222] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[221] = v54;
            break;
          case '*':
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v57 = (char *)v55[224];
            v58 = v55[225];
            if ((unint64_t)v57 >= v58)
            {
              v224 = (char *)v55[223];
              v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61)
                goto LABEL_594;
              v226 = v58 - (_QWORD)v224;
              v227 = (uint64_t)(v58 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v55 + 225), v228);
                v57 = (char *)v55[224];
                v224 = (char *)v55[223];
              }
              else
              {
                v229 = 0;
              }
              v380 = &v229[8 * v225];
              *(_QWORD *)v380 = v56;
              v59 = v380 + 8;
              while (v57 != v224)
              {
                v381 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[223] = v380;
              v55[224] = v59;
              v55[225] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[224] = v59;
            break;
          case '+':
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            v62 = (char *)v60[227];
            v63 = v60[228];
            if ((unint64_t)v62 >= v63)
            {
              v230 = (char *)v60[226];
              v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61)
                goto LABEL_594;
              v232 = v63 - (_QWORD)v230;
              v233 = (uint64_t)(v63 - (_QWORD)v230) >> 2;
              if (v233 <= v231 + 1)
                v233 = v231 + 1;
              if (v232 >= 0x7FFFFFFFFFFFFFF8)
                v234 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v234 = v233;
              if (v234)
              {
                v235 = (char *)sub_40FC((uint64_t)(v60 + 228), v234);
                v62 = (char *)v60[227];
                v230 = (char *)v60[226];
              }
              else
              {
                v235 = 0;
              }
              v382 = &v235[8 * v231];
              *(_QWORD *)v382 = v61;
              v64 = v382 + 8;
              while (v62 != v230)
              {
                v383 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[226] = v382;
              v60[227] = v64;
              v60[228] = &v235[8 * v234];
              if (v230)
                operator delete(v230);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[227] = v64;
            break;
          case ',':
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v67 = (char *)v65[230];
            v68 = v65[231];
            if ((unint64_t)v67 >= v68)
            {
              v236 = (char *)v65[229];
              v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61)
                goto LABEL_594;
              v238 = v68 - (_QWORD)v236;
              v239 = (uint64_t)(v68 - (_QWORD)v236) >> 2;
              if (v239 <= v237 + 1)
                v239 = v237 + 1;
              if (v238 >= 0x7FFFFFFFFFFFFFF8)
                v240 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v240 = v239;
              if (v240)
              {
                v241 = (char *)sub_40FC((uint64_t)(v65 + 231), v240);
                v67 = (char *)v65[230];
                v236 = (char *)v65[229];
              }
              else
              {
                v241 = 0;
              }
              v384 = &v241[8 * v237];
              *(_QWORD *)v384 = v66;
              v69 = v384 + 8;
              while (v67 != v236)
              {
                v385 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[229] = v384;
              v65[230] = v69;
              v65[231] = &v241[8 * v240];
              if (v236)
                operator delete(v236);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[230] = v69;
            break;
          case '-':
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            v72 = (char *)v70[233];
            v73 = v70[234];
            if ((unint64_t)v72 >= v73)
            {
              v242 = (char *)v70[232];
              v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61)
                goto LABEL_594;
              v244 = v73 - (_QWORD)v242;
              v245 = (uint64_t)(v73 - (_QWORD)v242) >> 2;
              if (v245 <= v243 + 1)
                v245 = v243 + 1;
              if (v244 >= 0x7FFFFFFFFFFFFFF8)
                v246 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v246 = v245;
              if (v246)
              {
                v247 = (char *)sub_40FC((uint64_t)(v70 + 234), v246);
                v72 = (char *)v70[233];
                v242 = (char *)v70[232];
              }
              else
              {
                v247 = 0;
              }
              v386 = &v247[8 * v243];
              *(_QWORD *)v386 = v71;
              v74 = v386 + 8;
              while (v72 != v242)
              {
                v387 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[232] = v386;
              v70[233] = v74;
              v70[234] = &v247[8 * v246];
              if (v242)
                operator delete(v242);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[233] = v74;
            break;
          case '.':
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            v77 = (char *)v75[236];
            v78 = v75[237];
            if ((unint64_t)v77 >= v78)
            {
              v248 = (char *)v75[235];
              v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61)
                goto LABEL_594;
              v250 = v78 - (_QWORD)v248;
              v251 = (uint64_t)(v78 - (_QWORD)v248) >> 2;
              if (v251 <= v249 + 1)
                v251 = v249 + 1;
              if (v250 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v251;
              if (v252)
              {
                v253 = (char *)sub_40FC((uint64_t)(v75 + 237), v252);
                v77 = (char *)v75[236];
                v248 = (char *)v75[235];
              }
              else
              {
                v253 = 0;
              }
              v388 = &v253[8 * v249];
              *(_QWORD *)v388 = v76;
              v79 = v388 + 8;
              while (v77 != v248)
              {
                v389 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[235] = v388;
              v75[236] = v79;
              v75[237] = &v253[8 * v252];
              if (v248)
                operator delete(v248);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[236] = v79;
            break;
          case '/':
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            v82 = (char *)v80[239];
            v83 = v80[240];
            if ((unint64_t)v82 >= v83)
            {
              v254 = (char *)v80[238];
              v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61)
                goto LABEL_594;
              v256 = v83 - (_QWORD)v254;
              v257 = (uint64_t)(v83 - (_QWORD)v254) >> 2;
              if (v257 <= v255 + 1)
                v257 = v255 + 1;
              if (v256 >= 0x7FFFFFFFFFFFFFF8)
                v258 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v258 = v257;
              if (v258)
              {
                v259 = (char *)sub_40FC((uint64_t)(v80 + 240), v258);
                v82 = (char *)v80[239];
                v254 = (char *)v80[238];
              }
              else
              {
                v259 = 0;
              }
              v390 = &v259[8 * v255];
              *(_QWORD *)v390 = v81;
              v84 = v390 + 8;
              while (v82 != v254)
              {
                v391 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[238] = v390;
              v80[239] = v84;
              v80[240] = &v259[8 * v258];
              if (v254)
                operator delete(v254);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[239] = v84;
            break;
          case '0':
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v87 = (char *)v85[242];
            v88 = v85[243];
            if ((unint64_t)v87 >= v88)
            {
              v260 = (char *)v85[241];
              v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61)
                goto LABEL_594;
              v262 = v88 - (_QWORD)v260;
              v263 = (uint64_t)(v88 - (_QWORD)v260) >> 2;
              if (v263 <= v261 + 1)
                v263 = v261 + 1;
              if (v262 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v263;
              if (v264)
              {
                v265 = (char *)sub_40FC((uint64_t)(v85 + 243), v264);
                v87 = (char *)v85[242];
                v260 = (char *)v85[241];
              }
              else
              {
                v265 = 0;
              }
              v392 = &v265[8 * v261];
              *(_QWORD *)v392 = v86;
              v89 = v392 + 8;
              while (v87 != v260)
              {
                v393 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[241] = v392;
              v85[242] = v89;
              v85[243] = &v265[8 * v264];
              if (v260)
                operator delete(v260);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[242] = v89;
            break;
          case '1':
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 66) & 0x7FFF;
            v92 = (char *)v90[245];
            v93 = v90[246];
            if ((unint64_t)v92 >= v93)
            {
              v266 = (char *)v90[244];
              v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61)
                goto LABEL_594;
              v268 = v93 - (_QWORD)v266;
              v269 = (uint64_t)(v93 - (_QWORD)v266) >> 2;
              if (v269 <= v267 + 1)
                v269 = v267 + 1;
              if (v268 >= 0x7FFFFFFFFFFFFFF8)
                v270 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v270 = v269;
              if (v270)
              {
                v271 = (char *)sub_40FC((uint64_t)(v90 + 246), v270);
                v92 = (char *)v90[245];
                v266 = (char *)v90[244];
              }
              else
              {
                v271 = 0;
              }
              v394 = &v271[8 * v267];
              *(_QWORD *)v394 = v91;
              v94 = v394 + 8;
              while (v92 != v266)
              {
                v395 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[244] = v394;
              v90[245] = v94;
              v90[246] = &v271[8 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[245] = v94;
            break;
          case '2':
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            v97 = (char *)v95[248];
            v98 = v95[249];
            if ((unint64_t)v97 >= v98)
            {
              v272 = (char *)v95[247];
              v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61)
                goto LABEL_594;
              v274 = v98 - (_QWORD)v272;
              v275 = (uint64_t)(v98 - (_QWORD)v272) >> 2;
              if (v275 <= v273 + 1)
                v275 = v273 + 1;
              if (v274 >= 0x7FFFFFFFFFFFFFF8)
                v276 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v276 = v275;
              if (v276)
              {
                v277 = (char *)sub_40FC((uint64_t)(v95 + 249), v276);
                v97 = (char *)v95[248];
                v272 = (char *)v95[247];
              }
              else
              {
                v277 = 0;
              }
              v396 = &v277[8 * v273];
              *(_QWORD *)v396 = v96;
              v99 = v396 + 8;
              while (v97 != v272)
              {
                v397 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[247] = v396;
              v95[248] = v99;
              v95[249] = &v277[8 * v276];
              if (v272)
                operator delete(v272);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[248] = v99;
            break;
          case '3':
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 68) & 0x7FFF;
            v102 = (char *)v100[251];
            v103 = v100[252];
            if ((unint64_t)v102 >= v103)
            {
              v278 = (char *)v100[250];
              v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61)
                goto LABEL_594;
              v280 = v103 - (_QWORD)v278;
              v281 = (uint64_t)(v103 - (_QWORD)v278) >> 2;
              if (v281 <= v279 + 1)
                v281 = v279 + 1;
              if (v280 >= 0x7FFFFFFFFFFFFFF8)
                v282 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v282 = v281;
              if (v282)
              {
                v283 = (char *)sub_40FC((uint64_t)(v100 + 252), v282);
                v102 = (char *)v100[251];
                v278 = (char *)v100[250];
              }
              else
              {
                v283 = 0;
              }
              v398 = &v283[8 * v279];
              *(_QWORD *)v398 = v101;
              v104 = v398 + 8;
              while (v102 != v278)
              {
                v399 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[250] = v398;
              v100[251] = v104;
              v100[252] = &v283[8 * v282];
              if (v278)
                operator delete(v278);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[251] = v104;
            break;
          case '4':
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            v107 = (char *)v105[254];
            v108 = v105[255];
            if ((unint64_t)v107 >= v108)
            {
              v284 = (char *)v105[253];
              v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61)
                goto LABEL_594;
              v286 = v108 - (_QWORD)v284;
              v287 = (uint64_t)(v108 - (_QWORD)v284) >> 2;
              if (v287 <= v285 + 1)
                v287 = v285 + 1;
              if (v286 >= 0x7FFFFFFFFFFFFFF8)
                v288 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v288 = v287;
              if (v288)
              {
                v289 = (char *)sub_40FC((uint64_t)(v105 + 255), v288);
                v107 = (char *)v105[254];
                v284 = (char *)v105[253];
              }
              else
              {
                v289 = 0;
              }
              v400 = &v289[8 * v285];
              *(_QWORD *)v400 = v106;
              v109 = v400 + 8;
              while (v107 != v284)
              {
                v401 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[253] = v400;
              v105[254] = v109;
              v105[255] = &v289[8 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[254] = v109;
            break;
          case '5':
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 70) & 0x7FFF;
            v112 = (char *)v110[257];
            v113 = v110[258];
            if ((unint64_t)v112 >= v113)
            {
              v290 = (char *)v110[256];
              v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61)
                goto LABEL_594;
              v292 = v113 - (_QWORD)v290;
              v293 = (uint64_t)(v113 - (_QWORD)v290) >> 2;
              if (v293 <= v291 + 1)
                v293 = v291 + 1;
              if (v292 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v293;
              if (v294)
              {
                v295 = (char *)sub_40FC((uint64_t)(v110 + 258), v294);
                v112 = (char *)v110[257];
                v290 = (char *)v110[256];
              }
              else
              {
                v295 = 0;
              }
              v402 = &v295[8 * v291];
              *(_QWORD *)v402 = v111;
              v114 = v402 + 8;
              while (v112 != v290)
              {
                v403 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[256] = v402;
              v110[257] = v114;
              v110[258] = &v295[8 * v294];
              if (v290)
                operator delete(v290);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[257] = v114;
            break;
          case '6':
            v115 = *(_QWORD **)a1[2];
            v116 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            v117 = (char *)v115[260];
            v118 = v115[261];
            if ((unint64_t)v117 >= v118)
            {
              v296 = (char *)v115[259];
              v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61)
                goto LABEL_594;
              v298 = v118 - (_QWORD)v296;
              v299 = (uint64_t)(v118 - (_QWORD)v296) >> 2;
              if (v299 <= v297 + 1)
                v299 = v297 + 1;
              if (v298 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v299;
              if (v300)
              {
                v301 = (char *)sub_40FC((uint64_t)(v115 + 261), v300);
                v117 = (char *)v115[260];
                v296 = (char *)v115[259];
              }
              else
              {
                v301 = 0;
              }
              v404 = &v301[8 * v297];
              *(_QWORD *)v404 = v116;
              v119 = v404 + 8;
              while (v117 != v296)
              {
                v405 = *((_QWORD *)v117 - 1);
                v117 -= 8;
                *((_QWORD *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[259] = v404;
              v115[260] = v119;
              v115[261] = &v301[8 * v300];
              if (v296)
                operator delete(v296);
            }
            else
            {
              *(_QWORD *)v117 = v116;
              v119 = v117 + 8;
            }
            v115[260] = v119;
            break;
          case '7':
            v120 = *(_QWORD **)a1[2];
            v121 = *(_WORD *)(a1[3] + 72) & 0x7FFF;
            v122 = (char *)v120[263];
            v123 = v120[264];
            if ((unint64_t)v122 >= v123)
            {
              v302 = (char *)v120[262];
              v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61)
                goto LABEL_594;
              v304 = v123 - (_QWORD)v302;
              v305 = (uint64_t)(v123 - (_QWORD)v302) >> 2;
              if (v305 <= v303 + 1)
                v305 = v303 + 1;
              if (v304 >= 0x7FFFFFFFFFFFFFF8)
                v306 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v306 = v305;
              if (v306)
              {
                v307 = (char *)sub_40FC((uint64_t)(v120 + 264), v306);
                v122 = (char *)v120[263];
                v302 = (char *)v120[262];
              }
              else
              {
                v307 = 0;
              }
              v406 = &v307[8 * v303];
              *(_QWORD *)v406 = v121;
              v124 = v406 + 8;
              while (v122 != v302)
              {
                v407 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[262] = v406;
              v120[263] = v124;
              v120[264] = &v307[8 * v306];
              if (v302)
                operator delete(v302);
            }
            else
            {
              *(_QWORD *)v122 = v121;
              v124 = v122 + 8;
            }
            v120[263] = v124;
            break;
          case '8':
            v125 = *(_QWORD **)a1[2];
            v126 = *(_WORD *)(a1[3] + 64) & 0x7FFF;
            v127 = (char *)v125[266];
            v128 = v125[267];
            if ((unint64_t)v127 >= v128)
            {
              v308 = (char *)v125[265];
              v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61)
                goto LABEL_594;
              v310 = v128 - (_QWORD)v308;
              v311 = (uint64_t)(v128 - (_QWORD)v308) >> 2;
              if (v311 <= v309 + 1)
                v311 = v309 + 1;
              if (v310 >= 0x7FFFFFFFFFFFFFF8)
                v312 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v312 = v311;
              if (v312)
              {
                v313 = (char *)sub_40FC((uint64_t)(v125 + 267), v312);
                v127 = (char *)v125[266];
                v308 = (char *)v125[265];
              }
              else
              {
                v313 = 0;
              }
              v408 = &v313[8 * v309];
              *(_QWORD *)v408 = v126;
              v129 = v408 + 8;
              while (v127 != v308)
              {
                v409 = *((_QWORD *)v127 - 1);
                v127 -= 8;
                *((_QWORD *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[265] = v408;
              v125[266] = v129;
              v125[267] = &v313[8 * v312];
              if (v308)
                operator delete(v308);
            }
            else
            {
              *(_QWORD *)v127 = v126;
              v129 = v127 + 8;
            }
            v125[266] = v129;
            break;
          case '9':
            v130 = *(_QWORD **)a1[2];
            v131 = *(_WORD *)(a1[3] + 82) & 0x7FFF;
            v132 = (char *)v130[269];
            v133 = v130[270];
            if ((unint64_t)v132 >= v133)
            {
              v314 = (char *)v130[268];
              v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61)
                goto LABEL_594;
              v316 = v133 - (_QWORD)v314;
              v317 = (uint64_t)(v133 - (_QWORD)v314) >> 2;
              if (v317 <= v315 + 1)
                v317 = v315 + 1;
              if (v316 >= 0x7FFFFFFFFFFFFFF8)
                v318 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v318 = v317;
              if (v318)
              {
                v319 = (char *)sub_40FC((uint64_t)(v130 + 270), v318);
                v132 = (char *)v130[269];
                v314 = (char *)v130[268];
              }
              else
              {
                v319 = 0;
              }
              v410 = &v319[8 * v315];
              *(_QWORD *)v410 = v131;
              v134 = v410 + 8;
              while (v132 != v314)
              {
                v411 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[268] = v410;
              v130[269] = v134;
              v130[270] = &v319[8 * v318];
              if (v314)
                operator delete(v314);
            }
            else
            {
              *(_QWORD *)v132 = v131;
              v134 = v132 + 8;
            }
            v130[269] = v134;
            break;
          case ':':
            v135 = *(_QWORD **)a1[2];
            v136 = *(_WORD *)(a1[3] + 74) & 0x7FFF;
            v137 = (char *)v135[272];
            v138 = v135[273];
            if ((unint64_t)v137 >= v138)
            {
              v320 = (char *)v135[271];
              v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61)
                goto LABEL_594;
              v322 = v138 - (_QWORD)v320;
              v323 = (uint64_t)(v138 - (_QWORD)v320) >> 2;
              if (v323 <= v321 + 1)
                v323 = v321 + 1;
              if (v322 >= 0x7FFFFFFFFFFFFFF8)
                v324 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v324 = v323;
              if (v324)
              {
                v325 = (char *)sub_40FC((uint64_t)(v135 + 273), v324);
                v137 = (char *)v135[272];
                v320 = (char *)v135[271];
              }
              else
              {
                v325 = 0;
              }
              v412 = &v325[8 * v321];
              *(_QWORD *)v412 = v136;
              v139 = v412 + 8;
              while (v137 != v320)
              {
                v413 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[271] = v412;
              v135[272] = v139;
              v135[273] = &v325[8 * v324];
              if (v320)
                operator delete(v320);
            }
            else
            {
              *(_QWORD *)v137 = v136;
              v139 = v137 + 8;
            }
            v135[272] = v139;
            break;
          case ';':
            v140 = *(_QWORD **)a1[2];
            v141 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            v142 = (char *)v140[275];
            v143 = v140[276];
            if ((unint64_t)v142 >= v143)
            {
              v326 = (char *)v140[274];
              v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61)
                goto LABEL_594;
              v328 = v143 - (_QWORD)v326;
              v329 = (uint64_t)(v143 - (_QWORD)v326) >> 2;
              if (v329 <= v327 + 1)
                v329 = v327 + 1;
              if (v328 >= 0x7FFFFFFFFFFFFFF8)
                v330 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v330 = v329;
              if (v330)
              {
                v331 = (char *)sub_40FC((uint64_t)(v140 + 276), v330);
                v142 = (char *)v140[275];
                v326 = (char *)v140[274];
              }
              else
              {
                v331 = 0;
              }
              v414 = &v331[8 * v327];
              *(_QWORD *)v414 = v141;
              v144 = v414 + 8;
              while (v142 != v326)
              {
                v415 = *((_QWORD *)v142 - 1);
                v142 -= 8;
                *((_QWORD *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[274] = v414;
              v140[275] = v144;
              v140[276] = &v331[8 * v330];
              if (v326)
                operator delete(v326);
            }
            else
            {
              *(_QWORD *)v142 = v141;
              v144 = v142 + 8;
            }
            v140[275] = v144;
            break;
          case '<':
            v145 = *(_QWORD **)a1[2];
            v146 = *(_WORD *)(a1[3] + 76) & 0x7FFF;
            v147 = (char *)v145[278];
            v148 = v145[279];
            if ((unint64_t)v147 >= v148)
            {
              v332 = (char *)v145[277];
              v333 = (v147 - v332) >> 3;
              if ((unint64_t)(v333 + 1) >> 61)
                goto LABEL_594;
              v334 = v148 - (_QWORD)v332;
              v335 = (uint64_t)(v148 - (_QWORD)v332) >> 2;
              if (v335 <= v333 + 1)
                v335 = v333 + 1;
              if (v334 >= 0x7FFFFFFFFFFFFFF8)
                v336 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v336 = v335;
              if (v336)
              {
                v337 = (char *)sub_40FC((uint64_t)(v145 + 279), v336);
                v147 = (char *)v145[278];
                v332 = (char *)v145[277];
              }
              else
              {
                v337 = 0;
              }
              v416 = &v337[8 * v333];
              *(_QWORD *)v416 = v146;
              v149 = v416 + 8;
              while (v147 != v332)
              {
                v417 = *((_QWORD *)v147 - 1);
                v147 -= 8;
                *((_QWORD *)v416 - 1) = v417;
                v416 -= 8;
              }
              v145[277] = v416;
              v145[278] = v149;
              v145[279] = &v337[8 * v336];
              if (v332)
                operator delete(v332);
            }
            else
            {
              *(_QWORD *)v147 = v146;
              v149 = v147 + 8;
            }
            v145[278] = v149;
            break;
          case '=':
            v150 = *(_QWORD **)a1[2];
            v151 = *(_WORD *)(a1[3] + 86) & 0x7FFF;
            v152 = (char *)v150[281];
            v153 = v150[282];
            if ((unint64_t)v152 >= v153)
            {
              v338 = (char *)v150[280];
              v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61)
                goto LABEL_594;
              v340 = v153 - (_QWORD)v338;
              v341 = (uint64_t)(v153 - (_QWORD)v338) >> 2;
              if (v341 <= v339 + 1)
                v341 = v339 + 1;
              if (v340 >= 0x7FFFFFFFFFFFFFF8)
                v342 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v342 = v341;
              if (v342)
              {
                v343 = (char *)sub_40FC((uint64_t)(v150 + 282), v342);
                v152 = (char *)v150[281];
                v338 = (char *)v150[280];
              }
              else
              {
                v343 = 0;
              }
              v418 = &v343[8 * v339];
              *(_QWORD *)v418 = v151;
              v154 = v418 + 8;
              while (v152 != v338)
              {
                v419 = *((_QWORD *)v152 - 1);
                v152 -= 8;
                *((_QWORD *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[280] = v418;
              v150[281] = v154;
              v150[282] = &v343[8 * v342];
              if (v338)
                operator delete(v338);
            }
            else
            {
              *(_QWORD *)v152 = v151;
              v154 = v152 + 8;
            }
            v150[281] = v154;
            break;
          case '>':
            v155 = *(_QWORD **)a1[2];
            v156 = *(_WORD *)(a1[3] + 78) & 0x7FFF;
            v157 = (char *)v155[284];
            v158 = v155[285];
            if ((unint64_t)v157 >= v158)
            {
              v344 = (char *)v155[283];
              v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61)
                goto LABEL_594;
              v346 = v158 - (_QWORD)v344;
              v347 = (uint64_t)(v158 - (_QWORD)v344) >> 2;
              if (v347 <= v345 + 1)
                v347 = v345 + 1;
              if (v346 >= 0x7FFFFFFFFFFFFFF8)
                v348 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v348 = v347;
              if (v348)
              {
                v349 = (char *)sub_40FC((uint64_t)(v155 + 285), v348);
                v157 = (char *)v155[284];
                v344 = (char *)v155[283];
              }
              else
              {
                v349 = 0;
              }
              v420 = &v349[8 * v345];
              *(_QWORD *)v420 = v156;
              v159 = v420 + 8;
              while (v157 != v344)
              {
                v421 = *((_QWORD *)v157 - 1);
                v157 -= 8;
                *((_QWORD *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[283] = v420;
              v155[284] = v159;
              v155[285] = &v349[8 * v348];
              if (v344)
                operator delete(v344);
            }
            else
            {
              *(_QWORD *)v157 = v156;
              v159 = v157 + 8;
            }
            v155[284] = v159;
            break;
          case '?':
            v160 = *(_QWORD **)a1[2];
            v161 = *(_WORD *)(a1[3] + 88) & 0x7FFF;
            v162 = (char *)v160[287];
            v163 = v160[288];
            if ((unint64_t)v162 >= v163)
            {
              v350 = (char *)v160[286];
              v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61)
                goto LABEL_594;
              v352 = v163 - (_QWORD)v350;
              v353 = (uint64_t)(v163 - (_QWORD)v350) >> 2;
              if (v353 <= v351 + 1)
                v353 = v351 + 1;
              if (v352 >= 0x7FFFFFFFFFFFFFF8)
                v354 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v354 = v353;
              if (v354)
              {
                v355 = (char *)sub_40FC((uint64_t)(v160 + 288), v354);
                v162 = (char *)v160[287];
                v350 = (char *)v160[286];
              }
              else
              {
                v355 = 0;
              }
              v422 = &v355[8 * v351];
              *(_QWORD *)v422 = v161;
              v164 = v422 + 8;
              while (v162 != v350)
              {
                v423 = *((_QWORD *)v162 - 1);
                v162 -= 8;
                *((_QWORD *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[286] = v422;
              v160[287] = v164;
              v160[288] = &v355[8 * v354];
              if (v350)
                operator delete(v350);
            }
            else
            {
              *(_QWORD *)v162 = v161;
              v164 = v162 + 8;
            }
            v160[287] = v164;
            break;
          case '@':
            v165 = *(_QWORD **)a1[2];
            v166 = *(_WORD *)(a1[3] + 80) & 0x7FFF;
            v167 = (char *)v165[290];
            v168 = v165[291];
            if ((unint64_t)v167 >= v168)
            {
              v356 = (char *)v165[289];
              v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61)
LABEL_594:
                sub_4074();
              v358 = v168 - (_QWORD)v356;
              v359 = (uint64_t)(v168 - (_QWORD)v356) >> 2;
              if (v359 <= v357 + 1)
                v359 = v357 + 1;
              if (v358 >= 0x7FFFFFFFFFFFFFF8)
                v360 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v360 = v359;
              if (v360)
              {
                v361 = (char *)sub_40FC((uint64_t)(v165 + 291), v360);
                v167 = (char *)v165[290];
                v356 = (char *)v165[289];
              }
              else
              {
                v361 = 0;
              }
              v424 = &v361[8 * v357];
              *(_QWORD *)v424 = v166;
              v169 = v424 + 8;
              while (v167 != v356)
              {
                v425 = *((_QWORD *)v167 - 1);
                v167 -= 8;
                *((_QWORD *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[289] = v424;
              v165[290] = v169;
              v165[291] = &v361[8 * v360];
              if (v356)
                operator delete(v356);
            }
            else
            {
              *(_QWORD *)v167 = v166;
              v169 = v167 + 8;
            }
            v165[290] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_19C8A0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  int *v189;
  int **v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  _QWORD *v195;

  v4 = *a1;
  if (*a2 == 1)
  {
    v190 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v189 = *v190;
    v191 = (char *)v190[1] - (char *)*v190;
    if (v191)
    {
      v192 = v191 >> 2;
      if (v192 <= 1)
        v192 = 1;
      do
      {
        v193 = *v189++;
        switch(v193)
        {
          case 15:
            v194 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1144);
            goto LABEL_248;
          case 16:
            v194 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1168);
            goto LABEL_248;
          case 17:
            v194 = *(unsigned __int16 *)(a1[3] + 44);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1192);
            goto LABEL_248;
          case 18:
            v194 = *(unsigned __int16 *)(a1[3] + 32);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1216);
            goto LABEL_248;
          case 19:
            v194 = *(unsigned __int16 *)(a1[3] + 38);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1240);
            goto LABEL_248;
          case 20:
            v194 = *(unsigned __int16 *)(a1[3] + 26);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1264);
            goto LABEL_248;
          case 21:
            v194 = *(unsigned __int16 *)(a1[3] + 40);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1288);
            goto LABEL_248;
          case 22:
            v194 = *(unsigned __int16 *)(a1[3] + 28);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1312);
            goto LABEL_248;
          case 23:
            v194 = *(unsigned __int16 *)(a1[3] + 46);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1336);
            goto LABEL_248;
          case 24:
            v194 = *(unsigned __int16 *)(a1[3] + 34);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1360);
            goto LABEL_248;
          case 25:
            v194 = *(unsigned __int16 *)(a1[3] + 42);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1384);
            goto LABEL_248;
          case 26:
            v194 = *(unsigned __int16 *)(a1[3] + 30);
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1408);
            goto LABEL_248;
          case 27:
            v194 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v195 = (_QWORD *)(*(_QWORD *)a1[2] + 1432);
LABEL_248:
            *(_QWORD *)(*v195 - 8) += v194;
            break;
          default:
            break;
        }
        --v192;
      }
      while (v192);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xF:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v12 = (char *)v10[143];
            v13 = v10[144];
            if ((unint64_t)v12 >= v13)
            {
              v85 = (char *)v10[142];
              v86 = (v12 - v85) >> 3;
              if ((unint64_t)(v86 + 1) >> 61)
                goto LABEL_252;
              v87 = v13 - (_QWORD)v85;
              v88 = (uint64_t)(v13 - (_QWORD)v85) >> 2;
              if (v88 <= v86 + 1)
                v88 = v86 + 1;
              if (v87 >= 0x7FFFFFFFFFFFFFF8)
                v89 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v89 = v88;
              if (v89)
              {
                v90 = (char *)sub_40FC((uint64_t)(v10 + 144), v89);
                v12 = (char *)v10[143];
                v85 = (char *)v10[142];
              }
              else
              {
                v90 = 0;
              }
              v163 = &v90[8 * v86];
              *(_QWORD *)v163 = v11;
              v14 = v163 + 8;
              while (v12 != v85)
              {
                v164 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v163 - 1) = v164;
                v163 -= 8;
              }
              v10[142] = v163;
              v10[143] = v14;
              v10[144] = &v90[8 * v89];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[143] = v14;
            break;
          case 0x10:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v17 = (char *)v15[146];
            v18 = v15[147];
            if ((unint64_t)v17 >= v18)
            {
              v91 = (char *)v15[145];
              v92 = (v17 - v91) >> 3;
              if ((unint64_t)(v92 + 1) >> 61)
                goto LABEL_252;
              v93 = v18 - (_QWORD)v91;
              v94 = (uint64_t)(v18 - (_QWORD)v91) >> 2;
              if (v94 <= v92 + 1)
                v94 = v92 + 1;
              if (v93 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v94;
              if (v95)
              {
                v96 = (char *)sub_40FC((uint64_t)(v15 + 147), v95);
                v17 = (char *)v15[146];
                v91 = (char *)v15[145];
              }
              else
              {
                v96 = 0;
              }
              v165 = &v96[8 * v92];
              *(_QWORD *)v165 = v16;
              v19 = v165 + 8;
              while (v17 != v91)
              {
                v166 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v165 - 1) = v166;
                v165 -= 8;
              }
              v15[145] = v165;
              v15[146] = v19;
              v15[147] = &v96[8 * v95];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[146] = v19;
            break;
          case 0x11:
            v20 = a1[2];
            v21 = *(_QWORD **)v20;
            v22 = *(unsigned __int16 *)(a1[3] + 44);
            v23 = *(char **)(*(_QWORD *)v20 + 1192);
            v24 = *(_QWORD *)(*(_QWORD *)v20 + 1200);
            if ((unint64_t)v23 >= v24)
            {
              v97 = (char *)v21[148];
              v98 = (v23 - v97) >> 3;
              if ((unint64_t)(v98 + 1) >> 61)
                goto LABEL_252;
              v99 = v24 - (_QWORD)v97;
              v100 = (uint64_t)(v24 - (_QWORD)v97) >> 2;
              if (v100 <= v98 + 1)
                v100 = v98 + 1;
              if (v99 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v100;
              if (v101)
              {
                v102 = (char *)sub_40FC((uint64_t)(v21 + 150), v101);
                v23 = (char *)v21[149];
                v97 = (char *)v21[148];
              }
              else
              {
                v102 = 0;
              }
              v167 = &v102[8 * v98];
              *(_QWORD *)v167 = v22;
              v25 = v167 + 8;
              while (v23 != v97)
              {
                v168 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v167 - 1) = v168;
                v167 -= 8;
              }
              v21[148] = v167;
              v21[149] = v25;
              v21[150] = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v23 = v22;
              v25 = v23 + 8;
            }
            v21[149] = v25;
            break;
          case 0x12:
            v26 = a1[2];
            v27 = *(_QWORD **)v26;
            v28 = *(unsigned __int16 *)(a1[3] + 32);
            v29 = *(char **)(*(_QWORD *)v26 + 1216);
            v30 = *(_QWORD *)(*(_QWORD *)v26 + 1224);
            if ((unint64_t)v29 >= v30)
            {
              v103 = (char *)v27[151];
              v104 = (v29 - v103) >> 3;
              if ((unint64_t)(v104 + 1) >> 61)
                goto LABEL_252;
              v105 = v30 - (_QWORD)v103;
              v106 = (uint64_t)(v30 - (_QWORD)v103) >> 2;
              if (v106 <= v104 + 1)
                v106 = v104 + 1;
              if (v105 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v106;
              if (v107)
              {
                v108 = (char *)sub_40FC((uint64_t)(v27 + 153), v107);
                v29 = (char *)v27[152];
                v103 = (char *)v27[151];
              }
              else
              {
                v108 = 0;
              }
              v169 = &v108[8 * v104];
              *(_QWORD *)v169 = v28;
              v31 = v169 + 8;
              while (v29 != v103)
              {
                v170 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v169 - 1) = v170;
                v169 -= 8;
              }
              v27[151] = v169;
              v27[152] = v31;
              v27[153] = &v108[8 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_QWORD *)v29 = v28;
              v31 = v29 + 8;
            }
            v27[152] = v31;
            break;
          case 0x13:
            v32 = a1[2];
            v33 = *(_QWORD **)v32;
            v34 = *(unsigned __int16 *)(a1[3] + 38);
            v35 = *(char **)(*(_QWORD *)v32 + 1240);
            v36 = *(_QWORD *)(*(_QWORD *)v32 + 1248);
            if ((unint64_t)v35 >= v36)
            {
              v109 = (char *)v33[154];
              v110 = (v35 - v109) >> 3;
              if ((unint64_t)(v110 + 1) >> 61)
                goto LABEL_252;
              v111 = v36 - (_QWORD)v109;
              v112 = (uint64_t)(v36 - (_QWORD)v109) >> 2;
              if (v112 <= v110 + 1)
                v112 = v110 + 1;
              if (v111 >= 0x7FFFFFFFFFFFFFF8)
                v113 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v113 = v112;
              if (v113)
              {
                v114 = (char *)sub_40FC((uint64_t)(v33 + 156), v113);
                v35 = (char *)v33[155];
                v109 = (char *)v33[154];
              }
              else
              {
                v114 = 0;
              }
              v171 = &v114[8 * v110];
              *(_QWORD *)v171 = v34;
              v37 = v171 + 8;
              while (v35 != v109)
              {
                v172 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *((_QWORD *)v171 - 1) = v172;
                v171 -= 8;
              }
              v33[154] = v171;
              v33[155] = v37;
              v33[156] = &v114[8 * v113];
              if (v109)
                operator delete(v109);
            }
            else
            {
              *(_QWORD *)v35 = v34;
              v37 = v35 + 8;
            }
            v33[155] = v37;
            break;
          case 0x14:
            v38 = a1[2];
            v39 = *(_QWORD **)v38;
            v40 = *(unsigned __int16 *)(a1[3] + 26);
            v41 = *(char **)(*(_QWORD *)v38 + 1264);
            v42 = *(_QWORD *)(*(_QWORD *)v38 + 1272);
            if ((unint64_t)v41 >= v42)
            {
              v115 = (char *)v39[157];
              v116 = (v41 - v115) >> 3;
              if ((unint64_t)(v116 + 1) >> 61)
                goto LABEL_252;
              v117 = v42 - (_QWORD)v115;
              v118 = (uint64_t)(v42 - (_QWORD)v115) >> 2;
              if (v118 <= v116 + 1)
                v118 = v116 + 1;
              if (v117 >= 0x7FFFFFFFFFFFFFF8)
                v119 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v119 = v118;
              if (v119)
              {
                v120 = (char *)sub_40FC((uint64_t)(v39 + 159), v119);
                v41 = (char *)v39[158];
                v115 = (char *)v39[157];
              }
              else
              {
                v120 = 0;
              }
              v173 = &v120[8 * v116];
              *(_QWORD *)v173 = v40;
              v43 = v173 + 8;
              while (v41 != v115)
              {
                v174 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *((_QWORD *)v173 - 1) = v174;
                v173 -= 8;
              }
              v39[157] = v173;
              v39[158] = v43;
              v39[159] = &v120[8 * v119];
              if (v115)
                operator delete(v115);
            }
            else
            {
              *(_QWORD *)v41 = v40;
              v43 = v41 + 8;
            }
            v39[158] = v43;
            break;
          case 0x15:
            v44 = a1[2];
            v45 = *(_QWORD **)v44;
            v46 = *(unsigned __int16 *)(a1[3] + 40);
            v47 = *(char **)(*(_QWORD *)v44 + 1288);
            v48 = *(_QWORD *)(*(_QWORD *)v44 + 1296);
            if ((unint64_t)v47 >= v48)
            {
              v121 = (char *)v45[160];
              v122 = (v47 - v121) >> 3;
              if ((unint64_t)(v122 + 1) >> 61)
                goto LABEL_252;
              v123 = v48 - (_QWORD)v121;
              v124 = (uint64_t)(v48 - (_QWORD)v121) >> 2;
              if (v124 <= v122 + 1)
                v124 = v122 + 1;
              if (v123 >= 0x7FFFFFFFFFFFFFF8)
                v125 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v125 = v124;
              if (v125)
              {
                v126 = (char *)sub_40FC((uint64_t)(v45 + 162), v125);
                v47 = (char *)v45[161];
                v121 = (char *)v45[160];
              }
              else
              {
                v126 = 0;
              }
              v175 = &v126[8 * v122];
              *(_QWORD *)v175 = v46;
              v49 = v175 + 8;
              while (v47 != v121)
              {
                v176 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v175 - 1) = v176;
                v175 -= 8;
              }
              v45[160] = v175;
              v45[161] = v49;
              v45[162] = &v126[8 * v125];
              if (v121)
                operator delete(v121);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[161] = v49;
            break;
          case 0x16:
            v50 = a1[2];
            v51 = *(_QWORD **)v50;
            v52 = *(unsigned __int16 *)(a1[3] + 28);
            v53 = *(char **)(*(_QWORD *)v50 + 1312);
            v54 = *(_QWORD *)(*(_QWORD *)v50 + 1320);
            if ((unint64_t)v53 >= v54)
            {
              v127 = (char *)v51[163];
              v128 = (v53 - v127) >> 3;
              if ((unint64_t)(v128 + 1) >> 61)
                goto LABEL_252;
              v129 = v54 - (_QWORD)v127;
              v130 = (uint64_t)(v54 - (_QWORD)v127) >> 2;
              if (v130 <= v128 + 1)
                v130 = v128 + 1;
              if (v129 >= 0x7FFFFFFFFFFFFFF8)
                v131 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v131 = v130;
              if (v131)
              {
                v132 = (char *)sub_40FC((uint64_t)(v51 + 165), v131);
                v53 = (char *)v51[164];
                v127 = (char *)v51[163];
              }
              else
              {
                v132 = 0;
              }
              v177 = &v132[8 * v128];
              *(_QWORD *)v177 = v52;
              v55 = v177 + 8;
              while (v53 != v127)
              {
                v178 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v177 - 1) = v178;
                v177 -= 8;
              }
              v51[163] = v177;
              v51[164] = v55;
              v51[165] = &v132[8 * v131];
              if (v127)
                operator delete(v127);
            }
            else
            {
              *(_QWORD *)v53 = v52;
              v55 = v53 + 8;
            }
            v51[164] = v55;
            break;
          case 0x17:
            v56 = a1[2];
            v57 = *(_QWORD **)v56;
            v58 = *(unsigned __int16 *)(a1[3] + 46);
            v59 = *(char **)(*(_QWORD *)v56 + 1336);
            v60 = *(_QWORD *)(*(_QWORD *)v56 + 1344);
            if ((unint64_t)v59 >= v60)
            {
              v133 = (char *)v57[166];
              v134 = (v59 - v133) >> 3;
              if ((unint64_t)(v134 + 1) >> 61)
                goto LABEL_252;
              v135 = v60 - (_QWORD)v133;
              v136 = (uint64_t)(v60 - (_QWORD)v133) >> 2;
              if (v136 <= v134 + 1)
                v136 = v134 + 1;
              if (v135 >= 0x7FFFFFFFFFFFFFF8)
                v137 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v137 = v136;
              if (v137)
              {
                v138 = (char *)sub_40FC((uint64_t)(v57 + 168), v137);
                v59 = (char *)v57[167];
                v133 = (char *)v57[166];
              }
              else
              {
                v138 = 0;
              }
              v179 = &v138[8 * v134];
              *(_QWORD *)v179 = v58;
              v61 = v179 + 8;
              while (v59 != v133)
              {
                v180 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v179 - 1) = v180;
                v179 -= 8;
              }
              v57[166] = v179;
              v57[167] = v61;
              v57[168] = &v138[8 * v137];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *(_QWORD *)v59 = v58;
              v61 = v59 + 8;
            }
            v57[167] = v61;
            break;
          case 0x18:
            v62 = a1[2];
            v63 = *(_QWORD **)v62;
            v64 = *(unsigned __int16 *)(a1[3] + 34);
            v65 = *(char **)(*(_QWORD *)v62 + 1360);
            v66 = *(_QWORD *)(*(_QWORD *)v62 + 1368);
            if ((unint64_t)v65 >= v66)
            {
              v139 = (char *)v63[169];
              v140 = (v65 - v139) >> 3;
              if ((unint64_t)(v140 + 1) >> 61)
                goto LABEL_252;
              v141 = v66 - (_QWORD)v139;
              v142 = (uint64_t)(v66 - (_QWORD)v139) >> 2;
              if (v142 <= v140 + 1)
                v142 = v140 + 1;
              if (v141 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v142;
              if (v143)
              {
                v144 = (char *)sub_40FC((uint64_t)(v63 + 171), v143);
                v65 = (char *)v63[170];
                v139 = (char *)v63[169];
              }
              else
              {
                v144 = 0;
              }
              v181 = &v144[8 * v140];
              *(_QWORD *)v181 = v64;
              v67 = v181 + 8;
              while (v65 != v139)
              {
                v182 = *((_QWORD *)v65 - 1);
                v65 -= 8;
                *((_QWORD *)v181 - 1) = v182;
                v181 -= 8;
              }
              v63[169] = v181;
              v63[170] = v67;
              v63[171] = &v144[8 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_QWORD *)v65 = v64;
              v67 = v65 + 8;
            }
            v63[170] = v67;
            break;
          case 0x19:
            v68 = a1[2];
            v69 = *(_QWORD **)v68;
            v70 = *(unsigned __int16 *)(a1[3] + 42);
            v71 = *(char **)(*(_QWORD *)v68 + 1384);
            v72 = *(_QWORD *)(*(_QWORD *)v68 + 1392);
            if ((unint64_t)v71 >= v72)
            {
              v145 = (char *)v69[172];
              v146 = (v71 - v145) >> 3;
              if ((unint64_t)(v146 + 1) >> 61)
                goto LABEL_252;
              v147 = v72 - (_QWORD)v145;
              v148 = (uint64_t)(v72 - (_QWORD)v145) >> 2;
              if (v148 <= v146 + 1)
                v148 = v146 + 1;
              if (v147 >= 0x7FFFFFFFFFFFFFF8)
                v149 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v149 = v148;
              if (v149)
              {
                v150 = (char *)sub_40FC((uint64_t)(v69 + 174), v149);
                v71 = (char *)v69[173];
                v145 = (char *)v69[172];
              }
              else
              {
                v150 = 0;
              }
              v183 = &v150[8 * v146];
              *(_QWORD *)v183 = v70;
              v73 = v183 + 8;
              while (v71 != v145)
              {
                v184 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *((_QWORD *)v183 - 1) = v184;
                v183 -= 8;
              }
              v69[172] = v183;
              v69[173] = v73;
              v69[174] = &v150[8 * v149];
              if (v145)
                operator delete(v145);
            }
            else
            {
              *(_QWORD *)v71 = v70;
              v73 = v71 + 8;
            }
            v69[173] = v73;
            break;
          case 0x1A:
            v74 = a1[2];
            v75 = *(_QWORD **)v74;
            v76 = *(unsigned __int16 *)(a1[3] + 30);
            v77 = *(char **)(*(_QWORD *)v74 + 1408);
            v78 = *(_QWORD *)(*(_QWORD *)v74 + 1416);
            if ((unint64_t)v77 >= v78)
            {
              v151 = (char *)v75[175];
              v152 = (v77 - v151) >> 3;
              if ((unint64_t)(v152 + 1) >> 61)
                goto LABEL_252;
              v153 = v78 - (_QWORD)v151;
              v154 = (uint64_t)(v78 - (_QWORD)v151) >> 2;
              if (v154 <= v152 + 1)
                v154 = v152 + 1;
              if (v153 >= 0x7FFFFFFFFFFFFFF8)
                v155 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v155 = v154;
              if (v155)
              {
                v156 = (char *)sub_40FC((uint64_t)(v75 + 177), v155);
                v77 = (char *)v75[176];
                v151 = (char *)v75[175];
              }
              else
              {
                v156 = 0;
              }
              v185 = &v156[8 * v152];
              *(_QWORD *)v185 = v76;
              v79 = v185 + 8;
              while (v77 != v151)
              {
                v186 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v185 - 1) = v186;
                v185 -= 8;
              }
              v75[175] = v185;
              v75[176] = v79;
              v75[177] = &v156[8 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[176] = v79;
            break;
          case 0x1B:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v82 = (char *)v80[179];
            v83 = v80[180];
            if ((unint64_t)v82 >= v83)
            {
              v157 = (char *)v80[178];
              v158 = (v82 - v157) >> 3;
              if ((unint64_t)(v158 + 1) >> 61)
LABEL_252:
                sub_4074();
              v159 = v83 - (_QWORD)v157;
              v160 = (uint64_t)(v83 - (_QWORD)v157) >> 2;
              if (v160 <= v158 + 1)
                v160 = v158 + 1;
              if (v159 >= 0x7FFFFFFFFFFFFFF8)
                v161 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v161 = v160;
              if (v161)
              {
                v162 = (char *)sub_40FC((uint64_t)(v80 + 180), v161);
                v82 = (char *)v80[179];
                v157 = (char *)v80[178];
              }
              else
              {
                v162 = 0;
              }
              v187 = &v162[8 * v158];
              *(_QWORD *)v187 = v81;
              v84 = v187 + 8;
              while (v82 != v157)
              {
                v188 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v187 - 1) = v188;
                v187 -= 8;
              }
              v80[178] = v187;
              v80[179] = v84;
              v80[180] = &v162[8 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[179] = v84;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_19D4B4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  int *v207;
  int **v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  _QWORD *v213;

  v4 = *a1;
  if (*a2 == 1)
  {
    v208 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v207 = *v208;
    v209 = (char *)v208[1] - (char *)*v208;
    if (v209)
    {
      v210 = v209 >> 2;
      if (v210 <= 1)
        v210 = 1;
      do
      {
        v211 = *v207++;
        switch(v211)
        {
          case 0:
            v212 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 784);
            goto LABEL_284;
          case 1:
            v212 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 808);
            goto LABEL_284;
          case 2:
            v212 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 832);
            goto LABEL_284;
          case 3:
            v212 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 856);
            goto LABEL_284;
          case 4:
            v212 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 880);
            goto LABEL_284;
          case 5:
            v212 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 904);
            goto LABEL_284;
          case 6:
            v212 = *(unsigned __int16 *)(a1[3] + 62);
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 928);
            goto LABEL_284;
          case 7:
            v212 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 952);
            goto LABEL_284;
          case 8:
            v212 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 976);
            goto LABEL_284;
          case 9:
            v212 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1000);
            goto LABEL_284;
          case 10:
            v212 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1024);
            goto LABEL_284;
          case 11:
            v212 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1048);
            goto LABEL_284;
          case 12:
            v212 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1072);
            goto LABEL_284;
          case 13:
            v212 = *(unsigned __int16 *)(a1[3] + 60);
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1096);
            goto LABEL_284;
          case 14:
            v212 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 1120);
LABEL_284:
            *(_QWORD *)(*v213 - 8) += v212;
            break;
          default:
            break;
        }
        --v210;
      }
      while (v210);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v12 = (uint64_t *)v10[98];
            v13 = v10[99];
            if ((unint64_t)v12 >= v13)
            {
              v87 = (uint64_t *)v10[97];
              v88 = v12 - v87;
              if ((unint64_t)(v88 + 1) >> 61)
                goto LABEL_288;
              v89 = v13 - (_QWORD)v87;
              v90 = (uint64_t)(v13 - (_QWORD)v87) >> 2;
              if (v90 <= v88 + 1)
                v90 = v88 + 1;
              if (v89 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v90;
              if (v91)
              {
                v92 = (char *)sub_40FC((uint64_t)(v10 + 99), v91);
                v12 = (uint64_t *)v10[98];
                v87 = (uint64_t *)v10[97];
              }
              else
              {
                v92 = 0;
              }
              v177 = (uint64_t *)&v92[8 * v88];
              *v177 = v11;
              v14 = v177 + 1;
              while (v12 != v87)
              {
                v178 = *--v12;
                *--v177 = v178;
              }
              v10[97] = v177;
              v10[98] = v14;
              v10[99] = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[98] = v14;
            break;
          case 1:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v17 = (uint64_t *)v15[101];
            v18 = v15[102];
            if ((unint64_t)v17 >= v18)
            {
              v93 = (uint64_t *)v15[100];
              v94 = v17 - v93;
              if ((unint64_t)(v94 + 1) >> 61)
                goto LABEL_288;
              v95 = v18 - (_QWORD)v93;
              v96 = (uint64_t)(v18 - (_QWORD)v93) >> 2;
              if (v96 <= v94 + 1)
                v96 = v94 + 1;
              if (v95 >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v96;
              if (v97)
              {
                v98 = (char *)sub_40FC((uint64_t)(v15 + 102), v97);
                v17 = (uint64_t *)v15[101];
                v93 = (uint64_t *)v15[100];
              }
              else
              {
                v98 = 0;
              }
              v179 = (uint64_t *)&v98[8 * v94];
              *v179 = v16;
              v19 = v179 + 1;
              while (v17 != v93)
              {
                v180 = *--v17;
                *--v179 = v180;
              }
              v15[100] = v179;
              v15[101] = v19;
              v15[102] = &v98[8 * v97];
              if (v93)
                operator delete(v93);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[101] = v19;
            break;
          case 2:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v22 = (uint64_t *)v20[104];
            v23 = v20[105];
            if ((unint64_t)v22 >= v23)
            {
              v99 = (uint64_t *)v20[103];
              v100 = v22 - v99;
              if ((unint64_t)(v100 + 1) >> 61)
                goto LABEL_288;
              v101 = v23 - (_QWORD)v99;
              v102 = (uint64_t)(v23 - (_QWORD)v99) >> 2;
              if (v102 <= v100 + 1)
                v102 = v100 + 1;
              if (v101 >= 0x7FFFFFFFFFFFFFF8)
                v103 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v103 = v102;
              if (v103)
              {
                v104 = (char *)sub_40FC((uint64_t)(v20 + 105), v103);
                v22 = (uint64_t *)v20[104];
                v99 = (uint64_t *)v20[103];
              }
              else
              {
                v104 = 0;
              }
              v181 = (uint64_t *)&v104[8 * v100];
              *v181 = v21;
              v24 = v181 + 1;
              while (v22 != v99)
              {
                v182 = *--v22;
                *--v181 = v182;
              }
              v20[103] = v181;
              v20[104] = v24;
              v20[105] = &v104[8 * v103];
              if (v99)
                operator delete(v99);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[104] = v24;
            break;
          case 3:
            v25 = *(_QWORD **)a1[2];
            v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x3FFFF;
            v27 = (unint64_t *)v25[107];
            v28 = v25[108];
            if ((unint64_t)v27 >= v28)
            {
              v105 = (unint64_t *)v25[106];
              v106 = v27 - v105;
              if ((unint64_t)(v106 + 1) >> 61)
                goto LABEL_288;
              v107 = v28 - (_QWORD)v105;
              v108 = (uint64_t)(v28 - (_QWORD)v105) >> 2;
              if (v108 <= v106 + 1)
                v108 = v106 + 1;
              if (v107 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v108;
              if (v109)
              {
                v110 = (char *)sub_40FC((uint64_t)(v25 + 108), v109);
                v27 = (unint64_t *)v25[107];
                v105 = (unint64_t *)v25[106];
              }
              else
              {
                v110 = 0;
              }
              v183 = (unint64_t *)&v110[8 * v106];
              *v183 = v26;
              v29 = v183 + 1;
              while (v27 != v105)
              {
                v184 = *--v27;
                *--v183 = v184;
              }
              v25[106] = v183;
              v25[107] = v29;
              v25[108] = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[107] = v29;
            break;
          case 4:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            v32 = (uint64_t *)v30[110];
            v33 = v30[111];
            if ((unint64_t)v32 >= v33)
            {
              v111 = (uint64_t *)v30[109];
              v112 = v32 - v111;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_288;
              v113 = v33 - (_QWORD)v111;
              v114 = (uint64_t)(v33 - (_QWORD)v111) >> 2;
              if (v114 <= v112 + 1)
                v114 = v112 + 1;
              if (v113 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                v116 = (char *)sub_40FC((uint64_t)(v30 + 111), v115);
                v32 = (uint64_t *)v30[110];
                v111 = (uint64_t *)v30[109];
              }
              else
              {
                v116 = 0;
              }
              v185 = (uint64_t *)&v116[8 * v112];
              *v185 = v31;
              v34 = v185 + 1;
              while (v32 != v111)
              {
                v186 = *--v32;
                *--v185 = v186;
              }
              v30[109] = v185;
              v30[110] = v34;
              v30[111] = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[110] = v34;
            break;
          case 5:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v37 = (uint64_t *)v35[113];
            v38 = v35[114];
            if ((unint64_t)v37 >= v38)
            {
              v117 = (uint64_t *)v35[112];
              v118 = v37 - v117;
              if ((unint64_t)(v118 + 1) >> 61)
                goto LABEL_288;
              v119 = v38 - (_QWORD)v117;
              v120 = (uint64_t)(v38 - (_QWORD)v117) >> 2;
              if (v120 <= v118 + 1)
                v120 = v118 + 1;
              if (v119 >= 0x7FFFFFFFFFFFFFF8)
                v121 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                v122 = (char *)sub_40FC((uint64_t)(v35 + 114), v121);
                v37 = (uint64_t *)v35[113];
                v117 = (uint64_t *)v35[112];
              }
              else
              {
                v122 = 0;
              }
              v187 = (uint64_t *)&v122[8 * v118];
              *v187 = v36;
              v39 = v187 + 1;
              while (v37 != v117)
              {
                v188 = *--v37;
                *--v187 = v188;
              }
              v35[112] = v187;
              v35[113] = v39;
              v35[114] = &v122[8 * v121];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[113] = v39;
            break;
          case 6:
            v40 = a1[2];
            v41 = *(_QWORD **)v40;
            v42 = *(unsigned __int16 *)(a1[3] + 62);
            v43 = *(char **)(*(_QWORD *)v40 + 928);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 936);
            if ((unint64_t)v43 >= v44)
            {
              v123 = (char *)v41[115];
              v124 = (v43 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61)
                goto LABEL_288;
              v125 = v44 - (_QWORD)v123;
              v126 = (uint64_t)(v44 - (_QWORD)v123) >> 2;
              if (v126 <= v124 + 1)
                v126 = v124 + 1;
              if (v125 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v126;
              if (v127)
              {
                v128 = (char *)sub_40FC((uint64_t)(v41 + 117), v127);
                v43 = (char *)v41[116];
                v123 = (char *)v41[115];
              }
              else
              {
                v128 = 0;
              }
              v189 = &v128[8 * v124];
              *(_QWORD *)v189 = v42;
              v45 = v189 + 8;
              while (v43 != v123)
              {
                v190 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v189 - 1) = v190;
                v189 -= 8;
              }
              v41[115] = v189;
              v41[116] = v45;
              v41[117] = &v128[8 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[116] = v45;
            break;
          case 7:
            v46 = *(_QWORD **)a1[2];
            v47 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            v48 = (uint64_t *)v46[119];
            v49 = v46[120];
            if ((unint64_t)v48 >= v49)
            {
              v129 = (uint64_t *)v46[118];
              v130 = v48 - v129;
              if ((unint64_t)(v130 + 1) >> 61)
                goto LABEL_288;
              v131 = v49 - (_QWORD)v129;
              v132 = (uint64_t)(v49 - (_QWORD)v129) >> 2;
              if (v132 <= v130 + 1)
                v132 = v130 + 1;
              if (v131 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v132;
              if (v133)
              {
                v134 = (char *)sub_40FC((uint64_t)(v46 + 120), v133);
                v48 = (uint64_t *)v46[119];
                v129 = (uint64_t *)v46[118];
              }
              else
              {
                v134 = 0;
              }
              v191 = (uint64_t *)&v134[8 * v130];
              *v191 = v47;
              v50 = v191 + 1;
              while (v48 != v129)
              {
                v192 = *--v48;
                *--v191 = v192;
              }
              v46[118] = v191;
              v46[119] = v50;
              v46[120] = &v134[8 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *v48 = v47;
              v50 = v48 + 1;
            }
            v46[119] = v50;
            break;
          case 8:
            v51 = *(_QWORD **)a1[2];
            v52 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v53 = (uint64_t *)v51[122];
            v54 = v51[123];
            if ((unint64_t)v53 >= v54)
            {
              v135 = (uint64_t *)v51[121];
              v136 = v53 - v135;
              if ((unint64_t)(v136 + 1) >> 61)
                goto LABEL_288;
              v137 = v54 - (_QWORD)v135;
              v138 = (uint64_t)(v54 - (_QWORD)v135) >> 2;
              if (v138 <= v136 + 1)
                v138 = v136 + 1;
              if (v137 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v138;
              if (v139)
              {
                v140 = (char *)sub_40FC((uint64_t)(v51 + 123), v139);
                v53 = (uint64_t *)v51[122];
                v135 = (uint64_t *)v51[121];
              }
              else
              {
                v140 = 0;
              }
              v193 = (uint64_t *)&v140[8 * v136];
              *v193 = v52;
              v55 = v193 + 1;
              while (v53 != v135)
              {
                v194 = *--v53;
                *--v193 = v194;
              }
              v51[121] = v193;
              v51[122] = v55;
              v51[123] = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *v53 = v52;
              v55 = v53 + 1;
            }
            v51[122] = v55;
            break;
          case 9:
            v56 = *(_QWORD **)a1[2];
            v57 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v58 = (uint64_t *)v56[125];
            v59 = v56[126];
            if ((unint64_t)v58 >= v59)
            {
              v141 = (uint64_t *)v56[124];
              v142 = v58 - v141;
              if ((unint64_t)(v142 + 1) >> 61)
                goto LABEL_288;
              v143 = v59 - (_QWORD)v141;
              v144 = (uint64_t)(v59 - (_QWORD)v141) >> 2;
              if (v144 <= v142 + 1)
                v144 = v142 + 1;
              if (v143 >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                v146 = (char *)sub_40FC((uint64_t)(v56 + 126), v145);
                v58 = (uint64_t *)v56[125];
                v141 = (uint64_t *)v56[124];
              }
              else
              {
                v146 = 0;
              }
              v195 = (uint64_t *)&v146[8 * v142];
              *v195 = v57;
              v60 = v195 + 1;
              while (v58 != v141)
              {
                v196 = *--v58;
                *--v195 = v196;
              }
              v56[124] = v195;
              v56[125] = v60;
              v56[126] = &v146[8 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *v58 = v57;
              v60 = v58 + 1;
            }
            v56[125] = v60;
            break;
          case 0xA:
            v61 = *(_QWORD **)a1[2];
            v62 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v63 = (uint64_t *)v61[128];
            v64 = v61[129];
            if ((unint64_t)v63 >= v64)
            {
              v147 = (uint64_t *)v61[127];
              v148 = v63 - v147;
              if ((unint64_t)(v148 + 1) >> 61)
                goto LABEL_288;
              v149 = v64 - (_QWORD)v147;
              v150 = (uint64_t)(v64 - (_QWORD)v147) >> 2;
              if (v150 <= v148 + 1)
                v150 = v148 + 1;
              if (v149 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_40FC((uint64_t)(v61 + 129), v151);
                v63 = (uint64_t *)v61[128];
                v147 = (uint64_t *)v61[127];
              }
              else
              {
                v152 = 0;
              }
              v197 = (uint64_t *)&v152[8 * v148];
              *v197 = v62;
              v65 = v197 + 1;
              while (v63 != v147)
              {
                v198 = *--v63;
                *--v197 = v198;
              }
              v61[127] = v197;
              v61[128] = v65;
              v61[129] = &v152[8 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *v63 = v62;
              v65 = v63 + 1;
            }
            v61[128] = v65;
            break;
          case 0xB:
            v66 = *(_QWORD **)a1[2];
            v67 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            v68 = (uint64_t *)v66[131];
            v69 = v66[132];
            if ((unint64_t)v68 >= v69)
            {
              v153 = (uint64_t *)v66[130];
              v154 = v68 - v153;
              if ((unint64_t)(v154 + 1) >> 61)
                goto LABEL_288;
              v155 = v69 - (_QWORD)v153;
              v156 = (uint64_t)(v69 - (_QWORD)v153) >> 2;
              if (v156 <= v154 + 1)
                v156 = v154 + 1;
              if (v155 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v156;
              if (v157)
              {
                v158 = (char *)sub_40FC((uint64_t)(v66 + 132), v157);
                v68 = (uint64_t *)v66[131];
                v153 = (uint64_t *)v66[130];
              }
              else
              {
                v158 = 0;
              }
              v199 = (uint64_t *)&v158[8 * v154];
              *v199 = v67;
              v70 = v199 + 1;
              while (v68 != v153)
              {
                v200 = *--v68;
                *--v199 = v200;
              }
              v66[130] = v199;
              v66[131] = v70;
              v66[132] = &v158[8 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *v68 = v67;
              v70 = v68 + 1;
            }
            v66[131] = v70;
            break;
          case 0xC:
            v71 = *(_QWORD **)a1[2];
            v72 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            v73 = (uint64_t *)v71[134];
            v74 = v71[135];
            if ((unint64_t)v73 >= v74)
            {
              v159 = (uint64_t *)v71[133];
              v160 = v73 - v159;
              if ((unint64_t)(v160 + 1) >> 61)
                goto LABEL_288;
              v161 = v74 - (_QWORD)v159;
              v162 = (uint64_t)(v74 - (_QWORD)v159) >> 2;
              if (v162 <= v160 + 1)
                v162 = v160 + 1;
              if (v161 >= 0x7FFFFFFFFFFFFFF8)
                v163 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v163 = v162;
              if (v163)
              {
                v164 = (char *)sub_40FC((uint64_t)(v71 + 135), v163);
                v73 = (uint64_t *)v71[134];
                v159 = (uint64_t *)v71[133];
              }
              else
              {
                v164 = 0;
              }
              v201 = (uint64_t *)&v164[8 * v160];
              *v201 = v72;
              v75 = v201 + 1;
              while (v73 != v159)
              {
                v202 = *--v73;
                *--v201 = v202;
              }
              v71[133] = v201;
              v71[134] = v75;
              v71[135] = &v164[8 * v163];
              if (v159)
                operator delete(v159);
            }
            else
            {
              *v73 = v72;
              v75 = v73 + 1;
            }
            v71[134] = v75;
            break;
          case 0xD:
            v76 = a1[2];
            v77 = *(_QWORD **)v76;
            v78 = *(unsigned __int16 *)(a1[3] + 60);
            v79 = *(char **)(*(_QWORD *)v76 + 1096);
            v80 = *(_QWORD *)(*(_QWORD *)v76 + 1104);
            if ((unint64_t)v79 >= v80)
            {
              v165 = (char *)v77[136];
              v166 = (v79 - v165) >> 3;
              if ((unint64_t)(v166 + 1) >> 61)
                goto LABEL_288;
              v167 = v80 - (_QWORD)v165;
              v168 = (uint64_t)(v80 - (_QWORD)v165) >> 2;
              if (v168 <= v166 + 1)
                v168 = v166 + 1;
              if (v167 >= 0x7FFFFFFFFFFFFFF8)
                v169 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v169 = v168;
              if (v169)
              {
                v170 = (char *)sub_40FC((uint64_t)(v77 + 138), v169);
                v79 = (char *)v77[137];
                v165 = (char *)v77[136];
              }
              else
              {
                v170 = 0;
              }
              v203 = &v170[8 * v166];
              *(_QWORD *)v203 = v78;
              v81 = v203 + 8;
              while (v79 != v165)
              {
                v204 = *((_QWORD *)v79 - 1);
                v79 -= 8;
                *((_QWORD *)v203 - 1) = v204;
                v203 -= 8;
              }
              v77[136] = v203;
              v77[137] = v81;
              v77[138] = &v170[8 * v169];
              if (v165)
                operator delete(v165);
            }
            else
            {
              *(_QWORD *)v79 = v78;
              v81 = v79 + 8;
            }
            v77[137] = v81;
            break;
          case 0xE:
            v82 = *(_QWORD **)a1[2];
            v83 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            v84 = (uint64_t *)v82[140];
            v85 = v82[141];
            if ((unint64_t)v84 >= v85)
            {
              v171 = (uint64_t *)v82[139];
              v172 = v84 - v171;
              if ((unint64_t)(v172 + 1) >> 61)
LABEL_288:
                sub_4074();
              v173 = v85 - (_QWORD)v171;
              v174 = (uint64_t)(v85 - (_QWORD)v171) >> 2;
              if (v174 <= v172 + 1)
                v174 = v172 + 1;
              if (v173 >= 0x7FFFFFFFFFFFFFF8)
                v175 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v175 = v174;
              if (v175)
              {
                v176 = (char *)sub_40FC((uint64_t)(v82 + 141), v175);
                v84 = (uint64_t *)v82[140];
                v171 = (uint64_t *)v82[139];
              }
              else
              {
                v176 = 0;
              }
              v205 = (uint64_t *)&v176[8 * v172];
              *v205 = v83;
              v86 = v205 + 1;
              while (v84 != v171)
              {
                v206 = *--v84;
                *--v205 = v206;
              }
              v82[139] = v205;
              v82[140] = v86;
              v82[141] = &v176[8 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *v84 = v83;
              v86 = v84 + 1;
            }
            v82[140] = v86;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_19E2B8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int *v62;
  int **v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  _QWORD *v68;

  v4 = *a1;
  if (*a2 == 1)
  {
    v63 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v62 = *v63;
    v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      v65 = v64 >> 2;
      if (v65 <= 1)
        v65 = 1;
      do
      {
        v66 = *v62++;
        switch(v66)
        {
          case 214:
            v67 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 5920);
            goto LABEL_86;
          case 215:
            v67 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 5944);
            goto LABEL_86;
          case 216:
            v67 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 5968);
            goto LABEL_86;
          case 217:
            v67 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 5992);
LABEL_86:
            *(_QWORD *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xD6:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            v12 = (uint64_t *)v10[740];
            v13 = v10[741];
            if ((unint64_t)v12 >= v13)
            {
              v30 = (uint64_t *)v10[739];
              v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_90;
              v32 = v13 - (_QWORD)v30;
              v33 = (uint64_t)(v13 - (_QWORD)v30) >> 2;
              if (v33 <= v31 + 1)
                v33 = v31 + 1;
              if (v32 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v33;
              if (v34)
              {
                v35 = (char *)sub_40FC((uint64_t)(v10 + 741), v34);
                v12 = (uint64_t *)v10[740];
                v30 = (uint64_t *)v10[739];
              }
              else
              {
                v35 = 0;
              }
              v54 = (uint64_t *)&v35[8 * v31];
              *v54 = v11;
              v14 = v54 + 1;
              while (v12 != v30)
              {
                v55 = *--v12;
                *--v54 = v55;
              }
              v10[739] = v54;
              v10[740] = v14;
              v10[741] = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[740] = v14;
            break;
          case 0xD7:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[743];
            v18 = v15[744];
            if ((unint64_t)v17 >= v18)
            {
              v36 = (uint64_t *)v15[742];
              v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61)
                goto LABEL_90;
              v38 = v18 - (_QWORD)v36;
              v39 = (uint64_t)(v18 - (_QWORD)v36) >> 2;
              if (v39 <= v37 + 1)
                v39 = v37 + 1;
              if (v38 >= 0x7FFFFFFFFFFFFFF8)
                v40 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v40 = v39;
              if (v40)
              {
                v41 = (char *)sub_40FC((uint64_t)(v15 + 744), v40);
                v17 = (uint64_t *)v15[743];
                v36 = (uint64_t *)v15[742];
              }
              else
              {
                v41 = 0;
              }
              v56 = (uint64_t *)&v41[8 * v37];
              *v56 = v16;
              v19 = v56 + 1;
              while (v17 != v36)
              {
                v57 = *--v17;
                *--v56 = v57;
              }
              v15[742] = v56;
              v15[743] = v19;
              v15[744] = &v41[8 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[743] = v19;
            break;
          case 0xD8:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            v22 = (uint64_t *)v20[746];
            v23 = v20[747];
            if ((unint64_t)v22 >= v23)
            {
              v42 = (uint64_t *)v20[745];
              v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61)
                goto LABEL_90;
              v44 = v23 - (_QWORD)v42;
              v45 = (uint64_t)(v23 - (_QWORD)v42) >> 2;
              if (v45 <= v43 + 1)
                v45 = v43 + 1;
              if (v44 >= 0x7FFFFFFFFFFFFFF8)
                v46 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v46 = v45;
              if (v46)
              {
                v47 = (char *)sub_40FC((uint64_t)(v20 + 747), v46);
                v22 = (uint64_t *)v20[746];
                v42 = (uint64_t *)v20[745];
              }
              else
              {
                v47 = 0;
              }
              v58 = (uint64_t *)&v47[8 * v43];
              *v58 = v21;
              v24 = v58 + 1;
              while (v22 != v42)
              {
                v59 = *--v22;
                *--v58 = v59;
              }
              v20[745] = v58;
              v20[746] = v24;
              v20[747] = &v47[8 * v46];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[746] = v24;
            break;
          case 0xD9:
            v25 = *(_QWORD **)a1[2];
            v26 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            v27 = (unint64_t *)v25[749];
            v28 = v25[750];
            if ((unint64_t)v27 >= v28)
            {
              v48 = (unint64_t *)v25[748];
              v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61)
LABEL_90:
                sub_4074();
              v50 = v28 - (_QWORD)v48;
              v51 = (uint64_t)(v28 - (_QWORD)v48) >> 2;
              if (v51 <= v49 + 1)
                v51 = v49 + 1;
              if (v50 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              if (v52)
              {
                v53 = (char *)sub_40FC((uint64_t)(v25 + 750), v52);
                v27 = (unint64_t *)v25[749];
                v48 = (unint64_t *)v25[748];
              }
              else
              {
                v53 = 0;
              }
              v60 = (unint64_t *)&v53[8 * v49];
              *v60 = v26;
              v29 = v60 + 1;
              while (v27 != v48)
              {
                v61 = *--v27;
                *--v60 = v61;
              }
              v25[748] = v60;
              v25[749] = v29;
              v25[750] = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[749] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_19E790(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  uint64_t *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  int *v270;
  int **v271;
  uint64_t v272;
  unint64_t v273;
  int v274;
  int v275;
  _QWORD *v276;

  v4 = *a1;
  if (*a2 == 1)
  {
    v271 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v270 = *v271;
    v272 = (char *)v271[1] - (char *)*v271;
    if (v272)
    {
      v273 = v272 >> 2;
      if (v273 <= 1)
        v273 = 1;
      do
      {
        v274 = *v270++;
        switch(v274)
        {
          case 175:
            v275 = *(_DWORD *)(a1[3] + 48);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 4984);
            goto LABEL_374;
          case 176:
            v275 = *(_DWORD *)(a1[3] + 88);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5008);
            goto LABEL_374;
          case 177:
            v275 = *(_DWORD *)(a1[3] + 24) >> 1;
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5032);
            goto LABEL_374;
          case 178:
            v275 = *(_DWORD *)(a1[3] + 64);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5056);
            goto LABEL_374;
          case 179:
            v275 = *(_DWORD *)(a1[3] + 32);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5080);
            goto LABEL_374;
          case 180:
            v275 = *(_DWORD *)(a1[3] + 72);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5104);
            goto LABEL_374;
          case 181:
            v275 = *(_DWORD *)(a1[3] + 44);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5128);
            goto LABEL_374;
          case 182:
            v275 = *(_DWORD *)(a1[3] + 84);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5152);
            goto LABEL_374;
          case 183:
            v275 = *(_DWORD *)(a1[3] + 40);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5176);
            goto LABEL_374;
          case 184:
            v275 = *(_DWORD *)(a1[3] + 80);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5200);
            goto LABEL_374;
          case 185:
            v275 = *(_DWORD *)(a1[3] + 56);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5224);
            goto LABEL_374;
          case 186:
            v275 = *(_DWORD *)(a1[3] + 96);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5248);
            goto LABEL_374;
          case 187:
            v275 = *(_DWORD *)(a1[3] + 60);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5272);
            goto LABEL_374;
          case 188:
            v275 = *(_DWORD *)(a1[3] + 52);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5296);
            goto LABEL_374;
          case 189:
            v275 = *(_DWORD *)(a1[3] + 92);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5320);
            goto LABEL_374;
          case 190:
            v275 = *(_DWORD *)(a1[3] + 28);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5344);
            goto LABEL_374;
          case 191:
            v275 = *(_DWORD *)(a1[3] + 68);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5368);
            goto LABEL_374;
          case 192:
            v275 = *(_DWORD *)(a1[3] + 36);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5392);
            goto LABEL_374;
          case 193:
            v275 = *(_DWORD *)(a1[3] + 76);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5416);
            goto LABEL_374;
          case 194:
            v275 = *(_DWORD *)(a1[3] + 100);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 5440);
LABEL_374:
            *(_QWORD *)(*v276 - 8) += v275 & 0x7FFFF;
            break;
          default:
            break;
        }
        --v273;
      }
      while (v273);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xAF:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            v12 = (uint64_t *)v10[623];
            v13 = v10[624];
            if ((unint64_t)v12 >= v13)
            {
              v110 = (uint64_t *)v10[622];
              v111 = v12 - v110;
              if ((unint64_t)(v111 + 1) >> 61)
                goto LABEL_378;
              v112 = v13 - (_QWORD)v110;
              v113 = (uint64_t)(v13 - (_QWORD)v110) >> 2;
              if (v113 <= v111 + 1)
                v113 = v111 + 1;
              if (v112 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v113;
              if (v114)
              {
                v115 = (char *)sub_40FC((uint64_t)(v10 + 624), v114);
                v12 = (uint64_t *)v10[623];
                v110 = (uint64_t *)v10[622];
              }
              else
              {
                v115 = 0;
              }
              v230 = (uint64_t *)&v115[8 * v111];
              *v230 = v11;
              v14 = v230 + 1;
              while (v12 != v110)
              {
                v231 = *--v12;
                *--v230 = v231;
              }
              v10[622] = v230;
              v10[623] = v14;
              v10[624] = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[623] = v14;
            break;
          case 0xB0:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 88) & 0x7FFFFLL;
            v17 = (uint64_t *)v15[626];
            v18 = v15[627];
            if ((unint64_t)v17 >= v18)
            {
              v116 = (uint64_t *)v15[625];
              v117 = v17 - v116;
              if ((unint64_t)(v117 + 1) >> 61)
                goto LABEL_378;
              v118 = v18 - (_QWORD)v116;
              v119 = (uint64_t)(v18 - (_QWORD)v116) >> 2;
              if (v119 <= v117 + 1)
                v119 = v117 + 1;
              if (v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
              {
                v121 = (char *)sub_40FC((uint64_t)(v15 + 627), v120);
                v17 = (uint64_t *)v15[626];
                v116 = (uint64_t *)v15[625];
              }
              else
              {
                v121 = 0;
              }
              v232 = (uint64_t *)&v121[8 * v117];
              *v232 = v16;
              v19 = v232 + 1;
              while (v17 != v116)
              {
                v233 = *--v17;
                *--v232 = v233;
              }
              v15[625] = v232;
              v15[626] = v19;
              v15[627] = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[626] = v19;
            break;
          case 0xB1:
            v20 = *(_QWORD **)a1[2];
            v21 = ((unint64_t)*(unsigned int *)(a1[3] + 24) >> 1) & 0x7FFFF;
            v22 = (unint64_t *)v20[629];
            v23 = v20[630];
            if ((unint64_t)v22 >= v23)
            {
              v122 = (unint64_t *)v20[628];
              v123 = v22 - v122;
              if ((unint64_t)(v123 + 1) >> 61)
                goto LABEL_378;
              v124 = v23 - (_QWORD)v122;
              v125 = (uint64_t)(v23 - (_QWORD)v122) >> 2;
              if (v125 <= v123 + 1)
                v125 = v123 + 1;
              if (v124 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v125;
              if (v126)
              {
                v127 = (char *)sub_40FC((uint64_t)(v20 + 630), v126);
                v22 = (unint64_t *)v20[629];
                v122 = (unint64_t *)v20[628];
              }
              else
              {
                v127 = 0;
              }
              v234 = (unint64_t *)&v127[8 * v123];
              *v234 = v21;
              v24 = v234 + 1;
              while (v22 != v122)
              {
                v235 = *--v22;
                *--v234 = v235;
              }
              v20[628] = v234;
              v20[629] = v24;
              v20[630] = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[629] = v24;
            break;
          case 0xB2:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            v27 = (uint64_t *)v25[632];
            v28 = v25[633];
            if ((unint64_t)v27 >= v28)
            {
              v128 = (uint64_t *)v25[631];
              v129 = v27 - v128;
              if ((unint64_t)(v129 + 1) >> 61)
                goto LABEL_378;
              v130 = v28 - (_QWORD)v128;
              v131 = (uint64_t)(v28 - (_QWORD)v128) >> 2;
              if (v131 <= v129 + 1)
                v131 = v129 + 1;
              if (v130 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v131;
              if (v132)
              {
                v133 = (char *)sub_40FC((uint64_t)(v25 + 633), v132);
                v27 = (uint64_t *)v25[632];
                v128 = (uint64_t *)v25[631];
              }
              else
              {
                v133 = 0;
              }
              v236 = (uint64_t *)&v133[8 * v129];
              *v236 = v26;
              v29 = v236 + 1;
              while (v27 != v128)
              {
                v237 = *--v27;
                *--v236 = v237;
              }
              v25[631] = v236;
              v25[632] = v29;
              v25[633] = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[632] = v29;
            break;
          case 0xB3:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            v32 = (uint64_t *)v30[635];
            v33 = v30[636];
            if ((unint64_t)v32 >= v33)
            {
              v134 = (uint64_t *)v30[634];
              v135 = v32 - v134;
              if ((unint64_t)(v135 + 1) >> 61)
                goto LABEL_378;
              v136 = v33 - (_QWORD)v134;
              v137 = (uint64_t)(v33 - (_QWORD)v134) >> 2;
              if (v137 <= v135 + 1)
                v137 = v135 + 1;
              if (v136 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v137;
              if (v138)
              {
                v139 = (char *)sub_40FC((uint64_t)(v30 + 636), v138);
                v32 = (uint64_t *)v30[635];
                v134 = (uint64_t *)v30[634];
              }
              else
              {
                v139 = 0;
              }
              v238 = (uint64_t *)&v139[8 * v135];
              *v238 = v31;
              v34 = v238 + 1;
              while (v32 != v134)
              {
                v239 = *--v32;
                *--v238 = v239;
              }
              v30[634] = v238;
              v30[635] = v34;
              v30[636] = &v139[8 * v138];
              if (v134)
                operator delete(v134);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[635] = v34;
            break;
          case 0xB4:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            v37 = (uint64_t *)v35[638];
            v38 = v35[639];
            if ((unint64_t)v37 >= v38)
            {
              v140 = (uint64_t *)v35[637];
              v141 = v37 - v140;
              if ((unint64_t)(v141 + 1) >> 61)
                goto LABEL_378;
              v142 = v38 - (_QWORD)v140;
              v143 = (uint64_t)(v38 - (_QWORD)v140) >> 2;
              if (v143 <= v141 + 1)
                v143 = v141 + 1;
              if (v142 >= 0x7FFFFFFFFFFFFFF8)
                v144 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v144 = v143;
              if (v144)
              {
                v145 = (char *)sub_40FC((uint64_t)(v35 + 639), v144);
                v37 = (uint64_t *)v35[638];
                v140 = (uint64_t *)v35[637];
              }
              else
              {
                v145 = 0;
              }
              v240 = (uint64_t *)&v145[8 * v141];
              *v240 = v36;
              v39 = v240 + 1;
              while (v37 != v140)
              {
                v241 = *--v37;
                *--v240 = v241;
              }
              v35[637] = v240;
              v35[638] = v39;
              v35[639] = &v145[8 * v144];
              if (v140)
                operator delete(v140);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[638] = v39;
            break;
          case 0xB5:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            v42 = (uint64_t *)v40[641];
            v43 = v40[642];
            if ((unint64_t)v42 >= v43)
            {
              v146 = (uint64_t *)v40[640];
              v147 = v42 - v146;
              if ((unint64_t)(v147 + 1) >> 61)
                goto LABEL_378;
              v148 = v43 - (_QWORD)v146;
              v149 = (uint64_t)(v43 - (_QWORD)v146) >> 2;
              if (v149 <= v147 + 1)
                v149 = v147 + 1;
              if (v148 >= 0x7FFFFFFFFFFFFFF8)
                v150 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v150 = v149;
              if (v150)
              {
                v151 = (char *)sub_40FC((uint64_t)(v40 + 642), v150);
                v42 = (uint64_t *)v40[641];
                v146 = (uint64_t *)v40[640];
              }
              else
              {
                v151 = 0;
              }
              v242 = (uint64_t *)&v151[8 * v147];
              *v242 = v41;
              v44 = v242 + 1;
              while (v42 != v146)
              {
                v243 = *--v42;
                *--v242 = v243;
              }
              v40[640] = v242;
              v40[641] = v44;
              v40[642] = &v151[8 * v150];
              if (v146)
                operator delete(v146);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[641] = v44;
            break;
          case 0xB6:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_DWORD *)(a1[3] + 84) & 0x7FFFFLL;
            v47 = (uint64_t *)v45[644];
            v48 = v45[645];
            if ((unint64_t)v47 >= v48)
            {
              v152 = (uint64_t *)v45[643];
              v153 = v47 - v152;
              if ((unint64_t)(v153 + 1) >> 61)
                goto LABEL_378;
              v154 = v48 - (_QWORD)v152;
              v155 = (uint64_t)(v48 - (_QWORD)v152) >> 2;
              if (v155 <= v153 + 1)
                v155 = v153 + 1;
              if (v154 >= 0x7FFFFFFFFFFFFFF8)
                v156 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v156 = v155;
              if (v156)
              {
                v157 = (char *)sub_40FC((uint64_t)(v45 + 645), v156);
                v47 = (uint64_t *)v45[644];
                v152 = (uint64_t *)v45[643];
              }
              else
              {
                v157 = 0;
              }
              v244 = (uint64_t *)&v157[8 * v153];
              *v244 = v46;
              v49 = v244 + 1;
              while (v47 != v152)
              {
                v245 = *--v47;
                *--v244 = v245;
              }
              v45[643] = v244;
              v45[644] = v49;
              v45[645] = &v157[8 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *v47 = v46;
              v49 = v47 + 1;
            }
            v45[644] = v49;
            break;
          case 0xB7:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            v52 = (uint64_t *)v50[647];
            v53 = v50[648];
            if ((unint64_t)v52 >= v53)
            {
              v158 = (uint64_t *)v50[646];
              v159 = v52 - v158;
              if ((unint64_t)(v159 + 1) >> 61)
                goto LABEL_378;
              v160 = v53 - (_QWORD)v158;
              v161 = (uint64_t)(v53 - (_QWORD)v158) >> 2;
              if (v161 <= v159 + 1)
                v161 = v159 + 1;
              if (v160 >= 0x7FFFFFFFFFFFFFF8)
                v162 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v162 = v161;
              if (v162)
              {
                v163 = (char *)sub_40FC((uint64_t)(v50 + 648), v162);
                v52 = (uint64_t *)v50[647];
                v158 = (uint64_t *)v50[646];
              }
              else
              {
                v163 = 0;
              }
              v246 = (uint64_t *)&v163[8 * v159];
              *v246 = v51;
              v54 = v246 + 1;
              while (v52 != v158)
              {
                v247 = *--v52;
                *--v246 = v247;
              }
              v50[646] = v246;
              v50[647] = v54;
              v50[648] = &v163[8 * v162];
              if (v158)
                operator delete(v158);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[647] = v54;
            break;
          case 0xB8:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            v57 = (uint64_t *)v55[650];
            v58 = v55[651];
            if ((unint64_t)v57 >= v58)
            {
              v164 = (uint64_t *)v55[649];
              v165 = v57 - v164;
              if ((unint64_t)(v165 + 1) >> 61)
                goto LABEL_378;
              v166 = v58 - (_QWORD)v164;
              v167 = (uint64_t)(v58 - (_QWORD)v164) >> 2;
              if (v167 <= v165 + 1)
                v167 = v165 + 1;
              if (v166 >= 0x7FFFFFFFFFFFFFF8)
                v168 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v168 = v167;
              if (v168)
              {
                v169 = (char *)sub_40FC((uint64_t)(v55 + 651), v168);
                v57 = (uint64_t *)v55[650];
                v164 = (uint64_t *)v55[649];
              }
              else
              {
                v169 = 0;
              }
              v248 = (uint64_t *)&v169[8 * v165];
              *v248 = v56;
              v59 = v248 + 1;
              while (v57 != v164)
              {
                v249 = *--v57;
                *--v248 = v249;
              }
              v55[649] = v248;
              v55[650] = v59;
              v55[651] = &v169[8 * v168];
              if (v164)
                operator delete(v164);
            }
            else
            {
              *v57 = v56;
              v59 = v57 + 1;
            }
            v55[650] = v59;
            break;
          case 0xB9:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            v62 = (uint64_t *)v60[653];
            v63 = v60[654];
            if ((unint64_t)v62 >= v63)
            {
              v170 = (uint64_t *)v60[652];
              v171 = v62 - v170;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_378;
              v172 = v63 - (_QWORD)v170;
              v173 = (uint64_t)(v63 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v60 + 654), v174);
                v62 = (uint64_t *)v60[653];
                v170 = (uint64_t *)v60[652];
              }
              else
              {
                v175 = 0;
              }
              v250 = (uint64_t *)&v175[8 * v171];
              *v250 = v61;
              v64 = v250 + 1;
              while (v62 != v170)
              {
                v251 = *--v62;
                *--v250 = v251;
              }
              v60[652] = v250;
              v60[653] = v64;
              v60[654] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *v62 = v61;
              v64 = v62 + 1;
            }
            v60[653] = v64;
            break;
          case 0xBA:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_DWORD *)(a1[3] + 96) & 0x7FFFFLL;
            v67 = (uint64_t *)v65[656];
            v68 = v65[657];
            if ((unint64_t)v67 >= v68)
            {
              v176 = (uint64_t *)v65[655];
              v177 = v67 - v176;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_378;
              v178 = v68 - (_QWORD)v176;
              v179 = (uint64_t)(v68 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v65 + 657), v180);
                v67 = (uint64_t *)v65[656];
                v176 = (uint64_t *)v65[655];
              }
              else
              {
                v181 = 0;
              }
              v252 = (uint64_t *)&v181[8 * v177];
              *v252 = v66;
              v69 = v252 + 1;
              while (v67 != v176)
              {
                v253 = *--v67;
                *--v252 = v253;
              }
              v65[655] = v252;
              v65[656] = v69;
              v65[657] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *v67 = v66;
              v69 = v67 + 1;
            }
            v65[656] = v69;
            break;
          case 0xBB:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            v72 = (uint64_t *)v70[659];
            v73 = v70[660];
            if ((unint64_t)v72 >= v73)
            {
              v182 = (uint64_t *)v70[658];
              v183 = v72 - v182;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_378;
              v184 = v73 - (_QWORD)v182;
              v185 = (uint64_t)(v73 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v70 + 660), v186);
                v72 = (uint64_t *)v70[659];
                v182 = (uint64_t *)v70[658];
              }
              else
              {
                v187 = 0;
              }
              v254 = (uint64_t *)&v187[8 * v183];
              *v254 = v71;
              v74 = v254 + 1;
              while (v72 != v182)
              {
                v255 = *--v72;
                *--v254 = v255;
              }
              v70[658] = v254;
              v70[659] = v74;
              v70[660] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[659] = v74;
            break;
          case 0xBC:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            v77 = (uint64_t *)v75[662];
            v78 = v75[663];
            if ((unint64_t)v77 >= v78)
            {
              v188 = (uint64_t *)v75[661];
              v189 = v77 - v188;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_378;
              v190 = v78 - (_QWORD)v188;
              v191 = (uint64_t)(v78 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v75 + 663), v192);
                v77 = (uint64_t *)v75[662];
                v188 = (uint64_t *)v75[661];
              }
              else
              {
                v193 = 0;
              }
              v256 = (uint64_t *)&v193[8 * v189];
              *v256 = v76;
              v79 = v256 + 1;
              while (v77 != v188)
              {
                v257 = *--v77;
                *--v256 = v257;
              }
              v75[661] = v256;
              v75[662] = v79;
              v75[663] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[662] = v79;
            break;
          case 0xBD:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_DWORD *)(a1[3] + 92) & 0x7FFFFLL;
            v82 = (uint64_t *)v80[665];
            v83 = v80[666];
            if ((unint64_t)v82 >= v83)
            {
              v194 = (uint64_t *)v80[664];
              v195 = v82 - v194;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_378;
              v196 = v83 - (_QWORD)v194;
              v197 = (uint64_t)(v83 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v80 + 666), v198);
                v82 = (uint64_t *)v80[665];
                v194 = (uint64_t *)v80[664];
              }
              else
              {
                v199 = 0;
              }
              v258 = (uint64_t *)&v199[8 * v195];
              *v258 = v81;
              v84 = v258 + 1;
              while (v82 != v194)
              {
                v259 = *--v82;
                *--v258 = v259;
              }
              v80[664] = v258;
              v80[665] = v84;
              v80[666] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *v82 = v81;
              v84 = v82 + 1;
            }
            v80[665] = v84;
            break;
          case 0xBE:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            v87 = (uint64_t *)v85[668];
            v88 = v85[669];
            if ((unint64_t)v87 >= v88)
            {
              v200 = (uint64_t *)v85[667];
              v201 = v87 - v200;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_378;
              v202 = v88 - (_QWORD)v200;
              v203 = (uint64_t)(v88 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v85 + 669), v204);
                v87 = (uint64_t *)v85[668];
                v200 = (uint64_t *)v85[667];
              }
              else
              {
                v205 = 0;
              }
              v260 = (uint64_t *)&v205[8 * v201];
              *v260 = v86;
              v89 = v260 + 1;
              while (v87 != v200)
              {
                v261 = *--v87;
                *--v260 = v261;
              }
              v85[667] = v260;
              v85[668] = v89;
              v85[669] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *v87 = v86;
              v89 = v87 + 1;
            }
            v85[668] = v89;
            break;
          case 0xBF:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            v92 = (uint64_t *)v90[671];
            v93 = v90[672];
            if ((unint64_t)v92 >= v93)
            {
              v206 = (uint64_t *)v90[670];
              v207 = v92 - v206;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_378;
              v208 = v93 - (_QWORD)v206;
              v209 = (uint64_t)(v93 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v90 + 672), v210);
                v92 = (uint64_t *)v90[671];
                v206 = (uint64_t *)v90[670];
              }
              else
              {
                v211 = 0;
              }
              v262 = (uint64_t *)&v211[8 * v207];
              *v262 = v91;
              v94 = v262 + 1;
              while (v92 != v206)
              {
                v263 = *--v92;
                *--v262 = v263;
              }
              v90[670] = v262;
              v90[671] = v94;
              v90[672] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *v92 = v91;
              v94 = v92 + 1;
            }
            v90[671] = v94;
            break;
          case 0xC0:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            v97 = (uint64_t *)v95[674];
            v98 = v95[675];
            if ((unint64_t)v97 >= v98)
            {
              v212 = (uint64_t *)v95[673];
              v213 = v97 - v212;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_378;
              v214 = v98 - (_QWORD)v212;
              v215 = (uint64_t)(v98 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v95 + 675), v216);
                v97 = (uint64_t *)v95[674];
                v212 = (uint64_t *)v95[673];
              }
              else
              {
                v217 = 0;
              }
              v264 = (uint64_t *)&v217[8 * v213];
              *v264 = v96;
              v99 = v264 + 1;
              while (v97 != v212)
              {
                v265 = *--v97;
                *--v264 = v265;
              }
              v95[673] = v264;
              v95[674] = v99;
              v95[675] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *v97 = v96;
              v99 = v97 + 1;
            }
            v95[674] = v99;
            break;
          case 0xC1:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            v102 = (uint64_t *)v100[677];
            v103 = v100[678];
            if ((unint64_t)v102 >= v103)
            {
              v218 = (uint64_t *)v100[676];
              v219 = v102 - v218;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_378;
              v220 = v103 - (_QWORD)v218;
              v221 = (uint64_t)(v103 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v100 + 678), v222);
                v102 = (uint64_t *)v100[677];
                v218 = (uint64_t *)v100[676];
              }
              else
              {
                v223 = 0;
              }
              v266 = (uint64_t *)&v223[8 * v219];
              *v266 = v101;
              v104 = v266 + 1;
              while (v102 != v218)
              {
                v267 = *--v102;
                *--v266 = v267;
              }
              v100[676] = v266;
              v100[677] = v104;
              v100[678] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *v102 = v101;
              v104 = v102 + 1;
            }
            v100[677] = v104;
            break;
          case 0xC2:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_DWORD *)(a1[3] + 100) & 0x7FFFFLL;
            v107 = (uint64_t *)v105[680];
            v108 = v105[681];
            if ((unint64_t)v107 >= v108)
            {
              v224 = (uint64_t *)v105[679];
              v225 = v107 - v224;
              if ((unint64_t)(v225 + 1) >> 61)
LABEL_378:
                sub_4074();
              v226 = v108 - (_QWORD)v224;
              v227 = (uint64_t)(v108 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v105 + 681), v228);
                v107 = (uint64_t *)v105[680];
                v224 = (uint64_t *)v105[679];
              }
              else
              {
                v229 = 0;
              }
              v268 = (uint64_t *)&v229[8 * v225];
              *v268 = v106;
              v109 = v268 + 1;
              while (v107 != v224)
              {
                v269 = *--v107;
                *--v268 = v269;
              }
              v105[679] = v268;
              v105[680] = v109;
              v105[681] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *v107 = v106;
              v109 = v107 + 1;
            }
            v105[680] = v109;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_19FAA0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  int *v257;
  int **v258;
  uint64_t v259;
  unint64_t v260;
  int v261;
  uint64_t v262;
  _QWORD *v263;

  v4 = *a1;
  if (*a2 == 1)
  {
    v258 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v257 = *v258;
    v259 = (char *)v258[1] - (char *)*v258;
    if (v259)
    {
      v260 = v259 >> 2;
      if (v260 <= 1)
        v260 = 1;
      do
      {
        v261 = *v257++;
        switch(v261)
        {
          case 195:
            v262 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5464);
            goto LABEL_356;
          case 196:
            v262 = *(_DWORD *)(a1[3] + 68) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5488);
            goto LABEL_356;
          case 197:
            v262 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5512);
            goto LABEL_356;
          case 198:
            v262 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5536);
            goto LABEL_356;
          case 199:
            v262 = *(_DWORD *)(a1[3] + 44) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5560);
            goto LABEL_356;
          case 200:
            v262 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5584);
            goto LABEL_356;
          case 201:
            v262 = *(_DWORD *)(a1[3] + 52) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5608);
            goto LABEL_356;
          case 202:
            v262 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5632);
            goto LABEL_356;
          case 203:
            v262 = *(_DWORD *)(a1[3] + 64) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5656);
            goto LABEL_356;
          case 204:
            v262 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5680);
            goto LABEL_356;
          case 205:
            v262 = *(_DWORD *)(a1[3] + 60) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5704);
            goto LABEL_356;
          case 206:
            v262 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5728);
            goto LABEL_356;
          case 207:
            v262 = *(_DWORD *)(a1[3] + 76) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5752);
            goto LABEL_356;
          case 208:
            v262 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5776);
            goto LABEL_356;
          case 209:
            v262 = *(_DWORD *)(a1[3] + 72) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5800);
            goto LABEL_356;
          case 210:
            v262 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5824);
            goto LABEL_356;
          case 211:
            v262 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5848);
            goto LABEL_356;
          case 212:
            v262 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5872);
            goto LABEL_356;
          case 213:
            v262 = *(_DWORD *)(a1[3] + 56) & 0x7FFFF;
            v263 = (_QWORD *)(*(_QWORD *)a1[2] + 5896);
LABEL_356:
            *(_QWORD *)(*v263 - 8) += v262;
            break;
          default:
            break;
        }
        --v260;
      }
      while (v260);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xC3:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v12 = (char *)v10[683];
            v13 = v10[684];
            if ((unint64_t)v12 >= v13)
            {
              v105 = (char *)v10[682];
              v106 = (v12 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61)
                goto LABEL_360;
              v107 = v13 - (_QWORD)v105;
              v108 = (uint64_t)(v13 - (_QWORD)v105) >> 2;
              if (v108 <= v106 + 1)
                v108 = v106 + 1;
              if (v107 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v108;
              if (v109)
              {
                v110 = (char *)sub_40FC((uint64_t)(v10 + 684), v109);
                v12 = (char *)v10[683];
                v105 = (char *)v10[682];
              }
              else
              {
                v110 = 0;
              }
              v219 = &v110[8 * v106];
              *(_QWORD *)v219 = v11;
              v14 = v219 + 8;
              while (v12 != v105)
              {
                v220 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v219 - 1) = v220;
                v219 -= 8;
              }
              v10[682] = v219;
              v10[683] = v14;
              v10[684] = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[683] = v14;
            break;
          case 0xC4:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 68) & 0x7FFFFLL;
            v17 = (uint64_t *)v15[686];
            v18 = v15[687];
            if ((unint64_t)v17 >= v18)
            {
              v111 = (uint64_t *)v15[685];
              v112 = v17 - v111;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_360;
              v113 = v18 - (_QWORD)v111;
              v114 = (uint64_t)(v18 - (_QWORD)v111) >> 2;
              if (v114 <= v112 + 1)
                v114 = v112 + 1;
              if (v113 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                v116 = (char *)sub_40FC((uint64_t)(v15 + 687), v115);
                v17 = (uint64_t *)v15[686];
                v111 = (uint64_t *)v15[685];
              }
              else
              {
                v116 = 0;
              }
              v221 = (uint64_t *)&v116[8 * v112];
              *v221 = v16;
              v19 = v221 + 1;
              while (v17 != v111)
              {
                v222 = *--v17;
                *--v221 = v222;
              }
              v15[685] = v221;
              v15[686] = v19;
              v15[687] = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[686] = v19;
            break;
          case 0xC5:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v22 = (char *)v20[689];
            v23 = v20[690];
            if ((unint64_t)v22 >= v23)
            {
              v117 = (char *)v20[688];
              v118 = (v22 - v117) >> 3;
              if ((unint64_t)(v118 + 1) >> 61)
                goto LABEL_360;
              v119 = v23 - (_QWORD)v117;
              v120 = (uint64_t)(v23 - (_QWORD)v117) >> 2;
              if (v120 <= v118 + 1)
                v120 = v118 + 1;
              if (v119 >= 0x7FFFFFFFFFFFFFF8)
                v121 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                v122 = (char *)sub_40FC((uint64_t)(v20 + 690), v121);
                v22 = (char *)v20[689];
                v117 = (char *)v20[688];
              }
              else
              {
                v122 = 0;
              }
              v223 = &v122[8 * v118];
              *(_QWORD *)v223 = v21;
              v24 = v223 + 8;
              while (v22 != v117)
              {
                v224 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v223 - 1) = v224;
                v223 -= 8;
              }
              v20[688] = v223;
              v20[689] = v24;
              v20[690] = &v122[8 * v121];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[689] = v24;
            break;
          case 0xC6:
            v25 = *(_QWORD **)a1[2];
            v26 = (unsigned __int16)*(_DWORD *)(a1[3] + 24) >> 1;
            v27 = (char *)v25[692];
            v28 = v25[693];
            if ((unint64_t)v27 >= v28)
            {
              v123 = (char *)v25[691];
              v124 = (v27 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61)
                goto LABEL_360;
              v125 = v28 - (_QWORD)v123;
              v126 = (uint64_t)(v28 - (_QWORD)v123) >> 2;
              if (v126 <= v124 + 1)
                v126 = v124 + 1;
              if (v125 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v126;
              if (v127)
              {
                v128 = (char *)sub_40FC((uint64_t)(v25 + 693), v127);
                v27 = (char *)v25[692];
                v123 = (char *)v25[691];
              }
              else
              {
                v128 = 0;
              }
              v225 = &v128[8 * v124];
              *(_QWORD *)v225 = v26;
              v29 = v225 + 8;
              while (v27 != v123)
              {
                v226 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v225 - 1) = v226;
                v225 -= 8;
              }
              v25[691] = v225;
              v25[692] = v29;
              v25[693] = &v128[8 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[692] = v29;
            break;
          case 0xC7:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            v32 = (uint64_t *)v30[695];
            v33 = v30[696];
            if ((unint64_t)v32 >= v33)
            {
              v129 = (uint64_t *)v30[694];
              v130 = v32 - v129;
              if ((unint64_t)(v130 + 1) >> 61)
                goto LABEL_360;
              v131 = v33 - (_QWORD)v129;
              v132 = (uint64_t)(v33 - (_QWORD)v129) >> 2;
              if (v132 <= v130 + 1)
                v132 = v130 + 1;
              if (v131 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v132;
              if (v133)
              {
                v134 = (char *)sub_40FC((uint64_t)(v30 + 696), v133);
                v32 = (uint64_t *)v30[695];
                v129 = (uint64_t *)v30[694];
              }
              else
              {
                v134 = 0;
              }
              v227 = (uint64_t *)&v134[8 * v130];
              *v227 = v31;
              v34 = v227 + 1;
              while (v32 != v129)
              {
                v228 = *--v32;
                *--v227 = v228;
              }
              v30[694] = v227;
              v30[695] = v34;
              v30[696] = &v134[8 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[695] = v34;
            break;
          case 0xC8:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v37 = (char *)v35[698];
            v38 = v35[699];
            if ((unint64_t)v37 >= v38)
            {
              v135 = (char *)v35[697];
              v136 = (v37 - v135) >> 3;
              if ((unint64_t)(v136 + 1) >> 61)
                goto LABEL_360;
              v137 = v38 - (_QWORD)v135;
              v138 = (uint64_t)(v38 - (_QWORD)v135) >> 2;
              if (v138 <= v136 + 1)
                v138 = v136 + 1;
              if (v137 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v138;
              if (v139)
              {
                v140 = (char *)sub_40FC((uint64_t)(v35 + 699), v139);
                v37 = (char *)v35[698];
                v135 = (char *)v35[697];
              }
              else
              {
                v140 = 0;
              }
              v229 = &v140[8 * v136];
              *(_QWORD *)v229 = v36;
              v39 = v229 + 8;
              while (v37 != v135)
              {
                v230 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v229 - 1) = v230;
                v229 -= 8;
              }
              v35[697] = v229;
              v35[698] = v39;
              v35[699] = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[698] = v39;
            break;
          case 0xC9:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 52) & 0x7FFFFLL;
            v42 = (uint64_t *)v40[701];
            v43 = v40[702];
            if ((unint64_t)v42 >= v43)
            {
              v141 = (uint64_t *)v40[700];
              v142 = v42 - v141;
              if ((unint64_t)(v142 + 1) >> 61)
                goto LABEL_360;
              v143 = v43 - (_QWORD)v141;
              v144 = (uint64_t)(v43 - (_QWORD)v141) >> 2;
              if (v144 <= v142 + 1)
                v144 = v142 + 1;
              if (v143 >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                v146 = (char *)sub_40FC((uint64_t)(v40 + 702), v145);
                v42 = (uint64_t *)v40[701];
                v141 = (uint64_t *)v40[700];
              }
              else
              {
                v146 = 0;
              }
              v231 = (uint64_t *)&v146[8 * v142];
              *v231 = v41;
              v44 = v231 + 1;
              while (v42 != v141)
              {
                v232 = *--v42;
                *--v231 = v232;
              }
              v40[700] = v231;
              v40[701] = v44;
              v40[702] = &v146[8 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[701] = v44;
            break;
          case 0xCA:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v47 = (char *)v45[704];
            v48 = v45[705];
            if ((unint64_t)v47 >= v48)
            {
              v147 = (char *)v45[703];
              v148 = (v47 - v147) >> 3;
              if ((unint64_t)(v148 + 1) >> 61)
                goto LABEL_360;
              v149 = v48 - (_QWORD)v147;
              v150 = (uint64_t)(v48 - (_QWORD)v147) >> 2;
              if (v150 <= v148 + 1)
                v150 = v148 + 1;
              if (v149 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_40FC((uint64_t)(v45 + 705), v151);
                v47 = (char *)v45[704];
                v147 = (char *)v45[703];
              }
              else
              {
                v152 = 0;
              }
              v233 = &v152[8 * v148];
              *(_QWORD *)v233 = v46;
              v49 = v233 + 8;
              while (v47 != v147)
              {
                v234 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v233 - 1) = v234;
                v233 -= 8;
              }
              v45[703] = v233;
              v45[704] = v49;
              v45[705] = &v152[8 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[704] = v49;
            break;
          case 0xCB:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 64) & 0x7FFFFLL;
            v52 = (uint64_t *)v50[707];
            v53 = v50[708];
            if ((unint64_t)v52 >= v53)
            {
              v153 = (uint64_t *)v50[706];
              v154 = v52 - v153;
              if ((unint64_t)(v154 + 1) >> 61)
                goto LABEL_360;
              v155 = v53 - (_QWORD)v153;
              v156 = (uint64_t)(v53 - (_QWORD)v153) >> 2;
              if (v156 <= v154 + 1)
                v156 = v154 + 1;
              if (v155 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v156;
              if (v157)
              {
                v158 = (char *)sub_40FC((uint64_t)(v50 + 708), v157);
                v52 = (uint64_t *)v50[707];
                v153 = (uint64_t *)v50[706];
              }
              else
              {
                v158 = 0;
              }
              v235 = (uint64_t *)&v158[8 * v154];
              *v235 = v51;
              v54 = v235 + 1;
              while (v52 != v153)
              {
                v236 = *--v52;
                *--v235 = v236;
              }
              v50[706] = v235;
              v50[707] = v54;
              v50[708] = &v158[8 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[707] = v54;
            break;
          case 0xCC:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v57 = (char *)v55[710];
            v58 = v55[711];
            if ((unint64_t)v57 >= v58)
            {
              v159 = (char *)v55[709];
              v160 = (v57 - v159) >> 3;
              if ((unint64_t)(v160 + 1) >> 61)
                goto LABEL_360;
              v161 = v58 - (_QWORD)v159;
              v162 = (uint64_t)(v58 - (_QWORD)v159) >> 2;
              if (v162 <= v160 + 1)
                v162 = v160 + 1;
              if (v161 >= 0x7FFFFFFFFFFFFFF8)
                v163 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v163 = v162;
              if (v163)
              {
                v164 = (char *)sub_40FC((uint64_t)(v55 + 711), v163);
                v57 = (char *)v55[710];
                v159 = (char *)v55[709];
              }
              else
              {
                v164 = 0;
              }
              v237 = &v164[8 * v160];
              *(_QWORD *)v237 = v56;
              v59 = v237 + 8;
              while (v57 != v159)
              {
                v238 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v237 - 1) = v238;
                v237 -= 8;
              }
              v55[709] = v237;
              v55[710] = v59;
              v55[711] = &v164[8 * v163];
              if (v159)
                operator delete(v159);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[710] = v59;
            break;
          case 0xCD:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_DWORD *)(a1[3] + 60) & 0x7FFFFLL;
            v62 = (uint64_t *)v60[713];
            v63 = v60[714];
            if ((unint64_t)v62 >= v63)
            {
              v165 = (uint64_t *)v60[712];
              v166 = v62 - v165;
              if ((unint64_t)(v166 + 1) >> 61)
                goto LABEL_360;
              v167 = v63 - (_QWORD)v165;
              v168 = (uint64_t)(v63 - (_QWORD)v165) >> 2;
              if (v168 <= v166 + 1)
                v168 = v166 + 1;
              if (v167 >= 0x7FFFFFFFFFFFFFF8)
                v169 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v169 = v168;
              if (v169)
              {
                v170 = (char *)sub_40FC((uint64_t)(v60 + 714), v169);
                v62 = (uint64_t *)v60[713];
                v165 = (uint64_t *)v60[712];
              }
              else
              {
                v170 = 0;
              }
              v239 = (uint64_t *)&v170[8 * v166];
              *v239 = v61;
              v64 = v239 + 1;
              while (v62 != v165)
              {
                v240 = *--v62;
                *--v239 = v240;
              }
              v60[712] = v239;
              v60[713] = v64;
              v60[714] = &v170[8 * v169];
              if (v165)
                operator delete(v165);
            }
            else
            {
              *v62 = v61;
              v64 = v62 + 1;
            }
            v60[713] = v64;
            break;
          case 0xCE:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v67 = (char *)v65[716];
            v68 = v65[717];
            if ((unint64_t)v67 >= v68)
            {
              v171 = (char *)v65[715];
              v172 = (v67 - v171) >> 3;
              if ((unint64_t)(v172 + 1) >> 61)
                goto LABEL_360;
              v173 = v68 - (_QWORD)v171;
              v174 = (uint64_t)(v68 - (_QWORD)v171) >> 2;
              if (v174 <= v172 + 1)
                v174 = v172 + 1;
              if (v173 >= 0x7FFFFFFFFFFFFFF8)
                v175 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v175 = v174;
              if (v175)
              {
                v176 = (char *)sub_40FC((uint64_t)(v65 + 717), v175);
                v67 = (char *)v65[716];
                v171 = (char *)v65[715];
              }
              else
              {
                v176 = 0;
              }
              v241 = &v176[8 * v172];
              *(_QWORD *)v241 = v66;
              v69 = v241 + 8;
              while (v67 != v171)
              {
                v242 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v241 - 1) = v242;
                v241 -= 8;
              }
              v65[715] = v241;
              v65[716] = v69;
              v65[717] = &v176[8 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[716] = v69;
            break;
          case 0xCF:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_DWORD *)(a1[3] + 76) & 0x7FFFFLL;
            v72 = (uint64_t *)v70[719];
            v73 = v70[720];
            if ((unint64_t)v72 >= v73)
            {
              v177 = (uint64_t *)v70[718];
              v178 = v72 - v177;
              if ((unint64_t)(v178 + 1) >> 61)
                goto LABEL_360;
              v179 = v73 - (_QWORD)v177;
              v180 = (uint64_t)(v73 - (_QWORD)v177) >> 2;
              if (v180 <= v178 + 1)
                v180 = v178 + 1;
              if (v179 >= 0x7FFFFFFFFFFFFFF8)
                v181 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v181 = v180;
              if (v181)
              {
                v182 = (char *)sub_40FC((uint64_t)(v70 + 720), v181);
                v72 = (uint64_t *)v70[719];
                v177 = (uint64_t *)v70[718];
              }
              else
              {
                v182 = 0;
              }
              v243 = (uint64_t *)&v182[8 * v178];
              *v243 = v71;
              v74 = v243 + 1;
              while (v72 != v177)
              {
                v244 = *--v72;
                *--v243 = v244;
              }
              v70[718] = v243;
              v70[719] = v74;
              v70[720] = &v182[8 * v181];
              if (v177)
                operator delete(v177);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[719] = v74;
            break;
          case 0xD0:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v77 = (char *)v75[722];
            v78 = v75[723];
            if ((unint64_t)v77 >= v78)
            {
              v183 = (char *)v75[721];
              v184 = (v77 - v183) >> 3;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_360;
              v185 = v78 - (_QWORD)v183;
              v186 = (uint64_t)(v78 - (_QWORD)v183) >> 2;
              if (v186 <= v184 + 1)
                v186 = v184 + 1;
              if (v185 >= 0x7FFFFFFFFFFFFFF8)
                v187 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v187 = v186;
              if (v187)
              {
                v188 = (char *)sub_40FC((uint64_t)(v75 + 723), v187);
                v77 = (char *)v75[722];
                v183 = (char *)v75[721];
              }
              else
              {
                v188 = 0;
              }
              v245 = &v188[8 * v184];
              *(_QWORD *)v245 = v76;
              v79 = v245 + 8;
              while (v77 != v183)
              {
                v246 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v245 - 1) = v246;
                v245 -= 8;
              }
              v75[721] = v245;
              v75[722] = v79;
              v75[723] = &v188[8 * v187];
              if (v183)
                operator delete(v183);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[722] = v79;
            break;
          case 0xD1:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_DWORD *)(a1[3] + 72) & 0x7FFFFLL;
            v82 = (uint64_t *)v80[725];
            v83 = v80[726];
            if ((unint64_t)v82 >= v83)
            {
              v189 = (uint64_t *)v80[724];
              v190 = v82 - v189;
              if ((unint64_t)(v190 + 1) >> 61)
                goto LABEL_360;
              v191 = v83 - (_QWORD)v189;
              v192 = (uint64_t)(v83 - (_QWORD)v189) >> 2;
              if (v192 <= v190 + 1)
                v192 = v190 + 1;
              if (v191 >= 0x7FFFFFFFFFFFFFF8)
                v193 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v193 = v192;
              if (v193)
              {
                v194 = (char *)sub_40FC((uint64_t)(v80 + 726), v193);
                v82 = (uint64_t *)v80[725];
                v189 = (uint64_t *)v80[724];
              }
              else
              {
                v194 = 0;
              }
              v247 = (uint64_t *)&v194[8 * v190];
              *v247 = v81;
              v84 = v247 + 1;
              while (v82 != v189)
              {
                v248 = *--v82;
                *--v247 = v248;
              }
              v80[724] = v247;
              v80[725] = v84;
              v80[726] = &v194[8 * v193];
              if (v189)
                operator delete(v189);
            }
            else
            {
              *v82 = v81;
              v84 = v82 + 1;
            }
            v80[725] = v84;
            break;
          case 0xD2:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v87 = (char *)v85[728];
            v88 = v85[729];
            if ((unint64_t)v87 >= v88)
            {
              v195 = (char *)v85[727];
              v196 = (v87 - v195) >> 3;
              if ((unint64_t)(v196 + 1) >> 61)
                goto LABEL_360;
              v197 = v88 - (_QWORD)v195;
              v198 = (uint64_t)(v88 - (_QWORD)v195) >> 2;
              if (v198 <= v196 + 1)
                v198 = v196 + 1;
              if (v197 >= 0x7FFFFFFFFFFFFFF8)
                v199 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v199 = v198;
              if (v199)
              {
                v200 = (char *)sub_40FC((uint64_t)(v85 + 729), v199);
                v87 = (char *)v85[728];
                v195 = (char *)v85[727];
              }
              else
              {
                v200 = 0;
              }
              v249 = &v200[8 * v196];
              *(_QWORD *)v249 = v86;
              v89 = v249 + 8;
              while (v87 != v195)
              {
                v250 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v249 - 1) = v250;
                v249 -= 8;
              }
              v85[727] = v249;
              v85[728] = v89;
              v85[729] = &v200[8 * v199];
              if (v195)
                operator delete(v195);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[728] = v89;
            break;
          case 0xD3:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            v92 = (uint64_t *)v90[731];
            v93 = v90[732];
            if ((unint64_t)v92 >= v93)
            {
              v201 = (uint64_t *)v90[730];
              v202 = v92 - v201;
              if ((unint64_t)(v202 + 1) >> 61)
                goto LABEL_360;
              v203 = v93 - (_QWORD)v201;
              v204 = (uint64_t)(v93 - (_QWORD)v201) >> 2;
              if (v204 <= v202 + 1)
                v204 = v202 + 1;
              if (v203 >= 0x7FFFFFFFFFFFFFF8)
                v205 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v205 = v204;
              if (v205)
              {
                v206 = (char *)sub_40FC((uint64_t)(v90 + 732), v205);
                v92 = (uint64_t *)v90[731];
                v201 = (uint64_t *)v90[730];
              }
              else
              {
                v206 = 0;
              }
              v251 = (uint64_t *)&v206[8 * v202];
              *v251 = v91;
              v94 = v251 + 1;
              while (v92 != v201)
              {
                v252 = *--v92;
                *--v251 = v252;
              }
              v90[730] = v251;
              v90[731] = v94;
              v90[732] = &v206[8 * v205];
              if (v201)
                operator delete(v201);
            }
            else
            {
              *v92 = v91;
              v94 = v92 + 1;
            }
            v90[731] = v94;
            break;
          case 0xD4:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v97 = (char *)v95[734];
            v98 = v95[735];
            if ((unint64_t)v97 >= v98)
            {
              v207 = (char *)v95[733];
              v208 = (v97 - v207) >> 3;
              if ((unint64_t)(v208 + 1) >> 61)
                goto LABEL_360;
              v209 = v98 - (_QWORD)v207;
              v210 = (uint64_t)(v98 - (_QWORD)v207) >> 2;
              if (v210 <= v208 + 1)
                v210 = v208 + 1;
              if (v209 >= 0x7FFFFFFFFFFFFFF8)
                v211 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v211 = v210;
              if (v211)
              {
                v212 = (char *)sub_40FC((uint64_t)(v95 + 735), v211);
                v97 = (char *)v95[734];
                v207 = (char *)v95[733];
              }
              else
              {
                v212 = 0;
              }
              v253 = &v212[8 * v208];
              *(_QWORD *)v253 = v96;
              v99 = v253 + 8;
              while (v97 != v207)
              {
                v254 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v253 - 1) = v254;
                v253 -= 8;
              }
              v95[733] = v253;
              v95[734] = v99;
              v95[735] = &v212[8 * v211];
              if (v207)
                operator delete(v207);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[734] = v99;
            break;
          case 0xD5:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_DWORD *)(a1[3] + 56) & 0x7FFFFLL;
            v102 = (uint64_t *)v100[737];
            v103 = v100[738];
            if ((unint64_t)v102 >= v103)
            {
              v213 = (uint64_t *)v100[736];
              v214 = v102 - v213;
              if ((unint64_t)(v214 + 1) >> 61)
LABEL_360:
                sub_4074();
              v215 = v103 - (_QWORD)v213;
              v216 = (uint64_t)(v103 - (_QWORD)v213) >> 2;
              if (v216 <= v214 + 1)
                v216 = v214 + 1;
              if (v215 >= 0x7FFFFFFFFFFFFFF8)
                v217 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v217 = v216;
              if (v217)
              {
                v218 = (char *)sub_40FC((uint64_t)(v100 + 738), v217);
                v102 = (uint64_t *)v100[737];
                v213 = (uint64_t *)v100[736];
              }
              else
              {
                v218 = 0;
              }
              v255 = (uint64_t *)&v218[8 * v214];
              *v255 = v101;
              v104 = v255 + 1;
              while (v102 != v213)
              {
                v256 = *--v102;
                *--v255 = v256;
              }
              v100[736] = v255;
              v100[737] = v104;
              v100[738] = &v218[8 * v217];
              if (v213)
                operator delete(v213);
            }
            else
            {
              *v102 = v101;
              v104 = v102 + 1;
            }
            v100[737] = v104;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A0D10(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int *v77;
  int **v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;

  v4 = *a1;
  if (*a2 == 1)
  {
    v78 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v77 = *v78;
    v79 = (char *)v78[1] - (char *)*v78;
    if (v79)
    {
      v80 = v79 >> 2;
      if (v80 <= 1)
        v80 = 1;
      do
      {
        v81 = *v77++;
        switch(v81)
        {
          case 28:
            v82 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1456);
            goto LABEL_104;
          case 29:
            v82 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1480);
            goto LABEL_104;
          case 30:
            v82 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1504);
            goto LABEL_104;
          case 31:
            v82 = *(unsigned __int16 *)(a1[3] + 26);
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1528);
            goto LABEL_104;
          case 32:
            v82 = *(unsigned __int16 *)(a1[3] + 24);
            v83 = (_QWORD *)(*(_QWORD *)a1[2] + 1552);
LABEL_104:
            *(_QWORD *)(*v83 - 8) += v82;
            break;
          default:
            break;
        }
        --v80;
      }
      while (v80);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x1C:
            v10 = *(_QWORD **)a1[2];
            v11 = (unint64_t)*(unsigned int *)(a1[3] + 32) >> 17;
            v12 = (unint64_t *)v10[182];
            v13 = v10[183];
            if ((unint64_t)v12 >= v13)
            {
              v37 = (unint64_t *)v10[181];
              v38 = v12 - v37;
              if ((unint64_t)(v38 + 1) >> 61)
                goto LABEL_108;
              v39 = v13 - (_QWORD)v37;
              v40 = (uint64_t)(v13 - (_QWORD)v37) >> 2;
              if (v40 <= v38 + 1)
                v40 = v38 + 1;
              if (v39 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              if (v41)
              {
                v42 = (char *)sub_40FC((uint64_t)(v10 + 183), v41);
                v12 = (unint64_t *)v10[182];
                v37 = (unint64_t *)v10[181];
              }
              else
              {
                v42 = 0;
              }
              v67 = (unint64_t *)&v42[8 * v38];
              *v67 = v11;
              v14 = v67 + 1;
              while (v12 != v37)
              {
                v68 = *--v12;
                *--v67 = v68;
              }
              v10[181] = v67;
              v10[182] = v14;
              v10[183] = &v42[8 * v41];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[182] = v14;
            break;
          case 0x1D:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[185];
            v18 = v15[186];
            if ((unint64_t)v17 >= v18)
            {
              v43 = (uint64_t *)v15[184];
              v44 = v17 - v43;
              if ((unint64_t)(v44 + 1) >> 61)
                goto LABEL_108;
              v45 = v18 - (_QWORD)v43;
              v46 = (uint64_t)(v18 - (_QWORD)v43) >> 2;
              if (v46 <= v44 + 1)
                v46 = v44 + 1;
              if (v45 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
              {
                v48 = (char *)sub_40FC((uint64_t)(v15 + 186), v47);
                v17 = (uint64_t *)v15[185];
                v43 = (uint64_t *)v15[184];
              }
              else
              {
                v48 = 0;
              }
              v69 = (uint64_t *)&v48[8 * v44];
              *v69 = v16;
              v19 = v69 + 1;
              while (v17 != v43)
              {
                v70 = *--v17;
                *--v69 = v70;
              }
              v15[184] = v69;
              v15[185] = v19;
              v15[186] = &v48[8 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[185] = v19;
            break;
          case 0x1E:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            v22 = (uint64_t *)v20[188];
            v23 = v20[189];
            if ((unint64_t)v22 >= v23)
            {
              v49 = (uint64_t *)v20[187];
              v50 = v22 - v49;
              if ((unint64_t)(v50 + 1) >> 61)
                goto LABEL_108;
              v51 = v23 - (_QWORD)v49;
              v52 = (uint64_t)(v23 - (_QWORD)v49) >> 2;
              if (v52 <= v50 + 1)
                v52 = v50 + 1;
              if (v51 >= 0x7FFFFFFFFFFFFFF8)
                v53 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v53 = v52;
              if (v53)
              {
                v54 = (char *)sub_40FC((uint64_t)(v20 + 189), v53);
                v22 = (uint64_t *)v20[188];
                v49 = (uint64_t *)v20[187];
              }
              else
              {
                v54 = 0;
              }
              v71 = (uint64_t *)&v54[8 * v50];
              *v71 = v21;
              v24 = v71 + 1;
              while (v22 != v49)
              {
                v72 = *--v22;
                *--v71 = v72;
              }
              v20[187] = v71;
              v20[188] = v24;
              v20[189] = &v54[8 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[188] = v24;
            break;
          case 0x1F:
            v25 = a1[2];
            v26 = *(_QWORD **)v25;
            v27 = *(unsigned __int16 *)(a1[3] + 26);
            v28 = *(char **)(*(_QWORD *)v25 + 1528);
            v29 = *(_QWORD *)(*(_QWORD *)v25 + 1536);
            if ((unint64_t)v28 >= v29)
            {
              v55 = (char *)v26[190];
              v56 = (v28 - v55) >> 3;
              if ((unint64_t)(v56 + 1) >> 61)
                goto LABEL_108;
              v57 = v29 - (_QWORD)v55;
              v58 = (uint64_t)(v29 - (_QWORD)v55) >> 2;
              if (v58 <= v56 + 1)
                v58 = v56 + 1;
              if (v57 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v58;
              if (v59)
              {
                v60 = (char *)sub_40FC((uint64_t)(v26 + 192), v59);
                v28 = (char *)v26[191];
                v55 = (char *)v26[190];
              }
              else
              {
                v60 = 0;
              }
              v73 = &v60[8 * v56];
              *(_QWORD *)v73 = v27;
              v30 = v73 + 8;
              while (v28 != v55)
              {
                v74 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v73 - 1) = v74;
                v73 -= 8;
              }
              v26[190] = v73;
              v26[191] = v30;
              v26[192] = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v28 = v27;
              v30 = v28 + 8;
            }
            v26[191] = v30;
            break;
          case 0x20:
            v31 = a1[2];
            v32 = *(_QWORD **)v31;
            v33 = *(unsigned __int16 *)(a1[3] + 24);
            v34 = *(char **)(*(_QWORD *)v31 + 1552);
            v35 = *(_QWORD *)(*(_QWORD *)v31 + 1560);
            if ((unint64_t)v34 >= v35)
            {
              v61 = (char *)v32[193];
              v62 = (v34 - v61) >> 3;
              if ((unint64_t)(v62 + 1) >> 61)
LABEL_108:
                sub_4074();
              v63 = v35 - (_QWORD)v61;
              v64 = (uint64_t)(v35 - (_QWORD)v61) >> 2;
              if (v64 <= v62 + 1)
                v64 = v62 + 1;
              if (v63 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v64;
              if (v65)
              {
                v66 = (char *)sub_40FC((uint64_t)(v32 + 195), v65);
                v34 = (char *)v32[194];
                v61 = (char *)v32[193];
              }
              else
              {
                v66 = 0;
              }
              v75 = &v66[8 * v62];
              *(_QWORD *)v75 = v33;
              v36 = v75 + 8;
              while (v34 != v61)
              {
                v76 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              v32[193] = v75;
              v32[194] = v36;
              v32[195] = &v66[8 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v34 = v33;
              v36 = v34 + 8;
            }
            v32[194] = v36;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A1284(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  unint64_t *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  int *v426;
  int **v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  int v431;
  _QWORD *v432;

  v4 = *a1;
  if (*a2 == 1)
  {
    v427 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v426 = *v427;
    v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      v429 = v428 >> 2;
      if (v429 <= 1)
        v429 = 1;
      do
      {
        v430 = *v426++;
        switch(v430)
        {
          case 'J':
            LOWORD(v431) = *(_WORD *)(a1[3] + 82);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2560);
            goto LABEL_590;
          case 'K':
            LOWORD(v431) = *(_WORD *)(a1[3] + 66);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2584);
            goto LABEL_590;
          case 'L':
            LOWORD(v431) = *(_WORD *)(a1[3] + 50);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2608);
            goto LABEL_590;
          case 'M':
            LOWORD(v431) = *(_WORD *)(a1[3] + 34);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2632);
            goto LABEL_590;
          case 'N':
            LOWORD(v431) = *(_WORD *)(a1[3] + 84);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2656);
            goto LABEL_590;
          case 'O':
            LOWORD(v431) = *(_WORD *)(a1[3] + 68);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2680);
            goto LABEL_590;
          case 'P':
            LOWORD(v431) = *(_WORD *)(a1[3] + 52);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2704);
            goto LABEL_590;
          case 'Q':
            LOWORD(v431) = *(_WORD *)(a1[3] + 36);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2728);
            goto LABEL_590;
          case 'R':
            LOWORD(v431) = *(_WORD *)(a1[3] + 86);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2752);
            goto LABEL_590;
          case 'S':
            LOWORD(v431) = *(_WORD *)(a1[3] + 70);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2776);
            goto LABEL_590;
          case 'T':
            LOWORD(v431) = *(_WORD *)(a1[3] + 54);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2800);
            goto LABEL_590;
          case 'U':
            LOWORD(v431) = *(_WORD *)(a1[3] + 38);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2824);
            goto LABEL_590;
          case 'V':
            LOWORD(v431) = *(_WORD *)(a1[3] + 76);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2848);
            goto LABEL_590;
          case 'W':
            LOWORD(v431) = *(_WORD *)(a1[3] + 60);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2872);
            goto LABEL_590;
          case 'X':
            LOWORD(v431) = *(_WORD *)(a1[3] + 44);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2896);
            goto LABEL_590;
          case 'Y':
            LOWORD(v431) = *(_WORD *)(a1[3] + 28);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2920);
            goto LABEL_590;
          case 'Z':
            LOWORD(v431) = *(_WORD *)(a1[3] + 78);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2944);
            goto LABEL_590;
          case '[':
            LOWORD(v431) = *(_WORD *)(a1[3] + 62);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2968);
            goto LABEL_590;
          case '\\':
            LOWORD(v431) = *(_WORD *)(a1[3] + 46);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 2992);
            goto LABEL_590;
          case ']':
            LOWORD(v431) = *(_WORD *)(a1[3] + 30);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3016);
            goto LABEL_590;
          case '^':
            LOWORD(v431) = *(_WORD *)(a1[3] + 80);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3040);
            goto LABEL_590;
          case '_':
            LOWORD(v431) = *(_WORD *)(a1[3] + 64);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3064);
            goto LABEL_590;
            LOWORD(v431) = *(_WORD *)(a1[3] + 48);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3088);
            goto LABEL_590;
          case 'a':
            LOWORD(v431) = *(_WORD *)(a1[3] + 32);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3112);
            goto LABEL_590;
          case 'b':
            LOWORD(v431) = *(_WORD *)(a1[3] + 72);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3136);
            goto LABEL_590;
          case 'c':
            LOWORD(v431) = *(_WORD *)(a1[3] + 56);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3160);
            goto LABEL_590;
          case 'd':
            LOWORD(v431) = *(_WORD *)(a1[3] + 40);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3184);
            goto LABEL_590;
          case 'e':
            v431 = *(unsigned __int16 *)(a1[3] + 24) >> 1;
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3208);
            goto LABEL_590;
          case 'f':
            LOWORD(v431) = *(_WORD *)(a1[3] + 74);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3232);
            goto LABEL_590;
          case 'g':
            LOWORD(v431) = *(_WORD *)(a1[3] + 58);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3256);
            goto LABEL_590;
          case 'h':
            LOWORD(v431) = *(_WORD *)(a1[3] + 42);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3280);
            goto LABEL_590;
          case 'i':
            LOWORD(v431) = *(_WORD *)(a1[3] + 26);
            v432 = (_QWORD *)(*(_QWORD *)a1[2] + 3304);
LABEL_590:
            *(_QWORD *)(*v432 - 8) += v431 & 0x1FFF;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'J':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            v12 = (char *)v10[320];
            v13 = v10[321];
            if ((unint64_t)v12 >= v13)
            {
              v170 = (char *)v10[319];
              v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_594;
              v172 = v13 - (_QWORD)v170;
              v173 = (uint64_t)(v13 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v10 + 321), v174);
                v12 = (char *)v10[320];
                v170 = (char *)v10[319];
              }
              else
              {
                v175 = 0;
              }
              v362 = &v175[8 * v171];
              *(_QWORD *)v362 = v11;
              v14 = v362 + 8;
              while (v12 != v170)
              {
                v363 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[319] = v362;
              v10[320] = v14;
              v10[321] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[320] = v14;
            break;
          case 'K':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 66) & 0x1FFF;
            v17 = (char *)v15[323];
            v18 = v15[324];
            if ((unint64_t)v17 >= v18)
            {
              v176 = (char *)v15[322];
              v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_594;
              v178 = v18 - (_QWORD)v176;
              v179 = (uint64_t)(v18 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v15 + 324), v180);
                v17 = (char *)v15[323];
                v176 = (char *)v15[322];
              }
              else
              {
                v181 = 0;
              }
              v364 = &v181[8 * v177];
              *(_QWORD *)v364 = v16;
              v19 = v364 + 8;
              while (v17 != v176)
              {
                v365 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[322] = v364;
              v15[323] = v19;
              v15[324] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[323] = v19;
            break;
          case 'L':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 50) & 0x1FFF;
            v22 = (char *)v20[326];
            v23 = v20[327];
            if ((unint64_t)v22 >= v23)
            {
              v182 = (char *)v20[325];
              v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_594;
              v184 = v23 - (_QWORD)v182;
              v185 = (uint64_t)(v23 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v20 + 327), v186);
                v22 = (char *)v20[326];
                v182 = (char *)v20[325];
              }
              else
              {
                v187 = 0;
              }
              v366 = &v187[8 * v183];
              *(_QWORD *)v366 = v21;
              v24 = v366 + 8;
              while (v22 != v182)
              {
                v367 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[325] = v366;
              v20[326] = v24;
              v20[327] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[326] = v24;
            break;
          case 'M':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            v27 = (char *)v25[329];
            v28 = v25[330];
            if ((unint64_t)v27 >= v28)
            {
              v188 = (char *)v25[328];
              v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_594;
              v190 = v28 - (_QWORD)v188;
              v191 = (uint64_t)(v28 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v25 + 330), v192);
                v27 = (char *)v25[329];
                v188 = (char *)v25[328];
              }
              else
              {
                v193 = 0;
              }
              v368 = &v193[8 * v189];
              *(_QWORD *)v368 = v26;
              v29 = v368 + 8;
              while (v27 != v188)
              {
                v369 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[328] = v368;
              v25[329] = v29;
              v25[330] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[329] = v29;
            break;
          case 'N':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 84) & 0x1FFF;
            v32 = (char *)v30[332];
            v33 = v30[333];
            if ((unint64_t)v32 >= v33)
            {
              v194 = (char *)v30[331];
              v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_594;
              v196 = v33 - (_QWORD)v194;
              v197 = (uint64_t)(v33 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v30 + 333), v198);
                v32 = (char *)v30[332];
                v194 = (char *)v30[331];
              }
              else
              {
                v199 = 0;
              }
              v370 = &v199[8 * v195];
              *(_QWORD *)v370 = v31;
              v34 = v370 + 8;
              while (v32 != v194)
              {
                v371 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[331] = v370;
              v30[332] = v34;
              v30[333] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[332] = v34;
            break;
          case 'O':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            v37 = (char *)v35[335];
            v38 = v35[336];
            if ((unint64_t)v37 >= v38)
            {
              v200 = (char *)v35[334];
              v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_594;
              v202 = v38 - (_QWORD)v200;
              v203 = (uint64_t)(v38 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v35 + 336), v204);
                v37 = (char *)v35[335];
                v200 = (char *)v35[334];
              }
              else
              {
                v205 = 0;
              }
              v372 = &v205[8 * v201];
              *(_QWORD *)v372 = v36;
              v39 = v372 + 8;
              while (v37 != v200)
              {
                v373 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[334] = v372;
              v35[335] = v39;
              v35[336] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[335] = v39;
            break;
          case 'P':
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 52) & 0x1FFF;
            v42 = (char *)v40[338];
            v43 = v40[339];
            if ((unint64_t)v42 >= v43)
            {
              v206 = (char *)v40[337];
              v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_594;
              v208 = v43 - (_QWORD)v206;
              v209 = (uint64_t)(v43 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v40 + 339), v210);
                v42 = (char *)v40[338];
                v206 = (char *)v40[337];
              }
              else
              {
                v211 = 0;
              }
              v374 = &v211[8 * v207];
              *(_QWORD *)v374 = v41;
              v44 = v374 + 8;
              while (v42 != v206)
              {
                v375 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[337] = v374;
              v40[338] = v44;
              v40[339] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[338] = v44;
            break;
          case 'Q':
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 36) & 0x1FFF;
            v47 = (char *)v45[341];
            v48 = v45[342];
            if ((unint64_t)v47 >= v48)
            {
              v212 = (char *)v45[340];
              v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_594;
              v214 = v48 - (_QWORD)v212;
              v215 = (uint64_t)(v48 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v45 + 342), v216);
                v47 = (char *)v45[341];
                v212 = (char *)v45[340];
              }
              else
              {
                v217 = 0;
              }
              v376 = &v217[8 * v213];
              *(_QWORD *)v376 = v46;
              v49 = v376 + 8;
              while (v47 != v212)
              {
                v377 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[340] = v376;
              v45[341] = v49;
              v45[342] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[341] = v49;
            break;
          case 'R':
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 86) & 0x1FFF;
            v52 = (char *)v50[344];
            v53 = v50[345];
            if ((unint64_t)v52 >= v53)
            {
              v218 = (char *)v50[343];
              v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_594;
              v220 = v53 - (_QWORD)v218;
              v221 = (uint64_t)(v53 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v50 + 345), v222);
                v52 = (char *)v50[344];
                v218 = (char *)v50[343];
              }
              else
              {
                v223 = 0;
              }
              v378 = &v223[8 * v219];
              *(_QWORD *)v378 = v51;
              v54 = v378 + 8;
              while (v52 != v218)
              {
                v379 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[343] = v378;
              v50[344] = v54;
              v50[345] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[344] = v54;
            break;
          case 'S':
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            v57 = (char *)v55[347];
            v58 = v55[348];
            if ((unint64_t)v57 >= v58)
            {
              v224 = (char *)v55[346];
              v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61)
                goto LABEL_594;
              v226 = v58 - (_QWORD)v224;
              v227 = (uint64_t)(v58 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v55 + 348), v228);
                v57 = (char *)v55[347];
                v224 = (char *)v55[346];
              }
              else
              {
                v229 = 0;
              }
              v380 = &v229[8 * v225];
              *(_QWORD *)v380 = v56;
              v59 = v380 + 8;
              while (v57 != v224)
              {
                v381 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[346] = v380;
              v55[347] = v59;
              v55[348] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[347] = v59;
            break;
          case 'T':
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 54) & 0x1FFF;
            v62 = (char *)v60[350];
            v63 = v60[351];
            if ((unint64_t)v62 >= v63)
            {
              v230 = (char *)v60[349];
              v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61)
                goto LABEL_594;
              v232 = v63 - (_QWORD)v230;
              v233 = (uint64_t)(v63 - (_QWORD)v230) >> 2;
              if (v233 <= v231 + 1)
                v233 = v231 + 1;
              if (v232 >= 0x7FFFFFFFFFFFFFF8)
                v234 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v234 = v233;
              if (v234)
              {
                v235 = (char *)sub_40FC((uint64_t)(v60 + 351), v234);
                v62 = (char *)v60[350];
                v230 = (char *)v60[349];
              }
              else
              {
                v235 = 0;
              }
              v382 = &v235[8 * v231];
              *(_QWORD *)v382 = v61;
              v64 = v382 + 8;
              while (v62 != v230)
              {
                v383 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[349] = v382;
              v60[350] = v64;
              v60[351] = &v235[8 * v234];
              if (v230)
                operator delete(v230);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[350] = v64;
            break;
          case 'U':
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 38) & 0x1FFF;
            v67 = (char *)v65[353];
            v68 = v65[354];
            if ((unint64_t)v67 >= v68)
            {
              v236 = (char *)v65[352];
              v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61)
                goto LABEL_594;
              v238 = v68 - (_QWORD)v236;
              v239 = (uint64_t)(v68 - (_QWORD)v236) >> 2;
              if (v239 <= v237 + 1)
                v239 = v237 + 1;
              if (v238 >= 0x7FFFFFFFFFFFFFF8)
                v240 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v240 = v239;
              if (v240)
              {
                v241 = (char *)sub_40FC((uint64_t)(v65 + 354), v240);
                v67 = (char *)v65[353];
                v236 = (char *)v65[352];
              }
              else
              {
                v241 = 0;
              }
              v384 = &v241[8 * v237];
              *(_QWORD *)v384 = v66;
              v69 = v384 + 8;
              while (v67 != v236)
              {
                v385 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[352] = v384;
              v65[353] = v69;
              v65[354] = &v241[8 * v240];
              if (v236)
                operator delete(v236);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[353] = v69;
            break;
          case 'V':
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            v72 = (char *)v70[356];
            v73 = v70[357];
            if ((unint64_t)v72 >= v73)
            {
              v242 = (char *)v70[355];
              v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61)
                goto LABEL_594;
              v244 = v73 - (_QWORD)v242;
              v245 = (uint64_t)(v73 - (_QWORD)v242) >> 2;
              if (v245 <= v243 + 1)
                v245 = v243 + 1;
              if (v244 >= 0x7FFFFFFFFFFFFFF8)
                v246 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v246 = v245;
              if (v246)
              {
                v247 = (char *)sub_40FC((uint64_t)(v70 + 357), v246);
                v72 = (char *)v70[356];
                v242 = (char *)v70[355];
              }
              else
              {
                v247 = 0;
              }
              v386 = &v247[8 * v243];
              *(_QWORD *)v386 = v71;
              v74 = v386 + 8;
              while (v72 != v242)
              {
                v387 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[355] = v386;
              v70[356] = v74;
              v70[357] = &v247[8 * v246];
              if (v242)
                operator delete(v242);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[356] = v74;
            break;
          case 'W':
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            v77 = (char *)v75[359];
            v78 = v75[360];
            if ((unint64_t)v77 >= v78)
            {
              v248 = (char *)v75[358];
              v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61)
                goto LABEL_594;
              v250 = v78 - (_QWORD)v248;
              v251 = (uint64_t)(v78 - (_QWORD)v248) >> 2;
              if (v251 <= v249 + 1)
                v251 = v249 + 1;
              if (v250 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v251;
              if (v252)
              {
                v253 = (char *)sub_40FC((uint64_t)(v75 + 360), v252);
                v77 = (char *)v75[359];
                v248 = (char *)v75[358];
              }
              else
              {
                v253 = 0;
              }
              v388 = &v253[8 * v249];
              *(_QWORD *)v388 = v76;
              v79 = v388 + 8;
              while (v77 != v248)
              {
                v389 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[358] = v388;
              v75[359] = v79;
              v75[360] = &v253[8 * v252];
              if (v248)
                operator delete(v248);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[359] = v79;
            break;
          case 'X':
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            v82 = (char *)v80[362];
            v83 = v80[363];
            if ((unint64_t)v82 >= v83)
            {
              v254 = (char *)v80[361];
              v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61)
                goto LABEL_594;
              v256 = v83 - (_QWORD)v254;
              v257 = (uint64_t)(v83 - (_QWORD)v254) >> 2;
              if (v257 <= v255 + 1)
                v257 = v255 + 1;
              if (v256 >= 0x7FFFFFFFFFFFFFF8)
                v258 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v258 = v257;
              if (v258)
              {
                v259 = (char *)sub_40FC((uint64_t)(v80 + 363), v258);
                v82 = (char *)v80[362];
                v254 = (char *)v80[361];
              }
              else
              {
                v259 = 0;
              }
              v390 = &v259[8 * v255];
              *(_QWORD *)v390 = v81;
              v84 = v390 + 8;
              while (v82 != v254)
              {
                v391 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[361] = v390;
              v80[362] = v84;
              v80[363] = &v259[8 * v258];
              if (v254)
                operator delete(v254);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[362] = v84;
            break;
          case 'Y':
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            v87 = (char *)v85[365];
            v88 = v85[366];
            if ((unint64_t)v87 >= v88)
            {
              v260 = (char *)v85[364];
              v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61)
                goto LABEL_594;
              v262 = v88 - (_QWORD)v260;
              v263 = (uint64_t)(v88 - (_QWORD)v260) >> 2;
              if (v263 <= v261 + 1)
                v263 = v261 + 1;
              if (v262 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v263;
              if (v264)
              {
                v265 = (char *)sub_40FC((uint64_t)(v85 + 366), v264);
                v87 = (char *)v85[365];
                v260 = (char *)v85[364];
              }
              else
              {
                v265 = 0;
              }
              v392 = &v265[8 * v261];
              *(_QWORD *)v392 = v86;
              v89 = v392 + 8;
              while (v87 != v260)
              {
                v393 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[364] = v392;
              v85[365] = v89;
              v85[366] = &v265[8 * v264];
              if (v260)
                operator delete(v260);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[365] = v89;
            break;
          case 'Z':
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            v92 = (char *)v90[368];
            v93 = v90[369];
            if ((unint64_t)v92 >= v93)
            {
              v266 = (char *)v90[367];
              v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61)
                goto LABEL_594;
              v268 = v93 - (_QWORD)v266;
              v269 = (uint64_t)(v93 - (_QWORD)v266) >> 2;
              if (v269 <= v267 + 1)
                v269 = v267 + 1;
              if (v268 >= 0x7FFFFFFFFFFFFFF8)
                v270 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v270 = v269;
              if (v270)
              {
                v271 = (char *)sub_40FC((uint64_t)(v90 + 369), v270);
                v92 = (char *)v90[368];
                v266 = (char *)v90[367];
              }
              else
              {
                v271 = 0;
              }
              v394 = &v271[8 * v267];
              *(_QWORD *)v394 = v91;
              v94 = v394 + 8;
              while (v92 != v266)
              {
                v395 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[367] = v394;
              v90[368] = v94;
              v90[369] = &v271[8 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[368] = v94;
            break;
          case '[':
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 62) & 0x1FFF;
            v97 = (char *)v95[371];
            v98 = v95[372];
            if ((unint64_t)v97 >= v98)
            {
              v272 = (char *)v95[370];
              v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61)
                goto LABEL_594;
              v274 = v98 - (_QWORD)v272;
              v275 = (uint64_t)(v98 - (_QWORD)v272) >> 2;
              if (v275 <= v273 + 1)
                v275 = v273 + 1;
              if (v274 >= 0x7FFFFFFFFFFFFFF8)
                v276 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v276 = v275;
              if (v276)
              {
                v277 = (char *)sub_40FC((uint64_t)(v95 + 372), v276);
                v97 = (char *)v95[371];
                v272 = (char *)v95[370];
              }
              else
              {
                v277 = 0;
              }
              v396 = &v277[8 * v273];
              *(_QWORD *)v396 = v96;
              v99 = v396 + 8;
              while (v97 != v272)
              {
                v397 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[370] = v396;
              v95[371] = v99;
              v95[372] = &v277[8 * v276];
              if (v272)
                operator delete(v272);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[371] = v99;
            break;
          case '\\':
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 46) & 0x1FFF;
            v102 = (char *)v100[374];
            v103 = v100[375];
            if ((unint64_t)v102 >= v103)
            {
              v278 = (char *)v100[373];
              v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61)
                goto LABEL_594;
              v280 = v103 - (_QWORD)v278;
              v281 = (uint64_t)(v103 - (_QWORD)v278) >> 2;
              if (v281 <= v279 + 1)
                v281 = v279 + 1;
              if (v280 >= 0x7FFFFFFFFFFFFFF8)
                v282 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v282 = v281;
              if (v282)
              {
                v283 = (char *)sub_40FC((uint64_t)(v100 + 375), v282);
                v102 = (char *)v100[374];
                v278 = (char *)v100[373];
              }
              else
              {
                v283 = 0;
              }
              v398 = &v283[8 * v279];
              *(_QWORD *)v398 = v101;
              v104 = v398 + 8;
              while (v102 != v278)
              {
                v399 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[373] = v398;
              v100[374] = v104;
              v100[375] = &v283[8 * v282];
              if (v278)
                operator delete(v278);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[374] = v104;
            break;
          case ']':
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            v107 = (char *)v105[377];
            v108 = v105[378];
            if ((unint64_t)v107 >= v108)
            {
              v284 = (char *)v105[376];
              v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61)
                goto LABEL_594;
              v286 = v108 - (_QWORD)v284;
              v287 = (uint64_t)(v108 - (_QWORD)v284) >> 2;
              if (v287 <= v285 + 1)
                v287 = v285 + 1;
              if (v286 >= 0x7FFFFFFFFFFFFFF8)
                v288 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v288 = v287;
              if (v288)
              {
                v289 = (char *)sub_40FC((uint64_t)(v105 + 378), v288);
                v107 = (char *)v105[377];
                v284 = (char *)v105[376];
              }
              else
              {
                v289 = 0;
              }
              v400 = &v289[8 * v285];
              *(_QWORD *)v400 = v106;
              v109 = v400 + 8;
              while (v107 != v284)
              {
                v401 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[376] = v400;
              v105[377] = v109;
              v105[378] = &v289[8 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[377] = v109;
            break;
          case '^':
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            v112 = (char *)v110[380];
            v113 = v110[381];
            if ((unint64_t)v112 >= v113)
            {
              v290 = (char *)v110[379];
              v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61)
                goto LABEL_594;
              v292 = v113 - (_QWORD)v290;
              v293 = (uint64_t)(v113 - (_QWORD)v290) >> 2;
              if (v293 <= v291 + 1)
                v293 = v291 + 1;
              if (v292 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v293;
              if (v294)
              {
                v295 = (char *)sub_40FC((uint64_t)(v110 + 381), v294);
                v112 = (char *)v110[380];
                v290 = (char *)v110[379];
              }
              else
              {
                v295 = 0;
              }
              v402 = &v295[8 * v291];
              *(_QWORD *)v402 = v111;
              v114 = v402 + 8;
              while (v112 != v290)
              {
                v403 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[379] = v402;
              v110[380] = v114;
              v110[381] = &v295[8 * v294];
              if (v290)
                operator delete(v290);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[380] = v114;
            break;
          case '_':
            v115 = *(_QWORD **)a1[2];
            v116 = *(_WORD *)(a1[3] + 64) & 0x1FFF;
            v117 = (char *)v115[383];
            v118 = v115[384];
            if ((unint64_t)v117 >= v118)
            {
              v296 = (char *)v115[382];
              v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61)
                goto LABEL_594;
              v298 = v118 - (_QWORD)v296;
              v299 = (uint64_t)(v118 - (_QWORD)v296) >> 2;
              if (v299 <= v297 + 1)
                v299 = v297 + 1;
              if (v298 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v299;
              if (v300)
              {
                v301 = (char *)sub_40FC((uint64_t)(v115 + 384), v300);
                v117 = (char *)v115[383];
                v296 = (char *)v115[382];
              }
              else
              {
                v301 = 0;
              }
              v404 = &v301[8 * v297];
              *(_QWORD *)v404 = v116;
              v119 = v404 + 8;
              while (v117 != v296)
              {
                v405 = *((_QWORD *)v117 - 1);
                v117 -= 8;
                *((_QWORD *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[382] = v404;
              v115[383] = v119;
              v115[384] = &v301[8 * v300];
              if (v296)
                operator delete(v296);
            }
            else
            {
              *(_QWORD *)v117 = v116;
              v119 = v117 + 8;
            }
            v115[383] = v119;
            break;
            v120 = *(_QWORD **)a1[2];
            v121 = *(_WORD *)(a1[3] + 48) & 0x1FFF;
            v122 = (char *)v120[386];
            v123 = v120[387];
            if ((unint64_t)v122 >= v123)
            {
              v302 = (char *)v120[385];
              v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61)
                goto LABEL_594;
              v304 = v123 - (_QWORD)v302;
              v305 = (uint64_t)(v123 - (_QWORD)v302) >> 2;
              if (v305 <= v303 + 1)
                v305 = v303 + 1;
              if (v304 >= 0x7FFFFFFFFFFFFFF8)
                v306 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v306 = v305;
              if (v306)
              {
                v307 = (char *)sub_40FC((uint64_t)(v120 + 387), v306);
                v122 = (char *)v120[386];
                v302 = (char *)v120[385];
              }
              else
              {
                v307 = 0;
              }
              v406 = &v307[8 * v303];
              *(_QWORD *)v406 = v121;
              v124 = v406 + 8;
              while (v122 != v302)
              {
                v407 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[385] = v406;
              v120[386] = v124;
              v120[387] = &v307[8 * v306];
              if (v302)
                operator delete(v302);
            }
            else
            {
              *(_QWORD *)v122 = v121;
              v124 = v122 + 8;
            }
            v120[386] = v124;
            break;
          case 'a':
            v125 = *(_QWORD **)a1[2];
            v126 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v127 = (char *)v125[389];
            v128 = v125[390];
            if ((unint64_t)v127 >= v128)
            {
              v308 = (char *)v125[388];
              v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61)
                goto LABEL_594;
              v310 = v128 - (_QWORD)v308;
              v311 = (uint64_t)(v128 - (_QWORD)v308) >> 2;
              if (v311 <= v309 + 1)
                v311 = v309 + 1;
              if (v310 >= 0x7FFFFFFFFFFFFFF8)
                v312 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v312 = v311;
              if (v312)
              {
                v313 = (char *)sub_40FC((uint64_t)(v125 + 390), v312);
                v127 = (char *)v125[389];
                v308 = (char *)v125[388];
              }
              else
              {
                v313 = 0;
              }
              v408 = &v313[8 * v309];
              *(_QWORD *)v408 = v126;
              v129 = v408 + 8;
              while (v127 != v308)
              {
                v409 = *((_QWORD *)v127 - 1);
                v127 -= 8;
                *((_QWORD *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[388] = v408;
              v125[389] = v129;
              v125[390] = &v313[8 * v312];
              if (v308)
                operator delete(v308);
            }
            else
            {
              *(_QWORD *)v127 = v126;
              v129 = v127 + 8;
            }
            v125[389] = v129;
            break;
          case 'b':
            v130 = *(_QWORD **)a1[2];
            v131 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            v132 = (char *)v130[392];
            v133 = v130[393];
            if ((unint64_t)v132 >= v133)
            {
              v314 = (char *)v130[391];
              v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61)
                goto LABEL_594;
              v316 = v133 - (_QWORD)v314;
              v317 = (uint64_t)(v133 - (_QWORD)v314) >> 2;
              if (v317 <= v315 + 1)
                v317 = v315 + 1;
              if (v316 >= 0x7FFFFFFFFFFFFFF8)
                v318 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v318 = v317;
              if (v318)
              {
                v319 = (char *)sub_40FC((uint64_t)(v130 + 393), v318);
                v132 = (char *)v130[392];
                v314 = (char *)v130[391];
              }
              else
              {
                v319 = 0;
              }
              v410 = &v319[8 * v315];
              *(_QWORD *)v410 = v131;
              v134 = v410 + 8;
              while (v132 != v314)
              {
                v411 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[391] = v410;
              v130[392] = v134;
              v130[393] = &v319[8 * v318];
              if (v314)
                operator delete(v314);
            }
            else
            {
              *(_QWORD *)v132 = v131;
              v134 = v132 + 8;
            }
            v130[392] = v134;
            break;
          case 'c':
            v135 = *(_QWORD **)a1[2];
            v136 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            v137 = (char *)v135[395];
            v138 = v135[396];
            if ((unint64_t)v137 >= v138)
            {
              v320 = (char *)v135[394];
              v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61)
                goto LABEL_594;
              v322 = v138 - (_QWORD)v320;
              v323 = (uint64_t)(v138 - (_QWORD)v320) >> 2;
              if (v323 <= v321 + 1)
                v323 = v321 + 1;
              if (v322 >= 0x7FFFFFFFFFFFFFF8)
                v324 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v324 = v323;
              if (v324)
              {
                v325 = (char *)sub_40FC((uint64_t)(v135 + 396), v324);
                v137 = (char *)v135[395];
                v320 = (char *)v135[394];
              }
              else
              {
                v325 = 0;
              }
              v412 = &v325[8 * v321];
              *(_QWORD *)v412 = v136;
              v139 = v412 + 8;
              while (v137 != v320)
              {
                v413 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[394] = v412;
              v135[395] = v139;
              v135[396] = &v325[8 * v324];
              if (v320)
                operator delete(v320);
            }
            else
            {
              *(_QWORD *)v137 = v136;
              v139 = v137 + 8;
            }
            v135[395] = v139;
            break;
          case 'd':
            v140 = *(_QWORD **)a1[2];
            v141 = *(_WORD *)(a1[3] + 40) & 0x1FFF;
            v142 = (char *)v140[398];
            v143 = v140[399];
            if ((unint64_t)v142 >= v143)
            {
              v326 = (char *)v140[397];
              v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61)
                goto LABEL_594;
              v328 = v143 - (_QWORD)v326;
              v329 = (uint64_t)(v143 - (_QWORD)v326) >> 2;
              if (v329 <= v327 + 1)
                v329 = v327 + 1;
              if (v328 >= 0x7FFFFFFFFFFFFFF8)
                v330 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v330 = v329;
              if (v330)
              {
                v331 = (char *)sub_40FC((uint64_t)(v140 + 399), v330);
                v142 = (char *)v140[398];
                v326 = (char *)v140[397];
              }
              else
              {
                v331 = 0;
              }
              v414 = &v331[8 * v327];
              *(_QWORD *)v414 = v141;
              v144 = v414 + 8;
              while (v142 != v326)
              {
                v415 = *((_QWORD *)v142 - 1);
                v142 -= 8;
                *((_QWORD *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[397] = v414;
              v140[398] = v144;
              v140[399] = &v331[8 * v330];
              if (v326)
                operator delete(v326);
            }
            else
            {
              *(_QWORD *)v142 = v141;
              v144 = v142 + 8;
            }
            v140[398] = v144;
            break;
          case 'e':
            v145 = *(_QWORD **)a1[2];
            v146 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 24) >> 1) & 0x1FFF;
            v147 = (unint64_t *)v145[401];
            v148 = v145[402];
            if ((unint64_t)v147 >= v148)
            {
              v332 = (unint64_t *)v145[400];
              v333 = v147 - v332;
              if ((unint64_t)(v333 + 1) >> 61)
                goto LABEL_594;
              v334 = v148 - (_QWORD)v332;
              v335 = (uint64_t)(v148 - (_QWORD)v332) >> 2;
              if (v335 <= v333 + 1)
                v335 = v333 + 1;
              if (v334 >= 0x7FFFFFFFFFFFFFF8)
                v336 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v336 = v335;
              if (v336)
              {
                v337 = (char *)sub_40FC((uint64_t)(v145 + 402), v336);
                v147 = (unint64_t *)v145[401];
                v332 = (unint64_t *)v145[400];
              }
              else
              {
                v337 = 0;
              }
              v416 = (unint64_t *)&v337[8 * v333];
              *v416 = v146;
              v149 = v416 + 1;
              while (v147 != v332)
              {
                v417 = *--v147;
                *--v416 = v417;
              }
              v145[400] = v416;
              v145[401] = v149;
              v145[402] = &v337[8 * v336];
              if (v332)
                operator delete(v332);
            }
            else
            {
              *v147 = v146;
              v149 = v147 + 1;
            }
            v145[401] = v149;
            break;
          case 'f':
            v150 = *(_QWORD **)a1[2];
            v151 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            v152 = (char *)v150[404];
            v153 = v150[405];
            if ((unint64_t)v152 >= v153)
            {
              v338 = (char *)v150[403];
              v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61)
                goto LABEL_594;
              v340 = v153 - (_QWORD)v338;
              v341 = (uint64_t)(v153 - (_QWORD)v338) >> 2;
              if (v341 <= v339 + 1)
                v341 = v339 + 1;
              if (v340 >= 0x7FFFFFFFFFFFFFF8)
                v342 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v342 = v341;
              if (v342)
              {
                v343 = (char *)sub_40FC((uint64_t)(v150 + 405), v342);
                v152 = (char *)v150[404];
                v338 = (char *)v150[403];
              }
              else
              {
                v343 = 0;
              }
              v418 = &v343[8 * v339];
              *(_QWORD *)v418 = v151;
              v154 = v418 + 8;
              while (v152 != v338)
              {
                v419 = *((_QWORD *)v152 - 1);
                v152 -= 8;
                *((_QWORD *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[403] = v418;
              v150[404] = v154;
              v150[405] = &v343[8 * v342];
              if (v338)
                operator delete(v338);
            }
            else
            {
              *(_QWORD *)v152 = v151;
              v154 = v152 + 8;
            }
            v150[404] = v154;
            break;
          case 'g':
            v155 = *(_QWORD **)a1[2];
            v156 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            v157 = (char *)v155[407];
            v158 = v155[408];
            if ((unint64_t)v157 >= v158)
            {
              v344 = (char *)v155[406];
              v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61)
                goto LABEL_594;
              v346 = v158 - (_QWORD)v344;
              v347 = (uint64_t)(v158 - (_QWORD)v344) >> 2;
              if (v347 <= v345 + 1)
                v347 = v345 + 1;
              if (v346 >= 0x7FFFFFFFFFFFFFF8)
                v348 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v348 = v347;
              if (v348)
              {
                v349 = (char *)sub_40FC((uint64_t)(v155 + 408), v348);
                v157 = (char *)v155[407];
                v344 = (char *)v155[406];
              }
              else
              {
                v349 = 0;
              }
              v420 = &v349[8 * v345];
              *(_QWORD *)v420 = v156;
              v159 = v420 + 8;
              while (v157 != v344)
              {
                v421 = *((_QWORD *)v157 - 1);
                v157 -= 8;
                *((_QWORD *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[406] = v420;
              v155[407] = v159;
              v155[408] = &v349[8 * v348];
              if (v344)
                operator delete(v344);
            }
            else
            {
              *(_QWORD *)v157 = v156;
              v159 = v157 + 8;
            }
            v155[407] = v159;
            break;
          case 'h':
            v160 = *(_QWORD **)a1[2];
            v161 = *(_WORD *)(a1[3] + 42) & 0x1FFF;
            v162 = (char *)v160[410];
            v163 = v160[411];
            if ((unint64_t)v162 >= v163)
            {
              v350 = (char *)v160[409];
              v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61)
                goto LABEL_594;
              v352 = v163 - (_QWORD)v350;
              v353 = (uint64_t)(v163 - (_QWORD)v350) >> 2;
              if (v353 <= v351 + 1)
                v353 = v351 + 1;
              if (v352 >= 0x7FFFFFFFFFFFFFF8)
                v354 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v354 = v353;
              if (v354)
              {
                v355 = (char *)sub_40FC((uint64_t)(v160 + 411), v354);
                v162 = (char *)v160[410];
                v350 = (char *)v160[409];
              }
              else
              {
                v355 = 0;
              }
              v422 = &v355[8 * v351];
              *(_QWORD *)v422 = v161;
              v164 = v422 + 8;
              while (v162 != v350)
              {
                v423 = *((_QWORD *)v162 - 1);
                v162 -= 8;
                *((_QWORD *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[409] = v422;
              v160[410] = v164;
              v160[411] = &v355[8 * v354];
              if (v350)
                operator delete(v350);
            }
            else
            {
              *(_QWORD *)v162 = v161;
              v164 = v162 + 8;
            }
            v160[410] = v164;
            break;
          case 'i':
            v165 = *(_QWORD **)a1[2];
            v166 = *(_WORD *)(a1[3] + 26) & 0x1FFF;
            v167 = (char *)v165[413];
            v168 = v165[414];
            if ((unint64_t)v167 >= v168)
            {
              v356 = (char *)v165[412];
              v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61)
LABEL_594:
                sub_4074();
              v358 = v168 - (_QWORD)v356;
              v359 = (uint64_t)(v168 - (_QWORD)v356) >> 2;
              if (v359 <= v357 + 1)
                v359 = v357 + 1;
              if (v358 >= 0x7FFFFFFFFFFFFFF8)
                v360 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v360 = v359;
              if (v360)
              {
                v361 = (char *)sub_40FC((uint64_t)(v165 + 414), v360);
                v167 = (char *)v165[413];
                v356 = (char *)v165[412];
              }
              else
              {
                v361 = 0;
              }
              v424 = &v361[8 * v357];
              *(_QWORD *)v424 = v166;
              v169 = v424 + 8;
              while (v167 != v356)
              {
                v425 = *((_QWORD *)v167 - 1);
                v167 -= 8;
                *((_QWORD *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[412] = v424;
              v165[413] = v169;
              v165[414] = &v361[8 * v360];
              if (v356)
                operator delete(v356);
            }
            else
            {
              *(_QWORD *)v167 = v166;
              v169 = v167 + 8;
            }
            v165[413] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A2F40(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  int *v102;
  int **v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;

  v4 = *a1;
  if (*a2 == 1)
  {
    v103 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v102 = *v103;
    v104 = (char *)v103[1] - (char *)*v103;
    if (v104)
    {
      v105 = v104 >> 2;
      if (v105 <= 1)
        v105 = 1;
      do
      {
        v106 = *v102++;
        switch(v106)
        {
          case 'C':
            v107 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2392);
            goto LABEL_140;
          case 'D':
            v107 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2416);
            goto LABEL_140;
          case 'E':
            v107 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2440);
            goto LABEL_140;
          case 'F':
            v107 = (*(_QWORD *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2464);
            goto LABEL_140;
          case 'G':
            v107 = *(_QWORD *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2488);
            goto LABEL_140;
          case 'H':
            v107 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2512);
            goto LABEL_140;
          case 'I':
            v107 = *(unsigned int *)(a1[3] + 24);
            v108 = (_QWORD *)(*(_QWORD *)a1[2] + 2536);
LABEL_140:
            *(_QWORD *)(*v108 - 8) += v107;
            break;
          default:
            break;
        }
        --v105;
      }
      while (v105);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'C':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v12 = (char *)v10[299];
            v13 = v10[300];
            if ((unint64_t)v12 >= v13)
            {
              v46 = (char *)v10[298];
              v47 = (v12 - v46) >> 3;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_144;
              v48 = v13 - (_QWORD)v46;
              v49 = (uint64_t)(v13 - (_QWORD)v46) >> 2;
              if (v49 <= v47 + 1)
                v49 = v47 + 1;
              if (v48 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v49;
              if (v50)
              {
                v51 = (char *)sub_40FC((uint64_t)(v10 + 300), v50);
                v12 = (char *)v10[299];
                v46 = (char *)v10[298];
              }
              else
              {
                v51 = 0;
              }
              v88 = &v51[8 * v47];
              *(_QWORD *)v88 = v11;
              v14 = v88 + 8;
              while (v12 != v46)
              {
                v89 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v88 - 1) = v89;
                v88 -= 8;
              }
              v10[298] = v88;
              v10[299] = v14;
              v10[300] = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[299] = v14;
            break;
          case 'D':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v17 = (char *)v15[302];
            v18 = v15[303];
            if ((unint64_t)v17 >= v18)
            {
              v52 = (char *)v15[301];
              v53 = (v17 - v52) >> 3;
              if ((unint64_t)(v53 + 1) >> 61)
                goto LABEL_144;
              v54 = v18 - (_QWORD)v52;
              v55 = (uint64_t)(v18 - (_QWORD)v52) >> 2;
              if (v55 <= v53 + 1)
                v55 = v53 + 1;
              if (v54 >= 0x7FFFFFFFFFFFFFF8)
                v56 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v56 = v55;
              if (v56)
              {
                v57 = (char *)sub_40FC((uint64_t)(v15 + 303), v56);
                v17 = (char *)v15[302];
                v52 = (char *)v15[301];
              }
              else
              {
                v57 = 0;
              }
              v90 = &v57[8 * v53];
              *(_QWORD *)v90 = v16;
              v19 = v90 + 8;
              while (v17 != v52)
              {
                v91 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v90 - 1) = v91;
                v90 -= 8;
              }
              v15[301] = v90;
              v15[302] = v19;
              v15[303] = &v57[8 * v56];
              if (v52)
                operator delete(v52);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[302] = v19;
            break;
          case 'E':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v22 = (char *)v20[305];
            v23 = v20[306];
            if ((unint64_t)v22 >= v23)
            {
              v58 = (char *)v20[304];
              v59 = (v22 - v58) >> 3;
              if ((unint64_t)(v59 + 1) >> 61)
                goto LABEL_144;
              v60 = v23 - (_QWORD)v58;
              v61 = (uint64_t)(v23 - (_QWORD)v58) >> 2;
              if (v61 <= v59 + 1)
                v61 = v59 + 1;
              if (v60 >= 0x7FFFFFFFFFFFFFF8)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v61;
              if (v62)
              {
                v63 = (char *)sub_40FC((uint64_t)(v20 + 306), v62);
                v22 = (char *)v20[305];
                v58 = (char *)v20[304];
              }
              else
              {
                v63 = 0;
              }
              v92 = &v63[8 * v59];
              *(_QWORD *)v92 = v21;
              v24 = v92 + 8;
              while (v22 != v58)
              {
                v93 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v92 - 1) = v93;
                v92 -= 8;
              }
              v20[304] = v92;
              v20[305] = v24;
              v20[306] = &v63[8 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[305] = v24;
            break;
          case 'F':
            v25 = *(_QWORD **)a1[2];
            v26 = (*(_QWORD *)(a1[3] + 32) >> 33) & 0x7FFFLL;
            v27 = (uint64_t *)v25[308];
            v28 = v25[309];
            if ((unint64_t)v27 >= v28)
            {
              v64 = (uint64_t *)v25[307];
              v65 = v27 - v64;
              if ((unint64_t)(v65 + 1) >> 61)
                goto LABEL_144;
              v66 = v28 - (_QWORD)v64;
              v67 = (uint64_t)(v28 - (_QWORD)v64) >> 2;
              if (v67 <= v65 + 1)
                v67 = v65 + 1;
              if (v66 >= 0x7FFFFFFFFFFFFFF8)
                v68 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v68 = v67;
              if (v68)
              {
                v69 = (char *)sub_40FC((uint64_t)(v25 + 309), v68);
                v27 = (uint64_t *)v25[308];
                v64 = (uint64_t *)v25[307];
              }
              else
              {
                v69 = 0;
              }
              v94 = (uint64_t *)&v69[8 * v65];
              *v94 = v26;
              v29 = v94 + 1;
              while (v27 != v64)
              {
                v95 = *--v27;
                *--v94 = v95;
              }
              v25[307] = v94;
              v25[308] = v29;
              v25[309] = &v69[8 * v68];
              if (v64)
                operator delete(v64);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[308] = v29;
            break;
          case 'G':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_QWORD *)(a1[3] + 32) & 0x1FFFFFFFFLL;
            v32 = (uint64_t *)v30[311];
            v33 = v30[312];
            if ((unint64_t)v32 >= v33)
            {
              v70 = (uint64_t *)v30[310];
              v71 = v32 - v70;
              if ((unint64_t)(v71 + 1) >> 61)
                goto LABEL_144;
              v72 = v33 - (_QWORD)v70;
              v73 = (uint64_t)(v33 - (_QWORD)v70) >> 2;
              if (v73 <= v71 + 1)
                v73 = v71 + 1;
              if (v72 >= 0x7FFFFFFFFFFFFFF8)
                v74 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v74 = v73;
              if (v74)
              {
                v75 = (char *)sub_40FC((uint64_t)(v30 + 312), v74);
                v32 = (uint64_t *)v30[311];
                v70 = (uint64_t *)v30[310];
              }
              else
              {
                v75 = 0;
              }
              v96 = (uint64_t *)&v75[8 * v71];
              *v96 = v31;
              v34 = v96 + 1;
              while (v32 != v70)
              {
                v97 = *--v32;
                *--v96 = v97;
              }
              v30[310] = v96;
              v30[311] = v34;
              v30[312] = &v75[8 * v74];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[311] = v34;
            break;
          case 'H':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v37 = (char *)v35[314];
            v38 = v35[315];
            if ((unint64_t)v37 >= v38)
            {
              v76 = (char *)v35[313];
              v77 = (v37 - v76) >> 3;
              if ((unint64_t)(v77 + 1) >> 61)
                goto LABEL_144;
              v78 = v38 - (_QWORD)v76;
              v79 = (uint64_t)(v38 - (_QWORD)v76) >> 2;
              if (v79 <= v77 + 1)
                v79 = v77 + 1;
              if (v78 >= 0x7FFFFFFFFFFFFFF8)
                v80 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v80 = v79;
              if (v80)
              {
                v81 = (char *)sub_40FC((uint64_t)(v35 + 315), v80);
                v37 = (char *)v35[314];
                v76 = (char *)v35[313];
              }
              else
              {
                v81 = 0;
              }
              v98 = &v81[8 * v77];
              *(_QWORD *)v98 = v36;
              v39 = v98 + 8;
              while (v37 != v76)
              {
                v99 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v98 - 1) = v99;
                v98 -= 8;
              }
              v35[313] = v98;
              v35[314] = v39;
              v35[315] = &v81[8 * v80];
              if (v76)
                operator delete(v76);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[314] = v39;
            break;
          case 'I':
            v40 = a1[2];
            v41 = *(_QWORD **)v40;
            v42 = *(unsigned int *)(a1[3] + 24);
            v43 = *(char **)(*(_QWORD *)v40 + 2536);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 2544);
            if ((unint64_t)v43 >= v44)
            {
              v82 = (char *)v41[316];
              v83 = (v43 - v82) >> 3;
              if ((unint64_t)(v83 + 1) >> 61)
LABEL_144:
                sub_4074();
              v84 = v44 - (_QWORD)v82;
              v85 = (uint64_t)(v44 - (_QWORD)v82) >> 2;
              if (v85 <= v83 + 1)
                v85 = v83 + 1;
              if (v84 >= 0x7FFFFFFFFFFFFFF8)
                v86 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v86 = v85;
              if (v86)
              {
                v87 = (char *)sub_40FC((uint64_t)(v41 + 318), v86);
                v43 = (char *)v41[317];
                v82 = (char *)v41[316];
              }
              else
              {
                v87 = 0;
              }
              v100 = &v87[8 * v83];
              *(_QWORD *)v100 = v42;
              v45 = v100 + 8;
              while (v43 != v82)
              {
                v101 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v100 - 1) = v101;
                v100 -= 8;
              }
              v41[316] = v100;
              v41[317] = v45;
              v41[318] = &v87[8 * v86];
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[317] = v45;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A3674(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  int *v117;
  int **v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  _QWORD *v123;

  v4 = *a1;
  if (*a2 == 1)
  {
    v118 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v117 = *v118;
    v119 = (char *)v118[1] - (char *)*v118;
    if (v119)
    {
      v120 = v119 >> 2;
      if (v120 <= 1)
        v120 = 1;
      do
      {
        v121 = *v117++;
        switch(v121)
        {
          case 125:
            v122 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3784);
            goto LABEL_158;
          case 126:
            v122 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3808);
            goto LABEL_158;
          case 127:
            v122 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3832);
            goto LABEL_158;
          case 128:
            v122 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3856);
            goto LABEL_158;
          case 129:
            v122 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3880);
            goto LABEL_158;
          case 130:
            v122 = *(unsigned __int16 *)(a1[3] + 46);
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3904);
            goto LABEL_158;
          case 131:
            v122 = *(unsigned __int16 *)(a1[3] + 44);
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3928);
            goto LABEL_158;
          case 132:
            v122 = *(unsigned __int16 *)(a1[3] + 28);
            v123 = (_QWORD *)(*(_QWORD *)a1[2] + 3952);
LABEL_158:
            *(_QWORD *)(*v123 - 8) += v122;
            break;
          default:
            break;
        }
        --v120;
      }
      while (v120);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x7D:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v12 = (char *)v10[473];
            v13 = v10[474];
            if ((unint64_t)v12 >= v13)
            {
              v53 = (char *)v10[472];
              v54 = (v12 - v53) >> 3;
              if ((unint64_t)(v54 + 1) >> 61)
                goto LABEL_162;
              v55 = v13 - (_QWORD)v53;
              v56 = (uint64_t)(v13 - (_QWORD)v53) >> 2;
              if (v56 <= v54 + 1)
                v56 = v54 + 1;
              if (v55 >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v56;
              if (v57)
              {
                v58 = (char *)sub_40FC((uint64_t)(v10 + 474), v57);
                v12 = (char *)v10[473];
                v53 = (char *)v10[472];
              }
              else
              {
                v58 = 0;
              }
              v101 = &v58[8 * v54];
              *(_QWORD *)v101 = v11;
              v14 = v101 + 8;
              while (v12 != v53)
              {
                v102 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v101 - 1) = v102;
                v101 -= 8;
              }
              v10[472] = v101;
              v10[473] = v14;
              v10[474] = &v58[8 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[473] = v14;
            break;
          case 0x7E:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[476];
            v18 = v15[477];
            if ((unint64_t)v17 >= v18)
            {
              v59 = (uint64_t *)v15[475];
              v60 = v17 - v59;
              if ((unint64_t)(v60 + 1) >> 61)
                goto LABEL_162;
              v61 = v18 - (_QWORD)v59;
              v62 = (uint64_t)(v18 - (_QWORD)v59) >> 2;
              if (v62 <= v60 + 1)
                v62 = v60 + 1;
              if (v61 >= 0x7FFFFFFFFFFFFFF8)
                v63 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v63 = v62;
              if (v63)
              {
                v64 = (char *)sub_40FC((uint64_t)(v15 + 477), v63);
                v17 = (uint64_t *)v15[476];
                v59 = (uint64_t *)v15[475];
              }
              else
              {
                v64 = 0;
              }
              v103 = (uint64_t *)&v64[8 * v60];
              *v103 = v16;
              v19 = v103 + 1;
              while (v17 != v59)
              {
                v104 = *--v17;
                *--v103 = v104;
              }
              v15[475] = v103;
              v15[476] = v19;
              v15[477] = &v64[8 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[476] = v19;
            break;
          case 0x7F:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v22 = (char *)v20[479];
            v23 = v20[480];
            if ((unint64_t)v22 >= v23)
            {
              v65 = (char *)v20[478];
              v66 = (v22 - v65) >> 3;
              if ((unint64_t)(v66 + 1) >> 61)
                goto LABEL_162;
              v67 = v23 - (_QWORD)v65;
              v68 = (uint64_t)(v23 - (_QWORD)v65) >> 2;
              if (v68 <= v66 + 1)
                v68 = v66 + 1;
              if (v67 >= 0x7FFFFFFFFFFFFFF8)
                v69 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v69 = v68;
              if (v69)
              {
                v70 = (char *)sub_40FC((uint64_t)(v20 + 480), v69);
                v22 = (char *)v20[479];
                v65 = (char *)v20[478];
              }
              else
              {
                v70 = 0;
              }
              v105 = &v70[8 * v66];
              *(_QWORD *)v105 = v21;
              v24 = v105 + 8;
              while (v22 != v65)
              {
                v106 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v105 - 1) = v106;
                v105 -= 8;
              }
              v20[478] = v105;
              v20[479] = v24;
              v20[480] = &v70[8 * v69];
              if (v65)
                operator delete(v65);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[479] = v24;
            break;
          case 0x80:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v27 = (uint64_t *)v25[482];
            v28 = v25[483];
            if ((unint64_t)v27 >= v28)
            {
              v71 = (uint64_t *)v25[481];
              v72 = v27 - v71;
              if ((unint64_t)(v72 + 1) >> 61)
                goto LABEL_162;
              v73 = v28 - (_QWORD)v71;
              v74 = (uint64_t)(v28 - (_QWORD)v71) >> 2;
              if (v74 <= v72 + 1)
                v74 = v72 + 1;
              if (v73 >= 0x7FFFFFFFFFFFFFF8)
                v75 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v75 = v74;
              if (v75)
              {
                v76 = (char *)sub_40FC((uint64_t)(v25 + 483), v75);
                v27 = (uint64_t *)v25[482];
                v71 = (uint64_t *)v25[481];
              }
              else
              {
                v76 = 0;
              }
              v107 = (uint64_t *)&v76[8 * v72];
              *v107 = v26;
              v29 = v107 + 1;
              while (v27 != v71)
              {
                v108 = *--v27;
                *--v107 = v108;
              }
              v25[481] = v107;
              v25[482] = v29;
              v25[483] = &v76[8 * v75];
              if (v71)
                operator delete(v71);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[482] = v29;
            break;
          case 0x81:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v32 = (uint64_t *)v30[485];
            v33 = v30[486];
            if ((unint64_t)v32 >= v33)
            {
              v77 = (uint64_t *)v30[484];
              v78 = v32 - v77;
              if ((unint64_t)(v78 + 1) >> 61)
                goto LABEL_162;
              v79 = v33 - (_QWORD)v77;
              v80 = (uint64_t)(v33 - (_QWORD)v77) >> 2;
              if (v80 <= v78 + 1)
                v80 = v78 + 1;
              if (v79 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v80;
              if (v81)
              {
                v82 = (char *)sub_40FC((uint64_t)(v30 + 486), v81);
                v32 = (uint64_t *)v30[485];
                v77 = (uint64_t *)v30[484];
              }
              else
              {
                v82 = 0;
              }
              v109 = (uint64_t *)&v82[8 * v78];
              *v109 = v31;
              v34 = v109 + 1;
              while (v32 != v77)
              {
                v110 = *--v32;
                *--v109 = v110;
              }
              v30[484] = v109;
              v30[485] = v34;
              v30[486] = &v82[8 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[485] = v34;
            break;
          case 0x82:
            v35 = a1[2];
            v36 = *(_QWORD **)v35;
            v37 = *(unsigned __int16 *)(a1[3] + 46);
            v38 = *(char **)(*(_QWORD *)v35 + 3904);
            v39 = *(_QWORD *)(*(_QWORD *)v35 + 3912);
            if ((unint64_t)v38 >= v39)
            {
              v83 = (char *)v36[487];
              v84 = (v38 - v83) >> 3;
              if ((unint64_t)(v84 + 1) >> 61)
                goto LABEL_162;
              v85 = v39 - (_QWORD)v83;
              v86 = (uint64_t)(v39 - (_QWORD)v83) >> 2;
              if (v86 <= v84 + 1)
                v86 = v84 + 1;
              if (v85 >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v86;
              if (v87)
              {
                v88 = (char *)sub_40FC((uint64_t)(v36 + 489), v87);
                v38 = (char *)v36[488];
                v83 = (char *)v36[487];
              }
              else
              {
                v88 = 0;
              }
              v111 = &v88[8 * v84];
              *(_QWORD *)v111 = v37;
              v40 = v111 + 8;
              while (v38 != v83)
              {
                v112 = *((_QWORD *)v38 - 1);
                v38 -= 8;
                *((_QWORD *)v111 - 1) = v112;
                v111 -= 8;
              }
              v36[487] = v111;
              v36[488] = v40;
              v36[489] = &v88[8 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_QWORD *)v38 = v37;
              v40 = v38 + 8;
            }
            v36[488] = v40;
            break;
          case 0x83:
            v41 = a1[2];
            v42 = *(_QWORD **)v41;
            v43 = *(unsigned __int16 *)(a1[3] + 44);
            v44 = *(char **)(*(_QWORD *)v41 + 3928);
            v45 = *(_QWORD *)(*(_QWORD *)v41 + 3936);
            if ((unint64_t)v44 >= v45)
            {
              v89 = (char *)v42[490];
              v90 = (v44 - v89) >> 3;
              if ((unint64_t)(v90 + 1) >> 61)
                goto LABEL_162;
              v91 = v45 - (_QWORD)v89;
              v92 = (uint64_t)(v45 - (_QWORD)v89) >> 2;
              if (v92 <= v90 + 1)
                v92 = v90 + 1;
              if (v91 >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v92;
              if (v93)
              {
                v94 = (char *)sub_40FC((uint64_t)(v42 + 492), v93);
                v44 = (char *)v42[491];
                v89 = (char *)v42[490];
              }
              else
              {
                v94 = 0;
              }
              v113 = &v94[8 * v90];
              *(_QWORD *)v113 = v43;
              v46 = v113 + 8;
              while (v44 != v89)
              {
                v114 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v113 - 1) = v114;
                v113 -= 8;
              }
              v42[490] = v113;
              v42[491] = v46;
              v42[492] = &v94[8 * v93];
              if (v89)
                operator delete(v89);
            }
            else
            {
              *(_QWORD *)v44 = v43;
              v46 = v44 + 8;
            }
            v42[491] = v46;
            break;
          case 0x84:
            v47 = a1[2];
            v48 = *(_QWORD **)v47;
            v49 = *(unsigned __int16 *)(a1[3] + 28);
            v50 = *(char **)(*(_QWORD *)v47 + 3952);
            v51 = *(_QWORD *)(*(_QWORD *)v47 + 3960);
            if ((unint64_t)v50 >= v51)
            {
              v95 = (char *)v48[493];
              v96 = (v50 - v95) >> 3;
              if ((unint64_t)(v96 + 1) >> 61)
LABEL_162:
                sub_4074();
              v97 = v51 - (_QWORD)v95;
              v98 = (uint64_t)(v51 - (_QWORD)v95) >> 2;
              if (v98 <= v96 + 1)
                v98 = v96 + 1;
              if (v97 >= 0x7FFFFFFFFFFFFFF8)
                v99 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v99 = v98;
              if (v99)
              {
                v100 = (char *)sub_40FC((uint64_t)(v48 + 495), v99);
                v50 = (char *)v48[494];
                v95 = (char *)v48[493];
              }
              else
              {
                v100 = 0;
              }
              v115 = &v100[8 * v96];
              *(_QWORD *)v115 = v49;
              v52 = v115 + 8;
              while (v50 != v95)
              {
                v116 = *((_QWORD *)v50 - 1);
                v50 -= 8;
                *((_QWORD *)v115 - 1) = v116;
                v115 -= 8;
              }
              v48[493] = v115;
              v48[494] = v52;
              v48[495] = &v100[8 * v99];
              if (v95)
                operator delete(v95);
            }
            else
            {
              *(_QWORD *)v50 = v49;
              v52 = v50 + 8;
            }
            v48[494] = v52;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A3E74(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  int *v207;
  int **v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  _QWORD *v213;

  v4 = *a1;
  if (*a2 == 1)
  {
    v208 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v207 = *v208;
    v209 = (char *)v208[1] - (char *)*v208;
    if (v209)
    {
      v210 = v209 >> 2;
      if (v210 <= 1)
        v210 = 1;
      do
      {
        v211 = *v207++;
        switch(v211)
        {
          case 'j':
            v212 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3328);
            goto LABEL_284;
          case 'k':
            v212 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3352);
            goto LABEL_284;
          case 'l':
            v212 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3376);
            goto LABEL_284;
          case 'm':
            v212 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3400);
            goto LABEL_284;
          case 'n':
            v212 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3424);
            goto LABEL_284;
          case 'o':
            v212 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3448);
            goto LABEL_284;
          case 'p':
            v212 = *(unsigned __int16 *)(a1[3] + 60);
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3472);
            goto LABEL_284;
          case 'q':
            v212 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3496);
            goto LABEL_284;
          case 'r':
            v212 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3520);
            goto LABEL_284;
          case 's':
            v212 = *(_DWORD *)(a1[3] + 56) & 0x1FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3544);
            goto LABEL_284;
          case 't':
            v212 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3568);
            goto LABEL_284;
          case 'u':
            v212 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3592);
            goto LABEL_284;
          case 'v':
            v212 = *(unsigned __int16 *)(a1[3] + 62);
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3616);
            goto LABEL_284;
          case 'w':
            v212 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3640);
            goto LABEL_284;
          case 'x':
            v212 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            v213 = (_QWORD *)(*(_QWORD *)a1[2] + 3664);
LABEL_284:
            *(_QWORD *)(*v213 - 8) += v212;
            break;
          default:
            break;
        }
        --v210;
      }
      while (v210);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'j':
            v10 = *(_QWORD **)a1[2];
            v11 = (unint64_t)*(unsigned int *)(a1[3] + 40) >> 17;
            v12 = (unint64_t *)v10[416];
            v13 = v10[417];
            if ((unint64_t)v12 >= v13)
            {
              v87 = (unint64_t *)v10[415];
              v88 = v12 - v87;
              if ((unint64_t)(v88 + 1) >> 61)
                goto LABEL_288;
              v89 = v13 - (_QWORD)v87;
              v90 = (uint64_t)(v13 - (_QWORD)v87) >> 2;
              if (v90 <= v88 + 1)
                v90 = v88 + 1;
              if (v89 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v90;
              if (v91)
              {
                v92 = (char *)sub_40FC((uint64_t)(v10 + 417), v91);
                v12 = (unint64_t *)v10[416];
                v87 = (unint64_t *)v10[415];
              }
              else
              {
                v92 = 0;
              }
              v177 = (unint64_t *)&v92[8 * v88];
              *v177 = v11;
              v14 = v177 + 1;
              while (v12 != v87)
              {
                v178 = *--v12;
                *--v177 = v178;
              }
              v10[415] = v177;
              v10[416] = v14;
              v10[417] = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[416] = v14;
            break;
          case 'k':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[419];
            v18 = v15[420];
            if ((unint64_t)v17 >= v18)
            {
              v93 = (uint64_t *)v15[418];
              v94 = v17 - v93;
              if ((unint64_t)(v94 + 1) >> 61)
                goto LABEL_288;
              v95 = v18 - (_QWORD)v93;
              v96 = (uint64_t)(v18 - (_QWORD)v93) >> 2;
              if (v96 <= v94 + 1)
                v96 = v94 + 1;
              if (v95 >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v96;
              if (v97)
              {
                v98 = (char *)sub_40FC((uint64_t)(v15 + 420), v97);
                v17 = (uint64_t *)v15[419];
                v93 = (uint64_t *)v15[418];
              }
              else
              {
                v98 = 0;
              }
              v179 = (uint64_t *)&v98[8 * v94];
              *v179 = v16;
              v19 = v179 + 1;
              while (v17 != v93)
              {
                v180 = *--v17;
                *--v179 = v180;
              }
              v15[418] = v179;
              v15[419] = v19;
              v15[420] = &v98[8 * v97];
              if (v93)
                operator delete(v93);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[419] = v19;
            break;
          case 'l':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v22 = (char *)v20[422];
            v23 = v20[423];
            if ((unint64_t)v22 >= v23)
            {
              v99 = (char *)v20[421];
              v100 = (v22 - v99) >> 3;
              if ((unint64_t)(v100 + 1) >> 61)
                goto LABEL_288;
              v101 = v23 - (_QWORD)v99;
              v102 = (uint64_t)(v23 - (_QWORD)v99) >> 2;
              if (v102 <= v100 + 1)
                v102 = v100 + 1;
              if (v101 >= 0x7FFFFFFFFFFFFFF8)
                v103 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v103 = v102;
              if (v103)
              {
                v104 = (char *)sub_40FC((uint64_t)(v20 + 423), v103);
                v22 = (char *)v20[422];
                v99 = (char *)v20[421];
              }
              else
              {
                v104 = 0;
              }
              v181 = &v104[8 * v100];
              *(_QWORD *)v181 = v21;
              v24 = v181 + 8;
              while (v22 != v99)
              {
                v182 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v181 - 1) = v182;
                v181 -= 8;
              }
              v20[421] = v181;
              v20[422] = v24;
              v20[423] = &v104[8 * v103];
              if (v99)
                operator delete(v99);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[422] = v24;
            break;
          case 'm':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v27 = (char *)v25[425];
            v28 = v25[426];
            if ((unint64_t)v27 >= v28)
            {
              v105 = (char *)v25[424];
              v106 = (v27 - v105) >> 3;
              if ((unint64_t)(v106 + 1) >> 61)
                goto LABEL_288;
              v107 = v28 - (_QWORD)v105;
              v108 = (uint64_t)(v28 - (_QWORD)v105) >> 2;
              if (v108 <= v106 + 1)
                v108 = v106 + 1;
              if (v107 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v108;
              if (v109)
              {
                v110 = (char *)sub_40FC((uint64_t)(v25 + 426), v109);
                v27 = (char *)v25[425];
                v105 = (char *)v25[424];
              }
              else
              {
                v110 = 0;
              }
              v183 = &v110[8 * v106];
              *(_QWORD *)v183 = v26;
              v29 = v183 + 8;
              while (v27 != v105)
              {
                v184 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v183 - 1) = v184;
                v183 -= 8;
              }
              v25[424] = v183;
              v25[425] = v29;
              v25[426] = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[425] = v29;
            break;
          case 'n':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v32 = (char *)v30[428];
            v33 = v30[429];
            if ((unint64_t)v32 >= v33)
            {
              v111 = (char *)v30[427];
              v112 = (v32 - v111) >> 3;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_288;
              v113 = v33 - (_QWORD)v111;
              v114 = (uint64_t)(v33 - (_QWORD)v111) >> 2;
              if (v114 <= v112 + 1)
                v114 = v112 + 1;
              if (v113 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                v116 = (char *)sub_40FC((uint64_t)(v30 + 429), v115);
                v32 = (char *)v30[428];
                v111 = (char *)v30[427];
              }
              else
              {
                v116 = 0;
              }
              v185 = &v116[8 * v112];
              *(_QWORD *)v185 = v31;
              v34 = v185 + 8;
              while (v32 != v111)
              {
                v186 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v185 - 1) = v186;
                v185 -= 8;
              }
              v30[427] = v185;
              v30[428] = v34;
              v30[429] = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[428] = v34;
            break;
          case 'o':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v37 = (char *)v35[431];
            v38 = v35[432];
            if ((unint64_t)v37 >= v38)
            {
              v117 = (char *)v35[430];
              v118 = (v37 - v117) >> 3;
              if ((unint64_t)(v118 + 1) >> 61)
                goto LABEL_288;
              v119 = v38 - (_QWORD)v117;
              v120 = (uint64_t)(v38 - (_QWORD)v117) >> 2;
              if (v120 <= v118 + 1)
                v120 = v118 + 1;
              if (v119 >= 0x7FFFFFFFFFFFFFF8)
                v121 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                v122 = (char *)sub_40FC((uint64_t)(v35 + 432), v121);
                v37 = (char *)v35[431];
                v117 = (char *)v35[430];
              }
              else
              {
                v122 = 0;
              }
              v187 = &v122[8 * v118];
              *(_QWORD *)v187 = v36;
              v39 = v187 + 8;
              while (v37 != v117)
              {
                v188 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v187 - 1) = v188;
                v187 -= 8;
              }
              v35[430] = v187;
              v35[431] = v39;
              v35[432] = &v122[8 * v121];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[431] = v39;
            break;
          case 'p':
            v40 = a1[2];
            v41 = *(_QWORD **)v40;
            v42 = *(unsigned __int16 *)(a1[3] + 60);
            v43 = *(char **)(*(_QWORD *)v40 + 3472);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 3480);
            if ((unint64_t)v43 >= v44)
            {
              v123 = (char *)v41[433];
              v124 = (v43 - v123) >> 3;
              if ((unint64_t)(v124 + 1) >> 61)
                goto LABEL_288;
              v125 = v44 - (_QWORD)v123;
              v126 = (uint64_t)(v44 - (_QWORD)v123) >> 2;
              if (v126 <= v124 + 1)
                v126 = v124 + 1;
              if (v125 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v126;
              if (v127)
              {
                v128 = (char *)sub_40FC((uint64_t)(v41 + 435), v127);
                v43 = (char *)v41[434];
                v123 = (char *)v41[433];
              }
              else
              {
                v128 = 0;
              }
              v189 = &v128[8 * v124];
              *(_QWORD *)v189 = v42;
              v45 = v189 + 8;
              while (v43 != v123)
              {
                v190 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v189 - 1) = v190;
                v189 -= 8;
              }
              v41[433] = v189;
              v41[434] = v45;
              v41[435] = &v128[8 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[434] = v45;
            break;
          case 'q':
            v46 = *(_QWORD **)a1[2];
            v47 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            v48 = (uint64_t *)v46[437];
            v49 = v46[438];
            if ((unint64_t)v48 >= v49)
            {
              v129 = (uint64_t *)v46[436];
              v130 = v48 - v129;
              if ((unint64_t)(v130 + 1) >> 61)
                goto LABEL_288;
              v131 = v49 - (_QWORD)v129;
              v132 = (uint64_t)(v49 - (_QWORD)v129) >> 2;
              if (v132 <= v130 + 1)
                v132 = v130 + 1;
              if (v131 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v132;
              if (v133)
              {
                v134 = (char *)sub_40FC((uint64_t)(v46 + 438), v133);
                v48 = (uint64_t *)v46[437];
                v129 = (uint64_t *)v46[436];
              }
              else
              {
                v134 = 0;
              }
              v191 = (uint64_t *)&v134[8 * v130];
              *v191 = v47;
              v50 = v191 + 1;
              while (v48 != v129)
              {
                v192 = *--v48;
                *--v191 = v192;
              }
              v46[436] = v191;
              v46[437] = v50;
              v46[438] = &v134[8 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *v48 = v47;
              v50 = v48 + 1;
            }
            v46[437] = v50;
            break;
          case 'r':
            v51 = *(_QWORD **)a1[2];
            v52 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            v53 = (uint64_t *)v51[440];
            v54 = v51[441];
            if ((unint64_t)v53 >= v54)
            {
              v135 = (uint64_t *)v51[439];
              v136 = v53 - v135;
              if ((unint64_t)(v136 + 1) >> 61)
                goto LABEL_288;
              v137 = v54 - (_QWORD)v135;
              v138 = (uint64_t)(v54 - (_QWORD)v135) >> 2;
              if (v138 <= v136 + 1)
                v138 = v136 + 1;
              if (v137 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v138;
              if (v139)
              {
                v140 = (char *)sub_40FC((uint64_t)(v51 + 441), v139);
                v53 = (uint64_t *)v51[440];
                v135 = (uint64_t *)v51[439];
              }
              else
              {
                v140 = 0;
              }
              v193 = (uint64_t *)&v140[8 * v136];
              *v193 = v52;
              v55 = v193 + 1;
              while (v53 != v135)
              {
                v194 = *--v53;
                *--v193 = v194;
              }
              v51[439] = v193;
              v51[440] = v55;
              v51[441] = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *v53 = v52;
              v55 = v53 + 1;
            }
            v51[440] = v55;
            break;
          case 's':
            v56 = *(_QWORD **)a1[2];
            v57 = *(_DWORD *)(a1[3] + 56) & 0x1FFFFLL;
            v58 = (uint64_t *)v56[443];
            v59 = v56[444];
            if ((unint64_t)v58 >= v59)
            {
              v141 = (uint64_t *)v56[442];
              v142 = v58 - v141;
              if ((unint64_t)(v142 + 1) >> 61)
                goto LABEL_288;
              v143 = v59 - (_QWORD)v141;
              v144 = (uint64_t)(v59 - (_QWORD)v141) >> 2;
              if (v144 <= v142 + 1)
                v144 = v142 + 1;
              if (v143 >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                v146 = (char *)sub_40FC((uint64_t)(v56 + 444), v145);
                v58 = (uint64_t *)v56[443];
                v141 = (uint64_t *)v56[442];
              }
              else
              {
                v146 = 0;
              }
              v195 = (uint64_t *)&v146[8 * v142];
              *v195 = v57;
              v60 = v195 + 1;
              while (v58 != v141)
              {
                v196 = *--v58;
                *--v195 = v196;
              }
              v56[442] = v195;
              v56[443] = v60;
              v56[444] = &v146[8 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *v58 = v57;
              v60 = v58 + 1;
            }
            v56[443] = v60;
            break;
          case 't':
            v61 = *(_QWORD **)a1[2];
            v62 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            v63 = (char *)v61[446];
            v64 = v61[447];
            if ((unint64_t)v63 >= v64)
            {
              v147 = (char *)v61[445];
              v148 = (v63 - v147) >> 3;
              if ((unint64_t)(v148 + 1) >> 61)
                goto LABEL_288;
              v149 = v64 - (_QWORD)v147;
              v150 = (uint64_t)(v64 - (_QWORD)v147) >> 2;
              if (v150 <= v148 + 1)
                v150 = v148 + 1;
              if (v149 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_40FC((uint64_t)(v61 + 447), v151);
                v63 = (char *)v61[446];
                v147 = (char *)v61[445];
              }
              else
              {
                v152 = 0;
              }
              v197 = &v152[8 * v148];
              *(_QWORD *)v197 = v62;
              v65 = v197 + 8;
              while (v63 != v147)
              {
                v198 = *((_QWORD *)v63 - 1);
                v63 -= 8;
                *((_QWORD *)v197 - 1) = v198;
                v197 -= 8;
              }
              v61[445] = v197;
              v61[446] = v65;
              v61[447] = &v152[8 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *(_QWORD *)v63 = v62;
              v65 = v63 + 8;
            }
            v61[446] = v65;
            break;
          case 'u':
            v66 = *(_QWORD **)a1[2];
            v67 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v68 = (char *)v66[449];
            v69 = v66[450];
            if ((unint64_t)v68 >= v69)
            {
              v153 = (char *)v66[448];
              v154 = (v68 - v153) >> 3;
              if ((unint64_t)(v154 + 1) >> 61)
                goto LABEL_288;
              v155 = v69 - (_QWORD)v153;
              v156 = (uint64_t)(v69 - (_QWORD)v153) >> 2;
              if (v156 <= v154 + 1)
                v156 = v154 + 1;
              if (v155 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v156;
              if (v157)
              {
                v158 = (char *)sub_40FC((uint64_t)(v66 + 450), v157);
                v68 = (char *)v66[449];
                v153 = (char *)v66[448];
              }
              else
              {
                v158 = 0;
              }
              v199 = &v158[8 * v154];
              *(_QWORD *)v199 = v67;
              v70 = v199 + 8;
              while (v68 != v153)
              {
                v200 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *((_QWORD *)v199 - 1) = v200;
                v199 -= 8;
              }
              v66[448] = v199;
              v66[449] = v70;
              v66[450] = &v158[8 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *(_QWORD *)v68 = v67;
              v70 = v68 + 8;
            }
            v66[449] = v70;
            break;
          case 'v':
            v71 = a1[2];
            v72 = *(_QWORD **)v71;
            v73 = *(unsigned __int16 *)(a1[3] + 62);
            v74 = *(char **)(*(_QWORD *)v71 + 3616);
            v75 = *(_QWORD *)(*(_QWORD *)v71 + 3624);
            if ((unint64_t)v74 >= v75)
            {
              v159 = (char *)v72[451];
              v160 = (v74 - v159) >> 3;
              if ((unint64_t)(v160 + 1) >> 61)
                goto LABEL_288;
              v161 = v75 - (_QWORD)v159;
              v162 = (uint64_t)(v75 - (_QWORD)v159) >> 2;
              if (v162 <= v160 + 1)
                v162 = v160 + 1;
              if (v161 >= 0x7FFFFFFFFFFFFFF8)
                v163 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v163 = v162;
              if (v163)
              {
                v164 = (char *)sub_40FC((uint64_t)(v72 + 453), v163);
                v74 = (char *)v72[452];
                v159 = (char *)v72[451];
              }
              else
              {
                v164 = 0;
              }
              v201 = &v164[8 * v160];
              *(_QWORD *)v201 = v73;
              v76 = v201 + 8;
              while (v74 != v159)
              {
                v202 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v201 - 1) = v202;
                v201 -= 8;
              }
              v72[451] = v201;
              v72[452] = v76;
              v72[453] = &v164[8 * v163];
              if (v159)
                operator delete(v159);
            }
            else
            {
              *(_QWORD *)v74 = v73;
              v76 = v74 + 8;
            }
            v72[452] = v76;
            break;
          case 'w':
            v77 = *(_QWORD **)a1[2];
            v78 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            v79 = (uint64_t *)v77[455];
            v80 = v77[456];
            if ((unint64_t)v79 >= v80)
            {
              v165 = (uint64_t *)v77[454];
              v166 = v79 - v165;
              if ((unint64_t)(v166 + 1) >> 61)
                goto LABEL_288;
              v167 = v80 - (_QWORD)v165;
              v168 = (uint64_t)(v80 - (_QWORD)v165) >> 2;
              if (v168 <= v166 + 1)
                v168 = v166 + 1;
              if (v167 >= 0x7FFFFFFFFFFFFFF8)
                v169 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v169 = v168;
              if (v169)
              {
                v170 = (char *)sub_40FC((uint64_t)(v77 + 456), v169);
                v79 = (uint64_t *)v77[455];
                v165 = (uint64_t *)v77[454];
              }
              else
              {
                v170 = 0;
              }
              v203 = (uint64_t *)&v170[8 * v166];
              *v203 = v78;
              v81 = v203 + 1;
              while (v79 != v165)
              {
                v204 = *--v79;
                *--v203 = v204;
              }
              v77[454] = v203;
              v77[455] = v81;
              v77[456] = &v170[8 * v169];
              if (v165)
                operator delete(v165);
            }
            else
            {
              *v79 = v78;
              v81 = v79 + 1;
            }
            v77[455] = v81;
            break;
          case 'x':
            v82 = *(_QWORD **)a1[2];
            v83 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            v84 = (uint64_t *)v82[458];
            v85 = v82[459];
            if ((unint64_t)v84 >= v85)
            {
              v171 = (uint64_t *)v82[457];
              v172 = v84 - v171;
              if ((unint64_t)(v172 + 1) >> 61)
LABEL_288:
                sub_4074();
              v173 = v85 - (_QWORD)v171;
              v174 = (uint64_t)(v85 - (_QWORD)v171) >> 2;
              if (v174 <= v172 + 1)
                v174 = v172 + 1;
              if (v173 >= 0x7FFFFFFFFFFFFFF8)
                v175 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v175 = v174;
              if (v175)
              {
                v176 = (char *)sub_40FC((uint64_t)(v82 + 459), v175);
                v84 = (uint64_t *)v82[458];
                v171 = (uint64_t *)v82[457];
              }
              else
              {
                v176 = 0;
              }
              v205 = (uint64_t *)&v176[8 * v172];
              *v205 = v83;
              v86 = v205 + 1;
              while (v84 != v171)
              {
                v206 = *--v84;
                *--v205 = v206;
              }
              v82[457] = v205;
              v82[458] = v86;
              v82[459] = &v176[8 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *v84 = v83;
              v86 = v84 + 1;
            }
            v82[458] = v86;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A4C80(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int *v62;
  int **v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;

  v4 = *a1;
  if (*a2 == 1)
  {
    v63 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v62 = *v63;
    v64 = (char *)v63[1] - (char *)*v63;
    if (v64)
    {
      v65 = v64 >> 2;
      if (v65 <= 1)
        v65 = 1;
      do
      {
        v66 = *v62++;
        switch(v66)
        {
          case 'y':
            v67 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3688);
            goto LABEL_86;
          case 'z':
            v67 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3712);
            goto LABEL_86;
          case '{':
            v67 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3736);
            goto LABEL_86;
          case '|':
            v67 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFF;
            v68 = (_QWORD *)(*(_QWORD *)a1[2] + 3760);
LABEL_86:
            *(_QWORD *)(*v68 - 8) += v67;
            break;
          default:
            break;
        }
        --v65;
      }
      while (v65);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'y':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            v12 = (uint64_t *)v10[461];
            v13 = v10[462];
            if ((unint64_t)v12 >= v13)
            {
              v30 = (uint64_t *)v10[460];
              v31 = v12 - v30;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_90;
              v32 = v13 - (_QWORD)v30;
              v33 = (uint64_t)(v13 - (_QWORD)v30) >> 2;
              if (v33 <= v31 + 1)
                v33 = v31 + 1;
              if (v32 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v33;
              if (v34)
              {
                v35 = (char *)sub_40FC((uint64_t)(v10 + 462), v34);
                v12 = (uint64_t *)v10[461];
                v30 = (uint64_t *)v10[460];
              }
              else
              {
                v35 = 0;
              }
              v54 = (uint64_t *)&v35[8 * v31];
              *v54 = v11;
              v14 = v54 + 1;
              while (v12 != v30)
              {
                v55 = *--v12;
                *--v54 = v55;
              }
              v10[460] = v54;
              v10[461] = v14;
              v10[462] = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[461] = v14;
            break;
          case 'z':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFFLL;
            v17 = (uint64_t *)v15[464];
            v18 = v15[465];
            if ((unint64_t)v17 >= v18)
            {
              v36 = (uint64_t *)v15[463];
              v37 = v17 - v36;
              if ((unint64_t)(v37 + 1) >> 61)
                goto LABEL_90;
              v38 = v18 - (_QWORD)v36;
              v39 = (uint64_t)(v18 - (_QWORD)v36) >> 2;
              if (v39 <= v37 + 1)
                v39 = v37 + 1;
              if (v38 >= 0x7FFFFFFFFFFFFFF8)
                v40 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v40 = v39;
              if (v40)
              {
                v41 = (char *)sub_40FC((uint64_t)(v15 + 465), v40);
                v17 = (uint64_t *)v15[464];
                v36 = (uint64_t *)v15[463];
              }
              else
              {
                v41 = 0;
              }
              v56 = (uint64_t *)&v41[8 * v37];
              *v56 = v16;
              v19 = v56 + 1;
              while (v17 != v36)
              {
                v57 = *--v17;
                *--v56 = v57;
              }
              v15[463] = v56;
              v15[464] = v19;
              v15[465] = &v41[8 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[464] = v19;
            break;
          case '{':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
            v22 = (uint64_t *)v20[467];
            v23 = v20[468];
            if ((unint64_t)v22 >= v23)
            {
              v42 = (uint64_t *)v20[466];
              v43 = v22 - v42;
              if ((unint64_t)(v43 + 1) >> 61)
                goto LABEL_90;
              v44 = v23 - (_QWORD)v42;
              v45 = (uint64_t)(v23 - (_QWORD)v42) >> 2;
              if (v45 <= v43 + 1)
                v45 = v43 + 1;
              if (v44 >= 0x7FFFFFFFFFFFFFF8)
                v46 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v46 = v45;
              if (v46)
              {
                v47 = (char *)sub_40FC((uint64_t)(v20 + 468), v46);
                v22 = (uint64_t *)v20[467];
                v42 = (uint64_t *)v20[466];
              }
              else
              {
                v47 = 0;
              }
              v58 = (uint64_t *)&v47[8 * v43];
              *v58 = v21;
              v24 = v58 + 1;
              while (v22 != v42)
              {
                v59 = *--v22;
                *--v58 = v59;
              }
              v20[466] = v58;
              v20[467] = v24;
              v20[468] = &v47[8 * v46];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[467] = v24;
            break;
          case '|':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFFLL;
            v27 = (uint64_t *)v25[470];
            v28 = v25[471];
            if ((unint64_t)v27 >= v28)
            {
              v48 = (uint64_t *)v25[469];
              v49 = v27 - v48;
              if ((unint64_t)(v49 + 1) >> 61)
LABEL_90:
                sub_4074();
              v50 = v28 - (_QWORD)v48;
              v51 = (uint64_t)(v28 - (_QWORD)v48) >> 2;
              if (v51 <= v49 + 1)
                v51 = v49 + 1;
              if (v50 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              if (v52)
              {
                v53 = (char *)sub_40FC((uint64_t)(v25 + 471), v52);
                v27 = (uint64_t *)v25[470];
                v48 = (uint64_t *)v25[469];
              }
              else
              {
                v53 = 0;
              }
              v60 = (uint64_t *)&v53[8 * v49];
              *v60 = v26;
              v29 = v60 + 1;
              while (v27 != v48)
              {
                v61 = *--v27;
                *--v60 = v61;
              }
              v25[469] = v60;
              v25[470] = v29;
              v25[471] = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[470] = v29;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A5128(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  int *v140;
  int **v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  _QWORD *v146;

  v4 = *a1;
  if (*a2 == 1)
  {
    v141 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v140 = *v141;
    v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      v143 = v142 >> 2;
      if (v143 <= 1)
        v143 = 1;
      do
      {
        v144 = *v140++;
        switch(v144)
        {
          case 155:
            v145 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4504);
            goto LABEL_194;
          case 156:
            v145 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4528);
            goto LABEL_194;
          case 157:
            v145 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4552);
            goto LABEL_194;
          case 158:
            v145 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4576);
            goto LABEL_194;
          case 159:
            v145 = *(_DWORD *)(a1[3] + 36) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4600);
            goto LABEL_194;
          case 160:
            v145 = *(_DWORD *)(a1[3] + 44) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4624);
            goto LABEL_194;
          case 161:
            v145 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4648);
            goto LABEL_194;
          case 162:
            v145 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4672);
            goto LABEL_194;
          case 163:
            v145 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4696);
            goto LABEL_194;
          case 164:
            v145 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 4720);
LABEL_194:
            *(_QWORD *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x9B:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 34) & 0x1FFF;
            v12 = (char *)v10[563];
            v13 = v10[564];
            if ((unint64_t)v12 >= v13)
            {
              v60 = (char *)v10[562];
              v61 = (v12 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_198;
              v62 = v13 - (_QWORD)v60;
              v63 = (uint64_t)(v13 - (_QWORD)v60) >> 2;
              if (v63 <= v61 + 1)
                v63 = v61 + 1;
              if (v62 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
              {
                v65 = (char *)sub_40FC((uint64_t)(v10 + 564), v64);
                v12 = (char *)v10[563];
                v60 = (char *)v10[562];
              }
              else
              {
                v65 = 0;
              }
              v120 = &v65[8 * v61];
              *(_QWORD *)v120 = v11;
              v14 = v120 + 8;
              while (v12 != v60)
              {
                v121 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v120 - 1) = v121;
                v120 -= 8;
              }
              v10[562] = v120;
              v10[563] = v14;
              v10[564] = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[563] = v14;
            break;
          case 0x9C:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v17 = (uint64_t *)v15[566];
            v18 = v15[567];
            if ((unint64_t)v17 >= v18)
            {
              v66 = (uint64_t *)v15[565];
              v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_198;
              v68 = v18 - (_QWORD)v66;
              v69 = (uint64_t)(v18 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v15 + 567), v70);
                v17 = (uint64_t *)v15[566];
                v66 = (uint64_t *)v15[565];
              }
              else
              {
                v71 = 0;
              }
              v122 = (uint64_t *)&v71[8 * v67];
              *v122 = v16;
              v19 = v122 + 1;
              while (v17 != v66)
              {
                v123 = *--v17;
                *--v122 = v123;
              }
              v15[565] = v122;
              v15[566] = v19;
              v15[567] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[566] = v19;
            break;
          case 0x9D:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 32) & 0x1FFF;
            v22 = (char *)v20[569];
            v23 = v20[570];
            if ((unint64_t)v22 >= v23)
            {
              v72 = (char *)v20[568];
              v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_198;
              v74 = v23 - (_QWORD)v72;
              v75 = (uint64_t)(v23 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v20 + 570), v76);
                v22 = (char *)v20[569];
                v72 = (char *)v20[568];
              }
              else
              {
                v77 = 0;
              }
              v124 = &v77[8 * v73];
              *(_QWORD *)v124 = v21;
              v24 = v124 + 8;
              while (v22 != v72)
              {
                v125 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[568] = v124;
              v20[569] = v24;
              v20[570] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[569] = v24;
            break;
          case 0x9E:
            v25 = *(_QWORD **)a1[2];
            v26 = ((unint64_t)*(unsigned int *)(a1[3] + 36) >> 13) & 0x3FFFF;
            v27 = (unint64_t *)v25[572];
            v28 = v25[573];
            if ((unint64_t)v27 >= v28)
            {
              v78 = (unint64_t *)v25[571];
              v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_198;
              v80 = v28 - (_QWORD)v78;
              v81 = (uint64_t)(v28 - (_QWORD)v78) >> 2;
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              if (v80 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
              {
                v83 = (char *)sub_40FC((uint64_t)(v25 + 573), v82);
                v27 = (unint64_t *)v25[572];
                v78 = (unint64_t *)v25[571];
              }
              else
              {
                v83 = 0;
              }
              v126 = (unint64_t *)&v83[8 * v79];
              *v126 = v26;
              v29 = v126 + 1;
              while (v27 != v78)
              {
                v127 = *--v27;
                *--v126 = v127;
              }
              v25[571] = v126;
              v25[572] = v29;
              v25[573] = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[572] = v29;
            break;
          case 0x9F:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 36) & 0x1FFFLL;
            v32 = (uint64_t *)v30[575];
            v33 = v30[576];
            if ((unint64_t)v32 >= v33)
            {
              v84 = (uint64_t *)v30[574];
              v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61)
                goto LABEL_198;
              v86 = v33 - (_QWORD)v84;
              v87 = (uint64_t)(v33 - (_QWORD)v84) >> 2;
              if (v87 <= v85 + 1)
                v87 = v85 + 1;
              if (v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
              {
                v89 = (char *)sub_40FC((uint64_t)(v30 + 576), v88);
                v32 = (uint64_t *)v30[575];
                v84 = (uint64_t *)v30[574];
              }
              else
              {
                v89 = 0;
              }
              v128 = (uint64_t *)&v89[8 * v85];
              *v128 = v31;
              v34 = v128 + 1;
              while (v32 != v84)
              {
                v129 = *--v32;
                *--v128 = v129;
              }
              v30[574] = v128;
              v30[575] = v34;
              v30[576] = &v89[8 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[575] = v34;
            break;
          case 0xA0:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            v37 = (uint64_t *)v35[578];
            v38 = v35[579];
            if ((unint64_t)v37 >= v38)
            {
              v90 = (uint64_t *)v35[577];
              v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_198;
              v92 = v38 - (_QWORD)v90;
              v93 = (uint64_t)(v38 - (_QWORD)v90) >> 2;
              if (v93 <= v91 + 1)
                v93 = v91 + 1;
              if (v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
              {
                v95 = (char *)sub_40FC((uint64_t)(v35 + 579), v94);
                v37 = (uint64_t *)v35[578];
                v90 = (uint64_t *)v35[577];
              }
              else
              {
                v95 = 0;
              }
              v130 = (uint64_t *)&v95[8 * v91];
              *v130 = v36;
              v39 = v130 + 1;
              while (v37 != v90)
              {
                v131 = *--v37;
                *--v130 = v131;
              }
              v35[577] = v130;
              v35[578] = v39;
              v35[579] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[578] = v39;
            break;
          case 0xA1:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 28) & 0x3FFF;
            v42 = (char *)v40[581];
            v43 = v40[582];
            if ((unint64_t)v42 >= v43)
            {
              v96 = (char *)v40[580];
              v97 = (v42 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_198;
              v98 = v43 - (_QWORD)v96;
              v99 = (uint64_t)(v43 - (_QWORD)v96) >> 2;
              if (v99 <= v97 + 1)
                v99 = v97 + 1;
              if (v98 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
              {
                v101 = (char *)sub_40FC((uint64_t)(v40 + 582), v100);
                v42 = (char *)v40[581];
                v96 = (char *)v40[580];
              }
              else
              {
                v101 = 0;
              }
              v132 = &v101[8 * v97];
              *(_QWORD *)v132 = v41;
              v44 = v132 + 8;
              while (v42 != v96)
              {
                v133 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v132 - 1) = v133;
                v132 -= 8;
              }
              v40[580] = v132;
              v40[581] = v44;
              v40[582] = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[581] = v44;
            break;
          case 0xA2:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            v47 = (char *)v45[584];
            v48 = v45[585];
            if ((unint64_t)v47 >= v48)
            {
              v102 = (char *)v45[583];
              v103 = (v47 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61)
                goto LABEL_198;
              v104 = v48 - (_QWORD)v102;
              v105 = (uint64_t)(v48 - (_QWORD)v102) >> 2;
              if (v105 <= v103 + 1)
                v105 = v103 + 1;
              if (v104 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v105;
              if (v106)
              {
                v107 = (char *)sub_40FC((uint64_t)(v45 + 585), v106);
                v47 = (char *)v45[584];
                v102 = (char *)v45[583];
              }
              else
              {
                v107 = 0;
              }
              v134 = &v107[8 * v103];
              *(_QWORD *)v134 = v46;
              v49 = v134 + 8;
              while (v47 != v102)
              {
                v135 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              v45[583] = v134;
              v45[584] = v49;
              v45[585] = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[584] = v49;
            break;
          case 0xA3:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 30) & 0x3FFF;
            v52 = (char *)v50[587];
            v53 = v50[588];
            if ((unint64_t)v52 >= v53)
            {
              v108 = (char *)v50[586];
              v109 = (v52 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_198;
              v110 = v53 - (_QWORD)v108;
              v111 = (uint64_t)(v53 - (_QWORD)v108) >> 2;
              if (v111 <= v109 + 1)
                v111 = v109 + 1;
              if (v110 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v111;
              if (v112)
              {
                v113 = (char *)sub_40FC((uint64_t)(v50 + 588), v112);
                v52 = (char *)v50[587];
                v108 = (char *)v50[586];
              }
              else
              {
                v113 = 0;
              }
              v136 = &v113[8 * v109];
              *(_QWORD *)v136 = v51;
              v54 = v136 + 8;
              while (v52 != v108)
              {
                v137 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v136 - 1) = v137;
                v136 -= 8;
              }
              v50[586] = v136;
              v50[587] = v54;
              v50[588] = &v113[8 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[587] = v54;
            break;
          case 0xA4:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            v57 = (char *)v55[590];
            v58 = v55[591];
            if ((unint64_t)v57 >= v58)
            {
              v114 = (char *)v55[589];
              v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61)
LABEL_198:
                sub_4074();
              v116 = v58 - (_QWORD)v114;
              v117 = (uint64_t)(v58 - (_QWORD)v114) >> 2;
              if (v117 <= v115 + 1)
                v117 = v115 + 1;
              if (v116 >= 0x7FFFFFFFFFFFFFF8)
                v118 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_40FC((uint64_t)(v55 + 591), v118);
                v57 = (char *)v55[590];
                v114 = (char *)v55[589];
              }
              else
              {
                v119 = 0;
              }
              v138 = &v119[8 * v115];
              *(_QWORD *)v138 = v56;
              v59 = v138 + 8;
              while (v57 != v114)
              {
                v139 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v138 - 1) = v139;
                v138 -= 8;
              }
              v55[589] = v138;
              v55[590] = v59;
              v55[591] = &v119[8 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[590] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_1A5B70()
{
  operator delete();
}

uint64_t sub_1A5B84(int a1, char *__s1)
{
  uint64_t result;

  if (!__s1)
    return 218;
  result = strcmp(__s1, "D7642F4CD8A1F1052D8874FFCB84623EEB5AD8DB476AAA36BB13F44E0122717D");
  if ((_DWORD)result)
  {
    if (!strcmp(__s1, "ECCE75AB7F80F9519A3E08E3A0EE71610AE67E3B82829786B02D98C09276F560"))
    {
      return 1;
    }
    else if (!strcmp(__s1, "0D43CB377576A411251DB7D5579117D02FC1BB178830D97B5332A806AC122B37"))
    {
      return 2;
    }
    else if (!strcmp(__s1, "9E7E7B3180DA596EBA2925972639C8DC058E97904ADA86E8FA31E691D63CA97B"))
    {
      return 3;
    }
    else if (!strcmp(__s1, "FE4E8A2782700A8DEC84E195627096B91A904FF6F486B78EF381501FB9667E0F"))
    {
      return 4;
    }
    else if (!strcmp(__s1, "35E9B0A78729DBBE416E11951D26DDC657D957CE37E23B41A2915BB6CC8CF792"))
    {
      return 5;
    }
    else if (!strcmp(__s1, "992E7CAEB9808CFC06F5E69E0B80D0ABB3328FC59FA76FED7BB9529EBBC6E484"))
    {
      return 6;
    }
    else if (!strcmp(__s1, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2"))
    {
      return 7;
    }
    else if (!strcmp(__s1, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956"))
    {
      return 8;
    }
    else if (!strcmp(__s1, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B"))
    {
      return 9;
    }
    else if (!strcmp(__s1, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB"))
    {
      return 10;
    }
    else if (!strcmp(__s1, "C04589D08BD1AA2481137A423CC2E81C537B75011557AB0EA579F58E489D9981"))
    {
      return 11;
    }
    else if (!strcmp(__s1, "7C3CD59A80673DD0787DF037FB1FB45E0EB635BFDB2554E10CBF5D056FEDAB78"))
    {
      return 12;
    }
    else if (!strcmp(__s1, "E484E42F34BF2E406D25EB38451C67D3C3C9CB9DEB9222C4F5E21E7E6729C787"))
    {
      return 13;
    }
    else if (!strcmp(__s1, "A1CD5E72A4CAD33DD4C2190F293103B9FD8B40FFE76B1A99A195768465964F91"))
    {
      return 14;
    }
    else if (!strcmp(__s1, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53"))
    {
      return 15;
    }
    else if (!strcmp(__s1, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91"))
    {
      return 16;
    }
    else if (!strcmp(__s1, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B"))
    {
      return 17;
    }
    else if (!strcmp(__s1, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC"))
    {
      return 18;
    }
    else if (!strcmp(__s1, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8"))
    {
      return 19;
    }
    else if (!strcmp(__s1, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF"))
    {
      return 20;
    }
    else if (!strcmp(__s1, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0"))
    {
      return 21;
    }
    else if (!strcmp(__s1, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D"))
    {
      return 22;
    }
    else if (!strcmp(__s1, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457"))
    {
      return 23;
    }
    else if (!strcmp(__s1, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C"))
    {
      return 24;
    }
    else if (!strcmp(__s1, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E"))
    {
      return 25;
    }
    else if (!strcmp(__s1, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033"))
    {
      return 26;
    }
    else if (!strcmp(__s1, "3AFE7FC24E518305DB9BB516AE4AA6725E13A423016B31BAFEBFD6FA09AFAFCD"))
    {
      return 27;
    }
    else if (!strcmp(__s1, "37C7DEA7C7AC62E48672D62B73746ED032AC86A05AA223DB4F373D44F106CD6A"))
    {
      return 28;
    }
    else if (!strcmp(__s1, "42EA38C66C2CC54A764D5E204FF38F3402542A5F05B7731D549F22D745429051"))
    {
      return 29;
    }
    else if (!strcmp(__s1, "F6D454657EA6A999B3D168C1A68D6592B2F348BA088B279DBF0A992754767224"))
    {
      return 30;
    }
    else if (!strcmp(__s1, "63CA0F7A21417297C42CDF8868259FBCECF5C6A5C1C994C3A1CA5F608179B458"))
    {
      return 31;
    }
    else if (!strcmp(__s1, "75D1CF68BBA66F3E658B115EF614F1449D832863CAF5F46D092488791378897F"))
    {
      return 32;
    }
    else if (!strcmp(__s1, "F4B1ED932C463D5EE2A9E1F0BEC7DDE12141635B8C1BC09662243EA36A1E2ECE"))
    {
      return 33;
    }
    else if (!strcmp(__s1, "511B8B14F417FD34A16CC128C14014AD2B4C5A60B3B053D963C78631DD6B3B89"))
    {
      return 34;
    }
    else if (!strcmp(__s1, "932639B5CA9FD3BE98F2787A2CDE095AAE9CE2D64A911486D12757EFBFD85140"))
    {
      return 35;
    }
    else if (!strcmp(__s1, "09ADF2F2D849AAB1B547CE687B45B30560D5965A6EE176E97CBC14EB63728DE2"))
    {
      return 36;
    }
    else if (!strcmp(__s1, "C2DF6BB1B96D7879744E5D54DEB55C12D7A9ECFF52AF539FC1FA63882B058A70"))
    {
      return 37;
    }
    else if (!strcmp(__s1, "8C96A68570A6DF5B4ABA9577C27042A37A60B8FBD6BC9DE3F909EC683406A5CD"))
    {
      return 38;
    }
    else if (!strcmp(__s1, "7B36DACFCE6FC736238A397E5EF2F7E25BE954A649117EE12A916CE79F75B94A"))
    {
      return 39;
    }
    else if (!strcmp(__s1, "80C734FBB111112ADB288D1CA5E1A6D5381987D38F4DFA08EFE8CC3C5F1CF131"))
    {
      return 40;
    }
    else if (!strcmp(__s1, "3A6B5C3F24147C27899AEB7FF2FE3FB579A0D79BE4AB9BE54E7F31F7AED99F24"))
    {
      return 41;
    }
    else if (!strcmp(__s1, "23C55391915968963B369CFA8F5BE79A370ADD2CB37A32A0C9267269406EC6E8"))
    {
      return 42;
    }
    else if (!strcmp(__s1, "1394031F165B7EE472518C80605434939287CE630C3E2BF45774C422646BDB52"))
    {
      return 43;
    }
    else if (!strcmp(__s1, "B664BC44BBFB5AB784B0240FFB637DC636A9B7CEE13D6D556ED1D4ED56E9DEF8"))
    {
      return 44;
    }
    else if (!strcmp(__s1, "2AD526A49877323714C9104CAF0E3F117082A43D0955315AF0F43F7AADFF2586"))
    {
      return 45;
    }
    else if (!strcmp(__s1, "0559E51C335EC81412374E33F830E804DF39F2FF796E95308A25A8A8BFA0475A"))
    {
      return 46;
    }
    else if (!strcmp(__s1, "656B51D5FF08D489CFD54BA967A44D9FBB3DEE2BEF089EADFF59F0176430773E"))
    {
      return 47;
    }
    else if (!strcmp(__s1, "08E5DC7B9F52DFF7963D2715D3927A1356E247326CAF5C76830A7D7227B991B0"))
    {
      return 48;
    }
    else if (!strcmp(__s1, "97566BDFEF237739AC2EFF164112983D98FCFAC0EE4F30C671D4908D02520208"))
    {
      return 49;
    }
    else if (!strcmp(__s1, "5ABE83ED58C646C0795991EFC53EFAF95AD3FA933AFD23A5181FDC1D4DFDFBA0"))
    {
      return 50;
    }
    else if (!strcmp(__s1, "F7FED94B5F000049299482FDF5F0D7700B1A29309A0313344D1B861FDC715239"))
    {
      return 51;
    }
    else if (!strcmp(__s1, "CD2FFA0725298FE71DCD34C05D62ABC16C9F0A5690297DF5376D65198C5D7890"))
    {
      return 52;
    }
    else if (!strcmp(__s1, "DE73E30C620D682FA8317A0FEB5087A2C63811110674D46B9894D955808CBC9E"))
    {
      return 53;
    }
    else if (!strcmp(__s1, "B1981D6FA7779DA1E867116607CFA5B05E44C5C8D8A9E8AD1906FEF7F8BA1874"))
    {
      return 54;
    }
    else if (!strcmp(__s1, "B942A1DFEF5624B827CF986CC919BB4891C1C421645311F2355CE6766AEBEF2E"))
    {
      return 55;
    }
    else if (!strcmp(__s1, "B2D70BAA5FA87BB6C253C5314B6E833D882783F1E906897B196FCC4D6572D5C6"))
    {
      return 56;
    }
    else if (!strcmp(__s1, "AD07330BE6EF87E08C9E5D058B4CBD9F71C39D7C1B916A834F263B5E7B3DFC43"))
    {
      return 57;
    }
    else if (!strcmp(__s1, "9AD2DE6034B18A80CF5573485FEEE0B7EBF72DF6DD292271C9B412FBDF8037C5"))
    {
      return 58;
    }
    else if (!strcmp(__s1, "2BBC664C4BF8238D5FC7A5376438D13CE61B9EBC1FF8EC52F6F5A80543BEACD4"))
    {
      return 59;
    }
    else if (!strcmp(__s1, "B4E21A931309227166902DC5A3E8BACAE69D267A7E733A61139712AC108C6E4E"))
    {
      return 60;
    }
    else if (!strcmp(__s1, "B0FE94C089261C381766B5366AEB1C6ACBF46BC57B4298D568C5EDFCABE30A8A"))
    {
      return 61;
    }
    else if (!strcmp(__s1, "3EFF071A6AD7AF2F6FD8A87059C9CDD5937E87D8B9B4D215C449748133129BDE"))
    {
      return 62;
    }
    else if (!strcmp(__s1, "0B5AF8D437BA25AB6225EADB7A0FC92659AAB2122AC993E00CFA2F83B0E143B3"))
    {
      return 63;
    }
    else if (!strcmp(__s1, "EE48140733BA4D00D8E6CB099101E0BBB6FDB2F71FC05FC0FEAC8A6CF3100B14"))
    {
      return 64;
    }
    else if (!strcmp(__s1, "152B31D6CDC80AD2A7F1593F1E81074F9FEB957043B213E8537F5C9098DFD449"))
    {
      return 65;
    }
    else if (!strcmp(__s1, "0E8C0AF79B626C37D4BD04D61ACC6B1841B7F784FEF6692E84A2B1971C771CF6"))
    {
      return 66;
    }
    else if (!strcmp(__s1, "12038A812C239440324EDCEB54DA13B6B7D0C4D89F61582F9A4628C4409FAAE6"))
    {
      return 67;
    }
    else if (!strcmp(__s1, "12ADE1668F06776E2CE9CC2CC563E0BD45A5346C6D883D748FD3C132E7EB8A2F"))
    {
      return 68;
    }
    else if (!strcmp(__s1, "D5D2B254E0B808929711EBFC999F2E0F884DB9876C90B056E230E4DD6D3261CE"))
    {
      return 69;
    }
    else if (!strcmp(__s1, "CA5FDEAD1B2DEC16F5B525E9AE3CA7C4EDC163EEE950D7A77A7C5284A607369F"))
    {
      return 70;
    }
    else if (!strcmp(__s1, "28B92DE785184753FAF5508E080CB8FE784D6A5214E5E6382751D52534A72FCE"))
    {
      return 71;
    }
    else if (!strcmp(__s1, "316635C054256728753D20516A98550DBF581EBA16691321F7BBCE3A9177E09D"))
    {
      return 72;
    }
    else if (!strcmp(__s1, "D2D14661D9692EBD5065F06CB4C2AC7DD14339CAEA538D5AFA4A2B5813E87D5D"))
    {
      return 73;
    }
    else if (!strcmp(__s1, "96775CCE99E1AD0C194329938D933579304BAD868B3720C34D20D27536E7AEE7"))
    {
      return 74;
    }
    else if (!strcmp(__s1, "615761368EF9DB43D1A8DF2EF1CC087B17906454F025A1E1C5BB95B022582B9B"))
    {
      return 75;
    }
    else if (!strcmp(__s1, "2A5A81F290FDE6D31DB132DD493737A7252C441023286294F3C77CE48DD4E2F0"))
    {
      return 76;
    }
    else if (!strcmp(__s1, "7262FC4EB2434704063840AB716EF14B50F3A0E5E3457E8EBF9E014325CAE94F"))
    {
      return 77;
    }
    else if (!strcmp(__s1, "A2B9B85B3AADE88EBF43D3DB522C31E6A781700C0112047F72FA920A638A69BE"))
    {
      return 78;
    }
    else if (!strcmp(__s1, "D97205C2B224673AE923C3A7A003D96258A1A774E1C9E3CD513B0706C6657D48"))
    {
      return 79;
    }
    else if (!strcmp(__s1, "0C60DB8A2A73C9B343C4B279EDF24580976BD74BD0294B1AAC17B0A4273D8C28"))
    {
      return 80;
    }
    else if (!strcmp(__s1, "27A93DA3DF54447DCB9F371C54907BEFA8F17B7FA905EDAC2B523C7A0D93A918"))
    {
      return 81;
    }
    else if (!strcmp(__s1, "F98BB9D35C454CA00A884F6B9621A30F2C78A880A96D81B5E661391D74E8455A"))
    {
      return 82;
    }
    else if (!strcmp(__s1, "AC00030F77E6F4E41BF49DC8D7A42C68813DB0C3B652C340B340C01873EB0AB7"))
    {
      return 83;
    }
    else if (!strcmp(__s1, "BA7A33DF7A125E9EE5C1036DD6DADB3B74CC4B9BA9C5C1B235C131E70B7B4E41"))
    {
      return 84;
    }
    else if (!strcmp(__s1, "038FA673BF47F15B7C5236E4863A96C910C3993AB31529A041DE199F3EEB66CB"))
    {
      return 85;
    }
    else if (!strcmp(__s1, "E44B08E42854960D4B0277D46D6181F8B07FAC3C3CCF5A6B31AA9DC9FA4057D6"))
    {
      return 86;
    }
    else if (!strcmp(__s1, "B80C09BAE4062CCC534F6E6EF6EA6E0ABEFF12048A342EB3138E7B76890D8D3B"))
    {
      return 87;
    }
    else if (!strcmp(__s1, "00EB2F035A98609505AB8DAB9B98D1FECEAA766F368932F7FE6316AE8BAEFBE0"))
    {
      return 88;
    }
    else if (!strcmp(__s1, "6368DD78E9738AAB3001F4C17EBE26BFB0414CDCC1399D092A48AB5A57536454"))
    {
      return 89;
    }
    else if (!strcmp(__s1, "C0909793BE0330B378C0CD09F0D9B9F09F599EC8C6B94C37ABA9011E83596F90"))
    {
      return 90;
    }
    else if (!strcmp(__s1, "11221127E966E92C6C18F64D312E8C9AF73DB3A9DB792E4442FCECE644A8E7B1"))
    {
      return 91;
    }
    else if (!strcmp(__s1, "FED7B076A3D7DE52B6D9A21D14FB1A49BABF975B73BE74181C4EA26976162724"))
    {
      return 92;
    }
    else if (!strcmp(__s1, "26456E27CBF6165D84C883AC666AF50E5EAAA39D07887C37BD3A9BD26A74B2FE"))
    {
      return 93;
    }
    else if (!strcmp(__s1, "F365A0CC0EEB38797FCD82D5E4AC3B2ACF44EB34D333D4AB1AD8D8891B7F8892"))
    {
      return 94;
    }
    else if (!strcmp(__s1, "A5F302F870E09D718474CBCADD4E0B3589351A5007777F1B805169B54226B875"))
    {
      return 95;
    }
    else if (!strcmp(__s1, "903B8B51F5368A75F9777D9155C6A2664116770701ED241A6D1662131A802333"))
    {
      return 96;
    }
    else if (!strcmp(__s1, "DD96D75C3E233EE9B4528803691C00E98D5F49F2B4B3B83676332ABFBB65DE07"))
    {
      return 97;
    }
    else if (!strcmp(__s1, "F2F4280636DC1065AEFE537517EE6B816C8133EF2E5C106D92DDD2B0E0DFC69D"))
    {
      return 98;
    }
    else if (!strcmp(__s1, "EA4B7DF630D01A5FC30F51DEEC420CB0F667CC57639F1C1D8E67D97B12524E0C"))
    {
      return 99;
    }
    else if (!strcmp(__s1, "89DBD24AAAD1D4D50F3F74A7040B52C5B06B4768F1E09DC89D4067D243744882"))
    {
      return 100;
    }
    else if (!strcmp(__s1, "F942A7256C77ACD182AE0B767F21133B11937660A61610A18CD14087D1F2F71C"))
    {
      return 101;
    }
    else if (!strcmp(__s1, "A739EE6D2886FEBC60795D1D8803BF19A1A3463541AB6024A90DBB8E4650F589"))
    {
      return 102;
    }
    else if (!strcmp(__s1, "7B872939683DD4D93E917C20089932C93AACDE7E7C0738CB78026B6FC178B1D9"))
    {
      return 103;
    }
    else if (!strcmp(__s1, "9EB2D21E75D0AA677C8D110763485DB3A78262C89D05CA0C3AF7EBD2D6AB99DD"))
    {
      return 104;
    }
    else if (!strcmp(__s1, "AC7E4629ABFA704A6369754CB199383D2901F0916E230FB75D765420550E8244"))
    {
      return 105;
    }
    else if (!strcmp(__s1, "FF9225FC7116F7583194D2D2F948E6CFD131F9020C7B7C9D61A8DE2F46571C5F"))
    {
      return 106;
    }
    else if (!strcmp(__s1, "3216E3D0006FC749B832DD3C33FF4B7CAE3CE455B3FE030A3EB061DC0356D829"))
    {
      return 107;
    }
    else if (!strcmp(__s1, "41E40C57A9236569333335DEA9CB52F0058A4BF366335B45406F04F7E0A93CD5"))
    {
      return 108;
    }
    else if (!strcmp(__s1, "2F5E861CD13CBCECC15CB691FCC7DCE54FC0755F96F1289D26AFB056BD6788D5"))
    {
      return 109;
    }
    else if (!strcmp(__s1, "0C7AC4ECF65C2CA6215B602A5C050FB69BFF2BA322B47A6890E2F0EE8CA922C0"))
    {
      return 110;
    }
    else if (!strcmp(__s1, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E"))
    {
      return 111;
    }
    else if (!strcmp(__s1, "C1F228965CE72DCBDF0563CA9125430BFC5215644CF7426375AAE844D9C393CF"))
    {
      return 112;
    }
    else if (!strcmp(__s1, "860E5D173A5DA8DE4C5A88EDDF57BFB0D9E7D010DFD109852AF3D1C8480DE485"))
    {
      return 113;
    }
    else if (!strcmp(__s1, "2FAB2C822F900089CD78CBC4AB947F23F8CD8C71D0257BB20870F2437F345683"))
    {
      return 114;
    }
    else if (!strcmp(__s1, "A2AEBDCCCD11BCF937DC0DE23C78762A9FD1425DA34EE911F615F041D947D3CE"))
    {
      return 115;
    }
    else if (!strcmp(__s1, "C517BA395C2A64392D1C11AE86475E6F476E22867252458FCC5152B58A43603D"))
    {
      return 116;
    }
    else if (!strcmp(__s1, "E5FA747F28EBFE3E4BBD4BE279044F914B09502E3EB62035341300536242F90B"))
    {
      return 117;
    }
    else if (!strcmp(__s1, "7973408EAAC4FAF261DDB68AD698E34EFC1018CD38876DB49DA34E1C044F2CFC"))
    {
      return 118;
    }
    else if (!strcmp(__s1, "7EFBE7B468F2C8FF4C34E67EDC7E8F80DB3E295C6221F8408D4440A78430C64F"))
    {
      return 119;
    }
    else if (!strcmp(__s1, "D67C31C99E39309E5E09E11F7A5E7B3576972C57135463976A5539814860D051"))
    {
      return 120;
    }
    else if (!strcmp(__s1, "3473F3E1E2A85DAEEB664F0C421CDF84D3B27258796FFBB2881208B73DEFC007"))
    {
      return 121;
    }
    else if (!strcmp(__s1, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252"))
    {
      return 122;
    }
    else if (!strcmp(__s1, "1B57426DF9B957C95C4296A880A1D75B70200B72E8554E7D713D37098154E907"))
    {
      return 123;
    }
    else if (!strcmp(__s1, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B"))
    {
      return 124;
    }
    else if (!strcmp(__s1, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC"))
    {
      return 125;
    }
    else if (!strcmp(__s1, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563"))
    {
      return 126;
    }
    else if (!strcmp(__s1, "89FBB3BDB9379AD11D47A5F312EDF73706C589F07B8C14BE99A3D604DA840455"))
    {
      return 127;
    }
    else if (!strcmp(__s1, "BEE28431C5E817DF3C9C265B3672660D03A6C89EE5236507323554958AE59578"))
    {
      return 128;
    }
    else if (!strcmp(__s1, "1F6D45D5DEB05AFFD7C7C1DAC38D882FA9A9D616990FBB135621C1F0D30CA596"))
    {
      return 129;
    }
    else if (!strcmp(__s1, "24B2EDEBE37A35C073BBC2B83505D52B7FDB9C121406C6308CF528457883D4BE"))
    {
      return 130;
    }
    else if (!strcmp(__s1, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2"))
    {
      return 131;
    }
    else if (!strcmp(__s1, "CFEE285EA42317F1E8CE16B6BAED451F1D8029F8C057963B2486EA9093B3CD28"))
    {
      return 132;
    }
    else if (!strcmp(__s1, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378"))
    {
      return 133;
    }
    else if (!strcmp(__s1, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181"))
    {
      return 134;
    }
    else if (!strcmp(__s1, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5"))
    {
      return 135;
    }
    else if (!strcmp(__s1, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7"))
    {
      return 136;
    }
    else if (!strcmp(__s1, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A"))
    {
      return 137;
    }
    else if (!strcmp(__s1, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC"))
    {
      return 138;
    }
    else if (!strcmp(__s1, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6"))
    {
      return 139;
    }
    else if (!strcmp(__s1, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02"))
    {
      return 140;
    }
    else if (!strcmp(__s1, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379"))
    {
      return 141;
    }
    else if (!strcmp(__s1, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317"))
    {
      return 142;
    }
    else if (!strcmp(__s1, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853"))
    {
      return 143;
    }
    else if (!strcmp(__s1, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2"))
    {
      return 144;
    }
    else if (!strcmp(__s1, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62"))
    {
      return 145;
    }
    else if (!strcmp(__s1, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F"))
    {
      return 146;
    }
    else if (!strcmp(__s1, "3E6CC5C197ACBED66DB18F36FE33CAF7D744175ADB2FE6C6FAE97B0CBB5B21CD"))
    {
      return 147;
    }
    else if (!strcmp(__s1, "250DFDD8D5BC61F9B0D9CD91F4DDCE0E4799ED7B1264EEF03FAD66612BCA288D"))
    {
      return 148;
    }
    else if (!strcmp(__s1, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80"))
    {
      return 149;
    }
    else if (!strcmp(__s1, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26"))
    {
      return 150;
    }
    else if (!strcmp(__s1, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8"))
    {
      return 151;
    }
    else if (!strcmp(__s1, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48"))
    {
      return 152;
    }
    else if (!strcmp(__s1, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C"))
    {
      return 153;
    }
    else if (!strcmp(__s1, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E"))
    {
      return 154;
    }
    else if (!strcmp(__s1, "EA870EDD0C8AD026DB44FB5C6AC53D8875D62255F794C489EAB9F8222F0616CB"))
    {
      return 155;
    }
    else if (!strcmp(__s1, "B0D00D3E15F0D45E0DAD2FE819496F3837110BDADE01AC3A17862CDDACDEE5AB"))
    {
      return 156;
    }
    else if (!strcmp(__s1, "7B4CF9B631F81D78F2CEA2F4869D0137BE4CA667AE9B13DB22A617C2BA15C075"))
    {
      return 157;
    }
    else if (!strcmp(__s1, "CA1DD5B830AB9668FC5EBD5904EB9B0113C766FCE57EF59AEC58982AE744413A"))
    {
      return 158;
    }
    else if (!strcmp(__s1, "2D29DA77B4EF8E7B1D2F3F764587274747D1C2AB05C053B4CE38AE701116BF6A"))
    {
      return 159;
    }
    else if (!strcmp(__s1, "83156D57355E76E46E7319E18EA9D6A8D20E78958733028FD3F74C3FD9B0BCC5"))
    {
      return 160;
    }
    else if (!strcmp(__s1, "95DD082534B76465BAA6B38551429C11CD11A77CB351740B05F3D18D2CD2B990"))
    {
      return 161;
    }
    else if (!strcmp(__s1, "996E91405229B0F31165936664CCE9F7D3145963C1A14FA9DD57A320E349F123"))
    {
      return 162;
    }
    else if (!strcmp(__s1, "294111BEC0EE4CFDDCE430D197B75A1CB09E21EB1C822E16CD1CBCC982D46A3F"))
    {
      return 163;
    }
    else if (!strcmp(__s1, "727820125C45F365E03E3C14E8202CFF1E0049F24543B5D589F3956E11F5C581"))
    {
      return 164;
    }
    else if (!strcmp(__s1, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB"))
    {
      return 165;
    }
    else if (!strcmp(__s1, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42"))
    {
      return 166;
    }
    else if (!strcmp(__s1, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8"))
    {
      return 167;
    }
    else if (!strcmp(__s1, "25C93B5B4A76FFE8A20CA68271CF612F43D0B5504B6680945F3BB046DA47213A"))
    {
      return 168;
    }
    else if (!strcmp(__s1, "B6B78FABA9FD12B688986DC5EA4D4B8B731265EDEC1E5AE52B0CAA6FC31801F2"))
    {
      return 169;
    }
    else if (!strcmp(__s1, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2"))
    {
      return 170;
    }
    else if (!strcmp(__s1, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70"))
    {
      return 171;
    }
    else if (!strcmp(__s1, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89"))
    {
      return 172;
    }
    else if (!strcmp(__s1, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4"))
    {
      return 173;
    }
    else if (!strcmp(__s1, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006"))
    {
      return 174;
    }
    else if (!strcmp(__s1, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D"))
    {
      return 175;
    }
    else if (!strcmp(__s1, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85"))
    {
      return 176;
    }
    else if (!strcmp(__s1, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD"))
    {
      return 177;
    }
    else if (!strcmp(__s1, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3"))
    {
      return 178;
    }
    else if (!strcmp(__s1, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A"))
    {
      return 179;
    }
    else if (!strcmp(__s1, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472"))
    {
      return 180;
    }
    else if (!strcmp(__s1, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035"))
    {
      return 181;
    }
    else if (!strcmp(__s1, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D"))
    {
      return 182;
    }
    else if (!strcmp(__s1, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A"))
    {
      return 183;
    }
    else if (!strcmp(__s1, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46"))
    {
      return 184;
    }
    else if (!strcmp(__s1, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE"))
    {
      return 185;
    }
    else if (!strcmp(__s1, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38"))
    {
      return 186;
    }
    else if (!strcmp(__s1, "2660D91E9E44E8375C647F1F4FDD89923B3BFA26A3AF29D5937BAF8EF1E10CFE"))
    {
      return 187;
    }
    else if (!strcmp(__s1, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182"))
    {
      return 188;
    }
    else if (!strcmp(__s1, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791"))
    {
      return 189;
    }
    else if (!strcmp(__s1, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174"))
    {
      return 190;
    }
    else if (!strcmp(__s1, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69"))
    {
      return 191;
    }
    else if (!strcmp(__s1, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7"))
    {
      return 192;
    }
    else if (!strcmp(__s1, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D"))
    {
      return 193;
    }
    else if (!strcmp(__s1, "5DCA18DF36F9FA665E30157E71359C15F04492B59DA944CC2B10D7A925843DA7"))
    {
      return 194;
    }
    else if (!strcmp(__s1, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A"))
    {
      return 195;
    }
    else if (!strcmp(__s1, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D"))
    {
      return 196;
    }
    else if (!strcmp(__s1, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08"))
    {
      return 197;
    }
    else if (!strcmp(__s1, "81E23B94D526C5353E9E499DE4D53C13BAC39B09D64961C3259B99425E493446"))
    {
      return 198;
    }
    else if (!strcmp(__s1, "D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50"))
    {
      return 199;
    }
    else if (!strcmp(__s1, "EEC15933C85F49CDCD9A4DC75821303FD2E5E1A8E2651667DB103FF51457DF71"))
    {
      return 200;
    }
    else if (!strcmp(__s1, "19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682"))
    {
      return 201;
    }
    else if (!strcmp(__s1, "54D70702DEC6F85C65B8D1E26F089610058B0CDC6B23440F6FD07F26E6E23315"))
    {
      return 202;
    }
    else if (!strcmp(__s1, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5"))
    {
      return 203;
    }
    else if (!strcmp(__s1, "2C9ACA342CA7C8F4A29CA1C798155F709AC8B8D95F0D20C549DBC00F1C42184D"))
    {
      return 204;
    }
    else if (!strcmp(__s1, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1"))
    {
      return 205;
    }
    else if (!strcmp(__s1, "0AAC94B02176D8B144479EAFEE546A608C8B5E61D7A27481868626A7820E0CB1"))
    {
      return 206;
    }
    else if (!strcmp(__s1, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10"))
    {
      return 207;
    }
    else if (!strcmp(__s1, "1ADDCB1D74CE36E8E4C6007CDB14DD6A053A9C2FBDB707345B3C5E7BB07299AA"))
    {
      return 208;
    }
    else if (!strcmp(__s1, "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F"))
    {
      return 209;
    }
    else if (!strcmp(__s1, "E2D94E3051875514422124C186B05CDA6F417AF1FC67511A17055B65BED227AA"))
    {
      return 210;
    }
    else if (!strcmp(__s1, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745"))
    {
      return 211;
    }
    else if (!strcmp(__s1, "A6DE7D11FD45FD0B0F5541862F786FAAA17E530F3CBAC5CE63EFD6C7B7B8EC27"))
    {
      return 212;
    }
    else if (!strcmp(__s1, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC"))
    {
      return 213;
    }
    else if (!strcmp(__s1, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3"))
    {
      return 214;
    }
    else if (!strcmp(__s1, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85"))
    {
      return 215;
    }
    else if (!strcmp(__s1, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59"))
    {
      return 216;
    }
    else if (!strcmp(__s1, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F"))
    {
      return 217;
    }
    else
    {
      return 218;
    }
  }
  return result;
}

uint64_t sub_1A737C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char *v3;
  char *v4;

  v2 = a2 - 128;
  if (a2 < 0x80)
  {
    v3 = (char *)&unk_4A4B10 + 4 * (int)a2;
    return *(unsigned int *)v3;
  }
  if (v2 < 0x40)
  {
    v4 = (char *)&unk_4A4D10;
LABEL_7:
    v3 = &v4[4 * v2];
    return *(unsigned int *)v3;
  }
  v2 = a2 - 192;
  if (a2 - 192 < 0x1A)
  {
    v4 = (char *)&unk_4A4E10;
    goto LABEL_7;
  }
  return 16;
}

void sub_1A73D0(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  const char *v6;

  v1 = 136315650;
  v2 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/APS/AGX"
       "PSAPSParserGen1.cpp";
  v3 = 1024;
  v4 = 656;
  v5 = 2080;
  v6 = "false && \"No current threadgroup size when handling THPOS_SAME_SIZE\"";
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", (uint8_t *)&v1, 0x1Cu);
}

void sub_1A7474()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  byte_751E60 = 0;
  *(_OWORD *)&qword_751E68 = 0u;
  *(_OWORD *)&qword_751E78 = 0u;
  unk_751E88 = 0u;
  qword_751E98 = 0;
  dword_751EA0 = 1065353216;
  *(_OWORD *)qword_751EA8 = 0u;
  *(_OWORD *)&qword_751EA8[2] = 0u;
  dword_751EC8 = 1065353216;
  xmmword_751ED0 = 0u;
  unk_751EE0 = 0u;
  dword_751EF0 = 1065353216;
  unk_751EF8 = 0u;
  unk_751F08 = 0u;
  dword_751F18 = 1065353216;
  xmmword_751F20 = 0u;
  unk_751F30 = 0u;
  dword_751F40 = 1065353216;
  unk_751F58 = 0u;
  unk_751F48 = 0u;
  dword_751F68 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_4158, &byte_751E60, &dword_0);
  qword_753100 = 0;
  *(_QWORD *)algn_753108 = 0;
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1A7514()
{
  uint64_t result;
  uint64_t v1;

  result = sub_BB28();
  qword_751FE0 = result;
  *(_QWORD *)algn_751FE8 = v1;
  return result;
}

const char *AppendString(const char *result, int *a2)
{
  const char *v3;
  size_t v4;
  int v5;
  int v6;

  if (result)
  {
    v3 = result;
    v4 = strlen(result);
    v5 = v4 + 1;
    result = (const char *)memcpy((char *)a2 + *a2, v3, v4 + 1);
    v6 = *a2 + v5;
  }
  else
  {
    *(_QWORD *)((char *)a2 + *a2) = 0xFFFFFFFFLL;
    v6 = *a2 + 8;
  }
  *a2 = v6;
  return result;
}

void DYTraceEncode_InternalData(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v3 = a1;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = 0xFFFFD01000000024;
  a2[8] = 198;
  v4 = *(_DWORD *)(a1 + 8);
  switch(v4)
  {
    case 101:
      v14 = *(_QWORD *)(a1 + 40);
      if (v14)
      {
        *(_QWORD *)(a2 + 9) = 0x536C536C756943;
        v15 = 44;
      }
      else
      {
        strcpy((char *)a2 + 36, "CiulSl");
        v15 = 43;
      }
      bzero((char *)a2 + v15, 44 - v15);
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)v3;
      *a2 = 52;
      a2[13] = *(_DWORD *)(v3 + 8);
      *a2 = 56;
      *((_QWORD *)a2 + 7) = *(_QWORD *)(v3 + 16);
      *a2 = 64;
      AppendString(*(const char **)(v3 + 32), (int *)a2);
      v22 = *a2;
      v23 = ((_DWORD)v22 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v22, v23 - v22);
      *a2 = v23;
      *(_QWORD *)((char *)a2 + v23) = *(_QWORD *)(v3 + 24);
      v24 = *a2 + 8;
      *a2 = v24;
      if (v14)
      {
        AppendString(*(const char **)(v3 + 40), (int *)a2);
        v24 = *a2;
      }
      v3 = (v24 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v24, v3 - v24);
      break;
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 112:
    case 113:
    case 114:
    case 115:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 133:
    case 134:
      goto LABEL_7;
    case 107:
      strcpy((char *)a2 + 36, "Ciulul");
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 16);
      *a2 = 64;
      *((_QWORD *)a2 + 8) = *(_QWORD *)(a1 + 24);
      LODWORD(v3) = 72;
      break;
    case 108:
      strcpy((char *)a2 + 36, "CitS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 16);
      *a2 = 64;
      goto LABEL_21;
    case 109:
    case 120:
      strcpy((char *)a2 + 36, "CiSululb");
      *(_WORD *)((char *)a2 + 45) = 0;
      *((_BYTE *)a2 + 47) = 0;
      *a2 = 48;
      *((_QWORD *)a2 + 6) = *(_QWORD *)a1;
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 8);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 32), (int *)a2);
      v7 = *a2;
      v8 = ((_DWORD)v7 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v7, v8 - v7);
      *a2 = v8;
      *(_QWORD *)((char *)a2 + v8) = *(_QWORD *)(v3 + 16);
      v9 = *a2 + 8;
      *a2 = v9;
      *(_QWORD *)((char *)a2 + v9) = *(_QWORD *)(v3 + 24);
      v10 = *a2 + 8;
      *a2 = v10;
      *((_BYTE *)a2 + v10) = *(_BYTE *)(v3 + 40);
      v11 = *a2 + 1;
      v3 = (*a2 & 0xFFFFFFFC) + 4;
      v12 = (char *)a2 + v11;
      v13 = v3 - v11;
      goto LABEL_23;
    case 110:
      *(_QWORD *)(a2 + 9) = 0x696C756943;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 16);
      *a2 = 64;
      a2[16] = *(_DWORD *)(a1 + 24);
      LODWORD(v3) = 68;
      break;
    case 111:
      v5 = 5597507;
      goto LABEL_3;
    case 116:
      *(_QWORD *)(a2 + 9) = 0x6C75556943;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      v16 = *a2;
      v17 = ((_DWORD)v16 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v16, v17 - v16);
      *a2 = v17;
      *(_QWORD *)((char *)a2 + v17) = *(_QWORD *)(v3 + 24);
      LODWORD(v3) = *a2 + 8;
      break;
    case 117:
    case 127:
    case 128:
    case 129:
    case 132:
      v5 = 5466435;
LABEL_3:
      a2[9] = v5;
      *a2 = 40;
      *((_QWORD *)a2 + 5) = *(_QWORD *)a1;
      *a2 = 48;
      a2[12] = *(_DWORD *)(a1 + 8);
      *a2 = 52;
      v6 = *(const char **)(a1 + 16);
      goto LABEL_22;
    case 118:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      v18 = *(_QWORD *)(a1 + 16);
      goto LABEL_18;
    case 119:
      *(_QWORD *)(a2 + 9) = 0x53535369756943;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 40);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      AppendString(*(const char **)(v3 + 24), (int *)a2);
      v6 = *(const char **)(v3 + 32);
      goto LABEL_22;
    case 125:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      v18 = *(_QWORD *)(a1 + 24);
LABEL_18:
      *((_QWORD *)a2 + 7) = v18;
      LODWORD(v3) = 64;
      break;
    case 126:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      goto LABEL_21;
    case 135:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((_BYTE *)a2 + 43) = 0;
      *a2 = 44;
      *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      v19 = *a2;
      v20 = ((_DWORD)v19 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v19, v20 - v19);
      *a2 = v20;
LABEL_21:
      v6 = *(const char **)(v3 + 24);
LABEL_22:
      AppendString(v6, (int *)a2);
      v21 = *a2;
      v3 = ((_DWORD)v21 + 3) & 0xFFFFFFFC;
      v12 = (char *)a2 + v21;
      v13 = v3 - v21;
LABEL_23:
      bzero(v12, v13);
      break;
    default:
      if (v4 == 7)
      {
        strcpy((char *)a2 + 36, "Ciui");
        *(_WORD *)((char *)a2 + 41) = 0;
        *((_BYTE *)a2 + 43) = 0;
        *a2 = 44;
        *(_QWORD *)(a2 + 11) = *(_QWORD *)a1;
        *a2 = 52;
        a2[13] = *(_DWORD *)(a1 + 8);
        *a2 = 56;
        a2[14] = *(_DWORD *)(a1 + 16);
        LODWORD(v3) = 60;
      }
      else
      {
LABEL_7:
        a2[9] = 26947;
        *a2 = 40;
        *((_QWORD *)a2 + 5) = *(_QWORD *)a1;
        *a2 = 48;
        a2[12] = *(_DWORD *)(a1 + 8);
        LODWORD(v3) = 52;
      }
      break;
  }
  *a2 = v3;
}

void DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)a2 = 0xFFFFD80000000024;
  a2[8] = 4;
  strcpy((char *)a2 + 36, "CtU<b>ulul");
  *((_BYTE *)a2 + 47) = 0;
  *a2 = 48;
  *((_QWORD *)a2 + 6) = *(_QWORD *)a1;
  *a2 = 56;
  *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  v4 = *a2;
  v5 = ((_DWORD)v4 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v4, v5 - v4);
  *a2 = v5;
  *(_QWORD *)((char *)a2 + v5) = *(_QWORD *)(a1 + 24);
  v6 = *a2 + 8;
  *a2 = v6;
  *(_QWORD *)((char *)a2 + v6) = *(_QWORD *)(a1 + 32);
  *a2 += 8;
}

_QWORD *GTHarvesterGetMetadata(_QWORD *a1, unint64_t a2)
{
  _QWORD *result;

  result = 0;
  if (a1 && a2 >= 0x10)
  {
    if (*a1 == 0x63617074757265)
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t GTHarvesterGetData(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result && a2 >= 0x10 && *(_QWORD *)result == 0x63617074757265)
  {
    v2 = *(int *)(result + 12);
    if (*(_WORD *)(result + 8) == 1)
      v2 += 16;
    result += v2;
  }
  return result;
}

uint64_t GTHarvesterGetTexturePlaneCount(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1)
      return *(_QWORD *)(result + 16);
    else
      return 0;
  }
  return result;
}

uint64_t GTHarvesterGetTexturePlane(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1)
    {
      if (*(_QWORD *)(result + 16) >= a2)
        result += 48 * a2 + 24;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::~MTLAccelerationStructureDataSource(AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *this)
{
  AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::~MTLAccelerationStructureDataSource(this);
  operator delete();
}

{
  void **v2;

  *(_QWORD *)this = off_723FB8;

  v2 = (void **)((char *)this + 352);
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::~__hash_table((uint64_t)this + 312);

  std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>>>::destroy(*((char **)this + 34));
  v2 = (void **)((char *)this + 240);
  std::vector<AccelerationStructureViewer::IntersectionFunctionTable>::__destroy_vector::operator()[abi:nn180100](&v2);

  AccelerationStructureViewerServer::DataSource::~DataSource(this);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::getIntersectionFunctionTables(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  void **v12;

  v3 = a2;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v4 = *(_QWORD *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 248);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      abort();
    v7 = std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v6 >> 5);
    v9 = v7;
    v11 = (char *)&v7[4 * v8];
    do
    {
      *v7 = off_7274E0;
      v7[1] = *(id *)(v4 + 8);
      *((_OWORD *)v7 + 1) = *(_OWORD *)(v4 + 16);
      v4 += 32;
      v7 += 4;
    }
    while (v4 != v5);
    v10 = v7;
  }
  (*((void (**)(id, _QWORD **, _QWORD))v3 + 2))(v3, &v9, 0);
  v12 = (void **)&v9;
  std::vector<AccelerationStructureViewer::IntersectionFunctionTable>::__destroy_vector::operator()[abi:nn180100](&v12);

}

void sub_1ABB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  std::vector<AccelerationStructureViewer::IntersectionFunctionTable>::__destroy_vector::operator()[abi:nn180100]((void ***)va);

  _Unwind_Resume(a1);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::getIntersectionFunctions(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, AccelerationStructureViewer::Filter *a5, void *a6)
{
  void (**v10)(id, uint64_t *, _QWORD);
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  void *v17;
  void ***v18;
  const AccelerationStructureViewer::IntersectionFunction *v19;
  const AccelerationStructureViewer::IntersectionFunction *v20;
  int v21;
  AccelerationStructureViewer::IntersectionFunction *v22;
  AccelerationStructureViewer::IntersectionFunction *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  AccelerationStructureViewer::IntersectionFunction *v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD v34[9];
  void *__p;
  void *v36;
  uint64_t v37;
  void **v38;
  AccelerationStructureViewer::IntersectionFunction *v39;
  AccelerationStructureViewer::IntersectionFunction *v40;
  unint64_t v41;
  unint64_t *v42;

  v10 = a6;
  v11 = *(_QWORD **)(a1 + 272);
  if (!v11)
    goto LABEL_12;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = (_QWORD *)(a1 + 272);
  do
  {
    v14 = v11[4];
    v15 = v14 >= v12;
    if (v14 >= v12)
      v16 = v11;
    else
      v16 = v11 + 1;
    if (v15)
      v13 = v11;
    v11 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 != (_QWORD *)(a1 + 272) && v12 >= v13[4])
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v19 = (const AccelerationStructureViewer::IntersectionFunction *)v13[5];
    v20 = (const AccelerationStructureViewer::IntersectionFunction *)v13[6];
    if (v19 == v20)
    {
      v28 = 0;
    }
    else
    {
      do
      {
        AccelerationStructureViewer::IntersectionFunction::IntersectionFunction((AccelerationStructureViewer::IntersectionFunction *)&v33, v19);
        v21 = AccelerationStructureViewer::DataSourceFilterable::matches((AccelerationStructureViewer::DataSourceFilterable *)v34, a5);
        v33 = (uint64_t *)off_7246B8;
        v38 = (void **)&v37;
        std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v38);
        if (__p)
        {
          v36 = __p;
          operator delete(__p);
        }

        v38 = (void **)v34;
        std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v38);
        if (v21)
        {
          v22 = v31;
          if ((unint64_t)v31 >= v32)
          {
            v24 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v31 - v30) >> 3);
            v25 = v24 + 1;
            if (v24 + 1 > 0x1AF286BCA1AF286)
              abort();
            if (0xD79435E50D79436 * ((uint64_t)(v32 - v30) >> 3) > v25)
              v25 = 0xD79435E50D79436 * ((uint64_t)(v32 - v30) >> 3);
            if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v32 - v30) >> 3) >= 0xD79435E50D7943)
              v26 = 0x1AF286BCA1AF286;
            else
              v26 = v25;
            v42 = &v32;
            if (v26)
              v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunction>>(v26);
            else
              v27 = 0;
            v38 = (void **)v26;
            v39 = (AccelerationStructureViewer::IntersectionFunction *)(v26 + 152 * v24);
            v40 = v39;
            v41 = v26 + 152 * v27;
            AccelerationStructureViewer::IntersectionFunction::IntersectionFunction(v39, v19);
            v40 = (AccelerationStructureViewer::IntersectionFunction *)((char *)v40 + 152);
            std::vector<AccelerationStructureViewer::IntersectionFunction>::__swap_out_circular_buffer(&v30, &v38);
            v23 = v31;
            std::__split_buffer<AccelerationStructureViewer::IntersectionFunction>::~__split_buffer((uint64_t)&v38);
          }
          else
          {
            AccelerationStructureViewer::IntersectionFunction::IntersectionFunction(v31, v19);
            v23 = (AccelerationStructureViewer::IntersectionFunction *)((char *)v22 + 152);
          }
          v31 = v23;
        }
        v19 = (const AccelerationStructureViewer::IntersectionFunction *)((char *)v19 + 152);
      }
      while (v19 != v20);
      v28 = v30;
    }
    if (a3)
    {
      std::vector<AccelerationStructureViewer::IntersectionFunction>::erase((uint64_t)&v30, v28, v28 + 152 * a3);
      v28 = v30;
    }
    if (0x86BCA1AF286BCA1BLL * (((uint64_t)v31 - v28) >> 3) > a4)
      std::vector<AccelerationStructureViewer::IntersectionFunction>::erase((uint64_t)&v30, v28 + 152 * a4, (uint64_t)v31);
    v10[2](v10, &v30, 0);
    v33 = &v30;
    v18 = (void ***)&v33;
  }
  else
  {
LABEL_12:
    v33 = 0;
    v34[0] = 0;
    v34[1] = 0;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("AccelerationStructureViewerError"), 0, 0));
    ((void (**)(id, uint64_t *, void *))v10)[2](v10, (uint64_t *)&v33, v17);

    v38 = (void **)&v33;
    v18 = &v38;
  }
  std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100](v18);

}

void sub_1ABEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;
  uint64_t v13;

  *(_QWORD *)(v13 - 136) = &a12;
  std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100]((void ***)(v13 - 136));

  _Unwind_Resume(a1);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::getPrimaryAccelerationStructure(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *Object;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = a2;
  v4 = **(_QWORD **)(a1[26] + 8);
  Object = GTMTLSMContext_getObject(**(_QWORD **)(v4 + 40), a1[37], a1[36] + *(_QWORD *)(v4 + 80));
  if (Object && (v6 = Object, *(_DWORD *)Object == 16))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = ___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource31getPrimaryAccelerationStructureEU13block_pointerFvPN27AccelerationStructureViewer21AccelerationStructureEP7NSErrorE_block_invoke;
    v9[3] = &unk_724038;
    v11 = a1;
    v10 = v3;
    v12 = v6;
    AccelerationStructureViewerServer::DataSource::getPrimaryAccelerationStructure((uint64_t)a1, v9);

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Resource is not an acceleration structure")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 8, v7));
    (*((void (**)(id, _QWORD, void *))v3 + 2))(v3, 0, v8);

  }
}

void sub_1AC058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::getAccelerationStructureChildren(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  id v18;
  void (**v19)(AccelerationStructureViewer::Filter *__hidden);
  char v20;
  char *v21;
  char *v22;
  char *v23;
  char **v24;

  v11 = a6;
  v19 = off_727800;
  v20 = *(_BYTE *)(a5 + 8);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v12 = *(_QWORD *)(a5 + 16);
  v13 = *(_QWORD *)(a5 + 24);
  if (v13 != v12)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3);
    if (v14 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v14);
    v22 = v21;
    v23 = &v21[24 * v15];
    std::vector<AccelerationStructureViewer::FilterToken>::__construct_at_end<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(&v21, v12, v13);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = ___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource32getAccelerationStructureChildrenEyN27AccelerationStructureViewer5RangeENS1_6FilterEU13block_pointerFvRNSt3__16vectorIPNS1_21AccelerationStructureENS4_9allocatorIS7_EEEEP7NSErrorE_block_invoke;
  v17[3] = &unk_724060;
  v16 = v11;
  v18 = v16;
  AccelerationStructureViewerServer::DataSource::getAccelerationStructureChildren(a1, a2, a3, a4, (uint64_t)&v19, v17);
  v19 = off_727800;
  v24 = &v21;
  std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v24);

}

void sub_1AC1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::generateItems(id *this)
{
  _BYTE *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  void *v13;
  float **v14;
  float **v15;
  unint64_t v16;
  void *v17;
  float *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  float *v40;
  unint64_t v41;
  uint64_t v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  char *v47;
  char *v48;
  BOOL v49;
  void *context;
  char *v51;
  id v52;
  float **i;
  _QWORD v54[5];

  context = objc_autoreleasePoolPush();
  AccelerationStructureViewerServer::DataSource::generateItems((AccelerationStructureViewerServer::DataSource *)this);
  v3 = this[23];
  v2 = this[24];
  if (v2 != (_BYTE *)v3)
  {
    v4 = 0;
    v5 = this + 5;
    v6 = (char *)(this + 34);
    v51 = (char *)(this + 5);
    do
    {
      v7 = (_QWORD *)*v5;
      if (*v5)
      {
        v8 = v3[23 * v4 + 2];
        v9 = v5;
        do
        {
          v10 = v7[4];
          v11 = v10 >= v8;
          if (v10 >= v8)
            v12 = v7;
          else
            v12 = v7 + 1;
          if (v11)
            v9 = v7;
          v7 = (_QWORD *)*v12;
        }
        while (*v12);
        if (v9 != v5 && v8 >= v9[4])
        {
          if (v4 >= (unint64_t)objc_msgSend(this[38], "count"))
            v13 = 0;
          else
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[38], "objectAtIndex:", v4));
          v15 = (float **)v9[5];
          v14 = (float **)v9[6];
          for (i = v14; v15 != v14; ++v15)
          {
            if (v13)
            {
              v16 = *((unsigned int *)*v15 + 15);
              if ((unint64_t)objc_msgSend(v13, "count") > v16)
              {
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndex:", *((unsigned int *)*v15 + 15)));
                if (v17)
                {
                  objc_storeStrong((id *)*v15 + 6, v17);
                  v18 = *v15;
                  v19 = v17;
                  v20 = *((_QWORD *)v18 + 2);
                  v21 = *((_QWORD *)v18 + 3);
                  if (v20 >= v21)
                  {
                    v52 = v19;
                    v23 = (AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *)this;
                    v24 = *((_QWORD *)v18 + 1);
                    v25 = (uint64_t)(v20 - v24) >> 4;
                    v26 = v25 + 1;
                    if ((unint64_t)(v25 + 1) >> 60)
                      abort();
                    v27 = v21 - v24;
                    if (v27 >> 3 > v26)
                      v26 = v27 >> 3;
                    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
                      v28 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v28 = v26;
                    v54[4] = v18 + 6;
                    v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v28);
                    v31 = &v29[16 * v25];
                    *(_WORD *)v31 = 7;
                    *((_QWORD *)v31 + 1) = v52;
                    v33 = *((_QWORD *)v18 + 1);
                    v32 = *((_QWORD *)v18 + 2);
                    if (v32 == v33)
                    {
                      v35 = &v29[16 * v25];
                      this = (id *)v23;
                    }
                    else
                    {
                      v34 = *((_QWORD *)v18 + 2);
                      v35 = &v29[16 * v25];
                      this = (id *)v23;
                      do
                      {
                        v36 = *(_WORD *)(v34 - 16);
                        v34 -= 16;
                        *((_WORD *)v35 - 8) = v36;
                        v35 -= 16;
                        v37 = *(_QWORD *)(v34 + 8);
                        *(_QWORD *)(v34 + 8) = 0;
                        *((_QWORD *)v35 + 1) = v37;
                      }
                      while (v34 != v33);
                    }
                    v22 = v31 + 16;
                    *((_QWORD *)v18 + 1) = v35;
                    *((_QWORD *)v18 + 2) = v31 + 16;
                    v38 = *((_QWORD *)v18 + 3);
                    *((_QWORD *)v18 + 3) = &v29[16 * v30];
                    v54[2] = v32;
                    v54[3] = v38;
                    v54[0] = v33;
                    v54[1] = v33;
                    std::__split_buffer<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::~__split_buffer((uint64_t)v54);
                  }
                  else
                  {
                    *(_WORD *)v20 = 7;
                    *(_QWORD *)(v20 + 8) = v19;
                    v22 = (char *)(v20 + 16);
                  }
                  *((_QWORD *)v18 + 2) = v22;
                  v14 = i;
                }

              }
            }
            v39 = (char *)this[33];
            if (v39 != v6)
            {
              v40 = *v15;
              v41 = *((_QWORD *)*v15 + 9);
              do
              {
                v42 = *((_QWORD *)v39 + 5);
                if (v41 < 0x86BCA1AF286BCA1BLL * ((*((_QWORD *)v39 + 6) - v42) >> 3))
                {
                  v43 = (float *)(v42 + 152 * v41);
                  v44 = v43[27];
                  v43[26] = fminf(v43[26], v40[20]);
                  v43[27] = fminf(v44, v40[21]);
                  v45 = v43[29];
                  v43[28] = fminf(v43[28], v40[22]);
                  v43[29] = fmaxf(v45, v40[23]);
                  v46 = v43[31];
                  v43[30] = fmaxf(v43[30], v40[24]);
                  v43[31] = fmaxf(v46, v40[25]);
                }
                v47 = (char *)*((_QWORD *)v39 + 1);
                if (v47)
                {
                  do
                  {
                    v48 = v47;
                    v47 = *(char **)v47;
                  }
                  while (v47);
                }
                else
                {
                  do
                  {
                    v48 = (char *)*((_QWORD *)v39 + 2);
                    v49 = *(_QWORD *)v48 == (_QWORD)v39;
                    v39 = v48;
                  }
                  while (!v49);
                }
                v39 = v48;
              }
              while (v48 != v6);
            }
          }

          v3 = this[23];
          v2 = this[24];
          v5 = v51;
        }
      }
      ++v4;
    }
    while (v4 < 0xD37A6F4DE9BD37A7 * ((v2 - (_BYTE *)v3) >> 3));
  }
  objc_autoreleasePoolPop(context);
}

void sub_1AC54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::buildIntersectionFunctionTableInPipeline(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  apr_allocator_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t i;
  int v36;
  _QWORD *Object;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  _QWORD v47[21];
  char *v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD v51[5];
  uint64_t v52;
  apr_pool_t *newpool;
  uint64_t v54;

  v5 = a3;
  if (a2)
  {
    v6 = *(id **)(*(_QWORD *)(a1 + 208) + 8);
    v7 = v6[1];
    v8 = (char *)*v6;
    v9 = *((_QWORD *)*v6 + 10);
    v10 = *(_QWORD *)(a1 + 288);
    v11 = objc_alloc_init((Class)MTLIntersectionFunctionTableDescriptor);
    objc_msgSend(v11, "setFunctionCount:", *(_QWORD *)(a2 + 24));
    v12 = objc_msgSend(v5, "newIntersectionFunctionTableWithDescriptor:", v11);
    v13 = v10 + v9;

    newpool = 0;
    apr_pool_create_ex(&newpool, 0, 0, v14);
    v52 = 0;
    memset(v51, 0, sizeof(v51));
    GTMTLIndirectResources_allResourcesByKey((uint64_t *)v51, *((_DWORD ***)v8 + 5), v13, 1, newpool);
    v15 = *((_QWORD *)v8 + 1);
    v54 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(*find_entry(v15, &v54, 8uLL, 0) + 32) + 32);
    if (v16)
    {
      v17 = 0;
      while (1)
      {
        v18 = atomic_load((unsigned int *)(v16 + 4));
        v19 = v17 + (v18 >> 6);
        v20 = v19 - 1;
        if ((int)(v19 - 1) > 0)
          break;
        v16 = *(_QWORD *)(v16 + 40);
        v17 = v19 - 1;
        if (!v16)
          goto LABEL_9;
      }
      v20 = 0;
      v23 = v17;
      v22 = (uint64_t *)(v8 + 16);
      v28 = v16 - ((uint64_t)(int)v17 << 6);
      if ((*(_BYTE *)(v28 + 79) & 8) != 0)
        v21 = v28 + 64;
      else
        v21 = 0;
    }
    else
    {
      v20 = 0;
LABEL_9:
      v16 = 0;
      v21 = 0;
      v22 = (uint64_t *)(v8 + 16);
      v23 = v20;
    }
    GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)v47, *v22, v21, (uint64_t *)v51);
    v49 = *(unsigned int *)(v47[13] + 8);
    v48 = (char *)apr_palloc(newpool, 16 * v49);
    bzero(v48, 16 * v49);
    v24 = atomic_load((unsigned int *)(v16 + 4));
    v25 = v23 + (v24 >> 6);
    v26 = v20 + 1;
    if ((_DWORD)v26 == v25 - 1)
    {
      v27 = (v26 << 32) | v26;
      goto LABEL_16;
    }
    v27 = (v26 << 32) | v23;
LABEL_17:
    v29 = v16 + 64;
    while (v16)
    {
      if ((*(_BYTE *)(v29 + ((uint64_t)(HIDWORD(v27) - (int)v27) << 6) + 15) & 8) == 0)
        break;
      v30 = (unint64_t *)(v29 + ((uint64_t)(HIDWORD(v27) - (int)v27) << 6));
      if (v13 <= *v30)
        break;
      GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)v47, *v22, (uint64_t)v30, (uint64_t *)v51);
      v31 = atomic_load((unsigned int *)(v16 + 4));
      v32 = v27 + (v31 >> 6);
      v33 = (HIDWORD(v27) + 1);
      v27 = (v33 << 32) | v27;
      if ((_DWORD)v33 == v32 - 1)
      {
        v27 = (v33 << 32) | v33;
LABEL_16:
        v16 = *(_QWORD *)(v16 + 40);
        goto LABEL_17;
      }
    }
    if (v49)
    {
      v34 = 0;
      for (i = 0; i < v49; ++i)
      {
        v36 = *(_DWORD *)&v48[v34];
        switch(v36)
        {
          case 3:
            objc_msgSend(v12, "setOpaqueCurveIntersectionFunctionWithSignature:atIndex:", *(_QWORD *)&v48[v34 + 8], i);
            break;
          case 2:
            objc_msgSend(v12, "setOpaqueTriangleIntersectionFunctionWithSignature:atIndex:", *(_QWORD *)&v48[v34 + 8], i);
            break;
          case 1:
            Object = GTMTLSMContext_getObject(**((_QWORD **)v8 + 5), *(_QWORD *)&v48[v34 + 8], v13);
            if (Object)
            {
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "functionForKey:", Object[5]));
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "functionHandleWithFunction:", v38));
              objc_msgSend(v12, "setFunction:atIndex:", v39, i);

            }
            break;
        }
        v34 += 16;
      }
    }
    v40 = 0;
    v41 = &v50;
    while (1)
    {
      v42 = *((_DWORD *)v41 - 4);
      if (v42 != 2)
        break;
      v45 = GTMTLSMContext_getObject(**((_QWORD **)v8 + 5), *(v41 - 1), v13);
      if (v45)
      {
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "visibleFunctionTableForKey:", v45[1]));
        objc_msgSend(v12, "setVisibleFunctionTable:atBufferIndex:", v44, v40);
LABEL_40:

      }
LABEL_41:
      ++v40;
      v41 += 3;
      if (v40 == 31)
      {
        apr_pool_destroy(newpool);

        goto LABEL_43;
      }
    }
    if (v42 != 1)
      goto LABEL_41;
    v43 = GTMTLSMContext_getObject(**((_QWORD **)v8 + 5), *(v41 - 1), v13);
    if (!v43)
      goto LABEL_41;
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bufferForKey:", v43[1]));
    objc_msgSend(v12, "setBuffer:offset:atIndex:", v44, *v41, v40);
    goto LABEL_40;
  }
  v12 = 0;
LABEL_43:

  return v12;
}

void sub_1AC98C()
{
  void *v0;
  void *v1;
  void *v2;

  JUMPOUT(0x1AC9C0);
}

id AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::buildVisibleFunctionTableInPipeline(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  apr_allocator_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t i;
  int v36;
  _QWORD *Object;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  _QWORD v47[21];
  char *v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD v51[5];
  uint64_t v52;
  apr_pool_t *newpool;
  uint64_t v54;

  v5 = a3;
  if (a2)
  {
    v6 = *(id **)(*(_QWORD *)(a1 + 208) + 8);
    v7 = v6[1];
    v8 = (char *)*v6;
    v9 = *((_QWORD *)*v6 + 10);
    v10 = *(_QWORD *)(a1 + 288);
    v11 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
    objc_msgSend(v11, "setFunctionCount:", *(_QWORD *)(a2 + 24));
    v12 = objc_msgSend(v5, "newVisibleFunctionTableWithDescriptor:", v11);
    v13 = v10 + v9;

    newpool = 0;
    apr_pool_create_ex(&newpool, 0, 0, v14);
    v52 = 0;
    memset(v51, 0, sizeof(v51));
    GTMTLIndirectResources_allResourcesByKey((uint64_t *)v51, *((_DWORD ***)v8 + 5), v13, 1, newpool);
    v15 = *((_QWORD *)v8 + 1);
    v54 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(*(_QWORD *)(*find_entry(v15, &v54, 8uLL, 0) + 32) + 32);
    if (v16)
    {
      v17 = 0;
      while (1)
      {
        v18 = atomic_load((unsigned int *)(v16 + 4));
        v19 = v17 + (v18 >> 6);
        v20 = v19 - 1;
        if ((int)(v19 - 1) > 0)
          break;
        v16 = *(_QWORD *)(v16 + 40);
        v17 = v19 - 1;
        if (!v16)
          goto LABEL_9;
      }
      v20 = 0;
      v23 = v17;
      v22 = (uint64_t *)(v8 + 16);
      v28 = v16 - ((uint64_t)(int)v17 << 6);
      if ((*(_BYTE *)(v28 + 79) & 8) != 0)
        v21 = v28 + 64;
      else
        v21 = 0;
    }
    else
    {
      v20 = 0;
LABEL_9:
      v16 = 0;
      v21 = 0;
      v22 = (uint64_t *)(v8 + 16);
      v23 = v20;
    }
    GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)v47, *v22, v21, (uint64_t *)v51);
    v49 = *(unsigned int *)(v47[13] + 8);
    v48 = (char *)apr_palloc(newpool, 16 * v49);
    bzero(v48, 16 * v49);
    v24 = atomic_load((unsigned int *)(v16 + 4));
    v25 = v23 + (v24 >> 6);
    v26 = v20 + 1;
    if ((_DWORD)v26 == v25 - 1)
    {
      v27 = (v26 << 32) | v26;
      goto LABEL_16;
    }
    v27 = (v26 << 32) | v23;
LABEL_17:
    v29 = v16 + 64;
    while (v16)
    {
      if ((*(_BYTE *)(v29 + ((uint64_t)(HIDWORD(v27) - (int)v27) << 6) + 15) & 8) == 0)
        break;
      v30 = (unint64_t *)(v29 + ((uint64_t)(HIDWORD(v27) - (int)v27) << 6));
      if (v13 <= *v30)
        break;
      GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)v47, *v22, (uint64_t)v30, (uint64_t *)v51);
      v31 = atomic_load((unsigned int *)(v16 + 4));
      v32 = v27 + (v31 >> 6);
      v33 = (HIDWORD(v27) + 1);
      v27 = (v33 << 32) | v27;
      if ((_DWORD)v33 == v32 - 1)
      {
        v27 = (v33 << 32) | v33;
LABEL_16:
        v16 = *(_QWORD *)(v16 + 40);
        goto LABEL_17;
      }
    }
    if (v49)
    {
      v34 = 0;
      for (i = 0; i < v49; ++i)
      {
        v36 = *(_DWORD *)&v48[v34];
        if ((v36 - 2) >= 2)
        {
          if (v36 == 1)
          {
            Object = GTMTLSMContext_getObject(**((_QWORD **)v8 + 5), *(_QWORD *)&v48[v34 + 8], v13);
            if (Object)
            {
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "functionForKey:", Object[5]));
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "functionHandleWithFunction:", v38));
              objc_msgSend(v12, "setFunction:atIndex:", v39, i);

            }
          }
        }
        else
        {
          objc_msgSend(v12, "setValue:atIndex:", 1, i);
        }
        v34 += 16;
      }
    }
    v40 = 0;
    v41 = &v50;
    while (1)
    {
      v42 = *((_DWORD *)v41 - 4);
      if (v42 != 2)
        break;
      v45 = GTMTLSMContext_getObject(**((_QWORD **)v8 + 5), *(v41 - 1), v13);
      if (v45)
      {
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "visibleFunctionTableForKey:", v45[1]));
        objc_msgSend(v12, "setVisibleFunctionTable:atBufferIndex:", v44, v40);
LABEL_38:

      }
LABEL_39:
      ++v40;
      v41 += 3;
      if (v40 == 31)
      {
        apr_pool_destroy(newpool);

        goto LABEL_41;
      }
    }
    if (v42 != 1)
      goto LABEL_39;
    v43 = GTMTLSMContext_getObject(**((_QWORD **)v8 + 5), *(v41 - 1), v13);
    if (!v43)
      goto LABEL_39;
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bufferForKey:", v43[1]));
    objc_msgSend(v12, "setBuffer:offset:atIndex:", v44, *v41, v40);
    goto LABEL_38;
  }
  v12 = 0;
LABEL_41:

  return v12;
}

void sub_1ACDC4()
{
  void *v0;
  void *v1;
  void *v2;

  JUMPOUT(0x1ACDF8);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::applyUsedResources(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  v4 = a2;
  v3 = (_QWORD *)(a1 + 328);
  while (1)
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    objc_msgSend(v4, "useResources:count:usage:");
  }
  objc_msgSend(v4, "useHeaps:count:");

}

void sub_1ACE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::enumerateIntersectionFunctionTableFunctions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;

  if (a2)
  {
    v3 = *(_QWORD **)(a1 + 272);
    if (v3)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = (_QWORD *)(a1 + 272);
      do
      {
        v7 = v3[4];
        v8 = v7 >= v5;
        if (v7 >= v5)
          v9 = v3;
        else
          v9 = v3 + 1;
        if (v8)
          v6 = v3;
        v3 = (_QWORD *)*v9;
      }
      while (*v9);
      if (v6 != (_QWORD *)(a1 + 272) && v5 >= v6[4])
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8);
        if (v10)
        {
          v17 = *(id *)(v10 + 8);
          if (!v17 || (v11 = v6[5], v11 == v6[6]))
          {
LABEL_19:

          }
          else
          {
            v12 = 0;
            while (1)
            {
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "functionForKey:", *(_QWORD *)(v11 + 48)));
              v14 = *(_BYTE *)(v11 + 73);
              v21 = v12;
              v20 = v14;
              v15 = v13;
              v18 = v11;
              v19 = v15;
              v16 = *(_QWORD *)(a3 + 24);
              if (!v16)
                break;
              (*(void (**)(uint64_t, uint64_t *, char *, id *, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v21, &v20, &v19, &v18);

              ++v12;
              v11 += 152;

              if (v11 == v6[6])
                goto LABEL_19;
            }
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
        }
      }
    }
  }
}

void sub_1ACFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12)
{

  _Unwind_Resume(a1);
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>();
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

_QWORD *std::vector<AccelerationStructureViewer::FilterToken>::__init_with_size[abi:nn180100]<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<AccelerationStructureViewer::FilterToken>::__vallocate[abi:nn180100](result, a4);
    return std::vector<AccelerationStructureViewer::FilterToken>::__construct_at_end<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(v6, a2, a3);
  }
  return result;
}

uint64_t ___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource32getAccelerationStructureChildrenEyN27AccelerationStructureViewer5RangeENS1_6FilterEU13block_pointerFvRNSt3__16vectorIPNS1_21AccelerationStructureENS4_9allocatorIS7_EEEEP7NSErrorE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AccelerationStructureViewer::Filter::~Filter(AccelerationStructureViewer::Filter *this)
{
  void **v1;

  *(_QWORD *)this = off_727800;
  v1 = (void **)((char *)this + 16);
  std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = off_727800;
  v1 = (void **)((char *)this + 16);
  std::vector<AccelerationStructureViewer::FilterToken>::__destroy_vector::operator()[abi:nn180100](&v1);
  operator delete();
}

char *std::vector<AccelerationStructureViewer::FilterToken>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::vector<AccelerationStructureViewer::FilterToken>::__construct_at_end<AccelerationStructureViewer::FilterToken*,AccelerationStructureViewer::FilterToken*>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = off_7277C8;
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 + 8);
      result = *(id *)(v6 + 16);
      *(_QWORD *)(v4 + 16) = result;
      v6 += 24;
      v4 += 24;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a1);
}

void ___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource31getPrimaryAccelerationStructureEU13block_pointerFvPN27AccelerationStructureViewer21AccelerationStructureEP7NSErrorE_block_invoke(_QWORD *a1, uint64_t a2, void *a3)
{
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  id v13;

  v13 = a3;
  if (a2)
  {
    v5 = *(_DWORD *)(a2 + 64);
    if (!v5)
    {
      v8 = a1[4];
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLAccelerationStructure is an unsupported type")));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 8, v9));
      (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v10);

      goto LABEL_9;
    }
    if (*(_QWORD *)(a1[6] + 72))
    {
      v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
LABEL_5:
      v7 = *(void **)(a2 + 48);
      *(_QWORD *)(a2 + 48) = v6;

    }
    else
    {
      v11 = v5 - 1;
      v12 = a1[5];
      switch(v11)
      {
        case 0:
          v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("PrimitiveAccelerationStructure 0x%llx"), *(_QWORD *)(v12 + 296), v13));
          goto LABEL_5;
        case 1:
          v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("InstanceAccelerationStructure 0x%llx"), *(_QWORD *)(v12 + 296), v13));
          goto LABEL_5;
        case 2:
          v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("PrimitiveMotionAccelerationStructure 0x%llx"), *(_QWORD *)(v12 + 296), v13));
          goto LABEL_5;
        case 3:
          v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("InstanceMotionAccelerationStructure 0x%llx"), *(_QWORD *)(v12 + 296), v13));
          goto LABEL_5;
        default:
          break;
      }
    }
  }
  (*(void (**)(void))(a1[4] + 16))();
LABEL_9:

}

void sub_1AD470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 152;
      v7 = v4 - 152;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 152;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

AccelerationStructureViewer::IntersectionFunction *AccelerationStructureViewer::IntersectionFunction::IntersectionFunction(AccelerationStructureViewer::IntersectionFunction *this, const AccelerationStructureViewer::IntersectionFunction *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = off_724290;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  if (v6 != v5)
  {
    std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__vallocate[abi:nn180100]((_QWORD *)this + 1, (v6 - v5) >> 4);
    std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__construct_at_end<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>*,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>*>(v4, v5, v6);
  }
  *(_QWORD *)this = off_7246B8;
  *((_QWORD *)this + 4) = *((id *)a2 + 4);
  v7 = *((_QWORD *)a2 + 9);
  v8 = *(_OWORD *)((char *)a2 + 56);
  v9 = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 40) = v9;
  *(_OWORD *)((char *)this + 56) = v8;
  *((_QWORD *)this + 9) = v7;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 10);
  v10 = (_BYTE *)*((_QWORD *)a2 + 11);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::__vallocate[abi:nn180100]((_QWORD *)this + 10, v12 >> 2);
    v13 = (char *)*((_QWORD *)this + 11);
    memmove(v13, v11, v12);
    *((_QWORD *)this + 11) = &v13[4 * (v12 >> 2)];
  }
  v14 = *(_OWORD *)((char *)a2 + 104);
  v15 = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 15) = v15;
  *(_OWORD *)((char *)this + 104) = v14;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v17 = *((_QWORD *)a2 + 16);
  v16 = *((_QWORD *)a2 + 17);
  if (v16 != v17)
  {
    std::vector<AccelerationStructureViewer::Property>::__vallocate[abi:nn180100]((_QWORD *)this + 16, 0xEEEEEEEEEEEEEEEFLL * ((v16 - v17) >> 3));
    std::vector<AccelerationStructureViewer::Property>::__construct_at_end<AccelerationStructureViewer::Property*,AccelerationStructureViewer::Property*>((char *)this + 128, v17, v16);
  }
  return this;
}

void sub_1AD670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);

  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 120;
      v7 = v4 - 120;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 120;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AccelerationStructureViewer::IntersectionFunction::~IntersectionFunction(AccelerationStructureViewer::IntersectionFunction *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_7246B8;
  v3 = (void **)((char *)this + 128);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v3);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }

  v3 = (void **)((char *)this + 8);
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_7246B8;
  v3 = (void **)((char *)this + 128);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v3);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }

  v3 = (void **)((char *)this + 8);
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v3);
  operator delete();
}

void std::vector<AccelerationStructureViewer::IntersectionFunction>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);
  BOOL v17;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = *(_QWORD *)(a1 + 8);
    if (a3 != v5)
    {
      v6 = 8 * ((a3 - a2) >> 3);
      do
      {
        v7 = v3 + v6;
        std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__vdeallocate((void **)(v3 + 8));
        *(_OWORD *)(v3 + 8) = *(_OWORD *)(v3 + v6 + 8);
        v8 = *(_QWORD *)(v3 + v6 + 32);
        *(_QWORD *)(v3 + 24) = *(_QWORD *)(v3 + v6 + 24);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        v9 = *(void **)(v3 + 32);
        *(_QWORD *)(v3 + 32) = v8;

        v10 = *(_OWORD *)(v3 + v6 + 40);
        v11 = *(_OWORD *)(v3 + v6 + 56);
        v12 = *(void **)(v3 + 80);
        *(_QWORD *)(v3 + 72) = *(_QWORD *)(v3 + v6 + 72);
        *(_OWORD *)(v3 + 56) = v11;
        *(_OWORD *)(v3 + 40) = v10;
        if (v12)
        {
          *(_QWORD *)(v3 + 88) = v12;
          operator delete(v12);
          *(_QWORD *)(v3 + 80) = 0;
          *(_QWORD *)(v3 + 88) = 0;
          *(_QWORD *)(v3 + 96) = 0;
        }
        *(_OWORD *)(v3 + 80) = *(_OWORD *)(v7 + 80);
        *(_QWORD *)(v3 + 96) = *(_QWORD *)(v7 + 96);
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 88) = 0;
        *(_QWORD *)(v7 + 96) = 0;
        v13 = *(_QWORD *)(v7 + 120);
        *(_OWORD *)(v3 + 104) = *(_OWORD *)(v7 + 104);
        *(_QWORD *)(v3 + 120) = v13;
        std::vector<AccelerationStructureViewer::Property>::__vdeallocate((void **)(v3 + 128));
        *(_OWORD *)(v3 + 128) = *(_OWORD *)(v7 + 128);
        *(_QWORD *)(v3 + 144) = *(_QWORD *)(v7 + 144);
        *(_QWORD *)(v7 + 128) = 0;
        *(_QWORD *)(v7 + 136) = 0;
        *(_QWORD *)(v7 + 144) = 0;
        v3 += 152;
      }
      while (v3 + v6 != v5);
      a3 = *(_QWORD *)(a1 + 8);
    }
    if (a3 != v3)
    {
      v14 = (void (***)(_QWORD))(a3 - 152);
      v15 = (void (***)(_QWORD))(a3 - 152);
      do
      {
        v16 = *v15;
        v15 -= 19;
        (*v16)(v14);
        v17 = v14 == (void (***)(_QWORD))v3;
        v14 = v15;
      }
      while (!v17);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

void std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__vdeallocate(void **a1)
{
  id *v1;
  id *v3;
  void *v4;
  id *v5;

  v1 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 2;

        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<AccelerationStructureViewer::Property>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 120;
      v6 = v3 - 120;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 120;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunction>>(unint64_t a1)
{
  if (a1 >= 0x1AF286BCA1AF287)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(152 * a1);
}

uint64_t *std::vector<AccelerationStructureViewer::IntersectionFunction>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 144) = 0;
      *(_QWORD *)(v6 - 136) = 0;
      *(_QWORD *)(v6 - 128) = 0;
      *(_OWORD *)(v6 - 144) = *(_OWORD *)(v2 + v5 - 144);
      v8 = *(_QWORD *)(v2 + v5 - 120);
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v2 + v5 - 128);
      *(_QWORD *)(v7 - 144) = 0;
      *(_QWORD *)(v7 - 136) = 0;
      *(_QWORD *)(v7 - 128) = 0;
      *(_QWORD *)(v6 - 152) = off_7246B8;
      *(_QWORD *)(v7 - 120) = 0;
      *(_QWORD *)(v6 - 120) = v8;
      v9 = *(_OWORD *)(v2 + v5 - 96);
      v10 = *(_QWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_OWORD *)(v6 - 96) = v9;
      *(_QWORD *)(v6 - 64) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 80) = v10;
      *(_QWORD *)(v6 - 72) = 0;
      *(_OWORD *)(v6 - 72) = *(_OWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v6 - 56) = *(_QWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      v11 = *(_QWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = v11;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 152;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AccelerationStructureViewer::IntersectionFunction>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 152);
    *(_QWORD *)(a1 + 16) = i - 152;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<AccelerationStructureViewer::Property>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x222222222222223)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

char *std::vector<AccelerationStructureViewer::Property>::__construct_at_end<AccelerationStructureViewer::Property*,AccelerationStructureViewer::Property*>(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property&>(v4 + v7, a2 + v7);
      v7 += 120;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_1ADC90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property&>(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = off_7274A8;
  v4 = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return std::vector<NSString * {__strong}>::__init_with_size[abi:nn180100]<NSString * {__strong}*,NSString * {__strong}*>((char *)(a1 + 96), *(void ***)(a2 + 96), *(void ***)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
}

void sub_1ADD24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

char *std::vector<NSString * {__strong}>::__init_with_size[abi:nn180100]<NSString * {__strong}*,NSString * {__strong}*>(char *result, void **a2, void **a3, unint64_t a4)
{
  char *v6;
  char **v7;
  void *v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](result, a4);
    v7 = (char **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      result = v8;
      *v7++ = result;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<NSString * {__strong}>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(120 * a1);
}

char *std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a1);
}

char *std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__construct_at_end<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>*,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>*>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_WORD *)v4 = *(_WORD *)v6;
      result = *(id *)(v6 + 8);
      *(_QWORD *)(v4 + 8) = result;
      v4 += 16;
      v6 += 16;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

void std::vector<AccelerationStructureViewer::IntersectionFunctionTable>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a1);
}

void std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100](&v2);
    operator delete(a1);
  }
}

id AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::getAllAccelerationStructureChildren(AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *this, uint64_t a2, apr_pool_t *a3)
{
  void *v6;
  id *v7;
  _DWORD ***v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _BYTE *v16;
  apr_hash_index_t *v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  _DWORD *v29;
  id v30;
  unint64_t j;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  int64x2_t v44;
  id v45;
  int64x2_t v46;
  int64x2_t v47;
  uint64_t v48;
  id v49;
  int64x2_t v50;
  int64x2_t v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  int64x2_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _OWORD v62[4];
  __int128 v63;
  uint64_t v64;

  v6 = objc_autoreleasePoolPush();
  v7 = *(id **)(*((_QWORD *)this + 26) + 8);
  v8 = (_DWORD ***)*v7;
  v9 = v7[1];
  v10 = *((_QWORD *)this + 36) + *((_QWORD *)*v7 + 10);
  v64 = 0;
  v63 = 0u;
  memset(v62, 0, sizeof(v62));
  GTMTLIndirectResources_allResourcesByKey((uint64_t *)v62, v8[5], v10, 1, a3);
  v11 = v63;
  v61 = *(_DWORD *)(v63 + 48);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "defaultDevice"));
  v13 = objc_msgSend(v12, "newBufferWithLength:options:", 8 * v61, 0);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "defaultDevice"));
  v39 = v6;
  v15 = objc_msgSend(v14, "newBufferWithLength:options:", 4 * v61, 0);

  v40 = objc_retainAutorelease(v13);
  v16 = objc_msgSend(v40, "contents");
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = v11;
  *(_DWORD *)(v11 + 40) = 0;
  v17 = apr_hash_next((apr_hash_index_t *)(v11 + 16));
  for (i = 0; v17; ++i)
  {
    *(_QWORD *)&v16[8 * i] = **(_QWORD **)(*((_QWORD *)v17 + 1) + 16);
    v17 = apr_hash_next(v17);
  }
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>(v16, &v16[8 * i], &v57);
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "accelerationStructureForKey:", a2));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "defaultCommandQueue"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "commandBuffer"));

  v42 = v20;
  objc_msgSend(v20, "setLabel:", CFSTR("com.apple.gputools.ASV.MarkAccelerationStructureChildren"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "computeCommandEncoder"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "defaultDevice"));
  LODWORD(v20) = objc_msgSend(v22, "supportsFamily:", 1004);

  if ((_DWORD)v20)
  {
    v57 = 0;
    v59 = 0;
    v60 = 0;
    v58 = 0x100000001;
    v59 = objc_msgSend(*((id *)this + 28), "threadExecutionWidth");
    v60 = 0x100000001;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "defaultDevice"));
    v24 = objc_msgSend(v23, "newBufferWithBytes:length:options:", &v57, 24, 0);

    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 27));
    objc_msgSend(v21, "setAccelerationStructure:atBufferIndex:", v41, 1);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v24, 0, 0);
    v55 = vdupq_n_s64(1uLL);
    v56 = 1;
    v53 = v55;
    v54 = 1;
    objc_msgSend(v21, "dispatchThreads:threadsPerThreadgroup:", &v55, &v53);
    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 28));
    objc_msgSend(v21, "setAccelerationStructure:atBufferIndex:", v41, 1);
    objc_msgSend(v21, "setBytes:length:atIndex:", &v61, 4, 4);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v40, 0, 2);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v15, 0, 3);
    objc_msgSend(v21, "dispatchThreadsWithIndirectBuffer:indirectBufferOffset:", v24, 0);

  }
  else
  {
    v57 = 0;
    v57 = objc_msgSend(*((id *)this + 28), "threadExecutionWidth");
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "defaultDevice"));
    v26 = objc_msgSend(v25, "newBufferWithLength:options:", 4, 0);

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "defaultDevice"));
    v28 = objc_msgSend(v27, "newBufferWithLength:options:", 12, 0);

    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 27));
    objc_msgSend(v21, "setAccelerationStructure:atBufferIndex:", v41, 1);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v26, 0, 0);
    v51 = vdupq_n_s64(1uLL);
    v52 = 1;
    v49 = objc_msgSend(*((id *)this + 27), "threadExecutionWidth");
    v50 = v51;
    objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", &v51, &v49);
    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 29));
    objc_msgSend(v21, "setBytes:length:atIndex:", &v57, 4, 6);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v26, 0, 0);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v28, 0, 5);
    v47 = vdupq_n_s64(1uLL);
    v48 = 1;
    v45 = objc_msgSend(*((id *)this + 27), "threadExecutionWidth");
    v46 = v47;
    objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", &v47, &v45);
    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 28));
    objc_msgSend(v21, "setAccelerationStructure:atBufferIndex:", v41, 1);
    objc_msgSend(v21, "setBytes:length:atIndex:", &v61, 4, 4);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v40, 0, 2);
    objc_msgSend(v21, "setBuffer:offset:atIndex:", v15, 0, 3);
    v43 = v57;
    v44 = vdupq_n_s64(1uLL);
    objc_msgSend(v21, "dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:", v28, 0, &v43);

  }
  objc_msgSend(v21, "endEncoding");
  objc_msgSend(v42, "commit");
  objc_msgSend(v42, "waitUntilCompleted");
  if (objc_msgSend(v42, "status") == &dword_4)
  {
    v38 = v15;
    v29 = objc_msgSend(objc_retainAutorelease(v15), "contents", v13);
    v30 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 10);
    if (v61)
    {
      for (j = 0; j < v61; ++j)
      {
        if (v29[j])
        {
          v32 = *find_entry(v11, v16, 8uLL, 0);
          if (v32)
          {
            v33 = *(_QWORD *)(v32 + 32);
            if (v33)
            {
              v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "accelerationStructureForKey:", *(_QWORD *)(v33 + 8)));
              if (v34)
              {
                v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(v33 + 8)));
                objc_msgSend(v30, "setObject:forKey:", v34, v35);

              }
            }
          }
        }
        v16 += 8;
      }
    }
    v36 = objc_msgSend(v30, "copy");

    v15 = v38;
  }
  else
  {
    v36 = &__NSDictionary0__struct;
  }

  objc_autoreleasePoolPop(v39);
  return v36;
}

void sub_1AE7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(uint64_t a1, id *a2, int *a3, uint64_t a4, apr_pool_t *a5, uint64_t **a6)
{
  apr_pool_t *v12;
  _QWORD *v13;
  int v14;
  void *v15;
  void *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  apr_array_header_t *v21;
  apr_pool_t *v22;
  unint64_t v23;
  uint64_t v24;
  apr_allocator_t *v25;
  _DWORD *v26;
  apr_pool_t *v27;
  apr_array_header_t *v28;
  int nelts;
  unint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  __n128 v37;
  void *v38;
  void *v39;
  const CATransform3D **v40;
  void *v41;
  unsigned __int8 v42;
  void *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  const __CFString *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  apr_pool_t **v64;
  unint64_t v65;
  apr_pool_t *v66;
  const __CFString *v67;
  apr_pool_t *v68;
  const CATransform3D **v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  apr_pool_t *v77;
  apr_pool_t *v78;
  apr_pool_t *v79;
  char *v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  _QWORD *entry;
  apr_pool_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  int v107;
  void **Object;
  _QWORD *v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  int64x2_t v127;
  void *v128;
  uint64_t v129;
  void (***v130)(uint64_t);
  void (**v131)(uint64_t);
  BOOL v132;
  const AccelerationStructureViewer::IntersectionFunction *v133;
  const AccelerationStructureViewer::IntersectionFunction *v134;
  unint64_t v135;
  AccelerationStructureViewer::IntersectionFunction *v136;
  uint64_t v137;
  AccelerationStructureViewer::IntersectionFunction *v138;
  char *v139;
  char **v140;
  unint64_t v141;
  char **v142;
  char *v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  apr_pool_t *v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  char *v158;
  apr_pool_t *newpool;
  apr_pool_t *v160;
  char *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  _OWORD v169[5];
  uint64_t v170;
  const AccelerationStructureViewer::IntersectionFunction *v171;
  const AccelerationStructureViewer::IntersectionFunction *v172;
  uint64_t v173;
  int *v174;
  id v175;
  id *v176;
  void **v177;
  void **v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;

  v176 = a2;
  if (a3)
  {
    v12 = (apr_pool_t *)*((_QWORD *)a3 + 1);
    v13 = *a2;
    v175 = a2[1];
    v14 = *a3;
    if (*a3 != 60)
    {
      if (v14 == 50)
      {
        v18 = a1;
        v19 = *((_QWORD *)*a2 + 10);
        v20 = *(_QWORD *)(v18 + 288);
        v21 = apr_array_make(a5, 4, 8);
        v22 = a5;
        v23 = v20 + v19;
        v24 = *((_QWORD *)*a2 + 5);
        newpool = 0;
        apr_pool_create_ex(&newpool, v22, 0, v25);
        v26 = *(_DWORD **)(v24 + 72);
        v27 = newpool;
        v28 = apr_array_make(newpool, 128, 8);
        GTMTLSMContext_getObjects(v26, v23, v28);
        nelts = v28->nelts;
        if (nelts)
        {
          for (i = 0; i < nelts; ++i)
          {
            v31 = *(_QWORD *)&v28->elts[8 * i];
            if (*(apr_pool_t **)(v31 + 48) == v12)
            {
              *(_QWORD *)apr_array_push(v21) = v31;
              nelts = v28->nelts;
            }
          }
        }
        apr_pool_destroy(v27);
        if (v21->nelts >= 1)
        {
          v32 = 0;
          do
          {
            v33 = *(_QWORD *)&v21->elts[8 * v32];
            if (v33)
              v34 = *(_QWORD *)(v33 + 8);
            else
              v34 = 0;
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v176[1], "accelerationStructureForKey:", v34));
            v36 = v35;
            if (v35)
            {
              v37.n128_u64[0] = (unint64_t)objc_msgSend(v35, "uniqueIdentifier");
              v37.n128_u64[1] = v34;
              std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long long>>(a6, v37.n128_u64[0], v37);
            }

            ++v32;
          }
          while (v32 < v21->nelts);
        }
      }
      else if (v14 == 16)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2[1], "accelerationStructureForKey:", v12));
        v16 = v15;
        if (v15)
        {
          v17.n128_u64[0] = (unint64_t)objc_msgSend(v15, "uniqueIdentifier");
          v17.n128_u64[1] = (unint64_t)v12;
          std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long long>>(a6, v17.n128_u64[0], v17);
        }

      }
      goto LABEL_133;
    }
    v153 = v13[1];
    v174 = a3;
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2[1], "resourceForKey:", v12));
    v154 = v38;
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "label"));
    v40 = &CATransform3DIdentity_ptr;
    if (v39
      && (v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "label")),
          v42 = objc_msgSend(v41, "isEqualToString:", &stru_7282A8),
          v41,
          v39,
          (v42 & 1) == 0))
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "label"));
    }
    else
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLIntersectionFunctionTable 0x%llx"), v38));
    }
    v44 = v43;
    if ((a4 & 0x8000000000000000) == 0)
    {
      v45 = v43;
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "stringByAppendingFormat:", CFSTR(" (%zu)"), a4));

    }
    v172 = 0;
    v173 = 0;
    v171 = 0;
    v46 = *(unsigned int *)(*((_QWORD *)v174 + 13) + 8);
    v155 = a1;
    if ((_DWORD)v46)
    {
      v163 = &v173;
      v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunction>>(v46);
      newpool = (apr_pool_t *)v47;
      v160 = (apr_pool_t *)v47;
      v162 = (uint64_t)&v47[152 * v48];
      v49 = &v47[152 * v46];
      v50 = 152 * v46;
      do
      {
        *((_QWORD *)v47 + 2) = 0;
        *((_QWORD *)v47 + 3) = 0;
        *(_QWORD *)v47 = off_7246B8;
        *((_QWORD *)v47 + 1) = 0;
        *((_QWORD *)v47 + 11) = 0;
        *((_QWORD *)v47 + 12) = 0;
        *((_QWORD *)v47 + 10) = 0;
        *((_QWORD *)v47 + 17) = 0;
        *((_QWORD *)v47 + 18) = 0;
        *((_QWORD *)v47 + 16) = 0;
        *((_OWORD *)v47 + 2) = 0uLL;
        *((_OWORD *)v47 + 3) = 0uLL;
        *(_OWORD *)(v47 + 59) = 0uLL;
        v47 += 152;
        v50 -= 152;
      }
      while (v50);
      v161 = v49;
      std::vector<AccelerationStructureViewer::IntersectionFunction>::__swap_out_circular_buffer((uint64_t *)&v171, &newpool);
      std::__split_buffer<AccelerationStructureViewer::IntersectionFunction>::~__split_buffer((uint64_t)&newpool);
      v46 = *(unsigned int *)(*((_QWORD *)v174 + 13) + 8);
      if ((_DWORD)v46)
      {
        v150 = a5;
        v151 = v13;
        v152 = *(unsigned int *)(*((_QWORD *)v174 + 13) + 8);
        v51 = 0;
        v52 = (uint64_t)v171;
        v53 = CFSTR("nil");
        do
        {
          v54 = v52 + 152 * v51;
          v55 = *(void **)(v54 + 32);
          *(_QWORD *)(v54 + 32) = v53;

          v56 = (uint64_t)v171;
          v57 = (char *)v171 + 152 * v51;
          *((_QWORD *)v57 + 5) = v51;
          *((_QWORD *)v57 + 6) = 0;
          *((_QWORD *)v57 + 7) = 0;
          *((_QWORD *)v57 + 8) = 0;
          *((_WORD *)v57 + 36) = 1;
          v57[74] = 0;
          *((_DWORD *)v57 + 19) = 0;
          v58 = objc_claimAutoreleasedReturnValue(-[CATransform3D stringWithFormat:]((id)v40[296], "stringWithFormat:", CFSTR("%zu"), v51));
          v59 = v58;
          v60 = v56 + 152 * v51;
          v63 = *(_QWORD *)(v60 + 24);
          v61 = (uint64_t *)(v60 + 24);
          v62 = v63;
          v64 = (apr_pool_t **)(v61 - 2);
          v65 = *(v61 - 1);
          if (v65 >= v63)
          {
            v67 = v53;
            v68 = v12;
            v69 = v40;
            v70 = (uint64_t)(v65 - (_QWORD)*v64) >> 4;
            v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 60)
              abort();
            v72 = v62 - (_QWORD)*v64;
            if (v72 >> 3 > v71)
              v71 = v72 >> 3;
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
              v73 = 0xFFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            v163 = v61;
            v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v73);
            v76 = &v74[16 * v70];
            *(_WORD *)v76 = 2;
            *((_QWORD *)v76 + 1) = v59;
            v77 = *v64;
            v78 = v64[1];
            if (v78 == *v64)
            {
              v80 = &v74[16 * v70];
              v40 = v69;
            }
            else
            {
              v79 = v64[1];
              v80 = &v74[16 * v70];
              v40 = v69;
              do
              {
                v81 = *((_WORD *)v79 - 8);
                v79 = (apr_pool_t *)((char *)v79 - 16);
                *((_WORD *)v80 - 8) = v81;
                v80 -= 16;
                v82 = *((_QWORD *)v79 + 1);
                *((_QWORD *)v79 + 1) = 0;
                *((_QWORD *)v80 + 1) = v82;
              }
              while (v79 != v77);
            }
            v66 = (apr_pool_t *)(v76 + 16);
            *v64 = (apr_pool_t *)v80;
            v160 = v77;
            v64[1] = (apr_pool_t *)(v76 + 16);
            v161 = (char *)v78;
            v83 = (uint64_t)v64[2];
            v64[2] = (apr_pool_t *)&v74[16 * v75];
            v162 = v83;
            newpool = v77;
            std::__split_buffer<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::~__split_buffer((uint64_t)&newpool);
            v12 = v68;
            v53 = v67;
          }
          else
          {
            *(_WORD *)v65 = 2;
            *(_QWORD *)(v65 + 8) = v58;
            v66 = (apr_pool_t *)(v65 + 16);
          }
          v64[1] = v66;
          v52 = (uint64_t)v171;
          v84 = (char *)v171 + 152 * v51;
          *(_OWORD *)(v84 + 104) = xmmword_4AA430;
          *((_QWORD *)v84 + 15) = 0x80000000800000;
          ++v51;
        }
        while (v51 < *(unsigned int *)(*((_QWORD *)v174 + 13) + 8));
        v13 = v151;
        v46 = v152;
        a5 = v150;
      }
    }
    v85 = operator new(0x28uLL);
    *v85 = off_724090;
    v85[1] = &v176;
    v85[2] = &v175;
    v85[3] = &v174;
    v85[4] = &v171;
    v182 = v85;
    v179[0] = off_7240D8;
    v179[1] = &v171;
    v180 = v179;
    newpool = v12;
    entry = find_entry(v153, &newpool, 8uLL, 0);
    v87 = a5;
    if (*entry)
      v88 = *(_QWORD *)(*entry + 32);
    else
      v88 = 0;
    v89 = *(_QWORD *)(a1 + 288) + *((_QWORD *)*v176 + 10);
    v170 = 0;
    memset(v169, 0, sizeof(v169));
    GTMTLIndirectResources_allResourcesByKey((uint64_t *)v169, (_DWORD **)v13[5], v89, 1, v87);
    bzero(&newpool, 0x3A0uLL);
    LODWORD(newpool) = 60;
    v165 = 2;
    v162 = -1;
    v164 = -1;
    v90 = *(_QWORD *)(v88 + 32);
    if (v90)
    {
      v91 = 0;
      while (1)
      {
        v92 = atomic_load((unsigned int *)(v90 + 4));
        v93 = v91 + (v92 >> 6);
        v94 = v93 - 1;
        if ((int)(v93 - 1) > 0)
          break;
        v90 = *(_QWORD *)(v90 + 40);
        v91 = v93 - 1;
        if (!v90)
          goto LABEL_58;
      }
      v94 = 0;
      v96 = v91;
      v121 = v90 - ((uint64_t)(int)v91 << 6);
      if ((*(_BYTE *)(v121 + 79) & 8) != 0)
        v95 = v121 + 64;
      else
        v95 = 0;
    }
    else
    {
      v94 = 0;
LABEL_58:
      v90 = 0;
      v95 = 0;
      v91 = v94;
      v96 = v94;
    }
    GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)&newpool, v13[2], v95, (uint64_t *)v169);
    v168 = *(unsigned int *)(v166 + 8);
    v167 = (char *)apr_palloc(v87, 16 * v168);
    bzero(v167, 16 * v168);
    v97 = atomic_load((unsigned int *)(v90 + 4));
    v98 = v94 + 1;
    if ((_DWORD)v98 == v91 + (v97 >> 6) - 1)
    {
      v90 = *(_QWORD *)(v90 + 40);
      v96 = v94 + 1;
    }
    v99 = (v98 << 32) | v96;
LABEL_62:
    v100 = v90 + 64;
    while (v90)
    {
      if ((*(_BYTE *)(v100 + ((uint64_t)(HIDWORD(v99) - (int)v99) << 6) + 15) & 8) == 0)
        break;
      v101 = (unint64_t *)(v100 + ((uint64_t)(HIDWORD(v99) - (int)v99) << 6));
      if (v89 <= *v101)
        break;
      GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)&newpool, v13[2], (uint64_t)v101, (uint64_t *)v169);
      v102 = atomic_load((unsigned int *)(v90 + 4));
      v103 = v99 + (v102 >> 6);
      v104 = (HIDWORD(v99) + 1);
      v99 = (v104 << 32) | v99;
      if ((_DWORD)v104 == v103 - 1)
      {
        v99 = (v104 << 32) | v104;
        v90 = *(_QWORD *)(v90 + 40);
        goto LABEL_62;
      }
    }
    if (v168)
    {
      v105 = 0;
      v106 = 0;
      while (1)
      {
        v107 = *(_DWORD *)&v167[v105];
        if (v107 == 3)
          break;
        if (v107 == 2)
        {
          v156 = *(_QWORD *)&v167[v105 + 8];
          v178 = v106;
          v109 = v180;
          if (!v180)
            goto LABEL_138;
LABEL_80:
          (*(void (**)(_QWORD *, unint64_t *, void ***))(*v180 + 48))(v109, &v156, &v178);
          goto LABEL_81;
        }
        if (v107 == 1)
        {
          Object = (void **)GTMTLSMContext_getObject(**((_QWORD **)*v176 + 5), *(_QWORD *)&v167[v105 + 8], v89);
          if (Object)
          {
            if (*(_DWORD *)Object == 44)
            {
              v156 = v89;
              v177 = v106;
              v178 = Object;
              if (!v182)
                goto LABEL_138;
              (*(void (**)(_BYTE *, unint64_t *, void ***, void ***))(*(_QWORD *)v182 + 48))(v182, &v156, &v178, &v177);
            }
          }
        }
LABEL_81:
        v106 = (void **)((char *)v106 + 1);
        v105 += 16;
        if (v168 <= (unint64_t)v106)
          goto LABEL_82;
      }
      v156 = *(_QWORD *)&v167[v105 + 8];
      v178 = v106;
      v109 = v180;
      if (!v180)
      {
LABEL_138:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      goto LABEL_80;
    }
LABEL_82:
    v111 = *(_QWORD **)(v155 + 248);
    v110 = *(_QWORD *)(v155 + 256);
    if ((unint64_t)v111 >= v110)
    {
      v113 = *(_QWORD *)(v155 + 240);
      v114 = ((uint64_t)v111 - v113) >> 5;
      if ((unint64_t)(v114 + 1) >> 59)
        abort();
      v115 = v110 - v113;
      v116 = v115 >> 4;
      if (v115 >> 4 <= (unint64_t)(v114 + 1))
        v116 = v114 + 1;
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFE0)
        v117 = 0x7FFFFFFFFFFFFFFLL;
      else
        v117 = v116;
      if (v117)
      {
        v118 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTable>>(v117);
        v120 = v119;
      }
      else
      {
        v118 = 0;
        v120 = 0;
      }
      v122 = &v118[32 * v114];
      *(_QWORD *)v122 = off_7274E0;
      *((_QWORD *)v122 + 1) = v44;
      *((_QWORD *)v122 + 2) = v12;
      *((_QWORD *)v122 + 3) = v46;
      v123 = *(_QWORD *)(v155 + 240);
      v124 = *(_QWORD *)(v155 + 248);
      if (v124 == v123)
      {
        v127 = vdupq_n_s64(v124);
        v125 = v122;
      }
      else
      {
        v125 = v122;
        do
        {
          *((_QWORD *)v125 - 4) = off_7274E0;
          v125 -= 32;
          v126 = *(_QWORD *)(v124 - 24);
          *(_QWORD *)(v124 - 24) = 0;
          *((_QWORD *)v125 + 1) = v126;
          *((_OWORD *)v125 + 1) = *(_OWORD *)(v124 - 16);
          v124 -= 32;
        }
        while (v124 != v123);
        v127 = *(int64x2_t *)(v155 + 240);
      }
      v112 = v122 + 32;
      *(_QWORD *)(v155 + 240) = v125;
      *(_QWORD *)(v155 + 248) = v112;
      *(_QWORD *)(v155 + 256) = &v118[32 * v120];
      v128 = (void *)v127.i64[0];
      if (v127.i64[1] != v127.i64[0])
      {
        v129 = v127.i64[1] - 32;
        v130 = (void (***)(uint64_t))(v127.i64[1] - 32);
        do
        {
          v131 = *v130;
          v130 -= 4;
          (*v131)(v129);
          v132 = v129 == (_QWORD)v128;
          v129 = (uint64_t)v130;
        }
        while (!v132);
      }
      if (v128)
        operator delete(v128);
    }
    else
    {
      *v111 = off_7274E0;
      v111[1] = v44;
      v111[2] = v12;
      v111[3] = v46;
      v112 = v111 + 4;
    }
    *(_QWORD *)(v155 + 248) = v112;
    v156 = (unint64_t)v12;
    v157 = 0uLL;
    v158 = 0;
    v134 = v171;
    v133 = v172;
    if (v172 != v171)
    {
      v135 = 0x86BCA1AF286BCA1BLL * ((v172 - v171) >> 3);
      if (v135 >= 0x1AF286BCA1AF287)
        abort();
      v136 = (AccelerationStructureViewer::IntersectionFunction *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunction>>(v135);
      *(_QWORD *)&v157 = v136;
      *((_QWORD *)&v157 + 1) = v136;
      v158 = (char *)v136 + 152 * v137;
      do
      {
        v138 = AccelerationStructureViewer::IntersectionFunction::IntersectionFunction(v136, v134);
        v134 = (const AccelerationStructureViewer::IntersectionFunction *)((char *)v134 + 152);
        v136 = (AccelerationStructureViewer::IntersectionFunction *)((char *)v138 + 152);
      }
      while (v134 != v133);
      *((_QWORD *)&v157 + 1) = v136;
    }
    v139 = *(char **)(v155 + 272);
    if (v139)
    {
      while (1)
      {
        while (1)
        {
          v140 = (char **)v139;
          v141 = *((_QWORD *)v139 + 4);
          if (v156 >= v141)
            break;
          v139 = *v140;
          v142 = v140;
          if (!*v140)
            goto LABEL_119;
        }
        if (v141 >= v156)
          break;
        v139 = v140[1];
        if (!v139)
        {
          v142 = v140 + 1;
          goto LABEL_119;
        }
      }
    }
    else
    {
      v142 = (char **)(v155 + 272);
      v140 = (char **)(v155 + 272);
LABEL_119:
      v143 = (char *)operator new(0x40uLL);
      *((_QWORD *)v143 + 4) = v156;
      *(_OWORD *)(v143 + 40) = v157;
      *((_QWORD *)v143 + 7) = v158;
      v158 = 0;
      v157 = 0uLL;
      *(_QWORD *)v143 = 0;
      *((_QWORD *)v143 + 1) = 0;
      *((_QWORD *)v143 + 2) = v140;
      *v142 = v143;
      v144 = **(_QWORD **)(v155 + 264);
      if (v144)
      {
        *(_QWORD *)(v155 + 264) = v144;
        v143 = *v142;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v155 + 272), (uint64_t *)v143);
      ++*(_QWORD *)(v155 + 280);
    }
    v178 = (void **)&v157;
    std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100](&v178);
    v145 = v180;
    if (v180 == v179)
    {
      v147 = 4;
      v145 = v179;
      v146 = v154;
    }
    else
    {
      v146 = v154;
      if (!v180)
        goto LABEL_127;
      v147 = 5;
    }
    (*(void (**)(void))(*v145 + 8 * v147))();
LABEL_127:
    v148 = v182;
    if (v182 == v181)
    {
      v149 = 4;
      v148 = v181;
    }
    else
    {
      if (!v182)
      {
LABEL_132:
        newpool = (apr_pool_t *)&v171;
        std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100]((void ***)&newpool);

LABEL_133:
        return;
      }
      v149 = 5;
    }
    (*(void (**)(void))(*v148 + 8 * v149))();
    goto LABEL_132;
  }
}

void sub_1AF488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  uint64_t v15;

  STACK[0x410] = v15 - 240;
  std::vector<AccelerationStructureViewer::IntersectionFunction>::__destroy_vector::operator()[abi:nn180100]((void ***)&STACK[0x410]);

  _Unwind_Resume(a1);
}

__n128 *std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long long>>(uint64_t **a1, unint64_t a2, __n128 a3)
{
  __n128 *v4;
  uint64_t **v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = (__n128 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[2].n128_u64[0];
        if (v7 <= a2)
          break;
        v4 = (__n128 *)v6->n128_u64[0];
        v5 = (uint64_t **)v6;
        if (!v6->n128_u64[0])
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = (__n128 *)v6->n128_u64[1];
      if (!v4)
      {
        v5 = (uint64_t **)&v6->n128_u64[1];
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (__n128 *)(a1 + 1);
LABEL_9:
    v8 = v6;
    v6 = (__n128 *)operator new(0x30uLL);
    v6[2] = a3;
    v6->n128_u64[0] = 0;
    v6->n128_u64[1] = 0;
    v6[1].n128_u64[0] = (unint64_t)v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

void std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_7240D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_7240D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  int v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  int v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  int v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  _WORD *v91;
  _WORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  void **v100;
  void **v101;
  void **v102;
  char *v103;
  __int16 v104;
  void *v105;
  void **v106;
  void (**v107)(AccelerationStructureViewer::IntersectionFunction *__hidden);
  void **v108;
  _WORD *v109;
  void **v110;
  id v111;
  char v112;
  char v113;
  void *__p;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  void **v118[6];

  v4 = *a2;
  v5 = *a3;
  AccelerationStructureViewer::IntersectionFunction::IntersectionFunction((AccelerationStructureViewer::IntersectionFunction *)&v107, (const AccelerationStructureViewer::IntersectionFunction *)(**(_QWORD **)(a1 + 8) + 152 * *a3));
  v113 = 1;
  v112 = 0;
  v6 = objc_alloc_init((Class)NSMutableArray);
  v7 = v6;
  if (v4)
  {
    if ((v4 & 1) != 0)
    {
      objc_msgSend(v6, "addObject:", CFSTR("instancing"));
      v8 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v10 = (char *)__p;
        v11 = (v115 - (_BYTE *)__p) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          abort();
        v13 = v116 - (_QWORD)__p;
        if ((uint64_t)(v116 - (_QWORD)__p) >> 1 > v12)
          v12 = v13 >> 1;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
        v15 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v15 = v12;
        if (v15)
        {
          v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v15);
          v10 = (char *)__p;
          v8 = v115;
        }
        else
        {
          v16 = 0;
        }
        v17 = (char *)(v15 + 4 * v11);
        v18 = v15 + 4 * v16;
        *(_DWORD *)v17 = 1;
        v9 = v17 + 4;
        while (v8 != v10)
        {
          v19 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        __p = v17;
        v115 = v9;
        v116 = v18;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v115 = 1;
        v9 = v8 + 4;
      }
      v115 = v9;
    }
    if ((v4 & 2) != 0)
    {
      objc_msgSend(v7, "addObject:", CFSTR("triangle_data"));
      v20 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v22 = (char *)__p;
        v23 = (v115 - (_BYTE *)__p) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          abort();
        v25 = v116 - (_QWORD)__p;
        if ((uint64_t)(v116 - (_QWORD)__p) >> 1 > v24)
          v24 = v25 >> 1;
        v14 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
        v26 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v26 = v24;
        if (v26)
        {
          v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v26);
          v22 = (char *)__p;
          v20 = v115;
        }
        else
        {
          v27 = 0;
        }
        v28 = (char *)(v26 + 4 * v23);
        v29 = v26 + 4 * v27;
        *(_DWORD *)v28 = 2;
        v21 = v28 + 4;
        while (v20 != v22)
        {
          v30 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v28 - 1) = v30;
          v28 -= 4;
        }
        __p = v28;
        v115 = v21;
        v116 = v29;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_DWORD *)v115 = 2;
        v21 = v20 + 4;
      }
      v115 = v21;
    }
    if ((v4 & 4) != 0)
    {
      objc_msgSend(v7, "addObject:", CFSTR("world_space_data"));
      v31 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v33 = (char *)__p;
        v34 = (v115 - (_BYTE *)__p) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          abort();
        v36 = v116 - (_QWORD)__p;
        if ((uint64_t)(v116 - (_QWORD)__p) >> 1 > v35)
          v35 = v36 >> 1;
        v14 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL;
        v37 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v37 = v35;
        if (v37)
        {
          v37 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v37);
          v33 = (char *)__p;
          v31 = v115;
        }
        else
        {
          v38 = 0;
        }
        v39 = (char *)(v37 + 4 * v34);
        v40 = v37 + 4 * v38;
        *(_DWORD *)v39 = 3;
        v32 = v39 + 4;
        while (v31 != v33)
        {
          v41 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v39 - 1) = v41;
          v39 -= 4;
        }
        __p = v39;
        v115 = v32;
        v116 = v40;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v115 = 3;
        v32 = v31 + 4;
      }
      v115 = v32;
    }
    if ((v4 & 0x10) != 0)
    {
      objc_msgSend(v7, "addObject:", CFSTR("primitive_motion"));
      v42 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v44 = (char *)__p;
        v45 = (v115 - (_BYTE *)__p) >> 2;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62)
          abort();
        v47 = v116 - (_QWORD)__p;
        if ((uint64_t)(v116 - (_QWORD)__p) >> 1 > v46)
          v46 = v47 >> 1;
        v14 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL;
        v48 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v48 = v46;
        if (v48)
        {
          v48 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v48);
          v44 = (char *)__p;
          v42 = v115;
        }
        else
        {
          v49 = 0;
        }
        v50 = (char *)(v48 + 4 * v45);
        v51 = v48 + 4 * v49;
        *(_DWORD *)v50 = 4;
        v43 = v50 + 4;
        while (v42 != v44)
        {
          v52 = *((_DWORD *)v42 - 1);
          v42 -= 4;
          *((_DWORD *)v50 - 1) = v52;
          v50 -= 4;
        }
        __p = v50;
        v115 = v43;
        v116 = v51;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_DWORD *)v115 = 4;
        v43 = v42 + 4;
      }
      v115 = v43;
    }
    if ((v4 & 8) != 0)
    {
      objc_msgSend(v7, "addObject:", CFSTR("instance_motion"));
      v53 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v55 = (char *)__p;
        v56 = (v115 - (_BYTE *)__p) >> 2;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62)
          abort();
        v58 = v116 - (_QWORD)__p;
        if ((uint64_t)(v116 - (_QWORD)__p) >> 1 > v57)
          v57 = v58 >> 1;
        v14 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL;
        v59 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v59 = v57;
        if (v59)
        {
          v59 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v59);
          v55 = (char *)__p;
          v53 = v115;
        }
        else
        {
          v60 = 0;
        }
        v61 = (char *)(v59 + 4 * v56);
        v62 = v59 + 4 * v60;
        *(_DWORD *)v61 = 5;
        v54 = v61 + 4;
        while (v53 != v55)
        {
          v63 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *((_DWORD *)v61 - 1) = v63;
          v61 -= 4;
        }
        __p = v61;
        v115 = v54;
        v116 = v62;
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_DWORD *)v115 = 5;
        v54 = v53 + 4;
      }
      v115 = v54;
    }
    if ((v4 & 0x20) != 0)
    {
      objc_msgSend(v7, "addObject:", CFSTR("extended_limits"));
      v64 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v66 = (char *)__p;
        v67 = (v115 - (_BYTE *)__p) >> 2;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 62)
          abort();
        v69 = v116 - (_QWORD)__p;
        if ((uint64_t)(v116 - (_QWORD)__p) >> 1 > v68)
          v68 = v69 >> 1;
        v14 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL;
        v70 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v70 = v68;
        if (v70)
        {
          v70 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v70);
          v66 = (char *)__p;
          v64 = v115;
        }
        else
        {
          v71 = 0;
        }
        v72 = (char *)(v70 + 4 * v67);
        v73 = v70 + 4 * v71;
        *(_DWORD *)v72 = 6;
        v65 = v72 + 4;
        while (v64 != v66)
        {
          v74 = *((_DWORD *)v64 - 1);
          v64 -= 4;
          *((_DWORD *)v72 - 1) = v74;
          v72 -= 4;
        }
        __p = v72;
        v115 = v65;
        v116 = v73;
        if (v66)
          operator delete(v66);
      }
      else
      {
        *(_DWORD *)v115 = 6;
        v65 = v64 + 4;
      }
      v115 = v65;
    }
    if ((v4 & 0x40) != 0)
    {
      objc_msgSend(v7, "addObject:", CFSTR("max_levels"));
      v75 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v77 = (char *)__p;
        v78 = (v115 - (_BYTE *)__p) >> 2;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 62)
          abort();
        v80 = v116 - (_QWORD)__p;
        if ((uint64_t)(v116 - (_QWORD)__p) >> 1 > v79)
          v79 = v80 >> 1;
        v14 = (unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL;
        v81 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v81 = v79;
        if (v81)
        {
          v81 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v81);
          v77 = (char *)__p;
          v75 = v115;
        }
        else
        {
          v82 = 0;
        }
        v83 = (char *)(v81 + 4 * v78);
        v84 = v81 + 4 * v82;
        *(_DWORD *)v83 = 8;
        v76 = v83 + 4;
        while (v75 != v77)
        {
          v85 = *((_DWORD *)v75 - 1);
          v75 -= 4;
          *((_DWORD *)v83 - 1) = v85;
          v83 -= 4;
        }
        __p = v83;
        v115 = v76;
        v116 = v84;
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_DWORD *)v115 = 8;
        v76 = v75 + 4;
      }
      v115 = v76;
    }
  }
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", ")));
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Opaque<%@>"), v86));
  v88 = v111;
  v111 = v87;

  v89 = v111;
  v90 = v89;
  v91 = v109;
  if (v109 >= (_WORD *)v110)
  {
    v93 = ((char *)v109 - (char *)v108) >> 4;
    v94 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 60)
      abort();
    v95 = (char *)v110 - (char *)v108;
    if (v110 - v108 > v94)
      v94 = v95 >> 3;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0)
      v96 = 0xFFFFFFFFFFFFFFFLL;
    else
      v96 = v94;
    v118[4] = (void **)&v110;
    v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v96);
    v99 = &v97[16 * v93];
    *(_WORD *)v99 = 2;
    *((_QWORD *)v99 + 1) = v90;
    v101 = v108;
    v100 = (void **)v109;
    if (v109 == (_WORD *)v108)
    {
      v103 = &v97[16 * v93];
    }
    else
    {
      v102 = (void **)v109;
      v103 = &v97[16 * v93];
      do
      {
        v104 = *((_WORD *)v102 - 8);
        v102 -= 2;
        *((_WORD *)v103 - 8) = v104;
        v103 -= 16;
        v105 = v102[1];
        v102[1] = 0;
        *((_QWORD *)v103 + 1) = v105;
      }
      while (v102 != v101);
    }
    v92 = v99 + 16;
    v108 = (void **)v103;
    v109 = v99 + 16;
    v106 = v110;
    v110 = (void **)&v97[16 * v98];
    v118[2] = v100;
    v118[3] = v106;
    v118[0] = v101;
    v118[1] = v101;
    std::__split_buffer<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::~__split_buffer((uint64_t)v118);
  }
  else
  {
    *v109 = 2;
    *((_QWORD *)v91 + 1) = v89;
    v92 = v91 + 8;
  }
  v109 = v92;
  AccelerationStructureViewer::IntersectionFunction::operator=(**(_QWORD **)(a1 + 8) + 152 * v5, (uint64_t)&v107);

  v107 = off_7246B8;
  v118[0] = (void **)&v117;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](v118);
  if (__p)
  {
    v115 = (char *)__p;
    operator delete(__p);
  }

  v118[0] = (void **)&v108;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](v118);
}

void sub_1AFE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 72) = &a26;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100]((void ***)(v27 - 72));
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  *(_QWORD *)(v27 - 72) = &a11;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v27 - 72));
  _Unwind_Resume(a1);
}

uint64_t AccelerationStructureViewer::IntersectionFunction::operator=(uint64_t a1, uint64_t a2)
{
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id *v15;
  id *v16;
  id *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (***v45)(_QWORD);
  void (***v46)(_QWORD);
  void (**v47)(_QWORD);
  BOOL v48;

  if (a1 == a2)
  {
    objc_storeStrong((id *)(a1 + 32), *(id *)(a1 + 32));
    return a1;
  }
  v4 = *(_WORD **)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = (v5 - v6) >> 4;
  if (v7 > (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 4)
  {
    std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__vdeallocate((void **)(a1 + 8));
    if (v5 - v6 < 0)
      goto LABEL_52;
    v8 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 8);
    v9 = v8 >> 3;
    if (v8 >> 3 <= v7)
      v9 = (v5 - v6) >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__vallocate[abi:nn180100]((_QWORD *)(a1 + 8), v10);
    v11 = (_QWORD *)(a1 + 8);
    v12 = v6;
    goto LABEL_13;
  }
  v13 = (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v4) >> 4;
  if (v13 < v7)
  {
    v14 = v6 + 16 * v13;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *>(*(_QWORD *)(a2 + 8), v14, v4);
    v11 = (_QWORD *)(a1 + 8);
    v12 = v14;
LABEL_13:
    std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__construct_at_end<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>*,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>*>(v11, v12, v5);
    goto LABEL_17;
  }
  v15 = (id *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *>(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v4);
  v16 = *(id **)(a1 + 16);
  if (v16 != v15)
  {
    do
    {
      v17 = v16 - 2;

      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 16) = v15;
LABEL_17:
  objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
  v18 = *(_OWORD *)(a2 + 40);
  v19 = *(_OWORD *)(a2 + 56);
  v20 = *(char **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v19;
  *(_OWORD *)(a1 + 40) = v18;
  v21 = *(char **)(a2 + 80);
  v22 = *(_BYTE **)(a2 + 88);
  v23 = v22 - v21;
  v24 = (v22 - v21) >> 2;
  v25 = *(_QWORD *)(a1 + 96);
  if (v24 <= (v25 - (uint64_t)v20) >> 2)
  {
    v28 = *(_BYTE **)(a1 + 88);
    v29 = (v28 - v20) >> 2;
    if (v29 < v24)
    {
      v30 = &v21[4 * v29];
      if (v28 != v20)
      {
        memmove(v20, *(const void **)(a2 + 80), v28 - v20);
        v20 = *(char **)(a1 + 88);
      }
      v23 = v22 - v30;
      if (v22 == v30)
        goto LABEL_35;
      v31 = v20;
      v32 = v30;
      goto LABEL_34;
    }
  }
  else
  {
    if (v20)
    {
      *(_QWORD *)(a1 + 88) = v20;
      operator delete(v20);
      v25 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
    }
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_52;
    v26 = v25 >> 1;
    if (v25 >> 1 <= v24)
      v26 = (v22 - v21) >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    std::vector<AccelerationStructureViewer::IntersectionFunctionTag>::__vallocate[abi:nn180100]((_QWORD *)(a1 + 80), v27);
    v20 = *(char **)(a1 + 88);
  }
  if (v22 != v21)
  {
    v31 = v20;
    v32 = v21;
LABEL_34:
    memmove(v31, v32, v23);
  }
LABEL_35:
  v33 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 88) = &v20[v23];
  v34 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v34;
  v36 = *(_QWORD *)(a2 + 128);
  v35 = *(_QWORD *)(a2 + 136);
  v37 = 0xEEEEEEEEEEEEEEEFLL * ((v35 - v36) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 144) - v33) >> 3) < v37)
  {
    std::vector<AccelerationStructureViewer::Property>::__vdeallocate((void **)(a1 + 128));
    if (v37 <= 0x222222222222222)
    {
      v38 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 128)) >> 3);
      if (v38 <= v37)
        v38 = 0xEEEEEEEEEEEEEEEFLL * ((v35 - v36) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 128)) >> 3) >= 0x111111111111111)
        v39 = 0x222222222222222;
      else
        v39 = v38;
      std::vector<AccelerationStructureViewer::Property>::__vallocate[abi:nn180100]((_QWORD *)(a1 + 128), v39);
      v40 = (char *)(a1 + 128);
      v41 = v36;
      goto LABEL_45;
    }
LABEL_52:
    abort();
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 136) - v33) >> 3) < v37)
  {
    v42 = v36 + 8 * ((*(_QWORD *)(a1 + 136) - v33) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AccelerationStructureViewer::Property *,AccelerationStructureViewer::Property *,AccelerationStructureViewer::Property *>(v36, v42, v33);
    v40 = (char *)(a1 + 128);
    v41 = v42;
LABEL_45:
    std::vector<AccelerationStructureViewer::Property>::__construct_at_end<AccelerationStructureViewer::Property*,AccelerationStructureViewer::Property*>(v40, v41, v35);
    return a1;
  }
  v43 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AccelerationStructureViewer::Property *,AccelerationStructureViewer::Property *,AccelerationStructureViewer::Property *>(v36, v35, v33);
  v44 = *(_QWORD *)(a1 + 136);
  if (v44 != v43)
  {
    v45 = (void (***)(_QWORD))(v44 - 120);
    v46 = (void (***)(_QWORD))(v44 - 120);
    do
    {
      v47 = *v46;
      v46 -= 15;
      (*v47)(v45);
      v48 = v45 == (void (***)(_QWORD))v43;
      v45 = v46;
    }
    while (!v48);
  }
  *(_QWORD *)(a1 + 136) = v43;
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AccelerationStructureViewer::Property *,AccelerationStructureViewer::Property *,AccelerationStructureViewer::Property *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int16 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  uint64_t v11;
  void **v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  unint64_t v23;
  void **v24;
  _QWORD *v25;
  void *v26;
  id *v27;
  id *i;
  void *v29;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_WORD *)(v5 + 8);
      *(_BYTE *)(a3 + 10) = *(_BYTE *)(v5 + 10);
      *(_WORD *)(a3 + 8) = v6;
      objc_storeStrong((id *)(a3 + 16), *(id *)(v5 + 16));
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v5 + 24);
      v7 = *(_OWORD *)(v5 + 40);
      v8 = *(_OWORD *)(v5 + 56);
      v9 = *(_OWORD *)(v5 + 72);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
      *(_OWORD *)(a3 + 72) = v9;
      *(_OWORD *)(a3 + 56) = v8;
      *(_OWORD *)(a3 + 40) = v7;
      if (a3 != v5)
      {
        v10 = (void **)(a3 + 96);
        v11 = *(_QWORD *)(a3 + 96);
        v13 = *(void ***)(v5 + 96);
        v12 = *(void ***)(v5 + 104);
        v14 = v12 - v13;
        v15 = *(_QWORD *)(a3 + 112);
        if (v14 <= (v15 - v11) >> 3)
        {
          v23 = (*(_QWORD *)(a3 + 104) - v11) >> 3;
          if (v23 >= v14)
          {
            v27 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<NSString * {__strong}*,NSString * {__strong}*,NSString * {__strong}*>(*(void ***)(v5 + 96), *(void ***)(v5 + 104), *(id **)(a3 + 96));
            for (i = *(id **)(a3 + 104); i != v27; --i)
            {
              v29 = *(i - 1);

            }
            *(_QWORD *)(a3 + 104) = v27;
          }
          else
          {
            v24 = &v13[v23];
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<NSString * {__strong}*,NSString * {__strong}*,NSString * {__strong}*>(*(void ***)(v5 + 96), v24, *(id **)(a3 + 96));
            v25 = *(_QWORD **)(a3 + 104);
            while (v24 != v12)
            {
              v26 = *v24++;
              *v25++ = v26;
            }
            *(_QWORD *)(a3 + 104) = v25;
          }
        }
        else
        {
          if (v11)
          {
            v16 = *(_QWORD *)(a3 + 104);
            v17 = *(void **)(a3 + 96);
            if (v16 != v11)
            {
              do
              {
                v18 = *(void **)(v16 - 8);
                v16 -= 8;

              }
              while (v16 != v11);
              v17 = *v10;
            }
            *(_QWORD *)(a3 + 104) = v11;
            operator delete(v17);
            v15 = 0;
            *v10 = 0;
            *(_QWORD *)(a3 + 104) = 0;
            *(_QWORD *)(a3 + 112) = 0;
          }
          if ((char *)v12 - (char *)v13 < 0)
            abort();
          v19 = v15 >> 2;
          if (v15 >> 2 <= v14)
            v19 = v12 - v13;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          std::vector<NSString * {__strong}>::__vallocate[abi:nn180100]((_QWORD *)(a3 + 96), v20);
          v21 = *(_QWORD **)(a3 + 104);
          while (v13 != v12)
          {
            v22 = *v13++;
            *v21++ = v22;
          }
          *(_QWORD *)(a3 + 104) = v21;
        }
      }
      v5 += 120;
      a3 += 120;
    }
    while (v5 != a2);
  }
  return a3;
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<NSString * {__strong}*,NSString * {__strong}*,NSString * {__strong}*>(void **a1, void **a2, id *location)
{
  void **v5;
  void *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5++;
      objc_storeStrong(location++, v6);
    }
    while (v5 != a2);
  }
  return location;
}

_WORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *,std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}> *>(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v5;
  id *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = (id *)(a3 + 4);
      *a3 = *(_WORD *)v5;
      a3 += 8;
      objc_storeStrong(v6, *(id *)(v5 + 8));
      v5 += 16;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0>,void ()(unsigned long long,GTMTLSMFunctionHandle const*,unsigned long)>::~__func()
{
  operator delete();
}

__n128 std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0>,void ()(unsigned long long,GTMTLSMFunctionHandle const*,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_724090;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0>,void ()(unsigned long long,GTMTLSMFunctionHandle const*,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_724090;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0,std::allocator<AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(GTMTLReplayController *,GTMTLSMObject const*,long,apr_pool_t *,std::map<unsigned long long,unsigned long long> &)::$_0>,void ()(unsigned long long,GTMTLSMFunctionHandle const*,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  _QWORD *Object;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  void *v13;
  id v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  int *v42;
  int v43;
  int *v44;
  int *v45;
  int *v46;
  int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  id v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  unint64_t v88;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  void (**v94)(AccelerationStructureViewer::IntersectionFunction *__hidden);
  char *v95;
  char *v96;
  char *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  int v104;
  void *__p;
  int *v106;
  unint64_t v107;
  uint64_t v108;
  char **v109;
  _QWORD v110[16];

  v4 = *a3;
  v88 = *a4;
  Object = GTMTLSMContext_getObject(**(_QWORD **)(***(_QWORD ***)(a1 + 8) + 40), *(_QWORD *)(*a3 + 40), *a2);
  if (Object && *(_DWORD *)Object == 43 && v88 < *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 104) + 8))
  {
    v85 = Object;
    AccelerationStructureViewer::IntersectionFunction::IntersectionFunction((AccelerationStructureViewer::IntersectionFunction *)&v94, (const AccelerationStructureViewer::IntersectionFunction *)(**(_QWORD **)(a1 + 32) + 152 * v88));
    v102 = 0;
    v99 = *(_QWORD *)(v4 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(**(id **)(a1 + 16), "functionForKey:"));
    v87 = v6;
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "label"));
      if (v7
        && (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "label")),
            v9 = objc_msgSend(v8, "isEqualToString:", &stru_7282A8),
            v8,
            v7,
            (v9 & 1) == 0))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "label"));
      }
      else
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "name"));
        if (v10
          && (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "name")),
              v12 = objc_msgSend(v11, "isEqualToString:", &stru_7282A8),
              v11,
              v10,
              (v12 & 1) == 0))
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "name"));
        }
        else
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MTLFunction 0x%llx"), v87));
        }
      }
      v16 = v98;
      v98 = v13;

      v17 = v98;
      v18 = v17;
      v19 = v96;
      if (v96 >= v97)
      {
        v21 = (v96 - v95) >> 4;
        v22 = v21 + 1;
        v15 = v85;
        if ((unint64_t)(v21 + 1) >> 60)
          abort();
        v23 = v97 - v95;
        if ((v97 - v95) >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        v110[4] = &v97;
        v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>>(v24);
        v27 = &v25[16 * v21];
        *(_WORD *)v27 = 2;
        *((_QWORD *)v27 + 1) = v18;
        v29 = v95;
        v28 = v96;
        if (v96 == v95)
        {
          v31 = &v25[16 * v21];
        }
        else
        {
          v30 = v96;
          v31 = &v25[16 * v21];
          do
          {
            v32 = *((_WORD *)v30 - 8);
            v30 -= 16;
            *((_WORD *)v31 - 8) = v32;
            v31 -= 16;
            v33 = *((_QWORD *)v30 + 1);
            *((_QWORD *)v30 + 1) = 0;
            *((_QWORD *)v31 + 1) = v33;
          }
          while (v30 != v29);
        }
        v20 = v27 + 16;
        v95 = v31;
        v96 = v27 + 16;
        v34 = v97;
        v97 = &v25[16 * v26];
        v110[2] = v28;
        v110[3] = v34;
        v110[0] = v29;
        v110[1] = v29;
        std::__split_buffer<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::~__split_buffer((uint64_t)v110);
      }
      else
      {
        *(_WORD *)v96 = 2;
        *((_QWORD *)v19 + 1) = v17;
        v20 = v19 + 16;
        v15 = v85;
      }
      v96 = v20;
    }
    else
    {
      v14 = v98;
      v98 = 0;

      v15 = v85;
    }
    v100 = v15[5];
    v101 = *(unsigned __int16 *)(v15[10] + 42);
    v35 = v15[14];
    if (v35)
      v103 = *(_BYTE *)(v35 + 40) & 1;
    v84 = v87;
    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "reflectionWithOptions:", 65539));
    v36 = objc_msgSend(v86, "primitiveKind");
    if ((unint64_t)v36 < 3)
      v104 = (int)v36;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "tags"));
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v90, v110, 16);
    if (v38)
    {
      v39 = *(_QWORD *)v91;
LABEL_34:
      v40 = 0;
      while (2)
      {
        if (*(_QWORD *)v91 != v39)
          objc_enumerationMutation(v37);
        v41 = *(id *)(*((_QWORD *)&v90 + 1) + 8 * v40);
        switch((unint64_t)objc_msgSend(v41, "tagType"))
        {
          case 1uLL:
            v42 = v106;
            if ((unint64_t)v106 < v107)
            {
              v43 = 1;
              goto LABEL_54;
            }
            v47 = (int *)__p;
            v62 = ((char *)v106 - (_BYTE *)__p) >> 2;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 62)
              abort();
            v64 = v107 - (_QWORD)__p;
            if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v63)
              v63 = v64 >> 1;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v63;
            if (v51)
            {
              v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
              v47 = (int *)__p;
              v42 = v106;
            }
            else
            {
              v52 = 0;
            }
            v74 = (int *)(v51 + 4 * v62);
            *v74 = 1;
            v46 = v74 + 1;
            while (v42 != v47)
            {
              v79 = *--v42;
              *--v74 = v79;
            }
            goto LABEL_159;
          case 2uLL:
            v42 = v106;
            if ((unint64_t)v106 < v107)
            {
              v43 = 2;
              goto LABEL_54;
            }
            v47 = (int *)__p;
            v65 = ((char *)v106 - (_BYTE *)__p) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              abort();
            v67 = v107 - (_QWORD)__p;
            if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v66;
            if (v51)
            {
              v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
              v47 = (int *)__p;
              v42 = v106;
            }
            else
            {
              v52 = 0;
            }
            v74 = (int *)(v51 + 4 * v65);
            *v74 = 2;
            v46 = v74 + 1;
            while (v42 != v47)
            {
              v80 = *--v42;
              *--v74 = v80;
            }
            goto LABEL_159;
          case 3uLL:
            v42 = v106;
            if ((unint64_t)v106 < v107)
            {
              v43 = 3;
              goto LABEL_54;
            }
            v47 = (int *)__p;
            v53 = ((char *)v106 - (_BYTE *)__p) >> 2;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              abort();
            v55 = v107 - (_QWORD)__p;
            if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v54;
            if (v51)
            {
              v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
              v47 = (int *)__p;
              v42 = v106;
            }
            else
            {
              v52 = 0;
            }
            v74 = (int *)(v51 + 4 * v53);
            *v74 = 3;
            v46 = v74 + 1;
            while (v42 != v47)
            {
              v76 = *--v42;
              *--v74 = v76;
            }
            goto LABEL_159;
          case 4uLL:
            v42 = v106;
            if ((unint64_t)v106 < v107)
            {
              v43 = 5;
              goto LABEL_54;
            }
            v47 = (int *)__p;
            v56 = ((char *)v106 - (_BYTE *)__p) >> 2;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
              abort();
            v58 = v107 - (_QWORD)__p;
            if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v57;
            if (v51)
            {
              v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
              v47 = (int *)__p;
              v42 = v106;
            }
            else
            {
              v52 = 0;
            }
            v74 = (int *)(v51 + 4 * v56);
            *v74 = 5;
            v46 = v74 + 1;
            while (v42 != v47)
            {
              v77 = *--v42;
              *--v74 = v77;
            }
            goto LABEL_159;
          case 5uLL:
            v42 = v106;
            if ((unint64_t)v106 < v107)
            {
              v43 = 4;
              goto LABEL_54;
            }
            v47 = (int *)__p;
            v48 = ((char *)v106 - (_BYTE *)__p) >> 2;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62)
              abort();
            v50 = v107 - (_QWORD)__p;
            if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v49)
              v49 = v50 >> 1;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
              v47 = (int *)__p;
              v42 = v106;
            }
            else
            {
              v52 = 0;
            }
            v74 = (int *)(v51 + 4 * v48);
            *v74 = 4;
            v46 = v74 + 1;
            while (v42 != v47)
            {
              v75 = *--v42;
              *--v74 = v75;
            }
            goto LABEL_159;
          case 6uLL:
            v42 = v106;
            if ((unint64_t)v106 < v107)
            {
              v43 = 6;
              goto LABEL_54;
            }
            v47 = (int *)__p;
            v68 = ((char *)v106 - (_BYTE *)__p) >> 2;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 62)
              abort();
            v70 = v107 - (_QWORD)__p;
            if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v69)
              v69 = v70 >> 1;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v69;
            if (v51)
            {
              v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
              v47 = (int *)__p;
              v42 = v106;
            }
            else
            {
              v52 = 0;
            }
            v74 = (int *)(v51 + 4 * v68);
            *v74 = 6;
            v46 = v74 + 1;
            while (v42 != v47)
            {
              v81 = *--v42;
              *--v74 = v81;
            }
            goto LABEL_159;
          case 7uLL:
            v42 = v106;
            if ((unint64_t)v106 >= v107)
            {
              v47 = (int *)__p;
              v71 = ((char *)v106 - (_BYTE *)__p) >> 2;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 62)
                abort();
              v73 = v107 - (_QWORD)__p;
              if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v72)
                v72 = v73 >> 1;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v72;
              if (v51)
              {
                v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
                v47 = (int *)__p;
                v42 = v106;
              }
              else
              {
                v52 = 0;
              }
              v74 = (int *)(v51 + 4 * v71);
              *v74 = 7;
              v46 = v74 + 1;
              while (v42 != v47)
              {
                v82 = *--v42;
                *--v74 = v82;
              }
              goto LABEL_159;
            }
            v43 = 7;
LABEL_54:
            *v42 = v43;
            v45 = v42 + 1;
            goto LABEL_55;
          case 8uLL:
            v44 = v106;
            if ((unint64_t)v106 >= v107)
            {
              v47 = (int *)__p;
              v59 = ((char *)v106 - (_BYTE *)__p) >> 2;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
                abort();
              v61 = v107 - (_QWORD)__p;
              if ((uint64_t)(v107 - (_QWORD)__p) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v60;
              if (v51)
              {
                v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::IntersectionFunctionTag>>(v51);
                v47 = (int *)__p;
                v44 = v106;
              }
              else
              {
                v52 = 0;
              }
              v74 = (int *)(v51 + 4 * v59);
              *v74 = 8;
              v46 = v74 + 1;
              while (v44 != v47)
              {
                v78 = *--v44;
                *--v74 = v78;
              }
LABEL_159:
              __p = v74;
              v106 = v46;
              v107 = v51 + 4 * v52;
              if (v47)
                operator delete(v47);
            }
            else
            {
              *v106 = 8;
              v45 = v44 + 1;
LABEL_55:
              v46 = v45;
            }
            v106 = v46;
LABEL_162:

            if ((id)++v40 != v38)
              continue;
            v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v90, v110, 16);
            if (!v38)
              goto LABEL_164;
            goto LABEL_34;
          default:
            goto LABEL_162;
        }
      }
    }
LABEL_164:

    v83 = v85[15];
    if (v83)
      v103 = *(_BYTE *)(v83 + 40) & 1;
    AccelerationStructureViewer::IntersectionFunction::operator=(**(_QWORD **)(a1 + 32) + 152 * v88, (uint64_t)&v94);

    v94 = off_7246B8;
    v109 = (char **)&v108;
    std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100]((void ***)&v109);
    if (__p)
    {
      v106 = (int *)__p;
      operator delete(__p);
    }

    v109 = &v95;
    std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v109);
  }
}

void sub_1B0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v41;
  void *v42;
  uint64_t v43;

  *(_QWORD *)(v43 - 232) = &a41;
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100]((void ***)(v43 - 232));
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }

  *(_QWORD *)(v43 - 232) = &a26;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v43 - 232));
  _Unwind_Resume(a1);
}

void ___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource30encodeAccelerationStructureDAGE29MTLGenericBVHHeaderVersionSPIP14NSMutableArrayIPU35objcproto24MTLAccelerationStructure11objc_objectEPU26objcproto15MTLCommandQueue11objc_objectP26MTLCommandBufferDescriptorPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  id v15;
  int v16;
  id v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  float32x4_t v26;
  uint64_t v27;
  char *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x4_t v34;
  __int128 v35;
  float v36;
  float32x4_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  float32x4_t v41;
  __int128 v42;
  double v43;
  simd_float3 *v44;
  __int32 v45;
  __int32 v46;
  uint64_t v47;
  __int32 v48;
  __int32 v49;
  uint64_t v50;
  uint64_t v51;
  simd_float3 v52;
  simd_float3 v53;
  simd_float3 *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  simd_float3 *v58;
  simd_float3 *v59;
  simd_float3 v60;
  simd_float3 v61;
  simd_float3 v62;
  simd_float3 v63;
  double v64;
  __int32 v65;
  __int32 v66;
  uint64_t v67;
  __int32 v68;
  uint64_t v69;
  __int32 *v70;
  uint64_t v71;
  simd_float3 v72;
  simd_float3 v73;
  __int32 v74;
  uint64_t v75;
  void *v76;
  id v77;
  _OWORD v78[4];
  simd::float4x3 v79;

  NSLog(CFSTR("Running encode completion handler for %zu"), *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(v2 + 24)), "contents") + v3;
  switch(v4[2])
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 48);
      v6 = 1;
      goto LABEL_6;
    case 1:
      v7 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v7 + 8) = 2;
      if (!*(_QWORD *)(v7 + 152))
        return;
      v8 = v4[8];
      break;
    case 2:
      v5 = *(_QWORD *)(a1 + 48);
      v6 = 3;
LABEL_6:
      *(_DWORD *)(v5 + 8) = v6;
      return;
    case 3:
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v9 + 8) = 4;
      if (!*(_QWORD *)(v9 + 152))
        return;
      v10 = *(_QWORD *)(v9 + 64);
      v11 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(v9 + 56)), "contents");
      v12 = v4[5];
      if ((_DWORD)v12)
      {
        v8 = 0;
        v13 = &v11[v10 + 88];
        do
        {
          v14 = *(_DWORD *)v13;
          v13 += 104;
          v8 += v14;
          --v12;
        }
        while (v12);
      }
      else
      {
        v8 = 0;
      }
      break;
    default:
      return;
  }
  v15 = objc_msgSend(*(id *)(a1 + 32), "newBufferWithLength:options:", v8 << 7, 0);
  v16 = v4[22];
  v17 = objc_retainAutorelease(v15);
  v18 = v17;
  if (v16 == 1)
  {
    v19 = (char *)objc_msgSend(v17, "contents");
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(v20 + 160);
    v22 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(v20 + 152)), "contents");
    if (v8)
    {
      v24 = 0;
      v25 = &v22[v21];
      v26 = (float32x4_t)xmmword_4AA440;
      do
      {
        v27 = 0;
        v28 = &v25[64 * v24];
        v29 = *((float *)v28 + 9);
        v30 = *((float *)v28 + 10);
        v31 = *((float *)v28 + 11);
        v32 = *((float *)v28 + 12);
        v33 = v30 * v32;
        v34.i32[3] = 0;
        v34.f32[0] = (float)((float)((float)(v31 * v31) + (float)(v30 * v30)) * -2.0) + 1.0;
        v34.f32[1] = (float)((float)(v31 * v32) + (float)(v29 * v30)) + (float)((float)(v31 * v32) + (float)(v29 * v30));
        v34.f32[2] = (float)-(float)((float)(v30 * v32) - (float)(v29 * v31))
                   - (float)((float)(v30 * v32) - (float)(v29 * v31));
        v37.i32[3] = 0;
        v37.f32[0] = (float)-(float)((float)(v31 * v32) - (float)(v29 * v30))
                   - (float)((float)(v31 * v32) - (float)(v29 * v30));
        LODWORD(v23) = *((_DWORD *)v28 + 3);
        DWORD1(v23) = *((_DWORD *)v28 + 1);
        *(_QWORD *)&v35 = *((_QWORD *)v28 + 2);
        v36 = v29 * v32;
        v37.f32[1] = (float)((float)((float)(v31 * v31) + (float)(v29 * v29)) * -2.0) + 1.0;
        v37.f32[2] = (float)(v36 + (float)(v30 * v31)) + (float)(v36 + (float)(v30 * v31));
        *(float *)&v38 = (float)(v33 + (float)(v29 * v31)) + (float)(v33 + (float)(v29 * v31));
        *(float *)&v39 = (float)-(float)(v36 - (float)(v30 * v31)) - (float)(v36 - (float)(v30 * v31));
        *(float *)&v40 = (float)((float)((float)(v30 * v30) + (float)(v29 * v29)) * -2.0) + 1.0;
        v41.i64[0] = __PAIR64__(v39, v38);
        v41.i64[1] = v40;
        *((_QWORD *)&v35 + 1) = *((unsigned int *)v28 + 2);
        *(_QWORD *)&v42 = *(_QWORD *)(v28 + 52);
        DWORD2(v42) = *((_DWORD *)v28 + 15);
        HIDWORD(v42) = 1.0;
        v78[0] = *(unsigned int *)v28;
        v78[1] = v23;
        v78[2] = v35;
        v78[3] = v42;
        do
        {
          v79.columns[v27] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(v78[v27])), v37, *(float32x2_t *)&v78[v27], 1), v41, (float32x4_t)v78[v27], 2), v26, (float32x4_t)v78[v27], 3);
          ++v27;
        }
        while (v27 != 4);
        v43 = invertSRTMatrix(&v79);
        v26 = (float32x4_t)xmmword_4AA440;
        v44 = (simd_float3 *)&v19[128 * v24];
        v44->i32[2] = v45;
        *(double *)v44->i64 = v43;
        v44[1].i32[2] = v46;
        v44[1].i64[0] = v47;
        v44[2].i32[2] = v48;
        v44[3].i32[2] = v49;
        v44[2].i64[0] = v50;
        v44[3].i64[0] = v51;
        v52 = v79.columns[1];
        v44[4] = v79.columns[0];
        v44[5] = v52;
        v53 = v79.columns[3];
        ++v24;
        v44[6] = v79.columns[2];
        v44[7] = v53;
      }
      while (v24 != v8);
    }
  }
  else
  {
    v54 = (simd_float3 *)objc_msgSend(v17, "contents");
    v55 = *(_QWORD *)(a1 + 48);
    v56 = *(_QWORD *)(v55 + 160);
    v57 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(v55 + 152)), "contents");
    if (v8)
    {
      v58 = v54 + 2;
      v59 = (simd_float3 *)&v57[v56 + 32];
      do
      {
        v60 = v59[-2];
        v61 = v59[-1];
        v62 = *v59;
        v63 = v59[1];
        v59 += 4;
        v79.columns[0] = v60;
        v79.columns[1] = v61;
        v79.columns[2] = v62;
        v79.columns[3] = v63;
        v64 = invertSRTMatrix(&v79);
        v58[-2].i32[2] = v65;
        *(double *)v58[-2].i64 = v64;
        v58[-1].i32[2] = v66;
        v58[-1].i64[0] = v67;
        v58->i32[2] = v68;
        v58->i64[0] = v69;
        v70 = &v58[1].i32[2];
        v58[1].i64[0] = v71;
        v72 = v79.columns[1];
        v58[2] = v79.columns[0];
        v58[3] = v72;
        v73 = v79.columns[3];
        v58[4] = v79.columns[2];
        v58[5] = v73;
        v58 += 8;
        *v70 = v74;
        --v8;
      }
      while (v8);
    }
  }
  v75 = *(_QWORD *)(a1 + 48);
  v76 = *(void **)(v75 + 152);
  *(_QWORD *)(v75 + 152) = v18;
  v77 = v18;

  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160) = 0;
}

void sub_1B13DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double invertSRTMatrix(const simd::float4x3 *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  double result;

  v1 = (float32x4_t)a1->columns[1];
  v2 = vmulq_f32((float32x4_t)a1->columns[0], (float32x4_t)a1->columns[0]);
  v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1)));
  v3.f32[0] = sqrtf(v3.f32[0]);
  v4 = vmulq_f32(v1, v1);
  v4.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).u64[0];
  v4.f32[0] = sqrtf(v4.f32[0]);
  v5 = (float32x4_t)a1->columns[2];
  v6 = vmulq_f32(v5, v5);
  v6.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).u64[0];
  v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0);
  v6.f32[0] = sqrtf(v6.f32[0]);
  v3.i32[1] = v4.i32[0];
  v3.i32[2] = v6.i32[0];
  v8 = (int32x4_t)vdivq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0));
  v9 = (int32x4_t)vdivq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0));
  __asm { FMOV            V4.4S, #1.0 }
  *(_QWORD *)&result = vmulq_f32(vdivq_f32(_Q4, v3), (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)vdivq_f32((float32x4_t)a1->columns[0], v7), v9), v8)).u64[0];
  return result;
}

uint64_t AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::reserveAccelerationStructureDAG(AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *a1, uint64_t **a2, uint64_t **a3, void *a4, unint64_t a5, _QWORD *a6)
{
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  apr_allocator_t *v15;
  apr_pool_t *v16;
  id AllAccelerationStructureChildren;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  void *i;
  void *v25;
  void *v26;
  id v27;
  __n128 *v28;
  __n128 *v29;
  unint64_t v30;
  BOOL v31;
  __n128 **v32;
  id v33;
  __n128 v34;
  uint64_t v35;
  uint64_t **v37;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  apr_pool_t *newpool;
  _BYTE v46[128];

  v40 = a4;
  v10 = a2 + 1;
  v9 = a2[1];
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = v9[4];
        if (v12 <= a5)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_9;
      }
      if (v12 >= a5)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_9;
      }
    }
    v23 = 0;
  }
  else
  {
    v11 = a2 + 1;
LABEL_9:
    v13 = (uint64_t *)operator new(0x28uLL);
    v13[4] = a5;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v10 = v13;
    v14 = (uint64_t *)**a2;
    if (v14)
    {
      *a2 = v14;
      v13 = *v10;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a2[1], v13);
    a2[2] = (uint64_t *)((char *)a2[2] + 1);
    newpool = 0;
    apr_pool_create_ex(&newpool, 0, 0, v15);
    v16 = newpool;
    AllAccelerationStructureChildren = AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::getAllAccelerationStructureChildren(a1, a5, newpool);
    v18 = (void *)objc_claimAutoreleasedReturnValue(AllAccelerationStructureChildren);
    apr_pool_destroy(v16);
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v19 = v18;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
    if (v20)
    {
      v37 = a2;
      v21 = *(_QWORD *)v42;
      v22 = (__n128 *)(a3 + 1);
      v23 = 1;
      while (2)
      {
        for (i = 0; i != v20; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v21)
            objc_enumerationMutation(v19);
          v25 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", v25, v37));
          v27 = objc_msgSend(v26, "uniqueIdentifier");
          v28 = (__n128 *)v22->n128_u64[0];
          if (!v22->n128_u64[0])
            goto LABEL_40;
          v29 = (__n128 *)(a3 + 1);
          do
          {
            v30 = v28[2].n128_u64[0];
            v31 = v30 >= (unint64_t)v27;
            if (v30 >= (unint64_t)v27)
              v32 = (__n128 **)v28;
            else
              v32 = (__n128 **)&v28->n128_u64[1];
            if (v31)
              v29 = v28;
            v28 = *v32;
          }
          while (*v32);
          if (v29 == v22 || (unint64_t)v27 < v29[2].n128_u64[0])
          {
LABEL_40:
            v33 = objc_msgSend(v25, "unsignedIntegerValue");
            v34.n128_u64[0] = (unint64_t)v27;
            v34.n128_u64[1] = (unint64_t)v33;
            v29 = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long long>>(a3, (unint64_t)v27, v34);
            if (v22 == v29)
            {
              *a6 = (id)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 8, CFSTR("Unable to find child acceleration structure(s). Did you forgot to useResource or useHeap?")));
LABEL_34:

              v23 = -1;
              goto LABEL_35;
            }
          }
          v35 = AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::reserveAccelerationStructureDAG(a1, v37, a3, v40, v29[2].n128_u64[1], a6);
          if (v35 == -1)
            goto LABEL_34;

          v23 += v35;
        }
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
        if (v20)
          continue;
        break;
      }
    }
    else
    {
      v23 = 1;
    }
LABEL_35:

  }
  return v23;
}

void sub_1B177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::allocateAccelerationStructureDAG(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4, void *a5, uint64_t a6, uint64_t a7, void *a8, unint64_t a9, void *a10, void *a11, _QWORD *a12)
{
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  BOOL v19;
  uint64_t **v20;
  _QWORD *Object;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t *v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  apr_allocator_t *v45;
  AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *v46;
  apr_pool_t *v47;
  id AllAccelerationStructureChildren;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  __n128 *v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  __n128 *v62;
  __n128 *v63;
  unint64_t v64;
  BOOL v65;
  __n128 **v66;
  id v67;
  __n128 v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  BOOL v72;
  uint64_t AccelerationStructureDAG;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  id v86;
  id v87;
  void *v89;
  id v90;
  uint64_t v91;
  void *v92;
  uint64_t **v93;
  _QWORD *v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v103;
  uint64_t v104;
  _QWORD v105[4];
  id v106;
  id v107;
  uint64_t v108;
  id v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  apr_pool_t *newpool;
  _OWORD v115[2];
  int v116;
  _BYTE v117[128];

  v101 = a5;
  v103 = a8;
  v98 = a10;
  v100 = a11;
  v16 = a3 + 1;
  v15 = a3[1];
  if (!v15)
    goto LABEL_12;
  v17 = a3 + 1;
  do
  {
    v18 = v15[4];
    v19 = v18 >= a9;
    if (v18 >= a9)
      v20 = (uint64_t **)v15;
    else
      v20 = (uint64_t **)(v15 + 1);
    if (v19)
      v17 = (uint64_t **)v15;
    v15 = *v20;
  }
  while (*v20);
  if (v17 != v16 && (unint64_t)v17[4] <= a9)
  {
    v91 = (uint64_t)v17[5];
  }
  else
  {
LABEL_12:
    Object = GTMTLSMContext_getObject(**(_QWORD **)(**(_QWORD **)(a6 + 8) + 40), a9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a6 + 8) + 120) + 24) + (a7 << 6)));
    v104 = a1;
    if (Object)
    {
      v22 = Object[14];
      if (v22)
      {
        if (*(_BYTE *)v22 == 1)
        {
          v23 = *(_QWORD *)(v22 + 8);
          v24 = *(_QWORD *)(v22 + 16);
          v99 = objc_alloc_init((Class)NSMutableArray);
          if (!v24)
            goto LABEL_32;
          v25 = a3;
          v26 = 0;
          while (1)
          {
            v27 = *(unsigned __int8 *)(v23 + 36);
            if (*(_QWORD *)v23)
            {
              v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
              if ((objc_msgSend(v28, "isEqualToString:", &stru_7282A8) & 1) == 0)
                goto LABEL_24;

            }
            switch(v27)
            {
              case 5:
                v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Curve Geometry %zu"), v26));
                objc_msgSend(v99, "addObject:", v28);
                goto LABEL_29;
              case 2:
                v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("BoundingBox Geometry %zu"), v26));
                objc_msgSend(v99, "addObject:", v28);
                goto LABEL_29;
              case 1:
                v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Triangle Geometry %zu"), v26));
                break;
              default:
                v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Geometry %zu"), v26));
                break;
            }
LABEL_24:
            objc_msgSend(v99, "addObject:", v28);
LABEL_29:
            v23 += 136;

            ++v26;
            a1 = v104;
            if (v24 == v26)
            {
              a3 = v25;
              goto LABEL_32;
            }
          }
        }
      }
    }
    v99 = &__NSArray0__struct;
LABEL_32:
    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "accelerationStructureForKey:", a9));
    v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "device"));
    v90 = objc_msgSend(v101, "count");
    v29 = *(_QWORD *)(a1 + 184);
    v30 = objc_msgSend(v92, "uniqueIdentifier");
    v31 = v29 + 184 * (_QWORD)v90;
    *(_DWORD *)(v31 + 8) = 0;
    v32 = *(void **)(v31 + 24);
    v91 = v31;
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)(v31 + 24) = 0;

    v33 = *(void **)(v31 + 40);
    *(_QWORD *)(v31 + 32) = 0;
    *(_QWORD *)(v31 + 40) = 0;

    v34 = *(void **)(v31 + 56);
    *(_QWORD *)(v31 + 48) = 0;
    *(_QWORD *)(v31 + 56) = 0;

    v35 = *(void **)(v31 + 72);
    *(_QWORD *)(v31 + 64) = 0;
    *(_QWORD *)(v31 + 72) = 0;

    v36 = *(void **)(v31 + 88);
    *(_QWORD *)(v31 + 80) = 0;
    *(_QWORD *)(v31 + 88) = 0;

    v37 = *(void **)(v31 + 104);
    *(_QWORD *)(v31 + 96) = 0;
    *(_QWORD *)(v31 + 104) = 0;

    *(_QWORD *)(v31 + 112) = 0;
    *(_QWORD *)(v31 + 120) = 0;
    v38 = *(void **)(v31 + 152);
    *(_QWORD *)(v31 + 152) = 0;

    v39 = *(void **)(v31 + 168);
    *(_QWORD *)(v31 + 160) = 0;
    *(_QWORD *)(v31 + 168) = 0;

    v40 = *v16;
    v41 = v16;
    if (*v16)
    {
      while (1)
      {
        while (1)
        {
          v41 = (uint64_t **)v40;
          v42 = v40[4];
          if (v42 <= a9)
            break;
          v40 = *v41;
          v16 = v41;
          if (!*v41)
            goto LABEL_39;
        }
        if (v42 >= a9)
          break;
        v40 = v41[1];
        if (!v40)
        {
          v16 = v41 + 1;
          goto LABEL_39;
        }
      }
    }
    else
    {
LABEL_39:
      v43 = (uint64_t *)operator new(0x30uLL);
      v43[4] = a9;
      v43[5] = v91;
      *v43 = 0;
      v43[1] = 0;
      v43[2] = (uint64_t)v41;
      *v16 = v43;
      v44 = (uint64_t *)**a3;
      if (v44)
      {
        *a3 = v44;
        v43 = *v16;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a3[1], v43);
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
    }
    objc_msgSend(v101, "addObject:", v92);
    objc_msgSend(*(id *)(a1 + 304), "addObject:", v99);
    memset(v115, 0, sizeof(v115));
    v116 = 1065353216;
    newpool = 0;
    apr_pool_create_ex(&newpool, 0, 0, v45);
    v46 = (AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *)a1;
    v47 = newpool;
    AllAccelerationStructureChildren = AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::getAllAccelerationStructureChildren(v46, a9, newpool);
    v49 = (void *)objc_claimAutoreleasedReturnValue(AllAccelerationStructureChildren);
    v93 = a3;
    apr_pool_destroy(v47);
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v50 = v49;
    v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v110, v117, 16);
    v52 = v104;
    if (v51)
    {
      v53 = (__n128 *)(a4 + 1);
      v54 = v29 + 184 * (_QWORD)v90;
      v55 = (uint64_t **)(v54 + 128);
      v56 = *(_QWORD *)v111;
      v57 = (uint64_t **)(v54 + 136);
      v97 = (_QWORD *)(v54 + 144);
LABEL_44:
      v58 = 0;
      while (1)
      {
        if (*(_QWORD *)v111 != v56)
          objc_enumerationMutation(v50);
        v59 = *(void **)(*((_QWORD *)&v110 + 1) + 8 * v58);
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKey:", v59));
        v61 = objc_msgSend(v60, "uniqueIdentifier");
        v62 = (__n128 *)v53->n128_u64[0];
        if (!v53->n128_u64[0])
          goto LABEL_100;
        v63 = (__n128 *)(a4 + 1);
        do
        {
          v64 = v62[2].n128_u64[0];
          v65 = v64 >= (unint64_t)v61;
          if (v64 >= (unint64_t)v61)
            v66 = (__n128 **)v62;
          else
            v66 = (__n128 **)&v62->n128_u64[1];
          if (v65)
            v63 = v62;
          v62 = *v66;
        }
        while (*v66);
        if (v63 == v53 || (unint64_t)v61 < v63[2].n128_u64[0])
        {
LABEL_100:
          v67 = objc_msgSend(v59, "unsignedIntegerValue");
          v68.n128_u64[0] = (unint64_t)v61;
          v68.n128_u64[1] = (unint64_t)v67;
          v63 = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long long>>(a4, (unint64_t)v61, v68);
          if (v53 == v63)
            break;
        }
        v69 = v63[2].n128_u64[1];
        v70 = objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "accelerationStructureForKey:", v69));
        v71 = (void *)v70;
        if (v70)
          v72 = v70 == (_QWORD)v60;
        else
          v72 = 0;
        if (!v72)
        {
          *a12 = (id)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 8, CFSTR("Child acceleration structure mismatch. Did you forgot to useResource?")));
          goto LABEL_93;
        }
        v52 = v104;
        if ((std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v115, v69, v69) & 1) != 0)
        {
          AccelerationStructureDAG = AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::allocateAccelerationStructureDAG(v104, a2, v93, a4, v101, a6, a7, v103, v69, v98, v100, a12);
          v74 = AccelerationStructureDAG;
          if (!AccelerationStructureDAG)
          {
            v71 = v60;
LABEL_93:

LABEL_94:
            v91 = 0;
            v86 = v50;
            goto LABEL_95;
          }
          v75 = *v57;
          if ((unint64_t)*v57 >= *v97)
          {
            v77 = v75 - *v55;
            if ((unint64_t)(v77 + 1) >> 61)
              abort();
            v78 = *v97 - (_QWORD)*v55;
            v79 = v78 >> 2;
            if (v78 >> 2 <= (unint64_t)(v77 + 1))
              v79 = v77 + 1;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
              v80 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v80 = v79;
            if (v80)
              v80 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v80);
            else
              v81 = 0;
            v82 = (uint64_t *)(v80 + 8 * v77);
            *v82 = v74;
            v76 = v82 + 1;
            v83 = *v57;
            v84 = *v55;
            if (*v57 == *v55)
            {
              v52 = v104;
            }
            else
            {
              v52 = v104;
              do
              {
                v85 = *--v83;
                *--v82 = v85;
              }
              while (v83 != v84);
              v83 = *v55;
            }
            *v55 = v82;
            *v57 = v76;
            *v97 = v80 + 8 * v81;
            if (v83)
              operator delete(v83);
          }
          else
          {
            *v75 = AccelerationStructureDAG;
            v76 = v75 + 1;
            v52 = v104;
          }
          *v57 = v76;
        }

        if ((id)++v58 == v51)
        {
          v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v110, v117, 16);
          if (v51)
            goto LABEL_44;
          goto LABEL_87;
        }
      }
      *a12 = (id)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 8, CFSTR("Unable to find child acceleration structure(s). Did you forgot to useResource or useHeap?")));
      goto LABEL_94;
    }
LABEL_87:

    v86 = objc_msgSend(objc_alloc((Class)MTLGenericBVHBufferSizesSPI), "initWithVersion:", a2);
    if ((objc_msgSend(v100, "writeGenericBVHStructureSizesOfAccelerationStructure:into:", v92, v86) & 1) != 0)
    {
      v105[0] = _NSConcreteStackBlock;
      v105[1] = 3221225472;
      v105[2] = ___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource32allocateAccelerationStructureDAGE29MTLGenericBVHHeaderVersionSPIRNSt3__13mapIyPNS_21AccelerationStructureENS2_4lessIyEENS2_9allocatorINS2_4pairIKyS5_EEEEEERNS3_IyyS7_NS8_INS9_ISA_yEEEEEEP14NSMutableArrayIPU35objcproto24MTLAccelerationStructure11objc_objectEP17GTMTLReplayClientyP20GTMTLReplayObjectMapyPU27objcproto16MTLCommandBuffer11objc_objectPU52objcproto41MTLAccelerationStructureCommandEncoderSPI11objc_objectPU15__autoreleasingP7NSError_block_invoke;
      v105[3] = &unk_723F88;
      v108 = v52;
      v109 = v90;
      v106 = v89;
      v87 = v86;
      v107 = v87;
      objc_msgSend(v98, "addCompletedHandler:", v105);

      v86 = v87;
    }
    else
    {
      v91 = 0;
      *a12 = (id)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 2, CFSTR("Your version of Metal does not support this tool")));
    }
LABEL_95:

    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v115);
  }

  return v91;
}

void sub_1B2000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v49;
  void *v50;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_1B201C()
{
  JUMPOUT(0x1B21A4);
}

void sub_1B202C()
{
  void *v0;

  JUMPOUT(0x1B2180);
}

void sub_1B2034(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  id v20;

  if (a2)
  {
    if (a2 == 2)
    {
      v20 = objc_begin_catch(exc_buf);
      NSLog(CFSTR("An exception occured while generating the generic acceleration structure: %@"));
      *a20 = (id)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 2, CFSTR("Your graphics driver does not support this tool")));

      objc_end_catch();
      JUMPOUT(0x1B1F70);
    }
    objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_1B20C0()
{
  objc_end_catch();
  JUMPOUT(0x1B2014);
}

void sub_1B20CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B20DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;

  JUMPOUT(0x1B2144);
}

void sub_1B2158()
{
  JUMPOUT(0x1B2164);
}

void sub_1B2170()
{
  JUMPOUT(0x1B2184);
}

void sub_1B217C()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1B2188);
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return 0;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_1B23D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource32allocateAccelerationStructureDAGE29MTLGenericBVHHeaderVersionSPIRNSt3__13mapIyPNS_21AccelerationStructureENS2_4lessIyEENS2_9allocatorINS2_4pairIKyS5_EEEEEERNS3_IyyS7_NS8_INS9_ISA_yEEEEEEP14NSMutableArrayIPU35objcproto24MTLAccelerationStructure11objc_objectEP17GTMTLReplayClientyP20GTMTLReplayObjectMapyPU27objcproto16MTLCommandBuffer11objc_objectPU52objcproto41MTLAccelerationStructureCommandEncoderSPI11objc_objectPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  id v39;
  void *v40;

  v2 = *(_QWORD *)(a1 + 48);
  NSLog(CFSTR("Running allocate completion handler for %zu"), *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(v2 + 184);
  v5 = *(void **)(a1 + 32);
  v6 = objc_msgSend(*(id *)(a1 + 40), "headerBufferSize");
  if ((unint64_t)v6 <= 1)
    v7 = 1;
  else
    v7 = (uint64_t)v6;
  v8 = objc_msgSend(v5, "newBufferWithLength:options:", v7, 0);
  v9 = (_QWORD *)(v4 + 184 * v3);
  v10 = (void *)v9[3];
  v9[3] = v8;

  v11 = *(void **)(a1 + 32);
  v12 = objc_msgSend(*(id *)(a1 + 40), "innerNodeBufferSize");
  if ((unint64_t)v12 <= 1)
    v13 = 1;
  else
    v13 = (uint64_t)v12;
  v14 = objc_msgSend(v11, "newBufferWithLength:options:", v13, 0);
  v15 = (void *)v9[5];
  v9[5] = v14;

  v16 = *(void **)(a1 + 32);
  v17 = objc_msgSend(*(id *)(a1 + 40), "leafNodeBufferSize");
  if ((unint64_t)v17 <= 1)
    v18 = 1;
  else
    v18 = (uint64_t)v17;
  v19 = objc_msgSend(v16, "newBufferWithLength:options:", v18, 0);
  v20 = (void *)v9[7];
  v9[7] = v19;

  v21 = *(void **)(a1 + 32);
  v22 = objc_msgSend(*(id *)(a1 + 40), "primitiveBufferSize");
  if ((unint64_t)v22 <= 1)
    v23 = 1;
  else
    v23 = (uint64_t)v22;
  v24 = objc_msgSend(v21, "newBufferWithLength:options:", v23, 0);
  v25 = (void *)v9[9];
  v9[9] = v24;

  v26 = *(void **)(a1 + 32);
  v27 = objc_msgSend(*(id *)(a1 + 40), "geometryBufferSize");
  if ((unint64_t)v27 <= 1)
    v28 = 1;
  else
    v28 = (uint64_t)v27;
  v29 = objc_msgSend(v26, "newBufferWithLength:options:", v28, 0);
  v30 = (void *)v9[11];
  v9[11] = v29;

  v31 = *(void **)(a1 + 32);
  v32 = objc_msgSend(*(id *)(a1 + 40), "perPrimitiveDataBufferSize");
  if ((unint64_t)v32 <= 1)
    v33 = 1;
  else
    v33 = (uint64_t)v32;
  v34 = objc_msgSend(v31, "newBufferWithLength:options:", v33, 0);
  v35 = (void *)v9[13];
  v9[13] = v34;

  v9[15] = objc_msgSend(*(id *)(a1 + 40), "perPrimitiveDataBufferSize");
  v36 = *(void **)(a1 + 32);
  v37 = objc_msgSend(*(id *)(a1 + 40), "instanceTransformBufferSize");
  if ((unint64_t)(2 * (_QWORD)v37) <= 1)
    v38 = 1;
  else
    v38 = 2 * (_QWORD)v37;
  v39 = objc_msgSend(v36, "newBufferWithLength:options:", v38, 0);
  v40 = (void *)v9[19];
  v9[19] = v39;

}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::MTLAccelerationStructureDataSource(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, void *a5, _QWORD *a6)
{
  id v11;
  void **v12;
  id v13;
  uint64_t v14;
  NSBundle *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  int v29;
  apr_allocator_t *v30;
  id *v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *InclusiveRange;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  apr_pool_t *v41;
  int *v42;
  id v43;
  id v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  apr_pool_t *v48;
  apr_array_header_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  apr_pool_t *v53;
  uint64_t v54;
  unint64_t v55;
  int *v56;
  uint64_t v57;
  unint64_t v58;
  int *v59;
  uint64_t v60;
  unint64_t v61;
  apr_pool_t *v62;
  int *v63;
  id v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  int *v77;
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int *v82;
  unint64_t v83;
  apr_pool_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  char *v88;
  int *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  int *v94;
  char *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  int *v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  int *v104;
  char *v105;
  char *v106;
  char *v107;
  unint64_t v108;
  int *v109;
  id *v110;
  id v111;
  id v112;
  apr_allocator_t *v113;
  _QWORD *v114;
  int v115;
  uint64_t v116;
  apr_pool_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int FuncEnumConstructorType;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *Object;
  _QWORD *v130;
  _QWORD *entry;
  _QWORD *v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  int v140;
  BOOL v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char *v147;
  void *v148;
  unsigned __int8 v149;
  id v150;
  char *v151;
  char *v152;
  char **v153;
  id v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  unsigned __int8 v159;
  char *v160;
  unint64_t v161;
  void *v162;
  char **v163;
  char *v164;
  char *v165;
  char *v166;
  unint64_t v167;
  void *v168;
  char *v169;
  char *v170;
  char *v171;
  unint64_t v172;
  void *v173;
  char *v174;
  char *v175;
  char *v176;
  unint64_t v177;
  void *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  unsigned __int8 v183;
  char *v184;
  unint64_t v185;
  void *v186;
  char **v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  unsigned __int8 v192;
  char *v193;
  unint64_t v194;
  void *v195;
  char **v196;
  id v197;
  id v198;
  void *v199;
  void *v200;
  unint64_t v201;
  uint64_t v202;
  id *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  size_t v214;
  char *v215;
  id *v216;
  id *v217;
  uint64_t v218;
  char *v219;
  id *v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  id v229;
  char *v230;
  id *v231;
  id *v232;
  size_t v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  id v239;
  id v240;
  unint64_t v241;
  uint64_t v242;
  id v243;
  void *v244;
  void *v245;
  unint64_t v246;
  void *v247;
  unsigned __int8 v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  unint64_t v257;
  _DWORD *v258;
  id v259;
  void *v261;
  id v262;
  void *v263;
  id v264;
  id v265;
  id v266;
  id v267;
  void **v268;
  id v269;
  uint64_t v270;
  id v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  void *v280;
  uint64_t *v281;
  char **v282;
  apr_pool_t *newpool;
  _QWORD *v284[2];
  uint64_t *v285;
  _QWORD *v286[2];
  apr_pool_t *__dst[1395];

  v11 = a5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)a1 = off_723FB8;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 216) = 0u;
  v12 = (void **)(a1 + 216);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  v281 = (uint64_t *)(a1 + 312);
  v282 = (char **)(a1 + 352);
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 208) = a2;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = a3;
  v277 = a4;
  *(_QWORD *)(a1 + 296) = a4;
  v279 = a2;
  v13 = *(id *)(*(_QWORD *)(a2 + 8) + 8);
  v15 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(GTMTLReplayObjectMap, v14));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultDevice"));
  v18 = objc_msgSend(v17, "newDefaultLibraryWithBundle:error:", v16, a6);

  v19 = objc_msgSend(v18, "newFunctionWithName:", CFSTR("ASVAccelerationStructureInstanceCount"));
  if (v19)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultDevice"));
    v21 = objc_msgSend(v20, "newComputePipelineStateWithFunction:error:", v19, a6);
    v22 = *v12;
    *v12 = v21;

    if (!*v12)
      goto LABEL_8;
  }

  v19 = objc_msgSend(v18, "newFunctionWithName:", CFSTR("ASVMarkAccelerationStructureChildren"));
  if (v19)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultDevice"));
    v24 = objc_msgSend(v23, "newComputePipelineStateWithFunction:error:", v19, a6);
    v25 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v24;

    if (!*(_QWORD *)(a1 + 224))
      goto LABEL_8;
  }

  v19 = objc_msgSend(v18, "newFunctionWithName:", CFSTR("ASVFillIndirectArgs"));
  if (!v19)
    goto LABEL_7;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultDevice"));
  v27 = objc_msgSend(v26, "newComputePipelineStateWithFunction:error:", v19, a6);
  v28 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v27;

  if (!*(_QWORD *)(a1 + 232))
LABEL_8:
    v29 = 1;
  else
LABEL_7:
    v29 = 0;

  if (!v29)
  {
    v270 = a3;
    v272 = a6;
    v263 = v11;
    v286[0] = 0;
    v286[1] = 0;
    v285 = (uint64_t *)v286;
    newpool = 0;
    apr_pool_create_ex(&newpool, 0, 0, v30);
    v31 = *(id **)(v279 + 8);
    v32 = *v31;
    v33 = v31[1];
    v34 = *(_QWORD *)(*((_QWORD *)v32 + 15) + 24);
    if (!v34)
      goto LABEL_96;
    v35 = *(_QWORD *)(v34 + (a3 << 6));
    InclusiveRange = GroupBuilder_findInclusiveRange(*(_DWORD *)(*((_QWORD *)v32 + 14) + 12), *(_QWORD **)(*((_QWORD *)v32 + 14) + 24), a3);
    v37 = GroupRange_encoderWithIndirectResources((uint64_t)InclusiveRange);
    memcpy(__dst, v31 + 1414, 0x2B90uLL);
    if (!v37)
    {
      v48 = newpool;
      v49 = apr_array_make(newpool, 16, 8);
      GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v32 + 5) + 72), v35, v49);
      if (v49->nelts >= 1)
      {
        v50 = 0;
        do
          AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, *(int **)&v49->elts[8 * v50++], -1, v48, &v285);
        while (v50 < v49->nelts);
      }
      v49->nelts = 0;
      GTMTLSMContext_getObjects(*(_DWORD **)(*((_QWORD *)v32 + 5) + 64), v35, v49);
      if (v49->nelts > 0)
      {
        v51 = 0;
        do
          AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, *(int **)&v49->elts[8 * v51++], -1, v48, &v285);
        while (v51 < v49->nelts);
      }
LABEL_96:
      v268 = (void **)(a1 + 304);

      apr_pool_destroy(newpool);
      v110 = *(id **)(*(_QWORD *)(a1 + 208) + 8);
      v111 = *v110;
      v275 = *((_QWORD *)*v110 + 2);
      v112 = v110[1];
      v114 = GroupBuilder_findInclusiveRange(*(_DWORD *)(*((_QWORD *)v111 + 14) + 12), *(_QWORD **)(*((_QWORD *)v111 + 14) + 24), *(_QWORD *)(a1 + 288));
      if (v114)
      {
        while (1)
        {
          v115 = *((_DWORD *)v114 + 7);
          if (IsFuncEnumCreateCommandEncoder(v115))
            break;
          v116 = *((unsigned int *)v114 + 4);
          if ((_DWORD)v116)
            v114 -= 4 * v116;
          else
            v114 = 0;
          if (!v114)
            goto LABEL_102;
        }
      }
      else
      {
LABEL_102:
        __dst[0] = 0;
        apr_pool_create_ex(__dst, 0, 0, v113);
        v117 = __dst[0];
        v118 = GTResourceTrackerMake(*((_QWORD *)v111 + 1), v275, __dst[0]);
        v119 = *((_QWORD *)v111 + 14);
        if (*(int *)(v119 + 12) >= 1)
        {
          v120 = 0;
          do
          {
            v121 = *(_QWORD *)(v119 + 24);
            v122 = v121 + 32 * v120;
            FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v122 + 28));
            if (FuncEnumConstructorType == 70 || FuncEnumConstructorType == 28)
            {
              v125 = *(int *)(v121 + 32 * v120);
              v127 = *(_QWORD *)(v122 + 8);
              v126 = (unint64_t *)(v122 + 8);
              if (v127 > v125)
              {
                v128 = v125 << 6;
                do
                {
                  GTResourceTrackerProcessFunction(v118, *(_QWORD *)(*((_QWORD *)v111 + 15) + 24) + v128);
                  ++v125;
                  v128 += 64;
                }
                while (*v126 > v125);
                v119 = *((_QWORD *)v111 + 14);
              }
            }
            ++v120;
          }
          while (v120 < *(int *)(v119 + 12));
        }
        Object = GTMTLSMContext_getObject(**((_QWORD **)v111 + 5), *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 288) + *((_QWORD *)v111 + 10));
        if (!Object)
        {
LABEL_186:

          v266 = *(id *)(*(_QWORD *)(v279 + 8) + 8);
          v276 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v266, "defaultCommandQueue"));
          v11 = v263;
          v198 = objc_alloc_init((Class)NSMutableArray);
          v199 = *v268;
          *v268 = v198;

          v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v266, "defaultDevice"));
          v269 = objc_msgSend(v200, "latestSupportedGenericBVHVersion");

          v284[0] = 0;
          v284[1] = 0;
          newpool = (apr_pool_t *)v284;
          v201 = AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::reserveAccelerationStructureDAG((AccelerationStructureViewerServer::MTLAccelerationStructureDataSource *)a1, (uint64_t **)&newpool, &v285, v266, v277, v272);
          if (v201 == -1)
          {
LABEL_244:
            std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v284[0]);

            std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(v286[0]);
            goto LABEL_245;
          }
          v202 = *(_QWORD *)(a1 + 184);
          v203 = *(id **)(a1 + 192);
          v204 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v203 - v202) >> 3);
          v205 = v201 - v204;
          if (v201 <= v204)
          {
            if (v201 < v204)
            {
              v232 = (id *)(v202 + 184 * v201);
              while (v203 != v232)
              {
                v203 -= 23;
                AccelerationStructureViewerServer::AccelerationStructure::~AccelerationStructure(v203);
              }
              *(_QWORD *)(a1 + 192) = v232;
            }
          }
          else
          {
            v206 = *(_QWORD *)(a1 + 200);
            if (0xD37A6F4DE9BD37A7 * ((v206 - (uint64_t)v203) >> 3) >= v205)
            {
              v233 = 184 * ((184 * v205 - 184) / 0xB8) + 184;
              bzero(*(void **)(a1 + 192), v233);
              *(_QWORD *)(a1 + 192) = (char *)v203 + v233;
            }
            else
            {
              if (v201 > 0x1642C8590B21642)
                abort();
              v207 = 0xD37A6F4DE9BD37A7 * ((v206 - v202) >> 3);
              v208 = 2 * v207;
              if (2 * v207 <= v201)
                v208 = v201;
              if (v207 >= 0xB21642C8590B21)
                v209 = 0x1642C8590B21642;
              else
                v209 = v208;
              v210 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewerServer::AccelerationStructure>>(v209);
              v211 = &v210[184 * v204];
              v213 = &v210[184 * v212];
              v214 = 184 * ((184 * v205 - 184) / 0xB8) + 184;
              bzero(v211, v214);
              v215 = &v211[v214];
              v217 = *(id **)(a1 + 184);
              v216 = *(id **)(a1 + 192);
              if (v216 == v217)
              {
                *(_QWORD *)(a1 + 184) = v211;
                *(_QWORD *)(a1 + 192) = v215;
                *(_QWORD *)(a1 + 200) = v213;
              }
              else
              {
                v218 = 0;
                do
                {
                  v219 = &v211[v218 * 8];
                  v220 = &v216[v218];
                  v221 = v216[v218 - 23];
                  *(v220 - 23) = 0;
                  *((_QWORD *)v219 - 23) = v221;
                  *((_OWORD *)v219 - 11) = *(_OWORD *)&v216[v218 - 22];
                  v222 = v216[v218 - 20];
                  *(v220 - 20) = 0;
                  *((_QWORD *)v219 - 20) = v222;
                  *((_QWORD *)v219 - 19) = v216[v218 - 19];
                  v223 = v216[v218 - 18];
                  *(v220 - 18) = 0;
                  *((_QWORD *)v219 - 18) = v223;
                  *((_QWORD *)v219 - 17) = v216[v218 - 17];
                  v224 = v216[v218 - 16];
                  *(v220 - 16) = 0;
                  *((_QWORD *)v219 - 16) = v224;
                  *((_QWORD *)v219 - 15) = v216[v218 - 15];
                  v225 = v216[v218 - 14];
                  *(v220 - 14) = 0;
                  *((_QWORD *)v219 - 14) = v225;
                  *((_QWORD *)v219 - 13) = v216[v218 - 13];
                  v226 = v216[v218 - 12];
                  *(v220 - 12) = 0;
                  *((_QWORD *)v219 - 12) = v226;
                  *((_QWORD *)v219 - 11) = v216[v218 - 11];
                  v227 = v216[v218 - 10];
                  *(v220 - 10) = 0;
                  *((_QWORD *)v219 - 10) = v227;
                  *(_OWORD *)(v219 - 72) = *(_OWORD *)&v216[v218 - 9];
                  *((_QWORD *)v219 - 6) = 0;
                  *((_QWORD *)v219 - 5) = 0;
                  *((_QWORD *)v219 - 7) = 0;
                  *(_OWORD *)(v219 - 56) = *(_OWORD *)&v216[v218 - 7];
                  *((_QWORD *)v219 - 5) = v216[v218 - 5];
                  *(v220 - 7) = 0;
                  *(v220 - 6) = 0;
                  v228 = v216[v218 - 4];
                  *(v220 - 5) = 0;
                  *(v220 - 4) = 0;
                  *((_QWORD *)v219 - 4) = v228;
                  *((_QWORD *)v219 - 3) = v216[v218 - 3];
                  v229 = v216[v218 - 2];
                  *(v220 - 2) = 0;
                  *((_QWORD *)v219 - 2) = v229;
                  *(v219 - 8) = (char)v216[v218 - 1];
                  v218 -= 23;
                }
                while (&v216[v218] != v217);
                v230 = &v211[v218 * 8];
                v231 = *(id **)(a1 + 184);
                v216 = *(id **)(a1 + 192);
                *(_QWORD *)(a1 + 184) = v230;
                *(_QWORD *)(a1 + 192) = v215;
                *(_QWORD *)(a1 + 200) = v213;
                if (v216 != v231)
                {
                  do
                    AccelerationStructureViewerServer::AccelerationStructure::~AccelerationStructure(v216 - 23);
                  while (v216 != v231);
                  v216 = v231;
                }
              }
              if (v216)
                operator delete(v216);
            }
          }
          NSLog(CFSTR("Begin allocate"));
          v262 = objc_alloc_init((Class)NSMutableArray);
          v234 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v276, "commandBufferWithDescriptor:", v263));
          objc_msgSend(v234, "setLabel:", CFSTR("ASV allocateAccelerationStructureDAG"));
          v235 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v234, "accelerationStructureCommandEncoder"));
          if ((objc_opt_respondsToSelector(v235, "writeGenericBVHStructureSizesOfAccelerationStructure:into:") & 1) != 0)
          {
            v236 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v266, "accelerationStructureForKey:", v277));
            __dst[1] = 0;
            __dst[2] = 0;
            __dst[0] = (apr_pool_t *)&__dst[1];
            v237 = v262;
            v238 = AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::allocateAccelerationStructureDAG(a1, (uint64_t)v269, (uint64_t **)__dst, &v285, v262, v279, v270, v266, v277, v234, v235, v272);
            objc_msgSend(v235, "endEncoding");
            objc_msgSend(v234, "commit");
            objc_msgSend(v234, "waitUntilCompleted");
            if (!v238 || *(_QWORD *)(a1 + 192) == *(_QWORD *)(a1 + 184))
            {
              std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy((_QWORD *)__dst[1]);

            }
            else
            {
              *(_DWORD *)(a1 + 176) = 0;
              std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy((_QWORD *)__dst[1]);

              NSLog(CFSTR("Finish allocate"));
              NSLog(CFSTR("Begin encode"));
              v239 = v262;
              v240 = v276;
              v271 = v263;
              v278 = v240;
              v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v240, "device"));
              if (*(_QWORD *)(a1 + 192) != *(_QWORD *)(a1 + 184))
              {
                v241 = 0;
                while (1)
                {
                  v280 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v239, "objectAtIndex:", v241));
                  v242 = *(_QWORD *)(a1 + 184);
                  v243 = objc_msgSend(objc_alloc((Class)MTLGenericBVHBuffersSPI), "initWithVersion:", v269);
                  objc_msgSend(v243, "setHeaderBuffer:", *(_QWORD *)(v242 + 184 * v241 + 24));
                  objc_msgSend(v243, "setHeaderBufferOffset:", *(_QWORD *)(v242 + 184 * v241 + 32));
                  objc_msgSend(v243, "setInnerNodeBuffer:", *(_QWORD *)(v242 + 184 * v241 + 40));
                  objc_msgSend(v243, "setInnerNodeBufferOffset:", *(_QWORD *)(v242 + 184 * v241 + 48));
                  objc_msgSend(v243, "setLeafNodeBuffer:", *(_QWORD *)(v242 + 184 * v241 + 56));
                  objc_msgSend(v243, "setLeafNodeBufferOffset:", *(_QWORD *)(v242 + 184 * v241 + 64));
                  objc_msgSend(v243, "setPrimitiveBuffer:", *(_QWORD *)(v242 + 184 * v241 + 72));
                  objc_msgSend(v243, "setPrimitiveBufferOffset:", *(_QWORD *)(v242 + 184 * v241 + 80));
                  objc_msgSend(v243, "setGeometryBuffer:", *(_QWORD *)(v242 + 184 * v241 + 88));
                  objc_msgSend(v243, "setGeometryBufferOffset:", *(_QWORD *)(v242 + 184 * v241 + 96));
                  objc_msgSend(v243, "setPerPrimitiveDataBuffer:", *(_QWORD *)(v242 + 184 * v241 + 104));
                  objc_msgSend(v243, "setPerPrimitiveDataBufferOffset:", *(_QWORD *)(v242 + 184 * v241 + 112));
                  objc_msgSend(v243, "setInstanceTransformBuffer:", *(_QWORD *)(v242 + 184 * v241 + 152));
                  objc_msgSend(v243, "setInstanceTransformBufferOffset:", *(_QWORD *)(v242 + 184 * v241 + 160));
                  v244 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v278, "commandBufferWithDescriptor:", v271));
                  objc_msgSend(v244, "setLabel:", CFSTR("ASV encodeAccelerationStructureDAG"));
                  v245 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v244, "accelerationStructureCommandEncoder"));
                  if (*(_QWORD *)(a1 + 192) != *(_QWORD *)(a1 + 184))
                  {
                    v246 = 0;
                    do
                    {
                      v247 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v239, "objectAtIndex:", v246));
                      objc_msgSend(v245, "useResource:usage:", v247, 1);

                      ++v246;
                    }
                    while (v246 < 0xD37A6F4DE9BD37A7
                                 * ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3));
                  }
                  v248 = objc_msgSend(v245, "writeGenericBVHStructureOfAccelerationStructure:into:", v280, v243);
                  objc_msgSend(v245, "endEncoding");
                  objc_msgSend(v243, "setHeaderBuffer:", 0);
                  objc_msgSend(v243, "setInnerNodeBuffer:", 0);
                  objc_msgSend(v243, "setLeafNodeBuffer:", 0);
                  objc_msgSend(v243, "setPrimitiveBuffer:", 0);
                  objc_msgSend(v243, "setGeometryBuffer:", 0);
                  objc_msgSend(v243, "setPerPrimitiveDataBuffer:", 0);
                  objc_msgSend(v243, "setInstanceTransformBuffer:", 0);
                  if ((v248 & 1) != 0)
                  {
                    __dst[0] = (apr_pool_t *)_NSConcreteStackBlock;
                    __dst[1] = (apr_pool_t *)3221225472;
                    __dst[2] = (apr_pool_t *)___ZN33AccelerationStructureViewerServer34MTLAccelerationStructureDataSource30encodeAccelerationStructureDAGE29MTLGenericBVHHeaderVersionSPIP14NSMutableArrayIPU35objcproto24MTLAccelerationStructure11objc_objectEPU26objcproto15MTLCommandQueue11objc_objectP26MTLCommandBufferDescriptorPU15__autoreleasingP7NSError_block_invoke;
                    __dst[3] = (apr_pool_t *)&unk_723F60;
                    __dst[5] = (apr_pool_t *)v241;
                    __dst[6] = (apr_pool_t *)(v242 + 184 * v241);
                    __dst[4] = (apr_pool_t *)v261;
                    objc_msgSend(v244, "addCompletedHandler:", __dst);
                    objc_msgSend(v244, "commit");
                    objc_msgSend(v244, "waitUntilCompleted");
                    if (objc_msgSend(v244, "status") == (char *)&dword_4 + 1)
                    {
                      *v272 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v244, "error"));
                      v249 = 1;
                    }
                    else
                    {
                      v249 = 0;
                    }

                  }
                  else
                  {
                    *v272 = (id)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 2, CFSTR("Your version of Metal does not support this tool")));
                    v249 = 1;
                  }

                  if (v249)
                    break;
                  if (++v241 >= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3))
                  {

                    v237 = v262;
                    v11 = v263;
                    goto LABEL_230;
                  }
                }

                v237 = v262;
                v11 = v263;
                goto LABEL_243;
              }

LABEL_230:
              NSLog(CFSTR("Finish encode"));
              v250 = *(unsigned int *)(a1 + 176);
              v251 = *(_QWORD *)(a1 + 184);
              v252 = *(_DWORD *)(v251 + 184 * v250 + 8);
              if ((v252 - 3) < 2)
                goto LABEL_231;
              if (v252 == 2)
              {
                v253 = *(_QWORD *)(a1 + 192);
                v254 = v253 - v251;
                if (v253 != v251)
                {
                  v255 = 0;
                  v256 = 0;
                  v257 = 0xD37A6F4DE9BD37A7 * (v254 >> 3);
                  v258 = (_DWORD *)(v251 + 8);
                  do
                  {
                    if (v250 != v255 && (*v258 - 3) < 2)
                      v256 = 1;
                    if (++v255 >= v257)
                      break;
                    v258 += 46;
                  }
                  while ((v256 & 1) == 0);
                  if ((v256 & 1) != 0)
LABEL_231:
                    *(_BYTE *)(v251 + 184 * v250 + 176) = 1;
                }
              }
              v259 = v239;
              v234 = *(void **)(a1 + 376);
              *(_QWORD *)(a1 + 376) = v259;
            }
          }
          else
          {
            *v272 = (id)objc_claimAutoreleasedReturnValue(+[ASVError errorWithCode:localizedDescription:](ASVError, "errorWithCode:localizedDescription:", 2, CFSTR("Your version of Metal does not support this tool")));
            objc_msgSend(v235, "endEncoding");
            objc_msgSend(v234, "commit");

            v237 = v262;
          }

LABEL_243:
          goto LABEL_244;
        }
        v130 = Object;
        entry = find_entry(v118[4], (_BYTE *)(a1 + 296), 8uLL, 0);
        if (*entry && (v132 = *(_QWORD **)(*entry + 32)) != 0)
        {
          v133 = v132[3];
          if (v133 <= 0)
          {
            v133 = v132[4];
            if (v133 <= 0)
            {
              v133 = v132[2];
              if (!v133)
                goto LABEL_186;
            }
          }
        }
        else
        {
          v135 = v130[6];
          v134 = v130 + 6;
          if (!v135)
            goto LABEL_186;
          v136 = find_entry(v118[3], v134, 8uLL, 0);
          if (!*v136)
            goto LABEL_186;
          v137 = *(_QWORD *)(*v136 + 32);
          if (!v137)
            goto LABEL_186;
          v133 = *(_QWORD *)(v137 + 8);
        }
        v138 = GroupBuilder_findInclusiveRange(*(_DWORD *)(*((_QWORD *)v111 + 14) + 12), *(_QWORD **)(*((_QWORD *)v111 + 14) + 24), v133 - *((_QWORD *)v111 + 10));
        v139 = GroupRange_encoderWithIndirectResources((uint64_t)v138);
        if (!v139)
          goto LABEL_186;
        v114 = (_QWORD *)v139;
        apr_pool_destroy(v117);
        v115 = *((_DWORD *)v114 + 7);
      }
      v140 = GetFuncEnumConstructorType(v115);
      v141 = v140 == 70 || v140 == 28;
      v142 = v275;
      if (v141)
      {
        v143 = *(int *)v114;
        while (v114[1] > v143)
        {
          v144 = *(_QWORD *)(*((_QWORD *)v111 + 15) + 24);
          v145 = v144 + (v143 << 6);
          v146 = *(_DWORD *)(v145 + 8);
          switch(v146)
          {
            case -16047:
              v147 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
              v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "resourceForKey:", *((_QWORD *)v147 + 1)));
              v149 = v147[16];
              LOBYTE(__dst[0]) = v149;
              if (v148)
                goto LABEL_143;
              goto LABEL_185;
            case -16046:
              v179 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
              v180 = v142;
              v181 = v179;
              v182 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, v179[24], v180);
              v183 = v181[16];
              LOBYTE(__dst[0]) = v183;
              if (*((_QWORD *)v181 + 1))
              {
                v184 = v182;
                v185 = 0;
                do
                {
                  v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "resourceForKey:", *(_QWORD *)&v184[8 * v185]));
                  if (v186)
                  {
                    v187 = (char **)std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::__emplace_unique_key_args<GTMTLResourceUsage_uint8_t,std::piecewise_construct_t const&,std::tuple<GTMTLResourceUsage_uint8_t const&>,std::piecewise_construct_t const&<>>(v281, v183, __dst);
                    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v187 + 3, v186);

                  }
                  ++v185;
                }
                while (*((_QWORD *)v181 + 1) > v185);
              }
              goto LABEL_181;
            case -16045:
              v154 = objc_msgSend(v112, "heapForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142)+ 1));
              v148 = (void *)objc_claimAutoreleasedReturnValue(v154);
              if (v148)
                goto LABEL_183;
              goto LABEL_185;
            case -16044:
              v164 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
              v165 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, v164[16], v142);
              if (*((_QWORD *)v164 + 1))
              {
                v166 = v165;
                v167 = 0;
                do
                {
                  v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "heapForKey:", *(_QWORD *)&v166[8 * v167]));
                  if (v168)
                  {
                    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v282, v168);

                  }
                  ++v167;
                }
                while (*((_QWORD *)v164 + 1) > v167);
              }
              goto LABEL_185;
            case -16043:
              v151 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
              v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "resourceForKey:", *((_QWORD *)v151 + 1)));
              v149 = v151[16];
              LOBYTE(__dst[0]) = v149;
              if (!v148)
                goto LABEL_185;
LABEL_143:
              v153 = (char **)std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::__emplace_unique_key_args<GTMTLResourceUsage_uint8_t,std::piecewise_construct_t const&,std::tuple<GTMTLResourceUsage_uint8_t const&>,std::piecewise_construct_t const&<>>(v281, v149, __dst);
              std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v153 + 3, v148);
              goto LABEL_184;
            case -16042:
              v188 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
              v189 = v142;
              v190 = v188;
              v191 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, v188[24], v189);
              v192 = v190[16];
              LOBYTE(__dst[0]) = v192;
              if (*((_QWORD *)v190 + 1))
              {
                v193 = v191;
                v194 = 0;
                do
                {
                  v195 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "resourceForKey:", *(_QWORD *)&v193[8 * v194]));
                  if (v195)
                  {
                    v196 = (char **)std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::__emplace_unique_key_args<GTMTLResourceUsage_uint8_t,std::piecewise_construct_t const&,std::tuple<GTMTLResourceUsage_uint8_t const&>,std::piecewise_construct_t const&<>>(v281, v192, __dst);
                    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v196 + 3, v195);

                  }
                  ++v194;
                }
                while (*((_QWORD *)v190 + 1) > v194);
              }
LABEL_181:
              v142 = v275;
              goto LABEL_185;
            case -16041:
              v197 = objc_msgSend(v112, "heapForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142)+ 1));
              v148 = (void *)objc_claimAutoreleasedReturnValue(v197);
              if (!v148)
                goto LABEL_185;
LABEL_183:
              std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v282, v148);
LABEL_184:

LABEL_185:
              ++v143;
              break;
            case -16040:
              v174 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
              v175 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, v174[16], v142);
              if (*((_QWORD *)v174 + 1))
              {
                v176 = v175;
                v177 = 0;
                do
                {
                  v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "heapForKey:", *(_QWORD *)&v176[8 * v177]));
                  if (v178)
                  {
                    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v282, v178);

                  }
                  ++v177;
                }
                while (*((_QWORD *)v174 + 1) > v177);
              }
              goto LABEL_185;
            default:
              switch(v146)
              {
                case -15821:
                  v150 = objc_msgSend(v112, "heapForKey:", *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142)+ 1));
                  v148 = (void *)objc_claimAutoreleasedReturnValue(v150);
                  if (v148)
                    goto LABEL_183;
                  break;
                case -15820:
                  v169 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
                  v170 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, v169[24], v142);
                  if (*((_QWORD *)v169 + 1))
                  {
                    v171 = v170;
                    v172 = 0;
                    do
                    {
                      v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "heapForKey:", *(_QWORD *)&v171[8 * v172]));
                      if (v173)
                      {
                        std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v282, v173);

                      }
                      ++v172;
                    }
                    while (*((_QWORD *)v169 + 1) > v172);
                  }
                  break;
                case -15819:
                  v152 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
                  v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "resourceForKey:", *((_QWORD *)v152 + 1)));
                  v149 = v152[16];
                  LOBYTE(__dst[0]) = v149;
                  if (v148)
                    goto LABEL_143;
                  break;
                case -15818:
                  v155 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, *(unsigned __int8 *)(v144 + (v143 << 6) + 13), v142);
                  v156 = v142;
                  v157 = v155;
                  v158 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v145, v155[32], v156);
                  v159 = v157[16];
                  LOBYTE(__dst[0]) = v159;
                  if (*((_QWORD *)v157 + 1))
                  {
                    v160 = v158;
                    v161 = 0;
                    do
                    {
                      v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "resourceForKey:", *(_QWORD *)&v160[8 * v161]));
                      if (v162)
                      {
                        v163 = (char **)std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::__emplace_unique_key_args<GTMTLResourceUsage_uint8_t,std::piecewise_construct_t const&,std::tuple<GTMTLResourceUsage_uint8_t const&>,std::piecewise_construct_t const&<>>(v281, v159, __dst);
                        std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](v163 + 3, v162);

                      }
                      ++v161;
                    }
                    while (*((_QWORD *)v157 + 1) > v161);
                  }
                  goto LABEL_181;
                default:
                  goto LABEL_185;
              }
              goto LABEL_185;
          }
        }
      }
      goto LABEL_186;
    }
    v38 = GetFuncEnumConstructorType(*(_DWORD *)(v37 + 28));
    if (v38 == 70)
    {
      v52 = *(_DWORD *)(v34 + (a3 << 6) + 8);
      if (IsFuncEnumDrawCall(v52))
      {
        v53 = newpool;
        if ((v52 + 15416) >= 3)
        {
          v54 = 0;
          v55 = (unint64_t)__dst[8];
          do
          {
            if (((v55 >> v54) & 1) == 0)
            {
              v56 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v32 + 5), (uint64_t)__dst[v54 + 10], v35);
              AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v56, v54, v53, &v285);
            }
            ++v54;
          }
          while (v54 != 31);
        }
        v57 = 0;
        v58 = (unint64_t)__dst[247];
        do
        {
          if (((v58 >> v57) & 1) == 0)
          {
            v59 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v32 + 5), (uint64_t)__dst[v57 + 248], v35);
            AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v59, v57, v53, &v285);
          }
          ++v57;
        }
        while (v57 != 31);
      }
      else if (v52 == -16137 || v52 == -15297 || v52 == -15486)
      {
        v60 = 0;
        v61 = (unint64_t)__dst[868];
        v62 = newpool;
        do
        {
          if (((v61 >> v60) & 1) == 0)
          {
            v63 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v32 + 5), (uint64_t)__dst[v60 + 869], v35);
            AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v63, v60, v62, &v285);
          }
          ++v60;
        }
        while (v60 != 31);
      }
      v64 = *v31;
      v274 = *((_QWORD *)*v31 + 2);
      v44 = v31[1];
      v65 = GroupBuilder_findInclusiveRange(*(_DWORD *)(*((_QWORD *)v64 + 14) + 12), *(_QWORD **)(*((_QWORD *)v64 + 14) + 24), *(_QWORD *)(a1 + 288));
      if (!v65)
        goto LABEL_95;
      while (1)
      {
        v66 = *((_DWORD *)v65 + 7);
        if (IsFuncEnumCreateCommandEncoder(v66))
          break;
        v67 = *((unsigned int *)v65 + 4);
        if ((_DWORD)v67)
          v65 -= 4 * v67;
        else
          v65 = 0;
        if (!v65)
          goto LABEL_95;
      }
      if (GetFuncEnumConstructorType(v66) != 70)
        goto LABEL_95;
      v83 = *(int *)v65;
      if (v65[1] <= v83)
        goto LABEL_95;
      v265 = v33;
      v267 = v44;
      v84 = newpool;
      do
      {
        v85 = *(_QWORD *)(*((_QWORD *)v64 + 15) + 24);
        v86 = v85 + (v83 << 6);
        v87 = *(_DWORD *)(v86 + 8);
        switch(v87)
        {
          case -16043:
          case -16041:
LABEL_76:
            v88 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, *(unsigned __int8 *)(v85 + (v83 << 6) + 13), v274);
            v89 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v64 + 5), *((_QWORD *)v88 + 1), v35);
            AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v89, -1, v84, &v285);
            break;
          case -16042:
            v95 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, *(unsigned __int8 *)(v85 + (v83 << 6) + 13), v274);
            v96 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, v95[24], v274);
            if (*((_QWORD *)v95 + 1))
            {
              v97 = v96;
              v98 = 0;
              do
              {
                v99 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v64 + 5), *(_QWORD *)&v97[8 * v98], v35);
                AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v99, -1, v84, &v285);
                ++v98;
              }
              while (*((_QWORD *)v95 + 1) > v98);
            }
            break;
          case -16040:
            v90 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, *(unsigned __int8 *)(v85 + (v83 << 6) + 13), v274);
            v91 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, v90[16], v274);
            if (*((_QWORD *)v90 + 1))
            {
              v92 = v91;
              v93 = 0;
              do
              {
                v94 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v64 + 5), *(_QWORD *)&v92[8 * v93], v35);
                AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v94, -1, v84, &v285);
                ++v93;
              }
              while (*((_QWORD *)v90 + 1) > v93);
            }
            break;
          default:
            switch(v87)
            {
              case -15821:
              case -15819:
                goto LABEL_76;
              case -15820:
                v105 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, *(unsigned __int8 *)(v85 + (v83 << 6) + 13), v274);
                v106 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, v105[24], v274);
                if (*((_QWORD *)v105 + 1))
                {
                  v107 = v106;
                  v108 = 0;
                  do
                  {
                    v109 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v64 + 5), *(_QWORD *)&v107[8 * v108], v35);
                    AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v109, -1, v84, &v285);
                    ++v108;
                  }
                  while (*((_QWORD *)v105 + 1) > v108);
                }
                break;
              case -15818:
                v100 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, *(unsigned __int8 *)(v85 + (v83 << 6) + 13), v274);
                v101 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v86, v100[32], v274);
                if (*((_QWORD *)v100 + 1))
                {
                  v102 = v101;
                  v103 = 0;
                  do
                  {
                    v104 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v64 + 5), *(_QWORD *)&v102[8 * v103], v35);
                    AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v104, -1, v84, &v285);
                    ++v103;
                  }
                  while (*((_QWORD *)v100 + 1) > v103);
                }
                break;
              default:
                goto LABEL_93;
            }
            break;
        }
LABEL_93:
        ++v83;
        v33 = v265;
      }
      while (v65[1] > v83);
    }
    else
    {
      if (v38 != 28)
        goto LABEL_96;
      v39 = 0;
      v40 = (unint64_t)__dst[9];
      v41 = newpool;
      do
      {
        if (((v40 >> v39) & 1) == 0)
        {
          v42 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v32 + 5), (uint64_t)__dst[v39 + 11], v35);
          AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v42, v39, v41, &v285);
        }
        ++v39;
      }
      while (v39 != 31);
      v43 = *v31;
      v273 = *((_QWORD *)*v31 + 2);
      v44 = v31[1];
      v45 = GroupBuilder_findInclusiveRange(*(_DWORD *)(*((_QWORD *)v43 + 14) + 12), *(_QWORD **)(*((_QWORD *)v43 + 14) + 24), *(_QWORD *)(a1 + 288));
      if (!v45)
        goto LABEL_95;
      while (1)
      {
        v46 = *((_DWORD *)v45 + 7);
        if (IsFuncEnumCreateCommandEncoder(v46))
          break;
        v47 = *((unsigned int *)v45 + 4);
        if ((_DWORD)v47)
          v45 -= 4 * v47;
        else
          v45 = 0;
        if (!v45)
          goto LABEL_95;
      }
      if (GetFuncEnumConstructorType(v46) != 28)
        goto LABEL_95;
      v68 = *(int *)v45;
      if (v45[1] <= v68)
        goto LABEL_95;
      v264 = v33;
      v267 = v44;
      do
      {
        v69 = *(_QWORD *)(*((_QWORD *)v43 + 15) + 24);
        v70 = v69 + (v68 << 6);
        switch(*(_DWORD *)(v70 + 8))
        {
          case 0xFFFFC151:
          case 0xFFFFC153:
            v71 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v70, *(unsigned __int8 *)(v69 + (v68 << 6) + 13), v273);
            v72 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v43 + 5), *((_QWORD *)v71 + 1), v35);
            AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v72, -1, v41, &v285);
            break;
          case 0xFFFFC152:
            v78 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v70, *(unsigned __int8 *)(v69 + (v68 << 6) + 13), v273);
            v79 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v70, v78[24], v273);
            if (*((_QWORD *)v78 + 1))
            {
              v80 = v79;
              v81 = 0;
              do
              {
                v82 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v43 + 5), *(_QWORD *)&v80[8 * v81], v35);
                AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v82, -1, v41, &v285);
                ++v81;
              }
              while (*((_QWORD *)v78 + 1) > v81);
            }
            break;
          case 0xFFFFC154:
            v73 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v70, *(unsigned __int8 *)(v69 + (v68 << 6) + 13), v273);
            v74 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v70, v73[16], v273);
            if (*((_QWORD *)v73 + 1))
            {
              v75 = v74;
              v76 = 0;
              do
              {
                v77 = (int *)GTMTLSMContext_getObject(**((_QWORD **)v43 + 5), *(_QWORD *)&v75[8 * v76], v35);
                AccelerationStructureViewerServer::MTLAccelerationStructureDataSource::visitResourceObject(a1, v31, v77, -1, v41, &v285);
                ++v76;
              }
              while (*((_QWORD *)v73 + 1) > v76);
            }
            break;
          default:
            break;
        }
        ++v68;
      }
      while (v45[1] > v68);
      v33 = v264;
    }
    v44 = v267;
LABEL_95:

    goto LABEL_96;
  }
LABEL_245:

  return a1;
}

void sub_1B43D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,_QWORD *a30)
{
  uint64_t v30;
  apr_pool_t *v31;

  apr_pool_destroy(v31);
  std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(a30);

  a29 = a25;
  std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&a29);
  std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::~__hash_table(a24);

  std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::IntersectionFunction>>>>::destroy(*(char **)(v30 + 272));
  a29 = (void **)(v30 + 240);
  std::vector<AccelerationStructureViewer::IntersectionFunctionTable>::__destroy_vector::operator()[abi:nn180100](&a29);

  AccelerationStructureViewerServer::DataSource::~DataSource((AccelerationStructureViewerServer::DataSource *)v30);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,AccelerationStructureViewerServer::AccelerationStructure *>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void AccelerationStructureViewerServer::AccelerationStructure::~AccelerationStructure(id *this)
{
  id v2;

  v2 = this[16];
  if (v2)
  {
    this[17] = v2;
    operator delete(v2);
  }

}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewerServer::AccelerationStructure>>(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(184 * a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,std::__unordered_map_hasher<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::hash<GTMTLResourceUsage_uint8_t>,std::equal_to<GTMTLResourceUsage_uint8_t>,true>,std::__unordered_map_equal<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>,std::equal_to,std::hash,true>,objc_object  {objcproto11MTLResource}* {__strong}<std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>>::__emplace_unique_key_args<GTMTLResourceUsage_uint8_t,std::piecewise_construct_t const&,std::tuple<GTMTLResourceUsage_uint8_t const&>,std::piecewise_construct_t const&<>>(uint64_t *a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1B4B98(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:nn180100](char **a1, void *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  char *v19;
  void *v20;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (v5 - *a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      abort();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = a2;
    v6 = v12 + 8;
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    v19 = (char *)v17.i64[1];
    v18 = (char *)v17.i64[0];
    while (v19 != v18)
    {
      v20 = (void *)*((_QWORD *)v19 - 1);
      v19 -= 8;

    }
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v6 = v5 + 8;
  }
  a1[1] = v6;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<GTMTLResourceUsage_uint8_t,std::vector<objc_object  {objcproto11MTLResource}* {__strong}>>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<objc_object  {objcproto7MTLHeap}* {__strong}>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void sub_1B4DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::DataSourceQueryEncoder::encodeString(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;
  unint64_t v11[3];

  v10 = a3;
  v5 = objc_msgSend(v10, "smallestEncoding");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dataUsingEncoding:", v5));
  memset(v11, 0, sizeof(v11));
  std::vector<unsigned char>::__append(v11, (size_t)objc_msgSend(v6, "length") + 8);
  v7 = (void *)v11[0];
  v8 = v11[0];
  *(_QWORD *)v11[0] = v5;
  v9 = objc_retainAutorelease(v6);
  memcpy((void *)(v8 + 8), objc_msgSend(v9, "bytes"), (size_t)objc_msgSend(v9, "length"));
  (*(void (**)(uint64_t, uint64_t, char *, void *))(*(_QWORD *)a1 + 24))(a1, a2, (char *)objc_msgSend(v9, "length") + 8, v7);
  operator delete(v7);

}

void sub_1B4F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p)
{

  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void AccelerationStructureViewer::DataSourceQuerySizeCalculator::~DataSourceQuerySizeCalculator(AccelerationStructureViewer::DataSourceQuerySizeCalculator *this)
{
  operator delete();
}

uint64_t AccelerationStructureViewer::DataSourceQuerySizeCalculator::push(uint64_t result)
{
  *(_QWORD *)(result + 16) += 10;
  return result;
}

uint64_t AccelerationStructureViewer::DataSourceQuerySizeCalculator::encode(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 16) += a3 + 12;
  return result;
}

uint64_t AccelerationStructureViewer::DataSourceQuerySizeCalculator::encodeObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, a1);
}

void AccelerationStructureViewer::DataSourceQueryBlobEncoder::~DataSourceQueryBlobEncoder(AccelerationStructureViewer::DataSourceQueryBlobEncoder *this)
{
  operator delete();
}

_QWORD *AccelerationStructureViewer::DataSourceQueryBlobEncoder::push(_QWORD *result, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;

  result[result[3] + 4] = result[2];
  v2 = result[2];
  ++result[3];
  v3 = result[132] + v2;
  *(_WORD *)v3 = a2;
  *(_QWORD *)(v3 + 2) = 0;
  result[2] += 10;
  return result;
}

_QWORD *AccelerationStructureViewer::DataSourceQueryBlobEncoder::encode(_QWORD *result, uint64_t a2, size_t a3, void *__src)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = result[3];
  if (v4)
  {
    v6 = result;
    v7 = result[132] + result[v4 + 3];
    ++*(_QWORD *)(v7 + 2);
    v8 = result[132] + result[2];
    *(_QWORD *)v8 = a2;
    *(_DWORD *)(v8 + 8) = a3;
    v9 = result[2] + 12;
    result[2] = v9;
    result = memcpy((void *)(result[132] + v9), __src, a3);
    v6[2] += a3;
  }
  return result;
}

uint64_t AccelerationStructureViewer::DataSourceQueryBlobEncoder::encodeObject(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t result;

  v5 = a1[2];
  (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*a1 + 24))(a1, a2, 0, 0);
  v6 = *((_DWORD *)a1 + 4);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, a1);
  *(_DWORD *)(a1[132] + v5 + 8) = *((_DWORD *)a1 + 4) - v6;
  return result;
}

uint64_t AccelerationStructureViewer::DataSourceQueryBlobEncoder::pop(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 24);
  if (v1)
    *(_QWORD *)(this + 24) = v1 - 1;
  return this;
}

void AccelerationStructureViewer::DataSourceArray::~DataSourceArray(AccelerationStructureViewer::DataSourceArray *this)
{
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray(this);
  operator delete();
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_7241B0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

uint64_t AccelerationStructureViewer::DataSourceArray::encode(uint64_t a1, uint64_t a2)
{
  unint64_t i;
  unint64_t v6;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0);
  v6 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(*(_QWORD *)a2 + 24))(a2, 0, 8, &v6);
  if (v6)
  {
    for (i = 0; i < v6; ++i)
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, i + 100000, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i));
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::DataSourceArray::decode()
{
  return 0;
}

void AccelerationStructureViewer::DataSourceArray_StrongRef::~DataSourceArray_StrongRef(AccelerationStructureViewer::DataSourceArray_StrongRef *this)
{
  AccelerationStructureViewer::DataSourceArray_StrongRef::~DataSourceArray_StrongRef(this);
  operator delete();
}

{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = off_7241E8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray(this);
}

uint64_t AccelerationStructureViewer::DataSourceArray_StrongRef::decode(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;

  if (a3 >> 5 < 0xC35)
  {
    if (a3)
      return 1;
    v6 = *(_QWORD *)a2 + 8;
    if (v6 > *(_QWORD *)(a2 + 16))
    {
      result = 0;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
    *(_QWORD *)a2 = v6;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = (v9 - v8) >> 3;
    if (v7 <= v10)
    {
      if (v7 >= v10)
        goto LABEL_27;
      v24 = v8 + 8 * v7;
    }
    else
    {
      v11 = v7 - v10;
      v12 = *(_QWORD *)(a1 + 24);
      if (v7 - v10 > (v12 - v9) >> 3)
      {
        if (v7 >> 61)
          goto LABEL_49;
        v13 = v12 - v8;
        v14 = v13 >> 2;
        if (v13 >> 2 <= v7)
          v14 = v7;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v15);
        v17 = &v16[8 * v10];
        v19 = &v16[8 * v18];
        bzero(v17, 8 * v11);
        v20 = &v17[8 * v11];
        v22 = *(char **)(a1 + 8);
        v21 = *(char **)(a1 + 16);
        if (v21 != v22)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v17 - 1) = v23;
            v17 -= 8;
          }
          while (v21 != v22);
          v21 = *(char **)(a1 + 8);
        }
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 24) = v19;
        if (v21)
          operator delete(v21);
LABEL_27:
        v25 = *(char **)(a1 + 32);
        v26 = *(_BYTE **)(a1 + 40);
        v27 = (v26 - v25) >> 1;
        if (v7 <= v27)
        {
          if (v7 < v27)
            *(_QWORD *)(a1 + 40) = &v25[2 * v7];
LABEL_45:
          if (!v7)
            return 1;
LABEL_46:
          v38 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v38) = 0;
            *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v38++) = 16;
          }
          while (v7 != v38);
          return 1;
        }
        v28 = v7 - v27;
        v29 = *(_QWORD *)(a1 + 48);
        if (v7 - v27 <= (v29 - (uint64_t)v26) >> 1)
        {
          bzero(*(void **)(a1 + 40), 2 * v28);
          *(_QWORD *)(a1 + 40) = &v26[2 * v28];
          goto LABEL_46;
        }
        if ((v7 & 0x8000000000000000) == 0)
        {
          v30 = v29 - (_QWORD)v25;
          if (v30 <= v7)
            v31 = v7;
          else
            v31 = v30;
          if (v30 >= 0x7FFFFFFFFFFFFFFELL)
            v32 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32 < 0)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v33 = (char *)operator new(2 * v32);
          v34 = &v33[2 * v27];
          v35 = &v33[2 * v32];
          bzero(v34, 2 * v28);
          v36 = &v34[2 * v28];
          while (v26 != v25)
          {
            v37 = *((_WORD *)v26 - 1);
            v26 -= 2;
            *((_WORD *)v34 - 1) = v37;
            v34 -= 2;
          }
          *(_QWORD *)(a1 + 32) = v34;
          *(_QWORD *)(a1 + 40) = v36;
          *(_QWORD *)(a1 + 48) = v35;
          if (v25)
            operator delete(v25);
          goto LABEL_45;
        }
LABEL_49:
        abort();
      }
      bzero(*(void **)(a1 + 16), 8 * v11);
      v24 = v9 + 8 * v11;
    }
    *(_QWORD *)(a1 + 16) = v24;
    goto LABEL_27;
  }
  v4 = a3 - 100000;
  if (a3 - 100000 < (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3)
  {
    v39 = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v39);
    *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v4) = v39;
    return 1;
  }
  return 0;
}

uint64_t AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(uint64_t a1, _WORD *a2)
{
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)a1 + 10;
  if (v2 <= *(_QWORD *)(a1 + 16))
  {
    v3 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)a1);
    *(_QWORD *)a1 = v2;
    if (a2)
      *a2 = v3;
    switch(v3)
    {
      case 0:
        operator new();
      case 1:
        operator new();
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      case 7:
        operator new();
      case 8:
        operator new();
      case 9:
        operator new();
      case 10:
        operator new();
      case 11:
        operator new();
      case 12:
        operator new();
      case 13:
        operator new();
      case 14:
        operator new();
      case 15:
        operator new();
      case 17:
        operator new();
      case 18:
        operator new();
      case 19:
        operator new();
      case 20:
        operator new();
      case 21:
        operator new();
      case 22:
        operator new();
      case 23:
        operator new();
      default:
        return 0;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 1;
  }
  return 0;
}

void sub_1B5D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::CurvePrimitive::~CurvePrimitive(AccelerationStructureViewer::CurvePrimitive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
  operator delete();
}

uint64_t AccelerationStructureViewer::CurvePrimitive::encode(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 16))(a2, 23);
  AccelerationStructureViewer::Primitive::encode(a1, a2);
  return (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::Primitive::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  void (*v24)(void);
  __int16 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  result = 1;
  if (a3 <= 17)
  {
    switch(a3)
    {
      case 2:
        v22 = *(_QWORD *)a2 + 2;
        if (v22 <= *(_QWORD *)(a2 + 16))
        {
          v23 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          *(_QWORD *)a2 = v22;
          *(_DWORD *)(a1 + 32) = v23;
          return result;
        }
        break;
      case 3:
        if ((unint64_t)(*(_QWORD *)a2 + 4) <= *(_QWORD *)(a2 + 16))
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_56:
          v21 = *(_QWORD *)a2 + 4;
LABEL_57:
          *(_QWORD *)a2 = v21;
          return result;
        }
        break;
      case 11:
        if ((unint64_t)(*(_QWORD *)a2 + 4) <= *(_QWORD *)(a2 + 16))
        {
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
          goto LABEL_56;
        }
        break;
      default:
        return result;
    }
LABEL_48:
    result = 0;
    *(_BYTE *)(a2 + 24) = 1;
    return result;
  }
  switch(a3)
  {
    case 18:
      v25 = 0;
      v5 = (_QWORD *)AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v25);
      v6 = v5;
      if (v5 && !v25)
      {
        v8 = (uint64_t *)v5[1];
        v7 = (uint64_t *)v5[2];
        if (v8 != v7)
        {
          v9 = (_QWORD *)(a1 + 104);
          v10 = (uint64_t *)v5[1];
          do
          {
            if (*(_WORD *)(v6[4] + (((uint64_t)v8 - v6[1]) >> 2)) == 11)
            {
              v11 = *v10;
              v13 = *(_QWORD *)(a1 + 112);
              v12 = *(_QWORD *)(a1 + 120);
              if (v13 >= v12)
              {
                v15 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v13 - *v9) >> 3);
                v16 = v15 + 1;
                if (v15 + 1 > 0x222222222222222)
                  abort();
                v17 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v12 - *v9) >> 3);
                if (2 * v17 > v16)
                  v16 = 2 * v17;
                if (v17 >= 0x111111111111111)
                  v18 = 0x222222222222222;
                else
                  v18 = v16;
                v30 = a1 + 120;
                if (v18)
                  v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::Property>>(v18);
                else
                  v19 = 0;
                v26 = v18;
                v27 = v18 + 120 * v15;
                v28 = v27;
                v29 = v18 + 120 * v19;
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(v27, v11);
                v28 += 120;
                std::vector<AccelerationStructureViewer::Property>::__swap_out_circular_buffer((uint64_t *)(a1 + 104), &v26);
                v14 = *(_QWORD *)(a1 + 112);
                std::__split_buffer<AccelerationStructureViewer::Property>::~__split_buffer((uint64_t)&v26);
              }
              else
              {
                std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(*(_QWORD *)(a1 + 112), *v10);
                v14 = v13 + 120;
                *(_QWORD *)(a1 + 112) = v13 + 120;
              }
              *(_QWORD *)(a1 + 112) = v14;
              v7 = (uint64_t *)v6[2];
            }
            ++v10;
            ++v8;
          }
          while (v10 != v7);
        }
        (*(void (**)(_QWORD *))(*v6 + 8))(v6);
        goto LABEL_37;
      }
      if (!v5)
        goto LABEL_54;
      v24 = *(void (**)(void))(*v5 + 8);
      goto LABEL_53;
    case 28:
      LOWORD(v26) = 0;
      result = AccelerationStructureViewer::DataSourceQueryBlobDecoder::decode(a2, &v26);
      if (result && (unsigned __int16)v26 == 15)
      {
        v20 = *(_OWORD *)(result + 8);
        *(_QWORD *)(a1 + 92) = *(_QWORD *)(result + 24);
        *(_OWORD *)(a1 + 76) = v20;
        (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_37:
        result = 1;
      }
      else if (result)
      {
        v24 = *(void (**)(void))(*(_QWORD *)result + 8);
LABEL_53:
        v24();
LABEL_54:
        result = 0;
      }
      break;
    case 32:
      if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
        goto LABEL_48;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_56;
    case 33:
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_48;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_44;
    case 34:
      if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
        goto LABEL_48;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_56;
    case 35:
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_48;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_44;
    case 36:
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_48;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      goto LABEL_44;
    case 37:
      if ((unint64_t)(*(_QWORD *)a2 + 8) > *(_QWORD *)(a2 + 16))
        goto LABEL_48;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
LABEL_44:
      v21 = *(_QWORD *)a2 + 8;
      goto LABEL_57;
    default:
      return result;
  }
  return result;
}

void sub_1B621C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::allocator<AccelerationStructureViewer::Property>::construct[abi:nn180100]<AccelerationStructureViewer::Property,AccelerationStructureViewer::Property const&>(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = off_7274A8;
  v4 = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return std::vector<NSString * {__strong}>::__init_with_size[abi:nn180100]<NSString * {__strong}*,NSString * {__strong}*>((char *)(a1 + 96), *(void ***)(a2 + 96), *(void ***)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
}

void sub_1B62E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<AccelerationStructureViewer::Property>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 120) = off_7274A8;
      v4 -= 120;
      v5 = *(_WORD *)(v3 - 112);
      *(_BYTE *)(v4 + 10) = *(_BYTE *)(v3 - 110);
      *(_WORD *)(v4 + 8) = v5;
      v6 = *(_QWORD *)(v3 - 104);
      *(_QWORD *)(v3 - 104) = 0;
      *(_QWORD *)(v4 + 16) = v6;
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(v3 - 96);
      v7 = *(_OWORD *)(v3 - 80);
      v8 = *(_OWORD *)(v3 - 64);
      v9 = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 + 72) = *(_OWORD *)(v3 - 48);
      *(_OWORD *)(v4 + 56) = v8;
      *(_OWORD *)(v4 + 40) = v7;
      *(_QWORD *)(v4 + 88) = v9;
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 104) = 0;
      *(_QWORD *)(v4 + 112) = 0;
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 + 112) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 120;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AccelerationStructureViewer::Property>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 120);
    *(_QWORD *)(a1 + 16) = i - 120;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AccelerationStructureViewer::Primitive::encode(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (**v16)(AccelerationStructureViewer::DataSourceArray *__hidden);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void (**v20)(AccelerationStructureViewer::BoundingBox *__hidden);
  __int128 v21;
  uint64_t v22;
  __int16 v23;

  v23 = *(_DWORD *)(a1 + 32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __int16 *))(*a2 + 24))(a2, 2, 2, &v23);
  v4 = a1 + 40;
  v5 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a2 + 24);
  if (a2[1] < 0xAuLL)
  {
    v5(a2, 3, 4, v4);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a2 + 24))(a2, 32, 4, a1 + 48);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a2 + 24))(a2, 11, 4, a1 + 56);
  }
  else
  {
    v5(a2, 35, 8, v4);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a2 + 24))(a2, 36, 8, a1 + 48);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a2 + 24))(a2, 37, 8, a1 + 56);
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a2 + 24))(a2, 33, 8, a1 + 64);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a2 + 24))(a2, 34, 4, a1 + 72);
  v20 = off_724418;
  v21 = *(_OWORD *)(a1 + 76);
  v22 = *(_QWORD *)(a1 + 92);
  (*(void (**)(_QWORD *, uint64_t, void (***)(AccelerationStructureViewer::BoundingBox *__hidden)))(*a2 + 40))(a2, 28, &v20);
  v16 = off_7241B0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = *(_QWORD *)(a1 + 104);
  if (v6 != *(_QWORD *)(a1 + 112))
  {
    v7 = 0;
    do
    {
      if ((unint64_t)v7 >= (unint64_t)v18)
      {
        v8 = (uint64_t)((uint64_t)v7 - v17) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          abort();
        v9 = (uint64_t)(v18 - v17) >> 2;
        if (v9 <= v8 + 1)
          v9 = v8 + 1;
        if ((_QWORD)v18 - (_QWORD)v17 >= 0x7FFFFFFFFFFFFFF8uLL)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<NSString * {__strong}>>(v10);
        else
          v11 = 0;
        v12 = (_QWORD *)(v10 + 8 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        v13 = (char *)*((_QWORD *)&v17 + 1);
        v14 = (char *)v17;
        if (*((_QWORD *)&v17 + 1) != (_QWORD)v17)
        {
          do
          {
            v15 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v12 = v15;
          }
          while (v13 != v14);
          v13 = (char *)v17;
        }
        *(_QWORD *)&v17 = v12;
        *((_QWORD *)&v17 + 1) = v7;
        *(_QWORD *)&v18 = v10 + 8 * v11;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v7++ = v6;
      }
      *((_QWORD *)&v17 + 1) = v7;
      v6 += 120;
    }
    while (v6 != *(_QWORD *)(a1 + 112));
  }
  (*(void (**)(_QWORD *, uint64_t, void (***)(AccelerationStructureViewer::DataSourceArray *__hidden)))(*a2 + 40))(a2, 18, &v16);
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&v16);
}

void sub_1B6680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AccelerationStructureViewer::DataSourceArray::~DataSourceArray((AccelerationStructureViewer::DataSourceArray *)&a9);
  _Unwind_Resume(a1);
}

void AccelerationStructureViewer::Primitive::~Primitive(AccelerationStructureViewer::Primitive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
  operator delete();
}

void AccelerationStructureViewer::BoundingBoxPrimitive::~BoundingBoxPrimitive(AccelerationStructureViewer::BoundingBoxPrimitive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
  operator delete();
}

uint64_t AccelerationStructureViewer::BoundingBoxPrimitive::encode(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 16))(a2, 21);
  AccelerationStructureViewer::Primitive::encode(a1, a2);
  return (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
}

void AccelerationStructureViewer::TrianglePrimitive::~TrianglePrimitive(AccelerationStructureViewer::TrianglePrimitive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
  operator delete();
}

uint64_t AccelerationStructureViewer::TrianglePrimitive::encode(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 16))(a2, 20);
  AccelerationStructureViewer::Primitive::encode(a1, a2);
  return (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
}

void AccelerationStructureViewer::InvalidPrimitive::~InvalidPrimitive(AccelerationStructureViewer::InvalidPrimitive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_7245A0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 104);
  std::vector<AccelerationStructureViewer::Property>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = v1;
  std::vector<std::pair<ASVDataSourceFilterTokenType,NSString * {__strong}>>::__destroy_vector::operator()[abi:nn180100](&v2);
  operator delete();
}

uint64_t AccelerationStructureViewer::InvalidPrimitive::encode(uint64_t a1, _QWORD *a2)
{
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 16))(a2, 19);
  AccelerationStructureViewer::Primitive::encode(a1, a2);
  return (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
}

void AccelerationStructureViewer::BoundingBox::~BoundingBox(AccelerationStructureViewer::BoundingBox *this)
{
  operator delete();
}

uint64_t AccelerationStructureViewer::BoundingBox::encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 15);
  v4 = 0;
  v5 = a1 + 8;
  do
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4 + 100000, 4, v5);
    ++v4;
    v5 += 4;
  }
  while (v4 != 6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t AccelerationStructureViewer::BoundingBox::decode(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 5 >= 0xC35)
  {
    if (a3 - 100000 > 5)
      return 0;
    if ((unint64_t)(*(_QWORD *)a2 + 4) > *(_QWORD *)(a2 + 16))
    {
      result = 0;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    *(_DWORD *)(a1 + 4 * (a3 - 100000) + 8) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
    *(_QWORD *)a2 += 4;
  }
  return 1;
}

void AccelerationStructureViewer::DataSourceQueryRequest_StrongRef::~DataSourceQueryRequest_StrongRef(AccelerationStructureViewer::DataSourceQueryRequest_StrongRef *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_724728;
  v1 = *((_QWORD *)this + 5);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = off_724728;
  v1 = *((_QWORD *)this + 5);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t AccelerationStructureViewer::DataSourceQueryRequest::encode(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 3, 8, a1 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 32, 8, a1 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 23, 8, a1 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 24, 8, a1 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 25, 8, a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 26);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

