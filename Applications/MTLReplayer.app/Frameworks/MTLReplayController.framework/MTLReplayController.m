uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void agxps_gpu_create()
{
  operator new();
}

BOOL agxps_gpu_is_valid(uint64_t a1)
{
  return a1 != 0;
}

uint64_t agxps_gpu_invalid_handle()
{
  return 0;
}

uint64_t agxps_gpu_get_gen(unsigned int *a1)
{
  return *a1;
}

uint64_t agxps_gpu_get_variant(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t agxps_gpu_get_rev(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_4074()
{
  sub_4088("vector");
}

void sub_4088(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_40D8(exception, a1);
}

void sub_40C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_40D8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_40FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_4130();
  return operator new(8 * a2);
}

void sub_4130()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_4158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  sub_6B2C(a1 + 232);
  sub_6B2C(a1 + 192);
  sub_6BE4(a1 + 152);
  sub_6D40(a1 + 112);
  sub_6DBC(a1 + 72);
  sub_6EAC(a1 + 32);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        sub_6F58(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_41E8(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = *a1;
  if (*a1)
    return v6(a2, a3, a4, a5, a6);
  v6 = a1[1];
  if (v6)
    return v6(a2, a3, a4, a5, a6);
  else
    return agxps_gpu_invalid_handle();
}

uint64_t sub_4214(uint64_t result, char *__s1, const char *a3, int a4)
{
  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)(result + 16) = a4;
  *(_OWORD *)(result + 40) = 0u;
  *(_DWORD *)(result + 56) = 1065353216;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  if ((a4 & 1) != 0)
  {
    if (__s1)
    {
      strnlen(__s1, 0x4000uLL);
      operator new[]();
    }
    *(_QWORD *)result = 0;
    if (a3)
    {
      strnlen(a3, 0x4000uLL);
      operator new[]();
    }
  }
  else
  {
    *(_QWORD *)result = __s1;
  }
  *(_QWORD *)(result + 8) = a3;
  return result;
}

void sub_4314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void **sub_4334(void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  return a1;
}

uint64_t sub_436C(uint64_t a1)
{
  void **v3;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (*(_QWORD *)a1)
      operator delete[]();
    if (*(_QWORD *)(a1 + 8))
      operator delete[]();
  }
  v3 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 24);
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_4400(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v6;
  unsigned int v8;
  int *v9;

  v8 = a3 | (a2 << 16);
  v9 = (int *)&v8;
  v6 = sub_977C(a1 + 24, &v8, (uint64_t)algn_4A2B62, &v9);
  v6[3] = a4;
  v6[4] = 0;
  return a1;
}

uint64_t sub_445C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  char v9;
  unint64_t v10;
  _QWORD *v11;
  char v12;
  unsigned int v14;
  int *v15;

  v8 = 0x500000011;
  while (1)
  {
    v8 = sub_6FE0(v8, HIDWORD(v8));
    if (!v9)
      break;
    if (v9 != 1)
      sub_70A0();
  }
  v10 = a2 | (unint64_t)(a3 << 32);
  do
  {
    v14 = HIDWORD(v10) | ((_DWORD)v10 << 16);
    v15 = (int *)&v14;
    v11 = sub_977C(a1 + 24, &v14, (uint64_t)algn_4A2B62, &v15);
    v11[3] = a4;
    v11[4] = 0;
    v10 = sub_6FE0(v10, HIDWORD(v10));
  }
  while (v12 == 1);
  return a1;
}

uint64_t sub_454C(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unsigned int v15;
  int *v16;

  v8 = a2 | (unint64_t)(a3 << 32);
  v9 = sub_6FE0(a4, a5);
  v11 = v10;
  do
  {
    if (v11 && v8 == v9)
      break;
    v15 = HIDWORD(v8) | ((_DWORD)v8 << 16);
    v16 = (int *)&v15;
    v12 = sub_977C(a1 + 24, &v15, (uint64_t)algn_4A2B62, &v16);
    v12[3] = a6;
    v12[4] = 0;
    v8 = sub_6FE0(v8, HIDWORD(v8));
  }
  while (v13 == 1);
  return a1;
}

uint64_t *sub_4618(uint64_t *a1, char *a2)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[5];

  sub_96CC(__p, a2);
  v3 = a1[10];
  v4 = a1[9];
  if (v4 >= v3)
  {
    v6 = a1[8];
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v6) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_4074();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v19[4] = a1 + 10;
    if (v10)
      v11 = (char *)sub_8C40((uint64_t)(a1 + 10), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v19[0] = v11;
    v19[1] = v12;
    v19[3] = &v11[24 * v10];
    v13 = *(_OWORD *)__p;
    *((_QWORD *)v12 + 2) = v18;
    *(_OWORD *)v12 = v13;
    __p[1] = 0;
    v18 = 0;
    __p[0] = 0;
    v19[2] = v12 + 24;
    sub_99A0(a1 + 8, v19);
    v14 = a1[9];
    sub_9B28((uint64_t)v19);
    v15 = SHIBYTE(v18);
    a1[9] = v14;
    if (v15 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v18;
    *(_OWORD *)v4 = v5;
    a1[9] = v4 + 24;
  }
  return a1;
}

void sub_4758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_9B28((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_4784(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_WORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  return result;
}

uint64_t sub_47C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *a2;
  v4 = a1 + 48;
  sub_9BB0(a1 + 8, (uint64_t)(a2 + 1));
  sub_A278(v4, (uint64_t)(a2 + 6));
  *(_WORD *)(a1 + 88) = 257;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  sub_4888(a1);
  return a1;
}

void sub_4854(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v3);
  sub_6E30(v2);
  sub_6B2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4888(uint64_t result)
{
  uint64_t v1;
  uint64_t *i;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *j;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  __int128 v11;

  v1 = result;
  if (*(_BYTE *)(result + 88))
  {
    *(_BYTE *)(result + 88) = 0;
    result = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear((_QWORD *)(result + 96));
    for (i = *(uint64_t **)(v1 + 24); i; i = (uint64_t *)*i)
    {
      v3 = i + 5;
      if (*((char *)i + 63) < 0)
        v3 = (_QWORD *)*v3;
      v4 = i + 2;
      v5 = *((unsigned __int8 *)i + 39);
      if ((v5 & 0x80u) != 0)
      {
        v4 = (uint64_t *)i[2];
        v5 = i[3];
      }
      *(_QWORD *)&v10 = v4;
      *((_QWORD *)&v10 + 1) = v5;
      *(_QWORD *)&v11 = v3;
      result = sub_B008((_QWORD *)(v1 + 96), (uint64_t)&v10);
    }
  }
  if (*(_BYTE *)(v1 + 89))
  {
    *(_BYTE *)(v1 + 89) = 0;
    v6 = v1 + 136;
    result = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear((_QWORD *)(v1 + 136));
    for (j = *(uint64_t **)(v1 + 64); j; j = (uint64_t *)*j)
    {
      v8 = *((unsigned __int8 *)j + 39);
      if ((v8 & 0x80u) == 0)
        v9 = j + 2;
      else
        v9 = (uint64_t *)j[2];
      if ((v8 & 0x80u) != 0)
        v8 = j[3];
      *(_QWORD *)&v10 = v9;
      *((_QWORD *)&v10 + 1) = v8;
      v11 = *(_OWORD *)(j + 5);
      result = (uint64_t)sub_B50C(v6, (uint64_t)&v10, &v10);
    }
  }
  return result;
}

uint64_t sub_498C(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 136);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 96);
  sub_6E30(a1 + 48);
  sub_6B2C(a1 + 8);
  return a1;
}

uint64_t sub_49CC(uint64_t a1, __int128 *a2, __int128 *a3)
{
  char *v5;
  char *v6;
  __int128 *v7;
  char **v8;
  char v9;
  void *__dst[2];
  char v11;
  void *__p;
  char v13;
  __int128 v14;

  sub_70D4((char *)__dst, a2, a3);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = &v5;
  v9 = 0;
  v5 = (char *)operator new(0x30uLL);
  v6 = v5;
  v7 = (__int128 *)(v5 + 48);
  v6 = sub_A610((uint64_t)&v7, (__int128 *)__dst, &v14, v5);
  sub_4AEC(a1, (__int128 **)&v5);
  v8 = &v5;
  sub_A80C((void ***)&v8);
  if (v13 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_4AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  sub_A80C((void ***)va);
  sub_4B98((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_4AEC(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  char *v6;
  void *v8[2];
  char v9;
  void *__p;
  char v11;

  *(_BYTE *)(a1 + 88) = 1;
  v4 = *a2;
  v5 = a2[1];
  if (v4 != v5)
  {
    do
    {
      v6 = (char *)v4 + 24;
      sub_7208((char *)v8, v4, (__int128 *)((char *)v4 + 24));
      sub_A890((_QWORD *)(a1 + 8), (uint64_t)v8);
      if (v11 < 0)
        operator delete(__p);
      if (v9 < 0)
        operator delete(v8[0]);
      v4 = (__int128 *)(v6 + 24);
    }
    while (v6 + 24 != (char *)v5);
  }
  return a1;
}

void sub_4B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_4B98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_4B98(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_4BD8(uint64_t a1, uint64_t a2, double a3)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 **v9;
  char v10;
  void *__p[2];
  uint64_t v12;
  double v13;
  __int128 v14;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_7168(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v12 = *(_QWORD *)(a2 + 16);
  }
  v13 = a3;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v9 = &v6;
  v10 = 0;
  v6 = (__int128 *)operator new(0x20uLL);
  v7 = v6;
  v8 = v6 + 2;
  v7 = (__int128 *)sub_A9BC((uint64_t)&v8, (__int128 *)__p, &v14, v6);
  sub_4D28(a1, &v6);
  v9 = &v6;
  sub_AAFC((void ***)&v9);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_4CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_4D28(uint64_t a1, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  void *__p[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 89) = 1;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 3);
      if (*((char *)v3 + 23) < 0)
      {
        sub_7168(__p, *(void **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v6 = *v3;
        v9 = *((_QWORD *)v3 + 2);
        *(_OWORD *)__p = v6;
      }
      v10 = 0;
      v11 = v5;
      sub_AB88(a1 + 48, (unsigned __int8 *)__p, (uint64_t)__p);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
      v3 += 2;
    }
    while (v3 != v4);
  }
  return a1;
}

void sub_4DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_4DF4(uint64_t a1)
{
  sub_4888(a1);
  return a1 + 96;
}

uint64_t sub_4E18(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  __int128 *i;
  uint64_t *v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  char v14;

  v4 = *(uint64_t **)(a2 + 64);
  if (v4)
  {
    while (1)
    {
      if (*((char *)v4 + 39) < 0)
      {
        sub_7168(__p, (void *)v4[2], v4[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v4 + 1);
        v12 = v4[4];
      }
      v13 = *(_OWORD *)(v4 + 5);
      v5 = sub_9484((_QWORD *)(a1 + 48), (unsigned __int8 *)__p);
      if (v5)
        v6 = sub_BB34(*((_QWORD *)v5 + 5), *((_QWORD *)v5 + 6), v13, *((uint64_t *)&v13 + 1));
      else
        v6 = 3;
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
      if (v6 != 3 && v6)
        return 0;
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    for (i = *(__int128 **)(a2 + 24); i; i = *(__int128 **)i)
    {
      sub_729C((char *)__p, i + 1);
      *(_BYTE *)(a1 + 88) = 1;
      sub_AEAC((_QWORD *)(a1 + 8), (__int128 *)__p);
      if (v14 < 0)
        operator delete((void *)v13);
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
    v8 = *(uint64_t **)(a2 + 64);
    v9 = 1;
    if (v8)
    {
      do
      {
        if (*((char *)v8 + 39) < 0)
        {
          sub_7168(__p, (void *)v8[2], v8[3]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v8 + 1);
          v12 = v8[4];
        }
        v13 = *(_OWORD *)(v8 + 5);
        *(_BYTE *)(a1 + 89) = 1;
        sub_A2EC(a1 + 48, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
        v8 = (uint64_t *)*v8;
      }
      while (v8);
      return 1;
    }
  }
  return v9;
}

void sub_4FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_4FF4(unsigned int *a1)
{
  int gen;
  uint64_t *v4;
  unsigned int v5;

  if (!agxps_gpu_is_valid((uint64_t)a1))
    return 0;
  gen = agxps_gpu_get_gen(a1);
  v5 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16);
  if ((byte_751E60 & 1) == 0)
    return 0;
  v4 = sub_7330(&qword_751E80, &v5);
  if (v4)
    return v4 + 3;
  else
    return 0;
}

uint64_t *sub_506C(unint64_t a1)
{
  uint64_t v1;

  if (0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4) > a1
    && (v1 = *(_QWORD *)(qword_751E68 + 80 * a1 + 72)) != 0)
  {
    return (uint64_t *)(v1 + 8);
  }
  else
  {
    return &qword_753100;
  }
}

BOOL agxps_counter_is_valid(unint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4) > a1;
}

BOOL agxps_counter_is_derived(unint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4) > a1
      && *(_QWORD *)(qword_751E68 + 80 * a1 + 72) != 0;
}

void agxps_initialize()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t i;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_751F70);
  v0 = atomic_load((unsigned __int8 *)&byte_751E60);
  if ((v0 & 1) != 0)
  {
    v1 = atomic_load((unsigned __int8 *)&byte_751E60);
    if ((v1 & 1) != 0)
    {
      v2 = qword_751E68;
      for (i = qword_751E70; i != v2; sub_6F58(i))
        i -= 80;
      qword_751E70 = v2;
      sub_73E4((uint64_t)&qword_751E80);
      sub_7438((uint64_t)qword_751EA8);
      sub_748C((uint64_t)&xmmword_751ED0);
      atomic_store(0, (unsigned __int8 *)&byte_751E60);
    }
  }
  __asm { BR              X9 }
}

void sub_571C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  uint64_t v52;

  *(_QWORD *)(v52 - 128) = &a34;
  sub_B830((void ***)(v52 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_5820(unsigned int a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v62;
  unsigned int *v63;

  v62 = a1;
  if ((byte_751E60 & 1) != 0)
    return -1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4);
  v63 = &v62;
  v4 = sub_74E0((uint64_t)qword_751EA8, &v62, (uint64_t)algn_4A2B62, &v63);
  v63 = (unsigned int *)a2;
  *((_QWORD *)sub_79C8((uint64_t)(v4 + 3), (unsigned __int8 *)a2, (uint64_t)algn_4A2B62, (__int128 **)&v63) + 5) = v3;
  if (*(_QWORD *)(a2 + 72))
  {
    v63 = &v62;
    v5 = sub_829C((uint64_t)&xmmword_751ED0, &v62, (uint64_t)algn_4A2B62, &v63);
    v6 = v5;
    v7 = (unint64_t *)v5[4];
    v8 = (uint64_t)(v5 + 5);
    v9 = v5[5];
    if ((unint64_t)v7 >= v9)
    {
      v11 = (unint64_t *)v5[3];
      v12 = v7 - v11;
      if ((unint64_t)(v12 + 1) >> 61)
LABEL_59:
        sub_4074();
      v13 = v9 - (_QWORD)v11;
      v14 = (uint64_t)(v9 - (_QWORD)v11) >> 2;
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      if (v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        v16 = (char *)sub_40FC(v8, v15);
        v11 = (unint64_t *)v6[3];
        v7 = (unint64_t *)v6[4];
      }
      else
      {
        v16 = 0;
      }
      v17 = (unint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v3;
      v10 = v17 + 1;
      while (v7 != v11)
      {
        v19 = *--v7;
        *--v17 = v19;
      }
      v6[3] = v17;
      v6[4] = v10;
      v6[5] = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v7 = v3;
      v10 = v7 + 1;
    }
    v6[4] = v10;
    v63 = &v62;
    v20 = sub_853C((uint64_t)&unk_751EF8, &v62, (uint64_t)algn_4A2B62, &v63);
    v21 = sub_686C(a2);
    v22 = (__int128 *)*v21;
    v23 = (__int128 *)v21[1];
    if ((__int128 *)*v21 != v23)
    {
      v24 = (uint64_t)(v20 + 3);
      do
      {
        v63 = (unsigned int *)v22;
        v25 = sub_87F0(v24, (unsigned __int8 *)v22, (uint64_t)algn_4A2B62, (__int128 **)&v63);
        v26 = v25;
        v27 = (unint64_t *)*((_QWORD *)v25 + 6);
        v28 = (uint64_t)(v25 + 56);
        v29 = *((_QWORD *)v25 + 7);
        if ((unint64_t)v27 >= v29)
        {
          v31 = (unint64_t *)*((_QWORD *)v25 + 5);
          v32 = v27 - v31;
          if ((unint64_t)(v32 + 1) >> 61)
            goto LABEL_59;
          v33 = v29 - (_QWORD)v31;
          v34 = (uint64_t)(v29 - (_QWORD)v31) >> 2;
          if (v34 <= v32 + 1)
            v34 = v32 + 1;
          if (v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
          {
            v36 = (char *)sub_40FC(v28, v35);
            v31 = (unint64_t *)*((_QWORD *)v26 + 5);
            v27 = (unint64_t *)*((_QWORD *)v26 + 6);
          }
          else
          {
            v36 = 0;
          }
          v37 = (unint64_t *)&v36[8 * v32];
          *v37 = v3;
          v30 = v37 + 1;
          while (v27 != v31)
          {
            v38 = *--v27;
            *--v37 = v38;
          }
          *((_QWORD *)v26 + 5) = v37;
          *((_QWORD *)v26 + 6) = v30;
          *((_QWORD *)v26 + 7) = &v36[8 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v27 = v3;
          v30 = v27 + 1;
        }
        *((_QWORD *)v26 + 6) = v30;
        v22 = (__int128 *)((char *)v22 + 24);
      }
      while (v22 != v23);
    }
  }
  v39 = qword_751E70;
  if (qword_751E70 >= (unint64_t)qword_751E78)
  {
    v45 = 0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4);
    v46 = v45 + 1;
    if (v45 + 1 > 0x333333333333333)
      sub_4074();
    if (0x999999999999999ALL * ((qword_751E78 - qword_751E68) >> 4) > v46)
      v46 = 0x999999999999999ALL * ((qword_751E78 - qword_751E68) >> 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_751E78 - qword_751E68) >> 4) >= 0x199999999999999)
      v47 = 0x333333333333333;
    else
      v47 = v46;
    if (v47 > 0x333333333333333)
      sub_4130();
    v48 = (char *)operator new(80 * v47);
    v49 = &v48[80 * v45];
    *(_OWORD *)v49 = *(_OWORD *)a2;
    *((_QWORD *)v49 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(v49 + 24) = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v49 + 5) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v50 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v51 = *(_QWORD *)(a2 + 64);
    v52 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *((_OWORD *)v49 + 3) = v50;
    *((_QWORD *)v49 + 8) = v51;
    *((_QWORD *)v49 + 9) = v52;
    v53 = qword_751E68;
    v54 = (char *)qword_751E70;
    if (qword_751E70 == qword_751E68)
    {
      v44 = (uint64_t)(v49 + 80);
      qword_751E68 = (uint64_t)&v48[80 * v45];
      qword_751E70 = (uint64_t)(v49 + 80);
      qword_751E78 = (uint64_t)&v48[80 * v47];
    }
    else
    {
      v55 = (uint64_t)&v48[80 * v45];
      do
      {
        v56 = *((_OWORD *)v54 - 5);
        *(_QWORD *)(v55 - 64) = *((_QWORD *)v54 - 8);
        *(_OWORD *)(v55 - 80) = v56;
        *((_QWORD *)v54 - 9) = 0;
        *((_QWORD *)v54 - 8) = 0;
        *((_QWORD *)v54 - 10) = 0;
        v57 = *(_OWORD *)(v54 - 56);
        *(_QWORD *)(v55 - 40) = *((_QWORD *)v54 - 5);
        *(_OWORD *)(v55 - 56) = v57;
        *((_QWORD *)v54 - 6) = 0;
        *((_QWORD *)v54 - 5) = 0;
        *((_QWORD *)v54 - 7) = 0;
        v58 = *((_OWORD *)v54 - 2);
        *(_QWORD *)(v55 - 16) = *((_QWORD *)v54 - 2);
        *(_OWORD *)(v55 - 32) = v58;
        *((_QWORD *)v54 - 4) = 0;
        *((_QWORD *)v54 - 3) = 0;
        v59 = *((_QWORD *)v54 - 1);
        *((_QWORD *)v54 - 2) = 0;
        *((_QWORD *)v54 - 1) = 0;
        *(_QWORD *)(v55 - 8) = v59;
        v55 -= 80;
        v54 -= 80;
      }
      while (v54 != (char *)v53);
      v54 = (char *)qword_751E68;
      v60 = qword_751E70;
      v44 = (uint64_t)(v49 + 80);
      qword_751E68 = v55;
      qword_751E70 = (uint64_t)(v49 + 80);
      qword_751E78 = (uint64_t)&v48[80 * v47];
      while ((char *)v60 != v54)
      {
        v60 -= 80;
        sub_6F58(v60);
      }
    }
    if (v54)
      operator delete(v54);
  }
  else
  {
    v40 = *(_OWORD *)a2;
    *(_QWORD *)(qword_751E70 + 16) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v39 = v40;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v41 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(v39 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(v39 + 24) = v41;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v42 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v39 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v39 + 48) = v42;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v43 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(v39 + 72) = v43;
    v44 = v39 + 80;
  }
  qword_751E70 = v44;
  return v3;
}

uint64_t sub_5CF8(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v4 = (void **)(v2 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
    operator delete();
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_BYTE **sub_5D84(_BYTE **result, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *__p;
  uint64_t v14;
  uint64_t v15;

  if (**result)
  {
    if (*(_QWORD *)(a2 + 48))
    {
      if (*(_QWORD *)(a2 + 40))
      {
        sub_96CC(v7, *(char **)a2);
        sub_96CC(v5, *(char **)(a2 + 8));
        v4 = 0;
        v3 = 0uLL;
        sub_8B6C((char *)&v3, *(__int128 **)(a2 + 64), *(__int128 **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
        *(_OWORD *)v9 = *(_OWORD *)v7;
        v10 = v8;
        v7[1] = 0;
        v8 = 0;
        v11 = *(_OWORD *)v5;
        v12 = v6;
        v5[0] = 0;
        v5[1] = 0;
        v6 = 0;
        v7[0] = 0;
        v14 = 0;
        v15 = 0;
        __p = 0;
        operator new();
      }
    }
    else
    {
      **result = 0;
    }
  }
  return result;
}

void sub_5FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  sub_5CF8((uint64_t)&a27);
  *(_QWORD *)(v44 - 120) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)(v44 - 120));
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_BYTE **sub_6034(_BYTE **result, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (**result && (byte_751E60 & 1) == 0)
  {
    v10 = *(_DWORD *)(a2 + 4) | (*(_DWORD *)a2 << 16);
    v3 = sub_7330(&qword_751E80, (unsigned int *)&v10);
    if (v3)
    {
      return (_BYTE **)sub_4E18((uint64_t)(v3 + 3), a2);
    }
    else
    {
      v4 = v10;
      sub_47C0((uint64_t)&v5, (_QWORD *)a2);
      sub_8E44((uint64_t)&qword_751E80, (unsigned int *)&v4, (uint64_t)&v4);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v9);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)&v8);
      sub_6E30((uint64_t)&v7);
      return (_BYTE **)sub_6B2C((uint64_t)&v6);
    }
  }
  return result;
}

void sub_60EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 144);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 104);
  sub_6E30(v1 + 56);
  sub_6B2C(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t agxps_load_counter_obfuscation_map(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  const std::string::value_type *v18;
  id v19;
  unsigned __int8 *v20;
  id v21;
  const std::string::value_type *v22;
  NSObject *v23;
  unsigned __int8 *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v29;
  void *v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  _BYTE __p[12];
  __int16 v38;
  int v39;
  __int16 v40;
  id v41;
  _BYTE v42[128];

  if (a1)
  {
    v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a1);
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.gpusw.AGXProfilingSupport")));
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pathForResource:ofType:", CFSTR("RawCountersMapping"), CFSTR("csv")));

    v1 = (id)v3;
  }
  v30 = v1;
  if (v1
    && (v29 = objc_msgSend(objc_alloc((Class)NSString), "initWithContentsOfFile:encoding:error:", v1, 4, 0)) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet newlineCharacterSet](NSCharacterSet, "newlineCharacterSet"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "componentsSeparatedByCharactersInSet:", v4));

    sub_9148((uint64_t)&xmmword_751F20);
    v6 = objc_msgSend(v5, "count");
    sub_7750((uint64_t)&xmmword_751F20, vcvtps_u32_f32((float)(unint64_t)v6 / *(float *)&dword_751F40));
    sub_9148((uint64_t)&unk_751F48);
    v7 = objc_msgSend(v5, "count");
    sub_7750((uint64_t)&unk_751F48, vcvtps_u32_f32((float)(unint64_t)v7 / *(float *)&dword_751F68));
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    obj = v5;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v33;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v33 != v9)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringByTrimmingCharactersInSet:", v12));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "componentsSeparatedByString:", CFSTR(",")));

          if (objc_msgSend(v14, "count") == (char *)&dword_0 + 2)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "lastObject"));
            v17 = objc_retainAutorelease(v15);
            v18 = (const std::string::value_type *)objc_msgSend(v17, "UTF8String");
            v19 = objc_retainAutorelease(v16);
            sub_96CC(__p, (char *)objc_msgSend(v19, "UTF8String"));
            v36 = (__int128 *)__p;
            v20 = sub_919C((uint64_t)&xmmword_751F20, __p, (uint64_t)algn_4A2B62, &v36);
            std::string::assign((std::string *)(v20 + 40), v18);
            if (SBYTE3(v41) < 0)
              operator delete(*(void **)__p);
            v21 = objc_retainAutorelease(v19);
            v22 = (const std::string::value_type *)objc_msgSend(v21, "UTF8String");
            v23 = objc_retainAutorelease(v17);
            sub_96CC(__p, (char *)-[NSObject UTF8String](v23, "UTF8String"));
            v36 = (__int128 *)__p;
            v24 = sub_919C((uint64_t)&unk_751F48, __p, (uint64_t)algn_4A2B62, &v36);
            std::string::assign((std::string *)(v24 + 40), v22);
            if (SBYTE3(v41) < 0)
              operator delete(*(void **)__p);

          }
          else
          {
            v25 = sub_11FD14();
            v23 = objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v26 = objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
              *(_DWORD *)__p = 136315650;
              *(_QWORD *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport"
                                   "/AGXProfilingSupport/AGXPSCounters.mm";
              v38 = 1024;
              v39 = 422;
              v40 = 2080;
              v41 = v26;
              _os_log_error_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%s:%u: WARNING: Skipping invalid raw counter mapping: '%s'", __p, 0x1Cu);
            }
          }

          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
      }
      while (v8);
    }

    v27 = 1;
  }
  else
  {
    v27 = 0;
  }

  return v27;
}

void sub_6548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{

  _Unwind_Resume(a1);
}

char *agxps_counter_deobfuscate_name(char *__s)
{
  char *v1;
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  v1 = __s;
  if (__s)
  {
    sub_96CC(__p, __s);
    v2 = sub_9484(&xmmword_751F20, (unsigned __int8 *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    if (v2)
    {
      v1 = (char *)(v2 + 40);
      if ((char)v2[63] < 0)
        return *(char **)v1;
    }
  }
  return v1;
}

void sub_66A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t agxps_counter_get_ident(unsigned int *a1, char *a2)
{
  int gen;
  unsigned int v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  unsigned int v12;

  if (!agxps_gpu_is_valid((uint64_t)a1))
    return -1;
  gen = agxps_gpu_get_gen(a1);
  v5 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16);
  sub_96CC(__p, a2);
  v12 = v5;
  v6 = sub_7330(qword_751EA8, &v12);
  if (v6 && (v7 = sub_9584(v6 + 3, (unsigned __int8 *)__p)) != 0)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4) <= *((_QWORD *)v7 + 5))
      v8 = -1;
    else
      v8 = *((_QWORD *)v7 + 5);
  }
  else
  {
    v8 = -1;
  }
  if (v11 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_6794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *agxps_counter_get_name(unint64_t a1)
{
  char *result;

  if (0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4) <= a1)
    return 0;
  result = (char *)(qword_751E68 + 80 * a1);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t agxps_counter_get_grc_enable_str(unint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  if (0xCCCCCCCCCCCCCCCDLL * ((qword_751E70 - qword_751E68) >> 4) <= a1 || *(_QWORD *)(qword_751E68 + 80 * a1 + 72))
    return 0;
  v2 = qword_751E68 + 80 * a1;
  result = v2 + 48;
  if (*(char *)(v2 + 71) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t *sub_686C(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  int v4;
  uint64_t v5;

  v1 = atomic_load((unsigned __int8 *)&qword_751F90);
  if ((v1 & 1) == 0)
  {
    v5 = a1;
    v4 = __cxa_guard_acquire(&qword_751F90);
    a1 = v5;
    if (v4)
    {
      qword_751F78 = 0;
      unk_751F80 = 0;
      qword_751F88 = 0;
      __cxa_atexit((void (*)(void *))sub_4334, &qword_751F78, &dword_0);
      __cxa_guard_release(&qword_751F90);
      a1 = v5;
    }
  }
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    return (uint64_t *)(v2 + 24);
  else
    return &qword_751F78;
}

uint64_t agxps_counter_group_get_derived_counters(unsigned int *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL4 is_valid;
  uint64_t result;
  unsigned __int8 v10;
  int gen;
  uint64_t *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _BYTE *v25;
  void *__p[2];
  char v27;
  unsigned int v28;

  is_valid = agxps_gpu_is_valid((uint64_t)a1);
  result = 0;
  if (a4 && a3 && a2 && is_valid)
  {
    sub_96CC(__p, a2);
    v10 = atomic_load((unsigned __int8 *)&qword_751FA0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_751FA0))
    {
      qword_751FA8 = 0;
      unk_751FB0 = 0;
      qword_751FB8 = 0;
      __cxa_atexit((void (*)(void *))sub_6D10, &qword_751FA8, &dword_0);
      qword_751F98 = (uint64_t)&qword_751FA8;
      __cxa_guard_release(&qword_751FA0);
    }
    if ((byte_751E60 & 1) != 0
      && (gen = agxps_gpu_get_gen(a1),
          v28 = agxps_gpu_get_variant((uint64_t)a1) | (gen << 16),
          (v12 = sub_7330(qword_751EF8, &v28)) != 0)
      && (v13 = sub_9584(v12 + 3, (unsigned __int8 *)__p)) != 0)
    {
      v14 = (uint64_t)(v13 + 40);
    }
    else
    {
      v14 = qword_751F98;
    }
    if (v27 < 0)
      operator delete(__p[0]);
    v15 = *(_QWORD **)v14;
    v16 = *(_QWORD **)(v14 + 8);
    if (*(_QWORD **)v14 == v16)
      return 0;
    v17 = 0;
    do
    {
      v18 = *(_DWORD **)(qword_751E68 + 80 * *v15 + 72);
      if (v18)
        v19 = (*v18 & 8) == 0;
      else
        v19 = 1;
      v17 += v19;
      ++v15;
    }
    while (v15 != v16);
    if (!v17)
    {
      return 0;
    }
    else
    {
      v20 = malloc_type_malloc(8 * v17, 0x100004000313F17uLL);
      v21 = *(_QWORD **)v14;
      v22 = *(_QWORD **)(v14 + 8);
      if (*(_QWORD **)v14 != v22)
      {
        v23 = qword_751E68;
        v24 = v20;
        do
        {
          v25 = *(_BYTE **)(v23 + 80 * *v21 + 72);
          if (!v25 || (*v25 & 8) == 0)
            *v24++ = *v21;
          ++v21;
        }
        while (v21 != v22);
      }
      *a4 = v17;
      *a3 = v20;
      return 1;
    }
  }
  return result;
}

void sub_6B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_6B2C(uint64_t a1)
{
  void *v2;

  sub_6B64(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_6B64(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_6BE4(uint64_t a1)
{
  void *v2;

  sub_6C1C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_6C1C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_6C58((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_6C58(uint64_t a1)
{
  void *v2;

  sub_6C90(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_6C90(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_6CCC((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_6CCC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_6D10(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_6D40(uint64_t a1)
{
  void *v2;

  sub_6D78(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_6D78(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_6DBC(uint64_t a1)
{
  void *v2;

  sub_6DF4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_6DF4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_6E30((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_6E30(uint64_t a1)
{
  void *v2;

  sub_6E68(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_6E68(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_6EAC(uint64_t a1)
{
  void *v2;

  sub_6EE4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_6EE4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_6F20((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_6F20(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 144);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a1 + 104);
  sub_6E30(a1 + 56);
  return sub_6B2C(a1 + 16);
}

void sub_6F58(uint64_t a1)
{
  uint64_t v2;
  void **v3;

  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = (void **)(v2 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
    operator delete();
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unint64_t sub_6FE0(unint64_t result, uint64_t a2)
{
  int v2;

  switch((int)a2)
  {
    case 1:
      a2 = 2;
      break;
    case 2:
      a2 = 3;
      break;
    case 3:
      a2 = 4;
      break;
    case 4:
      a2 = 5;
      break;
    case 5:
      a2 = 6;
      break;
    case 6:
      v2 = result - 10;
      result = 0;
      switch(v2)
      {
        case 0:
          LODWORD(result) = 11;
          goto LABEL_15;
        case 1:
          LODWORD(result) = 12;
          goto LABEL_15;
        case 2:
          LODWORD(result) = 13;
          goto LABEL_15;
        case 3:
          LODWORD(result) = 14;
          goto LABEL_15;
        case 4:
          LODWORD(result) = 15;
          goto LABEL_15;
        case 5:
          LODWORD(result) = 16;
          goto LABEL_15;
        case 6:
          LODWORD(result) = 17;
          goto LABEL_15;
        case 7:
          return result;
        default:
LABEL_15:
          a2 = 1;
          break;
      }
      break;
    default:
      return result | (unint64_t)(a2 << 32);
  }
  return result | (unint64_t)(a2 << 32);
}

void sub_70A0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

char *sub_70D4(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_7168(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_7168(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_714C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *sub_7168(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_71F4();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_71F4()
{
  sub_4088("basic_string");
}

char *sub_7208(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_7168(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_7168(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_7280(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_729C(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_7168(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_7168(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_7314(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_7330(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void sub_73E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_6EE4(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_7438(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_6DF4(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_748C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_6D78(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t *sub_74E0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_7750(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_7984((uint64_t)v24, 0);
  return i;
}

void sub_7738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_7984((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_7750(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_782C(a1, prime);
  }
}

void sub_782C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_4130();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_7984(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_6E30((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

unsigned __int8 *sub_79C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_7D04(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_81AC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_7C5C(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_7750(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_7C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_8250((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_7C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_7168(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_7CE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_8250(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_7D04(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_7D40((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_7D40(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_80EC(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_8040(a2, a3);
  }
  else
  {
    return sub_7F48(a2, a3);
  }
}

unint64_t sub_7F48(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_8040(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_80EC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_81AC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_8250(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *sub_829C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_7750(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_84D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_84F0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_84F0(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_853C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_7750(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_87AC((uint64_t)v24, 0);
  return i;
}

void sub_8794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_87AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_87AC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_6C58((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

unsigned __int8 *sub_87F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_7D04(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_81AC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_8A88(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_7750(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_8B28((uint64_t)v26, 0);
  return i;
}

void sub_8A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_8B28((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_8A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_7168(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_8B10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_8B28(v1, 0);
  _Unwind_Resume(a1);
}

void sub_8B28(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_6CCC((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

char *sub_8B6C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_8BF0(result, a4);
    result = sub_8C84((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_8BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

char *sub_8BF0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_4074();
  result = (char *)sub_8C40((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_8C40(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_4130();
  return operator new(24 * a2);
}

char *sub_8C84(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_7168(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_8D40((uint64_t)v9);
  return v4;
}

void sub_8D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_8D40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_8D40(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_8D74(a1);
  return a1;
}

void sub_8D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t *sub_8E44(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (i = *v8; i; i = (uint64_t *)*i)
      {
        v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v5)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  sub_908C(a1, *a2, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_7750(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  i = (uint64_t *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_9104((uint64_t)v20, 0);
  return i;
}

void sub_9074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_9104((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_908C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0xC8uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  result = sub_47C0((uint64_t)(v8 + 3), (_QWORD *)(a3 + 8));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_90EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_9104(v1, 0);
  _Unwind_Resume(a1);
}

void sub_9104(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_6F20((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_9148(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_6B64(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *sub_919C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_7D04(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_81AC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_7750(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  sub_9440((uint64_t)v29, 0);
  return i;
}

void sub_9428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_9440((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_9440(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *sub_9484(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_7D04((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_81AC(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *sub_9584(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_7D04((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_81AC(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_96CC(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_71F4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

_QWORD *sub_977C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_7750(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_998C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_99A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_9A14((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_9A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_9AB0((uint64_t)v12);
  return a6;
}

uint64_t sub_9AB0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_9AE4(a1);
  return a1;
}

void sub_9AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_9B28(uint64_t a1)
{
  sub_9B5C(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_9B5C(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_9BB0(uint64_t a1, uint64_t a2)
{
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_9C20(a1, *(_QWORD *)(a2 + 8));
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_9EC8((_QWORD *)a1, i + 1);
  return a1;
}

void sub_9C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_6B2C(v1);
  _Unwind_Resume(a1);
}

void sub_9C20(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_9CFC(a1, prime);
  }
}

void sub_9CFC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      sub_4130();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = sub_81AC(a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_9EC8(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v5[3];

  sub_9F30((uint64_t)a1, a2, (uint64_t)v5);
  v3 = sub_9FC0(a1, v5[0]);
  v5[0] = 0;
  sub_9440((uint64_t)v5, 0);
  return v3;
}

void sub_9F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_9440((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_9F30@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x40uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_729C((char *)v7 + 16, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_7D04(a1 + 24, (uint64_t)v7 + 16);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_9FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_9440(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_9FC0(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = sub_7D04((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  v6 = sub_A020((uint64_t)a1, v5, v4);
  sub_A190(a1, a2, v6);
  return a2;
}

unsigned __int8 *sub_A020(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_9C20(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? sub_81AC(v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

_QWORD *sub_A190(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t sub_A278(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_7750(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    sub_A2EC(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_A2D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_6E30(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_A2EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_7D04(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_81AC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_A568(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_7750(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_A544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_8250((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 sub_A568@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_7168(v9, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_A5F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_8250(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_A610(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  char *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_A6B0(v4, v6);
      v6 += 3;
      v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_A744((uint64_t)v8);
  return v4;
}

void sub_A69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_A744((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_A6B0(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_7168(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_7168(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_A728(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A744(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_A778((uint64_t *)a1);
  return a1;
}

void sub_A778(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      sub_A7C8(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_A7C8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_A80C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_A7C8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_A890(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v5[3];

  sub_A8F8((uint64_t)a1, a2, (uint64_t)v5);
  v3 = sub_9FC0(a1, v5[0]);
  v5[0] = 0;
  sub_9440((uint64_t)v5, 0);
  return v3;
}

void sub_A8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_9440((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_A8F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x40uLL);
  v8 = v7;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = v7 + 16;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_7168(v7 + 16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v9 = *(_OWORD *)a2;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 7) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_7D04(a1 + 24, (uint64_t)v9);
  *((_QWORD *)v8 + 1) = result;
  return result;
}

void sub_A9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_9440(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_A9BC(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD v10[3];
  char v11;
  void *v12;
  _QWORD *v13;

  v4 = __dst;
  v12 = __dst;
  v13 = __dst;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_7168(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v4[3] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = v8 + 4;
      v13 = v8 + 4;
    }
    while (v6 != a3);
  }
  v11 = 1;
  sub_AA84((uint64_t)v10);
  return v4;
}

void sub_AA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_AA84((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_AA84(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_AAB8(a1);
  return a1;
}

void sub_AAB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

void sub_AAFC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_AB3C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_AB3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

unsigned __int8 *sub_AB88(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_7D04(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_81AC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_AE04(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_7750(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_ADE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_8250((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 sub_AE04@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_7168(v9, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_AE90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_8250(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_AEAC(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v5[3];

  sub_AF14((uint64_t)a1, a2, (uint64_t)v5);
  v3 = sub_9FC0(a1, v5[0]);
  v5[0] = 0;
  sub_9440((uint64_t)v5, 0);
  return v3;
}

void sub_AEFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_9440((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_AF14@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x40uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_729C((char *)v7 + 16, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_7D04(a1 + 24, (uint64_t)v7 + 16);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_AF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_9440(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t sub_B008(_QWORD *a1, uint64_t a2)
{
  void *v4;

  v4 = operator new(0x28uLL);
  *(_QWORD *)v4 = 0;
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v4 + 1) = sub_B0E4((uint64_t)(a1 + 3), *((uint64_t **)v4 + 2), *((_QWORD *)v4 + 3));
  return sub_B080(a1, (uint64_t)v4);
}

void sub_B06C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B080(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v4 = a2 + 16;
  v5 = sub_B0E4((uint64_t)(a1 + 3), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a2 + 8) = v5;
  v6 = sub_B108((uint64_t)a1, v5, v4);
  sub_A190(a1, (_QWORD *)a2, v6);
  return a2;
}

unint64_t sub_B0E4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return sub_7D40((uint64_t)&v4, a2, a3);
}

uint64_t *sub_B108(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  size_t v18;
  const void *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  int v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    sub_B290(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  v19 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  do
  {
    v20 = v16;
    v16 = (uint64_t *)*v16;
    if (!v16)
      break;
    v21 = v16[1];
    if (v14 > 1)
    {
      v22 = v16[1];
      if (v21 >= v6)
        v22 = v21 % v6;
    }
    else
    {
      v22 = v21 & (v6 - 1);
    }
    if (v22 != v15)
      break;
    v23 = v21 == a2 && v16[3] == v18 && memcmp((const void *)v16[2], v19, v18) == 0;
    v24 = v17 & !v23;
    v17 |= v23;
  }
  while (v24 != 1);
  return v20;
}

void sub_B290(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_B36C(a1, prime);
  }
}

void sub_B36C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *i;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  size_t v16;

  if (a2)
  {
    if (a2 >> 61)
      sub_4130();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v14 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            do
            {
              v15 = v14;
              v14 = (uint64_t *)*v14;
              if (!v14)
                break;
              v16 = i[3];
              if (v16 != v14[3])
                break;
            }
            while (!memcmp((const void *)i[2], (const void *)v14[2], v16));
            *v7 = v14;
            *v15 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (uint64_t **)i;
            v8 = v13;
          }
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void *sub_B50C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_B0E4(a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v9)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v18 >= v10)
                v18 %= v10;
            }
            else
            {
              v18 &= v10 - 1;
            }
            if (v18 != v3)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v19 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_7750(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)v14 = *v27;
LABEL_40:
    *v27 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v7;
  return v14;
}

void sub_B760(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_B774(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        sub_B7F8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_B7F8(uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a2 + 136);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(a2 + 96);
  sub_6E30(a2 + 48);
  return sub_6B2C(a2 + 8);
}

void sub_B830(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_436C(v4 - 88);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t agxps_timeseries_create(uint64_t a1, uint64_t a2)
{
  if (a2)
    operator new();
  return 0;
}

void sub_B904()
{
  operator delete();
}

uint64_t sub_B928(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  size_t v7;
  char v8;
  uint64_t v9;
  void *memptr;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (a2 == 2)
    goto LABEL_7;
  v5 = -1;
  if (!a2)
    v5 = 7;
  if (a2 == 1)
    v5 = 7;
  v6 = __clz(v5);
  if (v6 >= 0x3E)
LABEL_7:
    v7 = 8;
  else
    v7 = 1 << -(char)v6;
  memptr = 0;
  v8 = 3;
  if (a2 == 2)
    v8 = 0;
  malloc_type_posix_memalign(&memptr, v7, a3 << v8, 0x1040A8DAuLL);
  v9 = *v4;
  *v4 = (uint64_t)memptr;
  if (v9)
    sub_2BEFC((uint64_t (**)(uint64_t))(a1 + 24), v9);
  *(_QWORD *)(a1 + 24) = &_free;
  return a1;
}

void sub_B9FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v3 = v2;
  v5 = *v3;
  *v3 = 0;
  if (v5)
    sub_2BEFC((uint64_t (**)(uint64_t))(v1 + 24), v5);
  _Unwind_Resume(exception_object);
}

uint64_t agxps_timeseries_copy(uint64_t a1)
{
  if (a1)
    operator new();
  return 0;
}

void sub_BA94()
{
  operator delete();
}

uint64_t agxps_timeseries_destroy(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = 0;
    if (v1)
      sub_2BEFC((uint64_t (**)(uint64_t))(result + 24), v1);
    operator delete();
  }
  return result;
}

uint64_t agxps_timeseries_get_data(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t agxps_timeseries_get_length(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

unsigned int *agxps_timeseries_get_datatype(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t sub_BB28()
{
  return 0;
}

BOOL sub_BB34(int a1, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;

  if (a1 == a3)
  {
    v4 = a4 == a2;
    v5 = a2 == a4;
    v6 = *(double *)&a2 == *(double *)&a4;
    if (a1)
      v6 = a4 == a2;
    if (a1 != 1)
      v5 = v6;
    if (a1 != 2)
      return v5;
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t sub_BB88(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;

  v3 = a3 - 3;
  if (a1 - 3 > 0xFFFFFFFD)
  {
    v4 = a3;
    if (v3 < 0xFFFFFFFE)
      goto LABEL_13;
  }
  else
  {
    v4 = a1;
    if (v3 >= 0xFFFFFFFE)
    {
      if (!a1)
        goto LABEL_21;
LABEL_13:
      if (a1 == 2)
      {
        if (a3 == 2)
        {
          if (v4 != 2)
          {
            if (v4 != 1)
              return v4;
            return 1;
          }
        }
        else if (a3 == 1)
        {
          if (v4 != 2)
          {
            if (v4 != 1)
              return v4;
            return 1;
          }
        }
        else
        {
          if (a3)
            return v4;
          if (v4 != 2)
          {
            if (v4 != 1)
              return v4;
            return 1;
          }
        }
      }
      else
      {
        if (a1 != 1)
          return v4;
        if (a3 == 2)
        {
          if (v4 != 2)
          {
            if (v4 != 1)
              return v4;
            return 1;
          }
        }
        else if (a3 == 1)
        {
          if (v4 != 2)
          {
            if (v4 != 1)
              return v4;
            return 1;
          }
        }
        else
        {
          if (a3)
            return v4;
          if (v4 != 2)
          {
            if (v4 != 1)
              return v4;
            return 1;
          }
        }
      }
      return 2;
    }
  }
  if (a3 != 2 || a1 == 2)
    v4 = a3;
  else
    v4 = a1;
  if (a1)
    goto LABEL_13;
LABEL_21:
  if (a3 == 2)
  {
    if (v4 != 2)
    {
      if (v4 != 1)
        return v4;
      return 1;
    }
    return 2;
  }
  if (a3 == 1)
  {
    if (v4 != 2)
    {
      if (v4 != 1)
        return v4;
      return 1;
    }
    return 2;
  }
  if (a3)
    return v4;
  switch(v4)
  {
    case 2u:
      return 2;
    case 1u:
      return 1;
    case 0u:
      return 0;
  }
  return v4;
}

uint64_t sub_BE08(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;

  v3 = a3 - 3;
  if (a1 - 3 > 0xFFFFFFFD)
  {
    v4 = a3;
    if (v3 < 0xFFFFFFFE)
      goto LABEL_13;
  }
  else
  {
    v4 = a1;
    if (v3 >= 0xFFFFFFFE)
    {
      if (!a1)
        goto LABEL_21;
LABEL_13:
      if (a1 == 2)
      {
        if (a3 == 2)
        {
          if (v4 == 2)
            return 2;
          if (v4 != 1)
            return v4;
        }
        else if (a3 == 1)
        {
          if (v4 == 2)
            return 2;
          if (v4 != 1)
            return v4;
        }
        else
        {
          if (a3)
            return v4;
          if (v4 == 2)
            return 2;
          if (v4 != 1)
            return v4;
        }
      }
      else
      {
        if (a1 != 1)
          return v4;
        if (a3 == 2)
        {
          if (v4 == 2)
            return 2;
          if (v4 != 1)
            return v4;
        }
        else
        {
          if (a3 != 1)
          {
            if (a3)
              return v4;
            if (v4 != 2)
            {
              if (v4 != 1)
                return v4;
              return 1;
            }
            return 2;
          }
          if (v4 == 2)
            return 2;
          if (v4 != 1)
            return v4;
        }
      }
      return 1;
    }
  }
  if (a3 != 2 || a1 == 2)
    v4 = a3;
  else
    v4 = a1;
  if (a1)
    goto LABEL_13;
LABEL_21:
  if (a3 == 2)
  {
    if (v4 == 2)
      return 2;
    if (v4 != 1)
      return v4;
    return 1;
  }
  if (a3 == 1)
  {
    if (v4 == 2)
      return 2;
    if (v4 != 1)
      return v4;
    return 1;
  }
  if (a3)
    return v4;
  if (v4 != 2)
  {
    if (v4 != 1)
      return v4;
    return 1;
  }
  return 2;
}

void sub_C0BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  _BYTE *v3;
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;

  v6 = a1;
  off_750D78();
  if (!*v3)
  {
    *(_BYTE *)v2(v1) = 1;
    off_750D60();
    *v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v5);
  }
  off_750D60();
  sub_2BF3C(v4, &v6);
}

uint64_t sub_C15C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  _BYTE *v2;
  _QWORD *v3;
  _OWORD *v5;

  off_750D78();
  if (!*v2)
  {
    *(_BYTE *)v1(v0) = 1;
    off_750D60();
    *v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v5);
  }
  off_750D60();
  --v3[5];
  return sub_2C730(v3, 1);
}

int *sub_C1F8(unsigned int *a1, unsigned int *a2)
{
  int *v4;

  v4 = (int *)sub_CECC(a1, a2);
  return agxps_timeseries_add_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_add_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  unsigned __int8 *v16;
  double *v17;
  double *v18;
  unsigned int v19;
  double v20;
  double v21;
  unint64_t *v22;
  double *v23;
  double *v24;
  unint64_t v25;
  double v26;
  double v27;
  double *v28;
  unsigned __int8 *v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  unint64_t *v34;
  double *v35;
  double v36;
  double v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  double *v41;
  unsigned int v42;
  double v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unint64_t *v46;
  double *v47;
  unsigned int v48;
  double v49;
  unint64_t v50;
  unint64_t *v51;
  unsigned __int8 *v52;
  double *v53;
  unint64_t v54;
  double v55;
  unint64_t *v56;
  unint64_t *v57;
  double *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double *v62;
  double *v63;
  _BYTE *v64;
  double v65;
  int v66;
  double v67;
  double *v68;
  double *v69;
  _QWORD *v70;
  double v71;
  unint64_t v72;
  double v73;
  char *v74;
  double *v75;
  _BYTE *v76;
  char v77;
  char v78;
  double v79;
  unsigned __int8 *v80;
  double *v81;
  _QWORD *v82;
  uint64_t v83;
  unsigned int v84;
  double v85;
  char *v86;
  double *v87;
  _BYTE *v88;
  char v89;
  char v90;
  double v91;
  uint64_t *v92;
  double *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double *v98;
  _BYTE *v99;
  _BYTE *v100;
  double v101;
  int v102;
  double *v103;
  unsigned __int8 *v104;
  _QWORD *v105;
  double v106;
  unint64_t v107;
  double *v108;
  _BYTE *v109;
  _BYTE *v110;
  double v111;
  int v112;
  double *v113;
  uint64_t *v114;
  _QWORD *v115;
  double v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  _BYTE *v121;
  char v122;
  char v123;
  char v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  char *v131;
  char *v132;
  _BYTE *v133;
  char v134;
  char v135;
  char v136;
  unsigned __int8 *v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  _BYTE *v145;
  char v146;
  char v147;
  char v148;
  uint64_t *v149;
  unsigned __int8 *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  _BYTE *v156;
  char v157;
  char v158;
  char v159;
  uint64_t *v160;
  uint64_t *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double *v166;
  double *v167;
  double *v168;
  double v169;
  double v170;
  double v171;
  unsigned __int8 *v172;
  double *v173;
  double *v174;
  unsigned int v175;
  double v176;
  double v177;
  unint64_t *v178;
  double *v179;
  double *v180;
  unint64_t v181;
  double v182;
  double v183;
  double *v184;
  unsigned __int8 *v185;
  double *v186;
  double v187;
  double v188;
  double *v189;
  unint64_t *v190;
  double *v191;
  double v192;
  double v193;
  unint64_t v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  double *v197;
  unsigned int v198;
  double v199;
  unsigned int v200;
  unsigned __int8 *v201;
  unint64_t *v202;
  double *v203;
  unsigned int v204;
  double v205;
  unint64_t v206;
  unint64_t *v207;
  unsigned __int8 *v208;
  double *v209;
  unint64_t v210;
  double v211;
  unint64_t *v212;
  unint64_t *v213;
  double *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  double *v218;
  double *v219;
  _BYTE *v220;
  double v221;
  int v222;
  double v223;
  double *v224;
  double *v225;
  _QWORD *v226;
  double v227;
  unint64_t v228;
  double v229;
  char *v230;
  double *v231;
  _BYTE *v232;
  char v233;
  char v234;
  double v235;
  unsigned __int8 *v236;
  double *v237;
  _QWORD *v238;
  uint64_t v239;
  unsigned int v240;
  double v241;
  char *v242;
  double *v243;
  _BYTE *v244;
  char v245;
  char v246;
  double v247;
  uint64_t *v248;
  double *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  double v253;
  double *v254;
  _BYTE *v255;
  _BYTE *v256;
  double v257;
  int v258;
  double *v259;
  unsigned __int8 *v260;
  _QWORD *v261;
  double v262;
  unint64_t v263;
  double *v264;
  _BYTE *v265;
  _BYTE *v266;
  double v267;
  int v268;
  double *v269;
  uint64_t *v270;
  _QWORD *v271;
  double v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  _BYTE *v277;
  char v278;
  char v279;
  char v280;
  unsigned __int8 *v281;
  unsigned __int8 *v282;
  _QWORD *v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  char *v287;
  char *v288;
  _BYTE *v289;
  char v290;
  char v291;
  char v292;
  unsigned __int8 *v293;
  uint64_t *v294;
  _QWORD *v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  char *v299;
  char *v300;
  _BYTE *v301;
  char v302;
  char v303;
  char v304;
  uint64_t *v305;
  unsigned __int8 *v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  _BYTE *v312;
  char v313;
  char v314;
  char v315;
  uint64_t *v316;
  uint64_t *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;

  v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (v5 = *((_QWORD *)a1 + 1), v5 == *((_QWORD *)a2 + 1)) && v5 == *((_QWORD *)a3 + 1))
    {
      v6 = *a1;
      v7 = *a2;
      v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v275 = (char *)*((_QWORD *)a1 + 2);
                    v276 = (char *)*((_QWORD *)a2 + 2);
                    v277 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v279 = *v275++;
                      v278 = v279;
                      v280 = *v276++;
                      *v277++ = v280 + v278;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v119 = (char *)*((_QWORD *)a1 + 2);
                  v120 = (char *)*((_QWORD *)a2 + 2);
                  v121 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v123 = *v119++;
                    v122 = v123;
                    v124 = *v120++;
                    *v121++ = v124 + v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v281 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v282 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v283 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v285 = *v281++;
                      v284 = v285;
                      v286 = *v282++;
                      *v283++ = v286 + v284;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v125 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v126 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v127 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v129 = *v125++;
                    v128 = v129;
                    v130 = *v126++;
                    *v127++ = v130 + v128;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v195 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v196 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v197 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v198 = *v195++;
                      v199 = (double)v198;
                      v200 = *v196++;
                      *v197++ = v199 + (double)v200;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v39 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v40 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v41 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v42 = *v39++;
                    v43 = (double)v42;
                    v44 = *v40++;
                    *v41++ = v43 + (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v287 = (char *)*((_QWORD *)a1 + 2);
                    v288 = (char *)*((_QWORD *)a2 + 2);
                    v289 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v291 = *v287++;
                      v290 = v291;
                      v292 = *v288;
                      v288 += 8;
                      *v289++ = v290 + v292;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v131 = (char *)*((_QWORD *)a1 + 2);
                  v132 = (char *)*((_QWORD *)a2 + 2);
                  v133 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v135 = *v131++;
                    v134 = v135;
                    v136 = *v132;
                    v132 += 8;
                    *v133++ = v134 + v136;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v294 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v295 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v297 = *v293++;
                      v296 = v297;
                      v298 = *v294++;
                      *v295++ = v298 + v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v138 = (uint64_t *)*((_QWORD *)a2 + 2);
                  v139 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v141 = *v137++;
                    v140 = v141;
                    v142 = *v138++;
                    *v139++ = v142 + v140;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v201 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v202 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v203 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v204 = *v201++;
                      v205 = (double)v204;
                      v206 = *v202++;
                      *v203++ = v205 + (double)v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v46 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v47 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v48 = *v45++;
                    v49 = (double)v48;
                    v50 = *v46++;
                    *v47++ = v49 + (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v230 = (char *)*((_QWORD *)a1 + 2);
                    v231 = (double *)*((_QWORD *)a2 + 2);
                    v232 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v234 = *v230++;
                      v233 = v234;
                      v235 = *v231++;
                      *v232++ = v233 + (int)v235;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v74 = (char *)*((_QWORD *)a1 + 2);
                  v75 = (double *)*((_QWORD *)a2 + 2);
                  v76 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v78 = *v74++;
                    v77 = v78;
                    v79 = *v75++;
                    *v76++ = v77 + (int)v79;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v236 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v237 = (double *)*((_QWORD *)a2 + 2);
                    v238 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v240 = *v236++;
                      v239 = v240;
                      v241 = *v237++;
                      *v238++ = (unint64_t)v241 + v239;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v80 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v81 = (double *)*((_QWORD *)a2 + 2);
                  v82 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v84 = *v80++;
                    v83 = v84;
                    v85 = *v81++;
                    *v82++ = (unint64_t)v85 + v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v172 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v173 = (double *)*((_QWORD *)a2 + 2);
                    v174 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v175 = *v172++;
                      v176 = (double)v175;
                      v177 = *v173++;
                      *v174++ = v177 + v176;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v16 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v17 = (double *)*((_QWORD *)a2 + 2);
                  v18 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v19 = *v16++;
                    v20 = (double)v19;
                    v21 = *v17++;
                    *v18++ = v21 + v20;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v299 = (char *)*((_QWORD *)a1 + 2);
                    v300 = (char *)*((_QWORD *)a2 + 2);
                    v301 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v303 = *v299;
                      v299 += 8;
                      v302 = v303;
                      v304 = *v300++;
                      *v301++ = v304 + v302;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v143 = (char *)*((_QWORD *)a1 + 2);
                  v144 = (char *)*((_QWORD *)a2 + 2);
                  v145 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v147 = *v143;
                    v143 += 8;
                    v146 = v147;
                    v148 = *v144++;
                    *v145++ = v148 + v146;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v306 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v307 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v309 = *v305++;
                      v308 = v309;
                      LODWORD(v309) = *v306++;
                      *v307++ = v308 + v309;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v149 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v150 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v151 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v153 = *v149++;
                    v152 = v153;
                    LODWORD(v153) = *v150++;
                    *v151++ = v152 + v153;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v207 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v208 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v209 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v210 = *v207++;
                      v211 = (double)v210;
                      LODWORD(v210) = *v208++;
                      *v209++ = v211 + (double)v210;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v51 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v52 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v53 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v54 = *v51++;
                    v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 + (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v310 = (char *)*((_QWORD *)a1 + 2);
                    v311 = (char *)*((_QWORD *)a2 + 2);
                    v312 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v314 = *v310;
                      v310 += 8;
                      v313 = v314;
                      v315 = *v311;
                      v311 += 8;
                      *v312++ = v315 + v313;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v154 = (char *)*((_QWORD *)a1 + 2);
                  v155 = (char *)*((_QWORD *)a2 + 2);
                  v156 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v158 = *v154;
                    v154 += 8;
                    v157 = v158;
                    v159 = *v155;
                    v155 += 8;
                    *v156++ = v159 + v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v316 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v317 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v318 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v320 = *v316++;
                      v319 = v320;
                      v321 = *v317++;
                      *v318++ = v321 + v319;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v160 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v161 = (uint64_t *)*((_QWORD *)a2 + 2);
                  v162 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v164 = *v160++;
                    v163 = v164;
                    v165 = *v161++;
                    *v162++ = v165 + v163;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v212 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v213 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v214 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v215 = *v212++;
                      v216 = v215;
                      v217 = *v213++;
                      *v214++ = (double)v216 + (double)v217;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v56 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v57 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v58 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v59 = *v56++;
                    v60 = v59;
                    v61 = *v57++;
                    *v58++ = (double)v60 + (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v242 = (char *)*((_QWORD *)a1 + 2);
                    v243 = (double *)*((_QWORD *)a2 + 2);
                    v244 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v246 = *v242;
                      v242 += 8;
                      v245 = v246;
                      v247 = *v243++;
                      *v244++ = (int)v247 + v245;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v86 = (char *)*((_QWORD *)a1 + 2);
                  v87 = (double *)*((_QWORD *)a2 + 2);
                  v88 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v90 = *v86;
                    v86 += 8;
                    v89 = v90;
                    v91 = *v87++;
                    *v88++ = (int)v91 + v89;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v248 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v249 = (double *)*((_QWORD *)a2 + 2);
                    v250 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v252 = *v248++;
                      v251 = v252;
                      v253 = *v249++;
                      *v250++ = v251 + (unint64_t)v253;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v92 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v93 = (double *)*((_QWORD *)a2 + 2);
                  v94 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v96 = *v92++;
                    v95 = v96;
                    v97 = *v93++;
                    *v94++ = v95 + (unint64_t)v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v179 = (double *)*((_QWORD *)a2 + 2);
                    v180 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v181 = *v178++;
                      v182 = (double)v181;
                      v183 = *v179++;
                      *v180++ = v183 + v182;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v22 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a2 + 2);
                  v24 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v25 = *v22++;
                    v26 = (double)v25;
                    v27 = *v23++;
                    *v24++ = v27 + v26;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v254 = (double *)*((_QWORD *)a1 + 2);
                    v255 = (_BYTE *)*((_QWORD *)a2 + 2);
                    v256 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v257 = *v254++;
                      v258 = (int)v257;
                      LOBYTE(v257) = *v255++;
                      *v256++ = LOBYTE(v257) + v258;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v98 = (double *)*((_QWORD *)a1 + 2);
                  v99 = (_BYTE *)*((_QWORD *)a2 + 2);
                  v100 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v101 = *v98++;
                    v102 = (int)v101;
                    LOBYTE(v101) = *v99++;
                    *v100++ = LOBYTE(v101) + v102;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((_QWORD *)a1 + 2);
                    v260 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v261 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v262 = *v259++;
                      v263 = (unint64_t)v262;
                      LODWORD(v262) = *v260++;
                      *v261++ = LODWORD(v262) + v263;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v103 = (double *)*((_QWORD *)a1 + 2);
                  v104 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v105 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v106 = *v103++;
                    v107 = (unint64_t)v106;
                    LODWORD(v106) = *v104++;
                    *v105++ = LODWORD(v106) + v107;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v184 = (double *)*((_QWORD *)a1 + 2);
                    v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v186 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v187 = *v184++;
                      v188 = v187;
                      LODWORD(v187) = *v185++;
                      *v186++ = v188 + (double)LODWORD(v187);
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v28 = (double *)*((_QWORD *)a1 + 2);
                  v29 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v30 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v31 = *v28++;
                    v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 + (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v264 = (double *)*((_QWORD *)a1 + 2);
                    v265 = (_BYTE *)*((_QWORD *)a2 + 2);
                    v266 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v267 = *v264++;
                      v268 = (int)v267;
                      LOBYTE(v267) = *v265;
                      v265 += 8;
                      *v266++ = LOBYTE(v267) + v268;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v108 = (double *)*((_QWORD *)a1 + 2);
                  v109 = (_BYTE *)*((_QWORD *)a2 + 2);
                  v110 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v111 = *v108++;
                    v112 = (int)v111;
                    LOBYTE(v111) = *v109;
                    v109 += 8;
                    *v110++ = LOBYTE(v111) + v112;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v269 = (double *)*((_QWORD *)a1 + 2);
                    v270 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v271 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v272 = *v269++;
                      v273 = (unint64_t)v272;
                      v274 = *v270++;
                      *v271++ = v274 + v273;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v113 = (double *)*((_QWORD *)a1 + 2);
                  v114 = (uint64_t *)*((_QWORD *)a2 + 2);
                  v115 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v116 = *v113++;
                    v117 = (unint64_t)v116;
                    v118 = *v114++;
                    *v115++ = v118 + v117;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v189 = (double *)*((_QWORD *)a1 + 2);
                    v190 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v191 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v192 = *v189++;
                      v193 = v192;
                      v194 = *v190++;
                      *v191++ = v193 + (double)v194;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v33 = (double *)*((_QWORD *)a1 + 2);
                  v34 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v35 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v36 = *v33++;
                    v37 = v36;
                    v38 = *v34++;
                    *v35++ = v37 + (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v218 = (double *)*((_QWORD *)a1 + 2);
                    v219 = (double *)*((_QWORD *)a2 + 2);
                    v220 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v221 = *v218++;
                      v222 = (int)v221;
                      v223 = *v219++;
                      *v220++ = (int)v223 + v222;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v62 = (double *)*((_QWORD *)a1 + 2);
                  v63 = (double *)*((_QWORD *)a2 + 2);
                  v64 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v65 = *v62++;
                    v66 = (int)v65;
                    v67 = *v63++;
                    *v64++ = (int)v67 + v66;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v224 = (double *)*((_QWORD *)a1 + 2);
                    v225 = (double *)*((_QWORD *)a2 + 2);
                    v226 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v227 = *v224++;
                      v228 = (unint64_t)v227;
                      v229 = *v225++;
                      *v226++ = (unint64_t)v229 + v228;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v68 = (double *)*((_QWORD *)a1 + 2);
                  v69 = (double *)*((_QWORD *)a2 + 2);
                  v70 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v71 = *v68++;
                    v72 = (unint64_t)v71;
                    v73 = *v69++;
                    *v70++ = (unint64_t)v73 + v72;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v166 = (double *)*((_QWORD *)a1 + 2);
                    v167 = (double *)*((_QWORD *)a2 + 2);
                    v168 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v169 = *v166++;
                      v170 = v169;
                      v171 = *v167++;
                      *v168++ = v170 + v171;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a2 + 2);
                  v11 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v12 = *v9++;
                    v13 = v12;
                    v14 = *v10++;
                    *v11++ = v13 + v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

uint64_t sub_CECC(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  _BYTE *v9;
  _QWORD *v10;
  unint64_t v11;
  _OWORD *v13;

  if (a1)
  {
    v2 = *a1;
    if (a2)
    {
LABEL_3:
      v3 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    v2 = 0;
    if (a2)
      goto LABEL_3;
  }
  v3 = 0;
LABEL_6:
  v4 = v3 - 3;
  if ((v2 - 3) > 0xFFFFFFFD)
  {
    if (v4 < 0xFFFFFFFE)
      goto LABEL_16;
  }
  else if (v4 >= 0xFFFFFFFE)
  {
    v3 = v2;
    goto LABEL_16;
  }
  if ((_DWORD)v3 != 2 || (_DWORD)v2 == 2)
    v3 = v3;
  else
    v3 = v2;
LABEL_16:
  if (a1)
    v6 = *((_QWORD *)a1 + 1);
  else
    v6 = 0;
  off_750D78();
  if (!*v9)
  {
    *(_BYTE *)v8(v7) = 1;
    off_750D60();
    *v13 = 0u;
    v13[1] = 0u;
    v13[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v13);
  }
  off_750D60();
  v11 = v10[5] + v10[4] - 1;
  return sub_169FF0(*(_QWORD *)(*(_QWORD *)(v10[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)), v3, v6);
}

uint64_t sub_CFF0(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  _OWORD *v12;

  if (a1)
  {
    v2 = *a1;
    v3 = a2 - 3;
    if ((v2 - 3) > 0xFFFFFFFD)
    {
      if (v3 < 0xFFFFFFFE)
      {
        v2 = a2;
LABEL_16:
        v4 = *((_QWORD *)a1 + 1);
        goto LABEL_17;
      }
    }
    else if (v3 >= 0xFFFFFFFE)
    {
      goto LABEL_16;
    }
    if ((_DWORD)v2 != 2 && (_DWORD)a2 == 2)
      v2 = v2;
    else
      v2 = a2;
    goto LABEL_16;
  }
  v4 = 0;
  if ((a2 - 3) >= 0xFFFFFFFE)
    v2 = 0;
  else
    v2 = a2;
LABEL_17:
  off_750D78();
  if (!*v8)
  {
    *(_BYTE *)v7(v6) = 1;
    off_750D60();
    *v12 = 0u;
    v12[1] = 0u;
    v12[2] = 0u;
    _tlv_atexit((void (__cdecl *)(void *))std::deque<ProfileEvent>::~deque[abi:nn180100], v12);
  }
  off_750D60();
  v10 = v9[5] + v9[4] - 1;
  return sub_169FF0(*(_QWORD *)(*(_QWORD *)(v9[1] + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF)), v2, v4);
}

int *sub_D108(unsigned int *a1, unsigned int *a2)
{
  int *v4;

  v4 = (int *)sub_CECC(a1, a2);
  return agxps_timeseries_sub_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_sub_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  unsigned __int8 *v16;
  double *v17;
  double *v18;
  unsigned int v19;
  double v20;
  double v21;
  unint64_t *v22;
  double *v23;
  double *v24;
  unint64_t v25;
  double v26;
  double v27;
  double *v28;
  unsigned __int8 *v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  unint64_t *v34;
  double *v35;
  double v36;
  double v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  double *v41;
  unsigned int v42;
  double v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unint64_t *v46;
  double *v47;
  unsigned int v48;
  double v49;
  unint64_t v50;
  unint64_t *v51;
  unsigned __int8 *v52;
  double *v53;
  unint64_t v54;
  double v55;
  unint64_t *v56;
  unint64_t *v57;
  double *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double *v62;
  double *v63;
  _BYTE *v64;
  double v65;
  unsigned int v66;
  double v67;
  BOOL v68;
  unsigned int v69;
  double *v70;
  double *v71;
  unint64_t *v72;
  double v73;
  unint64_t v74;
  double v75;
  unint64_t v76;
  unsigned __int8 *v77;
  double *v78;
  _BYTE *v79;
  unsigned int v80;
  unsigned int v81;
  double v82;
  unsigned int v83;
  unsigned __int8 *v84;
  double *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  double v89;
  unint64_t v90;
  unsigned __int8 *v91;
  double *v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  double v96;
  unsigned int v97;
  unint64_t *v98;
  double *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  double v103;
  unint64_t v104;
  double *v105;
  unsigned __int8 *v106;
  _BYTE *v107;
  double v108;
  unsigned int v109;
  char v110;
  double *v111;
  unsigned __int8 *v112;
  unint64_t *v113;
  double v114;
  unint64_t v115;
  unint64_t v116;
  double *v117;
  unsigned __int8 *v118;
  _BYTE *v119;
  double v120;
  unsigned int v121;
  char v122;
  double *v123;
  unint64_t *v124;
  unint64_t *v125;
  double v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  _BYTE *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unint64_t *v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  _BYTE *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  char v150;
  unsigned __int8 *v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  _BYTE *v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  char v164;
  unint64_t *v165;
  unsigned __int8 *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  _BYTE *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  char v177;
  unint64_t *v178;
  unint64_t *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  double *v185;
  double *v186;
  double *v187;
  double v188;
  double v189;
  double v190;
  unsigned __int8 *v191;
  double *v192;
  double *v193;
  unsigned int v194;
  double v195;
  double v196;
  unint64_t *v197;
  double *v198;
  double *v199;
  unint64_t v200;
  double v201;
  double v202;
  double *v203;
  unsigned __int8 *v204;
  double *v205;
  double v206;
  double v207;
  double *v208;
  unint64_t *v209;
  double *v210;
  double v211;
  double v212;
  unint64_t v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  double *v216;
  unsigned int v217;
  double v218;
  unsigned int v219;
  unsigned __int8 *v220;
  unint64_t *v221;
  double *v222;
  unsigned int v223;
  double v224;
  unint64_t v225;
  unint64_t *v226;
  unsigned __int8 *v227;
  double *v228;
  unint64_t v229;
  double v230;
  unint64_t *v231;
  unint64_t *v232;
  double *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  double *v237;
  double *v238;
  _BYTE *v239;
  double v240;
  unsigned int v241;
  double v242;
  unsigned int v243;
  double *v244;
  double *v245;
  unint64_t *v246;
  double v247;
  unint64_t v248;
  double v249;
  unint64_t v250;
  unsigned __int8 *v251;
  double *v252;
  _BYTE *v253;
  unsigned int v254;
  unsigned int v255;
  double v256;
  unsigned int v257;
  unsigned __int8 *v258;
  double *v259;
  unint64_t *v260;
  unint64_t v261;
  unsigned int v262;
  double v263;
  unint64_t v264;
  unsigned __int8 *v265;
  double *v266;
  _BYTE *v267;
  unsigned int v268;
  unsigned int v269;
  double v270;
  unsigned int v271;
  unint64_t *v272;
  double *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  double v277;
  unint64_t v278;
  double *v279;
  unsigned __int8 *v280;
  _BYTE *v281;
  double v282;
  unsigned int v283;
  char v284;
  double *v285;
  unsigned __int8 *v286;
  unint64_t *v287;
  double v288;
  unint64_t v289;
  unint64_t v290;
  double *v291;
  unsigned __int8 *v292;
  _BYTE *v293;
  double v294;
  unsigned int v295;
  char v296;
  double *v297;
  unint64_t *v298;
  unint64_t *v299;
  double v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unsigned __int8 *v304;
  unsigned __int8 *v305;
  _BYTE *v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  char v310;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  unint64_t *v313;
  unint64_t v314;
  unsigned int v315;
  unsigned int v316;
  unint64_t v317;
  unsigned __int8 *v318;
  unsigned __int8 *v319;
  _BYTE *v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  char v324;
  unsigned __int8 *v325;
  unint64_t *v326;
  unint64_t *v327;
  unint64_t v328;
  unsigned int v329;
  unint64_t v330;
  unint64_t v331;
  unsigned __int8 *v332;
  unsigned __int8 *v333;
  _BYTE *v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  char v338;
  unint64_t *v339;
  unsigned __int8 *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unsigned __int8 *v345;
  unsigned __int8 *v346;
  _BYTE *v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  char v351;
  unint64_t *v352;
  unint64_t *v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;

  v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (v5 = *((_QWORD *)a1 + 1), v5 == *((_QWORD *)a2 + 1)) && v5 == *((_QWORD *)a3 + 1))
    {
      v6 = *a1;
      v7 = *a2;
      v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v304 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v305 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v306 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v308 = *v304++;
                      v307 = v308;
                      v309 = *v305++;
                      v68 = v307 >= v309;
                      v310 = v307 - v309;
                      if (!v68)
                        v310 = 0;
                      *v306++ = v310;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v130 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v131 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v132 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v134 = *v130++;
                    v133 = v134;
                    v135 = *v131++;
                    v68 = v133 >= v135;
                    v136 = v133 - v135;
                    if (!v68)
                      v136 = 0;
                    *v132++ = v136;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v311 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v312 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v313 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v315 = *v311++;
                      v314 = v315;
                      v316 = *v312++;
                      v68 = v314 >= v316;
                      v317 = v314 - v316;
                      if (!v68)
                        v317 = 0;
                      *v313++ = v317;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v138 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v139 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v141 = *v137++;
                    v140 = v141;
                    v142 = *v138++;
                    v68 = v140 >= v142;
                    v143 = v140 - v142;
                    if (!v68)
                      v143 = 0;
                    *v139++ = v143;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v214 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v215 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v216 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v217 = *v214++;
                      v218 = (double)v217;
                      v219 = *v215++;
                      *v216++ = v218 - (double)v219;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v39 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v40 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v41 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v42 = *v39++;
                    v43 = (double)v42;
                    v44 = *v40++;
                    *v41++ = v43 - (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v319 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v320 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v322 = *v318++;
                      v321 = v322;
                      v323 = *v319;
                      v319 += 8;
                      v68 = v321 >= v323;
                      v324 = v321 - v323;
                      if (!v68)
                        v324 = 0;
                      *v320++ = v324;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v144 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v145 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v146 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v148 = *v144++;
                    v147 = v148;
                    v149 = *v145;
                    v145 += 8;
                    v68 = v147 >= v149;
                    v150 = v147 - v149;
                    if (!v68)
                      v150 = 0;
                    *v146++ = v150;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v326 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v327 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v329 = *v325++;
                      v328 = v329;
                      v330 = *v326++;
                      v68 = v328 >= v330;
                      v331 = v328 - v330;
                      if (!v68)
                        v331 = 0;
                      *v327++ = v331;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v151 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v152 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v153 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v155 = *v151++;
                    v154 = v155;
                    v156 = *v152++;
                    v68 = v154 >= v156;
                    v157 = v154 - v156;
                    if (!v68)
                      v157 = 0;
                    *v153++ = v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v220 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v221 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v222 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v223 = *v220++;
                      v224 = (double)v223;
                      v225 = *v221++;
                      *v222++ = v224 - (double)v225;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v46 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v47 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v48 = *v45++;
                    v49 = (double)v48;
                    v50 = *v46++;
                    *v47++ = v49 - (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v251 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v252 = (double *)*((_QWORD *)a2 + 2);
                    v253 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v255 = *v251++;
                      v254 = v255;
                      v256 = *v252++;
                      v68 = v254 >= (int)v256;
                      v257 = v254 - (int)v256;
                      if (!v68)
                        LOBYTE(v257) = 0;
                      *v253++ = v257;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v77 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v78 = (double *)*((_QWORD *)a2 + 2);
                  v79 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v81 = *v77++;
                    v80 = v81;
                    v82 = *v78++;
                    v68 = v80 >= (int)v82;
                    v83 = v80 - (int)v82;
                    if (!v68)
                      LOBYTE(v83) = 0;
                    *v79++ = v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v258 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v259 = (double *)*((_QWORD *)a2 + 2);
                    v260 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v262 = *v258++;
                      v261 = v262;
                      v263 = *v259++;
                      v68 = v261 >= (unint64_t)v263;
                      v264 = v261 - (unint64_t)v263;
                      if (!v68)
                        v264 = 0;
                      *v260++ = v264;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v84 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v85 = (double *)*((_QWORD *)a2 + 2);
                  v86 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v88 = *v84++;
                    v87 = v88;
                    v89 = *v85++;
                    v68 = v87 >= (unint64_t)v89;
                    v90 = v87 - (unint64_t)v89;
                    if (!v68)
                      v90 = 0;
                    *v86++ = v90;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v191 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v192 = (double *)*((_QWORD *)a2 + 2);
                    v193 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v194 = *v191++;
                      v195 = (double)v194;
                      v196 = *v192++;
                      *v193++ = v195 - v196;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v16 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v17 = (double *)*((_QWORD *)a2 + 2);
                  v18 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v19 = *v16++;
                    v20 = (double)v19;
                    v21 = *v17++;
                    *v18++ = v20 - v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v333 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v334 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v336 = *v332;
                      v332 += 8;
                      v335 = v336;
                      v337 = *v333++;
                      v68 = v335 >= v337;
                      v338 = v335 - v337;
                      if (!v68)
                        v338 = 0;
                      *v334++ = v338;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v158 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v159 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v160 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v162 = *v158;
                    v158 += 8;
                    v161 = v162;
                    v163 = *v159++;
                    v68 = v161 >= v163;
                    v164 = v161 - v163;
                    if (!v68)
                      v164 = 0;
                    *v160++ = v164;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v340 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v341 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v343 = *v339++;
                      v342 = v343;
                      LODWORD(v343) = *v340++;
                      v68 = v342 >= v343;
                      v344 = v342 - v343;
                      if (!v68)
                        v344 = 0;
                      *v341++ = v344;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v165 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v166 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v167 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v169 = *v165++;
                    v168 = v169;
                    LODWORD(v169) = *v166++;
                    v68 = v168 >= v169;
                    v170 = v168 - v169;
                    if (!v68)
                      v170 = 0;
                    *v167++ = v170;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v226 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v227 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v228 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v229 = *v226++;
                      v230 = (double)v229;
                      LODWORD(v229) = *v227++;
                      *v228++ = v230 - (double)v229;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v51 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v52 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v53 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v54 = *v51++;
                    v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 - (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v345 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v346 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v347 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v349 = *v345;
                      v345 += 8;
                      v348 = v349;
                      v350 = *v346;
                      v346 += 8;
                      v68 = v348 >= v350;
                      v351 = v348 - v350;
                      if (!v68)
                        v351 = 0;
                      *v347++ = v351;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v171 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v172 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v173 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v175 = *v171;
                    v171 += 8;
                    v174 = v175;
                    v176 = *v172;
                    v172 += 8;
                    v68 = v174 >= v176;
                    v177 = v174 - v176;
                    if (!v68)
                      v177 = 0;
                    *v173++ = v177;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v352 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v353 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v354 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v356 = *v352++;
                      v355 = v356;
                      v357 = *v353++;
                      v68 = v355 >= v357;
                      v358 = v355 - v357;
                      if (!v68)
                        v358 = 0;
                      *v354++ = v358;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v178 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v179 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v180 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v182 = *v178++;
                    v181 = v182;
                    v183 = *v179++;
                    v68 = v181 >= v183;
                    v184 = v181 - v183;
                    if (!v68)
                      v184 = 0;
                    *v180++ = v184;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v231 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v232 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v233 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v234 = *v231++;
                      v235 = v234;
                      v236 = *v232++;
                      *v233++ = (double)v235 - (double)v236;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v56 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v57 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v58 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v59 = *v56++;
                    v60 = v59;
                    v61 = *v57++;
                    *v58++ = (double)v60 - (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v266 = (double *)*((_QWORD *)a2 + 2);
                    v267 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v269 = *v265;
                      v265 += 8;
                      v268 = v269;
                      v270 = *v266++;
                      v68 = v268 >= (int)v270;
                      v271 = v268 - (int)v270;
                      if (!v68)
                        LOBYTE(v271) = 0;
                      *v267++ = v271;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v91 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v92 = (double *)*((_QWORD *)a2 + 2);
                  v93 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v95 = *v91;
                    v91 += 8;
                    v94 = v95;
                    v96 = *v92++;
                    v68 = v94 >= (int)v96;
                    v97 = v94 - (int)v96;
                    if (!v68)
                      LOBYTE(v97) = 0;
                    *v93++ = v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v272 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v273 = (double *)*((_QWORD *)a2 + 2);
                    v274 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v276 = *v272++;
                      v275 = v276;
                      v277 = *v273++;
                      v68 = v275 >= (unint64_t)v277;
                      v278 = v275 - (unint64_t)v277;
                      if (!v68)
                        v278 = 0;
                      *v274++ = v278;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v98 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v99 = (double *)*((_QWORD *)a2 + 2);
                  v100 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v102 = *v98++;
                    v101 = v102;
                    v103 = *v99++;
                    v68 = v101 >= (unint64_t)v103;
                    v104 = v101 - (unint64_t)v103;
                    if (!v68)
                      v104 = 0;
                    *v100++ = v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v197 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v198 = (double *)*((_QWORD *)a2 + 2);
                    v199 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v200 = *v197++;
                      v201 = (double)v200;
                      v202 = *v198++;
                      *v199++ = v201 - v202;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v22 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a2 + 2);
                  v24 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v25 = *v22++;
                    v26 = (double)v25;
                    v27 = *v23++;
                    *v24++ = v26 - v27;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v279 = (double *)*((_QWORD *)a1 + 2);
                    v280 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v281 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v282 = *v279++;
                      v283 = (int)v282;
                      LODWORD(v282) = *v280++;
                      v68 = v283 >= LODWORD(v282);
                      v284 = v283 - LOBYTE(v282);
                      if (!v68)
                        v284 = 0;
                      *v281++ = v284;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v105 = (double *)*((_QWORD *)a1 + 2);
                  v106 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v107 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v108 = *v105++;
                    v109 = (int)v108;
                    LODWORD(v108) = *v106++;
                    v68 = v109 >= LODWORD(v108);
                    v110 = v109 - LOBYTE(v108);
                    if (!v68)
                      v110 = 0;
                    *v107++ = v110;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v285 = (double *)*((_QWORD *)a1 + 2);
                    v286 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v287 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v288 = *v285++;
                      v289 = (unint64_t)v288;
                      LODWORD(v288) = *v286++;
                      v68 = v289 >= LODWORD(v288);
                      v290 = v289 - LODWORD(v288);
                      if (!v68)
                        v290 = 0;
                      *v287++ = v290;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v111 = (double *)*((_QWORD *)a1 + 2);
                  v112 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v113 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v114 = *v111++;
                    v115 = (unint64_t)v114;
                    LODWORD(v114) = *v112++;
                    v68 = v115 >= LODWORD(v114);
                    v116 = v115 - LODWORD(v114);
                    if (!v68)
                      v116 = 0;
                    *v113++ = v116;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v203 = (double *)*((_QWORD *)a1 + 2);
                    v204 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v205 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v206 = *v203++;
                      v207 = v206;
                      LODWORD(v206) = *v204++;
                      *v205++ = v207 - (double)LODWORD(v206);
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v28 = (double *)*((_QWORD *)a1 + 2);
                  v29 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v30 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v31 = *v28++;
                    v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 - (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v291 = (double *)*((_QWORD *)a1 + 2);
                    v292 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v293 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v294 = *v291++;
                      v295 = (int)v294;
                      LODWORD(v294) = *v292;
                      v292 += 8;
                      v68 = v295 >= LODWORD(v294);
                      v296 = v295 - LOBYTE(v294);
                      if (!v68)
                        v296 = 0;
                      *v293++ = v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v117 = (double *)*((_QWORD *)a1 + 2);
                  v118 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v119 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v120 = *v117++;
                    v121 = (int)v120;
                    LODWORD(v120) = *v118;
                    v118 += 8;
                    v68 = v121 >= LODWORD(v120);
                    v122 = v121 - LOBYTE(v120);
                    if (!v68)
                      v122 = 0;
                    *v119++ = v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v297 = (double *)*((_QWORD *)a1 + 2);
                    v298 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v299 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v300 = *v297++;
                      v301 = (unint64_t)v300;
                      v302 = *v298++;
                      v68 = v301 >= v302;
                      v303 = v301 - v302;
                      if (!v68)
                        v303 = 0;
                      *v299++ = v303;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v123 = (double *)*((_QWORD *)a1 + 2);
                  v124 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v125 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v126 = *v123++;
                    v127 = (unint64_t)v126;
                    v128 = *v124++;
                    v68 = v127 >= v128;
                    v129 = v127 - v128;
                    if (!v68)
                      v129 = 0;
                    *v125++ = v129;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v208 = (double *)*((_QWORD *)a1 + 2);
                    v209 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v210 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v211 = *v208++;
                      v212 = v211;
                      v213 = *v209++;
                      *v210++ = v212 - (double)v213;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v33 = (double *)*((_QWORD *)a1 + 2);
                  v34 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v35 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v36 = *v33++;
                    v37 = v36;
                    v38 = *v34++;
                    *v35++ = v37 - (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (double *)*((_QWORD *)a1 + 2);
                    v238 = (double *)*((_QWORD *)a2 + 2);
                    v239 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v240 = *v237++;
                      v241 = (int)v240;
                      v242 = *v238++;
                      v68 = v241 >= (int)v242;
                      v243 = v241 - (int)v242;
                      if (!v68)
                        LOBYTE(v243) = 0;
                      *v239++ = v243;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v62 = (double *)*((_QWORD *)a1 + 2);
                  v63 = (double *)*((_QWORD *)a2 + 2);
                  v64 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v65 = *v62++;
                    v66 = (int)v65;
                    v67 = *v63++;
                    v68 = v66 >= (int)v67;
                    v69 = v66 - (int)v67;
                    if (!v68)
                      LOBYTE(v69) = 0;
                    *v64++ = v69;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v244 = (double *)*((_QWORD *)a1 + 2);
                    v245 = (double *)*((_QWORD *)a2 + 2);
                    v246 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v247 = *v244++;
                      v248 = (unint64_t)v247;
                      v249 = *v245++;
                      v68 = v248 >= (unint64_t)v249;
                      v250 = v248 - (unint64_t)v249;
                      if (!v68)
                        v250 = 0;
                      *v246++ = v250;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v70 = (double *)*((_QWORD *)a1 + 2);
                  v71 = (double *)*((_QWORD *)a2 + 2);
                  v72 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v73 = *v70++;
                    v74 = (unint64_t)v73;
                    v75 = *v71++;
                    v68 = v74 >= (unint64_t)v75;
                    v76 = v74 - (unint64_t)v75;
                    if (!v68)
                      v76 = 0;
                    *v72++ = v76;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v185 = (double *)*((_QWORD *)a1 + 2);
                    v186 = (double *)*((_QWORD *)a2 + 2);
                    v187 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v188 = *v185++;
                      v189 = v188;
                      v190 = *v186++;
                      *v187++ = v189 - v190;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a2 + 2);
                  v11 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v12 = *v9++;
                    v13 = v12;
                    v14 = *v10++;
                    *v11++ = v13 - v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *agxps_timeseries_sub_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  int *result;
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  unsigned __int8 *v19;
  double *v20;
  unsigned int v21;
  unint64_t *v22;
  double *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  double *v26;
  unsigned int v27;
  unint64_t *v28;
  double *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  double *v32;
  unsigned int v33;
  unint64_t *v34;
  double *v35;
  unint64_t v36;
  double *v37;
  _BYTE *v38;
  unsigned int v39;
  double v40;
  unsigned int v41;
  double *v42;
  unint64_t *v43;
  unint64_t v44;
  double v45;
  unint64_t v46;
  double *v47;
  _BYTE *v48;
  double v49;
  int v50;
  double *v51;
  unint64_t *v52;
  double v53;
  unint64_t v54;
  double *v55;
  _BYTE *v56;
  double v57;
  int v58;
  double *v59;
  unint64_t *v60;
  double v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _BYTE *v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  unsigned __int8 *v68;
  unint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned __int8 *v73;
  _BYTE *v74;
  unsigned int v75;
  unsigned int v76;
  char v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  _BYTE *v84;
  unsigned int v85;
  char v86;
  unsigned __int8 *v87;
  unint64_t *v88;
  unsigned int v89;
  unint64_t v90;
  unsigned __int8 *v91;
  _BYTE *v92;
  unsigned int v93;
  char v94;
  unint64_t *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unsigned __int8 *v99;
  _BYTE *v100;
  unsigned int v101;
  char v102;
  unsigned __int8 *v103;
  unint64_t *v104;
  unsigned int v105;
  unint64_t v106;
  unsigned __int8 *v107;
  _BYTE *v108;
  unsigned int v109;
  char v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  double *v115;
  double *v116;
  double v117;
  double *v118;
  double *v119;
  double v120;
  double *v121;
  double *v122;
  double v123;
  unsigned __int8 *v124;
  double *v125;
  unsigned int v126;
  unint64_t *v127;
  double *v128;
  unint64_t v129;
  unsigned __int8 *v130;
  double *v131;
  unsigned int v132;
  unint64_t *v133;
  double *v134;
  unint64_t v135;
  unsigned __int8 *v136;
  double *v137;
  unsigned int v138;
  unint64_t *v139;
  double *v140;
  unint64_t v141;
  double *v142;
  _BYTE *v143;
  unsigned int v144;
  double v145;
  unsigned int v146;
  double *v147;
  unint64_t *v148;
  unint64_t v149;
  double v150;
  unint64_t v151;
  double *v152;
  _BYTE *v153;
  double v154;
  int v155;
  double *v156;
  unint64_t *v157;
  double v158;
  unint64_t v159;
  double *v160;
  _BYTE *v161;
  double v162;
  int v163;
  double *v164;
  unint64_t *v165;
  double v166;
  unint64_t v167;
  unsigned __int8 *v168;
  _BYTE *v169;
  unsigned int v170;
  unsigned int v171;
  char v172;
  unsigned __int8 *v173;
  unint64_t *v174;
  unint64_t v175;
  unsigned int v176;
  unint64_t v177;
  unsigned __int8 *v178;
  _BYTE *v179;
  unsigned int v180;
  unsigned int v181;
  char v182;
  unint64_t *v183;
  _QWORD *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unsigned __int8 *v188;
  _BYTE *v189;
  unsigned int v190;
  char v191;
  unsigned __int8 *v192;
  unint64_t *v193;
  unsigned int v194;
  unint64_t v195;
  unsigned __int8 *v196;
  _BYTE *v197;
  unsigned int v198;
  char v199;
  unint64_t *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  _BYTE *v205;
  unsigned int v206;
  char v207;
  unsigned __int8 *v208;
  unint64_t *v209;
  unsigned int v210;
  unint64_t v211;
  unsigned __int8 *v212;
  _BYTE *v213;
  unsigned int v214;
  char v215;
  unint64_t *v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;

  result = 0;
  if (a3 && a4)
  {
    if (*((_BYTE *)a4 + 32))
      return 0;
    v7 = *((_QWORD *)a3 + 1);
    if (v7 != *((_QWORD *)a4 + 1))
    {
      return 0;
    }
    else
    {
      v8 = *a3;
      v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v188 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v189 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v190 = *v188++;
                        v191 = a2 - v190;
                        if (a2 < v190)
                          v191 = 0;
                        *v189++ = v191;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v83 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v84 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v85 = *v83++;
                      v86 = a2 - v85;
                      if (a2 < v85)
                        v86 = 0;
                      *v84++ = v86;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v192 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v193 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v194 = *v192++;
                        v195 = a2 - (unint64_t)v194;
                        if (a2 < (unint64_t)v194)
                          v195 = 0;
                        *v193++ = v195;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v87 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v88 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v89 = *v87++;
                      v90 = a2 - (unint64_t)v89;
                      if (a2 < (unint64_t)v89)
                        v90 = 0;
                      *v88++ = v90;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v130 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v131 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v132 = *v130++;
                        *v131++ = (double)a2 - (double)v132;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v25 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v26 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v27 = *v25++;
                      *v26++ = (double)a2 - (double)v27;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v196 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v197 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v198 = *v196;
                        v196 += 8;
                        v199 = a2 - v198;
                        if (a2 < v198)
                          v199 = 0;
                        *v197++ = v199;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v91 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v92 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v93 = *v91;
                      v91 += 8;
                      v94 = a2 - v93;
                      if (a2 < v93)
                        v94 = 0;
                      *v92++ = v94;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v200 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v201 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v202 = *v200++;
                        v203 = a2 - v202;
                        if (a2 < v202)
                          v203 = 0;
                        *v201++ = v203;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v95 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v96 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v97 = *v95++;
                      v98 = a2 - v97;
                      if (a2 < v97)
                        v98 = 0;
                      *v96++ = v98;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v133 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v134 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v135 = *v133++;
                        *v134++ = (double)a2 - (double)v135;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v28 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v29 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v30 = *v28++;
                      *v29++ = (double)a2 - (double)v30;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v152 = (double *)*((_QWORD *)a3 + 2);
                      v153 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v154 = *v152++;
                        v155 = a2 - (int)v154;
                        if (a2 < (int)v154)
                          LOBYTE(v155) = 0;
                        *v153++ = v155;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v47 = (double *)*((_QWORD *)a3 + 2);
                    v48 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v49 = *v47++;
                      v50 = a2 - (int)v49;
                      if (a2 < (int)v49)
                        LOBYTE(v50) = 0;
                      *v48++ = v50;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v156 = (double *)*((_QWORD *)a3 + 2);
                      v157 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v158 = *v156++;
                        v159 = a2 - (unint64_t)v158;
                        if (a2 < (unint64_t)v158)
                          v159 = 0;
                        *v157++ = v159;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v51 = (double *)*((_QWORD *)a3 + 2);
                    v52 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v53 = *v51++;
                      v54 = a2 - (unint64_t)v53;
                      if (a2 < (unint64_t)v53)
                        v54 = 0;
                      *v52++ = v54;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v118 = (double *)*((_QWORD *)a3 + 2);
                      v119 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v120 = *v118++;
                        *v119++ = (double)a2 - v120;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v13 = (double *)*((_QWORD *)a3 + 2);
                    v14 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v15 = *v13++;
                      *v14++ = (double)a2 - v15;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v204 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v205 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v206 = *v204++;
                        v207 = a2 - v206;
                        if (a2 < v206)
                          v207 = 0;
                        *v205++ = v207;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v99 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v100 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v101 = *v99++;
                      v102 = a2 - v101;
                      if (a2 < v101)
                        v102 = 0;
                      *v100++ = v102;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v208 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v209 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v210 = *v208++;
                        v211 = a2 - v210;
                        if (a2 < v210)
                          v211 = 0;
                        *v209++ = v211;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v103 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v104 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v105 = *v103++;
                      v106 = a2 - v105;
                      if (a2 < v105)
                        v106 = 0;
                      *v104++ = v106;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v136 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v137 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v138 = *v136++;
                        *v137++ = (double)a2 - (double)v138;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v31 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v32 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v33 = *v31++;
                      *v32++ = (double)a2 - (double)v33;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v212 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v213 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v214 = *v212;
                        v212 += 8;
                        v215 = a2 - v214;
                        if (a2 < v214)
                          v215 = 0;
                        *v213++ = v215;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v107 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v108 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v109 = *v107;
                      v107 += 8;
                      v110 = a2 - v109;
                      if (a2 < v109)
                        v110 = 0;
                      *v108++ = v110;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v216 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v217 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v218 = *v216++;
                        v219 = a2 - v218;
                        if (a2 < v218)
                          v219 = 0;
                        *v217++ = v219;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v111 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v112 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v113 = *v111++;
                      v114 = a2 - v113;
                      if (a2 < v113)
                        v114 = 0;
                      *v112++ = v114;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v139 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v140 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v141 = *v139++;
                        *v140++ = (double)a2 - (double)v141;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v34 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v35 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v36 = *v34++;
                      *v35++ = (double)a2 - (double)v36;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v160 = (double *)*((_QWORD *)a3 + 2);
                      v161 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v162 = *v160++;
                        v163 = a2 - (int)v162;
                        if (a2 < (int)v162)
                          LOBYTE(v163) = 0;
                        *v161++ = v163;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v55 = (double *)*((_QWORD *)a3 + 2);
                    v56 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v57 = *v55++;
                      v58 = a2 - (int)v57;
                      if (a2 < (int)v57)
                        LOBYTE(v58) = 0;
                      *v56++ = v58;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v164 = (double *)*((_QWORD *)a3 + 2);
                      v165 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v166 = *v164++;
                        v167 = a2 - (unint64_t)v166;
                        if (a2 < (unint64_t)v166)
                          v167 = 0;
                        *v165++ = v167;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v59 = (double *)*((_QWORD *)a3 + 2);
                    v60 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v61 = *v59++;
                      v62 = a2 - (unint64_t)v61;
                      if (a2 < (unint64_t)v61)
                        v62 = 0;
                      *v60++ = v62;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v121 = (double *)*((_QWORD *)a3 + 2);
                      v122 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v123 = *v121++;
                        *v122++ = (double)a2 - v123;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v16 = (double *)*((_QWORD *)a3 + 2);
                    v17 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v18 = *v16++;
                      *v17++ = (double)a2 - v18;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v168 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v169 = (_BYTE *)*((_QWORD *)a4 + 2);
                      v170 = (int)*(double *)&a2;
                      do
                      {
                        v171 = *v168++;
                        v172 = v170 - v171;
                        if (v170 < v171)
                          v172 = 0;
                        *v169++ = v172;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v63 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v64 = (_BYTE *)*((_QWORD *)a4 + 2);
                    v65 = (int)*(double *)&a2;
                    do
                    {
                      v66 = *v63++;
                      v67 = v65 - v66;
                      if (v65 < v66)
                        v67 = 0;
                      *v64++ = v67;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v173 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v174 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v175 = (unint64_t)*(double *)&a2;
                      do
                      {
                        v176 = *v173++;
                        v177 = v175 - v176;
                        if (v175 < v176)
                          v177 = 0;
                        *v174++ = v177;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v68 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v69 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v70 = (unint64_t)*(double *)&a2;
                    do
                    {
                      v71 = *v68++;
                      v72 = v70 - v71;
                      if (v70 < v71)
                        v72 = 0;
                      *v69++ = v72;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v124 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v125 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v126 = *v124++;
                        *v125++ = *(double *)&a2 - (double)v126;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v19 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v20 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v21 = *v19++;
                      *v20++ = *(double *)&a2 - (double)v21;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v178 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v179 = (_BYTE *)*((_QWORD *)a4 + 2);
                      v180 = (int)*(double *)&a2;
                      do
                      {
                        v181 = *v178;
                        v178 += 8;
                        v182 = v180 - v181;
                        if (v180 < v181)
                          v182 = 0;
                        *v179++ = v182;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v73 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v74 = (_BYTE *)*((_QWORD *)a4 + 2);
                    v75 = (int)*(double *)&a2;
                    do
                    {
                      v76 = *v73;
                      v73 += 8;
                      v77 = v75 - v76;
                      if (v75 < v76)
                        v77 = 0;
                      *v74++ = v77;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v183 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v184 = (_QWORD *)*((_QWORD *)a4 + 2);
                      v185 = (unint64_t)*(double *)&a2;
                      do
                      {
                        v186 = *v183++;
                        v187 = v185 - v186;
                        if (v185 < v186)
                          v187 = 0;
                        *v184++ = v187;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v78 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v79 = (_QWORD *)*((_QWORD *)a4 + 2);
                    v80 = (unint64_t)*(double *)&a2;
                    do
                    {
                      v81 = *v78++;
                      v82 = v80 - v81;
                      if (v80 < v81)
                        v82 = 0;
                      *v79++ = v82;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v127 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v128 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v129 = *v127++;
                        *v128++ = *(double *)&a2 - (double)v129;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v22 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v23 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v24 = *v22++;
                      *v23++ = *(double *)&a2 - (double)v24;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v142 = (double *)*((_QWORD *)a3 + 2);
                      v143 = (_BYTE *)*((_QWORD *)a4 + 2);
                      v144 = (int)*(double *)&a2;
                      do
                      {
                        v145 = *v142++;
                        v146 = v144 - (int)v145;
                        if (v144 < (int)v145)
                          LOBYTE(v146) = 0;
                        *v143++ = v146;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v37 = (double *)*((_QWORD *)a3 + 2);
                    v38 = (_BYTE *)*((_QWORD *)a4 + 2);
                    v39 = (int)*(double *)&a2;
                    do
                    {
                      v40 = *v37++;
                      v41 = v39 - (int)v40;
                      if (v39 < (int)v40)
                        LOBYTE(v41) = 0;
                      *v38++ = v41;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v147 = (double *)*((_QWORD *)a3 + 2);
                      v148 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v149 = (unint64_t)*(double *)&a2;
                      do
                      {
                        v150 = *v147++;
                        v151 = v149 - (unint64_t)v150;
                        if (v149 < (unint64_t)v150)
                          v151 = 0;
                        *v148++ = v151;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v42 = (double *)*((_QWORD *)a3 + 2);
                    v43 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v44 = (unint64_t)*(double *)&a2;
                    do
                    {
                      v45 = *v42++;
                      v46 = v44 - (unint64_t)v45;
                      if (v44 < (unint64_t)v45)
                        v46 = 0;
                      *v43++ = v46;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v115 = (double *)*((_QWORD *)a3 + 2);
                      v116 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v117 = *v115++;
                        *v116++ = *(double *)&a2 - v117;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v10 = (double *)*((_QWORD *)a3 + 2);
                    v11 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v12 = *v10++;
                      *v11++ = *(double *)&a2 - v12;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return a4;
    }
  }
  return result;
}

int *agxps_timeseries_mul_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  unsigned __int8 *v16;
  double *v17;
  double *v18;
  unsigned int v19;
  double v20;
  double v21;
  unint64_t *v22;
  double *v23;
  double *v24;
  unint64_t v25;
  double v26;
  double v27;
  double *v28;
  unsigned __int8 *v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  unint64_t *v34;
  double *v35;
  double v36;
  double v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  double *v41;
  unsigned int v42;
  double v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unint64_t *v46;
  double *v47;
  unsigned int v48;
  double v49;
  unint64_t v50;
  unint64_t *v51;
  unsigned __int8 *v52;
  double *v53;
  unint64_t v54;
  double v55;
  unint64_t *v56;
  unint64_t *v57;
  double *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double *v62;
  double *v63;
  _BYTE *v64;
  double v65;
  int v66;
  double v67;
  double *v68;
  double *v69;
  _QWORD *v70;
  double v71;
  unint64_t v72;
  double v73;
  char *v74;
  double *v75;
  _BYTE *v76;
  char v77;
  char v78;
  double v79;
  unsigned __int8 *v80;
  double *v81;
  _QWORD *v82;
  uint64_t v83;
  unsigned int v84;
  double v85;
  char *v86;
  double *v87;
  _BYTE *v88;
  char v89;
  char v90;
  double v91;
  uint64_t *v92;
  double *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double *v98;
  _BYTE *v99;
  _BYTE *v100;
  double v101;
  int v102;
  double *v103;
  unsigned __int8 *v104;
  _QWORD *v105;
  double v106;
  unint64_t v107;
  double *v108;
  _BYTE *v109;
  _BYTE *v110;
  double v111;
  int v112;
  double *v113;
  uint64_t *v114;
  _QWORD *v115;
  double v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  _BYTE *v121;
  char v122;
  char v123;
  char v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char *v131;
  char *v132;
  _BYTE *v133;
  char v134;
  char v135;
  char v136;
  unsigned __int8 *v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  _BYTE *v145;
  char v146;
  char v147;
  char v148;
  uint64_t *v149;
  unsigned __int8 *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  _BYTE *v156;
  char v157;
  char v158;
  char v159;
  uint64_t *v160;
  uint64_t *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double *v166;
  double *v167;
  double *v168;
  double v169;
  double v170;
  double v171;
  unsigned __int8 *v172;
  double *v173;
  double *v174;
  unsigned int v175;
  double v176;
  double v177;
  unint64_t *v178;
  double *v179;
  double *v180;
  unint64_t v181;
  double v182;
  double v183;
  double *v184;
  unsigned __int8 *v185;
  double *v186;
  double v187;
  double v188;
  double *v189;
  unint64_t *v190;
  double *v191;
  double v192;
  double v193;
  unint64_t v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  double *v197;
  unsigned int v198;
  double v199;
  unsigned int v200;
  unsigned __int8 *v201;
  unint64_t *v202;
  double *v203;
  unsigned int v204;
  double v205;
  unint64_t v206;
  unint64_t *v207;
  unsigned __int8 *v208;
  double *v209;
  unint64_t v210;
  double v211;
  unint64_t *v212;
  unint64_t *v213;
  double *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  double *v218;
  double *v219;
  _BYTE *v220;
  double v221;
  int v222;
  double v223;
  double *v224;
  double *v225;
  _QWORD *v226;
  double v227;
  unint64_t v228;
  double v229;
  char *v230;
  double *v231;
  _BYTE *v232;
  char v233;
  char v234;
  double v235;
  unsigned __int8 *v236;
  double *v237;
  _QWORD *v238;
  uint64_t v239;
  unsigned int v240;
  double v241;
  char *v242;
  double *v243;
  _BYTE *v244;
  char v245;
  char v246;
  double v247;
  uint64_t *v248;
  double *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  double v253;
  double *v254;
  _BYTE *v255;
  _BYTE *v256;
  double v257;
  int v258;
  double *v259;
  unsigned __int8 *v260;
  _QWORD *v261;
  double v262;
  unint64_t v263;
  double *v264;
  _BYTE *v265;
  _BYTE *v266;
  double v267;
  int v268;
  double *v269;
  uint64_t *v270;
  _QWORD *v271;
  double v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  _BYTE *v277;
  char v278;
  char v279;
  char v280;
  unsigned __int8 *v281;
  unsigned __int8 *v282;
  _QWORD *v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  char *v287;
  char *v288;
  _BYTE *v289;
  char v290;
  char v291;
  char v292;
  unsigned __int8 *v293;
  uint64_t *v294;
  _QWORD *v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  char *v299;
  char *v300;
  _BYTE *v301;
  char v302;
  char v303;
  char v304;
  uint64_t *v305;
  unsigned __int8 *v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  _BYTE *v312;
  char v313;
  char v314;
  char v315;
  uint64_t *v316;
  uint64_t *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;

  v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (v5 = *((_QWORD *)a1 + 1), v5 == *((_QWORD *)a2 + 1)) && v5 == *((_QWORD *)a3 + 1))
    {
      v6 = *a1;
      v7 = *a2;
      v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v275 = (char *)*((_QWORD *)a1 + 2);
                    v276 = (char *)*((_QWORD *)a2 + 2);
                    v277 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v279 = *v275++;
                      v278 = v279;
                      v280 = *v276++;
                      *v277++ = v280 * v278;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v119 = (char *)*((_QWORD *)a1 + 2);
                  v120 = (char *)*((_QWORD *)a2 + 2);
                  v121 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v123 = *v119++;
                    v122 = v123;
                    v124 = *v120++;
                    *v121++ = v124 * v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v281 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v282 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v283 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v285 = *v281++;
                      v284 = v285;
                      v286 = *v282++;
                      *v283++ = v286 * (unint64_t)v284;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v125 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v126 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v127 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v129 = *v125++;
                    v128 = v129;
                    v130 = *v126++;
                    *v127++ = v130 * (unint64_t)v128;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v195 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v196 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v197 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v198 = *v195++;
                      v199 = (double)v198;
                      v200 = *v196++;
                      *v197++ = v199 * (double)v200;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v39 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v40 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v41 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v42 = *v39++;
                    v43 = (double)v42;
                    v44 = *v40++;
                    *v41++ = v43 * (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v287 = (char *)*((_QWORD *)a1 + 2);
                    v288 = (char *)*((_QWORD *)a2 + 2);
                    v289 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v291 = *v287++;
                      v290 = v291;
                      v292 = *v288;
                      v288 += 8;
                      *v289++ = v290 * v292;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v131 = (char *)*((_QWORD *)a1 + 2);
                  v132 = (char *)*((_QWORD *)a2 + 2);
                  v133 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v135 = *v131++;
                    v134 = v135;
                    v136 = *v132;
                    v132 += 8;
                    *v133++ = v134 * v136;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v294 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v295 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v297 = *v293++;
                      v296 = v297;
                      v298 = *v294++;
                      *v295++ = v298 * v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v137 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v138 = (uint64_t *)*((_QWORD *)a2 + 2);
                  v139 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v141 = *v137++;
                    v140 = v141;
                    v142 = *v138++;
                    *v139++ = v142 * v140;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v201 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v202 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v203 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v204 = *v201++;
                      v205 = (double)v204;
                      v206 = *v202++;
                      *v203++ = v205 * (double)v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v46 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v47 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v48 = *v45++;
                    v49 = (double)v48;
                    v50 = *v46++;
                    *v47++ = v49 * (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v230 = (char *)*((_QWORD *)a1 + 2);
                    v231 = (double *)*((_QWORD *)a2 + 2);
                    v232 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v234 = *v230++;
                      v233 = v234;
                      v235 = *v231++;
                      *v232++ = v233 * (int)v235;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v74 = (char *)*((_QWORD *)a1 + 2);
                  v75 = (double *)*((_QWORD *)a2 + 2);
                  v76 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v78 = *v74++;
                    v77 = v78;
                    v79 = *v75++;
                    *v76++ = v77 * (int)v79;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v236 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v237 = (double *)*((_QWORD *)a2 + 2);
                    v238 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v240 = *v236++;
                      v239 = v240;
                      v241 = *v237++;
                      *v238++ = (unint64_t)v241 * v239;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v80 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v81 = (double *)*((_QWORD *)a2 + 2);
                  v82 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v84 = *v80++;
                    v83 = v84;
                    v85 = *v81++;
                    *v82++ = (unint64_t)v85 * v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v172 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v173 = (double *)*((_QWORD *)a2 + 2);
                    v174 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v175 = *v172++;
                      v176 = (double)v175;
                      v177 = *v173++;
                      *v174++ = v177 * v176;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v16 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v17 = (double *)*((_QWORD *)a2 + 2);
                  v18 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v19 = *v16++;
                    v20 = (double)v19;
                    v21 = *v17++;
                    *v18++ = v21 * v20;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v299 = (char *)*((_QWORD *)a1 + 2);
                    v300 = (char *)*((_QWORD *)a2 + 2);
                    v301 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v303 = *v299;
                      v299 += 8;
                      v302 = v303;
                      v304 = *v300++;
                      *v301++ = v304 * v302;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v143 = (char *)*((_QWORD *)a1 + 2);
                  v144 = (char *)*((_QWORD *)a2 + 2);
                  v145 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v147 = *v143;
                    v143 += 8;
                    v146 = v147;
                    v148 = *v144++;
                    *v145++ = v148 * v146;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v306 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v307 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v309 = *v305++;
                      v308 = v309;
                      LODWORD(v309) = *v306++;
                      *v307++ = v308 * v309;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v149 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v150 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v151 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v153 = *v149++;
                    v152 = v153;
                    LODWORD(v153) = *v150++;
                    *v151++ = v152 * v153;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v207 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v208 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v209 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v210 = *v207++;
                      v211 = (double)v210;
                      LODWORD(v210) = *v208++;
                      *v209++ = v211 * (double)v210;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v51 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v52 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v53 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v54 = *v51++;
                    v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 * (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v310 = (char *)*((_QWORD *)a1 + 2);
                    v311 = (char *)*((_QWORD *)a2 + 2);
                    v312 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v314 = *v310;
                      v310 += 8;
                      v313 = v314;
                      v315 = *v311;
                      v311 += 8;
                      *v312++ = v315 * v313;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v154 = (char *)*((_QWORD *)a1 + 2);
                  v155 = (char *)*((_QWORD *)a2 + 2);
                  v156 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v158 = *v154;
                    v154 += 8;
                    v157 = v158;
                    v159 = *v155;
                    v155 += 8;
                    *v156++ = v159 * v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v316 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v317 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v318 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v320 = *v316++;
                      v319 = v320;
                      v321 = *v317++;
                      *v318++ = v321 * v319;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v160 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v161 = (uint64_t *)*((_QWORD *)a2 + 2);
                  v162 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v164 = *v160++;
                    v163 = v164;
                    v165 = *v161++;
                    *v162++ = v165 * v163;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v212 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v213 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v214 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v215 = *v212++;
                      v216 = v215;
                      v217 = *v213++;
                      *v214++ = (double)v216 * (double)v217;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v56 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v57 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v58 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v59 = *v56++;
                    v60 = v59;
                    v61 = *v57++;
                    *v58++ = (double)v60 * (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v242 = (char *)*((_QWORD *)a1 + 2);
                    v243 = (double *)*((_QWORD *)a2 + 2);
                    v244 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v246 = *v242;
                      v242 += 8;
                      v245 = v246;
                      v247 = *v243++;
                      *v244++ = (int)v247 * v245;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v86 = (char *)*((_QWORD *)a1 + 2);
                  v87 = (double *)*((_QWORD *)a2 + 2);
                  v88 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v90 = *v86;
                    v86 += 8;
                    v89 = v90;
                    v91 = *v87++;
                    *v88++ = (int)v91 * v89;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v248 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v249 = (double *)*((_QWORD *)a2 + 2);
                    v250 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v252 = *v248++;
                      v251 = v252;
                      v253 = *v249++;
                      *v250++ = v251 * (unint64_t)v253;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v92 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v93 = (double *)*((_QWORD *)a2 + 2);
                  v94 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v96 = *v92++;
                    v95 = v96;
                    v97 = *v93++;
                    *v94++ = v95 * (unint64_t)v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v179 = (double *)*((_QWORD *)a2 + 2);
                    v180 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v181 = *v178++;
                      v182 = (double)v181;
                      v183 = *v179++;
                      *v180++ = v183 * v182;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v22 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a2 + 2);
                  v24 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v25 = *v22++;
                    v26 = (double)v25;
                    v27 = *v23++;
                    *v24++ = v27 * v26;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v254 = (double *)*((_QWORD *)a1 + 2);
                    v255 = (_BYTE *)*((_QWORD *)a2 + 2);
                    v256 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v257 = *v254++;
                      v258 = (int)v257;
                      LOBYTE(v257) = *v255++;
                      *v256++ = LOBYTE(v257) * v258;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v98 = (double *)*((_QWORD *)a1 + 2);
                  v99 = (_BYTE *)*((_QWORD *)a2 + 2);
                  v100 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v101 = *v98++;
                    v102 = (int)v101;
                    LOBYTE(v101) = *v99++;
                    *v100++ = LOBYTE(v101) * v102;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((_QWORD *)a1 + 2);
                    v260 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v261 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v262 = *v259++;
                      v263 = (unint64_t)v262;
                      LODWORD(v262) = *v260++;
                      *v261++ = LODWORD(v262) * v263;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v103 = (double *)*((_QWORD *)a1 + 2);
                  v104 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v105 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v106 = *v103++;
                    v107 = (unint64_t)v106;
                    LODWORD(v106) = *v104++;
                    *v105++ = LODWORD(v106) * v107;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v184 = (double *)*((_QWORD *)a1 + 2);
                    v185 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v186 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v187 = *v184++;
                      v188 = v187;
                      LODWORD(v187) = *v185++;
                      *v186++ = v188 * (double)LODWORD(v187);
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v28 = (double *)*((_QWORD *)a1 + 2);
                  v29 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v30 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v31 = *v28++;
                    v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 * (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v264 = (double *)*((_QWORD *)a1 + 2);
                    v265 = (_BYTE *)*((_QWORD *)a2 + 2);
                    v266 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v267 = *v264++;
                      v268 = (int)v267;
                      LOBYTE(v267) = *v265;
                      v265 += 8;
                      *v266++ = LOBYTE(v267) * v268;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v108 = (double *)*((_QWORD *)a1 + 2);
                  v109 = (_BYTE *)*((_QWORD *)a2 + 2);
                  v110 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v111 = *v108++;
                    v112 = (int)v111;
                    LOBYTE(v111) = *v109;
                    v109 += 8;
                    *v110++ = LOBYTE(v111) * v112;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v269 = (double *)*((_QWORD *)a1 + 2);
                    v270 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v271 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v272 = *v269++;
                      v273 = (unint64_t)v272;
                      v274 = *v270++;
                      *v271++ = v274 * v273;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v113 = (double *)*((_QWORD *)a1 + 2);
                  v114 = (uint64_t *)*((_QWORD *)a2 + 2);
                  v115 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v116 = *v113++;
                    v117 = (unint64_t)v116;
                    v118 = *v114++;
                    *v115++ = v118 * v117;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v189 = (double *)*((_QWORD *)a1 + 2);
                    v190 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v191 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v192 = *v189++;
                      v193 = v192;
                      v194 = *v190++;
                      *v191++ = v193 * (double)v194;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v33 = (double *)*((_QWORD *)a1 + 2);
                  v34 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v35 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v36 = *v33++;
                    v37 = v36;
                    v38 = *v34++;
                    *v35++ = v37 * (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v218 = (double *)*((_QWORD *)a1 + 2);
                    v219 = (double *)*((_QWORD *)a2 + 2);
                    v220 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v221 = *v218++;
                      v222 = (int)v221;
                      v223 = *v219++;
                      *v220++ = (int)v223 * v222;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v62 = (double *)*((_QWORD *)a1 + 2);
                  v63 = (double *)*((_QWORD *)a2 + 2);
                  v64 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v65 = *v62++;
                    v66 = (int)v65;
                    v67 = *v63++;
                    *v64++ = (int)v67 * v66;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v224 = (double *)*((_QWORD *)a1 + 2);
                    v225 = (double *)*((_QWORD *)a2 + 2);
                    v226 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v227 = *v224++;
                      v228 = (unint64_t)v227;
                      v229 = *v225++;
                      *v226++ = (unint64_t)v229 * v228;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v68 = (double *)*((_QWORD *)a1 + 2);
                  v69 = (double *)*((_QWORD *)a2 + 2);
                  v70 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v71 = *v68++;
                    v72 = (unint64_t)v71;
                    v73 = *v69++;
                    *v70++ = (unint64_t)v73 * v72;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v166 = (double *)*((_QWORD *)a1 + 2);
                    v167 = (double *)*((_QWORD *)a2 + 2);
                    v168 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v169 = *v166++;
                      v170 = v169;
                      v171 = *v167++;
                      *v168++ = v170 * v171;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a2 + 2);
                  v11 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v12 = *v9++;
                    v13 = v12;
                    v14 = *v10++;
                    *v11++ = v13 * v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_F6DC(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  int v5;
  int *v6;

  v5 = a1;
  v6 = (int *)sub_CFF0(a3, a1);
  return agxps_timeseries_mul_st(v5, a2, (int *)a3, v6, 1);
}

int *agxps_timeseries_mul_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  int *result;
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  unsigned __int8 *v19;
  double *v20;
  unsigned int v21;
  unint64_t *v22;
  double *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  double *v26;
  unsigned int v27;
  unint64_t *v28;
  double *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  double *v32;
  unsigned int v33;
  unint64_t *v34;
  double *v35;
  unint64_t v36;
  double *v37;
  _BYTE *v38;
  double v39;
  double *v40;
  _QWORD *v41;
  double v42;
  double *v43;
  _BYTE *v44;
  double v45;
  double *v46;
  _QWORD *v47;
  double v48;
  double *v49;
  _BYTE *v50;
  double v51;
  double *v52;
  _QWORD *v53;
  double v54;
  char *v55;
  _BYTE *v56;
  char v57;
  unsigned __int8 *v58;
  _QWORD *v59;
  unsigned int v60;
  char *v61;
  _BYTE *v62;
  char v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  _BYTE *v68;
  char v69;
  unsigned __int8 *v70;
  _QWORD *v71;
  unsigned int v72;
  char *v73;
  _BYTE *v74;
  char v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  _BYTE *v80;
  char v81;
  unsigned __int8 *v82;
  _QWORD *v83;
  unsigned int v84;
  char *v85;
  _BYTE *v86;
  char v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  double *v91;
  double *v92;
  double v93;
  double *v94;
  double *v95;
  double v96;
  double *v97;
  double *v98;
  double v99;
  unsigned __int8 *v100;
  double *v101;
  unsigned int v102;
  unint64_t *v103;
  double *v104;
  unint64_t v105;
  unsigned __int8 *v106;
  double *v107;
  unsigned int v108;
  unint64_t *v109;
  double *v110;
  unint64_t v111;
  unsigned __int8 *v112;
  double *v113;
  unsigned int v114;
  unint64_t *v115;
  double *v116;
  unint64_t v117;
  double *v118;
  _BYTE *v119;
  double v120;
  double *v121;
  _QWORD *v122;
  double v123;
  double *v124;
  _BYTE *v125;
  double v126;
  double *v127;
  _QWORD *v128;
  double v129;
  double *v130;
  _BYTE *v131;
  double v132;
  double *v133;
  _QWORD *v134;
  double v135;
  char *v136;
  _BYTE *v137;
  char v138;
  unsigned __int8 *v139;
  _QWORD *v140;
  unsigned int v141;
  char *v142;
  _BYTE *v143;
  char v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  _BYTE *v149;
  char v150;
  unsigned __int8 *v151;
  _QWORD *v152;
  unsigned int v153;
  char *v154;
  _BYTE *v155;
  char v156;
  uint64_t *v157;
  _QWORD *v158;
  uint64_t v159;
  char *v160;
  _BYTE *v161;
  char v162;
  unsigned __int8 *v163;
  _QWORD *v164;
  unsigned int v165;
  char *v166;
  _BYTE *v167;
  char v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;

  result = 0;
  if (a3 && a4)
  {
    if (*((_BYTE *)a4 + 32))
      return 0;
    v7 = *((_QWORD *)a3 + 1);
    if (v7 != *((_QWORD *)a4 + 1))
    {
      return 0;
    }
    else
    {
      v8 = *a3;
      v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v148 = (char *)*((_QWORD *)a3 + 2);
                      v149 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v150 = *v148++;
                        *v149++ = v150 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v67 = (char *)*((_QWORD *)a3 + 2);
                    v68 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v69 = *v67++;
                      *v68++ = v69 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v151 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v152 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v153 = *v151++;
                        *v152++ = a2 * (unint64_t)v153;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v70 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v71 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v72 = *v70++;
                      *v71++ = a2 * (unint64_t)v72;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v106 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v107 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v108 = *v106++;
                        *v107++ = (double)a2 * (double)v108;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v25 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v26 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v27 = *v25++;
                      *v26++ = (double)a2 * (double)v27;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v154 = (char *)*((_QWORD *)a3 + 2);
                      v155 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v156 = *v154;
                        v154 += 8;
                        *v155++ = v156 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v73 = (char *)*((_QWORD *)a3 + 2);
                    v74 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v75 = *v73;
                      v73 += 8;
                      *v74++ = v75 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v157 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v158 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v159 = *v157++;
                        *v158++ = v159 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v76 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v77 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v78 = *v76++;
                      *v77++ = v78 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v109 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v110 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v111 = *v109++;
                        *v110++ = (double)a2 * (double)v111;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v28 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v29 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v30 = *v28++;
                      *v29++ = (double)a2 * (double)v30;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v124 = (double *)*((_QWORD *)a3 + 2);
                      v125 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v126 = *v124++;
                        *v125++ = (int)v126 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v43 = (double *)*((_QWORD *)a3 + 2);
                    v44 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v45 = *v43++;
                      *v44++ = (int)v45 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v127 = (double *)*((_QWORD *)a3 + 2);
                      v128 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v129 = *v127++;
                        *v128++ = a2 * (unint64_t)v129;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v46 = (double *)*((_QWORD *)a3 + 2);
                    v47 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v48 = *v46++;
                      *v47++ = a2 * (unint64_t)v48;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v94 = (double *)*((_QWORD *)a3 + 2);
                      v95 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v96 = *v94++;
                        *v95++ = v96 * (double)a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v13 = (double *)*((_QWORD *)a3 + 2);
                    v14 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v15 = *v13++;
                      *v14++ = v15 * (double)a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v160 = (char *)*((_QWORD *)a3 + 2);
                      v161 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v162 = *v160++;
                        *v161++ = v162 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v79 = (char *)*((_QWORD *)a3 + 2);
                    v80 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v81 = *v79++;
                      *v80++ = v81 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v163 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v164 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v165 = *v163++;
                        *v164++ = a2 * v165;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v82 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v83 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v84 = *v82++;
                      *v83++ = a2 * v84;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v112 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v113 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v114 = *v112++;
                        *v113++ = (double)a2 * (double)v114;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v31 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v32 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v33 = *v31++;
                      *v32++ = (double)a2 * (double)v33;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v166 = (char *)*((_QWORD *)a3 + 2);
                      v167 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v168 = *v166;
                        v166 += 8;
                        *v167++ = v168 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v85 = (char *)*((_QWORD *)a3 + 2);
                    v86 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v87 = *v85;
                      v85 += 8;
                      *v86++ = v87 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v169 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v170 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v171 = *v169++;
                        *v170++ = v171 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v88 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v89 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v90 = *v88++;
                      *v89++ = v90 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v115 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v116 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v117 = *v115++;
                        *v116++ = (double)a2 * (double)v117;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v34 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v35 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v36 = *v34++;
                      *v35++ = (double)a2 * (double)v36;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v130 = (double *)*((_QWORD *)a3 + 2);
                      v131 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v132 = *v130++;
                        *v131++ = (int)v132 * a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v49 = (double *)*((_QWORD *)a3 + 2);
                    v50 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v51 = *v49++;
                      *v50++ = (int)v51 * a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v133 = (double *)*((_QWORD *)a3 + 2);
                      v134 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v135 = *v133++;
                        *v134++ = a2 * (unint64_t)v135;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v52 = (double *)*((_QWORD *)a3 + 2);
                    v53 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v54 = *v52++;
                      *v53++ = a2 * (unint64_t)v54;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v97 = (double *)*((_QWORD *)a3 + 2);
                      v98 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v99 = *v97++;
                        *v98++ = v99 * (double)a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v16 = (double *)*((_QWORD *)a3 + 2);
                    v17 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v18 = *v16++;
                      *v17++ = v18 * (double)a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v136 = (char *)*((_QWORD *)a3 + 2);
                      v137 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v138 = *v136++;
                        *v137++ = v138 * (int)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v55 = (char *)*((_QWORD *)a3 + 2);
                    v56 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v57 = *v55++;
                      *v56++ = v57 * (int)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v139 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v140 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v141 = *v139++;
                        *v140++ = v141 * (unint64_t)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v58 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v59 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v60 = *v58++;
                      *v59++ = v60 * (unint64_t)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v100 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v101 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v102 = *v100++;
                        *v101++ = *(double *)&a2 * (double)v102;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v19 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v20 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v21 = *v19++;
                      *v20++ = *(double *)&a2 * (double)v21;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v142 = (char *)*((_QWORD *)a3 + 2);
                      v143 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v144 = *v142;
                        v142 += 8;
                        *v143++ = v144 * (int)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v61 = (char *)*((_QWORD *)a3 + 2);
                    v62 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v63 = *v61;
                      v61 += 8;
                      *v62++ = v63 * (int)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v145 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v146 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v147 = *v145++;
                        *v146++ = v147 * (unint64_t)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v64 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v65 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v66 = *v64++;
                      *v65++ = v66 * (unint64_t)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v103 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v104 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v105 = *v103++;
                        *v104++ = *(double *)&a2 * (double)v105;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v22 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v23 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v24 = *v22++;
                      *v23++ = *(double *)&a2 * (double)v24;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v118 = (double *)*((_QWORD *)a3 + 2);
                      v119 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v120 = *v118++;
                        *v119++ = (int)v120 * (int)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v37 = (double *)*((_QWORD *)a3 + 2);
                    v38 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v39 = *v37++;
                      *v38++ = (int)v39 * (int)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v121 = (double *)*((_QWORD *)a3 + 2);
                      v122 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v123 = *v121++;
                        *v122++ = (unint64_t)v123 * (unint64_t)*(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v40 = (double *)*((_QWORD *)a3 + 2);
                    v41 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v42 = *v40++;
                      *v41++ = (unint64_t)v42 * (unint64_t)*(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v91 = (double *)*((_QWORD *)a3 + 2);
                      v92 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v93 = *v91++;
                        *v92++ = v93 * *(double *)&a2;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v10 = (double *)*((_QWORD *)a3 + 2);
                    v11 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v12 = *v10++;
                      *v11++ = v12 * *(double *)&a2;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return a4;
    }
  }
  return result;
}

int *sub_1023C(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4;
  int *v6;

  v4 = a2;
  v6 = (int *)sub_CFF0(a1, a2);
  return agxps_timeseries_mul_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_mul_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double v11;
  unsigned __int8 *v13;
  double *v14;
  unsigned int v15;
  unint64_t *v16;
  double *v17;
  unint64_t v18;
  double *v19;
  double *v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  unsigned __int8 *v25;
  double *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  double *v29;
  unsigned int v30;
  unint64_t *v31;
  double *v32;
  unint64_t v33;
  unint64_t *v34;
  double *v35;
  unint64_t v36;
  double *v37;
  _BYTE *v38;
  double v39;
  double *v40;
  _QWORD *v41;
  double v42;
  char *v43;
  _BYTE *v44;
  char v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  unsigned int v48;
  char *v49;
  _BYTE *v50;
  char v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  double *v55;
  _BYTE *v56;
  double v57;
  double *v58;
  _QWORD *v59;
  double v60;
  double *v61;
  _BYTE *v62;
  double v63;
  double *v64;
  _QWORD *v65;
  double v66;
  char *v67;
  _BYTE *v68;
  char v69;
  unsigned __int8 *v70;
  _QWORD *v71;
  unsigned int v72;
  char *v73;
  _BYTE *v74;
  char v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  unsigned int v78;
  char *v79;
  _BYTE *v80;
  char v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  _BYTE *v86;
  char v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  double *v91;
  double *v92;
  double v93;
  unsigned __int8 *v94;
  double *v95;
  unsigned int v96;
  unint64_t *v97;
  double *v98;
  unint64_t v99;
  double *v100;
  double *v101;
  double v102;
  double *v103;
  double *v104;
  double v105;
  unsigned __int8 *v106;
  double *v107;
  unsigned int v108;
  unsigned __int8 *v109;
  double *v110;
  unsigned int v111;
  unint64_t *v112;
  double *v113;
  unint64_t v114;
  unint64_t *v115;
  double *v116;
  unint64_t v117;
  double *v118;
  _BYTE *v119;
  double v120;
  double *v121;
  _QWORD *v122;
  double v123;
  char *v124;
  _BYTE *v125;
  char v126;
  unsigned __int8 *v127;
  _QWORD *v128;
  unsigned int v129;
  char *v130;
  _BYTE *v131;
  char v132;
  uint64_t *v133;
  _QWORD *v134;
  uint64_t v135;
  double *v136;
  _BYTE *v137;
  double v138;
  double *v139;
  _QWORD *v140;
  double v141;
  double *v142;
  _BYTE *v143;
  double v144;
  double *v145;
  _QWORD *v146;
  double v147;
  char *v148;
  _BYTE *v149;
  char v150;
  unsigned __int8 *v151;
  _QWORD *v152;
  unsigned int v153;
  char *v154;
  _BYTE *v155;
  char v156;
  unsigned __int8 *v157;
  _QWORD *v158;
  unsigned int v159;
  char *v160;
  _BYTE *v161;
  char v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  char *v166;
  _BYTE *v167;
  char v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;

  v5 = 0;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32))
      return 0;
    v6 = *((_QWORD *)a1 + 1);
    if (v6 != *((_QWORD *)a4 + 1))
    {
      return 0;
    }
    else
    {
      v7 = *a1;
      v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v148 = (char *)*((_QWORD *)a1 + 2);
                    v149 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v150 = *v148++;
                      *v149++ = v150 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v67 = (char *)*((_QWORD *)a1 + 2);
                  v68 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v69 = *v67++;
                    *v68++ = v69 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v151 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v152 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v153 = *v151++;
                      *v152++ = a3 * (unint64_t)v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v70 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v71 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v72 = *v70++;
                    *v71++ = a3 * (unint64_t)v72;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v106 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v107 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v108 = *v106++;
                      *v107++ = (double)a3 * (double)v108;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v25 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v26 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v27 = *v25++;
                    *v26++ = (double)a3 * (double)v27;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v154 = (char *)*((_QWORD *)a1 + 2);
                    v155 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v156 = *v154++;
                      *v155++ = v156 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v73 = (char *)*((_QWORD *)a1 + 2);
                  v74 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v75 = *v73++;
                    *v74++ = v75 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v157 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v158 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v159 = *v157++;
                      *v158++ = a3 * v159;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v76 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v77 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v78 = *v76++;
                    *v77++ = a3 * v78;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v109 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v110 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v111 = *v109++;
                      *v110++ = (double)a3 * (double)v111;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v28 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v29 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v30 = *v28++;
                    *v29++ = (double)a3 * (double)v30;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v124 = (char *)*((_QWORD *)a1 + 2);
                    v125 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v126 = *v124++;
                      *v125++ = v126 * (int)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v43 = (char *)*((_QWORD *)a1 + 2);
                  v44 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v45 = *v43++;
                    *v44++ = v45 * (int)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v127 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v128 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v129 = *v127++;
                      *v128++ = v129 * (unint64_t)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v46 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v47 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v48 = *v46++;
                    *v47++ = v48 * (unint64_t)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v94 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v95 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v96 = *v94++;
                      *v95++ = *(double *)&a3 * (double)v96;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v13 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v14 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v15 = *v13++;
                    *v14++ = *(double *)&a3 * (double)v15;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v160 = (char *)*((_QWORD *)a1 + 2);
                    v161 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v162 = *v160;
                      v160 += 8;
                      *v161++ = v162 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v79 = (char *)*((_QWORD *)a1 + 2);
                  v80 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v81 = *v79;
                    v79 += 8;
                    *v80++ = v81 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v163 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v164 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v165 = *v163++;
                      *v164++ = v165 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v82 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v83 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v84 = *v82++;
                    *v83++ = v84 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v112 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v113 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v114 = *v112++;
                      *v113++ = (double)a3 * (double)v114;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v31 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v32 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v33 = *v31++;
                    *v32++ = (double)a3 * (double)v33;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v166 = (char *)*((_QWORD *)a1 + 2);
                    v167 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v168 = *v166;
                      v166 += 8;
                      *v167++ = v168 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v85 = (char *)*((_QWORD *)a1 + 2);
                  v86 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v87 = *v85;
                    v85 += 8;
                    *v86++ = v87 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v169 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v170 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v171 = *v169++;
                      *v170++ = v171 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v88 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v89 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v90 = *v88++;
                    *v89++ = v90 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v115 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v116 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v117 = *v115++;
                      *v116++ = (double)a3 * (double)v117;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v34 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v35 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v36 = *v34++;
                    *v35++ = (double)a3 * (double)v36;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v130 = (char *)*((_QWORD *)a1 + 2);
                    v131 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v132 = *v130;
                      v130 += 8;
                      *v131++ = v132 * (int)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v49 = (char *)*((_QWORD *)a1 + 2);
                  v50 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v51 = *v49;
                    v49 += 8;
                    *v50++ = v51 * (int)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v133 = (uint64_t *)*((_QWORD *)a1 + 2);
                    v134 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v135 = *v133++;
                      *v134++ = v135 * (unint64_t)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v52 = (uint64_t *)*((_QWORD *)a1 + 2);
                  v53 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v54 = *v52++;
                    *v53++ = v54 * (unint64_t)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v97 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v98 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v99 = *v97++;
                      *v98++ = *(double *)&a3 * (double)v99;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v16 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v17 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v18 = *v16++;
                    *v17++ = *(double *)&a3 * (double)v18;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v136 = (double *)*((_QWORD *)a1 + 2);
                    v137 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v138 = *v136++;
                      *v137++ = (int)v138 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v55 = (double *)*((_QWORD *)a1 + 2);
                  v56 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v57 = *v55++;
                    *v56++ = (int)v57 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v139 = (double *)*((_QWORD *)a1 + 2);
                    v140 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v141 = *v139++;
                      *v140++ = a3 * (unint64_t)v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v58 = (double *)*((_QWORD *)a1 + 2);
                  v59 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v60 = *v58++;
                    *v59++ = a3 * (unint64_t)v60;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v100 = (double *)*((_QWORD *)a1 + 2);
                    v101 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v102 = *v100++;
                      *v101++ = v102 * (double)a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v19 = (double *)*((_QWORD *)a1 + 2);
                  v20 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v21 = *v19++;
                    *v20++ = v21 * (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v142 = (double *)*((_QWORD *)a1 + 2);
                    v143 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v144 = *v142++;
                      *v143++ = (int)v144 * a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v61 = (double *)*((_QWORD *)a1 + 2);
                  v62 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v63 = *v61++;
                    *v62++ = (int)v63 * a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v145 = (double *)*((_QWORD *)a1 + 2);
                    v146 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v147 = *v145++;
                      *v146++ = a3 * (unint64_t)v147;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v64 = (double *)*((_QWORD *)a1 + 2);
                  v65 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v66 = *v64++;
                    *v65++ = a3 * (unint64_t)v66;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v103 = (double *)*((_QWORD *)a1 + 2);
                    v104 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v105 = *v103++;
                      *v104++ = v105 * (double)a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v22 = (double *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v24 = *v22++;
                    *v23++ = v24 * (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v118 = (double *)*((_QWORD *)a1 + 2);
                    v119 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v120 = *v118++;
                      *v119++ = (int)v120 * (int)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v37 = (double *)*((_QWORD *)a1 + 2);
                  v38 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v39 = *v37++;
                    *v38++ = (int)v39 * (int)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v121 = (double *)*((_QWORD *)a1 + 2);
                    v122 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v123 = *v121++;
                      *v122++ = (unint64_t)v123 * (unint64_t)*(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v40 = (double *)*((_QWORD *)a1 + 2);
                  v41 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v42 = *v40++;
                    *v41++ = (unint64_t)v42 * (unint64_t)*(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v91 = (double *)*((_QWORD *)a1 + 2);
                    v92 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v93 = *v91++;
                      *v92++ = v93 * *(double *)&a3;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v11 = *v9++;
                    *v10++ = v11 * *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_10D90(unsigned int *a1, unsigned int *a2)
{
  int *v4;

  v4 = (int *)sub_CECC(a1, a2);
  return agxps_timeseries_div_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_div_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  unsigned __int8 *v16;
  double *v17;
  double *v18;
  unsigned int v19;
  double v20;
  double v21;
  unint64_t *v22;
  double *v23;
  double *v24;
  unint64_t v25;
  double v26;
  double v27;
  double *v28;
  unsigned __int8 *v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  unint64_t *v34;
  double *v35;
  double v36;
  double v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  double *v41;
  unsigned int v42;
  double v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unint64_t *v46;
  double *v47;
  unsigned int v48;
  double v49;
  unint64_t v50;
  unint64_t *v51;
  unsigned __int8 *v52;
  double *v53;
  unint64_t v54;
  double v55;
  unint64_t *v56;
  unint64_t *v57;
  double *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double *v62;
  double *v63;
  _BYTE *v64;
  unsigned int v65;
  unsigned int v66;
  double *v67;
  double *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  double *v73;
  _BYTE *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int8 *v77;
  double *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  double *v83;
  _BYTE *v84;
  unsigned int v85;
  unsigned int v86;
  _QWORD *v87;
  double *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  double *v92;
  unsigned __int8 *v93;
  _BYTE *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  double *v98;
  unsigned __int8 *v99;
  unint64_t *v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  double *v104;
  unsigned __int8 *v105;
  _BYTE *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  double *v110;
  uint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  _BYTE *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  uint64_t *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  _BYTE *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned __int8 *v134;
  unint64_t *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  _BYTE *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  _QWORD *v146;
  unsigned __int8 *v147;
  uint64_t *v148;
  unint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  _BYTE *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  _QWORD *v158;
  unint64_t *v159;
  uint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  double *v164;
  double *v165;
  double *v166;
  double v167;
  double v168;
  double v169;
  double v170;
  unsigned __int8 *v171;
  double *v172;
  double *v173;
  unsigned int v174;
  double v175;
  double v176;
  double v177;
  unint64_t *v178;
  double *v179;
  double *v180;
  unint64_t v181;
  double v182;
  double v183;
  double v184;
  double *v185;
  unsigned __int8 *v186;
  double *v187;
  double v188;
  double v189;
  double v190;
  double *v191;
  unint64_t *v192;
  double *v193;
  double v194;
  double v195;
  unint64_t v196;
  double v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  double *v200;
  unsigned int v201;
  double v202;
  unsigned int v203;
  double v204;
  unsigned __int8 *v205;
  unint64_t *v206;
  double *v207;
  unsigned int v208;
  double v209;
  unint64_t v210;
  double v211;
  unint64_t *v212;
  unsigned __int8 *v213;
  double *v214;
  unint64_t v215;
  double v216;
  double v217;
  unint64_t *v218;
  unint64_t *v219;
  double *v220;
  unint64_t v221;
  double v222;
  unint64_t v223;
  double v224;
  double *v225;
  double *v226;
  _BYTE *v227;
  unsigned int v228;
  double *v229;
  double *v230;
  unint64_t *v231;
  unint64_t v232;
  unsigned __int8 *v233;
  double *v234;
  _BYTE *v235;
  unsigned int v236;
  unsigned __int8 *v237;
  double *v238;
  unint64_t *v239;
  unint64_t v240;
  unsigned __int8 *v241;
  double *v242;
  _BYTE *v243;
  unsigned int v244;
  _QWORD *v245;
  double *v246;
  unint64_t *v247;
  unint64_t v248;
  double *v249;
  unsigned __int8 *v250;
  _BYTE *v251;
  unsigned int v252;
  unsigned int v253;
  double *v254;
  unsigned __int8 *v255;
  unint64_t *v256;
  unint64_t v257;
  unsigned int v258;
  double *v259;
  unsigned __int8 *v260;
  _BYTE *v261;
  unsigned int v262;
  unsigned int v263;
  double *v264;
  unint64_t *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  _BYTE *v271;
  unsigned int v272;
  unsigned int v273;
  unsigned __int8 *v274;
  unsigned __int8 *v275;
  _QWORD *v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  _BYTE *v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 *v285;
  unint64_t *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  _BYTE *v292;
  unsigned int v293;
  unsigned int v294;
  _QWORD *v295;
  unsigned __int8 *v296;
  unint64_t *v297;
  unint64_t v298;
  unsigned int v299;
  unsigned __int8 *v300;
  unsigned __int8 *v301;
  _BYTE *v302;
  unsigned int v303;
  unsigned int v304;
  _QWORD *v305;
  unint64_t *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;

  v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (v5 = *((_QWORD *)a1 + 1), v5 == *((_QWORD *)a2 + 1)) && v5 == *((_QWORD *)a3 + 1))
    {
      v6 = *a1;
      v7 = *a2;
      v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v269 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v270 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v271 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v273 = *v270++;
                      v272 = v273;
                      if (v273)
                        v272 = *v269 / v272;
                      *v271++ = v272;
                      ++v269;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v116 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v117 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v118 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v120 = *v117++;
                    v119 = v120;
                    if (v120)
                      v121 = *v116 / v119;
                    else
                      LOBYTE(v121) = -1;
                    *v118++ = v121;
                    ++v116;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v274 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v275 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v276 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v278 = *v275++;
                      v277 = v278;
                      if (v278)
                        v279 = *v274 / v277;
                      else
                        v279 = 0;
                      *v276++ = v279;
                      ++v274;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v122 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v123 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v124 = (uint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v126 = *v123++;
                    v125 = v126;
                    if (v126)
                      v127 = *v122 / v125;
                    else
                      v127 = -1;
                    *v124++ = v127;
                    ++v122;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v198 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v199 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v200 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v201 = *v198++;
                      v202 = (double)v201;
                      v203 = *v199++;
                      v204 = v202 / (double)v203;
                      if (!v203)
                        v204 = 0.0;
                      *v200++ = v204;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v39 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v40 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v41 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v42 = *v39++;
                    v43 = (double)v42;
                    v44 = *v40++;
                    *v41++ = v43 / (double)v44;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v280 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v281 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v282 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v284 = *v281;
                      v281 += 8;
                      v283 = v284;
                      if (v284)
                        v283 = *v280 / v283;
                      *v282++ = v283;
                      ++v280;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v128 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v129 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v130 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v132 = *v129;
                    v129 += 8;
                    v131 = v132;
                    if (v132)
                      v133 = *v128 / v131;
                    else
                      LOBYTE(v133) = -1;
                    *v130++ = v133;
                    ++v128;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v285 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v286 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v287 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v289 = *v286++;
                      v288 = v289;
                      if (v289)
                        v288 = *v285 / v288;
                      *v287++ = v288;
                      ++v285;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v134 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v135 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v136 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v138 = *v135++;
                    v137 = v138;
                    if (v138)
                      v139 = *v134 / v137;
                    else
                      v139 = -1;
                    *v136++ = v139;
                    ++v134;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v205 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v206 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v207 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v208 = *v205++;
                      v209 = (double)v208;
                      v210 = *v206++;
                      v211 = v209 / (double)v210;
                      if (!v210)
                        v211 = 0.0;
                      *v207++ = v211;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v46 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v47 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v48 = *v45++;
                    v49 = (double)v48;
                    v50 = *v46++;
                    *v47++ = v49 / (double)v50;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v233 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v234 = (double *)*((_QWORD *)a2 + 2);
                    v235 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v236 = (int)*v234;
                      if (v236)
                        v236 = *v233 / v236;
                      *v235++ = v236;
                      ++v233;
                      ++v234;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v72 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v73 = (double *)*((_QWORD *)a2 + 2);
                  v74 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v75 = (int)*v73;
                    if (v75)
                      v76 = *v72 / v75;
                    else
                      LOBYTE(v76) = -1;
                    *v74++ = v76;
                    ++v72;
                    ++v73;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v238 = (double *)*((_QWORD *)a2 + 2);
                    v239 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v240 = (unint64_t)*v238;
                      if (v240)
                        v240 = *v237 / v240;
                      *v239++ = v240;
                      ++v237;
                      ++v238;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v77 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v78 = (double *)*((_QWORD *)a2 + 2);
                  v79 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v80 = (unint64_t)*v78;
                    if (v80)
                      v81 = *v77 / v80;
                    else
                      v81 = -1;
                    *v79++ = v81;
                    ++v77;
                    ++v78;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v171 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v172 = (double *)*((_QWORD *)a2 + 2);
                    v173 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v174 = *v171++;
                      v175 = (double)v174;
                      v176 = *v172++;
                      v177 = v175 / v176;
                      if (v176 == 0.0)
                        v177 = 0.0;
                      *v173++ = v177;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v16 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v17 = (double *)*((_QWORD *)a2 + 2);
                  v18 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v19 = *v16++;
                    v20 = (double)v19;
                    v21 = *v17++;
                    *v18++ = v20 / v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v290 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v291 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v292 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v294 = *v291++;
                      v293 = v294;
                      if (v294)
                        v293 = *v290 / v293;
                      *v292++ = v293;
                      v290 += 8;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v140 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v141 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v142 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v144 = *v141++;
                    v143 = v144;
                    if (v144)
                      v145 = *v140 / v143;
                    else
                      LOBYTE(v145) = -1;
                    *v142++ = v145;
                    v140 += 8;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v295 = (_QWORD *)*((_QWORD *)a1 + 2);
                    v296 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v297 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v299 = *v296++;
                      v298 = v299;
                      if (v299)
                        v298 = *v295 / v298;
                      *v297++ = v298;
                      ++v295;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v146 = (_QWORD *)*((_QWORD *)a1 + 2);
                  v147 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v148 = (uint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v150 = *v147++;
                    v149 = v150;
                    if (v150)
                      v151 = *v146 / v149;
                    else
                      v151 = -1;
                    *v148++ = v151;
                    ++v146;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v212 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v213 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v214 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v215 = *v212++;
                      v216 = (double)v215;
                      LODWORD(v215) = *v213++;
                      v217 = v216 / (double)v215;
                      if (!(_DWORD)v215)
                        v217 = 0.0;
                      *v214++ = v217;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v51 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v52 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v53 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v54 = *v51++;
                    v55 = (double)v54;
                    LODWORD(v54) = *v52++;
                    *v53++ = v55 / (double)v54;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v300 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v301 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v302 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v304 = *v301;
                      v301 += 8;
                      v303 = v304;
                      if (v304)
                        v303 = *v300 / v303;
                      *v302++ = v303;
                      v300 += 8;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v152 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v153 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v154 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v156 = *v153;
                    v153 += 8;
                    v155 = v156;
                    if (v156)
                      v157 = *v152 / v155;
                    else
                      LOBYTE(v157) = -1;
                    *v154++ = v157;
                    v152 += 8;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v305 = (_QWORD *)*((_QWORD *)a1 + 2);
                    v306 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v307 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v309 = *v306++;
                      v308 = v309;
                      if (v309)
                        v308 = *v305 / v308;
                      *v307++ = v308;
                      ++v305;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v158 = (_QWORD *)*((_QWORD *)a1 + 2);
                  v159 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v160 = (uint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v162 = *v159++;
                    v161 = v162;
                    if (v162)
                      v163 = *v158 / v161;
                    else
                      v163 = -1;
                    *v160++ = v163;
                    ++v158;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v218 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v219 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v220 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v221 = *v218++;
                      v222 = (double)v221;
                      v223 = *v219++;
                      v224 = v222 / (double)v223;
                      if (!v223)
                        v224 = 0.0;
                      *v220++ = v224;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v56 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v57 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v58 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v59 = *v56++;
                    v60 = v59;
                    v61 = *v57++;
                    *v58++ = (double)v60 / (double)v61;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v241 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v242 = (double *)*((_QWORD *)a2 + 2);
                    v243 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v244 = (int)*v242;
                      if (v244)
                        v244 = *v241 / v244;
                      *v243++ = v244;
                      v241 += 8;
                      ++v242;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v82 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v83 = (double *)*((_QWORD *)a2 + 2);
                  v84 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v85 = (int)*v83;
                    if (v85)
                      v86 = *v82 / v85;
                    else
                      LOBYTE(v86) = -1;
                    *v84++ = v86;
                    v82 += 8;
                    ++v83;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v245 = (_QWORD *)*((_QWORD *)a1 + 2);
                    v246 = (double *)*((_QWORD *)a2 + 2);
                    v247 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v248 = (unint64_t)*v246;
                      if (v248)
                        v248 = *v245 / v248;
                      *v247++ = v248;
                      ++v245;
                      ++v246;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v87 = (_QWORD *)*((_QWORD *)a1 + 2);
                  v88 = (double *)*((_QWORD *)a2 + 2);
                  v89 = (uint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v90 = (unint64_t)*v88;
                    if (v90)
                      v91 = *v87 / v90;
                    else
                      v91 = -1;
                    *v89++ = v91;
                    ++v87;
                    ++v88;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v178 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v179 = (double *)*((_QWORD *)a2 + 2);
                    v180 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v181 = *v178++;
                      v182 = (double)v181;
                      v183 = *v179++;
                      v184 = v182 / v183;
                      if (v183 == 0.0)
                        v184 = 0.0;
                      *v180++ = v184;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v22 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a2 + 2);
                  v24 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v25 = *v22++;
                    v26 = (double)v25;
                    v27 = *v23++;
                    *v24++ = v26 / v27;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v249 = (double *)*((_QWORD *)a1 + 2);
                    v250 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v251 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v253 = *v250++;
                      v252 = v253;
                      if (v253)
                        v252 = (int)*v249 / v252;
                      *v251++ = v252;
                      ++v249;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v92 = (double *)*((_QWORD *)a1 + 2);
                  v93 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v94 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v96 = *v93++;
                    v95 = v96;
                    if (v96)
                      v97 = (int)*v92 / v95;
                    else
                      LOBYTE(v97) = -1;
                    *v94++ = v97;
                    ++v92;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v254 = (double *)*((_QWORD *)a1 + 2);
                    v255 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v256 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v258 = *v255++;
                      v257 = v258;
                      if (v258)
                        v257 = (unint64_t)*v254 / v257;
                      *v256++ = v257;
                      ++v254;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v98 = (double *)*((_QWORD *)a1 + 2);
                  v99 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v100 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v102 = *v99++;
                    v101 = v102;
                    if (v102)
                      v103 = (unint64_t)*v98 / v101;
                    else
                      v103 = -1;
                    *v100++ = v103;
                    ++v98;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v185 = (double *)*((_QWORD *)a1 + 2);
                    v186 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v187 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v188 = *v185++;
                      v189 = v188;
                      LODWORD(v188) = *v186++;
                      v190 = v189 / (double)LODWORD(v188);
                      if (!LODWORD(v188))
                        v190 = 0.0;
                      *v187++ = v190;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v28 = (double *)*((_QWORD *)a1 + 2);
                  v29 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v30 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v31 = *v28++;
                    v32 = v31;
                    LODWORD(v31) = *v29++;
                    *v30++ = v32 / (double)LODWORD(v31);
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v259 = (double *)*((_QWORD *)a1 + 2);
                    v260 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v261 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v263 = *v260;
                      v260 += 8;
                      v262 = v263;
                      if (v263)
                        v262 = (int)*v259 / v262;
                      *v261++ = v262;
                      ++v259;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v104 = (double *)*((_QWORD *)a1 + 2);
                  v105 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v106 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v108 = *v105;
                    v105 += 8;
                    v107 = v108;
                    if (v108)
                      v109 = (int)*v104 / v107;
                    else
                      LOBYTE(v109) = -1;
                    *v106++ = v109;
                    ++v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v264 = (double *)*((_QWORD *)a1 + 2);
                    v265 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v266 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v268 = *v265++;
                      v267 = v268;
                      if (v268)
                        v267 = (unint64_t)*v264 / v267;
                      *v266++ = v267;
                      ++v264;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v110 = (double *)*((_QWORD *)a1 + 2);
                  v111 = (uint64_t *)*((_QWORD *)a2 + 2);
                  v112 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v114 = *v111++;
                    v113 = v114;
                    if (v114)
                      v115 = (unint64_t)*v110 / v113;
                    else
                      v115 = -1;
                    *v112++ = v115;
                    ++v110;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v191 = (double *)*((_QWORD *)a1 + 2);
                    v192 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v193 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v194 = *v191++;
                      v195 = v194;
                      v196 = *v192++;
                      v197 = v195 / (double)v196;
                      if (!v196)
                        v197 = 0.0;
                      *v193++ = v197;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v33 = (double *)*((_QWORD *)a1 + 2);
                  v34 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v35 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v36 = *v33++;
                    v37 = v36;
                    v38 = *v34++;
                    *v35++ = v37 / (double)v38;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v225 = (double *)*((_QWORD *)a1 + 2);
                    v226 = (double *)*((_QWORD *)a2 + 2);
                    v227 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v228 = (int)*v226;
                      if (v228)
                        v228 = (int)*v225 / v228;
                      *v227++ = v228;
                      ++v225;
                      ++v226;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v62 = (double *)*((_QWORD *)a1 + 2);
                  v63 = (double *)*((_QWORD *)a2 + 2);
                  v64 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v65 = (int)*v63;
                    if (v65)
                      v66 = (int)*v62 / v65;
                    else
                      LOBYTE(v66) = -1;
                    *v64++ = v66;
                    ++v62;
                    ++v63;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v229 = (double *)*((_QWORD *)a1 + 2);
                    v230 = (double *)*((_QWORD *)a2 + 2);
                    v231 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v232 = (unint64_t)*v230;
                      if (v232)
                        v232 = (unint64_t)*v229 / v232;
                      *v231++ = v232;
                      ++v229;
                      ++v230;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v67 = (double *)*((_QWORD *)a1 + 2);
                  v68 = (double *)*((_QWORD *)a2 + 2);
                  v69 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v70 = (unint64_t)*v68;
                    if (v70)
                      v71 = (unint64_t)*v67 / v70;
                    else
                      v71 = -1;
                    *v69++ = v71;
                    ++v67;
                    ++v68;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v164 = (double *)*((_QWORD *)a1 + 2);
                    v165 = (double *)*((_QWORD *)a2 + 2);
                    v166 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v167 = *v164++;
                      v168 = v167;
                      v169 = *v165++;
                      v170 = v168 / v169;
                      if (v169 == 0.0)
                        v170 = 0.0;
                      *v166++ = v170;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a2 + 2);
                  v11 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v12 = *v9++;
                    v13 = v12;
                    v14 = *v10++;
                    *v11++ = v13 / v14;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_11CB8(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4;
  int *v6;

  v4 = a2;
  v6 = (int *)sub_CFF0(a1, a2);
  return agxps_timeseries_div_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_div_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double v11;
  unsigned __int8 *v13;
  double *v14;
  unsigned int v15;
  unint64_t *v16;
  double *v17;
  unint64_t v18;
  double *v19;
  double *v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  unsigned __int8 *v25;
  double *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  double *v29;
  unsigned int v30;
  unint64_t *v31;
  double *v32;
  unint64_t v33;
  unint64_t *v34;
  double *v35;
  unint64_t v36;
  double *v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  double *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  _BYTE *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  double *v61;
  _BYTE *v62;
  unsigned int v63;
  double *v64;
  unint64_t *v65;
  unint64_t v66;
  double *v67;
  _BYTE *v68;
  unsigned int v69;
  double *v70;
  unint64_t *v71;
  unint64_t v72;
  _BYTE *v73;
  char *v74;
  char v75;
  unsigned __int8 *v76;
  uint64_t *v77;
  uint64_t v78;
  _BYTE *v79;
  char *v80;
  char v81;
  unsigned __int8 *v82;
  unint64_t *v83;
  unint64_t v84;
  _BYTE *v85;
  char *v86;
  char v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  _BYTE *v91;
  char *v92;
  char v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  double *v97;
  double *v98;
  double v99;
  double v100;
  unsigned __int8 *v101;
  double *v102;
  unsigned int v103;
  double v104;
  unint64_t *v105;
  double *v106;
  unint64_t v107;
  double v108;
  double *v109;
  double *v110;
  double v111;
  double v112;
  double *v113;
  double *v114;
  double v115;
  double v116;
  unsigned __int8 *v117;
  double *v118;
  unsigned int v119;
  double v120;
  unsigned __int8 *v121;
  double *v122;
  unsigned int v123;
  double v124;
  unint64_t *v125;
  double *v126;
  unint64_t v127;
  double v128;
  unint64_t *v129;
  double *v130;
  unint64_t v131;
  double v132;
  double *v133;
  _BYTE *v134;
  unsigned int v135;
  unsigned int v136;
  double *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unsigned __int8 *v141;
  _BYTE *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned __int8 *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unsigned __int8 *v149;
  _BYTE *v150;
  unsigned int v151;
  unsigned int v152;
  _QWORD *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  double *v157;
  _BYTE *v158;
  unsigned int v159;
  double *v160;
  unint64_t *v161;
  unint64_t v162;
  double *v163;
  _BYTE *v164;
  unsigned int v165;
  double *v166;
  unint64_t *v167;
  unint64_t v168;
  _BYTE *v169;
  _BYTE *v170;
  char v171;
  unsigned __int8 *v172;
  _QWORD *v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  char v177;
  unsigned __int8 *v178;
  unint64_t *v179;
  unint64_t v180;
  _BYTE *v181;
  _BYTE *v182;
  char v183;
  _QWORD *v184;
  unint64_t *v185;
  unint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  char v189;
  _QWORD *v190;
  unint64_t *v191;
  unint64_t v192;

  v5 = 0;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32))
      return 0;
    v6 = *((_QWORD *)a1 + 1);
    if (v6 != *((_QWORD *)a4 + 1))
    {
      return 0;
    }
    else
    {
      v7 = *a1;
      v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v169 = (_BYTE *)*((_QWORD *)a1 + 2);
                    v170 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v171 = *v169 / a3;
                      else
                        v171 = 0;
                      *v170++ = v171;
                      ++v169;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v73 = (_BYTE *)*((_QWORD *)a1 + 2);
                  v74 = (char *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v75 = *v73 / a3;
                    else
                      v75 = -1;
                    *v74++ = v75;
                    ++v73;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v172 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v173 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v174 = *v172 / a3;
                      else
                        v174 = 0;
                      *v173++ = v174;
                      ++v172;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v76 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v77 = (uint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v78 = *v76 / a3;
                    else
                      v78 = -1;
                    *v77++ = v78;
                    ++v76;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v117 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v118 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v119 = *v117++;
                      v120 = (double)v119 / (double)a3;
                      if (!(_BYTE)a3)
                        v120 = 0.0;
                      *v118++ = v120;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v25 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v26 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v27 = *v25++;
                    *v26++ = (double)v27 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v175 = (_BYTE *)*((_QWORD *)a1 + 2);
                    v176 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v177 = *v175 / a3;
                      else
                        v177 = 0;
                      *v176++ = v177;
                      ++v175;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v79 = (_BYTE *)*((_QWORD *)a1 + 2);
                  v80 = (char *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v81 = *v79 / a3;
                    else
                      v81 = -1;
                    *v80++ = v81;
                    ++v79;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v178 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v179 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if (*(double *)&a3 == 0.0)
                        v180 = 0;
                      else
                        v180 = *v178 / a3;
                      *v179++ = v180;
                      ++v178;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v82 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v83 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if (*(double *)&a3 == 0.0)
                      v84 = -1;
                    else
                      v84 = *v82 / a3;
                    *v83++ = v84;
                    ++v82;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v121 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v122 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v123 = *v121++;
                      v124 = (double)v123 / (double)a3;
                      if (*(double *)&a3 == 0.0)
                        v124 = 0.0;
                      *v122++ = v124;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v28 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v29 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v30 = *v28++;
                    *v29++ = (double)v30 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v141 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v142 = (_BYTE *)*((_QWORD *)a4 + 2);
                    v143 = (int)*(double *)&a3;
                    do
                    {
                      if (v143)
                        v144 = *v141 / v143;
                      else
                        LOBYTE(v144) = 0;
                      *v142++ = v144;
                      ++v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v46 = (_BYTE *)*((_QWORD *)a4 + 2);
                  v47 = (int)*(double *)&a3;
                  do
                  {
                    if (v47)
                      v48 = *v45 / v47;
                    else
                      LOBYTE(v48) = -1;
                    *v46++ = v48;
                    ++v45;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v145 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v146 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v147 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v147)
                        v148 = *v145 / v147;
                      else
                        v148 = 0;
                      *v146++ = v148;
                      ++v145;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v49 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v50 = (unint64_t *)*((_QWORD *)a4 + 2);
                  v51 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v51)
                      v52 = *v49 / v51;
                    else
                      v52 = -1;
                    *v50++ = v52;
                    ++v49;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v101 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v102 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v103 = *v101++;
                      v104 = (double)v103 / *(double *)&a3;
                      if (*(double *)&a3 == 0.0)
                        v104 = 0.0;
                      *v102++ = v104;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v13 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v14 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v15 = *v13++;
                    *v14++ = (double)v15 / *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v181 = (_BYTE *)*((_QWORD *)a1 + 2);
                    v182 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v183 = *v181 / a3;
                      else
                        v183 = 0;
                      *v182++ = v183;
                      v181 += 8;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v85 = (_BYTE *)*((_QWORD *)a1 + 2);
                  v86 = (char *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v87 = *v85 / a3;
                    else
                      v87 = -1;
                    *v86++ = v87;
                    v85 += 8;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v184 = (_QWORD *)*((_QWORD *)a1 + 2);
                    v185 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v186 = *v184 / (unint64_t)a3;
                      else
                        v186 = 0;
                      *v185++ = v186;
                      ++v184;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v88 = (_QWORD *)*((_QWORD *)a1 + 2);
                  v89 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v90 = *v88 / (unint64_t)a3;
                    else
                      v90 = -1;
                    *v89++ = v90;
                    ++v88;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v125 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v126 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v127 = *v125++;
                      v128 = (double)v127 / (double)a3;
                      if (!(_BYTE)a3)
                        v128 = 0.0;
                      *v126++ = v128;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v31 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v32 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v33 = *v31++;
                    *v32++ = (double)v33 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v187 = (_BYTE *)*((_QWORD *)a1 + 2);
                    v188 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v189 = *v187 / a3;
                      else
                        v189 = 0;
                      *v188++ = v189;
                      v187 += 8;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v91 = (_BYTE *)*((_QWORD *)a1 + 2);
                  v92 = (char *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v93 = *v91 / a3;
                    else
                      v93 = -1;
                    *v92++ = v93;
                    v91 += 8;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v190 = (_QWORD *)*((_QWORD *)a1 + 2);
                    v191 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if (*(double *)&a3 == 0.0)
                        v192 = 0;
                      else
                        v192 = *v190 / a3;
                      *v191++ = v192;
                      ++v190;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v94 = (_QWORD *)*((_QWORD *)a1 + 2);
                  v95 = (uint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if (*(double *)&a3 == 0.0)
                      v96 = -1;
                    else
                      v96 = *v94 / a3;
                    *v95++ = v96;
                    ++v94;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v129 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v130 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v131 = *v129++;
                      v132 = (double)v131 / (double)a3;
                      if (*(double *)&a3 == 0.0)
                        v132 = 0.0;
                      *v130++ = v132;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v34 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v35 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v36 = *v34++;
                    *v35++ = (double)v36 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v149 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v150 = (_BYTE *)*((_QWORD *)a4 + 2);
                    v151 = (int)*(double *)&a3;
                    do
                    {
                      if (v151)
                        v152 = *v149 / v151;
                      else
                        LOBYTE(v152) = 0;
                      *v150++ = v152;
                      v149 += 8;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v53 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v54 = (_BYTE *)*((_QWORD *)a4 + 2);
                  v55 = (int)*(double *)&a3;
                  do
                  {
                    if (v55)
                      v56 = *v53 / v55;
                    else
                      LOBYTE(v56) = -1;
                    *v54++ = v56;
                    v53 += 8;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v153 = (_QWORD *)*((_QWORD *)a1 + 2);
                    v154 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v155 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v155)
                        v156 = *v153 / v155;
                      else
                        v156 = 0;
                      *v154++ = v156;
                      ++v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v57 = (_QWORD *)*((_QWORD *)a1 + 2);
                  v58 = (uint64_t *)*((_QWORD *)a4 + 2);
                  v59 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v59)
                      v60 = *v57 / v59;
                    else
                      v60 = -1;
                    *v58++ = v60;
                    ++v57;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v105 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v106 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v107 = *v105++;
                      v108 = (double)v107 / *(double *)&a3;
                      if (*(double *)&a3 == 0.0)
                        v108 = 0.0;
                      *v106++ = v108;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v16 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v17 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v18 = *v16++;
                    *v17++ = (double)v18 / *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v157 = (double *)*((_QWORD *)a1 + 2);
                    v158 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v159 = (int)*v157 / a3;
                      else
                        LOBYTE(v159) = 0;
                      *v158++ = v159;
                      ++v157;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v61 = (double *)*((_QWORD *)a1 + 2);
                  v62 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v63 = (int)*v61 / a3;
                    else
                      LOBYTE(v63) = -1;
                    *v62++ = v63;
                    ++v61;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v160 = (double *)*((_QWORD *)a1 + 2);
                    v161 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v162 = (unint64_t)*v160 / a3;
                      else
                        v162 = 0;
                      *v161++ = v162;
                      ++v160;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v64 = (double *)*((_QWORD *)a1 + 2);
                  v65 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v66 = (unint64_t)*v64 / a3;
                    else
                      v66 = -1;
                    *v65++ = v66;
                    ++v64;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v109 = (double *)*((_QWORD *)a1 + 2);
                    v110 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v111 = *v109++;
                      v112 = v111 / (double)a3;
                      if (!(_BYTE)a3)
                        v112 = 0.0;
                      *v110++ = v112;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v19 = (double *)*((_QWORD *)a1 + 2);
                  v20 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v21 = *v19++;
                    *v20++ = v21 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v163 = (double *)*((_QWORD *)a1 + 2);
                    v164 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if ((_BYTE)a3)
                        v165 = (int)*v163 / a3;
                      else
                        LOBYTE(v165) = 0;
                      *v164++ = v165;
                      ++v163;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v67 = (double *)*((_QWORD *)a1 + 2);
                  v68 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if ((_BYTE)a3)
                      v69 = (int)*v67 / a3;
                    else
                      LOBYTE(v69) = -1;
                    *v68++ = v69;
                    ++v67;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v166 = (double *)*((_QWORD *)a1 + 2);
                    v167 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      if (*(double *)&a3 == 0.0)
                        v168 = 0;
                      else
                        v168 = (unint64_t)*v166 / a3;
                      *v167++ = v168;
                      ++v166;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v70 = (double *)*((_QWORD *)a1 + 2);
                  v71 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    if (*(double *)&a3 == 0.0)
                      v72 = -1;
                    else
                      v72 = (unint64_t)*v70 / a3;
                    *v71++ = v72;
                    ++v70;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v113 = (double *)*((_QWORD *)a1 + 2);
                    v114 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v115 = *v113++;
                      v116 = v115 / (double)a3;
                      if (*(double *)&a3 == 0.0)
                        v116 = 0.0;
                      *v114++ = v116;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v22 = (double *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v24 = *v22++;
                    *v23++ = v24 / (double)a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v133 = (double *)*((_QWORD *)a1 + 2);
                    v134 = (_BYTE *)*((_QWORD *)a4 + 2);
                    v135 = (int)*(double *)&a3;
                    do
                    {
                      if (v135)
                        v136 = (int)*v133 / v135;
                      else
                        LOBYTE(v136) = 0;
                      *v134++ = v136;
                      ++v133;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v37 = (double *)*((_QWORD *)a1 + 2);
                  v38 = (_BYTE *)*((_QWORD *)a4 + 2);
                  v39 = (int)*(double *)&a3;
                  do
                  {
                    if (v39)
                      v40 = (int)*v37 / v39;
                    else
                      LOBYTE(v40) = -1;
                    *v38++ = v40;
                    ++v37;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v137 = (double *)*((_QWORD *)a1 + 2);
                    v138 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v139 = (unint64_t)*(double *)&a3;
                    do
                    {
                      if (v139)
                        v140 = (unint64_t)*v137 / v139;
                      else
                        v140 = 0;
                      *v138++ = v140;
                      ++v137;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v41 = (double *)*((_QWORD *)a1 + 2);
                  v42 = (unint64_t *)*((_QWORD *)a4 + 2);
                  v43 = (unint64_t)*(double *)&a3;
                  do
                  {
                    if (v43)
                      v44 = (unint64_t)*v41 / v43;
                    else
                      v44 = -1;
                    *v42++ = v44;
                    ++v41;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v97 = (double *)*((_QWORD *)a1 + 2);
                    v98 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v99 = *v97++;
                      v100 = v99 / *(double *)&a3;
                      if (*(double *)&a3 == 0.0)
                        v100 = 0.0;
                      *v98++ = v100;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v11 = *v9++;
                    *v10++ = v11 / *(double *)&a3;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_12B00(unsigned int *a1, unsigned int *a2)
{
  int *v4;

  v4 = (int *)sub_CECC(a1, a2);
  return agxps_timeseries_min_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_min_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned __int8 *v17;
  double *v18;
  double *v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  unint64_t *v24;
  double *v25;
  double *v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double *v32;
  unsigned __int8 *v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  unint64_t *v39;
  double *v40;
  double v41;
  double v42;
  unint64_t v43;
  double v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  double *v47;
  unsigned int v48;
  double v49;
  unsigned int v50;
  double v51;
  unsigned __int8 *v52;
  unint64_t *v53;
  double *v54;
  unsigned int v55;
  double v56;
  unint64_t v57;
  double v58;
  unint64_t *v59;
  unsigned __int8 *v60;
  double *v61;
  unint64_t v62;
  unint64_t v63;
  double v64;
  double v65;
  unint64_t *v66;
  unint64_t *v67;
  double *v68;
  unint64_t v69;
  double v70;
  unint64_t v71;
  double v72;
  double *v73;
  double *v74;
  _BYTE *v75;
  double v76;
  unsigned int v77;
  double v78;
  int v79;
  double *v80;
  double *v81;
  unint64_t *v82;
  double v83;
  unint64_t v84;
  double v85;
  unint64_t v86;
  unsigned __int8 *v87;
  double *v88;
  _BYTE *v89;
  unsigned int v90;
  unsigned int v91;
  double v92;
  int v93;
  unsigned __int8 *v94;
  double *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int v98;
  double v99;
  unint64_t v100;
  unsigned __int8 *v101;
  double *v102;
  _BYTE *v103;
  unsigned int v104;
  unsigned int v105;
  double v106;
  int v107;
  unint64_t *v108;
  double *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  double v113;
  unint64_t v114;
  double *v115;
  unsigned __int8 *v116;
  _BYTE *v117;
  double v118;
  unsigned int v119;
  char v120;
  double *v121;
  unsigned __int8 *v122;
  unint64_t *v123;
  double v124;
  unint64_t v125;
  unint64_t v126;
  double *v127;
  unsigned __int8 *v128;
  _BYTE *v129;
  double v130;
  unsigned int v131;
  char v132;
  double *v133;
  unint64_t *v134;
  unint64_t *v135;
  double v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  _BYTE *v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  unsigned int v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  _BYTE *v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  unsigned int v160;
  unsigned __int8 *v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t v164;
  unsigned int v165;
  unint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  _BYTE *v170;
  unsigned int v171;
  unsigned int v172;
  char v173;
  unsigned int v174;
  unint64_t *v175;
  unsigned __int8 *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  _BYTE *v183;
  unsigned int v184;
  unsigned int v185;
  char v186;
  unsigned int v187;
  unint64_t *v188;
  unint64_t *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  double *v195;
  double *v196;
  double *v197;
  double v198;
  double v199;
  double v200;
  double v201;
  unsigned __int8 *v202;
  double *v203;
  double *v204;
  unsigned int v205;
  double v206;
  double v207;
  double v208;
  unint64_t *v209;
  double *v210;
  double *v211;
  unint64_t v212;
  unint64_t v213;
  double v214;
  double v215;
  double v216;
  double *v217;
  unsigned __int8 *v218;
  double *v219;
  double v220;
  double v221;
  double v222;
  double *v223;
  unint64_t *v224;
  double *v225;
  double v226;
  double v227;
  unint64_t v228;
  double v229;
  unsigned __int8 *v230;
  unsigned __int8 *v231;
  double *v232;
  unsigned int v233;
  double v234;
  unsigned int v235;
  double v236;
  unsigned __int8 *v237;
  unint64_t *v238;
  double *v239;
  unsigned int v240;
  double v241;
  unint64_t v242;
  double v243;
  unint64_t *v244;
  unsigned __int8 *v245;
  double *v246;
  unint64_t v247;
  unint64_t v248;
  double v249;
  double v250;
  unint64_t *v251;
  unint64_t *v252;
  double *v253;
  unint64_t v254;
  double v255;
  unint64_t v256;
  double v257;
  double *v258;
  double *v259;
  _BYTE *v260;
  double v261;
  unsigned int v262;
  double v263;
  int v264;
  double *v265;
  double *v266;
  unint64_t *v267;
  double v268;
  unint64_t v269;
  double v270;
  unint64_t v271;
  unsigned __int8 *v272;
  double *v273;
  _BYTE *v274;
  unsigned int v275;
  unsigned int v276;
  double v277;
  int v278;
  unsigned __int8 *v279;
  double *v280;
  unint64_t *v281;
  unint64_t v282;
  unsigned int v283;
  double v284;
  unint64_t v285;
  unsigned __int8 *v286;
  double *v287;
  _BYTE *v288;
  unsigned int v289;
  unsigned int v290;
  double v291;
  int v292;
  unint64_t *v293;
  double *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  double v298;
  unint64_t v299;
  double *v300;
  unsigned __int8 *v301;
  _BYTE *v302;
  double v303;
  unsigned int v304;
  char v305;
  double *v306;
  unsigned __int8 *v307;
  unint64_t *v308;
  double v309;
  unint64_t v310;
  unint64_t v311;
  double *v312;
  unsigned __int8 *v313;
  _BYTE *v314;
  double v315;
  unsigned int v316;
  char v317;
  double *v318;
  unint64_t *v319;
  unint64_t *v320;
  double v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  _BYTE *v327;
  unsigned int v328;
  unsigned int v329;
  char v330;
  unsigned int v331;
  unsigned __int8 *v332;
  unsigned __int8 *v333;
  _QWORD *v334;
  uint64_t v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  _BYTE *v341;
  unsigned int v342;
  unsigned int v343;
  char v344;
  unsigned int v345;
  unsigned __int8 *v346;
  unint64_t *v347;
  unint64_t *v348;
  unint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unint64_t v352;
  unsigned __int8 *v353;
  unsigned __int8 *v354;
  _BYTE *v355;
  unsigned int v356;
  unsigned int v357;
  char v358;
  unsigned int v359;
  unint64_t *v360;
  unsigned __int8 *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned __int8 *v367;
  _BYTE *v368;
  unsigned int v369;
  unsigned int v370;
  char v371;
  unsigned int v372;
  unint64_t *v373;
  unint64_t *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;

  v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (v5 = *((_QWORD *)a1 + 1), v5 == *((_QWORD *)a2 + 1)) && v5 == *((_QWORD *)a3 + 1))
    {
      v6 = *a1;
      v7 = *a2;
      v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v326 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v327 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v329 = *v325++;
                      v328 = v329;
                      v331 = *v326++;
                      v330 = v331;
                      if (v328 >= v331)
                        LOBYTE(v328) = v330;
                      *v327++ = v328;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v140 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v141 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v142 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v144 = *v140++;
                    v143 = v144;
                    v146 = *v141++;
                    v145 = v146;
                    if (v143 >= v146)
                      LOBYTE(v143) = v145;
                    *v142++ = v143;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v333 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v334 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v336 = *v332++;
                      LODWORD(v335) = v336;
                      v338 = *v333++;
                      v337 = v338;
                      if (v335 >= v338)
                        v335 = v337;
                      else
                        v335 = v335;
                      *v334++ = v335;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v147 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v148 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v149 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v151 = *v147++;
                    LODWORD(v150) = v151;
                    v153 = *v148++;
                    v152 = v153;
                    if (v150 >= v153)
                      v150 = v152;
                    else
                      v150 = v150;
                    *v149++ = v150;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v230 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v231 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v232 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v233 = *v230++;
                      v234 = (double)v233;
                      v235 = *v231++;
                      v236 = (double)v235;
                      if (v234 >= (double)v235)
                        v234 = v236;
                      *v232++ = v234;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v46 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v47 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v48 = *v45++;
                    v49 = (double)v48;
                    v50 = *v46++;
                    v51 = (double)v50;
                    if (v49 >= (double)v50)
                      v49 = v51;
                    *v47++ = v49;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v340 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v341 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v343 = *v339++;
                      v342 = v343;
                      v345 = *v340;
                      v340 += 8;
                      v344 = v345;
                      if (v342 >= v345)
                        LOBYTE(v342) = v344;
                      *v341++ = v342;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v154 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v155 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v156 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v158 = *v154++;
                    v157 = v158;
                    v160 = *v155;
                    v155 += 8;
                    v159 = v160;
                    if (v157 >= v160)
                      LOBYTE(v157) = v159;
                    *v156++ = v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v346 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v347 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v348 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v350 = *v346++;
                      v349 = v350;
                      v352 = *v347++;
                      v351 = v352;
                      if (v349 >= v352)
                        v349 = v351;
                      *v348++ = v349;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v161 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v162 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v163 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v165 = *v161++;
                    v164 = v165;
                    v167 = *v162++;
                    v166 = v167;
                    if (v164 >= v167)
                      v164 = v166;
                    *v163++ = v164;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v238 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v239 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v240 = *v237++;
                      v241 = (double)v240;
                      v242 = *v238++;
                      v243 = (double)v242;
                      if (v241 >= (double)v242)
                        v241 = v243;
                      *v239++ = v241;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v52 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v53 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v54 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v55 = *v52++;
                    v56 = (double)v55;
                    v57 = *v53++;
                    v58 = (double)v57;
                    if (v56 >= (double)v57)
                      v56 = v58;
                    *v54++ = v56;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v272 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v273 = (double *)*((_QWORD *)a2 + 2);
                    v274 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v276 = *v272++;
                      v275 = v276;
                      v277 = *v273++;
                      v278 = (int)v277;
                      if (v275 >= (int)v277)
                        LOBYTE(v275) = v278;
                      *v274++ = v275;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v87 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v88 = (double *)*((_QWORD *)a2 + 2);
                  v89 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v91 = *v87++;
                    v90 = v91;
                    v92 = *v88++;
                    v93 = (int)v92;
                    if (v90 >= (int)v92)
                      LOBYTE(v90) = v93;
                    *v89++ = v90;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v279 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v280 = (double *)*((_QWORD *)a2 + 2);
                    v281 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v283 = *v279++;
                      v282 = v283;
                      v284 = *v280++;
                      v285 = (unint64_t)v284;
                      if (v282 >= (unint64_t)v284)
                        v282 = v285;
                      *v281++ = v282;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v94 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v95 = (double *)*((_QWORD *)a2 + 2);
                  v96 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v98 = *v94++;
                    v97 = v98;
                    v99 = *v95++;
                    v100 = (unint64_t)v99;
                    if (v97 >= (unint64_t)v99)
                      v97 = v100;
                    *v96++ = v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v202 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v203 = (double *)*((_QWORD *)a2 + 2);
                    v204 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v205 = *v202++;
                      v206 = (double)v205;
                      v207 = *v203++;
                      v208 = v207;
                      if (v207 <= v206)
                        v206 = v208;
                      *v204++ = v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v17 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v18 = (double *)*((_QWORD *)a2 + 2);
                  v19 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v20 = *v17++;
                    v21 = (double)v20;
                    v22 = *v18++;
                    v23 = v22;
                    if (v22 <= v21)
                      v21 = v23;
                    *v19++ = v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v353 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v354 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v355 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v357 = *v353;
                      v353 += 8;
                      v356 = v357;
                      v359 = *v354++;
                      v358 = v359;
                      if (v356 >= v359)
                        LOBYTE(v356) = v358;
                      *v355++ = v356;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v168 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v169 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v170 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v172 = *v168;
                    v168 += 8;
                    v171 = v172;
                    v174 = *v169++;
                    v173 = v174;
                    if (v171 >= v174)
                      LOBYTE(v171) = v173;
                    *v170++ = v171;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v360 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v361 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v362 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v364 = *v360++;
                      v363 = v364;
                      LODWORD(v364) = *v361++;
                      v365 = v364;
                      if (v363 >= v364)
                        v363 = v365;
                      *v362++ = v363;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v175 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v176 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v177 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v179 = *v175++;
                    v178 = v179;
                    LODWORD(v179) = *v176++;
                    v180 = v179;
                    if (v178 >= v179)
                      v178 = v180;
                    *v177++ = v178;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v244 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v245 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v246 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v247 = *v244++;
                      v248 = v247;
                      LODWORD(v247) = *v245++;
                      v249 = (double)v247;
                      v250 = (double)v248;
                      if (v250 >= (double)v247)
                        v250 = v249;
                      *v246++ = v250;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v59 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v60 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v61 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v62 = *v59++;
                    v63 = v62;
                    LODWORD(v62) = *v60++;
                    v64 = (double)v62;
                    v65 = (double)v63;
                    if (v65 >= (double)v62)
                      v65 = v64;
                    *v61++ = v65;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v366 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v367 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v368 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v370 = *v366;
                      v366 += 8;
                      v369 = v370;
                      v372 = *v367;
                      v367 += 8;
                      v371 = v372;
                      if (v369 >= v372)
                        LOBYTE(v369) = v371;
                      *v368++ = v369;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v181 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v182 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v183 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v185 = *v181;
                    v181 += 8;
                    v184 = v185;
                    v187 = *v182;
                    v182 += 8;
                    v186 = v187;
                    if (v184 >= v187)
                      LOBYTE(v184) = v186;
                    *v183++ = v184;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v373 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v374 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v375 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v377 = *v373++;
                      v376 = v377;
                      v379 = *v374++;
                      v378 = v379;
                      if (v376 >= v379)
                        v376 = v378;
                      *v375++ = v376;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v188 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v189 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v190 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v192 = *v188++;
                    v191 = v192;
                    v194 = *v189++;
                    v193 = v194;
                    if (v191 >= v194)
                      v191 = v193;
                    *v190++ = v191;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v251 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v252 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v253 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v254 = *v251++;
                      v255 = (double)v254;
                      v256 = *v252++;
                      v257 = (double)v256;
                      if (v255 >= (double)v256)
                        v255 = v257;
                      *v253++ = v255;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v66 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v67 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v68 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v69 = *v66++;
                    v70 = (double)v69;
                    v71 = *v67++;
                    v72 = (double)v71;
                    if (v70 >= (double)v71)
                      v70 = v72;
                    *v68++ = v70;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v286 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v287 = (double *)*((_QWORD *)a2 + 2);
                    v288 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v290 = *v286;
                      v286 += 8;
                      v289 = v290;
                      v291 = *v287++;
                      v292 = (int)v291;
                      if (v289 >= (int)v291)
                        LOBYTE(v289) = v292;
                      *v288++ = v289;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v101 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v102 = (double *)*((_QWORD *)a2 + 2);
                  v103 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v105 = *v101;
                    v101 += 8;
                    v104 = v105;
                    v106 = *v102++;
                    v107 = (int)v106;
                    if (v104 >= (int)v106)
                      LOBYTE(v104) = v107;
                    *v103++ = v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v294 = (double *)*((_QWORD *)a2 + 2);
                    v295 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v297 = *v293++;
                      v296 = v297;
                      v298 = *v294++;
                      v299 = (unint64_t)v298;
                      if (v296 >= (unint64_t)v298)
                        v296 = v299;
                      *v295++ = v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v108 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v109 = (double *)*((_QWORD *)a2 + 2);
                  v110 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v112 = *v108++;
                    v111 = v112;
                    v113 = *v109++;
                    v114 = (unint64_t)v113;
                    if (v111 >= (unint64_t)v113)
                      v111 = v114;
                    *v110++ = v111;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v209 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v210 = (double *)*((_QWORD *)a2 + 2);
                    v211 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v212 = *v209++;
                      v213 = v212;
                      v214 = *v210++;
                      v215 = v214;
                      v216 = (double)v213;
                      if (v214 <= v216)
                        v216 = v215;
                      *v211++ = v216;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v24 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v25 = (double *)*((_QWORD *)a2 + 2);
                  v26 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v27 = *v24++;
                    v28 = v27;
                    v29 = *v25++;
                    v30 = v29;
                    v31 = (double)v28;
                    if (v29 <= v31)
                      v31 = v30;
                    *v26++ = v31;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v300 = (double *)*((_QWORD *)a1 + 2);
                    v301 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v302 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v303 = *v300++;
                      v304 = (int)v303;
                      LODWORD(v303) = *v301++;
                      v305 = LOBYTE(v303);
                      if (v304 >= LODWORD(v303))
                        LOBYTE(v304) = v305;
                      *v302++ = v304;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v115 = (double *)*((_QWORD *)a1 + 2);
                  v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v117 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v118 = *v115++;
                    v119 = (int)v118;
                    LODWORD(v118) = *v116++;
                    v120 = LOBYTE(v118);
                    if (v119 >= LODWORD(v118))
                      LOBYTE(v119) = v120;
                    *v117++ = v119;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v306 = (double *)*((_QWORD *)a1 + 2);
                    v307 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v308 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v309 = *v306++;
                      v310 = (unint64_t)v309;
                      LODWORD(v309) = *v307++;
                      v311 = LODWORD(v309);
                      if (v310 >= LODWORD(v309))
                        v310 = v311;
                      *v308++ = v310;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v121 = (double *)*((_QWORD *)a1 + 2);
                  v122 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v123 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v124 = *v121++;
                    v125 = (unint64_t)v124;
                    LODWORD(v124) = *v122++;
                    v126 = LODWORD(v124);
                    if (v125 >= LODWORD(v124))
                      v125 = v126;
                    *v123++ = v125;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v217 = (double *)*((_QWORD *)a1 + 2);
                    v218 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v219 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v220 = *v217++;
                      v221 = v220;
                      LODWORD(v220) = *v218++;
                      v222 = (double)LODWORD(v220);
                      if (v221 >= (double)LODWORD(v220))
                        v221 = v222;
                      *v219++ = v221;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v32 = (double *)*((_QWORD *)a1 + 2);
                  v33 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v34 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v35 = *v32++;
                    v36 = v35;
                    LODWORD(v35) = *v33++;
                    v37 = (double)LODWORD(v35);
                    if (v36 >= (double)LODWORD(v35))
                      v36 = v37;
                    *v34++ = v36;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v312 = (double *)*((_QWORD *)a1 + 2);
                    v313 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v314 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v315 = *v312++;
                      v316 = (int)v315;
                      LODWORD(v315) = *v313;
                      v313 += 8;
                      v317 = LOBYTE(v315);
                      if (v316 >= LODWORD(v315))
                        LOBYTE(v316) = v317;
                      *v314++ = v316;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v127 = (double *)*((_QWORD *)a1 + 2);
                  v128 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v129 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v130 = *v127++;
                    v131 = (int)v130;
                    LODWORD(v130) = *v128;
                    v128 += 8;
                    v132 = LOBYTE(v130);
                    if (v131 >= LODWORD(v130))
                      LOBYTE(v131) = v132;
                    *v129++ = v131;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (double *)*((_QWORD *)a1 + 2);
                    v319 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v320 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v321 = *v318++;
                      v322 = (unint64_t)v321;
                      v324 = *v319++;
                      v323 = v324;
                      if (v322 >= v324)
                        v322 = v323;
                      *v320++ = v322;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v133 = (double *)*((_QWORD *)a1 + 2);
                  v134 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v135 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v136 = *v133++;
                    v137 = (unint64_t)v136;
                    v139 = *v134++;
                    v138 = v139;
                    if (v137 >= v139)
                      v137 = v138;
                    *v135++ = v137;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v223 = (double *)*((_QWORD *)a1 + 2);
                    v224 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v225 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v226 = *v223++;
                      v227 = v226;
                      v228 = *v224++;
                      v229 = (double)v228;
                      if (v227 >= (double)v228)
                        v227 = v229;
                      *v225++ = v227;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v38 = (double *)*((_QWORD *)a1 + 2);
                  v39 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v40 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v41 = *v38++;
                    v42 = v41;
                    v43 = *v39++;
                    v44 = (double)v43;
                    if (v42 >= (double)v43)
                      v42 = v44;
                    *v40++ = v42;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v258 = (double *)*((_QWORD *)a1 + 2);
                    v259 = (double *)*((_QWORD *)a2 + 2);
                    v260 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v261 = *v258++;
                      v262 = (int)v261;
                      v263 = *v259++;
                      v264 = (int)v263;
                      if (v262 >= (int)v263)
                        LOBYTE(v262) = v264;
                      *v260++ = v262;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v73 = (double *)*((_QWORD *)a1 + 2);
                  v74 = (double *)*((_QWORD *)a2 + 2);
                  v75 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v76 = *v73++;
                    v77 = (int)v76;
                    v78 = *v74++;
                    v79 = (int)v78;
                    if (v77 >= (int)v78)
                      LOBYTE(v77) = v79;
                    *v75++ = v77;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (double *)*((_QWORD *)a1 + 2);
                    v266 = (double *)*((_QWORD *)a2 + 2);
                    v267 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v268 = *v265++;
                      v269 = (unint64_t)v268;
                      v270 = *v266++;
                      v271 = (unint64_t)v270;
                      if (v269 >= (unint64_t)v270)
                        v269 = v271;
                      *v267++ = v269;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v80 = (double *)*((_QWORD *)a1 + 2);
                  v81 = (double *)*((_QWORD *)a2 + 2);
                  v82 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v83 = *v80++;
                    v84 = (unint64_t)v83;
                    v85 = *v81++;
                    v86 = (unint64_t)v85;
                    if (v84 >= (unint64_t)v85)
                      v84 = v86;
                    *v82++ = v84;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v195 = (double *)*((_QWORD *)a1 + 2);
                    v196 = (double *)*((_QWORD *)a2 + 2);
                    v197 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v198 = *v195++;
                      v199 = v198;
                      v200 = *v196++;
                      v201 = v200;
                      if (v199 >= v200)
                        v199 = v201;
                      *v197++ = v199;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a2 + 2);
                  v11 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v12 = *v9++;
                    v13 = v12;
                    v14 = *v10++;
                    v15 = v14;
                    if (v13 >= v14)
                      v13 = v15;
                    *v11++ = v13;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_138AC(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4;
  int *v6;

  v4 = a2;
  v6 = (int *)sub_CFF0(a1, a2);
  return agxps_timeseries_min_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_min_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  unsigned __int8 *v14;
  double *v15;
  unsigned int v16;
  double v17;
  unint64_t *v18;
  double *v19;
  unint64_t v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double v29;
  unsigned __int8 *v30;
  double *v31;
  unsigned int v32;
  double v33;
  unsigned __int8 *v34;
  double *v35;
  unsigned int v36;
  double v37;
  unint64_t *v38;
  double *v39;
  unint64_t v40;
  double v41;
  unint64_t *v42;
  double *v43;
  unint64_t v44;
  double v45;
  double *v46;
  _BYTE *v47;
  double v48;
  int v49;
  double *v50;
  unint64_t *v51;
  double v52;
  unint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  char v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int v61;
  unsigned __int8 *v62;
  _BYTE *v63;
  char v64;
  unsigned int v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  double *v70;
  _BYTE *v71;
  double v72;
  int v73;
  double *v74;
  unint64_t *v75;
  double v76;
  unint64_t v77;
  double *v78;
  _BYTE *v79;
  double v80;
  int v81;
  double *v82;
  unint64_t *v83;
  double v84;
  unint64_t v85;
  unsigned __int8 *v86;
  _BYTE *v87;
  char v88;
  unsigned int v89;
  unsigned __int8 *v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned __int8 *v94;
  _BYTE *v95;
  char v96;
  unsigned int v97;
  unsigned __int8 *v98;
  unint64_t *v99;
  unint64_t v100;
  unsigned int v101;
  unsigned __int8 *v102;
  _BYTE *v103;
  char v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  _BYTE *v111;
  char v112;
  unsigned int v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  double *v118;
  double *v119;
  double v120;
  double v121;
  unsigned __int8 *v122;
  double *v123;
  unsigned int v124;
  double v125;
  unint64_t *v126;
  double *v127;
  unint64_t v128;
  double v129;
  double *v130;
  double *v131;
  double v132;
  double v133;
  double *v134;
  double *v135;
  double v136;
  double v137;
  unsigned __int8 *v138;
  double *v139;
  unsigned int v140;
  double v141;
  unsigned __int8 *v142;
  double *v143;
  unsigned int v144;
  double v145;
  unint64_t *v146;
  double *v147;
  unint64_t v148;
  double v149;
  unint64_t *v150;
  double *v151;
  unint64_t v152;
  double v153;
  double *v154;
  _BYTE *v155;
  double v156;
  int v157;
  double *v158;
  unint64_t *v159;
  double v160;
  unint64_t v161;
  unsigned __int8 *v162;
  _BYTE *v163;
  char v164;
  unsigned int v165;
  unsigned __int8 *v166;
  unint64_t *v167;
  unint64_t v168;
  unsigned int v169;
  unsigned __int8 *v170;
  _BYTE *v171;
  char v172;
  unsigned int v173;
  unint64_t *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  double *v178;
  _BYTE *v179;
  double v180;
  int v181;
  double *v182;
  unint64_t *v183;
  double v184;
  unint64_t v185;
  double *v186;
  _BYTE *v187;
  double v188;
  int v189;
  double *v190;
  unint64_t *v191;
  double v192;
  unint64_t v193;
  unsigned __int8 *v194;
  _BYTE *v195;
  char v196;
  unsigned int v197;
  unsigned __int8 *v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned __int8 *v202;
  _BYTE *v203;
  char v204;
  unsigned int v205;
  unsigned __int8 *v206;
  unint64_t *v207;
  unint64_t v208;
  unsigned int v209;
  unsigned __int8 *v210;
  _BYTE *v211;
  char v212;
  unsigned int v213;
  unint64_t *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  _BYTE *v219;
  char v220;
  unsigned int v221;
  unint64_t *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;

  v5 = 0;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32))
      return 0;
    v6 = *((_QWORD *)a1 + 1);
    if (v6 != *((_QWORD *)a4 + 1))
    {
      return 0;
    }
    else
    {
      v7 = *a1;
      v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v194 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v195 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v197 = *v194++;
                      v196 = v197;
                      if (v197 >= a3)
                        v196 = a3;
                      *v195++ = v196;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v86 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v87 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v89 = *v86++;
                    v88 = v89;
                    if (v89 >= a3)
                      v88 = a3;
                    *v87++ = v88;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v198 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v199 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v201 = *v198++;
                      v200 = v201;
                      if (v201 >= (unint64_t)a3)
                        v200 = a3;
                      *v199++ = v200;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v90 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v91 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v93 = *v90++;
                    v92 = v93;
                    if (v93 >= (unint64_t)a3)
                      v92 = a3;
                    *v91++ = v92;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v138 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v139 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v140 = *v138++;
                      v141 = (double)v140;
                      if ((double)v140 >= (double)a3)
                        v141 = (double)a3;
                      *v139++ = v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v30 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v31 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v32 = *v30++;
                    v33 = (double)v32;
                    if ((double)v32 >= (double)a3)
                      v33 = (double)a3;
                    *v31++ = v33;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v202 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v203 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v205 = *v202++;
                      v204 = v205;
                      if (v205 >= a3)
                        v204 = a3;
                      *v203++ = v204;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v94 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v95 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v97 = *v94++;
                    v96 = v97;
                    if (v97 >= a3)
                      v96 = a3;
                    *v95++ = v96;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v206 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v207 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v209 = *v206++;
                      v208 = v209;
                      if (v209 >= a3)
                        v208 = a3;
                      *v207++ = v208;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v98 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v99 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v101 = *v98++;
                    v100 = v101;
                    if (v101 >= a3)
                      v100 = a3;
                    *v99++ = v100;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v142 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v143 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v144 = *v142++;
                      v145 = (double)v144;
                      if ((double)v144 >= (double)a3)
                        v145 = (double)a3;
                      *v143++ = v145;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v34 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v35 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v36 = *v34++;
                    v37 = (double)v36;
                    if ((double)v36 >= (double)a3)
                      v37 = (double)a3;
                    *v35++ = v37;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v162 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v163 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v165 = *v162++;
                      v164 = v165;
                      if (v165 >= (int)*(double *)&a3)
                        v164 = (int)*(double *)&a3;
                      *v163++ = v164;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v54 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v55 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v57 = *v54++;
                    v56 = v57;
                    if (v57 >= (int)*(double *)&a3)
                      v56 = (int)*(double *)&a3;
                    *v55++ = v56;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v166 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v167 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v169 = *v166++;
                      v168 = v169;
                      if (v169 >= (unint64_t)*(double *)&a3)
                        v168 = (unint64_t)*(double *)&a3;
                      *v167++ = v168;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v58 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v59 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v61 = *v58++;
                    v60 = v61;
                    if (v61 >= (unint64_t)*(double *)&a3)
                      v60 = (unint64_t)*(double *)&a3;
                    *v59++ = v60;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v122 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v123 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v124 = *v122++;
                      v125 = (double)v124;
                      if (*(double *)&a3 <= (double)v124)
                        v125 = *(double *)&a3;
                      *v123++ = v125;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v14 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v15 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v16 = *v14++;
                    v17 = (double)v16;
                    if (*(double *)&a3 <= (double)v16)
                      v17 = *(double *)&a3;
                    *v15++ = v17;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v210 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v211 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v213 = *v210;
                      v210 += 8;
                      v212 = v213;
                      if (v213 >= a3)
                        v212 = a3;
                      *v211++ = v212;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v102 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v103 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v105 = *v102;
                    v102 += 8;
                    v104 = v105;
                    if (v105 >= a3)
                      v104 = a3;
                    *v103++ = v104;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v214 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v215 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v217 = *v214++;
                      v216 = v217;
                      if (v217 >= a3)
                        v216 = a3;
                      *v215++ = v216;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v106 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v107 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v109 = *v106++;
                    v108 = v109;
                    if (v109 >= a3)
                      v108 = a3;
                    *v107++ = v108;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v146 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v147 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v148 = *v146++;
                      v149 = (double)v148;
                      if ((double)v148 >= (double)a3)
                        v149 = (double)a3;
                      *v147++ = v149;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v38 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v39 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v40 = *v38++;
                    v41 = (double)v40;
                    if ((double)v40 >= (double)a3)
                      v41 = (double)a3;
                    *v39++ = v41;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v218 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v219 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v221 = *v218;
                      v218 += 8;
                      v220 = v221;
                      if (v221 >= a3)
                        v220 = a3;
                      *v219++ = v220;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v110 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v111 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v113 = *v110;
                    v110 += 8;
                    v112 = v113;
                    if (v113 >= a3)
                      v112 = a3;
                    *v111++ = v112;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v222 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v223 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v225 = *v222++;
                      v224 = v225;
                      if (v225 >= a3)
                        v224 = a3;
                      *v223++ = v224;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v114 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v115 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v117 = *v114++;
                    v116 = v117;
                    if (v117 >= a3)
                      v116 = a3;
                    *v115++ = v116;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v150 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v151 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v152 = *v150++;
                      v153 = (double)v152;
                      if ((double)v152 >= (double)a3)
                        v153 = (double)a3;
                      *v151++ = v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v42 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v43 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v44 = *v42++;
                    v45 = (double)v44;
                    if ((double)v44 >= (double)a3)
                      v45 = (double)a3;
                    *v43++ = v45;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v170 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v171 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v173 = *v170;
                      v170 += 8;
                      v172 = v173;
                      if (v173 >= (int)*(double *)&a3)
                        v172 = (int)*(double *)&a3;
                      *v171++ = v172;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v62 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v63 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v65 = *v62;
                    v62 += 8;
                    v64 = v65;
                    if (v65 >= (int)*(double *)&a3)
                      v64 = (int)*(double *)&a3;
                    *v63++ = v64;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v174 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v175 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v177 = *v174++;
                      v176 = v177;
                      if (v177 >= (unint64_t)*(double *)&a3)
                        v176 = (unint64_t)*(double *)&a3;
                      *v175++ = v176;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v66 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v67 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v69 = *v66++;
                    v68 = v69;
                    if (v69 >= (unint64_t)*(double *)&a3)
                      v68 = (unint64_t)*(double *)&a3;
                    *v67++ = v68;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v126 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v127 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v128 = *v126++;
                      v129 = (double)v128;
                      if (*(double *)&a3 <= (double)v128)
                        v129 = *(double *)&a3;
                      *v127++ = v129;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v18 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v19 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v20 = *v18++;
                    v21 = (double)v20;
                    if (*(double *)&a3 <= (double)v20)
                      v21 = *(double *)&a3;
                    *v19++ = v21;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v178 = (double *)*((_QWORD *)a1 + 2);
                    v179 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v180 = *v178++;
                      v181 = (int)v180;
                      if ((int)v180 >= a3)
                        LOBYTE(v181) = a3;
                      *v179++ = v181;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v70 = (double *)*((_QWORD *)a1 + 2);
                  v71 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v72 = *v70++;
                    v73 = (int)v72;
                    if ((int)v72 >= a3)
                      LOBYTE(v73) = a3;
                    *v71++ = v73;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v182 = (double *)*((_QWORD *)a1 + 2);
                    v183 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v184 = *v182++;
                      v185 = (unint64_t)v184;
                      if ((unint64_t)v184 >= a3)
                        v185 = a3;
                      *v183++ = v185;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v74 = (double *)*((_QWORD *)a1 + 2);
                  v75 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v76 = *v74++;
                    v77 = (unint64_t)v76;
                    if ((unint64_t)v76 >= a3)
                      v77 = a3;
                    *v75++ = v77;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v130 = (double *)*((_QWORD *)a1 + 2);
                    v131 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v132 = *v130++;
                      v133 = v132;
                      if (v132 >= (double)a3)
                        v133 = (double)a3;
                      *v131++ = v133;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v22 = (double *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v24 = *v22++;
                    v25 = v24;
                    if (v24 >= (double)a3)
                      v25 = (double)a3;
                    *v23++ = v25;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v186 = (double *)*((_QWORD *)a1 + 2);
                    v187 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v188 = *v186++;
                      v189 = (int)v188;
                      if ((int)v188 >= a3)
                        LOBYTE(v189) = a3;
                      *v187++ = v189;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v78 = (double *)*((_QWORD *)a1 + 2);
                  v79 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v80 = *v78++;
                    v81 = (int)v80;
                    if ((int)v80 >= a3)
                      LOBYTE(v81) = a3;
                    *v79++ = v81;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v190 = (double *)*((_QWORD *)a1 + 2);
                    v191 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v192 = *v190++;
                      v193 = (unint64_t)v192;
                      if ((unint64_t)v192 >= a3)
                        v193 = a3;
                      *v191++ = v193;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v82 = (double *)*((_QWORD *)a1 + 2);
                  v83 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v84 = *v82++;
                    v85 = (unint64_t)v84;
                    if ((unint64_t)v84 >= a3)
                      v85 = a3;
                    *v83++ = v85;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v134 = (double *)*((_QWORD *)a1 + 2);
                    v135 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v136 = *v134++;
                      v137 = v136;
                      if (v136 >= (double)a3)
                        v137 = (double)a3;
                      *v135++ = v137;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v26 = (double *)*((_QWORD *)a1 + 2);
                  v27 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v28 = *v26++;
                    v29 = v28;
                    if (v28 >= (double)a3)
                      v29 = (double)a3;
                    *v27++ = v29;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v154 = (double *)*((_QWORD *)a1 + 2);
                    v155 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v156 = *v154++;
                      v157 = (int)v156;
                      if ((int)v156 >= (int)*(double *)&a3)
                        LOBYTE(v157) = (int)*(double *)&a3;
                      *v155++ = v157;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v46 = (double *)*((_QWORD *)a1 + 2);
                  v47 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v48 = *v46++;
                    v49 = (int)v48;
                    if ((int)v48 >= (int)*(double *)&a3)
                      LOBYTE(v49) = (int)*(double *)&a3;
                    *v47++ = v49;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v158 = (double *)*((_QWORD *)a1 + 2);
                    v159 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v160 = *v158++;
                      v161 = (unint64_t)v160;
                      if ((unint64_t)v160 >= (unint64_t)*(double *)&a3)
                        v161 = (unint64_t)*(double *)&a3;
                      *v159++ = v161;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v50 = (double *)*((_QWORD *)a1 + 2);
                  v51 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v52 = *v50++;
                    v53 = (unint64_t)v52;
                    if ((unint64_t)v52 >= (unint64_t)*(double *)&a3)
                      v53 = (unint64_t)*(double *)&a3;
                    *v51++ = v53;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v118 = (double *)*((_QWORD *)a1 + 2);
                    v119 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v120 = *v118++;
                      v121 = v120;
                      if (v120 >= *(double *)&a3)
                        v121 = *(double *)&a3;
                      *v119++ = v121;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v11 = *v9++;
                    v12 = v11;
                    if (v11 >= *(double *)&a3)
                      v12 = *(double *)&a3;
                    *v10++ = v12;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_14508(unsigned int *a1, unsigned int *a2)
{
  int *v4;

  v4 = (int *)sub_CECC(a1, a2);
  return agxps_timeseries_max_tt((int *)a1, (int *)a2, v4, 1);
}

int *agxps_timeseries_max_tt(int *a1, int *a2, int *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned __int8 *v17;
  double *v18;
  double *v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  unint64_t *v24;
  double *v25;
  double *v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double *v32;
  unsigned __int8 *v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  unint64_t *v39;
  double *v40;
  double v41;
  double v42;
  unint64_t v43;
  double v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  double *v47;
  unsigned int v48;
  double v49;
  unsigned int v50;
  double v51;
  unsigned __int8 *v52;
  unint64_t *v53;
  double *v54;
  unsigned int v55;
  double v56;
  unint64_t v57;
  double v58;
  unint64_t *v59;
  unsigned __int8 *v60;
  double *v61;
  unint64_t v62;
  unint64_t v63;
  double v64;
  double v65;
  unint64_t *v66;
  unint64_t *v67;
  double *v68;
  unint64_t v69;
  double v70;
  unint64_t v71;
  double v72;
  double *v73;
  double *v74;
  _BYTE *v75;
  double v76;
  unsigned int v77;
  double v78;
  int v79;
  double *v80;
  double *v81;
  unint64_t *v82;
  double v83;
  unint64_t v84;
  double v85;
  unint64_t v86;
  unsigned __int8 *v87;
  double *v88;
  _BYTE *v89;
  unsigned int v90;
  unsigned int v91;
  double v92;
  int v93;
  unsigned __int8 *v94;
  double *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int v98;
  double v99;
  unint64_t v100;
  unsigned __int8 *v101;
  double *v102;
  _BYTE *v103;
  unsigned int v104;
  unsigned int v105;
  double v106;
  int v107;
  unint64_t *v108;
  double *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  double v113;
  unint64_t v114;
  double *v115;
  unsigned __int8 *v116;
  _BYTE *v117;
  double v118;
  unsigned int v119;
  char v120;
  double *v121;
  unsigned __int8 *v122;
  unint64_t *v123;
  double v124;
  unint64_t v125;
  unint64_t v126;
  double *v127;
  unsigned __int8 *v128;
  _BYTE *v129;
  double v130;
  unsigned int v131;
  char v132;
  double *v133;
  unint64_t *v134;
  unint64_t *v135;
  double v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  _BYTE *v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  unsigned int v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  _BYTE *v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  unsigned int v160;
  unsigned __int8 *v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t v164;
  unsigned int v165;
  unint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  _BYTE *v170;
  unsigned int v171;
  unsigned int v172;
  char v173;
  unsigned int v174;
  unint64_t *v175;
  unsigned __int8 *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  _BYTE *v183;
  unsigned int v184;
  unsigned int v185;
  char v186;
  unsigned int v187;
  unint64_t *v188;
  unint64_t *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  double *v195;
  double *v196;
  double *v197;
  double v198;
  double v199;
  double v200;
  double v201;
  unsigned __int8 *v202;
  double *v203;
  double *v204;
  unsigned int v205;
  double v206;
  double v207;
  double v208;
  unint64_t *v209;
  double *v210;
  double *v211;
  unint64_t v212;
  unint64_t v213;
  double v214;
  double v215;
  double v216;
  double *v217;
  unsigned __int8 *v218;
  double *v219;
  double v220;
  double v221;
  double v222;
  double *v223;
  unint64_t *v224;
  double *v225;
  double v226;
  double v227;
  unint64_t v228;
  double v229;
  unsigned __int8 *v230;
  unsigned __int8 *v231;
  double *v232;
  unsigned int v233;
  double v234;
  unsigned int v235;
  double v236;
  unsigned __int8 *v237;
  unint64_t *v238;
  double *v239;
  unsigned int v240;
  double v241;
  unint64_t v242;
  double v243;
  unint64_t *v244;
  unsigned __int8 *v245;
  double *v246;
  unint64_t v247;
  unint64_t v248;
  double v249;
  double v250;
  unint64_t *v251;
  unint64_t *v252;
  double *v253;
  unint64_t v254;
  double v255;
  unint64_t v256;
  double v257;
  double *v258;
  double *v259;
  _BYTE *v260;
  double v261;
  unsigned int v262;
  double v263;
  int v264;
  double *v265;
  double *v266;
  unint64_t *v267;
  double v268;
  unint64_t v269;
  double v270;
  unint64_t v271;
  unsigned __int8 *v272;
  double *v273;
  _BYTE *v274;
  unsigned int v275;
  unsigned int v276;
  double v277;
  int v278;
  unsigned __int8 *v279;
  double *v280;
  unint64_t *v281;
  unint64_t v282;
  unsigned int v283;
  double v284;
  unint64_t v285;
  unsigned __int8 *v286;
  double *v287;
  _BYTE *v288;
  unsigned int v289;
  unsigned int v290;
  double v291;
  int v292;
  unint64_t *v293;
  double *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  double v298;
  unint64_t v299;
  double *v300;
  unsigned __int8 *v301;
  _BYTE *v302;
  double v303;
  unsigned int v304;
  char v305;
  double *v306;
  unsigned __int8 *v307;
  unint64_t *v308;
  double v309;
  unint64_t v310;
  unint64_t v311;
  double *v312;
  unsigned __int8 *v313;
  _BYTE *v314;
  double v315;
  unsigned int v316;
  char v317;
  double *v318;
  unint64_t *v319;
  unint64_t *v320;
  double v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  _BYTE *v327;
  unsigned int v328;
  unsigned int v329;
  char v330;
  unsigned int v331;
  unsigned __int8 *v332;
  unsigned __int8 *v333;
  _QWORD *v334;
  uint64_t v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  _BYTE *v341;
  unsigned int v342;
  unsigned int v343;
  char v344;
  unsigned int v345;
  unsigned __int8 *v346;
  unint64_t *v347;
  unint64_t *v348;
  unint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unint64_t v352;
  unsigned __int8 *v353;
  unsigned __int8 *v354;
  _BYTE *v355;
  unsigned int v356;
  unsigned int v357;
  char v358;
  unsigned int v359;
  unint64_t *v360;
  unsigned __int8 *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned __int8 *v367;
  _BYTE *v368;
  unsigned int v369;
  unsigned int v370;
  char v371;
  unsigned int v372;
  unint64_t *v373;
  unint64_t *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;

  v4 = 0;
  if (a1 && a2 && a3)
  {
    if (!*((_BYTE *)a3 + 32) && (v5 = *((_QWORD *)a1 + 1), v5 == *((_QWORD *)a2 + 1)) && v5 == *((_QWORD *)a3 + 1))
    {
      v6 = *a1;
      v7 = *a2;
      v8 = *a3;
      if (*a1 == 2)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v325 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v326 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v327 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v329 = *v325++;
                      v328 = v329;
                      v331 = *v326++;
                      v330 = v331;
                      if (v328 <= v331)
                        LOBYTE(v328) = v330;
                      *v327++ = v328;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v140 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v141 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v142 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v144 = *v140++;
                    v143 = v144;
                    v146 = *v141++;
                    v145 = v146;
                    if (v143 <= v146)
                      LOBYTE(v143) = v145;
                    *v142++ = v143;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v332 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v333 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v334 = (_QWORD *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v336 = *v332++;
                      LODWORD(v335) = v336;
                      v338 = *v333++;
                      v337 = v338;
                      if (v335 <= v338)
                        v335 = v337;
                      else
                        v335 = v335;
                      *v334++ = v335;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v147 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v148 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v149 = (_QWORD *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v151 = *v147++;
                    LODWORD(v150) = v151;
                    v153 = *v148++;
                    v152 = v153;
                    if (v150 <= v153)
                      v150 = v152;
                    else
                      v150 = v150;
                    *v149++ = v150;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v230 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v231 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v232 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v233 = *v230++;
                      v234 = (double)v233;
                      v235 = *v231++;
                      v236 = (double)v235;
                      if (v234 <= (double)v235)
                        v234 = v236;
                      *v232++ = v234;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v45 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v46 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v47 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v48 = *v45++;
                    v49 = (double)v48;
                    v50 = *v46++;
                    v51 = (double)v50;
                    if (v49 <= (double)v50)
                      v49 = v51;
                    *v47++ = v49;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v339 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v340 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v341 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v343 = *v339++;
                      v342 = v343;
                      v345 = *v340;
                      v340 += 8;
                      v344 = v345;
                      if (v342 <= v345)
                        LOBYTE(v342) = v344;
                      *v341++ = v342;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v154 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v155 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v156 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v158 = *v154++;
                    v157 = v158;
                    v160 = *v155;
                    v155 += 8;
                    v159 = v160;
                    if (v157 <= v160)
                      LOBYTE(v157) = v159;
                    *v156++ = v157;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v346 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v347 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v348 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v350 = *v346++;
                      v349 = v350;
                      v352 = *v347++;
                      v351 = v352;
                      if (v349 <= v352)
                        v349 = v351;
                      *v348++ = v349;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v161 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v162 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v163 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v165 = *v161++;
                    v164 = v165;
                    v167 = *v162++;
                    v166 = v167;
                    if (v164 <= v167)
                      v164 = v166;
                    *v163++ = v164;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v237 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v238 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v239 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v240 = *v237++;
                      v241 = (double)v240;
                      v242 = *v238++;
                      v243 = (double)v242;
                      if (v241 <= (double)v242)
                        v241 = v243;
                      *v239++ = v241;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v52 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v53 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v54 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v55 = *v52++;
                    v56 = (double)v55;
                    v57 = *v53++;
                    v58 = (double)v57;
                    if (v56 <= (double)v57)
                      v56 = v58;
                    *v54++ = v56;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v272 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v273 = (double *)*((_QWORD *)a2 + 2);
                    v274 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v276 = *v272++;
                      v275 = v276;
                      v277 = *v273++;
                      v278 = (int)v277;
                      if (v275 <= (int)v277)
                        LOBYTE(v275) = v278;
                      *v274++ = v275;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v87 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v88 = (double *)*((_QWORD *)a2 + 2);
                  v89 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v91 = *v87++;
                    v90 = v91;
                    v92 = *v88++;
                    v93 = (int)v92;
                    if (v90 <= (int)v92)
                      LOBYTE(v90) = v93;
                    *v89++ = v90;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v279 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v280 = (double *)*((_QWORD *)a2 + 2);
                    v281 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v283 = *v279++;
                      v282 = v283;
                      v284 = *v280++;
                      v285 = (unint64_t)v284;
                      if (v282 <= (unint64_t)v284)
                        v282 = v285;
                      *v281++ = v282;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v94 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v95 = (double *)*((_QWORD *)a2 + 2);
                  v96 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v98 = *v94++;
                    v97 = v98;
                    v99 = *v95++;
                    v100 = (unint64_t)v99;
                    if (v97 <= (unint64_t)v99)
                      v97 = v100;
                    *v96++ = v97;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v202 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v203 = (double *)*((_QWORD *)a2 + 2);
                    v204 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v205 = *v202++;
                      v206 = (double)v205;
                      v207 = *v203++;
                      v208 = v207;
                      if (v207 >= v206)
                        v206 = v208;
                      *v204++ = v206;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v17 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v18 = (double *)*((_QWORD *)a2 + 2);
                  v19 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v20 = *v17++;
                    v21 = (double)v20;
                    v22 = *v18++;
                    v23 = v22;
                    if (v22 >= v21)
                      v21 = v23;
                    *v19++ = v21;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (v6 == 1)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v353 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v354 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v355 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v357 = *v353;
                      v353 += 8;
                      v356 = v357;
                      v359 = *v354++;
                      v358 = v359;
                      if (v356 <= v359)
                        LOBYTE(v356) = v358;
                      *v355++ = v356;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v168 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v169 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v170 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v172 = *v168;
                    v168 += 8;
                    v171 = v172;
                    v174 = *v169++;
                    v173 = v174;
                    if (v171 <= v174)
                      LOBYTE(v171) = v173;
                    *v170++ = v171;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v360 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v361 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v362 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v364 = *v360++;
                      v363 = v364;
                      LODWORD(v364) = *v361++;
                      v365 = v364;
                      if (v363 <= v364)
                        v363 = v365;
                      *v362++ = v363;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v175 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v176 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v177 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v179 = *v175++;
                    v178 = v179;
                    LODWORD(v179) = *v176++;
                    v180 = v179;
                    if (v178 <= v179)
                      v178 = v180;
                    *v177++ = v178;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v244 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v245 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v246 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v247 = *v244++;
                      v248 = v247;
                      LODWORD(v247) = *v245++;
                      v249 = (double)v247;
                      v250 = (double)v248;
                      if (v250 <= (double)v247)
                        v250 = v249;
                      *v246++ = v250;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v59 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v60 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v61 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v62 = *v59++;
                    v63 = v62;
                    LODWORD(v62) = *v60++;
                    v64 = (double)v62;
                    v65 = (double)v63;
                    if (v65 <= (double)v62)
                      v65 = v64;
                    *v61++ = v65;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v366 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v367 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v368 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v370 = *v366;
                      v366 += 8;
                      v369 = v370;
                      v372 = *v367;
                      v367 += 8;
                      v371 = v372;
                      if (v369 <= v372)
                        LOBYTE(v369) = v371;
                      *v368++ = v369;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v181 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v182 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v183 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v185 = *v181;
                    v181 += 8;
                    v184 = v185;
                    v187 = *v182;
                    v182 += 8;
                    v186 = v187;
                    if (v184 <= v187)
                      LOBYTE(v184) = v186;
                    *v183++ = v184;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v373 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v374 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v375 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v377 = *v373++;
                      v376 = v377;
                      v379 = *v374++;
                      v378 = v379;
                      if (v376 <= v379)
                        v376 = v378;
                      *v375++ = v376;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v188 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v189 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v190 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v192 = *v188++;
                    v191 = v192;
                    v194 = *v189++;
                    v193 = v194;
                    if (v191 <= v194)
                      v191 = v193;
                    *v190++ = v191;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v251 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v252 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v253 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v254 = *v251++;
                      v255 = (double)v254;
                      v256 = *v252++;
                      v257 = (double)v256;
                      if (v255 <= (double)v256)
                        v255 = v257;
                      *v253++ = v255;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v66 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v67 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v68 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v69 = *v66++;
                    v70 = (double)v69;
                    v71 = *v67++;
                    v72 = (double)v71;
                    if (v70 <= (double)v71)
                      v70 = v72;
                    *v68++ = v70;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v286 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v287 = (double *)*((_QWORD *)a2 + 2);
                    v288 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v290 = *v286;
                      v286 += 8;
                      v289 = v290;
                      v291 = *v287++;
                      v292 = (int)v291;
                      if (v289 <= (int)v291)
                        LOBYTE(v289) = v292;
                      *v288++ = v289;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v101 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v102 = (double *)*((_QWORD *)a2 + 2);
                  v103 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v105 = *v101;
                    v101 += 8;
                    v104 = v105;
                    v106 = *v102++;
                    v107 = (int)v106;
                    if (v104 <= (int)v106)
                      LOBYTE(v104) = v107;
                    *v103++ = v104;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v293 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v294 = (double *)*((_QWORD *)a2 + 2);
                    v295 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v297 = *v293++;
                      v296 = v297;
                      v298 = *v294++;
                      v299 = (unint64_t)v298;
                      if (v296 <= (unint64_t)v298)
                        v296 = v299;
                      *v295++ = v296;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v108 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v109 = (double *)*((_QWORD *)a2 + 2);
                  v110 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v112 = *v108++;
                    v111 = v112;
                    v113 = *v109++;
                    v114 = (unint64_t)v113;
                    if (v111 <= (unint64_t)v113)
                      v111 = v114;
                    *v110++ = v111;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v209 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v210 = (double *)*((_QWORD *)a2 + 2);
                    v211 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v212 = *v209++;
                      v213 = v212;
                      v214 = *v210++;
                      v215 = v214;
                      v216 = (double)v213;
                      if (v214 >= v216)
                        v216 = v215;
                      *v211++ = v216;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v24 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v25 = (double *)*((_QWORD *)a2 + 2);
                  v26 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v27 = *v24++;
                    v28 = v27;
                    v29 = *v25++;
                    v30 = v29;
                    v31 = (double)v28;
                    if (v29 >= v31)
                      v31 = v30;
                    *v26++ = v31;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      else if (!v6)
      {
        switch(v7)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v300 = (double *)*((_QWORD *)a1 + 2);
                    v301 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v302 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v303 = *v300++;
                      v304 = (int)v303;
                      LODWORD(v303) = *v301++;
                      v305 = LOBYTE(v303);
                      if (v304 <= LODWORD(v303))
                        LOBYTE(v304) = v305;
                      *v302++ = v304;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v115 = (double *)*((_QWORD *)a1 + 2);
                  v116 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v117 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v118 = *v115++;
                    v119 = (int)v118;
                    LODWORD(v118) = *v116++;
                    v120 = LOBYTE(v118);
                    if (v119 <= LODWORD(v118))
                      LOBYTE(v119) = v120;
                    *v117++ = v119;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v306 = (double *)*((_QWORD *)a1 + 2);
                    v307 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v308 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v309 = *v306++;
                      v310 = (unint64_t)v309;
                      LODWORD(v309) = *v307++;
                      v311 = LODWORD(v309);
                      if (v310 <= LODWORD(v309))
                        v310 = v311;
                      *v308++ = v310;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v121 = (double *)*((_QWORD *)a1 + 2);
                  v122 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v123 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v124 = *v121++;
                    v125 = (unint64_t)v124;
                    LODWORD(v124) = *v122++;
                    v126 = LODWORD(v124);
                    if (v125 <= LODWORD(v124))
                      v125 = v126;
                    *v123++ = v125;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v217 = (double *)*((_QWORD *)a1 + 2);
                    v218 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v219 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v220 = *v217++;
                      v221 = v220;
                      LODWORD(v220) = *v218++;
                      v222 = (double)LODWORD(v220);
                      if (v221 <= (double)LODWORD(v220))
                        v221 = v222;
                      *v219++ = v221;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v32 = (double *)*((_QWORD *)a1 + 2);
                  v33 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v34 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v35 = *v32++;
                    v36 = v35;
                    LODWORD(v35) = *v33++;
                    v37 = (double)LODWORD(v35);
                    if (v36 <= (double)LODWORD(v35))
                      v36 = v37;
                    *v34++ = v36;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v312 = (double *)*((_QWORD *)a1 + 2);
                    v313 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v314 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v315 = *v312++;
                      v316 = (int)v315;
                      LODWORD(v315) = *v313;
                      v313 += 8;
                      v317 = LOBYTE(v315);
                      if (v316 <= LODWORD(v315))
                        LOBYTE(v316) = v317;
                      *v314++ = v316;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v127 = (double *)*((_QWORD *)a1 + 2);
                  v128 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v129 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v130 = *v127++;
                    v131 = (int)v130;
                    LODWORD(v130) = *v128;
                    v128 += 8;
                    v132 = LOBYTE(v130);
                    if (v131 <= LODWORD(v130))
                      LOBYTE(v131) = v132;
                    *v129++ = v131;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v318 = (double *)*((_QWORD *)a1 + 2);
                    v319 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v320 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v321 = *v318++;
                      v322 = (unint64_t)v321;
                      v324 = *v319++;
                      v323 = v324;
                      if (v322 <= v324)
                        v322 = v323;
                      *v320++ = v322;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v133 = (double *)*((_QWORD *)a1 + 2);
                  v134 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v135 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v136 = *v133++;
                    v137 = (unint64_t)v136;
                    v139 = *v134++;
                    v138 = v139;
                    if (v137 <= v139)
                      v137 = v138;
                    *v135++ = v137;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v223 = (double *)*((_QWORD *)a1 + 2);
                    v224 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v225 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v226 = *v223++;
                      v227 = v226;
                      v228 = *v224++;
                      v229 = (double)v228;
                      if (v227 <= (double)v228)
                        v227 = v229;
                      *v225++ = v227;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v38 = (double *)*((_QWORD *)a1 + 2);
                  v39 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v40 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v41 = *v38++;
                    v42 = v41;
                    v43 = *v39++;
                    v44 = (double)v43;
                    if (v42 <= (double)v43)
                      v42 = v44;
                    *v40++ = v42;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v258 = (double *)*((_QWORD *)a1 + 2);
                    v259 = (double *)*((_QWORD *)a2 + 2);
                    v260 = (_BYTE *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v261 = *v258++;
                      v262 = (int)v261;
                      v263 = *v259++;
                      v264 = (int)v263;
                      if (v262 <= (int)v263)
                        LOBYTE(v262) = v264;
                      *v260++ = v262;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v73 = (double *)*((_QWORD *)a1 + 2);
                  v74 = (double *)*((_QWORD *)a2 + 2);
                  v75 = (_BYTE *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v76 = *v73++;
                    v77 = (int)v76;
                    v78 = *v74++;
                    v79 = (int)v78;
                    if (v77 <= (int)v78)
                      LOBYTE(v77) = v79;
                    *v75++ = v77;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 1:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v265 = (double *)*((_QWORD *)a1 + 2);
                    v266 = (double *)*((_QWORD *)a2 + 2);
                    v267 = (unint64_t *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v268 = *v265++;
                      v269 = (unint64_t)v268;
                      v270 = *v266++;
                      v271 = (unint64_t)v270;
                      if (v269 <= (unint64_t)v270)
                        v269 = v271;
                      *v267++ = v269;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v80 = (double *)*((_QWORD *)a1 + 2);
                  v81 = (double *)*((_QWORD *)a2 + 2);
                  v82 = (unint64_t *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v83 = *v80++;
                    v84 = (unint64_t)v83;
                    v85 = *v81++;
                    v86 = (unint64_t)v85;
                    if (v84 <= (unint64_t)v85)
                      v84 = v86;
                    *v82++ = v84;
                    --v5;
                  }
                  while (v5);
                }
                break;
              case 0:
                if (a4 == 1)
                {
                  if (v5)
                  {
                    v195 = (double *)*((_QWORD *)a1 + 2);
                    v196 = (double *)*((_QWORD *)a2 + 2);
                    v197 = (double *)*((_QWORD *)a3 + 2);
                    do
                    {
                      v198 = *v195++;
                      v199 = v198;
                      v200 = *v196++;
                      v201 = v200;
                      if (v199 <= v200)
                        v199 = v201;
                      *v197++ = v199;
                      --v5;
                    }
                    while (v5);
                  }
                }
                else if (!a4 && v5)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a2 + 2);
                  v11 = (double *)*((_QWORD *)a3 + 2);
                  do
                  {
                    v12 = *v9++;
                    v13 = v12;
                    v14 = *v10++;
                    v15 = v14;
                    if (v13 <= v14)
                      v13 = v15;
                    *v11++ = v13;
                    --v5;
                  }
                  while (v5);
                }
                break;
            }
            break;
        }
      }
      return a3;
    }
    else
    {
      return 0;
    }
  }
  return (int *)v4;
}

int *sub_152B4(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  int v5;
  int *v6;

  v5 = a1;
  v6 = (int *)sub_CFF0(a3, a1);
  return agxps_timeseries_max_st(v5, a2, (int *)a3, v6, 1);
}

int *agxps_timeseries_max_st(int a1, unint64_t a2, int *a3, int *a4, int a5)
{
  int *result;
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  unsigned __int8 *v22;
  double *v23;
  unsigned int v24;
  double v25;
  unint64_t *v26;
  double *v27;
  unint64_t v28;
  double v29;
  unsigned __int8 *v30;
  double *v31;
  unsigned int v32;
  double v33;
  unint64_t *v34;
  double *v35;
  unint64_t v36;
  double v37;
  unsigned __int8 *v38;
  double *v39;
  unsigned int v40;
  double v41;
  unint64_t *v42;
  double *v43;
  unint64_t v44;
  double v45;
  double *v46;
  _BYTE *v47;
  double v48;
  int v49;
  double *v50;
  unint64_t *v51;
  double v52;
  unint64_t v53;
  double *v54;
  _BYTE *v55;
  double v56;
  int v57;
  double *v58;
  unint64_t *v59;
  double v60;
  unint64_t v61;
  double *v62;
  _BYTE *v63;
  double v64;
  int v65;
  double *v66;
  unint64_t *v67;
  double v68;
  unint64_t v69;
  unsigned __int8 *v70;
  _BYTE *v71;
  char v72;
  unsigned int v73;
  unsigned __int8 *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned int v77;
  unsigned __int8 *v78;
  _BYTE *v79;
  char v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned __int8 *v86;
  _BYTE *v87;
  char v88;
  unsigned int v89;
  unsigned __int8 *v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned __int8 *v94;
  _BYTE *v95;
  char v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unsigned __int8 *v102;
  _BYTE *v103;
  char v104;
  unsigned int v105;
  unsigned __int8 *v106;
  unint64_t *v107;
  unint64_t v108;
  unsigned int v109;
  unsigned __int8 *v110;
  _BYTE *v111;
  char v112;
  unsigned int v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  double *v118;
  double *v119;
  double v120;
  double v121;
  double *v122;
  double *v123;
  double v124;
  double v125;
  double *v126;
  double *v127;
  double v128;
  double v129;
  unsigned __int8 *v130;
  double *v131;
  unsigned int v132;
  double v133;
  unint64_t *v134;
  double *v135;
  unint64_t v136;
  double v137;
  unsigned __int8 *v138;
  double *v139;
  unsigned int v140;
  double v141;
  unint64_t *v142;
  double *v143;
  unint64_t v144;
  double v145;
  unsigned __int8 *v146;
  double *v147;
  unsigned int v148;
  double v149;
  unint64_t *v150;
  double *v151;
  unint64_t v152;
  double v153;
  double *v154;
  _BYTE *v155;
  double v156;
  int v157;
  double *v158;
  unint64_t *v159;
  double v160;
  unint64_t v161;
  double *v162;
  _BYTE *v163;
  double v164;
  int v165;
  double *v166;
  unint64_t *v167;
  double v168;
  unint64_t v169;
  double *v170;
  _BYTE *v171;
  double v172;
  int v173;
  double *v174;
  unint64_t *v175;
  double v176;
  unint64_t v177;
  unsigned __int8 *v178;
  _BYTE *v179;
  char v180;
  unsigned int v181;
  unsigned __int8 *v182;
  unint64_t *v183;
  unint64_t v184;
  unsigned int v185;
  unsigned __int8 *v186;
  _BYTE *v187;
  char v188;
  unsigned int v189;
  unint64_t *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  unsigned __int8 *v194;
  _BYTE *v195;
  char v196;
  unsigned int v197;
  unsigned __int8 *v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned __int8 *v202;
  _BYTE *v203;
  char v204;
  unsigned int v205;
  unint64_t *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unsigned __int8 *v210;
  _BYTE *v211;
  char v212;
  unsigned int v213;
  unsigned __int8 *v214;
  unint64_t *v215;
  unint64_t v216;
  unsigned int v217;
  unsigned __int8 *v218;
  _BYTE *v219;
  char v220;
  unsigned int v221;
  unint64_t *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;

  result = 0;
  if (a3 && a4)
  {
    if (*((_BYTE *)a4 + 32))
      return 0;
    v7 = *((_QWORD *)a3 + 1);
    if (v7 != *((_QWORD *)a4 + 1))
    {
      return 0;
    }
    else
    {
      v8 = *a3;
      v9 = *a4;
      switch(a1)
      {
        case 2:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v194 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v195 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v197 = *v194++;
                        v196 = v197;
                        if (a2 > v197)
                          v196 = a2;
                        *v195++ = v196;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v86 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v87 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v89 = *v86++;
                      v88 = v89;
                      if (a2 > v89)
                        v88 = a2;
                      *v87++ = v88;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v198 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v199 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v201 = *v198++;
                        v200 = v201;
                        if (a2 > (unint64_t)v201)
                          v200 = a2;
                        *v199++ = v200;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v90 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v91 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v93 = *v90++;
                      v92 = v93;
                      if (a2 > (unint64_t)v93)
                        v92 = a2;
                      *v91++ = v92;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v138 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v139 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v140 = *v138++;
                        v141 = (double)v140;
                        if ((double)a2 > (double)v140)
                          v141 = (double)a2;
                        *v139++ = v141;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v30 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v31 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v32 = *v30++;
                      v33 = (double)v32;
                      if ((double)a2 > (double)v32)
                        v33 = (double)a2;
                      *v31++ = v33;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v202 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v203 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v205 = *v202;
                        v202 += 8;
                        v204 = v205;
                        if (a2 > v205)
                          v204 = a2;
                        *v203++ = v204;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v94 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v95 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v97 = *v94;
                      v94 += 8;
                      v96 = v97;
                      if (a2 > v97)
                        v96 = a2;
                      *v95++ = v96;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v206 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v207 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v209 = *v206++;
                        v208 = v209;
                        if (a2 > v209)
                          v208 = a2;
                        *v207++ = v208;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v98 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v99 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v101 = *v98++;
                      v100 = v101;
                      if (a2 > v101)
                        v100 = a2;
                      *v99++ = v100;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v142 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v143 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v144 = *v142++;
                        v145 = (double)v144;
                        if ((double)a2 > (double)v144)
                          v145 = (double)a2;
                        *v143++ = v145;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v34 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v35 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v36 = *v34++;
                      v37 = (double)v36;
                      if ((double)a2 > (double)v36)
                        v37 = (double)a2;
                      *v35++ = v37;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v162 = (double *)*((_QWORD *)a3 + 2);
                      v163 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v164 = *v162++;
                        v165 = (int)v164;
                        if (a2 > (int)v164)
                          LOBYTE(v165) = a2;
                        *v163++ = v165;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v54 = (double *)*((_QWORD *)a3 + 2);
                    v55 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v56 = *v54++;
                      v57 = (int)v56;
                      if (a2 > (int)v56)
                        LOBYTE(v57) = a2;
                      *v55++ = v57;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v166 = (double *)*((_QWORD *)a3 + 2);
                      v167 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v168 = *v166++;
                        v169 = (unint64_t)v168;
                        if (a2 > (unint64_t)v168)
                          v169 = a2;
                        *v167++ = v169;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v58 = (double *)*((_QWORD *)a3 + 2);
                    v59 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v60 = *v58++;
                      v61 = (unint64_t)v60;
                      if (a2 > (unint64_t)v60)
                        v61 = a2;
                      *v59++ = v61;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v122 = (double *)*((_QWORD *)a3 + 2);
                      v123 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v124 = *v122++;
                        v125 = v124;
                        if (v124 < (double)a2)
                          v125 = (double)a2;
                        *v123++ = v125;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v14 = (double *)*((_QWORD *)a3 + 2);
                    v15 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v16 = *v14++;
                      v17 = v16;
                      if (v16 < (double)a2)
                        v17 = (double)a2;
                      *v15++ = v17;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v210 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v211 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v213 = *v210++;
                        v212 = v213;
                        if (a2 > v213)
                          v212 = a2;
                        *v211++ = v212;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v102 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v103 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v105 = *v102++;
                      v104 = v105;
                      if (a2 > v105)
                        v104 = a2;
                      *v103++ = v104;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v214 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v215 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v217 = *v214++;
                        v216 = v217;
                        if (a2 > v217)
                          v216 = a2;
                        *v215++ = v216;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v106 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v107 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v109 = *v106++;
                      v108 = v109;
                      if (a2 > v109)
                        v108 = a2;
                      *v107++ = v108;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v146 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v147 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v148 = *v146++;
                        v149 = (double)v148;
                        if ((double)a2 > (double)v148)
                          v149 = (double)a2;
                        *v147++ = v149;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v38 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v39 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v40 = *v38++;
                      v41 = (double)v40;
                      if ((double)a2 > (double)v40)
                        v41 = (double)a2;
                      *v39++ = v41;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v218 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v219 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v221 = *v218;
                        v218 += 8;
                        v220 = v221;
                        if (a2 > v221)
                          v220 = a2;
                        *v219++ = v220;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v110 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v111 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v113 = *v110;
                      v110 += 8;
                      v112 = v113;
                      if (a2 > v113)
                        v112 = a2;
                      *v111++ = v112;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v222 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v223 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v225 = *v222++;
                        v224 = v225;
                        if (a2 > v225)
                          v224 = a2;
                        *v223++ = v224;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v114 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v115 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v117 = *v114++;
                      v116 = v117;
                      if (a2 > v117)
                        v116 = a2;
                      *v115++ = v116;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v150 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v151 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v152 = *v150++;
                        v153 = (double)v152;
                        if ((double)a2 > (double)v152)
                          v153 = (double)a2;
                        *v151++ = v153;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v42 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v43 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v44 = *v42++;
                      v45 = (double)v44;
                      if ((double)a2 > (double)v44)
                        v45 = (double)a2;
                      *v43++ = v45;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v170 = (double *)*((_QWORD *)a3 + 2);
                      v171 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v172 = *v170++;
                        v173 = (int)v172;
                        if (a2 > (int)v172)
                          LOBYTE(v173) = a2;
                        *v171++ = v173;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v62 = (double *)*((_QWORD *)a3 + 2);
                    v63 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v64 = *v62++;
                      v65 = (int)v64;
                      if (a2 > (int)v64)
                        LOBYTE(v65) = a2;
                      *v63++ = v65;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v174 = (double *)*((_QWORD *)a3 + 2);
                      v175 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v176 = *v174++;
                        v177 = (unint64_t)v176;
                        if (a2 > (unint64_t)v176)
                          v177 = a2;
                        *v175++ = v177;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v66 = (double *)*((_QWORD *)a3 + 2);
                    v67 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v68 = *v66++;
                      v69 = (unint64_t)v68;
                      if (a2 > (unint64_t)v68)
                        v69 = a2;
                      *v67++ = v69;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v126 = (double *)*((_QWORD *)a3 + 2);
                      v127 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v128 = *v126++;
                        v129 = v128;
                        if (v128 < (double)a2)
                          v129 = (double)a2;
                        *v127++ = v129;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v18 = (double *)*((_QWORD *)a3 + 2);
                    v19 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v20 = *v18++;
                      v21 = v20;
                      if (v20 < (double)a2)
                        v21 = (double)a2;
                      *v19++ = v21;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v8)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v178 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v179 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v181 = *v178++;
                        v180 = v181;
                        if ((int)*(double *)&a2 > v181)
                          v180 = (int)*(double *)&a2;
                        *v179++ = v180;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v70 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v71 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v73 = *v70++;
                      v72 = v73;
                      if ((int)*(double *)&a2 > v73)
                        v72 = (int)*(double *)&a2;
                      *v71++ = v72;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v182 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v183 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v185 = *v182++;
                        v184 = v185;
                        if ((unint64_t)*(double *)&a2 > v185)
                          v184 = (unint64_t)*(double *)&a2;
                        *v183++ = v184;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v74 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v75 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v77 = *v74++;
                      v76 = v77;
                      if ((unint64_t)*(double *)&a2 > v77)
                        v76 = (unint64_t)*(double *)&a2;
                      *v75++ = v76;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v130 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v131 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v132 = *v130++;
                        v133 = (double)v132;
                        if (*(double *)&a2 > (double)v132)
                          v133 = *(double *)&a2;
                        *v131++ = v133;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v22 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v23 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v24 = *v22++;
                      v25 = (double)v24;
                      if (*(double *)&a2 > (double)v24)
                        v25 = *(double *)&a2;
                      *v23++ = v25;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v186 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v187 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v189 = *v186;
                        v186 += 8;
                        v188 = v189;
                        if ((int)*(double *)&a2 > v189)
                          v188 = (int)*(double *)&a2;
                        *v187++ = v188;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v78 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v79 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v81 = *v78;
                      v78 += 8;
                      v80 = v81;
                      if ((int)*(double *)&a2 > v81)
                        v80 = (int)*(double *)&a2;
                      *v79++ = v80;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v190 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v191 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v193 = *v190++;
                        v192 = v193;
                        if ((unint64_t)*(double *)&a2 > v193)
                          v192 = (unint64_t)*(double *)&a2;
                        *v191++ = v192;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v82 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v83 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v85 = *v82++;
                      v84 = v85;
                      if ((unint64_t)*(double *)&a2 > v85)
                        v84 = (unint64_t)*(double *)&a2;
                      *v83++ = v84;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v134 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v135 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v136 = *v134++;
                        v137 = (double)v136;
                        if (*(double *)&a2 > (double)v136)
                          v137 = *(double *)&a2;
                        *v135++ = v137;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v26 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v27 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v28 = *v26++;
                      v29 = (double)v28;
                      if (*(double *)&a2 > (double)v28)
                        v29 = *(double *)&a2;
                      *v27++ = v29;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v154 = (double *)*((_QWORD *)a3 + 2);
                      v155 = (_BYTE *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v156 = *v154++;
                        v157 = (int)v156;
                        if ((int)*(double *)&a2 > (int)v156)
                          LOBYTE(v157) = (int)*(double *)&a2;
                        *v155++ = v157;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v46 = (double *)*((_QWORD *)a3 + 2);
                    v47 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v48 = *v46++;
                      v49 = (int)v48;
                      if ((int)*(double *)&a2 > (int)v48)
                        LOBYTE(v49) = (int)*(double *)&a2;
                      *v47++ = v49;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v158 = (double *)*((_QWORD *)a3 + 2);
                      v159 = (unint64_t *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v160 = *v158++;
                        v161 = (unint64_t)v160;
                        if ((unint64_t)*(double *)&a2 > (unint64_t)v160)
                          v161 = (unint64_t)*(double *)&a2;
                        *v159++ = v161;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v50 = (double *)*((_QWORD *)a3 + 2);
                    v51 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v52 = *v50++;
                      v53 = (unint64_t)v52;
                      if ((unint64_t)*(double *)&a2 > (unint64_t)v52)
                        v53 = (unint64_t)*(double *)&a2;
                      *v51++ = v53;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v7)
                    {
                      v118 = (double *)*((_QWORD *)a3 + 2);
                      v119 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v120 = *v118++;
                        v121 = v120;
                        if (v120 < *(double *)&a2)
                          v121 = *(double *)&a2;
                        *v119++ = v121;
                        --v7;
                      }
                      while (v7);
                    }
                  }
                  else if (!a5 && v7)
                  {
                    v10 = (double *)*((_QWORD *)a3 + 2);
                    v11 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v12 = *v10++;
                      v13 = v12;
                      if (v12 < *(double *)&a2)
                        v13 = *(double *)&a2;
                      *v11++ = v13;
                      --v7;
                    }
                    while (v7);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return a4;
    }
  }
  return result;
}

int *sub_15F1C(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  int v4;
  int *v6;

  v4 = a2;
  v6 = (int *)sub_CFF0(a1, a2);
  return agxps_timeseries_max_ts((int *)a1, v4, a3, v6, 1);
}

int *agxps_timeseries_max_ts(int *a1, int a2, unint64_t a3, int *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  unsigned __int8 *v14;
  double *v15;
  unsigned int v16;
  double v17;
  unint64_t *v18;
  double *v19;
  unint64_t v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double v29;
  unsigned __int8 *v30;
  double *v31;
  unsigned int v32;
  double v33;
  unsigned __int8 *v34;
  double *v35;
  unsigned int v36;
  double v37;
  unint64_t *v38;
  double *v39;
  unint64_t v40;
  double v41;
  unint64_t *v42;
  double *v43;
  unint64_t v44;
  double v45;
  double *v46;
  _BYTE *v47;
  double v48;
  int v49;
  double *v50;
  unint64_t *v51;
  double v52;
  unint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  char v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int v61;
  unsigned __int8 *v62;
  _BYTE *v63;
  char v64;
  unsigned int v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  double *v70;
  _BYTE *v71;
  double v72;
  int v73;
  double *v74;
  unint64_t *v75;
  double v76;
  unint64_t v77;
  double *v78;
  _BYTE *v79;
  double v80;
  int v81;
  double *v82;
  unint64_t *v83;
  double v84;
  unint64_t v85;
  unsigned __int8 *v86;
  _BYTE *v87;
  char v88;
  unsigned int v89;
  unsigned __int8 *v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned __int8 *v94;
  _BYTE *v95;
  char v96;
  unsigned int v97;
  unsigned __int8 *v98;
  unint64_t *v99;
  unint64_t v100;
  unsigned int v101;
  unsigned __int8 *v102;
  _BYTE *v103;
  char v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  _BYTE *v111;
  char v112;
  unsigned int v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  double *v118;
  double *v119;
  double v120;
  double v121;
  unsigned __int8 *v122;
  double *v123;
  unsigned int v124;
  double v125;
  unint64_t *v126;
  double *v127;
  unint64_t v128;
  double v129;
  double *v130;
  double *v131;
  double v132;
  double v133;
  double *v134;
  double *v135;
  double v136;
  double v137;
  unsigned __int8 *v138;
  double *v139;
  unsigned int v140;
  double v141;
  unsigned __int8 *v142;
  double *v143;
  unsigned int v144;
  double v145;
  unint64_t *v146;
  double *v147;
  unint64_t v148;
  double v149;
  unint64_t *v150;
  double *v151;
  unint64_t v152;
  double v153;
  double *v154;
  _BYTE *v155;
  double v156;
  int v157;
  double *v158;
  unint64_t *v159;
  double v160;
  unint64_t v161;
  unsigned __int8 *v162;
  _BYTE *v163;
  char v164;
  unsigned int v165;
  unsigned __int8 *v166;
  unint64_t *v167;
  unint64_t v168;
  unsigned int v169;
  unsigned __int8 *v170;
  _BYTE *v171;
  char v172;
  unsigned int v173;
  unint64_t *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  double *v178;
  _BYTE *v179;
  double v180;
  int v181;
  double *v182;
  unint64_t *v183;
  double v184;
  unint64_t v185;
  double *v186;
  _BYTE *v187;
  double v188;
  int v189;
  double *v190;
  unint64_t *v191;
  double v192;
  unint64_t v193;
  unsigned __int8 *v194;
  _BYTE *v195;
  char v196;
  unsigned int v197;
  unsigned __int8 *v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned __int8 *v202;
  _BYTE *v203;
  char v204;
  unsigned int v205;
  unsigned __int8 *v206;
  unint64_t *v207;
  unint64_t v208;
  unsigned int v209;
  unsigned __int8 *v210;
  _BYTE *v211;
  char v212;
  unsigned int v213;
  unint64_t *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  _BYTE *v219;
  char v220;
  unsigned int v221;
  unint64_t *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;

  v5 = 0;
  if (a1 && a4)
  {
    if (*((_BYTE *)a4 + 32))
      return 0;
    v6 = *((_QWORD *)a1 + 1);
    if (v6 != *((_QWORD *)a4 + 1))
    {
      return 0;
    }
    else
    {
      v7 = *a1;
      v8 = *a4;
      if (*a1 == 2)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v194 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v195 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v197 = *v194++;
                      v196 = v197;
                      if (v197 <= a3)
                        v196 = a3;
                      *v195++ = v196;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v86 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v87 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v89 = *v86++;
                    v88 = v89;
                    if (v89 <= a3)
                      v88 = a3;
                    *v87++ = v88;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v198 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v199 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v201 = *v198++;
                      v200 = v201;
                      if (v201 <= (unint64_t)a3)
                        v200 = a3;
                      *v199++ = v200;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v90 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v91 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v93 = *v90++;
                    v92 = v93;
                    if (v93 <= (unint64_t)a3)
                      v92 = a3;
                    *v91++ = v92;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v138 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v139 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v140 = *v138++;
                      v141 = (double)v140;
                      if ((double)v140 <= (double)a3)
                        v141 = (double)a3;
                      *v139++ = v141;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v30 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v31 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v32 = *v30++;
                    v33 = (double)v32;
                    if ((double)v32 <= (double)a3)
                      v33 = (double)a3;
                    *v31++ = v33;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v202 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v203 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v205 = *v202++;
                      v204 = v205;
                      if (v205 <= a3)
                        v204 = a3;
                      *v203++ = v204;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v94 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v95 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v97 = *v94++;
                    v96 = v97;
                    if (v97 <= a3)
                      v96 = a3;
                    *v95++ = v96;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v206 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v207 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v209 = *v206++;
                      v208 = v209;
                      if (v209 <= a3)
                        v208 = a3;
                      *v207++ = v208;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v98 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v99 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v101 = *v98++;
                    v100 = v101;
                    if (v101 <= a3)
                      v100 = a3;
                    *v99++ = v100;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v142 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v143 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v144 = *v142++;
                      v145 = (double)v144;
                      if ((double)v144 <= (double)a3)
                        v145 = (double)a3;
                      *v143++ = v145;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v34 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v35 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v36 = *v34++;
                    v37 = (double)v36;
                    if ((double)v36 <= (double)a3)
                      v37 = (double)a3;
                    *v35++ = v37;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v162 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v163 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v165 = *v162++;
                      v164 = v165;
                      if (v165 <= (int)*(double *)&a3)
                        v164 = (int)*(double *)&a3;
                      *v163++ = v164;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v54 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v55 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v57 = *v54++;
                    v56 = v57;
                    if (v57 <= (int)*(double *)&a3)
                      v56 = (int)*(double *)&a3;
                    *v55++ = v56;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v166 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v167 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v169 = *v166++;
                      v168 = v169;
                      if (v169 <= (unint64_t)*(double *)&a3)
                        v168 = (unint64_t)*(double *)&a3;
                      *v167++ = v168;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v58 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v59 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v61 = *v58++;
                    v60 = v61;
                    if (v61 <= (unint64_t)*(double *)&a3)
                      v60 = (unint64_t)*(double *)&a3;
                    *v59++ = v60;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v122 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v123 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v124 = *v122++;
                      v125 = (double)v124;
                      if (*(double *)&a3 >= (double)v124)
                        v125 = *(double *)&a3;
                      *v123++ = v125;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v14 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v15 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v16 = *v14++;
                    v17 = (double)v16;
                    if (*(double *)&a3 >= (double)v16)
                      v17 = *(double *)&a3;
                    *v15++ = v17;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (v7 == 1)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v210 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v211 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v213 = *v210;
                      v210 += 8;
                      v212 = v213;
                      if (v213 <= a3)
                        v212 = a3;
                      *v211++ = v212;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v102 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v103 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v105 = *v102;
                    v102 += 8;
                    v104 = v105;
                    if (v105 <= a3)
                      v104 = a3;
                    *v103++ = v104;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v214 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v215 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v217 = *v214++;
                      v216 = v217;
                      if (v217 <= a3)
                        v216 = a3;
                      *v215++ = v216;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v106 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v107 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v109 = *v106++;
                    v108 = v109;
                    if (v109 <= a3)
                      v108 = a3;
                    *v107++ = v108;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v146 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v147 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v148 = *v146++;
                      v149 = (double)v148;
                      if ((double)v148 <= (double)a3)
                        v149 = (double)a3;
                      *v147++ = v149;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v38 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v39 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v40 = *v38++;
                    v41 = (double)v40;
                    if ((double)v40 <= (double)a3)
                      v41 = (double)a3;
                    *v39++ = v41;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v218 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v219 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v221 = *v218;
                      v218 += 8;
                      v220 = v221;
                      if (v221 <= a3)
                        v220 = a3;
                      *v219++ = v220;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v110 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v111 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v113 = *v110;
                    v110 += 8;
                    v112 = v113;
                    if (v113 <= a3)
                      v112 = a3;
                    *v111++ = v112;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v222 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v223 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v225 = *v222++;
                      v224 = v225;
                      if (v225 <= a3)
                        v224 = a3;
                      *v223++ = v224;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v114 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v115 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v117 = *v114++;
                    v116 = v117;
                    if (v117 <= a3)
                      v116 = a3;
                    *v115++ = v116;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v150 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v151 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v152 = *v150++;
                      v153 = (double)v152;
                      if ((double)v152 <= (double)a3)
                        v153 = (double)a3;
                      *v151++ = v153;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v42 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v43 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v44 = *v42++;
                    v45 = (double)v44;
                    if ((double)v44 <= (double)a3)
                      v45 = (double)a3;
                    *v43++ = v45;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v170 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                    v171 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v173 = *v170;
                      v170 += 8;
                      v172 = v173;
                      if (v173 <= (int)*(double *)&a3)
                        v172 = (int)*(double *)&a3;
                      *v171++ = v172;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v62 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  v63 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v65 = *v62;
                    v62 += 8;
                    v64 = v65;
                    if (v65 <= (int)*(double *)&a3)
                      v64 = (int)*(double *)&a3;
                    *v63++ = v64;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v174 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v175 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v177 = *v174++;
                      v176 = v177;
                      if (v177 <= (unint64_t)*(double *)&a3)
                        v176 = (unint64_t)*(double *)&a3;
                      *v175++ = v176;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v66 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v67 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v69 = *v66++;
                    v68 = v69;
                    if (v69 <= (unint64_t)*(double *)&a3)
                      v68 = (unint64_t)*(double *)&a3;
                    *v67++ = v68;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v126 = (unint64_t *)*((_QWORD *)a1 + 2);
                    v127 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v128 = *v126++;
                      v129 = (double)v128;
                      if (*(double *)&a3 >= (double)v128)
                        v129 = *(double *)&a3;
                      *v127++ = v129;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v18 = (unint64_t *)*((_QWORD *)a1 + 2);
                  v19 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v20 = *v18++;
                    v21 = (double)v20;
                    if (*(double *)&a3 >= (double)v20)
                      v21 = *(double *)&a3;
                    *v19++ = v21;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      else if (!v7)
      {
        switch(a2)
        {
          case 2:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v178 = (double *)*((_QWORD *)a1 + 2);
                    v179 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v180 = *v178++;
                      v181 = (int)v180;
                      if ((int)v180 <= a3)
                        LOBYTE(v181) = a3;
                      *v179++ = v181;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v70 = (double *)*((_QWORD *)a1 + 2);
                  v71 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v72 = *v70++;
                    v73 = (int)v72;
                    if ((int)v72 <= a3)
                      LOBYTE(v73) = a3;
                    *v71++ = v73;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v182 = (double *)*((_QWORD *)a1 + 2);
                    v183 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v184 = *v182++;
                      v185 = (unint64_t)v184;
                      if ((unint64_t)v184 <= a3)
                        v185 = a3;
                      *v183++ = v185;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v74 = (double *)*((_QWORD *)a1 + 2);
                  v75 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v76 = *v74++;
                    v77 = (unint64_t)v76;
                    if ((unint64_t)v76 <= a3)
                      v77 = a3;
                    *v75++ = v77;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v130 = (double *)*((_QWORD *)a1 + 2);
                    v131 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v132 = *v130++;
                      v133 = v132;
                      if (v132 <= (double)a3)
                        v133 = (double)a3;
                      *v131++ = v133;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v22 = (double *)*((_QWORD *)a1 + 2);
                  v23 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v24 = *v22++;
                    v25 = v24;
                    if (v24 <= (double)a3)
                      v25 = (double)a3;
                    *v23++ = v25;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 1:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v186 = (double *)*((_QWORD *)a1 + 2);
                    v187 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v188 = *v186++;
                      v189 = (int)v188;
                      if ((int)v188 <= a3)
                        LOBYTE(v189) = a3;
                      *v187++ = v189;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v78 = (double *)*((_QWORD *)a1 + 2);
                  v79 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v80 = *v78++;
                    v81 = (int)v80;
                    if ((int)v80 <= a3)
                      LOBYTE(v81) = a3;
                    *v79++ = v81;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v190 = (double *)*((_QWORD *)a1 + 2);
                    v191 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v192 = *v190++;
                      v193 = (unint64_t)v192;
                      if ((unint64_t)v192 <= a3)
                        v193 = a3;
                      *v191++ = v193;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v82 = (double *)*((_QWORD *)a1 + 2);
                  v83 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v84 = *v82++;
                    v85 = (unint64_t)v84;
                    if ((unint64_t)v84 <= a3)
                      v85 = a3;
                    *v83++ = v85;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v134 = (double *)*((_QWORD *)a1 + 2);
                    v135 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v136 = *v134++;
                      v137 = v136;
                      if (v136 <= (double)a3)
                        v137 = (double)a3;
                      *v135++ = v137;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v26 = (double *)*((_QWORD *)a1 + 2);
                  v27 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v28 = *v26++;
                    v29 = v28;
                    if (v28 <= (double)a3)
                      v29 = (double)a3;
                    *v27++ = v29;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
          case 0:
            switch(v8)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v154 = (double *)*((_QWORD *)a1 + 2);
                    v155 = (_BYTE *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v156 = *v154++;
                      v157 = (int)v156;
                      if ((int)v156 <= (int)*(double *)&a3)
                        LOBYTE(v157) = (int)*(double *)&a3;
                      *v155++ = v157;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v46 = (double *)*((_QWORD *)a1 + 2);
                  v47 = (_BYTE *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v48 = *v46++;
                    v49 = (int)v48;
                    if ((int)v48 <= (int)*(double *)&a3)
                      LOBYTE(v49) = (int)*(double *)&a3;
                    *v47++ = v49;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v158 = (double *)*((_QWORD *)a1 + 2);
                    v159 = (unint64_t *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v160 = *v158++;
                      v161 = (unint64_t)v160;
                      if ((unint64_t)v160 <= (unint64_t)*(double *)&a3)
                        v161 = (unint64_t)*(double *)&a3;
                      *v159++ = v161;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v50 = (double *)*((_QWORD *)a1 + 2);
                  v51 = (unint64_t *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v52 = *v50++;
                    v53 = (unint64_t)v52;
                    if ((unint64_t)v52 <= (unint64_t)*(double *)&a3)
                      v53 = (unint64_t)*(double *)&a3;
                    *v51++ = v53;
                    --v6;
                  }
                  while (v6);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v6)
                  {
                    v118 = (double *)*((_QWORD *)a1 + 2);
                    v119 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v120 = *v118++;
                      v121 = v120;
                      if (v120 <= *(double *)&a3)
                        v121 = *(double *)&a3;
                      *v119++ = v121;
                      --v6;
                    }
                    while (v6);
                  }
                }
                else if (!a5 && v6)
                {
                  v9 = (double *)*((_QWORD *)a1 + 2);
                  v10 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v11 = *v9++;
                    v12 = v11;
                    if (v11 <= *(double *)&a3)
                      v12 = *(double *)&a3;
                    *v10++ = v12;
                    --v6;
                  }
                  while (v6);
                }
                break;
            }
            break;
        }
      }
      return a4;
    }
  }
  return (int *)v5;
}

int *sub_16B7C(int *result, int *a2, int *a3, int *a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  double *v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  double *v42;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  double *v53;
  double *v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  double *v64;
  double *v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  unsigned __int8 *v71;
  double *v72;
  double *v73;
  unsigned int v74;
  double v75;
  double v76;
  double v77;
  unint64_t *v78;
  double *v79;
  double *v80;
  unint64_t v81;
  unint64_t v82;
  double v83;
  double v84;
  unsigned __int8 *v85;
  double *v86;
  double *v87;
  unsigned int v88;
  double v89;
  double v90;
  double v91;
  unint64_t *v92;
  double *v93;
  double *v94;
  unint64_t v95;
  unint64_t v96;
  double v97;
  double v98;
  unsigned __int8 *v99;
  double *v100;
  double *v101;
  unsigned int v102;
  double v103;
  double v104;
  double v105;
  unint64_t *v106;
  double *v107;
  double *v108;
  unint64_t v109;
  unint64_t v110;
  double v111;
  double v112;
  unsigned __int8 *v113;
  double *v114;
  double *v115;
  unsigned int v116;
  double v117;
  double v118;
  double v119;
  unint64_t *v120;
  double *v121;
  double *v122;
  unint64_t v123;
  unint64_t v124;
  double v125;
  double v126;
  unsigned __int8 *v127;
  double *v128;
  double *v129;
  unsigned int v130;
  double v131;
  double v132;
  double v133;
  unint64_t *v134;
  double *v135;
  double *v136;
  unint64_t v137;
  unint64_t v138;
  double v139;
  double v140;
  unsigned __int8 *v141;
  double *v142;
  double *v143;
  unsigned int v144;
  double v145;
  double v146;
  double v147;
  unint64_t *v148;
  double *v149;
  double *v150;
  unint64_t v151;
  unint64_t v152;
  double v153;
  double v154;
  double *v155;
  unsigned __int8 *v156;
  double *v157;
  double v158;
  double v159;
  double v160;
  double *v161;
  unint64_t *v162;
  double *v163;
  double v164;
  double v165;
  unint64_t v166;
  double v167;
  double *v168;
  unsigned __int8 *v169;
  double *v170;
  double v171;
  double v172;
  double v173;
  double *v174;
  unint64_t *v175;
  double *v176;
  double v177;
  double v178;
  unint64_t v179;
  double v180;
  double *v181;
  unsigned __int8 *v182;
  double *v183;
  double v184;
  double v185;
  double v186;
  double *v187;
  unint64_t *v188;
  double *v189;
  double v190;
  double v191;
  unint64_t v192;
  double v193;
  double *v194;
  unsigned __int8 *v195;
  double *v196;
  double v197;
  double v198;
  double v199;
  double *v200;
  unint64_t *v201;
  double *v202;
  double v203;
  double v204;
  unint64_t v205;
  double v206;
  double *v207;
  unsigned __int8 *v208;
  double *v209;
  double v210;
  double v211;
  double v212;
  double *v213;
  unint64_t *v214;
  double *v215;
  double v216;
  double v217;
  unint64_t v218;
  double v219;
  double *v220;
  unsigned __int8 *v221;
  double *v222;
  double v223;
  double v224;
  double v225;
  double *v226;
  unint64_t *v227;
  double *v228;
  double v229;
  double v230;
  unint64_t v231;
  double v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  double *v235;
  int v236;
  int v237;
  int v238;
  double v239;
  unsigned __int8 *v240;
  unint64_t *v241;
  double *v242;
  unsigned int v243;
  double v244;
  unint64_t v245;
  double v246;
  unint64_t *v247;
  unsigned __int8 *v248;
  double *v249;
  unint64_t v250;
  unint64_t v251;
  double v252;
  unint64_t *v253;
  unint64_t *v254;
  double *v255;
  unint64_t v256;
  double v257;
  unint64_t v258;
  double v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  double *v262;
  int v263;
  int v264;
  int v265;
  double v266;
  unsigned __int8 *v267;
  unint64_t *v268;
  double *v269;
  unsigned int v270;
  double v271;
  unint64_t v272;
  double v273;
  unint64_t *v274;
  unsigned __int8 *v275;
  double *v276;
  unint64_t v277;
  unint64_t v278;
  double v279;
  unint64_t *v280;
  unint64_t *v281;
  double *v282;
  unint64_t v283;
  double v284;
  unint64_t v285;
  double v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  double *v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  double v293;
  unsigned __int8 *v294;
  unint64_t *v295;
  double *v296;
  unsigned int v297;
  double v298;
  unint64_t v299;
  double v300;
  unint64_t *v301;
  unsigned __int8 *v302;
  double *v303;
  unint64_t v304;
  unint64_t v305;
  double v306;
  unint64_t *v307;
  unint64_t *v308;
  double *v309;
  unint64_t v310;
  double v311;
  unint64_t v312;
  double v313;
  unsigned __int8 *v314;
  unsigned __int8 *v315;
  double *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  double v320;
  unsigned __int8 *v321;
  unint64_t *v322;
  double *v323;
  unsigned int v324;
  double v325;
  unint64_t v326;
  double v327;
  unint64_t *v328;
  unsigned __int8 *v329;
  double *v330;
  unint64_t v331;
  unint64_t v332;
  double v333;
  unint64_t *v334;
  unint64_t *v335;
  double *v336;
  unint64_t v337;
  double v338;
  unint64_t v339;
  double v340;
  unsigned __int8 *v341;
  unsigned __int8 *v342;
  double *v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  double v347;
  unsigned __int8 *v348;
  unint64_t *v349;
  double *v350;
  unsigned int v351;
  double v352;
  unint64_t v353;
  double v354;
  unint64_t *v355;
  unsigned __int8 *v356;
  double *v357;
  unint64_t v358;
  unint64_t v359;
  double v360;
  unint64_t *v361;
  unint64_t *v362;
  double *v363;
  unint64_t v364;
  double v365;
  unint64_t v366;
  double v367;
  unsigned __int8 *v368;
  unsigned __int8 *v369;
  double *v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  double v374;
  unsigned __int8 *v375;
  unint64_t *v376;
  double *v377;
  unsigned int v378;
  double v379;
  unint64_t v380;
  double v381;
  unint64_t *v382;
  unsigned __int8 *v383;
  double *v384;
  unint64_t v385;
  unint64_t v386;
  double v387;
  unint64_t *v388;
  unint64_t *v389;
  double *v390;
  unint64_t v391;
  double v392;
  unint64_t v393;
  double v394;
  double *v395;
  double *v396;
  BOOL *v397;
  double v398;
  int v399;
  double v400;
  double *v401;
  double *v402;
  _QWORD *v403;
  double v404;
  unint64_t v405;
  double v406;
  double *v407;
  double *v408;
  BOOL *v409;
  double v410;
  int v411;
  double v412;
  double *v413;
  double *v414;
  _QWORD *v415;
  double v416;
  unint64_t v417;
  double v418;
  double *v419;
  double *v420;
  BOOL *v421;
  double v422;
  unsigned int v423;
  double v424;
  double *v425;
  double *v426;
  _QWORD *v427;
  double v428;
  unint64_t v429;
  double v430;
  double *v431;
  double *v432;
  BOOL *v433;
  double v434;
  unsigned int v435;
  double v436;
  double *v437;
  double *v438;
  _QWORD *v439;
  double v440;
  unint64_t v441;
  double v442;
  double *v443;
  double *v444;
  BOOL *v445;
  double v446;
  unsigned int v447;
  double v448;
  double *v449;
  double *v450;
  _QWORD *v451;
  double v452;
  unint64_t v453;
  double v454;
  double *v455;
  double *v456;
  BOOL *v457;
  double v458;
  unsigned int v459;
  double v460;
  double *v461;
  double *v462;
  _QWORD *v463;
  double v464;
  unint64_t v465;
  double v466;
  unsigned __int8 *v467;
  double *v468;
  BOOL *v469;
  int v470;
  int v471;
  double v472;
  unsigned __int8 *v473;
  double *v474;
  _QWORD *v475;
  uint64_t v476;
  unsigned int v477;
  double v478;
  unsigned __int8 *v479;
  double *v480;
  BOOL *v481;
  int v482;
  int v483;
  double v484;
  uint64_t *v485;
  double *v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  double v490;
  unsigned __int8 *v491;
  double *v492;
  BOOL *v493;
  int v494;
  int v495;
  double v496;
  unsigned __int8 *v497;
  double *v498;
  _QWORD *v499;
  uint64_t v500;
  unsigned int v501;
  double v502;
  unsigned __int8 *v503;
  double *v504;
  BOOL *v505;
  int v506;
  int v507;
  double v508;
  uint64_t *v509;
  double *v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t v513;
  double v514;
  unsigned __int8 *v515;
  double *v516;
  BOOL *v517;
  unsigned int v518;
  unsigned int v519;
  double v520;
  unsigned __int8 *v521;
  double *v522;
  _QWORD *v523;
  unint64_t v524;
  unsigned int v525;
  double v526;
  unsigned __int8 *v527;
  double *v528;
  BOOL *v529;
  unsigned int v530;
  unsigned int v531;
  double v532;
  unint64_t *v533;
  double *v534;
  _QWORD *v535;
  unint64_t v536;
  unint64_t v537;
  double v538;
  unsigned __int8 *v539;
  double *v540;
  BOOL *v541;
  unsigned int v542;
  unsigned int v543;
  double v544;
  unsigned __int8 *v545;
  double *v546;
  _QWORD *v547;
  unint64_t v548;
  unsigned int v549;
  double v550;
  unsigned __int8 *v551;
  double *v552;
  BOOL *v553;
  unsigned int v554;
  unsigned int v555;
  double v556;
  unint64_t *v557;
  double *v558;
  _QWORD *v559;
  unint64_t v560;
  unint64_t v561;
  double v562;
  unsigned __int8 *v563;
  double *v564;
  BOOL *v565;
  unsigned int v566;
  unsigned int v567;
  double v568;
  unsigned __int8 *v569;
  double *v570;
  _QWORD *v571;
  unint64_t v572;
  unsigned int v573;
  double v574;
  unsigned __int8 *v575;
  double *v576;
  BOOL *v577;
  unsigned int v578;
  unsigned int v579;
  double v580;
  unint64_t *v581;
  double *v582;
  _QWORD *v583;
  unint64_t v584;
  unint64_t v585;
  double v586;
  unsigned __int8 *v587;
  double *v588;
  BOOL *v589;
  unsigned int v590;
  unsigned int v591;
  double v592;
  unsigned __int8 *v593;
  double *v594;
  _QWORD *v595;
  unint64_t v596;
  unsigned int v597;
  double v598;
  unsigned __int8 *v599;
  double *v600;
  BOOL *v601;
  unsigned int v602;
  unsigned int v603;
  double v604;
  unint64_t *v605;
  double *v606;
  _QWORD *v607;
  unint64_t v608;
  unint64_t v609;
  double v610;
  double *v611;
  unsigned __int8 *v612;
  BOOL *v613;
  double v614;
  int v615;
  double *v616;
  unsigned __int8 *v617;
  _QWORD *v618;
  double v619;
  unint64_t v620;
  double *v621;
  unsigned __int8 *v622;
  BOOL *v623;
  double v624;
  int v625;
  double *v626;
  uint64_t *v627;
  _QWORD *v628;
  double v629;
  unint64_t v630;
  uint64_t v631;
  double *v632;
  unsigned __int8 *v633;
  BOOL *v634;
  double v635;
  int v636;
  double *v637;
  unsigned __int8 *v638;
  _QWORD *v639;
  double v640;
  unint64_t v641;
  double *v642;
  unsigned __int8 *v643;
  BOOL *v644;
  double v645;
  int v646;
  double *v647;
  uint64_t *v648;
  _QWORD *v649;
  double v650;
  unint64_t v651;
  uint64_t v652;
  double *v653;
  unsigned __int8 *v654;
  BOOL *v655;
  double v656;
  unsigned int v657;
  double *v658;
  unsigned __int8 *v659;
  _QWORD *v660;
  double v661;
  unint64_t v662;
  double *v663;
  unsigned __int8 *v664;
  BOOL *v665;
  double v666;
  unsigned int v667;
  double *v668;
  unint64_t *v669;
  _QWORD *v670;
  double v671;
  unint64_t v672;
  unint64_t v673;
  double *v674;
  unsigned __int8 *v675;
  BOOL *v676;
  double v677;
  unsigned int v678;
  double *v679;
  unsigned __int8 *v680;
  _QWORD *v681;
  double v682;
  unint64_t v683;
  double *v684;
  unsigned __int8 *v685;
  BOOL *v686;
  double v687;
  unsigned int v688;
  double *v689;
  unint64_t *v690;
  _QWORD *v691;
  double v692;
  unint64_t v693;
  unint64_t v694;
  double *v695;
  unsigned __int8 *v696;
  BOOL *v697;
  double v698;
  unsigned int v699;
  double *v700;
  unsigned __int8 *v701;
  _QWORD *v702;
  double v703;
  unint64_t v704;
  double *v705;
  unsigned __int8 *v706;
  BOOL *v707;
  double v708;
  unsigned int v709;
  double *v710;
  unint64_t *v711;
  _QWORD *v712;
  double v713;
  unint64_t v714;
  unint64_t v715;
  double *v716;
  unsigned __int8 *v717;
  BOOL *v718;
  double v719;
  unsigned int v720;
  double *v721;
  unsigned __int8 *v722;
  _QWORD *v723;
  double v724;
  unint64_t v725;
  double *v726;
  unsigned __int8 *v727;
  BOOL *v728;
  double v729;
  unsigned int v730;
  double *v731;
  unint64_t *v732;
  _QWORD *v733;
  double v734;
  unint64_t v735;
  unint64_t v736;
  unsigned __int8 *v737;
  unsigned __int8 *v738;
  BOOL *v739;
  int v740;
  int v741;
  int v742;
  unsigned __int8 *v743;
  unsigned __int8 *v744;
  _QWORD *v745;
  int v746;
  int v747;
  int v748;
  unsigned __int8 *v749;
  unsigned __int8 *v750;
  BOOL *v751;
  int v752;
  int v753;
  int v754;
  unsigned __int8 *v755;
  uint64_t *v756;
  _QWORD *v757;
  uint64_t v758;
  unsigned int v759;
  uint64_t v760;
  unsigned __int8 *v761;
  unsigned __int8 *v762;
  BOOL *v763;
  int v764;
  int v765;
  int v766;
  uint64_t *v767;
  unsigned __int8 *v768;
  _QWORD *v769;
  uint64_t v770;
  uint64_t v771;
  unsigned __int8 *v772;
  unsigned __int8 *v773;
  BOOL *v774;
  int v775;
  int v776;
  int v777;
  uint64_t *v778;
  uint64_t *v779;
  _QWORD *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unsigned __int8 *v784;
  unsigned __int8 *v785;
  BOOL *v786;
  int v787;
  int v788;
  int v789;
  unsigned __int8 *v790;
  unsigned __int8 *v791;
  _QWORD *v792;
  int v793;
  int v794;
  int v795;
  unsigned __int8 *v796;
  unsigned __int8 *v797;
  BOOL *v798;
  int v799;
  int v800;
  int v801;
  unsigned __int8 *v802;
  uint64_t *v803;
  _QWORD *v804;
  uint64_t v805;
  unsigned int v806;
  uint64_t v807;
  unsigned __int8 *v808;
  unsigned __int8 *v809;
  BOOL *v810;
  int v811;
  int v812;
  int v813;
  uint64_t *v814;
  unsigned __int8 *v815;
  _QWORD *v816;
  uint64_t v817;
  uint64_t v818;
  unsigned __int8 *v819;
  unsigned __int8 *v820;
  BOOL *v821;
  int v822;
  int v823;
  int v824;
  uint64_t *v825;
  uint64_t *v826;
  _QWORD *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unsigned __int8 *v831;
  unsigned __int8 *v832;
  BOOL *v833;
  unsigned int v834;
  unsigned int v835;
  unsigned int v836;
  unsigned __int8 *v837;
  unsigned __int8 *v838;
  _QWORD *v839;
  unsigned int v840;
  unsigned int v841;
  unsigned int v842;
  unsigned __int8 *v843;
  unsigned __int8 *v844;
  BOOL *v845;
  unsigned int v846;
  unsigned int v847;
  unsigned int v848;
  unsigned __int8 *v849;
  unint64_t *v850;
  _QWORD *v851;
  unint64_t v852;
  unsigned int v853;
  unint64_t v854;
  unsigned __int8 *v855;
  unsigned __int8 *v856;
  BOOL *v857;
  unsigned int v858;
  unsigned int v859;
  unsigned int v860;
  unint64_t *v861;
  unsigned __int8 *v862;
  _QWORD *v863;
  unint64_t v864;
  unint64_t v865;
  unsigned __int8 *v866;
  unsigned __int8 *v867;
  BOOL *v868;
  unsigned int v869;
  unsigned int v870;
  unsigned int v871;
  unint64_t *v872;
  unint64_t *v873;
  _QWORD *v874;
  unint64_t v875;
  unint64_t v876;
  unint64_t v877;
  unsigned __int8 *v878;
  unsigned __int8 *v879;
  BOOL *v880;
  unsigned int v881;
  unsigned int v882;
  unsigned int v883;
  unsigned __int8 *v884;
  unsigned __int8 *v885;
  _QWORD *v886;
  unsigned int v887;
  unsigned int v888;
  unsigned int v889;
  unsigned __int8 *v890;
  unsigned __int8 *v891;
  BOOL *v892;
  unsigned int v893;
  unsigned int v894;
  unsigned int v895;
  unsigned __int8 *v896;
  unint64_t *v897;
  _QWORD *v898;
  unint64_t v899;
  unsigned int v900;
  unint64_t v901;
  unsigned __int8 *v902;
  unsigned __int8 *v903;
  BOOL *v904;
  unsigned int v905;
  unsigned int v906;
  unsigned int v907;
  unint64_t *v908;
  unsigned __int8 *v909;
  _QWORD *v910;
  unint64_t v911;
  unint64_t v912;
  unsigned __int8 *v913;
  unsigned __int8 *v914;
  BOOL *v915;
  unsigned int v916;
  unsigned int v917;
  unsigned int v918;
  unint64_t *v919;
  unint64_t *v920;
  _QWORD *v921;
  unint64_t v922;
  unint64_t v923;
  unint64_t v924;
  unsigned __int8 *v925;
  unsigned __int8 *v926;
  BOOL *v927;
  unsigned int v928;
  unsigned int v929;
  unsigned int v930;
  unsigned __int8 *v931;
  unsigned __int8 *v932;
  _QWORD *v933;
  unsigned int v934;
  unsigned int v935;
  unsigned int v936;
  unsigned __int8 *v937;
  unsigned __int8 *v938;
  BOOL *v939;
  unsigned int v940;
  unsigned int v941;
  unsigned int v942;
  unsigned __int8 *v943;
  unint64_t *v944;
  _QWORD *v945;
  unint64_t v946;
  unsigned int v947;
  unint64_t v948;
  unsigned __int8 *v949;
  unsigned __int8 *v950;
  BOOL *v951;
  unsigned int v952;
  unsigned int v953;
  unsigned int v954;
  unint64_t *v955;
  unsigned __int8 *v956;
  _QWORD *v957;
  unint64_t v958;
  unint64_t v959;
  unsigned __int8 *v960;
  unsigned __int8 *v961;
  BOOL *v962;
  unsigned int v963;
  unsigned int v964;
  unsigned int v965;
  unint64_t *v966;
  unint64_t *v967;
  _QWORD *v968;
  unint64_t v969;
  unint64_t v970;
  unint64_t v971;
  unsigned __int8 *v972;
  unsigned __int8 *v973;
  BOOL *v974;
  unsigned int v975;
  unsigned int v976;
  unsigned int v977;
  unsigned __int8 *v978;
  unsigned __int8 *v979;
  _QWORD *v980;
  unsigned int v981;
  unsigned int v982;
  unsigned int v983;
  unsigned __int8 *v984;
  unsigned __int8 *v985;
  BOOL *v986;
  unsigned int v987;
  unsigned int v988;
  unsigned int v989;
  unsigned __int8 *v990;
  unint64_t *v991;
  _QWORD *v992;
  unint64_t v993;
  unsigned int v994;
  unint64_t v995;
  unsigned __int8 *v996;
  unsigned __int8 *v997;
  BOOL *v998;
  unsigned int v999;
  unsigned int v1000;
  unsigned int v1001;
  unint64_t *v1002;
  unsigned __int8 *v1003;
  _QWORD *v1004;
  unint64_t v1005;
  unint64_t v1006;
  unsigned __int8 *v1007;
  unsigned __int8 *v1008;
  BOOL *v1009;
  unsigned int v1010;
  unsigned int v1011;
  unsigned int v1012;
  unint64_t *v1013;
  unint64_t *v1014;
  _QWORD *v1015;
  unint64_t v1016;
  unint64_t v1017;
  unint64_t v1018;
  double *v1019;
  double *v1020;
  double *v1021;
  double v1022;
  double v1023;
  double v1024;
  double v1025;
  double *v1026;
  double *v1027;
  double *v1028;
  double v1029;
  double v1030;
  double v1031;
  double v1032;
  double *v1033;
  double *v1034;
  double *v1035;
  double v1036;
  double v1037;
  double v1038;
  double v1039;
  double *v1040;
  double *v1041;
  double *v1042;
  double v1043;
  double v1044;
  double v1045;
  double v1046;
  double *v1047;
  double *v1048;
  double *v1049;
  double v1050;
  double v1051;
  double v1052;
  double v1053;
  double *v1054;
  double *v1055;
  double *v1056;
  double v1057;
  double v1058;
  double v1059;
  double v1060;
  unsigned __int8 *v1061;
  double *v1062;
  double *v1063;
  unsigned int v1064;
  double v1065;
  double v1066;
  double v1067;
  unint64_t *v1068;
  double *v1069;
  double *v1070;
  unint64_t v1071;
  unint64_t v1072;
  double v1073;
  double v1074;
  unsigned __int8 *v1075;
  double *v1076;
  double *v1077;
  unsigned int v1078;
  double v1079;
  double v1080;
  double v1081;
  unint64_t *v1082;
  double *v1083;
  double *v1084;
  unint64_t v1085;
  unint64_t v1086;
  double v1087;
  double v1088;
  unsigned __int8 *v1089;
  double *v1090;
  double *v1091;
  unsigned int v1092;
  double v1093;
  double v1094;
  double v1095;
  unint64_t *v1096;
  double *v1097;
  double *v1098;
  unint64_t v1099;
  unint64_t v1100;
  double v1101;
  double v1102;
  unsigned __int8 *v1103;
  double *v1104;
  double *v1105;
  unsigned int v1106;
  double v1107;
  double v1108;
  double v1109;
  unint64_t *v1110;
  double *v1111;
  double *v1112;
  unint64_t v1113;
  unint64_t v1114;
  double v1115;
  double v1116;
  unsigned __int8 *v1117;
  double *v1118;
  double *v1119;
  unsigned int v1120;
  double v1121;
  double v1122;
  double v1123;
  unint64_t *v1124;
  double *v1125;
  double *v1126;
  unint64_t v1127;
  unint64_t v1128;
  double v1129;
  double v1130;
  unsigned __int8 *v1131;
  double *v1132;
  double *v1133;
  unsigned int v1134;
  double v1135;
  double v1136;
  double v1137;
  unint64_t *v1138;
  double *v1139;
  double *v1140;
  unint64_t v1141;
  unint64_t v1142;
  double v1143;
  double v1144;
  double *v1145;
  unsigned __int8 *v1146;
  double *v1147;
  double v1148;
  double v1149;
  double v1150;
  double *v1151;
  unint64_t *v1152;
  double *v1153;
  double v1154;
  double v1155;
  unint64_t v1156;
  double v1157;
  double *v1158;
  unsigned __int8 *v1159;
  double *v1160;
  double v1161;
  double v1162;
  double v1163;
  double *v1164;
  unint64_t *v1165;
  double *v1166;
  double v1167;
  double v1168;
  unint64_t v1169;
  double v1170;
  double *v1171;
  unsigned __int8 *v1172;
  double *v1173;
  double v1174;
  double v1175;
  double v1176;
  double *v1177;
  unint64_t *v1178;
  double *v1179;
  double v1180;
  double v1181;
  unint64_t v1182;
  double v1183;
  double *v1184;
  unsigned __int8 *v1185;
  double *v1186;
  double v1187;
  double v1188;
  double v1189;
  double *v1190;
  unint64_t *v1191;
  double *v1192;
  double v1193;
  double v1194;
  unint64_t v1195;
  double v1196;
  double *v1197;
  unsigned __int8 *v1198;
  double *v1199;
  double v1200;
  double v1201;
  double v1202;
  double *v1203;
  unint64_t *v1204;
  double *v1205;
  double v1206;
  double v1207;
  unint64_t v1208;
  double v1209;
  double *v1210;
  unsigned __int8 *v1211;
  double *v1212;
  double v1213;
  double v1214;
  double v1215;
  double *v1216;
  unint64_t *v1217;
  double *v1218;
  double v1219;
  double v1220;
  unint64_t v1221;
  double v1222;
  unsigned __int8 *v1223;
  unsigned __int8 *v1224;
  double *v1225;
  int v1226;
  int v1227;
  int v1228;
  double v1229;
  unsigned __int8 *v1230;
  unint64_t *v1231;
  double *v1232;
  unsigned int v1233;
  double v1234;
  unint64_t v1235;
  double v1236;
  unint64_t *v1237;
  unsigned __int8 *v1238;
  double *v1239;
  unint64_t v1240;
  unint64_t v1241;
  double v1242;
  unint64_t *v1243;
  unint64_t *v1244;
  double *v1245;
  unint64_t v1246;
  double v1247;
  unint64_t v1248;
  double v1249;
  unsigned __int8 *v1250;
  unsigned __int8 *v1251;
  double *v1252;
  int v1253;
  int v1254;
  int v1255;
  double v1256;
  unsigned __int8 *v1257;
  unint64_t *v1258;
  double *v1259;
  unsigned int v1260;
  double v1261;
  unint64_t v1262;
  double v1263;
  unint64_t *v1264;
  unsigned __int8 *v1265;
  double *v1266;
  unint64_t v1267;
  unint64_t v1268;
  double v1269;
  unint64_t *v1270;
  unint64_t *v1271;
  double *v1272;
  unint64_t v1273;
  double v1274;
  unint64_t v1275;
  double v1276;
  unsigned __int8 *v1277;
  unsigned __int8 *v1278;
  double *v1279;
  unsigned int v1280;
  unsigned int v1281;
  unsigned int v1282;
  double v1283;
  unsigned __int8 *v1284;
  unint64_t *v1285;
  double *v1286;
  unsigned int v1287;
  double v1288;
  unint64_t v1289;
  double v1290;
  unint64_t *v1291;
  unsigned __int8 *v1292;
  double *v1293;
  unint64_t v1294;
  unint64_t v1295;
  double v1296;
  unint64_t *v1297;
  unint64_t *v1298;
  double *v1299;
  unint64_t v1300;
  double v1301;
  unint64_t v1302;
  double v1303;
  unsigned __int8 *v1304;
  unsigned __int8 *v1305;
  double *v1306;
  unsigned int v1307;
  unsigned int v1308;
  unsigned int v1309;
  double v1310;
  unsigned __int8 *v1311;
  unint64_t *v1312;
  double *v1313;
  unsigned int v1314;
  double v1315;
  unint64_t v1316;
  double v1317;
  unint64_t *v1318;
  unsigned __int8 *v1319;
  double *v1320;
  unint64_t v1321;
  unint64_t v1322;
  double v1323;
  unint64_t *v1324;
  unint64_t *v1325;
  double *v1326;
  unint64_t v1327;
  double v1328;
  unint64_t v1329;
  double v1330;
  unsigned __int8 *v1331;
  unsigned __int8 *v1332;
  double *v1333;
  unsigned int v1334;
  unsigned int v1335;
  unsigned int v1336;
  double v1337;
  unsigned __int8 *v1338;
  unint64_t *v1339;
  double *v1340;
  unsigned int v1341;
  double v1342;
  unint64_t v1343;
  double v1344;
  unint64_t *v1345;
  unsigned __int8 *v1346;
  double *v1347;
  unint64_t v1348;
  unint64_t v1349;
  double v1350;
  unint64_t *v1351;
  unint64_t *v1352;
  double *v1353;
  unint64_t v1354;
  double v1355;
  unint64_t v1356;
  double v1357;
  unsigned __int8 *v1358;
  unsigned __int8 *v1359;
  double *v1360;
  unsigned int v1361;
  unsigned int v1362;
  unsigned int v1363;
  double v1364;
  unsigned __int8 *v1365;
  unint64_t *v1366;
  double *v1367;
  unsigned int v1368;
  double v1369;
  unint64_t v1370;
  double v1371;
  unint64_t *v1372;
  unsigned __int8 *v1373;
  double *v1374;
  unint64_t v1375;
  unint64_t v1376;
  double v1377;
  unint64_t *v1378;
  unint64_t *v1379;
  double *v1380;
  unint64_t v1381;
  double v1382;
  unint64_t v1383;
  double v1384;
  double *v1385;
  double *v1386;
  BOOL *v1387;
  double v1388;
  int v1389;
  double v1390;
  double *v1391;
  double *v1392;
  _QWORD *v1393;
  double v1394;
  unint64_t v1395;
  double v1396;
  double *v1397;
  double *v1398;
  BOOL *v1399;
  double v1400;
  int v1401;
  double v1402;
  double *v1403;
  double *v1404;
  _QWORD *v1405;
  double v1406;
  unint64_t v1407;
  double v1408;
  double *v1409;
  double *v1410;
  BOOL *v1411;
  double v1412;
  unsigned int v1413;
  double v1414;
  double *v1415;
  double *v1416;
  _QWORD *v1417;
  double v1418;
  unint64_t v1419;
  double v1420;
  double *v1421;
  double *v1422;
  BOOL *v1423;
  double v1424;
  unsigned int v1425;
  double v1426;
  double *v1427;
  double *v1428;
  _QWORD *v1429;
  double v1430;
  unint64_t v1431;
  double v1432;
  double *v1433;
  double *v1434;
  BOOL *v1435;
  double v1436;
  unsigned int v1437;
  double v1438;
  double *v1439;
  double *v1440;
  _QWORD *v1441;
  double v1442;
  unint64_t v1443;
  double v1444;
  double *v1445;
  double *v1446;
  BOOL *v1447;
  double v1448;
  unsigned int v1449;
  double v1450;
  double *v1451;
  double *v1452;
  _QWORD *v1453;
  double v1454;
  unint64_t v1455;
  double v1456;
  unsigned __int8 *v1457;
  double *v1458;
  BOOL *v1459;
  int v1460;
  int v1461;
  double v1462;
  unsigned __int8 *v1463;
  double *v1464;
  _QWORD *v1465;
  uint64_t v1466;
  unsigned int v1467;
  double v1468;
  unsigned __int8 *v1469;
  double *v1470;
  BOOL *v1471;
  int v1472;
  int v1473;
  double v1474;
  uint64_t *v1475;
  double *v1476;
  _QWORD *v1477;
  uint64_t v1478;
  uint64_t v1479;
  double v1480;
  unsigned __int8 *v1481;
  double *v1482;
  BOOL *v1483;
  int v1484;
  int v1485;
  double v1486;
  unsigned __int8 *v1487;
  double *v1488;
  _QWORD *v1489;
  uint64_t v1490;
  unsigned int v1491;
  double v1492;
  unsigned __int8 *v1493;
  double *v1494;
  BOOL *v1495;
  int v1496;
  int v1497;
  double v1498;
  uint64_t *v1499;
  double *v1500;
  _QWORD *v1501;
  uint64_t v1502;
  uint64_t v1503;
  double v1504;
  unsigned __int8 *v1505;
  double *v1506;
  BOOL *v1507;
  unsigned int v1508;
  unsigned int v1509;
  double v1510;
  unsigned __int8 *v1511;
  double *v1512;
  _QWORD *v1513;
  unint64_t v1514;
  unsigned int v1515;
  double v1516;
  unsigned __int8 *v1517;
  double *v1518;
  BOOL *v1519;
  unsigned int v1520;
  unsigned int v1521;
  double v1522;
  unint64_t *v1523;
  double *v1524;
  _QWORD *v1525;
  unint64_t v1526;
  unint64_t v1527;
  double v1528;
  unsigned __int8 *v1529;
  double *v1530;
  BOOL *v1531;
  unsigned int v1532;
  unsigned int v1533;
  double v1534;
  unsigned __int8 *v1535;
  double *v1536;
  _QWORD *v1537;
  unint64_t v1538;
  unsigned int v1539;
  double v1540;
  unsigned __int8 *v1541;
  double *v1542;
  BOOL *v1543;
  unsigned int v1544;
  unsigned int v1545;
  double v1546;
  unint64_t *v1547;
  double *v1548;
  _QWORD *v1549;
  unint64_t v1550;
  unint64_t v1551;
  double v1552;
  unsigned __int8 *v1553;
  double *v1554;
  BOOL *v1555;
  unsigned int v1556;
  unsigned int v1557;
  double v1558;
  unsigned __int8 *v1559;
  double *v1560;
  _QWORD *v1561;
  unint64_t v1562;
  unsigned int v1563;
  double v1564;
  unsigned __int8 *v1565;
  double *v1566;
  BOOL *v1567;
  unsigned int v1568;
  unsigned int v1569;
  double v1570;
  unint64_t *v1571;
  double *v1572;
  _QWORD *v1573;
  unint64_t v1574;
  unint64_t v1575;
  double v1576;
  unsigned __int8 *v1577;
  double *v1578;
  BOOL *v1579;
  unsigned int v1580;
  unsigned int v1581;
  double v1582;
  unsigned __int8 *v1583;
  double *v1584;
  _QWORD *v1585;
  unint64_t v1586;
  unsigned int v1587;
  double v1588;
  unsigned __int8 *v1589;
  double *v1590;
  BOOL *v1591;
  unsigned int v1592;
  unsigned int v1593;
  double v1594;
  unint64_t *v1595;
  double *v1596;
  _QWORD *v1597;
  unint64_t v1598;
  unint64_t v1599;
  double v1600;
  double *v1601;
  unsigned __int8 *v1602;
  BOOL *v1603;
  double v1604;
  int v1605;
  double *v1606;
  unsigned __int8 *v1607;
  _QWORD *v1608;
  double v1609;
  unint64_t v1610;
  double *v1611;
  unsigned __int8 *v1612;
  BOOL *v1613;
  double v1614;
  int v1615;
  double *v1616;
  uint64_t *v1617;
  _QWORD *v1618;
  double v1619;
  unint64_t v1620;
  uint64_t v1621;
  double *v1622;
  unsigned __int8 *v1623;
  BOOL *v1624;
  double v1625;
  int v1626;
  double *v1627;
  unsigned __int8 *v1628;
  _QWORD *v1629;
  double v1630;
  unint64_t v1631;
  double *v1632;
  unsigned __int8 *v1633;
  BOOL *v1634;
  double v1635;
  int v1636;
  double *v1637;
  uint64_t *v1638;
  _QWORD *v1639;
  double v1640;
  unint64_t v1641;
  uint64_t v1642;
  double *v1643;
  unsigned __int8 *v1644;
  BOOL *v1645;
  double v1646;
  unsigned int v1647;
  double *v1648;
  unsigned __int8 *v1649;
  _QWORD *v1650;
  double v1651;
  unint64_t v1652;
  double *v1653;
  unsigned __int8 *v1654;
  BOOL *v1655;
  double v1656;
  unsigned int v1657;
  double *v1658;
  unint64_t *v1659;
  _QWORD *v1660;
  double v1661;
  unint64_t v1662;
  unint64_t v1663;
  double *v1664;
  unsigned __int8 *v1665;
  BOOL *v1666;
  double v1667;
  unsigned int v1668;
  double *v1669;
  unsigned __int8 *v1670;
  _QWORD *v1671;
  double v1672;
  unint64_t v1673;
  double *v1674;
  unsigned __int8 *v1675;
  BOOL *v1676;
  double v1677;
  unsigned int v1678;
  double *v1679;
  unint64_t *v1680;
  _QWORD *v1681;
  double v1682;
  unint64_t v1683;
  unint64_t v1684;
  double *v1685;
  unsigned __int8 *v1686;
  BOOL *v1687;
  double v1688;
  unsigned int v1689;
  double *v1690;
  unsigned __int8 *v1691;
  _QWORD *v1692;
  double v1693;
  unint64_t v1694;
  double *v1695;
  unsigned __int8 *v1696;
  BOOL *v1697;
  double v1698;
  unsigned int v1699;
  double *v1700;
  unint64_t *v1701;
  _QWORD *v1702;
  double v1703;
  unint64_t v1704;
  unint64_t v1705;
  double *v1706;
  unsigned __int8 *v1707;
  BOOL *v1708;
  double v1709;
  unsigned int v1710;
  double *v1711;
  unsigned __int8 *v1712;
  _QWORD *v1713;
  double v1714;
  unint64_t v1715;
  double *v1716;
  unsigned __int8 *v1717;
  BOOL *v1718;
  double v1719;
  unsigned int v1720;
  double *v1721;
  unint64_t *v1722;
  _QWORD *v1723;
  double v1724;
  unint64_t v1725;
  unint64_t v1726;
  unsigned __int8 *v1727;
  unsigned __int8 *v1728;
  BOOL *v1729;
  int v1730;
  int v1731;
  int v1732;
  unsigned __int8 *v1733;
  unsigned __int8 *v1734;
  _QWORD *v1735;
  int v1736;
  int v1737;
  int v1738;
  unsigned __int8 *v1739;
  unsigned __int8 *v1740;
  BOOL *v1741;
  int v1742;
  int v1743;
  int v1744;
  unsigned __int8 *v1745;
  uint64_t *v1746;
  _QWORD *v1747;
  uint64_t v1748;
  unsigned int v1749;
  uint64_t v1750;
  unsigned __int8 *v1751;
  unsigned __int8 *v1752;
  BOOL *v1753;
  int v1754;
  int v1755;
  int v1756;
  uint64_t *v1757;
  unsigned __int8 *v1758;
  _QWORD *v1759;
  uint64_t v1760;
  uint64_t v1761;
  unsigned __int8 *v1762;
  unsigned __int8 *v1763;
  BOOL *v1764;
  int v1765;
  int v1766;
  int v1767;
  uint64_t *v1768;
  uint64_t *v1769;
  _QWORD *v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  unsigned __int8 *v1774;
  unsigned __int8 *v1775;
  BOOL *v1776;
  int v1777;
  int v1778;
  int v1779;
  unsigned __int8 *v1780;
  unsigned __int8 *v1781;
  _QWORD *v1782;
  int v1783;
  int v1784;
  int v1785;
  unsigned __int8 *v1786;
  unsigned __int8 *v1787;
  BOOL *v1788;
  int v1789;
  int v1790;
  int v1791;
  unsigned __int8 *v1792;
  uint64_t *v1793;
  _QWORD *v1794;
  uint64_t v1795;
  unsigned int v1796;
  uint64_t v1797;
  unsigned __int8 *v1798;
  unsigned __int8 *v1799;
  BOOL *v1800;
  int v1801;
  int v1802;
  int v1803;
  uint64_t *v1804;
  unsigned __int8 *v1805;
  _QWORD *v1806;
  uint64_t v1807;
  uint64_t v1808;
  unsigned __int8 *v1809;
  unsigned __int8 *v1810;
  BOOL *v1811;
  int v1812;
  int v1813;
  int v1814;
  uint64_t *v1815;
  uint64_t *v1816;
  _QWORD *v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  unsigned __int8 *v1821;
  unsigned __int8 *v1822;
  BOOL *v1823;
  unsigned int v1824;
  unsigned int v1825;
  unsigned int v1826;
  unsigned __int8 *v1827;
  unsigned __int8 *v1828;
  _QWORD *v1829;
  unsigned int v1830;
  unsigned int v1831;
  unsigned int v1832;
  unsigned __int8 *v1833;
  unsigned __int8 *v1834;
  BOOL *v1835;
  unsigned int v1836;
  unsigned int v1837;
  unsigned int v1838;
  unsigned __int8 *v1839;
  unint64_t *v1840;
  _QWORD *v1841;
  unint64_t v1842;
  unsigned int v1843;
  unint64_t v1844;
  unsigned __int8 *v1845;
  unsigned __int8 *v1846;
  BOOL *v1847;
  unsigned int v1848;
  unsigned int v1849;
  unsigned int v1850;
  unint64_t *v1851;
  unsigned __int8 *v1852;
  _QWORD *v1853;
  unint64_t v1854;
  unint64_t v1855;
  unsigned __int8 *v1856;
  unsigned __int8 *v1857;
  BOOL *v1858;
  unsigned int v1859;
  unsigned int v1860;
  unsigned int v1861;
  unint64_t *v1862;
  unint64_t *v1863;
  _QWORD *v1864;
  unint64_t v1865;
  unint64_t v1866;
  unint64_t v1867;
  unsigned __int8 *v1868;
  unsigned __int8 *v1869;
  BOOL *v1870;
  unsigned int v1871;
  unsigned int v1872;
  unsigned int v1873;
  unsigned __int8 *v1874;
  unsigned __int8 *v1875;
  _QWORD *v1876;
  unsigned int v1877;
  unsigned int v1878;
  unsigned int v1879;
  unsigned __int8 *v1880;
  unsigned __int8 *v1881;
  BOOL *v1882;
  unsigned int v1883;
  unsigned int v1884;
  unsigned int v1885;
  unsigned __int8 *v1886;
  unint64_t *v1887;
  _QWORD *v1888;
  unint64_t v1889;
  unsigned int v1890;
  unint64_t v1891;
  unsigned __int8 *v1892;
  unsigned __int8 *v1893;
  BOOL *v1894;
  unsigned int v1895;
  unsigned int v1896;
  unsigned int v1897;
  unint64_t *v1898;
  unsigned __int8 *v1899;
  _QWORD *v1900;
  unint64_t v1901;
  unint64_t v1902;
  unsigned __int8 *v1903;
  unsigned __int8 *v1904;
  BOOL *v1905;
  unsigned int v1906;
  unsigned int v1907;
  unsigned int v1908;
  unint64_t *v1909;
  unint64_t *v1910;
  _QWORD *v1911;
  unint64_t v1912;
  unint64_t v1913;
  unint64_t v1914;
  unsigned __int8 *v1915;
  unsigned __int8 *v1916;
  BOOL *v1917;
  unsigned int v1918;
  unsigned int v1919;
  unsigned int v1920;
  unsigned __int8 *v1921;
  unsigned __int8 *v1922;
  _QWORD *v1923;
  unsigned int v1924;
  unsigned int v1925;
  unsigned int v1926;
  unsigned __int8 *v1927;
  unsigned __int8 *v1928;
  BOOL *v1929;
  unsigned int v1930;
  unsigned int v1931;
  unsigned int v1932;
  unsigned __int8 *v1933;
  unint64_t *v1934;
  _QWORD *v1935;
  unint64_t v1936;
  unsigned int v1937;
  unint64_t v1938;
  unsigned __int8 *v1939;
  unsigned __int8 *v1940;
  BOOL *v1941;
  unsigned int v1942;
  unsigned int v1943;
  unsigned int v1944;
  unint64_t *v1945;
  unsigned __int8 *v1946;
  _QWORD *v1947;
  unint64_t v1948;
  unint64_t v1949;
  unsigned __int8 *v1950;
  unsigned __int8 *v1951;
  BOOL *v1952;
  unsigned int v1953;
  unsigned int v1954;
  unsigned int v1955;
  unint64_t *v1956;
  unint64_t *v1957;
  _QWORD *v1958;
  unint64_t v1959;
  unint64_t v1960;
  unint64_t v1961;
  unsigned __int8 *v1962;
  unsigned __int8 *v1963;
  BOOL *v1964;
  unsigned int v1965;
  unsigned int v1966;
  unsigned int v1967;
  unsigned __int8 *v1968;
  unsigned __int8 *v1969;
  _QWORD *v1970;
  unsigned int v1971;
  unsigned int v1972;
  unsigned int v1973;
  unsigned __int8 *v1974;
  unsigned __int8 *v1975;
  BOOL *v1976;
  unsigned int v1977;
  unsigned int v1978;
  unsigned int v1979;
  unsigned __int8 *v1980;
  unint64_t *v1981;
  _QWORD *v1982;
  unint64_t v1983;
  unsigned int v1984;
  unint64_t v1985;
  unsigned __int8 *v1986;
  unsigned __int8 *v1987;
  BOOL *v1988;
  unsigned int v1989;
  unsigned int v1990;
  unsigned int v1991;
  unint64_t *v1992;
  unsigned __int8 *v1993;
  _QWORD *v1994;
  unint64_t v1995;
  unint64_t v1996;
  unsigned __int8 *v1997;
  unsigned __int8 *v1998;
  BOOL *v1999;
  unsigned int v2000;
  unsigned int v2001;
  unsigned int v2002;
  unint64_t *v2003;
  unint64_t *v2004;
  _QWORD *v2005;
  unint64_t v2006;
  unint64_t v2007;
  unint64_t v2008;

  switch((int)result)
  {
    case 0:
      result = 0;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32))
          return 0;
        v5 = *((_QWORD *)a2 + 1);
        if (v5 != *((_QWORD *)a3 + 1) || v5 != *((_QWORD *)a4 + 1))
          return 0;
        v6 = *a2;
        v7 = *a3;
        v8 = *a4;
        if (*a2 == 2)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1727 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1728 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1729 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1731 = *v1727++;
                        v1730 = v1731;
                        v1732 = *v1728++;
                        *v1729++ = v1730 == v1732;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v737 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v738 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v739 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v741 = *v737++;
                      v740 = v741;
                      v742 = *v738++;
                      *v739++ = v740 == v742;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1733 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1734 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1735 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1737 = *v1733++;
                        v1736 = v1737;
                        v1738 = *v1734++;
                        *v1735++ = v1736 == v1738;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v743 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v744 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v745 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v747 = *v743++;
                      v746 = v747;
                      v748 = *v744++;
                      *v745++ = v746 == v748;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1223 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1224 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1225 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1227 = *v1223++;
                        v1226 = v1227;
                        v1228 = *v1224++;
                        if (v1226 == v1228)
                          v1229 = 1.0;
                        else
                          v1229 = 0.0;
                        *v1225++ = v1229;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v233 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v234 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v235 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v237 = *v233++;
                      v236 = v237;
                      v238 = *v234++;
                      if (v236 == v238)
                        v239 = 1.0;
                      else
                        v239 = 0.0;
                      *v235++ = v239;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1739 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1740 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1741 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1743 = *v1739++;
                        v1742 = v1743;
                        v1744 = *v1740;
                        v1740 += 8;
                        *v1741++ = v1742 == v1744;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v749 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v750 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v751 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v753 = *v749++;
                      v752 = v753;
                      v754 = *v750;
                      v750 += 8;
                      *v751++ = v752 == v754;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1745 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1746 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v1747 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1749 = *v1745++;
                        v1748 = v1749;
                        v1750 = *v1746++;
                        *v1747++ = v1750 == v1748;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v755 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v756 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v757 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v759 = *v755++;
                      v758 = v759;
                      v760 = *v756++;
                      *v757++ = v760 == v758;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1230 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1231 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1232 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1233 = *v1230++;
                        v1234 = (double)v1233;
                        v1235 = *v1231++;
                        if (v1234 == (double)v1235)
                          v1236 = 1.0;
                        else
                          v1236 = 0.0;
                        *v1232++ = v1236;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v240 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v241 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v242 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v243 = *v240++;
                      v244 = (double)v243;
                      v245 = *v241++;
                      if (v244 == (double)v245)
                        v246 = 1.0;
                      else
                        v246 = 0.0;
                      *v242++ = v246;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1457 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1458 = (double *)*((_QWORD *)a3 + 2);
                      v1459 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1461 = *v1457++;
                        v1460 = v1461;
                        v1462 = *v1458++;
                        *v1459++ = v1460 == (int)v1462;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v467 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v468 = (double *)*((_QWORD *)a3 + 2);
                    v469 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v471 = *v467++;
                      v470 = v471;
                      v472 = *v468++;
                      *v469++ = v470 == (int)v472;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1463 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1464 = (double *)*((_QWORD *)a3 + 2);
                      v1465 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1467 = *v1463++;
                        v1466 = v1467;
                        v1468 = *v1464++;
                        *v1465++ = v1466 == (unint64_t)v1468;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v473 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v474 = (double *)*((_QWORD *)a3 + 2);
                    v475 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v477 = *v473++;
                      v476 = v477;
                      v478 = *v474++;
                      *v475++ = v476 == (unint64_t)v478;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1061 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1062 = (double *)*((_QWORD *)a3 + 2);
                      v1063 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1064 = *v1061++;
                        v1065 = (double)v1064;
                        v1066 = *v1062++;
                        if (v1066 == v1065)
                          v1067 = 1.0;
                        else
                          v1067 = 0.0;
                        *v1063++ = v1067;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v71 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v72 = (double *)*((_QWORD *)a3 + 2);
                    v73 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v74 = *v71++;
                      v75 = (double)v74;
                      v76 = *v72++;
                      if (v76 == v75)
                        v77 = 1.0;
                      else
                        v77 = 0.0;
                      *v73++ = v77;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
          }
        }
        else if (v6 == 1)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1751 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1752 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1753 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1755 = *v1751;
                        v1751 += 8;
                        v1754 = v1755;
                        v1756 = *v1752++;
                        *v1753++ = v1756 == v1754;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v761 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v762 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v763 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v765 = *v761;
                      v761 += 8;
                      v764 = v765;
                      v766 = *v762++;
                      *v763++ = v766 == v764;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1757 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1758 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1759 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1761 = *v1757++;
                        v1760 = v1761;
                        LODWORD(v1761) = *v1758++;
                        *v1759++ = v1760 == v1761;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v767 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v768 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v769 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v771 = *v767++;
                      v770 = v771;
                      LODWORD(v771) = *v768++;
                      *v769++ = v770 == v771;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1237 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1238 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1239 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1240 = *v1237++;
                        v1241 = v1240;
                        LODWORD(v1240) = *v1238++;
                        if ((double)v1241 == (double)v1240)
                          v1242 = 1.0;
                        else
                          v1242 = 0.0;
                        *v1239++ = v1242;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v247 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v248 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v249 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v250 = *v247++;
                      v251 = v250;
                      LODWORD(v250) = *v248++;
                      if ((double)v251 == (double)v250)
                        v252 = 1.0;
                      else
                        v252 = 0.0;
                      *v249++ = v252;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1762 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1763 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1764 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1766 = *v1762;
                        v1762 += 8;
                        v1765 = v1766;
                        v1767 = *v1763;
                        v1763 += 8;
                        *v1764++ = v1765 == v1767;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v772 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v773 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v774 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v776 = *v772;
                      v772 += 8;
                      v775 = v776;
                      v777 = *v773;
                      v773 += 8;
                      *v774++ = v775 == v777;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1768 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1769 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v1770 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1772 = *v1768++;
                        v1771 = v1772;
                        v1773 = *v1769++;
                        *v1770++ = v1771 == v1773;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v778 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v779 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v780 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v782 = *v778++;
                      v781 = v782;
                      v783 = *v779++;
                      *v780++ = v781 == v783;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1243 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1244 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1245 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1246 = *v1243++;
                        v1247 = (double)v1246;
                        v1248 = *v1244++;
                        if (v1247 == (double)v1248)
                          v1249 = 1.0;
                        else
                          v1249 = 0.0;
                        *v1245++ = v1249;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v253 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v254 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v255 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v256 = *v253++;
                      v257 = (double)v256;
                      v258 = *v254++;
                      if (v257 == (double)v258)
                        v259 = 1.0;
                      else
                        v259 = 0.0;
                      *v255++ = v259;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1469 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1470 = (double *)*((_QWORD *)a3 + 2);
                      v1471 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1473 = *v1469;
                        v1469 += 8;
                        v1472 = v1473;
                        v1474 = *v1470++;
                        *v1471++ = v1472 == (int)v1474;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v479 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v480 = (double *)*((_QWORD *)a3 + 2);
                    v481 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v483 = *v479;
                      v479 += 8;
                      v482 = v483;
                      v484 = *v480++;
                      *v481++ = v482 == (int)v484;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1475 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1476 = (double *)*((_QWORD *)a3 + 2);
                      v1477 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1479 = *v1475++;
                        v1478 = v1479;
                        v1480 = *v1476++;
                        *v1477++ = v1478 == (unint64_t)v1480;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v485 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v486 = (double *)*((_QWORD *)a3 + 2);
                    v487 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v489 = *v485++;
                      v488 = v489;
                      v490 = *v486++;
                      *v487++ = v488 == (unint64_t)v490;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1068 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1069 = (double *)*((_QWORD *)a3 + 2);
                      v1070 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1071 = *v1068++;
                        v1072 = v1071;
                        v1073 = *v1069++;
                        if (v1073 == (double)v1072)
                          v1074 = 1.0;
                        else
                          v1074 = 0.0;
                        *v1070++ = v1074;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v78 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v79 = (double *)*((_QWORD *)a3 + 2);
                    v80 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v81 = *v78++;
                      v82 = v81;
                      v83 = *v79++;
                      if (v83 == (double)v82)
                        v84 = 1.0;
                      else
                        v84 = 0.0;
                      *v80++ = v84;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v6)
        {
          switch(v7)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1601 = (double *)*((_QWORD *)a2 + 2);
                      v1602 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1603 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1604 = *v1601++;
                        v1605 = (int)v1604;
                        LODWORD(v1604) = *v1602++;
                        *v1603++ = LODWORD(v1604) == v1605;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v611 = (double *)*((_QWORD *)a2 + 2);
                    v612 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v613 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v614 = *v611++;
                      v615 = (int)v614;
                      LODWORD(v614) = *v612++;
                      *v613++ = LODWORD(v614) == v615;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1606 = (double *)*((_QWORD *)a2 + 2);
                      v1607 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1608 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1609 = *v1606++;
                        v1610 = (unint64_t)v1609;
                        LODWORD(v1609) = *v1607++;
                        *v1608++ = v1610 == LODWORD(v1609);
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v616 = (double *)*((_QWORD *)a2 + 2);
                    v617 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v618 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v619 = *v616++;
                      v620 = (unint64_t)v619;
                      LODWORD(v619) = *v617++;
                      *v618++ = v620 == LODWORD(v619);
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1145 = (double *)*((_QWORD *)a2 + 2);
                      v1146 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1147 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1148 = *v1145++;
                        v1149 = v1148;
                        LODWORD(v1148) = *v1146++;
                        if (v1149 == (double)LODWORD(v1148))
                          v1150 = 1.0;
                        else
                          v1150 = 0.0;
                        *v1147++ = v1150;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v155 = (double *)*((_QWORD *)a2 + 2);
                    v156 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v157 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v158 = *v155++;
                      v159 = v158;
                      LODWORD(v158) = *v156++;
                      if (v159 == (double)LODWORD(v158))
                        v160 = 1.0;
                      else
                        v160 = 0.0;
                      *v157++ = v160;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1611 = (double *)*((_QWORD *)a2 + 2);
                      v1612 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1613 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1614 = *v1611++;
                        v1615 = (int)v1614;
                        LODWORD(v1614) = *v1612;
                        v1612 += 8;
                        *v1613++ = v1615 == LODWORD(v1614);
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v621 = (double *)*((_QWORD *)a2 + 2);
                    v622 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v623 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v624 = *v621++;
                      v625 = (int)v624;
                      LODWORD(v624) = *v622;
                      v622 += 8;
                      *v623++ = v625 == LODWORD(v624);
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1616 = (double *)*((_QWORD *)a2 + 2);
                      v1617 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v1618 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1619 = *v1616++;
                        v1620 = (unint64_t)v1619;
                        v1621 = *v1617++;
                        *v1618++ = v1621 == v1620;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v626 = (double *)*((_QWORD *)a2 + 2);
                    v627 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v628 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v629 = *v626++;
                      v630 = (unint64_t)v629;
                      v631 = *v627++;
                      *v628++ = v631 == v630;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1151 = (double *)*((_QWORD *)a2 + 2);
                      v1152 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1153 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1154 = *v1151++;
                        v1155 = v1154;
                        v1156 = *v1152++;
                        if (v1155 == (double)v1156)
                          v1157 = 1.0;
                        else
                          v1157 = 0.0;
                        *v1153++ = v1157;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v161 = (double *)*((_QWORD *)a2 + 2);
                    v162 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v163 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v164 = *v161++;
                      v165 = v164;
                      v166 = *v162++;
                      if (v165 == (double)v166)
                        v167 = 1.0;
                      else
                        v167 = 0.0;
                      *v163++ = v167;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1385 = (double *)*((_QWORD *)a2 + 2);
                      v1386 = (double *)*((_QWORD *)a3 + 2);
                      v1387 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1388 = *v1385++;
                        v1389 = (int)v1388;
                        v1390 = *v1386++;
                        *v1387++ = v1389 == (int)v1390;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v395 = (double *)*((_QWORD *)a2 + 2);
                    v396 = (double *)*((_QWORD *)a3 + 2);
                    v397 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v398 = *v395++;
                      v399 = (int)v398;
                      v400 = *v396++;
                      *v397++ = v399 == (int)v400;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1391 = (double *)*((_QWORD *)a2 + 2);
                      v1392 = (double *)*((_QWORD *)a3 + 2);
                      v1393 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1394 = *v1391++;
                        v1395 = (unint64_t)v1394;
                        v1396 = *v1392++;
                        *v1393++ = v1395 == (unint64_t)v1396;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v401 = (double *)*((_QWORD *)a2 + 2);
                    v402 = (double *)*((_QWORD *)a3 + 2);
                    v403 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v404 = *v401++;
                      v405 = (unint64_t)v404;
                      v406 = *v402++;
                      *v403++ = v405 == (unint64_t)v406;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v5)
                    {
                      v1019 = (double *)*((_QWORD *)a2 + 2);
                      v1020 = (double *)*((_QWORD *)a3 + 2);
                      v1021 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1022 = *v1019++;
                        v1023 = v1022;
                        v1024 = *v1020++;
                        if (v1023 == v1024)
                          v1025 = 1.0;
                        else
                          v1025 = 0.0;
                        *v1021++ = v1025;
                        --v5;
                      }
                      while (v5);
                    }
                  }
                  else if (!a5 && v5)
                  {
                    v9 = (double *)*((_QWORD *)a2 + 2);
                    v10 = (double *)*((_QWORD *)a3 + 2);
                    v11 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v12 = *v9++;
                      v13 = v12;
                      v14 = *v10++;
                      if (v13 == v14)
                        v15 = 1.0;
                      else
                        v15 = 0.0;
                      *v11++ = v15;
                      --v5;
                    }
                    while (v5);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 1:
      result = 0;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32))
          return 0;
        v16 = *((_QWORD *)a2 + 1);
        if (v16 != *((_QWORD *)a3 + 1) || v16 != *((_QWORD *)a4 + 1))
          return 0;
        v17 = *a2;
        v18 = *a3;
        v19 = *a4;
        if (*a2 == 2)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1774 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1775 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1776 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1778 = *v1774++;
                        v1777 = v1778;
                        v1779 = *v1775++;
                        *v1776++ = v1777 != v1779;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v784 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v785 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v786 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v788 = *v784++;
                      v787 = v788;
                      v789 = *v785++;
                      *v786++ = v787 != v789;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1780 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1781 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1782 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1784 = *v1780++;
                        v1783 = v1784;
                        v1785 = *v1781++;
                        *v1782++ = v1783 != v1785;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v790 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v791 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v792 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v794 = *v790++;
                      v793 = v794;
                      v795 = *v791++;
                      *v792++ = v793 != v795;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1250 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1251 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1252 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1254 = *v1250++;
                        v1253 = v1254;
                        v1255 = *v1251++;
                        if (v1253 == v1255)
                          v1256 = 0.0;
                        else
                          v1256 = 1.0;
                        *v1252++ = v1256;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v260 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v261 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v262 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v264 = *v260++;
                      v263 = v264;
                      v265 = *v261++;
                      if (v263 == v265)
                        v266 = 0.0;
                      else
                        v266 = 1.0;
                      *v262++ = v266;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1786 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1787 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1788 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1790 = *v1786++;
                        v1789 = v1790;
                        v1791 = *v1787;
                        v1787 += 8;
                        *v1788++ = v1789 != v1791;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v796 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v797 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v798 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v800 = *v796++;
                      v799 = v800;
                      v801 = *v797;
                      v797 += 8;
                      *v798++ = v799 != v801;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1792 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1793 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v1794 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1796 = *v1792++;
                        v1795 = v1796;
                        v1797 = *v1793++;
                        *v1794++ = v1797 != v1795;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v802 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v803 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v804 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v806 = *v802++;
                      v805 = v806;
                      v807 = *v803++;
                      *v804++ = v807 != v805;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1257 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1258 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1259 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1260 = *v1257++;
                        v1261 = (double)v1260;
                        v1262 = *v1258++;
                        if (v1261 == (double)v1262)
                          v1263 = 0.0;
                        else
                          v1263 = 1.0;
                        *v1259++ = v1263;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v267 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v268 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v269 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v270 = *v267++;
                      v271 = (double)v270;
                      v272 = *v268++;
                      if (v271 == (double)v272)
                        v273 = 0.0;
                      else
                        v273 = 1.0;
                      *v269++ = v273;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1481 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1482 = (double *)*((_QWORD *)a3 + 2);
                      v1483 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1485 = *v1481++;
                        v1484 = v1485;
                        v1486 = *v1482++;
                        *v1483++ = v1484 != (int)v1486;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v491 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v492 = (double *)*((_QWORD *)a3 + 2);
                    v493 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v495 = *v491++;
                      v494 = v495;
                      v496 = *v492++;
                      *v493++ = v494 != (int)v496;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1487 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1488 = (double *)*((_QWORD *)a3 + 2);
                      v1489 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1491 = *v1487++;
                        v1490 = v1491;
                        v1492 = *v1488++;
                        *v1489++ = v1490 != (unint64_t)v1492;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v497 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v498 = (double *)*((_QWORD *)a3 + 2);
                    v499 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v501 = *v497++;
                      v500 = v501;
                      v502 = *v498++;
                      *v499++ = v500 != (unint64_t)v502;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1075 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1076 = (double *)*((_QWORD *)a3 + 2);
                      v1077 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1078 = *v1075++;
                        v1079 = (double)v1078;
                        v1080 = *v1076++;
                        if (v1080 == v1079)
                          v1081 = 0.0;
                        else
                          v1081 = 1.0;
                        *v1077++ = v1081;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v85 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v86 = (double *)*((_QWORD *)a3 + 2);
                    v87 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v88 = *v85++;
                      v89 = (double)v88;
                      v90 = *v86++;
                      if (v90 == v89)
                        v91 = 0.0;
                      else
                        v91 = 1.0;
                      *v87++ = v91;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
          }
        }
        else if (v17 == 1)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1798 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1799 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1800 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1802 = *v1798;
                        v1798 += 8;
                        v1801 = v1802;
                        v1803 = *v1799++;
                        *v1800++ = v1803 != v1801;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v808 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v809 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v810 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v812 = *v808;
                      v808 += 8;
                      v811 = v812;
                      v813 = *v809++;
                      *v810++ = v813 != v811;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1804 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1805 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1806 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1808 = *v1804++;
                        v1807 = v1808;
                        LODWORD(v1808) = *v1805++;
                        *v1806++ = v1807 != v1808;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v814 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v815 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v816 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v818 = *v814++;
                      v817 = v818;
                      LODWORD(v818) = *v815++;
                      *v816++ = v817 != v818;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1264 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1265 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1266 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1267 = *v1264++;
                        v1268 = v1267;
                        LODWORD(v1267) = *v1265++;
                        if ((double)v1268 == (double)v1267)
                          v1269 = 0.0;
                        else
                          v1269 = 1.0;
                        *v1266++ = v1269;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v274 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v275 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v276 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v277 = *v274++;
                      v278 = v277;
                      LODWORD(v277) = *v275++;
                      if ((double)v278 == (double)v277)
                        v279 = 0.0;
                      else
                        v279 = 1.0;
                      *v276++ = v279;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1809 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1810 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1811 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1813 = *v1809;
                        v1809 += 8;
                        v1812 = v1813;
                        v1814 = *v1810;
                        v1810 += 8;
                        *v1811++ = v1812 != v1814;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v819 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v820 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v821 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v823 = *v819;
                      v819 += 8;
                      v822 = v823;
                      v824 = *v820;
                      v820 += 8;
                      *v821++ = v822 != v824;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1815 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1816 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v1817 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1819 = *v1815++;
                        v1818 = v1819;
                        v1820 = *v1816++;
                        *v1817++ = v1818 != v1820;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v825 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v826 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v827 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v829 = *v825++;
                      v828 = v829;
                      v830 = *v826++;
                      *v827++ = v828 != v830;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1270 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1271 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1272 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1273 = *v1270++;
                        v1274 = (double)v1273;
                        v1275 = *v1271++;
                        if (v1274 == (double)v1275)
                          v1276 = 0.0;
                        else
                          v1276 = 1.0;
                        *v1272++ = v1276;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v280 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v281 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v282 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v283 = *v280++;
                      v284 = (double)v283;
                      v285 = *v281++;
                      if (v284 == (double)v285)
                        v286 = 0.0;
                      else
                        v286 = 1.0;
                      *v282++ = v286;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1493 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1494 = (double *)*((_QWORD *)a3 + 2);
                      v1495 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1497 = *v1493;
                        v1493 += 8;
                        v1496 = v1497;
                        v1498 = *v1494++;
                        *v1495++ = v1496 != (int)v1498;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v503 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v504 = (double *)*((_QWORD *)a3 + 2);
                    v505 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v507 = *v503;
                      v503 += 8;
                      v506 = v507;
                      v508 = *v504++;
                      *v505++ = v506 != (int)v508;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1499 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1500 = (double *)*((_QWORD *)a3 + 2);
                      v1501 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1503 = *v1499++;
                        v1502 = v1503;
                        v1504 = *v1500++;
                        *v1501++ = v1502 != (unint64_t)v1504;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v509 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v510 = (double *)*((_QWORD *)a3 + 2);
                    v511 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v513 = *v509++;
                      v512 = v513;
                      v514 = *v510++;
                      *v511++ = v512 != (unint64_t)v514;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1082 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1083 = (double *)*((_QWORD *)a3 + 2);
                      v1084 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1085 = *v1082++;
                        v1086 = v1085;
                        v1087 = *v1083++;
                        if (v1087 == (double)v1086)
                          v1088 = 0.0;
                        else
                          v1088 = 1.0;
                        *v1084++ = v1088;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v92 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v93 = (double *)*((_QWORD *)a3 + 2);
                    v94 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v95 = *v92++;
                      v96 = v95;
                      v97 = *v93++;
                      if (v97 == (double)v96)
                        v98 = 0.0;
                      else
                        v98 = 1.0;
                      *v94++ = v98;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v17)
        {
          switch(v18)
          {
            case 2:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1622 = (double *)*((_QWORD *)a2 + 2);
                      v1623 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1624 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1625 = *v1622++;
                        v1626 = (int)v1625;
                        LODWORD(v1625) = *v1623++;
                        *v1624++ = LODWORD(v1625) != v1626;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v632 = (double *)*((_QWORD *)a2 + 2);
                    v633 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v634 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v635 = *v632++;
                      v636 = (int)v635;
                      LODWORD(v635) = *v633++;
                      *v634++ = LODWORD(v635) != v636;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1627 = (double *)*((_QWORD *)a2 + 2);
                      v1628 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1629 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1630 = *v1627++;
                        v1631 = (unint64_t)v1630;
                        LODWORD(v1630) = *v1628++;
                        *v1629++ = v1631 != LODWORD(v1630);
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v637 = (double *)*((_QWORD *)a2 + 2);
                    v638 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v639 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v640 = *v637++;
                      v641 = (unint64_t)v640;
                      LODWORD(v640) = *v638++;
                      *v639++ = v641 != LODWORD(v640);
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1158 = (double *)*((_QWORD *)a2 + 2);
                      v1159 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1160 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1161 = *v1158++;
                        v1162 = v1161;
                        LODWORD(v1161) = *v1159++;
                        if (v1162 == (double)LODWORD(v1161))
                          v1163 = 0.0;
                        else
                          v1163 = 1.0;
                        *v1160++ = v1163;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v168 = (double *)*((_QWORD *)a2 + 2);
                    v169 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v170 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v171 = *v168++;
                      v172 = v171;
                      LODWORD(v171) = *v169++;
                      if (v172 == (double)LODWORD(v171))
                        v173 = 0.0;
                      else
                        v173 = 1.0;
                      *v170++ = v173;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 1:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1632 = (double *)*((_QWORD *)a2 + 2);
                      v1633 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1634 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1635 = *v1632++;
                        v1636 = (int)v1635;
                        LODWORD(v1635) = *v1633;
                        v1633 += 8;
                        *v1634++ = v1636 != LODWORD(v1635);
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v642 = (double *)*((_QWORD *)a2 + 2);
                    v643 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v644 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v645 = *v642++;
                      v646 = (int)v645;
                      LODWORD(v645) = *v643;
                      v643 += 8;
                      *v644++ = v646 != LODWORD(v645);
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1637 = (double *)*((_QWORD *)a2 + 2);
                      v1638 = (uint64_t *)*((_QWORD *)a3 + 2);
                      v1639 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1640 = *v1637++;
                        v1641 = (unint64_t)v1640;
                        v1642 = *v1638++;
                        *v1639++ = v1642 != v1641;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v647 = (double *)*((_QWORD *)a2 + 2);
                    v648 = (uint64_t *)*((_QWORD *)a3 + 2);
                    v649 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v650 = *v647++;
                      v651 = (unint64_t)v650;
                      v652 = *v648++;
                      *v649++ = v652 != v651;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1164 = (double *)*((_QWORD *)a2 + 2);
                      v1165 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1166 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1167 = *v1164++;
                        v1168 = v1167;
                        v1169 = *v1165++;
                        if (v1168 == (double)v1169)
                          v1170 = 0.0;
                        else
                          v1170 = 1.0;
                        *v1166++ = v1170;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v174 = (double *)*((_QWORD *)a2 + 2);
                    v175 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v176 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v177 = *v174++;
                      v178 = v177;
                      v179 = *v175++;
                      if (v178 == (double)v179)
                        v180 = 0.0;
                      else
                        v180 = 1.0;
                      *v176++ = v180;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
            case 0:
              switch(v19)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1397 = (double *)*((_QWORD *)a2 + 2);
                      v1398 = (double *)*((_QWORD *)a3 + 2);
                      v1399 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1400 = *v1397++;
                        v1401 = (int)v1400;
                        v1402 = *v1398++;
                        *v1399++ = v1401 != (int)v1402;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v407 = (double *)*((_QWORD *)a2 + 2);
                    v408 = (double *)*((_QWORD *)a3 + 2);
                    v409 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v410 = *v407++;
                      v411 = (int)v410;
                      v412 = *v408++;
                      *v409++ = v411 != (int)v412;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1403 = (double *)*((_QWORD *)a2 + 2);
                      v1404 = (double *)*((_QWORD *)a3 + 2);
                      v1405 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1406 = *v1403++;
                        v1407 = (unint64_t)v1406;
                        v1408 = *v1404++;
                        *v1405++ = v1407 != (unint64_t)v1408;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v413 = (double *)*((_QWORD *)a2 + 2);
                    v414 = (double *)*((_QWORD *)a3 + 2);
                    v415 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v416 = *v413++;
                      v417 = (unint64_t)v416;
                      v418 = *v414++;
                      *v415++ = v417 != (unint64_t)v418;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v16)
                    {
                      v1026 = (double *)*((_QWORD *)a2 + 2);
                      v1027 = (double *)*((_QWORD *)a3 + 2);
                      v1028 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1029 = *v1026++;
                        v1030 = v1029;
                        v1031 = *v1027++;
                        if (v1030 == v1031)
                          v1032 = 0.0;
                        else
                          v1032 = 1.0;
                        *v1028++ = v1032;
                        --v16;
                      }
                      while (v16);
                    }
                  }
                  else if (!a5 && v16)
                  {
                    v20 = (double *)*((_QWORD *)a2 + 2);
                    v21 = (double *)*((_QWORD *)a3 + 2);
                    v22 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v23 = *v20++;
                      v24 = v23;
                      v25 = *v21++;
                      if (v24 == v25)
                        v26 = 0.0;
                      else
                        v26 = 1.0;
                      *v22++ = v26;
                      --v16;
                    }
                    while (v16);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 2:
      result = 0;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32))
          return 0;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 != *((_QWORD *)a3 + 1) || v27 != *((_QWORD *)a4 + 1))
          return 0;
        v28 = *a2;
        v29 = *a3;
        v30 = *a4;
        if (*a2 == 2)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1821 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1822 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1823 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1825 = *v1821++;
                        v1824 = v1825;
                        v1826 = *v1822++;
                        *v1823++ = v1824 < v1826;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v831 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v832 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v833 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v835 = *v831++;
                      v834 = v835;
                      v836 = *v832++;
                      *v833++ = v834 < v836;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1827 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1828 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1829 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1831 = *v1827++;
                        v1830 = v1831;
                        v1832 = *v1828++;
                        *v1829++ = v1830 < v1832;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v837 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v838 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v839 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v841 = *v837++;
                      v840 = v841;
                      v842 = *v838++;
                      *v839++ = v840 < v842;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1277 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1278 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1279 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1281 = *v1277++;
                        v1280 = v1281;
                        v1282 = *v1278++;
                        if (v1280 >= v1282)
                          v1283 = 0.0;
                        else
                          v1283 = 1.0;
                        *v1279++ = v1283;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v287 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v288 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v289 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v291 = *v287++;
                      v290 = v291;
                      v292 = *v288++;
                      if (v290 >= v292)
                        v293 = 0.0;
                      else
                        v293 = 1.0;
                      *v289++ = v293;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1833 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1834 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1835 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1837 = *v1833++;
                        v1836 = v1837;
                        v1838 = *v1834;
                        v1834 += 8;
                        *v1835++ = v1836 < v1838;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v843 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v844 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v845 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v847 = *v843++;
                      v846 = v847;
                      v848 = *v844;
                      v844 += 8;
                      *v845++ = v846 < v848;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1839 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1840 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1841 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1843 = *v1839++;
                        v1842 = v1843;
                        v1844 = *v1840++;
                        *v1841++ = v1844 > v1842;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v849 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v850 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v851 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v853 = *v849++;
                      v852 = v853;
                      v854 = *v850++;
                      *v851++ = v854 > v852;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1284 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1285 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1286 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1287 = *v1284++;
                        v1288 = (double)v1287;
                        v1289 = *v1285++;
                        if (v1288 >= (double)v1289)
                          v1290 = 0.0;
                        else
                          v1290 = 1.0;
                        *v1286++ = v1290;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v294 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v295 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v296 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v297 = *v294++;
                      v298 = (double)v297;
                      v299 = *v295++;
                      if (v298 >= (double)v299)
                        v300 = 0.0;
                      else
                        v300 = 1.0;
                      *v296++ = v300;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1505 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1506 = (double *)*((_QWORD *)a3 + 2);
                      v1507 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1509 = *v1505++;
                        v1508 = v1509;
                        v1510 = *v1506++;
                        *v1507++ = v1508 < (int)v1510;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v515 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v516 = (double *)*((_QWORD *)a3 + 2);
                    v517 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v519 = *v515++;
                      v518 = v519;
                      v520 = *v516++;
                      *v517++ = v518 < (int)v520;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1511 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1512 = (double *)*((_QWORD *)a3 + 2);
                      v1513 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1515 = *v1511++;
                        v1514 = v1515;
                        v1516 = *v1512++;
                        *v1513++ = v1514 < (unint64_t)v1516;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v521 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v522 = (double *)*((_QWORD *)a3 + 2);
                    v523 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v525 = *v521++;
                      v524 = v525;
                      v526 = *v522++;
                      *v523++ = v524 < (unint64_t)v526;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1089 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1090 = (double *)*((_QWORD *)a3 + 2);
                      v1091 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1092 = *v1089++;
                        v1093 = (double)v1092;
                        v1094 = *v1090++;
                        if (v1094 <= v1093)
                          v1095 = 0.0;
                        else
                          v1095 = 1.0;
                        *v1091++ = v1095;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v99 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v100 = (double *)*((_QWORD *)a3 + 2);
                    v101 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v102 = *v99++;
                      v103 = (double)v102;
                      v104 = *v100++;
                      if (v104 <= v103)
                        v105 = 0.0;
                      else
                        v105 = 1.0;
                      *v101++ = v105;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (v28 == 1)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1845 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1846 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1847 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1849 = *v1845;
                        v1845 += 8;
                        v1848 = v1849;
                        v1850 = *v1846++;
                        *v1847++ = v1850 > v1848;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v855 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v856 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v857 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v859 = *v855;
                      v855 += 8;
                      v858 = v859;
                      v860 = *v856++;
                      *v857++ = v860 > v858;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1851 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1852 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1853 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1855 = *v1851++;
                        v1854 = v1855;
                        LODWORD(v1855) = *v1852++;
                        *v1853++ = v1854 < v1855;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v861 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v862 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v863 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v865 = *v861++;
                      v864 = v865;
                      LODWORD(v865) = *v862++;
                      *v863++ = v864 < v865;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1291 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1292 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1293 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1294 = *v1291++;
                        v1295 = v1294;
                        LODWORD(v1294) = *v1292++;
                        if ((double)v1295 >= (double)v1294)
                          v1296 = 0.0;
                        else
                          v1296 = 1.0;
                        *v1293++ = v1296;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v301 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v302 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v303 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v304 = *v301++;
                      v305 = v304;
                      LODWORD(v304) = *v302++;
                      if ((double)v305 >= (double)v304)
                        v306 = 0.0;
                      else
                        v306 = 1.0;
                      *v303++ = v306;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1856 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1857 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1858 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1860 = *v1856;
                        v1856 += 8;
                        v1859 = v1860;
                        v1861 = *v1857;
                        v1857 += 8;
                        *v1858++ = v1859 < v1861;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v866 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v867 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v868 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v870 = *v866;
                      v866 += 8;
                      v869 = v870;
                      v871 = *v867;
                      v867 += 8;
                      *v868++ = v869 < v871;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1862 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1863 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1864 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1866 = *v1862++;
                        v1865 = v1866;
                        v1867 = *v1863++;
                        *v1864++ = v1865 < v1867;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v872 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v873 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v874 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v876 = *v872++;
                      v875 = v876;
                      v877 = *v873++;
                      *v874++ = v875 < v877;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1297 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1298 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1299 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1300 = *v1297++;
                        v1301 = (double)v1300;
                        v1302 = *v1298++;
                        if (v1301 >= (double)v1302)
                          v1303 = 0.0;
                        else
                          v1303 = 1.0;
                        *v1299++ = v1303;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v307 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v308 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v309 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v310 = *v307++;
                      v311 = (double)v310;
                      v312 = *v308++;
                      if (v311 >= (double)v312)
                        v313 = 0.0;
                      else
                        v313 = 1.0;
                      *v309++ = v313;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1517 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1518 = (double *)*((_QWORD *)a3 + 2);
                      v1519 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1521 = *v1517;
                        v1517 += 8;
                        v1520 = v1521;
                        v1522 = *v1518++;
                        *v1519++ = v1520 < (int)v1522;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v527 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v528 = (double *)*((_QWORD *)a3 + 2);
                    v529 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v531 = *v527;
                      v527 += 8;
                      v530 = v531;
                      v532 = *v528++;
                      *v529++ = v530 < (int)v532;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1523 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1524 = (double *)*((_QWORD *)a3 + 2);
                      v1525 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1527 = *v1523++;
                        v1526 = v1527;
                        v1528 = *v1524++;
                        *v1525++ = v1526 < (unint64_t)v1528;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v533 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v534 = (double *)*((_QWORD *)a3 + 2);
                    v535 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v537 = *v533++;
                      v536 = v537;
                      v538 = *v534++;
                      *v535++ = v536 < (unint64_t)v538;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1096 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1097 = (double *)*((_QWORD *)a3 + 2);
                      v1098 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1099 = *v1096++;
                        v1100 = v1099;
                        v1101 = *v1097++;
                        if (v1101 <= (double)v1100)
                          v1102 = 0.0;
                        else
                          v1102 = 1.0;
                        *v1098++ = v1102;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v106 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v107 = (double *)*((_QWORD *)a3 + 2);
                    v108 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v109 = *v106++;
                      v110 = v109;
                      v111 = *v107++;
                      if (v111 <= (double)v110)
                        v112 = 0.0;
                      else
                        v112 = 1.0;
                      *v108++ = v112;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v28)
        {
          switch(v29)
          {
            case 2:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1643 = (double *)*((_QWORD *)a2 + 2);
                      v1644 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1645 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1646 = *v1643++;
                        v1647 = (int)v1646;
                        LODWORD(v1646) = *v1644++;
                        *v1645++ = LODWORD(v1646) > v1647;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v653 = (double *)*((_QWORD *)a2 + 2);
                    v654 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v655 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v656 = *v653++;
                      v657 = (int)v656;
                      LODWORD(v656) = *v654++;
                      *v655++ = LODWORD(v656) > v657;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1648 = (double *)*((_QWORD *)a2 + 2);
                      v1649 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1650 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1651 = *v1648++;
                        v1652 = (unint64_t)v1651;
                        LODWORD(v1651) = *v1649++;
                        *v1650++ = v1652 < LODWORD(v1651);
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v658 = (double *)*((_QWORD *)a2 + 2);
                    v659 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v660 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v661 = *v658++;
                      v662 = (unint64_t)v661;
                      LODWORD(v661) = *v659++;
                      *v660++ = v662 < LODWORD(v661);
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1171 = (double *)*((_QWORD *)a2 + 2);
                      v1172 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1173 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1174 = *v1171++;
                        v1175 = v1174;
                        LODWORD(v1174) = *v1172++;
                        if (v1175 >= (double)LODWORD(v1174))
                          v1176 = 0.0;
                        else
                          v1176 = 1.0;
                        *v1173++ = v1176;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v181 = (double *)*((_QWORD *)a2 + 2);
                    v182 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v183 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v184 = *v181++;
                      v185 = v184;
                      LODWORD(v184) = *v182++;
                      if (v185 >= (double)LODWORD(v184))
                        v186 = 0.0;
                      else
                        v186 = 1.0;
                      *v183++ = v186;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1653 = (double *)*((_QWORD *)a2 + 2);
                      v1654 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1655 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1656 = *v1653++;
                        v1657 = (int)v1656;
                        LODWORD(v1656) = *v1654;
                        v1654 += 8;
                        *v1655++ = v1657 < LODWORD(v1656);
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v663 = (double *)*((_QWORD *)a2 + 2);
                    v664 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v665 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v666 = *v663++;
                      v667 = (int)v666;
                      LODWORD(v666) = *v664;
                      v664 += 8;
                      *v665++ = v667 < LODWORD(v666);
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1658 = (double *)*((_QWORD *)a2 + 2);
                      v1659 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1660 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1661 = *v1658++;
                        v1662 = (unint64_t)v1661;
                        v1663 = *v1659++;
                        *v1660++ = v1663 > v1662;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v668 = (double *)*((_QWORD *)a2 + 2);
                    v669 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v670 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v671 = *v668++;
                      v672 = (unint64_t)v671;
                      v673 = *v669++;
                      *v670++ = v673 > v672;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1177 = (double *)*((_QWORD *)a2 + 2);
                      v1178 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1179 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1180 = *v1177++;
                        v1181 = v1180;
                        v1182 = *v1178++;
                        if (v1181 >= (double)v1182)
                          v1183 = 0.0;
                        else
                          v1183 = 1.0;
                        *v1179++ = v1183;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v187 = (double *)*((_QWORD *)a2 + 2);
                    v188 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v189 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v190 = *v187++;
                      v191 = v190;
                      v192 = *v188++;
                      if (v191 >= (double)v192)
                        v193 = 0.0;
                      else
                        v193 = 1.0;
                      *v189++ = v193;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v30)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1409 = (double *)*((_QWORD *)a2 + 2);
                      v1410 = (double *)*((_QWORD *)a3 + 2);
                      v1411 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1412 = *v1409++;
                        v1413 = (int)v1412;
                        v1414 = *v1410++;
                        *v1411++ = v1413 < (int)v1414;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v419 = (double *)*((_QWORD *)a2 + 2);
                    v420 = (double *)*((_QWORD *)a3 + 2);
                    v421 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v422 = *v419++;
                      v423 = (int)v422;
                      v424 = *v420++;
                      *v421++ = v423 < (int)v424;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1415 = (double *)*((_QWORD *)a2 + 2);
                      v1416 = (double *)*((_QWORD *)a3 + 2);
                      v1417 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1418 = *v1415++;
                        v1419 = (unint64_t)v1418;
                        v1420 = *v1416++;
                        *v1417++ = v1419 < (unint64_t)v1420;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v425 = (double *)*((_QWORD *)a2 + 2);
                    v426 = (double *)*((_QWORD *)a3 + 2);
                    v427 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v428 = *v425++;
                      v429 = (unint64_t)v428;
                      v430 = *v426++;
                      *v427++ = v429 < (unint64_t)v430;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v27)
                    {
                      v1033 = (double *)*((_QWORD *)a2 + 2);
                      v1034 = (double *)*((_QWORD *)a3 + 2);
                      v1035 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1036 = *v1033++;
                        v1037 = v1036;
                        v1038 = *v1034++;
                        if (v1037 >= v1038)
                          v1039 = 0.0;
                        else
                          v1039 = 1.0;
                        *v1035++ = v1039;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a5 && v27)
                  {
                    v31 = (double *)*((_QWORD *)a2 + 2);
                    v32 = (double *)*((_QWORD *)a3 + 2);
                    v33 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v34 = *v31++;
                      v35 = v34;
                      v36 = *v32++;
                      if (v35 >= v36)
                        v37 = 0.0;
                      else
                        v37 = 1.0;
                      *v33++ = v37;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 3:
      result = 0;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32))
          return 0;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 != *((_QWORD *)a3 + 1) || v38 != *((_QWORD *)a4 + 1))
          return 0;
        v39 = *a2;
        v40 = *a3;
        v41 = *a4;
        if (*a2 == 2)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1868 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1869 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1870 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1872 = *v1868++;
                        v1871 = v1872;
                        v1873 = *v1869++;
                        *v1870++ = v1871 > v1873;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v878 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v879 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v880 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v882 = *v878++;
                      v881 = v882;
                      v883 = *v879++;
                      *v880++ = v881 > v883;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1874 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1875 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1876 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1878 = *v1874++;
                        v1877 = v1878;
                        v1879 = *v1875++;
                        *v1876++ = v1877 > v1879;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v884 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v885 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v886 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v888 = *v884++;
                      v887 = v888;
                      v889 = *v885++;
                      *v886++ = v887 > v889;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1304 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1305 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1306 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1308 = *v1304++;
                        v1307 = v1308;
                        v1309 = *v1305++;
                        if (v1307 <= v1309)
                          v1310 = 0.0;
                        else
                          v1310 = 1.0;
                        *v1306++ = v1310;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v314 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v315 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v316 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v318 = *v314++;
                      v317 = v318;
                      v319 = *v315++;
                      if (v317 <= v319)
                        v320 = 0.0;
                      else
                        v320 = 1.0;
                      *v316++ = v320;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1880 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1881 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1882 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1884 = *v1880++;
                        v1883 = v1884;
                        v1885 = *v1881;
                        v1881 += 8;
                        *v1882++ = v1883 > v1885;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v890 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v891 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v892 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v894 = *v890++;
                      v893 = v894;
                      v895 = *v891;
                      v891 += 8;
                      *v892++ = v893 > v895;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1886 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1887 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1888 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1890 = *v1886++;
                        v1889 = v1890;
                        v1891 = *v1887++;
                        *v1888++ = v1891 < v1889;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v896 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v897 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v898 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v900 = *v896++;
                      v899 = v900;
                      v901 = *v897++;
                      *v898++ = v901 < v899;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1311 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1312 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1313 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1314 = *v1311++;
                        v1315 = (double)v1314;
                        v1316 = *v1312++;
                        if (v1315 <= (double)v1316)
                          v1317 = 0.0;
                        else
                          v1317 = 1.0;
                        *v1313++ = v1317;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v321 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v322 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v323 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v324 = *v321++;
                      v325 = (double)v324;
                      v326 = *v322++;
                      if (v325 <= (double)v326)
                        v327 = 0.0;
                      else
                        v327 = 1.0;
                      *v323++ = v327;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1529 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1530 = (double *)*((_QWORD *)a3 + 2);
                      v1531 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1533 = *v1529++;
                        v1532 = v1533;
                        v1534 = *v1530++;
                        *v1531++ = v1532 > (int)v1534;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v539 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v540 = (double *)*((_QWORD *)a3 + 2);
                    v541 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v543 = *v539++;
                      v542 = v543;
                      v544 = *v540++;
                      *v541++ = v542 > (int)v544;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1535 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1536 = (double *)*((_QWORD *)a3 + 2);
                      v1537 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1539 = *v1535++;
                        v1538 = v1539;
                        v1540 = *v1536++;
                        *v1537++ = v1538 > (unint64_t)v1540;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v545 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v546 = (double *)*((_QWORD *)a3 + 2);
                    v547 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v549 = *v545++;
                      v548 = v549;
                      v550 = *v546++;
                      *v547++ = v548 > (unint64_t)v550;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1103 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1104 = (double *)*((_QWORD *)a3 + 2);
                      v1105 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1106 = *v1103++;
                        v1107 = (double)v1106;
                        v1108 = *v1104++;
                        if (v1108 >= v1107)
                          v1109 = 0.0;
                        else
                          v1109 = 1.0;
                        *v1105++ = v1109;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v113 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v114 = (double *)*((_QWORD *)a3 + 2);
                    v115 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v116 = *v113++;
                      v117 = (double)v116;
                      v118 = *v114++;
                      if (v118 >= v117)
                        v119 = 0.0;
                      else
                        v119 = 1.0;
                      *v115++ = v119;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
          }
        }
        else if (v39 == 1)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1892 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1893 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1894 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1896 = *v1892;
                        v1892 += 8;
                        v1895 = v1896;
                        v1897 = *v1893++;
                        *v1894++ = v1897 < v1895;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v902 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v903 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v904 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v906 = *v902;
                      v902 += 8;
                      v905 = v906;
                      v907 = *v903++;
                      *v904++ = v907 < v905;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1898 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1899 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1900 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1902 = *v1898++;
                        v1901 = v1902;
                        LODWORD(v1902) = *v1899++;
                        *v1900++ = v1901 > v1902;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v908 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v909 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v910 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v912 = *v908++;
                      v911 = v912;
                      LODWORD(v912) = *v909++;
                      *v910++ = v911 > v912;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1318 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1319 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1320 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1321 = *v1318++;
                        v1322 = v1321;
                        LODWORD(v1321) = *v1319++;
                        if ((double)v1322 <= (double)v1321)
                          v1323 = 0.0;
                        else
                          v1323 = 1.0;
                        *v1320++ = v1323;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v328 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v329 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v330 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v331 = *v328++;
                      v332 = v331;
                      LODWORD(v331) = *v329++;
                      if ((double)v332 <= (double)v331)
                        v333 = 0.0;
                      else
                        v333 = 1.0;
                      *v330++ = v333;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1903 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1904 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1905 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1907 = *v1903;
                        v1903 += 8;
                        v1906 = v1907;
                        v1908 = *v1904;
                        v1904 += 8;
                        *v1905++ = v1906 > v1908;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v913 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v914 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v915 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v917 = *v913;
                      v913 += 8;
                      v916 = v917;
                      v918 = *v914;
                      v914 += 8;
                      *v915++ = v916 > v918;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1909 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1910 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1911 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1913 = *v1909++;
                        v1912 = v1913;
                        v1914 = *v1910++;
                        *v1911++ = v1912 > v1914;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v919 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v920 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v921 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v923 = *v919++;
                      v922 = v923;
                      v924 = *v920++;
                      *v921++ = v922 > v924;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1324 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1325 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1326 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1327 = *v1324++;
                        v1328 = (double)v1327;
                        v1329 = *v1325++;
                        if (v1328 <= (double)v1329)
                          v1330 = 0.0;
                        else
                          v1330 = 1.0;
                        *v1326++ = v1330;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v334 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v335 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v336 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v337 = *v334++;
                      v338 = (double)v337;
                      v339 = *v335++;
                      if (v338 <= (double)v339)
                        v340 = 0.0;
                      else
                        v340 = 1.0;
                      *v336++ = v340;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1541 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1542 = (double *)*((_QWORD *)a3 + 2);
                      v1543 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1545 = *v1541;
                        v1541 += 8;
                        v1544 = v1545;
                        v1546 = *v1542++;
                        *v1543++ = v1544 > (int)v1546;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v551 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v552 = (double *)*((_QWORD *)a3 + 2);
                    v553 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v555 = *v551;
                      v551 += 8;
                      v554 = v555;
                      v556 = *v552++;
                      *v553++ = v554 > (int)v556;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1547 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1548 = (double *)*((_QWORD *)a3 + 2);
                      v1549 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1551 = *v1547++;
                        v1550 = v1551;
                        v1552 = *v1548++;
                        *v1549++ = v1550 > (unint64_t)v1552;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v557 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v558 = (double *)*((_QWORD *)a3 + 2);
                    v559 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v561 = *v557++;
                      v560 = v561;
                      v562 = *v558++;
                      *v559++ = v560 > (unint64_t)v562;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1110 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1111 = (double *)*((_QWORD *)a3 + 2);
                      v1112 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1113 = *v1110++;
                        v1114 = v1113;
                        v1115 = *v1111++;
                        if (v1115 >= (double)v1114)
                          v1116 = 0.0;
                        else
                          v1116 = 1.0;
                        *v1112++ = v1116;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v120 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v121 = (double *)*((_QWORD *)a3 + 2);
                    v122 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v123 = *v120++;
                      v124 = v123;
                      v125 = *v121++;
                      if (v125 >= (double)v124)
                        v126 = 0.0;
                      else
                        v126 = 1.0;
                      *v122++ = v126;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v39)
        {
          switch(v40)
          {
            case 2:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1664 = (double *)*((_QWORD *)a2 + 2);
                      v1665 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1666 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1667 = *v1664++;
                        v1668 = (int)v1667;
                        LODWORD(v1667) = *v1665++;
                        *v1666++ = LODWORD(v1667) < v1668;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v674 = (double *)*((_QWORD *)a2 + 2);
                    v675 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v676 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v677 = *v674++;
                      v678 = (int)v677;
                      LODWORD(v677) = *v675++;
                      *v676++ = LODWORD(v677) < v678;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1669 = (double *)*((_QWORD *)a2 + 2);
                      v1670 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1671 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1672 = *v1669++;
                        v1673 = (unint64_t)v1672;
                        LODWORD(v1672) = *v1670++;
                        *v1671++ = v1673 > LODWORD(v1672);
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v679 = (double *)*((_QWORD *)a2 + 2);
                    v680 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v681 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v682 = *v679++;
                      v683 = (unint64_t)v682;
                      LODWORD(v682) = *v680++;
                      *v681++ = v683 > LODWORD(v682);
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1184 = (double *)*((_QWORD *)a2 + 2);
                      v1185 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1186 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1187 = *v1184++;
                        v1188 = v1187;
                        LODWORD(v1187) = *v1185++;
                        if (v1188 <= (double)LODWORD(v1187))
                          v1189 = 0.0;
                        else
                          v1189 = 1.0;
                        *v1186++ = v1189;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v194 = (double *)*((_QWORD *)a2 + 2);
                    v195 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v196 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v197 = *v194++;
                      v198 = v197;
                      LODWORD(v197) = *v195++;
                      if (v198 <= (double)LODWORD(v197))
                        v199 = 0.0;
                      else
                        v199 = 1.0;
                      *v196++ = v199;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 1:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1674 = (double *)*((_QWORD *)a2 + 2);
                      v1675 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1676 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1677 = *v1674++;
                        v1678 = (int)v1677;
                        LODWORD(v1677) = *v1675;
                        v1675 += 8;
                        *v1676++ = v1678 > LODWORD(v1677);
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v684 = (double *)*((_QWORD *)a2 + 2);
                    v685 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v686 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v687 = *v684++;
                      v688 = (int)v687;
                      LODWORD(v687) = *v685;
                      v685 += 8;
                      *v686++ = v688 > LODWORD(v687);
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1679 = (double *)*((_QWORD *)a2 + 2);
                      v1680 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1681 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1682 = *v1679++;
                        v1683 = (unint64_t)v1682;
                        v1684 = *v1680++;
                        *v1681++ = v1684 < v1683;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v689 = (double *)*((_QWORD *)a2 + 2);
                    v690 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v691 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v692 = *v689++;
                      v693 = (unint64_t)v692;
                      v694 = *v690++;
                      *v691++ = v694 < v693;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1190 = (double *)*((_QWORD *)a2 + 2);
                      v1191 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1192 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1193 = *v1190++;
                        v1194 = v1193;
                        v1195 = *v1191++;
                        if (v1194 <= (double)v1195)
                          v1196 = 0.0;
                        else
                          v1196 = 1.0;
                        *v1192++ = v1196;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v200 = (double *)*((_QWORD *)a2 + 2);
                    v201 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v202 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v203 = *v200++;
                      v204 = v203;
                      v205 = *v201++;
                      if (v204 <= (double)v205)
                        v206 = 0.0;
                      else
                        v206 = 1.0;
                      *v202++ = v206;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
            case 0:
              switch(v41)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1421 = (double *)*((_QWORD *)a2 + 2);
                      v1422 = (double *)*((_QWORD *)a3 + 2);
                      v1423 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1424 = *v1421++;
                        v1425 = (int)v1424;
                        v1426 = *v1422++;
                        *v1423++ = v1425 > (int)v1426;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v431 = (double *)*((_QWORD *)a2 + 2);
                    v432 = (double *)*((_QWORD *)a3 + 2);
                    v433 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v434 = *v431++;
                      v435 = (int)v434;
                      v436 = *v432++;
                      *v433++ = v435 > (int)v436;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1427 = (double *)*((_QWORD *)a2 + 2);
                      v1428 = (double *)*((_QWORD *)a3 + 2);
                      v1429 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1430 = *v1427++;
                        v1431 = (unint64_t)v1430;
                        v1432 = *v1428++;
                        *v1429++ = v1431 > (unint64_t)v1432;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v437 = (double *)*((_QWORD *)a2 + 2);
                    v438 = (double *)*((_QWORD *)a3 + 2);
                    v439 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v440 = *v437++;
                      v441 = (unint64_t)v440;
                      v442 = *v438++;
                      *v439++ = v441 > (unint64_t)v442;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v38)
                    {
                      v1040 = (double *)*((_QWORD *)a2 + 2);
                      v1041 = (double *)*((_QWORD *)a3 + 2);
                      v1042 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1043 = *v1040++;
                        v1044 = v1043;
                        v1045 = *v1041++;
                        if (v1044 <= v1045)
                          v1046 = 0.0;
                        else
                          v1046 = 1.0;
                        *v1042++ = v1046;
                        --v38;
                      }
                      while (v38);
                    }
                  }
                  else if (!a5 && v38)
                  {
                    v42 = (double *)*((_QWORD *)a2 + 2);
                    v43 = (double *)*((_QWORD *)a3 + 2);
                    v44 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v45 = *v42++;
                      v46 = v45;
                      v47 = *v43++;
                      if (v46 <= v47)
                        v48 = 0.0;
                      else
                        v48 = 1.0;
                      *v44++ = v48;
                      --v38;
                    }
                    while (v38);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 4:
      result = 0;
      if (a2 && a3 && a4)
      {
        if (*((_BYTE *)a4 + 32))
          return 0;
        v49 = *((_QWORD *)a2 + 1);
        if (v49 != *((_QWORD *)a3 + 1) || v49 != *((_QWORD *)a4 + 1))
          return 0;
        v50 = *a2;
        v51 = *a3;
        v52 = *a4;
        if (*a2 == 2)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1915 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1916 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1917 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1919 = *v1915++;
                        v1918 = v1919;
                        v1920 = *v1916++;
                        *v1917++ = v1918 <= v1920;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v925 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v926 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v927 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v929 = *v925++;
                      v928 = v929;
                      v930 = *v926++;
                      *v927++ = v928 <= v930;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1921 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1922 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1923 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1925 = *v1921++;
                        v1924 = v1925;
                        v1926 = *v1922++;
                        *v1923++ = v1924 <= v1926;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v931 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v932 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v933 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v935 = *v931++;
                      v934 = v935;
                      v936 = *v932++;
                      *v933++ = v934 <= v936;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1331 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1332 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1333 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1335 = *v1331++;
                        v1334 = v1335;
                        v1336 = *v1332++;
                        if (v1334 > v1336)
                          v1337 = 0.0;
                        else
                          v1337 = 1.0;
                        *v1333++ = v1337;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v341 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v342 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v343 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v345 = *v341++;
                      v344 = v345;
                      v346 = *v342++;
                      if (v344 > v346)
                        v347 = 0.0;
                      else
                        v347 = 1.0;
                      *v343++ = v347;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1927 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1928 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1929 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1931 = *v1927++;
                        v1930 = v1931;
                        v1932 = *v1928;
                        v1928 += 8;
                        *v1929++ = v1930 <= v1932;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v937 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v938 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v939 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v941 = *v937++;
                      v940 = v941;
                      v942 = *v938;
                      v938 += 8;
                      *v939++ = v940 <= v942;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1933 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1934 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1935 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1937 = *v1933++;
                        v1936 = v1937;
                        v1938 = *v1934++;
                        *v1935++ = v1938 >= v1936;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v943 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v944 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v945 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v947 = *v943++;
                      v946 = v947;
                      v948 = *v944++;
                      *v945++ = v948 >= v946;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1338 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1339 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1340 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1341 = *v1338++;
                        v1342 = (double)v1341;
                        v1343 = *v1339++;
                        if (v1342 > (double)v1343)
                          v1344 = 0.0;
                        else
                          v1344 = 1.0;
                        *v1340++ = v1344;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v348 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v349 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v350 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v351 = *v348++;
                      v352 = (double)v351;
                      v353 = *v349++;
                      if (v352 > (double)v353)
                        v354 = 0.0;
                      else
                        v354 = 1.0;
                      *v350++ = v354;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1553 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1554 = (double *)*((_QWORD *)a3 + 2);
                      v1555 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1557 = *v1553++;
                        v1556 = v1557;
                        v1558 = *v1554++;
                        *v1555++ = v1556 <= (int)v1558;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v563 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v564 = (double *)*((_QWORD *)a3 + 2);
                    v565 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v567 = *v563++;
                      v566 = v567;
                      v568 = *v564++;
                      *v565++ = v566 <= (int)v568;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1559 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1560 = (double *)*((_QWORD *)a3 + 2);
                      v1561 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1563 = *v1559++;
                        v1562 = v1563;
                        v1564 = *v1560++;
                        *v1561++ = v1562 <= (unint64_t)v1564;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v569 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v570 = (double *)*((_QWORD *)a3 + 2);
                    v571 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v573 = *v569++;
                      v572 = v573;
                      v574 = *v570++;
                      *v571++ = v572 <= (unint64_t)v574;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1117 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1118 = (double *)*((_QWORD *)a3 + 2);
                      v1119 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1120 = *v1117++;
                        v1121 = (double)v1120;
                        v1122 = *v1118++;
                        if (v1122 < v1121)
                          v1123 = 0.0;
                        else
                          v1123 = 1.0;
                        *v1119++ = v1123;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v127 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v128 = (double *)*((_QWORD *)a3 + 2);
                    v129 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v130 = *v127++;
                      v131 = (double)v130;
                      v132 = *v128++;
                      if (v132 < v131)
                        v133 = 0.0;
                      else
                        v133 = 1.0;
                      *v129++ = v133;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
          }
        }
        else if (v50 == 1)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1939 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1940 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1941 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1943 = *v1939;
                        v1939 += 8;
                        v1942 = v1943;
                        v1944 = *v1940++;
                        *v1941++ = v1944 >= v1942;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v949 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v950 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v951 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v953 = *v949;
                      v949 += 8;
                      v952 = v953;
                      v954 = *v950++;
                      *v951++ = v954 >= v952;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1945 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1946 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1947 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1949 = *v1945++;
                        v1948 = v1949;
                        LODWORD(v1949) = *v1946++;
                        *v1947++ = v1948 <= v1949;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v955 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v956 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v957 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v959 = *v955++;
                      v958 = v959;
                      LODWORD(v959) = *v956++;
                      *v957++ = v958 <= v959;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1345 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1346 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1347 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1348 = *v1345++;
                        v1349 = v1348;
                        LODWORD(v1348) = *v1346++;
                        if ((double)v1349 > (double)v1348)
                          v1350 = 0.0;
                        else
                          v1350 = 1.0;
                        *v1347++ = v1350;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v355 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v356 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v357 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v358 = *v355++;
                      v359 = v358;
                      LODWORD(v358) = *v356++;
                      if ((double)v359 > (double)v358)
                        v360 = 0.0;
                      else
                        v360 = 1.0;
                      *v357++ = v360;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1950 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1951 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1952 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1954 = *v1950;
                        v1950 += 8;
                        v1953 = v1954;
                        v1955 = *v1951;
                        v1951 += 8;
                        *v1952++ = v1953 <= v1955;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v960 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v961 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v962 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v964 = *v960;
                      v960 += 8;
                      v963 = v964;
                      v965 = *v961;
                      v961 += 8;
                      *v962++ = v963 <= v965;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1956 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1957 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1958 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1960 = *v1956++;
                        v1959 = v1960;
                        v1961 = *v1957++;
                        *v1958++ = v1959 <= v1961;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v966 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v967 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v968 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v970 = *v966++;
                      v969 = v970;
                      v971 = *v967++;
                      *v968++ = v969 <= v971;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1351 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1352 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1353 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1354 = *v1351++;
                        v1355 = (double)v1354;
                        v1356 = *v1352++;
                        if (v1355 > (double)v1356)
                          v1357 = 0.0;
                        else
                          v1357 = 1.0;
                        *v1353++ = v1357;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v361 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v362 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v363 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v364 = *v361++;
                      v365 = (double)v364;
                      v366 = *v362++;
                      if (v365 > (double)v366)
                        v367 = 0.0;
                      else
                        v367 = 1.0;
                      *v363++ = v367;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1565 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1566 = (double *)*((_QWORD *)a3 + 2);
                      v1567 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1569 = *v1565;
                        v1565 += 8;
                        v1568 = v1569;
                        v1570 = *v1566++;
                        *v1567++ = v1568 <= (int)v1570;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v575 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v576 = (double *)*((_QWORD *)a3 + 2);
                    v577 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v579 = *v575;
                      v575 += 8;
                      v578 = v579;
                      v580 = *v576++;
                      *v577++ = v578 <= (int)v580;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1571 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1572 = (double *)*((_QWORD *)a3 + 2);
                      v1573 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1575 = *v1571++;
                        v1574 = v1575;
                        v1576 = *v1572++;
                        *v1573++ = v1574 <= (unint64_t)v1576;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v581 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v582 = (double *)*((_QWORD *)a3 + 2);
                    v583 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v585 = *v581++;
                      v584 = v585;
                      v586 = *v582++;
                      *v583++ = v584 <= (unint64_t)v586;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1124 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1125 = (double *)*((_QWORD *)a3 + 2);
                      v1126 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1127 = *v1124++;
                        v1128 = v1127;
                        v1129 = *v1125++;
                        if (v1129 < (double)v1128)
                          v1130 = 0.0;
                        else
                          v1130 = 1.0;
                        *v1126++ = v1130;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v134 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v135 = (double *)*((_QWORD *)a3 + 2);
                    v136 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v137 = *v134++;
                      v138 = v137;
                      v139 = *v135++;
                      if (v139 < (double)v138)
                        v140 = 0.0;
                      else
                        v140 = 1.0;
                      *v136++ = v140;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v50)
        {
          switch(v51)
          {
            case 2:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1685 = (double *)*((_QWORD *)a2 + 2);
                      v1686 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1687 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1688 = *v1685++;
                        v1689 = (int)v1688;
                        LODWORD(v1688) = *v1686++;
                        *v1687++ = LODWORD(v1688) >= v1689;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v695 = (double *)*((_QWORD *)a2 + 2);
                    v696 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v697 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v698 = *v695++;
                      v699 = (int)v698;
                      LODWORD(v698) = *v696++;
                      *v697++ = LODWORD(v698) >= v699;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1690 = (double *)*((_QWORD *)a2 + 2);
                      v1691 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1692 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1693 = *v1690++;
                        v1694 = (unint64_t)v1693;
                        LODWORD(v1693) = *v1691++;
                        *v1692++ = v1694 <= LODWORD(v1693);
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v700 = (double *)*((_QWORD *)a2 + 2);
                    v701 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v702 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v703 = *v700++;
                      v704 = (unint64_t)v703;
                      LODWORD(v703) = *v701++;
                      *v702++ = v704 <= LODWORD(v703);
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1197 = (double *)*((_QWORD *)a2 + 2);
                      v1198 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1199 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1200 = *v1197++;
                        v1201 = v1200;
                        LODWORD(v1200) = *v1198++;
                        if (v1201 > (double)LODWORD(v1200))
                          v1202 = 0.0;
                        else
                          v1202 = 1.0;
                        *v1199++ = v1202;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v207 = (double *)*((_QWORD *)a2 + 2);
                    v208 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v209 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v210 = *v207++;
                      v211 = v210;
                      LODWORD(v210) = *v208++;
                      if (v211 > (double)LODWORD(v210))
                        v212 = 0.0;
                      else
                        v212 = 1.0;
                      *v209++ = v212;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 1:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1695 = (double *)*((_QWORD *)a2 + 2);
                      v1696 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                      v1697 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1698 = *v1695++;
                        v1699 = (int)v1698;
                        LODWORD(v1698) = *v1696;
                        v1696 += 8;
                        *v1697++ = v1699 <= LODWORD(v1698);
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v705 = (double *)*((_QWORD *)a2 + 2);
                    v706 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v707 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v708 = *v705++;
                      v709 = (int)v708;
                      LODWORD(v708) = *v706;
                      v706 += 8;
                      *v707++ = v709 <= LODWORD(v708);
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1700 = (double *)*((_QWORD *)a2 + 2);
                      v1701 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1702 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1703 = *v1700++;
                        v1704 = (unint64_t)v1703;
                        v1705 = *v1701++;
                        *v1702++ = v1705 >= v1704;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v710 = (double *)*((_QWORD *)a2 + 2);
                    v711 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v712 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v713 = *v710++;
                      v714 = (unint64_t)v713;
                      v715 = *v711++;
                      *v712++ = v715 >= v714;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1203 = (double *)*((_QWORD *)a2 + 2);
                      v1204 = (unint64_t *)*((_QWORD *)a3 + 2);
                      v1205 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1206 = *v1203++;
                        v1207 = v1206;
                        v1208 = *v1204++;
                        if (v1207 > (double)v1208)
                          v1209 = 0.0;
                        else
                          v1209 = 1.0;
                        *v1205++ = v1209;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v213 = (double *)*((_QWORD *)a2 + 2);
                    v214 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v215 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v216 = *v213++;
                      v217 = v216;
                      v218 = *v214++;
                      if (v217 > (double)v218)
                        v219 = 0.0;
                      else
                        v219 = 1.0;
                      *v215++ = v219;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
            case 0:
              switch(v52)
              {
                case 2:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1433 = (double *)*((_QWORD *)a2 + 2);
                      v1434 = (double *)*((_QWORD *)a3 + 2);
                      v1435 = (BOOL *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1436 = *v1433++;
                        v1437 = (int)v1436;
                        v1438 = *v1434++;
                        *v1435++ = v1437 <= (int)v1438;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v443 = (double *)*((_QWORD *)a2 + 2);
                    v444 = (double *)*((_QWORD *)a3 + 2);
                    v445 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v446 = *v443++;
                      v447 = (int)v446;
                      v448 = *v444++;
                      *v445++ = v447 <= (int)v448;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 1:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1439 = (double *)*((_QWORD *)a2 + 2);
                      v1440 = (double *)*((_QWORD *)a3 + 2);
                      v1441 = (_QWORD *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1442 = *v1439++;
                        v1443 = (unint64_t)v1442;
                        v1444 = *v1440++;
                        *v1441++ = v1443 <= (unint64_t)v1444;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v449 = (double *)*((_QWORD *)a2 + 2);
                    v450 = (double *)*((_QWORD *)a3 + 2);
                    v451 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v452 = *v449++;
                      v453 = (unint64_t)v452;
                      v454 = *v450++;
                      *v451++ = v453 <= (unint64_t)v454;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
                case 0:
                  if (a5 == 1)
                  {
                    if (v49)
                    {
                      v1047 = (double *)*((_QWORD *)a2 + 2);
                      v1048 = (double *)*((_QWORD *)a3 + 2);
                      v1049 = (double *)*((_QWORD *)a4 + 2);
                      do
                      {
                        v1050 = *v1047++;
                        v1051 = v1050;
                        v1052 = *v1048++;
                        if (v1051 > v1052)
                          v1053 = 0.0;
                        else
                          v1053 = 1.0;
                        *v1049++ = v1053;
                        --v49;
                      }
                      while (v49);
                    }
                  }
                  else if (!a5 && v49)
                  {
                    v53 = (double *)*((_QWORD *)a2 + 2);
                    v54 = (double *)*((_QWORD *)a3 + 2);
                    v55 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v56 = *v53++;
                      v57 = v56;
                      v58 = *v54++;
                      if (v57 > v58)
                        v59 = 0.0;
                      else
                        v59 = 1.0;
                      *v55++ = v59;
                      --v49;
                    }
                    while (v49);
                  }
                  break;
              }
              break;
          }
        }
        return a4;
      }
      return result;
    case 5:
      result = 0;
      if (!a2 || !a3 || !a4)
        return result;
      if (*((_BYTE *)a4 + 32))
        return 0;
      v60 = *((_QWORD *)a2 + 1);
      if (v60 != *((_QWORD *)a3 + 1) || v60 != *((_QWORD *)a4 + 1))
        return 0;
      v61 = *a2;
      v62 = *a3;
      v63 = *a4;
      if (*a2 == 2)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1962 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1963 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1964 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1966 = *v1962++;
                      v1965 = v1966;
                      v1967 = *v1963++;
                      *v1964++ = v1965 >= v1967;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v972 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v973 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v974 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v976 = *v972++;
                    v975 = v976;
                    v977 = *v973++;
                    *v974++ = v975 >= v977;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1968 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1969 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1970 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1972 = *v1968++;
                      v1971 = v1972;
                      v1973 = *v1969++;
                      *v1970++ = v1971 >= v1973;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v978 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v979 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v980 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v982 = *v978++;
                    v981 = v982;
                    v983 = *v979++;
                    *v980++ = v981 >= v983;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1358 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1359 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1360 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1362 = *v1358++;
                      v1361 = v1362;
                      v1363 = *v1359++;
                      if (v1361 < v1363)
                        v1364 = 0.0;
                      else
                        v1364 = 1.0;
                      *v1360++ = v1364;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v368 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v369 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v370 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v372 = *v368++;
                    v371 = v372;
                    v373 = *v369++;
                    if (v371 < v373)
                      v374 = 0.0;
                    else
                      v374 = 1.0;
                    *v370++ = v374;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1974 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1975 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1976 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1978 = *v1974++;
                      v1977 = v1978;
                      v1979 = *v1975;
                      v1975 += 8;
                      *v1976++ = v1977 >= v1979;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v984 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v985 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v986 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v988 = *v984++;
                    v987 = v988;
                    v989 = *v985;
                    v985 += 8;
                    *v986++ = v987 >= v989;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1980 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1981 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v1982 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1984 = *v1980++;
                      v1983 = v1984;
                      v1985 = *v1981++;
                      *v1982++ = v1985 <= v1983;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v990 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v991 = (unint64_t *)*((_QWORD *)a3 + 2);
                  v992 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v994 = *v990++;
                    v993 = v994;
                    v995 = *v991++;
                    *v992++ = v995 <= v993;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1365 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1366 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v1367 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1368 = *v1365++;
                      v1369 = (double)v1368;
                      v1370 = *v1366++;
                      if (v1369 < (double)v1370)
                        v1371 = 0.0;
                      else
                        v1371 = 1.0;
                      *v1367++ = v1371;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v375 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v376 = (unint64_t *)*((_QWORD *)a3 + 2);
                  v377 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v378 = *v375++;
                    v379 = (double)v378;
                    v380 = *v376++;
                    if (v379 < (double)v380)
                      v381 = 0.0;
                    else
                      v381 = 1.0;
                    *v377++ = v381;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1577 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1578 = (double *)*((_QWORD *)a3 + 2);
                    v1579 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1581 = *v1577++;
                      v1580 = v1581;
                      v1582 = *v1578++;
                      *v1579++ = v1580 >= (int)v1582;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v587 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v588 = (double *)*((_QWORD *)a3 + 2);
                  v589 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v591 = *v587++;
                    v590 = v591;
                    v592 = *v588++;
                    *v589++ = v590 >= (int)v592;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1583 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1584 = (double *)*((_QWORD *)a3 + 2);
                    v1585 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1587 = *v1583++;
                      v1586 = v1587;
                      v1588 = *v1584++;
                      *v1585++ = v1586 >= (unint64_t)v1588;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v593 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v594 = (double *)*((_QWORD *)a3 + 2);
                  v595 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v597 = *v593++;
                    v596 = v597;
                    v598 = *v594++;
                    *v595++ = v596 >= (unint64_t)v598;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1131 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1132 = (double *)*((_QWORD *)a3 + 2);
                    v1133 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1134 = *v1131++;
                      v1135 = (double)v1134;
                      v1136 = *v1132++;
                      if (v1136 > v1135)
                        v1137 = 0.0;
                      else
                        v1137 = 1.0;
                      *v1133++ = v1137;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v141 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v142 = (double *)*((_QWORD *)a3 + 2);
                  v143 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v144 = *v141++;
                    v145 = (double)v144;
                    v146 = *v142++;
                    if (v146 > v145)
                      v147 = 0.0;
                    else
                      v147 = 1.0;
                    *v143++ = v147;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
        }
      }
      else if (v61 == 1)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1986 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1987 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1988 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1990 = *v1986;
                      v1986 += 8;
                      v1989 = v1990;
                      v1991 = *v1987++;
                      *v1988++ = v1991 <= v1989;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v996 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v997 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v998 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v1000 = *v996;
                    v996 += 8;
                    v999 = v1000;
                    v1001 = *v997++;
                    *v998++ = v1001 <= v999;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1992 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v1993 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1994 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1996 = *v1992++;
                      v1995 = v1996;
                      LODWORD(v1996) = *v1993++;
                      *v1994++ = v1995 >= v1996;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v1002 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v1003 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v1004 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v1006 = *v1002++;
                    v1005 = v1006;
                    LODWORD(v1006) = *v1003++;
                    *v1004++ = v1005 >= v1006;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1372 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v1373 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1374 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1375 = *v1372++;
                      v1376 = v1375;
                      LODWORD(v1375) = *v1373++;
                      if ((double)v1376 < (double)v1375)
                        v1377 = 0.0;
                      else
                        v1377 = 1.0;
                      *v1374++ = v1377;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v382 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v383 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v384 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v385 = *v382++;
                    v386 = v385;
                    LODWORD(v385) = *v383++;
                    if ((double)v386 < (double)v385)
                      v387 = 0.0;
                    else
                      v387 = 1.0;
                    *v384++ = v387;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1997 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1998 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1999 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v2001 = *v1997;
                      v1997 += 8;
                      v2000 = v2001;
                      v2002 = *v1998;
                      v1998 += 8;
                      *v1999++ = v2000 >= v2002;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v1007 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v1008 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v1009 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v1011 = *v1007;
                    v1007 += 8;
                    v1010 = v1011;
                    v1012 = *v1008;
                    v1008 += 8;
                    *v1009++ = v1010 >= v1012;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v2003 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v2004 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v2005 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v2007 = *v2003++;
                      v2006 = v2007;
                      v2008 = *v2004++;
                      *v2005++ = v2006 >= v2008;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v1013 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v1014 = (unint64_t *)*((_QWORD *)a3 + 2);
                  v1015 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v1017 = *v1013++;
                    v1016 = v1017;
                    v1018 = *v1014++;
                    *v1015++ = v1016 >= v1018;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1378 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v1379 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v1380 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1381 = *v1378++;
                      v1382 = (double)v1381;
                      v1383 = *v1379++;
                      if (v1382 < (double)v1383)
                        v1384 = 0.0;
                      else
                        v1384 = 1.0;
                      *v1380++ = v1384;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v388 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v389 = (unint64_t *)*((_QWORD *)a3 + 2);
                  v390 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v391 = *v388++;
                    v392 = (double)v391;
                    v393 = *v389++;
                    if (v392 < (double)v393)
                      v394 = 0.0;
                    else
                      v394 = 1.0;
                    *v390++ = v394;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1589 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1590 = (double *)*((_QWORD *)a3 + 2);
                    v1591 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1593 = *v1589;
                      v1589 += 8;
                      v1592 = v1593;
                      v1594 = *v1590++;
                      *v1591++ = v1592 >= (int)v1594;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v599 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v600 = (double *)*((_QWORD *)a3 + 2);
                  v601 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v603 = *v599;
                    v599 += 8;
                    v602 = v603;
                    v604 = *v600++;
                    *v601++ = v602 >= (int)v604;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1595 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v1596 = (double *)*((_QWORD *)a3 + 2);
                    v1597 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1599 = *v1595++;
                      v1598 = v1599;
                      v1600 = *v1596++;
                      *v1597++ = v1598 >= (unint64_t)v1600;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v605 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v606 = (double *)*((_QWORD *)a3 + 2);
                  v607 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v609 = *v605++;
                    v608 = v609;
                    v610 = *v606++;
                    *v607++ = v608 >= (unint64_t)v610;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1138 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v1139 = (double *)*((_QWORD *)a3 + 2);
                    v1140 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1141 = *v1138++;
                      v1142 = v1141;
                      v1143 = *v1139++;
                      if (v1143 > (double)v1142)
                        v1144 = 0.0;
                      else
                        v1144 = 1.0;
                      *v1140++ = v1144;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v148 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v149 = (double *)*((_QWORD *)a3 + 2);
                  v150 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v151 = *v148++;
                    v152 = v151;
                    v153 = *v149++;
                    if (v153 > (double)v152)
                      v154 = 0.0;
                    else
                      v154 = 1.0;
                    *v150++ = v154;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
        }
      }
      else if (!v61)
      {
        switch(v62)
        {
          case 2:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1706 = (double *)*((_QWORD *)a2 + 2);
                    v1707 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1708 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1709 = *v1706++;
                      v1710 = (int)v1709;
                      LODWORD(v1709) = *v1707++;
                      *v1708++ = LODWORD(v1709) <= v1710;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v716 = (double *)*((_QWORD *)a2 + 2);
                  v717 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v718 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v719 = *v716++;
                    v720 = (int)v719;
                    LODWORD(v719) = *v717++;
                    *v718++ = LODWORD(v719) <= v720;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1711 = (double *)*((_QWORD *)a2 + 2);
                    v1712 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1713 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1714 = *v1711++;
                      v1715 = (unint64_t)v1714;
                      LODWORD(v1714) = *v1712++;
                      *v1713++ = v1715 >= LODWORD(v1714);
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v721 = (double *)*((_QWORD *)a2 + 2);
                  v722 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v723 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v724 = *v721++;
                    v725 = (unint64_t)v724;
                    LODWORD(v724) = *v722++;
                    *v723++ = v725 >= LODWORD(v724);
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1210 = (double *)*((_QWORD *)a2 + 2);
                    v1211 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1212 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1213 = *v1210++;
                      v1214 = v1213;
                      LODWORD(v1213) = *v1211++;
                      if (v1214 < (double)LODWORD(v1213))
                        v1215 = 0.0;
                      else
                        v1215 = 1.0;
                      *v1212++ = v1215;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v220 = (double *)*((_QWORD *)a2 + 2);
                  v221 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v222 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v223 = *v220++;
                    v224 = v223;
                    LODWORD(v223) = *v221++;
                    if (v224 < (double)LODWORD(v223))
                      v225 = 0.0;
                    else
                      v225 = 1.0;
                    *v222++ = v225;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            break;
          case 1:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1716 = (double *)*((_QWORD *)a2 + 2);
                    v1717 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                    v1718 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1719 = *v1716++;
                      v1720 = (int)v1719;
                      LODWORD(v1719) = *v1717;
                      v1717 += 8;
                      *v1718++ = v1720 >= LODWORD(v1719);
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v726 = (double *)*((_QWORD *)a2 + 2);
                  v727 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
                  v728 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v729 = *v726++;
                    v730 = (int)v729;
                    LODWORD(v729) = *v727;
                    v727 += 8;
                    *v728++ = v730 >= LODWORD(v729);
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1721 = (double *)*((_QWORD *)a2 + 2);
                    v1722 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v1723 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1724 = *v1721++;
                      v1725 = (unint64_t)v1724;
                      v1726 = *v1722++;
                      *v1723++ = v1726 <= v1725;
                      --v60;
                    }
                    while (v60);
                  }
                  return a4;
                }
                if (!a5)
                {
                  if (v60)
                  {
                    v731 = (double *)*((_QWORD *)a2 + 2);
                    v732 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v733 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v734 = *v731++;
                      v735 = (unint64_t)v734;
                      v736 = *v732++;
                      *v733++ = v736 <= v735;
                      --v60;
                    }
                    while (v60);
                  }
                  return a4;
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1216 = (double *)*((_QWORD *)a2 + 2);
                    v1217 = (unint64_t *)*((_QWORD *)a3 + 2);
                    v1218 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1219 = *v1216++;
                      v1220 = v1219;
                      v1221 = *v1217++;
                      if (v1220 < (double)v1221)
                        v1222 = 0.0;
                      else
                        v1222 = 1.0;
                      *v1218++ = v1222;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v226 = (double *)*((_QWORD *)a2 + 2);
                  v227 = (unint64_t *)*((_QWORD *)a3 + 2);
                  v228 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v229 = *v226++;
                    v230 = v229;
                    v231 = *v227++;
                    if (v230 < (double)v231)
                      v232 = 0.0;
                    else
                      v232 = 1.0;
                    *v228++ = v232;
                    --v60;
                  }
                  while (v60);
                }
                return a4;
            }
            break;
          case 0:
            switch(v63)
            {
              case 2:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1445 = (double *)*((_QWORD *)a2 + 2);
                    v1446 = (double *)*((_QWORD *)a3 + 2);
                    v1447 = (BOOL *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1448 = *v1445++;
                      v1449 = (int)v1448;
                      v1450 = *v1446++;
                      *v1447++ = v1449 >= (int)v1450;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v455 = (double *)*((_QWORD *)a2 + 2);
                  v456 = (double *)*((_QWORD *)a3 + 2);
                  v457 = (BOOL *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v458 = *v455++;
                    v459 = (int)v458;
                    v460 = *v456++;
                    *v457++ = v459 >= (int)v460;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 1:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1451 = (double *)*((_QWORD *)a2 + 2);
                    v1452 = (double *)*((_QWORD *)a3 + 2);
                    v1453 = (_QWORD *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1454 = *v1451++;
                      v1455 = (unint64_t)v1454;
                      v1456 = *v1452++;
                      *v1453++ = v1455 >= (unint64_t)v1456;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v461 = (double *)*((_QWORD *)a2 + 2);
                  v462 = (double *)*((_QWORD *)a3 + 2);
                  v463 = (_QWORD *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v464 = *v461++;
                    v465 = (unint64_t)v464;
                    v466 = *v462++;
                    *v463++ = v465 >= (unint64_t)v466;
                    --v60;
                  }
                  while (v60);
                }
                break;
              case 0:
                if (a5 == 1)
                {
                  if (v60)
                  {
                    v1054 = (double *)*((_QWORD *)a2 + 2);
                    v1055 = (double *)*((_QWORD *)a3 + 2);
                    v1056 = (double *)*((_QWORD *)a4 + 2);
                    do
                    {
                      v1057 = *v1054++;
                      v1058 = v1057;
                      v1059 = *v1055++;
                      if (v1058 < v1059)
                        v1060 = 0.0;
                      else
                        v1060 = 1.0;
                      *v1056++ = v1060;
                      --v60;
                    }
                    while (v60);
                  }
                }
                else if (!a5 && v60)
                {
                  v64 = (double *)*((_QWORD *)a2 + 2);
                  v65 = (double *)*((_QWORD *)a3 + 2);
                  v66 = (double *)*((_QWORD *)a4 + 2);
                  do
                  {
                    v67 = *v64++;
                    v68 = v67;
                    v69 = *v65++;
                    if (v68 < v69)
                      v70 = 0.0;
                    else
                      v70 = 1.0;
                    *v66++ = v70;
                    --v60;
                  }
                  while (v60);
                }
                break;
            }
            return a4;
        }
      }
      return a4;
    default:
      return result;
  }
}

int *sub_1BF28(int *result, int a2, unint64_t a3, int *a4, int *a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  int v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  int v35;
  int v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  uint64_t v41;
  int v42;
  int v43;
  double *v44;
  double *v45;
  double v46;
  double v47;
  double *v48;
  double *v49;
  double v50;
  double v51;
  double *v52;
  double *v53;
  double v54;
  double v55;
  double *v56;
  double *v57;
  double v58;
  double v59;
  double *v60;
  double *v61;
  double v62;
  double v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double *v68;
  double *v69;
  double v70;
  double v71;
  double *v72;
  double *v73;
  double v74;
  double v75;
  double *v76;
  double *v77;
  double v78;
  double v79;
  double *v80;
  double *v81;
  double v82;
  double v83;
  double *v84;
  double *v85;
  double v86;
  double v87;
  double *v88;
  double *v89;
  double v90;
  double v91;
  double *v92;
  double *v93;
  double v94;
  double v95;
  unsigned __int8 *v96;
  double *v97;
  unsigned int v98;
  double v99;
  unint64_t *v100;
  double *v101;
  unint64_t v102;
  double v103;
  unsigned __int8 *v104;
  double *v105;
  unsigned int v106;
  double v107;
  unint64_t *v108;
  double *v109;
  unint64_t v110;
  double v111;
  unsigned __int8 *v112;
  double *v113;
  unsigned int v114;
  double v115;
  unint64_t *v116;
  double *v117;
  unint64_t v118;
  double v119;
  unsigned __int8 *v120;
  double *v121;
  unsigned int v122;
  double v123;
  unint64_t *v124;
  double *v125;
  unint64_t v126;
  double v127;
  unsigned __int8 *v128;
  double *v129;
  unsigned int v130;
  double v131;
  unint64_t *v132;
  double *v133;
  unint64_t v134;
  double v135;
  unsigned __int8 *v136;
  double *v137;
  unsigned int v138;
  double v139;
  unint64_t *v140;
  double *v141;
  unint64_t v142;
  double v143;
  unsigned __int8 *v144;
  double *v145;
  int v146;
  double v147;
  unint64_t *v148;
  double *v149;
  unint64_t v150;
  double v151;
  unsigned __int8 *v152;
  double *v153;
  unsigned int v154;
  double v155;
  unint64_t *v156;
  double *v157;
  unint64_t v158;
  double v159;
  unsigned __int8 *v160;
  double *v161;
  int v162;
  double v163;
  unint64_t *v164;
  double *v165;
  unint64_t v166;
  double v167;
  unsigned __int8 *v168;
  double *v169;
  unsigned int v170;
  double v171;
  unint64_t *v172;
  double *v173;
  unint64_t v174;
  double v175;
  unsigned __int8 *v176;
  double *v177;
  unsigned int v178;
  double v179;
  unint64_t *v180;
  double *v181;
  unint64_t v182;
  double v183;
  unsigned __int8 *v184;
  double *v185;
  unsigned int v186;
  double v187;
  unint64_t *v188;
  double *v189;
  unint64_t v190;
  double v191;
  unsigned __int8 *v192;
  double *v193;
  unsigned int v194;
  double v195;
  unint64_t *v196;
  double *v197;
  unint64_t v198;
  double v199;
  unsigned __int8 *v200;
  double *v201;
  unsigned int v202;
  double v203;
  unint64_t *v204;
  double *v205;
  unint64_t v206;
  double v207;
  unsigned __int8 *v208;
  double *v209;
  unsigned int v210;
  double v211;
  unint64_t *v212;
  double *v213;
  unint64_t v214;
  double v215;
  unsigned __int8 *v216;
  double *v217;
  unsigned int v218;
  double v219;
  unint64_t *v220;
  double *v221;
  unint64_t v222;
  double v223;
  unsigned __int8 *v224;
  double *v225;
  unsigned int v226;
  double v227;
  unint64_t *v228;
  double *v229;
  unint64_t v230;
  double v231;
  unsigned __int8 *v232;
  double *v233;
  unsigned int v234;
  double v235;
  unint64_t *v236;
  double *v237;
  unint64_t v238;
  double v239;
  double *v240;
  BOOL *v241;
  double v242;
  double *v243;
  _QWORD *v244;
  double v245;
  double *v246;
  BOOL *v247;
  double v248;
  double *v249;
  _QWORD *v250;
  double v251;
  double *v252;
  BOOL *v253;
  double v254;
  double *v255;
  _QWORD *v256;
  double v257;
  double *v258;
  BOOL *v259;
  double v260;
  double *v261;
  _QWORD *v262;
  double v263;
  double *v264;
  BOOL *v265;
  double v266;
  double *v267;
  _QWORD *v268;
  double v269;
  double *v270;
  BOOL *v271;
  double v272;
  double *v273;
  _QWORD *v274;
  double v275;
  double *v276;
  BOOL *v277;
  double v278;
  double *v279;
  _QWORD *v280;
  double v281;
  double *v282;
  BOOL *v283;
  double v284;
  double *v285;
  _QWORD *v286;
  double v287;
  double *v288;
  BOOL *v289;
  double v290;
  double *v291;
  _QWORD *v292;
  double v293;
  double *v294;
  BOOL *v295;
  double v296;
  double *v297;
  _QWORD *v298;
  double v299;
  double *v300;
  BOOL *v301;
  double v302;
  double *v303;
  _QWORD *v304;
  double v305;
  double *v306;
  BOOL *v307;
  double v308;
  double *v309;
  _QWORD *v310;
  double v311;
  double *v312;
  BOOL *v313;
  double v314;
  double *v315;
  _QWORD *v316;
  double v317;
  double *v318;
  BOOL *v319;
  double v320;
  double *v321;
  _QWORD *v322;
  double v323;
  double *v324;
  BOOL *v325;
  double v326;
  double *v327;
  _QWORD *v328;
  double v329;
  double *v330;
  BOOL *v331;
  double v332;
  double *v333;
  _QWORD *v334;
  double v335;
  double *v336;
  BOOL *v337;
  double v338;
  double *v339;
  _QWORD *v340;
  double v341;
  double *v342;
  BOOL *v343;
  double v344;
  double *v345;
  _QWORD *v346;
  double v347;
  unsigned __int8 *v348;
  BOOL *v349;
  int v350;
  unsigned __int8 *v351;
  _QWORD *v352;
  int v353;
  unsigned __int8 *v354;
  BOOL *v355;
  int v356;
  uint64_t *v357;
  _QWORD *v358;
  uint64_t v359;
  unsigned __int8 *v360;
  BOOL *v361;
  int v362;
  unsigned __int8 *v363;
  _QWORD *v364;
  int v365;
  unsigned __int8 *v366;
  BOOL *v367;
  int v368;
  uint64_t *v369;
  _QWORD *v370;
  uint64_t v371;
  unsigned __int8 *v372;
  BOOL *v373;
  unsigned int v374;
  unsigned __int8 *v375;
  _QWORD *v376;
  unsigned int v377;
  unsigned __int8 *v378;
  BOOL *v379;
  unsigned int v380;
  unint64_t *v381;
  _QWORD *v382;
  unint64_t v383;
  unsigned __int8 *v384;
  BOOL *v385;
  unsigned int v386;
  unsigned __int8 *v387;
  _QWORD *v388;
  unsigned int v389;
  unsigned __int8 *v390;
  BOOL *v391;
  unsigned int v392;
  unint64_t *v393;
  _QWORD *v394;
  unint64_t v395;
  unsigned __int8 *v396;
  BOOL *v397;
  unsigned int v398;
  unsigned __int8 *v399;
  _QWORD *v400;
  unsigned int v401;
  unsigned __int8 *v402;
  BOOL *v403;
  unsigned int v404;
  unint64_t *v405;
  _QWORD *v406;
  unint64_t v407;
  unsigned __int8 *v408;
  BOOL *v409;
  unsigned int v410;
  unsigned __int8 *v411;
  _QWORD *v412;
  unsigned int v413;
  unsigned __int8 *v414;
  BOOL *v415;
  unsigned int v416;
  unint64_t *v417;
  _QWORD *v418;
  unint64_t v419;
  unsigned __int8 *v420;
  BOOL *v421;
  int v422;
  unsigned __int8 *v423;
  _QWORD *v424;
  int v425;
  unsigned __int8 *v426;
  BOOL *v427;
  int v428;
  uint64_t *v429;
  _QWORD *v430;
  uint64_t v431;
  unsigned __int8 *v432;
  BOOL *v433;
  int v434;
  unsigned __int8 *v435;
  _QWORD *v436;
  int v437;
  unsigned __int8 *v438;
  BOOL *v439;
  int v440;
  uint64_t *v441;
  _QWORD *v442;
  uint64_t v443;
  unsigned __int8 *v444;
  BOOL *v445;
  int v446;
  unsigned __int8 *v447;
  _QWORD *v448;
  int v449;
  unsigned __int8 *v450;
  BOOL *v451;
  int v452;
  uint64_t *v453;
  _QWORD *v454;
  uint64_t v455;
  unsigned __int8 *v456;
  BOOL *v457;
  int v458;
  unsigned __int8 *v459;
  _QWORD *v460;
  int v461;
  unsigned __int8 *v462;
  BOOL *v463;
  int v464;
  uint64_t *v465;
  _QWORD *v466;
  uint64_t v467;
  unsigned __int8 *v468;
  BOOL *v469;
  unsigned int v470;
  unsigned __int8 *v471;
  _QWORD *v472;
  unsigned int v473;
  unsigned __int8 *v474;
  BOOL *v475;
  unsigned int v476;
  unint64_t *v477;
  _QWORD *v478;
  unint64_t v479;
  unsigned __int8 *v480;
  BOOL *v481;
  unsigned int v482;
  unsigned __int8 *v483;
  _QWORD *v484;
  unsigned int v485;
  unsigned __int8 *v486;
  BOOL *v487;
  unsigned int v488;
  unint64_t *v489;
  _QWORD *v490;
  unint64_t v491;
  unsigned __int8 *v492;
  BOOL *v493;
  unsigned int v494;
  unsigned __int8 *v495;
  _QWORD *v496;
  unsigned int v497;
  unsigned __int8 *v498;
  BOOL *v499;
  unsigned int v500;
  unint64_t *v501;
  _QWORD *v502;
  unint64_t v503;
  unsigned __int8 *v504;
  BOOL *v505;
  unsigned int v506;
  unsigned __int8 *v507;
  _QWORD *v508;
  unsigned int v509;
  unsigned __int8 *v510;
  BOOL *v511;
  unsigned int v512;
  unint64_t *v513;
  _QWORD *v514;
  unint64_t v515;
  unsigned __int8 *v516;
  BOOL *v517;
  unsigned int v518;
  unsigned __int8 *v519;
  _QWORD *v520;
  unsigned int v521;
  unsigned __int8 *v522;
  BOOL *v523;
  unsigned int v524;
  unint64_t *v525;
  _QWORD *v526;
  unint64_t v527;
  unsigned __int8 *v528;
  BOOL *v529;
  unsigned int v530;
  unsigned __int8 *v531;
  _QWORD *v532;
  unsigned int v533;
  unsigned __int8 *v534;
  BOOL *v535;
  unsigned int v536;
  unint64_t *v537;
  _QWORD *v538;
  unint64_t v539;
  unsigned __int8 *v540;
  BOOL *v541;
  unsigned int v542;
  unsigned __int8 *v543;
  _QWORD *v544;
  unsigned int v545;
  unsigned __int8 *v546;
  BOOL *v547;
  unsigned int v548;
  unint64_t *v549;
  _QWORD *v550;
  unint64_t v551;
  unsigned __int8 *v552;
  BOOL *v553;
  unsigned int v554;
  unsigned __int8 *v555;
  _QWORD *v556;
  unsigned int v557;
  unsigned __int8 *v558;
  BOOL *v559;
  unsigned int v560;
  unint64_t *v561;
  _QWORD *v562;
  unint64_t v563;
  double *v564;
  double *v565;
  double v566;
  double v567;
  double *v568;
  double *v569;
  double v570;
  double v571;
  double *v572;
  double *v573;
  double v574;
  double v575;
  double *v576;
  double *v577;
  double v578;
  double v579;
  double *v580;
  double *v581;
  double v582;
  double v583;
  double *v584;
  double *v585;
  double v586;
  double v587;
  double *v588;
  double *v589;
  double v590;
  double v591;
  double *v592;
  double *v593;
  double v594;
  double v595;
  double *v596;
  double *v597;
  double v598;
  double v599;
  double *v600;
  double *v601;
  double v602;
  double v603;
  double *v604;
  double *v605;
  double v606;
  double v607;
  double *v608;
  double *v609;
  double v610;
  double v611;
  double *v612;
  double *v613;
  double v614;
  double v615;
  double *v616;
  double *v617;
  double v618;
  double v619;
  double *v620;
  double *v621;
  double v622;
  double v623;
  double *v624;
  double *v625;
  double v626;
  double v627;
  double *v628;
  double *v629;
  double v630;
  double v631;
  double *v632;
  double *v633;
  double v634;
  double v635;
  unsigned __int8 *v636;
  double *v637;
  unsigned int v638;
  double v639;
  unint64_t *v640;
  double *v641;
  unint64_t v642;
  double v643;
  unsigned __int8 *v644;
  double *v645;
  unsigned int v646;
  double v647;
  unint64_t *v648;
  double *v649;
  unint64_t v650;
  double v651;
  unsigned __int8 *v652;
  double *v653;
  unsigned int v654;
  double v655;
  unint64_t *v656;
  double *v657;
  unint64_t v658;
  double v659;
  unsigned __int8 *v660;
  double *v661;
  unsigned int v662;
  double v663;
  unint64_t *v664;
  double *v665;
  unint64_t v666;
  double v667;
  unsigned __int8 *v668;
  double *v669;
  unsigned int v670;
  double v671;
  unint64_t *v672;
  double *v673;
  unint64_t v674;
  double v675;
  unsigned __int8 *v676;
  double *v677;
  unsigned int v678;
  double v679;
  unint64_t *v680;
  double *v681;
  unint64_t v682;
  double v683;
  unsigned __int8 *v684;
  double *v685;
  int v686;
  double v687;
  unint64_t *v688;
  double *v689;
  unint64_t v690;
  double v691;
  unsigned __int8 *v692;
  double *v693;
  unsigned int v694;
  double v695;
  unint64_t *v696;
  double *v697;
  unint64_t v698;
  double v699;
  unsigned __int8 *v700;
  double *v701;
  int v702;
  double v703;
  unint64_t *v704;
  double *v705;
  unint64_t v706;
  double v707;
  unsigned __int8 *v708;
  double *v709;
  unsigned int v710;
  double v711;
  unint64_t *v712;
  double *v713;
  unint64_t v714;
  double v715;
  unsigned __int8 *v716;
  double *v717;
  unsigned int v718;
  double v719;
  unint64_t *v720;
  double *v721;
  unint64_t v722;
  double v723;
  unsigned __int8 *v724;
  double *v725;
  unsigned int v726;
  double v727;
  unint64_t *v728;
  double *v729;
  unint64_t v730;
  double v731;
  unsigned __int8 *v732;
  double *v733;
  unsigned int v734;
  double v735;
  unint64_t *v736;
  double *v737;
  unint64_t v738;
  double v739;
  unsigned __int8 *v740;
  double *v741;
  unsigned int v742;
  double v743;
  unint64_t *v744;
  double *v745;
  unint64_t v746;
  double v747;
  unsigned __int8 *v748;
  double *v749;
  unsigned int v750;
  double v751;
  unint64_t *v752;
  double *v753;
  unint64_t v754;
  double v755;
  unsigned __int8 *v756;
  double *v757;
  unsigned int v758;
  double v759;
  unint64_t *v760;
  double *v761;
  unint64_t v762;
  double v763;
  unsigned __int8 *v764;
  double *v765;
  unsigned int v766;
  double v767;
  unint64_t *v768;
  double *v769;
  unint64_t v770;
  double v771;
  unsigned __int8 *v772;
  double *v773;
  unsigned int v774;
  double v775;
  unint64_t *v776;
  double *v777;
  unint64_t v778;
  double v779;
  double *v780;
  BOOL *v781;
  double v782;
  double *v783;
  _QWORD *v784;
  double v785;
  double *v786;
  BOOL *v787;
  double v788;
  double *v789;
  _QWORD *v790;
  double v791;
  double *v792;
  BOOL *v793;
  double v794;
  double *v795;
  _QWORD *v796;
  double v797;
  double *v798;
  BOOL *v799;
  double v800;
  double *v801;
  _QWORD *v802;
  double v803;
  double *v804;
  BOOL *v805;
  double v806;
  double *v807;
  _QWORD *v808;
  double v809;
  double *v810;
  BOOL *v811;
  double v812;
  double *v813;
  _QWORD *v814;
  double v815;
  double *v816;
  BOOL *v817;
  double v818;
  double *v819;
  _QWORD *v820;
  double v821;
  double *v822;
  BOOL *v823;
  double v824;
  double *v825;
  _QWORD *v826;
  double v827;
  double *v828;
  BOOL *v829;
  double v830;
  double *v831;
  _QWORD *v832;
  double v833;
  double *v834;
  BOOL *v835;
  double v836;
  double *v837;
  _QWORD *v838;
  double v839;
  double *v840;
  BOOL *v841;
  double v842;
  double *v843;
  _QWORD *v844;
  double v845;
  double *v846;
  BOOL *v847;
  double v848;
  double *v849;
  _QWORD *v850;
  double v851;
  double *v852;
  BOOL *v853;
  double v854;
  double *v855;
  _QWORD *v856;
  double v857;
  double *v858;
  BOOL *v859;
  double v860;
  double *v861;
  _QWORD *v862;
  double v863;
  double *v864;
  BOOL *v865;
  double v866;
  double *v867;
  _QWORD *v868;
  double v869;
  double *v870;
  BOOL *v871;
  double v872;
  double *v873;
  _QWORD *v874;
  double v875;
  double *v876;
  BOOL *v877;
  double v878;
  double *v879;
  _QWORD *v880;
  double v881;
  double *v882;
  BOOL *v883;
  double v884;
  double *v885;
  _QWORD *v886;
  double v887;
  unsigned __int8 *v888;
  BOOL *v889;
  int v890;
  unsigned __int8 *v891;
  _QWORD *v892;
  int v893;
  unsigned __int8 *v894;
  BOOL *v895;
  int v896;
  uint64_t *v897;
  _QWORD *v898;
  uint64_t v899;
  unsigned __int8 *v900;
  BOOL *v901;
  int v902;
  unsigned __int8 *v903;
  _QWORD *v904;
  int v905;
  unsigned __int8 *v906;
  BOOL *v907;
  int v908;
  uint64_t *v909;
  _QWORD *v910;
  uint64_t v911;
  unsigned __int8 *v912;
  BOOL *v913;
  unsigned int v914;
  unsigned __int8 *v915;
  _QWORD *v916;
  unsigned int v917;
  unsigned __int8 *v918;
  BOOL *v919;
  unsigned int v920;
  unint64_t *v921;
  _QWORD *v922;
  unint64_t v923;
  unsigned __int8 *v924;
  BOOL *v925;
  unsigned int v926;
  unsigned __int8 *v927;
  _QWORD *v928;
  unsigned int v929;
  unsigned __int8 *v930;
  BOOL *v931;
  unsigned int v932;
  unint64_t *v933;
  _QWORD *v934;
  unint64_t v935;
  unsigned __int8 *v936;
  BOOL *v937;
  unsigned int v938;
  unsigned __int8 *v939;
  _QWORD *v940;
  unsigned int v941;
  unsigned __int8 *v942;
  BOOL *v943;
  unsigned int v944;
  unint64_t *v945;
  _QWORD *v946;
  unint64_t v947;
  unsigned __int8 *v948;
  BOOL *v949;
  unsigned int v950;
  unsigned __int8 *v951;
  _QWORD *v952;
  unsigned int v953;
  unsigned __int8 *v954;
  BOOL *v955;
  unsigned int v956;
  unint64_t *v957;
  _QWORD *v958;
  unint64_t v959;
  unsigned __int8 *v960;
  BOOL *v961;
  int v962;
  unsigned __int8 *v963;
  _QWORD *v964;
  int v965;
  unsigned __int8 *v966;
  BOOL *v967;
  int v968;
  uint64_t *v969;
  _QWORD *v970;
  uint64_t v971;
  unsigned __int8 *v972;
  BOOL *v973;
  int v974;
  unsigned __int8 *v975;
  _QWORD *v976;
  int v977;
  unsigned __int8 *v978;
  BOOL *v979;
  int v980;
  uint64_t *v981;
  _QWORD *v982;
  uint64_t v983;
  unsigned __int8 *v984;
  BOOL *v985;
  int v986;
  unsigned __int8 *v987;
  _QWORD *v988;
  int v989;
  unsigned __int8 *v990;
  BOOL *v991;
  int v992;
  uint64_t *v993;
  _QWORD *v994;
  uint64_t v995;
  unsigned __int8 *v996;
  BOOL *v997;
  int v998;
  unsigned __int8 *v999;
  _QWORD *v1000;
  int v1001;
  unsigned __int8 *v1002;
  BOOL *v1003;
  int v1004;
  uint64_t *v1005;
  _QWORD *v1006;
  uint64_t v1007;
  unsigned __int8 *v1008;
  BOOL *v1009;
  unsigned int v1010;
  unsigned __int8 *v1011;
  _QWORD *v1012;
  unsigned int v1013;
  unsigned __int8 *v1014;
  BOOL *v1015;
  unsigned int v1016;
  unint64_t *v1017;
  _QWORD *v1018;
  unint64_t v1019;
  unsigned __int8 *v1020;
  BOOL *v1021;
  unsigned int v1022;
  unsigned __int8 *v1023;
  _QWORD *v1024;
  unsigned int v1025;
  unsigned __int8 *v1026;
  BOOL *v1027;
  unsigned int v1028;
  unint64_t *v1029;
  _QWORD *v1030;
  unint64_t v1031;
  unsigned __int8 *v1032;
  BOOL *v1033;
  unsigned int v1034;
  unsigned __int8 *v1035;
  _QWORD *v1036;
  unsigned int v1037;
  unsigned __int8 *v1038;
  BOOL *v1039;
  unsigned int v1040;
  unint64_t *v1041;
  _QWORD *v1042;
  unint64_t v1043;
  unsigned __int8 *v1044;
  BOOL *v1045;
  unsigned int v1046;
  unsigned __int8 *v1047;
  _QWORD *v1048;
  unsigned int v1049;
  unsigned __int8 *v1050;
  BOOL *v1051;
  unsigned int v1052;
  unint64_t *v1053;
  _QWORD *v1054;
  unint64_t v1055;
  unsigned __int8 *v1056;
  BOOL *v1057;
  unsigned int v1058;
  unsigned __int8 *v1059;
  _QWORD *v1060;
  unsigned int v1061;
  unsigned __int8 *v1062;
  BOOL *v1063;
  unsigned int v1064;
  unint64_t *v1065;
  _QWORD *v1066;
  unint64_t v1067;
  unsigned __int8 *v1068;
  BOOL *v1069;
  unsigned int v1070;
  unsigned __int8 *v1071;
  _QWORD *v1072;
  unsigned int v1073;
  unsigned __int8 *v1074;
  BOOL *v1075;
  unsigned int v1076;
  unint64_t *v1077;
  _QWORD *v1078;
  unint64_t v1079;
  unsigned __int8 *v1080;
  BOOL *v1081;
  unsigned int v1082;
  unsigned __int8 *v1083;
  _QWORD *v1084;
  unsigned int v1085;
  unsigned __int8 *v1086;
  BOOL *v1087;
  unsigned int v1088;
  unint64_t *v1089;
  _QWORD *v1090;
  unint64_t v1091;
  unsigned __int8 *v1092;
  BOOL *v1093;
  unsigned int v1094;
  unsigned __int8 *v1095;
  _QWORD *v1096;
  unsigned int v1097;
  unsigned __int8 *v1098;
  BOOL *v1099;
  unsigned int v1100;
  unint64_t *v1101;
  _QWORD *v1102;
  unint64_t v1103;

  switch((int)result)
  {
    case 0:
      result = 0;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v6 = *((_QWORD *)a4 + 1);
        if (v6 != *((_QWORD *)a5 + 1))
          return 0;
        v7 = *a4;
        v8 = *a5;
        switch(a2)
        {
          case 2:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v960 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v961 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v962 = *v960++;
                          *v961++ = v962 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v420 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v421 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v422 = *v420++;
                        *v421++ = v422 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v963 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v964 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v965 = *v963++;
                          *v964++ = v965 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v423 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v424 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v425 = *v423++;
                        *v424++ = v425 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v684 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v685 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v686 = *v684++;
                          if (v686 == a3)
                            v687 = 1.0;
                          else
                            v687 = 0.0;
                          *v685++ = v687;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v144 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v145 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v146 = *v144++;
                        if (v146 == a3)
                          v147 = 1.0;
                        else
                          v147 = 0.0;
                        *v145++ = v147;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v966 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v967 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v968 = *v966;
                          v966 += 8;
                          *v967++ = a3 == v968;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v426 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v427 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v428 = *v426;
                        v426 += 8;
                        *v427++ = a3 == v428;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v969 = (uint64_t *)*((_QWORD *)a4 + 2);
                        v970 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v971 = *v969++;
                          *v970++ = a3 == v971;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v429 = (uint64_t *)*((_QWORD *)a4 + 2);
                      v430 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v431 = *v429++;
                        *v430++ = a3 == v431;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v688 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v689 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v690 = *v688++;
                          if ((double)a3 == (double)v690)
                            v691 = 1.0;
                          else
                            v691 = 0.0;
                          *v689++ = v691;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v148 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v149 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v150 = *v148++;
                        if ((double)a3 == (double)v150)
                          v151 = 1.0;
                        else
                          v151 = 0.0;
                        *v149++ = v151;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v816 = (double *)*((_QWORD *)a4 + 2);
                        v817 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v818 = *v816++;
                          *v817++ = (int)v818 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v276 = (double *)*((_QWORD *)a4 + 2);
                      v277 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v278 = *v276++;
                        *v277++ = (int)v278 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v819 = (double *)*((_QWORD *)a4 + 2);
                        v820 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v821 = *v819++;
                          *v820++ = a3 == (unint64_t)v821;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v279 = (double *)*((_QWORD *)a4 + 2);
                      v280 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v281 = *v279++;
                        *v280++ = a3 == (unint64_t)v281;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v588 = (double *)*((_QWORD *)a4 + 2);
                        v589 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v590 = *v588++;
                          if (v590 == (double)a3)
                            v591 = 1.0;
                          else
                            v591 = 0.0;
                          *v589++ = v591;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v48 = (double *)*((_QWORD *)a4 + 2);
                      v49 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v50 = *v48++;
                        if (v50 == (double)a3)
                          v51 = 1.0;
                        else
                          v51 = 0.0;
                        *v49++ = v51;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v972 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v973 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v974 = *v972++;
                          *v973++ = v974 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v432 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v433 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v434 = *v432++;
                        *v433++ = v434 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v975 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v976 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v977 = *v975++;
                          *v976++ = a3 == v977;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v435 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v436 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v437 = *v435++;
                        *v436++ = a3 == v437;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v692 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v693 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v694 = *v692++;
                          if ((double)a3 == (double)v694)
                            v695 = 1.0;
                          else
                            v695 = 0.0;
                          *v693++ = v695;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v152 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v153 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v154 = *v152++;
                        if ((double)a3 == (double)v154)
                          v155 = 1.0;
                        else
                          v155 = 0.0;
                        *v153++ = v155;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v978 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v979 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v980 = *v978;
                          v978 += 8;
                          *v979++ = a3 == v980;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v438 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v439 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v440 = *v438;
                        v438 += 8;
                        *v439++ = a3 == v440;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v981 = (uint64_t *)*((_QWORD *)a4 + 2);
                        v982 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v983 = *v981++;
                          *v982++ = v983 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v441 = (uint64_t *)*((_QWORD *)a4 + 2);
                      v442 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v443 = *v441++;
                        *v442++ = v443 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v696 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v697 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v698 = *v696++;
                          if ((double)a3 == (double)v698)
                            v699 = 1.0;
                          else
                            v699 = 0.0;
                          *v697++ = v699;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v156 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v157 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v158 = *v156++;
                        if ((double)a3 == (double)v158)
                          v159 = 1.0;
                        else
                          v159 = 0.0;
                        *v157++ = v159;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v822 = (double *)*((_QWORD *)a4 + 2);
                        v823 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v824 = *v822++;
                          *v823++ = (int)v824 == a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v282 = (double *)*((_QWORD *)a4 + 2);
                      v283 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v284 = *v282++;
                        *v283++ = (int)v284 == a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v825 = (double *)*((_QWORD *)a4 + 2);
                        v826 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v827 = *v825++;
                          *v826++ = a3 == (unint64_t)v827;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v285 = (double *)*((_QWORD *)a4 + 2);
                      v286 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v287 = *v285++;
                        *v286++ = a3 == (unint64_t)v287;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v592 = (double *)*((_QWORD *)a4 + 2);
                        v593 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v594 = *v592++;
                          if (v594 == (double)a3)
                            v595 = 1.0;
                          else
                            v595 = 0.0;
                          *v593++ = v595;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v52 = (double *)*((_QWORD *)a4 + 2);
                      v53 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v54 = *v52++;
                        if (v54 == (double)a3)
                          v55 = 1.0;
                        else
                          v55 = 0.0;
                        *v53++ = v55;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v7)
            {
              case 2:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v888 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v889 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v890 = *v888++;
                          *v889++ = v890 == (int)*(double *)&a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v348 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v349 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v350 = *v348++;
                        *v349++ = v350 == (int)*(double *)&a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v891 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v892 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v893 = *v891++;
                          *v892++ = (unint64_t)*(double *)&a3 == v893;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v351 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v352 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v353 = *v351++;
                        *v352++ = (unint64_t)*(double *)&a3 == v353;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v636 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v637 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v638 = *v636++;
                          if (*(double *)&a3 == (double)v638)
                            v639 = 1.0;
                          else
                            v639 = 0.0;
                          *v637++ = v639;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v96 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v97 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v98 = *v96++;
                        if (*(double *)&a3 == (double)v98)
                          v99 = 1.0;
                        else
                          v99 = 0.0;
                        *v97++ = v99;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 1:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v894 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v895 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v896 = *v894;
                          v894 += 8;
                          *v895++ = (int)*(double *)&a3 == v896;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v354 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v355 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v356 = *v354;
                        v354 += 8;
                        *v355++ = (int)*(double *)&a3 == v356;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v897 = (uint64_t *)*((_QWORD *)a4 + 2);
                        v898 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v899 = *v897++;
                          *v898++ = v899 == (unint64_t)*(double *)&a3;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v357 = (uint64_t *)*((_QWORD *)a4 + 2);
                      v358 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v359 = *v357++;
                        *v358++ = v359 == (unint64_t)*(double *)&a3;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v640 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v641 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v642 = *v640++;
                          if (*(double *)&a3 == (double)v642)
                            v643 = 1.0;
                          else
                            v643 = 0.0;
                          *v641++ = v643;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v100 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v101 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v102 = *v100++;
                        if (*(double *)&a3 == (double)v102)
                          v103 = 1.0;
                        else
                          v103 = 0.0;
                        *v101++ = v103;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
              case 0:
                switch(v8)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v780 = (double *)*((_QWORD *)a4 + 2);
                        v781 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v782 = *v780++;
                          *v781++ = (int)*(double *)&a3 == (int)v782;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v240 = (double *)*((_QWORD *)a4 + 2);
                      v241 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v242 = *v240++;
                        *v241++ = (int)*(double *)&a3 == (int)v242;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v783 = (double *)*((_QWORD *)a4 + 2);
                        v784 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v785 = *v783++;
                          *v784++ = a3 == *(uint64_t *)&v785;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v243 = (double *)*((_QWORD *)a4 + 2);
                      v244 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v245 = *v243++;
                        *v244++ = a3 == *(uint64_t *)&v245;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v6)
                      {
                        v564 = (double *)*((_QWORD *)a4 + 2);
                        v565 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v566 = *v564++;
                          if (v566 == *(double *)&a3)
                            v567 = 1.0;
                          else
                            v567 = 0.0;
                          *v565++ = v567;
                          --v6;
                        }
                        while (v6);
                      }
                    }
                    else if (!a6 && v6)
                    {
                      v9 = (double *)*((_QWORD *)a4 + 2);
                      v10 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v11 = *v9++;
                        if (v11 == *(double *)&a3)
                          v12 = 1.0;
                        else
                          v12 = 0.0;
                        *v10++ = v12;
                        --v6;
                      }
                      while (v6);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 1:
      result = 0;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v13 = *((_QWORD *)a4 + 1);
        if (v13 != *((_QWORD *)a5 + 1))
          return 0;
        v14 = *a4;
        v15 = *a5;
        switch(a2)
        {
          case 2:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v984 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v985 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v986 = *v984++;
                          *v985++ = v986 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v444 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v445 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v446 = *v444++;
                        *v445++ = v446 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v987 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v988 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v989 = *v987++;
                          *v988++ = v989 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v447 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v448 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v449 = *v447++;
                        *v448++ = v449 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v700 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v701 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v702 = *v700++;
                          if (v702 == a3)
                            v703 = 0.0;
                          else
                            v703 = 1.0;
                          *v701++ = v703;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v160 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v161 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v162 = *v160++;
                        if (v162 == a3)
                          v163 = 0.0;
                        else
                          v163 = 1.0;
                        *v161++ = v163;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v990 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v991 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v992 = *v990;
                          v990 += 8;
                          *v991++ = a3 != v992;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v450 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v451 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v452 = *v450;
                        v450 += 8;
                        *v451++ = a3 != v452;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v993 = (uint64_t *)*((_QWORD *)a4 + 2);
                        v994 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v995 = *v993++;
                          *v994++ = a3 != v995;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v453 = (uint64_t *)*((_QWORD *)a4 + 2);
                      v454 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v455 = *v453++;
                        *v454++ = a3 != v455;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v704 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v705 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v706 = *v704++;
                          if ((double)a3 == (double)v706)
                            v707 = 0.0;
                          else
                            v707 = 1.0;
                          *v705++ = v707;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v164 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v165 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v166 = *v164++;
                        if ((double)a3 == (double)v166)
                          v167 = 0.0;
                        else
                          v167 = 1.0;
                        *v165++ = v167;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v828 = (double *)*((_QWORD *)a4 + 2);
                        v829 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v830 = *v828++;
                          *v829++ = (int)v830 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v288 = (double *)*((_QWORD *)a4 + 2);
                      v289 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v290 = *v288++;
                        *v289++ = (int)v290 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v831 = (double *)*((_QWORD *)a4 + 2);
                        v832 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v833 = *v831++;
                          *v832++ = a3 != (unint64_t)v833;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v291 = (double *)*((_QWORD *)a4 + 2);
                      v292 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v293 = *v291++;
                        *v292++ = a3 != (unint64_t)v293;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v596 = (double *)*((_QWORD *)a4 + 2);
                        v597 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v598 = *v596++;
                          if (v598 == (double)a3)
                            v599 = 0.0;
                          else
                            v599 = 1.0;
                          *v597++ = v599;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v56 = (double *)*((_QWORD *)a4 + 2);
                      v57 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v58 = *v56++;
                        if (v58 == (double)a3)
                          v59 = 0.0;
                        else
                          v59 = 1.0;
                        *v57++ = v59;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v996 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v997 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v998 = *v996++;
                          *v997++ = v998 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v456 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v457 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v458 = *v456++;
                        *v457++ = v458 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v999 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1000 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1001 = *v999++;
                          *v1000++ = a3 != v1001;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v459 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v460 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v461 = *v459++;
                        *v460++ = a3 != v461;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v708 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v709 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v710 = *v708++;
                          if ((double)a3 == (double)v710)
                            v711 = 0.0;
                          else
                            v711 = 1.0;
                          *v709++ = v711;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v168 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v169 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v170 = *v168++;
                        if ((double)a3 == (double)v170)
                          v171 = 0.0;
                        else
                          v171 = 1.0;
                        *v169++ = v171;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v1002 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1003 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1004 = *v1002;
                          v1002 += 8;
                          *v1003++ = a3 != v1004;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v462 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v463 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v464 = *v462;
                        v462 += 8;
                        *v463++ = a3 != v464;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v1005 = (uint64_t *)*((_QWORD *)a4 + 2);
                        v1006 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1007 = *v1005++;
                          *v1006++ = v1007 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v465 = (uint64_t *)*((_QWORD *)a4 + 2);
                      v466 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v467 = *v465++;
                        *v466++ = v467 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v712 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v713 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v714 = *v712++;
                          if ((double)a3 == (double)v714)
                            v715 = 0.0;
                          else
                            v715 = 1.0;
                          *v713++ = v715;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v172 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v173 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v174 = *v172++;
                        if ((double)a3 == (double)v174)
                          v175 = 0.0;
                        else
                          v175 = 1.0;
                        *v173++ = v175;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v834 = (double *)*((_QWORD *)a4 + 2);
                        v835 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v836 = *v834++;
                          *v835++ = (int)v836 != a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v294 = (double *)*((_QWORD *)a4 + 2);
                      v295 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v296 = *v294++;
                        *v295++ = (int)v296 != a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v837 = (double *)*((_QWORD *)a4 + 2);
                        v838 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v839 = *v837++;
                          *v838++ = a3 != (unint64_t)v839;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v297 = (double *)*((_QWORD *)a4 + 2);
                      v298 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v299 = *v297++;
                        *v298++ = a3 != (unint64_t)v299;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v600 = (double *)*((_QWORD *)a4 + 2);
                        v601 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v602 = *v600++;
                          if (v602 == (double)a3)
                            v603 = 0.0;
                          else
                            v603 = 1.0;
                          *v601++ = v603;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v60 = (double *)*((_QWORD *)a4 + 2);
                      v61 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v62 = *v60++;
                        if (v62 == (double)a3)
                          v63 = 0.0;
                        else
                          v63 = 1.0;
                        *v61++ = v63;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v14)
            {
              case 2:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v900 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v901 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v902 = *v900++;
                          *v901++ = v902 != (int)*(double *)&a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v360 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v361 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v362 = *v360++;
                        *v361++ = v362 != (int)*(double *)&a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v903 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v904 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v905 = *v903++;
                          *v904++ = (unint64_t)*(double *)&a3 != v905;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v363 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v364 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v365 = *v363++;
                        *v364++ = (unint64_t)*(double *)&a3 != v365;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v644 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v645 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v646 = *v644++;
                          if (*(double *)&a3 == (double)v646)
                            v647 = 0.0;
                          else
                            v647 = 1.0;
                          *v645++ = v647;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v104 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v105 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v106 = *v104++;
                        if (*(double *)&a3 == (double)v106)
                          v107 = 0.0;
                        else
                          v107 = 1.0;
                        *v105++ = v107;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 1:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v906 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v907 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v908 = *v906;
                          v906 += 8;
                          *v907++ = (int)*(double *)&a3 != v908;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v366 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v367 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v368 = *v366;
                        v366 += 8;
                        *v367++ = (int)*(double *)&a3 != v368;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v909 = (uint64_t *)*((_QWORD *)a4 + 2);
                        v910 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v911 = *v909++;
                          *v910++ = v911 != (unint64_t)*(double *)&a3;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v369 = (uint64_t *)*((_QWORD *)a4 + 2);
                      v370 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v371 = *v369++;
                        *v370++ = v371 != (unint64_t)*(double *)&a3;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v648 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v649 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v650 = *v648++;
                          if (*(double *)&a3 == (double)v650)
                            v651 = 0.0;
                          else
                            v651 = 1.0;
                          *v649++ = v651;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v108 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v109 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v110 = *v108++;
                        if (*(double *)&a3 == (double)v110)
                          v111 = 0.0;
                        else
                          v111 = 1.0;
                        *v109++ = v111;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
              case 0:
                switch(v15)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v786 = (double *)*((_QWORD *)a4 + 2);
                        v787 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v788 = *v786++;
                          *v787++ = (int)*(double *)&a3 != (int)v788;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v246 = (double *)*((_QWORD *)a4 + 2);
                      v247 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v248 = *v246++;
                        *v247++ = (int)*(double *)&a3 != (int)v248;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v789 = (double *)*((_QWORD *)a4 + 2);
                        v790 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v791 = *v789++;
                          *v790++ = a3 != *(uint64_t *)&v791;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v249 = (double *)*((_QWORD *)a4 + 2);
                      v250 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v251 = *v249++;
                        *v250++ = a3 != *(uint64_t *)&v251;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v13)
                      {
                        v568 = (double *)*((_QWORD *)a4 + 2);
                        v569 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v570 = *v568++;
                          if (v570 == *(double *)&a3)
                            v571 = 0.0;
                          else
                            v571 = 1.0;
                          *v569++ = v571;
                          --v13;
                        }
                        while (v13);
                      }
                    }
                    else if (!a6 && v13)
                    {
                      v16 = (double *)*((_QWORD *)a4 + 2);
                      v17 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v18 = *v16++;
                        if (v18 == *(double *)&a3)
                          v19 = 0.0;
                        else
                          v19 = 1.0;
                        *v17++ = v19;
                        --v13;
                      }
                      while (v13);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 2:
      result = 0;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v20 = *((_QWORD *)a4 + 1);
        if (v20 != *((_QWORD *)a5 + 1))
          return 0;
        v21 = *a4;
        v22 = *a5;
        switch(a2)
        {
          case 2:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1008 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1009 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1010 = *v1008++;
                          *v1009++ = v1010 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v468 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v469 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v470 = *v468++;
                        *v469++ = v470 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1011 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1012 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1013 = *v1011++;
                          *v1012++ = a3 < (unint64_t)v1013;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v471 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v472 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v473 = *v471++;
                        *v472++ = a3 < (unint64_t)v473;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v716 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v717 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v718 = *v716++;
                          if (a3 >= v718)
                            v719 = 0.0;
                          else
                            v719 = 1.0;
                          *v717++ = v719;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v176 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v177 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v178 = *v176++;
                        if (a3 >= v178)
                          v179 = 0.0;
                        else
                          v179 = 1.0;
                        *v177++ = v179;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1014 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1015 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1016 = *v1014;
                          v1014 += 8;
                          *v1015++ = a3 < v1016;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v474 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v475 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v476 = *v474;
                        v474 += 8;
                        *v475++ = a3 < v476;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1017 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v1018 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1019 = *v1017++;
                          *v1018++ = a3 < v1019;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v477 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v478 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v479 = *v477++;
                        *v478++ = a3 < v479;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v720 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v721 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v722 = *v720++;
                          if ((double)a3 >= (double)v722)
                            v723 = 0.0;
                          else
                            v723 = 1.0;
                          *v721++ = v723;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v180 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v181 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v182 = *v180++;
                        if ((double)a3 >= (double)v182)
                          v183 = 0.0;
                        else
                          v183 = 1.0;
                        *v181++ = v183;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v840 = (double *)*((_QWORD *)a4 + 2);
                        v841 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v842 = *v840++;
                          *v841++ = (int)v842 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v300 = (double *)*((_QWORD *)a4 + 2);
                      v301 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v302 = *v300++;
                        *v301++ = (int)v302 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v843 = (double *)*((_QWORD *)a4 + 2);
                        v844 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v845 = *v843++;
                          *v844++ = a3 < (unint64_t)v845;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v303 = (double *)*((_QWORD *)a4 + 2);
                      v304 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v305 = *v303++;
                        *v304++ = a3 < (unint64_t)v305;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v604 = (double *)*((_QWORD *)a4 + 2);
                        v605 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v606 = *v604++;
                          if (v606 <= (double)a3)
                            v607 = 0.0;
                          else
                            v607 = 1.0;
                          *v605++ = v607;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v64 = (double *)*((_QWORD *)a4 + 2);
                      v65 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v66 = *v64++;
                        if (v66 <= (double)a3)
                          v67 = 0.0;
                        else
                          v67 = 1.0;
                        *v65++ = v67;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1020 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1021 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1022 = *v1020++;
                          *v1021++ = v1022 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v480 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v481 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v482 = *v480++;
                        *v481++ = v482 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1023 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1024 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1025 = *v1023++;
                          *v1024++ = a3 < v1025;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v483 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v484 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v485 = *v483++;
                        *v484++ = a3 < v485;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v724 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v725 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v726 = *v724++;
                          if ((double)a3 >= (double)v726)
                            v727 = 0.0;
                          else
                            v727 = 1.0;
                          *v725++ = v727;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v184 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v185 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v186 = *v184++;
                        if ((double)a3 >= (double)v186)
                          v187 = 0.0;
                        else
                          v187 = 1.0;
                        *v185++ = v187;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1026 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1027 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1028 = *v1026;
                          v1026 += 8;
                          *v1027++ = a3 < v1028;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v486 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v487 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v488 = *v486;
                        v486 += 8;
                        *v487++ = a3 < v488;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v1029 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v1030 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1031 = *v1029++;
                          *v1030++ = v1031 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v489 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v490 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v491 = *v489++;
                        *v490++ = v491 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v728 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v729 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v730 = *v728++;
                          if ((double)a3 >= (double)v730)
                            v731 = 0.0;
                          else
                            v731 = 1.0;
                          *v729++ = v731;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v188 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v189 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v190 = *v188++;
                        if ((double)a3 >= (double)v190)
                          v191 = 0.0;
                        else
                          v191 = 1.0;
                        *v189++ = v191;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v846 = (double *)*((_QWORD *)a4 + 2);
                        v847 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v848 = *v846++;
                          *v847++ = (int)v848 > a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v306 = (double *)*((_QWORD *)a4 + 2);
                      v307 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v308 = *v306++;
                        *v307++ = (int)v308 > a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v849 = (double *)*((_QWORD *)a4 + 2);
                        v850 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v851 = *v849++;
                          *v850++ = a3 < (unint64_t)v851;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v309 = (double *)*((_QWORD *)a4 + 2);
                      v310 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v311 = *v309++;
                        *v310++ = a3 < (unint64_t)v311;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v608 = (double *)*((_QWORD *)a4 + 2);
                        v609 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v610 = *v608++;
                          if (v610 <= (double)a3)
                            v611 = 0.0;
                          else
                            v611 = 1.0;
                          *v609++ = v611;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v68 = (double *)*((_QWORD *)a4 + 2);
                      v69 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v70 = *v68++;
                        if (v70 <= (double)a3)
                          v71 = 0.0;
                        else
                          v71 = 1.0;
                        *v69++ = v71;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v21)
            {
              case 2:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v912 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v913 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v914 = *v912++;
                          *v913++ = v914 > (int)*(double *)&a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v372 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v373 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v374 = *v372++;
                        *v373++ = v374 > (int)*(double *)&a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v915 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v916 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v917 = *v915++;
                          *v916++ = (unint64_t)*(double *)&a3 < v917;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v375 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v376 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v377 = *v375++;
                        *v376++ = (unint64_t)*(double *)&a3 < v377;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v652 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v653 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v654 = *v652++;
                          if (*(double *)&a3 >= (double)v654)
                            v655 = 0.0;
                          else
                            v655 = 1.0;
                          *v653++ = v655;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v112 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v113 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v114 = *v112++;
                        if (*(double *)&a3 >= (double)v114)
                          v115 = 0.0;
                        else
                          v115 = 1.0;
                        *v113++ = v115;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 1:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v918 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v919 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v920 = *v918;
                          v918 += 8;
                          *v919++ = (int)*(double *)&a3 < v920;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v378 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v379 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v380 = *v378;
                        v378 += 8;
                        *v379++ = (int)*(double *)&a3 < v380;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v921 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v922 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v923 = *v921++;
                          *v922++ = v923 > (unint64_t)*(double *)&a3;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v381 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v382 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v383 = *v381++;
                        *v382++ = v383 > (unint64_t)*(double *)&a3;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v656 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v657 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v658 = *v656++;
                          if (*(double *)&a3 >= (double)v658)
                            v659 = 0.0;
                          else
                            v659 = 1.0;
                          *v657++ = v659;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v116 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v117 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v118 = *v116++;
                        if (*(double *)&a3 >= (double)v118)
                          v119 = 0.0;
                        else
                          v119 = 1.0;
                        *v117++ = v119;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
              case 0:
                switch(v22)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v792 = (double *)*((_QWORD *)a4 + 2);
                        v793 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v794 = *v792++;
                          *v793++ = (int)*(double *)&a3 < (int)v794;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v252 = (double *)*((_QWORD *)a4 + 2);
                      v253 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v254 = *v252++;
                        *v253++ = (int)*(double *)&a3 < (int)v254;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v795 = (double *)*((_QWORD *)a4 + 2);
                        v796 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v797 = *v795++;
                          *v796++ = (unint64_t)*(double *)&a3 < (unint64_t)v797;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v255 = (double *)*((_QWORD *)a4 + 2);
                      v256 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v257 = *v255++;
                        *v256++ = (unint64_t)*(double *)&a3 < (unint64_t)v257;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v20)
                      {
                        v572 = (double *)*((_QWORD *)a4 + 2);
                        v573 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v574 = *v572++;
                          if (v574 <= *(double *)&a3)
                            v575 = 0.0;
                          else
                            v575 = 1.0;
                          *v573++ = v575;
                          --v20;
                        }
                        while (v20);
                      }
                    }
                    else if (!a6 && v20)
                    {
                      v23 = (double *)*((_QWORD *)a4 + 2);
                      v24 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v25 = *v23++;
                        if (v25 <= *(double *)&a3)
                          v26 = 0.0;
                        else
                          v26 = 1.0;
                        *v24++ = v26;
                        --v20;
                      }
                      while (v20);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 3:
      result = 0;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v27 = *((_QWORD *)a4 + 1);
        if (v27 != *((_QWORD *)a5 + 1))
          return 0;
        v28 = *a4;
        v29 = *a5;
        switch(a2)
        {
          case 2:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1032 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1033 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1034 = *v1032++;
                          *v1033++ = v1034 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v492 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v493 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v494 = *v492++;
                        *v493++ = v494 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1035 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1036 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1037 = *v1035++;
                          *v1036++ = a3 > (unint64_t)v1037;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v495 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v496 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v497 = *v495++;
                        *v496++ = a3 > (unint64_t)v497;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v732 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v733 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v734 = *v732++;
                          if (a3 <= v734)
                            v735 = 0.0;
                          else
                            v735 = 1.0;
                          *v733++ = v735;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v192 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v193 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v194 = *v192++;
                        if (a3 <= v194)
                          v195 = 0.0;
                        else
                          v195 = 1.0;
                        *v193++ = v195;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1038 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1039 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1040 = *v1038;
                          v1038 += 8;
                          *v1039++ = a3 > v1040;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v498 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v499 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v500 = *v498;
                        v498 += 8;
                        *v499++ = a3 > v500;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1041 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v1042 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1043 = *v1041++;
                          *v1042++ = a3 > v1043;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v501 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v502 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v503 = *v501++;
                        *v502++ = a3 > v503;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v736 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v737 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v738 = *v736++;
                          if ((double)a3 <= (double)v738)
                            v739 = 0.0;
                          else
                            v739 = 1.0;
                          *v737++ = v739;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v196 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v197 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v198 = *v196++;
                        if ((double)a3 <= (double)v198)
                          v199 = 0.0;
                        else
                          v199 = 1.0;
                        *v197++ = v199;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v852 = (double *)*((_QWORD *)a4 + 2);
                        v853 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v854 = *v852++;
                          *v853++ = (int)v854 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v312 = (double *)*((_QWORD *)a4 + 2);
                      v313 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v314 = *v312++;
                        *v313++ = (int)v314 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v855 = (double *)*((_QWORD *)a4 + 2);
                        v856 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v857 = *v855++;
                          *v856++ = a3 > (unint64_t)v857;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v315 = (double *)*((_QWORD *)a4 + 2);
                      v316 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v317 = *v315++;
                        *v316++ = a3 > (unint64_t)v317;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v612 = (double *)*((_QWORD *)a4 + 2);
                        v613 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v614 = *v612++;
                          if (v614 >= (double)a3)
                            v615 = 0.0;
                          else
                            v615 = 1.0;
                          *v613++ = v615;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v72 = (double *)*((_QWORD *)a4 + 2);
                      v73 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v74 = *v72++;
                        if (v74 >= (double)a3)
                          v75 = 0.0;
                        else
                          v75 = 1.0;
                        *v73++ = v75;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1044 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1045 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1046 = *v1044++;
                          *v1045++ = v1046 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v504 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v505 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v506 = *v504++;
                        *v505++ = v506 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1047 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1048 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1049 = *v1047++;
                          *v1048++ = a3 > v1049;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v507 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v508 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v509 = *v507++;
                        *v508++ = a3 > v509;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v740 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v741 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v742 = *v740++;
                          if ((double)a3 <= (double)v742)
                            v743 = 0.0;
                          else
                            v743 = 1.0;
                          *v741++ = v743;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v200 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v201 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v202 = *v200++;
                        if ((double)a3 <= (double)v202)
                          v203 = 0.0;
                        else
                          v203 = 1.0;
                        *v201++ = v203;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1050 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1051 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1052 = *v1050;
                          v1050 += 8;
                          *v1051++ = a3 > v1052;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v510 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v511 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v512 = *v510;
                        v510 += 8;
                        *v511++ = a3 > v512;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v1053 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v1054 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1055 = *v1053++;
                          *v1054++ = v1055 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v513 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v514 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v515 = *v513++;
                        *v514++ = v515 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v744 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v745 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v746 = *v744++;
                          if ((double)a3 <= (double)v746)
                            v747 = 0.0;
                          else
                            v747 = 1.0;
                          *v745++ = v747;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v204 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v205 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v206 = *v204++;
                        if ((double)a3 <= (double)v206)
                          v207 = 0.0;
                        else
                          v207 = 1.0;
                        *v205++ = v207;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v858 = (double *)*((_QWORD *)a4 + 2);
                        v859 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v860 = *v858++;
                          *v859++ = (int)v860 < a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v318 = (double *)*((_QWORD *)a4 + 2);
                      v319 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v320 = *v318++;
                        *v319++ = (int)v320 < a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v861 = (double *)*((_QWORD *)a4 + 2);
                        v862 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v863 = *v861++;
                          *v862++ = a3 > (unint64_t)v863;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v321 = (double *)*((_QWORD *)a4 + 2);
                      v322 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v323 = *v321++;
                        *v322++ = a3 > (unint64_t)v323;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v616 = (double *)*((_QWORD *)a4 + 2);
                        v617 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v618 = *v616++;
                          if (v618 >= (double)a3)
                            v619 = 0.0;
                          else
                            v619 = 1.0;
                          *v617++ = v619;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v76 = (double *)*((_QWORD *)a4 + 2);
                      v77 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v78 = *v76++;
                        if (v78 >= (double)a3)
                          v79 = 0.0;
                        else
                          v79 = 1.0;
                        *v77++ = v79;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v28)
            {
              case 2:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v924 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v925 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v926 = *v924++;
                          *v925++ = v926 < (int)*(double *)&a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v384 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v385 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v386 = *v384++;
                        *v385++ = v386 < (int)*(double *)&a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v927 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v928 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v929 = *v927++;
                          *v928++ = (unint64_t)*(double *)&a3 > v929;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v387 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v388 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v389 = *v387++;
                        *v388++ = (unint64_t)*(double *)&a3 > v389;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v660 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v661 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v662 = *v660++;
                          if (*(double *)&a3 <= (double)v662)
                            v663 = 0.0;
                          else
                            v663 = 1.0;
                          *v661++ = v663;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v120 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v121 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v122 = *v120++;
                        if (*(double *)&a3 <= (double)v122)
                          v123 = 0.0;
                        else
                          v123 = 1.0;
                        *v121++ = v123;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 1:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v930 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v931 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v932 = *v930;
                          v930 += 8;
                          *v931++ = (int)*(double *)&a3 > v932;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v390 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v391 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v392 = *v390;
                        v390 += 8;
                        *v391++ = (int)*(double *)&a3 > v392;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v933 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v934 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v935 = *v933++;
                          *v934++ = v935 < (unint64_t)*(double *)&a3;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v393 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v394 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v395 = *v393++;
                        *v394++ = v395 < (unint64_t)*(double *)&a3;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v664 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v665 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v666 = *v664++;
                          if (*(double *)&a3 <= (double)v666)
                            v667 = 0.0;
                          else
                            v667 = 1.0;
                          *v665++ = v667;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v124 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v125 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v126 = *v124++;
                        if (*(double *)&a3 <= (double)v126)
                          v127 = 0.0;
                        else
                          v127 = 1.0;
                        *v125++ = v127;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
              case 0:
                switch(v29)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v798 = (double *)*((_QWORD *)a4 + 2);
                        v799 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v800 = *v798++;
                          *v799++ = (int)*(double *)&a3 > (int)v800;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v258 = (double *)*((_QWORD *)a4 + 2);
                      v259 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v260 = *v258++;
                        *v259++ = (int)*(double *)&a3 > (int)v260;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v801 = (double *)*((_QWORD *)a4 + 2);
                        v802 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v803 = *v801++;
                          *v802++ = (unint64_t)*(double *)&a3 > (unint64_t)v803;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v261 = (double *)*((_QWORD *)a4 + 2);
                      v262 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v263 = *v261++;
                        *v262++ = (unint64_t)*(double *)&a3 > (unint64_t)v263;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v27)
                      {
                        v576 = (double *)*((_QWORD *)a4 + 2);
                        v577 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v578 = *v576++;
                          if (v578 >= *(double *)&a3)
                            v579 = 0.0;
                          else
                            v579 = 1.0;
                          *v577++ = v579;
                          --v27;
                        }
                        while (v27);
                      }
                    }
                    else if (!a6 && v27)
                    {
                      v30 = (double *)*((_QWORD *)a4 + 2);
                      v31 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v32 = *v30++;
                        if (v32 >= *(double *)&a3)
                          v33 = 0.0;
                        else
                          v33 = 1.0;
                        *v31++ = v33;
                        --v27;
                      }
                      while (v27);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 4:
      result = 0;
      if (a4 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v34 = *((_QWORD *)a4 + 1);
        if (v34 != *((_QWORD *)a5 + 1))
          return 0;
        v35 = *a4;
        v36 = *a5;
        switch(a2)
        {
          case 2:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1056 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1057 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1058 = *v1056++;
                          *v1057++ = v1058 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v516 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v517 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v518 = *v516++;
                        *v517++ = v518 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1059 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1060 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1061 = *v1059++;
                          *v1060++ = a3 <= (unint64_t)v1061;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v519 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v520 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v521 = *v519++;
                        *v520++ = a3 <= (unint64_t)v521;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v748 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v749 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v750 = *v748++;
                          if (a3 > v750)
                            v751 = 0.0;
                          else
                            v751 = 1.0;
                          *v749++ = v751;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v208 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v209 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v210 = *v208++;
                        if (a3 > v210)
                          v211 = 0.0;
                        else
                          v211 = 1.0;
                        *v209++ = v211;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1062 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1063 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1064 = *v1062;
                          v1062 += 8;
                          *v1063++ = a3 <= v1064;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v522 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v523 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v524 = *v522;
                        v522 += 8;
                        *v523++ = a3 <= v524;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1065 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v1066 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1067 = *v1065++;
                          *v1066++ = a3 <= v1067;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v525 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v526 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v527 = *v525++;
                        *v526++ = a3 <= v527;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v752 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v753 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v754 = *v752++;
                          if ((double)a3 > (double)v754)
                            v755 = 0.0;
                          else
                            v755 = 1.0;
                          *v753++ = v755;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v212 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v213 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v214 = *v212++;
                        if ((double)a3 > (double)v214)
                          v215 = 0.0;
                        else
                          v215 = 1.0;
                        *v213++ = v215;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v864 = (double *)*((_QWORD *)a4 + 2);
                        v865 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v866 = *v864++;
                          *v865++ = (int)v866 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v324 = (double *)*((_QWORD *)a4 + 2);
                      v325 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v326 = *v324++;
                        *v325++ = (int)v326 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v867 = (double *)*((_QWORD *)a4 + 2);
                        v868 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v869 = *v867++;
                          *v868++ = a3 <= (unint64_t)v869;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v327 = (double *)*((_QWORD *)a4 + 2);
                      v328 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v329 = *v327++;
                        *v328++ = a3 <= (unint64_t)v329;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v620 = (double *)*((_QWORD *)a4 + 2);
                        v621 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v622 = *v620++;
                          if (v622 < (double)a3)
                            v623 = 0.0;
                          else
                            v623 = 1.0;
                          *v621++ = v623;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v80 = (double *)*((_QWORD *)a4 + 2);
                      v81 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v82 = *v80++;
                        if (v82 < (double)a3)
                          v83 = 0.0;
                        else
                          v83 = 1.0;
                        *v81++ = v83;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
            }
            break;
          case 1:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1068 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1069 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1070 = *v1068++;
                          *v1069++ = v1070 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v528 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v529 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v530 = *v528++;
                        *v529++ = v530 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1071 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1072 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1073 = *v1071++;
                          *v1072++ = a3 <= v1073;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v531 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v532 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v533 = *v531++;
                        *v532++ = a3 <= v533;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v756 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v757 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v758 = *v756++;
                          if ((double)a3 > (double)v758)
                            v759 = 0.0;
                          else
                            v759 = 1.0;
                          *v757++ = v759;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v216 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v217 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v218 = *v216++;
                        if ((double)a3 > (double)v218)
                          v219 = 0.0;
                        else
                          v219 = 1.0;
                        *v217++ = v219;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1074 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v1075 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1076 = *v1074;
                          v1074 += 8;
                          *v1075++ = a3 <= v1076;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v534 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v535 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v536 = *v534;
                        v534 += 8;
                        *v535++ = a3 <= v536;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v1077 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v1078 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v1079 = *v1077++;
                          *v1078++ = v1079 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v537 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v538 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v539 = *v537++;
                        *v538++ = v539 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v760 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v761 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v762 = *v760++;
                          if ((double)a3 > (double)v762)
                            v763 = 0.0;
                          else
                            v763 = 1.0;
                          *v761++ = v763;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v220 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v221 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v222 = *v220++;
                        if ((double)a3 > (double)v222)
                          v223 = 0.0;
                        else
                          v223 = 1.0;
                        *v221++ = v223;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v870 = (double *)*((_QWORD *)a4 + 2);
                        v871 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v872 = *v870++;
                          *v871++ = (int)v872 >= a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v330 = (double *)*((_QWORD *)a4 + 2);
                      v331 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v332 = *v330++;
                        *v331++ = (int)v332 >= a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v873 = (double *)*((_QWORD *)a4 + 2);
                        v874 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v875 = *v873++;
                          *v874++ = a3 <= (unint64_t)v875;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v333 = (double *)*((_QWORD *)a4 + 2);
                      v334 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v335 = *v333++;
                        *v334++ = a3 <= (unint64_t)v335;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v624 = (double *)*((_QWORD *)a4 + 2);
                        v625 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v626 = *v624++;
                          if (v626 < (double)a3)
                            v627 = 0.0;
                          else
                            v627 = 1.0;
                          *v625++ = v627;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v84 = (double *)*((_QWORD *)a4 + 2);
                      v85 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v86 = *v84++;
                        if (v86 < (double)a3)
                          v87 = 0.0;
                        else
                          v87 = 1.0;
                        *v85++ = v87;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
            }
            break;
          case 0:
            switch(v35)
            {
              case 2:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v936 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v937 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v938 = *v936++;
                          *v937++ = v938 >= (int)*(double *)&a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v396 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v397 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v398 = *v396++;
                        *v397++ = v398 >= (int)*(double *)&a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v939 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v940 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v941 = *v939++;
                          *v940++ = (unint64_t)*(double *)&a3 <= v941;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v399 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v400 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v401 = *v399++;
                        *v400++ = (unint64_t)*(double *)&a3 <= v401;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v668 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v669 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v670 = *v668++;
                          if (*(double *)&a3 > (double)v670)
                            v671 = 0.0;
                          else
                            v671 = 1.0;
                          *v669++ = v671;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v128 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v129 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v130 = *v128++;
                        if (*(double *)&a3 > (double)v130)
                          v131 = 0.0;
                        else
                          v131 = 1.0;
                        *v129++ = v131;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 1:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v942 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                        v943 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v944 = *v942;
                          v942 += 8;
                          *v943++ = (int)*(double *)&a3 <= v944;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v402 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v403 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v404 = *v402;
                        v402 += 8;
                        *v403++ = (int)*(double *)&a3 <= v404;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v945 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v946 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v947 = *v945++;
                          *v946++ = v947 >= (unint64_t)*(double *)&a3;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v405 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v406 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v407 = *v405++;
                        *v406++ = v407 >= (unint64_t)*(double *)&a3;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v672 = (unint64_t *)*((_QWORD *)a4 + 2);
                        v673 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v674 = *v672++;
                          if (*(double *)&a3 > (double)v674)
                            v675 = 0.0;
                          else
                            v675 = 1.0;
                          *v673++ = v675;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v132 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v133 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v134 = *v132++;
                        if (*(double *)&a3 > (double)v134)
                          v135 = 0.0;
                        else
                          v135 = 1.0;
                        *v133++ = v135;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
              case 0:
                switch(v36)
                {
                  case 2:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v804 = (double *)*((_QWORD *)a4 + 2);
                        v805 = (BOOL *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v806 = *v804++;
                          *v805++ = (int)*(double *)&a3 <= (int)v806;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v264 = (double *)*((_QWORD *)a4 + 2);
                      v265 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v266 = *v264++;
                        *v265++ = (int)*(double *)&a3 <= (int)v266;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 1:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v807 = (double *)*((_QWORD *)a4 + 2);
                        v808 = (_QWORD *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v809 = *v807++;
                          *v808++ = (unint64_t)*(double *)&a3 <= (unint64_t)v809;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v267 = (double *)*((_QWORD *)a4 + 2);
                      v268 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v269 = *v267++;
                        *v268++ = (unint64_t)*(double *)&a3 <= (unint64_t)v269;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                  case 0:
                    if (a6 == 1)
                    {
                      if (v34)
                      {
                        v580 = (double *)*((_QWORD *)a4 + 2);
                        v581 = (double *)*((_QWORD *)a5 + 2);
                        do
                        {
                          v582 = *v580++;
                          if (v582 < *(double *)&a3)
                            v583 = 0.0;
                          else
                            v583 = 1.0;
                          *v581++ = v583;
                          --v34;
                        }
                        while (v34);
                      }
                    }
                    else if (!a6 && v34)
                    {
                      v37 = (double *)*((_QWORD *)a4 + 2);
                      v38 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v39 = *v37++;
                        if (v39 < *(double *)&a3)
                          v40 = 0.0;
                        else
                          v40 = 1.0;
                        *v38++ = v40;
                        --v34;
                      }
                      while (v34);
                    }
                    break;
                }
                break;
            }
            break;
        }
        return a5;
      }
      return result;
    case 5:
      result = 0;
      if (!a4 || !a5)
        return result;
      if (*((_BYTE *)a5 + 32))
        return 0;
      v41 = *((_QWORD *)a4 + 1);
      if (v41 != *((_QWORD *)a5 + 1))
        return 0;
      v42 = *a4;
      v43 = *a5;
      switch(a2)
      {
        case 2:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1080 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v1081 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1082 = *v1080++;
                        *v1081++ = v1082 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v540 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v541 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v542 = *v540++;
                      *v541++ = v542 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1083 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v1084 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1085 = *v1083++;
                        *v1084++ = a3 >= (unint64_t)v1085;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v543 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v544 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v545 = *v543++;
                      *v544++ = a3 >= (unint64_t)v545;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v764 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v765 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v766 = *v764++;
                        if (a3 < v766)
                          v767 = 0.0;
                        else
                          v767 = 1.0;
                        *v765++ = v767;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v224 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v225 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v226 = *v224++;
                      if (a3 < v226)
                        v227 = 0.0;
                      else
                        v227 = 1.0;
                      *v225++ = v227;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1086 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v1087 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1088 = *v1086;
                        v1086 += 8;
                        *v1087++ = a3 >= v1088;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v546 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v547 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v548 = *v546;
                      v546 += 8;
                      *v547++ = a3 >= v548;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1089 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v1090 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1091 = *v1089++;
                        *v1090++ = a3 >= v1091;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v549 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v550 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v551 = *v549++;
                      *v550++ = a3 >= v551;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v768 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v769 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v770 = *v768++;
                        if ((double)a3 < (double)v770)
                          v771 = 0.0;
                        else
                          v771 = 1.0;
                        *v769++ = v771;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v228 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v229 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v230 = *v228++;
                      if ((double)a3 < (double)v230)
                        v231 = 0.0;
                      else
                        v231 = 1.0;
                      *v229++ = v231;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v876 = (double *)*((_QWORD *)a4 + 2);
                      v877 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v878 = *v876++;
                        *v877++ = (int)v878 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v336 = (double *)*((_QWORD *)a4 + 2);
                    v337 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v338 = *v336++;
                      *v337++ = (int)v338 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v879 = (double *)*((_QWORD *)a4 + 2);
                      v880 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v881 = *v879++;
                        *v880++ = a3 >= (unint64_t)v881;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v339 = (double *)*((_QWORD *)a4 + 2);
                    v340 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v341 = *v339++;
                      *v340++ = a3 >= (unint64_t)v341;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v628 = (double *)*((_QWORD *)a4 + 2);
                      v629 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v630 = *v628++;
                        if (v630 > (double)a3)
                          v631 = 0.0;
                        else
                          v631 = 1.0;
                        *v629++ = v631;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v88 = (double *)*((_QWORD *)a4 + 2);
                    v89 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v90 = *v88++;
                      if (v90 > (double)a3)
                        v91 = 0.0;
                      else
                        v91 = 1.0;
                      *v89++ = v91;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1092 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v1093 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1094 = *v1092++;
                        *v1093++ = v1094 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v552 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v553 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v554 = *v552++;
                      *v553++ = v554 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1095 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v1096 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1097 = *v1095++;
                        *v1096++ = a3 >= v1097;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v555 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v556 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v557 = *v555++;
                      *v556++ = a3 >= v557;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v772 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v773 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v774 = *v772++;
                        if ((double)a3 < (double)v774)
                          v775 = 0.0;
                        else
                          v775 = 1.0;
                        *v773++ = v775;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v232 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v233 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v234 = *v232++;
                      if ((double)a3 < (double)v234)
                        v235 = 0.0;
                      else
                        v235 = 1.0;
                      *v233++ = v235;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1098 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v1099 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1100 = *v1098;
                        v1098 += 8;
                        *v1099++ = a3 >= v1100;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v558 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v559 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v560 = *v558;
                      v558 += 8;
                      *v559++ = a3 >= v560;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v1101 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v1102 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1103 = *v1101++;
                        *v1102++ = v1103 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v561 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v562 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v563 = *v561++;
                      *v562++ = v563 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v776 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v777 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v778 = *v776++;
                        if ((double)a3 < (double)v778)
                          v779 = 0.0;
                        else
                          v779 = 1.0;
                        *v777++ = v779;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v236 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v237 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v238 = *v236++;
                      if ((double)a3 < (double)v238)
                        v239 = 0.0;
                      else
                        v239 = 1.0;
                      *v237++ = v239;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v882 = (double *)*((_QWORD *)a4 + 2);
                      v883 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v884 = *v882++;
                        *v883++ = (int)v884 <= a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v342 = (double *)*((_QWORD *)a4 + 2);
                    v343 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v344 = *v342++;
                      *v343++ = (int)v344 <= a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v885 = (double *)*((_QWORD *)a4 + 2);
                      v886 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v887 = *v885++;
                        *v886++ = a3 >= (unint64_t)v887;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v345 = (double *)*((_QWORD *)a4 + 2);
                    v346 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v347 = *v345++;
                      *v346++ = a3 >= (unint64_t)v347;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v632 = (double *)*((_QWORD *)a4 + 2);
                      v633 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v634 = *v632++;
                        if (v634 > (double)a3)
                          v635 = 0.0;
                        else
                          v635 = 1.0;
                        *v633++ = v635;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v92 = (double *)*((_QWORD *)a4 + 2);
                    v93 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v94 = *v92++;
                      if (v94 > (double)a3)
                        v95 = 0.0;
                      else
                        v95 = 1.0;
                      *v93++ = v95;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(v42)
          {
            case 2:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v948 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v949 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v950 = *v948++;
                        *v949++ = v950 <= (int)*(double *)&a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v408 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v409 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v410 = *v408++;
                      *v409++ = v410 <= (int)*(double *)&a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v951 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v952 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v953 = *v951++;
                        *v952++ = (unint64_t)*(double *)&a3 >= v953;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v411 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v412 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v413 = *v411++;
                      *v412++ = (unint64_t)*(double *)&a3 >= v413;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v676 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v677 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v678 = *v676++;
                        if (*(double *)&a3 < (double)v678)
                          v679 = 0.0;
                        else
                          v679 = 1.0;
                        *v677++ = v679;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v136 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v137 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v138 = *v136++;
                      if (*(double *)&a3 < (double)v138)
                        v139 = 0.0;
                      else
                        v139 = 1.0;
                      *v137++ = v139;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              break;
            case 1:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v954 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                      v955 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v956 = *v954;
                        v954 += 8;
                        *v955++ = (int)*(double *)&a3 >= v956;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v414 = (unsigned __int8 *)*((_QWORD *)a4 + 2);
                    v415 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v416 = *v414;
                      v414 += 8;
                      *v415++ = (int)*(double *)&a3 >= v416;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v957 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v958 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v959 = *v957++;
                        *v958++ = v959 <= (unint64_t)*(double *)&a3;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v417 = (unint64_t *)*((_QWORD *)a4 + 2);
                    v418 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v419 = *v417++;
                      *v418++ = v419 <= (unint64_t)*(double *)&a3;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v680 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v681 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v682 = *v680++;
                        if (*(double *)&a3 < (double)v682)
                          v683 = 0.0;
                        else
                          v683 = 1.0;
                        *v681++ = v683;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6)
                  {
                    if (v41)
                    {
                      v140 = (unint64_t *)*((_QWORD *)a4 + 2);
                      v141 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v142 = *v140++;
                        if (*(double *)&a3 < (double)v142)
                          v143 = 0.0;
                        else
                          v143 = 1.0;
                        *v141++ = v143;
                        --v41;
                      }
                      while (v41);
                    }
                    return a5;
                  }
                  break;
              }
              break;
            case 0:
              switch(v43)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v810 = (double *)*((_QWORD *)a4 + 2);
                      v811 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v812 = *v810++;
                        *v811++ = (int)*(double *)&a3 >= (int)v812;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v270 = (double *)*((_QWORD *)a4 + 2);
                    v271 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v272 = *v270++;
                      *v271++ = (int)*(double *)&a3 >= (int)v272;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v813 = (double *)*((_QWORD *)a4 + 2);
                      v814 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v815 = *v813++;
                        *v814++ = (unint64_t)*(double *)&a3 >= (unint64_t)v815;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v273 = (double *)*((_QWORD *)a4 + 2);
                    v274 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v275 = *v273++;
                      *v274++ = (unint64_t)*(double *)&a3 >= (unint64_t)v275;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v41)
                    {
                      v584 = (double *)*((_QWORD *)a4 + 2);
                      v585 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v586 = *v584++;
                        if (v586 > *(double *)&a3)
                          v587 = 0.0;
                        else
                          v587 = 1.0;
                        *v585++ = v587;
                        --v41;
                      }
                      while (v41);
                    }
                  }
                  else if (!a6 && v41)
                  {
                    v44 = (double *)*((_QWORD *)a4 + 2);
                    v45 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v46 = *v44++;
                      if (v46 > *(double *)&a3)
                        v47 = 0.0;
                      else
                        v47 = 1.0;
                      *v45++ = v47;
                      --v41;
                    }
                    while (v41);
                  }
                  break;
              }
              return a5;
          }
          break;
      }
      return a5;
    default:
      return result;
  }
}

int *sub_20A34(int *result, int *a2, int a3, unint64_t a4, int *a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  int v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  int v35;
  int v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  uint64_t v41;
  int v42;
  int v43;
  double *v44;
  double *v45;
  double v46;
  double v47;
  unsigned __int8 *v48;
  double *v49;
  unsigned int v50;
  double v51;
  unint64_t *v52;
  double *v53;
  unint64_t v54;
  double v55;
  unsigned __int8 *v56;
  double *v57;
  unsigned int v58;
  double v59;
  unint64_t *v60;
  double *v61;
  unint64_t v62;
  double v63;
  unsigned __int8 *v64;
  double *v65;
  unsigned int v66;
  double v67;
  unint64_t *v68;
  double *v69;
  unint64_t v70;
  double v71;
  unsigned __int8 *v72;
  double *v73;
  unsigned int v74;
  double v75;
  unint64_t *v76;
  double *v77;
  unint64_t v78;
  double v79;
  unsigned __int8 *v80;
  double *v81;
  unsigned int v82;
  double v83;
  unint64_t *v84;
  double *v85;
  unint64_t v86;
  double v87;
  unsigned __int8 *v88;
  double *v89;
  unsigned int v90;
  double v91;
  unint64_t *v92;
  double *v93;
  unint64_t v94;
  double v95;
  double *v96;
  double *v97;
  double v98;
  double v99;
  double *v100;
  double *v101;
  double v102;
  double v103;
  double *v104;
  double *v105;
  double v106;
  double v107;
  double *v108;
  double *v109;
  double v110;
  double v111;
  double *v112;
  double *v113;
  double v114;
  double v115;
  double *v116;
  double *v117;
  double v118;
  double v119;
  double *v120;
  double *v121;
  double v122;
  double v123;
  double *v124;
  double *v125;
  double v126;
  double v127;
  double *v128;
  double *v129;
  double v130;
  double v131;
  double *v132;
  double *v133;
  double v134;
  double v135;
  double *v136;
  double *v137;
  double v138;
  double v139;
  double *v140;
  double *v141;
  double v142;
  double v143;
  unsigned __int8 *v144;
  double *v145;
  int v146;
  double v147;
  unsigned __int8 *v148;
  double *v149;
  unsigned int v150;
  double v151;
  unint64_t *v152;
  double *v153;
  unint64_t v154;
  double v155;
  unint64_t *v156;
  double *v157;
  unint64_t v158;
  double v159;
  unsigned __int8 *v160;
  double *v161;
  int v162;
  double v163;
  unsigned __int8 *v164;
  double *v165;
  unsigned int v166;
  double v167;
  unint64_t *v168;
  double *v169;
  unint64_t v170;
  double v171;
  unint64_t *v172;
  double *v173;
  unint64_t v174;
  double v175;
  unsigned __int8 *v176;
  double *v177;
  unsigned int v178;
  double v179;
  unsigned __int8 *v180;
  double *v181;
  unsigned int v182;
  double v183;
  unint64_t *v184;
  double *v185;
  unint64_t v186;
  double v187;
  unint64_t *v188;
  double *v189;
  unint64_t v190;
  double v191;
  unsigned __int8 *v192;
  double *v193;
  unsigned int v194;
  double v195;
  unsigned __int8 *v196;
  double *v197;
  unsigned int v198;
  double v199;
  unint64_t *v200;
  double *v201;
  unint64_t v202;
  double v203;
  unint64_t *v204;
  double *v205;
  unint64_t v206;
  double v207;
  unsigned __int8 *v208;
  double *v209;
  unsigned int v210;
  double v211;
  unsigned __int8 *v212;
  double *v213;
  unsigned int v214;
  double v215;
  unint64_t *v216;
  double *v217;
  unint64_t v218;
  double v219;
  unint64_t *v220;
  double *v221;
  unint64_t v222;
  double v223;
  unsigned __int8 *v224;
  double *v225;
  unsigned int v226;
  double v227;
  unsigned __int8 *v228;
  double *v229;
  unsigned int v230;
  double v231;
  unint64_t *v232;
  double *v233;
  unint64_t v234;
  double v235;
  unint64_t *v236;
  double *v237;
  unint64_t v238;
  double v239;
  double *v240;
  BOOL *v241;
  double v242;
  double *v243;
  _QWORD *v244;
  double v245;
  double *v246;
  BOOL *v247;
  double v248;
  double *v249;
  _QWORD *v250;
  double v251;
  double *v252;
  BOOL *v253;
  double v254;
  double *v255;
  _QWORD *v256;
  double v257;
  double *v258;
  BOOL *v259;
  double v260;
  double *v261;
  _QWORD *v262;
  double v263;
  double *v264;
  BOOL *v265;
  double v266;
  double *v267;
  _QWORD *v268;
  double v269;
  double *v270;
  BOOL *v271;
  double v272;
  double *v273;
  _QWORD *v274;
  double v275;
  unsigned __int8 *v276;
  BOOL *v277;
  int v278;
  unsigned __int8 *v279;
  _QWORD *v280;
  int v281;
  unsigned __int8 *v282;
  BOOL *v283;
  int v284;
  uint64_t *v285;
  _QWORD *v286;
  uint64_t v287;
  unsigned __int8 *v288;
  BOOL *v289;
  int v290;
  unsigned __int8 *v291;
  _QWORD *v292;
  int v293;
  unsigned __int8 *v294;
  BOOL *v295;
  int v296;
  uint64_t *v297;
  _QWORD *v298;
  uint64_t v299;
  unsigned __int8 *v300;
  BOOL *v301;
  unsigned int v302;
  unsigned __int8 *v303;
  _QWORD *v304;
  unsigned int v305;
  unsigned __int8 *v306;
  BOOL *v307;
  unsigned int v308;
  unint64_t *v309;
  _QWORD *v310;
  unint64_t v311;
  unsigned __int8 *v312;
  BOOL *v313;
  unsigned int v314;
  unsigned __int8 *v315;
  _QWORD *v316;
  unsigned int v317;
  unsigned __int8 *v318;
  BOOL *v319;
  unsigned int v320;
  unint64_t *v321;
  _QWORD *v322;
  unint64_t v323;
  unsigned __int8 *v324;
  BOOL *v325;
  unsigned int v326;
  unsigned __int8 *v327;
  _QWORD *v328;
  unsigned int v329;
  unsigned __int8 *v330;
  BOOL *v331;
  unsigned int v332;
  unint64_t *v333;
  _QWORD *v334;
  unint64_t v335;
  unsigned __int8 *v336;
  BOOL *v337;
  unsigned int v338;
  unsigned __int8 *v339;
  _QWORD *v340;
  unsigned int v341;
  unsigned __int8 *v342;
  BOOL *v343;
  unsigned int v344;
  unint64_t *v345;
  _QWORD *v346;
  unint64_t v347;
  double *v348;
  BOOL *v349;
  double v350;
  double *v351;
  _QWORD *v352;
  double v353;
  double *v354;
  BOOL *v355;
  double v356;
  double *v357;
  _QWORD *v358;
  double v359;
  double *v360;
  BOOL *v361;
  double v362;
  double *v363;
  _QWORD *v364;
  double v365;
  double *v366;
  BOOL *v367;
  double v368;
  double *v369;
  _QWORD *v370;
  double v371;
  double *v372;
  BOOL *v373;
  double v374;
  double *v375;
  _QWORD *v376;
  double v377;
  double *v378;
  BOOL *v379;
  double v380;
  double *v381;
  _QWORD *v382;
  double v383;
  double *v384;
  BOOL *v385;
  double v386;
  double *v387;
  _QWORD *v388;
  double v389;
  double *v390;
  BOOL *v391;
  double v392;
  double *v393;
  _QWORD *v394;
  double v395;
  double *v396;
  BOOL *v397;
  double v398;
  double *v399;
  _QWORD *v400;
  double v401;
  double *v402;
  BOOL *v403;
  double v404;
  double *v405;
  _QWORD *v406;
  double v407;
  double *v408;
  BOOL *v409;
  double v410;
  double *v411;
  _QWORD *v412;
  double v413;
  double *v414;
  BOOL *v415;
  double v416;
  double *v417;
  _QWORD *v418;
  double v419;
  unsigned __int8 *v420;
  BOOL *v421;
  int v422;
  unsigned __int8 *v423;
  _QWORD *v424;
  int v425;
  unsigned __int8 *v426;
  BOOL *v427;
  int v428;
  unsigned __int8 *v429;
  _QWORD *v430;
  int v431;
  unsigned __int8 *v432;
  BOOL *v433;
  int v434;
  uint64_t *v435;
  _QWORD *v436;
  uint64_t v437;
  unsigned __int8 *v438;
  BOOL *v439;
  int v440;
  uint64_t *v441;
  _QWORD *v442;
  uint64_t v443;
  unsigned __int8 *v444;
  BOOL *v445;
  int v446;
  unsigned __int8 *v447;
  _QWORD *v448;
  int v449;
  unsigned __int8 *v450;
  BOOL *v451;
  int v452;
  unsigned __int8 *v453;
  _QWORD *v454;
  int v455;
  unsigned __int8 *v456;
  BOOL *v457;
  int v458;
  uint64_t *v459;
  _QWORD *v460;
  uint64_t v461;
  unsigned __int8 *v462;
  BOOL *v463;
  int v464;
  uint64_t *v465;
  _QWORD *v466;
  uint64_t v467;
  unsigned __int8 *v468;
  BOOL *v469;
  unsigned int v470;
  unsigned __int8 *v471;
  _QWORD *v472;
  unsigned int v473;
  unsigned __int8 *v474;
  BOOL *v475;
  unsigned int v476;
  unsigned __int8 *v477;
  _QWORD *v478;
  unsigned int v479;
  unsigned __int8 *v480;
  BOOL *v481;
  unsigned int v482;
  unint64_t *v483;
  _QWORD *v484;
  unint64_t v485;
  unsigned __int8 *v486;
  BOOL *v487;
  unsigned int v488;
  unint64_t *v489;
  _QWORD *v490;
  unint64_t v491;
  unsigned __int8 *v492;
  BOOL *v493;
  unsigned int v494;
  unsigned __int8 *v495;
  _QWORD *v496;
  unsigned int v497;
  unsigned __int8 *v498;
  BOOL *v499;
  unsigned int v500;
  unsigned __int8 *v501;
  _QWORD *v502;
  unsigned int v503;
  unsigned __int8 *v504;
  BOOL *v505;
  unsigned int v506;
  unint64_t *v507;
  _QWORD *v508;
  unint64_t v509;
  unsigned __int8 *v510;
  BOOL *v511;
  unsigned int v512;
  unint64_t *v513;
  _QWORD *v514;
  unint64_t v515;
  unsigned __int8 *v516;
  BOOL *v517;
  unsigned int v518;
  unsigned __int8 *v519;
  _QWORD *v520;
  unsigned int v521;
  unsigned __int8 *v522;
  BOOL *v523;
  unsigned int v524;
  unsigned __int8 *v525;
  _QWORD *v526;
  unsigned int v527;
  unsigned __int8 *v528;
  BOOL *v529;
  unsigned int v530;
  unint64_t *v531;
  _QWORD *v532;
  unint64_t v533;
  unsigned __int8 *v534;
  BOOL *v535;
  unsigned int v536;
  unint64_t *v537;
  _QWORD *v538;
  unint64_t v539;
  unsigned __int8 *v540;
  BOOL *v541;
  unsigned int v542;
  unsigned __int8 *v543;
  _QWORD *v544;
  unsigned int v545;
  unsigned __int8 *v546;
  BOOL *v547;
  unsigned int v548;
  unsigned __int8 *v549;
  _QWORD *v550;
  unsigned int v551;
  unsigned __int8 *v552;
  BOOL *v553;
  unsigned int v554;
  unint64_t *v555;
  _QWORD *v556;
  unint64_t v557;
  unsigned __int8 *v558;
  BOOL *v559;
  unsigned int v560;
  unint64_t *v561;
  _QWORD *v562;
  unint64_t v563;
  double *v564;
  double *v565;
  double v566;
  double v567;
  double *v568;
  double *v569;
  double v570;
  double v571;
  double *v572;
  double *v573;
  double v574;
  double v575;
  double *v576;
  double *v577;
  double v578;
  double v579;
  double *v580;
  double *v581;
  double v582;
  double v583;
  double *v584;
  double *v585;
  double v586;
  double v587;
  unsigned __int8 *v588;
  double *v589;
  unsigned int v590;
  double v591;
  unint64_t *v592;
  double *v593;
  unint64_t v594;
  double v595;
  unsigned __int8 *v596;
  double *v597;
  unsigned int v598;
  double v599;
  unint64_t *v600;
  double *v601;
  unint64_t v602;
  double v603;
  unsigned __int8 *v604;
  double *v605;
  unsigned int v606;
  double v607;
  unint64_t *v608;
  double *v609;
  unint64_t v610;
  double v611;
  unsigned __int8 *v612;
  double *v613;
  unsigned int v614;
  double v615;
  unint64_t *v616;
  double *v617;
  unint64_t v618;
  double v619;
  unsigned __int8 *v620;
  double *v621;
  unsigned int v622;
  double v623;
  unint64_t *v624;
  double *v625;
  unint64_t v626;
  double v627;
  unsigned __int8 *v628;
  double *v629;
  unsigned int v630;
  double v631;
  unint64_t *v632;
  double *v633;
  unint64_t v634;
  double v635;
  double *v636;
  double *v637;
  double v638;
  double v639;
  double *v640;
  double *v641;
  double v642;
  double v643;
  double *v644;
  double *v645;
  double v646;
  double v647;
  double *v648;
  double *v649;
  double v650;
  double v651;
  double *v652;
  double *v653;
  double v654;
  double v655;
  double *v656;
  double *v657;
  double v658;
  double v659;
  double *v660;
  double *v661;
  double v662;
  double v663;
  double *v664;
  double *v665;
  double v666;
  double v667;
  double *v668;
  double *v669;
  double v670;
  double v671;
  double *v672;
  double *v673;
  double v674;
  double v675;
  double *v676;
  double *v677;
  double v678;
  double v679;
  double *v680;
  double *v681;
  double v682;
  double v683;
  unsigned __int8 *v684;
  double *v685;
  int v686;
  double v687;
  unsigned __int8 *v688;
  double *v689;
  unsigned int v690;
  double v691;
  unint64_t *v692;
  double *v693;
  unint64_t v694;
  double v695;
  unint64_t *v696;
  double *v697;
  unint64_t v698;
  double v699;
  unsigned __int8 *v700;
  double *v701;
  int v702;
  double v703;
  unsigned __int8 *v704;
  double *v705;
  unsigned int v706;
  double v707;
  unint64_t *v708;
  double *v709;
  unint64_t v710;
  double v711;
  unint64_t *v712;
  double *v713;
  unint64_t v714;
  double v715;
  unsigned __int8 *v716;
  double *v717;
  unsigned int v718;
  double v719;
  unsigned __int8 *v720;
  double *v721;
  unsigned int v722;
  double v723;
  unint64_t *v724;
  double *v725;
  unint64_t v726;
  double v727;
  unint64_t *v728;
  double *v729;
  unint64_t v730;
  double v731;
  unsigned __int8 *v732;
  double *v733;
  unsigned int v734;
  double v735;
  unsigned __int8 *v736;
  double *v737;
  unsigned int v738;
  double v739;
  unint64_t *v740;
  double *v741;
  unint64_t v742;
  double v743;
  unint64_t *v744;
  double *v745;
  unint64_t v746;
  double v747;
  unsigned __int8 *v748;
  double *v749;
  unsigned int v750;
  double v751;
  unsigned __int8 *v752;
  double *v753;
  unsigned int v754;
  double v755;
  unint64_t *v756;
  double *v757;
  unint64_t v758;
  double v759;
  unint64_t *v760;
  double *v761;
  unint64_t v762;
  double v763;
  unsigned __int8 *v764;
  double *v765;
  unsigned int v766;
  double v767;
  unsigned __int8 *v768;
  double *v769;
  unsigned int v770;
  double v771;
  unint64_t *v772;
  double *v773;
  unint64_t v774;
  double v775;
  unint64_t *v776;
  double *v777;
  unint64_t v778;
  double v779;
  double *v780;
  BOOL *v781;
  double v782;
  double *v783;
  _QWORD *v784;
  double v785;
  double *v786;
  BOOL *v787;
  double v788;
  double *v789;
  _QWORD *v790;
  double v791;
  double *v792;
  BOOL *v793;
  double v794;
  double *v795;
  _QWORD *v796;
  double v797;
  double *v798;
  BOOL *v799;
  double v800;
  double *v801;
  _QWORD *v802;
  double v803;
  double *v804;
  BOOL *v805;
  double v806;
  double *v807;
  _QWORD *v808;
  double v809;
  double *v810;
  BOOL *v811;
  double v812;
  double *v813;
  _QWORD *v814;
  double v815;
  unsigned __int8 *v816;
  BOOL *v817;
  int v818;
  unsigned __int8 *v819;
  _QWORD *v820;
  int v821;
  unsigned __int8 *v822;
  BOOL *v823;
  int v824;
  uint64_t *v825;
  _QWORD *v826;
  uint64_t v827;
  unsigned __int8 *v828;
  BOOL *v829;
  int v830;
  unsigned __int8 *v831;
  _QWORD *v832;
  int v833;
  unsigned __int8 *v834;
  BOOL *v835;
  int v836;
  uint64_t *v837;
  _QWORD *v838;
  uint64_t v839;
  unsigned __int8 *v840;
  BOOL *v841;
  unsigned int v842;
  unsigned __int8 *v843;
  _QWORD *v844;
  unsigned int v845;
  unsigned __int8 *v846;
  BOOL *v847;
  unsigned int v848;
  unint64_t *v849;
  _QWORD *v850;
  unint64_t v851;
  unsigned __int8 *v852;
  BOOL *v853;
  unsigned int v854;
  unsigned __int8 *v855;
  _QWORD *v856;
  unsigned int v857;
  unsigned __int8 *v858;
  BOOL *v859;
  unsigned int v860;
  unint64_t *v861;
  _QWORD *v862;
  unint64_t v863;
  unsigned __int8 *v864;
  BOOL *v865;
  unsigned int v866;
  unsigned __int8 *v867;
  _QWORD *v868;
  unsigned int v869;
  unsigned __int8 *v870;
  BOOL *v871;
  unsigned int v872;
  unint64_t *v873;
  _QWORD *v874;
  unint64_t v875;
  unsigned __int8 *v876;
  BOOL *v877;
  unsigned int v878;
  unsigned __int8 *v879;
  _QWORD *v880;
  unsigned int v881;
  unsigned __int8 *v882;
  BOOL *v883;
  unsigned int v884;
  unint64_t *v885;
  _QWORD *v886;
  unint64_t v887;
  double *v888;
  BOOL *v889;
  double v890;
  double *v891;
  _QWORD *v892;
  double v893;
  double *v894;
  BOOL *v895;
  double v896;
  double *v897;
  _QWORD *v898;
  double v899;
  double *v900;
  BOOL *v901;
  double v902;
  double *v903;
  _QWORD *v904;
  double v905;
  double *v906;
  BOOL *v907;
  double v908;
  double *v909;
  _QWORD *v910;
  double v911;
  double *v912;
  BOOL *v913;
  double v914;
  double *v915;
  _QWORD *v916;
  double v917;
  double *v918;
  BOOL *v919;
  double v920;
  double *v921;
  _QWORD *v922;
  double v923;
  double *v924;
  BOOL *v925;
  double v926;
  double *v927;
  _QWORD *v928;
  double v929;
  double *v930;
  BOOL *v931;
  double v932;
  double *v933;
  _QWORD *v934;
  double v935;
  double *v936;
  BOOL *v937;
  double v938;
  double *v939;
  _QWORD *v940;
  double v941;
  double *v942;
  BOOL *v943;
  double v944;
  double *v945;
  _QWORD *v946;
  double v947;
  double *v948;
  BOOL *v949;
  double v950;
  double *v951;
  _QWORD *v952;
  double v953;
  double *v954;
  BOOL *v955;
  double v956;
  double *v957;
  _QWORD *v958;
  double v959;
  unsigned __int8 *v960;
  BOOL *v961;
  int v962;
  unsigned __int8 *v963;
  _QWORD *v964;
  int v965;
  unsigned __int8 *v966;
  BOOL *v967;
  int v968;
  unsigned __int8 *v969;
  _QWORD *v970;
  int v971;
  unsigned __int8 *v972;
  BOOL *v973;
  int v974;
  uint64_t *v975;
  _QWORD *v976;
  uint64_t v977;
  unsigned __int8 *v978;
  BOOL *v979;
  int v980;
  uint64_t *v981;
  _QWORD *v982;
  uint64_t v983;
  unsigned __int8 *v984;
  BOOL *v985;
  int v986;
  unsigned __int8 *v987;
  _QWORD *v988;
  int v989;
  unsigned __int8 *v990;
  BOOL *v991;
  int v992;
  unsigned __int8 *v993;
  _QWORD *v994;
  int v995;
  unsigned __int8 *v996;
  BOOL *v997;
  int v998;
  uint64_t *v999;
  _QWORD *v1000;
  uint64_t v1001;
  unsigned __int8 *v1002;
  BOOL *v1003;
  int v1004;
  uint64_t *v1005;
  _QWORD *v1006;
  uint64_t v1007;
  unsigned __int8 *v1008;
  BOOL *v1009;
  unsigned int v1010;
  unsigned __int8 *v1011;
  _QWORD *v1012;
  unsigned int v1013;
  unsigned __int8 *v1014;
  BOOL *v1015;
  unsigned int v1016;
  unsigned __int8 *v1017;
  _QWORD *v1018;
  unsigned int v1019;
  unsigned __int8 *v1020;
  BOOL *v1021;
  unsigned int v1022;
  unint64_t *v1023;
  _QWORD *v1024;
  unint64_t v1025;
  unsigned __int8 *v1026;
  BOOL *v1027;
  unsigned int v1028;
  unint64_t *v1029;
  _QWORD *v1030;
  unint64_t v1031;
  unsigned __int8 *v1032;
  BOOL *v1033;
  unsigned int v1034;
  unsigned __int8 *v1035;
  _QWORD *v1036;
  unsigned int v1037;
  unsigned __int8 *v1038;
  BOOL *v1039;
  unsigned int v1040;
  unsigned __int8 *v1041;
  _QWORD *v1042;
  unsigned int v1043;
  unsigned __int8 *v1044;
  BOOL *v1045;
  unsigned int v1046;
  unint64_t *v1047;
  _QWORD *v1048;
  unint64_t v1049;
  unsigned __int8 *v1050;
  BOOL *v1051;
  unsigned int v1052;
  unint64_t *v1053;
  _QWORD *v1054;
  unint64_t v1055;
  unsigned __int8 *v1056;
  BOOL *v1057;
  unsigned int v1058;
  unsigned __int8 *v1059;
  _QWORD *v1060;
  unsigned int v1061;
  unsigned __int8 *v1062;
  BOOL *v1063;
  unsigned int v1064;
  unsigned __int8 *v1065;
  _QWORD *v1066;
  unsigned int v1067;
  unsigned __int8 *v1068;
  BOOL *v1069;
  unsigned int v1070;
  unint64_t *v1071;
  _QWORD *v1072;
  unint64_t v1073;
  unsigned __int8 *v1074;
  BOOL *v1075;
  unsigned int v1076;
  unint64_t *v1077;
  _QWORD *v1078;
  unint64_t v1079;
  unsigned __int8 *v1080;
  BOOL *v1081;
  unsigned int v1082;
  unsigned __int8 *v1083;
  _QWORD *v1084;
  unsigned int v1085;
  unsigned __int8 *v1086;
  BOOL *v1087;
  unsigned int v1088;
  unsigned __int8 *v1089;
  _QWORD *v1090;
  unsigned int v1091;
  unsigned __int8 *v1092;
  BOOL *v1093;
  unsigned int v1094;
  unint64_t *v1095;
  _QWORD *v1096;
  unint64_t v1097;
  unsigned __int8 *v1098;
  BOOL *v1099;
  unsigned int v1100;
  unint64_t *v1101;
  _QWORD *v1102;
  unint64_t v1103;

  switch((int)result)
  {
    case 0:
      result = 0;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v6 = *((_QWORD *)a2 + 1);
        if (v6 != *((_QWORD *)a5 + 1))
          return 0;
        v7 = *a2;
        v8 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v960 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v961 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v962 = *v960++;
                        *v961++ = v962 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v420 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v421 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v422 = *v420++;
                      *v421++ = v422 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v963 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v964 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v965 = *v963++;
                        *v964++ = v965 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v423 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v424 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v425 = *v423++;
                      *v424++ = v425 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v684 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v685 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v686 = *v684++;
                        if (v686 == a4)
                          v687 = 1.0;
                        else
                          v687 = 0.0;
                        *v685++ = v687;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v144 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v145 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v146 = *v144++;
                      if (v146 == a4)
                        v147 = 1.0;
                      else
                        v147 = 0.0;
                      *v145++ = v147;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v966 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v967 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v968 = *v966++;
                        *v967++ = v968 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v426 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v427 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v428 = *v426++;
                      *v427++ = v428 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v969 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v970 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v971 = *v969++;
                        *v970++ = a4 == v971;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v429 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v430 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v431 = *v429++;
                      *v430++ = a4 == v431;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v688 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v689 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v690 = *v688++;
                        if ((double)v690 == (double)a4)
                          v691 = 1.0;
                        else
                          v691 = 0.0;
                        *v689++ = v691;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v148 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v149 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v150 = *v148++;
                      if ((double)v150 == (double)a4)
                        v151 = 1.0;
                      else
                        v151 = 0.0;
                      *v149++ = v151;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v816 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v817 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v818 = *v816++;
                        *v817++ = v818 == (int)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v276 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v277 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v278 = *v276++;
                      *v277++ = v278 == (int)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v819 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v820 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v821 = *v819++;
                        *v820++ = v821 == (unint64_t)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v279 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v280 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v281 = *v279++;
                      *v280++ = v281 == (unint64_t)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v588 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v589 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v590 = *v588++;
                        if (*(double *)&a4 == (double)v590)
                          v591 = 1.0;
                        else
                          v591 = 0.0;
                        *v589++ = v591;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v48 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v49 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v50 = *v48++;
                      if (*(double *)&a4 == (double)v50)
                        v51 = 1.0;
                      else
                        v51 = 0.0;
                      *v49++ = v51;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
          }
        }
        else if (v7 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v972 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v973 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v974 = *v972;
                        v972 += 8;
                        *v973++ = v974 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v432 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v433 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v434 = *v432;
                      v432 += 8;
                      *v433++ = v434 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v975 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v976 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v977 = *v975++;
                        *v976++ = v977 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v435 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v436 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v437 = *v435++;
                      *v436++ = v437 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v692 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v693 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v694 = *v692++;
                        if ((double)v694 == (double)a4)
                          v695 = 1.0;
                        else
                          v695 = 0.0;
                        *v693++ = v695;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v152 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v153 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v154 = *v152++;
                      if ((double)v154 == (double)a4)
                        v155 = 1.0;
                      else
                        v155 = 0.0;
                      *v153++ = v155;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v978 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v979 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v980 = *v978;
                        v978 += 8;
                        *v979++ = v980 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v438 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v439 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v440 = *v438;
                      v438 += 8;
                      *v439++ = v440 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v981 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v982 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v983 = *v981++;
                        *v982++ = v983 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v441 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v442 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v443 = *v441++;
                      *v442++ = v443 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v696 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v697 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v698 = *v696++;
                        if ((double)v698 == (double)a4)
                          v699 = 1.0;
                        else
                          v699 = 0.0;
                        *v697++ = v699;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v156 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v157 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v158 = *v156++;
                      if ((double)v158 == (double)a4)
                        v159 = 1.0;
                      else
                        v159 = 0.0;
                      *v157++ = v159;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v822 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v823 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v824 = *v822;
                        v822 += 8;
                        *v823++ = v824 == (int)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v282 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v283 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v284 = *v282;
                      v282 += 8;
                      *v283++ = v284 == (int)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v825 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v826 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v827 = *v825++;
                        *v826++ = v827 == (unint64_t)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v285 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v286 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v287 = *v285++;
                      *v286++ = v287 == (unint64_t)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v592 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v593 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v594 = *v592++;
                        if (*(double *)&a4 == (double)v594)
                          v595 = 1.0;
                        else
                          v595 = 0.0;
                        *v593++ = v595;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v52 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v53 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v54 = *v52++;
                      if (*(double *)&a4 == (double)v54)
                        v55 = 1.0;
                      else
                        v55 = 0.0;
                      *v53++ = v55;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v7)
        {
          switch(a3)
          {
            case 2:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v888 = (double *)*((_QWORD *)a2 + 2);
                      v889 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v890 = *v888++;
                        *v889++ = (int)v890 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v348 = (double *)*((_QWORD *)a2 + 2);
                    v349 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v350 = *v348++;
                      *v349++ = (int)v350 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v891 = (double *)*((_QWORD *)a2 + 2);
                      v892 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v893 = *v891++;
                        *v892++ = a4 == (unint64_t)v893;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v351 = (double *)*((_QWORD *)a2 + 2);
                    v352 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v353 = *v351++;
                      *v352++ = a4 == (unint64_t)v353;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v636 = (double *)*((_QWORD *)a2 + 2);
                      v637 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v638 = *v636++;
                        if (v638 == (double)a4)
                          v639 = 1.0;
                        else
                          v639 = 0.0;
                        *v637++ = v639;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v96 = (double *)*((_QWORD *)a2 + 2);
                    v97 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v98 = *v96++;
                      if (v98 == (double)a4)
                        v99 = 1.0;
                      else
                        v99 = 0.0;
                      *v97++ = v99;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 1:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v894 = (double *)*((_QWORD *)a2 + 2);
                      v895 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v896 = *v894++;
                        *v895++ = (int)v896 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v354 = (double *)*((_QWORD *)a2 + 2);
                    v355 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v356 = *v354++;
                      *v355++ = (int)v356 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v897 = (double *)*((_QWORD *)a2 + 2);
                      v898 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v899 = *v897++;
                        *v898++ = a4 == (unint64_t)v899;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v357 = (double *)*((_QWORD *)a2 + 2);
                    v358 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v359 = *v357++;
                      *v358++ = a4 == (unint64_t)v359;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v640 = (double *)*((_QWORD *)a2 + 2);
                      v641 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v642 = *v640++;
                        if (v642 == (double)a4)
                          v643 = 1.0;
                        else
                          v643 = 0.0;
                        *v641++ = v643;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v100 = (double *)*((_QWORD *)a2 + 2);
                    v101 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v102 = *v100++;
                      if (v102 == (double)a4)
                        v103 = 1.0;
                      else
                        v103 = 0.0;
                      *v101++ = v103;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
            case 0:
              switch(v8)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v780 = (double *)*((_QWORD *)a2 + 2);
                      v781 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v782 = *v780++;
                        *v781++ = (int)v782 == (int)*(double *)&a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v240 = (double *)*((_QWORD *)a2 + 2);
                    v241 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v242 = *v240++;
                      *v241++ = (int)v242 == (int)*(double *)&a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v783 = (double *)*((_QWORD *)a2 + 2);
                      v784 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v785 = *v783++;
                        *v784++ = *(uint64_t *)&v785 == a4;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v243 = (double *)*((_QWORD *)a2 + 2);
                    v244 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v245 = *v243++;
                      *v244++ = *(uint64_t *)&v245 == a4;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v6)
                    {
                      v564 = (double *)*((_QWORD *)a2 + 2);
                      v565 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v566 = *v564++;
                        if (v566 == *(double *)&a4)
                          v567 = 1.0;
                        else
                          v567 = 0.0;
                        *v565++ = v567;
                        --v6;
                      }
                      while (v6);
                    }
                  }
                  else if (!a6 && v6)
                  {
                    v9 = (double *)*((_QWORD *)a2 + 2);
                    v10 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v11 = *v9++;
                      if (v11 == *(double *)&a4)
                        v12 = 1.0;
                      else
                        v12 = 0.0;
                      *v10++ = v12;
                      --v6;
                    }
                    while (v6);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 1:
      result = 0;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v13 = *((_QWORD *)a2 + 1);
        if (v13 != *((_QWORD *)a5 + 1))
          return 0;
        v14 = *a2;
        v15 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v984 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v985 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v986 = *v984++;
                        *v985++ = v986 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v444 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v445 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v446 = *v444++;
                      *v445++ = v446 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v987 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v988 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v989 = *v987++;
                        *v988++ = v989 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v447 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v448 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v449 = *v447++;
                      *v448++ = v449 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v700 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v701 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v702 = *v700++;
                        if (v702 == a4)
                          v703 = 0.0;
                        else
                          v703 = 1.0;
                        *v701++ = v703;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v160 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v161 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v162 = *v160++;
                      if (v162 == a4)
                        v163 = 0.0;
                      else
                        v163 = 1.0;
                      *v161++ = v163;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v990 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v991 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v992 = *v990++;
                        *v991++ = v992 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v450 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v451 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v452 = *v450++;
                      *v451++ = v452 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v993 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v994 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v995 = *v993++;
                        *v994++ = a4 != v995;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v453 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v454 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v455 = *v453++;
                      *v454++ = a4 != v455;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v704 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v705 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v706 = *v704++;
                        if ((double)v706 == (double)a4)
                          v707 = 0.0;
                        else
                          v707 = 1.0;
                        *v705++ = v707;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v164 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v165 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v166 = *v164++;
                      if ((double)v166 == (double)a4)
                        v167 = 0.0;
                      else
                        v167 = 1.0;
                      *v165++ = v167;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v828 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v829 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v830 = *v828++;
                        *v829++ = v830 != (int)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v288 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v289 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v290 = *v288++;
                      *v289++ = v290 != (int)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v831 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v832 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v833 = *v831++;
                        *v832++ = v833 != (unint64_t)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v291 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v292 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v293 = *v291++;
                      *v292++ = v293 != (unint64_t)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v596 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v597 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v598 = *v596++;
                        if (*(double *)&a4 == (double)v598)
                          v599 = 0.0;
                        else
                          v599 = 1.0;
                        *v597++ = v599;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v56 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v57 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v58 = *v56++;
                      if (*(double *)&a4 == (double)v58)
                        v59 = 0.0;
                      else
                        v59 = 1.0;
                      *v57++ = v59;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
          }
        }
        else if (v14 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v996 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v997 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v998 = *v996;
                        v996 += 8;
                        *v997++ = v998 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v456 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v457 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v458 = *v456;
                      v456 += 8;
                      *v457++ = v458 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v999 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1000 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1001 = *v999++;
                        *v1000++ = v1001 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v459 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v460 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v461 = *v459++;
                      *v460++ = v461 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v708 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v709 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v710 = *v708++;
                        if ((double)v710 == (double)a4)
                          v711 = 0.0;
                        else
                          v711 = 1.0;
                        *v709++ = v711;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v168 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v169 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v170 = *v168++;
                      if ((double)v170 == (double)a4)
                        v171 = 0.0;
                      else
                        v171 = 1.0;
                      *v169++ = v171;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v1002 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1003 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1004 = *v1002;
                        v1002 += 8;
                        *v1003++ = v1004 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v462 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v463 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v464 = *v462;
                      v462 += 8;
                      *v463++ = v464 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v1005 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v1006 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1007 = *v1005++;
                        *v1006++ = v1007 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v465 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v466 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v467 = *v465++;
                      *v466++ = v467 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v712 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v713 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v714 = *v712++;
                        if ((double)v714 == (double)a4)
                          v715 = 0.0;
                        else
                          v715 = 1.0;
                        *v713++ = v715;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v172 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v173 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v174 = *v172++;
                      if ((double)v174 == (double)a4)
                        v175 = 0.0;
                      else
                        v175 = 1.0;
                      *v173++ = v175;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v834 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v835 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v836 = *v834;
                        v834 += 8;
                        *v835++ = v836 != (int)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v294 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v295 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v296 = *v294;
                      v294 += 8;
                      *v295++ = v296 != (int)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v837 = (uint64_t *)*((_QWORD *)a2 + 2);
                      v838 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v839 = *v837++;
                        *v838++ = v839 != (unint64_t)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v297 = (uint64_t *)*((_QWORD *)a2 + 2);
                    v298 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v299 = *v297++;
                      *v298++ = v299 != (unint64_t)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v600 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v601 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v602 = *v600++;
                        if (*(double *)&a4 == (double)v602)
                          v603 = 0.0;
                        else
                          v603 = 1.0;
                        *v601++ = v603;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v60 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v61 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v62 = *v60++;
                      if (*(double *)&a4 == (double)v62)
                        v63 = 0.0;
                      else
                        v63 = 1.0;
                      *v61++ = v63;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v14)
        {
          switch(a3)
          {
            case 2:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v900 = (double *)*((_QWORD *)a2 + 2);
                      v901 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v902 = *v900++;
                        *v901++ = (int)v902 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v360 = (double *)*((_QWORD *)a2 + 2);
                    v361 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v362 = *v360++;
                      *v361++ = (int)v362 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v903 = (double *)*((_QWORD *)a2 + 2);
                      v904 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v905 = *v903++;
                        *v904++ = a4 != (unint64_t)v905;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v363 = (double *)*((_QWORD *)a2 + 2);
                    v364 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v365 = *v363++;
                      *v364++ = a4 != (unint64_t)v365;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v644 = (double *)*((_QWORD *)a2 + 2);
                      v645 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v646 = *v644++;
                        if (v646 == (double)a4)
                          v647 = 0.0;
                        else
                          v647 = 1.0;
                        *v645++ = v647;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v104 = (double *)*((_QWORD *)a2 + 2);
                    v105 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v106 = *v104++;
                      if (v106 == (double)a4)
                        v107 = 0.0;
                      else
                        v107 = 1.0;
                      *v105++ = v107;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 1:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v906 = (double *)*((_QWORD *)a2 + 2);
                      v907 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v908 = *v906++;
                        *v907++ = (int)v908 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v366 = (double *)*((_QWORD *)a2 + 2);
                    v367 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v368 = *v366++;
                      *v367++ = (int)v368 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v909 = (double *)*((_QWORD *)a2 + 2);
                      v910 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v911 = *v909++;
                        *v910++ = a4 != (unint64_t)v911;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v369 = (double *)*((_QWORD *)a2 + 2);
                    v370 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v371 = *v369++;
                      *v370++ = a4 != (unint64_t)v371;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v648 = (double *)*((_QWORD *)a2 + 2);
                      v649 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v650 = *v648++;
                        if (v650 == (double)a4)
                          v651 = 0.0;
                        else
                          v651 = 1.0;
                        *v649++ = v651;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v108 = (double *)*((_QWORD *)a2 + 2);
                    v109 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v110 = *v108++;
                      if (v110 == (double)a4)
                        v111 = 0.0;
                      else
                        v111 = 1.0;
                      *v109++ = v111;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
            case 0:
              switch(v15)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v786 = (double *)*((_QWORD *)a2 + 2);
                      v787 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v788 = *v786++;
                        *v787++ = (int)v788 != (int)*(double *)&a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v246 = (double *)*((_QWORD *)a2 + 2);
                    v247 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v248 = *v246++;
                      *v247++ = (int)v248 != (int)*(double *)&a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v789 = (double *)*((_QWORD *)a2 + 2);
                      v790 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v791 = *v789++;
                        *v790++ = *(uint64_t *)&v791 != a4;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v249 = (double *)*((_QWORD *)a2 + 2);
                    v250 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v251 = *v249++;
                      *v250++ = *(uint64_t *)&v251 != a4;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v13)
                    {
                      v568 = (double *)*((_QWORD *)a2 + 2);
                      v569 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v570 = *v568++;
                        if (v570 == *(double *)&a4)
                          v571 = 0.0;
                        else
                          v571 = 1.0;
                        *v569++ = v571;
                        --v13;
                      }
                      while (v13);
                    }
                  }
                  else if (!a6 && v13)
                  {
                    v16 = (double *)*((_QWORD *)a2 + 2);
                    v17 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v18 = *v16++;
                      if (v18 == *(double *)&a4)
                        v19 = 0.0;
                      else
                        v19 = 1.0;
                      *v17++ = v19;
                      --v13;
                    }
                    while (v13);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 2:
      result = 0;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 != *((_QWORD *)a5 + 1))
          return 0;
        v21 = *a2;
        v22 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1008 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1009 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1010 = *v1008++;
                        *v1009++ = v1010 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v468 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v469 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v470 = *v468++;
                      *v469++ = v470 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1011 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1012 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1013 = *v1011++;
                        *v1012++ = a4 > (unint64_t)v1013;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v471 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v472 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v473 = *v471++;
                      *v472++ = a4 > (unint64_t)v473;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v716 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v717 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v718 = *v716++;
                        if (a4 <= v718)
                          v719 = 0.0;
                        else
                          v719 = 1.0;
                        *v717++ = v719;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v176 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v177 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v178 = *v176++;
                      if (a4 <= v178)
                        v179 = 0.0;
                      else
                        v179 = 1.0;
                      *v177++ = v179;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1014 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1015 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1016 = *v1014++;
                        *v1015++ = v1016 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v474 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v475 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v476 = *v474++;
                      *v475++ = v476 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1017 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1018 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1019 = *v1017++;
                        *v1018++ = a4 > v1019;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v477 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v478 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v479 = *v477++;
                      *v478++ = a4 > v479;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v720 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v721 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v722 = *v720++;
                        if ((double)v722 >= (double)a4)
                          v723 = 0.0;
                        else
                          v723 = 1.0;
                        *v721++ = v723;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v180 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v181 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v182 = *v180++;
                      if ((double)v182 >= (double)a4)
                        v183 = 0.0;
                      else
                        v183 = 1.0;
                      *v181++ = v183;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v840 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v841 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v842 = *v840++;
                        *v841++ = v842 < (int)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v300 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v301 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v302 = *v300++;
                      *v301++ = v302 < (int)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v843 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v844 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v845 = *v843++;
                        *v844++ = v845 < (unint64_t)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v303 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v304 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v305 = *v303++;
                      *v304++ = v305 < (unint64_t)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v604 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v605 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v606 = *v604++;
                        if (*(double *)&a4 <= (double)v606)
                          v607 = 0.0;
                        else
                          v607 = 1.0;
                        *v605++ = v607;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v64 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v65 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v66 = *v64++;
                      if (*(double *)&a4 <= (double)v66)
                        v67 = 0.0;
                      else
                        v67 = 1.0;
                      *v65++ = v67;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
          }
        }
        else if (v21 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1020 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1021 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1022 = *v1020;
                        v1020 += 8;
                        *v1021++ = v1022 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v480 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v481 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v482 = *v480;
                      v480 += 8;
                      *v481++ = v482 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1023 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1024 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1025 = *v1023++;
                        *v1024++ = v1025 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v483 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v484 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v485 = *v483++;
                      *v484++ = v485 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v724 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v725 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v726 = *v724++;
                        if ((double)v726 >= (double)a4)
                          v727 = 0.0;
                        else
                          v727 = 1.0;
                        *v725++ = v727;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v184 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v185 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v186 = *v184++;
                      if ((double)v186 >= (double)a4)
                        v187 = 0.0;
                      else
                        v187 = 1.0;
                      *v185++ = v187;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1026 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1027 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1028 = *v1026;
                        v1026 += 8;
                        *v1027++ = v1028 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v486 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v487 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v488 = *v486;
                      v486 += 8;
                      *v487++ = v488 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v1029 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1030 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1031 = *v1029++;
                        *v1030++ = v1031 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v489 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v490 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v491 = *v489++;
                      *v490++ = v491 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v728 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v729 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v730 = *v728++;
                        if ((double)v730 >= (double)a4)
                          v731 = 0.0;
                        else
                          v731 = 1.0;
                        *v729++ = v731;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v188 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v189 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v190 = *v188++;
                      if ((double)v190 >= (double)a4)
                        v191 = 0.0;
                      else
                        v191 = 1.0;
                      *v189++ = v191;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v846 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v847 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v848 = *v846;
                        v846 += 8;
                        *v847++ = v848 < (int)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v306 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v307 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v308 = *v306;
                      v306 += 8;
                      *v307++ = v308 < (int)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v849 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v850 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v851 = *v849++;
                        *v850++ = v851 < (unint64_t)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v309 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v310 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v311 = *v309++;
                      *v310++ = v311 < (unint64_t)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v608 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v609 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v610 = *v608++;
                        if (*(double *)&a4 <= (double)v610)
                          v611 = 0.0;
                        else
                          v611 = 1.0;
                        *v609++ = v611;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v68 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v69 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v70 = *v68++;
                      if (*(double *)&a4 <= (double)v70)
                        v71 = 0.0;
                      else
                        v71 = 1.0;
                      *v69++ = v71;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v21)
        {
          switch(a3)
          {
            case 2:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v912 = (double *)*((_QWORD *)a2 + 2);
                      v913 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v914 = *v912++;
                        *v913++ = (int)v914 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v372 = (double *)*((_QWORD *)a2 + 2);
                    v373 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v374 = *v372++;
                      *v373++ = (int)v374 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v915 = (double *)*((_QWORD *)a2 + 2);
                      v916 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v917 = *v915++;
                        *v916++ = a4 > (unint64_t)v917;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v375 = (double *)*((_QWORD *)a2 + 2);
                    v376 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v377 = *v375++;
                      *v376++ = a4 > (unint64_t)v377;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v652 = (double *)*((_QWORD *)a2 + 2);
                      v653 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v654 = *v652++;
                        if (v654 >= (double)a4)
                          v655 = 0.0;
                        else
                          v655 = 1.0;
                        *v653++ = v655;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v112 = (double *)*((_QWORD *)a2 + 2);
                    v113 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v114 = *v112++;
                      if (v114 >= (double)a4)
                        v115 = 0.0;
                      else
                        v115 = 1.0;
                      *v113++ = v115;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 1:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v918 = (double *)*((_QWORD *)a2 + 2);
                      v919 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v920 = *v918++;
                        *v919++ = (int)v920 < a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v378 = (double *)*((_QWORD *)a2 + 2);
                    v379 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v380 = *v378++;
                      *v379++ = (int)v380 < a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v921 = (double *)*((_QWORD *)a2 + 2);
                      v922 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v923 = *v921++;
                        *v922++ = a4 > (unint64_t)v923;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v381 = (double *)*((_QWORD *)a2 + 2);
                    v382 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v383 = *v381++;
                      *v382++ = a4 > (unint64_t)v383;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v656 = (double *)*((_QWORD *)a2 + 2);
                      v657 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v658 = *v656++;
                        if (v658 >= (double)a4)
                          v659 = 0.0;
                        else
                          v659 = 1.0;
                        *v657++ = v659;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v116 = (double *)*((_QWORD *)a2 + 2);
                    v117 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v118 = *v116++;
                      if (v118 >= (double)a4)
                        v119 = 0.0;
                      else
                        v119 = 1.0;
                      *v117++ = v119;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
            case 0:
              switch(v22)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v792 = (double *)*((_QWORD *)a2 + 2);
                      v793 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v794 = *v792++;
                        *v793++ = (int)v794 < (int)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v252 = (double *)*((_QWORD *)a2 + 2);
                    v253 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v254 = *v252++;
                      *v253++ = (int)v254 < (int)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v795 = (double *)*((_QWORD *)a2 + 2);
                      v796 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v797 = *v795++;
                        *v796++ = (unint64_t)v797 < (unint64_t)*(double *)&a4;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v255 = (double *)*((_QWORD *)a2 + 2);
                    v256 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v257 = *v255++;
                      *v256++ = (unint64_t)v257 < (unint64_t)*(double *)&a4;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v20)
                    {
                      v572 = (double *)*((_QWORD *)a2 + 2);
                      v573 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v574 = *v572++;
                        if (v574 >= *(double *)&a4)
                          v575 = 0.0;
                        else
                          v575 = 1.0;
                        *v573++ = v575;
                        --v20;
                      }
                      while (v20);
                    }
                  }
                  else if (!a6 && v20)
                  {
                    v23 = (double *)*((_QWORD *)a2 + 2);
                    v24 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v25 = *v23++;
                      if (v25 >= *(double *)&a4)
                        v26 = 0.0;
                      else
                        v26 = 1.0;
                      *v24++ = v26;
                      --v20;
                    }
                    while (v20);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 3:
      result = 0;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 != *((_QWORD *)a5 + 1))
          return 0;
        v28 = *a2;
        v29 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1032 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1033 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1034 = *v1032++;
                        *v1033++ = v1034 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v492 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v493 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v494 = *v492++;
                      *v493++ = v494 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1035 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1036 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1037 = *v1035++;
                        *v1036++ = a4 < (unint64_t)v1037;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v495 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v496 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v497 = *v495++;
                      *v496++ = a4 < (unint64_t)v497;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v732 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v733 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v734 = *v732++;
                        if (a4 >= v734)
                          v735 = 0.0;
                        else
                          v735 = 1.0;
                        *v733++ = v735;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v192 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v193 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v194 = *v192++;
                      if (a4 >= v194)
                        v195 = 0.0;
                      else
                        v195 = 1.0;
                      *v193++ = v195;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1038 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1039 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1040 = *v1038++;
                        *v1039++ = v1040 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v498 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v499 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v500 = *v498++;
                      *v499++ = v500 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1041 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1042 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1043 = *v1041++;
                        *v1042++ = a4 < v1043;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v501 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v502 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v503 = *v501++;
                      *v502++ = a4 < v503;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v736 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v737 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v738 = *v736++;
                        if ((double)v738 <= (double)a4)
                          v739 = 0.0;
                        else
                          v739 = 1.0;
                        *v737++ = v739;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v196 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v197 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v198 = *v196++;
                      if ((double)v198 <= (double)a4)
                        v199 = 0.0;
                      else
                        v199 = 1.0;
                      *v197++ = v199;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v852 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v853 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v854 = *v852++;
                        *v853++ = v854 > (int)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v312 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v313 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v314 = *v312++;
                      *v313++ = v314 > (int)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v855 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v856 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v857 = *v855++;
                        *v856++ = v857 > (unint64_t)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v315 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v316 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v317 = *v315++;
                      *v316++ = v317 > (unint64_t)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v612 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v613 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v614 = *v612++;
                        if (*(double *)&a4 >= (double)v614)
                          v615 = 0.0;
                        else
                          v615 = 1.0;
                        *v613++ = v615;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v72 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v73 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v74 = *v72++;
                      if (*(double *)&a4 >= (double)v74)
                        v75 = 0.0;
                      else
                        v75 = 1.0;
                      *v73++ = v75;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (v28 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1044 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1045 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1046 = *v1044;
                        v1044 += 8;
                        *v1045++ = v1046 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v504 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v505 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v506 = *v504;
                      v504 += 8;
                      *v505++ = v506 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1047 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1048 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1049 = *v1047++;
                        *v1048++ = v1049 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v507 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v508 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v509 = *v507++;
                      *v508++ = v509 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v740 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v741 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v742 = *v740++;
                        if ((double)v742 <= (double)a4)
                          v743 = 0.0;
                        else
                          v743 = 1.0;
                        *v741++ = v743;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v200 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v201 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v202 = *v200++;
                      if ((double)v202 <= (double)a4)
                        v203 = 0.0;
                      else
                        v203 = 1.0;
                      *v201++ = v203;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1050 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1051 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1052 = *v1050;
                        v1050 += 8;
                        *v1051++ = v1052 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v510 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v511 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v512 = *v510;
                      v510 += 8;
                      *v511++ = v512 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v1053 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1054 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1055 = *v1053++;
                        *v1054++ = v1055 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v513 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v514 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v515 = *v513++;
                      *v514++ = v515 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v744 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v745 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v746 = *v744++;
                        if ((double)v746 <= (double)a4)
                          v747 = 0.0;
                        else
                          v747 = 1.0;
                        *v745++ = v747;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v204 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v205 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v206 = *v204++;
                      if ((double)v206 <= (double)a4)
                        v207 = 0.0;
                      else
                        v207 = 1.0;
                      *v205++ = v207;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v858 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v859 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v860 = *v858;
                        v858 += 8;
                        *v859++ = v860 > (int)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v318 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v319 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v320 = *v318;
                      v318 += 8;
                      *v319++ = v320 > (int)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v861 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v862 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v863 = *v861++;
                        *v862++ = v863 > (unint64_t)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v321 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v322 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v323 = *v321++;
                      *v322++ = v323 > (unint64_t)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v616 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v617 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v618 = *v616++;
                        if (*(double *)&a4 >= (double)v618)
                          v619 = 0.0;
                        else
                          v619 = 1.0;
                        *v617++ = v619;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v76 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v77 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v78 = *v76++;
                      if (*(double *)&a4 >= (double)v78)
                        v79 = 0.0;
                      else
                        v79 = 1.0;
                      *v77++ = v79;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v28)
        {
          switch(a3)
          {
            case 2:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v924 = (double *)*((_QWORD *)a2 + 2);
                      v925 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v926 = *v924++;
                        *v925++ = (int)v926 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v384 = (double *)*((_QWORD *)a2 + 2);
                    v385 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v386 = *v384++;
                      *v385++ = (int)v386 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v927 = (double *)*((_QWORD *)a2 + 2);
                      v928 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v929 = *v927++;
                        *v928++ = a4 < (unint64_t)v929;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v387 = (double *)*((_QWORD *)a2 + 2);
                    v388 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v389 = *v387++;
                      *v388++ = a4 < (unint64_t)v389;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v660 = (double *)*((_QWORD *)a2 + 2);
                      v661 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v662 = *v660++;
                        if (v662 <= (double)a4)
                          v663 = 0.0;
                        else
                          v663 = 1.0;
                        *v661++ = v663;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v120 = (double *)*((_QWORD *)a2 + 2);
                    v121 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v122 = *v120++;
                      if (v122 <= (double)a4)
                        v123 = 0.0;
                      else
                        v123 = 1.0;
                      *v121++ = v123;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 1:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v930 = (double *)*((_QWORD *)a2 + 2);
                      v931 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v932 = *v930++;
                        *v931++ = (int)v932 > a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v390 = (double *)*((_QWORD *)a2 + 2);
                    v391 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v392 = *v390++;
                      *v391++ = (int)v392 > a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v933 = (double *)*((_QWORD *)a2 + 2);
                      v934 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v935 = *v933++;
                        *v934++ = a4 < (unint64_t)v935;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v393 = (double *)*((_QWORD *)a2 + 2);
                    v394 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v395 = *v393++;
                      *v394++ = a4 < (unint64_t)v395;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v664 = (double *)*((_QWORD *)a2 + 2);
                      v665 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v666 = *v664++;
                        if (v666 <= (double)a4)
                          v667 = 0.0;
                        else
                          v667 = 1.0;
                        *v665++ = v667;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v124 = (double *)*((_QWORD *)a2 + 2);
                    v125 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v126 = *v124++;
                      if (v126 <= (double)a4)
                        v127 = 0.0;
                      else
                        v127 = 1.0;
                      *v125++ = v127;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
            case 0:
              switch(v29)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v798 = (double *)*((_QWORD *)a2 + 2);
                      v799 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v800 = *v798++;
                        *v799++ = (int)v800 > (int)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v258 = (double *)*((_QWORD *)a2 + 2);
                    v259 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v260 = *v258++;
                      *v259++ = (int)v260 > (int)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v801 = (double *)*((_QWORD *)a2 + 2);
                      v802 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v803 = *v801++;
                        *v802++ = (unint64_t)v803 > (unint64_t)*(double *)&a4;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v261 = (double *)*((_QWORD *)a2 + 2);
                    v262 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v263 = *v261++;
                      *v262++ = (unint64_t)v263 > (unint64_t)*(double *)&a4;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v27)
                    {
                      v576 = (double *)*((_QWORD *)a2 + 2);
                      v577 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v578 = *v576++;
                        if (v578 <= *(double *)&a4)
                          v579 = 0.0;
                        else
                          v579 = 1.0;
                        *v577++ = v579;
                        --v27;
                      }
                      while (v27);
                    }
                  }
                  else if (!a6 && v27)
                  {
                    v30 = (double *)*((_QWORD *)a2 + 2);
                    v31 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v32 = *v30++;
                      if (v32 <= *(double *)&a4)
                        v33 = 0.0;
                      else
                        v33 = 1.0;
                      *v31++ = v33;
                      --v27;
                    }
                    while (v27);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 4:
      result = 0;
      if (a2 && a5)
      {
        if (*((_BYTE *)a5 + 32))
          return 0;
        v34 = *((_QWORD *)a2 + 1);
        if (v34 != *((_QWORD *)a5 + 1))
          return 0;
        v35 = *a2;
        v36 = *a5;
        if (*a2 == 2)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1056 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1057 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1058 = *v1056++;
                        *v1057++ = v1058 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v516 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v517 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v518 = *v516++;
                      *v517++ = v518 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1059 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1060 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1061 = *v1059++;
                        *v1060++ = a4 >= (unint64_t)v1061;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v519 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v520 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v521 = *v519++;
                      *v520++ = a4 >= (unint64_t)v521;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v748 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v749 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v750 = *v748++;
                        if (a4 < v750)
                          v751 = 0.0;
                        else
                          v751 = 1.0;
                        *v749++ = v751;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v208 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v209 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v210 = *v208++;
                      if (a4 < v210)
                        v211 = 0.0;
                      else
                        v211 = 1.0;
                      *v209++ = v211;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1062 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1063 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1064 = *v1062++;
                        *v1063++ = v1064 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v522 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v523 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v524 = *v522++;
                      *v523++ = v524 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1065 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1066 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1067 = *v1065++;
                        *v1066++ = a4 >= v1067;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v525 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v526 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v527 = *v525++;
                      *v526++ = a4 >= v527;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v752 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v753 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v754 = *v752++;
                        if ((double)v754 > (double)a4)
                          v755 = 0.0;
                        else
                          v755 = 1.0;
                        *v753++ = v755;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v212 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v213 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v214 = *v212++;
                      if ((double)v214 > (double)a4)
                        v215 = 0.0;
                      else
                        v215 = 1.0;
                      *v213++ = v215;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v864 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v865 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v866 = *v864++;
                        *v865++ = v866 <= (int)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v324 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v325 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v326 = *v324++;
                      *v325++ = v326 <= (int)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v867 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v868 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v869 = *v867++;
                        *v868++ = v869 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v327 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v328 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v329 = *v327++;
                      *v328++ = v329 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v620 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v621 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v622 = *v620++;
                        if (*(double *)&a4 < (double)v622)
                          v623 = 0.0;
                        else
                          v623 = 1.0;
                        *v621++ = v623;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v80 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v81 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v82 = *v80++;
                      if (*(double *)&a4 < (double)v82)
                        v83 = 0.0;
                      else
                        v83 = 1.0;
                      *v81++ = v83;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
          }
        }
        else if (v35 == 1)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1068 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1069 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1070 = *v1068;
                        v1068 += 8;
                        *v1069++ = v1070 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v528 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v529 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v530 = *v528;
                      v528 += 8;
                      *v529++ = v530 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1071 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1072 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1073 = *v1071++;
                        *v1072++ = v1073 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v531 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v532 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v533 = *v531++;
                      *v532++ = v533 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v756 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v757 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v758 = *v756++;
                        if ((double)v758 > (double)a4)
                          v759 = 0.0;
                        else
                          v759 = 1.0;
                        *v757++ = v759;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v216 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v217 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v218 = *v216++;
                      if ((double)v218 > (double)a4)
                        v219 = 0.0;
                      else
                        v219 = 1.0;
                      *v217++ = v219;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1074 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v1075 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1076 = *v1074;
                        v1074 += 8;
                        *v1075++ = v1076 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v534 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v535 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v536 = *v534;
                      v534 += 8;
                      *v535++ = v536 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v1077 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v1078 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v1079 = *v1077++;
                        *v1078++ = v1079 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v537 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v538 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v539 = *v537++;
                      *v538++ = v539 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v760 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v761 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v762 = *v760++;
                        if ((double)v762 > (double)a4)
                          v763 = 0.0;
                        else
                          v763 = 1.0;
                        *v761++ = v763;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v220 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v221 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v222 = *v220++;
                      if ((double)v222 > (double)a4)
                        v223 = 0.0;
                      else
                        v223 = 1.0;
                      *v221++ = v223;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v870 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                      v871 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v872 = *v870;
                        v870 += 8;
                        *v871++ = v872 <= (int)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v330 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v331 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v332 = *v330;
                      v330 += 8;
                      *v331++ = v332 <= (int)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v873 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v874 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v875 = *v873++;
                        *v874++ = v875 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v333 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v334 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v335 = *v333++;
                      *v334++ = v335 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v624 = (unint64_t *)*((_QWORD *)a2 + 2);
                      v625 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v626 = *v624++;
                        if (*(double *)&a4 < (double)v626)
                          v627 = 0.0;
                        else
                          v627 = 1.0;
                        *v625++ = v627;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v84 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v85 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v86 = *v84++;
                      if (*(double *)&a4 < (double)v86)
                        v87 = 0.0;
                      else
                        v87 = 1.0;
                      *v85++ = v87;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
          }
        }
        else if (!v35)
        {
          switch(a3)
          {
            case 2:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v936 = (double *)*((_QWORD *)a2 + 2);
                      v937 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v938 = *v936++;
                        *v937++ = (int)v938 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v396 = (double *)*((_QWORD *)a2 + 2);
                    v397 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v398 = *v396++;
                      *v397++ = (int)v398 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v939 = (double *)*((_QWORD *)a2 + 2);
                      v940 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v941 = *v939++;
                        *v940++ = a4 >= (unint64_t)v941;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v399 = (double *)*((_QWORD *)a2 + 2);
                    v400 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v401 = *v399++;
                      *v400++ = a4 >= (unint64_t)v401;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v668 = (double *)*((_QWORD *)a2 + 2);
                      v669 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v670 = *v668++;
                        if (v670 > (double)a4)
                          v671 = 0.0;
                        else
                          v671 = 1.0;
                        *v669++ = v671;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v128 = (double *)*((_QWORD *)a2 + 2);
                    v129 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v130 = *v128++;
                      if (v130 > (double)a4)
                        v131 = 0.0;
                      else
                        v131 = 1.0;
                      *v129++ = v131;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 1:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v942 = (double *)*((_QWORD *)a2 + 2);
                      v943 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v944 = *v942++;
                        *v943++ = (int)v944 <= a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v402 = (double *)*((_QWORD *)a2 + 2);
                    v403 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v404 = *v402++;
                      *v403++ = (int)v404 <= a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v945 = (double *)*((_QWORD *)a2 + 2);
                      v946 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v947 = *v945++;
                        *v946++ = a4 >= (unint64_t)v947;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v405 = (double *)*((_QWORD *)a2 + 2);
                    v406 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v407 = *v405++;
                      *v406++ = a4 >= (unint64_t)v407;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v672 = (double *)*((_QWORD *)a2 + 2);
                      v673 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v674 = *v672++;
                        if (v674 > (double)a4)
                          v675 = 0.0;
                        else
                          v675 = 1.0;
                        *v673++ = v675;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v132 = (double *)*((_QWORD *)a2 + 2);
                    v133 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v134 = *v132++;
                      if (v134 > (double)a4)
                        v135 = 0.0;
                      else
                        v135 = 1.0;
                      *v133++ = v135;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
            case 0:
              switch(v36)
              {
                case 2:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v804 = (double *)*((_QWORD *)a2 + 2);
                      v805 = (BOOL *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v806 = *v804++;
                        *v805++ = (int)v806 <= (int)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v264 = (double *)*((_QWORD *)a2 + 2);
                    v265 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v266 = *v264++;
                      *v265++ = (int)v266 <= (int)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 1:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v807 = (double *)*((_QWORD *)a2 + 2);
                      v808 = (_QWORD *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v809 = *v807++;
                        *v808++ = (unint64_t)v809 <= (unint64_t)*(double *)&a4;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v267 = (double *)*((_QWORD *)a2 + 2);
                    v268 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v269 = *v267++;
                      *v268++ = (unint64_t)v269 <= (unint64_t)*(double *)&a4;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
                case 0:
                  if (a6 == 1)
                  {
                    if (v34)
                    {
                      v580 = (double *)*((_QWORD *)a2 + 2);
                      v581 = (double *)*((_QWORD *)a5 + 2);
                      do
                      {
                        v582 = *v580++;
                        if (v582 > *(double *)&a4)
                          v583 = 0.0;
                        else
                          v583 = 1.0;
                        *v581++ = v583;
                        --v34;
                      }
                      while (v34);
                    }
                  }
                  else if (!a6 && v34)
                  {
                    v37 = (double *)*((_QWORD *)a2 + 2);
                    v38 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v39 = *v37++;
                      if (v39 > *(double *)&a4)
                        v40 = 0.0;
                      else
                        v40 = 1.0;
                      *v38++ = v40;
                      --v34;
                    }
                    while (v34);
                  }
                  break;
              }
              break;
          }
        }
        return a5;
      }
      return result;
    case 5:
      result = 0;
      if (!a2 || !a5)
        return result;
      if (*((_BYTE *)a5 + 32))
        return 0;
      v41 = *((_QWORD *)a2 + 1);
      if (v41 != *((_QWORD *)a5 + 1))
        return 0;
      v42 = *a2;
      v43 = *a5;
      if (*a2 == 2)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1080 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1081 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1082 = *v1080++;
                      *v1081++ = v1082 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v540 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v541 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v542 = *v540++;
                    *v541++ = v542 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1083 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1084 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1085 = *v1083++;
                      *v1084++ = a4 <= (unint64_t)v1085;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v543 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v544 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v545 = *v543++;
                    *v544++ = a4 <= (unint64_t)v545;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v764 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v765 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v766 = *v764++;
                      if (a4 > v766)
                        v767 = 0.0;
                      else
                        v767 = 1.0;
                      *v765++ = v767;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v224 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v225 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v226 = *v224++;
                    if (a4 > v226)
                      v227 = 0.0;
                    else
                      v227 = 1.0;
                    *v225++ = v227;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1086 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1087 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1088 = *v1086++;
                      *v1087++ = v1088 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v546 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v547 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v548 = *v546++;
                    *v547++ = v548 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1089 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1090 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1091 = *v1089++;
                      *v1090++ = a4 <= v1091;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v549 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v550 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v551 = *v549++;
                    *v550++ = a4 <= v551;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v768 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v769 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v770 = *v768++;
                      if ((double)v770 < (double)a4)
                        v771 = 0.0;
                      else
                        v771 = 1.0;
                      *v769++ = v771;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v228 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v229 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v230 = *v228++;
                    if ((double)v230 < (double)a4)
                      v231 = 0.0;
                    else
                      v231 = 1.0;
                    *v229++ = v231;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v876 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v877 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v878 = *v876++;
                      *v877++ = v878 >= (int)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v336 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v337 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v338 = *v336++;
                    *v337++ = v338 >= (int)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v879 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v880 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v881 = *v879++;
                      *v880++ = v881 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v339 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v340 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v341 = *v339++;
                    *v340++ = v341 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v628 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v629 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v630 = *v628++;
                      if (*(double *)&a4 > (double)v630)
                        v631 = 0.0;
                      else
                        v631 = 1.0;
                      *v629++ = v631;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v88 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v89 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v90 = *v88++;
                    if (*(double *)&a4 > (double)v90)
                      v91 = 0.0;
                    else
                      v91 = 1.0;
                    *v89++ = v91;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
        }
      }
      else if (v42 == 1)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1092 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1093 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1094 = *v1092;
                      v1092 += 8;
                      *v1093++ = v1094 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v552 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v553 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v554 = *v552;
                    v552 += 8;
                    *v553++ = v554 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1095 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v1096 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1097 = *v1095++;
                      *v1096++ = v1097 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v555 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v556 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v557 = *v555++;
                    *v556++ = v557 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v772 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v773 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v774 = *v772++;
                      if ((double)v774 < (double)a4)
                        v775 = 0.0;
                      else
                        v775 = 1.0;
                      *v773++ = v775;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v232 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v233 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v234 = *v232++;
                    if ((double)v234 < (double)a4)
                      v235 = 0.0;
                    else
                      v235 = 1.0;
                    *v233++ = v235;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1098 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v1099 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1100 = *v1098;
                      v1098 += 8;
                      *v1099++ = v1100 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v558 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v559 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v560 = *v558;
                    v558 += 8;
                    *v559++ = v560 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v1101 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v1102 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v1103 = *v1101++;
                      *v1102++ = v1103 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v561 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v562 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v563 = *v561++;
                    *v562++ = v563 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v776 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v777 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v778 = *v776++;
                      if ((double)v778 < (double)a4)
                        v779 = 0.0;
                      else
                        v779 = 1.0;
                      *v777++ = v779;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v236 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v237 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v238 = *v236++;
                    if ((double)v238 < (double)a4)
                      v239 = 0.0;
                    else
                      v239 = 1.0;
                    *v237++ = v239;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v882 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                    v883 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v884 = *v882;
                      v882 += 8;
                      *v883++ = v884 >= (int)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v342 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  v343 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v344 = *v342;
                    v342 += 8;
                    *v343++ = v344 >= (int)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v885 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v886 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v887 = *v885++;
                      *v886++ = v887 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v345 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v346 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v347 = *v345++;
                    *v346++ = v347 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v632 = (unint64_t *)*((_QWORD *)a2 + 2);
                    v633 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v634 = *v632++;
                      if (*(double *)&a4 > (double)v634)
                        v635 = 0.0;
                      else
                        v635 = 1.0;
                      *v633++ = v635;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v92 = (unint64_t *)*((_QWORD *)a2 + 2);
                  v93 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v94 = *v92++;
                    if (*(double *)&a4 > (double)v94)
                      v95 = 0.0;
                    else
                      v95 = 1.0;
                    *v93++ = v95;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
        }
      }
      else if (!v42)
      {
        switch(a3)
        {
          case 2:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v948 = (double *)*((_QWORD *)a2 + 2);
                    v949 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v950 = *v948++;
                      *v949++ = (int)v950 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v408 = (double *)*((_QWORD *)a2 + 2);
                  v409 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v410 = *v408++;
                    *v409++ = (int)v410 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v951 = (double *)*((_QWORD *)a2 + 2);
                    v952 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v953 = *v951++;
                      *v952++ = a4 <= (unint64_t)v953;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v411 = (double *)*((_QWORD *)a2 + 2);
                  v412 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v413 = *v411++;
                    *v412++ = a4 <= (unint64_t)v413;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v676 = (double *)*((_QWORD *)a2 + 2);
                    v677 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v678 = *v676++;
                      if (v678 < (double)a4)
                        v679 = 0.0;
                      else
                        v679 = 1.0;
                      *v677++ = v679;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v136 = (double *)*((_QWORD *)a2 + 2);
                  v137 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v138 = *v136++;
                    if (v138 < (double)a4)
                      v139 = 0.0;
                    else
                      v139 = 1.0;
                    *v137++ = v139;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            break;
          case 1:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v954 = (double *)*((_QWORD *)a2 + 2);
                    v955 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v956 = *v954++;
                      *v955++ = (int)v956 >= a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v414 = (double *)*((_QWORD *)a2 + 2);
                  v415 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v416 = *v414++;
                    *v415++ = (int)v416 >= a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v957 = (double *)*((_QWORD *)a2 + 2);
                    v958 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v959 = *v957++;
                      *v958++ = a4 <= (unint64_t)v959;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v417 = (double *)*((_QWORD *)a2 + 2);
                  v418 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v419 = *v417++;
                    *v418++ = a4 <= (unint64_t)v419;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v680 = (double *)*((_QWORD *)a2 + 2);
                    v681 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v682 = *v680++;
                      if (v682 < (double)a4)
                        v683 = 0.0;
                      else
                        v683 = 1.0;
                      *v681++ = v683;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6)
                {
                  if (v41)
                  {
                    v140 = (double *)*((_QWORD *)a2 + 2);
                    v141 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v142 = *v140++;
                      if (v142 < (double)a4)
                        v143 = 0.0;
                      else
                        v143 = 1.0;
                      *v141++ = v143;
                      --v41;
                    }
                    while (v41);
                  }
                  return a5;
                }
                break;
            }
            break;
          case 0:
            switch(v43)
            {
              case 2:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v810 = (double *)*((_QWORD *)a2 + 2);
                    v811 = (BOOL *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v812 = *v810++;
                      *v811++ = (int)v812 >= (int)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v270 = (double *)*((_QWORD *)a2 + 2);
                  v271 = (BOOL *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v272 = *v270++;
                    *v271++ = (int)v272 >= (int)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 1:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v813 = (double *)*((_QWORD *)a2 + 2);
                    v814 = (_QWORD *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v815 = *v813++;
                      *v814++ = (unint64_t)v815 >= (unint64_t)*(double *)&a4;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v273 = (double *)*((_QWORD *)a2 + 2);
                  v274 = (_QWORD *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v275 = *v273++;
                    *v274++ = (unint64_t)v275 >= (unint64_t)*(double *)&a4;
                    --v41;
                  }
                  while (v41);
                }
                break;
              case 0:
                if (a6 == 1)
                {
                  if (v41)
                  {
                    v584 = (double *)*((_QWORD *)a2 + 2);
                    v585 = (double *)*((_QWORD *)a5 + 2);
                    do
                    {
                      v586 = *v584++;
                      if (v586 < *(double *)&a4)
                        v587 = 0.0;
                      else
                        v587 = 1.0;
                      *v585++ = v587;
                      --v41;
                    }
                    while (v41);
                  }
                }
                else if (!a6 && v41)
                {
                  v44 = (double *)*((_QWORD *)a2 + 2);
                  v45 = (double *)*((_QWORD *)a5 + 2);
                  do
                  {
                    v46 = *v44++;
                    if (v46 < *(double *)&a4)
                      v47 = 0.0;
                    else
                      v47 = 1.0;
                    *v45++ = v47;
                    --v41;
                  }
                  while (v41);
                }
                break;
            }
            return a5;
        }
      }
      return a5;
    default:
      return result;
  }
}

uint64_t agxps_timeseries_select_ttt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (!*(_BYTE *)(a4 + 32)
      && (v7 = *(_QWORD *)(a1 + 8), v7 == *(_QWORD *)(a2 + 8))
      && v7 == *(_QWORD *)(a3 + 8)
      && v7 == *(_QWORD *)(a4 + 8))
    {
      sub_255BC((int *)a1, a2, a3, (int *)a4, *(_DWORD *)a2, *(_DWORD *)a3, a5);
      return a4;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

int *sub_255BC(int *a1, uint64_t a2, uint64_t a3, int *a4, int a5, int a6, double a7)
{
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  _QWORD *v11;
  double *v12;
  uint64_t *v13;
  double *v14;
  uint64_t *v15;
  double *v16;
  _QWORD *v17;
  double *v18;
  double *v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  double *v22;
  double *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  double *v26;
  double *v27;
  unsigned __int8 *v28;
  uint64_t *v29;
  double *v30;
  double *v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t *v37;
  double *v38;
  double *v39;
  unint64_t *v40;
  unint64_t *v41;
  double *v42;
  double *v43;
  double *v44;
  double *v45;
  _BYTE *v46;
  unint64_t *v47;
  _BYTE *v48;
  unint64_t *v49;
  double *v50;
  double *v51;
  double *v52;
  double *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  double *v60;
  double *v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t *v65;
  double *v66;
  double *v67;
  double *v68;
  double *v69;
  double *v70;
  double *v71;
  double *v72;
  double *v73;
  _BYTE *v74;
  unint64_t *v75;
  _BYTE *v76;
  unint64_t *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  double *v84;
  double *v85;
  double *v86;
  double *v87;
  double *v88;
  double *v89;
  _BYTE *v90;
  _QWORD *v91;
  _BYTE *v92;
  _QWORD *v93;
  _BYTE *v94;
  unint64_t *v95;
  _BYTE *v96;
  unint64_t *v97;
  _BYTE *v98;
  unint64_t *v99;
  _BYTE *v100;
  unint64_t *v101;
  _BYTE *v102;
  _QWORD *v103;
  _BYTE *v104;
  _QWORD *v105;
  uint64_t v106;
  double v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v111;
  uint64_t v112;
  double v113;
  double v114;
  unint64_t v115;
  unint64_t v116;
  double v117;
  double v118;
  double v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  double v126;
  double v127;
  double v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  unint64_t v134;
  double v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  unint64_t v142;
  double v143;
  uint64_t v144;
  double v145;
  unint64_t *v146;
  uint64_t v147;
  unint64_t *v149;
  uint64_t v150;
  double v151;
  double *v152;
  uint64_t v153;
  double v154;
  double *v155;
  uint64_t v156;
  int v157;
  double *v158;
  uint64_t v159;
  double *v161;
  uint64_t v162;
  double v163;
  int v164;
  char v165;
  double v166;
  int v167;
  char v168;
  uint64_t v169;
  double v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  double v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  char v180;
  double v181;
  int v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  double v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  double v193;
  int v194;
  double v195;
  int v196;
  char v197;
  char v198;
  double *v199;
  double *v200;
  double *v201;
  uint64_t v202;
  double v203;
  unint64_t v204;
  double v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  double v213;
  int v214;
  char v215;
  char v216;
  uint64_t *v217;
  unsigned __int8 *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  double v229;
  _QWORD *v230;
  double *v231;
  double *v232;
  double *v233;
  uint64_t v234;
  double v235;
  _QWORD *v236;
  uint64_t v237;
  int v238;
  _QWORD *v239;
  uint64_t *v240;
  unsigned __int8 *v241;
  uint64_t *v242;
  uint64_t v243;
  _QWORD *v245;
  double *v246;
  double *v247;
  double *v248;
  double *v249;
  double *v250;
  double *v251;
  unint64_t *v252;
  _BYTE *v253;
  uint64_t *v254;
  unint64_t *v255;
  _BYTE *v256;
  uint64_t *v257;
  unsigned __int8 *v258;
  _BYTE *v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  _BYTE *v262;
  unsigned __int8 *v263;
  unsigned __int8 *v264;
  _BYTE *v265;
  unsigned __int8 *v266;
  unsigned __int8 *v267;
  _BYTE *v268;
  unsigned __int8 *v269;
  double *v270;
  _BYTE *v271;
  unint64_t *v272;
  double *v273;
  _BYTE *v274;
  unint64_t *v275;
  double *v276;
  _BYTE *v277;
  _QWORD *v278;
  double *v279;
  _BYTE *v280;
  _QWORD *v281;
  uint64_t v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  int v290;
  double v291;
  int v292;
  char v293;
  char v294;
  uint64_t v295;
  double v296;
  unint64_t v297;
  double v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  double v305;
  double v306;
  double v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  double v311;
  int v312;
  char v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  double v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  double v323;
  double v324;
  unint64_t v325;
  unint64_t v326;
  double v327;
  double v328;
  double v329;
  uint64_t v330;
  double v331;
  _BYTE *v332;
  uint64_t v333;
  double v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  double *v340;
  double *v341;
  double *v342;
  double *v343;
  double *v344;
  double *v345;
  unsigned __int8 *v346;
  unsigned __int8 *v347;
  _BYTE *v348;
  unsigned __int8 *v349;
  _BYTE *v350;
  unsigned __int8 *v351;
  double *v352;
  unint64_t *v353;
  double *v354;
  double *v355;
  _BYTE *v356;
  uint64_t *v357;
  double *ii;
  double *n;
  _BYTE *v360;
  unint64_t *v361;
  _BYTE *v362;
  _QWORD *v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  unint64_t v373;
  double v374;
  double v375;
  double v376;
  int v377;
  char v378;
  double v379;
  int v380;
  char v381;
  double v382;
  unint64_t v383;
  unint64_t v384;
  double v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  double v389;
  _BYTE *v390;
  double *v391;
  double *v392;
  double *v393;
  _BYTE *v394;
  _BYTE *v395;
  unsigned __int8 *v396;
  _BYTE *v397;
  _BYTE *v398;
  unsigned __int8 *v399;
  double *m;
  _BYTE *v401;
  _QWORD *v402;
  double v403;
  unint64_t v404;
  _BYTE *v405;
  double v406;
  _BYTE *v407;
  double v408;
  unsigned __int8 *v409;
  double v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  double v421;
  double v422;
  uint64_t v423;
  int v424;
  _BYTE *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t *v434;
  unsigned __int8 *v435;
  uint64_t *v436;
  unsigned __int8 *v437;
  uint64_t *v438;
  unsigned __int8 *v439;
  unsigned __int8 *v440;
  _BYTE *v441;
  unsigned __int8 *v442;
  _BYTE *v443;
  unsigned __int8 *v444;
  double *v445;
  unint64_t *v446;
  double *v447;
  double *v448;
  _BYTE *v449;
  uint64_t *v450;
  double *v451;
  double *v452;
  _BYTE *v453;
  unint64_t *v454;
  _BYTE *v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  double v460;
  double v461;
  double v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  double v466;
  unint64_t v467;
  double v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  char v472;
  double v473;
  int v474;
  char v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  double v480;
  unint64_t v481;
  unint64_t v482;
  uint64_t v483;
  int v484;
  _BYTE *v485;
  _QWORD *v486;
  unsigned __int8 *v487;
  _QWORD *v488;
  _BYTE *v489;
  _BYTE *v490;
  unsigned __int8 *v491;
  _BYTE *v492;
  _BYTE *v493;
  unsigned __int8 *v494;
  double *v495;
  _BYTE *v496;
  _QWORD *v497;
  uint64_t v498;
  _BYTE *v500;
  uint64_t v501;
  int v502;
  _BYTE *v503;
  uint64_t v504;
  unsigned __int8 *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unsigned __int8 *v514;
  unsigned __int8 *v515;
  unsigned __int8 *v516;
  unsigned __int8 *v517;
  unsigned __int8 *v518;
  unsigned __int8 *v519;
  unsigned __int8 *v520;
  unsigned __int8 *v521;
  unsigned __int8 *v522;
  unsigned __int8 *v523;
  unsigned __int8 *v524;
  unsigned __int8 *v525;
  _QWORD *v526;
  unint64_t *v527;
  double *v528;
  unint64_t *v529;
  double *v530;
  double *v531;
  _BYTE *v532;
  unint64_t *v533;
  double *v534;
  double *v535;
  _QWORD *v536;
  _QWORD *v537;
  _QWORD *v538;
  double *v539;
  unint64_t *v540;
  unint64_t *v541;
  double *v542;
  double *v543;
  double *v544;
  double *v545;
  _BYTE *v546;
  unint64_t *v547;
  _QWORD *v548;
  _QWORD *v549;
  _QWORD *v550;
  double *v551;
  double *v552;
  double *v553;
  _BYTE *v554;
  _QWORD *v555;
  _BYTE *v556;
  unint64_t *v557;
  _BYTE *v558;
  unint64_t *v559;
  _BYTE *v560;
  _QWORD *v561;
  uint64_t v562;
  _QWORD *v564;
  uint64_t v565;
  int v566;
  int v567;
  unint64_t v568;
  unint64_t v569;
  double v570;
  double v571;
  double v572;
  uint64_t v573;
  int v574;
  int v575;
  double v576;
  double v577;
  unint64_t v578;
  double v579;
  uint64_t v580;
  unint64_t *v582;
  uint64_t v583;
  double *v585;
  uint64_t v586;
  double *v588;
  uint64_t v589;
  int v590;
  int v591;
  char v592;
  double v593;
  int v594;
  char v595;
  uint64_t v596;
  int v597;
  int v598;
  unint64_t v599;
  unint64_t v600;
  double v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  int v605;
  int v606;
  double v607;
  int v608;
  char v609;
  char v610;
  unsigned __int8 *v611;
  unsigned __int8 *v612;
  unsigned __int8 *v613;
  double *v614;
  double *v615;
  double *v616;
  unsigned __int8 *v617;
  _BYTE *v618;
  unsigned __int8 *v619;
  double *v620;
  _BYTE *v621;
  unint64_t *v622;
  uint64_t v623;
  int v624;
  int v625;
  double v626;
  double v627;
  double v628;
  int v629;
  int v630;
  double v631;
  int v632;
  char v633;
  char v634;
  uint64_t v635;
  int v636;
  int v637;
  double v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  int v643;
  int v644;
  double v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  unint64_t v649;
  uint64_t v650;
  _QWORD *v652;
  unsigned __int8 *v653;
  unsigned __int8 *v654;
  unsigned __int8 *v655;
  unint64_t *v656;
  _BYTE *v657;
  uint64_t *v658;
  unsigned __int8 *v659;
  _BYTE *v660;
  unsigned __int8 *v661;
  double *v662;
  _BYTE *v663;
  _QWORD *v664;
  uint64_t v665;
  int v666;
  int v667;
  unint64_t v668;
  unint64_t v669;
  double v670;
  double v671;
  uint64_t v672;
  _BYTE *v674;
  uint64_t v675;
  int v676;
  int v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  _QWORD *v684;
  unsigned __int8 *v685;
  unsigned __int8 *v686;
  unsigned __int8 *v687;
  unsigned __int8 *v688;
  unsigned __int8 *v689;
  unsigned __int8 *v690;
  unsigned __int8 *v691;
  unsigned __int8 *v692;
  _BYTE *v693;
  unsigned __int8 *v694;
  _BYTE *v695;
  unsigned __int8 *v696;
  double *v697;
  unint64_t *v698;
  double *v699;
  double *v700;
  _BYTE *v701;
  uint64_t *v702;
  double *k;
  double *j;
  _BYTE *v705;
  unint64_t *v706;
  _BYTE *v707;
  _QWORD *v708;
  int v709;
  int v710;
  unsigned int v711;
  double v712;
  double v713;
  double v714;
  int v715;
  int v716;
  unsigned int v717;
  double v718;
  unint64_t v719;
  double v720;
  int v721;
  int v722;
  char v723;
  double v724;
  int v725;
  char v726;
  int v727;
  int v728;
  unint64_t v729;
  unsigned int v730;
  double v731;
  unint64_t v732;
  unint64_t v733;
  uint64_t v734;
  _BYTE *v736;
  unsigned __int8 *v737;
  unsigned __int8 *v738;
  unsigned __int8 *v739;
  _BYTE *v740;
  _BYTE *v741;
  unsigned __int8 *v742;
  _BYTE *v743;
  _BYTE *v744;
  unsigned __int8 *v745;
  double *i;
  _BYTE *v747;
  _QWORD *v748;
  _BYTE *v750;
  _BYTE *v752;
  unsigned __int8 *v754;
  int v755;
  int v756;
  uint64_t v757;
  unsigned int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;

  if (a4)
  {
    v7 = *((_QWORD *)a4 + 1);
    if (a1)
      goto LABEL_3;
LABEL_6:
    v8 = 0;
    if (a4)
      goto LABEL_4;
    goto LABEL_7;
  }
  v7 = 0;
  if (!a1)
    goto LABEL_6;
LABEL_3:
  v8 = *a1;
  if (a4)
  {
LABEL_4:
    v9 = *a4;
    goto LABEL_8;
  }
LABEL_7:
  v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v738 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v738 = 0;
                  if (a2)
                    v741 = *(_BYTE **)(a2 + 16);
                  else
                    v741 = 0;
                  if (a3)
                    v744 = *(_BYTE **)(a3 + 16);
                  else
                    v744 = 0;
                  if (a4)
                    v747 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v747 = 0;
                  for (; v7; --v7)
                  {
                    if (*v738++)
                      v752 = v741;
                    else
                      v752 = v744;
                    *v747++ = *v752;
                    ++v744;
                    ++v741;
                  }
                  break;
                case 1:
                  if (a1)
                    v739 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v739 = 0;
                  if (a2)
                    v742 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v742 = 0;
                  if (a3)
                    v745 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v745 = 0;
                  if (a4)
                    v748 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v748 = 0;
                  for (; v7; --v7)
                  {
                    if (*v739++)
                      v754 = v742;
                    else
                      v754 = v745;
                    *v748++ = *v754;
                    ++v745;
                    ++v742;
                  }
                  break;
                case 0:
                  v737 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v740 = a2 ? *(_BYTE **)(a2 + 16) : 0;
                  v743 = a3 ? *(_BYTE **)(a3 + 16) : 0;
                  for (i = a4 ? (double *)*((_QWORD *)a4 + 2) : 0; v7; --v7)
                  {
                    if (*v737++)
                      v750 = v740;
                    else
                      v750 = v743;
                    LOBYTE(a7) = *v750;
                    a7 = (double)*(unint64_t *)&a7;
                    *i++ = a7;
                    ++v743;
                    ++v740;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v689 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v689 = 0;
                  if (a2)
                    v695 = *(_BYTE **)(a2 + 16);
                  else
                    v695 = 0;
                  if (a3)
                    v701 = *(_BYTE **)(a3 + 16);
                  else
                    v701 = 0;
                  if (a4)
                    v707 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v707 = 0;
                  if (v7)
                  {
                    v734 = v7;
                    do
                    {
                      if (*v689++)
                        v736 = v695;
                      else
                        v736 = v701;
                      *v707++ = *v736;
                      v701 += 8;
                      ++v695;
                      --v734;
                    }
                    while (v734);
                  }
                  break;
                case 1:
                  if (a1)
                    v690 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v690 = 0;
                  if (a2)
                    v696 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v696 = 0;
                  if (a3)
                    v702 = *(uint64_t **)(a3 + 16);
                  else
                    v702 = 0;
                  if (a4)
                    v708 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v708 = 0;
                  for (; v7; --v7)
                  {
                    v756 = *v690++;
                    v755 = v756;
                    v758 = *v696++;
                    v757 = v758;
                    v760 = *v702++;
                    v759 = v760;
                    if (v755)
                      v761 = v757;
                    else
                      v761 = v759;
                    *v708++ = v761;
                  }
                  break;
                case 0:
                  v686 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v692 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v698 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  for (j = a4 ? (double *)*((_QWORD *)a4 + 2) : 0; v7; --v7)
                  {
                    v716 = *v686++;
                    v715 = v716;
                    v717 = *v692++;
                    v718 = (double)v717;
                    v719 = *v698++;
                    v720 = (double)v719;
                    if (!v715)
                      v718 = v720;
                    *j++ = v718;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v687 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v687 = 0;
                  if (a2)
                    v693 = *(_BYTE **)(a2 + 16);
                  else
                    v693 = 0;
                  if (a3)
                    v699 = *(double **)(a3 + 16);
                  else
                    v699 = 0;
                  if (a4)
                    v705 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v705 = 0;
                  for (; v7; --v7)
                  {
                    v722 = *v687++;
                    v721 = v722;
                    LOBYTE(v722) = *v693++;
                    v723 = v722;
                    v724 = *v699++;
                    v725 = (int)v724;
                    if (v721)
                      v726 = v723;
                    else
                      v726 = v725;
                    *v705++ = v726;
                  }
                  break;
                case 1:
                  if (a1)
                    v688 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v688 = 0;
                  if (a2)
                    v694 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v694 = 0;
                  if (a3)
                    v700 = *(double **)(a3 + 16);
                  else
                    v700 = 0;
                  if (a4)
                    v706 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v706 = 0;
                  for (; v7; --v7)
                  {
                    v728 = *v688++;
                    v727 = v728;
                    v730 = *v694++;
                    v729 = v730;
                    v731 = *v700++;
                    v732 = (unint64_t)v731;
                    if (v727)
                      v733 = v729;
                    else
                      v733 = v732;
                    *v706++ = v733;
                  }
                  break;
                case 0:
                  v685 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v691 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v697 = a3 ? *(double **)(a3 + 16) : 0;
                  for (k = a4 ? (double *)*((_QWORD *)a4 + 2) : 0; v7; --v7)
                  {
                    v710 = *v685++;
                    v709 = v710;
                    v711 = *v691++;
                    v712 = (double)v711;
                    v713 = *v697++;
                    v714 = v713;
                    if (!v709)
                      v712 = v714;
                    *k++ = v712;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v654 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v654 = 0;
                  if (a2)
                    v657 = *(_BYTE **)(a2 + 16);
                  else
                    v657 = 0;
                  if (a3)
                    v660 = *(_BYTE **)(a3 + 16);
                  else
                    v660 = 0;
                  if (a4)
                    v663 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v663 = 0;
                  if (v7)
                  {
                    v672 = v7;
                    do
                    {
                      if (*v654++)
                        v674 = v657;
                      else
                        v674 = v660;
                      *v663++ = *v674;
                      ++v660;
                      v657 += 8;
                      --v672;
                    }
                    while (v672);
                  }
                  break;
                case 1:
                  if (a1)
                    v655 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v655 = 0;
                  if (a2)
                    v658 = *(uint64_t **)(a2 + 16);
                  else
                    v658 = 0;
                  if (a3)
                    v661 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v661 = 0;
                  if (a4)
                    v664 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v664 = 0;
                  if (v7)
                  {
                    v675 = v7;
                    do
                    {
                      v677 = *v655++;
                      v676 = v677;
                      v679 = *v658++;
                      v678 = v679;
                      LODWORD(v679) = *v661++;
                      v680 = v679;
                      if (v676)
                        v681 = v678;
                      else
                        v681 = v680;
                      *v664++ = v681;
                      --v675;
                    }
                    while (v675);
                  }
                  break;
                case 0:
                  v653 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v656 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v659 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  v662 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v665 = v7;
                    do
                    {
                      v667 = *v653++;
                      v666 = v667;
                      v668 = *v656++;
                      v669 = v668;
                      LODWORD(v668) = *v659++;
                      v670 = (double)v668;
                      v671 = (double)v669;
                      if (!v666)
                        v671 = v670;
                      *v662++ = v671;
                      --v665;
                    }
                    while (v665);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v524 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v524 = 0;
                  if (a2)
                    v536 = *(_QWORD **)(a2 + 16);
                  else
                    v536 = 0;
                  if (a3)
                    v548 = *(_QWORD **)(a3 + 16);
                  else
                    v548 = 0;
                  if (a4)
                    v560 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v560 = 0;
                  if (v7)
                  {
                    v650 = v7;
                    do
                    {
                      if (*v524++)
                        v652 = v536;
                      else
                        v652 = v548;
                      *v560++ = *v652;
                      ++v548;
                      ++v536;
                      --v650;
                    }
                    while (v650);
                  }
                  break;
                case 1:
                  if (a1)
                    v525 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v525 = 0;
                  if (a2)
                    v537 = *(_QWORD **)(a2 + 16);
                  else
                    v537 = 0;
                  if (a3)
                    v549 = *(_QWORD **)(a3 + 16);
                  else
                    v549 = 0;
                  if (a4)
                    v561 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v561 = 0;
                  if (v7)
                  {
                    v682 = v7;
                    do
                    {
                      if (*v525++)
                        v684 = v537;
                      else
                        v684 = v549;
                      *v561++ = *v684;
                      ++v549;
                      ++v537;
                      --v682;
                    }
                    while (v682);
                  }
                  break;
                case 0:
                  v517 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v529 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v541 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v553 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v580 = v7;
                    do
                    {
                      if (*v517++)
                        v582 = v529;
                      else
                        v582 = v541;
                      *v553++ = (double)*v582;
                      ++v541;
                      ++v529;
                      --v580;
                    }
                    while (v580);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v520 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v520 = 0;
                  if (a2)
                    v532 = *(_BYTE **)(a2 + 16);
                  else
                    v532 = 0;
                  if (a3)
                    v544 = *(double **)(a3 + 16);
                  else
                    v544 = 0;
                  if (a4)
                    v556 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v556 = 0;
                  if (v7)
                  {
                    v589 = v7;
                    do
                    {
                      v591 = *v520++;
                      v590 = v591;
                      LOBYTE(v591) = *v532;
                      v532 += 8;
                      v592 = v591;
                      v593 = *v544++;
                      v594 = (int)v593;
                      if (v590)
                        v595 = v592;
                      else
                        v595 = v594;
                      *v556++ = v595;
                      --v589;
                    }
                    while (v589);
                  }
                  break;
                case 1:
                  if (a1)
                    v521 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v521 = 0;
                  if (a2)
                    v533 = *(unint64_t **)(a2 + 16);
                  else
                    v533 = 0;
                  if (a3)
                    v545 = *(double **)(a3 + 16);
                  else
                    v545 = 0;
                  if (a4)
                    v557 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v557 = 0;
                  if (v7)
                  {
                    v596 = v7;
                    do
                    {
                      v598 = *v521++;
                      v597 = v598;
                      v600 = *v533++;
                      v599 = v600;
                      v601 = *v545++;
                      v602 = (unint64_t)v601;
                      if (v597)
                        v603 = v599;
                      else
                        v603 = v602;
                      *v557++ = v603;
                      --v596;
                    }
                    while (v596);
                  }
                  break;
                case 0:
                  v515 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v527 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v539 = a3 ? *(double **)(a3 + 16) : 0;
                  v551 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v565 = v7;
                    do
                    {
                      v567 = *v515++;
                      v566 = v567;
                      v568 = *v527++;
                      v569 = v568;
                      v570 = *v539++;
                      v571 = v570;
                      v572 = (double)v569;
                      if (!v566)
                        v572 = v571;
                      *v551++ = v572;
                      --v565;
                    }
                    while (v565);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v612 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v612 = 0;
                  if (a2)
                    v615 = *(double **)(a2 + 16);
                  else
                    v615 = 0;
                  if (a3)
                    v618 = *(_BYTE **)(a3 + 16);
                  else
                    v618 = 0;
                  if (a4)
                    v621 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v621 = 0;
                  for (; v7; --v7)
                  {
                    v630 = *v612++;
                    v629 = v630;
                    v631 = *v615++;
                    v632 = (int)v631;
                    LOBYTE(v631) = *v618++;
                    v633 = LOBYTE(v631);
                    if (v629)
                      v634 = v632;
                    else
                      v634 = v633;
                    *v621++ = v634;
                  }
                  break;
                case 1:
                  if (a1)
                    v613 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v613 = 0;
                  if (a2)
                    v616 = *(double **)(a2 + 16);
                  else
                    v616 = 0;
                  if (a3)
                    v619 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v619 = 0;
                  if (a4)
                    v622 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v622 = 0;
                  if (v7)
                  {
                    v635 = v7;
                    do
                    {
                      v637 = *v613++;
                      v636 = v637;
                      v638 = *v616++;
                      v639 = (unint64_t)v638;
                      LODWORD(v638) = *v619++;
                      v640 = LODWORD(v638);
                      if (v636)
                        v641 = v639;
                      else
                        v641 = v640;
                      *v622++ = v641;
                      --v635;
                    }
                    while (v635);
                  }
                  break;
                case 0:
                  v611 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v614 = a2 ? *(double **)(a2 + 16) : 0;
                  v617 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  v620 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v623 = v7;
                    do
                    {
                      v625 = *v611++;
                      v624 = v625;
                      v626 = *v614++;
                      v627 = v626;
                      LODWORD(v626) = *v617++;
                      v628 = (double)LODWORD(v626);
                      if (!v624)
                        v627 = v628;
                      *v620++ = v627;
                      --v623;
                    }
                    while (v623);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v522 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v522 = 0;
                  if (a2)
                    v534 = *(double **)(a2 + 16);
                  else
                    v534 = 0;
                  if (a3)
                    v546 = *(_BYTE **)(a3 + 16);
                  else
                    v546 = 0;
                  if (a4)
                    v558 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v558 = 0;
                  if (v7)
                  {
                    v604 = v7;
                    do
                    {
                      v606 = *v522++;
                      v605 = v606;
                      v607 = *v534++;
                      v608 = (int)v607;
                      LOBYTE(v607) = *v546;
                      v546 += 8;
                      v609 = LOBYTE(v607);
                      if (v605)
                        v610 = v608;
                      else
                        v610 = v609;
                      *v558++ = v610;
                      --v604;
                    }
                    while (v604);
                  }
                  break;
                case 1:
                  if (a1)
                    v523 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v523 = 0;
                  if (a2)
                    v535 = *(double **)(a2 + 16);
                  else
                    v535 = 0;
                  if (a3)
                    v547 = *(unint64_t **)(a3 + 16);
                  else
                    v547 = 0;
                  if (a4)
                    v559 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v559 = 0;
                  if (v7)
                  {
                    v642 = v7;
                    do
                    {
                      v644 = *v523++;
                      v643 = v644;
                      v645 = *v535++;
                      v646 = (unint64_t)v645;
                      v648 = *v547++;
                      v647 = v648;
                      if (v643)
                        v649 = v646;
                      else
                        v649 = v647;
                      *v559++ = v649;
                      --v642;
                    }
                    while (v642);
                  }
                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v528 = a2 ? *(double **)(a2 + 16) : 0;
                  v540 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v552 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v573 = v7;
                    do
                    {
                      v575 = *v516++;
                      v574 = v575;
                      v576 = *v528++;
                      v577 = v576;
                      v578 = *v540++;
                      v579 = (double)v578;
                      if (!v574)
                        v577 = v579;
                      *v552++ = v577;
                      --v573;
                    }
                    while (v573);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v518 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v518 = 0;
                  if (a2)
                    v530 = *(double **)(a2 + 16);
                  else
                    v530 = 0;
                  if (a3)
                    v542 = *(double **)(a3 + 16);
                  else
                    v542 = 0;
                  if (a4)
                    v554 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v554 = 0;
                  if (v7)
                  {
                    v583 = v7;
                    do
                    {
                      if (*v518++)
                        v585 = v530;
                      else
                        v585 = v542;
                      *v554++ = (int)*v585;
                      ++v542;
                      ++v530;
                      --v583;
                    }
                    while (v583);
                  }
                  break;
                case 1:
                  if (a1)
                    v519 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v519 = 0;
                  if (a2)
                    v531 = *(double **)(a2 + 16);
                  else
                    v531 = 0;
                  if (a3)
                    v543 = *(double **)(a3 + 16);
                  else
                    v543 = 0;
                  if (a4)
                    v555 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v555 = 0;
                  if (v7)
                  {
                    v586 = v7;
                    do
                    {
                      if (*v519++)
                        v588 = v531;
                      else
                        v588 = v543;
                      *v555++ = (unint64_t)*v588;
                      ++v543;
                      ++v531;
                      --v586;
                    }
                    while (v586);
                  }
                  break;
                case 0:
                  v514 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v526 = a2 ? *(_QWORD **)(a2 + 16) : 0;
                  v538 = a3 ? *(_QWORD **)(a3 + 16) : 0;
                  v550 = a4 ? (_QWORD *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v562 = v7;
                    do
                    {
                      if (*v514++)
                        v564 = v526;
                      else
                        v564 = v538;
                      *v550++ = *v564;
                      ++v538;
                      ++v526;
                      --v562;
                    }
                    while (v562);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v487 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v487 = 0;
                  if (a2)
                    v490 = *(_BYTE **)(a2 + 16);
                  else
                    v490 = 0;
                  if (a3)
                    v493 = *(_BYTE **)(a3 + 16);
                  else
                    v493 = 0;
                  if (a4)
                    v496 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v496 = 0;
                  if (v7)
                  {
                    v501 = v7;
                    do
                    {
                      v502 = *v487;
                      v487 += 8;
                      if (v502)
                        v503 = v490;
                      else
                        v503 = v493;
                      *v496++ = *v503;
                      ++v493;
                      ++v490;
                      --v501;
                    }
                    while (v501);
                  }
                  break;
                case 1:
                  if (a1)
                    v488 = (_QWORD *)*((_QWORD *)a1 + 2);
                  else
                    v488 = 0;
                  if (a2)
                    v491 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v491 = 0;
                  if (a3)
                    v494 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v494 = 0;
                  if (a4)
                    v497 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v497 = 0;
                  if (v7)
                  {
                    v504 = v7;
                    do
                    {
                      if (*v488++)
                        v506 = v491;
                      else
                        v506 = v494;
                      *v497++ = *v506;
                      ++v494;
                      ++v491;
                      --v504;
                    }
                    while (v504);
                  }
                  break;
                case 0:
                  v486 = a1 ? (_QWORD *)*((_QWORD *)a1 + 2) : 0;
                  v489 = a2 ? *(_BYTE **)(a2 + 16) : 0;
                  v492 = a3 ? *(_BYTE **)(a3 + 16) : 0;
                  v495 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v498 = v7;
                    do
                    {
                      if (*v486++)
                        v500 = v489;
                      else
                        v500 = v492;
                      LOBYTE(a7) = *v500;
                      a7 = (double)*(unint64_t *)&a7;
                      *v495++ = a7;
                      ++v492;
                      ++v489;
                      --v498;
                    }
                    while (v498);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v437 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v437 = 0;
                  if (a2)
                    v443 = *(_BYTE **)(a2 + 16);
                  else
                    v443 = 0;
                  if (a3)
                    v449 = *(_BYTE **)(a3 + 16);
                  else
                    v449 = 0;
                  if (a4)
                    v455 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v455 = 0;
                  if (v7)
                  {
                    v483 = v7;
                    do
                    {
                      v484 = *v437;
                      v437 += 8;
                      if (v484)
                        v485 = v443;
                      else
                        v485 = v449;
                      *v455++ = *v485;
                      v449 += 8;
                      ++v443;
                      --v483;
                    }
                    while (v483);
                  }
                  break;
                case 1:
                  if (a1)
                    v438 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v438 = 0;
                  if (a2)
                    v444 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v444 = 0;
                  if (a3)
                    v450 = *(uint64_t **)(a3 + 16);
                  else
                    v450 = 0;
                  if (a4)
                    v456 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v456 = 0;
                  if (v7)
                  {
                    v507 = v7;
                    do
                    {
                      v509 = *v438++;
                      v508 = v509;
                      LODWORD(v509) = *v444++;
                      v510 = v509;
                      v512 = *v450++;
                      v511 = v512;
                      if (v508)
                        v513 = v510;
                      else
                        v513 = v511;
                      *v456++ = v513;
                      --v507;
                    }
                    while (v507);
                  }
                  break;
                case 0:
                  v434 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v440 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v446 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v452 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v463 = v7;
                    do
                    {
                      v465 = *v434++;
                      v464 = v465;
                      LODWORD(v465) = *v440++;
                      v466 = (double)v465;
                      v467 = *v446++;
                      v468 = (double)v467;
                      if (!v464)
                        v466 = v468;
                      *v452++ = v466;
                      --v463;
                    }
                    while (v463);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v435 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v435 = 0;
                  if (a2)
                    v441 = *(_BYTE **)(a2 + 16);
                  else
                    v441 = 0;
                  if (a3)
                    v447 = *(double **)(a3 + 16);
                  else
                    v447 = 0;
                  if (a4)
                    v453 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v453 = 0;
                  if (v7)
                  {
                    v469 = v7;
                    do
                    {
                      v471 = *v435;
                      v435 += 8;
                      v470 = v471;
                      LOBYTE(v471) = *v441++;
                      v472 = v471;
                      v473 = *v447++;
                      v474 = (int)v473;
                      if (v470)
                        v475 = v472;
                      else
                        v475 = v474;
                      *v453++ = v475;
                      --v469;
                    }
                    while (v469);
                  }
                  break;
                case 1:
                  if (a1)
                    v436 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v436 = 0;
                  if (a2)
                    v442 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v442 = 0;
                  if (a3)
                    v448 = *(double **)(a3 + 16);
                  else
                    v448 = 0;
                  if (a4)
                    v454 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v454 = 0;
                  if (v7)
                  {
                    v476 = v7;
                    do
                    {
                      v478 = *v436++;
                      v477 = v478;
                      LODWORD(v478) = *v442++;
                      v479 = v478;
                      v480 = *v448++;
                      v481 = (unint64_t)v480;
                      if (v477)
                        v482 = v479;
                      else
                        v482 = v481;
                      *v454++ = v482;
                      --v476;
                    }
                    while (v476);
                  }
                  break;
                case 0:
                  v433 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v439 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v445 = a3 ? *(double **)(a3 + 16) : 0;
                  v451 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v457 = v7;
                    do
                    {
                      v459 = *v433++;
                      v458 = v459;
                      LODWORD(v459) = *v439++;
                      v460 = (double)v459;
                      v461 = *v445++;
                      v462 = v461;
                      if (!v458)
                        v460 = v462;
                      *v451++ = v460;
                      --v457;
                    }
                    while (v457);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v241 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v241 = 0;
                  if (a2)
                    v256 = *(_BYTE **)(a2 + 16);
                  else
                    v256 = 0;
                  if (a3)
                    v268 = *(_BYTE **)(a3 + 16);
                  else
                    v268 = 0;
                  if (a4)
                    v280 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v280 = 0;
                  if (v7)
                  {
                    v423 = v7;
                    do
                    {
                      v424 = *v241;
                      v241 += 8;
                      if (v424)
                        v425 = v256;
                      else
                        v425 = v268;
                      *v280++ = *v425;
                      ++v268;
                      v256 += 8;
                      --v423;
                    }
                    while (v423);
                  }
                  break;
                case 1:
                  if (a1)
                    v242 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v242 = 0;
                  if (a2)
                    v257 = *(uint64_t **)(a2 + 16);
                  else
                    v257 = 0;
                  if (a3)
                    v269 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v269 = 0;
                  if (a4)
                    v281 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v281 = 0;
                  if (v7)
                  {
                    v426 = v7;
                    do
                    {
                      v428 = *v242++;
                      v427 = v428;
                      v430 = *v257++;
                      v429 = v430;
                      LODWORD(v430) = *v269++;
                      v431 = v430;
                      if (v427)
                        v432 = v429;
                      else
                        v432 = v431;
                      *v281++ = v432;
                      --v426;
                    }
                    while (v426);
                  }
                  break;
                case 0:
                  v240 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v255 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v267 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  v279 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v416 = v7;
                    do
                    {
                      v418 = *v240++;
                      v417 = v418;
                      v419 = *v255++;
                      v420 = v419;
                      LODWORD(v419) = *v267++;
                      v421 = (double)v419;
                      v422 = (double)v420;
                      if (!v417)
                        v422 = v421;
                      *v279++ = v422;
                      --v416;
                    }
                    while (v416);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v32 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v32 = 0;
                  if (a2)
                    v56 = *(_QWORD **)(a2 + 16);
                  else
                    v56 = 0;
                  if (a3)
                    v80 = *(_QWORD **)(a3 + 16);
                  else
                    v80 = 0;
                  if (a4)
                    v104 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v104 = 0;
                  if (v7)
                  {
                    v237 = v7;
                    do
                    {
                      v238 = *v32;
                      v32 += 8;
                      if (v238)
                        v239 = v56;
                      else
                        v239 = v80;
                      *v104++ = *v239;
                      ++v80;
                      ++v56;
                      --v237;
                    }
                    while (v237);
                  }
                  break;
                case 1:
                  if (a1)
                    v33 = (_QWORD *)*((_QWORD *)a1 + 2);
                  else
                    v33 = 0;
                  if (a2)
                    v57 = *(_QWORD **)(a2 + 16);
                  else
                    v57 = 0;
                  if (a3)
                    v81 = *(_QWORD **)(a3 + 16);
                  else
                    v81 = 0;
                  if (a4)
                    v105 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v105 = 0;
                  if (v7)
                  {
                    v243 = v7;
                    do
                    {
                      if (*v33++)
                        v245 = v57;
                      else
                        v245 = v81;
                      *v105++ = *v245;
                      ++v81;
                      ++v57;
                      --v243;
                    }
                    while (v243);
                  }
                  break;
                case 0:
                  v17 = a1 ? (_QWORD *)*((_QWORD *)a1 + 2) : 0;
                  v41 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v65 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v89 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v147 = v7;
                    do
                    {
                      if (*v17++)
                        v149 = v41;
                      else
                        v149 = v65;
                      *v89++ = (double)*v149;
                      ++v65;
                      ++v41;
                      --v147;
                    }
                    while (v147);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v24 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v24 = 0;
                  if (a2)
                    v48 = *(_BYTE **)(a2 + 16);
                  else
                    v48 = 0;
                  if (a3)
                    v72 = *(double **)(a3 + 16);
                  else
                    v72 = 0;
                  if (a4)
                    v96 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v96 = 0;
                  if (v7)
                  {
                    v177 = v7;
                    do
                    {
                      v179 = *v24;
                      v24 += 8;
                      v178 = v179;
                      LOBYTE(v179) = *v48;
                      v48 += 8;
                      v180 = v179;
                      v181 = *v72++;
                      v182 = (int)v181;
                      if (v178)
                        v183 = v180;
                      else
                        v183 = v182;
                      *v96++ = v183;
                      --v177;
                    }
                    while (v177);
                  }
                  break;
                case 1:
                  if (a1)
                    v25 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v25 = 0;
                  if (a2)
                    v49 = *(unint64_t **)(a2 + 16);
                  else
                    v49 = 0;
                  if (a3)
                    v73 = *(double **)(a3 + 16);
                  else
                    v73 = 0;
                  if (a4)
                    v97 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v97 = 0;
                  if (v7)
                  {
                    v184 = v7;
                    do
                    {
                      v186 = *v25++;
                      v185 = v186;
                      v188 = *v49++;
                      v187 = v188;
                      v189 = *v73++;
                      v190 = (unint64_t)v189;
                      if (v185)
                        v191 = v187;
                      else
                        v191 = v190;
                      *v97++ = v191;
                      --v184;
                    }
                    while (v184);
                  }
                  break;
                case 0:
                  v13 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v37 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v61 = a3 ? *(double **)(a3 + 16) : 0;
                  v85 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v121 = v7;
                    do
                    {
                      v123 = *v13++;
                      v122 = v123;
                      v124 = *v37++;
                      v125 = v124;
                      v126 = *v61++;
                      v127 = v126;
                      v128 = (double)v125;
                      if (!v122)
                        v128 = v127;
                      *v85++ = v128;
                      --v121;
                    }
                    while (v121);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v218 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v218 = 0;
                  if (a2)
                    v250 = *(double **)(a2 + 16);
                  else
                    v250 = 0;
                  if (a3)
                    v262 = *(_BYTE **)(a3 + 16);
                  else
                    v262 = 0;
                  if (a4)
                    v274 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v274 = 0;
                  if (v7)
                  {
                    v308 = v7;
                    do
                    {
                      v310 = *v218;
                      v218 += 8;
                      v309 = v310;
                      v311 = *v250++;
                      v312 = (int)v311;
                      LOBYTE(v311) = *v262++;
                      v313 = LOBYTE(v311);
                      if (v309)
                        v314 = v312;
                      else
                        v314 = v313;
                      *v274++ = v314;
                      --v308;
                    }
                    while (v308);
                  }
                  break;
                case 1:
                  if (a1)
                    v219 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v219 = 0;
                  if (a2)
                    v251 = *(double **)(a2 + 16);
                  else
                    v251 = 0;
                  if (a3)
                    v263 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v263 = 0;
                  if (a4)
                    v275 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v275 = 0;
                  if (v7)
                  {
                    v315 = v7;
                    do
                    {
                      v317 = *v219++;
                      v316 = v317;
                      v318 = *v251++;
                      v319 = (unint64_t)v318;
                      LODWORD(v318) = *v263++;
                      v320 = LODWORD(v318);
                      if (v316)
                        v321 = v319;
                      else
                        v321 = v320;
                      *v275++ = v321;
                      --v315;
                    }
                    while (v315);
                  }
                  break;
                case 0:
                  v217 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v249 = a2 ? *(double **)(a2 + 16) : 0;
                  v261 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  v273 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v302 = v7;
                    do
                    {
                      v304 = *v217++;
                      v303 = v304;
                      v305 = *v249++;
                      v306 = v305;
                      LODWORD(v305) = *v261++;
                      v307 = (double)LODWORD(v305);
                      if (!v303)
                        v306 = v307;
                      *v273++ = v306;
                      --v302;
                    }
                    while (v302);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v28 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v28 = 0;
                  if (a2)
                    v52 = *(double **)(a2 + 16);
                  else
                    v52 = 0;
                  if (a3)
                    v76 = *(_BYTE **)(a3 + 16);
                  else
                    v76 = 0;
                  if (a4)
                    v100 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v100 = 0;
                  if (v7)
                  {
                    v210 = v7;
                    do
                    {
                      v212 = *v28;
                      v28 += 8;
                      v211 = v212;
                      v213 = *v52++;
                      v214 = (int)v213;
                      LOBYTE(v213) = *v76;
                      v76 += 8;
                      v215 = LOBYTE(v213);
                      if (v211)
                        v216 = v214;
                      else
                        v216 = v215;
                      *v100++ = v216;
                      --v210;
                    }
                    while (v210);
                  }
                  break;
                case 1:
                  if (a1)
                    v29 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v29 = 0;
                  if (a2)
                    v53 = *(double **)(a2 + 16);
                  else
                    v53 = 0;
                  if (a3)
                    v77 = *(unint64_t **)(a3 + 16);
                  else
                    v77 = 0;
                  if (a4)
                    v101 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v101 = 0;
                  if (v7)
                  {
                    v220 = v7;
                    do
                    {
                      v222 = *v29++;
                      v221 = v222;
                      v223 = *v53++;
                      v224 = (unint64_t)v223;
                      v226 = *v77++;
                      v225 = v226;
                      if (v221)
                        v227 = v224;
                      else
                        v227 = v225;
                      *v101++ = v227;
                      --v220;
                    }
                    while (v220);
                  }
                  break;
                case 0:
                  v15 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v39 = a2 ? *(double **)(a2 + 16) : 0;
                  v63 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v87 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v137 = v7;
                    do
                    {
                      v139 = *v15++;
                      v138 = v139;
                      v140 = *v39++;
                      v141 = v140;
                      v142 = *v63++;
                      v143 = (double)v142;
                      if (!v138)
                        v141 = v143;
                      *v87++ = v141;
                      --v137;
                    }
                    while (v137);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v20 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v20 = 0;
                  if (a2)
                    v44 = *(double **)(a2 + 16);
                  else
                    v44 = 0;
                  if (a3)
                    v68 = *(double **)(a3 + 16);
                  else
                    v68 = 0;
                  if (a4)
                    v92 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v92 = 0;
                  if (v7)
                  {
                    v156 = v7;
                    do
                    {
                      v157 = *v20;
                      v20 += 8;
                      if (v157)
                        v158 = v44;
                      else
                        v158 = v68;
                      *v92++ = (int)*v158;
                      ++v68;
                      ++v44;
                      --v156;
                    }
                    while (v156);
                  }
                  break;
                case 1:
                  if (a1)
                    v21 = (_QWORD *)*((_QWORD *)a1 + 2);
                  else
                    v21 = 0;
                  if (a2)
                    v45 = *(double **)(a2 + 16);
                  else
                    v45 = 0;
                  if (a3)
                    v69 = *(double **)(a3 + 16);
                  else
                    v69 = 0;
                  if (a4)
                    v93 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v93 = 0;
                  if (v7)
                  {
                    v159 = v7;
                    do
                    {
                      if (*v21++)
                        v161 = v45;
                      else
                        v161 = v69;
                      *v93++ = (unint64_t)*v161;
                      ++v69;
                      ++v45;
                      --v159;
                    }
                    while (v159);
                  }
                  break;
                case 0:
                  v11 = a1 ? (_QWORD *)*((_QWORD *)a1 + 2) : 0;
                  v35 = a2 ? *(_QWORD **)(a2 + 16) : 0;
                  v59 = a3 ? *(_QWORD **)(a3 + 16) : 0;
                  v83 = a4 ? (_QWORD *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v109 = v7;
                    do
                    {
                      if (*v11++)
                        v111 = v35;
                      else
                        v111 = v59;
                      *v83++ = *v111;
                      ++v59;
                      ++v35;
                      --v109;
                    }
                    while (v109);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 0:
      switch(a5)
      {
        case 2:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v392 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v392 = 0;
                  if (a2)
                    v395 = *(_BYTE **)(a2 + 16);
                  else
                    v395 = 0;
                  if (a3)
                    v398 = *(_BYTE **)(a3 + 16);
                  else
                    v398 = 0;
                  if (a4)
                    v401 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v401 = 0;
                  for (; v7; --v7)
                  {
                    v406 = *v392++;
                    if ((int)v406)
                      v407 = v395;
                    else
                      v407 = v398;
                    *v401++ = *v407;
                    ++v398;
                    ++v395;
                  }
                  break;
                case 1:
                  if (a1)
                    v393 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v393 = 0;
                  if (a2)
                    v396 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v396 = 0;
                  if (a3)
                    v399 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v399 = 0;
                  if (a4)
                    v402 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v402 = 0;
                  for (; v7; --v7)
                  {
                    v408 = *v393++;
                    if ((unint64_t)v408)
                      v409 = v396;
                    else
                      v409 = v399;
                    *v402++ = *v409;
                    ++v399;
                    ++v396;
                  }
                  break;
                case 0:
                  v391 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v394 = a2 ? *(_BYTE **)(a2 + 16) : 0;
                  v397 = a3 ? *(_BYTE **)(a3 + 16) : 0;
                  for (m = a4 ? (double *)*((_QWORD *)a4 + 2) : 0; v7; --v7)
                  {
                    v403 = *v391++;
                    v404 = *(_QWORD *)&v403;
                    if (v403 == 0.0)
                      v405 = v397;
                    else
                      v405 = v394;
                    LOBYTE(v404) = *v405;
                    *m++ = (double)v404;
                    ++v397;
                    ++v394;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v344 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v344 = 0;
                  if (a2)
                    v350 = *(_BYTE **)(a2 + 16);
                  else
                    v350 = 0;
                  if (a3)
                    v356 = *(_BYTE **)(a3 + 16);
                  else
                    v356 = 0;
                  if (a4)
                    v362 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v362 = 0;
                  if (v7)
                  {
                    v388 = v7;
                    do
                    {
                      v389 = *v344++;
                      if ((int)v389)
                        v390 = v350;
                      else
                        v390 = v356;
                      *v362++ = *v390;
                      v356 += 8;
                      ++v350;
                      --v388;
                    }
                    while (v388);
                  }
                  break;
                case 1:
                  if (a1)
                    v345 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v345 = 0;
                  if (a2)
                    v351 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v351 = 0;
                  if (a3)
                    v357 = *(uint64_t **)(a3 + 16);
                  else
                    v357 = 0;
                  if (a4)
                    v363 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v363 = 0;
                  for (; v7; --v7)
                  {
                    v410 = *v345++;
                    v411 = (unint64_t)v410;
                    LODWORD(v410) = *v351++;
                    v412 = LODWORD(v410);
                    v414 = *v357++;
                    v413 = v414;
                    if (v411)
                      v415 = v412;
                    else
                      v415 = v413;
                    *v363++ = v415;
                  }
                  break;
                case 0:
                  v341 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v347 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v353 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  for (n = a4 ? (double *)*((_QWORD *)a4 + 2) : 0; v7; --v7)
                  {
                    v370 = *v341++;
                    v371 = v370;
                    LODWORD(v370) = *v347++;
                    v372 = (double)LODWORD(v370);
                    v373 = *v353++;
                    v374 = (double)v373;
                    if (v371 == 0.0)
                      v375 = v374;
                    else
                      v375 = v372;
                    *n++ = v375;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v342 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v342 = 0;
                  if (a2)
                    v348 = *(_BYTE **)(a2 + 16);
                  else
                    v348 = 0;
                  if (a3)
                    v354 = *(double **)(a3 + 16);
                  else
                    v354 = 0;
                  if (a4)
                    v360 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v360 = 0;
                  for (; v7; --v7)
                  {
                    v376 = *v342++;
                    v377 = (int)v376;
                    LOBYTE(v376) = *v348++;
                    v378 = LOBYTE(v376);
                    v379 = *v354++;
                    v380 = (int)v379;
                    if (v377)
                      v381 = v378;
                    else
                      v381 = v380;
                    *v360++ = v381;
                  }
                  break;
                case 1:
                  if (a1)
                    v343 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v343 = 0;
                  if (a2)
                    v349 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v349 = 0;
                  if (a3)
                    v355 = *(double **)(a3 + 16);
                  else
                    v355 = 0;
                  if (a4)
                    v361 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v361 = 0;
                  for (; v7; --v7)
                  {
                    v382 = *v343++;
                    v383 = (unint64_t)v382;
                    LODWORD(v382) = *v349++;
                    v384 = LODWORD(v382);
                    v385 = *v355++;
                    v386 = (unint64_t)v385;
                    if (v383)
                      v387 = v384;
                    else
                      v387 = v386;
                    *v361++ = v387;
                  }
                  break;
                case 0:
                  v340 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v346 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v352 = a3 ? *(double **)(a3 + 16) : 0;
                  for (ii = a4 ? (double *)*((_QWORD *)a4 + 2) : 0; v7; --v7)
                  {
                    v364 = *v340++;
                    v365 = v364;
                    LODWORD(v364) = *v346++;
                    v366 = (double)LODWORD(v364);
                    v367 = *v352++;
                    v368 = v367;
                    if (v365 == 0.0)
                      v369 = v368;
                    else
                      v369 = v366;
                    *ii++ = v369;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v232 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v232 = 0;
                  if (a2)
                    v253 = *(_BYTE **)(a2 + 16);
                  else
                    v253 = 0;
                  if (a3)
                    v265 = *(_BYTE **)(a3 + 16);
                  else
                    v265 = 0;
                  if (a4)
                    v277 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v277 = 0;
                  if (v7)
                  {
                    v330 = v7;
                    do
                    {
                      v331 = *v232++;
                      if ((int)v331)
                        v332 = v253;
                      else
                        v332 = v265;
                      *v277++ = *v332;
                      ++v265;
                      v253 += 8;
                      --v330;
                    }
                    while (v330);
                  }
                  break;
                case 1:
                  if (a1)
                    v233 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v233 = 0;
                  if (a2)
                    v254 = *(uint64_t **)(a2 + 16);
                  else
                    v254 = 0;
                  if (a3)
                    v266 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v266 = 0;
                  if (a4)
                    v278 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v278 = 0;
                  if (v7)
                  {
                    v333 = v7;
                    do
                    {
                      v334 = *v233++;
                      v335 = (unint64_t)v334;
                      v337 = *v254++;
                      v336 = v337;
                      LODWORD(v337) = *v266++;
                      v338 = v337;
                      if (v335)
                        v339 = v336;
                      else
                        v339 = v338;
                      *v278++ = v339;
                      --v333;
                    }
                    while (v333);
                  }
                  break;
                case 0:
                  v231 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v252 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v264 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  v276 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v322 = v7;
                    do
                    {
                      v323 = *v231++;
                      v324 = v323;
                      v325 = *v252++;
                      v326 = v325;
                      LODWORD(v325) = *v264++;
                      v327 = (double)v325;
                      v328 = (double)v326;
                      if (v324 == 0.0)
                        v329 = v327;
                      else
                        v329 = v328;
                      *v276++ = v329;
                      --v322;
                    }
                    while (v322);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v30 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v30 = 0;
                  if (a2)
                    v54 = *(_QWORD **)(a2 + 16);
                  else
                    v54 = 0;
                  if (a3)
                    v78 = *(_QWORD **)(a3 + 16);
                  else
                    v78 = 0;
                  if (a4)
                    v102 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v102 = 0;
                  if (v7)
                  {
                    v228 = v7;
                    do
                    {
                      v229 = *v30++;
                      if ((int)v229)
                        v230 = v54;
                      else
                        v230 = v78;
                      *v102++ = *v230;
                      ++v78;
                      ++v54;
                      --v228;
                    }
                    while (v228);
                  }
                  break;
                case 1:
                  if (a1)
                    v31 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v31 = 0;
                  if (a2)
                    v55 = *(_QWORD **)(a2 + 16);
                  else
                    v55 = 0;
                  if (a3)
                    v79 = *(_QWORD **)(a3 + 16);
                  else
                    v79 = 0;
                  if (a4)
                    v103 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v103 = 0;
                  if (v7)
                  {
                    v234 = v7;
                    do
                    {
                      v235 = *v31++;
                      if ((unint64_t)v235)
                        v236 = v55;
                      else
                        v236 = v79;
                      *v103++ = *v236;
                      ++v79;
                      ++v55;
                      --v234;
                    }
                    while (v234);
                  }
                  break;
                case 0:
                  v16 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v40 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v64 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v88 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v144 = v7;
                    do
                    {
                      v145 = *v16++;
                      if (v145 == 0.0)
                        v146 = v64;
                      else
                        v146 = v40;
                      *v88++ = (double)*v146;
                      ++v64;
                      ++v40;
                      --v144;
                    }
                    while (v144);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v22 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v22 = 0;
                  if (a2)
                    v46 = *(_BYTE **)(a2 + 16);
                  else
                    v46 = 0;
                  if (a3)
                    v70 = *(double **)(a3 + 16);
                  else
                    v70 = 0;
                  if (a4)
                    v94 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v94 = 0;
                  if (v7)
                  {
                    v162 = v7;
                    do
                    {
                      v163 = *v22++;
                      v164 = (int)v163;
                      LOBYTE(v163) = *v46;
                      v46 += 8;
                      v165 = LOBYTE(v163);
                      v166 = *v70++;
                      v167 = (int)v166;
                      if (v164)
                        v168 = v165;
                      else
                        v168 = v167;
                      *v94++ = v168;
                      --v162;
                    }
                    while (v162);
                  }
                  break;
                case 1:
                  if (a1)
                    v23 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v23 = 0;
                  if (a2)
                    v47 = *(unint64_t **)(a2 + 16);
                  else
                    v47 = 0;
                  if (a3)
                    v71 = *(double **)(a3 + 16);
                  else
                    v71 = 0;
                  if (a4)
                    v95 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v95 = 0;
                  if (v7)
                  {
                    v169 = v7;
                    do
                    {
                      v170 = *v23++;
                      v171 = (unint64_t)v170;
                      v173 = *v47++;
                      v172 = v173;
                      v174 = *v71++;
                      v175 = (unint64_t)v174;
                      if (v171)
                        v176 = v172;
                      else
                        v176 = v175;
                      *v95++ = v176;
                      --v169;
                    }
                    while (v169);
                  }
                  break;
                case 0:
                  v12 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v36 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v60 = a3 ? *(double **)(a3 + 16) : 0;
                  v84 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v112 = v7;
                    do
                    {
                      v113 = *v12++;
                      v114 = v113;
                      v115 = *v36++;
                      v116 = v115;
                      v117 = *v60++;
                      v118 = v117;
                      v119 = (double)v116;
                      if (v114 == 0.0)
                        v120 = v118;
                      else
                        v120 = v119;
                      *v84++ = v120;
                      --v112;
                    }
                    while (v112);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a6)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v200 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v200 = 0;
                  if (a2)
                    v247 = *(double **)(a2 + 16);
                  else
                    v247 = 0;
                  if (a3)
                    v259 = *(_BYTE **)(a3 + 16);
                  else
                    v259 = 0;
                  if (a4)
                    v271 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v271 = 0;
                  for (; v7; --v7)
                  {
                    v289 = *v200++;
                    v290 = (int)v289;
                    v291 = *v247++;
                    v292 = (int)v291;
                    LOBYTE(v291) = *v259++;
                    v293 = LOBYTE(v291);
                    if (v290)
                      v294 = v292;
                    else
                      v294 = v293;
                    *v271++ = v294;
                  }
                  break;
                case 1:
                  if (a1)
                    v201 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v201 = 0;
                  if (a2)
                    v248 = *(double **)(a2 + 16);
                  else
                    v248 = 0;
                  if (a3)
                    v260 = *(unsigned __int8 **)(a3 + 16);
                  else
                    v260 = 0;
                  if (a4)
                    v272 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v272 = 0;
                  if (v7)
                  {
                    v295 = v7;
                    do
                    {
                      v296 = *v201++;
                      v297 = (unint64_t)v296;
                      v298 = *v248++;
                      v299 = (unint64_t)v298;
                      LODWORD(v298) = *v260++;
                      v300 = LODWORD(v298);
                      if (v297)
                        v301 = v299;
                      else
                        v301 = v300;
                      *v272++ = v301;
                      --v295;
                    }
                    while (v295);
                  }
                  break;
                case 0:
                  v199 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v246 = a2 ? *(double **)(a2 + 16) : 0;
                  v258 = a3 ? *(unsigned __int8 **)(a3 + 16) : 0;
                  v270 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v282 = v7;
                    do
                    {
                      v283 = *v199++;
                      v284 = v283;
                      v285 = *v246++;
                      v286 = v285;
                      LODWORD(v285) = *v258++;
                      v287 = (double)LODWORD(v285);
                      if (v284 == 0.0)
                        v288 = v287;
                      else
                        v288 = v286;
                      *v270++ = v288;
                      --v282;
                    }
                    while (v282);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v26 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v26 = 0;
                  if (a2)
                    v50 = *(double **)(a2 + 16);
                  else
                    v50 = 0;
                  if (a3)
                    v74 = *(_BYTE **)(a3 + 16);
                  else
                    v74 = 0;
                  if (a4)
                    v98 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v98 = 0;
                  if (v7)
                  {
                    v192 = v7;
                    do
                    {
                      v193 = *v26++;
                      v194 = (int)v193;
                      v195 = *v50++;
                      v196 = (int)v195;
                      LOBYTE(v195) = *v74;
                      v74 += 8;
                      v197 = LOBYTE(v195);
                      if (v194)
                        v198 = v196;
                      else
                        v198 = v197;
                      *v98++ = v198;
                      --v192;
                    }
                    while (v192);
                  }
                  break;
                case 1:
                  if (a1)
                    v27 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v27 = 0;
                  if (a2)
                    v51 = *(double **)(a2 + 16);
                  else
                    v51 = 0;
                  if (a3)
                    v75 = *(unint64_t **)(a3 + 16);
                  else
                    v75 = 0;
                  if (a4)
                    v99 = (unint64_t *)*((_QWORD *)a4 + 2);
                  else
                    v99 = 0;
                  if (v7)
                  {
                    v202 = v7;
                    do
                    {
                      v203 = *v27++;
                      v204 = (unint64_t)v203;
                      v205 = *v51++;
                      v206 = (unint64_t)v205;
                      v208 = *v75++;
                      v207 = v208;
                      if (v204)
                        v209 = v206;
                      else
                        v209 = v207;
                      *v99++ = v209;
                      --v202;
                    }
                    while (v202);
                  }
                  break;
                case 0:
                  v14 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v38 = a2 ? *(double **)(a2 + 16) : 0;
                  v62 = a3 ? *(unint64_t **)(a3 + 16) : 0;
                  v86 = a4 ? (double *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v129 = v7;
                    do
                    {
                      v130 = *v14++;
                      v131 = v130;
                      v132 = *v38++;
                      v133 = v132;
                      v134 = *v62++;
                      v135 = (double)v134;
                      if (v131 == 0.0)
                        v136 = v135;
                      else
                        v136 = v133;
                      *v86++ = v136;
                      --v129;
                    }
                    while (v129);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v18 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v18 = 0;
                  if (a2)
                    v42 = *(double **)(a2 + 16);
                  else
                    v42 = 0;
                  if (a3)
                    v66 = *(double **)(a3 + 16);
                  else
                    v66 = 0;
                  if (a4)
                    v90 = (_BYTE *)*((_QWORD *)a4 + 2);
                  else
                    v90 = 0;
                  if (v7)
                  {
                    v150 = v7;
                    do
                    {
                      v151 = *v18++;
                      if ((int)v151)
                        v152 = v42;
                      else
                        v152 = v66;
                      *v90++ = (int)*v152;
                      ++v66;
                      ++v42;
                      --v150;
                    }
                    while (v150);
                  }
                  break;
                case 1:
                  if (a1)
                    v19 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v19 = 0;
                  if (a2)
                    v43 = *(double **)(a2 + 16);
                  else
                    v43 = 0;
                  if (a3)
                    v67 = *(double **)(a3 + 16);
                  else
                    v67 = 0;
                  if (a4)
                    v91 = (_QWORD *)*((_QWORD *)a4 + 2);
                  else
                    v91 = 0;
                  if (v7)
                  {
                    v153 = v7;
                    do
                    {
                      v154 = *v19++;
                      if ((unint64_t)v154)
                        v155 = v43;
                      else
                        v155 = v67;
                      *v91++ = (unint64_t)*v155;
                      ++v67;
                      ++v43;
                      --v153;
                    }
                    while (v153);
                  }
                  break;
                case 0:
                  v10 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v34 = a2 ? *(_QWORD **)(a2 + 16) : 0;
                  v58 = a3 ? *(_QWORD **)(a3 + 16) : 0;
                  v82 = a4 ? (_QWORD *)*((_QWORD *)a4 + 2) : 0;
                  if (v7)
                  {
                    v106 = v7;
                    do
                    {
                      v107 = *v10++;
                      if (v107 == 0.0)
                        v108 = v58;
                      else
                        v108 = v34;
                      *v82++ = *v108;
                      ++v58;
                      ++v34;
                      --v106;
                    }
                    while (v106);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  return a4;
}

uint64_t agxps_timeseries_select_tst(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  if (a1 && a4 && a5)
  {
    if (!*(_BYTE *)(a5 + 32) && (v7 = *(_QWORD *)(a1 + 8), v7 == *(_QWORD *)(a4 + 8)) && v7 == *(_QWORD *)(a5 + 8))
    {
      sub_27D54((int *)a1, a2, a3, a4, (int *)a5, a2, *(_DWORD *)a4);
      return a5;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

int *sub_27D54(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, int *a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  uint64_t *v11;
  double *v12;
  uint64_t *v13;
  double *v14;
  uint64_t *v15;
  double *v16;
  uint64_t *v17;
  double *v18;
  double *v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  double *v22;
  double *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  double *v26;
  double *v27;
  unsigned __int8 *v28;
  uint64_t *v29;
  double *v30;
  double *v31;
  unsigned __int8 *v32;
  uint64_t *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *v41;
  double *v42;
  double *v43;
  double *v44;
  double *v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  _BYTE *v50;
  unint64_t *v51;
  _BYTE *v52;
  unint64_t *v53;
  uint64_t *v54;
  unint64_t *v55;
  uint64_t *v56;
  unint64_t *v57;
  double *i8;
  double *v59;
  double *i5;
  double *v61;
  double *i7;
  double *v63;
  double *i4;
  double *v65;
  _BYTE *v66;
  _QWORD *v67;
  _BYTE *v68;
  _QWORD *v69;
  _BYTE *v70;
  unint64_t *v71;
  _BYTE *v72;
  unint64_t *v73;
  _BYTE *v74;
  unint64_t *v75;
  _BYTE *v76;
  unint64_t *v77;
  _BYTE *v78;
  unint64_t *v79;
  _BYTE *v80;
  unint64_t *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  unint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  double v111;
  double v112;
  double v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  double v122;
  int v123;
  double v124;
  double v125;
  double v126;
  unint64_t v127;
  double v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  int v141;
  double v142;
  int v143;
  char v144;
  double v145;
  unint64_t v146;
  double v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  double v153;
  int v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  double v163;
  int v164;
  char v165;
  char v166;
  double *v167;
  double *v168;
  double *v169;
  double v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  char v178;
  char v179;
  uint64_t *v180;
  unsigned __int8 *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  double v190;
  int v191;
  char v192;
  uint64_t v193;
  char v194;
  double *v195;
  double *v196;
  double *v197;
  double v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  char v206;
  uint64_t v207;
  char v208;
  uint64_t *v209;
  unsigned __int8 *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  _BYTE *v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  _BYTE *v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  _BYTE *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  _BYTE *v228;
  unsigned __int8 *v229;
  double *i6;
  _BYTE *v231;
  unint64_t *v232;
  double *v233;
  _BYTE *v234;
  unint64_t *v235;
  double *i3;
  _BYTE *v237;
  unint64_t *v238;
  double *v239;
  _BYTE *v240;
  unint64_t *v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  int v247;
  char v248;
  char v249;
  double v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  char v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  double v268;
  double v269;
  double v270;
  double v271;
  uint64_t v272;
  double v273;
  int v274;
  char v275;
  char v276;
  double *v277;
  double *v278;
  double *v279;
  double *v280;
  double *v281;
  double *v282;
  double v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  double v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  char v294;
  char v295;
  uint64_t *v296;
  uint64_t *v297;
  unsigned __int8 *v298;
  uint64_t *v299;
  unsigned __int8 *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  double *v307;
  unint64_t *v308;
  double *v309;
  double *v310;
  uint64_t *v311;
  uint64_t *v312;
  double *v313;
  unint64_t *v314;
  double *v315;
  double *v316;
  uint64_t *v317;
  uint64_t *v318;
  double *i2;
  double *i1;
  _BYTE *v321;
  unint64_t *v322;
  _BYTE *v323;
  _QWORD *v324;
  double *v325;
  double *v326;
  _BYTE *v327;
  unint64_t *v328;
  _BYTE *v329;
  _QWORD *v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  unint64_t v338;
  double v339;
  double v340;
  double v341;
  int v342;
  double v343;
  int v344;
  char v345;
  double v346;
  unint64_t v347;
  double v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  double v352;
  int v353;
  char v354;
  uint64_t v355;
  char v356;
  double *v357;
  double *v358;
  double *v359;
  double v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  double v368;
  double v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  double v374;
  uint64_t v375;
  uint64_t v376;
  unsigned int v377;
  double v378;
  int v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  double v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  char v390;
  uint64_t v391;
  char v392;
  uint64_t *v393;
  unsigned __int8 *v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _BYTE *v402;
  _BYTE *v403;
  unsigned __int8 *v404;
  _BYTE *v405;
  _BYTE *v406;
  unsigned __int8 *v407;
  double *nn;
  _BYTE *v409;
  _QWORD *v410;
  double *v411;
  _BYTE *v412;
  _QWORD *v413;
  double v414;
  double v415;
  unsigned __int8 v416;
  double v417;
  int v418;
  char v419;
  char v420;
  double v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned __int8 v428;
  unsigned __int8 v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  char v433;
  char v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned __int8 *v440;
  unsigned __int8 *v441;
  unsigned __int8 *v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  unsigned __int8 *v446;
  unsigned __int8 *v447;
  unsigned __int8 *v448;
  unsigned __int8 *v449;
  unsigned __int8 *v450;
  unsigned __int8 *v451;
  double *v452;
  double *v453;
  unint64_t *v454;
  unint64_t *v455;
  double *v456;
  double *v457;
  double *v458;
  double *v459;
  _BYTE *v460;
  unint64_t *v461;
  uint64_t *v462;
  unint64_t *v463;
  double *mm;
  double *ii;
  double *kk;
  double *n;
  _BYTE *v468;
  _QWORD *v469;
  _BYTE *v470;
  unint64_t *v471;
  _BYTE *v472;
  unint64_t *v473;
  _BYTE *v474;
  unint64_t *v475;
  int v476;
  int v477;
  double v478;
  double v479;
  int v480;
  int v481;
  double v482;
  double v483;
  int v484;
  int v485;
  unint64_t v486;
  double v487;
  int v488;
  int v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  int v493;
  int v494;
  double v495;
  double v496;
  int v497;
  int v498;
  double v499;
  double v500;
  int v501;
  int v502;
  double v503;
  int v504;
  char v505;
  int v506;
  int v507;
  double v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  int v512;
  int v513;
  char v514;
  char v515;
  unsigned __int8 *v516;
  unsigned __int8 *v517;
  unsigned __int8 *v518;
  unsigned __int8 *v519;
  _BYTE *v520;
  unsigned __int8 *v521;
  double *jj;
  _BYTE *v523;
  unint64_t *v524;
  int v525;
  int v526;
  unsigned int v527;
  double v528;
  int v529;
  int v530;
  char v531;
  char v532;
  int v533;
  int v534;
  unint64_t v535;
  unsigned int v536;
  unint64_t v537;
  int v538;
  int v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  int v544;
  int v545;
  char v546;
  uint64_t v547;
  char v548;
  unsigned __int8 *v549;
  unsigned __int8 *v550;
  unsigned __int8 *v551;
  unsigned __int8 *v552;
  _BYTE *v553;
  unsigned __int8 *v554;
  double *m;
  _BYTE *v556;
  unint64_t *v557;
  int v558;
  int v559;
  unsigned int v560;
  double v561;
  uint64_t v562;
  int v563;
  int v564;
  char v565;
  char v566;
  unsigned __int8 *v567;
  unsigned __int8 *v568;
  unsigned __int8 *v569;
  unsigned __int8 *v570;
  unsigned __int8 *v571;
  unsigned __int8 *v572;
  int v573;
  int v574;
  unint64_t v575;
  unsigned int v576;
  unint64_t v577;
  double *v578;
  unint64_t *v579;
  double *v580;
  double *v581;
  uint64_t *v582;
  uint64_t *v583;
  double *k;
  double *j;
  _BYTE *v586;
  unint64_t *v587;
  _BYTE *v588;
  _QWORD *v589;
  int v590;
  int v591;
  double v592;
  double v593;
  int v594;
  int v595;
  unint64_t v596;
  double v597;
  int v598;
  int v599;
  double v600;
  int v601;
  char v602;
  int v603;
  int v604;
  double v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  int v609;
  int v610;
  char v611;
  uint64_t v612;
  char v613;
  unsigned __int8 *v614;
  unsigned __int8 *v615;
  unsigned __int8 *v616;
  int v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  _BYTE *v622;
  _BYTE *v623;
  unsigned __int8 *v624;
  double *i;
  _BYTE *v626;
  _QWORD *v627;
  int v628;
  int v629;
  unsigned __int8 v630;
  unsigned __int8 v631;
  int v632;
  int v633;
  char v634;
  char v635;
  int v636;
  int v637;
  uint64_t v638;
  unsigned int v639;
  uint64_t v640;
  int v641;
  int v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;

  if (a5)
  {
    v7 = *((_QWORD *)a5 + 1);
    if (a1)
      goto LABEL_3;
LABEL_6:
    v8 = 0;
    if (a5)
      goto LABEL_4;
    goto LABEL_7;
  }
  v7 = 0;
  if (!a1)
    goto LABEL_6;
LABEL_3:
  v8 = *a1;
  if (a5)
  {
LABEL_4:
    v9 = *a5;
    goto LABEL_8;
  }
LABEL_7:
  v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v615 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v615 = 0;
                  if (a4)
                    v623 = *(_BYTE **)(a4 + 16);
                  else
                    v623 = 0;
                  if (a5)
                    v626 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v626 = 0;
                  for (; v7; --v7)
                  {
                    v633 = *v615++;
                    v632 = v633;
                    LOBYTE(v633) = *v623++;
                    v634 = v633;
                    if (v632)
                      v635 = a3;
                    else
                      v635 = v634;
                    *v626++ = v635;
                  }
                  break;
                case 1:
                  if (a1)
                    v616 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v616 = 0;
                  if (a4)
                    v624 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v624 = 0;
                  if (a5)
                    v627 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v627 = 0;
                  for (; v7; --v7)
                  {
                    v637 = *v616++;
                    v636 = v637;
                    v639 = *v624++;
                    v638 = v639;
                    if (v636)
                      v640 = a3;
                    else
                      v640 = v638;
                    *v627++ = v640;
                  }
                  break;
                case 0:
                  v614 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v622 = a4 ? *(_BYTE **)(a4 + 16) : 0;
                  for (i = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v629 = *v614++;
                    v628 = v629;
                    LOBYTE(v629) = *v622++;
                    v630 = v629;
                    if (v628)
                      v631 = a3;
                    else
                      v631 = v630;
                    *i++ = (double)v631;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v571 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v571 = 0;
                  if (a4)
                    v582 = *(uint64_t **)(a4 + 16);
                  else
                    v582 = 0;
                  if (a5)
                    v588 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v588 = 0;
                  if (v7)
                  {
                    v608 = v7;
                    do
                    {
                      v610 = *v571++;
                      v609 = v610;
                      v612 = *v582++;
                      v611 = v612;
                      if (v609)
                        v613 = a3;
                      else
                        v613 = v611;
                      *v588++ = v613;
                      --v608;
                    }
                    while (v608);
                  }
                  break;
                case 1:
                  if (a1)
                    v572 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v572 = 0;
                  if (a4)
                    v583 = *(uint64_t **)(a4 + 16);
                  else
                    v583 = 0;
                  if (a5)
                    v589 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v589 = 0;
                  for (; v7; --v7)
                  {
                    v618 = *v572++;
                    v617 = v618;
                    v620 = *v583++;
                    v619 = v620;
                    if (v617)
                      v621 = a3;
                    else
                      v621 = v619;
                    *v589++ = v621;
                  }
                  break;
                case 0:
                  v568 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v579 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (j = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v595 = *v568++;
                    v594 = v595;
                    v596 = *v579++;
                    v597 = (double)v596;
                    if (v594)
                      v597 = (double)a3;
                    *j++ = v597;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v569 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v569 = 0;
                  if (a4)
                    v580 = *(double **)(a4 + 16);
                  else
                    v580 = 0;
                  if (a5)
                    v586 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v586 = 0;
                  for (; v7; --v7)
                  {
                    v599 = *v569++;
                    v598 = v599;
                    v600 = *v580++;
                    v601 = (int)v600;
                    if (v598)
                      v602 = a3;
                    else
                      v602 = v601;
                    *v586++ = v602;
                  }
                  break;
                case 1:
                  if (a1)
                    v570 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v570 = 0;
                  if (a4)
                    v581 = *(double **)(a4 + 16);
                  else
                    v581 = 0;
                  if (a5)
                    v587 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v587 = 0;
                  for (; v7; --v7)
                  {
                    v604 = *v570++;
                    v603 = v604;
                    v605 = *v581++;
                    v606 = (unint64_t)v605;
                    if (v603)
                      v607 = a3;
                    else
                      v607 = v606;
                    *v587++ = v607;
                  }
                  break;
                case 0:
                  v567 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v578 = a4 ? *(double **)(a4 + 16) : 0;
                  for (k = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v591 = *v567++;
                    v590 = v591;
                    v592 = *v578++;
                    v593 = v592;
                    if (v590)
                      v593 = (double)a3;
                    *k++ = v593;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v550 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v550 = 0;
                  if (a4)
                    v553 = *(_BYTE **)(a4 + 16);
                  else
                    v553 = 0;
                  if (a5)
                    v556 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v556 = 0;
                  if (v7)
                  {
                    v562 = v7;
                    do
                    {
                      v564 = *v550++;
                      v563 = v564;
                      LOBYTE(v564) = *v553++;
                      v565 = v564;
                      if (v563)
                        v566 = a3;
                      else
                        v566 = v565;
                      *v556++ = v566;
                      --v562;
                    }
                    while (v562);
                  }
                  break;
                case 1:
                  if (a1)
                    v551 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v551 = 0;
                  if (a4)
                    v554 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v554 = 0;
                  if (a5)
                    v557 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v557 = 0;
                  for (; v7; --v7)
                  {
                    v574 = *v551++;
                    v573 = v574;
                    v576 = *v554++;
                    v575 = v576;
                    if (v573)
                      v577 = a3;
                    else
                      v577 = v575;
                    *v557++ = v577;
                  }
                  break;
                case 0:
                  v549 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v552 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (m = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v559 = *v549++;
                    v558 = v559;
                    v560 = *v552++;
                    v561 = (double)v560;
                    if (v558)
                      v561 = (double)a3;
                    *m++ = v561;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v450 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v450 = 0;
                  if (a4)
                    v462 = *(uint64_t **)(a4 + 16);
                  else
                    v462 = 0;
                  if (a5)
                    v474 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v474 = 0;
                  if (v7)
                  {
                    v543 = v7;
                    do
                    {
                      v545 = *v450++;
                      v544 = v545;
                      v547 = *v462++;
                      v546 = v547;
                      if (v544)
                        v548 = a3;
                      else
                        v548 = v546;
                      *v474++ = v548;
                      --v543;
                    }
                    while (v543);
                  }
                  break;
                case 1:
                  if (a1)
                    v451 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v451 = 0;
                  if (a4)
                    v463 = *(unint64_t **)(a4 + 16);
                  else
                    v463 = 0;
                  if (a5)
                    v475 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v475 = 0;
                  for (; v7; --v7)
                  {
                    v642 = *v451++;
                    v641 = v642;
                    v644 = *v463++;
                    v643 = v644;
                    if (v641)
                      v645 = a3;
                    else
                      v645 = v643;
                    *v475++ = v645;
                  }
                  break;
                case 0:
                  v443 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v455 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (n = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v489 = *v443++;
                    v488 = v489;
                    v491 = *v455++;
                    v490 = v491;
                    if (v488)
                      v492 = a3;
                    else
                      v492 = v490;
                    *n++ = (double)v492;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v446 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v446 = 0;
                  if (a4)
                    v458 = *(double **)(a4 + 16);
                  else
                    v458 = 0;
                  if (a5)
                    v470 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v470 = 0;
                  for (; v7; --v7)
                  {
                    v502 = *v446++;
                    v501 = v502;
                    v503 = *v458++;
                    v504 = (int)v503;
                    if (v501)
                      v505 = a3;
                    else
                      v505 = v504;
                    *v470++ = v505;
                  }
                  break;
                case 1:
                  if (a1)
                    v447 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v447 = 0;
                  if (a4)
                    v459 = *(double **)(a4 + 16);
                  else
                    v459 = 0;
                  if (a5)
                    v471 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v471 = 0;
                  for (; v7; --v7)
                  {
                    v507 = *v447++;
                    v506 = v507;
                    v508 = *v459++;
                    v509 = (unint64_t)v508;
                    if (v506)
                      v510 = a3;
                    else
                      v510 = v509;
                    *v471++ = v510;
                  }
                  break;
                case 0:
                  v441 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v453 = a4 ? *(double **)(a4 + 16) : 0;
                  for (ii = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v481 = *v441++;
                    v480 = v481;
                    v482 = *v453++;
                    v483 = v482;
                    if (v480)
                      v483 = (double)a3;
                    *ii++ = v483;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v517 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v517 = 0;
                  if (a4)
                    v520 = *(_BYTE **)(a4 + 16);
                  else
                    v520 = 0;
                  if (a5)
                    v523 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v523 = 0;
                  for (; v7; --v7)
                  {
                    v530 = *v517++;
                    v529 = v530;
                    LOBYTE(v530) = *v520++;
                    v531 = v530;
                    if (v529)
                      v532 = (int)*(double *)&a3;
                    else
                      v532 = v531;
                    *v523++ = v532;
                  }
                  break;
                case 1:
                  if (a1)
                    v518 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v518 = 0;
                  if (a4)
                    v521 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v521 = 0;
                  if (a5)
                    v524 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v524 = 0;
                  for (; v7; --v7)
                  {
                    v534 = *v518++;
                    v533 = v534;
                    v536 = *v521++;
                    v535 = v536;
                    if (v533)
                      v537 = (unint64_t)*(double *)&a3;
                    else
                      v537 = v535;
                    *v524++ = v537;
                  }
                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v519 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (jj = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v526 = *v516++;
                    v525 = v526;
                    v527 = *v519++;
                    v528 = (double)v527;
                    if (v525)
                      v528 = *(double *)&a3;
                    *jj++ = v528;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v448 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v448 = 0;
                  if (a4)
                    v460 = *(_BYTE **)(a4 + 16);
                  else
                    v460 = 0;
                  if (a5)
                    v472 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v472 = 0;
                  if (v7)
                  {
                    v511 = v7;
                    do
                    {
                      v513 = *v448++;
                      v512 = v513;
                      LOBYTE(v513) = *v460;
                      v460 += 8;
                      v514 = v513;
                      if (v512)
                        v515 = (int)*(double *)&a3;
                      else
                        v515 = v514;
                      *v472++ = v515;
                      --v511;
                    }
                    while (v511);
                  }
                  break;
                case 1:
                  if (a1)
                    v449 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v449 = 0;
                  if (a4)
                    v461 = *(unint64_t **)(a4 + 16);
                  else
                    v461 = 0;
                  if (a5)
                    v473 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v473 = 0;
                  for (; v7; --v7)
                  {
                    v539 = *v449++;
                    v538 = v539;
                    v541 = *v461++;
                    v540 = v541;
                    if (v538)
                      v542 = (unint64_t)*(double *)&a3;
                    else
                      v542 = v540;
                    *v473++ = v542;
                  }
                  break;
                case 0:
                  v442 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v454 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (kk = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v485 = *v442++;
                    v484 = v485;
                    v486 = *v454++;
                    v487 = (double)v486;
                    if (v484)
                      v487 = *(double *)&a3;
                    *kk++ = v487;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v444 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v444 = 0;
                  if (a4)
                    v456 = *(double **)(a4 + 16);
                  else
                    v456 = 0;
                  if (a5)
                    v468 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v468 = 0;
                  for (; v7; --v7)
                  {
                    v494 = *v444++;
                    v493 = v494;
                    v495 = *v456++;
                    v496 = v495;
                    if (v493)
                      v496 = *(double *)&a3;
                    *v468++ = (int)v496;
                  }
                  break;
                case 1:
                  if (a1)
                    v445 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v445 = 0;
                  if (a4)
                    v457 = *(double **)(a4 + 16);
                  else
                    v457 = 0;
                  if (a5)
                    v469 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v469 = 0;
                  for (; v7; --v7)
                  {
                    v498 = *v445++;
                    v497 = v498;
                    v499 = *v457++;
                    v500 = v499;
                    if (v497)
                      v500 = *(double *)&a3;
                    *v469++ = (unint64_t)v500;
                  }
                  break;
                case 0:
                  v440 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v452 = a4 ? *(double **)(a4 + 16) : 0;
                  for (mm = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v477 = *v440++;
                    v476 = v477;
                    v478 = *v452++;
                    v479 = v478;
                    if (v476)
                      v479 = *(double *)&a3;
                    *mm++ = v479;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v394 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v394 = 0;
                  if (a4)
                    v406 = *(_BYTE **)(a4 + 16);
                  else
                    v406 = 0;
                  if (a5)
                    v412 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v412 = 0;
                  if (v7)
                  {
                    v430 = v7;
                    do
                    {
                      v432 = *v394;
                      v394 += 8;
                      v431 = v432;
                      LOBYTE(v432) = *v406++;
                      v433 = v432;
                      if (v431)
                        v434 = a3;
                      else
                        v434 = v433;
                      *v412++ = v434;
                      --v430;
                    }
                    while (v430);
                  }
                  break;
                case 1:
                  if (a1)
                    v395 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v395 = 0;
                  if (a4)
                    v407 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v407 = 0;
                  if (a5)
                    v413 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v413 = 0;
                  if (v7)
                  {
                    v435 = v7;
                    do
                    {
                      v437 = *v395++;
                      v436 = v437;
                      LODWORD(v437) = *v407++;
                      v438 = v437;
                      if (v436)
                        v439 = a3;
                      else
                        v439 = v438;
                      *v413++ = v439;
                      --v435;
                    }
                    while (v435);
                  }
                  break;
                case 0:
                  v393 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v405 = a4 ? *(_BYTE **)(a4 + 16) : 0;
                  v411 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v425 = v7;
                    do
                    {
                      v427 = *v393++;
                      v426 = v427;
                      LOBYTE(v427) = *v405++;
                      v428 = v427;
                      if (v426)
                        v429 = a3;
                      else
                        v429 = v428;
                      *v411++ = (double)v429;
                      --v425;
                    }
                    while (v425);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v300 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v300 = 0;
                  if (a4)
                    v317 = *(uint64_t **)(a4 + 16);
                  else
                    v317 = 0;
                  if (a5)
                    v329 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v329 = 0;
                  if (v7)
                  {
                    v387 = v7;
                    do
                    {
                      v389 = *v300;
                      v300 += 8;
                      v388 = v389;
                      v391 = *v317++;
                      v390 = v391;
                      if (v388)
                        v392 = a3;
                      else
                        v392 = v390;
                      *v329++ = v392;
                      --v387;
                    }
                    while (v387);
                  }
                  break;
                case 1:
                  if (a1)
                    v301 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v301 = 0;
                  if (a4)
                    v318 = *(uint64_t **)(a4 + 16);
                  else
                    v318 = 0;
                  if (a5)
                    v330 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v330 = 0;
                  if (v7)
                  {
                    v396 = v7;
                    do
                    {
                      v398 = *v301++;
                      v397 = v398;
                      v400 = *v318++;
                      v399 = v400;
                      if (v397)
                        v401 = a3;
                      else
                        v401 = v399;
                      *v330++ = v401;
                      --v396;
                    }
                    while (v396);
                  }
                  break;
                case 0:
                  v297 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v314 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  v326 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v370 = v7;
                    do
                    {
                      v372 = *v297++;
                      v371 = v372;
                      v373 = *v314++;
                      v374 = (double)v373;
                      if (v371)
                        v374 = (double)a3;
                      *v326++ = v374;
                      --v370;
                    }
                    while (v370);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v298 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v298 = 0;
                  if (a4)
                    v315 = *(double **)(a4 + 16);
                  else
                    v315 = 0;
                  if (a5)
                    v327 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v327 = 0;
                  if (v7)
                  {
                    v375 = v7;
                    do
                    {
                      v377 = *v298;
                      v298 += 8;
                      v376 = v377;
                      v378 = *v315++;
                      v379 = (int)v378;
                      if (v376)
                        v380 = a3;
                      else
                        v380 = v379;
                      *v327++ = v380;
                      --v375;
                    }
                    while (v375);
                  }
                  break;
                case 1:
                  if (a1)
                    v299 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v299 = 0;
                  if (a4)
                    v316 = *(double **)(a4 + 16);
                  else
                    v316 = 0;
                  if (a5)
                    v328 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v328 = 0;
                  if (v7)
                  {
                    v381 = v7;
                    do
                    {
                      v383 = *v299++;
                      v382 = v383;
                      v384 = *v316++;
                      v385 = (unint64_t)v384;
                      if (v382)
                        v386 = a3;
                      else
                        v386 = v385;
                      *v328++ = v386;
                      --v381;
                    }
                    while (v381);
                  }
                  break;
                case 0:
                  v296 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v313 = a4 ? *(double **)(a4 + 16) : 0;
                  v325 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v365 = v7;
                    do
                    {
                      v367 = *v296++;
                      v366 = v367;
                      v368 = *v313++;
                      v369 = v368;
                      if (v366)
                        v369 = (double)a3;
                      *v325++ = v369;
                      --v365;
                    }
                    while (v365);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v210 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v210 = 0;
                  if (a4)
                    v228 = *(_BYTE **)(a4 + 16);
                  else
                    v228 = 0;
                  if (a5)
                    v240 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v240 = 0;
                  if (v7)
                  {
                    v291 = v7;
                    do
                    {
                      v293 = *v210;
                      v210 += 8;
                      v292 = v293;
                      LOBYTE(v293) = *v228++;
                      v294 = v293;
                      if (v292)
                        v295 = a3;
                      else
                        v295 = v294;
                      *v240++ = v295;
                      --v291;
                    }
                    while (v291);
                  }
                  break;
                case 1:
                  if (a1)
                    v211 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v211 = 0;
                  if (a4)
                    v229 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v229 = 0;
                  if (a5)
                    v241 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v241 = 0;
                  if (v7)
                  {
                    v302 = v7;
                    do
                    {
                      v304 = *v211++;
                      v303 = v304;
                      LODWORD(v304) = *v229++;
                      v305 = v304;
                      if (v303)
                        v306 = a3;
                      else
                        v306 = v305;
                      *v241++ = v306;
                      --v302;
                    }
                    while (v302);
                  }
                  break;
                case 0:
                  v209 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v227 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  v239 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v287 = v7;
                    do
                    {
                      v289 = *v209++;
                      v288 = v289;
                      LODWORD(v289) = *v227++;
                      v290 = (double)v289;
                      if (v288)
                        v290 = (double)a3;
                      *v239++ = v290;
                      --v287;
                    }
                    while (v287);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v32 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v32 = 0;
                  if (a4)
                    v56 = *(uint64_t **)(a4 + 16);
                  else
                    v56 = 0;
                  if (a5)
                    v80 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v80 = 0;
                  if (v7)
                  {
                    v203 = v7;
                    do
                    {
                      v205 = *v32;
                      v32 += 8;
                      v204 = v205;
                      v207 = *v56++;
                      v206 = v207;
                      if (v204)
                        v208 = a3;
                      else
                        v208 = v206;
                      *v80++ = v208;
                      --v203;
                    }
                    while (v203);
                  }
                  break;
                case 1:
                  if (a1)
                    v33 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v33 = 0;
                  if (a4)
                    v57 = *(unint64_t **)(a4 + 16);
                  else
                    v57 = 0;
                  if (a5)
                    v81 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v81 = 0;
                  if (v7)
                  {
                    v212 = v7;
                    do
                    {
                      v214 = *v33++;
                      v213 = v214;
                      v216 = *v57++;
                      v215 = v216;
                      if (v213)
                        v217 = a3;
                      else
                        v217 = v215;
                      *v81++ = v217;
                      --v212;
                    }
                    while (v212);
                  }
                  break;
                case 0:
                  v17 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v41 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  v65 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v116 = v7;
                    do
                    {
                      v118 = *v17++;
                      v117 = v118;
                      v120 = *v41++;
                      v119 = v120;
                      if (v117)
                        v121 = a3;
                      else
                        v121 = v119;
                      *v65++ = (double)v121;
                      --v116;
                    }
                    while (v116);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v24 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v24 = 0;
                  if (a4)
                    v48 = *(double **)(a4 + 16);
                  else
                    v48 = 0;
                  if (a5)
                    v72 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v72 = 0;
                  if (v7)
                  {
                    v150 = v7;
                    do
                    {
                      v152 = *v24;
                      v24 += 8;
                      v151 = v152;
                      v153 = *v48++;
                      v154 = (int)v153;
                      if (v151)
                        v155 = a3;
                      else
                        v155 = v154;
                      *v72++ = v155;
                      --v150;
                    }
                    while (v150);
                  }
                  break;
                case 1:
                  if (a1)
                    v25 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v25 = 0;
                  if (a4)
                    v49 = *(double **)(a4 + 16);
                  else
                    v49 = 0;
                  if (a5)
                    v73 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v73 = 0;
                  if (v7)
                  {
                    v156 = v7;
                    do
                    {
                      v158 = *v25++;
                      v157 = v158;
                      v159 = *v49++;
                      v160 = (unint64_t)v159;
                      if (v157)
                        v161 = a3;
                      else
                        v161 = v160;
                      *v73++ = v161;
                      --v156;
                    }
                    while (v156);
                  }
                  break;
                case 0:
                  v13 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v37 = a4 ? *(double **)(a4 + 16) : 0;
                  v61 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v97 = v7;
                    do
                    {
                      v99 = *v13++;
                      v98 = v99;
                      v100 = *v37++;
                      v101 = v100;
                      if (v98)
                        v101 = (double)a3;
                      *v61++ = v101;
                      --v97;
                    }
                    while (v97);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v181 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v181 = 0;
                  if (a4)
                    v222 = *(_BYTE **)(a4 + 16);
                  else
                    v222 = 0;
                  if (a5)
                    v234 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v234 = 0;
                  if (v7)
                  {
                    v258 = v7;
                    do
                    {
                      v260 = *v181;
                      v181 += 8;
                      v259 = v260;
                      LOBYTE(v260) = *v222++;
                      v261 = v260;
                      if (v259)
                        v262 = (int)*(double *)&a3;
                      else
                        v262 = v261;
                      *v234++ = v262;
                      --v258;
                    }
                    while (v258);
                  }
                  break;
                case 1:
                  if (a1)
                    v182 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v182 = 0;
                  if (a4)
                    v223 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v223 = 0;
                  if (a5)
                    v235 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v235 = 0;
                  if (v7)
                  {
                    v263 = v7;
                    do
                    {
                      v265 = *v182++;
                      v264 = v265;
                      LODWORD(v265) = *v223++;
                      v266 = v265;
                      if (v264)
                        v267 = (unint64_t)*(double *)&a3;
                      else
                        v267 = v266;
                      *v235++ = v267;
                      --v263;
                    }
                    while (v263);
                  }
                  break;
                case 0:
                  v180 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v221 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  v233 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v254 = v7;
                    do
                    {
                      v256 = *v180++;
                      v255 = v256;
                      LODWORD(v256) = *v221++;
                      v257 = (double)v256;
                      if (v255)
                        v257 = *(double *)&a3;
                      *v233++ = v257;
                      --v254;
                    }
                    while (v254);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v28 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v28 = 0;
                  if (a4)
                    v52 = *(_BYTE **)(a4 + 16);
                  else
                    v52 = 0;
                  if (a5)
                    v76 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v76 = 0;
                  if (v7)
                  {
                    v175 = v7;
                    do
                    {
                      v177 = *v28;
                      v28 += 8;
                      v176 = v177;
                      LOBYTE(v177) = *v52;
                      v52 += 8;
                      v178 = v177;
                      if (v176)
                        v179 = (int)*(double *)&a3;
                      else
                        v179 = v178;
                      *v76++ = v179;
                      --v175;
                    }
                    while (v175);
                  }
                  break;
                case 1:
                  if (a1)
                    v29 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v29 = 0;
                  if (a4)
                    v53 = *(unint64_t **)(a4 + 16);
                  else
                    v53 = 0;
                  if (a5)
                    v77 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v77 = 0;
                  if (v7)
                  {
                    v183 = v7;
                    do
                    {
                      v185 = *v29++;
                      v184 = v185;
                      v187 = *v53++;
                      v186 = v187;
                      if (v184)
                        v188 = (unint64_t)*(double *)&a3;
                      else
                        v188 = v186;
                      *v77++ = v188;
                      --v183;
                    }
                    while (v183);
                  }
                  break;
                case 0:
                  v15 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v39 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  v63 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v107 = v7;
                    do
                    {
                      v109 = *v15++;
                      v108 = v109;
                      v110 = *v39++;
                      v111 = (double)v110;
                      if (v108)
                        v111 = *(double *)&a3;
                      *v63++ = v111;
                      --v107;
                    }
                    while (v107);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v20 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v20 = 0;
                  if (a4)
                    v44 = *(double **)(a4 + 16);
                  else
                    v44 = 0;
                  if (a5)
                    v68 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v68 = 0;
                  if (v7)
                  {
                    v130 = v7;
                    do
                    {
                      v132 = *v20;
                      v20 += 8;
                      v131 = v132;
                      v133 = *v44++;
                      v134 = v133;
                      if (v131)
                        v134 = *(double *)&a3;
                      *v68++ = (int)v134;
                      --v130;
                    }
                    while (v130);
                  }
                  break;
                case 1:
                  if (a1)
                    v21 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v21 = 0;
                  if (a4)
                    v45 = *(double **)(a4 + 16);
                  else
                    v45 = 0;
                  if (a5)
                    v69 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v69 = 0;
                  if (v7)
                  {
                    v135 = v7;
                    do
                    {
                      v137 = *v21++;
                      v136 = v137;
                      v138 = *v45++;
                      v139 = v138;
                      if (v136)
                        v139 = *(double *)&a3;
                      *v69++ = (unint64_t)v139;
                      --v135;
                    }
                    while (v135);
                  }
                  break;
                case 0:
                  v11 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v35 = a4 ? *(double **)(a4 + 16) : 0;
                  v59 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v87 = v7;
                    do
                    {
                      v89 = *v11++;
                      v88 = v89;
                      v90 = *v35++;
                      v91 = v90;
                      if (v88)
                        v91 = *(double *)&a3;
                      *v59++ = v91;
                      --v87;
                    }
                    while (v87);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 0:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v358 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v358 = 0;
                  if (a4)
                    v403 = *(_BYTE **)(a4 + 16);
                  else
                    v403 = 0;
                  if (a5)
                    v409 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v409 = 0;
                  for (; v7; --v7)
                  {
                    v417 = *v358++;
                    v418 = (int)v417;
                    LOBYTE(v417) = *v403++;
                    v419 = LOBYTE(v417);
                    if (v418)
                      v420 = a3;
                    else
                      v420 = v419;
                    *v409++ = v420;
                  }
                  break;
                case 1:
                  if (a1)
                    v359 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v359 = 0;
                  if (a4)
                    v404 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v404 = 0;
                  if (a5)
                    v410 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v410 = 0;
                  for (; v7; --v7)
                  {
                    v421 = *v359++;
                    v422 = (unint64_t)v421;
                    LODWORD(v421) = *v404++;
                    v423 = LODWORD(v421);
                    if (v422)
                      v424 = a3;
                    else
                      v424 = v423;
                    *v410++ = v424;
                  }
                  break;
                case 0:
                  v357 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v402 = a4 ? *(_BYTE **)(a4 + 16) : 0;
                  for (nn = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v414 = *v357++;
                    v415 = v414;
                    LOBYTE(v414) = *v402++;
                    v416 = LOBYTE(v414);
                    if (v415 != 0.0)
                      v416 = a3;
                    *nn++ = (double)v416;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v281 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v281 = 0;
                  if (a4)
                    v311 = *(uint64_t **)(a4 + 16);
                  else
                    v311 = 0;
                  if (a5)
                    v323 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v323 = 0;
                  if (v7)
                  {
                    v351 = v7;
                    do
                    {
                      v352 = *v281++;
                      v353 = (int)v352;
                      v355 = *v311++;
                      v354 = v355;
                      if (v353)
                        v356 = a3;
                      else
                        v356 = v354;
                      *v323++ = v356;
                      --v351;
                    }
                    while (v351);
                  }
                  break;
                case 1:
                  if (a1)
                    v282 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v282 = 0;
                  if (a4)
                    v312 = *(uint64_t **)(a4 + 16);
                  else
                    v312 = 0;
                  if (a5)
                    v324 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v324 = 0;
                  for (; v7; --v7)
                  {
                    v360 = *v282++;
                    v361 = (unint64_t)v360;
                    v363 = *v312++;
                    v362 = v363;
                    if (v361)
                      v364 = a3;
                    else
                      v364 = v362;
                    *v324++ = v364;
                  }
                  break;
                case 0:
                  v278 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v308 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (i1 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v336 = *v278++;
                    v337 = v336;
                    v338 = *v308++;
                    v339 = (double)v338;
                    if (v337 == 0.0)
                      v340 = v339;
                    else
                      v340 = (double)a3;
                    *i1++ = v340;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v279 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v279 = 0;
                  if (a4)
                    v309 = *(double **)(a4 + 16);
                  else
                    v309 = 0;
                  if (a5)
                    v321 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v321 = 0;
                  for (; v7; --v7)
                  {
                    v341 = *v279++;
                    v342 = (int)v341;
                    v343 = *v309++;
                    v344 = (int)v343;
                    if (v342)
                      v345 = a3;
                    else
                      v345 = v344;
                    *v321++ = v345;
                  }
                  break;
                case 1:
                  if (a1)
                    v280 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v280 = 0;
                  if (a4)
                    v310 = *(double **)(a4 + 16);
                  else
                    v310 = 0;
                  if (a5)
                    v322 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v322 = 0;
                  for (; v7; --v7)
                  {
                    v346 = *v280++;
                    v347 = (unint64_t)v346;
                    v348 = *v310++;
                    v349 = (unint64_t)v348;
                    if (v347)
                      v350 = a3;
                    else
                      v350 = v349;
                    *v322++ = v350;
                  }
                  break;
                case 0:
                  v277 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v307 = a4 ? *(double **)(a4 + 16) : 0;
                  for (i2 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v331 = *v277++;
                    v332 = v331;
                    v333 = *v307++;
                    v334 = v333;
                    if (v332 == 0.0)
                      v335 = v334;
                    else
                      v335 = (double)a3;
                    *i2++ = v335;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v196 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v196 = 0;
                  if (a4)
                    v225 = *(_BYTE **)(a4 + 16);
                  else
                    v225 = 0;
                  if (a5)
                    v237 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v237 = 0;
                  if (v7)
                  {
                    v272 = v7;
                    do
                    {
                      v273 = *v196++;
                      v274 = (int)v273;
                      LOBYTE(v273) = *v225++;
                      v275 = LOBYTE(v273);
                      if (v274)
                        v276 = a3;
                      else
                        v276 = v275;
                      *v237++ = v276;
                      --v272;
                    }
                    while (v272);
                  }
                  break;
                case 1:
                  if (a1)
                    v197 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v197 = 0;
                  if (a4)
                    v226 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v226 = 0;
                  if (a5)
                    v238 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v238 = 0;
                  for (; v7; --v7)
                  {
                    v283 = *v197++;
                    v284 = (unint64_t)v283;
                    LODWORD(v283) = *v226++;
                    v285 = LODWORD(v283);
                    if (v284)
                      v286 = a3;
                    else
                      v286 = v285;
                    *v238++ = v286;
                  }
                  break;
                case 0:
                  v195 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v224 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (i3 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v268 = *v195++;
                    v269 = v268;
                    LODWORD(v268) = *v224++;
                    v270 = (double)LODWORD(v268);
                    if (v269 == 0.0)
                      v271 = v270;
                    else
                      v271 = (double)a3;
                    *i3++ = v271;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v30 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v30 = 0;
                  if (a4)
                    v54 = *(uint64_t **)(a4 + 16);
                  else
                    v54 = 0;
                  if (a5)
                    v78 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v78 = 0;
                  if (v7)
                  {
                    v189 = v7;
                    do
                    {
                      v190 = *v30++;
                      v191 = (int)v190;
                      v193 = *v54++;
                      v192 = v193;
                      if (v191)
                        v194 = a3;
                      else
                        v194 = v192;
                      *v78++ = v194;
                      --v189;
                    }
                    while (v189);
                  }
                  break;
                case 1:
                  if (a1)
                    v31 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v31 = 0;
                  if (a4)
                    v55 = *(unint64_t **)(a4 + 16);
                  else
                    v55 = 0;
                  if (a5)
                    v79 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v79 = 0;
                  for (; v7; --v7)
                  {
                    v198 = *v31++;
                    v199 = (unint64_t)v198;
                    v201 = *v55++;
                    v200 = v201;
                    if (v199)
                      v202 = a3;
                    else
                      v202 = v200;
                    *v79++ = v202;
                  }
                  break;
                case 0:
                  v16 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v40 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (i4 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v112 = *v16++;
                    v113 = v112;
                    v115 = *v40++;
                    v114 = v115;
                    if (v113 != 0.0)
                      v114 = a3;
                    *i4++ = (double)v114;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v22 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v22 = 0;
                  if (a4)
                    v46 = *(double **)(a4 + 16);
                  else
                    v46 = 0;
                  if (a5)
                    v70 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v70 = 0;
                  for (; v7; --v7)
                  {
                    v140 = *v22++;
                    v141 = (int)v140;
                    v142 = *v46++;
                    v143 = (int)v142;
                    if (v141)
                      v144 = a3;
                    else
                      v144 = v143;
                    *v70++ = v144;
                  }
                  break;
                case 1:
                  if (a1)
                    v23 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v23 = 0;
                  if (a4)
                    v47 = *(double **)(a4 + 16);
                  else
                    v47 = 0;
                  if (a5)
                    v71 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v71 = 0;
                  for (; v7; --v7)
                  {
                    v145 = *v23++;
                    v146 = (unint64_t)v145;
                    v147 = *v47++;
                    v148 = (unint64_t)v147;
                    if (v146)
                      v149 = a3;
                    else
                      v149 = v148;
                    *v71++ = v149;
                  }
                  break;
                case 0:
                  v12 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v36 = a4 ? *(double **)(a4 + 16) : 0;
                  for (i5 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v92 = *v12++;
                    v93 = v92;
                    v94 = *v36++;
                    v95 = v94;
                    if (v93 == 0.0)
                      v96 = v95;
                    else
                      v96 = (double)a3;
                    *i5++ = v96;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v168 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v168 = 0;
                  if (a4)
                    v219 = *(_BYTE **)(a4 + 16);
                  else
                    v219 = 0;
                  if (a5)
                    v231 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v231 = 0;
                  for (; v7; --v7)
                  {
                    v246 = *v168++;
                    v247 = (int)v246;
                    LOBYTE(v246) = *v219++;
                    v248 = LOBYTE(v246);
                    if (v247)
                      v249 = (int)*(double *)&a3;
                    else
                      v249 = v248;
                    *v231++ = v249;
                  }
                  break;
                case 1:
                  if (a1)
                    v169 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v169 = 0;
                  if (a4)
                    v220 = *(unsigned __int8 **)(a4 + 16);
                  else
                    v220 = 0;
                  if (a5)
                    v232 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v232 = 0;
                  for (; v7; --v7)
                  {
                    v250 = *v169++;
                    v251 = (unint64_t)v250;
                    LODWORD(v250) = *v220++;
                    v252 = LODWORD(v250);
                    if (v251)
                      v253 = (unint64_t)*(double *)&a3;
                    else
                      v253 = v252;
                    *v232++ = v253;
                  }
                  break;
                case 0:
                  v167 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v218 = a4 ? *(unsigned __int8 **)(a4 + 16) : 0;
                  for (i6 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v242 = *v167++;
                    v243 = v242;
                    LODWORD(v242) = *v218++;
                    v244 = (double)LODWORD(v242);
                    if (v243 == 0.0)
                      v245 = v244;
                    else
                      v245 = *(double *)&a3;
                    *i6++ = v245;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v26 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v26 = 0;
                  if (a4)
                    v50 = *(_BYTE **)(a4 + 16);
                  else
                    v50 = 0;
                  if (a5)
                    v74 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v74 = 0;
                  if (v7)
                  {
                    v162 = v7;
                    do
                    {
                      v163 = *v26++;
                      v164 = (int)v163;
                      LOBYTE(v163) = *v50;
                      v50 += 8;
                      v165 = LOBYTE(v163);
                      if (v164)
                        v166 = (int)*(double *)&a3;
                      else
                        v166 = v165;
                      *v74++ = v166;
                      --v162;
                    }
                    while (v162);
                  }
                  break;
                case 1:
                  if (a1)
                    v27 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v27 = 0;
                  if (a4)
                    v51 = *(unint64_t **)(a4 + 16);
                  else
                    v51 = 0;
                  if (a5)
                    v75 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v75 = 0;
                  for (; v7; --v7)
                  {
                    v170 = *v27++;
                    v171 = (unint64_t)v170;
                    v173 = *v51++;
                    v172 = v173;
                    if (v171)
                      v174 = (unint64_t)*(double *)&a3;
                    else
                      v174 = v172;
                    *v75++ = v174;
                  }
                  break;
                case 0:
                  v14 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v38 = a4 ? *(unint64_t **)(a4 + 16) : 0;
                  for (i7 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v102 = *v14++;
                    v103 = v102;
                    v104 = *v38++;
                    v105 = (double)v104;
                    if (v103 == 0.0)
                      v106 = v105;
                    else
                      v106 = *(double *)&a3;
                    *i7++ = v106;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v18 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v18 = 0;
                  if (a4)
                    v42 = *(double **)(a4 + 16);
                  else
                    v42 = 0;
                  if (a5)
                    v66 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v66 = 0;
                  for (; v7; --v7)
                  {
                    v122 = *v18++;
                    v123 = (int)v122;
                    v124 = *v42++;
                    v125 = v124;
                    if (v123)
                      v125 = *(double *)&a3;
                    *v66++ = (int)v125;
                  }
                  break;
                case 1:
                  if (a1)
                    v19 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v19 = 0;
                  if (a4)
                    v43 = *(double **)(a4 + 16);
                  else
                    v43 = 0;
                  if (a5)
                    v67 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v67 = 0;
                  for (; v7; --v7)
                  {
                    v126 = *v19++;
                    v127 = (unint64_t)v126;
                    v128 = *v43++;
                    v129 = v128;
                    if (v127)
                      v129 = *(double *)&a3;
                    *v67++ = (unint64_t)v129;
                  }
                  break;
                case 0:
                  v10 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v34 = a4 ? *(double **)(a4 + 16) : 0;
                  for (i8 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v82 = *v10++;
                    v83 = v82;
                    v84 = *v34++;
                    v85 = v84;
                    if (v83 == 0.0)
                      v86 = v85;
                    else
                      v86 = *(double *)&a3;
                    *i8++ = v86;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  return a5;
}

uint64_t agxps_timeseries_select_tts(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  if (a1 && a2 && a5)
  {
    if (!*(_BYTE *)(a5 + 32) && (v7 = *(_QWORD *)(a1 + 8), v7 == *(_QWORD *)(a2 + 8)) && v7 == *(_QWORD *)(a5 + 8))
    {
      sub_29DF0((int *)a1, a2, a3, a4, (int *)a5, *(_DWORD *)a2, a3);
      return a5;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

int *sub_29DF0(int *a1, uint64_t a2, uint64_t a3, unint64_t a4, int *a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  double *v10;
  uint64_t *v11;
  double *v12;
  uint64_t *v13;
  double *v14;
  uint64_t *v15;
  double *v16;
  uint64_t *v17;
  double *v18;
  double *v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  double *v22;
  double *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  double *v26;
  double *v27;
  unsigned __int8 *v28;
  uint64_t *v29;
  double *v30;
  double *v31;
  unsigned __int8 *v32;
  uint64_t *v33;
  double *v34;
  double *v35;
  unint64_t *v36;
  unint64_t *v37;
  double *v38;
  double *v39;
  unint64_t *v40;
  unint64_t *v41;
  double *v42;
  double *v43;
  double *v44;
  double *v45;
  _BYTE *v46;
  unint64_t *v47;
  _BYTE *v48;
  unint64_t *v49;
  double *v50;
  double *v51;
  double *v52;
  double *v53;
  uint64_t *v54;
  unint64_t *v55;
  uint64_t *v56;
  unint64_t *v57;
  double *i8;
  double *v59;
  double *i5;
  double *v61;
  double *i7;
  double *v63;
  double *i4;
  double *v65;
  _BYTE *v66;
  _QWORD *v67;
  _BYTE *v68;
  _QWORD *v69;
  _BYTE *v70;
  unint64_t *v71;
  _BYTE *v72;
  unint64_t *v73;
  _BYTE *v74;
  unint64_t *v75;
  _BYTE *v76;
  unint64_t *v77;
  _BYTE *v78;
  unint64_t *v79;
  _BYTE *v80;
  unint64_t *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  unint64_t v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  double v122;
  int v123;
  double v124;
  double v125;
  double v126;
  unint64_t v127;
  double v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  int v141;
  char v142;
  char v143;
  double v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  char v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  double v161;
  int v162;
  double v163;
  int v164;
  char v165;
  double *v166;
  double *v167;
  double *v168;
  double v169;
  unint64_t v170;
  double v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  double v177;
  int v178;
  char v179;
  uint64_t *v180;
  unsigned __int8 *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  double v190;
  int v191;
  char v192;
  uint64_t v193;
  char v194;
  double *v195;
  double *v196;
  double *v197;
  double v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  char v206;
  uint64_t v207;
  char v208;
  uint64_t *v209;
  unsigned __int8 *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  double *v218;
  double *v219;
  double *v220;
  double *v221;
  double *v222;
  double *v223;
  unint64_t *v224;
  uint64_t *v225;
  uint64_t *v226;
  unint64_t *v227;
  uint64_t *v228;
  uint64_t *v229;
  double *i6;
  _BYTE *v231;
  unint64_t *v232;
  double *v233;
  _BYTE *v234;
  unint64_t *v235;
  double *i3;
  _BYTE *v237;
  _QWORD *v238;
  double *v239;
  _BYTE *v240;
  _QWORD *v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  int v248;
  double v249;
  int v250;
  char v251;
  double v252;
  unint64_t v253;
  double v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  double v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  double v265;
  int v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  unint64_t v272;
  unint64_t v273;
  double v274;
  double v275;
  unint64_t v276;
  double v277;
  double v278;
  uint64_t v279;
  double v280;
  int v281;
  char v282;
  uint64_t v283;
  char v284;
  double *v285;
  double *v286;
  double *v287;
  double *v288;
  double *v289;
  double *v290;
  double v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  double v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  char v304;
  uint64_t v305;
  char v306;
  uint64_t *v307;
  uint64_t *v308;
  unsigned __int8 *v309;
  uint64_t *v310;
  unsigned __int8 *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned __int8 *v319;
  unsigned __int8 *v320;
  _BYTE *v321;
  unsigned __int8 *v322;
  _BYTE *v323;
  unsigned __int8 *v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  _BYTE *v327;
  unsigned __int8 *v328;
  _BYTE *v329;
  unsigned __int8 *v330;
  double *i2;
  double *i1;
  _BYTE *v333;
  unint64_t *v334;
  _BYTE *v335;
  unint64_t *v336;
  double *v337;
  double *v338;
  _BYTE *v339;
  unint64_t *v340;
  _BYTE *v341;
  unint64_t *v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  int v352;
  char v353;
  char v354;
  double v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  double v360;
  int v361;
  char v362;
  char v363;
  double *v364;
  double *v365;
  double *v366;
  double v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  double v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  double v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  char v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  char v392;
  char v393;
  uint64_t *v394;
  unsigned __int8 *v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  _BYTE *v402;
  _BYTE *v403;
  unsigned __int8 *v404;
  _BYTE *v405;
  _BYTE *v406;
  unsigned __int8 *v407;
  double *nn;
  _BYTE *v409;
  _QWORD *v410;
  double *v411;
  _BYTE *v412;
  _QWORD *v413;
  double v414;
  double v415;
  unsigned __int8 v416;
  double v417;
  int v418;
  char v419;
  char v420;
  double v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unsigned __int8 v428;
  unsigned __int8 v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  char v433;
  char v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned __int8 *v440;
  unsigned __int8 *v441;
  unsigned __int8 *v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  unsigned __int8 *v446;
  unsigned __int8 *v447;
  unsigned __int8 *v448;
  unsigned __int8 *v449;
  unsigned __int8 *v450;
  unsigned __int8 *v451;
  double *v452;
  unint64_t *v453;
  double *v454;
  unint64_t *v455;
  double *v456;
  double *v457;
  _BYTE *v458;
  unint64_t *v459;
  double *v460;
  double *v461;
  uint64_t *v462;
  unint64_t *v463;
  double *mm;
  double *ii;
  double *kk;
  double *n;
  _BYTE *v468;
  _QWORD *v469;
  _BYTE *v470;
  unint64_t *v471;
  _BYTE *v472;
  unint64_t *v473;
  _BYTE *v474;
  unint64_t *v475;
  int v476;
  int v477;
  double v478;
  double v479;
  int v480;
  int v481;
  unint64_t v482;
  double v483;
  int v484;
  int v485;
  double v486;
  double v487;
  int v488;
  int v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  int v493;
  int v494;
  double v495;
  double v496;
  int v497;
  int v498;
  double v499;
  double v500;
  int v501;
  int v502;
  char v503;
  char v504;
  int v505;
  int v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  int v511;
  int v512;
  double v513;
  int v514;
  char v515;
  unsigned __int8 *v516;
  unsigned __int8 *v517;
  unsigned __int8 *v518;
  double *v519;
  double *v520;
  double *v521;
  double *jj;
  _BYTE *v523;
  unint64_t *v524;
  int v525;
  int v526;
  double v527;
  double v528;
  int v529;
  int v530;
  double v531;
  int v532;
  char v533;
  int v534;
  int v535;
  double v536;
  unint64_t v537;
  unint64_t v538;
  int v539;
  int v540;
  double v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  int v545;
  int v546;
  char v547;
  uint64_t v548;
  char v549;
  unsigned __int8 *v550;
  unsigned __int8 *v551;
  unsigned __int8 *v552;
  unint64_t *v553;
  uint64_t *v554;
  uint64_t *v555;
  double *m;
  _BYTE *v557;
  _QWORD *v558;
  int v559;
  int v560;
  unint64_t v561;
  double v562;
  uint64_t v563;
  int v564;
  int v565;
  char v566;
  uint64_t v567;
  char v568;
  unsigned __int8 *v569;
  unsigned __int8 *v570;
  unsigned __int8 *v571;
  unsigned __int8 *v572;
  unsigned __int8 *v573;
  unsigned __int8 *v574;
  int v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned __int8 *v580;
  unsigned __int8 *v581;
  _BYTE *v582;
  unsigned __int8 *v583;
  _BYTE *v584;
  unsigned __int8 *v585;
  double *k;
  double *j;
  _BYTE *v588;
  unint64_t *v589;
  _BYTE *v590;
  unint64_t *v591;
  int v592;
  int v593;
  unsigned int v594;
  double v595;
  int v596;
  int v597;
  unsigned int v598;
  double v599;
  int v600;
  int v601;
  char v602;
  char v603;
  int v604;
  int v605;
  unint64_t v606;
  unsigned int v607;
  unint64_t v608;
  uint64_t v609;
  int v610;
  int v611;
  char v612;
  char v613;
  unsigned __int8 *v614;
  unsigned __int8 *v615;
  unsigned __int8 *v616;
  int v617;
  int v618;
  unint64_t v619;
  unsigned int v620;
  unint64_t v621;
  _BYTE *v622;
  _BYTE *v623;
  unsigned __int8 *v624;
  double *i;
  _BYTE *v626;
  _QWORD *v627;
  int v628;
  int v629;
  unsigned __int8 v630;
  unsigned __int8 v631;
  int v632;
  int v633;
  char v634;
  char v635;
  int v636;
  int v637;
  uint64_t v638;
  unsigned int v639;
  uint64_t v640;
  int v641;
  int v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;

  if (a5)
  {
    v7 = *((_QWORD *)a5 + 1);
    if (a1)
      goto LABEL_3;
LABEL_6:
    v8 = 0;
    if (a5)
      goto LABEL_4;
    goto LABEL_7;
  }
  v7 = 0;
  if (!a1)
    goto LABEL_6;
LABEL_3:
  v8 = *a1;
  if (a5)
  {
LABEL_4:
    v9 = *a5;
    goto LABEL_8;
  }
LABEL_7:
  v9 = 0;
LABEL_8:
  switch(v8)
  {
    case 2:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v615 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v615 = 0;
                  if (a2)
                    v623 = *(_BYTE **)(a2 + 16);
                  else
                    v623 = 0;
                  if (a5)
                    v626 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v626 = 0;
                  for (; v7; --v7)
                  {
                    v633 = *v615++;
                    v632 = v633;
                    LOBYTE(v633) = *v623++;
                    v634 = v633;
                    if (v632)
                      v635 = v634;
                    else
                      v635 = a4;
                    *v626++ = v635;
                  }
                  break;
                case 1:
                  if (a1)
                    v616 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v616 = 0;
                  if (a2)
                    v624 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v624 = 0;
                  if (a5)
                    v627 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v627 = 0;
                  for (; v7; --v7)
                  {
                    v637 = *v616++;
                    v636 = v637;
                    v639 = *v624++;
                    v638 = v639;
                    if (v636)
                      v640 = v638;
                    else
                      v640 = a4;
                    *v627++ = v640;
                  }
                  break;
                case 0:
                  v614 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v622 = a2 ? *(_BYTE **)(a2 + 16) : 0;
                  for (i = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v629 = *v614++;
                    v628 = v629;
                    LOBYTE(v629) = *v622++;
                    v630 = v629;
                    if (v628)
                      v631 = v630;
                    else
                      v631 = a4;
                    *i++ = (double)v631;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v573 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v573 = 0;
                  if (a2)
                    v584 = *(_BYTE **)(a2 + 16);
                  else
                    v584 = 0;
                  if (a5)
                    v590 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v590 = 0;
                  if (v7)
                  {
                    v609 = v7;
                    do
                    {
                      v611 = *v573++;
                      v610 = v611;
                      LOBYTE(v611) = *v584++;
                      v612 = v611;
                      if (v610)
                        v613 = v612;
                      else
                        v613 = a4;
                      *v590++ = v613;
                      --v609;
                    }
                    while (v609);
                  }
                  break;
                case 1:
                  if (a1)
                    v574 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v574 = 0;
                  if (a2)
                    v585 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v585 = 0;
                  if (a5)
                    v591 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v591 = 0;
                  for (; v7; --v7)
                  {
                    v618 = *v574++;
                    v617 = v618;
                    v620 = *v585++;
                    v619 = v620;
                    if (v617)
                      v621 = v619;
                    else
                      v621 = a4;
                    *v591++ = v621;
                  }
                  break;
                case 0:
                  v570 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v581 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (j = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v597 = *v570++;
                    v596 = v597;
                    v598 = *v581++;
                    v599 = (double)v598;
                    if (!v596)
                      v599 = (double)a4;
                    *j++ = v599;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v571 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v571 = 0;
                  if (a2)
                    v582 = *(_BYTE **)(a2 + 16);
                  else
                    v582 = 0;
                  if (a5)
                    v588 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v588 = 0;
                  for (; v7; --v7)
                  {
                    v601 = *v571++;
                    v600 = v601;
                    LOBYTE(v601) = *v582++;
                    v602 = v601;
                    if (v600)
                      v603 = v602;
                    else
                      v603 = (int)*(double *)&a4;
                    *v588++ = v603;
                  }
                  break;
                case 1:
                  if (a1)
                    v572 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v572 = 0;
                  if (a2)
                    v583 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v583 = 0;
                  if (a5)
                    v589 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v589 = 0;
                  for (; v7; --v7)
                  {
                    v605 = *v572++;
                    v604 = v605;
                    v607 = *v583++;
                    v606 = v607;
                    if (v604)
                      v608 = v606;
                    else
                      v608 = (unint64_t)*(double *)&a4;
                    *v589++ = v608;
                  }
                  break;
                case 0:
                  v569 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v580 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (k = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v593 = *v569++;
                    v592 = v593;
                    v594 = *v580++;
                    v595 = (double)v594;
                    if (!v592)
                      v595 = *(double *)&a4;
                    *k++ = v595;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v551 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v551 = 0;
                  if (a2)
                    v554 = *(uint64_t **)(a2 + 16);
                  else
                    v554 = 0;
                  if (a5)
                    v557 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v557 = 0;
                  if (v7)
                  {
                    v563 = v7;
                    do
                    {
                      v565 = *v551++;
                      v564 = v565;
                      v567 = *v554++;
                      v566 = v567;
                      if (v564)
                        v568 = v566;
                      else
                        v568 = a4;
                      *v557++ = v568;
                      --v563;
                    }
                    while (v563);
                  }
                  break;
                case 1:
                  if (a1)
                    v552 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v552 = 0;
                  if (a2)
                    v555 = *(uint64_t **)(a2 + 16);
                  else
                    v555 = 0;
                  if (a5)
                    v558 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v558 = 0;
                  for (; v7; --v7)
                  {
                    v576 = *v552++;
                    v575 = v576;
                    v578 = *v555++;
                    v577 = v578;
                    if (v575)
                      v579 = v577;
                    else
                      v579 = a4;
                    *v558++ = v579;
                  }
                  break;
                case 0:
                  v550 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v553 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (m = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v560 = *v550++;
                    v559 = v560;
                    v561 = *v553++;
                    v562 = (double)v561;
                    if (!v559)
                      v562 = (double)a4;
                    *m++ = v562;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v450 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v450 = 0;
                  if (a2)
                    v462 = *(uint64_t **)(a2 + 16);
                  else
                    v462 = 0;
                  if (a5)
                    v474 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v474 = 0;
                  if (v7)
                  {
                    v544 = v7;
                    do
                    {
                      v546 = *v450++;
                      v545 = v546;
                      v548 = *v462++;
                      v547 = v548;
                      if (v545)
                        v549 = v547;
                      else
                        v549 = a4;
                      *v474++ = v549;
                      --v544;
                    }
                    while (v544);
                  }
                  break;
                case 1:
                  if (a1)
                    v451 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v451 = 0;
                  if (a2)
                    v463 = *(unint64_t **)(a2 + 16);
                  else
                    v463 = 0;
                  if (a5)
                    v475 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v475 = 0;
                  for (; v7; --v7)
                  {
                    v642 = *v451++;
                    v641 = v642;
                    v644 = *v463++;
                    v643 = v644;
                    if (v641)
                      v645 = v643;
                    else
                      v645 = a4;
                    *v475++ = v645;
                  }
                  break;
                case 0:
                  v443 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v455 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (n = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v489 = *v443++;
                    v488 = v489;
                    v491 = *v455++;
                    v490 = v491;
                    if (v488)
                      v492 = v490;
                    else
                      v492 = a4;
                    *n++ = (double)v492;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v446 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v446 = 0;
                  if (a2)
                    v458 = *(_BYTE **)(a2 + 16);
                  else
                    v458 = 0;
                  if (a5)
                    v470 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v470 = 0;
                  for (; v7; --v7)
                  {
                    v502 = *v446++;
                    v501 = v502;
                    LOBYTE(v502) = *v458;
                    v458 += 8;
                    v503 = v502;
                    if (v501)
                      v504 = v503;
                    else
                      v504 = (int)*(double *)&a4;
                    *v470++ = v504;
                  }
                  break;
                case 1:
                  if (a1)
                    v447 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v447 = 0;
                  if (a2)
                    v459 = *(unint64_t **)(a2 + 16);
                  else
                    v459 = 0;
                  if (a5)
                    v471 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v471 = 0;
                  for (; v7; --v7)
                  {
                    v506 = *v447++;
                    v505 = v506;
                    v508 = *v459++;
                    v507 = v508;
                    if (v505)
                      v509 = v507;
                    else
                      v509 = (unint64_t)*(double *)&a4;
                    *v471++ = v509;
                  }
                  break;
                case 0:
                  v441 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v453 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (ii = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v481 = *v441++;
                    v480 = v481;
                    v482 = *v453++;
                    v483 = (double)v482;
                    if (!v480)
                      v483 = *(double *)&a4;
                    *ii++ = v483;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v517 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v517 = 0;
                  if (a2)
                    v520 = *(double **)(a2 + 16);
                  else
                    v520 = 0;
                  if (a5)
                    v523 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v523 = 0;
                  for (; v7; --v7)
                  {
                    v530 = *v517++;
                    v529 = v530;
                    v531 = *v520++;
                    v532 = (int)v531;
                    if (v529)
                      v533 = v532;
                    else
                      v533 = a4;
                    *v523++ = v533;
                  }
                  break;
                case 1:
                  if (a1)
                    v518 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v518 = 0;
                  if (a2)
                    v521 = *(double **)(a2 + 16);
                  else
                    v521 = 0;
                  if (a5)
                    v524 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v524 = 0;
                  for (; v7; --v7)
                  {
                    v535 = *v518++;
                    v534 = v535;
                    v536 = *v521++;
                    v537 = (unint64_t)v536;
                    if (v534)
                      v538 = v537;
                    else
                      v538 = a4;
                    *v524++ = v538;
                  }
                  break;
                case 0:
                  v516 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v519 = a2 ? *(double **)(a2 + 16) : 0;
                  for (jj = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v526 = *v516++;
                    v525 = v526;
                    v527 = *v519++;
                    v528 = v527;
                    if (!v525)
                      v528 = (double)a4;
                    *jj++ = v528;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v448 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v448 = 0;
                  if (a2)
                    v460 = *(double **)(a2 + 16);
                  else
                    v460 = 0;
                  if (a5)
                    v472 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v472 = 0;
                  if (v7)
                  {
                    v510 = v7;
                    do
                    {
                      v512 = *v448++;
                      v511 = v512;
                      v513 = *v460++;
                      v514 = (int)v513;
                      if (v511)
                        v515 = v514;
                      else
                        v515 = a4;
                      *v472++ = v515;
                      --v510;
                    }
                    while (v510);
                  }
                  break;
                case 1:
                  if (a1)
                    v449 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v449 = 0;
                  if (a2)
                    v461 = *(double **)(a2 + 16);
                  else
                    v461 = 0;
                  if (a5)
                    v473 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v473 = 0;
                  for (; v7; --v7)
                  {
                    v540 = *v449++;
                    v539 = v540;
                    v541 = *v461++;
                    v542 = (unint64_t)v541;
                    if (v539)
                      v543 = v542;
                    else
                      v543 = a4;
                    *v473++ = v543;
                  }
                  break;
                case 0:
                  v442 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v454 = a2 ? *(double **)(a2 + 16) : 0;
                  for (kk = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v485 = *v442++;
                    v484 = v485;
                    v486 = *v454++;
                    v487 = v486;
                    if (!v484)
                      v487 = (double)a4;
                    *kk++ = v487;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v444 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v444 = 0;
                  if (a2)
                    v456 = *(double **)(a2 + 16);
                  else
                    v456 = 0;
                  if (a5)
                    v468 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v468 = 0;
                  for (; v7; --v7)
                  {
                    v494 = *v444++;
                    v493 = v494;
                    v495 = *v456++;
                    v496 = v495;
                    if (!v493)
                      v496 = *(double *)&a4;
                    *v468++ = (int)v496;
                  }
                  break;
                case 1:
                  if (a1)
                    v445 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v445 = 0;
                  if (a2)
                    v457 = *(double **)(a2 + 16);
                  else
                    v457 = 0;
                  if (a5)
                    v469 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v469 = 0;
                  for (; v7; --v7)
                  {
                    v498 = *v445++;
                    v497 = v498;
                    v499 = *v457++;
                    v500 = v499;
                    if (!v497)
                      v500 = *(double *)&a4;
                    *v469++ = (unint64_t)v500;
                  }
                  break;
                case 0:
                  v440 = a1 ? (unsigned __int8 *)*((_QWORD *)a1 + 2) : 0;
                  v452 = a2 ? *(double **)(a2 + 16) : 0;
                  for (mm = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v477 = *v440++;
                    v476 = v477;
                    v478 = *v452++;
                    v479 = v478;
                    if (!v476)
                      v479 = *(double *)&a4;
                    *mm++ = v479;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 1:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v395 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v395 = 0;
                  if (a2)
                    v406 = *(_BYTE **)(a2 + 16);
                  else
                    v406 = 0;
                  if (a5)
                    v412 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v412 = 0;
                  if (v7)
                  {
                    v430 = v7;
                    do
                    {
                      v432 = *v395;
                      v395 += 8;
                      v431 = v432;
                      LOBYTE(v432) = *v406++;
                      v433 = v432;
                      if (v431)
                        v434 = v433;
                      else
                        v434 = a4;
                      *v412++ = v434;
                      --v430;
                    }
                    while (v430);
                  }
                  break;
                case 1:
                  if (a1)
                    v396 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v396 = 0;
                  if (a2)
                    v407 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v407 = 0;
                  if (a5)
                    v413 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v413 = 0;
                  if (v7)
                  {
                    v435 = v7;
                    do
                    {
                      v437 = *v396++;
                      v436 = v437;
                      LODWORD(v437) = *v407++;
                      v438 = v437;
                      if (v436)
                        v439 = v438;
                      else
                        v439 = a4;
                      *v413++ = v439;
                      --v435;
                    }
                    while (v435);
                  }
                  break;
                case 0:
                  v394 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v405 = a2 ? *(_BYTE **)(a2 + 16) : 0;
                  v411 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v425 = v7;
                    do
                    {
                      v427 = *v394++;
                      v426 = v427;
                      LOBYTE(v427) = *v405++;
                      v428 = v427;
                      if (v426)
                        v429 = v428;
                      else
                        v429 = a4;
                      *v411++ = (double)v429;
                      --v425;
                    }
                    while (v425);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v311 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v311 = 0;
                  if (a2)
                    v329 = *(_BYTE **)(a2 + 16);
                  else
                    v329 = 0;
                  if (a5)
                    v341 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v341 = 0;
                  if (v7)
                  {
                    v389 = v7;
                    do
                    {
                      v391 = *v311;
                      v311 += 8;
                      v390 = v391;
                      LOBYTE(v391) = *v329++;
                      v392 = v391;
                      if (v390)
                        v393 = v392;
                      else
                        v393 = a4;
                      *v341++ = v393;
                      --v389;
                    }
                    while (v389);
                  }
                  break;
                case 1:
                  if (a1)
                    v312 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v312 = 0;
                  if (a2)
                    v330 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v330 = 0;
                  if (a5)
                    v342 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v342 = 0;
                  if (v7)
                  {
                    v397 = v7;
                    do
                    {
                      v399 = *v312++;
                      v398 = v399;
                      LODWORD(v399) = *v330++;
                      v400 = v399;
                      if (v398)
                        v401 = v400;
                      else
                        v401 = a4;
                      *v342++ = v401;
                      --v397;
                    }
                    while (v397);
                  }
                  break;
                case 0:
                  v308 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v326 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v338 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v375 = v7;
                    do
                    {
                      v377 = *v308++;
                      v376 = v377;
                      LODWORD(v377) = *v326++;
                      v378 = (double)v377;
                      if (!v376)
                        v378 = (double)a4;
                      *v338++ = v378;
                      --v375;
                    }
                    while (v375);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v309 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v309 = 0;
                  if (a2)
                    v327 = *(_BYTE **)(a2 + 16);
                  else
                    v327 = 0;
                  if (a5)
                    v339 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v339 = 0;
                  if (v7)
                  {
                    v379 = v7;
                    do
                    {
                      v381 = *v309;
                      v309 += 8;
                      v380 = v381;
                      LOBYTE(v381) = *v327++;
                      v382 = v381;
                      if (v380)
                        v383 = v382;
                      else
                        v383 = (int)*(double *)&a4;
                      *v339++ = v383;
                      --v379;
                    }
                    while (v379);
                  }
                  break;
                case 1:
                  if (a1)
                    v310 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v310 = 0;
                  if (a2)
                    v328 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v328 = 0;
                  if (a5)
                    v340 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v340 = 0;
                  if (v7)
                  {
                    v384 = v7;
                    do
                    {
                      v386 = *v310++;
                      v385 = v386;
                      LODWORD(v386) = *v328++;
                      v387 = v386;
                      if (v385)
                        v388 = v387;
                      else
                        v388 = (unint64_t)*(double *)&a4;
                      *v340++ = v388;
                      --v384;
                    }
                    while (v384);
                  }
                  break;
                case 0:
                  v307 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v325 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  v337 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v371 = v7;
                    do
                    {
                      v373 = *v307++;
                      v372 = v373;
                      LODWORD(v373) = *v325++;
                      v374 = (double)v373;
                      if (!v372)
                        v374 = *(double *)&a4;
                      *v337++ = v374;
                      --v371;
                    }
                    while (v371);
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v210 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v210 = 0;
                  if (a2)
                    v228 = *(uint64_t **)(a2 + 16);
                  else
                    v228 = 0;
                  if (a5)
                    v240 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v240 = 0;
                  if (v7)
                  {
                    v301 = v7;
                    do
                    {
                      v303 = *v210;
                      v210 += 8;
                      v302 = v303;
                      v305 = *v228++;
                      v304 = v305;
                      if (v302)
                        v306 = v304;
                      else
                        v306 = a4;
                      *v240++ = v306;
                      --v301;
                    }
                    while (v301);
                  }
                  break;
                case 1:
                  if (a1)
                    v211 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v211 = 0;
                  if (a2)
                    v229 = *(uint64_t **)(a2 + 16);
                  else
                    v229 = 0;
                  if (a5)
                    v241 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v241 = 0;
                  if (v7)
                  {
                    v313 = v7;
                    do
                    {
                      v315 = *v211++;
                      v314 = v315;
                      v317 = *v229++;
                      v316 = v317;
                      if (v314)
                        v318 = v316;
                      else
                        v318 = a4;
                      *v241++ = v318;
                      --v313;
                    }
                    while (v313);
                  }
                  break;
                case 0:
                  v209 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v227 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v239 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v296 = v7;
                    do
                    {
                      v298 = *v209++;
                      v297 = v298;
                      v299 = *v227++;
                      v300 = (double)v299;
                      if (!v297)
                        v300 = (double)a4;
                      *v239++ = v300;
                      --v296;
                    }
                    while (v296);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v32 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v32 = 0;
                  if (a2)
                    v56 = *(uint64_t **)(a2 + 16);
                  else
                    v56 = 0;
                  if (a5)
                    v80 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v80 = 0;
                  if (v7)
                  {
                    v203 = v7;
                    do
                    {
                      v205 = *v32;
                      v32 += 8;
                      v204 = v205;
                      v207 = *v56++;
                      v206 = v207;
                      if (v204)
                        v208 = v206;
                      else
                        v208 = a4;
                      *v80++ = v208;
                      --v203;
                    }
                    while (v203);
                  }
                  break;
                case 1:
                  if (a1)
                    v33 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v33 = 0;
                  if (a2)
                    v57 = *(unint64_t **)(a2 + 16);
                  else
                    v57 = 0;
                  if (a5)
                    v81 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v81 = 0;
                  if (v7)
                  {
                    v212 = v7;
                    do
                    {
                      v214 = *v33++;
                      v213 = v214;
                      v216 = *v57++;
                      v215 = v216;
                      if (v213)
                        v217 = v215;
                      else
                        v217 = a4;
                      *v81++ = v217;
                      --v212;
                    }
                    while (v212);
                  }
                  break;
                case 0:
                  v17 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v41 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v65 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v116 = v7;
                    do
                    {
                      v118 = *v17++;
                      v117 = v118;
                      v120 = *v41++;
                      v119 = v120;
                      if (v117)
                        v121 = v119;
                      else
                        v121 = a4;
                      *v65++ = (double)v121;
                      --v116;
                    }
                    while (v116);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v24 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v24 = 0;
                  if (a2)
                    v48 = *(_BYTE **)(a2 + 16);
                  else
                    v48 = 0;
                  if (a5)
                    v72 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v72 = 0;
                  if (v7)
                  {
                    v149 = v7;
                    do
                    {
                      v151 = *v24;
                      v24 += 8;
                      v150 = v151;
                      LOBYTE(v151) = *v48;
                      v48 += 8;
                      v152 = v151;
                      if (v150)
                        v153 = v152;
                      else
                        v153 = (int)*(double *)&a4;
                      *v72++ = v153;
                      --v149;
                    }
                    while (v149);
                  }
                  break;
                case 1:
                  if (a1)
                    v25 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v25 = 0;
                  if (a2)
                    v49 = *(unint64_t **)(a2 + 16);
                  else
                    v49 = 0;
                  if (a5)
                    v73 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v73 = 0;
                  if (v7)
                  {
                    v154 = v7;
                    do
                    {
                      v156 = *v25++;
                      v155 = v156;
                      v158 = *v49++;
                      v157 = v158;
                      if (v155)
                        v159 = v157;
                      else
                        v159 = (unint64_t)*(double *)&a4;
                      *v73++ = v159;
                      --v154;
                    }
                    while (v154);
                  }
                  break;
                case 0:
                  v13 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v37 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  v61 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v97 = v7;
                    do
                    {
                      v99 = *v13++;
                      v98 = v99;
                      v100 = *v37++;
                      v101 = (double)v100;
                      if (!v98)
                        v101 = *(double *)&a4;
                      *v61++ = v101;
                      --v97;
                    }
                    while (v97);
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v181 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v181 = 0;
                  if (a2)
                    v222 = *(double **)(a2 + 16);
                  else
                    v222 = 0;
                  if (a5)
                    v234 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v234 = 0;
                  if (v7)
                  {
                    v262 = v7;
                    do
                    {
                      v264 = *v181;
                      v181 += 8;
                      v263 = v264;
                      v265 = *v222++;
                      v266 = (int)v265;
                      if (v263)
                        v267 = v266;
                      else
                        v267 = a4;
                      *v234++ = v267;
                      --v262;
                    }
                    while (v262);
                  }
                  break;
                case 1:
                  if (a1)
                    v182 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v182 = 0;
                  if (a2)
                    v223 = *(double **)(a2 + 16);
                  else
                    v223 = 0;
                  if (a5)
                    v235 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v235 = 0;
                  if (v7)
                  {
                    v268 = v7;
                    do
                    {
                      v270 = *v182++;
                      v269 = v270;
                      v271 = *v223++;
                      v272 = (unint64_t)v271;
                      if (v269)
                        v273 = v272;
                      else
                        v273 = a4;
                      *v235++ = v273;
                      --v268;
                    }
                    while (v268);
                  }
                  break;
                case 0:
                  v180 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v221 = a2 ? *(double **)(a2 + 16) : 0;
                  v233 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v257 = v7;
                    do
                    {
                      v259 = *v180++;
                      v258 = v259;
                      v260 = *v221++;
                      v261 = v260;
                      if (!v258)
                        v261 = (double)a4;
                      *v233++ = v261;
                      --v257;
                    }
                    while (v257);
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v28 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v28 = 0;
                  if (a2)
                    v52 = *(double **)(a2 + 16);
                  else
                    v52 = 0;
                  if (a5)
                    v76 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v76 = 0;
                  if (v7)
                  {
                    v174 = v7;
                    do
                    {
                      v176 = *v28;
                      v28 += 8;
                      v175 = v176;
                      v177 = *v52++;
                      v178 = (int)v177;
                      if (v175)
                        v179 = v178;
                      else
                        v179 = a4;
                      *v76++ = v179;
                      --v174;
                    }
                    while (v174);
                  }
                  break;
                case 1:
                  if (a1)
                    v29 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v29 = 0;
                  if (a2)
                    v53 = *(double **)(a2 + 16);
                  else
                    v53 = 0;
                  if (a5)
                    v77 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v77 = 0;
                  if (v7)
                  {
                    v183 = v7;
                    do
                    {
                      v185 = *v29++;
                      v184 = v185;
                      v186 = *v53++;
                      v187 = (unint64_t)v186;
                      if (v184)
                        v188 = v187;
                      else
                        v188 = a4;
                      *v77++ = v188;
                      --v183;
                    }
                    while (v183);
                  }
                  break;
                case 0:
                  v15 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v39 = a2 ? *(double **)(a2 + 16) : 0;
                  v63 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v107 = v7;
                    do
                    {
                      v109 = *v15++;
                      v108 = v109;
                      v110 = *v39++;
                      v111 = v110;
                      if (!v108)
                        v111 = (double)a4;
                      *v63++ = v111;
                      --v107;
                    }
                    while (v107);
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v20 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  else
                    v20 = 0;
                  if (a2)
                    v44 = *(double **)(a2 + 16);
                  else
                    v44 = 0;
                  if (a5)
                    v68 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v68 = 0;
                  if (v7)
                  {
                    v130 = v7;
                    do
                    {
                      v132 = *v20;
                      v20 += 8;
                      v131 = v132;
                      v133 = *v44++;
                      v134 = v133;
                      if (!v131)
                        v134 = *(double *)&a4;
                      *v68++ = (int)v134;
                      --v130;
                    }
                    while (v130);
                  }
                  break;
                case 1:
                  if (a1)
                    v21 = (uint64_t *)*((_QWORD *)a1 + 2);
                  else
                    v21 = 0;
                  if (a2)
                    v45 = *(double **)(a2 + 16);
                  else
                    v45 = 0;
                  if (a5)
                    v69 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v69 = 0;
                  if (v7)
                  {
                    v135 = v7;
                    do
                    {
                      v137 = *v21++;
                      v136 = v137;
                      v138 = *v45++;
                      v139 = v138;
                      if (!v136)
                        v139 = *(double *)&a4;
                      *v69++ = (unint64_t)v139;
                      --v135;
                    }
                    while (v135);
                  }
                  break;
                case 0:
                  v11 = a1 ? (uint64_t *)*((_QWORD *)a1 + 2) : 0;
                  v35 = a2 ? *(double **)(a2 + 16) : 0;
                  v59 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0;
                  if (v7)
                  {
                    v87 = v7;
                    do
                    {
                      v89 = *v11++;
                      v88 = v89;
                      v90 = *v35++;
                      v91 = v90;
                      if (!v88)
                        v91 = *(double *)&a4;
                      *v59++ = v91;
                      --v87;
                    }
                    while (v87);
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
    case 0:
      switch(a6)
      {
        case 2:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v365 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v365 = 0;
                  if (a2)
                    v403 = *(_BYTE **)(a2 + 16);
                  else
                    v403 = 0;
                  if (a5)
                    v409 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v409 = 0;
                  for (; v7; --v7)
                  {
                    v417 = *v365++;
                    v418 = (int)v417;
                    LOBYTE(v417) = *v403++;
                    v419 = LOBYTE(v417);
                    if (v418)
                      v420 = v419;
                    else
                      v420 = a4;
                    *v409++ = v420;
                  }
                  break;
                case 1:
                  if (a1)
                    v366 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v366 = 0;
                  if (a2)
                    v404 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v404 = 0;
                  if (a5)
                    v410 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v410 = 0;
                  for (; v7; --v7)
                  {
                    v421 = *v366++;
                    v422 = (unint64_t)v421;
                    LODWORD(v421) = *v404++;
                    v423 = LODWORD(v421);
                    if (v422)
                      v424 = v423;
                    else
                      v424 = a4;
                    *v410++ = v424;
                  }
                  break;
                case 0:
                  v364 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v402 = a2 ? *(_BYTE **)(a2 + 16) : 0;
                  for (nn = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v414 = *v364++;
                    v415 = v414;
                    LOBYTE(v414) = *v402++;
                    v416 = LOBYTE(v414);
                    if (v415 == 0.0)
                      v416 = a4;
                    *nn++ = (double)v416;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v289 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v289 = 0;
                  if (a2)
                    v323 = *(_BYTE **)(a2 + 16);
                  else
                    v323 = 0;
                  if (a5)
                    v335 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v335 = 0;
                  if (v7)
                  {
                    v359 = v7;
                    do
                    {
                      v360 = *v289++;
                      v361 = (int)v360;
                      LOBYTE(v360) = *v323++;
                      v362 = LOBYTE(v360);
                      if (v361)
                        v363 = v362;
                      else
                        v363 = a4;
                      *v335++ = v363;
                      --v359;
                    }
                    while (v359);
                  }
                  break;
                case 1:
                  if (a1)
                    v290 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v290 = 0;
                  if (a2)
                    v324 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v324 = 0;
                  if (a5)
                    v336 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v336 = 0;
                  for (; v7; --v7)
                  {
                    v367 = *v290++;
                    v368 = (unint64_t)v367;
                    LODWORD(v367) = *v324++;
                    v369 = LODWORD(v367);
                    if (v368)
                      v370 = v369;
                    else
                      v370 = a4;
                    *v336++ = v370;
                  }
                  break;
                case 0:
                  v286 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v320 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (i1 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v347 = *v286++;
                    v348 = v347;
                    LODWORD(v347) = *v320++;
                    v349 = (double)LODWORD(v347);
                    if (v348 == 0.0)
                      v350 = (double)a4;
                    else
                      v350 = v349;
                    *i1++ = v350;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v287 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v287 = 0;
                  if (a2)
                    v321 = *(_BYTE **)(a2 + 16);
                  else
                    v321 = 0;
                  if (a5)
                    v333 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v333 = 0;
                  for (; v7; --v7)
                  {
                    v351 = *v287++;
                    v352 = (int)v351;
                    LOBYTE(v351) = *v321++;
                    v353 = LOBYTE(v351);
                    if (v352)
                      v354 = v353;
                    else
                      v354 = (int)*(double *)&a4;
                    *v333++ = v354;
                  }
                  break;
                case 1:
                  if (a1)
                    v288 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v288 = 0;
                  if (a2)
                    v322 = *(unsigned __int8 **)(a2 + 16);
                  else
                    v322 = 0;
                  if (a5)
                    v334 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v334 = 0;
                  for (; v7; --v7)
                  {
                    v355 = *v288++;
                    v356 = (unint64_t)v355;
                    LODWORD(v355) = *v322++;
                    v357 = LODWORD(v355);
                    if (v356)
                      v358 = v357;
                    else
                      v358 = (unint64_t)*(double *)&a4;
                    *v334++ = v358;
                  }
                  break;
                case 0:
                  v285 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v319 = a2 ? *(unsigned __int8 **)(a2 + 16) : 0;
                  for (i2 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v343 = *v285++;
                    v344 = v343;
                    LODWORD(v343) = *v319++;
                    v345 = (double)LODWORD(v343);
                    if (v344 == 0.0)
                      v346 = *(double *)&a4;
                    else
                      v346 = v345;
                    *i2++ = v346;
                  }
                  break;
              }
              break;
          }
          break;
        case 1:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v196 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v196 = 0;
                  if (a2)
                    v225 = *(uint64_t **)(a2 + 16);
                  else
                    v225 = 0;
                  if (a5)
                    v237 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v237 = 0;
                  if (v7)
                  {
                    v279 = v7;
                    do
                    {
                      v280 = *v196++;
                      v281 = (int)v280;
                      v283 = *v225++;
                      v282 = v283;
                      if (v281)
                        v284 = v282;
                      else
                        v284 = a4;
                      *v237++ = v284;
                      --v279;
                    }
                    while (v279);
                  }
                  break;
                case 1:
                  if (a1)
                    v197 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v197 = 0;
                  if (a2)
                    v226 = *(uint64_t **)(a2 + 16);
                  else
                    v226 = 0;
                  if (a5)
                    v238 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v238 = 0;
                  for (; v7; --v7)
                  {
                    v291 = *v197++;
                    v292 = (unint64_t)v291;
                    v294 = *v226++;
                    v293 = v294;
                    if (v292)
                      v295 = v293;
                    else
                      v295 = a4;
                    *v238++ = v295;
                  }
                  break;
                case 0:
                  v195 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v224 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (i3 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v274 = *v195++;
                    v275 = v274;
                    v276 = *v224++;
                    v277 = (double)v276;
                    if (v275 == 0.0)
                      v278 = (double)a4;
                    else
                      v278 = v277;
                    *i3++ = v278;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v30 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v30 = 0;
                  if (a2)
                    v54 = *(uint64_t **)(a2 + 16);
                  else
                    v54 = 0;
                  if (a5)
                    v78 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v78 = 0;
                  if (v7)
                  {
                    v189 = v7;
                    do
                    {
                      v190 = *v30++;
                      v191 = (int)v190;
                      v193 = *v54++;
                      v192 = v193;
                      if (v191)
                        v194 = v192;
                      else
                        v194 = a4;
                      *v78++ = v194;
                      --v189;
                    }
                    while (v189);
                  }
                  break;
                case 1:
                  if (a1)
                    v31 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v31 = 0;
                  if (a2)
                    v55 = *(unint64_t **)(a2 + 16);
                  else
                    v55 = 0;
                  if (a5)
                    v79 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v79 = 0;
                  for (; v7; --v7)
                  {
                    v198 = *v31++;
                    v199 = (unint64_t)v198;
                    v201 = *v55++;
                    v200 = v201;
                    if (v199)
                      v202 = v200;
                    else
                      v202 = a4;
                    *v79++ = v202;
                  }
                  break;
                case 0:
                  v16 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v40 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (i4 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v112 = *v16++;
                    v113 = v112;
                    v115 = *v40++;
                    v114 = v115;
                    if (v113 == 0.0)
                      v114 = a4;
                    *i4++ = (double)v114;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v22 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v22 = 0;
                  if (a2)
                    v46 = *(_BYTE **)(a2 + 16);
                  else
                    v46 = 0;
                  if (a5)
                    v70 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v70 = 0;
                  for (; v7; --v7)
                  {
                    v140 = *v22++;
                    v141 = (int)v140;
                    LOBYTE(v140) = *v46;
                    v46 += 8;
                    v142 = LOBYTE(v140);
                    if (v141)
                      v143 = v142;
                    else
                      v143 = (int)*(double *)&a4;
                    *v70++ = v143;
                  }
                  break;
                case 1:
                  if (a1)
                    v23 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v23 = 0;
                  if (a2)
                    v47 = *(unint64_t **)(a2 + 16);
                  else
                    v47 = 0;
                  if (a5)
                    v71 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v71 = 0;
                  for (; v7; --v7)
                  {
                    v144 = *v23++;
                    v145 = (unint64_t)v144;
                    v147 = *v47++;
                    v146 = v147;
                    if (v145)
                      v148 = v146;
                    else
                      v148 = (unint64_t)*(double *)&a4;
                    *v71++ = v148;
                  }
                  break;
                case 0:
                  v12 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v36 = a2 ? *(unint64_t **)(a2 + 16) : 0;
                  for (i5 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v92 = *v12++;
                    v93 = v92;
                    v94 = *v36++;
                    v95 = (double)v94;
                    if (v93 == 0.0)
                      v96 = *(double *)&a4;
                    else
                      v96 = v95;
                    *i5++ = v96;
                  }
                  break;
              }
              break;
          }
          break;
        case 0:
          switch(a7)
          {
            case 2:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v167 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v167 = 0;
                  if (a2)
                    v219 = *(double **)(a2 + 16);
                  else
                    v219 = 0;
                  if (a5)
                    v231 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v231 = 0;
                  for (; v7; --v7)
                  {
                    v247 = *v167++;
                    v248 = (int)v247;
                    v249 = *v219++;
                    v250 = (int)v249;
                    if (v248)
                      v251 = v250;
                    else
                      v251 = a4;
                    *v231++ = v251;
                  }
                  break;
                case 1:
                  if (a1)
                    v168 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v168 = 0;
                  if (a2)
                    v220 = *(double **)(a2 + 16);
                  else
                    v220 = 0;
                  if (a5)
                    v232 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v232 = 0;
                  for (; v7; --v7)
                  {
                    v252 = *v168++;
                    v253 = (unint64_t)v252;
                    v254 = *v220++;
                    v255 = (unint64_t)v254;
                    if (v253)
                      v256 = v255;
                    else
                      v256 = a4;
                    *v232++ = v256;
                  }
                  break;
                case 0:
                  v166 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v218 = a2 ? *(double **)(a2 + 16) : 0;
                  for (i6 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v242 = *v166++;
                    v243 = v242;
                    v244 = *v218++;
                    v245 = v244;
                    if (v243 == 0.0)
                      v246 = (double)a4;
                    else
                      v246 = v245;
                    *i6++ = v246;
                  }
                  break;
              }
              break;
            case 1:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v26 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v26 = 0;
                  if (a2)
                    v50 = *(double **)(a2 + 16);
                  else
                    v50 = 0;
                  if (a5)
                    v74 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v74 = 0;
                  if (v7)
                  {
                    v160 = v7;
                    do
                    {
                      v161 = *v26++;
                      v162 = (int)v161;
                      v163 = *v50++;
                      v164 = (int)v163;
                      if (v162)
                        v165 = v164;
                      else
                        v165 = a4;
                      *v74++ = v165;
                      --v160;
                    }
                    while (v160);
                  }
                  break;
                case 1:
                  if (a1)
                    v27 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v27 = 0;
                  if (a2)
                    v51 = *(double **)(a2 + 16);
                  else
                    v51 = 0;
                  if (a5)
                    v75 = (unint64_t *)*((_QWORD *)a5 + 2);
                  else
                    v75 = 0;
                  for (; v7; --v7)
                  {
                    v169 = *v27++;
                    v170 = (unint64_t)v169;
                    v171 = *v51++;
                    v172 = (unint64_t)v171;
                    if (v170)
                      v173 = v172;
                    else
                      v173 = a4;
                    *v75++ = v173;
                  }
                  break;
                case 0:
                  v14 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v38 = a2 ? *(double **)(a2 + 16) : 0;
                  for (i7 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v102 = *v14++;
                    v103 = v102;
                    v104 = *v38++;
                    v105 = v104;
                    if (v103 == 0.0)
                      v106 = (double)a4;
                    else
                      v106 = v105;
                    *i7++ = v106;
                  }
                  break;
              }
              break;
            case 0:
              switch(v9)
              {
                case 2:
                  if (a1)
                    v18 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v18 = 0;
                  if (a2)
                    v42 = *(double **)(a2 + 16);
                  else
                    v42 = 0;
                  if (a5)
                    v66 = (_BYTE *)*((_QWORD *)a5 + 2);
                  else
                    v66 = 0;
                  for (; v7; --v7)
                  {
                    v122 = *v18++;
                    v123 = (int)v122;
                    v124 = *v42++;
                    v125 = v124;
                    if (!v123)
                      v125 = *(double *)&a4;
                    *v66++ = (int)v125;
                  }
                  break;
                case 1:
                  if (a1)
                    v19 = (double *)*((_QWORD *)a1 + 2);
                  else
                    v19 = 0;
                  if (a2)
                    v43 = *(double **)(a2 + 16);
                  else
                    v43 = 0;
                  if (a5)
                    v67 = (_QWORD *)*((_QWORD *)a5 + 2);
                  else
                    v67 = 0;
                  for (; v7; --v7)
                  {
                    v126 = *v19++;
                    v127 = (unint64_t)v126;
                    v128 = *v43++;
                    v129 = v128;
                    if (!v127)
                      v129 = *(double *)&a4;
                    *v67++ = (unint64_t)v129;
                  }
                  break;
                case 0:
                  v10 = a1 ? (double *)*((_QWORD *)a1 + 2) : 0;
                  v34 = a2 ? *(double **)(a2 + 16) : 0;
                  for (i8 = a5 ? (double *)*((_QWORD *)a5 + 2) : 0; v7; --v7)
                  {
                    v82 = *v10++;
                    v83 = v82;
                    v84 = *v34++;
                    v85 = v84;
                    if (v83 == 0.0)
                      v86 = *(double *)&a4;
                    else
                      v86 = v85;
                    *i8++ = v86;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  return a5;
}

uint64_t std::deque<ProfileEvent>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<ProfileEvent *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_2BEFC(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  if (!*a1)
    operator delete[]();
  return (*a1)(a2);
}

void sub_2BF3C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_2BFC0(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_2BFC0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_2C2D4(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_2C3E8((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_40FC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_2C504(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2C618((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2C288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2C2D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_40FC(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_2C3E8(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_40FC(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_2C504(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_40FC(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_2C618(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_40FC(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_2C730(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *agxps_aps_parser_create(uint64_t *result)
{
  unsigned int **v1;
  unsigned __int8 v2;
  unsigned int gen;
  uint64_t variant;
  int rev;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int *(*v9)(unsigned int *);
  uint64_t v10;
  int v11;
  unsigned int *(*v12)(unsigned int *);
  uint64_t v13;
  int v14;
  unsigned int *(*v15)(unsigned int *);
  uint64_t v16;
  int v17;
  unsigned int *(*v18)(unsigned int *);
  uint64_t v19;
  int v20;
  unsigned int *(*v21)(unsigned int *);
  uint64_t v22;
  int v23;
  unsigned int *(*v24)(unsigned int *);
  uint64_t v25;
  int v26;
  unsigned int *(*v27)(unsigned int *);
  uint64_t v28;
  int v29;
  unsigned int *(*v30)(unsigned int *);
  uint64_t v31;
  int v32;
  unsigned int *(*v33)(unsigned int *);
  uint64_t v34;
  int v35;
  unsigned int *(*v36)(unsigned int *);
  uint64_t v37;
  int v38;
  unsigned int *(*v39)(unsigned int *);
  uint64_t v40;
  int v41;
  unsigned int *(*v42)(unsigned int *);
  uint64_t v43;
  int v44;
  unsigned int *(*v45)(unsigned int *);
  uint64_t v46;
  int v47;
  unsigned int *(*v48)(unsigned int *);
  uint64_t v49;
  int v50;
  unsigned int *(*v51)(unsigned int *);
  uint64_t v52;
  int v53;
  unsigned int *(*v54)(unsigned int *);
  uint64_t v55;
  int v56;
  unsigned int *(*v57)(unsigned int *);
  uint64_t v58;
  int v59;
  unsigned int *(*v60)(unsigned int *);
  uint64_t v61;
  int v62;
  unsigned int *(*v63)(unsigned int *);
  uint64_t v64;
  int v65;
  unsigned int *(*v66)(unsigned int *);

  if (result)
  {
    v1 = (unsigned int **)result;
    if (!agxps_gpu_is_valid(*result))
      return 0;
    v2 = atomic_load((unsigned __int8 *)&qword_751FD8);
    if ((v2 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_751FD8))
      {
        v7 = 0x30000000FLL;
        v8 = 1;
        v9 = sub_2D2D8;
        v10 = 0x30000000FLL;
        v11 = 3;
        v12 = sub_60BC8;
        v13 = 0x30000000FLL;
        v14 = 5;
        v15 = sub_16B6EC;
        v16 = 0x40000000FLL;
        v17 = 1;
        v18 = sub_60BC8;
        v19 = 0x40000000FLL;
        v20 = 3;
        v21 = sub_16B6EC;
        v22 = 0x40000000FLL;
        v23 = 4;
        v24 = sub_16B6EC;
        v25 = 0x50000000FLL;
        v26 = 1;
        v27 = sub_60BC8;
        v28 = 0x50000000FLL;
        v29 = 3;
        v30 = sub_16B6EC;
        v31 = 0x50000000FLL;
        v32 = 4;
        v33 = sub_16B6EC;
        v34 = 0x60000000FLL;
        v35 = 1;
        v36 = sub_16B6EC;
        v37 = 0x60000000FLL;
        v38 = 3;
        v39 = sub_16B6EC;
        v40 = 0x200000010;
        v41 = 1;
        v42 = sub_60BC8;
        v43 = 0x200000010;
        v44 = 3;
        v45 = sub_16B6EC;
        v46 = 0x200000010;
        v47 = 4;
        v48 = sub_16B6EC;
        v49 = 0x300000010;
        v50 = 1;
        v51 = sub_11FD20;
        v52 = 0x300000010;
        v53 = 3;
        v54 = sub_11FD20;
        v55 = 0x400000010;
        v56 = 1;
        v57 = sub_11FD20;
        v58 = 0x500000010;
        v59 = 1;
        v60 = sub_11FD20;
        v61 = 0x200000011;
        v62 = 1;
        v63 = sub_11FD20;
        v64 = 0x300000011;
        v65 = 1;
        v66 = sub_92EA0;
        sub_2CD2C((uint64_t)&unk_751FC0, (int *)&v7, 20);
        __cxa_atexit((void (*)(void *))sub_2CA08, &unk_751FC0, &dword_0);
        __cxa_guard_release(&qword_751FD8);
      }
    }
    gen = agxps_gpu_get_gen(*v1);
    variant = agxps_gpu_get_variant((uint64_t)*v1);
    rev = agxps_gpu_get_rev((uint64_t)*v1);
    v7 = gen | (unint64_t)(variant << 32);
    v8 = rev;
    v6 = sub_2D134((uint64_t)&unk_751FC0, (int *)&v7);
    if (v6 == (uint64_t *)&unk_751FC8)
      return 0;
    else
      return (uint64_t *)((uint64_t (*)(unsigned int **))v6[6])(v1);
  }
  return result;
}

void sub_2C9E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_751FD8);
  _Unwind_Resume(a1);
}

uint64_t sub_2CA08(uint64_t a1)
{
  sub_2D0F4(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t agxps_aps_parser_destroy(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t agxps_aps_parser_set_counter_filter(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v3;
  void *__p;
  void *v6;
  uint64_t v7;

  v3 = a1;
  if (a1)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    sub_2D220(&__p, a2, (uint64_t)a2 + 8 * a3, a3);
    v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 8))(v3, &__p);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  return v3;
}

void sub_2CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t (***agxps_aps_parser_parse(uint64_t (***result)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5))(_QWORD)
{
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  *a5 = 1;
  return result;
}

uint64_t agxps_aps_profile_data_get_usc_timestamps(uint64_t a1, _QWORD *__dst, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  result = 0;
  if (a1 && __dst)
  {
    v6 = *(_QWORD *)(a1 + 26072);
    v7 = *(_QWORD *)(a1 + 26064);
    if (a4 + a3 <= (unint64_t)((v6 - v7) >> 3))
    {
      v8 = (_QWORD *)(v7 + 8 * a3);
      if (a4 == 1)
        *__dst = *v8;
      else
        memcpy(__dst, v8, 8 * a4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_kick_start(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  result = 0;
  if (a1 && a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (a4 + a3 <= (unint64_t)((*(_QWORD *)(a1 + 16) - v6) >> 3))
    {
      if (a4)
      {
        v7 = 8 * a4;
        v8 = (uint64_t *)(v6 + 8 * a3);
        do
        {
          v9 = *v8++;
          *a2++ = v9;
          v7 -= 8;
        }
        while (v7);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_kick_software_id(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  result = 0;
  if (a1 && a2)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (a4 + a3 <= (unint64_t)((*(_QWORD *)(a1 + 64) - v6) >> 3))
    {
      if (a4)
      {
        v7 = 8 * a4;
        v8 = (uint64_t *)(v6 + 8 * a3);
        do
        {
          v9 = *v8++;
          *a2++ = v9;
          v7 -= 8;
        }
        while (v7);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_kicks_num(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3;
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_num(uint64_t result)
{
  if (result)
    return (uint64_t)(*(_QWORD *)(result + 25984) - *(_QWORD *)(result + 25976)) >> 3;
  return result;
}

_QWORD *agxps_aps_profile_data_get_counter_index(_QWORD *result)
{
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 16))(*result);
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_values_by_index(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t result;

  result = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 8) == a3)
    {
      return 0;
    }
    else
    {
      *a2 = *(_QWORD *)(a1 + 24 * a3 + 776);
      return 1;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_group_metadata_by_index(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  result = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(*a1 + 8) == (_DWORD)a3)
    {
      return 0;
    }
    else
    {
      *a2 = a1[3 * (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a3) + 3097];
      return 1;
    }
  }
  return result;
}

uint64_t agxps_aps_profile_data_get_counter_values_num_by_index(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t result;

  result = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 8) == a3)
    {
      return 0;
    }
    else
    {
      *a2 = (uint64_t)(*(_QWORD *)(a1 + 24 * a3 + 784) - *(_QWORD *)(a1 + 24 * a3 + 776)) >> 3;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2CD2C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_2CDAC((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_2CD94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2D0F4(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_2CDAC(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = sub_2CE38(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_2CE38(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  int v23;
  int v24;
  int v25;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_3;
  v5 = *a5;
  v6 = *((_DWORD *)a2 + 8);
  if (*a5 < v6)
    goto LABEL_3;
  if (v6 < v5)
  {
LABEL_9:
    v10 = a2[1];
    if (v10)
    {
      v11 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        v13 = *a4 == v22;
        v22 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      v23 = *((_DWORD *)a4 + 8);
      if (v5 >= v23)
      {
        if (v23 < v5)
          return sub_2D05C((uint64_t)a1, a3, a5);
        v24 = a5[1];
        v25 = *((_DWORD *)a4 + 9);
        if (v24 >= v25 && (v25 < v24 || a5[2] >= *((_DWORD *)a4 + 10)))
          return sub_2D05C((uint64_t)a1, a3, a5);
      }
    }
    if (v10)
    {
      *a3 = (uint64_t *)a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return (uint64_t *)a4;
  }
  v16 = a5[1];
  v17 = *((_DWORD *)a2 + 9);
  if (v16 >= v17 && (v17 < v16 || a5[2] >= *((_DWORD *)a2 + 10)))
  {
    v18 = *((_DWORD *)a2 + 9);
    v19 = a5[1];
    if (v18 >= v19 && (v19 < v18 || *((_DWORD *)a2 + 10) >= a5[2]))
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  v7 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (uint64_t *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    v14 = *((_DWORD *)v9 + 8);
    if (v14 >= *a5)
    {
      if (*a5 < v14)
        return sub_2D05C((uint64_t)a1, a3, a5);
      v20 = *((_DWORD *)v9 + 9);
      v21 = a5[1];
      if (v20 >= v21 && (v21 < v20 || *((_DWORD *)v9 + 10) >= a5[2]))
        return sub_2D05C((uint64_t)a1, a3, a5);
    }
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<AccelerationStructureViewer::Geometry *>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_2D05C(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    while (1)
    {
      while (1)
      {
        v9 = v4;
        v10 = *((_DWORD *)v4 + 8);
        if (v6 >= v10)
          break;
LABEL_4:
        v4 = (uint64_t *)*v9;
        result = v9;
        if (!*v9)
          goto LABEL_17;
      }
      if (v10 >= v6)
      {
        v11 = *((_DWORD *)v9 + 9);
        if (v7 < v11 || v11 >= v7 && v8 < *((_DWORD *)v9 + 10))
          goto LABEL_4;
        v12 = *((_DWORD *)v9 + 9);
        if (v12 >= v7 && (v7 < v12 || *((_DWORD *)v9 + 10) >= v8))
          goto LABEL_17;
      }
      result = v9 + 1;
      v4 = (uint64_t *)v9[1];
      if (!v4)
        goto LABEL_17;
    }
  }
  v9 = result;
LABEL_17:
  *a2 = v9;
  return result;
}

void sub_2D0F4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_2D0F4(a1, *a2);
    sub_2D0F4(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_2D134(uint64_t a1, int *a2)
{
  uint64_t *v3;
  uint64_t *result;
  int v5;
  int v6;
  int v7;

  v3 = (uint64_t *)(a1 + 8);
  result = sub_2D1AC(a1, a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == result)
    return v3;
  v5 = *((_DWORD *)result + 8);
  if (*a2 < v5)
    return v3;
  if (v5 >= *a2)
  {
    v6 = a2[1];
    v7 = *((_DWORD *)result + 9);
    if (v6 < v7 || v7 >= v6 && a2[2] < *((_DWORD *)result + 10))
      return v3;
  }
  return result;
}

uint64_t *sub_2D1AC(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  int v5;
  int v6;
  int v7;
  int v8;

  result = a4;
  if (a3)
  {
    v5 = *a2;
    v6 = a2[1];
    while (1)
    {
      v7 = *((_DWORD *)a3 + 8);
      if (v7 >= v5)
      {
        if (v5 < v7)
          goto LABEL_6;
        v8 = *((_DWORD *)a3 + 9);
        if (v8 >= v6)
          break;
      }
      ++a3;
LABEL_7:
      a3 = (uint64_t *)*a3;
      if (!a3)
        return result;
    }
    if (v6 >= v8)
    {
      if (*((_DWORD *)a3 + 10) < a2[2])
        ++a3;
      else
        result = a3;
      goto LABEL_7;
    }
LABEL_6:
    result = a3;
    goto LABEL_7;
  }
  return result;
}

_QWORD *sub_2D220(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2D298(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2D27C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2D298(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_4074();
  result = (char *)sub_40FC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

unsigned int *sub_2D2D8(unsigned int *result)
{
  unsigned int *v1;
  uint8x8_t v2;
  uint8x8_t v3;
  uint8x8_t v5;

  if (result)
  {
    v1 = result;
    result = 0;
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F)
          operator new();
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_2D3A4(uint64_t a1, __int128 *a2)
{
  _BYTE *v3;
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int v22;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_7218B0;
  v3 = (_BYTE *)(a1 + 35148);
  v4 = *a2;
  v5 = a2[1];
  v6 = (_BYTE *)(a1 + 29904);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v7 = (_BYTE *)(a1 + 384);
  v8 = 128;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  do
  {
    *(v7 - 224) = 0;
    *v7 = 0;
    v7 += 232;
    --v8;
  }
  while (v8);
  v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    *v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  v10 = (_BYTE *)(a1 + 30336);
  v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    *v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  v12 = (_BYTE *)(a1 + 31048);
  v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    *v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    *v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  v15 = (_BYTE *)(a1 + 35276);
  v16 = 8;
  do
  {
    *(v15 - 12) = 0;
    *v15 = 0;
    v15 += 16;
    --v16;
  }
  while (v16);
  v17 = (_BYTE *)(a1 + 35404);
  v18 = 8;
  do
  {
    *(v17 - 12) = 0;
    *v17 = 0;
    v17 += 16;
    --v18;
  }
  while (v18);
  v19 = (_BYTE *)(a1 + 35528);
  v20 = 128;
  do
  {
    *(v19 - 8) = 0;
    *v19 = 0;
    v19 += 16;
    --v20;
  }
  while (v20);
  *(_OWORD *)(a1 + 35120) = 0u;
  bzero((void *)(a1 + 37568), 0x1830uLL);
  v21 = *(_DWORD *)(a1 + 28);
  if (v21 > 1023)
  {
    if (v21 > 4095)
    {
      if (v21 == 4096)
      {
        v22 = 6;
        goto LABEL_36;
      }
      if (v21 == 0x2000)
      {
        v22 = 7;
        goto LABEL_36;
      }
    }
    else
    {
      if (v21 == 1024)
      {
        v22 = 4;
        goto LABEL_36;
      }
      if (v21 == 2048)
      {
        v22 = 5;
        goto LABEL_36;
      }
    }
  }
  else if (v21 > 255)
  {
    if (v21 == 256)
    {
      v22 = 2;
      goto LABEL_36;
    }
    if (v21 == 512)
    {
      v22 = 3;
      goto LABEL_36;
    }
  }
  else
  {
    if (v21 == 64)
    {
      v22 = 0;
      goto LABEL_36;
    }
    if (v21 == 128)
    {
      v22 = 1;
LABEL_36:
      *(_DWORD *)(a1 + 100) = v22;
    }
  }
  return a1;
}

uint64_t sub_2D588(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 4];
    v6 = (uint64_t)*v5 + 272 * (v4 & 0xF);
    v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 272 * ((*(_DWORD *)(a1 + 40) + (int)v4) & 0xF);
    if (v6 != v7)
    {
      do
      {
        sub_3D1D8(v6);
        v6 += 272;
        if (v6 - (_QWORD)*v5 == 4352)
        {
          v8 = (uint64_t)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 8;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 16;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_2D6D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  char **v22;
  int v23;
  unint64_t v24;
  _WORD *v25;
  _WORD *v26;
  unsigned int v27;
  int v28;
  __int16 v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  int v43;
  unint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  NSObject *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  NSObject *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  BOOL v83;
  unsigned __int8 v84;
  char v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned int v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char *v111;
  unsigned int v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  NSObject *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  _QWORD *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  void **v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  NSObject *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  _QWORD *v195;
  uint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  void **v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  void **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  _QWORD *v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  char *v250;
  char *v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  void *v256;
  char *v257;
  char *v258;
  unint64_t v259;
  char *v260;
  int v261;
  uint64_t *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  _QWORD *v266;
  _DWORD *v267;
  unint64_t v268;
  _DWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  int v276;
  _QWORD *v277;
  __int16 *v278;
  unint64_t v279;
  _WORD *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  char *v286;
  _WORD *v287;
  char *v288;
  char *v289;
  __int16 v290;
  __int16 *v291;
  __int16 v292;
  _QWORD *v293;
  _DWORD *v294;
  unint64_t v295;
  _DWORD *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  int v303;
  _QWORD *v304;
  _QWORD *v305;
  unint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t *v319;
  unint64_t v320;
  _QWORD *v321;
  void **v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t *v328;
  char *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  void **v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  char *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  char *v349;
  _QWORD *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  unint64_t v357;
  _QWORD *v358;
  void **v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  _QWORD *v365;
  char *v366;
  char *v367;
  uint64_t v368;
  _QWORD *v369;
  _DWORD *v370;
  unint64_t v371;
  _DWORD *v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  char *v378;
  int v379;
  _QWORD *v380;
  _WORD *v381;
  unint64_t v382;
  _WORD *v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  __int16 v391;
  _QWORD *v392;
  _DWORD *v393;
  unint64_t v394;
  _DWORD *v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  char *v400;
  char *v401;
  int v402;
  _QWORD *v403;
  _QWORD *v404;
  unint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  char *v411;
  char *v412;
  uint64_t v413;
  _QWORD *v414;
  _QWORD *v415;
  unint64_t v416;
  _QWORD *v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  char *v422;
  char *v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  unint64_t v441;
  char *v442;
  char *v443;
  uint64_t v444;
  char *v445;
  char *v446;
  uint64_t v447;
  char *v448;
  char *v449;
  uint64_t v450;
  char *v451;
  unsigned int v452;
  uint64_t v453;
  uint64_t v454;
  char *v455;
  int64_t v456;
  uint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  __int128 v467;
  __int128 v468;
  int v469;
  uint64_t *v470;
  uint64_t *v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unint64_t v480;
  uint64_t v481;
  char *v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  char *v496;
  void *v497;
  char *v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t *v506;
  unint64_t v507;
  char *v508;
  char *v509;
  char *v510;
  char *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  char *v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t *v526;
  uint64_t v527;
  char *v528;
  char *v529;
  uint64_t v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  char *v534;
  int64_t v535;
  unint64_t v536;
  unint64_t v537;
  char *v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  BOOL v544;
  unsigned int v545;
  unint64_t v547;
  uint64_t i;
  _QWORD *v549;
  uint64_t v550;
  uint64_t *v551;
  unint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t *v559;
  char *v560;
  char *v561;
  uint64_t v562;
  void *v563;
  char v564;
  uint64_t v565;
  unsigned int v566;
  unsigned int v567;
  uint64_t v568;
  uint64_t v569;
  _DWORD *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  char v577;
  uint64_t *v578;
  _BYTE *v579;
  uint64_t v580;
  unint64_t *v581;
  void **v582;
  uint64_t v583;
  uint64_t v586;
  uint64_t v587[4];
  uint64_t v588[4];
  uint64_t v589[4];
  uint64_t v590[4];
  uint64_t v591[4];
  uint64_t v592[4];
  uint64_t v593[4];
  uint64_t v594[4];
  uint64_t v595[4];
  uint64_t v596[4];
  uint64_t v597[4];
  uint64_t v598[4];
  uint64_t v599[4];
  uint64_t v600[4];
  uint64_t v601[4];
  uint64_t v602[4];
  uint64_t v603[3];
  uint64_t v604[3];
  uint64_t v605[3];
  uint64_t v606[3];
  uint64_t v607[3];
  uint64_t v608[3];
  uint64_t v609[3];
  uint64_t v610[3];
  uint64_t v611[3];
  uint64_t v612[3];
  uint64_t v613[3];
  uint64_t v614[3];
  uint64_t v615[3];
  uint64_t v616[3];
  uint64_t v617[3];
  uint64_t v618[3];
  char v619;
  unint64_t v620;
  _QWORD *v621;
  _BYTE __s1[88];
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 __p;
  __int128 v627;
  char v628;
  void *v629;
  void *v630;
  char v631;
  int v632;
  char v633;
  unsigned __int8 v634;
  unsigned int v635;
  __int128 v636;
  __int128 v637;

  if (a2 && a3)
  {
    v621 = 0;
    v8 = *(_QWORD *)(a1 + 128);
    if (!v8)
      operator new();
    v621 = *(_QWORD **)(a1 + 128);
    if (*(_BYTE *)(a1 + 92))
      v9 = *(_QWORD *)(a1 + 56);
    else
      v9 = 0;
    if (*(_BYTE *)(a1 + 93))
      v11 = *(_QWORD *)(a1 + 72);
    else
      v11 = 0;
    sub_F2D64(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    v583 = *(_QWORD *)(v8 + 26024);
    if (a5)
      *a5 = 0;
    v13 = 8 * a3;
    v620 = 0;
    if (8 * a3)
    {
      v577 = a4;
      v570 = a5;
      v14 = 0;
      v586 = 0;
      v582 = (void **)(a1 + 37568);
      v574 = a1 + 37616;
      v573 = a1 + 35120;
      v572 = a1 + 31040;
      v569 = a1 + 35520;
      v571 = a1 + 30944;
      v575 = a1 + 29856;
      v576 = a1 + 30304;
      v580 = a1 + 160;
      v581 = (unint64_t *)(a1 + 72);
      v578 = (uint64_t *)(a1 + 56);
      v579 = (_BYTE *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x2C0)
        {
          memset(__s1, 0, sizeof(__s1));
          v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!(_DWORD)v12)
            goto LABEL_880;
        }
        v619 = 0;
        v12 = sub_3D974((uint64_t)&v635, a2, &v620, &v619);
        if (!v619)
          break;
        if (v635 >= 0x11)
        {
          v17 = sub_11FD14();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(_QWORD *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          v12 = sub_11FD04();
          if ((_DWORD)v12)
            v12 = sub_11FD0C();
        }
        else
        {
          v15 = (_QWORD *)(v583 + 16 * v635);
          v16 = v15[1];
          ++*v15;
          v15[1] = v620 - v14 + v16;
        }
        switch(v635)
        {
          case 0u:
            v18 = (unsigned __int16)v636;
            if (v636 <= 0x7Fu)
            {
              v19 = v580 + 232 * v636;
              v20 = v621;
              if (!*(_BYTE *)(v19 + 224))
              {
                v21 = *(_BYTE *)(a1 + 8);
                *(_QWORD *)__s1 = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v636;
                v631 = 0;
                memset(&__s1[40], 0, 48);
                v623 = 0u;
                v624 = 0u;
                v625 = 0u;
                __p = 0u;
                v627 = 0u;
                v628 = 0;
                v632 = 0;
                v633 = v21;
                sub_43B90(v19, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v624 + 1))
                {
                  *(_QWORD *)&v625 = *((_QWORD *)&v624 + 1);
                  operator delete(*((void **)&v624 + 1));
                }
                if ((_QWORD)v623)
                {
                  *((_QWORD *)&v623 + 1) = v623;
                  operator delete((void *)v623);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v20 = v621;
                v18 = (unsigned __int16)v636;
              }
              v22 = (char **)(v19 + 40);
              sub_4607C((_QWORD *)(v19 + 40), v20);
              sub_461CC(v19 + 40);
              v23 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              v12 = v19 + 56;
              v24 = *(_QWORD *)(v19 + 56);
              v25 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v25 >= v24)
              {
                v176 = (char *)v25 - *v22;
                if (v176 <= -3)
                  sub_4074();
                v177 = v176 >> 1;
                v178 = v24 - (_QWORD)*v22;
                if (v178 <= (v176 >> 1) + 1)
                  v179 = v177 + 1;
                else
                  v179 = v178;
                if (v178 >= 0x7FFFFFFFFFFFFFFELL)
                  v180 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v180 = v179;
                if (v180)
                  v12 = (uint64_t)sub_43B60(v12, v180);
                else
                  v12 = 0;
                v287 = (_WORD *)(v12 + 2 * v177);
                *v287 = v23;
                v26 = v287 + 1;
                v289 = *(char **)(v19 + 40);
                v288 = *(char **)(v19 + 48);
                if (v288 != v289)
                {
                  do
                  {
                    v290 = *((_WORD *)v288 - 1);
                    v288 -= 2;
                    *--v287 = v290;
                  }
                  while (v288 != v289);
                  v288 = *v22;
                }
                *(_QWORD *)(v19 + 40) = v287;
                *(_QWORD *)(v19 + 48) = v26;
                *(_QWORD *)(v19 + 56) = v12 + 2 * v180;
                if (v288)
                  operator delete(v288);
              }
              else
              {
                *v25 = v23;
                v26 = v25 + 1;
              }
              *(_QWORD *)(v19 + 48) = v26;
            }
            goto LABEL_864;
          case 1u:
            v78 = *(unsigned int *)(a1 + 24);
            v79 = *(_QWORD *)(a1 + 72);
            if (v79 % v78)
            {
              v80 = (v79 + v78 - 1) / v78 * v78;
            }
            else
            {
              if (*(_QWORD *)(a1 + 80) == v79 && !*(_DWORD *)(a1 + 96) && *v579)
                goto LABEL_360;
              v80 = v79 + v78;
            }
            *v581 = v80;
            v150 = v621;
            v151 = (unint64_t *)v621[3259];
            v152 = v621[3260];
            if ((unint64_t)v151 >= v152)
            {
              v12 = v621[3258];
              v154 = ((uint64_t)v151 - v12) >> 3;
              if ((unint64_t)(v154 + 1) >> 61)
                sub_4074();
              v155 = v152 - v12;
              v156 = (uint64_t)(v152 - v12) >> 2;
              if (v156 <= v154 + 1)
                v156 = v154 + 1;
              if (v155 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v156;
              if (v157)
              {
                v158 = (char *)sub_40FC((uint64_t)(v621 + 3260), v157);
                v151 = (unint64_t *)v150[3259];
                v12 = v150[3258];
              }
              else
              {
                v158 = 0;
              }
              v247 = (unint64_t *)&v158[8 * v154];
              *v247 = v80;
              v153 = v247 + 1;
              while (v151 != (unint64_t *)v12)
              {
                v248 = *--v151;
                *--v247 = v248;
              }
              v150[3258] = v247;
              v150[3259] = v153;
              v150[3260] = &v158[8 * v157];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v151 = v80;
              v153 = v151 + 1;
            }
            v150[3259] = v153;
            if (!(v80 % v78))
              v150[3264] = ((((_QWORD)v153 - v150[3258]) << 29) - 0x100000000) | (((v150[3256]
                                                                                                  - v150[3255]) >> 3)
                                                                                  - 1);
LABEL_360:
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_864;
          case 2u:
            v47 = v621;
            v48 = v621[3259];
            v49 = v621[3258];
            if (v48 - v49 == 8 && !*(_QWORD *)(v48 - 8))
              v621[3259] = v49;
            v50 = *(_QWORD *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            v51 = sub_3D360(a1, (uint64_t)v47, v636 & 0xFFFFF, v50);
            v12 = sub_F33E4((uint64_t)v47, v579, *(unsigned int *)(a1 + 24), v581, v51);
            if (v51 < *(_QWORD *)(a1 + 72))
            {
              v52 = sub_11FD14();
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&dword_0, v52, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v53 = v621;
            v54 = *(unsigned int *)(a1 + 24);
            v55 = (unint64_t *)v621[3259];
            v56 = v621[3260];
            if ((unint64_t)v55 >= v56)
            {
              v12 = v621[3258];
              v140 = ((uint64_t)v55 - v12) >> 3;
              if ((unint64_t)(v140 + 1) >> 61)
                sub_4074();
              v141 = v56 - v12;
              v142 = (uint64_t)(v56 - v12) >> 2;
              if (v142 <= v140 + 1)
                v142 = v140 + 1;
              if (v141 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v142;
              if (v143)
              {
                v144 = (char *)sub_40FC((uint64_t)(v621 + 3260), v143);
                v55 = (unint64_t *)v53[3259];
                v12 = v53[3258];
              }
              else
              {
                v144 = 0;
              }
              v205 = (unint64_t *)&v144[8 * v140];
              *v205 = v51;
              v57 = v205 + 1;
              while (v55 != (unint64_t *)v12)
              {
                v206 = *--v55;
                *--v205 = v206;
              }
              v53[3258] = v205;
              v53[3259] = v57;
              v53[3260] = &v144[8 * v143];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v55 = v51;
              v57 = v55 + 1;
            }
            v53[3259] = v57;
            if (!(v51 % v54))
              v53[3264] = ((((_QWORD)v57 - v53[3258]) << 29) - 0x100000000) | (((v53[3256] - v53[3255]) >> 3)
                                                                               - 1);
            *(_QWORD *)(a1 + 72) = v51;
            *(_QWORD *)(a1 + 80) = v51;
            *(_DWORD *)(a1 + 88) = v636 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            v207 = v621;
            v208 = (uint64_t *)v621[3256];
            v209 = v621[3257];
            if ((unint64_t)v208 >= v209)
            {
              v12 = v621[3255];
              v211 = ((uint64_t)v208 - v12) >> 3;
              if ((unint64_t)(v211 + 1) >> 61)
                sub_4074();
              v212 = v209 - v12;
              v213 = (uint64_t)(v209 - v12) >> 2;
              if (v213 <= v211 + 1)
                v213 = v211 + 1;
              if (v212 >= 0x7FFFFFFFFFFFFFF8)
                v214 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v214 = v213;
              if (v214)
              {
                v215 = (char *)sub_40FC((uint64_t)(v621 + 3257), v214);
                v208 = (uint64_t *)v207[3256];
                v12 = v207[3255];
              }
              else
              {
                v215 = 0;
              }
              v216 = (uint64_t *)&v215[8 * v211];
              *v216 = v50;
              v210 = v216 + 1;
              while (v208 != (uint64_t *)v12)
              {
                v217 = *--v208;
                *--v216 = v217;
              }
              v207[3255] = v216;
              v207[3256] = v210;
              v207[3257] = &v215[8 * v214];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v208 = v50;
              v210 = v208 + 1;
            }
            v207[3256] = v210;
            *v578 = v50;
            v218 = v621;
            v219 = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                        - 1);
            v220 = (uint64_t *)v621[3262];
            v221 = v621[3263];
            if ((unint64_t)v220 >= v221)
            {
              v223 = (void **)(v621 + 3261);
              v224 = v621[3261];
              v225 = ((uint64_t)v220 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61)
                sub_4074();
              v226 = v221 - v224;
              v227 = v226 >> 2;
              if (v226 >> 2 <= (unint64_t)(v225 + 1))
                v227 = v225 + 1;
              if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
                v12 = (uint64_t)sub_40FC((uint64_t)(v621 + 3263), v228);
              else
                v12 = 0;
              v243 = (uint64_t *)(v12 + 8 * v225);
              *v243 = v219;
              v222 = v243 + 1;
              v244 = (char *)v218[3262];
              v245 = (char *)v218[3261];
              if (v244 != v245)
              {
                do
                {
                  v246 = *((_QWORD *)v244 - 1);
                  v244 -= 8;
                  *--v243 = v246;
                }
                while (v244 != v245);
                v244 = (char *)*v223;
              }
              v218[3261] = v243;
              v218[3262] = v222;
              v218[3263] = v12 + 8 * v228;
              if (v244)
                operator delete(v244);
            }
            else
            {
              *v220 = v219;
              v222 = v220 + 1;
            }
            v218[3262] = v222;
            goto LABEL_864;
          case 3u:
            v63 = v621;
            v64 = v621[3256];
            v65 = v621[3255];
            if (v64 - v65 == 8 && !*(_QWORD *)(v64 - 8))
              v621[3256] = v65;
            v66 = v63[3259];
            v67 = v63[3258];
            if (v66 - v67 == 8 && !*(_QWORD *)(v66 - 8))
              v63[3259] = v67;
            v68 = *((_QWORD *)&v636 + 1) & 0x3FFFFFFFFFFFFFLL;
            v69 = sub_3D360(a1, (uint64_t)v63, v636 & 0xFFFFF, *((_QWORD *)&v636 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F338C((uint64_t)v63, (_BYTE *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v578, v68);
            v12 = sub_F33E4((uint64_t)v621, v579, *(unsigned int *)(a1 + 24), v581, v69);
            if ((*((_QWORD *)&v636 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(_QWORD *)(a1 + 56))
            {
              v70 = sub_11FD14();
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&dword_0, v70, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v71 = v621;
            v72 = *((_QWORD *)&v636 + 1) & 0x3FFFFFFFFFFFFFLL;
            v73 = (uint64_t *)v621[3256];
            v74 = v621[3257];
            if ((unint64_t)v73 >= v74)
            {
              v12 = v621[3255];
              v145 = ((uint64_t)v73 - v12) >> 3;
              if ((unint64_t)(v145 + 1) >> 61)
                sub_4074();
              v146 = v74 - v12;
              v147 = (uint64_t)(v74 - v12) >> 2;
              if (v147 <= v145 + 1)
                v147 = v145 + 1;
              if (v146 >= 0x7FFFFFFFFFFFFFF8)
                v148 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v148 = v147;
              if (v148)
              {
                v149 = (char *)sub_40FC((uint64_t)(v621 + 3257), v148);
                v73 = (uint64_t *)v71[3256];
                v12 = v71[3255];
              }
              else
              {
                v149 = 0;
              }
              v229 = (uint64_t *)&v149[8 * v145];
              *v229 = v72;
              v75 = v229 + 1;
              while (v73 != (uint64_t *)v12)
              {
                v230 = *--v73;
                *--v229 = v230;
              }
              v71[3255] = v229;
              v71[3256] = v75;
              v71[3257] = &v149[8 * v148];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v73 = v72;
              v75 = v73 + 1;
            }
            v71[3256] = v75;
            v231 = *v581;
            if (v69 <= *v581)
            {
              if (v69 >= *v581)
                goto LABEL_483;
              *(_QWORD *)(a1 + 80) = v231;
              v237 = (v636 & 0xFFFFF) + v69 - v231;
            }
            else
            {
              v232 = v621;
              v233 = *(unsigned int *)(a1 + 24);
              v234 = (unint64_t *)v621[3259];
              v235 = v621[3260];
              if ((unint64_t)v234 >= v235)
              {
                v12 = v621[3258];
                v238 = ((uint64_t)v234 - v12) >> 3;
                if ((unint64_t)(v238 + 1) >> 61)
                  sub_4074();
                v239 = v235 - v12;
                v240 = (uint64_t)(v235 - v12) >> 2;
                if (v240 <= v238 + 1)
                  v240 = v238 + 1;
                if (v239 >= 0x7FFFFFFFFFFFFFF8)
                  v241 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v241 = v240;
                if (v241)
                {
                  v242 = (char *)sub_40FC((uint64_t)(v621 + 3260), v241);
                  v234 = (unint64_t *)v232[3259];
                  v12 = v232[3258];
                }
                else
                {
                  v242 = 0;
                }
                v315 = (unint64_t *)&v242[8 * v238];
                *v315 = v69;
                v236 = v315 + 1;
                while (v234 != (unint64_t *)v12)
                {
                  v316 = *--v234;
                  *--v315 = v316;
                }
                v232[3258] = v315;
                v232[3259] = v236;
                v232[3260] = &v242[8 * v241];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v234 = v69;
                v236 = v234 + 1;
              }
              v232[3259] = v236;
              if (!(v69 % v233))
                v232[3264] = ((((_QWORD)v236 - v232[3258]) << 29) - 0x100000000) | (((v232[3256] - v232[3255]) >> 3)
                                                                                    - 1);
              *(_QWORD *)(a1 + 72) = v69;
              *(_QWORD *)(a1 + 80) = v69;
              v237 = v636 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v237;
LABEL_483:
            *(_DWORD *)(a1 + 96) = 0;
            v317 = v621;
            v318 = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                        - 1);
            v319 = (uint64_t *)v621[3262];
            v320 = v621[3263];
            if ((unint64_t)v319 >= v320)
            {
              v322 = (void **)(v621 + 3261);
              v323 = v621[3261];
              v324 = ((uint64_t)v319 - v323) >> 3;
              if ((unint64_t)(v324 + 1) >> 61)
                sub_4074();
              v325 = v320 - v323;
              v326 = v325 >> 2;
              if (v325 >> 2 <= (unint64_t)(v324 + 1))
                v326 = v324 + 1;
              if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFF8)
                v327 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v327 = v326;
              if (v327)
                v12 = (uint64_t)sub_40FC((uint64_t)(v621 + 3263), v327);
              else
                v12 = 0;
              v328 = (uint64_t *)(v12 + 8 * v324);
              *v328 = v318;
              v321 = v328 + 1;
              v329 = (char *)v317[3262];
              v330 = (char *)v317[3261];
              if (v329 != v330)
              {
                do
                {
                  v331 = *((_QWORD *)v329 - 1);
                  v329 -= 8;
                  *--v328 = v331;
                }
                while (v329 != v330);
                v329 = (char *)*v322;
              }
              v317[3261] = v328;
              v317[3262] = v321;
              v317[3263] = v12 + 8 * v327;
              if (v329)
                operator delete(v329);
            }
            else
            {
              *v319 = v318;
              v321 = v319 + 1;
            }
            v317[3262] = v321;
            v332 = *((_QWORD *)&v636 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(_QWORD *)(a1 + 56) = *((_QWORD *)&v636 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(_QWORD *)(a1 + 64) = v332;
            *(_DWORD *)(a1 + 100) = v637;
            goto LABEL_864;
          case 4u:
            v30 = sub_11FD14();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(_QWORD *)&__s1[20] = "false";
              _os_log_error_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            v12 = sub_11FD04();
            if ((_DWORD)v12)
              v12 = sub_11FD0C();
            goto LABEL_864;
          case 5u:
            v81 = v636;
            v82 = BYTE4(v636);
            v83 = (_DWORD)v636 == 1;
            v84 = BYTE4(v636) & 7 | 0x60;
            if ((_DWORD)v636 != 1)
              v84 = BYTE4(v636);
            if ((v84 & 0x80) != 0)
              goto LABEL_864;
            v85 = BYTE5(v636);
            v86 = DWORD2(v636);
            v87 = v84;
            v88 = v84;
            v89 = v580 + 232 * v84;
            if (!*(_BYTE *)(v89 + 224))
            {
              v90 = *(_BYTE *)(a1 + 8);
              *(_QWORD *)__s1 = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v84;
              v631 = 0;
              memset(&__s1[40], 0, 48);
              v623 = 0u;
              v624 = 0u;
              v625 = 0u;
              __p = 0u;
              v627 = 0u;
              v628 = 0;
              v632 = 0;
              v633 = v90;
              sub_43B90(v89, (uint64_t)__s1);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((_QWORD *)&v624 + 1))
              {
                *(_QWORD *)&v625 = *((_QWORD *)&v624 + 1);
                operator delete(*((void **)&v624 + 1));
              }
              if ((_QWORD)v623)
              {
                *((_QWORD *)&v623 + 1) = v623;
                operator delete((void *)v623);
              }
              if (*(_QWORD *)&__s1[64])
              {
                *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              v12 = *(_QWORD *)&__s1[40];
              if (*(_QWORD *)&__s1[40])
              {
                *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
              if (!*(_BYTE *)(v89 + 224))
                sub_70A0();
            }
            *(_BYTE *)(v89 + 215) = v83;
            *(_BYTE *)(v89 + 214) = 1;
            *(_BYTE *)(v89 + 36) = v87;
            if (v81)
            {
              v91 = *(_QWORD *)(a1 + 104);
              if (v91 == -1)
                v91 = 0;
              *(_QWORD *)(a1 + 104) = v91 + 1;
              *(_QWORD *)(v89 + 16) = v91;
              v92 = v569 + 16 * (v85 & 0x7F);
              *(_QWORD *)v92 = v91;
              *(_BYTE *)(v92 + 8) = 1;
              v82 = *(unsigned __int8 *)(v89 + 36);
            }
            else
            {
              *(_BYTE *)(v89 + 36) = v82;
              if (v86 <= 7)
              {
                v181 = *(_DWORD *)(v571 + 12 * v86);
                *(_DWORD *)(v89 + 208) = v181;
                if (v181 <= 7)
                {
                  v182 = v575 + 56 * v181;
                  if (*(_BYTE *)(v182 + 48))
                    *(_DWORD *)(v89 + 32) = *(_DWORD *)(v182 + 24);
                }
                v183 = v569 + 16 * (*(_BYTE *)(v571 + 12 * v86 + 8) & 0x7F);
                if (*(_BYTE *)(v183 + 8))
                  *(_QWORD *)(v89 + 16) = *(_QWORD *)v183;
                if (v86 - 4 <= 2)
                {
                  v184 = v576 + 40 * (v86 - 4);
                  if (*(_BYTE *)(v184 + 32))
                    *(_QWORD *)(v89 + 24) = *(_QWORD *)(v184 + 16);
                }
              }
            }
            if (v82 < 0x60)
              goto LABEL_257;
            if (v82 >= 0x68)
            {
              if (v82 < 0x98)
                goto LABEL_864;
            }
            else if (*(_BYTE *)(v89 + 215))
            {
              goto LABEL_864;
            }
LABEL_257:
            v185 = (*(_DWORD *)(v89 + 208) - 5) >= 0xFFFFFFFE && *(_BYTE *)(v89 + 216) == 0;
            if (!v185 && *(_QWORD *)(v574 + 48 * v88 + 40))
            {
              v186 = v574 + 48 * v88;
              v188 = *(_QWORD *)(v186 + 8);
              v187 = (_QWORD *)(v186 + 8);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v188 + ((v187[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v187[3] & 0x1FFLL))
                            + 32))
              {
                v189 = sub_11FD14();
                if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(_QWORD *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&dword_0, v189, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_11FD04())
                  sub_11FD0C();
              }
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v187 + ((v187[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v187[3] & 0x1FFLL))
                       + 32) = 1;
              *(_BYTE *)(v89 + 213) = 1;
              sub_43D70(a1, v621);
            }
            goto LABEL_864;
          case 6u:
            sub_3D750(a1, v621, v636, 0);
            goto LABEL_864;
          case 7u:
            if (DWORD1(v636) == 1)
            {
              v76 = (*((_QWORD *)&v636 + 1) >> 5) & 0x7FFFFFFFFFFLL;
              v77 = v572 + 16 * (BYTE8(v636) & 0x1F);
              *(_QWORD *)v77 = v76;
              *(_BYTE *)(v77 + 8) = 1;
            }
            else
            {
              if (BYTE8(v636) == 255)
                goto LABEL_864;
              v134 = v572 + 16 * BYTE8(v636);
              if (!*(_BYTE *)(v134 + 8))
                goto LABEL_864;
              v76 = *(_QWORD *)v134;
            }
            if (((char)v636 & 0x80000000) == 0)
            {
              v135 = v580 + 232 * v636;
              if (!*(_BYTE *)(v135 + 224))
              {
                v136 = *(_BYTE *)(a1 + 8);
                *(_QWORD *)__s1 = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v636;
                v631 = 0;
                memset(&__s1[40], 0, 48);
                v623 = 0u;
                v624 = 0u;
                v625 = 0u;
                __p = 0u;
                v627 = 0u;
                v628 = 0;
                v632 = 0;
                v633 = v136;
                sub_43B90(v135, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v624 + 1))
                {
                  *(_QWORD *)&v625 = *((_QWORD *)&v624 + 1);
                  operator delete(*((void **)&v624 + 1));
                }
                if ((_QWORD)v623)
                {
                  *((_QWORD *)&v623 + 1) = v623;
                  operator delete((void *)v623);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                v12 = *(_QWORD *)&__s1[40];
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              v137 = *(_QWORD *)(v135 + 80);
              v138 = *(uint64_t **)(v135 + 72);
              if ((unint64_t)v138 >= v137)
              {
                v12 = *(_QWORD *)(v135 + 64);
                v190 = ((uint64_t)v138 - v12) >> 3;
                if ((unint64_t)(v190 + 1) >> 61)
                  sub_4074();
                v191 = v137 - v12;
                v192 = (uint64_t)(v137 - v12) >> 2;
                if (v192 <= v190 + 1)
                  v192 = v190 + 1;
                if (v191 >= 0x7FFFFFFFFFFFFFF8)
                  v193 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v193 = v192;
                if (v193)
                {
                  v194 = (char *)sub_40FC(v135 + 80, v193);
                  v12 = *(_QWORD *)(v135 + 64);
                  v138 = *(uint64_t **)(v135 + 72);
                }
                else
                {
                  v194 = 0;
                }
                v333 = (uint64_t *)&v194[8 * v190];
                *v333 = v76;
                v139 = v333 + 1;
                while (v138 != (uint64_t *)v12)
                {
                  v334 = *--v138;
                  *--v333 = v334;
                }
                *(_QWORD *)(v135 + 64) = v333;
                *(_QWORD *)(v135 + 72) = v139;
                *(_QWORD *)(v135 + 80) = &v194[8 * v193];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v138 = v76;
                v139 = v138 + 1;
              }
              *(_QWORD *)(v135 + 72) = v139;
            }
            goto LABEL_864;
          case 8u:
            v110 = (_QWORD *)(a1 + 37568);
            v111 = *(char **)(a1 + 37584);
            v112 = v636;
            v113 = *(char **)(a1 + 37576);
            v114 = v111 - v113;
            *(_OWORD *)__s1 = v636;
            *(_OWORD *)&__s1[16] = v637;
            __s1[32] = 0;
            __s1[40] = 0;
            v634 = 0;
            if (v111 == v113)
              v115 = 0;
            else
              v115 = 2 * (v111 - v113) - 1;
            v116 = *(_QWORD *)(a1 + 37600);
            if (v115 != *(_QWORD *)(a1 + 37608) + v116)
              goto LABEL_751;
            v117 = v116 >= 0x10;
            v118 = v116 - 16;
            if (v117)
            {
              v110 = (_QWORD *)(a1 + 37568);
              *(_QWORD *)(a1 + 37600) = v118;
              v121 = *(_QWORD *)v113;
              v120 = v113 + 8;
              v119 = v121;
              *(_QWORD *)(a1 + 37576) = v120;
              if (v111 == *(char **)(a1 + 37592))
              {
                v122 = (char *)*v582;
                if (v120 <= *v582)
                {
                  if (v111 == v122)
                    v342 = 1;
                  else
                    v342 = (v111 - v122) >> 2;
                  if (v342 >> 61)
LABEL_922:
                    sub_4130();
                  v343 = (char *)operator new(8 * v342);
                  v344 = &v343[8 * (v342 >> 2)];
                  v345 = v111 - v120;
                  v185 = v111 == v120;
                  v111 = v344;
                  if (!v185)
                  {
                    v111 = &v344[v345 & 0xFFFFFFFFFFFFFFF8];
                    v346 = 8 * (v345 >> 3);
                    v347 = &v343[8 * (v342 >> 2)];
                    do
                    {
                      v348 = *(_QWORD *)v120;
                      v120 += 8;
                      *(_QWORD *)v347 = v348;
                      v347 += 8;
                      v346 -= 8;
                    }
                    while (v346);
                  }
                  v110 = (_QWORD *)(a1 + 37568);
                  *v582 = v343;
                  *(_QWORD *)(a1 + 37576) = v344;
                  *(_QWORD *)(a1 + 37584) = v111;
                  *(_QWORD *)(a1 + 37592) = &v343[8 * v342];
                  if (v122)
                  {
                    operator delete(v122);
                    v111 = *(char **)(a1 + 37584);
                  }
                }
                else
                {
                  v123 = (v120 - (_BYTE *)*v582) >> 3;
                  if (v123 >= -1)
                    v124 = v123 + 1;
                  else
                    v124 = v123 + 2;
                  v125 = &v120[-8 * (v124 >> 1)];
                  v126 = v111 - v120;
                  v110 = (_QWORD *)(a1 + 37568);
                  if (v111 != v120)
                  {
                    memmove(&v120[-8 * (v124 >> 1)], v120, v111 - v120);
                    v111 = *(char **)(a1 + 37576);
                  }
                  v127 = &v111[-8 * (v124 >> 1)];
                  v111 = &v125[v126];
                  *(_QWORD *)(a1 + 37576) = v127;
                  *(_QWORD *)(a1 + 37584) = &v125[v126];
                }
              }
              *(_QWORD *)v111 = v119;
              goto LABEL_750;
            }
            v170 = v114 >> 3;
            v171 = *(char **)(a1 + 37592);
            v172 = (char *)*v582;
            v173 = v171 - (_BYTE *)*v582;
            if (v114 >> 3 < (unint64_t)(v173 >> 3))
            {
              v174 = operator new(0x1100uLL);
              v175 = v174;
              if (v171 == v111)
              {
                if (v113 == v172)
                {
                  if (v111 == v113)
                    v441 = 1;
                  else
                    v441 = (v171 - v113) >> 2;
                  if (v441 >> 61)
                    goto LABEL_922;
                  v442 = (char *)operator new(8 * v441);
                  v349 = &v442[(2 * v441 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v443 = v349;
                  if (v111 != v113)
                  {
                    v444 = 8 * v170;
                    v445 = &v442[(2 * v441 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v446 = v113;
                    v443 = &v349[8 * v170];
                    do
                    {
                      v447 = *(_QWORD *)v446;
                      v446 += 8;
                      *(_QWORD *)v445 = v447;
                      v445 += 8;
                      v444 -= 8;
                    }
                    while (v444);
                  }
                  v350 = (_QWORD *)(a1 + 37568);
                  *v582 = v442;
                  *(_QWORD *)(a1 + 37576) = v349;
                  *(_QWORD *)(a1 + 37584) = v443;
                  *(_QWORD *)(a1 + 37592) = &v442[8 * v441];
                  if (v113)
                  {
                    operator delete(v113);
                    v349 = *(char **)(a1 + 37576);
                  }
                }
                else
                {
                  v349 = v113;
                  v350 = (_QWORD *)(a1 + 37568);
                }
                *((_QWORD *)v349 - 1) = v175;
                v449 = (char *)v350[1];
                v448 = (char *)v350[2];
                v350[1] = v449 - 8;
                v450 = *((_QWORD *)v449 - 1);
                v350[1] = v449;
                if (v448 == (char *)v350[3])
                {
                  v451 = (char *)*v582;
                  if (v449 <= *v582)
                  {
                    if (v448 == v451)
                      v458 = 1;
                    else
                      v458 = (v448 - v451) >> 2;
                    if (v458 >> 61)
                      goto LABEL_922;
                    v459 = (char *)operator new(8 * v458);
                    v460 = &v459[8 * (v458 >> 2)];
                    v461 = v448 - v449;
                    v185 = v448 == v449;
                    v448 = v460;
                    if (!v185)
                    {
                      v448 = &v460[v461 & 0xFFFFFFFFFFFFFFF8];
                      v462 = 8 * (v461 >> 3);
                      v463 = &v459[8 * (v458 >> 2)];
                      do
                      {
                        v464 = *(_QWORD *)v449;
                        v449 += 8;
                        *(_QWORD *)v463 = v464;
                        v463 += 8;
                        v462 -= 8;
                      }
                      while (v462);
                    }
                    *v582 = v459;
                    *(_QWORD *)(a1 + 37576) = v460;
                    *(_QWORD *)(a1 + 37584) = v448;
                    *(_QWORD *)(a1 + 37592) = &v459[8 * v458];
                    if (v451)
                    {
                      operator delete(v451);
                      v448 = *(char **)(a1 + 37584);
                    }
                  }
                  else
                  {
                    v452 = v112;
                    v453 = (v449 - (_BYTE *)*v582) >> 3;
                    if (v453 >= -1)
                      v454 = v453 + 1;
                    else
                      v454 = v453 + 2;
                    v455 = &v449[-8 * (v454 >> 1)];
                    v456 = v448 - v449;
                    if (v448 == v449)
                    {
                      v457 = a1 + 37568;
                    }
                    else
                    {
                      memmove(&v449[-8 * (v454 >> 1)], v449, v448 - v449);
                      v457 = a1 + 37568;
                      v449 = *(char **)(a1 + 37576);
                    }
                    v448 = &v455[v456];
                    *(_QWORD *)(v457 + 8) = &v449[-8 * (v454 >> 1)];
                    *(_QWORD *)(v457 + 16) = &v455[v456];
                    v112 = v452;
                  }
                }
                *(_QWORD *)v448 = v450;
              }
              else
              {
                *(_QWORD *)v111 = v174;
              }
              v110 = (_QWORD *)(a1 + 37568);
LABEL_750:
              v110[2] += 8;
              goto LABEL_751;
            }
            v253 = v173 >> 2;
            if (v171 == v172)
              v254 = 1;
            else
              v254 = v253;
            if (v254 >> 61)
              goto LABEL_922;
            v255 = (char *)operator new(8 * v254);
            v566 = v112;
            v256 = operator new(0x1100uLL);
            v257 = &v255[8 * v170];
            v258 = &v255[8 * v254];
            if (v170 == v254)
            {
              if (v114 < 1)
              {
                if (v111 == v113)
                  v425 = 1;
                else
                  v425 = v114 >> 2;
                if (v425 >> 61)
                  sub_4130();
                v426 = (char *)operator new(8 * v425);
                v257 = &v426[8 * (v425 >> 2)];
                v258 = &v426[8 * v425];
                operator delete(v255);
                v113 = *(char **)(a1 + 37576);
                v111 = *(char **)(a1 + 37584);
                v255 = v426;
              }
              else
              {
                v259 = v170 + 2;
                if (v170 >= -1)
                  v259 = v170 + 1;
                v257 -= 8 * (v259 >> 1);
              }
            }
            *(_QWORD *)v257 = v256;
            v427 = v257 + 8;
            if (v111 != v113)
            {
              do
              {
                if (v257 == v255)
                {
                  if (v427 >= v258)
                  {
                    if (v258 == v257)
                      v432 = 1;
                    else
                      v432 = (v258 - v257) >> 2;
                    if (v432 >> 61)
                      sub_4130();
                    v433 = (char *)operator new(8 * v432);
                    v255 = v433;
                    v428 = &v433[(2 * v432 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v429 = v428;
                    v434 = v427 - v257;
                    if (v427 != v257)
                    {
                      v429 = &v428[v434 & 0xFFFFFFFFFFFFFFF8];
                      v435 = 8 * (v434 >> 3);
                      v436 = &v433[(2 * v432 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v437 = v257;
                      do
                      {
                        v438 = *(_QWORD *)v437;
                        v437 += 8;
                        *(_QWORD *)v436 = v438;
                        v436 += 8;
                        v435 -= 8;
                      }
                      while (v435);
                    }
                    v258 = &v433[8 * v432];
                    operator delete(v257);
                  }
                  else
                  {
                    v430 = (v258 - v427) >> 3;
                    if (v430 >= -1)
                      v431 = v430 + 1;
                    else
                      v431 = v430 + 2;
                    v429 = &v427[8 * (v431 >> 1)];
                    v428 = &v257[8 * (v431 >> 1)];
                    if (v427 == v257)
                    {
                      v255 = v427;
                    }
                    else
                    {
                      memmove(&v257[8 * (v431 >> 1)], v257, v427 - v257);
                      v255 = v257;
                    }
                  }
                }
                else
                {
                  v428 = v257;
                  v429 = v427;
                }
                v439 = *((_QWORD *)v111 - 1);
                v111 -= 8;
                *((_QWORD *)v428 - 1) = v439;
                v257 = v428 - 8;
                v427 = v429;
              }
              while (v111 != *(char **)(a1 + 37576));
            }
            v110 = (_QWORD *)(a1 + 37568);
            v440 = *v582;
            *v582 = v255;
            *(_QWORD *)(a1 + 37576) = v257;
            *(_QWORD *)(a1 + 37584) = v427;
            *(_QWORD *)(a1 + 37592) = v258;
            v112 = v566;
            if (v440)
              operator delete(v440);
LABEL_751:
            v465 = v110[5] + v110[4];
            v466 = *(_QWORD *)(v110[1] + ((v465 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v465 & 0xF);
            v467 = *(_OWORD *)__s1;
            v468 = *(_OWORD *)&__s1[16];
            *(_BYTE *)(v466 + 32) = __s1[32];
            *(_OWORD *)v466 = v467;
            *(_OWORD *)(v466 + 16) = v468;
            *(_BYTE *)(v466 + 264) = 0;
            *(_BYTE *)(v466 + 40) = 0;
            v12 = v466 + 40;
            if (v634)
            {
              sub_43C40(v12, (__int128 *)&__s1[40]);
              v469 = v634;
              ++v110[5];
              if (v469)
              {
                if (v629)
                {
                  v630 = v629;
                  operator delete(v629);
                }
                if ((_QWORD)v627)
                  operator delete((void *)v627);
                if (*((_QWORD *)&v625 + 1))
                  operator delete(*((void **)&v625 + 1));
                if ((_QWORD)v624)
                  operator delete((void *)v624);
                v12 = *(_QWORD *)&__s1[80];
                if (*(_QWORD *)&__s1[80])
                  operator delete(*(void **)&__s1[80]);
              }
              if ((v112 & 0x80) != 0)
                goto LABEL_864;
            }
            else
            {
              ++v110[5];
              if ((v112 & 0x80) != 0)
                goto LABEL_864;
            }
            v470 = (uint64_t *)(v574 + 48 * v112);
            v471 = (uint64_t *)v470[2];
            v472 = (uint64_t *)v470[1];
            v473 = (((char *)v471 - (char *)v472) << 6) - 1;
            v474 = (char *)v471 - (char *)v472;
            v475 = *(_QWORD *)(a1 + 37608) + *(_QWORD *)(a1 + 37600) - 1;
            v476 = *(_QWORD *)(*(_QWORD *)(a1 + 37576) + ((v475 >> 1) & 0x7FFFFFFFFFFFFFF8));
            v478 = (unint64_t *)(v470 + 4);
            v477 = v470[4];
            if (v471 == v472)
              v473 = 0;
            v479 = v470 + 5;
            if (v473 == v470[5] + v477)
            {
              v568 = *(_QWORD *)(*(_QWORD *)(a1 + 37576) + ((v475 >> 1) & 0x7FFFFFFFFFFFFFF8));
              v117 = v477 >= 0x200;
              v480 = v477 - 512;
              if (v117)
              {
                *v478 = v480;
                v483 = *v472;
                v482 = (char *)(v472 + 1);
                v481 = v483;
                v470[1] = (uint64_t)v482;
                if (v471 == (uint64_t *)v470[3])
                {
                  v484 = (uint64_t *)*v470;
                  if ((unint64_t)v482 <= *v470)
                  {
                    if (v471 == v484)
                      v500 = 1;
                    else
                      v500 = ((char *)v471 - (char *)v484) >> 2;
                    if (v500 >> 61)
                      sub_4130();
                    v12 = (uint64_t)operator new(8 * v500);
                    v501 = v12 + 8 * (v500 >> 2);
                    v502 = (uint64_t *)v501;
                    if (v471 != (uint64_t *)v482)
                    {
                      v502 = (uint64_t *)(v501 + (((char *)v471 - v482) & 0xFFFFFFFFFFFFFFF8));
                      v503 = 8 * (((char *)v471 - v482) >> 3);
                      v504 = (_QWORD *)(v12 + 8 * (v500 >> 2));
                      do
                      {
                        v505 = *(_QWORD *)v482;
                        v482 += 8;
                        *v504++ = v505;
                        v503 -= 8;
                      }
                      while (v503);
                    }
                    *v470 = v12;
                    v470[1] = v501;
                    v470[2] = (uint64_t)v502;
                    v470[3] = v12 + 8 * v500;
                    v471 = v502;
                    v478 = (unint64_t *)(v470 + 4);
                    if (v484)
                    {
                      operator delete(v484);
                      v471 = (uint64_t *)v470[2];
                    }
                  }
                  else
                  {
                    v564 = v475;
                    v485 = (uint64_t)&v482[-*v470] >> 3;
                    if (v485 >= -1)
                      v486 = v485 + 1;
                    else
                      v486 = v485 + 2;
                    v487 = &v482[-8 * (v486 >> 1)];
                    v475 = (char *)v471 - v482;
                    if (v471 != (uint64_t *)v482)
                    {
                      v12 = (uint64_t)memmove(&v482[-8 * (v486 >> 1)], v482, (char *)v471 - v482);
                      v471 = (uint64_t *)v470[1];
                    }
                    v488 = &v471[-(v486 >> 1)];
                    v471 = (uint64_t *)&v487[v475];
                    v470[1] = (uint64_t)v488;
                    v470[2] = (uint64_t)&v487[v475];
                    LOBYTE(v475) = v564;
                    v478 = (unint64_t *)(v470 + 4);
                  }
                }
                *v471 = v481;
                v470[2] += 8;
                v476 = v568;
              }
              else
              {
                v567 = v112;
                v565 = *(_QWORD *)(a1 + 37608) + *(_QWORD *)(a1 + 37600) - 1;
                v489 = v474 >> 3;
                v490 = (uint64_t *)v470[3];
                v491 = (uint64_t *)*v470;
                v492 = (uint64_t)v490 - *v470;
                if (v474 >> 3 >= (unint64_t)(v492 >> 3))
                {
                  v494 = v492 >> 2;
                  if (v490 == v491)
                    v495 = 1;
                  else
                    v495 = v494;
                  if (v495 >> 61)
                    sub_4130();
                  v496 = (char *)operator new(8 * v495);
                  v497 = operator new(0x1000uLL);
                  v475 = (unint64_t)&v496[8 * v489];
                  v498 = &v496[8 * v495];
                  if (v489 == v495)
                  {
                    v563 = v497;
                    v479 = v470 + 5;
                    if (v474 < 1)
                    {
                      if (v471 == v472)
                        v507 = 1;
                      else
                        v507 = v474 >> 2;
                      if (v507 >> 61)
                        sub_4130();
                      v508 = (char *)operator new(8 * v507);
                      v475 = (unint64_t)&v508[8 * (v507 >> 2)];
                      v498 = &v508[8 * v507];
                      operator delete(v496);
                      v472 = (uint64_t *)v470[1];
                      v471 = (uint64_t *)v470[2];
                      v496 = v508;
                    }
                    else
                    {
                      v499 = v489 + 2;
                      if (v489 >= -1)
                        v499 = v489 + 1;
                      v475 -= 8 * (v499 >> 1);
                    }
                    v497 = v563;
                  }
                  else
                  {
                    v479 = v470 + 5;
                  }
                  *(_QWORD *)v475 = v497;
                  v509 = (char *)(v475 + 8);
                  if (v471 != v472)
                  {
                    do
                    {
                      if ((char *)v475 == v496)
                      {
                        if (v509 >= v498)
                        {
                          if (v498 == (char *)v475)
                            v514 = 1;
                          else
                            v514 = (uint64_t)&v498[-v475] >> 2;
                          if (v514 >> 61)
                            sub_4130();
                          v515 = (char *)operator new(8 * v514);
                          v496 = v515;
                          v510 = &v515[(2 * v514 + 6) & 0xFFFFFFFFFFFFFFF8];
                          v511 = v510;
                          v516 = (uint64_t)&v509[-v475];
                          if (v509 != (char *)v475)
                          {
                            v511 = &v510[v516 & 0xFFFFFFFFFFFFFFF8];
                            v517 = 8 * (v516 >> 3);
                            v518 = &v515[(2 * v514 + 6) & 0xFFFFFFFFFFFFFFF8];
                            v519 = (uint64_t *)v475;
                            do
                            {
                              v520 = *v519++;
                              *(_QWORD *)v518 = v520;
                              v518 += 8;
                              v517 -= 8;
                            }
                            while (v517);
                          }
                          v498 = &v515[8 * v514];
                          operator delete((void *)v475);
                        }
                        else
                        {
                          v512 = (v498 - v509) >> 3;
                          if (v512 >= -1)
                            v513 = v512 + 1;
                          else
                            v513 = v512 + 2;
                          v511 = &v509[8 * (v513 >> 1)];
                          v510 = (char *)(8 * (v513 >> 1) + v475);
                          if (v509 == (char *)v475)
                          {
                            v496 = v509;
                          }
                          else
                          {
                            memmove((void *)(8 * (v513 >> 1) + v475), (const void *)v475, (size_t)&v509[-v475]);
                            v496 = (char *)v475;
                          }
                        }
                      }
                      else
                      {
                        v510 = (char *)v475;
                        v511 = v509;
                      }
                      v521 = *--v471;
                      *((_QWORD *)v510 - 1) = v521;
                      v475 = (unint64_t)(v510 - 8);
                      v509 = v511;
                    }
                    while (v471 != (uint64_t *)v470[1]);
                  }
                  v12 = *v470;
                  *v470 = (uint64_t)v496;
                  v470[1] = v475;
                  v470[2] = (uint64_t)v509;
                  v470[3] = (uint64_t)v498;
                  v478 = (unint64_t *)(v470 + 4);
                  v112 = v567;
                  LOBYTE(v475) = v565;
                  v476 = v568;
                  if (v12)
                    operator delete((void *)v12);
                }
                else
                {
                  v12 = (uint64_t)operator new(0x1000uLL);
                  v493 = v12;
                  if (v490 == v471)
                  {
                    if (v472 == v491)
                    {
                      if (v471 == v472)
                        v522 = 1;
                      else
                        v522 = ((char *)v490 - (char *)v472) >> 2;
                      if (v522 >> 61)
                        sub_4130();
                      v12 = (uint64_t)operator new(8 * v522);
                      v506 = (uint64_t *)(v12 + 8 * ((v522 + 3) >> 2));
                      v523 = v506;
                      v479 = v470 + 5;
                      if (v471 != v472)
                      {
                        v524 = 8 * v489;
                        v525 = (_QWORD *)(v12 + 8 * ((v522 + 3) >> 2));
                        v526 = v472;
                        v523 = &v506[v489];
                        do
                        {
                          v527 = *v526++;
                          *v525++ = v527;
                          v524 -= 8;
                        }
                        while (v524);
                      }
                      *v470 = v12;
                      v470[1] = (uint64_t)v506;
                      v470[2] = (uint64_t)v523;
                      v470[3] = v12 + 8 * v522;
                      if (v472)
                      {
                        operator delete(v472);
                        v506 = (uint64_t *)v470[1];
                      }
                    }
                    else
                    {
                      v506 = v472;
                      v479 = v470 + 5;
                    }
                    *(v506 - 1) = v493;
                    v529 = (char *)v470[1];
                    v528 = (char *)v470[2];
                    v470[1] = (uint64_t)(v529 - 8);
                    v530 = *((_QWORD *)v529 - 1);
                    v470[1] = (uint64_t)v529;
                    v476 = v568;
                    if (v528 == (char *)v470[3])
                    {
                      v531 = (char *)*v470;
                      if ((unint64_t)v529 <= *v470)
                      {
                        if (v528 == v531)
                          v536 = 1;
                        else
                          v536 = (v528 - v531) >> 2;
                        if (v536 >> 61)
                          sub_4130();
                        v12 = (uint64_t)operator new(8 * v536);
                        v537 = v12 + 8 * (v536 >> 2);
                        v538 = (char *)v537;
                        v479 = v470 + 5;
                        if (v528 != v529)
                        {
                          v538 = (char *)(v537 + ((v528 - v529) & 0xFFFFFFFFFFFFFFF8));
                          v539 = 8 * ((v528 - v529) >> 3);
                          v540 = (_QWORD *)(v12 + 8 * (v536 >> 2));
                          do
                          {
                            v541 = *(_QWORD *)v529;
                            v529 += 8;
                            *v540++ = v541;
                            v539 -= 8;
                          }
                          while (v539);
                        }
                        *v470 = v12;
                        v470[1] = v537;
                        v470[2] = (uint64_t)v538;
                        v470[3] = v12 + 8 * v536;
                        v528 = v538;
                        v476 = v568;
                        if (v531)
                        {
                          operator delete(v531);
                          v528 = (char *)v470[2];
                        }
                      }
                      else
                      {
                        v532 = (uint64_t)&v529[-*v470] >> 3;
                        if (v532 >= -1)
                          v533 = v532 + 1;
                        else
                          v533 = v532 + 2;
                        v534 = &v529[-8 * (v533 >> 1)];
                        v535 = v528 - v529;
                        if (v528 != v529)
                        {
                          v12 = (uint64_t)memmove(&v529[-8 * (v533 >> 1)], v529, v528 - v529);
                          v529 = (char *)v470[1];
                        }
                        v528 = &v534[v535];
                        v470[1] = (uint64_t)&v529[-8 * (v533 >> 1)];
                        v470[2] = (uint64_t)&v534[v535];
                        v112 = v567;
                        v476 = v568;
                      }
                    }
                    *(_QWORD *)v528 = v530;
                  }
                  else
                  {
                    *v471 = v12;
                    v479 = v470 + 5;
                    v476 = v568;
                  }
                  v470[2] += 8;
                  LOBYTE(v475) = v565;
                  v478 = (unint64_t *)(v470 + 4);
                }
              }
            }
            v542 = *v479;
            *(_QWORD *)(*(_QWORD *)(v470[1] + (((*v478 + *v479) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v478 + *v479) & 0x1FF)) = v476 + 272 * (v475 & 0xF);
            *v479 = v542 + 1;
            v543 = v580 + 232 * v112;
            if (*(_BYTE *)(v543 + 224))
              v544 = *(_BYTE *)(v543 + 214) == 0;
            else
              v544 = 1;
            if (!v544 && !*(_BYTE *)(v543 + 213))
            {
              v545 = *(unsigned __int8 *)(v543 + 36);
              if (v545 >= 0x60)
              {
                if (v545 >= 0x68)
                {
                  if (v545 < 0x98)
                    goto LABEL_864;
                }
                else if (*(_BYTE *)(v543 + 215))
                {
                  goto LABEL_864;
                }
              }
              if ((*(_DWORD *)(v543 + 208) - 5) < 0xFFFFFFFE || *(_BYTE *)(v543 + 216) != 0)
              {
                v547 = *(_QWORD *)(a1 + 37608) + *(_QWORD *)(a1 + 37600) - 1;
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 37576) + ((v547 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 272 * (v547 & 0xF)
                         + 32) = 1;
                *(_BYTE *)(v543 + 213) = 1;
                sub_43D70(a1, v621);
              }
            }
LABEL_864:
            ++v586;
            v14 = v620;
            v13 = 8 * a3;
            if (v620 >= 8 * a3)
              goto LABEL_880;
            break;
          case 9u:
            if (((char)v636 & 0x80000000) == 0)
            {
              v40 = v580 + 232 * v636;
              v41 = v621;
              if (!*(_BYTE *)(v40 + 224))
              {
                v42 = *(_BYTE *)(a1 + 8);
                *(_QWORD *)__s1 = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v636;
                v631 = 0;
                memset(&__s1[40], 0, 48);
                v623 = 0u;
                v624 = 0u;
                v625 = 0u;
                __p = 0u;
                v627 = 0u;
                v628 = 0;
                v632 = 0;
                v633 = v42;
                sub_43B90(v40, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v624 + 1))
                {
                  *(_QWORD *)&v625 = *((_QWORD *)&v624 + 1);
                  operator delete(*((void **)&v624 + 1));
                }
                if ((_QWORD)v623)
                {
                  *((_QWORD *)&v623 + 1) = v623;
                  operator delete((void *)v623);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v41 = v621;
              }
              v43 = DWORD1(v636);
              sub_4607C((_QWORD *)(v40 + 40), v41);
              sub_461CC(v40 + 40);
              v44 = *(_QWORD *)(v40 + 104);
              v45 = *(_DWORD **)(v40 + 96);
              if ((unint64_t)v45 >= v44)
              {
                v12 = *(_QWORD *)(v40 + 88);
                v165 = ((uint64_t)v45 - v12) >> 2;
                if ((unint64_t)(v165 + 1) >> 62)
                  sub_4074();
                v166 = v44 - v12;
                v167 = (uint64_t)(v44 - v12) >> 1;
                if (v167 <= v165 + 1)
                  v167 = v165 + 1;
                if (v166 >= 0x7FFFFFFFFFFFFFFCLL)
                  v168 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v168 = v167;
                if (v168)
                {
                  v169 = (char *)sub_43B2C(v40 + 104, v168);
                  v12 = *(_QWORD *)(v40 + 88);
                  v45 = *(_DWORD **)(v40 + 96);
                }
                else
                {
                  v169 = 0;
                }
                v260 = &v169[4 * v165];
                *(_DWORD *)v260 = v43;
                v46 = v260 + 4;
                while (v45 != (_DWORD *)v12)
                {
                  v261 = *--v45;
                  *((_DWORD *)v260 - 1) = v261;
                  v260 -= 4;
                }
                *(_QWORD *)(v40 + 88) = v260;
                *(_QWORD *)(v40 + 96) = v46;
                *(_QWORD *)(v40 + 104) = &v169[4 * v168];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v45 = v43;
                v46 = v45 + 1;
              }
              *(_QWORD *)(v40 + 96) = v46;
            }
            goto LABEL_864;
          case 0xAu:
            v100 = v621[3264];
            v101 = v636;
            *(_DWORD *)__s1 = v636;
            v102 = &v621[3 * v636];
            v103 = (unint64_t *)v102[3097];
            v104 = (unint64_t *)v102[3098];
            if (v103 == v104
              || (v105 = v636,
                  *(_QWORD *)(v621[3258] + ((v100 >> 29) & 0x7FFFFFFF8))
                - *(_QWORD *)(v621[3258] + ((*(v104 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              v106 = (void **)(v102 + 3098);
              v107 = &v621[3 * v636];
              v108 = v107[3099];
              if ((unint64_t)v104 >= v108)
              {
                v159 = (void **)(v102 + 3097);
                v160 = v104 - v103;
                if ((unint64_t)(v160 + 1) >> 61)
                  sub_4074();
                v161 = v107 + 3099;
                v162 = v108 - (_QWORD)v103;
                v163 = v162 >> 2;
                if (v162 >> 2 <= (unint64_t)(v160 + 1))
                  v163 = v160 + 1;
                if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
                  v164 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v164 = v163;
                if (v164)
                  v12 = (uint64_t)sub_40FC((uint64_t)v161, v164);
                else
                  v12 = 0;
                v249 = (unint64_t *)(v12 + 8 * v160);
                *v249 = v100;
                v109 = v249 + 1;
                v250 = (char *)*v106;
                v251 = (char *)*v159;
                if (*v106 != *v159)
                {
                  do
                  {
                    v252 = *((_QWORD *)v250 - 1);
                    v250 -= 8;
                    *--v249 = v252;
                  }
                  while (v250 != v251);
                  v250 = (char *)*v159;
                }
                *v159 = v249;
                *v106 = v109;
                *v161 = v12 + 8 * v164;
                if (v250)
                  operator delete(v250);
              }
              else
              {
                *v104 = v100;
                v109 = v104 + 1;
              }
              *v106 = v109;
              v105 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0xFu)
                *(_BYTE *)(v573 + *(unsigned int *)__s1) = 0;
            }
            if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
            {
              switch(v101)
              {
                case 0:
                  v618[0] = a1;
                  v618[1] = (uint64_t)&v621;
                  v618[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_46330(v618, (_BYTE *)(v573 + v105));
                  break;
                case 1:
                  v617[0] = a1;
                  v617[1] = (uint64_t)&v621;
                  v617[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_475BC(v617, (_BYTE *)(v573 + v105));
                  break;
                case 2:
                  v616[0] = a1;
                  v616[1] = (uint64_t)&v621;
                  v616[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_47F4C(v616, (_BYTE *)(v573 + v105));
                  break;
                case 3:
                  v615[0] = a1;
                  v615[1] = (uint64_t)&v621;
                  v615[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_49C50(v615, (_BYTE *)(v573 + v105));
                  break;
                case 4:
                  v614[0] = a1;
                  v614[1] = (uint64_t)&v621;
                  v614[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4A724(v614, (_BYTE *)(v573 + v105));
                  break;
                case 5:
                  v613[0] = a1;
                  v613[1] = (uint64_t)&v621;
                  v613[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4B154(v613, (_BYTE *)(v573 + v105));
                  break;
                case 6:
                  v612[0] = a1;
                  v612[1] = (uint64_t)&v621;
                  v612[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4B56C(v612, (_BYTE *)(v573 + v105));
                  break;
                case 7:
                  v611[0] = a1;
                  v611[1] = (uint64_t)&v621;
                  v611[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4C678(v611, (_BYTE *)(v573 + v105));
                  break;
                case 8:
                  v610[0] = a1;
                  v610[1] = (uint64_t)&v621;
                  v610[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4D698(v610, (_BYTE *)(v573 + v105));
                  break;
                case 9:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v621;
                  v609[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4DB60(v609, (_BYTE *)(v573 + v105));
                  break;
                case 10:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v621;
                  v608[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4F864(v608, (_BYTE *)(v573 + v105));
                  break;
                case 11:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v621;
                  v607[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_4FF00(v607, (_BYTE *)(v573 + v105));
                  break;
                case 12:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v621;
                  v606[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_50130(v606, (_BYTE *)(v573 + v105));
                  break;
                case 13:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v621;
                  v605[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_508A0(v605, (_BYTE *)(v573 + v105));
                  break;
                case 14:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v621;
                  v604[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5165C(v604, (_BYTE *)(v573 + v105));
                  break;
                case 15:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v621;
                  v603[2] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_51A54(v603, (_BYTE *)(v573 + v105));
                  break;
                default:
                  goto LABEL_864;
              }
            }
            else
            {
              switch(v101)
              {
                case 0:
                  v602[0] = a1;
                  v602[1] = (uint64_t)__s1;
                  v602[2] = (uint64_t)&v621;
                  v602[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_523F4(v602, (_BYTE *)(v573 + v105));
                  break;
                case 1:
                  v601[0] = a1;
                  v601[1] = (uint64_t)__s1;
                  v601[2] = (uint64_t)&v621;
                  v601[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_536CC(v601, (_BYTE *)(v573 + v105));
                  break;
                case 2:
                  v600[0] = a1;
                  v600[1] = (uint64_t)__s1;
                  v600[2] = (uint64_t)&v621;
                  v600[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_54104(v600, (_BYTE *)(v573 + v105));
                  break;
                case 3:
                  v599[0] = a1;
                  v599[1] = (uint64_t)__s1;
                  v599[2] = (uint64_t)&v621;
                  v599[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_55DC0(v599, (_BYTE *)(v573 + v105));
                  break;
                case 4:
                  v598[0] = a1;
                  v598[1] = (uint64_t)__s1;
                  v598[2] = (uint64_t)&v621;
                  v598[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_568F8(v598, (_BYTE *)(v573 + v105));
                  break;
                case 5:
                  v597[0] = a1;
                  v597[1] = (uint64_t)__s1;
                  v597[2] = (uint64_t)&v621;
                  v597[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5738C(v597, (_BYTE *)(v573 + v105));
                  break;
                case 6:
                  v596[0] = a1;
                  v596[1] = (uint64_t)__s1;
                  v596[2] = (uint64_t)&v621;
                  v596[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_57864(v596, (_BYTE *)(v573 + v105));
                  break;
                case 7:
                  v595[0] = a1;
                  v595[1] = (uint64_t)__s1;
                  v595[2] = (uint64_t)&v621;
                  v595[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_589AC(v595, (_BYTE *)(v573 + v105));
                  break;
                case 8:
                  v594[0] = a1;
                  v594[1] = (uint64_t)__s1;
                  v594[2] = (uint64_t)&v621;
                  v594[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_59A4C(v594, (_BYTE *)(v573 + v105));
                  break;
                case 9:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v621;
                  v593[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_59FC0(v593, (_BYTE *)(v573 + v105));
                  break;
                case 10:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v621;
                  v592[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5BC7C(v592, (_BYTE *)(v573 + v105));
                  break;
                case 11:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v621;
                  v591[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5C3B0(v591, (_BYTE *)(v573 + v105));
                  break;
                case 12:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v621;
                  v590[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5C674(v590, (_BYTE *)(v573 + v105));
                  break;
                case 13:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v621;
                  v589[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5CE74(v589, (_BYTE *)(v573 + v105));
                  break;
                case 14:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v621;
                  v588[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5DC80(v588, (_BYTE *)(v573 + v105));
                  break;
                case 15:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v621;
                  v587[3] = (uint64_t)&v635;
                  if (v105 <= 0xF)
                    sub_5E128(v587, (_BYTE *)(v573 + v105));
                  break;
                default:
                  goto LABEL_864;
              }
            }
            goto LABEL_864;
          case 0xBu:
            v27 = v636;
            if (v636 > 7)
            {
              v28 = 0;
              v29 = -1;
            }
            else
            {
              v28 = dword_4A2E74[(int)v636];
              v29 = word_4A4EF0[(int)v636];
            }
            v128 = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                        - 1);
            v129 = *((_QWORD *)&v636 + 1);
            if (*(_DWORD *)(a1 + 120) == -1)
              v130 = 0;
            else
              v130 = *(_DWORD *)(a1 + 120);
            *(_DWORD *)(a1 + 120) = v130 + 1;
            if (v27 > 7)
              goto LABEL_281;
            v131 = v575 + 56 * v27;
            if (!*(_BYTE *)(v131 + 48))
            {
              *(_QWORD *)v131 = v128;
              *(_QWORD *)(v131 + 16) = v129;
              *(_DWORD *)(v131 + 24) = v130;
              *(_DWORD *)(v131 + 28) = v28;
              *(_WORD *)(v131 + 32) = v29;
              *(_QWORD *)(v131 + 40) = 0;
LABEL_280:
              *(_BYTE *)(v131 + 48) = 1;
              goto LABEL_281;
            }
            v132 = sub_11FD14();
            if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(_QWORD *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&dword_0, v132, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            v12 = sub_11FD04();
            if ((_DWORD)v12)
              v12 = sub_11FD0C();
            v133 = *(unsigned __int8 *)(v131 + 48);
            *(_QWORD *)v131 = v128;
            *(_QWORD *)(v131 + 16) = v129;
            *(_DWORD *)(v131 + 24) = v130;
            *(_DWORD *)(v131 + 28) = v28;
            *(_WORD *)(v131 + 32) = v29;
            *(_QWORD *)(v131 + 40) = 0;
            if (!v133)
              goto LABEL_280;
LABEL_281:
            if ((v577 & 2) != 0)
            {
              v195 = v621;
              v196 = (uint64_t *)v621[2];
              v12 = (uint64_t)(v621 + 3);
              v197 = v621[3];
              if ((unint64_t)v196 >= v197)
              {
                v199 = (void **)(v621 + 1);
                v200 = v621[1];
                v201 = ((uint64_t)v196 - v200) >> 3;
                if ((unint64_t)(v201 + 1) >> 61)
                  sub_4074();
                v202 = v197 - v200;
                v203 = v202 >> 2;
                if (v202 >> 2 <= (unint64_t)(v201 + 1))
                  v203 = v201 + 1;
                if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
                  v204 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v204 = v203;
                if (v204)
                  v12 = (uint64_t)sub_40FC(v12, v204);
                else
                  v12 = 0;
                v262 = (uint64_t *)(v12 + 8 * v201);
                *v262 = v128;
                v198 = v262 + 1;
                v264 = (char *)v195[1];
                v263 = (char *)v195[2];
                if (v263 != v264)
                {
                  do
                  {
                    v265 = *((_QWORD *)v263 - 1);
                    v263 -= 8;
                    *--v262 = v265;
                  }
                  while (v263 != v264);
                  v263 = (char *)*v199;
                }
                v195[1] = v262;
                v195[2] = v198;
                v195[3] = v12 + 8 * v204;
                if (v263)
                  operator delete(v263);
              }
              else
              {
                *v196 = v128;
                v198 = v196 + 1;
              }
              v195[2] = v198;
              v266 = v621;
              v267 = (_DWORD *)v621[14];
              v268 = v621[15];
              if ((unint64_t)v267 >= v268)
              {
                v12 = v621[13];
                v270 = ((uint64_t)v267 - v12) >> 2;
                if ((unint64_t)(v270 + 1) >> 62)
                  sub_4074();
                v271 = v268 - v12;
                v272 = (uint64_t)(v268 - v12) >> 1;
                if (v272 <= v270 + 1)
                  v272 = v270 + 1;
                if (v271 >= 0x7FFFFFFFFFFFFFFCLL)
                  v273 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v273 = v272;
                if (v273)
                {
                  v274 = (char *)sub_43B2C((uint64_t)(v621 + 15), v273);
                  v12 = v266[13];
                  v267 = (_DWORD *)v266[14];
                }
                else
                {
                  v274 = 0;
                }
                v275 = &v274[4 * v270];
                *(_DWORD *)v275 = v130;
                v269 = v275 + 4;
                while (v267 != (_DWORD *)v12)
                {
                  v276 = *--v267;
                  *((_DWORD *)v275 - 1) = v276;
                  v275 -= 4;
                }
                v266[13] = v275;
                v266[14] = v269;
                v266[15] = &v274[4 * v273];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v267 = v130;
                v269 = v267 + 1;
              }
              v266[14] = v269;
              v277 = v621;
              v278 = (__int16 *)v621[20];
              v279 = v621[21];
              if ((unint64_t)v278 >= v279)
              {
                v12 = v621[19];
                v281 = (uint64_t)v278 - v12;
                if ((uint64_t)v278 - v12 <= -3)
                  sub_4074();
                v282 = v281 >> 1;
                v283 = v279 - v12;
                if (v283 <= (v281 >> 1) + 1)
                  v284 = v282 + 1;
                else
                  v284 = v283;
                if (v283 >= 0x7FFFFFFFFFFFFFFELL)
                  v285 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v285 = v284;
                if (v285)
                {
                  v286 = (char *)sub_43B60((uint64_t)(v621 + 21), v285);
                  v12 = v277[19];
                  v278 = (__int16 *)v277[20];
                }
                else
                {
                  v286 = 0;
                }
                v291 = (__int16 *)&v286[2 * v282];
                *v291 = v29;
                v280 = v291 + 1;
                while (v278 != (__int16 *)v12)
                {
                  v292 = *--v278;
                  *--v291 = v292;
                }
                v277[19] = v291;
                v277[20] = v280;
                v277[21] = &v286[2 * v285];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v278 = v29;
                v280 = v278 + 1;
              }
              v277[20] = v280;
              v293 = v621;
              v294 = (_DWORD *)v621[17];
              v295 = v621[18];
              if ((unint64_t)v294 >= v295)
              {
                v12 = v621[16];
                v297 = ((uint64_t)v294 - v12) >> 2;
                if ((unint64_t)(v297 + 1) >> 62)
                  sub_4074();
                v298 = v295 - v12;
                v299 = (uint64_t)(v295 - v12) >> 1;
                if (v299 <= v297 + 1)
                  v299 = v297 + 1;
                if (v298 >= 0x7FFFFFFFFFFFFFFCLL)
                  v300 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v300 = v299;
                if (v300)
                {
                  v301 = (char *)sub_43B2C((uint64_t)(v621 + 18), v300);
                  v12 = v293[16];
                  v294 = (_DWORD *)v293[17];
                }
                else
                {
                  v301 = 0;
                }
                v302 = &v301[4 * v297];
                *(_DWORD *)v302 = v28;
                v296 = v302 + 4;
                while (v294 != (_DWORD *)v12)
                {
                  v303 = *--v294;
                  *((_DWORD *)v302 - 1) = v303;
                  v302 -= 4;
                }
                v293[16] = v302;
                v293[17] = v296;
                v293[18] = &v301[4 * v300];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v294 = v28;
                v296 = v294 + 1;
              }
              v293[17] = v296;
              v304 = v621;
              v305 = (_QWORD *)v621[8];
              v306 = v621[9];
              if ((unint64_t)v305 >= v306)
              {
                v12 = v621[7];
                v308 = ((uint64_t)v305 - v12) >> 3;
                if ((unint64_t)(v308 + 1) >> 61)
                  sub_4074();
                v309 = v306 - v12;
                v310 = (uint64_t)(v306 - v12) >> 2;
                if (v310 <= v308 + 1)
                  v310 = v308 + 1;
                if (v309 >= 0x7FFFFFFFFFFFFFF8)
                  v311 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v311 = v310;
                if (v311)
                {
                  v312 = (char *)sub_40FC((uint64_t)(v621 + 9), v311);
                  v12 = v304[7];
                  v305 = (_QWORD *)v304[8];
                }
                else
                {
                  v312 = 0;
                }
                v313 = &v312[8 * v308];
                *(_QWORD *)v313 = v129;
                v307 = v313 + 8;
                while (v305 != (_QWORD *)v12)
                {
                  v314 = *--v305;
                  *((_QWORD *)v313 - 1) = v314;
                  v313 -= 8;
                }
                v304[7] = v313;
                v304[8] = v307;
                v304[9] = &v312[8 * v311];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v305 = v129;
                v307 = v305 + 1;
              }
              v304[8] = v307;
            }
            goto LABEL_864;
          case 0xCu:
            if (v636 <= 7)
            {
              v31 = v575 + 56 * v636;
              if (*(_BYTE *)(v31 + 48))
              {
                v32 = 0;
                *(_QWORD *)(v31 + 8) = (((v621[3259] - v621[3258]) << 29) - 0x100000000) | (((v621[3256] - v621[3255]) >> 3)
                                                                                            - 1);
                *(_QWORD *)(v31 + 40) = 0;
                *(_WORD *)(v31 + 40) = WORD2(v636);
                v33 = a1 + 192;
                do
                {
                  if (*(_BYTE *)(v33 + 192) && *(_DWORD *)v33 == *(_DWORD *)(v31 + 24))
                    sub_3D750(a1, v621, v32, 1);
                  ++v32;
                  v33 += 232;
                }
                while (v32 != 128);
                v34 = 0;
                v35 = (_BYTE *)(a1 + 30336);
                do
                {
                  if (*v35 && *((_DWORD *)v35 - 2) == *(_DWORD *)(v31 + 24))
                    sub_3D3D4(a1, v621, v34);
                  ++v34;
                  v35 += 40;
                }
                while (v34 != 16);
                if ((v577 & 2) == 0)
                {
                  v36 = v621;
                  v37 = (_QWORD *)v621[2];
                  v38 = v621[3];
                  if ((unint64_t)v37 >= v38)
                  {
                    v335 = (void **)(v621 + 1);
                    v336 = v621[1];
                    v337 = ((uint64_t)v37 - v336) >> 3;
                    if ((unint64_t)(v337 + 1) >> 61)
                      sub_4074();
                    v338 = v38 - v336;
                    v339 = v338 >> 2;
                    if (v338 >> 2 <= (unint64_t)(v337 + 1))
                      v339 = v337 + 1;
                    if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF8)
                      v340 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v340 = v339;
                    if (v340)
                      v341 = (char *)sub_40FC((uint64_t)(v621 + 3), v340);
                    else
                      v341 = 0;
                    v351 = &v341[8 * v337];
                    *(_QWORD *)v351 = *(_QWORD *)v31;
                    v39 = v351 + 8;
                    v353 = (char *)v36[1];
                    v352 = (char *)v36[2];
                    if (v352 != v353)
                    {
                      do
                      {
                        v354 = *((_QWORD *)v352 - 1);
                        v352 -= 8;
                        *((_QWORD *)v351 - 1) = v354;
                        v351 -= 8;
                      }
                      while (v352 != v353);
                      v352 = (char *)*v335;
                    }
                    v36[1] = v351;
                    v36[2] = v39;
                    v36[3] = &v341[8 * v340];
                    if (v352)
                      operator delete(v352);
                  }
                  else
                  {
                    *v37 = *(_QWORD *)v31;
                    v39 = v37 + 1;
                  }
                  v36[2] = v39;
                  v355 = v621;
                  v356 = (_QWORD *)v621[5];
                  v12 = (uint64_t)(v621 + 6);
                  v357 = v621[6];
                  if ((unint64_t)v356 >= v357)
                  {
                    v359 = (void **)(v621 + 4);
                    v360 = v621[4];
                    v361 = ((uint64_t)v356 - v360) >> 3;
                    if ((unint64_t)(v361 + 1) >> 61)
                      sub_4074();
                    v362 = v357 - v360;
                    v363 = v362 >> 2;
                    if (v362 >> 2 <= (unint64_t)(v361 + 1))
                      v363 = v361 + 1;
                    if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
                      v364 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v364 = v363;
                    if (v364)
                      v12 = (uint64_t)sub_40FC(v12, v364);
                    else
                      v12 = 0;
                    v365 = (_QWORD *)(v12 + 8 * v361);
                    *v365 = *(_QWORD *)(v31 + 8);
                    v358 = v365 + 1;
                    v367 = (char *)v355[4];
                    v366 = (char *)v355[5];
                    if (v366 != v367)
                    {
                      do
                      {
                        v368 = *((_QWORD *)v366 - 1);
                        v366 -= 8;
                        *--v365 = v368;
                      }
                      while (v366 != v367);
                      v366 = (char *)*v359;
                    }
                    v355[4] = v365;
                    v355[5] = v358;
                    v355[6] = v12 + 8 * v364;
                    if (v366)
                      operator delete(v366);
                  }
                  else
                  {
                    *v356 = *(_QWORD *)(v31 + 8);
                    v358 = v356 + 1;
                  }
                  v355[5] = v358;
                  v369 = v621;
                  v370 = (_DWORD *)v621[14];
                  v371 = v621[15];
                  if ((unint64_t)v370 >= v371)
                  {
                    v12 = v621[13];
                    v373 = ((uint64_t)v370 - v12) >> 2;
                    if ((unint64_t)(v373 + 1) >> 62)
                      sub_4074();
                    v374 = v371 - v12;
                    v375 = (uint64_t)(v371 - v12) >> 1;
                    if (v375 <= v373 + 1)
                      v375 = v373 + 1;
                    if (v374 >= 0x7FFFFFFFFFFFFFFCLL)
                      v376 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v376 = v375;
                    if (v376)
                    {
                      v377 = (char *)sub_43B2C((uint64_t)(v621 + 15), v376);
                      v12 = v369[13];
                      v370 = (_DWORD *)v369[14];
                    }
                    else
                    {
                      v377 = 0;
                    }
                    v378 = &v377[4 * v373];
                    *(_DWORD *)v378 = *(_DWORD *)(v31 + 24);
                    v372 = v378 + 4;
                    while (v370 != (_DWORD *)v12)
                    {
                      v379 = *--v370;
                      *((_DWORD *)v378 - 1) = v379;
                      v378 -= 4;
                    }
                    v369[13] = v378;
                    v369[14] = v372;
                    v369[15] = &v377[4 * v376];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v370 = *(_DWORD *)(v31 + 24);
                    v372 = v370 + 1;
                  }
                  v369[14] = v372;
                  v380 = v621;
                  v381 = (_WORD *)v621[20];
                  v382 = v621[21];
                  if ((unint64_t)v381 >= v382)
                  {
                    v12 = v621[19];
                    v384 = (uint64_t)v381 - v12;
                    if ((uint64_t)v381 - v12 <= -3)
                      sub_4074();
                    v385 = v384 >> 1;
                    v386 = v382 - v12;
                    if (v386 <= (v384 >> 1) + 1)
                      v387 = v385 + 1;
                    else
                      v387 = v386;
                    if (v386 >= 0x7FFFFFFFFFFFFFFELL)
                      v388 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v388 = v387;
                    if (v388)
                    {
                      v389 = (char *)sub_43B60((uint64_t)(v621 + 21), v388);
                      v12 = v380[19];
                      v381 = (_WORD *)v380[20];
                    }
                    else
                    {
                      v389 = 0;
                    }
                    v390 = &v389[2 * v385];
                    *(_WORD *)v390 = *(_WORD *)(v31 + 32);
                    v383 = v390 + 2;
                    while (v381 != (_WORD *)v12)
                    {
                      v391 = *--v381;
                      *((_WORD *)v390 - 1) = v391;
                      v390 -= 2;
                    }
                    v380[19] = v390;
                    v380[20] = v383;
                    v380[21] = &v389[2 * v388];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v381 = *(_WORD *)(v31 + 32);
                    v383 = v381 + 1;
                  }
                  v380[20] = v383;
                  v392 = v621;
                  v393 = (_DWORD *)v621[17];
                  v394 = v621[18];
                  if ((unint64_t)v393 >= v394)
                  {
                    v12 = v621[16];
                    v396 = ((uint64_t)v393 - v12) >> 2;
                    if ((unint64_t)(v396 + 1) >> 62)
                      sub_4074();
                    v397 = v394 - v12;
                    v398 = (uint64_t)(v394 - v12) >> 1;
                    if (v398 <= v396 + 1)
                      v398 = v396 + 1;
                    if (v397 >= 0x7FFFFFFFFFFFFFFCLL)
                      v399 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v399 = v398;
                    if (v399)
                    {
                      v400 = (char *)sub_43B2C((uint64_t)(v621 + 18), v399);
                      v12 = v392[16];
                      v393 = (_DWORD *)v392[17];
                    }
                    else
                    {
                      v400 = 0;
                    }
                    v401 = &v400[4 * v396];
                    *(_DWORD *)v401 = *(_DWORD *)(v31 + 28);
                    v395 = v401 + 4;
                    while (v393 != (_DWORD *)v12)
                    {
                      v402 = *--v393;
                      *((_DWORD *)v401 - 1) = v402;
                      v401 -= 4;
                    }
                    v392[16] = v401;
                    v392[17] = v395;
                    v392[18] = &v400[4 * v399];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v393 = *(_DWORD *)(v31 + 28);
                    v395 = v393 + 1;
                  }
                  v392[17] = v395;
                  v403 = v621;
                  v404 = (_QWORD *)v621[8];
                  v405 = v621[9];
                  if ((unint64_t)v404 >= v405)
                  {
                    v12 = v621[7];
                    v407 = ((uint64_t)v404 - v12) >> 3;
                    if ((unint64_t)(v407 + 1) >> 61)
                      sub_4074();
                    v408 = v405 - v12;
                    v409 = (uint64_t)(v405 - v12) >> 2;
                    if (v409 <= v407 + 1)
                      v409 = v407 + 1;
                    if (v408 >= 0x7FFFFFFFFFFFFFF8)
                      v410 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v410 = v409;
                    if (v410)
                    {
                      v411 = (char *)sub_40FC((uint64_t)(v621 + 9), v410);
                      v12 = v403[7];
                      v404 = (_QWORD *)v403[8];
                    }
                    else
                    {
                      v411 = 0;
                    }
                    v412 = &v411[8 * v407];
                    *(_QWORD *)v412 = *(_QWORD *)(v31 + 16);
                    v406 = v412 + 8;
                    while (v404 != (_QWORD *)v12)
                    {
                      v413 = *--v404;
                      *((_QWORD *)v412 - 1) = v413;
                      v412 -= 8;
                    }
                    v403[7] = v412;
                    v403[8] = v406;
                    v403[9] = &v411[8 * v410];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v404 = *(_QWORD *)(v31 + 16);
                    v406 = v404 + 1;
                  }
                  v403[8] = v406;
                  v414 = v621;
                  v415 = (_QWORD *)v621[11];
                  v416 = v621[12];
                  if ((unint64_t)v415 >= v416)
                  {
                    v12 = v621[10];
                    v418 = ((uint64_t)v415 - v12) >> 3;
                    if ((unint64_t)(v418 + 1) >> 61)
                      sub_4074();
                    v419 = v416 - v12;
                    v420 = (uint64_t)(v416 - v12) >> 2;
                    if (v420 <= v418 + 1)
                      v420 = v418 + 1;
                    if (v419 >= 0x7FFFFFFFFFFFFFF8)
                      v421 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v421 = v420;
                    if (v421)
                    {
                      v422 = (char *)sub_40FC((uint64_t)(v621 + 12), v421);
                      v12 = v414[10];
                      v415 = (_QWORD *)v414[11];
                    }
                    else
                    {
                      v422 = 0;
                    }
                    v423 = &v422[8 * v418];
                    *(_QWORD *)v423 = *(_QWORD *)(v31 + 40);
                    v417 = v423 + 8;
                    while (v415 != (_QWORD *)v12)
                    {
                      v424 = *--v415;
                      *((_QWORD *)v423 - 1) = v424;
                      v423 -= 8;
                    }
                    v414[10] = v423;
                    v414[11] = v417;
                    v414[12] = &v422[8 * v421];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v415 = *(_QWORD *)(v31 + 40);
                    v417 = v415 + 1;
                  }
                  v414[11] = v417;
                }
                if (*(_BYTE *)(v31 + 48))
                  *(_BYTE *)(v31 + 48) = 0;
              }
            }
            goto LABEL_864;
          case 0xDu:
            v93 = v576 + 40 * (v636 & 3);
            if (*(_BYTE *)(v93 + 32))
            {
              v94 = sub_11FD14();
              if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&dword_0, v94, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v95 = v621[3256];
            v96 = v621[3255];
            v97 = v621[3259];
            v98 = v621[3258];
            v99 = *(_QWORD *)(a1 + 112);
            if (v99 == -1)
              v99 = 0;
            *(_QWORD *)(a1 + 112) = v99 + 1;
            if (!*(_BYTE *)(v93 + 32))
              *(_BYTE *)(v93 + 32) = 1;
            *(_QWORD *)v93 = (((v97 - v98) << 29) - 0x100000000) | (((unint64_t)(v95 - v96) >> 3)
                                                                    - 1);
            *(_QWORD *)(v93 + 16) = v99;
            *(_DWORD *)(v93 + 24) = -1;
            goto LABEL_864;
          case 0xEu:
            sub_3D3D4(a1, v621, v636 & 3);
            goto LABEL_864;
          case 0xFu:
            v58 = DWORD1(v636);
            if (DWORD1(v636) <= 7)
            {
              v59 = v571 + 12 * DWORD1(v636);
              *(_QWORD *)v59 = v636;
              *(_DWORD *)(v59 + 8) = DWORD2(v636);
              v60 = v58 - 4;
              if (v60 <= 2)
              {
                v61 = v576 + 40 * v60;
                if (*(_BYTE *)(v61 + 32))
                {
                  if (v636 <= 7)
                  {
                    v62 = v575 + 56 * v636;
                    if (*(_BYTE *)(v62 + 48))
                      *(_DWORD *)(v61 + 24) = *(_DWORD *)(v62 + 24);
                  }
                }
              }
            }
            goto LABEL_864;
          case 0x10u:
            v620 = (v620 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_864;
          default:
            goto LABEL_864;
        }
      }
      if (v570)
        *v570 = 2;
    }
    else
    {
      v586 = 0;
    }
LABEL_880:
    for (i = 0; i != 207; ++i)
    {
      v549 = v621;
      if (v621[3 * i + 97] != v621[3 * i + 98])
      {
        v12 = (uint64_t)sub_3D918(v12, i);
        v550 = v12;
        v551 = (uint64_t *)v549[3248];
        v552 = v549[3249];
        if ((unint64_t)v551 >= v552)
        {
          v554 = v549[3247];
          v555 = ((uint64_t)v551 - v554) >> 3;
          if ((unint64_t)(v555 + 1) >> 61)
            sub_4074();
          v556 = v552 - v554;
          v557 = v556 >> 2;
          if (v556 >> 2 <= (unint64_t)(v555 + 1))
            v557 = v555 + 1;
          if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFF8)
            v558 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v558 = v557;
          if (v558)
            v12 = (uint64_t)sub_40FC((uint64_t)(v549 + 3249), v558);
          else
            v12 = 0;
          v559 = (uint64_t *)(v12 + 8 * v555);
          *v559 = v550;
          v553 = v559 + 1;
          v560 = (char *)v549[3248];
          v561 = (char *)v549[3247];
          if (v560 != v561)
          {
            do
            {
              v562 = *((_QWORD *)v560 - 1);
              v560 -= 8;
              *--v559 = v562;
            }
            while (v560 != v561);
            v560 = (char *)v549[3247];
          }
          v549[3247] = v559;
          v549[3248] = v553;
          v549[3249] = v12 + 8 * v558;
          if (v560)
            operator delete(v560);
        }
        else
        {
          *v551 = v12;
          v553 = v551 + 1;
        }
        v549[3248] = v553;
      }
    }
    result = v621;
    v621[3250] = v586;
    result[3251] = v620;
  }
  else
  {
    result = 0;
    if (a5)
      *a5 = 1;
  }
  return result;
}

void sub_310CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_3119C(uint64_t a1, char ***a2)
{
  unsigned int v4;
  char **v5;
  char ***v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD **v17;
  unint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD **v23;
  unint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD **v29;
  unint64_t v30;
  _QWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD **v35;
  unint64_t v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD **v41;
  unint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD **v47;
  unint64_t v48;
  _QWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD **v53;
  unint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD **v59;
  unint64_t v60;
  _QWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD **v65;
  unint64_t v66;
  _QWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD **v71;
  unint64_t v72;
  _QWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD **v77;
  unint64_t v78;
  _QWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD **v83;
  unint64_t v84;
  _QWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD **v89;
  unint64_t v90;
  _QWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD **v95;
  unint64_t v96;
  _QWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD **v101;
  unint64_t v102;
  _QWORD *v103;
  _DWORD *v104;
  uint64_t v105;
  _DWORD *v106;
  _DWORD **v107;
  unint64_t v108;
  _QWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  _DWORD *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  _DWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  _DWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  _DWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  _DWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  _DWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  _DWORD *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  _DWORD *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  _DWORD *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  _DWORD *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  _DWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  _DWORD *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  _DWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  _DWORD *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  _DWORD *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  int v208;
  uint64_t v209;
  _DWORD *v210;
  _DWORD **v211;
  unint64_t v212;
  _QWORD *v213;
  _DWORD *v214;
  _DWORD *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  int v222;
  uint64_t v223;
  int *v224;
  int **v225;
  unint64_t v226;
  _QWORD *v227;
  int v228;
  int *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  int v236;
  uint64_t v237;
  _DWORD *v238;
  _DWORD **v239;
  unint64_t v240;
  _QWORD *v241;
  _DWORD *v242;
  _DWORD *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  int v250;
  uint64_t v251;
  _DWORD *v252;
  _DWORD **v253;
  unint64_t v254;
  _QWORD *v255;
  _DWORD *v256;
  _DWORD *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  int v264;
  uint64_t v265;
  _DWORD *v266;
  _DWORD **v267;
  unint64_t v268;
  _QWORD *v269;
  _DWORD *v270;
  _DWORD *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  int v278;
  uint64_t v279;
  _DWORD *v280;
  _DWORD **v281;
  unint64_t v282;
  _QWORD *v283;
  _DWORD *v284;
  _DWORD *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  int v292;
  uint64_t v293;
  _DWORD *v294;
  _DWORD **v295;
  unint64_t v296;
  _QWORD *v297;
  _DWORD *v298;
  _DWORD *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  int v306;
  uint64_t v307;
  _DWORD *v308;
  _DWORD **v309;
  unint64_t v310;
  _QWORD *v311;
  _DWORD *v312;
  _DWORD *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  int v320;
  uint64_t v321;
  _DWORD *v322;
  _DWORD **v323;
  unint64_t v324;
  _QWORD *v325;
  _DWORD *v326;
  _DWORD *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  int v334;
  uint64_t v335;
  _DWORD *v336;
  _DWORD **v337;
  unint64_t v338;
  _QWORD *v339;
  _DWORD *v340;
  _DWORD *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  char *v347;
  int v348;
  uint64_t v349;
  _DWORD *v350;
  _DWORD **v351;
  unint64_t v352;
  _QWORD *v353;
  _DWORD *v354;
  _DWORD *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  char *v360;
  char *v361;
  int v362;
  uint64_t v363;
  _DWORD *v364;
  _DWORD **v365;
  unint64_t v366;
  _QWORD *v367;
  _DWORD *v368;
  _DWORD *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  char *v374;
  char *v375;
  int v376;
  uint64_t v377;
  _DWORD *v378;
  _DWORD **v379;
  unint64_t v380;
  _QWORD *v381;
  _DWORD *v382;
  _DWORD *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  char *v388;
  char *v389;
  int v390;
  uint64_t v391;
  _DWORD *v392;
  _DWORD **v393;
  unint64_t v394;
  _QWORD *v395;
  _DWORD *v396;
  _DWORD *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  int v404;
  uint64_t v405;
  _DWORD *v406;
  _DWORD **v407;
  unint64_t v408;
  _QWORD *v409;
  _DWORD *v410;
  uint64_t v411;
  _DWORD *v412;
  _DWORD **v413;
  unint64_t v414;
  _QWORD *v415;
  _DWORD *v416;
  _DWORD *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char *v422;
  _DWORD *v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  char *v428;
  char *v429;
  int v430;
  uint64_t v431;
  _DWORD *v432;
  _DWORD **v433;
  unint64_t v434;
  _QWORD *v435;
  _DWORD *v436;
  _DWORD *v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  char *v442;
  char *v443;
  int v444;
  uint64_t v445;
  _DWORD *v446;
  _DWORD **v447;
  unint64_t v448;
  _QWORD *v449;
  _DWORD *v450;
  _DWORD *v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  char *v456;
  char *v457;
  int *v458;
  int v459;
  char *v460;
  int v461;
  uint64_t v462;
  _DWORD *v463;
  _DWORD **v464;
  unint64_t v465;
  _QWORD *v466;
  _DWORD *v467;
  _DWORD *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  int v475;
  uint64_t v476;
  _DWORD *v477;
  _DWORD **v478;
  unint64_t v479;
  _QWORD *v480;
  _DWORD *v481;
  _DWORD *v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  char *v487;
  char *v488;
  int v489;
  uint64_t v490;
  _DWORD *v491;
  _DWORD **v492;
  unint64_t v493;
  _QWORD *v494;
  _DWORD *v495;
  _DWORD *v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  unint64_t v500;
  char *v501;
  char *v502;
  int v503;
  uint64_t v504;
  _DWORD *v505;
  _DWORD **v506;
  unint64_t v507;
  _QWORD *v508;
  _DWORD *v509;
  _DWORD *v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  unint64_t v514;
  char *v515;
  char *v516;
  int v517;
  uint64_t v518;
  _DWORD *v519;
  _DWORD **v520;
  unint64_t v521;
  _QWORD *v522;
  _DWORD *v523;
  _DWORD *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  char *v529;
  char *v530;
  int v531;
  uint64_t v532;
  _DWORD *v533;
  _DWORD **v534;
  unint64_t v535;
  _QWORD *v536;
  _DWORD *v537;
  _DWORD *v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  char *v543;
  char *v544;
  int v545;
  uint64_t v546;
  _DWORD *v547;
  _DWORD **v548;
  unint64_t v549;
  _QWORD *v550;
  _DWORD *v551;
  _DWORD *v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  unint64_t v556;
  char *v557;
  char *v558;
  int v559;
  uint64_t v560;
  _DWORD *v561;
  _DWORD **v562;
  unint64_t v563;
  _QWORD *v564;
  _DWORD *v565;
  _DWORD *v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  char *v571;
  char *v572;
  int v573;
  uint64_t v574;
  _DWORD *v575;
  _DWORD **v576;
  unint64_t v577;
  _QWORD *v578;
  _DWORD *v579;
  _DWORD *v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  unint64_t v584;
  char *v585;
  char *v586;
  int v587;
  uint64_t v588;
  _DWORD *v589;
  _DWORD **v590;
  unint64_t v591;
  _QWORD *v592;
  _DWORD *v593;
  _DWORD *v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  unint64_t v598;
  char *v599;
  char *v600;
  int v601;
  uint64_t v602;
  _DWORD *v603;
  _DWORD **v604;
  unint64_t v605;
  _QWORD *v606;
  _DWORD *v607;
  _DWORD *v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t v611;
  unint64_t v612;
  char *v613;
  char *v614;
  int v615;
  uint64_t v616;
  _DWORD *v617;
  _DWORD **v618;
  unint64_t v619;
  _QWORD *v620;
  _DWORD *v621;
  _DWORD *v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  unint64_t v626;
  char *v627;
  char *v628;
  int v629;
  uint64_t v630;
  _DWORD *v631;
  _DWORD **v632;
  unint64_t v633;
  _QWORD *v634;
  _DWORD *v635;
  _DWORD *v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  unint64_t v640;
  char *v641;
  char *v642;
  int v643;
  uint64_t v644;
  _DWORD *v645;
  _DWORD **v646;
  unint64_t v647;
  _QWORD *v648;
  _DWORD *v649;
  _DWORD *v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  char *v655;
  char *v656;
  int v657;
  char *v658;
  int v659;
  unint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  char *v664;
  int v665;
  uint64_t v666;
  _DWORD *v667;
  _DWORD **v668;
  unint64_t v669;
  _QWORD *v670;
  _DWORD *v671;
  _DWORD *v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  unint64_t v676;
  char *v677;
  char *v678;
  int v679;
  uint64_t v680;
  _DWORD *v681;
  _DWORD **v682;
  unint64_t v683;
  _QWORD *v684;
  _DWORD *v685;
  _DWORD *v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  char *v691;
  char *v692;
  int v693;
  uint64_t v694;
  _DWORD *v695;
  _DWORD **v696;
  unint64_t v697;
  _QWORD *v698;
  _DWORD *v699;
  _DWORD *v700;
  uint64_t v701;
  unint64_t v702;
  uint64_t v703;
  unint64_t v704;
  char *v705;
  char *v706;
  int v707;
  uint64_t v708;
  _DWORD *v709;
  _DWORD **v710;
  unint64_t v711;
  _QWORD *v712;
  _DWORD *v713;
  _DWORD *v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  unint64_t v718;
  char *v719;
  char *v720;
  int v721;
  uint64_t v722;
  _DWORD *v723;
  _DWORD **v724;
  unint64_t v725;
  _QWORD *v726;
  _DWORD *v727;
  _DWORD *v728;
  uint64_t v729;
  unint64_t v730;
  uint64_t v731;
  unint64_t v732;
  char *v733;
  char *v734;
  int v735;
  uint64_t v736;
  _DWORD *v737;
  _DWORD **v738;
  unint64_t v739;
  _QWORD *v740;
  _DWORD *v741;
  _DWORD *v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  unint64_t v746;
  char *v747;
  char *v748;
  int v749;
  uint64_t v750;
  _DWORD *v751;
  _DWORD **v752;
  unint64_t v753;
  _QWORD *v754;
  _DWORD *v755;
  _DWORD *v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t v759;
  unint64_t v760;
  char *v761;
  char *v762;
  int v763;
  uint64_t v764;
  _DWORD *v765;
  _DWORD **v766;
  unint64_t v767;
  _QWORD *v768;
  _DWORD *v769;
  _DWORD *v770;
  uint64_t v771;
  unint64_t v772;
  uint64_t v773;
  unint64_t v774;
  char *v775;
  char *v776;
  int v777;
  uint64_t v778;
  _DWORD *v779;
  _DWORD **v780;
  unint64_t v781;
  _QWORD *v782;
  _DWORD *v783;
  _DWORD *v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  unint64_t v788;
  char *v789;
  char *v790;
  int v791;
  unint64_t v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  char *v796;
  int v797;
  uint64_t v798;
  _DWORD *v799;
  _DWORD **v800;
  unint64_t v801;
  _QWORD *v802;
  _DWORD *v803;
  _DWORD *v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  unint64_t v808;
  char *v809;
  char *v810;
  int v811;
  uint64_t v812;
  _DWORD *v813;
  _DWORD **v814;
  unint64_t v815;
  _QWORD *v816;
  _DWORD *v817;
  _DWORD *v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  unint64_t v822;
  char *v823;
  char *v824;
  int v825;
  uint64_t v826;
  _DWORD *v827;
  _DWORD **v828;
  unint64_t v829;
  _QWORD *v830;
  _DWORD *v831;
  _DWORD *v832;
  uint64_t v833;
  unint64_t v834;
  uint64_t v835;
  unint64_t v836;
  char *v837;
  char *v838;
  int v839;
  uint64_t v840;
  _DWORD *v841;
  _DWORD **v842;
  unint64_t v843;
  _QWORD *v844;
  _DWORD *v845;
  _DWORD *v846;
  uint64_t v847;
  unint64_t v848;
  uint64_t v849;
  unint64_t v850;
  char *v851;
  int v852;
  char *v853;
  int v854;
  uint64_t v855;
  _DWORD *v856;
  _DWORD **v857;
  unint64_t v858;
  _QWORD *v859;
  _DWORD *v860;
  _DWORD *v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  unint64_t v865;
  char *v866;
  char *v867;
  int v868;
  uint64_t v869;
  _DWORD *v870;
  _DWORD **v871;
  unint64_t v872;
  _QWORD *v873;
  _DWORD *v874;
  _DWORD *v875;
  uint64_t v876;
  unint64_t v877;
  uint64_t v878;
  unint64_t v879;
  char *v880;
  char *v881;
  int v882;
  uint64_t v883;
  _DWORD *v884;
  _DWORD **v885;
  unint64_t v886;
  _QWORD *v887;
  _DWORD *v888;
  _DWORD *v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  unint64_t v893;
  char *v894;
  char *v895;
  int v896;
  uint64_t v897;
  _DWORD *v898;
  _DWORD **v899;
  unint64_t v900;
  _QWORD *v901;
  _DWORD *v902;
  _DWORD *v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t v906;
  unint64_t v907;
  char *v908;
  char *v909;
  int v910;
  uint64_t v911;
  _DWORD *v912;
  _DWORD **v913;
  unint64_t v914;
  _QWORD *v915;
  _DWORD *v916;
  _DWORD *v917;
  uint64_t v918;
  unint64_t v919;
  uint64_t v920;
  unint64_t v921;
  char *v922;
  char *v923;
  int v924;
  uint64_t v925;
  _DWORD *v926;
  _DWORD **v927;
  unint64_t v928;
  _QWORD *v929;
  _DWORD *v930;
  _DWORD *v931;
  uint64_t v932;
  unint64_t v933;
  uint64_t v934;
  unint64_t v935;
  char *v936;
  char *v937;
  int v938;
  uint64_t v939;
  _DWORD *v940;
  _DWORD **v941;
  unint64_t v942;
  _QWORD *v943;
  _DWORD *v944;
  _DWORD *v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  unint64_t v949;
  char *v950;
  char *v951;
  int v952;
  uint64_t v953;
  _DWORD *v954;
  _DWORD **v955;
  unint64_t v956;
  _QWORD *v957;
  _DWORD *v958;
  _DWORD *v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  unint64_t v963;
  char *v964;
  char *v965;
  int v966;
  uint64_t v967;
  _DWORD *v968;
  _DWORD **v969;
  unint64_t v970;
  _QWORD *v971;
  _DWORD *v972;
  _DWORD *v973;
  uint64_t v974;
  unint64_t v975;
  uint64_t v976;
  unint64_t v977;
  char *v978;
  int v979;
  char *v980;
  int v981;
  uint64_t v982;
  _DWORD *v983;
  _DWORD **v984;
  unint64_t v985;
  _QWORD *v986;
  _DWORD *v987;
  _DWORD *v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  unint64_t v992;
  char *v993;
  char *v994;
  int v995;
  uint64_t v996;
  _DWORD *v997;
  _DWORD **v998;
  unint64_t v999;
  _QWORD *v1000;
  _DWORD *v1001;
  _DWORD *v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  char *v1007;
  char *v1008;
  int v1009;
  unint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  char *v1014;
  int v1015;
  uint64_t v1016;
  _DWORD *v1017;
  _DWORD **v1018;
  unint64_t v1019;
  _QWORD *v1020;
  _DWORD *v1021;
  _DWORD *v1022;
  uint64_t v1023;
  unint64_t v1024;
  uint64_t v1025;
  unint64_t v1026;
  char *v1027;
  char *v1028;
  int v1029;
  uint64_t v1030;
  _DWORD *v1031;
  _DWORD **v1032;
  unint64_t v1033;
  _QWORD *v1034;
  _DWORD *v1035;
  _DWORD *v1036;
  uint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  unint64_t v1040;
  char *v1041;
  char *v1042;
  int v1043;
  uint64_t v1044;
  _DWORD *v1045;
  _DWORD **v1046;
  unint64_t v1047;
  _QWORD *v1048;
  _DWORD *v1049;
  _DWORD *v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  char *v1055;
  char *v1056;
  int v1057;
  uint64_t v1058;
  _DWORD *v1059;
  _DWORD **v1060;
  unint64_t v1061;
  _QWORD *v1062;
  _DWORD *v1063;
  _DWORD *v1064;
  uint64_t v1065;
  unint64_t v1066;
  uint64_t v1067;
  unint64_t v1068;
  char *v1069;
  char *v1070;
  int v1071;
  uint64_t v1072;
  _DWORD *v1073;
  _DWORD **v1074;
  unint64_t v1075;
  _QWORD *v1076;
  _DWORD *v1077;
  _DWORD *v1078;
  uint64_t v1079;
  unint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  char *v1083;
  char *v1084;
  int v1085;
  uint64_t v1086;
  _DWORD *v1087;
  _DWORD **v1088;
  unint64_t v1089;
  _QWORD *v1090;
  _DWORD *v1091;
  _DWORD *v1092;
  uint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  char *v1097;
  char *v1098;
  int v1099;
  uint64_t v1100;
  _DWORD *v1101;
  _DWORD **v1102;
  unint64_t v1103;
  _QWORD *v1104;
  _DWORD *v1105;
  _DWORD *v1106;
  uint64_t v1107;
  unint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  char *v1111;
  char *v1112;
  int v1113;
  uint64_t v1114;
  _DWORD *v1115;
  _DWORD **v1116;
  unint64_t v1117;
  _QWORD *v1118;
  _DWORD *v1119;
  uint64_t v1120;
  _DWORD *v1121;
  _DWORD **v1122;
  unint64_t v1123;
  _QWORD *v1124;
  _DWORD *v1125;
  _DWORD *v1126;
  uint64_t v1127;
  unint64_t v1128;
  uint64_t v1129;
  unint64_t v1130;
  char *v1131;
  _DWORD *v1132;
  uint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  char *v1137;
  char *v1138;
  int v1139;
  uint64_t v1140;
  _DWORD *v1141;
  _DWORD **v1142;
  unint64_t v1143;
  _QWORD *v1144;
  _DWORD *v1145;
  _DWORD *v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  unint64_t v1150;
  char *v1151;
  char *v1152;
  int v1153;
  uint64_t v1154;
  _DWORD *v1155;
  _DWORD **v1156;
  unint64_t v1157;
  _QWORD *v1158;
  _DWORD *v1159;
  _DWORD *v1160;
  uint64_t v1161;
  unint64_t v1162;
  uint64_t v1163;
  unint64_t v1164;
  char *v1165;
  char *v1166;
  int v1167;
  uint64_t v1168;
  _DWORD *v1169;
  _DWORD **v1170;
  unint64_t v1171;
  _QWORD *v1172;
  _DWORD *v1173;
  _DWORD *v1174;
  uint64_t v1175;
  unint64_t v1176;
  uint64_t v1177;
  unint64_t v1178;
  char *v1179;
  char *v1180;
  int v1181;
  uint64_t v1182;
  _DWORD *v1183;
  _DWORD **v1184;
  unint64_t v1185;
  _QWORD *v1186;
  _DWORD *v1187;
  _DWORD *v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  char *v1193;
  int v1194;
  char *v1195;
  int v1196;
  unint64_t v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  char *v1201;
  int v1202;
  uint64_t v1203;
  _DWORD *v1204;
  _DWORD **v1205;
  unint64_t v1206;
  _QWORD *v1207;
  _DWORD *v1208;
  _DWORD *v1209;
  uint64_t v1210;
  unint64_t v1211;
  uint64_t v1212;
  unint64_t v1213;
  char *v1214;
  char *v1215;
  int v1216;
  uint64_t v1217;
  _DWORD *v1218;
  _DWORD **v1219;
  unint64_t v1220;
  _QWORD *v1221;
  _DWORD *v1222;
  _DWORD *v1223;
  uint64_t v1224;
  unint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  char *v1228;
  char *v1229;
  int v1230;
  uint64_t v1231;
  _DWORD *v1232;
  _DWORD **v1233;
  unint64_t v1234;
  _QWORD *v1235;
  _DWORD *v1236;
  _DWORD *v1237;
  uint64_t v1238;
  unint64_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  char *v1242;
  char *v1243;
  int v1244;
  uint64_t v1245;
  _DWORD *v1246;
  _DWORD **v1247;
  unint64_t v1248;
  _QWORD *v1249;
  _DWORD *v1250;
  _DWORD *v1251;
  uint64_t v1252;
  unint64_t v1253;
  uint64_t v1254;
  unint64_t v1255;
  char *v1256;
  char *v1257;
  int v1258;
  uint64_t v1259;
  _DWORD *v1260;
  _DWORD **v1261;
  unint64_t v1262;
  _QWORD *v1263;
  _DWORD *v1264;
  _DWORD *v1265;
  uint64_t v1266;
  unint64_t v1267;
  uint64_t v1268;
  unint64_t v1269;
  char *v1270;
  char *v1271;
  int v1272;
  uint64_t v1273;
  _DWORD *v1274;
  _DWORD **v1275;
  unint64_t v1276;
  _QWORD *v1277;
  _DWORD *v1278;
  _DWORD *v1279;
  uint64_t v1280;
  unint64_t v1281;
  uint64_t v1282;
  unint64_t v1283;
  char *v1284;
  char *v1285;
  int v1286;
  uint64_t v1287;
  _DWORD *v1288;
  _DWORD **v1289;
  unint64_t v1290;
  _QWORD *v1291;
  _DWORD *v1292;
  _DWORD *v1293;
  uint64_t v1294;
  unint64_t v1295;
  uint64_t v1296;
  unint64_t v1297;
  char *v1298;
  char *v1299;
  int v1300;
  uint64_t v1301;
  _DWORD *v1302;
  _DWORD **v1303;
  unint64_t v1304;
  _QWORD *v1305;
  _DWORD *v1306;
  _DWORD *v1307;
  uint64_t v1308;
  unint64_t v1309;
  uint64_t v1310;
  unint64_t v1311;
  char *v1312;
  char *v1313;
  int v1314;
  uint64_t v1315;
  _DWORD *v1316;
  _DWORD **v1317;
  unint64_t v1318;
  _QWORD *v1319;
  _DWORD *v1320;
  _DWORD *v1321;
  uint64_t v1322;
  unint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  char *v1326;
  char *v1327;
  int v1328;
  uint64_t v1329;
  _DWORD *v1330;
  _DWORD **v1331;
  unint64_t v1332;
  _QWORD *v1333;
  _DWORD *v1334;
  _DWORD *v1335;
  uint64_t v1336;
  unint64_t v1337;
  uint64_t v1338;
  unint64_t v1339;
  char *v1340;
  char *v1341;
  int v1342;
  uint64_t v1343;
  _DWORD *v1344;
  _DWORD **v1345;
  unint64_t v1346;
  _QWORD *v1347;
  _DWORD *v1348;
  _DWORD *v1349;
  uint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  char *v1354;
  int v1355;
  char *v1356;
  int v1357;
  char *v1358;
  int v1359;
  uint64_t v1360;
  _DWORD *v1361;
  _DWORD **v1362;
  unint64_t v1363;
  _QWORD *v1364;
  _DWORD *v1365;
  _DWORD *v1366;
  uint64_t v1367;
  unint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  char *v1371;
  char *v1372;
  int v1373;
  unint64_t v1374;
  uint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  char *v1378;
  int v1379;
  uint64_t v1380;
  _DWORD *v1381;
  _DWORD **v1382;
  unint64_t v1383;
  _QWORD *v1384;
  _DWORD *v1385;
  _DWORD *v1386;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  unint64_t v1390;
  char *v1391;
  char *v1392;
  int v1393;
  uint64_t v1394;
  _DWORD *v1395;
  _DWORD **v1396;
  unint64_t v1397;
  _QWORD *v1398;
  _DWORD *v1399;
  _DWORD *v1400;
  uint64_t v1401;
  unint64_t v1402;
  uint64_t v1403;
  unint64_t v1404;
  char *v1405;
  char *v1406;
  int v1407;
  uint64_t v1408;
  _DWORD *v1409;
  _DWORD **v1410;
  unint64_t v1411;
  _QWORD *v1412;
  _DWORD *v1413;
  _DWORD *v1414;
  uint64_t v1415;
  unint64_t v1416;
  uint64_t v1417;
  unint64_t v1418;
  char *v1419;
  char *v1420;
  int v1421;
  uint64_t v1422;
  _DWORD *v1423;
  _DWORD **v1424;
  unint64_t v1425;
  _QWORD *v1426;
  _DWORD *v1427;
  _DWORD *v1428;
  uint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  unint64_t v1432;
  char *v1433;
  char *v1434;
  int v1435;
  uint64_t v1436;
  _DWORD *v1437;
  _DWORD **v1438;
  unint64_t v1439;
  _QWORD *v1440;
  _DWORD *v1441;
  _DWORD *v1442;
  uint64_t v1443;
  unint64_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  char *v1447;
  char *v1448;
  int v1449;
  uint64_t v1450;
  _DWORD *v1451;
  _DWORD **v1452;
  unint64_t v1453;
  _QWORD *v1454;
  _DWORD *v1455;
  _DWORD *v1456;
  uint64_t v1457;
  unint64_t v1458;
  uint64_t v1459;
  unint64_t v1460;
  char *v1461;
  char *v1462;
  int v1463;
  uint64_t v1464;
  _DWORD *v1465;
  _DWORD **v1466;
  unint64_t v1467;
  _QWORD *v1468;
  _DWORD *v1469;
  _DWORD *v1470;
  uint64_t v1471;
  unint64_t v1472;
  uint64_t v1473;
  unint64_t v1474;
  char *v1475;
  char *v1476;
  int v1477;
  uint64_t v1478;
  _DWORD *v1479;
  _DWORD **v1480;
  unint64_t v1481;
  _QWORD *v1482;
  _DWORD *v1483;
  _DWORD *v1484;
  uint64_t v1485;
  unint64_t v1486;
  uint64_t v1487;
  unint64_t v1488;
  char *v1489;
  char *v1490;
  int v1491;
  uint64_t v1492;
  _DWORD *v1493;
  _DWORD **v1494;
  unint64_t v1495;
  _QWORD *v1496;
  _DWORD *v1497;
  _DWORD *v1498;
  uint64_t v1499;
  unint64_t v1500;
  uint64_t v1501;
  unint64_t v1502;
  char *v1503;
  char *v1504;
  int v1505;
  uint64_t v1506;
  _DWORD *v1507;
  _DWORD **v1508;
  unint64_t v1509;
  _QWORD *v1510;
  _DWORD *v1511;
  _DWORD *v1512;
  uint64_t v1513;
  unint64_t v1514;
  uint64_t v1515;
  unint64_t v1516;
  char *v1517;
  char *v1518;
  int v1519;
  uint64_t v1520;
  _DWORD *v1521;
  _DWORD **v1522;
  unint64_t v1523;
  _QWORD *v1524;
  _DWORD *v1525;
  _DWORD *v1526;
  uint64_t v1527;
  unint64_t v1528;
  uint64_t v1529;
  unint64_t v1530;
  char *v1531;
  char *v1532;
  int v1533;
  uint64_t v1534;
  _DWORD *v1535;
  _DWORD **v1536;
  unint64_t v1537;
  _QWORD *v1538;
  _DWORD *v1539;
  _DWORD *v1540;
  uint64_t v1541;
  unint64_t v1542;
  uint64_t v1543;
  unint64_t v1544;
  char *v1545;
  char *v1546;
  int v1547;
  uint64_t v1548;
  _DWORD *v1549;
  _DWORD **v1550;
  unint64_t v1551;
  _QWORD *v1552;
  _DWORD *v1553;
  _DWORD *v1554;
  uint64_t v1555;
  unint64_t v1556;
  uint64_t v1557;
  unint64_t v1558;
  char *v1559;
  char *v1560;
  int v1561;
  uint64_t v1562;
  _DWORD *v1563;
  _DWORD **v1564;
  unint64_t v1565;
  _QWORD *v1566;
  _DWORD *v1567;
  _DWORD *v1568;
  uint64_t v1569;
  unint64_t v1570;
  uint64_t v1571;
  unint64_t v1572;
  char *v1573;
  char *v1574;
  int v1575;
  uint64_t v1576;
  _DWORD *v1577;
  _DWORD **v1578;
  unint64_t v1579;
  _QWORD *v1580;
  _DWORD *v1581;
  _DWORD *v1582;
  uint64_t v1583;
  unint64_t v1584;
  uint64_t v1585;
  unint64_t v1586;
  char *v1587;
  char *v1588;
  int v1589;
  uint64_t v1590;
  _DWORD *v1591;
  _DWORD **v1592;
  unint64_t v1593;
  _QWORD *v1594;
  _DWORD *v1595;
  _DWORD *v1596;
  uint64_t v1597;
  unint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  char *v1601;
  char *v1602;
  int v1603;
  uint64_t v1604;
  _DWORD *v1605;
  _DWORD **v1606;
  unint64_t v1607;
  _QWORD *v1608;
  _DWORD *v1609;
  _DWORD *v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  unint64_t v1614;
  char *v1615;
  char *v1616;
  int v1617;
  uint64_t v1618;
  _DWORD *v1619;
  _DWORD **v1620;
  unint64_t v1621;
  _QWORD *v1622;
  _DWORD *v1623;
  _DWORD *v1624;
  uint64_t v1625;
  unint64_t v1626;
  uint64_t v1627;
  unint64_t v1628;
  char *v1629;
  char *v1630;
  int v1631;
  uint64_t v1632;
  _DWORD *v1633;
  _DWORD **v1634;
  unint64_t v1635;
  _QWORD *v1636;
  _DWORD *v1637;
  _DWORD *v1638;
  uint64_t v1639;
  unint64_t v1640;
  uint64_t v1641;
  unint64_t v1642;
  char *v1643;
  int v1644;
  char *v1645;
  int v1646;
  uint64_t v1647;
  _DWORD *v1648;
  _DWORD **v1649;
  unint64_t v1650;
  _QWORD *v1651;
  _DWORD *v1652;
  _DWORD *v1653;
  uint64_t v1654;
  unint64_t v1655;
  uint64_t v1656;
  unint64_t v1657;
  char *v1658;
  char *v1659;
  int v1660;
  uint64_t v1661;
  _DWORD *v1662;
  _DWORD **v1663;
  unint64_t v1664;
  _QWORD *v1665;
  _DWORD *v1666;
  _DWORD *v1667;
  uint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  unint64_t v1671;
  char *v1672;
  char *v1673;
  int v1674;
  uint64_t v1675;
  _DWORD *v1676;
  _DWORD **v1677;
  unint64_t v1678;
  _QWORD *v1679;
  _DWORD *v1680;
  _DWORD *v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  unint64_t v1685;
  char *v1686;
  char *v1687;
  int v1688;
  unint64_t v1689;
  uint64_t v1690;
  unint64_t v1691;
  uint64_t v1692;
  char *v1693;
  int v1694;
  uint64_t v1695;
  _DWORD *v1696;
  _DWORD **v1697;
  unint64_t v1698;
  _QWORD *v1699;
  _DWORD *v1700;
  _DWORD *v1701;
  uint64_t v1702;
  unint64_t v1703;
  uint64_t v1704;
  unint64_t v1705;
  char *v1706;
  char *v1707;
  int v1708;
  uint64_t v1709;
  _DWORD *v1710;
  _DWORD **v1711;
  unint64_t v1712;
  _QWORD *v1713;
  _DWORD *v1714;
  _DWORD *v1715;
  uint64_t v1716;
  unint64_t v1717;
  uint64_t v1718;
  unint64_t v1719;
  char *v1720;
  char *v1721;
  int v1722;
  uint64_t v1723;
  int *v1724;
  int **v1725;
  unint64_t v1726;
  _QWORD *v1727;
  int v1728;
  int *v1729;
  uint64_t v1730;
  unint64_t v1731;
  uint64_t v1732;
  unint64_t v1733;
  char *v1734;
  char *v1735;
  int v1736;
  uint64_t v1737;
  _DWORD *v1738;
  _DWORD **v1739;
  unint64_t v1740;
  _QWORD *v1741;
  _DWORD *v1742;
  _DWORD *v1743;
  uint64_t v1744;
  unint64_t v1745;
  uint64_t v1746;
  unint64_t v1747;
  char *v1748;
  char *v1749;
  int v1750;
  uint64_t v1751;
  _DWORD *v1752;
  _DWORD **v1753;
  unint64_t v1754;
  _QWORD *v1755;
  _DWORD *v1756;
  _DWORD *v1757;
  uint64_t v1758;
  unint64_t v1759;
  uint64_t v1760;
  unint64_t v1761;
  char *v1762;
  char *v1763;
  int v1764;
  uint64_t v1765;
  _DWORD *v1766;
  _DWORD **v1767;
  unint64_t v1768;
  _QWORD *v1769;
  _DWORD *v1770;
  _DWORD *v1771;
  uint64_t v1772;
  unint64_t v1773;
  uint64_t v1774;
  unint64_t v1775;
  char *v1776;
  char *v1777;
  int v1778;
  unint64_t v1779;
  uint64_t v1780;
  unint64_t v1781;
  uint64_t v1782;
  char *v1783;
  int v1784;
  uint64_t v1785;
  _DWORD *v1786;
  _DWORD **v1787;
  unint64_t v1788;
  _QWORD *v1789;
  _DWORD *v1790;
  _DWORD *v1791;
  uint64_t v1792;
  unint64_t v1793;
  uint64_t v1794;
  unint64_t v1795;
  char *v1796;
  char *v1797;
  int v1798;
  uint64_t v1799;
  _DWORD *v1800;
  _DWORD **v1801;
  unint64_t v1802;
  _QWORD *v1803;
  _DWORD *v1804;
  _DWORD *v1805;
  uint64_t v1806;
  unint64_t v1807;
  uint64_t v1808;
  unint64_t v1809;
  char *v1810;
  int v1811;
  char *v1812;
  int v1813;
  uint64_t v1814;
  _DWORD *v1815;
  _DWORD **v1816;
  unint64_t v1817;
  _QWORD *v1818;
  _DWORD *v1819;
  _DWORD *v1820;
  uint64_t v1821;
  unint64_t v1822;
  uint64_t v1823;
  unint64_t v1824;
  char *v1825;
  char *v1826;
  int v1827;
  uint64_t v1828;
  _DWORD *v1829;
  _DWORD **v1830;
  unint64_t v1831;
  _QWORD *v1832;
  _DWORD *v1833;
  _DWORD *v1834;
  uint64_t v1835;
  unint64_t v1836;
  uint64_t v1837;
  unint64_t v1838;
  char *v1839;
  char *v1840;
  int *v1841;
  int v1842;
  char *v1843;
  int v1844;
  uint64_t v1845;
  _DWORD *v1846;
  _DWORD **v1847;
  unint64_t v1848;
  _QWORD *v1849;
  _DWORD *v1850;
  _DWORD *v1851;
  uint64_t v1852;
  unint64_t v1853;
  uint64_t v1854;
  unint64_t v1855;
  char *v1856;
  char *v1857;
  int v1858;
  uint64_t v1859;
  _DWORD *v1860;
  _DWORD **v1861;
  unint64_t v1862;
  _QWORD *v1863;
  _DWORD *v1864;
  _DWORD *v1865;
  uint64_t v1866;
  unint64_t v1867;
  uint64_t v1868;
  unint64_t v1869;
  char *v1870;
  char *v1871;
  int v1872;
  uint64_t v1873;
  _DWORD *v1874;
  _DWORD **v1875;
  unint64_t v1876;
  _QWORD *v1877;
  _DWORD *v1878;
  _DWORD *v1879;
  uint64_t v1880;
  unint64_t v1881;
  uint64_t v1882;
  unint64_t v1883;
  char *v1884;
  int v1885;
  char *v1886;
  int v1887;
  uint64_t v1888;
  _DWORD *v1889;
  _DWORD **v1890;
  unint64_t v1891;
  _QWORD *v1892;
  _DWORD *v1893;
  _DWORD *v1894;
  uint64_t v1895;
  unint64_t v1896;
  uint64_t v1897;
  unint64_t v1898;
  char *v1899;
  char *v1900;
  int v1901;
  uint64_t v1902;
  _DWORD *v1903;
  _DWORD **v1904;
  unint64_t v1905;
  _QWORD *v1906;
  _DWORD *v1907;
  _DWORD *v1908;
  uint64_t v1909;
  unint64_t v1910;
  uint64_t v1911;
  unint64_t v1912;
  char *v1913;
  char *v1914;
  int v1915;
  unint64_t v1916;
  uint64_t v1917;
  unint64_t v1918;
  uint64_t v1919;
  char *v1920;
  int v1921;
  uint64_t v1922;
  _DWORD *v1923;
  _DWORD **v1924;
  unint64_t v1925;
  _QWORD *v1926;
  _DWORD *v1927;
  _DWORD *v1928;
  uint64_t v1929;
  unint64_t v1930;
  uint64_t v1931;
  unint64_t v1932;
  char *v1933;
  char *v1934;
  int v1935;
  uint64_t v1936;
  _DWORD *v1937;
  _DWORD **v1938;
  unint64_t v1939;
  _QWORD *v1940;
  _DWORD *v1941;
  _DWORD *v1942;
  uint64_t v1943;
  unint64_t v1944;
  uint64_t v1945;
  unint64_t v1946;
  char *v1947;
  char *v1948;
  int v1949;
  uint64_t v1950;
  _DWORD *v1951;
  _DWORD **v1952;
  unint64_t v1953;
  _QWORD *v1954;
  _DWORD *v1955;
  _DWORD *v1956;
  uint64_t v1957;
  unint64_t v1958;
  uint64_t v1959;
  unint64_t v1960;
  char *v1961;
  char *v1962;
  int v1963;
  uint64_t v1964;
  _DWORD *v1965;
  _DWORD **v1966;
  unint64_t v1967;
  _QWORD *v1968;
  _DWORD *v1969;
  _DWORD *v1970;
  uint64_t v1971;
  unint64_t v1972;
  uint64_t v1973;
  unint64_t v1974;
  char *v1975;
  char *v1976;
  int v1977;
  uint64_t v1978;
  _DWORD *v1979;
  _DWORD **v1980;
  unint64_t v1981;
  _QWORD *v1982;
  _DWORD *v1983;
  _DWORD *v1984;
  uint64_t v1985;
  unint64_t v1986;
  uint64_t v1987;
  unint64_t v1988;
  char *v1989;
  char *v1990;
  int v1991;
  uint64_t v1992;
  _DWORD *v1993;
  _DWORD **v1994;
  unint64_t v1995;
  _QWORD *v1996;
  _DWORD *v1997;
  _DWORD *v1998;
  uint64_t v1999;
  unint64_t v2000;
  uint64_t v2001;
  unint64_t v2002;
  char *v2003;
  int v2004;
  char *v2005;
  int v2006;
  uint64_t v2007;
  _DWORD *v2008;
  _DWORD **v2009;
  unint64_t v2010;
  _QWORD *v2011;
  _DWORD *v2012;
  _DWORD *v2013;
  uint64_t v2014;
  unint64_t v2015;
  uint64_t v2016;
  unint64_t v2017;
  char *v2018;
  char *v2019;
  int v2020;
  uint64_t v2021;
  _DWORD *v2022;
  _DWORD **v2023;
  unint64_t v2024;
  _QWORD *v2025;
  _DWORD *v2026;
  _DWORD *v2027;
  uint64_t v2028;
  unint64_t v2029;
  uint64_t v2030;
  unint64_t v2031;
  char *v2032;
  char *v2033;
  int v2034;
  uint64_t v2035;
  _DWORD *v2036;
  _DWORD **v2037;
  unint64_t v2038;
  _QWORD *v2039;
  _DWORD *v2040;
  _DWORD *v2041;
  uint64_t v2042;
  unint64_t v2043;
  uint64_t v2044;
  unint64_t v2045;
  char *v2046;
  char *v2047;
  int v2048;
  uint64_t v2049;
  _DWORD *v2050;
  _DWORD **v2051;
  unint64_t v2052;
  _QWORD *v2053;
  _DWORD *v2054;
  _DWORD *v2055;
  uint64_t v2056;
  unint64_t v2057;
  uint64_t v2058;
  unint64_t v2059;
  char *v2060;
  char *v2061;
  int v2062;
  uint64_t v2063;
  _DWORD *v2064;
  _DWORD **v2065;
  unint64_t v2066;
  _QWORD *v2067;
  _DWORD *v2068;
  _DWORD *v2069;
  uint64_t v2070;
  unint64_t v2071;
  uint64_t v2072;
  unint64_t v2073;
  char *v2074;
  char *v2075;
  int v2076;
  uint64_t v2077;
  _DWORD *v2078;
  _DWORD **v2079;
  unint64_t v2080;
  _QWORD *v2081;
  _DWORD *v2082;
  _DWORD *v2083;
  uint64_t v2084;
  unint64_t v2085;
  uint64_t v2086;
  unint64_t v2087;
  char *v2088;
  char *v2089;
  int v2090;
  uint64_t v2091;
  _DWORD *v2092;
  _DWORD **v2093;
  unint64_t v2094;
  _QWORD *v2095;
  _DWORD *v2096;
  _DWORD *v2097;
  uint64_t v2098;
  unint64_t v2099;
  uint64_t v2100;
  unint64_t v2101;
  char *v2102;
  char *v2103;
  int v2104;
  uint64_t v2105;
  _DWORD *v2106;
  _DWORD **v2107;
  unint64_t v2108;
  _QWORD *v2109;
  _DWORD *v2110;
  _DWORD *v2111;
  uint64_t v2112;
  unint64_t v2113;
  uint64_t v2114;
  unint64_t v2115;
  char *v2116;
  char *v2117;
  int v2118;
  uint64_t v2119;
  _DWORD *v2120;
  _DWORD **v2121;
  unint64_t v2122;
  _QWORD *v2123;
  _DWORD *v2124;
  _DWORD *v2125;
  uint64_t v2126;
  unint64_t v2127;
  uint64_t v2128;
  unint64_t v2129;
  char *v2130;
  char *v2131;
  int v2132;
  uint64_t v2133;
  _DWORD *v2134;
  _DWORD **v2135;
  unint64_t v2136;
  _QWORD *v2137;
  _DWORD *v2138;
  _DWORD *v2139;
  uint64_t v2140;
  unint64_t v2141;
  uint64_t v2142;
  unint64_t v2143;
  char *v2144;
  char *v2145;
  int v2146;
  uint64_t v2147;
  _DWORD *v2148;
  _DWORD **v2149;
  unint64_t v2150;
  _QWORD *v2151;
  _DWORD *v2152;
  _DWORD *v2153;
  uint64_t v2154;
  unint64_t v2155;
  uint64_t v2156;
  unint64_t v2157;
  char *v2158;
  char *v2159;
  int v2160;
  uint64_t v2161;
  _DWORD *v2162;
  _DWORD **v2163;
  unint64_t v2164;
  _QWORD *v2165;
  _DWORD *v2166;
  _DWORD *v2167;
  uint64_t v2168;
  unint64_t v2169;
  uint64_t v2170;
  unint64_t v2171;
  char *v2172;
  char *v2173;
  int v2174;
  uint64_t v2175;
  _DWORD *v2176;
  _DWORD **v2177;
  unint64_t v2178;
  _QWORD *v2179;
  _DWORD *v2180;
  _DWORD *v2181;
  uint64_t v2182;
  unint64_t v2183;
  uint64_t v2184;
  unint64_t v2185;
  char *v2186;
  char *v2187;
  int v2188;
  unint64_t v2189;
  uint64_t v2190;
  unint64_t v2191;
  uint64_t v2192;
  char *v2193;
  int v2194;
  uint64_t v2195;
  _DWORD *v2196;
  _DWORD **v2197;
  unint64_t v2198;
  _QWORD *v2199;
  _DWORD *v2200;
  _DWORD *v2201;
  uint64_t v2202;
  unint64_t v2203;
  uint64_t v2204;
  unint64_t v2205;
  char *v2206;
  char *v2207;
  int v2208;
  uint64_t v2209;
  _DWORD *v2210;
  _DWORD **v2211;
  unint64_t v2212;
  _QWORD *v2213;
  _DWORD *v2214;
  _DWORD *v2215;
  uint64_t v2216;
  unint64_t v2217;
  uint64_t v2218;
  unint64_t v2219;
  char *v2220;
  char *v2221;
  int v2222;
  uint64_t v2223;
  _DWORD *v2224;
  _DWORD **v2225;
  unint64_t v2226;
  _QWORD *v2227;
  _DWORD *v2228;
  _DWORD *v2229;
  uint64_t v2230;
  unint64_t v2231;
  uint64_t v2232;
  unint64_t v2233;
  char *v2234;
  char *v2235;
  int v2236;
  uint64_t v2237;
  _DWORD *v2238;
  _DWORD **v2239;
  unint64_t v2240;
  _QWORD *v2241;
  _DWORD *v2242;
  _DWORD *v2243;
  uint64_t v2244;
  unint64_t v2245;
  uint64_t v2246;
  unint64_t v2247;
  char *v2248;
  char *v2249;
  int v2250;
  uint64_t v2251;
  _DWORD *v2252;
  _DWORD **v2253;
  unint64_t v2254;
  _QWORD *v2255;
  _DWORD *v2256;
  _DWORD *v2257;
  uint64_t v2258;
  unint64_t v2259;
  uint64_t v2260;
  unint64_t v2261;
  char *v2262;
  int v2263;
  char *v2264;
  int v2265;
  uint64_t v2266;
  _DWORD *v2267;
  _DWORD **v2268;
  unint64_t v2269;
  _QWORD *v2270;
  _DWORD *v2271;
  _DWORD *v2272;
  uint64_t v2273;
  unint64_t v2274;
  uint64_t v2275;
  unint64_t v2276;
  char *v2277;
  char *v2278;
  int v2279;
  unint64_t v2280;
  uint64_t v2281;
  unint64_t v2282;
  uint64_t v2283;
  char *v2284;
  int v2285;
  uint64_t v2286;
  _DWORD *v2287;
  _DWORD **v2288;
  unint64_t v2289;
  _QWORD *v2290;
  _DWORD *v2291;
  _DWORD *v2292;
  uint64_t v2293;
  unint64_t v2294;
  uint64_t v2295;
  unint64_t v2296;
  char *v2297;
  char *v2298;
  int v2299;
  uint64_t v2300;
  _DWORD *v2301;
  _DWORD **v2302;
  unint64_t v2303;
  _QWORD *v2304;
  _DWORD *v2305;
  _DWORD *v2306;
  uint64_t v2307;
  unint64_t v2308;
  uint64_t v2309;
  unint64_t v2310;
  char *v2311;
  char *v2312;
  int v2313;
  uint64_t v2314;
  _DWORD *v2315;
  _DWORD **v2316;
  unint64_t v2317;
  _QWORD *v2318;
  _DWORD *v2319;
  _DWORD *v2320;
  uint64_t v2321;
  unint64_t v2322;
  uint64_t v2323;
  unint64_t v2324;
  char *v2325;
  char *v2326;
  int v2327;
  uint64_t v2328;
  _DWORD *v2329;
  _DWORD **v2330;
  unint64_t v2331;
  _QWORD *v2332;
  _DWORD *v2333;
  _DWORD *v2334;
  uint64_t v2335;
  unint64_t v2336;
  uint64_t v2337;
  unint64_t v2338;
  char *v2339;
  int v2340;
  char *v2341;
  int v2342;
  uint64_t v2343;
  _DWORD *v2344;
  _DWORD **v2345;
  unint64_t v2346;
  _QWORD *v2347;
  _DWORD *v2348;
  _DWORD *v2349;
  uint64_t v2350;
  unint64_t v2351;
  uint64_t v2352;
  unint64_t v2353;
  char *v2354;
  char *v2355;
  int v2356;
  uint64_t v2357;
  _DWORD *v2358;
  _DWORD **v2359;
  unint64_t v2360;
  _QWORD *v2361;
  _DWORD *v2362;
  _DWORD *v2363;
  uint64_t v2364;
  unint64_t v2365;
  uint64_t v2366;
  unint64_t v2367;
  char *v2368;
  char *v2369;
  int v2370;
  uint64_t v2371;
  _DWORD *v2372;
  _DWORD **v2373;
  unint64_t v2374;
  _QWORD *v2375;
  _DWORD *v2376;
  _DWORD *v2377;
  uint64_t v2378;
  unint64_t v2379;
  uint64_t v2380;
  unint64_t v2381;
  char *v2382;
  char *v2383;
  int v2384;
  unint64_t v2385;
  uint64_t v2386;
  unint64_t v2387;
  uint64_t v2388;
  char *v2389;
  int v2390;
  uint64_t v2391;
  _DWORD *v2392;
  _DWORD **v2393;
  unint64_t v2394;
  _QWORD *v2395;
  _DWORD *v2396;
  _DWORD *v2397;
  uint64_t v2398;
  unint64_t v2399;
  uint64_t v2400;
  unint64_t v2401;
  char *v2402;
  char *v2403;
  int v2404;
  uint64_t v2405;
  _DWORD *v2406;
  _DWORD **v2407;
  unint64_t v2408;
  _QWORD *v2409;
  _DWORD *v2410;
  _DWORD *v2411;
  uint64_t v2412;
  unint64_t v2413;
  uint64_t v2414;
  unint64_t v2415;
  char *v2416;
  char *v2417;
  int v2418;
  uint64_t v2419;
  _DWORD *v2420;
  _DWORD **v2421;
  unint64_t v2422;
  _QWORD *v2423;
  _DWORD *v2424;
  _DWORD *v2425;
  uint64_t v2426;
  unint64_t v2427;
  uint64_t v2428;
  unint64_t v2429;
  char *v2430;
  int v2431;
  char *v2432;
  int v2433;
  uint64_t v2434;
  _DWORD *v2435;
  _DWORD **v2436;
  unint64_t v2437;
  _QWORD *v2438;
  _DWORD *v2439;
  _DWORD *v2440;
  uint64_t v2441;
  unint64_t v2442;
  uint64_t v2443;
  unint64_t v2444;
  char *v2445;
  char *v2446;
  int v2447;
  uint64_t v2448;
  _DWORD *v2449;
  _DWORD **v2450;
  unint64_t v2451;
  _QWORD *v2452;
  _DWORD *v2453;
  _DWORD *v2454;
  uint64_t v2455;
  unint64_t v2456;
  uint64_t v2457;
  unint64_t v2458;
  char *v2459;
  char *v2460;
  int v2461;
  unint64_t v2462;
  uint64_t v2463;
  unint64_t v2464;
  uint64_t v2465;
  char *v2466;
  int v2467;
  uint64_t v2468;
  _DWORD *v2469;
  _DWORD **v2470;
  unint64_t v2471;
  _QWORD *v2472;
  _DWORD *v2473;
  _DWORD *v2474;
  uint64_t v2475;
  unint64_t v2476;
  uint64_t v2477;
  unint64_t v2478;
  char *v2479;
  char *v2480;
  int v2481;
  uint64_t v2482;
  _DWORD *v2483;
  _DWORD **v2484;
  unint64_t v2485;
  _QWORD *v2486;
  _DWORD *v2487;
  _DWORD *v2488;
  uint64_t v2489;
  unint64_t v2490;
  uint64_t v2491;
  unint64_t v2492;
  char *v2493;
  int v2494;
  char *v2495;
  int v2496;
  uint64_t v2497;
  _DWORD *v2498;
  _DWORD **v2499;
  unint64_t v2500;
  _QWORD *v2501;
  _DWORD *v2502;
  _DWORD *v2503;
  uint64_t v2504;
  unint64_t v2505;
  uint64_t v2506;
  unint64_t v2507;
  char *v2508;
  char *v2509;
  int v2510;
  uint64_t v2511;
  _DWORD *v2512;
  _DWORD **v2513;
  unint64_t v2514;
  _QWORD *v2515;
  _DWORD *v2516;
  _DWORD *v2517;
  uint64_t v2518;
  unint64_t v2519;
  uint64_t v2520;
  unint64_t v2521;
  char *v2522;
  char *v2523;
  int v2524;
  uint64_t v2525;
  _DWORD *v2526;
  _DWORD **v2527;
  unint64_t v2528;
  _QWORD *v2529;
  _DWORD *v2530;
  _DWORD *v2531;
  uint64_t v2532;
  unint64_t v2533;
  uint64_t v2534;
  unint64_t v2535;
  char *v2536;
  char *v2537;
  int v2538;
  uint64_t v2539;
  _DWORD *v2540;
  _DWORD **v2541;
  unint64_t v2542;
  _QWORD *v2543;
  _DWORD *v2544;
  _DWORD *v2545;
  uint64_t v2546;
  unint64_t v2547;
  uint64_t v2548;
  unint64_t v2549;
  char *v2550;
  char *v2551;
  int v2552;
  uint64_t v2553;
  _DWORD *v2554;
  _DWORD **v2555;
  unint64_t v2556;
  _QWORD *v2557;
  _DWORD *v2558;
  _DWORD *v2559;
  uint64_t v2560;
  unint64_t v2561;
  uint64_t v2562;
  unint64_t v2563;
  char *v2564;
  char *v2565;
  int v2566;
  uint64_t v2567;
  _DWORD *v2568;
  _DWORD **v2569;
  unint64_t v2570;
  _QWORD *v2571;
  _DWORD *v2572;
  _DWORD *v2573;
  uint64_t v2574;
  unint64_t v2575;
  uint64_t v2576;
  unint64_t v2577;
  char *v2578;
  char *v2579;
  int v2580;
  uint64_t v2581;
  _DWORD *v2582;
  _DWORD **v2583;
  unint64_t v2584;
  _QWORD *v2585;
  _DWORD *v2586;
  _DWORD *v2587;
  uint64_t v2588;
  unint64_t v2589;
  uint64_t v2590;
  unint64_t v2591;
  char *v2592;
  char *v2593;
  int v2594;
  uint64_t v2595;
  _DWORD *v2596;
  _DWORD **v2597;
  unint64_t v2598;
  _QWORD *v2599;
  _DWORD *v2600;
  _DWORD *v2601;
  uint64_t v2602;
  unint64_t v2603;
  uint64_t v2604;
  unint64_t v2605;
  char *v2606;
  char *v2607;
  int v2608;
  uint64_t v2609;
  _DWORD *v2610;
  _DWORD **v2611;
  unint64_t v2612;
  _QWORD *v2613;
  _DWORD *v2614;
  _DWORD *v2615;
  uint64_t v2616;
  unint64_t v2617;
  uint64_t v2618;
  unint64_t v2619;
  char *v2620;
  char *v2621;
  int v2622;
  uint64_t v2623;
  _DWORD *v2624;
  _DWORD **v2625;
  unint64_t v2626;
  _QWORD *v2627;
  _DWORD *v2628;
  _DWORD *v2629;
  uint64_t v2630;
  unint64_t v2631;
  uint64_t v2632;
  unint64_t v2633;
  char *v2634;
  char *v2635;
  int v2636;
  uint64_t v2637;
  _DWORD *v2638;
  _DWORD **v2639;
  unint64_t v2640;
  _QWORD *v2641;
  _DWORD *v2642;
  _DWORD *v2643;
  uint64_t v2644;
  unint64_t v2645;
  uint64_t v2646;
  unint64_t v2647;
  char *v2648;
  char *v2649;
  int v2650;
  uint64_t v2651;
  _DWORD *v2652;
  _DWORD **v2653;
  unint64_t v2654;
  _QWORD *v2655;
  _DWORD *v2656;
  _DWORD *v2657;
  uint64_t v2658;
  unint64_t v2659;
  uint64_t v2660;
  unint64_t v2661;
  char *v2662;
  char *v2663;
  int v2664;
  uint64_t v2665;
  _DWORD *v2666;
  _DWORD **v2667;
  unint64_t v2668;
  _QWORD *v2669;
  _DWORD *v2670;
  _DWORD *v2671;
  uint64_t v2672;
  unint64_t v2673;
  uint64_t v2674;
  unint64_t v2675;
  char *v2676;
  char *v2677;
  int v2678;
  uint64_t v2679;
  _DWORD *v2680;
  _DWORD **v2681;
  unint64_t v2682;
  _QWORD *v2683;
  _DWORD *v2684;
  _DWORD *v2685;
  uint64_t v2686;
  unint64_t v2687;
  uint64_t v2688;
  unint64_t v2689;
  char *v2690;
  char *v2691;
  int v2692;
  uint64_t v2693;
  _DWORD *v2694;
  _DWORD **v2695;
  unint64_t v2696;
  _QWORD *v2697;
  _DWORD *v2698;
  _DWORD *v2699;
  uint64_t v2700;
  unint64_t v2701;
  uint64_t v2702;
  unint64_t v2703;
  char *v2704;
  char *v2705;
  int v2706;
  uint64_t v2707;
  _DWORD *v2708;
  _DWORD **v2709;
  unint64_t v2710;
  _QWORD *v2711;
  _DWORD *v2712;
  _DWORD *v2713;
  uint64_t v2714;
  unint64_t v2715;
  uint64_t v2716;
  unint64_t v2717;
  char *v2718;
  char *v2719;
  int v2720;
  uint64_t v2721;
  _DWORD *v2722;
  _DWORD **v2723;
  unint64_t v2724;
  _QWORD *v2725;
  _DWORD *v2726;
  _DWORD *v2727;
  uint64_t v2728;
  unint64_t v2729;
  uint64_t v2730;
  unint64_t v2731;
  char *v2732;
  char *v2733;
  int v2734;
  uint64_t v2735;
  _DWORD *v2736;
  _DWORD **v2737;
  unint64_t v2738;
  _QWORD *v2739;
  _DWORD *v2740;
  _DWORD *v2741;
  uint64_t v2742;
  unint64_t v2743;
  uint64_t v2744;
  unint64_t v2745;
  char *v2746;
  char *v2747;
  int v2748;
  uint64_t v2749;
  _DWORD *v2750;
  _DWORD **v2751;
  unint64_t v2752;
  _QWORD *v2753;
  _DWORD *v2754;
  _DWORD *v2755;
  uint64_t v2756;
  unint64_t v2757;
  uint64_t v2758;
  unint64_t v2759;
  char *v2760;
  char *v2761;
  int v2762;
  uint64_t v2763;
  _DWORD *v2764;
  _DWORD **v2765;
  unint64_t v2766;
  _QWORD *v2767;
  _DWORD *v2768;
  _DWORD *v2769;
  uint64_t v2770;
  unint64_t v2771;
  uint64_t v2772;
  unint64_t v2773;
  char *v2774;
  char *v2775;
  int v2776;
  unint64_t v2777;
  uint64_t v2778;
  unint64_t v2779;
  uint64_t v2780;
  char *v2781;
  int v2782;
  unint64_t v2783;
  uint64_t v2784;
  unint64_t v2785;
  uint64_t v2786;
  int v2787;
  int v2788;
  uint64_t v2789;
  char v2791;
  void *__p;
  unint64_t v2793;
  uint64_t v2794;

  __p = 0;
  v2793 = 0;
  v2794 = 0;
  sub_6029C((uint64_t)&__p, 0xCFuLL, 0);
  v2791 = 0;
  sub_6041C((uint64_t)&__p, v2793, &v2791);
  v6 = a2;
  v5 = *a2;
  v7 = (char *)v6[1] - (char *)v5;
  if (!v7)
    goto LABEL_11;
  v8 = v7 >> 3;
  v9 = (char *)__p;
  v10 = v8 <= 1 ? 1 : v8;
  v11 = 1;
  do
  {
    v4 = sub_5EB84(v4, *v5);
    if (v4 == 207)
      v11 = 0;
    else
      *(_QWORD *)&v9[((unint64_t)v4 >> 3) & 0x1FFFFFF8] |= 1 << v4;
    ++v5;
    --v10;
  }
  while (v10);
  if ((v11 & 1) == 0)
  {
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)(a1 + 136));
    v2789 = 0;
  }
  else
  {
LABEL_11:
    v12 = (_QWORD *)(a1 + 136);
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)(a1 + 136));
    sub_6052C((uint64_t *)(a1 + 136), 0x10uLL);
    v13 = 0;
    v14 = (_DWORD *)(a1 + 48);
    do
    {
      switch((int)v13)
      {
        case 0:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 16) & 1) == 0)
              goto LABEL_374;
            v15 = *v12 + 24 * v13;
            v17 = (_DWORD **)(v15 + 8);
            v16 = *(_DWORD **)(v15 + 8);
            v19 = (_QWORD *)(v15 + 16);
            v18 = *(_QWORD *)(v15 + 16);
            if ((unint64_t)v16 >= v18)
            {
              v165 = *(_DWORD **)v15;
              v166 = ((uint64_t)v16 - *(_QWORD *)v15) >> 2;
              v167 = v166 + 1;
              if ((unint64_t)(v166 + 1) >> 62)
                sub_4074();
              v168 = v18 - (_QWORD)v165;
              if (v168 >> 1 > v167)
                v167 = v168 >> 1;
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL)
                v169 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v169 = v167;
              if (v169)
              {
                v170 = (char *)sub_43B2C((uint64_t)v19, v169);
                v16 = *v17;
                v165 = *(_DWORD **)v15;
              }
              else
              {
                v170 = 0;
              }
              v333 = &v170[4 * v166];
              *(_DWORD *)v333 = 128;
              v20 = v333 + 4;
              while (v16 != v165)
              {
                v334 = *--v16;
                *((_DWORD *)v333 - 1) = v334;
                v333 -= 4;
              }
              *(_QWORD *)v15 = v333;
              *v17 = v20;
              *v19 = &v170[4 * v169];
              if (v165)
                operator delete(v165);
            }
            else
            {
              *v16 = 128;
              v20 = v16 + 1;
            }
            *v17 = v20;
            if (!*v14)
            {
LABEL_374:
              if ((*((_BYTE *)__p + 16) & 2) == 0)
                goto LABEL_3256;
              v335 = *v12 + 24 * v13;
              v337 = (_DWORD **)(v335 + 8);
              v336 = *(_DWORD **)(v335 + 8);
              v339 = (_QWORD *)(v335 + 16);
              v338 = *(_QWORD *)(v335 + 16);
              if ((unint64_t)v336 >= v338)
              {
                v341 = *(_DWORD **)v335;
                v342 = ((uint64_t)v336 - *(_QWORD *)v335) >> 2;
                v343 = v342 + 1;
                if ((unint64_t)(v342 + 1) >> 62)
                  sub_4074();
                v344 = v338 - (_QWORD)v341;
                if (v344 >> 1 > v343)
                  v343 = v344 >> 1;
                if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFFCLL)
                  v345 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v345 = v343;
                if (v345)
                {
                  v346 = (char *)sub_43B2C((uint64_t)v339, v345);
                  v336 = *v337;
                  v341 = *(_DWORD **)v335;
                }
                else
                {
                  v346 = 0;
                }
                v558 = &v346[4 * v342];
                *(_DWORD *)v558 = 129;
                v340 = v558 + 4;
                while (v336 != v341)
                {
                  v559 = *--v336;
                  *((_DWORD *)v558 - 1) = v559;
                  v558 -= 4;
                }
                *(_QWORD *)v335 = v558;
                *v337 = v340;
                *v339 = &v346[4 * v345];
                if (v341)
                  operator delete(v341);
              }
              else
              {
                *v336 = 129;
                v340 = v336 + 1;
              }
              *v337 = v340;
              if (!*v14)
              {
LABEL_3256:
                if ((*((_BYTE *)__p + 16) & 4) == 0)
                  goto LABEL_3932;
                v560 = *v12 + 24 * v13;
                v562 = (_DWORD **)(v560 + 8);
                v561 = *(_DWORD **)(v560 + 8);
                v564 = (_QWORD *)(v560 + 16);
                v563 = *(_QWORD *)(v560 + 16);
                if ((unint64_t)v561 >= v563)
                {
                  v566 = *(_DWORD **)v560;
                  v567 = ((uint64_t)v561 - *(_QWORD *)v560) >> 2;
                  v568 = v567 + 1;
                  if ((unint64_t)(v567 + 1) >> 62)
                    sub_4074();
                  v569 = v563 - (_QWORD)v566;
                  if (v569 >> 1 > v568)
                    v568 = v569 >> 1;
                  if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFFCLL)
                    v570 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v570 = v568;
                  if (v570)
                  {
                    v571 = (char *)sub_43B2C((uint64_t)v564, v570);
                    v561 = *v562;
                    v566 = *(_DWORD **)v560;
                  }
                  else
                  {
                    v571 = 0;
                  }
                  v762 = &v571[4 * v567];
                  *(_DWORD *)v762 = 130;
                  v565 = v762 + 4;
                  while (v561 != v566)
                  {
                    v763 = *--v561;
                    *((_DWORD *)v762 - 1) = v763;
                    v762 -= 4;
                  }
                  *(_QWORD *)v560 = v762;
                  *v562 = v565;
                  *v564 = &v571[4 * v570];
                  if (v566)
                    operator delete(v566);
                }
                else
                {
                  *v561 = 130;
                  v565 = v561 + 1;
                }
                *v562 = v565;
                if (!*v14)
                {
LABEL_3932:
                  if ((*((_BYTE *)__p + 16) & 8) == 0)
                    goto LABEL_3933;
                  v764 = *v12 + 24 * v13;
                  v766 = (_DWORD **)(v764 + 8);
                  v765 = *(_DWORD **)(v764 + 8);
                  v768 = (_QWORD *)(v764 + 16);
                  v767 = *(_QWORD *)(v764 + 16);
                  if ((unint64_t)v765 >= v767)
                  {
                    v770 = *(_DWORD **)v764;
                    v771 = ((uint64_t)v765 - *(_QWORD *)v764) >> 2;
                    v772 = v771 + 1;
                    if ((unint64_t)(v771 + 1) >> 62)
                      sub_4074();
                    v773 = v767 - (_QWORD)v770;
                    if (v773 >> 1 > v772)
                      v772 = v773 >> 1;
                    if ((unint64_t)v773 >= 0x7FFFFFFFFFFFFFFCLL)
                      v774 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v774 = v772;
                    if (v774)
                    {
                      v775 = (char *)sub_43B2C((uint64_t)v768, v774);
                      v765 = *v766;
                      v770 = *(_DWORD **)v764;
                    }
                    else
                    {
                      v775 = 0;
                    }
                    v951 = &v775[4 * v771];
                    *(_DWORD *)v951 = 131;
                    v769 = v951 + 4;
                    while (v765 != v770)
                    {
                      v952 = *--v765;
                      *((_DWORD *)v951 - 1) = v952;
                      v951 -= 4;
                    }
                    *(_QWORD *)v764 = v951;
                    *v766 = v769;
                    *v768 = &v775[4 * v774];
                    if (v770)
                      operator delete(v770);
                  }
                  else
                  {
                    *v765 = 131;
                    v769 = v765 + 1;
                  }
                  *v766 = v769;
                  if (!*v14)
                  {
LABEL_3933:
                    if ((*((_BYTE *)__p + 16) & 0x10) == 0)
                      goto LABEL_3934;
                    v953 = *v12 + 24 * v13;
                    v955 = (_DWORD **)(v953 + 8);
                    v954 = *(_DWORD **)(v953 + 8);
                    v957 = (_QWORD *)(v953 + 16);
                    v956 = *(_QWORD *)(v953 + 16);
                    if ((unint64_t)v954 >= v956)
                    {
                      v959 = *(_DWORD **)v953;
                      v960 = ((uint64_t)v954 - *(_QWORD *)v953) >> 2;
                      v961 = v960 + 1;
                      if ((unint64_t)(v960 + 1) >> 62)
                        sub_4074();
                      v962 = v956 - (_QWORD)v959;
                      if (v962 >> 1 > v961)
                        v961 = v962 >> 1;
                      if ((unint64_t)v962 >= 0x7FFFFFFFFFFFFFFCLL)
                        v963 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v963 = v961;
                      if (v963)
                      {
                        v964 = (char *)sub_43B2C((uint64_t)v957, v963);
                        v954 = *v955;
                        v959 = *(_DWORD **)v953;
                      }
                      else
                      {
                        v964 = 0;
                      }
                      v1138 = &v964[4 * v960];
                      *(_DWORD *)v1138 = 132;
                      v958 = v1138 + 4;
                      while (v954 != v959)
                      {
                        v1139 = *--v954;
                        *((_DWORD *)v1138 - 1) = v1139;
                        v1138 -= 4;
                      }
                      *(_QWORD *)v953 = v1138;
                      *v955 = v958;
                      *v957 = &v964[4 * v963];
                      if (v959)
                        operator delete(v959);
                    }
                    else
                    {
                      *v954 = 132;
                      v958 = v954 + 1;
                    }
                    *v955 = v958;
                    if (!*v14)
                    {
LABEL_3934:
                      if ((*((_BYTE *)__p + 16) & 0x20) == 0)
                        goto LABEL_3935;
                      v1140 = *v12 + 24 * v13;
                      v1142 = (_DWORD **)(v1140 + 8);
                      v1141 = *(_DWORD **)(v1140 + 8);
                      v1144 = (_QWORD *)(v1140 + 16);
                      v1143 = *(_QWORD *)(v1140 + 16);
                      if ((unint64_t)v1141 >= v1143)
                      {
                        v1146 = *(_DWORD **)v1140;
                        v1147 = ((uint64_t)v1141 - *(_QWORD *)v1140) >> 2;
                        v1148 = v1147 + 1;
                        if ((unint64_t)(v1147 + 1) >> 62)
                          sub_4074();
                        v1149 = v1143 - (_QWORD)v1146;
                        if (v1149 >> 1 > v1148)
                          v1148 = v1149 >> 1;
                        if ((unint64_t)v1149 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1150 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1150 = v1148;
                        if (v1150)
                        {
                          v1151 = (char *)sub_43B2C((uint64_t)v1144, v1150);
                          v1141 = *v1142;
                          v1146 = *(_DWORD **)v1140;
                        }
                        else
                        {
                          v1151 = 0;
                        }
                        v1285 = &v1151[4 * v1147];
                        *(_DWORD *)v1285 = 133;
                        v1145 = v1285 + 4;
                        while (v1141 != v1146)
                        {
                          v1286 = *--v1141;
                          *((_DWORD *)v1285 - 1) = v1286;
                          v1285 -= 4;
                        }
                        *(_QWORD *)v1140 = v1285;
                        *v1142 = v1145;
                        *v1144 = &v1151[4 * v1150];
                        if (v1146)
                          operator delete(v1146);
                      }
                      else
                      {
                        *v1141 = 133;
                        v1145 = v1141 + 1;
                      }
                      *v1142 = v1145;
                      if (!*v14)
                      {
LABEL_3935:
                        if ((*((_BYTE *)__p + 16) & 0x40) == 0)
                          goto LABEL_3936;
                        v1287 = *v12 + 24 * v13;
                        v1289 = (_DWORD **)(v1287 + 8);
                        v1288 = *(_DWORD **)(v1287 + 8);
                        v1291 = (_QWORD *)(v1287 + 16);
                        v1290 = *(_QWORD *)(v1287 + 16);
                        if ((unint64_t)v1288 >= v1290)
                        {
                          v1293 = *(_DWORD **)v1287;
                          v1294 = ((uint64_t)v1288 - *(_QWORD *)v1287) >> 2;
                          v1295 = v1294 + 1;
                          if ((unint64_t)(v1294 + 1) >> 62)
                            sub_4074();
                          v1296 = v1290 - (_QWORD)v1293;
                          if (v1296 >> 1 > v1295)
                            v1295 = v1296 >> 1;
                          if ((unint64_t)v1296 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1297 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1297 = v1295;
                          if (v1297)
                          {
                            v1298 = (char *)sub_43B2C((uint64_t)v1291, v1297);
                            v1288 = *v1289;
                            v1293 = *(_DWORD **)v1287;
                          }
                          else
                          {
                            v1298 = 0;
                          }
                          v1434 = &v1298[4 * v1294];
                          *(_DWORD *)v1434 = 134;
                          v1292 = v1434 + 4;
                          while (v1288 != v1293)
                          {
                            v1435 = *--v1288;
                            *((_DWORD *)v1434 - 1) = v1435;
                            v1434 -= 4;
                          }
                          *(_QWORD *)v1287 = v1434;
                          *v1289 = v1292;
                          *v1291 = &v1298[4 * v1297];
                          if (v1293)
                            operator delete(v1293);
                        }
                        else
                        {
                          *v1288 = 134;
                          v1292 = v1288 + 1;
                        }
                        *v1289 = v1292;
                        if (!*v14)
                        {
LABEL_3936:
                          if ((*((_BYTE *)__p + 16) & 0x80) == 0)
                            goto LABEL_3937;
                          v1436 = *v12 + 24 * v13;
                          v1438 = (_DWORD **)(v1436 + 8);
                          v1437 = *(_DWORD **)(v1436 + 8);
                          v1440 = (_QWORD *)(v1436 + 16);
                          v1439 = *(_QWORD *)(v1436 + 16);
                          if ((unint64_t)v1437 >= v1439)
                          {
                            v1442 = *(_DWORD **)v1436;
                            v1443 = ((uint64_t)v1437 - *(_QWORD *)v1436) >> 2;
                            v1444 = v1443 + 1;
                            if ((unint64_t)(v1443 + 1) >> 62)
                              sub_4074();
                            v1445 = v1439 - (_QWORD)v1442;
                            if (v1445 >> 1 > v1444)
                              v1444 = v1445 >> 1;
                            if ((unint64_t)v1445 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1446 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1446 = v1444;
                            if (v1446)
                            {
                              v1447 = (char *)sub_43B2C((uint64_t)v1440, v1446);
                              v1437 = *v1438;
                              v1442 = *(_DWORD **)v1436;
                            }
                            else
                            {
                              v1447 = 0;
                            }
                            v1574 = &v1447[4 * v1443];
                            *(_DWORD *)v1574 = 135;
                            v1441 = v1574 + 4;
                            while (v1437 != v1442)
                            {
                              v1575 = *--v1437;
                              *((_DWORD *)v1574 - 1) = v1575;
                              v1574 -= 4;
                            }
                            *(_QWORD *)v1436 = v1574;
                            *v1438 = v1441;
                            *v1440 = &v1447[4 * v1446];
                            if (v1442)
                              operator delete(v1442);
                          }
                          else
                          {
                            *v1437 = 135;
                            v1441 = v1437 + 1;
                          }
                          *v1438 = v1441;
                          if (!*v14)
                          {
LABEL_3937:
                            if ((*((_BYTE *)__p + 17) & 1) == 0)
                              goto LABEL_3938;
                            v1576 = *v12 + 24 * v13;
                            v1578 = (_DWORD **)(v1576 + 8);
                            v1577 = *(_DWORD **)(v1576 + 8);
                            v1580 = (_QWORD *)(v1576 + 16);
                            v1579 = *(_QWORD *)(v1576 + 16);
                            if ((unint64_t)v1577 >= v1579)
                            {
                              v1582 = *(_DWORD **)v1576;
                              v1583 = ((uint64_t)v1577 - *(_QWORD *)v1576) >> 2;
                              v1584 = v1583 + 1;
                              if ((unint64_t)(v1583 + 1) >> 62)
                                sub_4074();
                              v1585 = v1579 - (_QWORD)v1582;
                              if (v1585 >> 1 > v1584)
                                v1584 = v1585 >> 1;
                              if ((unint64_t)v1585 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1586 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1586 = v1584;
                              if (v1586)
                              {
                                v1587 = (char *)sub_43B2C((uint64_t)v1580, v1586);
                                v1577 = *v1578;
                                v1582 = *(_DWORD **)v1576;
                              }
                              else
                              {
                                v1587 = 0;
                              }
                              v1707 = &v1587[4 * v1583];
                              *(_DWORD *)v1707 = 136;
                              v1581 = v1707 + 4;
                              while (v1577 != v1582)
                              {
                                v1708 = *--v1577;
                                *((_DWORD *)v1707 - 1) = v1708;
                                v1707 -= 4;
                              }
                              *(_QWORD *)v1576 = v1707;
                              *v1578 = v1581;
                              *v1580 = &v1587[4 * v1586];
                              if (v1582)
                                operator delete(v1582);
                            }
                            else
                            {
                              *v1577 = 136;
                              v1581 = v1577 + 1;
                            }
                            *v1578 = v1581;
                            if (!*v14)
                            {
LABEL_3938:
                              if ((*((_BYTE *)__p + 17) & 2) == 0)
                                goto LABEL_3939;
                              v1709 = *v12 + 24 * v13;
                              v1711 = (_DWORD **)(v1709 + 8);
                              v1710 = *(_DWORD **)(v1709 + 8);
                              v1713 = (_QWORD *)(v1709 + 16);
                              v1712 = *(_QWORD *)(v1709 + 16);
                              if ((unint64_t)v1710 >= v1712)
                              {
                                v1715 = *(_DWORD **)v1709;
                                v1716 = ((uint64_t)v1710 - *(_QWORD *)v1709) >> 2;
                                v1717 = v1716 + 1;
                                if ((unint64_t)(v1716 + 1) >> 62)
                                  sub_4074();
                                v1718 = v1712 - (_QWORD)v1715;
                                if (v1718 >> 1 > v1717)
                                  v1717 = v1718 >> 1;
                                if ((unint64_t)v1718 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1719 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1719 = v1717;
                                if (v1719)
                                {
                                  v1720 = (char *)sub_43B2C((uint64_t)v1713, v1719);
                                  v1710 = *v1711;
                                  v1715 = *(_DWORD **)v1709;
                                }
                                else
                                {
                                  v1720 = 0;
                                }
                                v1826 = &v1720[4 * v1716];
                                *(_DWORD *)v1826 = 137;
                                v1714 = v1826 + 4;
                                while (v1710 != v1715)
                                {
                                  v1827 = *--v1710;
                                  *((_DWORD *)v1826 - 1) = v1827;
                                  v1826 -= 4;
                                }
                                *(_QWORD *)v1709 = v1826;
                                *v1711 = v1714;
                                *v1713 = &v1720[4 * v1719];
                                if (v1715)
                                  operator delete(v1715);
                              }
                              else
                              {
                                *v1710 = 137;
                                v1714 = v1710 + 1;
                              }
                              *v1711 = v1714;
                              if (!*v14)
                              {
LABEL_3939:
                                if ((*((_BYTE *)__p + 17) & 4) == 0)
                                  goto LABEL_3940;
                                v1828 = *v12 + 24 * v13;
                                v1830 = (_DWORD **)(v1828 + 8);
                                v1829 = *(_DWORD **)(v1828 + 8);
                                v1832 = (_QWORD *)(v1828 + 16);
                                v1831 = *(_QWORD *)(v1828 + 16);
                                if ((unint64_t)v1829 >= v1831)
                                {
                                  v1834 = *(_DWORD **)v1828;
                                  v1835 = ((uint64_t)v1829 - *(_QWORD *)v1828) >> 2;
                                  v1836 = v1835 + 1;
                                  if ((unint64_t)(v1835 + 1) >> 62)
                                    sub_4074();
                                  v1837 = v1831 - (_QWORD)v1834;
                                  if (v1837 >> 1 > v1836)
                                    v1836 = v1837 >> 1;
                                  if ((unint64_t)v1837 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v1838 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v1838 = v1836;
                                  if (v1838)
                                  {
                                    v1839 = (char *)sub_43B2C((uint64_t)v1832, v1838);
                                    v1829 = *v1830;
                                    v1834 = *(_DWORD **)v1828;
                                  }
                                  else
                                  {
                                    v1839 = 0;
                                  }
                                  v1920 = &v1839[4 * v1835];
                                  *(_DWORD *)v1920 = 138;
                                  v1833 = v1920 + 4;
                                  while (v1829 != v1834)
                                  {
                                    v1921 = *--v1829;
                                    *((_DWORD *)v1920 - 1) = v1921;
                                    v1920 -= 4;
                                  }
                                  *(_QWORD *)v1828 = v1920;
                                  *v1830 = v1833;
                                  *v1832 = &v1839[4 * v1838];
                                  if (v1834)
                                    operator delete(v1834);
                                }
                                else
                                {
                                  *v1829 = 138;
                                  v1833 = v1829 + 1;
                                }
                                *v1830 = v1833;
                                if (!*v14)
                                {
LABEL_3940:
                                  if ((*((_BYTE *)__p + 17) & 8) == 0)
                                    goto LABEL_3941;
                                  v1922 = *v12 + 24 * v13;
                                  v1924 = (_DWORD **)(v1922 + 8);
                                  v1923 = *(_DWORD **)(v1922 + 8);
                                  v1926 = (_QWORD *)(v1922 + 16);
                                  v1925 = *(_QWORD *)(v1922 + 16);
                                  if ((unint64_t)v1923 >= v1925)
                                  {
                                    v1928 = *(_DWORD **)v1922;
                                    v1929 = ((uint64_t)v1923 - *(_QWORD *)v1922) >> 2;
                                    v1930 = v1929 + 1;
                                    if ((unint64_t)(v1929 + 1) >> 62)
                                      sub_4074();
                                    v1931 = v1925 - (_QWORD)v1928;
                                    if (v1931 >> 1 > v1930)
                                      v1930 = v1931 >> 1;
                                    if ((unint64_t)v1931 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1932 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1932 = v1930;
                                    if (v1932)
                                    {
                                      v1933 = (char *)sub_43B2C((uint64_t)v1926, v1932);
                                      v1923 = *v1924;
                                      v1928 = *(_DWORD **)v1922;
                                    }
                                    else
                                    {
                                      v1933 = 0;
                                    }
                                    v2005 = &v1933[4 * v1929];
                                    *(_DWORD *)v2005 = 139;
                                    v1927 = v2005 + 4;
                                    while (v1923 != v1928)
                                    {
                                      v2006 = *--v1923;
                                      *((_DWORD *)v2005 - 1) = v2006;
                                      v2005 -= 4;
                                    }
                                    *(_QWORD *)v1922 = v2005;
                                    *v1924 = v1927;
                                    *v1926 = &v1933[4 * v1932];
                                    if (v1928)
                                      operator delete(v1928);
                                  }
                                  else
                                  {
                                    *v1923 = 139;
                                    v1927 = v1923 + 1;
                                  }
                                  *v1924 = v1927;
                                  if (!*v14)
                                  {
LABEL_3941:
                                    if ((*((_BYTE *)__p + 17) & 0x10) == 0)
                                      goto LABEL_3942;
                                    v2007 = *v12 + 24 * v13;
                                    v2009 = (_DWORD **)(v2007 + 8);
                                    v2008 = *(_DWORD **)(v2007 + 8);
                                    v2011 = (_QWORD *)(v2007 + 16);
                                    v2010 = *(_QWORD *)(v2007 + 16);
                                    if ((unint64_t)v2008 >= v2010)
                                    {
                                      v2013 = *(_DWORD **)v2007;
                                      v2014 = ((uint64_t)v2008 - *(_QWORD *)v2007) >> 2;
                                      v2015 = v2014 + 1;
                                      if ((unint64_t)(v2014 + 1) >> 62)
                                        sub_4074();
                                      v2016 = v2010 - (_QWORD)v2013;
                                      if (v2016 >> 1 > v2015)
                                        v2015 = v2016 >> 1;
                                      if ((unint64_t)v2016 >= 0x7FFFFFFFFFFFFFFCLL)
                                        v2017 = 0x3FFFFFFFFFFFFFFFLL;
                                      else
                                        v2017 = v2015;
                                      if (v2017)
                                      {
                                        v2018 = (char *)sub_43B2C((uint64_t)v2011, v2017);
                                        v2008 = *v2009;
                                        v2013 = *(_DWORD **)v2007;
                                      }
                                      else
                                      {
                                        v2018 = 0;
                                      }
                                      v2089 = &v2018[4 * v2014];
                                      *(_DWORD *)v2089 = 140;
                                      v2012 = v2089 + 4;
                                      while (v2008 != v2013)
                                      {
                                        v2090 = *--v2008;
                                        *((_DWORD *)v2089 - 1) = v2090;
                                        v2089 -= 4;
                                      }
                                      *(_QWORD *)v2007 = v2089;
                                      *v2009 = v2012;
                                      *v2011 = &v2018[4 * v2017];
                                      if (v2013)
                                        operator delete(v2013);
                                    }
                                    else
                                    {
                                      *v2008 = 140;
                                      v2012 = v2008 + 1;
                                    }
                                    *v2009 = v2012;
                                    if (!*v14)
                                    {
LABEL_3942:
                                      if ((*((_BYTE *)__p + 17) & 0x20) == 0)
                                        goto LABEL_3943;
                                      v2091 = *v12 + 24 * v13;
                                      v2093 = (_DWORD **)(v2091 + 8);
                                      v2092 = *(_DWORD **)(v2091 + 8);
                                      v2095 = (_QWORD *)(v2091 + 16);
                                      v2094 = *(_QWORD *)(v2091 + 16);
                                      if ((unint64_t)v2092 >= v2094)
                                      {
                                        v2097 = *(_DWORD **)v2091;
                                        v2098 = ((uint64_t)v2092 - *(_QWORD *)v2091) >> 2;
                                        v2099 = v2098 + 1;
                                        if ((unint64_t)(v2098 + 1) >> 62)
                                          sub_4074();
                                        v2100 = v2094 - (_QWORD)v2097;
                                        if (v2100 >> 1 > v2099)
                                          v2099 = v2100 >> 1;
                                        if ((unint64_t)v2100 >= 0x7FFFFFFFFFFFFFFCLL)
                                          v2101 = 0x3FFFFFFFFFFFFFFFLL;
                                        else
                                          v2101 = v2099;
                                        if (v2101)
                                        {
                                          v2102 = (char *)sub_43B2C((uint64_t)v2095, v2101);
                                          v2092 = *v2093;
                                          v2097 = *(_DWORD **)v2091;
                                        }
                                        else
                                        {
                                          v2102 = 0;
                                        }
                                        v2173 = &v2102[4 * v2098];
                                        *(_DWORD *)v2173 = 141;
                                        v2096 = v2173 + 4;
                                        while (v2092 != v2097)
                                        {
                                          v2174 = *--v2092;
                                          *((_DWORD *)v2173 - 1) = v2174;
                                          v2173 -= 4;
                                        }
                                        *(_QWORD *)v2091 = v2173;
                                        *v2093 = v2096;
                                        *v2095 = &v2102[4 * v2101];
                                        if (v2097)
                                          operator delete(v2097);
                                      }
                                      else
                                      {
                                        *v2092 = 141;
                                        v2096 = v2092 + 1;
                                      }
                                      *v2093 = v2096;
                                      if (!*v14)
                                      {
LABEL_3943:
                                        if ((*((_BYTE *)__p + 17) & 0x40) == 0)
                                          goto LABEL_3944;
                                        v2175 = *v12 + 24 * v13;
                                        v2177 = (_DWORD **)(v2175 + 8);
                                        v2176 = *(_DWORD **)(v2175 + 8);
                                        v2179 = (_QWORD *)(v2175 + 16);
                                        v2178 = *(_QWORD *)(v2175 + 16);
                                        if ((unint64_t)v2176 >= v2178)
                                        {
                                          v2181 = *(_DWORD **)v2175;
                                          v2182 = ((uint64_t)v2176 - *(_QWORD *)v2175) >> 2;
                                          v2183 = v2182 + 1;
                                          if ((unint64_t)(v2182 + 1) >> 62)
                                            sub_4074();
                                          v2184 = v2178 - (_QWORD)v2181;
                                          if (v2184 >> 1 > v2183)
                                            v2183 = v2184 >> 1;
                                          if ((unint64_t)v2184 >= 0x7FFFFFFFFFFFFFFCLL)
                                            v2185 = 0x3FFFFFFFFFFFFFFFLL;
                                          else
                                            v2185 = v2183;
                                          if (v2185)
                                          {
                                            v2186 = (char *)sub_43B2C((uint64_t)v2179, v2185);
                                            v2176 = *v2177;
                                            v2181 = *(_DWORD **)v2175;
                                          }
                                          else
                                          {
                                            v2186 = 0;
                                          }
                                          v2249 = &v2186[4 * v2182];
                                          *(_DWORD *)v2249 = 142;
                                          v2180 = v2249 + 4;
                                          while (v2176 != v2181)
                                          {
                                            v2250 = *--v2176;
                                            *((_DWORD *)v2249 - 1) = v2250;
                                            v2249 -= 4;
                                          }
                                          *(_QWORD *)v2175 = v2249;
                                          *v2177 = v2180;
                                          *v2179 = &v2186[4 * v2185];
                                          if (v2181)
                                            operator delete(v2181);
                                        }
                                        else
                                        {
                                          *v2176 = 142;
                                          v2180 = v2176 + 1;
                                        }
                                        *v2177 = v2180;
                                        if (!*v14)
                                        {
LABEL_3944:
                                          if ((*((_BYTE *)__p + 17) & 0x80) == 0)
                                            goto LABEL_3945;
                                          v2251 = *v12 + 24 * v13;
                                          v2253 = (_DWORD **)(v2251 + 8);
                                          v2252 = *(_DWORD **)(v2251 + 8);
                                          v2255 = (_QWORD *)(v2251 + 16);
                                          v2254 = *(_QWORD *)(v2251 + 16);
                                          if ((unint64_t)v2252 >= v2254)
                                          {
                                            v2257 = *(_DWORD **)v2251;
                                            v2258 = ((uint64_t)v2252 - *(_QWORD *)v2251) >> 2;
                                            v2259 = v2258 + 1;
                                            if ((unint64_t)(v2258 + 1) >> 62)
                                              sub_4074();
                                            v2260 = v2254 - (_QWORD)v2257;
                                            if (v2260 >> 1 > v2259)
                                              v2259 = v2260 >> 1;
                                            if ((unint64_t)v2260 >= 0x7FFFFFFFFFFFFFFCLL)
                                              v2261 = 0x3FFFFFFFFFFFFFFFLL;
                                            else
                                              v2261 = v2259;
                                            if (v2261)
                                            {
                                              v2262 = (char *)sub_43B2C((uint64_t)v2255, v2261);
                                              v2252 = *v2253;
                                              v2257 = *(_DWORD **)v2251;
                                            }
                                            else
                                            {
                                              v2262 = 0;
                                            }
                                            v2312 = &v2262[4 * v2258];
                                            *(_DWORD *)v2312 = 143;
                                            v2256 = v2312 + 4;
                                            while (v2252 != v2257)
                                            {
                                              v2313 = *--v2252;
                                              *((_DWORD *)v2312 - 1) = v2313;
                                              v2312 -= 4;
                                            }
                                            *(_QWORD *)v2251 = v2312;
                                            *v2253 = v2256;
                                            *v2255 = &v2262[4 * v2261];
                                            if (v2257)
                                              operator delete(v2257);
                                          }
                                          else
                                          {
                                            *v2252 = 143;
                                            v2256 = v2252 + 1;
                                          }
                                          *v2253 = v2256;
                                          if (!*v14)
                                          {
LABEL_3945:
                                            if ((*((_BYTE *)__p + 18) & 1) == 0)
                                              goto LABEL_3946;
                                            v2314 = *v12 + 24 * v13;
                                            v2316 = (_DWORD **)(v2314 + 8);
                                            v2315 = *(_DWORD **)(v2314 + 8);
                                            v2318 = (_QWORD *)(v2314 + 16);
                                            v2317 = *(_QWORD *)(v2314 + 16);
                                            if ((unint64_t)v2315 >= v2317)
                                            {
                                              v2320 = *(_DWORD **)v2314;
                                              v2321 = ((uint64_t)v2315 - *(_QWORD *)v2314) >> 2;
                                              v2322 = v2321 + 1;
                                              if ((unint64_t)(v2321 + 1) >> 62)
                                                sub_4074();
                                              v2323 = v2317 - (_QWORD)v2320;
                                              if (v2323 >> 1 > v2322)
                                                v2322 = v2323 >> 1;
                                              if ((unint64_t)v2323 >= 0x7FFFFFFFFFFFFFFCLL)
                                                v2324 = 0x3FFFFFFFFFFFFFFFLL;
                                              else
                                                v2324 = v2322;
                                              if (v2324)
                                              {
                                                v2325 = (char *)sub_43B2C((uint64_t)v2318, v2324);
                                                v2315 = *v2316;
                                                v2320 = *(_DWORD **)v2314;
                                              }
                                              else
                                              {
                                                v2325 = 0;
                                              }
                                              v2369 = &v2325[4 * v2321];
                                              *(_DWORD *)v2369 = 144;
                                              v2319 = v2369 + 4;
                                              while (v2315 != v2320)
                                              {
                                                v2370 = *--v2315;
                                                *((_DWORD *)v2369 - 1) = v2370;
                                                v2369 -= 4;
                                              }
                                              *(_QWORD *)v2314 = v2369;
                                              *v2316 = v2319;
                                              *v2318 = &v2325[4 * v2324];
                                              if (v2320)
                                                operator delete(v2320);
                                            }
                                            else
                                            {
                                              *v2315 = 144;
                                              v2319 = v2315 + 1;
                                            }
                                            *v2316 = v2319;
                                            if (!*v14)
                                            {
LABEL_3946:
                                              if ((*((_BYTE *)__p + 18) & 2) == 0)
                                                goto LABEL_3947;
                                              v2371 = *v12 + 24 * v13;
                                              v2373 = (_DWORD **)(v2371 + 8);
                                              v2372 = *(_DWORD **)(v2371 + 8);
                                              v2375 = (_QWORD *)(v2371 + 16);
                                              v2374 = *(_QWORD *)(v2371 + 16);
                                              if ((unint64_t)v2372 >= v2374)
                                              {
                                                v2377 = *(_DWORD **)v2371;
                                                v2378 = ((uint64_t)v2372 - *(_QWORD *)v2371) >> 2;
                                                v2379 = v2378 + 1;
                                                if ((unint64_t)(v2378 + 1) >> 62)
                                                  sub_4074();
                                                v2380 = v2374 - (_QWORD)v2377;
                                                if (v2380 >> 1 > v2379)
                                                  v2379 = v2380 >> 1;
                                                if ((unint64_t)v2380 >= 0x7FFFFFFFFFFFFFFCLL)
                                                  v2381 = 0x3FFFFFFFFFFFFFFFLL;
                                                else
                                                  v2381 = v2379;
                                                if (v2381)
                                                {
                                                  v2382 = (char *)sub_43B2C((uint64_t)v2375, v2381);
                                                  v2372 = *v2373;
                                                  v2377 = *(_DWORD **)v2371;
                                                }
                                                else
                                                {
                                                  v2382 = 0;
                                                }
                                                v2417 = &v2382[4 * v2378];
                                                *(_DWORD *)v2417 = 145;
                                                v2376 = v2417 + 4;
                                                while (v2372 != v2377)
                                                {
                                                  v2418 = *--v2372;
                                                  *((_DWORD *)v2417 - 1) = v2418;
                                                  v2417 -= 4;
                                                }
                                                *(_QWORD *)v2371 = v2417;
                                                *v2373 = v2376;
                                                *v2375 = &v2382[4 * v2381];
                                                if (v2377)
                                                  operator delete(v2377);
                                              }
                                              else
                                              {
                                                *v2372 = 145;
                                                v2376 = v2372 + 1;
                                              }
                                              *v2373 = v2376;
                                              if (!*v14)
                                              {
LABEL_3947:
                                                if ((*((_BYTE *)__p + 18) & 4) == 0)
                                                  goto LABEL_3948;
                                                v2419 = *v12 + 24 * v13;
                                                v2421 = (_DWORD **)(v2419 + 8);
                                                v2420 = *(_DWORD **)(v2419 + 8);
                                                v2423 = (_QWORD *)(v2419 + 16);
                                                v2422 = *(_QWORD *)(v2419 + 16);
                                                if ((unint64_t)v2420 >= v2422)
                                                {
                                                  v2425 = *(_DWORD **)v2419;
                                                  v2426 = ((uint64_t)v2420 - *(_QWORD *)v2419) >> 2;
                                                  v2427 = v2426 + 1;
                                                  if ((unint64_t)(v2426 + 1) >> 62)
                                                    sub_4074();
                                                  v2428 = v2422 - (_QWORD)v2425;
                                                  if (v2428 >> 1 > v2427)
                                                    v2427 = v2428 >> 1;
                                                  if ((unint64_t)v2428 >= 0x7FFFFFFFFFFFFFFCLL)
                                                    v2429 = 0x3FFFFFFFFFFFFFFFLL;
                                                  else
                                                    v2429 = v2427;
                                                  if (v2429)
                                                  {
                                                    v2430 = (char *)sub_43B2C((uint64_t)v2423, v2429);
                                                    v2420 = *v2421;
                                                    v2425 = *(_DWORD **)v2419;
                                                  }
                                                  else
                                                  {
                                                    v2430 = 0;
                                                  }
                                                  v2460 = &v2430[4 * v2426];
                                                  *(_DWORD *)v2460 = 146;
                                                  v2424 = v2460 + 4;
                                                  while (v2420 != v2425)
                                                  {
                                                    v2461 = *--v2420;
                                                    *((_DWORD *)v2460 - 1) = v2461;
                                                    v2460 -= 4;
                                                  }
                                                  *(_QWORD *)v2419 = v2460;
                                                  *v2421 = v2424;
                                                  *v2423 = &v2430[4 * v2429];
                                                  if (v2425)
                                                    operator delete(v2425);
                                                }
                                                else
                                                {
                                                  *v2420 = 146;
                                                  v2424 = v2420 + 1;
                                                }
                                                *v2421 = v2424;
                                                if (!*v14)
                                                {
LABEL_3948:
                                                  if ((*((_BYTE *)__p + 18) & 8) != 0)
                                                  {
                                                    v1723 = *v12 + 24 * v13;
                                                    v1725 = (int **)(v1723 + 8);
                                                    v1724 = *(int **)(v1723 + 8);
                                                    v1727 = (_QWORD *)(v1723 + 16);
                                                    v2462 = *(_QWORD *)(v1723 + 16);
                                                    if ((unint64_t)v1724 < v2462)
                                                    {
                                                      v1728 = 147;
                                                      goto LABEL_2504;
                                                    }
                                                    v1729 = *(int **)v1723;
                                                    v2463 = ((uint64_t)v1724 - *(_QWORD *)v1723) >> 2;
                                                    v2464 = v2463 + 1;
                                                    if ((unint64_t)(v2463 + 1) >> 62)
                                                      sub_4074();
                                                    v2465 = v2462 - (_QWORD)v1729;
                                                    if (v2465 >> 1 > v2464)
                                                      v2464 = v2465 >> 1;
                                                    if ((unint64_t)v2465 >= 0x7FFFFFFFFFFFFFFCLL)
                                                      v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                                    else
                                                      v1733 = v2464;
                                                    if (v1733)
                                                    {
                                                      v1734 = (char *)sub_43B2C((uint64_t)v1727, v1733);
                                                      v1724 = *v1725;
                                                      v1729 = *(int **)v1723;
                                                    }
                                                    else
                                                    {
                                                      v1734 = 0;
                                                    }
                                                    v1840 = &v1734[4 * v2463];
                                                    *(_DWORD *)v1840 = 147;
                                                    v1841 = (int *)(v1840 + 4);
                                                    while (v1724 != v1729)
                                                    {
                                                      v2494 = *--v1724;
                                                      *((_DWORD *)v1840 - 1) = v2494;
                                                      v1840 -= 4;
                                                    }
                                                    goto LABEL_3716;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 1:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 19) & 0x40) == 0)
              goto LABEL_392;
            v75 = *v12 + 24 * v13;
            v77 = (_DWORD **)(v75 + 8);
            v76 = *(_DWORD **)(v75 + 8);
            v79 = (_QWORD *)(v75 + 16);
            v78 = *(_QWORD *)(v75 + 16);
            if ((unint64_t)v76 >= v78)
            {
              v171 = *(_DWORD **)v75;
              v172 = ((uint64_t)v76 - *(_QWORD *)v75) >> 2;
              v173 = v172 + 1;
              if ((unint64_t)(v172 + 1) >> 62)
                sub_4074();
              v174 = v78 - (_QWORD)v171;
              if (v174 >> 1 > v173)
                v173 = v174 >> 1;
              if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL)
                v175 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v175 = v173;
              if (v175)
              {
                v176 = (char *)sub_43B2C((uint64_t)v79, v175);
                v76 = *v77;
                v171 = *(_DWORD **)v75;
              }
              else
              {
                v176 = 0;
              }
              v347 = &v176[4 * v172];
              *(_DWORD *)v347 = 158;
              v80 = v347 + 4;
              while (v76 != v171)
              {
                v348 = *--v76;
                *((_DWORD *)v347 - 1) = v348;
                v347 -= 4;
              }
              *(_QWORD *)v75 = v347;
              *v77 = v80;
              *v79 = &v176[4 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *v76 = 158;
              v80 = v76 + 1;
            }
            *v77 = v80;
            if (!*v14)
            {
LABEL_392:
              if ((*((_BYTE *)__p + 19) & 0x80) == 0)
                goto LABEL_2237;
              v349 = *v12 + 24 * v13;
              v351 = (_DWORD **)(v349 + 8);
              v350 = *(_DWORD **)(v349 + 8);
              v353 = (_QWORD *)(v349 + 16);
              v352 = *(_QWORD *)(v349 + 16);
              if ((unint64_t)v350 >= v352)
              {
                v355 = *(_DWORD **)v349;
                v356 = ((uint64_t)v350 - *(_QWORD *)v349) >> 2;
                v357 = v356 + 1;
                if ((unint64_t)(v356 + 1) >> 62)
                  sub_4074();
                v358 = v352 - (_QWORD)v355;
                if (v358 >> 1 > v357)
                  v357 = v358 >> 1;
                if ((unint64_t)v358 >= 0x7FFFFFFFFFFFFFFCLL)
                  v359 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v359 = v357;
                if (v359)
                {
                  v360 = (char *)sub_43B2C((uint64_t)v353, v359);
                  v350 = *v351;
                  v355 = *(_DWORD **)v349;
                }
                else
                {
                  v360 = 0;
                }
                v572 = &v360[4 * v356];
                *(_DWORD *)v572 = 159;
                v354 = v572 + 4;
                while (v350 != v355)
                {
                  v573 = *--v350;
                  *((_DWORD *)v572 - 1) = v573;
                  v572 -= 4;
                }
                *(_QWORD *)v349 = v572;
                *v351 = v354;
                *v353 = &v360[4 * v359];
                if (v355)
                  operator delete(v355);
              }
              else
              {
                *v350 = 159;
                v354 = v350 + 1;
              }
              *v351 = v354;
              if (!*v14)
              {
LABEL_2237:
                if ((*((_BYTE *)__p + 20) & 1) == 0)
                  goto LABEL_3949;
                v574 = *v12 + 24 * v13;
                v576 = (_DWORD **)(v574 + 8);
                v575 = *(_DWORD **)(v574 + 8);
                v578 = (_QWORD *)(v574 + 16);
                v577 = *(_QWORD *)(v574 + 16);
                if ((unint64_t)v575 >= v577)
                {
                  v580 = *(_DWORD **)v574;
                  v581 = ((uint64_t)v575 - *(_QWORD *)v574) >> 2;
                  v582 = v581 + 1;
                  if ((unint64_t)(v581 + 1) >> 62)
                    sub_4074();
                  v583 = v577 - (_QWORD)v580;
                  if (v583 >> 1 > v582)
                    v582 = v583 >> 1;
                  if ((unint64_t)v583 >= 0x7FFFFFFFFFFFFFFCLL)
                    v584 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v584 = v582;
                  if (v584)
                  {
                    v585 = (char *)sub_43B2C((uint64_t)v578, v584);
                    v575 = *v576;
                    v580 = *(_DWORD **)v574;
                  }
                  else
                  {
                    v585 = 0;
                  }
                  v776 = &v585[4 * v581];
                  *(_DWORD *)v776 = 160;
                  v579 = v776 + 4;
                  while (v575 != v580)
                  {
                    v777 = *--v575;
                    *((_DWORD *)v776 - 1) = v777;
                    v776 -= 4;
                  }
                  *(_QWORD *)v574 = v776;
                  *v576 = v579;
                  *v578 = &v585[4 * v584];
                  if (v580)
                    operator delete(v580);
                }
                else
                {
                  *v575 = 160;
                  v579 = v575 + 1;
                }
                *v576 = v579;
                if (!*v14)
                {
LABEL_3949:
                  if ((*((_BYTE *)__p + 20) & 2) == 0)
                    goto LABEL_3950;
                  v778 = *v12 + 24 * v13;
                  v780 = (_DWORD **)(v778 + 8);
                  v779 = *(_DWORD **)(v778 + 8);
                  v782 = (_QWORD *)(v778 + 16);
                  v781 = *(_QWORD *)(v778 + 16);
                  if ((unint64_t)v779 >= v781)
                  {
                    v784 = *(_DWORD **)v778;
                    v785 = ((uint64_t)v779 - *(_QWORD *)v778) >> 2;
                    v786 = v785 + 1;
                    if ((unint64_t)(v785 + 1) >> 62)
                      sub_4074();
                    v787 = v781 - (_QWORD)v784;
                    if (v787 >> 1 > v786)
                      v786 = v787 >> 1;
                    if ((unint64_t)v787 >= 0x7FFFFFFFFFFFFFFCLL)
                      v788 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v788 = v786;
                    if (v788)
                    {
                      v789 = (char *)sub_43B2C((uint64_t)v782, v788);
                      v779 = *v780;
                      v784 = *(_DWORD **)v778;
                    }
                    else
                    {
                      v789 = 0;
                    }
                    v965 = &v789[4 * v785];
                    *(_DWORD *)v965 = 161;
                    v783 = v965 + 4;
                    while (v779 != v784)
                    {
                      v966 = *--v779;
                      *((_DWORD *)v965 - 1) = v966;
                      v965 -= 4;
                    }
                    *(_QWORD *)v778 = v965;
                    *v780 = v783;
                    *v782 = &v789[4 * v788];
                    if (v784)
                      operator delete(v784);
                  }
                  else
                  {
                    *v779 = 161;
                    v783 = v779 + 1;
                  }
                  *v780 = v783;
                  if (!*v14)
                  {
LABEL_3950:
                    if ((*((_BYTE *)__p + 20) & 4) == 0)
                      goto LABEL_3951;
                    v967 = *v12 + 24 * v13;
                    v969 = (_DWORD **)(v967 + 8);
                    v968 = *(_DWORD **)(v967 + 8);
                    v971 = (_QWORD *)(v967 + 16);
                    v970 = *(_QWORD *)(v967 + 16);
                    if ((unint64_t)v968 >= v970)
                    {
                      v973 = *(_DWORD **)v967;
                      v974 = ((uint64_t)v968 - *(_QWORD *)v967) >> 2;
                      v975 = v974 + 1;
                      if ((unint64_t)(v974 + 1) >> 62)
                        sub_4074();
                      v976 = v970 - (_QWORD)v973;
                      if (v976 >> 1 > v975)
                        v975 = v976 >> 1;
                      if ((unint64_t)v976 >= 0x7FFFFFFFFFFFFFFCLL)
                        v977 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v977 = v975;
                      if (v977)
                      {
                        v978 = (char *)sub_43B2C((uint64_t)v971, v977);
                        v968 = *v969;
                        v973 = *(_DWORD **)v967;
                      }
                      else
                      {
                        v978 = 0;
                      }
                      v1152 = &v978[4 * v974];
                      *(_DWORD *)v1152 = 162;
                      v972 = v1152 + 4;
                      while (v968 != v973)
                      {
                        v1153 = *--v968;
                        *((_DWORD *)v1152 - 1) = v1153;
                        v1152 -= 4;
                      }
                      *(_QWORD *)v967 = v1152;
                      *v969 = v972;
                      *v971 = &v978[4 * v977];
                      if (v973)
                        operator delete(v973);
                    }
                    else
                    {
                      *v968 = 162;
                      v972 = v968 + 1;
                    }
                    *v969 = v972;
                    if (!*v14)
                    {
LABEL_3951:
                      if ((*((_BYTE *)__p + 20) & 8) == 0)
                        goto LABEL_3952;
                      v1154 = *v12 + 24 * v13;
                      v1156 = (_DWORD **)(v1154 + 8);
                      v1155 = *(_DWORD **)(v1154 + 8);
                      v1158 = (_QWORD *)(v1154 + 16);
                      v1157 = *(_QWORD *)(v1154 + 16);
                      if ((unint64_t)v1155 >= v1157)
                      {
                        v1160 = *(_DWORD **)v1154;
                        v1161 = ((uint64_t)v1155 - *(_QWORD *)v1154) >> 2;
                        v1162 = v1161 + 1;
                        if ((unint64_t)(v1161 + 1) >> 62)
                          sub_4074();
                        v1163 = v1157 - (_QWORD)v1160;
                        if (v1163 >> 1 > v1162)
                          v1162 = v1163 >> 1;
                        if ((unint64_t)v1163 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1164 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1164 = v1162;
                        if (v1164)
                        {
                          v1165 = (char *)sub_43B2C((uint64_t)v1158, v1164);
                          v1155 = *v1156;
                          v1160 = *(_DWORD **)v1154;
                        }
                        else
                        {
                          v1165 = 0;
                        }
                        v1299 = &v1165[4 * v1161];
                        *(_DWORD *)v1299 = 163;
                        v1159 = v1299 + 4;
                        while (v1155 != v1160)
                        {
                          v1300 = *--v1155;
                          *((_DWORD *)v1299 - 1) = v1300;
                          v1299 -= 4;
                        }
                        *(_QWORD *)v1154 = v1299;
                        *v1156 = v1159;
                        *v1158 = &v1165[4 * v1164];
                        if (v1160)
                          operator delete(v1160);
                      }
                      else
                      {
                        *v1155 = 163;
                        v1159 = v1155 + 1;
                      }
                      *v1156 = v1159;
                      if (!*v14)
                      {
LABEL_3952:
                        if ((*((_BYTE *)__p + 20) & 0x10) == 0)
                          goto LABEL_3953;
                        v1301 = *v12 + 24 * v13;
                        v1303 = (_DWORD **)(v1301 + 8);
                        v1302 = *(_DWORD **)(v1301 + 8);
                        v1305 = (_QWORD *)(v1301 + 16);
                        v1304 = *(_QWORD *)(v1301 + 16);
                        if ((unint64_t)v1302 >= v1304)
                        {
                          v1307 = *(_DWORD **)v1301;
                          v1308 = ((uint64_t)v1302 - *(_QWORD *)v1301) >> 2;
                          v1309 = v1308 + 1;
                          if ((unint64_t)(v1308 + 1) >> 62)
                            sub_4074();
                          v1310 = v1304 - (_QWORD)v1307;
                          if (v1310 >> 1 > v1309)
                            v1309 = v1310 >> 1;
                          if ((unint64_t)v1310 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1311 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1311 = v1309;
                          if (v1311)
                          {
                            v1312 = (char *)sub_43B2C((uint64_t)v1305, v1311);
                            v1302 = *v1303;
                            v1307 = *(_DWORD **)v1301;
                          }
                          else
                          {
                            v1312 = 0;
                          }
                          v1448 = &v1312[4 * v1308];
                          *(_DWORD *)v1448 = 164;
                          v1306 = v1448 + 4;
                          while (v1302 != v1307)
                          {
                            v1449 = *--v1302;
                            *((_DWORD *)v1448 - 1) = v1449;
                            v1448 -= 4;
                          }
                          *(_QWORD *)v1301 = v1448;
                          *v1303 = v1306;
                          *v1305 = &v1312[4 * v1311];
                          if (v1307)
                            operator delete(v1307);
                        }
                        else
                        {
                          *v1302 = 164;
                          v1306 = v1302 + 1;
                        }
                        *v1303 = v1306;
                        if (!*v14)
                        {
LABEL_3953:
                          if ((*((_BYTE *)__p + 20) & 0x20) == 0)
                            goto LABEL_3954;
                          v1450 = *v12 + 24 * v13;
                          v1452 = (_DWORD **)(v1450 + 8);
                          v1451 = *(_DWORD **)(v1450 + 8);
                          v1454 = (_QWORD *)(v1450 + 16);
                          v1453 = *(_QWORD *)(v1450 + 16);
                          if ((unint64_t)v1451 >= v1453)
                          {
                            v1456 = *(_DWORD **)v1450;
                            v1457 = ((uint64_t)v1451 - *(_QWORD *)v1450) >> 2;
                            v1458 = v1457 + 1;
                            if ((unint64_t)(v1457 + 1) >> 62)
                              sub_4074();
                            v1459 = v1453 - (_QWORD)v1456;
                            if (v1459 >> 1 > v1458)
                              v1458 = v1459 >> 1;
                            if ((unint64_t)v1459 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1460 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1460 = v1458;
                            if (v1460)
                            {
                              v1461 = (char *)sub_43B2C((uint64_t)v1454, v1460);
                              v1451 = *v1452;
                              v1456 = *(_DWORD **)v1450;
                            }
                            else
                            {
                              v1461 = 0;
                            }
                            v1588 = &v1461[4 * v1457];
                            *(_DWORD *)v1588 = 165;
                            v1455 = v1588 + 4;
                            while (v1451 != v1456)
                            {
                              v1589 = *--v1451;
                              *((_DWORD *)v1588 - 1) = v1589;
                              v1588 -= 4;
                            }
                            *(_QWORD *)v1450 = v1588;
                            *v1452 = v1455;
                            *v1454 = &v1461[4 * v1460];
                            if (v1456)
                              operator delete(v1456);
                          }
                          else
                          {
                            *v1451 = 165;
                            v1455 = v1451 + 1;
                          }
                          *v1452 = v1455;
                          if (!*v14)
                          {
LABEL_3954:
                            if ((*((_BYTE *)__p + 20) & 0x40) == 0)
                              goto LABEL_3955;
                            v1590 = *v12 + 24 * v13;
                            v1592 = (_DWORD **)(v1590 + 8);
                            v1591 = *(_DWORD **)(v1590 + 8);
                            v1594 = (_QWORD *)(v1590 + 16);
                            v1593 = *(_QWORD *)(v1590 + 16);
                            if ((unint64_t)v1591 >= v1593)
                            {
                              v1596 = *(_DWORD **)v1590;
                              v1597 = ((uint64_t)v1591 - *(_QWORD *)v1590) >> 2;
                              v1598 = v1597 + 1;
                              if ((unint64_t)(v1597 + 1) >> 62)
                                sub_4074();
                              v1599 = v1593 - (_QWORD)v1596;
                              if (v1599 >> 1 > v1598)
                                v1598 = v1599 >> 1;
                              if ((unint64_t)v1599 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1600 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1600 = v1598;
                              if (v1600)
                              {
                                v1601 = (char *)sub_43B2C((uint64_t)v1594, v1600);
                                v1591 = *v1592;
                                v1596 = *(_DWORD **)v1590;
                              }
                              else
                              {
                                v1601 = 0;
                              }
                              v1721 = &v1601[4 * v1597];
                              *(_DWORD *)v1721 = 166;
                              v1595 = v1721 + 4;
                              while (v1591 != v1596)
                              {
                                v1722 = *--v1591;
                                *((_DWORD *)v1721 - 1) = v1722;
                                v1721 -= 4;
                              }
                              *(_QWORD *)v1590 = v1721;
                              *v1592 = v1595;
                              *v1594 = &v1601[4 * v1600];
                              if (v1596)
                                operator delete(v1596);
                            }
                            else
                            {
                              *v1591 = 166;
                              v1595 = v1591 + 1;
                            }
                            *v1592 = v1595;
                            if (!*v14)
                            {
LABEL_3955:
                              if ((*((_BYTE *)__p + 20) & 0x80) != 0)
                              {
                                v1723 = *v12 + 24 * v13;
                                v1725 = (int **)(v1723 + 8);
                                v1724 = *(int **)(v1723 + 8);
                                v1727 = (_QWORD *)(v1723 + 16);
                                v1726 = *(_QWORD *)(v1723 + 16);
                                if ((unint64_t)v1724 < v1726)
                                {
                                  v1728 = 167;
                                  goto LABEL_2504;
                                }
                                v1729 = *(int **)v1723;
                                v1730 = ((uint64_t)v1724 - *(_QWORD *)v1723) >> 2;
                                v1731 = v1730 + 1;
                                if ((unint64_t)(v1730 + 1) >> 62)
                                  sub_4074();
                                v1732 = v1726 - (_QWORD)v1729;
                                if (v1732 >> 1 > v1731)
                                  v1731 = v1732 >> 1;
                                if ((unint64_t)v1732 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1733 = v1731;
                                if (v1733)
                                {
                                  v1734 = (char *)sub_43B2C((uint64_t)v1727, v1733);
                                  v1724 = *v1725;
                                  v1729 = *(int **)v1723;
                                }
                                else
                                {
                                  v1734 = 0;
                                }
                                v1840 = &v1734[4 * v1730];
                                *(_DWORD *)v1840 = 167;
                                v1841 = (int *)(v1840 + 4);
                                while (v1724 != v1729)
                                {
                                  v1842 = *--v1724;
                                  *((_DWORD *)v1840 - 1) = v1842;
                                  v1840 -= 4;
                                }
                                goto LABEL_3716;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 2:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 3) & 0x10) == 0)
              goto LABEL_302;
            v51 = *v12 + 24 * v13;
            v53 = (_DWORD **)(v51 + 8);
            v52 = *(_DWORD **)(v51 + 8);
            v55 = (_QWORD *)(v51 + 16);
            v54 = *(_QWORD *)(v51 + 16);
            if ((unint64_t)v52 >= v54)
            {
              v141 = *(_DWORD **)v51;
              v142 = ((uint64_t)v52 - *(_QWORD *)v51) >> 2;
              v143 = v142 + 1;
              if ((unint64_t)(v142 + 1) >> 62)
                sub_4074();
              v144 = v54 - (_QWORD)v141;
              if (v144 >> 1 > v143)
                v143 = v144 >> 1;
              if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
                v145 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v145 = v143;
              if (v145)
              {
                v146 = (char *)sub_43B2C((uint64_t)v55, v145);
                v52 = *v53;
                v141 = *(_DWORD **)v51;
              }
              else
              {
                v146 = 0;
              }
              v277 = &v146[4 * v142];
              *(_DWORD *)v277 = 28;
              v56 = v277 + 4;
              while (v52 != v141)
              {
                v278 = *--v52;
                *((_DWORD *)v277 - 1) = v278;
                v277 -= 4;
              }
              *(_QWORD *)v51 = v277;
              *v53 = v56;
              *v55 = &v146[4 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *v52 = 28;
              v56 = v52 + 1;
            }
            *v53 = v56;
            if (!*v14)
            {
LABEL_302:
              if ((*((_BYTE *)__p + 3) & 0x20) == 0)
                goto LABEL_3692;
              v279 = *v12 + 24 * v13;
              v281 = (_DWORD **)(v279 + 8);
              v280 = *(_DWORD **)(v279 + 8);
              v283 = (_QWORD *)(v279 + 16);
              v282 = *(_QWORD *)(v279 + 16);
              if ((unint64_t)v280 >= v282)
              {
                v285 = *(_DWORD **)v279;
                v286 = ((uint64_t)v280 - *(_QWORD *)v279) >> 2;
                v287 = v286 + 1;
                if ((unint64_t)(v286 + 1) >> 62)
                  sub_4074();
                v288 = v282 - (_QWORD)v285;
                if (v288 >> 1 > v287)
                  v287 = v288 >> 1;
                if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFFCLL)
                  v289 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v289 = v287;
                if (v289)
                {
                  v290 = (char *)sub_43B2C((uint64_t)v283, v289);
                  v280 = *v281;
                  v285 = *(_DWORD **)v279;
                }
                else
                {
                  v290 = 0;
                }
                v502 = &v290[4 * v286];
                *(_DWORD *)v502 = 29;
                v284 = v502 + 4;
                while (v280 != v285)
                {
                  v503 = *--v280;
                  *((_DWORD *)v502 - 1) = v503;
                  v502 -= 4;
                }
                *(_QWORD *)v279 = v502;
                *v281 = v284;
                *v283 = &v290[4 * v289];
                if (v285)
                  operator delete(v285);
              }
              else
              {
                *v280 = 29;
                v284 = v280 + 1;
              }
              *v281 = v284;
              if (!*v14)
              {
LABEL_3692:
                if ((*((_BYTE *)__p + 3) & 0x40) == 0)
                  goto LABEL_3956;
                v504 = *v12 + 24 * v13;
                v506 = (_DWORD **)(v504 + 8);
                v505 = *(_DWORD **)(v504 + 8);
                v508 = (_QWORD *)(v504 + 16);
                v507 = *(_QWORD *)(v504 + 16);
                if ((unint64_t)v505 >= v507)
                {
                  v510 = *(_DWORD **)v504;
                  v511 = ((uint64_t)v505 - *(_QWORD *)v504) >> 2;
                  v512 = v511 + 1;
                  if ((unint64_t)(v511 + 1) >> 62)
                    sub_4074();
                  v513 = v507 - (_QWORD)v510;
                  if (v513 >> 1 > v512)
                    v512 = v513 >> 1;
                  if ((unint64_t)v513 >= 0x7FFFFFFFFFFFFFFCLL)
                    v514 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v514 = v512;
                  if (v514)
                  {
                    v515 = (char *)sub_43B2C((uint64_t)v508, v514);
                    v505 = *v506;
                    v510 = *(_DWORD **)v504;
                  }
                  else
                  {
                    v515 = 0;
                  }
                  v706 = &v515[4 * v511];
                  *(_DWORD *)v706 = 30;
                  v509 = v706 + 4;
                  while (v505 != v510)
                  {
                    v707 = *--v505;
                    *((_DWORD *)v706 - 1) = v707;
                    v706 -= 4;
                  }
                  *(_QWORD *)v504 = v706;
                  *v506 = v509;
                  *v508 = &v515[4 * v514];
                  if (v510)
                    operator delete(v510);
                }
                else
                {
                  *v505 = 30;
                  v509 = v505 + 1;
                }
                *v506 = v509;
                if (!*v14)
                {
LABEL_3956:
                  if ((*((_BYTE *)__p + 3) & 0x80) == 0)
                    goto LABEL_3957;
                  v708 = *v12 + 24 * v13;
                  v710 = (_DWORD **)(v708 + 8);
                  v709 = *(_DWORD **)(v708 + 8);
                  v712 = (_QWORD *)(v708 + 16);
                  v711 = *(_QWORD *)(v708 + 16);
                  if ((unint64_t)v709 >= v711)
                  {
                    v714 = *(_DWORD **)v708;
                    v715 = ((uint64_t)v709 - *(_QWORD *)v708) >> 2;
                    v716 = v715 + 1;
                    if ((unint64_t)(v715 + 1) >> 62)
                      sub_4074();
                    v717 = v711 - (_QWORD)v714;
                    if (v717 >> 1 > v716)
                      v716 = v717 >> 1;
                    if ((unint64_t)v717 >= 0x7FFFFFFFFFFFFFFCLL)
                      v718 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v718 = v716;
                    if (v718)
                    {
                      v719 = (char *)sub_43B2C((uint64_t)v712, v718);
                      v709 = *v710;
                      v714 = *(_DWORD **)v708;
                    }
                    else
                    {
                      v719 = 0;
                    }
                    v895 = &v719[4 * v715];
                    *(_DWORD *)v895 = 31;
                    v713 = v895 + 4;
                    while (v709 != v714)
                    {
                      v896 = *--v709;
                      *((_DWORD *)v895 - 1) = v896;
                      v895 -= 4;
                    }
                    *(_QWORD *)v708 = v895;
                    *v710 = v713;
                    *v712 = &v719[4 * v718];
                    if (v714)
                      operator delete(v714);
                  }
                  else
                  {
                    *v709 = 31;
                    v713 = v709 + 1;
                  }
                  *v710 = v713;
                  if (!*v14)
                  {
LABEL_3957:
                    if ((*((_BYTE *)__p + 4) & 1) == 0)
                      goto LABEL_3958;
                    v897 = *v12 + 24 * v13;
                    v899 = (_DWORD **)(v897 + 8);
                    v898 = *(_DWORD **)(v897 + 8);
                    v901 = (_QWORD *)(v897 + 16);
                    v900 = *(_QWORD *)(v897 + 16);
                    if ((unint64_t)v898 >= v900)
                    {
                      v903 = *(_DWORD **)v897;
                      v904 = ((uint64_t)v898 - *(_QWORD *)v897) >> 2;
                      v905 = v904 + 1;
                      if ((unint64_t)(v904 + 1) >> 62)
                        sub_4074();
                      v906 = v900 - (_QWORD)v903;
                      if (v906 >> 1 > v905)
                        v905 = v906 >> 1;
                      if ((unint64_t)v906 >= 0x7FFFFFFFFFFFFFFCLL)
                        v907 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v907 = v905;
                      if (v907)
                      {
                        v908 = (char *)sub_43B2C((uint64_t)v901, v907);
                        v898 = *v899;
                        v903 = *(_DWORD **)v897;
                      }
                      else
                      {
                        v908 = 0;
                      }
                      v1070 = &v908[4 * v904];
                      *(_DWORD *)v1070 = 32;
                      v902 = v1070 + 4;
                      while (v898 != v903)
                      {
                        v1071 = *--v898;
                        *((_DWORD *)v1070 - 1) = v1071;
                        v1070 -= 4;
                      }
                      *(_QWORD *)v897 = v1070;
                      *v899 = v902;
                      *v901 = &v908[4 * v907];
                      if (v903)
                        operator delete(v903);
                    }
                    else
                    {
                      *v898 = 32;
                      v902 = v898 + 1;
                    }
                    *v899 = v902;
                    if (!*v14)
                    {
LABEL_3958:
                      if ((*((_BYTE *)__p + 4) & 2) == 0)
                        goto LABEL_3959;
                      v1072 = *v12 + 24 * v13;
                      v1074 = (_DWORD **)(v1072 + 8);
                      v1073 = *(_DWORD **)(v1072 + 8);
                      v1076 = (_QWORD *)(v1072 + 16);
                      v1075 = *(_QWORD *)(v1072 + 16);
                      if ((unint64_t)v1073 >= v1075)
                      {
                        v1078 = *(_DWORD **)v1072;
                        v1079 = ((uint64_t)v1073 - *(_QWORD *)v1072) >> 2;
                        v1080 = v1079 + 1;
                        if ((unint64_t)(v1079 + 1) >> 62)
                          sub_4074();
                        v1081 = v1075 - (_QWORD)v1078;
                        if (v1081 >> 1 > v1080)
                          v1080 = v1081 >> 1;
                        if ((unint64_t)v1081 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1082 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1082 = v1080;
                        if (v1082)
                        {
                          v1083 = (char *)sub_43B2C((uint64_t)v1076, v1082);
                          v1073 = *v1074;
                          v1078 = *(_DWORD **)v1072;
                        }
                        else
                        {
                          v1083 = 0;
                        }
                        v1243 = &v1083[4 * v1079];
                        *(_DWORD *)v1243 = 33;
                        v1077 = v1243 + 4;
                        while (v1073 != v1078)
                        {
                          v1244 = *--v1073;
                          *((_DWORD *)v1243 - 1) = v1244;
                          v1243 -= 4;
                        }
                        *(_QWORD *)v1072 = v1243;
                        *v1074 = v1077;
                        *v1076 = &v1083[4 * v1082];
                        if (v1078)
                          operator delete(v1078);
                      }
                      else
                      {
                        *v1073 = 33;
                        v1077 = v1073 + 1;
                      }
                      *v1074 = v1077;
                      if (!*v14)
                      {
LABEL_3959:
                        if ((*((_BYTE *)__p + 4) & 4) == 0)
                          goto LABEL_3960;
                        v1245 = *v12 + 24 * v13;
                        v1247 = (_DWORD **)(v1245 + 8);
                        v1246 = *(_DWORD **)(v1245 + 8);
                        v1249 = (_QWORD *)(v1245 + 16);
                        v1248 = *(_QWORD *)(v1245 + 16);
                        if ((unint64_t)v1246 >= v1248)
                        {
                          v1251 = *(_DWORD **)v1245;
                          v1252 = ((uint64_t)v1246 - *(_QWORD *)v1245) >> 2;
                          v1253 = v1252 + 1;
                          if ((unint64_t)(v1252 + 1) >> 62)
                            sub_4074();
                          v1254 = v1248 - (_QWORD)v1251;
                          if (v1254 >> 1 > v1253)
                            v1253 = v1254 >> 1;
                          if ((unint64_t)v1254 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1255 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1255 = v1253;
                          if (v1255)
                          {
                            v1256 = (char *)sub_43B2C((uint64_t)v1249, v1255);
                            v1246 = *v1247;
                            v1251 = *(_DWORD **)v1245;
                          }
                          else
                          {
                            v1256 = 0;
                          }
                          v1392 = &v1256[4 * v1252];
                          *(_DWORD *)v1392 = 34;
                          v1250 = v1392 + 4;
                          while (v1246 != v1251)
                          {
                            v1393 = *--v1246;
                            *((_DWORD *)v1392 - 1) = v1393;
                            v1392 -= 4;
                          }
                          *(_QWORD *)v1245 = v1392;
                          *v1247 = v1250;
                          *v1249 = &v1256[4 * v1255];
                          if (v1251)
                            operator delete(v1251);
                        }
                        else
                        {
                          *v1246 = 34;
                          v1250 = v1246 + 1;
                        }
                        *v1247 = v1250;
                        if (!*v14)
                        {
LABEL_3960:
                          if ((*((_BYTE *)__p + 4) & 8) == 0)
                            goto LABEL_3961;
                          v1394 = *v12 + 24 * v13;
                          v1396 = (_DWORD **)(v1394 + 8);
                          v1395 = *(_DWORD **)(v1394 + 8);
                          v1398 = (_QWORD *)(v1394 + 16);
                          v1397 = *(_QWORD *)(v1394 + 16);
                          if ((unint64_t)v1395 >= v1397)
                          {
                            v1400 = *(_DWORD **)v1394;
                            v1401 = ((uint64_t)v1395 - *(_QWORD *)v1394) >> 2;
                            v1402 = v1401 + 1;
                            if ((unint64_t)(v1401 + 1) >> 62)
                              sub_4074();
                            v1403 = v1397 - (_QWORD)v1400;
                            if (v1403 >> 1 > v1402)
                              v1402 = v1403 >> 1;
                            if ((unint64_t)v1403 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1404 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1404 = v1402;
                            if (v1404)
                            {
                              v1405 = (char *)sub_43B2C((uint64_t)v1398, v1404);
                              v1395 = *v1396;
                              v1400 = *(_DWORD **)v1394;
                            }
                            else
                            {
                              v1405 = 0;
                            }
                            v1532 = &v1405[4 * v1401];
                            *(_DWORD *)v1532 = 35;
                            v1399 = v1532 + 4;
                            while (v1395 != v1400)
                            {
                              v1533 = *--v1395;
                              *((_DWORD *)v1532 - 1) = v1533;
                              v1532 -= 4;
                            }
                            *(_QWORD *)v1394 = v1532;
                            *v1396 = v1399;
                            *v1398 = &v1405[4 * v1404];
                            if (v1400)
                              operator delete(v1400);
                          }
                          else
                          {
                            *v1395 = 35;
                            v1399 = v1395 + 1;
                          }
                          *v1396 = v1399;
                          if (!*v14)
                          {
LABEL_3961:
                            if ((*((_BYTE *)__p + 4) & 0x10) == 0)
                              goto LABEL_3962;
                            v1534 = *v12 + 24 * v13;
                            v1536 = (_DWORD **)(v1534 + 8);
                            v1535 = *(_DWORD **)(v1534 + 8);
                            v1538 = (_QWORD *)(v1534 + 16);
                            v1537 = *(_QWORD *)(v1534 + 16);
                            if ((unint64_t)v1535 >= v1537)
                            {
                              v1540 = *(_DWORD **)v1534;
                              v1541 = ((uint64_t)v1535 - *(_QWORD *)v1534) >> 2;
                              v1542 = v1541 + 1;
                              if ((unint64_t)(v1541 + 1) >> 62)
                                sub_4074();
                              v1543 = v1537 - (_QWORD)v1540;
                              if (v1543 >> 1 > v1542)
                                v1542 = v1543 >> 1;
                              if ((unint64_t)v1543 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1544 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1544 = v1542;
                              if (v1544)
                              {
                                v1545 = (char *)sub_43B2C((uint64_t)v1538, v1544);
                                v1535 = *v1536;
                                v1540 = *(_DWORD **)v1534;
                              }
                              else
                              {
                                v1545 = 0;
                              }
                              v1673 = &v1545[4 * v1541];
                              *(_DWORD *)v1673 = 36;
                              v1539 = v1673 + 4;
                              while (v1535 != v1540)
                              {
                                v1674 = *--v1535;
                                *((_DWORD *)v1673 - 1) = v1674;
                                v1673 -= 4;
                              }
                              *(_QWORD *)v1534 = v1673;
                              *v1536 = v1539;
                              *v1538 = &v1545[4 * v1544];
                              if (v1540)
                                operator delete(v1540);
                            }
                            else
                            {
                              *v1535 = 36;
                              v1539 = v1535 + 1;
                            }
                            *v1536 = v1539;
                            if (!*v14)
                            {
LABEL_3962:
                              if ((*((_BYTE *)__p + 4) & 0x20) == 0)
                                goto LABEL_3963;
                              v1675 = *v12 + 24 * v13;
                              v1677 = (_DWORD **)(v1675 + 8);
                              v1676 = *(_DWORD **)(v1675 + 8);
                              v1679 = (_QWORD *)(v1675 + 16);
                              v1678 = *(_QWORD *)(v1675 + 16);
                              if ((unint64_t)v1676 >= v1678)
                              {
                                v1681 = *(_DWORD **)v1675;
                                v1682 = ((uint64_t)v1676 - *(_QWORD *)v1675) >> 2;
                                v1683 = v1682 + 1;
                                if ((unint64_t)(v1682 + 1) >> 62)
                                  sub_4074();
                                v1684 = v1678 - (_QWORD)v1681;
                                if (v1684 >> 1 > v1683)
                                  v1683 = v1684 >> 1;
                                if ((unint64_t)v1684 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1685 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1685 = v1683;
                                if (v1685)
                                {
                                  v1686 = (char *)sub_43B2C((uint64_t)v1679, v1685);
                                  v1676 = *v1677;
                                  v1681 = *(_DWORD **)v1675;
                                }
                                else
                                {
                                  v1686 = 0;
                                }
                                v1797 = &v1686[4 * v1682];
                                *(_DWORD *)v1797 = 37;
                                v1680 = v1797 + 4;
                                while (v1676 != v1681)
                                {
                                  v1798 = *--v1676;
                                  *((_DWORD *)v1797 - 1) = v1798;
                                  v1797 -= 4;
                                }
                                *(_QWORD *)v1675 = v1797;
                                *v1677 = v1680;
                                *v1679 = &v1686[4 * v1685];
                                if (v1681)
                                  operator delete(v1681);
                              }
                              else
                              {
                                *v1676 = 37;
                                v1680 = v1676 + 1;
                              }
                              *v1677 = v1680;
                              if (!*v14)
                              {
LABEL_3963:
                                if ((*((_BYTE *)__p + 4) & 0x40) == 0)
                                  goto LABEL_3964;
                                v1799 = *v12 + 24 * v13;
                                v1801 = (_DWORD **)(v1799 + 8);
                                v1800 = *(_DWORD **)(v1799 + 8);
                                v1803 = (_QWORD *)(v1799 + 16);
                                v1802 = *(_QWORD *)(v1799 + 16);
                                if ((unint64_t)v1800 >= v1802)
                                {
                                  v1805 = *(_DWORD **)v1799;
                                  v1806 = ((uint64_t)v1800 - *(_QWORD *)v1799) >> 2;
                                  v1807 = v1806 + 1;
                                  if ((unint64_t)(v1806 + 1) >> 62)
                                    sub_4074();
                                  v1808 = v1802 - (_QWORD)v1805;
                                  if (v1808 >> 1 > v1807)
                                    v1807 = v1808 >> 1;
                                  if ((unint64_t)v1808 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v1809 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v1809 = v1807;
                                  if (v1809)
                                  {
                                    v1810 = (char *)sub_43B2C((uint64_t)v1803, v1809);
                                    v1800 = *v1801;
                                    v1805 = *(_DWORD **)v1799;
                                  }
                                  else
                                  {
                                    v1810 = 0;
                                  }
                                  v1900 = &v1810[4 * v1806];
                                  *(_DWORD *)v1900 = 38;
                                  v1804 = v1900 + 4;
                                  while (v1800 != v1805)
                                  {
                                    v1901 = *--v1800;
                                    *((_DWORD *)v1900 - 1) = v1901;
                                    v1900 -= 4;
                                  }
                                  *(_QWORD *)v1799 = v1900;
                                  *v1801 = v1804;
                                  *v1803 = &v1810[4 * v1809];
                                  if (v1805)
                                    operator delete(v1805);
                                }
                                else
                                {
                                  *v1800 = 38;
                                  v1804 = v1800 + 1;
                                }
                                *v1801 = v1804;
                                if (!*v14)
                                {
LABEL_3964:
                                  if ((*((_BYTE *)__p + 4) & 0x80) == 0)
                                    goto LABEL_3965;
                                  v1902 = *v12 + 24 * v13;
                                  v1904 = (_DWORD **)(v1902 + 8);
                                  v1903 = *(_DWORD **)(v1902 + 8);
                                  v1906 = (_QWORD *)(v1902 + 16);
                                  v1905 = *(_QWORD *)(v1902 + 16);
                                  if ((unint64_t)v1903 >= v1905)
                                  {
                                    v1908 = *(_DWORD **)v1902;
                                    v1909 = ((uint64_t)v1903 - *(_QWORD *)v1902) >> 2;
                                    v1910 = v1909 + 1;
                                    if ((unint64_t)(v1909 + 1) >> 62)
                                      sub_4074();
                                    v1911 = v1905 - (_QWORD)v1908;
                                    if (v1911 >> 1 > v1910)
                                      v1910 = v1911 >> 1;
                                    if ((unint64_t)v1911 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1912 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1912 = v1910;
                                    if (v1912)
                                    {
                                      v1913 = (char *)sub_43B2C((uint64_t)v1906, v1912);
                                      v1903 = *v1904;
                                      v1908 = *(_DWORD **)v1902;
                                    }
                                    else
                                    {
                                      v1913 = 0;
                                    }
                                    v1990 = &v1913[4 * v1909];
                                    *(_DWORD *)v1990 = 39;
                                    v1907 = v1990 + 4;
                                    while (v1903 != v1908)
                                    {
                                      v1991 = *--v1903;
                                      *((_DWORD *)v1990 - 1) = v1991;
                                      v1990 -= 4;
                                    }
                                    *(_QWORD *)v1902 = v1990;
                                    *v1904 = v1907;
                                    *v1906 = &v1913[4 * v1912];
                                    if (v1908)
                                      operator delete(v1908);
                                  }
                                  else
                                  {
                                    *v1903 = 39;
                                    v1907 = v1903 + 1;
                                  }
                                  *v1904 = v1907;
                                  if (!*v14)
                                  {
LABEL_3965:
                                    if ((*((_BYTE *)__p + 5) & 1) == 0)
                                      goto LABEL_3966;
                                    v1992 = *v12 + 24 * v13;
                                    v1994 = (_DWORD **)(v1992 + 8);
                                    v1993 = *(_DWORD **)(v1992 + 8);
                                    v1996 = (_QWORD *)(v1992 + 16);
                                    v1995 = *(_QWORD *)(v1992 + 16);
                                    if ((unint64_t)v1993 >= v1995)
                                    {
                                      v1998 = *(_DWORD **)v1992;
                                      v1999 = ((uint64_t)v1993 - *(_QWORD *)v1992) >> 2;
                                      v2000 = v1999 + 1;
                                      if ((unint64_t)(v1999 + 1) >> 62)
                                        sub_4074();
                                      v2001 = v1995 - (_QWORD)v1998;
                                      if (v2001 >> 1 > v2000)
                                        v2000 = v2001 >> 1;
                                      if ((unint64_t)v2001 >= 0x7FFFFFFFFFFFFFFCLL)
                                        v2002 = 0x3FFFFFFFFFFFFFFFLL;
                                      else
                                        v2002 = v2000;
                                      if (v2002)
                                      {
                                        v2003 = (char *)sub_43B2C((uint64_t)v1996, v2002);
                                        v1993 = *v1994;
                                        v1998 = *(_DWORD **)v1992;
                                      }
                                      else
                                      {
                                        v2003 = 0;
                                      }
                                      v2075 = &v2003[4 * v1999];
                                      *(_DWORD *)v2075 = 40;
                                      v1997 = v2075 + 4;
                                      while (v1993 != v1998)
                                      {
                                        v2076 = *--v1993;
                                        *((_DWORD *)v2075 - 1) = v2076;
                                        v2075 -= 4;
                                      }
                                      *(_QWORD *)v1992 = v2075;
                                      *v1994 = v1997;
                                      *v1996 = &v2003[4 * v2002];
                                      if (v1998)
                                        operator delete(v1998);
                                    }
                                    else
                                    {
                                      *v1993 = 40;
                                      v1997 = v1993 + 1;
                                    }
                                    *v1994 = v1997;
                                    if (!*v14)
                                    {
LABEL_3966:
                                      if ((*((_BYTE *)__p + 5) & 2) == 0)
                                        goto LABEL_3967;
                                      v2077 = *v12 + 24 * v13;
                                      v2079 = (_DWORD **)(v2077 + 8);
                                      v2078 = *(_DWORD **)(v2077 + 8);
                                      v2081 = (_QWORD *)(v2077 + 16);
                                      v2080 = *(_QWORD *)(v2077 + 16);
                                      if ((unint64_t)v2078 >= v2080)
                                      {
                                        v2083 = *(_DWORD **)v2077;
                                        v2084 = ((uint64_t)v2078 - *(_QWORD *)v2077) >> 2;
                                        v2085 = v2084 + 1;
                                        if ((unint64_t)(v2084 + 1) >> 62)
                                          sub_4074();
                                        v2086 = v2080 - (_QWORD)v2083;
                                        if (v2086 >> 1 > v2085)
                                          v2085 = v2086 >> 1;
                                        if ((unint64_t)v2086 >= 0x7FFFFFFFFFFFFFFCLL)
                                          v2087 = 0x3FFFFFFFFFFFFFFFLL;
                                        else
                                          v2087 = v2085;
                                        if (v2087)
                                        {
                                          v2088 = (char *)sub_43B2C((uint64_t)v2081, v2087);
                                          v2078 = *v2079;
                                          v2083 = *(_DWORD **)v2077;
                                        }
                                        else
                                        {
                                          v2088 = 0;
                                        }
                                        v2159 = &v2088[4 * v2084];
                                        *(_DWORD *)v2159 = 41;
                                        v2082 = v2159 + 4;
                                        while (v2078 != v2083)
                                        {
                                          v2160 = *--v2078;
                                          *((_DWORD *)v2159 - 1) = v2160;
                                          v2159 -= 4;
                                        }
                                        *(_QWORD *)v2077 = v2159;
                                        *v2079 = v2082;
                                        *v2081 = &v2088[4 * v2087];
                                        if (v2083)
                                          operator delete(v2083);
                                      }
                                      else
                                      {
                                        *v2078 = 41;
                                        v2082 = v2078 + 1;
                                      }
                                      *v2079 = v2082;
                                      if (!*v14)
                                      {
LABEL_3967:
                                        if ((*((_BYTE *)__p + 5) & 4) == 0)
                                          goto LABEL_3968;
                                        v2161 = *v12 + 24 * v13;
                                        v2163 = (_DWORD **)(v2161 + 8);
                                        v2162 = *(_DWORD **)(v2161 + 8);
                                        v2165 = (_QWORD *)(v2161 + 16);
                                        v2164 = *(_QWORD *)(v2161 + 16);
                                        if ((unint64_t)v2162 >= v2164)
                                        {
                                          v2167 = *(_DWORD **)v2161;
                                          v2168 = ((uint64_t)v2162 - *(_QWORD *)v2161) >> 2;
                                          v2169 = v2168 + 1;
                                          if ((unint64_t)(v2168 + 1) >> 62)
                                            sub_4074();
                                          v2170 = v2164 - (_QWORD)v2167;
                                          if (v2170 >> 1 > v2169)
                                            v2169 = v2170 >> 1;
                                          if ((unint64_t)v2170 >= 0x7FFFFFFFFFFFFFFCLL)
                                            v2171 = 0x3FFFFFFFFFFFFFFFLL;
                                          else
                                            v2171 = v2169;
                                          if (v2171)
                                          {
                                            v2172 = (char *)sub_43B2C((uint64_t)v2165, v2171);
                                            v2162 = *v2163;
                                            v2167 = *(_DWORD **)v2161;
                                          }
                                          else
                                          {
                                            v2172 = 0;
                                          }
                                          v2235 = &v2172[4 * v2168];
                                          *(_DWORD *)v2235 = 42;
                                          v2166 = v2235 + 4;
                                          while (v2162 != v2167)
                                          {
                                            v2236 = *--v2162;
                                            *((_DWORD *)v2235 - 1) = v2236;
                                            v2235 -= 4;
                                          }
                                          *(_QWORD *)v2161 = v2235;
                                          *v2163 = v2166;
                                          *v2165 = &v2172[4 * v2171];
                                          if (v2167)
                                            operator delete(v2167);
                                        }
                                        else
                                        {
                                          *v2162 = 42;
                                          v2166 = v2162 + 1;
                                        }
                                        *v2163 = v2166;
                                        if (!*v14)
                                        {
LABEL_3968:
                                          if ((*((_BYTE *)__p + 5) & 8) == 0)
                                            goto LABEL_3969;
                                          v2237 = *v12 + 24 * v13;
                                          v2239 = (_DWORD **)(v2237 + 8);
                                          v2238 = *(_DWORD **)(v2237 + 8);
                                          v2241 = (_QWORD *)(v2237 + 16);
                                          v2240 = *(_QWORD *)(v2237 + 16);
                                          if ((unint64_t)v2238 >= v2240)
                                          {
                                            v2243 = *(_DWORD **)v2237;
                                            v2244 = ((uint64_t)v2238 - *(_QWORD *)v2237) >> 2;
                                            v2245 = v2244 + 1;
                                            if ((unint64_t)(v2244 + 1) >> 62)
                                              sub_4074();
                                            v2246 = v2240 - (_QWORD)v2243;
                                            if (v2246 >> 1 > v2245)
                                              v2245 = v2246 >> 1;
                                            if ((unint64_t)v2246 >= 0x7FFFFFFFFFFFFFFCLL)
                                              v2247 = 0x3FFFFFFFFFFFFFFFLL;
                                            else
                                              v2247 = v2245;
                                            if (v2247)
                                            {
                                              v2248 = (char *)sub_43B2C((uint64_t)v2241, v2247);
                                              v2238 = *v2239;
                                              v2243 = *(_DWORD **)v2237;
                                            }
                                            else
                                            {
                                              v2248 = 0;
                                            }
                                            v2298 = &v2248[4 * v2244];
                                            *(_DWORD *)v2298 = 43;
                                            v2242 = v2298 + 4;
                                            while (v2238 != v2243)
                                            {
                                              v2299 = *--v2238;
                                              *((_DWORD *)v2298 - 1) = v2299;
                                              v2298 -= 4;
                                            }
                                            *(_QWORD *)v2237 = v2298;
                                            *v2239 = v2242;
                                            *v2241 = &v2248[4 * v2247];
                                            if (v2243)
                                              operator delete(v2243);
                                          }
                                          else
                                          {
                                            *v2238 = 43;
                                            v2242 = v2238 + 1;
                                          }
                                          *v2239 = v2242;
                                          if (!*v14)
                                          {
LABEL_3969:
                                            if ((*((_BYTE *)__p + 5) & 0x10) == 0)
                                              goto LABEL_3970;
                                            v2300 = *v12 + 24 * v13;
                                            v2302 = (_DWORD **)(v2300 + 8);
                                            v2301 = *(_DWORD **)(v2300 + 8);
                                            v2304 = (_QWORD *)(v2300 + 16);
                                            v2303 = *(_QWORD *)(v2300 + 16);
                                            if ((unint64_t)v2301 >= v2303)
                                            {
                                              v2306 = *(_DWORD **)v2300;
                                              v2307 = ((uint64_t)v2301 - *(_QWORD *)v2300) >> 2;
                                              v2308 = v2307 + 1;
                                              if ((unint64_t)(v2307 + 1) >> 62)
                                                sub_4074();
                                              v2309 = v2303 - (_QWORD)v2306;
                                              if (v2309 >> 1 > v2308)
                                                v2308 = v2309 >> 1;
                                              if ((unint64_t)v2309 >= 0x7FFFFFFFFFFFFFFCLL)
                                                v2310 = 0x3FFFFFFFFFFFFFFFLL;
                                              else
                                                v2310 = v2308;
                                              if (v2310)
                                              {
                                                v2311 = (char *)sub_43B2C((uint64_t)v2304, v2310);
                                                v2301 = *v2302;
                                                v2306 = *(_DWORD **)v2300;
                                              }
                                              else
                                              {
                                                v2311 = 0;
                                              }
                                              v2355 = &v2311[4 * v2307];
                                              *(_DWORD *)v2355 = 44;
                                              v2305 = v2355 + 4;
                                              while (v2301 != v2306)
                                              {
                                                v2356 = *--v2301;
                                                *((_DWORD *)v2355 - 1) = v2356;
                                                v2355 -= 4;
                                              }
                                              *(_QWORD *)v2300 = v2355;
                                              *v2302 = v2305;
                                              *v2304 = &v2311[4 * v2310];
                                              if (v2306)
                                                operator delete(v2306);
                                            }
                                            else
                                            {
                                              *v2301 = 44;
                                              v2305 = v2301 + 1;
                                            }
                                            *v2302 = v2305;
                                            if (!*v14)
                                            {
LABEL_3970:
                                              if ((*((_BYTE *)__p + 5) & 0x20) == 0)
                                                goto LABEL_3971;
                                              v2357 = *v12 + 24 * v13;
                                              v2359 = (_DWORD **)(v2357 + 8);
                                              v2358 = *(_DWORD **)(v2357 + 8);
                                              v2361 = (_QWORD *)(v2357 + 16);
                                              v2360 = *(_QWORD *)(v2357 + 16);
                                              if ((unint64_t)v2358 >= v2360)
                                              {
                                                v2363 = *(_DWORD **)v2357;
                                                v2364 = ((uint64_t)v2358 - *(_QWORD *)v2357) >> 2;
                                                v2365 = v2364 + 1;
                                                if ((unint64_t)(v2364 + 1) >> 62)
                                                  sub_4074();
                                                v2366 = v2360 - (_QWORD)v2363;
                                                if (v2366 >> 1 > v2365)
                                                  v2365 = v2366 >> 1;
                                                if ((unint64_t)v2366 >= 0x7FFFFFFFFFFFFFFCLL)
                                                  v2367 = 0x3FFFFFFFFFFFFFFFLL;
                                                else
                                                  v2367 = v2365;
                                                if (v2367)
                                                {
                                                  v2368 = (char *)sub_43B2C((uint64_t)v2361, v2367);
                                                  v2358 = *v2359;
                                                  v2363 = *(_DWORD **)v2357;
                                                }
                                                else
                                                {
                                                  v2368 = 0;
                                                }
                                                v2403 = &v2368[4 * v2364];
                                                *(_DWORD *)v2403 = 45;
                                                v2362 = v2403 + 4;
                                                while (v2358 != v2363)
                                                {
                                                  v2404 = *--v2358;
                                                  *((_DWORD *)v2403 - 1) = v2404;
                                                  v2403 -= 4;
                                                }
                                                *(_QWORD *)v2357 = v2403;
                                                *v2359 = v2362;
                                                *v2361 = &v2368[4 * v2367];
                                                if (v2363)
                                                  operator delete(v2363);
                                              }
                                              else
                                              {
                                                *v2358 = 45;
                                                v2362 = v2358 + 1;
                                              }
                                              *v2359 = v2362;
                                              if (!*v14)
                                              {
LABEL_3971:
                                                if ((*((_BYTE *)__p + 5) & 0x40) == 0)
                                                  goto LABEL_3972;
                                                v2405 = *v12 + 24 * v13;
                                                v2407 = (_DWORD **)(v2405 + 8);
                                                v2406 = *(_DWORD **)(v2405 + 8);
                                                v2409 = (_QWORD *)(v2405 + 16);
                                                v2408 = *(_QWORD *)(v2405 + 16);
                                                if ((unint64_t)v2406 >= v2408)
                                                {
                                                  v2411 = *(_DWORD **)v2405;
                                                  v2412 = ((uint64_t)v2406 - *(_QWORD *)v2405) >> 2;
                                                  v2413 = v2412 + 1;
                                                  if ((unint64_t)(v2412 + 1) >> 62)
                                                    sub_4074();
                                                  v2414 = v2408 - (_QWORD)v2411;
                                                  if (v2414 >> 1 > v2413)
                                                    v2413 = v2414 >> 1;
                                                  if ((unint64_t)v2414 >= 0x7FFFFFFFFFFFFFFCLL)
                                                    v2415 = 0x3FFFFFFFFFFFFFFFLL;
                                                  else
                                                    v2415 = v2413;
                                                  if (v2415)
                                                  {
                                                    v2416 = (char *)sub_43B2C((uint64_t)v2409, v2415);
                                                    v2406 = *v2407;
                                                    v2411 = *(_DWORD **)v2405;
                                                  }
                                                  else
                                                  {
                                                    v2416 = 0;
                                                  }
                                                  v2446 = &v2416[4 * v2412];
                                                  *(_DWORD *)v2446 = 46;
                                                  v2410 = v2446 + 4;
                                                  while (v2406 != v2411)
                                                  {
                                                    v2447 = *--v2406;
                                                    *((_DWORD *)v2446 - 1) = v2447;
                                                    v2446 -= 4;
                                                  }
                                                  *(_QWORD *)v2405 = v2446;
                                                  *v2407 = v2410;
                                                  *v2409 = &v2416[4 * v2415];
                                                  if (v2411)
                                                    operator delete(v2411);
                                                }
                                                else
                                                {
                                                  *v2406 = 46;
                                                  v2410 = v2406 + 1;
                                                }
                                                *v2407 = v2410;
                                                if (!*v14)
                                                {
LABEL_3972:
                                                  if ((*((_BYTE *)__p + 5) & 0x80) == 0)
                                                    goto LABEL_3973;
                                                  v2448 = *v12 + 24 * v13;
                                                  v2450 = (_DWORD **)(v2448 + 8);
                                                  v2449 = *(_DWORD **)(v2448 + 8);
                                                  v2452 = (_QWORD *)(v2448 + 16);
                                                  v2451 = *(_QWORD *)(v2448 + 16);
                                                  if ((unint64_t)v2449 >= v2451)
                                                  {
                                                    v2454 = *(_DWORD **)v2448;
                                                    v2455 = ((uint64_t)v2449 - *(_QWORD *)v2448) >> 2;
                                                    v2456 = v2455 + 1;
                                                    if ((unint64_t)(v2455 + 1) >> 62)
                                                      sub_4074();
                                                    v2457 = v2451 - (_QWORD)v2454;
                                                    if (v2457 >> 1 > v2456)
                                                      v2456 = v2457 >> 1;
                                                    if ((unint64_t)v2457 >= 0x7FFFFFFFFFFFFFFCLL)
                                                      v2458 = 0x3FFFFFFFFFFFFFFFLL;
                                                    else
                                                      v2458 = v2456;
                                                    if (v2458)
                                                    {
                                                      v2459 = (char *)sub_43B2C((uint64_t)v2452, v2458);
                                                      v2449 = *v2450;
                                                      v2454 = *(_DWORD **)v2448;
                                                    }
                                                    else
                                                    {
                                                      v2459 = 0;
                                                    }
                                                    v2480 = &v2459[4 * v2455];
                                                    *(_DWORD *)v2480 = 47;
                                                    v2453 = v2480 + 4;
                                                    while (v2449 != v2454)
                                                    {
                                                      v2481 = *--v2449;
                                                      *((_DWORD *)v2480 - 1) = v2481;
                                                      v2480 -= 4;
                                                    }
                                                    *(_QWORD *)v2448 = v2480;
                                                    *v2450 = v2453;
                                                    *v2452 = &v2459[4 * v2458];
                                                    if (v2454)
                                                      operator delete(v2454);
                                                  }
                                                  else
                                                  {
                                                    *v2449 = 47;
                                                    v2453 = v2449 + 1;
                                                  }
                                                  *v2450 = v2453;
                                                  if (!*v14)
                                                  {
LABEL_3973:
                                                    if ((*((_BYTE *)__p + 6) & 1) == 0)
                                                      goto LABEL_3974;
                                                    v2482 = *v12 + 24 * v13;
                                                    v2484 = (_DWORD **)(v2482 + 8);
                                                    v2483 = *(_DWORD **)(v2482 + 8);
                                                    v2486 = (_QWORD *)(v2482 + 16);
                                                    v2485 = *(_QWORD *)(v2482 + 16);
                                                    if ((unint64_t)v2483 >= v2485)
                                                    {
                                                      v2488 = *(_DWORD **)v2482;
                                                      v2489 = ((uint64_t)v2483 - *(_QWORD *)v2482) >> 2;
                                                      v2490 = v2489 + 1;
                                                      if ((unint64_t)(v2489 + 1) >> 62)
                                                        sub_4074();
                                                      v2491 = v2485 - (_QWORD)v2488;
                                                      if (v2491 >> 1 > v2490)
                                                        v2490 = v2491 >> 1;
                                                      if ((unint64_t)v2491 >= 0x7FFFFFFFFFFFFFFCLL)
                                                        v2492 = 0x3FFFFFFFFFFFFFFFLL;
                                                      else
                                                        v2492 = v2490;
                                                      if (v2492)
                                                      {
                                                        v2493 = (char *)sub_43B2C((uint64_t)v2486, v2492);
                                                        v2483 = *v2484;
                                                        v2488 = *(_DWORD **)v2482;
                                                      }
                                                      else
                                                      {
                                                        v2493 = 0;
                                                      }
                                                      v2509 = &v2493[4 * v2489];
                                                      *(_DWORD *)v2509 = 48;
                                                      v2487 = v2509 + 4;
                                                      while (v2483 != v2488)
                                                      {
                                                        v2510 = *--v2483;
                                                        *((_DWORD *)v2509 - 1) = v2510;
                                                        v2509 -= 4;
                                                      }
                                                      *(_QWORD *)v2482 = v2509;
                                                      *v2484 = v2487;
                                                      *v2486 = &v2493[4 * v2492];
                                                      if (v2488)
                                                        operator delete(v2488);
                                                    }
                                                    else
                                                    {
                                                      *v2483 = 48;
                                                      v2487 = v2483 + 1;
                                                    }
                                                    *v2484 = v2487;
                                                    if (!*v14)
                                                    {
LABEL_3974:
                                                      if ((*((_BYTE *)__p + 6) & 2) == 0)
                                                        goto LABEL_3975;
                                                      v2511 = *v12 + 24 * v13;
                                                      v2513 = (_DWORD **)(v2511 + 8);
                                                      v2512 = *(_DWORD **)(v2511 + 8);
                                                      v2515 = (_QWORD *)(v2511 + 16);
                                                      v2514 = *(_QWORD *)(v2511 + 16);
                                                      if ((unint64_t)v2512 >= v2514)
                                                      {
                                                        v2517 = *(_DWORD **)v2511;
                                                        v2518 = ((uint64_t)v2512 - *(_QWORD *)v2511) >> 2;
                                                        v2519 = v2518 + 1;
                                                        if ((unint64_t)(v2518 + 1) >> 62)
                                                          sub_4074();
                                                        v2520 = v2514 - (_QWORD)v2517;
                                                        if (v2520 >> 1 > v2519)
                                                          v2519 = v2520 >> 1;
                                                        if ((unint64_t)v2520 >= 0x7FFFFFFFFFFFFFFCLL)
                                                          v2521 = 0x3FFFFFFFFFFFFFFFLL;
                                                        else
                                                          v2521 = v2519;
                                                        if (v2521)
                                                        {
                                                          v2522 = (char *)sub_43B2C((uint64_t)v2515, v2521);
                                                          v2512 = *v2513;
                                                          v2517 = *(_DWORD **)v2511;
                                                        }
                                                        else
                                                        {
                                                          v2522 = 0;
                                                        }
                                                        v2537 = &v2522[4 * v2518];
                                                        *(_DWORD *)v2537 = 49;
                                                        v2516 = v2537 + 4;
                                                        while (v2512 != v2517)
                                                        {
                                                          v2538 = *--v2512;
                                                          *((_DWORD *)v2537 - 1) = v2538;
                                                          v2537 -= 4;
                                                        }
                                                        *(_QWORD *)v2511 = v2537;
                                                        *v2513 = v2516;
                                                        *v2515 = &v2522[4 * v2521];
                                                        if (v2517)
                                                          operator delete(v2517);
                                                      }
                                                      else
                                                      {
                                                        *v2512 = 49;
                                                        v2516 = v2512 + 1;
                                                      }
                                                      *v2513 = v2516;
                                                      if (!*v14)
                                                      {
LABEL_3975:
                                                        if ((*((_BYTE *)__p + 6) & 4) == 0)
                                                          goto LABEL_3976;
                                                        v2539 = *v12 + 24 * v13;
                                                        v2541 = (_DWORD **)(v2539 + 8);
                                                        v2540 = *(_DWORD **)(v2539 + 8);
                                                        v2543 = (_QWORD *)(v2539 + 16);
                                                        v2542 = *(_QWORD *)(v2539 + 16);
                                                        if ((unint64_t)v2540 >= v2542)
                                                        {
                                                          v2545 = *(_DWORD **)v2539;
                                                          v2546 = ((uint64_t)v2540 - *(_QWORD *)v2539) >> 2;
                                                          v2547 = v2546 + 1;
                                                          if ((unint64_t)(v2546 + 1) >> 62)
                                                            sub_4074();
                                                          v2548 = v2542 - (_QWORD)v2545;
                                                          if (v2548 >> 1 > v2547)
                                                            v2547 = v2548 >> 1;
                                                          if ((unint64_t)v2548 >= 0x7FFFFFFFFFFFFFFCLL)
                                                            v2549 = 0x3FFFFFFFFFFFFFFFLL;
                                                          else
                                                            v2549 = v2547;
                                                          if (v2549)
                                                          {
                                                            v2550 = (char *)sub_43B2C((uint64_t)v2543, v2549);
                                                            v2540 = *v2541;
                                                            v2545 = *(_DWORD **)v2539;
                                                          }
                                                          else
                                                          {
                                                            v2550 = 0;
                                                          }
                                                          v2565 = &v2550[4 * v2546];
                                                          *(_DWORD *)v2565 = 50;
                                                          v2544 = v2565 + 4;
                                                          while (v2540 != v2545)
                                                          {
                                                            v2566 = *--v2540;
                                                            *((_DWORD *)v2565 - 1) = v2566;
                                                            v2565 -= 4;
                                                          }
                                                          *(_QWORD *)v2539 = v2565;
                                                          *v2541 = v2544;
                                                          *v2543 = &v2550[4 * v2549];
                                                          if (v2545)
                                                            operator delete(v2545);
                                                        }
                                                        else
                                                        {
                                                          *v2540 = 50;
                                                          v2544 = v2540 + 1;
                                                        }
                                                        *v2541 = v2544;
                                                        if (!*v14)
                                                        {
LABEL_3976:
                                                          if ((*((_BYTE *)__p + 6) & 8) == 0)
                                                            goto LABEL_3977;
                                                          v2567 = *v12 + 24 * v13;
                                                          v2569 = (_DWORD **)(v2567 + 8);
                                                          v2568 = *(_DWORD **)(v2567 + 8);
                                                          v2571 = (_QWORD *)(v2567 + 16);
                                                          v2570 = *(_QWORD *)(v2567 + 16);
                                                          if ((unint64_t)v2568 >= v2570)
                                                          {
                                                            v2573 = *(_DWORD **)v2567;
                                                            v2574 = ((uint64_t)v2568 - *(_QWORD *)v2567) >> 2;
                                                            v2575 = v2574 + 1;
                                                            if ((unint64_t)(v2574 + 1) >> 62)
                                                              sub_4074();
                                                            v2576 = v2570 - (_QWORD)v2573;
                                                            if (v2576 >> 1 > v2575)
                                                              v2575 = v2576 >> 1;
                                                            if ((unint64_t)v2576 >= 0x7FFFFFFFFFFFFFFCLL)
                                                              v2577 = 0x3FFFFFFFFFFFFFFFLL;
                                                            else
                                                              v2577 = v2575;
                                                            if (v2577)
                                                            {
                                                              v2578 = (char *)sub_43B2C((uint64_t)v2571, v2577);
                                                              v2568 = *v2569;
                                                              v2573 = *(_DWORD **)v2567;
                                                            }
                                                            else
                                                            {
                                                              v2578 = 0;
                                                            }
                                                            v2593 = &v2578[4 * v2574];
                                                            *(_DWORD *)v2593 = 51;
                                                            v2572 = v2593 + 4;
                                                            while (v2568 != v2573)
                                                            {
                                                              v2594 = *--v2568;
                                                              *((_DWORD *)v2593 - 1) = v2594;
                                                              v2593 -= 4;
                                                            }
                                                            *(_QWORD *)v2567 = v2593;
                                                            *v2569 = v2572;
                                                            *v2571 = &v2578[4 * v2577];
                                                            if (v2573)
                                                              operator delete(v2573);
                                                          }
                                                          else
                                                          {
                                                            *v2568 = 51;
                                                            v2572 = v2568 + 1;
                                                          }
                                                          *v2569 = v2572;
                                                          if (!*v14)
                                                          {
LABEL_3977:
                                                            if ((*((_BYTE *)__p + 6) & 0x10) == 0)
                                                              goto LABEL_3978;
                                                            v2595 = *v12 + 24 * v13;
                                                            v2597 = (_DWORD **)(v2595 + 8);
                                                            v2596 = *(_DWORD **)(v2595 + 8);
                                                            v2599 = (_QWORD *)(v2595 + 16);
                                                            v2598 = *(_QWORD *)(v2595 + 16);
                                                            if ((unint64_t)v2596 >= v2598)
                                                            {
                                                              v2601 = *(_DWORD **)v2595;
                                                              v2602 = ((uint64_t)v2596 - *(_QWORD *)v2595) >> 2;
                                                              v2603 = v2602 + 1;
                                                              if ((unint64_t)(v2602 + 1) >> 62)
                                                                sub_4074();
                                                              v2604 = v2598 - (_QWORD)v2601;
                                                              if (v2604 >> 1 > v2603)
                                                                v2603 = v2604 >> 1;
                                                              if ((unint64_t)v2604 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                v2605 = 0x3FFFFFFFFFFFFFFFLL;
                                                              else
                                                                v2605 = v2603;
                                                              if (v2605)
                                                              {
                                                                v2606 = (char *)sub_43B2C((uint64_t)v2599, v2605);
                                                                v2596 = *v2597;
                                                                v2601 = *(_DWORD **)v2595;
                                                              }
                                                              else
                                                              {
                                                                v2606 = 0;
                                                              }
                                                              v2621 = &v2606[4 * v2602];
                                                              *(_DWORD *)v2621 = 52;
                                                              v2600 = v2621 + 4;
                                                              while (v2596 != v2601)
                                                              {
                                                                v2622 = *--v2596;
                                                                *((_DWORD *)v2621 - 1) = v2622;
                                                                v2621 -= 4;
                                                              }
                                                              *(_QWORD *)v2595 = v2621;
                                                              *v2597 = v2600;
                                                              *v2599 = &v2606[4 * v2605];
                                                              if (v2601)
                                                                operator delete(v2601);
                                                            }
                                                            else
                                                            {
                                                              *v2596 = 52;
                                                              v2600 = v2596 + 1;
                                                            }
                                                            *v2597 = v2600;
                                                            if (!*v14)
                                                            {
LABEL_3978:
                                                              if ((*((_BYTE *)__p + 6) & 0x20) == 0)
                                                                goto LABEL_3979;
                                                              v2623 = *v12 + 24 * v13;
                                                              v2625 = (_DWORD **)(v2623 + 8);
                                                              v2624 = *(_DWORD **)(v2623 + 8);
                                                              v2627 = (_QWORD *)(v2623 + 16);
                                                              v2626 = *(_QWORD *)(v2623 + 16);
                                                              if ((unint64_t)v2624 >= v2626)
                                                              {
                                                                v2629 = *(_DWORD **)v2623;
                                                                v2630 = ((uint64_t)v2624 - *(_QWORD *)v2623) >> 2;
                                                                v2631 = v2630 + 1;
                                                                if ((unint64_t)(v2630 + 1) >> 62)
                                                                  sub_4074();
                                                                v2632 = v2626 - (_QWORD)v2629;
                                                                if (v2632 >> 1 > v2631)
                                                                  v2631 = v2632 >> 1;
                                                                if ((unint64_t)v2632 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                  v2633 = 0x3FFFFFFFFFFFFFFFLL;
                                                                else
                                                                  v2633 = v2631;
                                                                if (v2633)
                                                                {
                                                                  v2634 = (char *)sub_43B2C((uint64_t)v2627, v2633);
                                                                  v2624 = *v2625;
                                                                  v2629 = *(_DWORD **)v2623;
                                                                }
                                                                else
                                                                {
                                                                  v2634 = 0;
                                                                }
                                                                v2649 = &v2634[4 * v2630];
                                                                *(_DWORD *)v2649 = 53;
                                                                v2628 = v2649 + 4;
                                                                while (v2624 != v2629)
                                                                {
                                                                  v2650 = *--v2624;
                                                                  *((_DWORD *)v2649 - 1) = v2650;
                                                                  v2649 -= 4;
                                                                }
                                                                *(_QWORD *)v2623 = v2649;
                                                                *v2625 = v2628;
                                                                *v2627 = &v2634[4 * v2633];
                                                                if (v2629)
                                                                  operator delete(v2629);
                                                              }
                                                              else
                                                              {
                                                                *v2624 = 53;
                                                                v2628 = v2624 + 1;
                                                              }
                                                              *v2625 = v2628;
                                                              if (!*v14)
                                                              {
LABEL_3979:
                                                                if ((*((_BYTE *)__p + 6) & 0x40) == 0)
                                                                  goto LABEL_3980;
                                                                v2651 = *v12 + 24 * v13;
                                                                v2653 = (_DWORD **)(v2651 + 8);
                                                                v2652 = *(_DWORD **)(v2651 + 8);
                                                                v2655 = (_QWORD *)(v2651 + 16);
                                                                v2654 = *(_QWORD *)(v2651 + 16);
                                                                if ((unint64_t)v2652 >= v2654)
                                                                {
                                                                  v2657 = *(_DWORD **)v2651;
                                                                  v2658 = ((uint64_t)v2652 - *(_QWORD *)v2651) >> 2;
                                                                  v2659 = v2658 + 1;
                                                                  if ((unint64_t)(v2658 + 1) >> 62)
                                                                    sub_4074();
                                                                  v2660 = v2654 - (_QWORD)v2657;
                                                                  if (v2660 >> 1 > v2659)
                                                                    v2659 = v2660 >> 1;
                                                                  if ((unint64_t)v2660 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                    v2661 = 0x3FFFFFFFFFFFFFFFLL;
                                                                  else
                                                                    v2661 = v2659;
                                                                  if (v2661)
                                                                  {
                                                                    v2662 = (char *)sub_43B2C((uint64_t)v2655, v2661);
                                                                    v2652 = *v2653;
                                                                    v2657 = *(_DWORD **)v2651;
                                                                  }
                                                                  else
                                                                  {
                                                                    v2662 = 0;
                                                                  }
                                                                  v2677 = &v2662[4 * v2658];
                                                                  *(_DWORD *)v2677 = 54;
                                                                  v2656 = v2677 + 4;
                                                                  while (v2652 != v2657)
                                                                  {
                                                                    v2678 = *--v2652;
                                                                    *((_DWORD *)v2677 - 1) = v2678;
                                                                    v2677 -= 4;
                                                                  }
                                                                  *(_QWORD *)v2651 = v2677;
                                                                  *v2653 = v2656;
                                                                  *v2655 = &v2662[4 * v2661];
                                                                  if (v2657)
                                                                    operator delete(v2657);
                                                                }
                                                                else
                                                                {
                                                                  *v2652 = 54;
                                                                  v2656 = v2652 + 1;
                                                                }
                                                                *v2653 = v2656;
                                                                if (!*v14)
                                                                {
LABEL_3980:
                                                                  if ((*((_BYTE *)__p + 6) & 0x80) == 0)
                                                                    goto LABEL_3981;
                                                                  v2679 = *v12 + 24 * v13;
                                                                  v2681 = (_DWORD **)(v2679 + 8);
                                                                  v2680 = *(_DWORD **)(v2679 + 8);
                                                                  v2683 = (_QWORD *)(v2679 + 16);
                                                                  v2682 = *(_QWORD *)(v2679 + 16);
                                                                  if ((unint64_t)v2680 >= v2682)
                                                                  {
                                                                    v2685 = *(_DWORD **)v2679;
                                                                    v2686 = ((uint64_t)v2680 - *(_QWORD *)v2679) >> 2;
                                                                    v2687 = v2686 + 1;
                                                                    if ((unint64_t)(v2686 + 1) >> 62)
                                                                      sub_4074();
                                                                    v2688 = v2682 - (_QWORD)v2685;
                                                                    if (v2688 >> 1 > v2687)
                                                                      v2687 = v2688 >> 1;
                                                                    if ((unint64_t)v2688 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                      v2689 = 0x3FFFFFFFFFFFFFFFLL;
                                                                    else
                                                                      v2689 = v2687;
                                                                    if (v2689)
                                                                    {
                                                                      v2690 = (char *)sub_43B2C((uint64_t)v2683, v2689);
                                                                      v2680 = *v2681;
                                                                      v2685 = *(_DWORD **)v2679;
                                                                    }
                                                                    else
                                                                    {
                                                                      v2690 = 0;
                                                                    }
                                                                    v2705 = &v2690[4 * v2686];
                                                                    *(_DWORD *)v2705 = 55;
                                                                    v2684 = v2705 + 4;
                                                                    while (v2680 != v2685)
                                                                    {
                                                                      v2706 = *--v2680;
                                                                      *((_DWORD *)v2705 - 1) = v2706;
                                                                      v2705 -= 4;
                                                                    }
                                                                    *(_QWORD *)v2679 = v2705;
                                                                    *v2681 = v2684;
                                                                    *v2683 = &v2690[4 * v2689];
                                                                    if (v2685)
                                                                      operator delete(v2685);
                                                                  }
                                                                  else
                                                                  {
                                                                    *v2680 = 55;
                                                                    v2684 = v2680 + 1;
                                                                  }
                                                                  *v2681 = v2684;
                                                                  if (!*v14)
                                                                  {
LABEL_3981:
                                                                    if ((*((_BYTE *)__p + 7) & 1) == 0)
                                                                      goto LABEL_3982;
                                                                    v2707 = *v12 + 24 * v13;
                                                                    v2709 = (_DWORD **)(v2707 + 8);
                                                                    v2708 = *(_DWORD **)(v2707 + 8);
                                                                    v2711 = (_QWORD *)(v2707 + 16);
                                                                    v2710 = *(_QWORD *)(v2707 + 16);
                                                                    if ((unint64_t)v2708 >= v2710)
                                                                    {
                                                                      v2713 = *(_DWORD **)v2707;
                                                                      v2714 = ((uint64_t)v2708 - *(_QWORD *)v2707) >> 2;
                                                                      v2715 = v2714 + 1;
                                                                      if ((unint64_t)(v2714 + 1) >> 62)
                                                                        sub_4074();
                                                                      v2716 = v2710 - (_QWORD)v2713;
                                                                      if (v2716 >> 1 > v2715)
                                                                        v2715 = v2716 >> 1;
                                                                      if ((unint64_t)v2716 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                        v2717 = 0x3FFFFFFFFFFFFFFFLL;
                                                                      else
                                                                        v2717 = v2715;
                                                                      if (v2717)
                                                                      {
                                                                        v2718 = (char *)sub_43B2C((uint64_t)v2711, v2717);
                                                                        v2708 = *v2709;
                                                                        v2713 = *(_DWORD **)v2707;
                                                                      }
                                                                      else
                                                                      {
                                                                        v2718 = 0;
                                                                      }
                                                                      v2733 = &v2718[4 * v2714];
                                                                      *(_DWORD *)v2733 = 56;
                                                                      v2712 = v2733 + 4;
                                                                      while (v2708 != v2713)
                                                                      {
                                                                        v2734 = *--v2708;
                                                                        *((_DWORD *)v2733 - 1) = v2734;
                                                                        v2733 -= 4;
                                                                      }
                                                                      *(_QWORD *)v2707 = v2733;
                                                                      *v2709 = v2712;
                                                                      *v2711 = &v2718[4 * v2717];
                                                                      if (v2713)
                                                                        operator delete(v2713);
                                                                    }
                                                                    else
                                                                    {
                                                                      *v2708 = 56;
                                                                      v2712 = v2708 + 1;
                                                                    }
                                                                    *v2709 = v2712;
                                                                    if (!*v14)
                                                                    {
LABEL_3982:
                                                                      if ((*((_BYTE *)__p + 7) & 2) == 0)
                                                                        goto LABEL_3983;
                                                                      v2735 = *v12 + 24 * v13;
                                                                      v2737 = (_DWORD **)(v2735 + 8);
                                                                      v2736 = *(_DWORD **)(v2735 + 8);
                                                                      v2739 = (_QWORD *)(v2735 + 16);
                                                                      v2738 = *(_QWORD *)(v2735 + 16);
                                                                      if ((unint64_t)v2736 >= v2738)
                                                                      {
                                                                        v2741 = *(_DWORD **)v2735;
                                                                        v2742 = ((uint64_t)v2736 - *(_QWORD *)v2735) >> 2;
                                                                        v2743 = v2742 + 1;
                                                                        if ((unint64_t)(v2742 + 1) >> 62)
                                                                          sub_4074();
                                                                        v2744 = v2738 - (_QWORD)v2741;
                                                                        if (v2744 >> 1 > v2743)
                                                                          v2743 = v2744 >> 1;
                                                                        if ((unint64_t)v2744 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                          v2745 = 0x3FFFFFFFFFFFFFFFLL;
                                                                        else
                                                                          v2745 = v2743;
                                                                        if (v2745)
                                                                        {
                                                                          v2746 = (char *)sub_43B2C((uint64_t)v2739, v2745);
                                                                          v2736 = *v2737;
                                                                          v2741 = *(_DWORD **)v2735;
                                                                        }
                                                                        else
                                                                        {
                                                                          v2746 = 0;
                                                                        }
                                                                        v2761 = &v2746[4 * v2742];
                                                                        *(_DWORD *)v2761 = 57;
                                                                        v2740 = v2761 + 4;
                                                                        while (v2736 != v2741)
                                                                        {
                                                                          v2762 = *--v2736;
                                                                          *((_DWORD *)v2761 - 1) = v2762;
                                                                          v2761 -= 4;
                                                                        }
                                                                        *(_QWORD *)v2735 = v2761;
                                                                        *v2737 = v2740;
                                                                        *v2739 = &v2746[4 * v2745];
                                                                        if (v2741)
                                                                          operator delete(v2741);
                                                                      }
                                                                      else
                                                                      {
                                                                        *v2736 = 57;
                                                                        v2740 = v2736 + 1;
                                                                      }
                                                                      *v2737 = v2740;
                                                                      if (!*v14)
                                                                      {
LABEL_3983:
                                                                        if ((*((_BYTE *)__p + 7) & 4) == 0)
                                                                          goto LABEL_3984;
                                                                        v2763 = *v12 + 24 * v13;
                                                                        v2765 = (_DWORD **)(v2763 + 8);
                                                                        v2764 = *(_DWORD **)(v2763 + 8);
                                                                        v2767 = (_QWORD *)(v2763 + 16);
                                                                        v2766 = *(_QWORD *)(v2763 + 16);
                                                                        if ((unint64_t)v2764 >= v2766)
                                                                        {
                                                                          v2769 = *(_DWORD **)v2763;
                                                                          v2770 = ((uint64_t)v2764 - *(_QWORD *)v2763) >> 2;
                                                                          v2771 = v2770 + 1;
                                                                          if ((unint64_t)(v2770 + 1) >> 62)
                                                                            sub_4074();
                                                                          v2772 = v2766 - (_QWORD)v2769;
                                                                          if (v2772 >> 1 > v2771)
                                                                            v2771 = v2772 >> 1;
                                                                          if ((unint64_t)v2772 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                            v2773 = 0x3FFFFFFFFFFFFFFFLL;
                                                                          else
                                                                            v2773 = v2771;
                                                                          if (v2773)
                                                                          {
                                                                            v2774 = (char *)sub_43B2C((uint64_t)v2767, v2773);
                                                                            v2764 = *v2765;
                                                                            v2769 = *(_DWORD **)v2763;
                                                                          }
                                                                          else
                                                                          {
                                                                            v2774 = 0;
                                                                          }
                                                                          v2781 = &v2774[4 * v2770];
                                                                          *(_DWORD *)v2781 = 58;
                                                                          v2768 = v2781 + 4;
                                                                          while (v2764 != v2769)
                                                                          {
                                                                            v2782 = *--v2764;
                                                                            *((_DWORD *)v2781 - 1) = v2782;
                                                                            v2781 -= 4;
                                                                          }
                                                                          *(_QWORD *)v2763 = v2781;
                                                                          *v2765 = v2768;
                                                                          *v2767 = &v2774[4 * v2773];
                                                                          if (v2769)
                                                                            operator delete(v2769);
                                                                        }
                                                                        else
                                                                        {
                                                                          *v2764 = 58;
                                                                          v2768 = v2764 + 1;
                                                                        }
                                                                        *v2765 = v2768;
                                                                        if (!*v14)
                                                                        {
LABEL_3984:
                                                                          if ((*((_BYTE *)__p + 7) & 8) != 0)
                                                                          {
                                                                            v1723 = *v12 + 24 * v13;
                                                                            v1725 = (int **)(v1723 + 8);
                                                                            v1724 = *(int **)(v1723 + 8);
                                                                            v1727 = (_QWORD *)(v1723 + 16);
                                                                            v2783 = *(_QWORD *)(v1723 + 16);
                                                                            if ((unint64_t)v1724 < v2783)
                                                                            {
                                                                              v1728 = 59;
                                                                              goto LABEL_2504;
                                                                            }
                                                                            v1729 = *(int **)v1723;
                                                                            v2784 = ((uint64_t)v1724 - *(_QWORD *)v1723) >> 2;
                                                                            v2785 = v2784 + 1;
                                                                            if ((unint64_t)(v2784 + 1) >> 62)
                                                                              sub_4074();
                                                                            v2786 = v2783 - (_QWORD)v1729;
                                                                            if (v2786 >> 1 > v2785)
                                                                              v2785 = v2786 >> 1;
                                                                            if ((unint64_t)v2786 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                              v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                                                            else
                                                                              v1733 = v2785;
                                                                            if (v1733)
                                                                            {
                                                                              v1734 = (char *)sub_43B2C((uint64_t)v1727, v1733);
                                                                              v1724 = *v1725;
                                                                              v1729 = *(int **)v1723;
                                                                            }
                                                                            else
                                                                            {
                                                                              v1734 = 0;
                                                                            }
                                                                            v1840 = &v1734[4 * v2784];
                                                                            *(_DWORD *)v1840 = 59;
                                                                            v1841 = (int *)(v1840 + 4);
                                                                            while (v1724 != v1729)
                                                                            {
                                                                              v2788 = *--v1724;
                                                                              *((_DWORD *)v1840 - 1) = v2788;
                                                                              v1840 -= 4;
                                                                            }
                                                                            goto LABEL_3716;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 3:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 1) & 8) == 0)
              goto LABEL_338;
            v63 = *v12 + 24 * v13;
            v65 = (_DWORD **)(v63 + 8);
            v64 = *(_DWORD **)(v63 + 8);
            v67 = (_QWORD *)(v63 + 16);
            v66 = *(_QWORD *)(v63 + 16);
            if ((unint64_t)v64 >= v66)
            {
              v153 = *(_DWORD **)v63;
              v154 = ((uint64_t)v64 - *(_QWORD *)v63) >> 2;
              v155 = v154 + 1;
              if ((unint64_t)(v154 + 1) >> 62)
                sub_4074();
              v156 = v66 - (_QWORD)v153;
              if (v156 >> 1 > v155)
                v155 = v156 >> 1;
              if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
                v157 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v157 = v155;
              if (v157)
              {
                v158 = (char *)sub_43B2C((uint64_t)v67, v157);
                v64 = *v65;
                v153 = *(_DWORD **)v63;
              }
              else
              {
                v158 = 0;
              }
              v305 = &v158[4 * v154];
              *(_DWORD *)v305 = 11;
              v68 = v305 + 4;
              while (v64 != v153)
              {
                v306 = *--v64;
                *((_DWORD *)v305 - 1) = v306;
                v305 -= 4;
              }
              *(_QWORD *)v63 = v305;
              *v65 = v68;
              *v67 = &v158[4 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *v64 = 11;
              v68 = v64 + 1;
            }
            *v65 = v68;
            if (!*v14)
            {
LABEL_338:
              if ((*((_BYTE *)__p + 1) & 0x10) == 0)
                goto LABEL_2501;
              v307 = *v12 + 24 * v13;
              v309 = (_DWORD **)(v307 + 8);
              v308 = *(_DWORD **)(v307 + 8);
              v311 = (_QWORD *)(v307 + 16);
              v310 = *(_QWORD *)(v307 + 16);
              if ((unint64_t)v308 >= v310)
              {
                v313 = *(_DWORD **)v307;
                v314 = ((uint64_t)v308 - *(_QWORD *)v307) >> 2;
                v315 = v314 + 1;
                if ((unint64_t)(v314 + 1) >> 62)
                  sub_4074();
                v316 = v310 - (_QWORD)v313;
                if (v316 >> 1 > v315)
                  v315 = v316 >> 1;
                if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFFCLL)
                  v317 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v317 = v315;
                if (v317)
                {
                  v318 = (char *)sub_43B2C((uint64_t)v311, v317);
                  v308 = *v309;
                  v313 = *(_DWORD **)v307;
                }
                else
                {
                  v318 = 0;
                }
                v530 = &v318[4 * v314];
                *(_DWORD *)v530 = 12;
                v312 = v530 + 4;
                while (v308 != v313)
                {
                  v531 = *--v308;
                  *((_DWORD *)v530 - 1) = v531;
                  v530 -= 4;
                }
                *(_QWORD *)v307 = v530;
                *v309 = v312;
                *v311 = &v318[4 * v317];
                if (v313)
                  operator delete(v313);
              }
              else
              {
                *v308 = 12;
                v312 = v308 + 1;
              }
              *v309 = v312;
              if (!*v14)
              {
LABEL_2501:
                if ((*((_BYTE *)__p + 1) & 0x20) == 0)
                  goto LABEL_3985;
                v532 = *v12 + 24 * v13;
                v534 = (_DWORD **)(v532 + 8);
                v533 = *(_DWORD **)(v532 + 8);
                v536 = (_QWORD *)(v532 + 16);
                v535 = *(_QWORD *)(v532 + 16);
                if ((unint64_t)v533 >= v535)
                {
                  v538 = *(_DWORD **)v532;
                  v539 = ((uint64_t)v533 - *(_QWORD *)v532) >> 2;
                  v540 = v539 + 1;
                  if ((unint64_t)(v539 + 1) >> 62)
                    sub_4074();
                  v541 = v535 - (_QWORD)v538;
                  if (v541 >> 1 > v540)
                    v540 = v541 >> 1;
                  if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFFCLL)
                    v542 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v542 = v540;
                  if (v542)
                  {
                    v543 = (char *)sub_43B2C((uint64_t)v536, v542);
                    v533 = *v534;
                    v538 = *(_DWORD **)v532;
                  }
                  else
                  {
                    v543 = 0;
                  }
                  v734 = &v543[4 * v539];
                  *(_DWORD *)v734 = 13;
                  v537 = v734 + 4;
                  while (v533 != v538)
                  {
                    v735 = *--v533;
                    *((_DWORD *)v734 - 1) = v735;
                    v734 -= 4;
                  }
                  *(_QWORD *)v532 = v734;
                  *v534 = v537;
                  *v536 = &v543[4 * v542];
                  if (v538)
                    operator delete(v538);
                }
                else
                {
                  *v533 = 13;
                  v537 = v533 + 1;
                }
                *v534 = v537;
                if (!*v14)
                {
LABEL_3985:
                  if ((*((_BYTE *)__p + 1) & 0x40) == 0)
                    goto LABEL_3986;
                  v736 = *v12 + 24 * v13;
                  v738 = (_DWORD **)(v736 + 8);
                  v737 = *(_DWORD **)(v736 + 8);
                  v740 = (_QWORD *)(v736 + 16);
                  v739 = *(_QWORD *)(v736 + 16);
                  if ((unint64_t)v737 >= v739)
                  {
                    v742 = *(_DWORD **)v736;
                    v743 = ((uint64_t)v737 - *(_QWORD *)v736) >> 2;
                    v744 = v743 + 1;
                    if ((unint64_t)(v743 + 1) >> 62)
                      sub_4074();
                    v745 = v739 - (_QWORD)v742;
                    if (v745 >> 1 > v744)
                      v744 = v745 >> 1;
                    if ((unint64_t)v745 >= 0x7FFFFFFFFFFFFFFCLL)
                      v746 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v746 = v744;
                    if (v746)
                    {
                      v747 = (char *)sub_43B2C((uint64_t)v740, v746);
                      v737 = *v738;
                      v742 = *(_DWORD **)v736;
                    }
                    else
                    {
                      v747 = 0;
                    }
                    v923 = &v747[4 * v743];
                    *(_DWORD *)v923 = 14;
                    v741 = v923 + 4;
                    while (v737 != v742)
                    {
                      v924 = *--v737;
                      *((_DWORD *)v923 - 1) = v924;
                      v923 -= 4;
                    }
                    *(_QWORD *)v736 = v923;
                    *v738 = v741;
                    *v740 = &v747[4 * v746];
                    if (v742)
                      operator delete(v742);
                  }
                  else
                  {
                    *v737 = 14;
                    v741 = v737 + 1;
                  }
                  *v738 = v741;
                  if (!*v14)
                  {
LABEL_3986:
                    if ((*((_BYTE *)__p + 1) & 0x80) == 0)
                      goto LABEL_3987;
                    v925 = *v12 + 24 * v13;
                    v927 = (_DWORD **)(v925 + 8);
                    v926 = *(_DWORD **)(v925 + 8);
                    v929 = (_QWORD *)(v925 + 16);
                    v928 = *(_QWORD *)(v925 + 16);
                    if ((unint64_t)v926 >= v928)
                    {
                      v931 = *(_DWORD **)v925;
                      v932 = ((uint64_t)v926 - *(_QWORD *)v925) >> 2;
                      v933 = v932 + 1;
                      if ((unint64_t)(v932 + 1) >> 62)
                        sub_4074();
                      v934 = v928 - (_QWORD)v931;
                      if (v934 >> 1 > v933)
                        v933 = v934 >> 1;
                      if ((unint64_t)v934 >= 0x7FFFFFFFFFFFFFFCLL)
                        v935 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v935 = v933;
                      if (v935)
                      {
                        v936 = (char *)sub_43B2C((uint64_t)v929, v935);
                        v926 = *v927;
                        v931 = *(_DWORD **)v925;
                      }
                      else
                      {
                        v936 = 0;
                      }
                      v1098 = &v936[4 * v932];
                      *(_DWORD *)v1098 = 15;
                      v930 = v1098 + 4;
                      while (v926 != v931)
                      {
                        v1099 = *--v926;
                        *((_DWORD *)v1098 - 1) = v1099;
                        v1098 -= 4;
                      }
                      *(_QWORD *)v925 = v1098;
                      *v927 = v930;
                      *v929 = &v936[4 * v935];
                      if (v931)
                        operator delete(v931);
                    }
                    else
                    {
                      *v926 = 15;
                      v930 = v926 + 1;
                    }
                    *v927 = v930;
                    if (!*v14)
                    {
LABEL_3987:
                      if ((*((_BYTE *)__p + 2) & 1) == 0)
                        goto LABEL_3988;
                      v1100 = *v12 + 24 * v13;
                      v1102 = (_DWORD **)(v1100 + 8);
                      v1101 = *(_DWORD **)(v1100 + 8);
                      v1104 = (_QWORD *)(v1100 + 16);
                      v1103 = *(_QWORD *)(v1100 + 16);
                      if ((unint64_t)v1101 >= v1103)
                      {
                        v1106 = *(_DWORD **)v1100;
                        v1107 = ((uint64_t)v1101 - *(_QWORD *)v1100) >> 2;
                        v1108 = v1107 + 1;
                        if ((unint64_t)(v1107 + 1) >> 62)
                          sub_4074();
                        v1109 = v1103 - (_QWORD)v1106;
                        if (v1109 >> 1 > v1108)
                          v1108 = v1109 >> 1;
                        if ((unint64_t)v1109 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1110 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1110 = v1108;
                        if (v1110)
                        {
                          v1111 = (char *)sub_43B2C((uint64_t)v1104, v1110);
                          v1101 = *v1102;
                          v1106 = *(_DWORD **)v1100;
                        }
                        else
                        {
                          v1111 = 0;
                        }
                        v1271 = &v1111[4 * v1107];
                        *(_DWORD *)v1271 = 16;
                        v1105 = v1271 + 4;
                        while (v1101 != v1106)
                        {
                          v1272 = *--v1101;
                          *((_DWORD *)v1271 - 1) = v1272;
                          v1271 -= 4;
                        }
                        *(_QWORD *)v1100 = v1271;
                        *v1102 = v1105;
                        *v1104 = &v1111[4 * v1110];
                        if (v1106)
                          operator delete(v1106);
                      }
                      else
                      {
                        *v1101 = 16;
                        v1105 = v1101 + 1;
                      }
                      *v1102 = v1105;
                      if (!*v14)
                      {
LABEL_3988:
                        if ((*((_BYTE *)__p + 2) & 2) == 0)
                          goto LABEL_3989;
                        v1273 = *v12 + 24 * v13;
                        v1275 = (_DWORD **)(v1273 + 8);
                        v1274 = *(_DWORD **)(v1273 + 8);
                        v1277 = (_QWORD *)(v1273 + 16);
                        v1276 = *(_QWORD *)(v1273 + 16);
                        if ((unint64_t)v1274 >= v1276)
                        {
                          v1279 = *(_DWORD **)v1273;
                          v1280 = ((uint64_t)v1274 - *(_QWORD *)v1273) >> 2;
                          v1281 = v1280 + 1;
                          if ((unint64_t)(v1280 + 1) >> 62)
                            sub_4074();
                          v1282 = v1276 - (_QWORD)v1279;
                          if (v1282 >> 1 > v1281)
                            v1281 = v1282 >> 1;
                          if ((unint64_t)v1282 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1283 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1283 = v1281;
                          if (v1283)
                          {
                            v1284 = (char *)sub_43B2C((uint64_t)v1277, v1283);
                            v1274 = *v1275;
                            v1279 = *(_DWORD **)v1273;
                          }
                          else
                          {
                            v1284 = 0;
                          }
                          v1420 = &v1284[4 * v1280];
                          *(_DWORD *)v1420 = 17;
                          v1278 = v1420 + 4;
                          while (v1274 != v1279)
                          {
                            v1421 = *--v1274;
                            *((_DWORD *)v1420 - 1) = v1421;
                            v1420 -= 4;
                          }
                          *(_QWORD *)v1273 = v1420;
                          *v1275 = v1278;
                          *v1277 = &v1284[4 * v1283];
                          if (v1279)
                            operator delete(v1279);
                        }
                        else
                        {
                          *v1274 = 17;
                          v1278 = v1274 + 1;
                        }
                        *v1275 = v1278;
                        if (!*v14)
                        {
LABEL_3989:
                          if ((*((_BYTE *)__p + 2) & 4) == 0)
                            goto LABEL_3990;
                          v1422 = *v12 + 24 * v13;
                          v1424 = (_DWORD **)(v1422 + 8);
                          v1423 = *(_DWORD **)(v1422 + 8);
                          v1426 = (_QWORD *)(v1422 + 16);
                          v1425 = *(_QWORD *)(v1422 + 16);
                          if ((unint64_t)v1423 >= v1425)
                          {
                            v1428 = *(_DWORD **)v1422;
                            v1429 = ((uint64_t)v1423 - *(_QWORD *)v1422) >> 2;
                            v1430 = v1429 + 1;
                            if ((unint64_t)(v1429 + 1) >> 62)
                              sub_4074();
                            v1431 = v1425 - (_QWORD)v1428;
                            if (v1431 >> 1 > v1430)
                              v1430 = v1431 >> 1;
                            if ((unint64_t)v1431 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1432 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1432 = v1430;
                            if (v1432)
                            {
                              v1433 = (char *)sub_43B2C((uint64_t)v1426, v1432);
                              v1423 = *v1424;
                              v1428 = *(_DWORD **)v1422;
                            }
                            else
                            {
                              v1433 = 0;
                            }
                            v1560 = &v1433[4 * v1429];
                            *(_DWORD *)v1560 = 18;
                            v1427 = v1560 + 4;
                            while (v1423 != v1428)
                            {
                              v1561 = *--v1423;
                              *((_DWORD *)v1560 - 1) = v1561;
                              v1560 -= 4;
                            }
                            *(_QWORD *)v1422 = v1560;
                            *v1424 = v1427;
                            *v1426 = &v1433[4 * v1432];
                            if (v1428)
                              operator delete(v1428);
                          }
                          else
                          {
                            *v1423 = 18;
                            v1427 = v1423 + 1;
                          }
                          *v1424 = v1427;
                          if (!*v14)
                          {
LABEL_3990:
                            if ((*((_BYTE *)__p + 2) & 8) == 0)
                              goto LABEL_3991;
                            v1562 = *v12 + 24 * v13;
                            v1564 = (_DWORD **)(v1562 + 8);
                            v1563 = *(_DWORD **)(v1562 + 8);
                            v1566 = (_QWORD *)(v1562 + 16);
                            v1565 = *(_QWORD *)(v1562 + 16);
                            if ((unint64_t)v1563 >= v1565)
                            {
                              v1568 = *(_DWORD **)v1562;
                              v1569 = ((uint64_t)v1563 - *(_QWORD *)v1562) >> 2;
                              v1570 = v1569 + 1;
                              if ((unint64_t)(v1569 + 1) >> 62)
                                sub_4074();
                              v1571 = v1565 - (_QWORD)v1568;
                              if (v1571 >> 1 > v1570)
                                v1570 = v1571 >> 1;
                              if ((unint64_t)v1571 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1572 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1572 = v1570;
                              if (v1572)
                              {
                                v1573 = (char *)sub_43B2C((uint64_t)v1566, v1572);
                                v1563 = *v1564;
                                v1568 = *(_DWORD **)v1562;
                              }
                              else
                              {
                                v1573 = 0;
                              }
                              v1693 = &v1573[4 * v1569];
                              *(_DWORD *)v1693 = 19;
                              v1567 = v1693 + 4;
                              while (v1563 != v1568)
                              {
                                v1694 = *--v1563;
                                *((_DWORD *)v1693 - 1) = v1694;
                                v1693 -= 4;
                              }
                              *(_QWORD *)v1562 = v1693;
                              *v1564 = v1567;
                              *v1566 = &v1573[4 * v1572];
                              if (v1568)
                                operator delete(v1568);
                            }
                            else
                            {
                              *v1563 = 19;
                              v1567 = v1563 + 1;
                            }
                            *v1564 = v1567;
                            if (!*v14)
                            {
LABEL_3991:
                              if ((*((_BYTE *)__p + 2) & 0x10) == 0)
                                goto LABEL_3992;
                              v1695 = *v12 + 24 * v13;
                              v1697 = (_DWORD **)(v1695 + 8);
                              v1696 = *(_DWORD **)(v1695 + 8);
                              v1699 = (_QWORD *)(v1695 + 16);
                              v1698 = *(_QWORD *)(v1695 + 16);
                              if ((unint64_t)v1696 >= v1698)
                              {
                                v1701 = *(_DWORD **)v1695;
                                v1702 = ((uint64_t)v1696 - *(_QWORD *)v1695) >> 2;
                                v1703 = v1702 + 1;
                                if ((unint64_t)(v1702 + 1) >> 62)
                                  sub_4074();
                                v1704 = v1698 - (_QWORD)v1701;
                                if (v1704 >> 1 > v1703)
                                  v1703 = v1704 >> 1;
                                if ((unint64_t)v1704 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1705 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1705 = v1703;
                                if (v1705)
                                {
                                  v1706 = (char *)sub_43B2C((uint64_t)v1699, v1705);
                                  v1696 = *v1697;
                                  v1701 = *(_DWORD **)v1695;
                                }
                                else
                                {
                                  v1706 = 0;
                                }
                                v1812 = &v1706[4 * v1702];
                                *(_DWORD *)v1812 = 20;
                                v1700 = v1812 + 4;
                                while (v1696 != v1701)
                                {
                                  v1813 = *--v1696;
                                  *((_DWORD *)v1812 - 1) = v1813;
                                  v1812 -= 4;
                                }
                                *(_QWORD *)v1695 = v1812;
                                *v1697 = v1700;
                                *v1699 = &v1706[4 * v1705];
                                if (v1701)
                                  operator delete(v1701);
                              }
                              else
                              {
                                *v1696 = 20;
                                v1700 = v1696 + 1;
                              }
                              *v1697 = v1700;
                              if (!*v14)
                              {
LABEL_3992:
                                if ((*((_BYTE *)__p + 2) & 0x20) == 0)
                                  goto LABEL_3993;
                                v1814 = *v12 + 24 * v13;
                                v1816 = (_DWORD **)(v1814 + 8);
                                v1815 = *(_DWORD **)(v1814 + 8);
                                v1818 = (_QWORD *)(v1814 + 16);
                                v1817 = *(_QWORD *)(v1814 + 16);
                                if ((unint64_t)v1815 >= v1817)
                                {
                                  v1820 = *(_DWORD **)v1814;
                                  v1821 = ((uint64_t)v1815 - *(_QWORD *)v1814) >> 2;
                                  v1822 = v1821 + 1;
                                  if ((unint64_t)(v1821 + 1) >> 62)
                                    sub_4074();
                                  v1823 = v1817 - (_QWORD)v1820;
                                  if (v1823 >> 1 > v1822)
                                    v1822 = v1823 >> 1;
                                  if ((unint64_t)v1823 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v1824 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v1824 = v1822;
                                  if (v1824)
                                  {
                                    v1825 = (char *)sub_43B2C((uint64_t)v1818, v1824);
                                    v1815 = *v1816;
                                    v1820 = *(_DWORD **)v1814;
                                  }
                                  else
                                  {
                                    v1825 = 0;
                                  }
                                  v1914 = &v1825[4 * v1821];
                                  *(_DWORD *)v1914 = 21;
                                  v1819 = v1914 + 4;
                                  while (v1815 != v1820)
                                  {
                                    v1915 = *--v1815;
                                    *((_DWORD *)v1914 - 1) = v1915;
                                    v1914 -= 4;
                                  }
                                  *(_QWORD *)v1814 = v1914;
                                  *v1816 = v1819;
                                  *v1818 = &v1825[4 * v1824];
                                  if (v1820)
                                    operator delete(v1820);
                                }
                                else
                                {
                                  *v1815 = 21;
                                  v1819 = v1815 + 1;
                                }
                                *v1816 = v1819;
                                if (!*v14)
                                {
LABEL_3993:
                                  if ((*((_BYTE *)__p + 2) & 0x40) != 0)
                                  {
                                    v1723 = *v12 + 24 * v13;
                                    v1725 = (int **)(v1723 + 8);
                                    v1724 = *(int **)(v1723 + 8);
                                    v1727 = (_QWORD *)(v1723 + 16);
                                    v1916 = *(_QWORD *)(v1723 + 16);
                                    if ((unint64_t)v1724 < v1916)
                                    {
                                      v1728 = 22;
                                      goto LABEL_2504;
                                    }
                                    v1729 = *(int **)v1723;
                                    v1917 = ((uint64_t)v1724 - *(_QWORD *)v1723) >> 2;
                                    v1918 = v1917 + 1;
                                    if ((unint64_t)(v1917 + 1) >> 62)
                                      sub_4074();
                                    v1919 = v1916 - (_QWORD)v1729;
                                    if (v1919 >> 1 > v1918)
                                      v1918 = v1919 >> 1;
                                    if ((unint64_t)v1919 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1733 = v1918;
                                    if (v1733)
                                    {
                                      v1734 = (char *)sub_43B2C((uint64_t)v1727, v1733);
                                      v1724 = *v1725;
                                      v1729 = *(int **)v1723;
                                    }
                                    else
                                    {
                                      v1734 = 0;
                                    }
                                    v1840 = &v1734[4 * v1917];
                                    *(_DWORD *)v1840 = 22;
                                    v1841 = (int *)(v1840 + 4);
                                    while (v1724 != v1729)
                                    {
                                      v2004 = *--v1724;
                                      *((_DWORD *)v1840 - 1) = v2004;
                                      v1840 -= 4;
                                    }
                                    goto LABEL_3716;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 4:
          if (!*v14)
          {
            if ((*(_BYTE *)__p & 1) == 0)
              goto LABEL_248;
            v33 = *v12 + 24 * v13;
            v35 = (_DWORD **)(v33 + 8);
            v34 = *(_DWORD **)(v33 + 8);
            v37 = (_QWORD *)(v33 + 16);
            v36 = *(_QWORD *)(v33 + 16);
            if ((unint64_t)v34 >= v36)
            {
              v123 = *(_DWORD **)v33;
              v124 = ((uint64_t)v34 - *(_QWORD *)v33) >> 2;
              v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 62)
                sub_4074();
              v126 = v36 - (_QWORD)v123;
              if (v126 >> 1 > v125)
                v125 = v126 >> 1;
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
                v127 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v127 = v125;
              if (v127)
              {
                v128 = (char *)sub_43B2C((uint64_t)v37, v127);
                v34 = *v35;
                v123 = *(_DWORD **)v33;
              }
              else
              {
                v128 = 0;
              }
              v235 = &v128[4 * v124];
              *(_DWORD *)v235 = 0;
              v38 = v235 + 4;
              while (v34 != v123)
              {
                v236 = *--v34;
                *((_DWORD *)v235 - 1) = v236;
                v235 -= 4;
              }
              *(_QWORD *)v33 = v235;
              *v35 = v38;
              *v37 = &v128[4 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *v34 = 0;
              v38 = v34 + 1;
            }
            *v35 = v38;
            if (!*v14)
            {
LABEL_248:
              if ((*(_BYTE *)__p & 2) == 0)
                goto LABEL_2309;
              v237 = *v12 + 24 * v13;
              v239 = (_DWORD **)(v237 + 8);
              v238 = *(_DWORD **)(v237 + 8);
              v241 = (_QWORD *)(v237 + 16);
              v240 = *(_QWORD *)(v237 + 16);
              if ((unint64_t)v238 >= v240)
              {
                v243 = *(_DWORD **)v237;
                v244 = ((uint64_t)v238 - *(_QWORD *)v237) >> 2;
                v245 = v244 + 1;
                if ((unint64_t)(v244 + 1) >> 62)
                  sub_4074();
                v246 = v240 - (_QWORD)v243;
                if (v246 >> 1 > v245)
                  v245 = v246 >> 1;
                if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL)
                  v247 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v247 = v245;
                if (v247)
                {
                  v248 = (char *)sub_43B2C((uint64_t)v241, v247);
                  v238 = *v239;
                  v243 = *(_DWORD **)v237;
                }
                else
                {
                  v248 = 0;
                }
                v460 = &v248[4 * v244];
                *(_DWORD *)v460 = 1;
                v242 = v460 + 4;
                while (v238 != v243)
                {
                  v461 = *--v238;
                  *((_DWORD *)v460 - 1) = v461;
                  v460 -= 4;
                }
                *(_QWORD *)v237 = v460;
                *v239 = v242;
                *v241 = &v248[4 * v247];
                if (v243)
                  operator delete(v243);
              }
              else
              {
                *v238 = 1;
                v242 = v238 + 1;
              }
              *v239 = v242;
              if (!*v14)
              {
LABEL_2309:
                if ((*(_BYTE *)__p & 4) == 0)
                  goto LABEL_3994;
                v462 = *v12 + 24 * v13;
                v464 = (_DWORD **)(v462 + 8);
                v463 = *(_DWORD **)(v462 + 8);
                v466 = (_QWORD *)(v462 + 16);
                v465 = *(_QWORD *)(v462 + 16);
                if ((unint64_t)v463 >= v465)
                {
                  v468 = *(_DWORD **)v462;
                  v469 = ((uint64_t)v463 - *(_QWORD *)v462) >> 2;
                  v470 = v469 + 1;
                  if ((unint64_t)(v469 + 1) >> 62)
                    sub_4074();
                  v471 = v465 - (_QWORD)v468;
                  if (v471 >> 1 > v470)
                    v470 = v471 >> 1;
                  if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL)
                    v472 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v472 = v470;
                  if (v472)
                  {
                    v473 = (char *)sub_43B2C((uint64_t)v466, v472);
                    v463 = *v464;
                    v468 = *(_DWORD **)v462;
                  }
                  else
                  {
                    v473 = 0;
                  }
                  v664 = &v473[4 * v469];
                  *(_DWORD *)v664 = 2;
                  v467 = v664 + 4;
                  while (v463 != v468)
                  {
                    v665 = *--v463;
                    *((_DWORD *)v664 - 1) = v665;
                    v664 -= 4;
                  }
                  *(_QWORD *)v462 = v664;
                  *v464 = v467;
                  *v466 = &v473[4 * v472];
                  if (v468)
                    operator delete(v468);
                }
                else
                {
                  *v463 = 2;
                  v467 = v463 + 1;
                }
                *v464 = v467;
                if (!*v14)
                {
LABEL_3994:
                  if ((*(_BYTE *)__p & 8) == 0)
                    goto LABEL_3995;
                  v666 = *v12 + 24 * v13;
                  v668 = (_DWORD **)(v666 + 8);
                  v667 = *(_DWORD **)(v666 + 8);
                  v670 = (_QWORD *)(v666 + 16);
                  v669 = *(_QWORD *)(v666 + 16);
                  if ((unint64_t)v667 >= v669)
                  {
                    v672 = *(_DWORD **)v666;
                    v673 = ((uint64_t)v667 - *(_QWORD *)v666) >> 2;
                    v674 = v673 + 1;
                    if ((unint64_t)(v673 + 1) >> 62)
                      sub_4074();
                    v675 = v669 - (_QWORD)v672;
                    if (v675 >> 1 > v674)
                      v674 = v675 >> 1;
                    if ((unint64_t)v675 >= 0x7FFFFFFFFFFFFFFCLL)
                      v676 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v676 = v674;
                    if (v676)
                    {
                      v677 = (char *)sub_43B2C((uint64_t)v670, v676);
                      v667 = *v668;
                      v672 = *(_DWORD **)v666;
                    }
                    else
                    {
                      v677 = 0;
                    }
                    v853 = &v677[4 * v673];
                    *(_DWORD *)v853 = 3;
                    v671 = v853 + 4;
                    while (v667 != v672)
                    {
                      v854 = *--v667;
                      *((_DWORD *)v853 - 1) = v854;
                      v853 -= 4;
                    }
                    *(_QWORD *)v666 = v853;
                    *v668 = v671;
                    *v670 = &v677[4 * v676];
                    if (v672)
                      operator delete(v672);
                  }
                  else
                  {
                    *v667 = 3;
                    v671 = v667 + 1;
                  }
                  *v668 = v671;
                  if (!*v14)
                  {
LABEL_3995:
                    if ((*(_BYTE *)__p & 0x10) == 0)
                      goto LABEL_3996;
                    v855 = *v12 + 24 * v13;
                    v857 = (_DWORD **)(v855 + 8);
                    v856 = *(_DWORD **)(v855 + 8);
                    v859 = (_QWORD *)(v855 + 16);
                    v858 = *(_QWORD *)(v855 + 16);
                    if ((unint64_t)v856 >= v858)
                    {
                      v861 = *(_DWORD **)v855;
                      v862 = ((uint64_t)v856 - *(_QWORD *)v855) >> 2;
                      v863 = v862 + 1;
                      if ((unint64_t)(v862 + 1) >> 62)
                        sub_4074();
                      v864 = v858 - (_QWORD)v861;
                      if (v864 >> 1 > v863)
                        v863 = v864 >> 1;
                      if ((unint64_t)v864 >= 0x7FFFFFFFFFFFFFFCLL)
                        v865 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v865 = v863;
                      if (v865)
                      {
                        v866 = (char *)sub_43B2C((uint64_t)v859, v865);
                        v856 = *v857;
                        v861 = *(_DWORD **)v855;
                      }
                      else
                      {
                        v866 = 0;
                      }
                      v1028 = &v866[4 * v862];
                      *(_DWORD *)v1028 = 4;
                      v860 = v1028 + 4;
                      while (v856 != v861)
                      {
                        v1029 = *--v856;
                        *((_DWORD *)v1028 - 1) = v1029;
                        v1028 -= 4;
                      }
                      *(_QWORD *)v855 = v1028;
                      *v857 = v860;
                      *v859 = &v866[4 * v865];
                      if (v861)
                        operator delete(v861);
                    }
                    else
                    {
                      *v856 = 4;
                      v860 = v856 + 1;
                    }
                    *v857 = v860;
                    if (!*v14)
                    {
LABEL_3996:
                      if ((*(_BYTE *)__p & 0x20) == 0)
                        goto LABEL_3997;
                      v1030 = *v12 + 24 * v13;
                      v1032 = (_DWORD **)(v1030 + 8);
                      v1031 = *(_DWORD **)(v1030 + 8);
                      v1034 = (_QWORD *)(v1030 + 16);
                      v1033 = *(_QWORD *)(v1030 + 16);
                      if ((unint64_t)v1031 >= v1033)
                      {
                        v1036 = *(_DWORD **)v1030;
                        v1037 = ((uint64_t)v1031 - *(_QWORD *)v1030) >> 2;
                        v1038 = v1037 + 1;
                        if ((unint64_t)(v1037 + 1) >> 62)
                          sub_4074();
                        v1039 = v1033 - (_QWORD)v1036;
                        if (v1039 >> 1 > v1038)
                          v1038 = v1039 >> 1;
                        if ((unint64_t)v1039 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1040 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1040 = v1038;
                        if (v1040)
                        {
                          v1041 = (char *)sub_43B2C((uint64_t)v1034, v1040);
                          v1031 = *v1032;
                          v1036 = *(_DWORD **)v1030;
                        }
                        else
                        {
                          v1041 = 0;
                        }
                        v1201 = &v1041[4 * v1037];
                        *(_DWORD *)v1201 = 5;
                        v1035 = v1201 + 4;
                        while (v1031 != v1036)
                        {
                          v1202 = *--v1031;
                          *((_DWORD *)v1201 - 1) = v1202;
                          v1201 -= 4;
                        }
                        *(_QWORD *)v1030 = v1201;
                        *v1032 = v1035;
                        *v1034 = &v1041[4 * v1040];
                        if (v1036)
                          operator delete(v1036);
                      }
                      else
                      {
                        *v1031 = 5;
                        v1035 = v1031 + 1;
                      }
                      *v1032 = v1035;
                      if (!*v14)
                      {
LABEL_3997:
                        if ((*(_BYTE *)__p & 0x40) == 0)
                          goto LABEL_3998;
                        v1203 = *v12 + 24 * v13;
                        v1205 = (_DWORD **)(v1203 + 8);
                        v1204 = *(_DWORD **)(v1203 + 8);
                        v1207 = (_QWORD *)(v1203 + 16);
                        v1206 = *(_QWORD *)(v1203 + 16);
                        if ((unint64_t)v1204 >= v1206)
                        {
                          v1209 = *(_DWORD **)v1203;
                          v1210 = ((uint64_t)v1204 - *(_QWORD *)v1203) >> 2;
                          v1211 = v1210 + 1;
                          if ((unint64_t)(v1210 + 1) >> 62)
                            sub_4074();
                          v1212 = v1206 - (_QWORD)v1209;
                          if (v1212 >> 1 > v1211)
                            v1211 = v1212 >> 1;
                          if ((unint64_t)v1212 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1213 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1213 = v1211;
                          if (v1213)
                          {
                            v1214 = (char *)sub_43B2C((uint64_t)v1207, v1213);
                            v1204 = *v1205;
                            v1209 = *(_DWORD **)v1203;
                          }
                          else
                          {
                            v1214 = 0;
                          }
                          v1358 = &v1214[4 * v1210];
                          *(_DWORD *)v1358 = 6;
                          v1208 = v1358 + 4;
                          while (v1204 != v1209)
                          {
                            v1359 = *--v1204;
                            *((_DWORD *)v1358 - 1) = v1359;
                            v1358 -= 4;
                          }
                          *(_QWORD *)v1203 = v1358;
                          *v1205 = v1208;
                          *v1207 = &v1214[4 * v1213];
                          if (v1209)
                            operator delete(v1209);
                        }
                        else
                        {
                          *v1204 = 6;
                          v1208 = v1204 + 1;
                        }
                        *v1205 = v1208;
                        if (!*v14)
                        {
LABEL_3998:
                          if ((*(_BYTE *)__p & 0x80) == 0)
                            goto LABEL_3999;
                          v1360 = *v12 + 24 * v13;
                          v1362 = (_DWORD **)(v1360 + 8);
                          v1361 = *(_DWORD **)(v1360 + 8);
                          v1364 = (_QWORD *)(v1360 + 16);
                          v1363 = *(_QWORD *)(v1360 + 16);
                          if ((unint64_t)v1361 >= v1363)
                          {
                            v1366 = *(_DWORD **)v1360;
                            v1367 = ((uint64_t)v1361 - *(_QWORD *)v1360) >> 2;
                            v1368 = v1367 + 1;
                            if ((unint64_t)(v1367 + 1) >> 62)
                              sub_4074();
                            v1369 = v1363 - (_QWORD)v1366;
                            if (v1369 >> 1 > v1368)
                              v1368 = v1369 >> 1;
                            if ((unint64_t)v1369 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1370 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1370 = v1368;
                            if (v1370)
                            {
                              v1371 = (char *)sub_43B2C((uint64_t)v1364, v1370);
                              v1361 = *v1362;
                              v1366 = *(_DWORD **)v1360;
                            }
                            else
                            {
                              v1371 = 0;
                            }
                            v1504 = &v1371[4 * v1367];
                            *(_DWORD *)v1504 = 7;
                            v1365 = v1504 + 4;
                            while (v1361 != v1366)
                            {
                              v1505 = *--v1361;
                              *((_DWORD *)v1504 - 1) = v1505;
                              v1504 -= 4;
                            }
                            *(_QWORD *)v1360 = v1504;
                            *v1362 = v1365;
                            *v1364 = &v1371[4 * v1370];
                            if (v1366)
                              operator delete(v1366);
                          }
                          else
                          {
                            *v1361 = 7;
                            v1365 = v1361 + 1;
                          }
                          *v1362 = v1365;
                          if (!*v14)
                          {
LABEL_3999:
                            if ((*((_BYTE *)__p + 1) & 1) == 0)
                              goto LABEL_4000;
                            v1506 = *v12 + 24 * v13;
                            v1508 = (_DWORD **)(v1506 + 8);
                            v1507 = *(_DWORD **)(v1506 + 8);
                            v1510 = (_QWORD *)(v1506 + 16);
                            v1509 = *(_QWORD *)(v1506 + 16);
                            if ((unint64_t)v1507 >= v1509)
                            {
                              v1512 = *(_DWORD **)v1506;
                              v1513 = ((uint64_t)v1507 - *(_QWORD *)v1506) >> 2;
                              v1514 = v1513 + 1;
                              if ((unint64_t)(v1513 + 1) >> 62)
                                sub_4074();
                              v1515 = v1509 - (_QWORD)v1512;
                              if (v1515 >> 1 > v1514)
                                v1514 = v1515 >> 1;
                              if ((unint64_t)v1515 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1516 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1516 = v1514;
                              if (v1516)
                              {
                                v1517 = (char *)sub_43B2C((uint64_t)v1510, v1516);
                                v1507 = *v1508;
                                v1512 = *(_DWORD **)v1506;
                              }
                              else
                              {
                                v1517 = 0;
                              }
                              v1645 = &v1517[4 * v1513];
                              *(_DWORD *)v1645 = 8;
                              v1511 = v1645 + 4;
                              while (v1507 != v1512)
                              {
                                v1646 = *--v1507;
                                *((_DWORD *)v1645 - 1) = v1646;
                                v1645 -= 4;
                              }
                              *(_QWORD *)v1506 = v1645;
                              *v1508 = v1511;
                              *v1510 = &v1517[4 * v1516];
                              if (v1512)
                                operator delete(v1512);
                            }
                            else
                            {
                              *v1507 = 8;
                              v1511 = v1507 + 1;
                            }
                            *v1508 = v1511;
                            if (!*v14)
                            {
LABEL_4000:
                              if ((*((_BYTE *)__p + 1) & 2) == 0)
                                goto LABEL_4001;
                              v1647 = *v12 + 24 * v13;
                              v1649 = (_DWORD **)(v1647 + 8);
                              v1648 = *(_DWORD **)(v1647 + 8);
                              v1651 = (_QWORD *)(v1647 + 16);
                              v1650 = *(_QWORD *)(v1647 + 16);
                              if ((unint64_t)v1648 >= v1650)
                              {
                                v1653 = *(_DWORD **)v1647;
                                v1654 = ((uint64_t)v1648 - *(_QWORD *)v1647) >> 2;
                                v1655 = v1654 + 1;
                                if ((unint64_t)(v1654 + 1) >> 62)
                                  sub_4074();
                                v1656 = v1650 - (_QWORD)v1653;
                                if (v1656 >> 1 > v1655)
                                  v1655 = v1656 >> 1;
                                if ((unint64_t)v1656 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1657 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1657 = v1655;
                                if (v1657)
                                {
                                  v1658 = (char *)sub_43B2C((uint64_t)v1651, v1657);
                                  v1648 = *v1649;
                                  v1653 = *(_DWORD **)v1647;
                                }
                                else
                                {
                                  v1658 = 0;
                                }
                                v1777 = &v1658[4 * v1654];
                                *(_DWORD *)v1777 = 9;
                                v1652 = v1777 + 4;
                                while (v1648 != v1653)
                                {
                                  v1778 = *--v1648;
                                  *((_DWORD *)v1777 - 1) = v1778;
                                  v1777 -= 4;
                                }
                                *(_QWORD *)v1647 = v1777;
                                *v1649 = v1652;
                                *v1651 = &v1658[4 * v1657];
                                if (v1653)
                                  operator delete(v1653);
                              }
                              else
                              {
                                *v1648 = 9;
                                v1652 = v1648 + 1;
                              }
                              *v1649 = v1652;
                              if (!*v14)
                              {
LABEL_4001:
                                if ((*((_BYTE *)__p + 1) & 4) != 0)
                                {
                                  v1723 = *v12 + 24 * v13;
                                  v1725 = (int **)(v1723 + 8);
                                  v1724 = *(int **)(v1723 + 8);
                                  v1727 = (_QWORD *)(v1723 + 16);
                                  v1779 = *(_QWORD *)(v1723 + 16);
                                  if ((unint64_t)v1724 >= v1779)
                                  {
                                    v1729 = *(int **)v1723;
                                    v1780 = ((uint64_t)v1724 - *(_QWORD *)v1723) >> 2;
                                    v1781 = v1780 + 1;
                                    if ((unint64_t)(v1780 + 1) >> 62)
                                      sub_4074();
                                    v1782 = v1779 - (_QWORD)v1729;
                                    if (v1782 >> 1 > v1781)
                                      v1781 = v1782 >> 1;
                                    if ((unint64_t)v1782 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1733 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1733 = v1781;
                                    if (v1733)
                                    {
                                      v1734 = (char *)sub_43B2C((uint64_t)v1727, v1733);
                                      v1724 = *v1725;
                                      v1729 = *(int **)v1723;
                                    }
                                    else
                                    {
                                      v1734 = 0;
                                    }
                                    v1840 = &v1734[4 * v1780];
                                    *(_DWORD *)v1840 = 10;
                                    v1841 = (int *)(v1840 + 4);
                                    while (v1724 != v1729)
                                    {
                                      v1885 = *--v1724;
                                      *((_DWORD *)v1840 - 1) = v1885;
                                      v1840 -= 4;
                                    }
LABEL_3716:
                                    *(_QWORD *)v1723 = v1840;
                                    *v1725 = v1841;
                                    *v1727 = &v1734[4 * v1733];
                                    if (v1729)
                                      operator delete(v1729);
                                  }
                                  else
                                  {
                                    v1728 = 10;
LABEL_2504:
                                    *v1724 = v1728;
                                    v1841 = v1724 + 1;
                                  }
                                  *v1725 = v1841;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 5:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 25) & 8) == 0)
              goto LABEL_410;
            v81 = *v12 + 24 * v13;
            v83 = (_DWORD **)(v81 + 8);
            v82 = *(_DWORD **)(v81 + 8);
            v85 = (_QWORD *)(v81 + 16);
            v84 = *(_QWORD *)(v81 + 16);
            if ((unint64_t)v82 >= v84)
            {
              v177 = *(_DWORD **)v81;
              v178 = ((uint64_t)v82 - *(_QWORD *)v81) >> 2;
              v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62)
                sub_4074();
              v180 = v84 - (_QWORD)v177;
              if (v180 >> 1 > v179)
                v179 = v180 >> 1;
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
                v181 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v181 = v179;
              if (v181)
              {
                v182 = (char *)sub_43B2C((uint64_t)v85, v181);
                v82 = *v83;
                v177 = *(_DWORD **)v81;
              }
              else
              {
                v182 = 0;
              }
              v361 = &v182[4 * v178];
              *(_DWORD *)v361 = 203;
              v86 = v361 + 4;
              while (v82 != v177)
              {
                v362 = *--v82;
                *((_DWORD *)v361 - 1) = v362;
                v361 -= 4;
              }
              *(_QWORD *)v81 = v361;
              *v83 = v86;
              *v85 = &v182[4 * v181];
              if (v177)
                operator delete(v177);
            }
            else
            {
              *v82 = 203;
              v86 = v82 + 1;
            }
            *v83 = v86;
            if (!*v14)
            {
LABEL_410:
              if ((*((_BYTE *)__p + 25) & 0x10) == 0)
                goto LABEL_973;
              v363 = *v12 + 24 * v13;
              v365 = (_DWORD **)(v363 + 8);
              v364 = *(_DWORD **)(v363 + 8);
              v367 = (_QWORD *)(v363 + 16);
              v366 = *(_QWORD *)(v363 + 16);
              if ((unint64_t)v364 >= v366)
              {
                v369 = *(_DWORD **)v363;
                v370 = ((uint64_t)v364 - *(_QWORD *)v363) >> 2;
                v371 = v370 + 1;
                if ((unint64_t)(v370 + 1) >> 62)
                  sub_4074();
                v372 = v366 - (_QWORD)v369;
                if (v372 >> 1 > v371)
                  v371 = v372 >> 1;
                if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFFCLL)
                  v373 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v373 = v371;
                if (v373)
                {
                  v374 = (char *)sub_43B2C((uint64_t)v367, v373);
                  v364 = *v365;
                  v369 = *(_DWORD **)v363;
                }
                else
                {
                  v374 = 0;
                }
                v586 = &v374[4 * v370];
                *(_DWORD *)v586 = 204;
                v368 = v586 + 4;
                while (v364 != v369)
                {
                  v587 = *--v364;
                  *((_DWORD *)v586 - 1) = v587;
                  v586 -= 4;
                }
                *(_QWORD *)v363 = v586;
                *v365 = v368;
                *v367 = &v374[4 * v373];
                if (v369)
                  operator delete(v369);
              }
              else
              {
                *v364 = 204;
                v368 = v364 + 1;
              }
              *v365 = v368;
              if (!*v14)
              {
LABEL_973:
                if ((*((_BYTE *)__p + 25) & 0x20) == 0)
                  goto LABEL_4002;
                v588 = *v12 + 24 * v13;
                v590 = (_DWORD **)(v588 + 8);
                v589 = *(_DWORD **)(v588 + 8);
                v592 = (_QWORD *)(v588 + 16);
                v591 = *(_QWORD *)(v588 + 16);
                if ((unint64_t)v589 >= v591)
                {
                  v594 = *(_DWORD **)v588;
                  v595 = ((uint64_t)v589 - *(_QWORD *)v588) >> 2;
                  v596 = v595 + 1;
                  if ((unint64_t)(v595 + 1) >> 62)
                    sub_4074();
                  v597 = v591 - (_QWORD)v594;
                  if (v597 >> 1 > v596)
                    v596 = v597 >> 1;
                  if ((unint64_t)v597 >= 0x7FFFFFFFFFFFFFFCLL)
                    v598 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v598 = v596;
                  if (v598)
                  {
                    v599 = (char *)sub_43B2C((uint64_t)v592, v598);
                    v589 = *v590;
                    v594 = *(_DWORD **)v588;
                  }
                  else
                  {
                    v599 = 0;
                  }
                  v790 = &v599[4 * v595];
                  *(_DWORD *)v790 = 205;
                  v593 = v790 + 4;
                  while (v589 != v594)
                  {
                    v791 = *--v589;
                    *((_DWORD *)v790 - 1) = v791;
                    v790 -= 4;
                  }
                  *(_QWORD *)v588 = v790;
                  *v590 = v593;
                  *v592 = &v599[4 * v598];
                  if (v594)
                    operator delete(v594);
                }
                else
                {
                  *v589 = 205;
                  v593 = v589 + 1;
                }
                *v590 = v593;
                if (!*v14)
                {
LABEL_4002:
                  if ((*((_BYTE *)__p + 25) & 0x40) != 0)
                  {
                    v223 = *v12 + 24 * v13;
                    v225 = (int **)(v223 + 8);
                    v224 = *(int **)(v223 + 8);
                    v227 = (_QWORD *)(v223 + 16);
                    v792 = *(_QWORD *)(v223 + 16);
                    if ((unint64_t)v224 < v792)
                    {
                      v228 = 206;
                      goto LABEL_2185;
                    }
                    v229 = *(int **)v223;
                    v793 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                    v794 = v793 + 1;
                    if ((unint64_t)(v793 + 1) >> 62)
                      sub_4074();
                    v795 = v792 - (_QWORD)v229;
                    if (v795 >> 1 > v794)
                      v794 = v795 >> 1;
                    if ((unint64_t)v795 >= 0x7FFFFFFFFFFFFFFCLL)
                      v233 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v233 = v794;
                    if (v233)
                    {
                      v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                      v224 = *v225;
                      v229 = *(int **)v223;
                    }
                    else
                    {
                      v234 = 0;
                    }
                    v457 = &v234[4 * v793];
                    *(_DWORD *)v457 = 206;
                    v458 = (int *)(v457 + 4);
                    while (v224 != v229)
                    {
                      v979 = *--v224;
                      *((_DWORD *)v457 - 1) = v979;
                      v457 -= 4;
                    }
                    goto LABEL_3707;
                  }
                }
              }
            }
          }
          break;
        case 6:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 21) & 1) == 0)
              goto LABEL_446;
            v93 = *v12 + 24 * v13;
            v95 = (_DWORD **)(v93 + 8);
            v94 = *(_DWORD **)(v93 + 8);
            v97 = (_QWORD *)(v93 + 16);
            v96 = *(_QWORD *)(v93 + 16);
            if ((unint64_t)v94 >= v96)
            {
              v189 = *(_DWORD **)v93;
              v190 = ((uint64_t)v94 - *(_QWORD *)v93) >> 2;
              v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 62)
                sub_4074();
              v192 = v96 - (_QWORD)v189;
              if (v192 >> 1 > v191)
                v191 = v192 >> 1;
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL)
                v193 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v193 = v191;
              if (v193)
              {
                v194 = (char *)sub_43B2C((uint64_t)v97, v193);
                v94 = *v95;
                v189 = *(_DWORD **)v93;
              }
              else
              {
                v194 = 0;
              }
              v389 = &v194[4 * v190];
              *(_DWORD *)v389 = 168;
              v98 = v389 + 4;
              while (v94 != v189)
              {
                v390 = *--v94;
                *((_DWORD *)v389 - 1) = v390;
                v389 -= 4;
              }
              *(_QWORD *)v93 = v389;
              *v95 = v98;
              *v97 = &v194[4 * v193];
              if (v189)
                operator delete(v189);
            }
            else
            {
              *v94 = 168;
              v98 = v94 + 1;
            }
            *v95 = v98;
            if (!*v14)
            {
LABEL_446:
              if ((*((_BYTE *)__p + 21) & 2) == 0)
                goto LABEL_3144;
              v391 = *v12 + 24 * v13;
              v393 = (_DWORD **)(v391 + 8);
              v392 = *(_DWORD **)(v391 + 8);
              v395 = (_QWORD *)(v391 + 16);
              v394 = *(_QWORD *)(v391 + 16);
              if ((unint64_t)v392 >= v394)
              {
                v397 = *(_DWORD **)v391;
                v398 = ((uint64_t)v392 - *(_QWORD *)v391) >> 2;
                v399 = v398 + 1;
                if ((unint64_t)(v398 + 1) >> 62)
                  sub_4074();
                v400 = v394 - (_QWORD)v397;
                if (v400 >> 1 > v399)
                  v399 = v400 >> 1;
                if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFFCLL)
                  v401 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v401 = v399;
                if (v401)
                {
                  v402 = (char *)sub_43B2C((uint64_t)v395, v401);
                  v392 = *v393;
                  v397 = *(_DWORD **)v391;
                }
                else
                {
                  v402 = 0;
                }
                v614 = &v402[4 * v398];
                *(_DWORD *)v614 = 169;
                v396 = v614 + 4;
                while (v392 != v397)
                {
                  v615 = *--v392;
                  *((_DWORD *)v614 - 1) = v615;
                  v614 -= 4;
                }
                *(_QWORD *)v391 = v614;
                *v393 = v396;
                *v395 = &v402[4 * v401];
                if (v397)
                  operator delete(v397);
              }
              else
              {
                *v392 = 169;
                v396 = v392 + 1;
              }
              *v393 = v396;
              if (!*v14)
              {
LABEL_3144:
                if ((*((_BYTE *)__p + 21) & 4) == 0)
                  goto LABEL_4003;
                v616 = *v12 + 24 * v13;
                v618 = (_DWORD **)(v616 + 8);
                v617 = *(_DWORD **)(v616 + 8);
                v620 = (_QWORD *)(v616 + 16);
                v619 = *(_QWORD *)(v616 + 16);
                if ((unint64_t)v617 >= v619)
                {
                  v622 = *(_DWORD **)v616;
                  v623 = ((uint64_t)v617 - *(_QWORD *)v616) >> 2;
                  v624 = v623 + 1;
                  if ((unint64_t)(v623 + 1) >> 62)
                    sub_4074();
                  v625 = v619 - (_QWORD)v622;
                  if (v625 >> 1 > v624)
                    v624 = v625 >> 1;
                  if ((unint64_t)v625 >= 0x7FFFFFFFFFFFFFFCLL)
                    v626 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v626 = v624;
                  if (v626)
                  {
                    v627 = (char *)sub_43B2C((uint64_t)v620, v626);
                    v617 = *v618;
                    v622 = *(_DWORD **)v616;
                  }
                  else
                  {
                    v627 = 0;
                  }
                  v810 = &v627[4 * v623];
                  *(_DWORD *)v810 = 170;
                  v621 = v810 + 4;
                  while (v617 != v622)
                  {
                    v811 = *--v617;
                    *((_DWORD *)v810 - 1) = v811;
                    v810 -= 4;
                  }
                  *(_QWORD *)v616 = v810;
                  *v618 = v621;
                  *v620 = &v627[4 * v626];
                  if (v622)
                    operator delete(v622);
                }
                else
                {
                  *v617 = 170;
                  v621 = v617 + 1;
                }
                *v618 = v621;
                if (!*v14)
                {
LABEL_4003:
                  if ((*((_BYTE *)__p + 21) & 8) == 0)
                    goto LABEL_4004;
                  v812 = *v12 + 24 * v13;
                  v814 = (_DWORD **)(v812 + 8);
                  v813 = *(_DWORD **)(v812 + 8);
                  v816 = (_QWORD *)(v812 + 16);
                  v815 = *(_QWORD *)(v812 + 16);
                  if ((unint64_t)v813 >= v815)
                  {
                    v818 = *(_DWORD **)v812;
                    v819 = ((uint64_t)v813 - *(_QWORD *)v812) >> 2;
                    v820 = v819 + 1;
                    if ((unint64_t)(v819 + 1) >> 62)
                      sub_4074();
                    v821 = v815 - (_QWORD)v818;
                    if (v821 >> 1 > v820)
                      v820 = v821 >> 1;
                    if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFFCLL)
                      v822 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v822 = v820;
                    if (v822)
                    {
                      v823 = (char *)sub_43B2C((uint64_t)v816, v822);
                      v813 = *v814;
                      v818 = *(_DWORD **)v812;
                    }
                    else
                    {
                      v823 = 0;
                    }
                    v994 = &v823[4 * v819];
                    *(_DWORD *)v994 = 171;
                    v817 = v994 + 4;
                    while (v813 != v818)
                    {
                      v995 = *--v813;
                      *((_DWORD *)v994 - 1) = v995;
                      v994 -= 4;
                    }
                    *(_QWORD *)v812 = v994;
                    *v814 = v817;
                    *v816 = &v823[4 * v822];
                    if (v818)
                      operator delete(v818);
                  }
                  else
                  {
                    *v813 = 171;
                    v817 = v813 + 1;
                  }
                  *v814 = v817;
                  if (!*v14)
                  {
LABEL_4004:
                    if ((*((_BYTE *)__p + 21) & 0x10) == 0)
                      goto LABEL_4005;
                    v996 = *v12 + 24 * v13;
                    v998 = (_DWORD **)(v996 + 8);
                    v997 = *(_DWORD **)(v996 + 8);
                    v1000 = (_QWORD *)(v996 + 16);
                    v999 = *(_QWORD *)(v996 + 16);
                    if ((unint64_t)v997 >= v999)
                    {
                      v1002 = *(_DWORD **)v996;
                      v1003 = ((uint64_t)v997 - *(_QWORD *)v996) >> 2;
                      v1004 = v1003 + 1;
                      if ((unint64_t)(v1003 + 1) >> 62)
                        sub_4074();
                      v1005 = v999 - (_QWORD)v1002;
                      if (v1005 >> 1 > v1004)
                        v1004 = v1005 >> 1;
                      if ((unint64_t)v1005 >= 0x7FFFFFFFFFFFFFFCLL)
                        v1006 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v1006 = v1004;
                      if (v1006)
                      {
                        v1007 = (char *)sub_43B2C((uint64_t)v1000, v1006);
                        v997 = *v998;
                        v1002 = *(_DWORD **)v996;
                      }
                      else
                      {
                        v1007 = 0;
                      }
                      v1180 = &v1007[4 * v1003];
                      *(_DWORD *)v1180 = 172;
                      v1001 = v1180 + 4;
                      while (v997 != v1002)
                      {
                        v1181 = *--v997;
                        *((_DWORD *)v1180 - 1) = v1181;
                        v1180 -= 4;
                      }
                      *(_QWORD *)v996 = v1180;
                      *v998 = v1001;
                      *v1000 = &v1007[4 * v1006];
                      if (v1002)
                        operator delete(v1002);
                    }
                    else
                    {
                      *v997 = 172;
                      v1001 = v997 + 1;
                    }
                    *v998 = v1001;
                    if (!*v14)
                    {
LABEL_4005:
                      if ((*((_BYTE *)__p + 21) & 0x20) == 0)
                        goto LABEL_4006;
                      v1182 = *v12 + 24 * v13;
                      v1184 = (_DWORD **)(v1182 + 8);
                      v1183 = *(_DWORD **)(v1182 + 8);
                      v1186 = (_QWORD *)(v1182 + 16);
                      v1185 = *(_QWORD *)(v1182 + 16);
                      if ((unint64_t)v1183 >= v1185)
                      {
                        v1188 = *(_DWORD **)v1182;
                        v1189 = ((uint64_t)v1183 - *(_QWORD *)v1182) >> 2;
                        v1190 = v1189 + 1;
                        if ((unint64_t)(v1189 + 1) >> 62)
                          sub_4074();
                        v1191 = v1185 - (_QWORD)v1188;
                        if (v1191 >> 1 > v1190)
                          v1190 = v1191 >> 1;
                        if ((unint64_t)v1191 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1192 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1192 = v1190;
                        if (v1192)
                        {
                          v1193 = (char *)sub_43B2C((uint64_t)v1186, v1192);
                          v1183 = *v1184;
                          v1188 = *(_DWORD **)v1182;
                        }
                        else
                        {
                          v1193 = 0;
                        }
                        v1327 = &v1193[4 * v1189];
                        *(_DWORD *)v1327 = 173;
                        v1187 = v1327 + 4;
                        while (v1183 != v1188)
                        {
                          v1328 = *--v1183;
                          *((_DWORD *)v1327 - 1) = v1328;
                          v1327 -= 4;
                        }
                        *(_QWORD *)v1182 = v1327;
                        *v1184 = v1187;
                        *v1186 = &v1193[4 * v1192];
                        if (v1188)
                          operator delete(v1188);
                      }
                      else
                      {
                        *v1183 = 173;
                        v1187 = v1183 + 1;
                      }
                      *v1184 = v1187;
                      if (!*v14)
                      {
LABEL_4006:
                        if ((*((_BYTE *)__p + 21) & 0x40) == 0)
                          goto LABEL_4007;
                        v1329 = *v12 + 24 * v13;
                        v1331 = (_DWORD **)(v1329 + 8);
                        v1330 = *(_DWORD **)(v1329 + 8);
                        v1333 = (_QWORD *)(v1329 + 16);
                        v1332 = *(_QWORD *)(v1329 + 16);
                        if ((unint64_t)v1330 >= v1332)
                        {
                          v1335 = *(_DWORD **)v1329;
                          v1336 = ((uint64_t)v1330 - *(_QWORD *)v1329) >> 2;
                          v1337 = v1336 + 1;
                          if ((unint64_t)(v1336 + 1) >> 62)
                            sub_4074();
                          v1338 = v1332 - (_QWORD)v1335;
                          if (v1338 >> 1 > v1337)
                            v1337 = v1338 >> 1;
                          if ((unint64_t)v1338 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1339 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1339 = v1337;
                          if (v1339)
                          {
                            v1340 = (char *)sub_43B2C((uint64_t)v1333, v1339);
                            v1330 = *v1331;
                            v1335 = *(_DWORD **)v1329;
                          }
                          else
                          {
                            v1340 = 0;
                          }
                          v1476 = &v1340[4 * v1336];
                          *(_DWORD *)v1476 = 174;
                          v1334 = v1476 + 4;
                          while (v1330 != v1335)
                          {
                            v1477 = *--v1330;
                            *((_DWORD *)v1476 - 1) = v1477;
                            v1476 -= 4;
                          }
                          *(_QWORD *)v1329 = v1476;
                          *v1331 = v1334;
                          *v1333 = &v1340[4 * v1339];
                          if (v1335)
                            operator delete(v1335);
                        }
                        else
                        {
                          *v1330 = 174;
                          v1334 = v1330 + 1;
                        }
                        *v1331 = v1334;
                        if (!*v14)
                        {
LABEL_4007:
                          if ((*((_BYTE *)__p + 21) & 0x80) == 0)
                            goto LABEL_4008;
                          v1478 = *v12 + 24 * v13;
                          v1480 = (_DWORD **)(v1478 + 8);
                          v1479 = *(_DWORD **)(v1478 + 8);
                          v1482 = (_QWORD *)(v1478 + 16);
                          v1481 = *(_QWORD *)(v1478 + 16);
                          if ((unint64_t)v1479 >= v1481)
                          {
                            v1484 = *(_DWORD **)v1478;
                            v1485 = ((uint64_t)v1479 - *(_QWORD *)v1478) >> 2;
                            v1486 = v1485 + 1;
                            if ((unint64_t)(v1485 + 1) >> 62)
                              sub_4074();
                            v1487 = v1481 - (_QWORD)v1484;
                            if (v1487 >> 1 > v1486)
                              v1486 = v1487 >> 1;
                            if ((unint64_t)v1487 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1488 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1488 = v1486;
                            if (v1488)
                            {
                              v1489 = (char *)sub_43B2C((uint64_t)v1482, v1488);
                              v1479 = *v1480;
                              v1484 = *(_DWORD **)v1478;
                            }
                            else
                            {
                              v1489 = 0;
                            }
                            v1616 = &v1489[4 * v1485];
                            *(_DWORD *)v1616 = 175;
                            v1483 = v1616 + 4;
                            while (v1479 != v1484)
                            {
                              v1617 = *--v1479;
                              *((_DWORD *)v1616 - 1) = v1617;
                              v1616 -= 4;
                            }
                            *(_QWORD *)v1478 = v1616;
                            *v1480 = v1483;
                            *v1482 = &v1489[4 * v1488];
                            if (v1484)
                              operator delete(v1484);
                          }
                          else
                          {
                            *v1479 = 175;
                            v1483 = v1479 + 1;
                          }
                          *v1480 = v1483;
                          if (!*v14)
                          {
LABEL_4008:
                            if ((*((_BYTE *)__p + 22) & 1) == 0)
                              goto LABEL_4009;
                            v1618 = *v12 + 24 * v13;
                            v1620 = (_DWORD **)(v1618 + 8);
                            v1619 = *(_DWORD **)(v1618 + 8);
                            v1622 = (_QWORD *)(v1618 + 16);
                            v1621 = *(_QWORD *)(v1618 + 16);
                            if ((unint64_t)v1619 >= v1621)
                            {
                              v1624 = *(_DWORD **)v1618;
                              v1625 = ((uint64_t)v1619 - *(_QWORD *)v1618) >> 2;
                              v1626 = v1625 + 1;
                              if ((unint64_t)(v1625 + 1) >> 62)
                                sub_4074();
                              v1627 = v1621 - (_QWORD)v1624;
                              if (v1627 >> 1 > v1626)
                                v1626 = v1627 >> 1;
                              if ((unint64_t)v1627 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1628 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1628 = v1626;
                              if (v1628)
                              {
                                v1629 = (char *)sub_43B2C((uint64_t)v1622, v1628);
                                v1619 = *v1620;
                                v1624 = *(_DWORD **)v1618;
                              }
                              else
                              {
                                v1629 = 0;
                              }
                              v1749 = &v1629[4 * v1625];
                              *(_DWORD *)v1749 = 176;
                              v1623 = v1749 + 4;
                              while (v1619 != v1624)
                              {
                                v1750 = *--v1619;
                                *((_DWORD *)v1749 - 1) = v1750;
                                v1749 -= 4;
                              }
                              *(_QWORD *)v1618 = v1749;
                              *v1620 = v1623;
                              *v1622 = &v1629[4 * v1628];
                              if (v1624)
                                operator delete(v1624);
                            }
                            else
                            {
                              *v1619 = 176;
                              v1623 = v1619 + 1;
                            }
                            *v1620 = v1623;
                            if (!*v14)
                            {
LABEL_4009:
                              if ((*((_BYTE *)__p + 22) & 2) == 0)
                                goto LABEL_4010;
                              v1751 = *v12 + 24 * v13;
                              v1753 = (_DWORD **)(v1751 + 8);
                              v1752 = *(_DWORD **)(v1751 + 8);
                              v1755 = (_QWORD *)(v1751 + 16);
                              v1754 = *(_QWORD *)(v1751 + 16);
                              if ((unint64_t)v1752 >= v1754)
                              {
                                v1757 = *(_DWORD **)v1751;
                                v1758 = ((uint64_t)v1752 - *(_QWORD *)v1751) >> 2;
                                v1759 = v1758 + 1;
                                if ((unint64_t)(v1758 + 1) >> 62)
                                  sub_4074();
                                v1760 = v1754 - (_QWORD)v1757;
                                if (v1760 >> 1 > v1759)
                                  v1759 = v1760 >> 1;
                                if ((unint64_t)v1760 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1761 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1761 = v1759;
                                if (v1761)
                                {
                                  v1762 = (char *)sub_43B2C((uint64_t)v1755, v1761);
                                  v1752 = *v1753;
                                  v1757 = *(_DWORD **)v1751;
                                }
                                else
                                {
                                  v1762 = 0;
                                }
                                v1857 = &v1762[4 * v1758];
                                *(_DWORD *)v1857 = 177;
                                v1756 = v1857 + 4;
                                while (v1752 != v1757)
                                {
                                  v1858 = *--v1752;
                                  *((_DWORD *)v1857 - 1) = v1858;
                                  v1857 -= 4;
                                }
                                *(_QWORD *)v1751 = v1857;
                                *v1753 = v1756;
                                *v1755 = &v1762[4 * v1761];
                                if (v1757)
                                  operator delete(v1757);
                              }
                              else
                              {
                                *v1752 = 177;
                                v1756 = v1752 + 1;
                              }
                              *v1753 = v1756;
                              if (!*v14)
                              {
LABEL_4010:
                                if ((*((_BYTE *)__p + 22) & 4) == 0)
                                  goto LABEL_4011;
                                v1859 = *v12 + 24 * v13;
                                v1861 = (_DWORD **)(v1859 + 8);
                                v1860 = *(_DWORD **)(v1859 + 8);
                                v1863 = (_QWORD *)(v1859 + 16);
                                v1862 = *(_QWORD *)(v1859 + 16);
                                if ((unint64_t)v1860 >= v1862)
                                {
                                  v1865 = *(_DWORD **)v1859;
                                  v1866 = ((uint64_t)v1860 - *(_QWORD *)v1859) >> 2;
                                  v1867 = v1866 + 1;
                                  if ((unint64_t)(v1866 + 1) >> 62)
                                    sub_4074();
                                  v1868 = v1862 - (_QWORD)v1865;
                                  if (v1868 >> 1 > v1867)
                                    v1867 = v1868 >> 1;
                                  if ((unint64_t)v1868 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v1869 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v1869 = v1867;
                                  if (v1869)
                                  {
                                    v1870 = (char *)sub_43B2C((uint64_t)v1863, v1869);
                                    v1860 = *v1861;
                                    v1865 = *(_DWORD **)v1859;
                                  }
                                  else
                                  {
                                    v1870 = 0;
                                  }
                                  v1948 = &v1870[4 * v1866];
                                  *(_DWORD *)v1948 = 178;
                                  v1864 = v1948 + 4;
                                  while (v1860 != v1865)
                                  {
                                    v1949 = *--v1860;
                                    *((_DWORD *)v1948 - 1) = v1949;
                                    v1948 -= 4;
                                  }
                                  *(_QWORD *)v1859 = v1948;
                                  *v1861 = v1864;
                                  *v1863 = &v1870[4 * v1869];
                                  if (v1865)
                                    operator delete(v1865);
                                }
                                else
                                {
                                  *v1860 = 178;
                                  v1864 = v1860 + 1;
                                }
                                *v1861 = v1864;
                                if (!*v14)
                                {
LABEL_4011:
                                  if ((*((_BYTE *)__p + 22) & 8) == 0)
                                    goto LABEL_4012;
                                  v1950 = *v12 + 24 * v13;
                                  v1952 = (_DWORD **)(v1950 + 8);
                                  v1951 = *(_DWORD **)(v1950 + 8);
                                  v1954 = (_QWORD *)(v1950 + 16);
                                  v1953 = *(_QWORD *)(v1950 + 16);
                                  if ((unint64_t)v1951 >= v1953)
                                  {
                                    v1956 = *(_DWORD **)v1950;
                                    v1957 = ((uint64_t)v1951 - *(_QWORD *)v1950) >> 2;
                                    v1958 = v1957 + 1;
                                    if ((unint64_t)(v1957 + 1) >> 62)
                                      sub_4074();
                                    v1959 = v1953 - (_QWORD)v1956;
                                    if (v1959 >> 1 > v1958)
                                      v1958 = v1959 >> 1;
                                    if ((unint64_t)v1959 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1960 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1960 = v1958;
                                    if (v1960)
                                    {
                                      v1961 = (char *)sub_43B2C((uint64_t)v1954, v1960);
                                      v1951 = *v1952;
                                      v1956 = *(_DWORD **)v1950;
                                    }
                                    else
                                    {
                                      v1961 = 0;
                                    }
                                    v2033 = &v1961[4 * v1957];
                                    *(_DWORD *)v2033 = 179;
                                    v1955 = v2033 + 4;
                                    while (v1951 != v1956)
                                    {
                                      v2034 = *--v1951;
                                      *((_DWORD *)v2033 - 1) = v2034;
                                      v2033 -= 4;
                                    }
                                    *(_QWORD *)v1950 = v2033;
                                    *v1952 = v1955;
                                    *v1954 = &v1961[4 * v1960];
                                    if (v1956)
                                      operator delete(v1956);
                                  }
                                  else
                                  {
                                    *v1951 = 179;
                                    v1955 = v1951 + 1;
                                  }
                                  *v1952 = v1955;
                                  if (!*v14)
                                  {
LABEL_4012:
                                    if ((*((_BYTE *)__p + 22) & 0x10) == 0)
                                      goto LABEL_4013;
                                    v2035 = *v12 + 24 * v13;
                                    v2037 = (_DWORD **)(v2035 + 8);
                                    v2036 = *(_DWORD **)(v2035 + 8);
                                    v2039 = (_QWORD *)(v2035 + 16);
                                    v2038 = *(_QWORD *)(v2035 + 16);
                                    if ((unint64_t)v2036 >= v2038)
                                    {
                                      v2041 = *(_DWORD **)v2035;
                                      v2042 = ((uint64_t)v2036 - *(_QWORD *)v2035) >> 2;
                                      v2043 = v2042 + 1;
                                      if ((unint64_t)(v2042 + 1) >> 62)
                                        sub_4074();
                                      v2044 = v2038 - (_QWORD)v2041;
                                      if (v2044 >> 1 > v2043)
                                        v2043 = v2044 >> 1;
                                      if ((unint64_t)v2044 >= 0x7FFFFFFFFFFFFFFCLL)
                                        v2045 = 0x3FFFFFFFFFFFFFFFLL;
                                      else
                                        v2045 = v2043;
                                      if (v2045)
                                      {
                                        v2046 = (char *)sub_43B2C((uint64_t)v2039, v2045);
                                        v2036 = *v2037;
                                        v2041 = *(_DWORD **)v2035;
                                      }
                                      else
                                      {
                                        v2046 = 0;
                                      }
                                      v2117 = &v2046[4 * v2042];
                                      *(_DWORD *)v2117 = 180;
                                      v2040 = v2117 + 4;
                                      while (v2036 != v2041)
                                      {
                                        v2118 = *--v2036;
                                        *((_DWORD *)v2117 - 1) = v2118;
                                        v2117 -= 4;
                                      }
                                      *(_QWORD *)v2035 = v2117;
                                      *v2037 = v2040;
                                      *v2039 = &v2046[4 * v2045];
                                      if (v2041)
                                        operator delete(v2041);
                                    }
                                    else
                                    {
                                      *v2036 = 180;
                                      v2040 = v2036 + 1;
                                    }
                                    *v2037 = v2040;
                                    if (!*v14)
                                    {
LABEL_4013:
                                      if ((*((_BYTE *)__p + 22) & 0x20) == 0)
                                        goto LABEL_4014;
                                      v2119 = *v12 + 24 * v13;
                                      v2121 = (_DWORD **)(v2119 + 8);
                                      v2120 = *(_DWORD **)(v2119 + 8);
                                      v2123 = (_QWORD *)(v2119 + 16);
                                      v2122 = *(_QWORD *)(v2119 + 16);
                                      if ((unint64_t)v2120 >= v2122)
                                      {
                                        v2125 = *(_DWORD **)v2119;
                                        v2126 = ((uint64_t)v2120 - *(_QWORD *)v2119) >> 2;
                                        v2127 = v2126 + 1;
                                        if ((unint64_t)(v2126 + 1) >> 62)
                                          sub_4074();
                                        v2128 = v2122 - (_QWORD)v2125;
                                        if (v2128 >> 1 > v2127)
                                          v2127 = v2128 >> 1;
                                        if ((unint64_t)v2128 >= 0x7FFFFFFFFFFFFFFCLL)
                                          v2129 = 0x3FFFFFFFFFFFFFFFLL;
                                        else
                                          v2129 = v2127;
                                        if (v2129)
                                        {
                                          v2130 = (char *)sub_43B2C((uint64_t)v2123, v2129);
                                          v2120 = *v2121;
                                          v2125 = *(_DWORD **)v2119;
                                        }
                                        else
                                        {
                                          v2130 = 0;
                                        }
                                        v2193 = &v2130[4 * v2126];
                                        *(_DWORD *)v2193 = 181;
                                        v2124 = v2193 + 4;
                                        while (v2120 != v2125)
                                        {
                                          v2194 = *--v2120;
                                          *((_DWORD *)v2193 - 1) = v2194;
                                          v2193 -= 4;
                                        }
                                        *(_QWORD *)v2119 = v2193;
                                        *v2121 = v2124;
                                        *v2123 = &v2130[4 * v2129];
                                        if (v2125)
                                          operator delete(v2125);
                                      }
                                      else
                                      {
                                        *v2120 = 181;
                                        v2124 = v2120 + 1;
                                      }
                                      *v2121 = v2124;
                                      if (!*v14)
                                      {
LABEL_4014:
                                        if ((*((_BYTE *)__p + 22) & 0x40) == 0)
                                          goto LABEL_4015;
                                        v2195 = *v12 + 24 * v13;
                                        v2197 = (_DWORD **)(v2195 + 8);
                                        v2196 = *(_DWORD **)(v2195 + 8);
                                        v2199 = (_QWORD *)(v2195 + 16);
                                        v2198 = *(_QWORD *)(v2195 + 16);
                                        if ((unint64_t)v2196 >= v2198)
                                        {
                                          v2201 = *(_DWORD **)v2195;
                                          v2202 = ((uint64_t)v2196 - *(_QWORD *)v2195) >> 2;
                                          v2203 = v2202 + 1;
                                          if ((unint64_t)(v2202 + 1) >> 62)
                                            sub_4074();
                                          v2204 = v2198 - (_QWORD)v2201;
                                          if (v2204 >> 1 > v2203)
                                            v2203 = v2204 >> 1;
                                          if ((unint64_t)v2204 >= 0x7FFFFFFFFFFFFFFCLL)
                                            v2205 = 0x3FFFFFFFFFFFFFFFLL;
                                          else
                                            v2205 = v2203;
                                          if (v2205)
                                          {
                                            v2206 = (char *)sub_43B2C((uint64_t)v2199, v2205);
                                            v2196 = *v2197;
                                            v2201 = *(_DWORD **)v2195;
                                          }
                                          else
                                          {
                                            v2206 = 0;
                                          }
                                          v2264 = &v2206[4 * v2202];
                                          *(_DWORD *)v2264 = 182;
                                          v2200 = v2264 + 4;
                                          while (v2196 != v2201)
                                          {
                                            v2265 = *--v2196;
                                            *((_DWORD *)v2264 - 1) = v2265;
                                            v2264 -= 4;
                                          }
                                          *(_QWORD *)v2195 = v2264;
                                          *v2197 = v2200;
                                          *v2199 = &v2206[4 * v2205];
                                          if (v2201)
                                            operator delete(v2201);
                                        }
                                        else
                                        {
                                          *v2196 = 182;
                                          v2200 = v2196 + 1;
                                        }
                                        *v2197 = v2200;
                                        if (!*v14)
                                        {
LABEL_4015:
                                          if ((*((_BYTE *)__p + 22) & 0x80) == 0)
                                            goto LABEL_4016;
                                          v2266 = *v12 + 24 * v13;
                                          v2268 = (_DWORD **)(v2266 + 8);
                                          v2267 = *(_DWORD **)(v2266 + 8);
                                          v2270 = (_QWORD *)(v2266 + 16);
                                          v2269 = *(_QWORD *)(v2266 + 16);
                                          if ((unint64_t)v2267 >= v2269)
                                          {
                                            v2272 = *(_DWORD **)v2266;
                                            v2273 = ((uint64_t)v2267 - *(_QWORD *)v2266) >> 2;
                                            v2274 = v2273 + 1;
                                            if ((unint64_t)(v2273 + 1) >> 62)
                                              sub_4074();
                                            v2275 = v2269 - (_QWORD)v2272;
                                            if (v2275 >> 1 > v2274)
                                              v2274 = v2275 >> 1;
                                            if ((unint64_t)v2275 >= 0x7FFFFFFFFFFFFFFCLL)
                                              v2276 = 0x3FFFFFFFFFFFFFFFLL;
                                            else
                                              v2276 = v2274;
                                            if (v2276)
                                            {
                                              v2277 = (char *)sub_43B2C((uint64_t)v2270, v2276);
                                              v2267 = *v2268;
                                              v2272 = *(_DWORD **)v2266;
                                            }
                                            else
                                            {
                                              v2277 = 0;
                                            }
                                            v2326 = &v2277[4 * v2273];
                                            *(_DWORD *)v2326 = 183;
                                            v2271 = v2326 + 4;
                                            while (v2267 != v2272)
                                            {
                                              v2327 = *--v2267;
                                              *((_DWORD *)v2326 - 1) = v2327;
                                              v2326 -= 4;
                                            }
                                            *(_QWORD *)v2266 = v2326;
                                            *v2268 = v2271;
                                            *v2270 = &v2277[4 * v2276];
                                            if (v2272)
                                              operator delete(v2272);
                                          }
                                          else
                                          {
                                            *v2267 = 183;
                                            v2271 = v2267 + 1;
                                          }
                                          *v2268 = v2271;
                                          if (!*v14)
                                          {
LABEL_4016:
                                            if ((*((_BYTE *)__p + 23) & 1) == 0)
                                              goto LABEL_4017;
                                            v2328 = *v12 + 24 * v13;
                                            v2330 = (_DWORD **)(v2328 + 8);
                                            v2329 = *(_DWORD **)(v2328 + 8);
                                            v2332 = (_QWORD *)(v2328 + 16);
                                            v2331 = *(_QWORD *)(v2328 + 16);
                                            if ((unint64_t)v2329 >= v2331)
                                            {
                                              v2334 = *(_DWORD **)v2328;
                                              v2335 = ((uint64_t)v2329 - *(_QWORD *)v2328) >> 2;
                                              v2336 = v2335 + 1;
                                              if ((unint64_t)(v2335 + 1) >> 62)
                                                sub_4074();
                                              v2337 = v2331 - (_QWORD)v2334;
                                              if (v2337 >> 1 > v2336)
                                                v2336 = v2337 >> 1;
                                              if ((unint64_t)v2337 >= 0x7FFFFFFFFFFFFFFCLL)
                                                v2338 = 0x3FFFFFFFFFFFFFFFLL;
                                              else
                                                v2338 = v2336;
                                              if (v2338)
                                              {
                                                v2339 = (char *)sub_43B2C((uint64_t)v2332, v2338);
                                                v2329 = *v2330;
                                                v2334 = *(_DWORD **)v2328;
                                              }
                                              else
                                              {
                                                v2339 = 0;
                                              }
                                              v2383 = &v2339[4 * v2335];
                                              *(_DWORD *)v2383 = 184;
                                              v2333 = v2383 + 4;
                                              while (v2329 != v2334)
                                              {
                                                v2384 = *--v2329;
                                                *((_DWORD *)v2383 - 1) = v2384;
                                                v2383 -= 4;
                                              }
                                              *(_QWORD *)v2328 = v2383;
                                              *v2330 = v2333;
                                              *v2332 = &v2339[4 * v2338];
                                              if (v2334)
                                                operator delete(v2334);
                                            }
                                            else
                                            {
                                              *v2329 = 184;
                                              v2333 = v2329 + 1;
                                            }
                                            *v2330 = v2333;
                                            if (!*v14)
                                            {
LABEL_4017:
                                              if ((*((_BYTE *)__p + 23) & 2) != 0)
                                              {
                                                v223 = *v12 + 24 * v13;
                                                v225 = (int **)(v223 + 8);
                                                v224 = *(int **)(v223 + 8);
                                                v227 = (_QWORD *)(v223 + 16);
                                                v2385 = *(_QWORD *)(v223 + 16);
                                                if ((unint64_t)v224 < v2385)
                                                {
                                                  v228 = 185;
                                                  goto LABEL_2185;
                                                }
                                                v229 = *(int **)v223;
                                                v2386 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                                                v2387 = v2386 + 1;
                                                if ((unint64_t)(v2386 + 1) >> 62)
                                                  sub_4074();
                                                v2388 = v2385 - (_QWORD)v229;
                                                if (v2388 >> 1 > v2387)
                                                  v2387 = v2388 >> 1;
                                                if ((unint64_t)v2388 >= 0x7FFFFFFFFFFFFFFCLL)
                                                  v233 = 0x3FFFFFFFFFFFFFFFLL;
                                                else
                                                  v233 = v2387;
                                                if (v233)
                                                {
                                                  v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                                                  v224 = *v225;
                                                  v229 = *(int **)v223;
                                                }
                                                else
                                                {
                                                  v234 = 0;
                                                }
                                                v457 = &v234[4 * v2386];
                                                *(_DWORD *)v457 = 185;
                                                v458 = (int *)(v457 + 4);
                                                while (v224 != v229)
                                                {
                                                  v2431 = *--v224;
                                                  *((_DWORD *)v457 - 1) = v2431;
                                                  v457 -= 4;
                                                }
                                                goto LABEL_3707;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 7:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 23) & 4) == 0)
              goto LABEL_356;
            v69 = *v12 + 24 * v13;
            v71 = (_DWORD **)(v69 + 8);
            v70 = *(_DWORD **)(v69 + 8);
            v73 = (_QWORD *)(v69 + 16);
            v72 = *(_QWORD *)(v69 + 16);
            if ((unint64_t)v70 >= v72)
            {
              v159 = *(_DWORD **)v69;
              v160 = ((uint64_t)v70 - *(_QWORD *)v69) >> 2;
              v161 = v160 + 1;
              if ((unint64_t)(v160 + 1) >> 62)
                sub_4074();
              v162 = v72 - (_QWORD)v159;
              if (v162 >> 1 > v161)
                v161 = v162 >> 1;
              if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL)
                v163 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v163 = v161;
              if (v163)
              {
                v164 = (char *)sub_43B2C((uint64_t)v73, v163);
                v70 = *v71;
                v159 = *(_DWORD **)v69;
              }
              else
              {
                v164 = 0;
              }
              v319 = &v164[4 * v160];
              *(_DWORD *)v319 = 186;
              v74 = v319 + 4;
              while (v70 != v159)
              {
                v320 = *--v70;
                *((_DWORD *)v319 - 1) = v320;
                v319 -= 4;
              }
              *(_QWORD *)v69 = v319;
              *v71 = v74;
              *v73 = &v164[4 * v163];
              if (v159)
                operator delete(v159);
            }
            else
            {
              *v70 = 186;
              v74 = v70 + 1;
            }
            *v71 = v74;
            if (!*v14)
            {
LABEL_356:
              if ((*((_BYTE *)__p + 23) & 8) == 0)
                goto LABEL_2996;
              v321 = *v12 + 24 * v13;
              v323 = (_DWORD **)(v321 + 8);
              v322 = *(_DWORD **)(v321 + 8);
              v325 = (_QWORD *)(v321 + 16);
              v324 = *(_QWORD *)(v321 + 16);
              if ((unint64_t)v322 >= v324)
              {
                v327 = *(_DWORD **)v321;
                v328 = ((uint64_t)v322 - *(_QWORD *)v321) >> 2;
                v329 = v328 + 1;
                if ((unint64_t)(v328 + 1) >> 62)
                  sub_4074();
                v330 = v324 - (_QWORD)v327;
                if (v330 >> 1 > v329)
                  v329 = v330 >> 1;
                if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFFCLL)
                  v331 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v331 = v329;
                if (v331)
                {
                  v332 = (char *)sub_43B2C((uint64_t)v325, v331);
                  v322 = *v323;
                  v327 = *(_DWORD **)v321;
                }
                else
                {
                  v332 = 0;
                }
                v544 = &v332[4 * v328];
                *(_DWORD *)v544 = 187;
                v326 = v544 + 4;
                while (v322 != v327)
                {
                  v545 = *--v322;
                  *((_DWORD *)v544 - 1) = v545;
                  v544 -= 4;
                }
                *(_QWORD *)v321 = v544;
                *v323 = v326;
                *v325 = &v332[4 * v331];
                if (v327)
                  operator delete(v327);
              }
              else
              {
                *v322 = 187;
                v326 = v322 + 1;
              }
              *v323 = v326;
              if (!*v14)
              {
LABEL_2996:
                if ((*((_BYTE *)__p + 23) & 0x10) == 0)
                  goto LABEL_4018;
                v546 = *v12 + 24 * v13;
                v548 = (_DWORD **)(v546 + 8);
                v547 = *(_DWORD **)(v546 + 8);
                v550 = (_QWORD *)(v546 + 16);
                v549 = *(_QWORD *)(v546 + 16);
                if ((unint64_t)v547 >= v549)
                {
                  v552 = *(_DWORD **)v546;
                  v553 = ((uint64_t)v547 - *(_QWORD *)v546) >> 2;
                  v554 = v553 + 1;
                  if ((unint64_t)(v553 + 1) >> 62)
                    sub_4074();
                  v555 = v549 - (_QWORD)v552;
                  if (v555 >> 1 > v554)
                    v554 = v555 >> 1;
                  if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFFCLL)
                    v556 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v556 = v554;
                  if (v556)
                  {
                    v557 = (char *)sub_43B2C((uint64_t)v550, v556);
                    v547 = *v548;
                    v552 = *(_DWORD **)v546;
                  }
                  else
                  {
                    v557 = 0;
                  }
                  v748 = &v557[4 * v553];
                  *(_DWORD *)v748 = 188;
                  v551 = v748 + 4;
                  while (v547 != v552)
                  {
                    v749 = *--v547;
                    *((_DWORD *)v748 - 1) = v749;
                    v748 -= 4;
                  }
                  *(_QWORD *)v546 = v748;
                  *v548 = v551;
                  *v550 = &v557[4 * v556];
                  if (v552)
                    operator delete(v552);
                }
                else
                {
                  *v547 = 188;
                  v551 = v547 + 1;
                }
                *v548 = v551;
                if (!*v14)
                {
LABEL_4018:
                  if ((*((_BYTE *)__p + 23) & 0x20) == 0)
                    goto LABEL_4019;
                  v750 = *v12 + 24 * v13;
                  v752 = (_DWORD **)(v750 + 8);
                  v751 = *(_DWORD **)(v750 + 8);
                  v754 = (_QWORD *)(v750 + 16);
                  v753 = *(_QWORD *)(v750 + 16);
                  if ((unint64_t)v751 >= v753)
                  {
                    v756 = *(_DWORD **)v750;
                    v757 = ((uint64_t)v751 - *(_QWORD *)v750) >> 2;
                    v758 = v757 + 1;
                    if ((unint64_t)(v757 + 1) >> 62)
                      sub_4074();
                    v759 = v753 - (_QWORD)v756;
                    if (v759 >> 1 > v758)
                      v758 = v759 >> 1;
                    if ((unint64_t)v759 >= 0x7FFFFFFFFFFFFFFCLL)
                      v760 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v760 = v758;
                    if (v760)
                    {
                      v761 = (char *)sub_43B2C((uint64_t)v754, v760);
                      v751 = *v752;
                      v756 = *(_DWORD **)v750;
                    }
                    else
                    {
                      v761 = 0;
                    }
                    v937 = &v761[4 * v757];
                    *(_DWORD *)v937 = 189;
                    v755 = v937 + 4;
                    while (v751 != v756)
                    {
                      v938 = *--v751;
                      *((_DWORD *)v937 - 1) = v938;
                      v937 -= 4;
                    }
                    *(_QWORD *)v750 = v937;
                    *v752 = v755;
                    *v754 = &v761[4 * v760];
                    if (v756)
                      operator delete(v756);
                  }
                  else
                  {
                    *v751 = 189;
                    v755 = v751 + 1;
                  }
                  *v752 = v755;
                  if (!*v14)
                  {
LABEL_4019:
                    if ((*((_BYTE *)__p + 23) & 0x40) == 0)
                      goto LABEL_4020;
                    v939 = *v12 + 24 * v13;
                    v941 = (_DWORD **)(v939 + 8);
                    v940 = *(_DWORD **)(v939 + 8);
                    v943 = (_QWORD *)(v939 + 16);
                    v942 = *(_QWORD *)(v939 + 16);
                    if ((unint64_t)v940 >= v942)
                    {
                      v945 = *(_DWORD **)v939;
                      v946 = ((uint64_t)v940 - *(_QWORD *)v939) >> 2;
                      v947 = v946 + 1;
                      if ((unint64_t)(v946 + 1) >> 62)
                        sub_4074();
                      v948 = v942 - (_QWORD)v945;
                      if (v948 >> 1 > v947)
                        v947 = v948 >> 1;
                      if ((unint64_t)v948 >= 0x7FFFFFFFFFFFFFFCLL)
                        v949 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v949 = v947;
                      if (v949)
                      {
                        v950 = (char *)sub_43B2C((uint64_t)v943, v949);
                        v940 = *v941;
                        v945 = *(_DWORD **)v939;
                      }
                      else
                      {
                        v950 = 0;
                      }
                      v1112 = &v950[4 * v946];
                      *(_DWORD *)v1112 = 190;
                      v944 = v1112 + 4;
                      while (v940 != v945)
                      {
                        v1113 = *--v940;
                        *((_DWORD *)v1112 - 1) = v1113;
                        v1112 -= 4;
                      }
                      *(_QWORD *)v939 = v1112;
                      *v941 = v944;
                      *v943 = &v950[4 * v949];
                      if (v945)
                        operator delete(v945);
                    }
                    else
                    {
                      *v940 = 190;
                      v944 = v940 + 1;
                    }
                    *v941 = v944;
                    if (!*v14)
                    {
LABEL_4020:
                      if ((*((_QWORD *)__p + 2) & 0x8000000000000000) == 0)
                        goto LABEL_4021;
                      v1120 = *v12 + 24 * v13;
                      v1122 = (_DWORD **)(v1120 + 8);
                      v1121 = *(_DWORD **)(v1120 + 8);
                      v1124 = (_QWORD *)(v1120 + 16);
                      v1123 = *(_QWORD *)(v1120 + 16);
                      if ((unint64_t)v1121 >= v1123)
                      {
                        v1132 = *(_DWORD **)v1120;
                        v1133 = ((uint64_t)v1121 - *(_QWORD *)v1120) >> 2;
                        v1134 = v1133 + 1;
                        if ((unint64_t)(v1133 + 1) >> 62)
                          sub_4074();
                        v1135 = v1123 - (_QWORD)v1132;
                        if (v1135 >> 1 > v1134)
                          v1134 = v1135 >> 1;
                        if ((unint64_t)v1135 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1136 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1136 = v1134;
                        if (v1136)
                        {
                          v1137 = (char *)sub_43B2C((uint64_t)v1124, v1136);
                          v1121 = *v1122;
                          v1132 = *(_DWORD **)v1120;
                        }
                        else
                        {
                          v1137 = 0;
                        }
                        v1356 = &v1137[4 * v1133];
                        *(_DWORD *)v1356 = 191;
                        v1125 = v1356 + 4;
                        while (v1121 != v1132)
                        {
                          v1357 = *--v1121;
                          *((_DWORD *)v1356 - 1) = v1357;
                          v1356 -= 4;
                        }
                        *(_QWORD *)v1120 = v1356;
                        *v1122 = v1125;
                        *v1124 = &v1137[4 * v1136];
                        if (v1132)
                          operator delete(v1132);
                      }
                      else
                      {
                        *v1121 = 191;
                        v1125 = v1121 + 1;
                      }
                      *v1122 = v1125;
                      if (!*v14)
                      {
LABEL_4021:
                        if ((*((_BYTE *)__p + 24) & 1) == 0)
                          goto LABEL_4022;
                        v1114 = *v12 + 24 * v13;
                        v1116 = (_DWORD **)(v1114 + 8);
                        v1115 = *(_DWORD **)(v1114 + 8);
                        v1118 = (_QWORD *)(v1114 + 16);
                        v1117 = *(_QWORD *)(v1114 + 16);
                        if ((unint64_t)v1115 >= v1117)
                        {
                          v1126 = *(_DWORD **)v1114;
                          v1127 = ((uint64_t)v1115 - *(_QWORD *)v1114) >> 2;
                          v1128 = v1127 + 1;
                          if ((unint64_t)(v1127 + 1) >> 62)
                            sub_4074();
                          v1129 = v1117 - (_QWORD)v1126;
                          if (v1129 >> 1 > v1128)
                            v1128 = v1129 >> 1;
                          if ((unint64_t)v1129 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1130 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1130 = v1128;
                          if (v1130)
                          {
                            v1131 = (char *)sub_43B2C((uint64_t)v1118, v1130);
                            v1115 = *v1116;
                            v1126 = *(_DWORD **)v1114;
                          }
                          else
                          {
                            v1131 = 0;
                          }
                          v1341 = &v1131[4 * v1127];
                          *(_DWORD *)v1341 = 192;
                          v1119 = v1341 + 4;
                          while (v1115 != v1126)
                          {
                            v1342 = *--v1115;
                            *((_DWORD *)v1341 - 1) = v1342;
                            v1341 -= 4;
                          }
                          *(_QWORD *)v1114 = v1341;
                          *v1116 = v1119;
                          *v1118 = &v1131[4 * v1130];
                          if (v1126)
                            operator delete(v1126);
                        }
                        else
                        {
                          *v1115 = 192;
                          v1119 = v1115 + 1;
                        }
                        *v1116 = v1119;
                        if (!*v14)
                        {
LABEL_4022:
                          if ((*((_BYTE *)__p + 24) & 2) == 0)
                            goto LABEL_4023;
                          v1343 = *v12 + 24 * v13;
                          v1345 = (_DWORD **)(v1343 + 8);
                          v1344 = *(_DWORD **)(v1343 + 8);
                          v1347 = (_QWORD *)(v1343 + 16);
                          v1346 = *(_QWORD *)(v1343 + 16);
                          if ((unint64_t)v1344 >= v1346)
                          {
                            v1349 = *(_DWORD **)v1343;
                            v1350 = ((uint64_t)v1344 - *(_QWORD *)v1343) >> 2;
                            v1351 = v1350 + 1;
                            if ((unint64_t)(v1350 + 1) >> 62)
                              sub_4074();
                            v1352 = v1346 - (_QWORD)v1349;
                            if (v1352 >> 1 > v1351)
                              v1351 = v1352 >> 1;
                            if ((unint64_t)v1352 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1353 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1353 = v1351;
                            if (v1353)
                            {
                              v1354 = (char *)sub_43B2C((uint64_t)v1347, v1353);
                              v1344 = *v1345;
                              v1349 = *(_DWORD **)v1343;
                            }
                            else
                            {
                              v1354 = 0;
                            }
                            v1490 = &v1354[4 * v1350];
                            *(_DWORD *)v1490 = 193;
                            v1348 = v1490 + 4;
                            while (v1344 != v1349)
                            {
                              v1491 = *--v1344;
                              *((_DWORD *)v1490 - 1) = v1491;
                              v1490 -= 4;
                            }
                            *(_QWORD *)v1343 = v1490;
                            *v1345 = v1348;
                            *v1347 = &v1354[4 * v1353];
                            if (v1349)
                              operator delete(v1349);
                          }
                          else
                          {
                            *v1344 = 193;
                            v1348 = v1344 + 1;
                          }
                          *v1345 = v1348;
                          if (!*v14)
                          {
LABEL_4023:
                            if ((*((_BYTE *)__p + 24) & 4) == 0)
                              goto LABEL_4024;
                            v1492 = *v12 + 24 * v13;
                            v1494 = (_DWORD **)(v1492 + 8);
                            v1493 = *(_DWORD **)(v1492 + 8);
                            v1496 = (_QWORD *)(v1492 + 16);
                            v1495 = *(_QWORD *)(v1492 + 16);
                            if ((unint64_t)v1493 >= v1495)
                            {
                              v1498 = *(_DWORD **)v1492;
                              v1499 = ((uint64_t)v1493 - *(_QWORD *)v1492) >> 2;
                              v1500 = v1499 + 1;
                              if ((unint64_t)(v1499 + 1) >> 62)
                                sub_4074();
                              v1501 = v1495 - (_QWORD)v1498;
                              if (v1501 >> 1 > v1500)
                                v1500 = v1501 >> 1;
                              if ((unint64_t)v1501 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1502 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1502 = v1500;
                              if (v1502)
                              {
                                v1503 = (char *)sub_43B2C((uint64_t)v1496, v1502);
                                v1493 = *v1494;
                                v1498 = *(_DWORD **)v1492;
                              }
                              else
                              {
                                v1503 = 0;
                              }
                              v1630 = &v1503[4 * v1499];
                              *(_DWORD *)v1630 = 194;
                              v1497 = v1630 + 4;
                              while (v1493 != v1498)
                              {
                                v1631 = *--v1493;
                                *((_DWORD *)v1630 - 1) = v1631;
                                v1630 -= 4;
                              }
                              *(_QWORD *)v1492 = v1630;
                              *v1494 = v1497;
                              *v1496 = &v1503[4 * v1502];
                              if (v1498)
                                operator delete(v1498);
                            }
                            else
                            {
                              *v1493 = 194;
                              v1497 = v1493 + 1;
                            }
                            *v1494 = v1497;
                            if (!*v14)
                            {
LABEL_4024:
                              if ((*((_BYTE *)__p + 24) & 8) == 0)
                                goto LABEL_4025;
                              v1632 = *v12 + 24 * v13;
                              v1634 = (_DWORD **)(v1632 + 8);
                              v1633 = *(_DWORD **)(v1632 + 8);
                              v1636 = (_QWORD *)(v1632 + 16);
                              v1635 = *(_QWORD *)(v1632 + 16);
                              if ((unint64_t)v1633 >= v1635)
                              {
                                v1638 = *(_DWORD **)v1632;
                                v1639 = ((uint64_t)v1633 - *(_QWORD *)v1632) >> 2;
                                v1640 = v1639 + 1;
                                if ((unint64_t)(v1639 + 1) >> 62)
                                  sub_4074();
                                v1641 = v1635 - (_QWORD)v1638;
                                if (v1641 >> 1 > v1640)
                                  v1640 = v1641 >> 1;
                                if ((unint64_t)v1641 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1642 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1642 = v1640;
                                if (v1642)
                                {
                                  v1643 = (char *)sub_43B2C((uint64_t)v1636, v1642);
                                  v1633 = *v1634;
                                  v1638 = *(_DWORD **)v1632;
                                }
                                else
                                {
                                  v1643 = 0;
                                }
                                v1763 = &v1643[4 * v1639];
                                *(_DWORD *)v1763 = 195;
                                v1637 = v1763 + 4;
                                while (v1633 != v1638)
                                {
                                  v1764 = *--v1633;
                                  *((_DWORD *)v1763 - 1) = v1764;
                                  v1763 -= 4;
                                }
                                *(_QWORD *)v1632 = v1763;
                                *v1634 = v1637;
                                *v1636 = &v1643[4 * v1642];
                                if (v1638)
                                  operator delete(v1638);
                              }
                              else
                              {
                                *v1633 = 195;
                                v1637 = v1633 + 1;
                              }
                              *v1634 = v1637;
                              if (!*v14)
                              {
LABEL_4025:
                                if ((*((_BYTE *)__p + 24) & 0x10) == 0)
                                  goto LABEL_4026;
                                v1765 = *v12 + 24 * v13;
                                v1767 = (_DWORD **)(v1765 + 8);
                                v1766 = *(_DWORD **)(v1765 + 8);
                                v1769 = (_QWORD *)(v1765 + 16);
                                v1768 = *(_QWORD *)(v1765 + 16);
                                if ((unint64_t)v1766 >= v1768)
                                {
                                  v1771 = *(_DWORD **)v1765;
                                  v1772 = ((uint64_t)v1766 - *(_QWORD *)v1765) >> 2;
                                  v1773 = v1772 + 1;
                                  if ((unint64_t)(v1772 + 1) >> 62)
                                    sub_4074();
                                  v1774 = v1768 - (_QWORD)v1771;
                                  if (v1774 >> 1 > v1773)
                                    v1773 = v1774 >> 1;
                                  if ((unint64_t)v1774 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v1775 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v1775 = v1773;
                                  if (v1775)
                                  {
                                    v1776 = (char *)sub_43B2C((uint64_t)v1769, v1775);
                                    v1766 = *v1767;
                                    v1771 = *(_DWORD **)v1765;
                                  }
                                  else
                                  {
                                    v1776 = 0;
                                  }
                                  v1871 = &v1776[4 * v1772];
                                  *(_DWORD *)v1871 = 196;
                                  v1770 = v1871 + 4;
                                  while (v1766 != v1771)
                                  {
                                    v1872 = *--v1766;
                                    *((_DWORD *)v1871 - 1) = v1872;
                                    v1871 -= 4;
                                  }
                                  *(_QWORD *)v1765 = v1871;
                                  *v1767 = v1770;
                                  *v1769 = &v1776[4 * v1775];
                                  if (v1771)
                                    operator delete(v1771);
                                }
                                else
                                {
                                  *v1766 = 196;
                                  v1770 = v1766 + 1;
                                }
                                *v1767 = v1770;
                                if (!*v14)
                                {
LABEL_4026:
                                  if ((*((_BYTE *)__p + 24) & 0x20) == 0)
                                    goto LABEL_4027;
                                  v1873 = *v12 + 24 * v13;
                                  v1875 = (_DWORD **)(v1873 + 8);
                                  v1874 = *(_DWORD **)(v1873 + 8);
                                  v1877 = (_QWORD *)(v1873 + 16);
                                  v1876 = *(_QWORD *)(v1873 + 16);
                                  if ((unint64_t)v1874 >= v1876)
                                  {
                                    v1879 = *(_DWORD **)v1873;
                                    v1880 = ((uint64_t)v1874 - *(_QWORD *)v1873) >> 2;
                                    v1881 = v1880 + 1;
                                    if ((unint64_t)(v1880 + 1) >> 62)
                                      sub_4074();
                                    v1882 = v1876 - (_QWORD)v1879;
                                    if (v1882 >> 1 > v1881)
                                      v1881 = v1882 >> 1;
                                    if ((unint64_t)v1882 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1883 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1883 = v1881;
                                    if (v1883)
                                    {
                                      v1884 = (char *)sub_43B2C((uint64_t)v1877, v1883);
                                      v1874 = *v1875;
                                      v1879 = *(_DWORD **)v1873;
                                    }
                                    else
                                    {
                                      v1884 = 0;
                                    }
                                    v1962 = &v1884[4 * v1880];
                                    *(_DWORD *)v1962 = 197;
                                    v1878 = v1962 + 4;
                                    while (v1874 != v1879)
                                    {
                                      v1963 = *--v1874;
                                      *((_DWORD *)v1962 - 1) = v1963;
                                      v1962 -= 4;
                                    }
                                    *(_QWORD *)v1873 = v1962;
                                    *v1875 = v1878;
                                    *v1877 = &v1884[4 * v1883];
                                    if (v1879)
                                      operator delete(v1879);
                                  }
                                  else
                                  {
                                    *v1874 = 197;
                                    v1878 = v1874 + 1;
                                  }
                                  *v1875 = v1878;
                                  if (!*v14)
                                  {
LABEL_4027:
                                    if ((*((_BYTE *)__p + 24) & 0x40) == 0)
                                      goto LABEL_4028;
                                    v1964 = *v12 + 24 * v13;
                                    v1966 = (_DWORD **)(v1964 + 8);
                                    v1965 = *(_DWORD **)(v1964 + 8);
                                    v1968 = (_QWORD *)(v1964 + 16);
                                    v1967 = *(_QWORD *)(v1964 + 16);
                                    if ((unint64_t)v1965 >= v1967)
                                    {
                                      v1970 = *(_DWORD **)v1964;
                                      v1971 = ((uint64_t)v1965 - *(_QWORD *)v1964) >> 2;
                                      v1972 = v1971 + 1;
                                      if ((unint64_t)(v1971 + 1) >> 62)
                                        sub_4074();
                                      v1973 = v1967 - (_QWORD)v1970;
                                      if (v1973 >> 1 > v1972)
                                        v1972 = v1973 >> 1;
                                      if ((unint64_t)v1973 >= 0x7FFFFFFFFFFFFFFCLL)
                                        v1974 = 0x3FFFFFFFFFFFFFFFLL;
                                      else
                                        v1974 = v1972;
                                      if (v1974)
                                      {
                                        v1975 = (char *)sub_43B2C((uint64_t)v1968, v1974);
                                        v1965 = *v1966;
                                        v1970 = *(_DWORD **)v1964;
                                      }
                                      else
                                      {
                                        v1975 = 0;
                                      }
                                      v2047 = &v1975[4 * v1971];
                                      *(_DWORD *)v2047 = 198;
                                      v1969 = v2047 + 4;
                                      while (v1965 != v1970)
                                      {
                                        v2048 = *--v1965;
                                        *((_DWORD *)v2047 - 1) = v2048;
                                        v2047 -= 4;
                                      }
                                      *(_QWORD *)v1964 = v2047;
                                      *v1966 = v1969;
                                      *v1968 = &v1975[4 * v1974];
                                      if (v1970)
                                        operator delete(v1970);
                                    }
                                    else
                                    {
                                      *v1965 = 198;
                                      v1969 = v1965 + 1;
                                    }
                                    *v1966 = v1969;
                                    if (!*v14)
                                    {
LABEL_4028:
                                      if ((*((_BYTE *)__p + 24) & 0x80) == 0)
                                        goto LABEL_4029;
                                      v2049 = *v12 + 24 * v13;
                                      v2051 = (_DWORD **)(v2049 + 8);
                                      v2050 = *(_DWORD **)(v2049 + 8);
                                      v2053 = (_QWORD *)(v2049 + 16);
                                      v2052 = *(_QWORD *)(v2049 + 16);
                                      if ((unint64_t)v2050 >= v2052)
                                      {
                                        v2055 = *(_DWORD **)v2049;
                                        v2056 = ((uint64_t)v2050 - *(_QWORD *)v2049) >> 2;
                                        v2057 = v2056 + 1;
                                        if ((unint64_t)(v2056 + 1) >> 62)
                                          sub_4074();
                                        v2058 = v2052 - (_QWORD)v2055;
                                        if (v2058 >> 1 > v2057)
                                          v2057 = v2058 >> 1;
                                        if ((unint64_t)v2058 >= 0x7FFFFFFFFFFFFFFCLL)
                                          v2059 = 0x3FFFFFFFFFFFFFFFLL;
                                        else
                                          v2059 = v2057;
                                        if (v2059)
                                        {
                                          v2060 = (char *)sub_43B2C((uint64_t)v2053, v2059);
                                          v2050 = *v2051;
                                          v2055 = *(_DWORD **)v2049;
                                        }
                                        else
                                        {
                                          v2060 = 0;
                                        }
                                        v2131 = &v2060[4 * v2056];
                                        *(_DWORD *)v2131 = 199;
                                        v2054 = v2131 + 4;
                                        while (v2050 != v2055)
                                        {
                                          v2132 = *--v2050;
                                          *((_DWORD *)v2131 - 1) = v2132;
                                          v2131 -= 4;
                                        }
                                        *(_QWORD *)v2049 = v2131;
                                        *v2051 = v2054;
                                        *v2053 = &v2060[4 * v2059];
                                        if (v2055)
                                          operator delete(v2055);
                                      }
                                      else
                                      {
                                        *v2050 = 199;
                                        v2054 = v2050 + 1;
                                      }
                                      *v2051 = v2054;
                                      if (!*v14)
                                      {
LABEL_4029:
                                        if ((*((_BYTE *)__p + 25) & 1) == 0)
                                          goto LABEL_4030;
                                        v2133 = *v12 + 24 * v13;
                                        v2135 = (_DWORD **)(v2133 + 8);
                                        v2134 = *(_DWORD **)(v2133 + 8);
                                        v2137 = (_QWORD *)(v2133 + 16);
                                        v2136 = *(_QWORD *)(v2133 + 16);
                                        if ((unint64_t)v2134 >= v2136)
                                        {
                                          v2139 = *(_DWORD **)v2133;
                                          v2140 = ((uint64_t)v2134 - *(_QWORD *)v2133) >> 2;
                                          v2141 = v2140 + 1;
                                          if ((unint64_t)(v2140 + 1) >> 62)
                                            sub_4074();
                                          v2142 = v2136 - (_QWORD)v2139;
                                          if (v2142 >> 1 > v2141)
                                            v2141 = v2142 >> 1;
                                          if ((unint64_t)v2142 >= 0x7FFFFFFFFFFFFFFCLL)
                                            v2143 = 0x3FFFFFFFFFFFFFFFLL;
                                          else
                                            v2143 = v2141;
                                          if (v2143)
                                          {
                                            v2144 = (char *)sub_43B2C((uint64_t)v2137, v2143);
                                            v2134 = *v2135;
                                            v2139 = *(_DWORD **)v2133;
                                          }
                                          else
                                          {
                                            v2144 = 0;
                                          }
                                          v2207 = &v2144[4 * v2140];
                                          *(_DWORD *)v2207 = 200;
                                          v2138 = v2207 + 4;
                                          while (v2134 != v2139)
                                          {
                                            v2208 = *--v2134;
                                            *((_DWORD *)v2207 - 1) = v2208;
                                            v2207 -= 4;
                                          }
                                          *(_QWORD *)v2133 = v2207;
                                          *v2135 = v2138;
                                          *v2137 = &v2144[4 * v2143];
                                          if (v2139)
                                            operator delete(v2139);
                                        }
                                        else
                                        {
                                          *v2134 = 200;
                                          v2138 = v2134 + 1;
                                        }
                                        *v2135 = v2138;
                                        if (!*v14)
                                        {
LABEL_4030:
                                          if ((*((_BYTE *)__p + 25) & 2) == 0)
                                            goto LABEL_4031;
                                          v2209 = *v12 + 24 * v13;
                                          v2211 = (_DWORD **)(v2209 + 8);
                                          v2210 = *(_DWORD **)(v2209 + 8);
                                          v2213 = (_QWORD *)(v2209 + 16);
                                          v2212 = *(_QWORD *)(v2209 + 16);
                                          if ((unint64_t)v2210 >= v2212)
                                          {
                                            v2215 = *(_DWORD **)v2209;
                                            v2216 = ((uint64_t)v2210 - *(_QWORD *)v2209) >> 2;
                                            v2217 = v2216 + 1;
                                            if ((unint64_t)(v2216 + 1) >> 62)
                                              sub_4074();
                                            v2218 = v2212 - (_QWORD)v2215;
                                            if (v2218 >> 1 > v2217)
                                              v2217 = v2218 >> 1;
                                            if ((unint64_t)v2218 >= 0x7FFFFFFFFFFFFFFCLL)
                                              v2219 = 0x3FFFFFFFFFFFFFFFLL;
                                            else
                                              v2219 = v2217;
                                            if (v2219)
                                            {
                                              v2220 = (char *)sub_43B2C((uint64_t)v2213, v2219);
                                              v2210 = *v2211;
                                              v2215 = *(_DWORD **)v2209;
                                            }
                                            else
                                            {
                                              v2220 = 0;
                                            }
                                            v2278 = &v2220[4 * v2216];
                                            *(_DWORD *)v2278 = 201;
                                            v2214 = v2278 + 4;
                                            while (v2210 != v2215)
                                            {
                                              v2279 = *--v2210;
                                              *((_DWORD *)v2278 - 1) = v2279;
                                              v2278 -= 4;
                                            }
                                            *(_QWORD *)v2209 = v2278;
                                            *v2211 = v2214;
                                            *v2213 = &v2220[4 * v2219];
                                            if (v2215)
                                              operator delete(v2215);
                                          }
                                          else
                                          {
                                            *v2210 = 201;
                                            v2214 = v2210 + 1;
                                          }
                                          *v2211 = v2214;
                                          if (!*v14)
                                          {
LABEL_4031:
                                            if ((*((_BYTE *)__p + 25) & 4) != 0)
                                            {
                                              v223 = *v12 + 24 * v13;
                                              v225 = (int **)(v223 + 8);
                                              v224 = *(int **)(v223 + 8);
                                              v227 = (_QWORD *)(v223 + 16);
                                              v2280 = *(_QWORD *)(v223 + 16);
                                              if ((unint64_t)v224 < v2280)
                                              {
                                                v228 = 202;
                                                goto LABEL_2185;
                                              }
                                              v229 = *(int **)v223;
                                              v2281 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                                              v2282 = v2281 + 1;
                                              if ((unint64_t)(v2281 + 1) >> 62)
                                                sub_4074();
                                              v2283 = v2280 - (_QWORD)v229;
                                              if (v2283 >> 1 > v2282)
                                                v2282 = v2283 >> 1;
                                              if ((unint64_t)v2283 >= 0x7FFFFFFFFFFFFFFCLL)
                                                v233 = 0x3FFFFFFFFFFFFFFFLL;
                                              else
                                                v233 = v2282;
                                              if (v233)
                                              {
                                                v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                                                v224 = *v225;
                                                v229 = *(int **)v223;
                                              }
                                              else
                                              {
                                                v234 = 0;
                                              }
                                              v457 = &v234[4 * v2281];
                                              *(_DWORD *)v457 = 202;
                                              v458 = (int *)(v457 + 4);
                                              while (v224 != v229)
                                              {
                                                v2340 = *--v224;
                                                *((_DWORD *)v457 - 1) = v2340;
                                                v457 -= 4;
                                              }
                                              goto LABEL_3707;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 8:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 2) & 0x80) == 0)
              goto LABEL_493;
            v105 = *v12 + 24 * v13;
            v107 = (_DWORD **)(v105 + 8);
            v106 = *(_DWORD **)(v105 + 8);
            v109 = (_QWORD *)(v105 + 16);
            v108 = *(_QWORD *)(v105 + 16);
            if ((unint64_t)v106 >= v108)
            {
              v201 = *(_DWORD **)v105;
              v202 = ((uint64_t)v106 - *(_QWORD *)v105) >> 2;
              v203 = v202 + 1;
              if ((unint64_t)(v202 + 1) >> 62)
                sub_4074();
              v204 = v108 - (_QWORD)v201;
              if (v204 >> 1 > v203)
                v203 = v204 >> 1;
              if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
                v205 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v205 = v203;
              if (v205)
              {
                v206 = (char *)sub_43B2C((uint64_t)v109, v205);
                v106 = *v107;
                v201 = *(_DWORD **)v105;
              }
              else
              {
                v206 = 0;
              }
              v429 = &v206[4 * v202];
              *(_DWORD *)v429 = 23;
              v110 = v429 + 4;
              while (v106 != v201)
              {
                v430 = *--v106;
                *((_DWORD *)v429 - 1) = v430;
                v429 -= 4;
              }
              *(_QWORD *)v105 = v429;
              *v107 = v110;
              *v109 = &v206[4 * v205];
              if (v201)
                operator delete(v201);
            }
            else
            {
              *v106 = 23;
              v110 = v106 + 1;
            }
            *v107 = v110;
            if (!*v14)
            {
LABEL_493:
              if ((*((_BYTE *)__p + 3) & 1) == 0)
                goto LABEL_1269;
              v431 = *v12 + 24 * v13;
              v433 = (_DWORD **)(v431 + 8);
              v432 = *(_DWORD **)(v431 + 8);
              v435 = (_QWORD *)(v431 + 16);
              v434 = *(_QWORD *)(v431 + 16);
              if ((unint64_t)v432 >= v434)
              {
                v437 = *(_DWORD **)v431;
                v438 = ((uint64_t)v432 - *(_QWORD *)v431) >> 2;
                v439 = v438 + 1;
                if ((unint64_t)(v438 + 1) >> 62)
                  sub_4074();
                v440 = v434 - (_QWORD)v437;
                if (v440 >> 1 > v439)
                  v439 = v440 >> 1;
                if ((unint64_t)v440 >= 0x7FFFFFFFFFFFFFFCLL)
                  v441 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v441 = v439;
                if (v441)
                {
                  v442 = (char *)sub_43B2C((uint64_t)v435, v441);
                  v432 = *v433;
                  v437 = *(_DWORD **)v431;
                }
                else
                {
                  v442 = 0;
                }
                v628 = &v442[4 * v438];
                *(_DWORD *)v628 = 24;
                v436 = v628 + 4;
                while (v432 != v437)
                {
                  v629 = *--v432;
                  *((_DWORD *)v628 - 1) = v629;
                  v628 -= 4;
                }
                *(_QWORD *)v431 = v628;
                *v433 = v436;
                *v435 = &v442[4 * v441];
                if (v437)
                  operator delete(v437);
              }
              else
              {
                *v432 = 24;
                v436 = v432 + 1;
              }
              *v433 = v436;
              if (!*v14)
              {
LABEL_1269:
                if ((*((_BYTE *)__p + 3) & 2) == 0)
                  goto LABEL_4032;
                v630 = *v12 + 24 * v13;
                v632 = (_DWORD **)(v630 + 8);
                v631 = *(_DWORD **)(v630 + 8);
                v634 = (_QWORD *)(v630 + 16);
                v633 = *(_QWORD *)(v630 + 16);
                if ((unint64_t)v631 >= v633)
                {
                  v636 = *(_DWORD **)v630;
                  v637 = ((uint64_t)v631 - *(_QWORD *)v630) >> 2;
                  v638 = v637 + 1;
                  if ((unint64_t)(v637 + 1) >> 62)
                    sub_4074();
                  v639 = v633 - (_QWORD)v636;
                  if (v639 >> 1 > v638)
                    v638 = v639 >> 1;
                  if ((unint64_t)v639 >= 0x7FFFFFFFFFFFFFFCLL)
                    v640 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v640 = v638;
                  if (v640)
                  {
                    v641 = (char *)sub_43B2C((uint64_t)v634, v640);
                    v631 = *v632;
                    v636 = *(_DWORD **)v630;
                  }
                  else
                  {
                    v641 = 0;
                  }
                  v824 = &v641[4 * v637];
                  *(_DWORD *)v824 = 25;
                  v635 = v824 + 4;
                  while (v631 != v636)
                  {
                    v825 = *--v631;
                    *((_DWORD *)v824 - 1) = v825;
                    v824 -= 4;
                  }
                  *(_QWORD *)v630 = v824;
                  *v632 = v635;
                  *v634 = &v641[4 * v640];
                  if (v636)
                    operator delete(v636);
                }
                else
                {
                  *v631 = 25;
                  v635 = v631 + 1;
                }
                *v632 = v635;
                if (!*v14)
                {
LABEL_4032:
                  if ((*((_BYTE *)__p + 3) & 4) == 0)
                    goto LABEL_4033;
                  v826 = *v12 + 24 * v13;
                  v828 = (_DWORD **)(v826 + 8);
                  v827 = *(_DWORD **)(v826 + 8);
                  v830 = (_QWORD *)(v826 + 16);
                  v829 = *(_QWORD *)(v826 + 16);
                  if ((unint64_t)v827 >= v829)
                  {
                    v832 = *(_DWORD **)v826;
                    v833 = ((uint64_t)v827 - *(_QWORD *)v826) >> 2;
                    v834 = v833 + 1;
                    if ((unint64_t)(v833 + 1) >> 62)
                      sub_4074();
                    v835 = v829 - (_QWORD)v832;
                    if (v835 >> 1 > v834)
                      v834 = v835 >> 1;
                    if ((unint64_t)v835 >= 0x7FFFFFFFFFFFFFFCLL)
                      v836 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v836 = v834;
                    if (v836)
                    {
                      v837 = (char *)sub_43B2C((uint64_t)v830, v836);
                      v827 = *v828;
                      v832 = *(_DWORD **)v826;
                    }
                    else
                    {
                      v837 = 0;
                    }
                    v1008 = &v837[4 * v833];
                    *(_DWORD *)v1008 = 26;
                    v831 = v1008 + 4;
                    while (v827 != v832)
                    {
                      v1009 = *--v827;
                      *((_DWORD *)v1008 - 1) = v1009;
                      v1008 -= 4;
                    }
                    *(_QWORD *)v826 = v1008;
                    *v828 = v831;
                    *v830 = &v837[4 * v836];
                    if (v832)
                      operator delete(v832);
                  }
                  else
                  {
                    *v827 = 26;
                    v831 = v827 + 1;
                  }
                  *v828 = v831;
                  if (!*v14)
                  {
LABEL_4033:
                    if ((*((_BYTE *)__p + 3) & 8) != 0)
                    {
                      v223 = *v12 + 24 * v13;
                      v225 = (int **)(v223 + 8);
                      v224 = *(int **)(v223 + 8);
                      v227 = (_QWORD *)(v223 + 16);
                      v1010 = *(_QWORD *)(v223 + 16);
                      if ((unint64_t)v224 < v1010)
                      {
                        v228 = 27;
                        goto LABEL_2185;
                      }
                      v229 = *(int **)v223;
                      v1011 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                      v1012 = v1011 + 1;
                      if ((unint64_t)(v1011 + 1) >> 62)
                        sub_4074();
                      v1013 = v1010 - (_QWORD)v229;
                      if (v1013 >> 1 > v1012)
                        v1012 = v1013 >> 1;
                      if ((unint64_t)v1013 >= 0x7FFFFFFFFFFFFFFCLL)
                        v233 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v233 = v1012;
                      if (v233)
                      {
                        v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                        v224 = *v225;
                        v229 = *(int **)v223;
                      }
                      else
                      {
                        v234 = 0;
                      }
                      v457 = &v234[4 * v1011];
                      *(_DWORD *)v457 = 27;
                      v458 = (int *)(v457 + 4);
                      while (v224 != v229)
                      {
                        v1194 = *--v224;
                        *((_DWORD *)v457 - 1) = v1194;
                        v457 -= 4;
                      }
                      goto LABEL_3707;
                    }
                  }
                }
              }
            }
          }
          break;
        case 9:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 8) & 0x20) == 0)
              goto LABEL_284;
            v45 = *v12 + 24 * v13;
            v47 = (_DWORD **)(v45 + 8);
            v46 = *(_DWORD **)(v45 + 8);
            v49 = (_QWORD *)(v45 + 16);
            v48 = *(_QWORD *)(v45 + 16);
            if ((unint64_t)v46 >= v48)
            {
              v135 = *(_DWORD **)v45;
              v136 = ((uint64_t)v46 - *(_QWORD *)v45) >> 2;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62)
                sub_4074();
              v138 = v48 - (_QWORD)v135;
              if (v138 >> 1 > v137)
                v137 = v138 >> 1;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
                v139 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                v140 = (char *)sub_43B2C((uint64_t)v49, v139);
                v46 = *v47;
                v135 = *(_DWORD **)v45;
              }
              else
              {
                v140 = 0;
              }
              v263 = &v140[4 * v136];
              *(_DWORD *)v263 = 69;
              v50 = v263 + 4;
              while (v46 != v135)
              {
                v264 = *--v46;
                *((_DWORD *)v263 - 1) = v264;
                v263 -= 4;
              }
              *(_QWORD *)v45 = v263;
              *v47 = v50;
              *v49 = &v140[4 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *v46 = 69;
              v50 = v46 + 1;
            }
            *v47 = v50;
            if (!*v14)
            {
LABEL_284:
              if ((*((_BYTE *)__p + 8) & 0x40) == 0)
                goto LABEL_3674;
              v265 = *v12 + 24 * v13;
              v267 = (_DWORD **)(v265 + 8);
              v266 = *(_DWORD **)(v265 + 8);
              v269 = (_QWORD *)(v265 + 16);
              v268 = *(_QWORD *)(v265 + 16);
              if ((unint64_t)v266 >= v268)
              {
                v271 = *(_DWORD **)v265;
                v272 = ((uint64_t)v266 - *(_QWORD *)v265) >> 2;
                v273 = v272 + 1;
                if ((unint64_t)(v272 + 1) >> 62)
                  sub_4074();
                v274 = v268 - (_QWORD)v271;
                if (v274 >> 1 > v273)
                  v273 = v274 >> 1;
                if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
                  v275 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v275 = v273;
                if (v275)
                {
                  v276 = (char *)sub_43B2C((uint64_t)v269, v275);
                  v266 = *v267;
                  v271 = *(_DWORD **)v265;
                }
                else
                {
                  v276 = 0;
                }
                v488 = &v276[4 * v272];
                *(_DWORD *)v488 = 70;
                v270 = v488 + 4;
                while (v266 != v271)
                {
                  v489 = *--v266;
                  *((_DWORD *)v488 - 1) = v489;
                  v488 -= 4;
                }
                *(_QWORD *)v265 = v488;
                *v267 = v270;
                *v269 = &v276[4 * v275];
                if (v271)
                  operator delete(v271);
              }
              else
              {
                *v266 = 70;
                v270 = v266 + 1;
              }
              *v267 = v270;
              if (!*v14)
              {
LABEL_3674:
                if ((*((_BYTE *)__p + 8) & 0x80) == 0)
                  goto LABEL_4034;
                v490 = *v12 + 24 * v13;
                v492 = (_DWORD **)(v490 + 8);
                v491 = *(_DWORD **)(v490 + 8);
                v494 = (_QWORD *)(v490 + 16);
                v493 = *(_QWORD *)(v490 + 16);
                if ((unint64_t)v491 >= v493)
                {
                  v496 = *(_DWORD **)v490;
                  v497 = ((uint64_t)v491 - *(_QWORD *)v490) >> 2;
                  v498 = v497 + 1;
                  if ((unint64_t)(v497 + 1) >> 62)
                    sub_4074();
                  v499 = v493 - (_QWORD)v496;
                  if (v499 >> 1 > v498)
                    v498 = v499 >> 1;
                  if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFFCLL)
                    v500 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v500 = v498;
                  if (v500)
                  {
                    v501 = (char *)sub_43B2C((uint64_t)v494, v500);
                    v491 = *v492;
                    v496 = *(_DWORD **)v490;
                  }
                  else
                  {
                    v501 = 0;
                  }
                  v692 = &v501[4 * v497];
                  *(_DWORD *)v692 = 71;
                  v495 = v692 + 4;
                  while (v491 != v496)
                  {
                    v693 = *--v491;
                    *((_DWORD *)v692 - 1) = v693;
                    v692 -= 4;
                  }
                  *(_QWORD *)v490 = v692;
                  *v492 = v495;
                  *v494 = &v501[4 * v500];
                  if (v496)
                    operator delete(v496);
                }
                else
                {
                  *v491 = 71;
                  v495 = v491 + 1;
                }
                *v492 = v495;
                if (!*v14)
                {
LABEL_4034:
                  if ((*((_BYTE *)__p + 9) & 1) == 0)
                    goto LABEL_4035;
                  v694 = *v12 + 24 * v13;
                  v696 = (_DWORD **)(v694 + 8);
                  v695 = *(_DWORD **)(v694 + 8);
                  v698 = (_QWORD *)(v694 + 16);
                  v697 = *(_QWORD *)(v694 + 16);
                  if ((unint64_t)v695 >= v697)
                  {
                    v700 = *(_DWORD **)v694;
                    v701 = ((uint64_t)v695 - *(_QWORD *)v694) >> 2;
                    v702 = v701 + 1;
                    if ((unint64_t)(v701 + 1) >> 62)
                      sub_4074();
                    v703 = v697 - (_QWORD)v700;
                    if (v703 >> 1 > v702)
                      v702 = v703 >> 1;
                    if ((unint64_t)v703 >= 0x7FFFFFFFFFFFFFFCLL)
                      v704 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v704 = v702;
                    if (v704)
                    {
                      v705 = (char *)sub_43B2C((uint64_t)v698, v704);
                      v695 = *v696;
                      v700 = *(_DWORD **)v694;
                    }
                    else
                    {
                      v705 = 0;
                    }
                    v881 = &v705[4 * v701];
                    *(_DWORD *)v881 = 72;
                    v699 = v881 + 4;
                    while (v695 != v700)
                    {
                      v882 = *--v695;
                      *((_DWORD *)v881 - 1) = v882;
                      v881 -= 4;
                    }
                    *(_QWORD *)v694 = v881;
                    *v696 = v699;
                    *v698 = &v705[4 * v704];
                    if (v700)
                      operator delete(v700);
                  }
                  else
                  {
                    *v695 = 72;
                    v699 = v695 + 1;
                  }
                  *v696 = v699;
                  if (!*v14)
                  {
LABEL_4035:
                    if ((*((_BYTE *)__p + 9) & 2) == 0)
                      goto LABEL_4036;
                    v883 = *v12 + 24 * v13;
                    v885 = (_DWORD **)(v883 + 8);
                    v884 = *(_DWORD **)(v883 + 8);
                    v887 = (_QWORD *)(v883 + 16);
                    v886 = *(_QWORD *)(v883 + 16);
                    if ((unint64_t)v884 >= v886)
                    {
                      v889 = *(_DWORD **)v883;
                      v890 = ((uint64_t)v884 - *(_QWORD *)v883) >> 2;
                      v891 = v890 + 1;
                      if ((unint64_t)(v890 + 1) >> 62)
                        sub_4074();
                      v892 = v886 - (_QWORD)v889;
                      if (v892 >> 1 > v891)
                        v891 = v892 >> 1;
                      if ((unint64_t)v892 >= 0x7FFFFFFFFFFFFFFCLL)
                        v893 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v893 = v891;
                      if (v893)
                      {
                        v894 = (char *)sub_43B2C((uint64_t)v887, v893);
                        v884 = *v885;
                        v889 = *(_DWORD **)v883;
                      }
                      else
                      {
                        v894 = 0;
                      }
                      v1056 = &v894[4 * v890];
                      *(_DWORD *)v1056 = 73;
                      v888 = v1056 + 4;
                      while (v884 != v889)
                      {
                        v1057 = *--v884;
                        *((_DWORD *)v1056 - 1) = v1057;
                        v1056 -= 4;
                      }
                      *(_QWORD *)v883 = v1056;
                      *v885 = v888;
                      *v887 = &v894[4 * v893];
                      if (v889)
                        operator delete(v889);
                    }
                    else
                    {
                      *v884 = 73;
                      v888 = v884 + 1;
                    }
                    *v885 = v888;
                    if (!*v14)
                    {
LABEL_4036:
                      if ((*((_BYTE *)__p + 9) & 4) == 0)
                        goto LABEL_4037;
                      v1058 = *v12 + 24 * v13;
                      v1060 = (_DWORD **)(v1058 + 8);
                      v1059 = *(_DWORD **)(v1058 + 8);
                      v1062 = (_QWORD *)(v1058 + 16);
                      v1061 = *(_QWORD *)(v1058 + 16);
                      if ((unint64_t)v1059 >= v1061)
                      {
                        v1064 = *(_DWORD **)v1058;
                        v1065 = ((uint64_t)v1059 - *(_QWORD *)v1058) >> 2;
                        v1066 = v1065 + 1;
                        if ((unint64_t)(v1065 + 1) >> 62)
                          sub_4074();
                        v1067 = v1061 - (_QWORD)v1064;
                        if (v1067 >> 1 > v1066)
                          v1066 = v1067 >> 1;
                        if ((unint64_t)v1067 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1068 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1068 = v1066;
                        if (v1068)
                        {
                          v1069 = (char *)sub_43B2C((uint64_t)v1062, v1068);
                          v1059 = *v1060;
                          v1064 = *(_DWORD **)v1058;
                        }
                        else
                        {
                          v1069 = 0;
                        }
                        v1229 = &v1069[4 * v1065];
                        *(_DWORD *)v1229 = 74;
                        v1063 = v1229 + 4;
                        while (v1059 != v1064)
                        {
                          v1230 = *--v1059;
                          *((_DWORD *)v1229 - 1) = v1230;
                          v1229 -= 4;
                        }
                        *(_QWORD *)v1058 = v1229;
                        *v1060 = v1063;
                        *v1062 = &v1069[4 * v1068];
                        if (v1064)
                          operator delete(v1064);
                      }
                      else
                      {
                        *v1059 = 74;
                        v1063 = v1059 + 1;
                      }
                      *v1060 = v1063;
                      if (!*v14)
                      {
LABEL_4037:
                        if ((*((_BYTE *)__p + 9) & 8) == 0)
                          goto LABEL_4038;
                        v1231 = *v12 + 24 * v13;
                        v1233 = (_DWORD **)(v1231 + 8);
                        v1232 = *(_DWORD **)(v1231 + 8);
                        v1235 = (_QWORD *)(v1231 + 16);
                        v1234 = *(_QWORD *)(v1231 + 16);
                        if ((unint64_t)v1232 >= v1234)
                        {
                          v1237 = *(_DWORD **)v1231;
                          v1238 = ((uint64_t)v1232 - *(_QWORD *)v1231) >> 2;
                          v1239 = v1238 + 1;
                          if ((unint64_t)(v1238 + 1) >> 62)
                            sub_4074();
                          v1240 = v1234 - (_QWORD)v1237;
                          if (v1240 >> 1 > v1239)
                            v1239 = v1240 >> 1;
                          if ((unint64_t)v1240 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1241 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1241 = v1239;
                          if (v1241)
                          {
                            v1242 = (char *)sub_43B2C((uint64_t)v1235, v1241);
                            v1232 = *v1233;
                            v1237 = *(_DWORD **)v1231;
                          }
                          else
                          {
                            v1242 = 0;
                          }
                          v1378 = &v1242[4 * v1238];
                          *(_DWORD *)v1378 = 75;
                          v1236 = v1378 + 4;
                          while (v1232 != v1237)
                          {
                            v1379 = *--v1232;
                            *((_DWORD *)v1378 - 1) = v1379;
                            v1378 -= 4;
                          }
                          *(_QWORD *)v1231 = v1378;
                          *v1233 = v1236;
                          *v1235 = &v1242[4 * v1241];
                          if (v1237)
                            operator delete(v1237);
                        }
                        else
                        {
                          *v1232 = 75;
                          v1236 = v1232 + 1;
                        }
                        *v1233 = v1236;
                        if (!*v14)
                        {
LABEL_4038:
                          if ((*((_BYTE *)__p + 9) & 0x10) == 0)
                            goto LABEL_4039;
                          v1380 = *v12 + 24 * v13;
                          v1382 = (_DWORD **)(v1380 + 8);
                          v1381 = *(_DWORD **)(v1380 + 8);
                          v1384 = (_QWORD *)(v1380 + 16);
                          v1383 = *(_QWORD *)(v1380 + 16);
                          if ((unint64_t)v1381 >= v1383)
                          {
                            v1386 = *(_DWORD **)v1380;
                            v1387 = ((uint64_t)v1381 - *(_QWORD *)v1380) >> 2;
                            v1388 = v1387 + 1;
                            if ((unint64_t)(v1387 + 1) >> 62)
                              sub_4074();
                            v1389 = v1383 - (_QWORD)v1386;
                            if (v1389 >> 1 > v1388)
                              v1388 = v1389 >> 1;
                            if ((unint64_t)v1389 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1390 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1390 = v1388;
                            if (v1390)
                            {
                              v1391 = (char *)sub_43B2C((uint64_t)v1384, v1390);
                              v1381 = *v1382;
                              v1386 = *(_DWORD **)v1380;
                            }
                            else
                            {
                              v1391 = 0;
                            }
                            v1518 = &v1391[4 * v1387];
                            *(_DWORD *)v1518 = 76;
                            v1385 = v1518 + 4;
                            while (v1381 != v1386)
                            {
                              v1519 = *--v1381;
                              *((_DWORD *)v1518 - 1) = v1519;
                              v1518 -= 4;
                            }
                            *(_QWORD *)v1380 = v1518;
                            *v1382 = v1385;
                            *v1384 = &v1391[4 * v1390];
                            if (v1386)
                              operator delete(v1386);
                          }
                          else
                          {
                            *v1381 = 76;
                            v1385 = v1381 + 1;
                          }
                          *v1382 = v1385;
                          if (!*v14)
                          {
LABEL_4039:
                            if ((*((_BYTE *)__p + 9) & 0x20) == 0)
                              goto LABEL_4040;
                            v1520 = *v12 + 24 * v13;
                            v1522 = (_DWORD **)(v1520 + 8);
                            v1521 = *(_DWORD **)(v1520 + 8);
                            v1524 = (_QWORD *)(v1520 + 16);
                            v1523 = *(_QWORD *)(v1520 + 16);
                            if ((unint64_t)v1521 >= v1523)
                            {
                              v1526 = *(_DWORD **)v1520;
                              v1527 = ((uint64_t)v1521 - *(_QWORD *)v1520) >> 2;
                              v1528 = v1527 + 1;
                              if ((unint64_t)(v1527 + 1) >> 62)
                                sub_4074();
                              v1529 = v1523 - (_QWORD)v1526;
                              if (v1529 >> 1 > v1528)
                                v1528 = v1529 >> 1;
                              if ((unint64_t)v1529 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1530 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1530 = v1528;
                              if (v1530)
                              {
                                v1531 = (char *)sub_43B2C((uint64_t)v1524, v1530);
                                v1521 = *v1522;
                                v1526 = *(_DWORD **)v1520;
                              }
                              else
                              {
                                v1531 = 0;
                              }
                              v1659 = &v1531[4 * v1527];
                              *(_DWORD *)v1659 = 77;
                              v1525 = v1659 + 4;
                              while (v1521 != v1526)
                              {
                                v1660 = *--v1521;
                                *((_DWORD *)v1659 - 1) = v1660;
                                v1659 -= 4;
                              }
                              *(_QWORD *)v1520 = v1659;
                              *v1522 = v1525;
                              *v1524 = &v1531[4 * v1530];
                              if (v1526)
                                operator delete(v1526);
                            }
                            else
                            {
                              *v1521 = 77;
                              v1525 = v1521 + 1;
                            }
                            *v1522 = v1525;
                            if (!*v14)
                            {
LABEL_4040:
                              if ((*((_BYTE *)__p + 9) & 0x40) == 0)
                                goto LABEL_4041;
                              v1661 = *v12 + 24 * v13;
                              v1663 = (_DWORD **)(v1661 + 8);
                              v1662 = *(_DWORD **)(v1661 + 8);
                              v1665 = (_QWORD *)(v1661 + 16);
                              v1664 = *(_QWORD *)(v1661 + 16);
                              if ((unint64_t)v1662 >= v1664)
                              {
                                v1667 = *(_DWORD **)v1661;
                                v1668 = ((uint64_t)v1662 - *(_QWORD *)v1661) >> 2;
                                v1669 = v1668 + 1;
                                if ((unint64_t)(v1668 + 1) >> 62)
                                  sub_4074();
                                v1670 = v1664 - (_QWORD)v1667;
                                if (v1670 >> 1 > v1669)
                                  v1669 = v1670 >> 1;
                                if ((unint64_t)v1670 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1671 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1671 = v1669;
                                if (v1671)
                                {
                                  v1672 = (char *)sub_43B2C((uint64_t)v1665, v1671);
                                  v1662 = *v1663;
                                  v1667 = *(_DWORD **)v1661;
                                }
                                else
                                {
                                  v1672 = 0;
                                }
                                v1783 = &v1672[4 * v1668];
                                *(_DWORD *)v1783 = 78;
                                v1666 = v1783 + 4;
                                while (v1662 != v1667)
                                {
                                  v1784 = *--v1662;
                                  *((_DWORD *)v1783 - 1) = v1784;
                                  v1783 -= 4;
                                }
                                *(_QWORD *)v1661 = v1783;
                                *v1663 = v1666;
                                *v1665 = &v1672[4 * v1671];
                                if (v1667)
                                  operator delete(v1667);
                              }
                              else
                              {
                                *v1662 = 78;
                                v1666 = v1662 + 1;
                              }
                              *v1663 = v1666;
                              if (!*v14)
                              {
LABEL_4041:
                                if ((*((_BYTE *)__p + 9) & 0x80) == 0)
                                  goto LABEL_4042;
                                v1785 = *v12 + 24 * v13;
                                v1787 = (_DWORD **)(v1785 + 8);
                                v1786 = *(_DWORD **)(v1785 + 8);
                                v1789 = (_QWORD *)(v1785 + 16);
                                v1788 = *(_QWORD *)(v1785 + 16);
                                if ((unint64_t)v1786 >= v1788)
                                {
                                  v1791 = *(_DWORD **)v1785;
                                  v1792 = ((uint64_t)v1786 - *(_QWORD *)v1785) >> 2;
                                  v1793 = v1792 + 1;
                                  if ((unint64_t)(v1792 + 1) >> 62)
                                    sub_4074();
                                  v1794 = v1788 - (_QWORD)v1791;
                                  if (v1794 >> 1 > v1793)
                                    v1793 = v1794 >> 1;
                                  if ((unint64_t)v1794 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v1795 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v1795 = v1793;
                                  if (v1795)
                                  {
                                    v1796 = (char *)sub_43B2C((uint64_t)v1789, v1795);
                                    v1786 = *v1787;
                                    v1791 = *(_DWORD **)v1785;
                                  }
                                  else
                                  {
                                    v1796 = 0;
                                  }
                                  v1886 = &v1796[4 * v1792];
                                  *(_DWORD *)v1886 = 79;
                                  v1790 = v1886 + 4;
                                  while (v1786 != v1791)
                                  {
                                    v1887 = *--v1786;
                                    *((_DWORD *)v1886 - 1) = v1887;
                                    v1886 -= 4;
                                  }
                                  *(_QWORD *)v1785 = v1886;
                                  *v1787 = v1790;
                                  *v1789 = &v1796[4 * v1795];
                                  if (v1791)
                                    operator delete(v1791);
                                }
                                else
                                {
                                  *v1786 = 79;
                                  v1790 = v1786 + 1;
                                }
                                *v1787 = v1790;
                                if (!*v14)
                                {
LABEL_4042:
                                  if ((*((_BYTE *)__p + 10) & 1) == 0)
                                    goto LABEL_4043;
                                  v1888 = *v12 + 24 * v13;
                                  v1890 = (_DWORD **)(v1888 + 8);
                                  v1889 = *(_DWORD **)(v1888 + 8);
                                  v1892 = (_QWORD *)(v1888 + 16);
                                  v1891 = *(_QWORD *)(v1888 + 16);
                                  if ((unint64_t)v1889 >= v1891)
                                  {
                                    v1894 = *(_DWORD **)v1888;
                                    v1895 = ((uint64_t)v1889 - *(_QWORD *)v1888) >> 2;
                                    v1896 = v1895 + 1;
                                    if ((unint64_t)(v1895 + 1) >> 62)
                                      sub_4074();
                                    v1897 = v1891 - (_QWORD)v1894;
                                    if (v1897 >> 1 > v1896)
                                      v1896 = v1897 >> 1;
                                    if ((unint64_t)v1897 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1898 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1898 = v1896;
                                    if (v1898)
                                    {
                                      v1899 = (char *)sub_43B2C((uint64_t)v1892, v1898);
                                      v1889 = *v1890;
                                      v1894 = *(_DWORD **)v1888;
                                    }
                                    else
                                    {
                                      v1899 = 0;
                                    }
                                    v1976 = &v1899[4 * v1895];
                                    *(_DWORD *)v1976 = 80;
                                    v1893 = v1976 + 4;
                                    while (v1889 != v1894)
                                    {
                                      v1977 = *--v1889;
                                      *((_DWORD *)v1976 - 1) = v1977;
                                      v1976 -= 4;
                                    }
                                    *(_QWORD *)v1888 = v1976;
                                    *v1890 = v1893;
                                    *v1892 = &v1899[4 * v1898];
                                    if (v1894)
                                      operator delete(v1894);
                                  }
                                  else
                                  {
                                    *v1889 = 80;
                                    v1893 = v1889 + 1;
                                  }
                                  *v1890 = v1893;
                                  if (!*v14)
                                  {
LABEL_4043:
                                    if ((*((_BYTE *)__p + 10) & 2) == 0)
                                      goto LABEL_4044;
                                    v1978 = *v12 + 24 * v13;
                                    v1980 = (_DWORD **)(v1978 + 8);
                                    v1979 = *(_DWORD **)(v1978 + 8);
                                    v1982 = (_QWORD *)(v1978 + 16);
                                    v1981 = *(_QWORD *)(v1978 + 16);
                                    if ((unint64_t)v1979 >= v1981)
                                    {
                                      v1984 = *(_DWORD **)v1978;
                                      v1985 = ((uint64_t)v1979 - *(_QWORD *)v1978) >> 2;
                                      v1986 = v1985 + 1;
                                      if ((unint64_t)(v1985 + 1) >> 62)
                                        sub_4074();
                                      v1987 = v1981 - (_QWORD)v1984;
                                      if (v1987 >> 1 > v1986)
                                        v1986 = v1987 >> 1;
                                      if ((unint64_t)v1987 >= 0x7FFFFFFFFFFFFFFCLL)
                                        v1988 = 0x3FFFFFFFFFFFFFFFLL;
                                      else
                                        v1988 = v1986;
                                      if (v1988)
                                      {
                                        v1989 = (char *)sub_43B2C((uint64_t)v1982, v1988);
                                        v1979 = *v1980;
                                        v1984 = *(_DWORD **)v1978;
                                      }
                                      else
                                      {
                                        v1989 = 0;
                                      }
                                      v2061 = &v1989[4 * v1985];
                                      *(_DWORD *)v2061 = 81;
                                      v1983 = v2061 + 4;
                                      while (v1979 != v1984)
                                      {
                                        v2062 = *--v1979;
                                        *((_DWORD *)v2061 - 1) = v2062;
                                        v2061 -= 4;
                                      }
                                      *(_QWORD *)v1978 = v2061;
                                      *v1980 = v1983;
                                      *v1982 = &v1989[4 * v1988];
                                      if (v1984)
                                        operator delete(v1984);
                                    }
                                    else
                                    {
                                      *v1979 = 81;
                                      v1983 = v1979 + 1;
                                    }
                                    *v1980 = v1983;
                                    if (!*v14)
                                    {
LABEL_4044:
                                      if ((*((_BYTE *)__p + 10) & 4) == 0)
                                        goto LABEL_4045;
                                      v2063 = *v12 + 24 * v13;
                                      v2065 = (_DWORD **)(v2063 + 8);
                                      v2064 = *(_DWORD **)(v2063 + 8);
                                      v2067 = (_QWORD *)(v2063 + 16);
                                      v2066 = *(_QWORD *)(v2063 + 16);
                                      if ((unint64_t)v2064 >= v2066)
                                      {
                                        v2069 = *(_DWORD **)v2063;
                                        v2070 = ((uint64_t)v2064 - *(_QWORD *)v2063) >> 2;
                                        v2071 = v2070 + 1;
                                        if ((unint64_t)(v2070 + 1) >> 62)
                                          sub_4074();
                                        v2072 = v2066 - (_QWORD)v2069;
                                        if (v2072 >> 1 > v2071)
                                          v2071 = v2072 >> 1;
                                        if ((unint64_t)v2072 >= 0x7FFFFFFFFFFFFFFCLL)
                                          v2073 = 0x3FFFFFFFFFFFFFFFLL;
                                        else
                                          v2073 = v2071;
                                        if (v2073)
                                        {
                                          v2074 = (char *)sub_43B2C((uint64_t)v2067, v2073);
                                          v2064 = *v2065;
                                          v2069 = *(_DWORD **)v2063;
                                        }
                                        else
                                        {
                                          v2074 = 0;
                                        }
                                        v2145 = &v2074[4 * v2070];
                                        *(_DWORD *)v2145 = 82;
                                        v2068 = v2145 + 4;
                                        while (v2064 != v2069)
                                        {
                                          v2146 = *--v2064;
                                          *((_DWORD *)v2145 - 1) = v2146;
                                          v2145 -= 4;
                                        }
                                        *(_QWORD *)v2063 = v2145;
                                        *v2065 = v2068;
                                        *v2067 = &v2074[4 * v2073];
                                        if (v2069)
                                          operator delete(v2069);
                                      }
                                      else
                                      {
                                        *v2064 = 82;
                                        v2068 = v2064 + 1;
                                      }
                                      *v2065 = v2068;
                                      if (!*v14)
                                      {
LABEL_4045:
                                        if ((*((_BYTE *)__p + 10) & 8) == 0)
                                          goto LABEL_4046;
                                        v2147 = *v12 + 24 * v13;
                                        v2149 = (_DWORD **)(v2147 + 8);
                                        v2148 = *(_DWORD **)(v2147 + 8);
                                        v2151 = (_QWORD *)(v2147 + 16);
                                        v2150 = *(_QWORD *)(v2147 + 16);
                                        if ((unint64_t)v2148 >= v2150)
                                        {
                                          v2153 = *(_DWORD **)v2147;
                                          v2154 = ((uint64_t)v2148 - *(_QWORD *)v2147) >> 2;
                                          v2155 = v2154 + 1;
                                          if ((unint64_t)(v2154 + 1) >> 62)
                                            sub_4074();
                                          v2156 = v2150 - (_QWORD)v2153;
                                          if (v2156 >> 1 > v2155)
                                            v2155 = v2156 >> 1;
                                          if ((unint64_t)v2156 >= 0x7FFFFFFFFFFFFFFCLL)
                                            v2157 = 0x3FFFFFFFFFFFFFFFLL;
                                          else
                                            v2157 = v2155;
                                          if (v2157)
                                          {
                                            v2158 = (char *)sub_43B2C((uint64_t)v2151, v2157);
                                            v2148 = *v2149;
                                            v2153 = *(_DWORD **)v2147;
                                          }
                                          else
                                          {
                                            v2158 = 0;
                                          }
                                          v2221 = &v2158[4 * v2154];
                                          *(_DWORD *)v2221 = 83;
                                          v2152 = v2221 + 4;
                                          while (v2148 != v2153)
                                          {
                                            v2222 = *--v2148;
                                            *((_DWORD *)v2221 - 1) = v2222;
                                            v2221 -= 4;
                                          }
                                          *(_QWORD *)v2147 = v2221;
                                          *v2149 = v2152;
                                          *v2151 = &v2158[4 * v2157];
                                          if (v2153)
                                            operator delete(v2153);
                                        }
                                        else
                                        {
                                          *v2148 = 83;
                                          v2152 = v2148 + 1;
                                        }
                                        *v2149 = v2152;
                                        if (!*v14)
                                        {
LABEL_4046:
                                          if ((*((_BYTE *)__p + 10) & 0x10) == 0)
                                            goto LABEL_4047;
                                          v2223 = *v12 + 24 * v13;
                                          v2225 = (_DWORD **)(v2223 + 8);
                                          v2224 = *(_DWORD **)(v2223 + 8);
                                          v2227 = (_QWORD *)(v2223 + 16);
                                          v2226 = *(_QWORD *)(v2223 + 16);
                                          if ((unint64_t)v2224 >= v2226)
                                          {
                                            v2229 = *(_DWORD **)v2223;
                                            v2230 = ((uint64_t)v2224 - *(_QWORD *)v2223) >> 2;
                                            v2231 = v2230 + 1;
                                            if ((unint64_t)(v2230 + 1) >> 62)
                                              sub_4074();
                                            v2232 = v2226 - (_QWORD)v2229;
                                            if (v2232 >> 1 > v2231)
                                              v2231 = v2232 >> 1;
                                            if ((unint64_t)v2232 >= 0x7FFFFFFFFFFFFFFCLL)
                                              v2233 = 0x3FFFFFFFFFFFFFFFLL;
                                            else
                                              v2233 = v2231;
                                            if (v2233)
                                            {
                                              v2234 = (char *)sub_43B2C((uint64_t)v2227, v2233);
                                              v2224 = *v2225;
                                              v2229 = *(_DWORD **)v2223;
                                            }
                                            else
                                            {
                                              v2234 = 0;
                                            }
                                            v2284 = &v2234[4 * v2230];
                                            *(_DWORD *)v2284 = 84;
                                            v2228 = v2284 + 4;
                                            while (v2224 != v2229)
                                            {
                                              v2285 = *--v2224;
                                              *((_DWORD *)v2284 - 1) = v2285;
                                              v2284 -= 4;
                                            }
                                            *(_QWORD *)v2223 = v2284;
                                            *v2225 = v2228;
                                            *v2227 = &v2234[4 * v2233];
                                            if (v2229)
                                              operator delete(v2229);
                                          }
                                          else
                                          {
                                            *v2224 = 84;
                                            v2228 = v2224 + 1;
                                          }
                                          *v2225 = v2228;
                                          if (!*v14)
                                          {
LABEL_4047:
                                            if ((*((_BYTE *)__p + 10) & 0x20) == 0)
                                              goto LABEL_4048;
                                            v2286 = *v12 + 24 * v13;
                                            v2288 = (_DWORD **)(v2286 + 8);
                                            v2287 = *(_DWORD **)(v2286 + 8);
                                            v2290 = (_QWORD *)(v2286 + 16);
                                            v2289 = *(_QWORD *)(v2286 + 16);
                                            if ((unint64_t)v2287 >= v2289)
                                            {
                                              v2292 = *(_DWORD **)v2286;
                                              v2293 = ((uint64_t)v2287 - *(_QWORD *)v2286) >> 2;
                                              v2294 = v2293 + 1;
                                              if ((unint64_t)(v2293 + 1) >> 62)
                                                sub_4074();
                                              v2295 = v2289 - (_QWORD)v2292;
                                              if (v2295 >> 1 > v2294)
                                                v2294 = v2295 >> 1;
                                              if ((unint64_t)v2295 >= 0x7FFFFFFFFFFFFFFCLL)
                                                v2296 = 0x3FFFFFFFFFFFFFFFLL;
                                              else
                                                v2296 = v2294;
                                              if (v2296)
                                              {
                                                v2297 = (char *)sub_43B2C((uint64_t)v2290, v2296);
                                                v2287 = *v2288;
                                                v2292 = *(_DWORD **)v2286;
                                              }
                                              else
                                              {
                                                v2297 = 0;
                                              }
                                              v2341 = &v2297[4 * v2293];
                                              *(_DWORD *)v2341 = 85;
                                              v2291 = v2341 + 4;
                                              while (v2287 != v2292)
                                              {
                                                v2342 = *--v2287;
                                                *((_DWORD *)v2341 - 1) = v2342;
                                                v2341 -= 4;
                                              }
                                              *(_QWORD *)v2286 = v2341;
                                              *v2288 = v2291;
                                              *v2290 = &v2297[4 * v2296];
                                              if (v2292)
                                                operator delete(v2292);
                                            }
                                            else
                                            {
                                              *v2287 = 85;
                                              v2291 = v2287 + 1;
                                            }
                                            *v2288 = v2291;
                                            if (!*v14)
                                            {
LABEL_4048:
                                              if ((*((_BYTE *)__p + 10) & 0x40) == 0)
                                                goto LABEL_4049;
                                              v2343 = *v12 + 24 * v13;
                                              v2345 = (_DWORD **)(v2343 + 8);
                                              v2344 = *(_DWORD **)(v2343 + 8);
                                              v2347 = (_QWORD *)(v2343 + 16);
                                              v2346 = *(_QWORD *)(v2343 + 16);
                                              if ((unint64_t)v2344 >= v2346)
                                              {
                                                v2349 = *(_DWORD **)v2343;
                                                v2350 = ((uint64_t)v2344 - *(_QWORD *)v2343) >> 2;
                                                v2351 = v2350 + 1;
                                                if ((unint64_t)(v2350 + 1) >> 62)
                                                  sub_4074();
                                                v2352 = v2346 - (_QWORD)v2349;
                                                if (v2352 >> 1 > v2351)
                                                  v2351 = v2352 >> 1;
                                                if ((unint64_t)v2352 >= 0x7FFFFFFFFFFFFFFCLL)
                                                  v2353 = 0x3FFFFFFFFFFFFFFFLL;
                                                else
                                                  v2353 = v2351;
                                                if (v2353)
                                                {
                                                  v2354 = (char *)sub_43B2C((uint64_t)v2347, v2353);
                                                  v2344 = *v2345;
                                                  v2349 = *(_DWORD **)v2343;
                                                }
                                                else
                                                {
                                                  v2354 = 0;
                                                }
                                                v2389 = &v2354[4 * v2350];
                                                *(_DWORD *)v2389 = 86;
                                                v2348 = v2389 + 4;
                                                while (v2344 != v2349)
                                                {
                                                  v2390 = *--v2344;
                                                  *((_DWORD *)v2389 - 1) = v2390;
                                                  v2389 -= 4;
                                                }
                                                *(_QWORD *)v2343 = v2389;
                                                *v2345 = v2348;
                                                *v2347 = &v2354[4 * v2353];
                                                if (v2349)
                                                  operator delete(v2349);
                                              }
                                              else
                                              {
                                                *v2344 = 86;
                                                v2348 = v2344 + 1;
                                              }
                                              *v2345 = v2348;
                                              if (!*v14)
                                              {
LABEL_4049:
                                                if ((*((_BYTE *)__p + 10) & 0x80) == 0)
                                                  goto LABEL_4050;
                                                v2391 = *v12 + 24 * v13;
                                                v2393 = (_DWORD **)(v2391 + 8);
                                                v2392 = *(_DWORD **)(v2391 + 8);
                                                v2395 = (_QWORD *)(v2391 + 16);
                                                v2394 = *(_QWORD *)(v2391 + 16);
                                                if ((unint64_t)v2392 >= v2394)
                                                {
                                                  v2397 = *(_DWORD **)v2391;
                                                  v2398 = ((uint64_t)v2392 - *(_QWORD *)v2391) >> 2;
                                                  v2399 = v2398 + 1;
                                                  if ((unint64_t)(v2398 + 1) >> 62)
                                                    sub_4074();
                                                  v2400 = v2394 - (_QWORD)v2397;
                                                  if (v2400 >> 1 > v2399)
                                                    v2399 = v2400 >> 1;
                                                  if ((unint64_t)v2400 >= 0x7FFFFFFFFFFFFFFCLL)
                                                    v2401 = 0x3FFFFFFFFFFFFFFFLL;
                                                  else
                                                    v2401 = v2399;
                                                  if (v2401)
                                                  {
                                                    v2402 = (char *)sub_43B2C((uint64_t)v2395, v2401);
                                                    v2392 = *v2393;
                                                    v2397 = *(_DWORD **)v2391;
                                                  }
                                                  else
                                                  {
                                                    v2402 = 0;
                                                  }
                                                  v2432 = &v2402[4 * v2398];
                                                  *(_DWORD *)v2432 = 87;
                                                  v2396 = v2432 + 4;
                                                  while (v2392 != v2397)
                                                  {
                                                    v2433 = *--v2392;
                                                    *((_DWORD *)v2432 - 1) = v2433;
                                                    v2432 -= 4;
                                                  }
                                                  *(_QWORD *)v2391 = v2432;
                                                  *v2393 = v2396;
                                                  *v2395 = &v2402[4 * v2401];
                                                  if (v2397)
                                                    operator delete(v2397);
                                                }
                                                else
                                                {
                                                  *v2392 = 87;
                                                  v2396 = v2392 + 1;
                                                }
                                                *v2393 = v2396;
                                                if (!*v14)
                                                {
LABEL_4050:
                                                  if ((*((_BYTE *)__p + 11) & 1) == 0)
                                                    goto LABEL_4051;
                                                  v2434 = *v12 + 24 * v13;
                                                  v2436 = (_DWORD **)(v2434 + 8);
                                                  v2435 = *(_DWORD **)(v2434 + 8);
                                                  v2438 = (_QWORD *)(v2434 + 16);
                                                  v2437 = *(_QWORD *)(v2434 + 16);
                                                  if ((unint64_t)v2435 >= v2437)
                                                  {
                                                    v2440 = *(_DWORD **)v2434;
                                                    v2441 = ((uint64_t)v2435 - *(_QWORD *)v2434) >> 2;
                                                    v2442 = v2441 + 1;
                                                    if ((unint64_t)(v2441 + 1) >> 62)
                                                      sub_4074();
                                                    v2443 = v2437 - (_QWORD)v2440;
                                                    if (v2443 >> 1 > v2442)
                                                      v2442 = v2443 >> 1;
                                                    if ((unint64_t)v2443 >= 0x7FFFFFFFFFFFFFFCLL)
                                                      v2444 = 0x3FFFFFFFFFFFFFFFLL;
                                                    else
                                                      v2444 = v2442;
                                                    if (v2444)
                                                    {
                                                      v2445 = (char *)sub_43B2C((uint64_t)v2438, v2444);
                                                      v2435 = *v2436;
                                                      v2440 = *(_DWORD **)v2434;
                                                    }
                                                    else
                                                    {
                                                      v2445 = 0;
                                                    }
                                                    v2466 = &v2445[4 * v2441];
                                                    *(_DWORD *)v2466 = 88;
                                                    v2439 = v2466 + 4;
                                                    while (v2435 != v2440)
                                                    {
                                                      v2467 = *--v2435;
                                                      *((_DWORD *)v2466 - 1) = v2467;
                                                      v2466 -= 4;
                                                    }
                                                    *(_QWORD *)v2434 = v2466;
                                                    *v2436 = v2439;
                                                    *v2438 = &v2445[4 * v2444];
                                                    if (v2440)
                                                      operator delete(v2440);
                                                  }
                                                  else
                                                  {
                                                    *v2435 = 88;
                                                    v2439 = v2435 + 1;
                                                  }
                                                  *v2436 = v2439;
                                                  if (!*v14)
                                                  {
LABEL_4051:
                                                    if ((*((_BYTE *)__p + 11) & 2) == 0)
                                                      goto LABEL_4052;
                                                    v2468 = *v12 + 24 * v13;
                                                    v2470 = (_DWORD **)(v2468 + 8);
                                                    v2469 = *(_DWORD **)(v2468 + 8);
                                                    v2472 = (_QWORD *)(v2468 + 16);
                                                    v2471 = *(_QWORD *)(v2468 + 16);
                                                    if ((unint64_t)v2469 >= v2471)
                                                    {
                                                      v2474 = *(_DWORD **)v2468;
                                                      v2475 = ((uint64_t)v2469 - *(_QWORD *)v2468) >> 2;
                                                      v2476 = v2475 + 1;
                                                      if ((unint64_t)(v2475 + 1) >> 62)
                                                        sub_4074();
                                                      v2477 = v2471 - (_QWORD)v2474;
                                                      if (v2477 >> 1 > v2476)
                                                        v2476 = v2477 >> 1;
                                                      if ((unint64_t)v2477 >= 0x7FFFFFFFFFFFFFFCLL)
                                                        v2478 = 0x3FFFFFFFFFFFFFFFLL;
                                                      else
                                                        v2478 = v2476;
                                                      if (v2478)
                                                      {
                                                        v2479 = (char *)sub_43B2C((uint64_t)v2472, v2478);
                                                        v2469 = *v2470;
                                                        v2474 = *(_DWORD **)v2468;
                                                      }
                                                      else
                                                      {
                                                        v2479 = 0;
                                                      }
                                                      v2495 = &v2479[4 * v2475];
                                                      *(_DWORD *)v2495 = 89;
                                                      v2473 = v2495 + 4;
                                                      while (v2469 != v2474)
                                                      {
                                                        v2496 = *--v2469;
                                                        *((_DWORD *)v2495 - 1) = v2496;
                                                        v2495 -= 4;
                                                      }
                                                      *(_QWORD *)v2468 = v2495;
                                                      *v2470 = v2473;
                                                      *v2472 = &v2479[4 * v2478];
                                                      if (v2474)
                                                        operator delete(v2474);
                                                    }
                                                    else
                                                    {
                                                      *v2469 = 89;
                                                      v2473 = v2469 + 1;
                                                    }
                                                    *v2470 = v2473;
                                                    if (!*v14)
                                                    {
LABEL_4052:
                                                      if ((*((_BYTE *)__p + 11) & 4) == 0)
                                                        goto LABEL_4053;
                                                      v2497 = *v12 + 24 * v13;
                                                      v2499 = (_DWORD **)(v2497 + 8);
                                                      v2498 = *(_DWORD **)(v2497 + 8);
                                                      v2501 = (_QWORD *)(v2497 + 16);
                                                      v2500 = *(_QWORD *)(v2497 + 16);
                                                      if ((unint64_t)v2498 >= v2500)
                                                      {
                                                        v2503 = *(_DWORD **)v2497;
                                                        v2504 = ((uint64_t)v2498 - *(_QWORD *)v2497) >> 2;
                                                        v2505 = v2504 + 1;
                                                        if ((unint64_t)(v2504 + 1) >> 62)
                                                          sub_4074();
                                                        v2506 = v2500 - (_QWORD)v2503;
                                                        if (v2506 >> 1 > v2505)
                                                          v2505 = v2506 >> 1;
                                                        if ((unint64_t)v2506 >= 0x7FFFFFFFFFFFFFFCLL)
                                                          v2507 = 0x3FFFFFFFFFFFFFFFLL;
                                                        else
                                                          v2507 = v2505;
                                                        if (v2507)
                                                        {
                                                          v2508 = (char *)sub_43B2C((uint64_t)v2501, v2507);
                                                          v2498 = *v2499;
                                                          v2503 = *(_DWORD **)v2497;
                                                        }
                                                        else
                                                        {
                                                          v2508 = 0;
                                                        }
                                                        v2523 = &v2508[4 * v2504];
                                                        *(_DWORD *)v2523 = 90;
                                                        v2502 = v2523 + 4;
                                                        while (v2498 != v2503)
                                                        {
                                                          v2524 = *--v2498;
                                                          *((_DWORD *)v2523 - 1) = v2524;
                                                          v2523 -= 4;
                                                        }
                                                        *(_QWORD *)v2497 = v2523;
                                                        *v2499 = v2502;
                                                        *v2501 = &v2508[4 * v2507];
                                                        if (v2503)
                                                          operator delete(v2503);
                                                      }
                                                      else
                                                      {
                                                        *v2498 = 90;
                                                        v2502 = v2498 + 1;
                                                      }
                                                      *v2499 = v2502;
                                                      if (!*v14)
                                                      {
LABEL_4053:
                                                        if ((*((_BYTE *)__p + 11) & 8) == 0)
                                                          goto LABEL_4054;
                                                        v2525 = *v12 + 24 * v13;
                                                        v2527 = (_DWORD **)(v2525 + 8);
                                                        v2526 = *(_DWORD **)(v2525 + 8);
                                                        v2529 = (_QWORD *)(v2525 + 16);
                                                        v2528 = *(_QWORD *)(v2525 + 16);
                                                        if ((unint64_t)v2526 >= v2528)
                                                        {
                                                          v2531 = *(_DWORD **)v2525;
                                                          v2532 = ((uint64_t)v2526 - *(_QWORD *)v2525) >> 2;
                                                          v2533 = v2532 + 1;
                                                          if ((unint64_t)(v2532 + 1) >> 62)
                                                            sub_4074();
                                                          v2534 = v2528 - (_QWORD)v2531;
                                                          if (v2534 >> 1 > v2533)
                                                            v2533 = v2534 >> 1;
                                                          if ((unint64_t)v2534 >= 0x7FFFFFFFFFFFFFFCLL)
                                                            v2535 = 0x3FFFFFFFFFFFFFFFLL;
                                                          else
                                                            v2535 = v2533;
                                                          if (v2535)
                                                          {
                                                            v2536 = (char *)sub_43B2C((uint64_t)v2529, v2535);
                                                            v2526 = *v2527;
                                                            v2531 = *(_DWORD **)v2525;
                                                          }
                                                          else
                                                          {
                                                            v2536 = 0;
                                                          }
                                                          v2551 = &v2536[4 * v2532];
                                                          *(_DWORD *)v2551 = 91;
                                                          v2530 = v2551 + 4;
                                                          while (v2526 != v2531)
                                                          {
                                                            v2552 = *--v2526;
                                                            *((_DWORD *)v2551 - 1) = v2552;
                                                            v2551 -= 4;
                                                          }
                                                          *(_QWORD *)v2525 = v2551;
                                                          *v2527 = v2530;
                                                          *v2529 = &v2536[4 * v2535];
                                                          if (v2531)
                                                            operator delete(v2531);
                                                        }
                                                        else
                                                        {
                                                          *v2526 = 91;
                                                          v2530 = v2526 + 1;
                                                        }
                                                        *v2527 = v2530;
                                                        if (!*v14)
                                                        {
LABEL_4054:
                                                          if ((*((_BYTE *)__p + 11) & 0x10) == 0)
                                                            goto LABEL_4055;
                                                          v2553 = *v12 + 24 * v13;
                                                          v2555 = (_DWORD **)(v2553 + 8);
                                                          v2554 = *(_DWORD **)(v2553 + 8);
                                                          v2557 = (_QWORD *)(v2553 + 16);
                                                          v2556 = *(_QWORD *)(v2553 + 16);
                                                          if ((unint64_t)v2554 >= v2556)
                                                          {
                                                            v2559 = *(_DWORD **)v2553;
                                                            v2560 = ((uint64_t)v2554 - *(_QWORD *)v2553) >> 2;
                                                            v2561 = v2560 + 1;
                                                            if ((unint64_t)(v2560 + 1) >> 62)
                                                              sub_4074();
                                                            v2562 = v2556 - (_QWORD)v2559;
                                                            if (v2562 >> 1 > v2561)
                                                              v2561 = v2562 >> 1;
                                                            if ((unint64_t)v2562 >= 0x7FFFFFFFFFFFFFFCLL)
                                                              v2563 = 0x3FFFFFFFFFFFFFFFLL;
                                                            else
                                                              v2563 = v2561;
                                                            if (v2563)
                                                            {
                                                              v2564 = (char *)sub_43B2C((uint64_t)v2557, v2563);
                                                              v2554 = *v2555;
                                                              v2559 = *(_DWORD **)v2553;
                                                            }
                                                            else
                                                            {
                                                              v2564 = 0;
                                                            }
                                                            v2579 = &v2564[4 * v2560];
                                                            *(_DWORD *)v2579 = 92;
                                                            v2558 = v2579 + 4;
                                                            while (v2554 != v2559)
                                                            {
                                                              v2580 = *--v2554;
                                                              *((_DWORD *)v2579 - 1) = v2580;
                                                              v2579 -= 4;
                                                            }
                                                            *(_QWORD *)v2553 = v2579;
                                                            *v2555 = v2558;
                                                            *v2557 = &v2564[4 * v2563];
                                                            if (v2559)
                                                              operator delete(v2559);
                                                          }
                                                          else
                                                          {
                                                            *v2554 = 92;
                                                            v2558 = v2554 + 1;
                                                          }
                                                          *v2555 = v2558;
                                                          if (!*v14)
                                                          {
LABEL_4055:
                                                            if ((*((_BYTE *)__p + 11) & 0x20) == 0)
                                                              goto LABEL_4056;
                                                            v2581 = *v12 + 24 * v13;
                                                            v2583 = (_DWORD **)(v2581 + 8);
                                                            v2582 = *(_DWORD **)(v2581 + 8);
                                                            v2585 = (_QWORD *)(v2581 + 16);
                                                            v2584 = *(_QWORD *)(v2581 + 16);
                                                            if ((unint64_t)v2582 >= v2584)
                                                            {
                                                              v2587 = *(_DWORD **)v2581;
                                                              v2588 = ((uint64_t)v2582 - *(_QWORD *)v2581) >> 2;
                                                              v2589 = v2588 + 1;
                                                              if ((unint64_t)(v2588 + 1) >> 62)
                                                                sub_4074();
                                                              v2590 = v2584 - (_QWORD)v2587;
                                                              if (v2590 >> 1 > v2589)
                                                                v2589 = v2590 >> 1;
                                                              if ((unint64_t)v2590 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                v2591 = 0x3FFFFFFFFFFFFFFFLL;
                                                              else
                                                                v2591 = v2589;
                                                              if (v2591)
                                                              {
                                                                v2592 = (char *)sub_43B2C((uint64_t)v2585, v2591);
                                                                v2582 = *v2583;
                                                                v2587 = *(_DWORD **)v2581;
                                                              }
                                                              else
                                                              {
                                                                v2592 = 0;
                                                              }
                                                              v2607 = &v2592[4 * v2588];
                                                              *(_DWORD *)v2607 = 93;
                                                              v2586 = v2607 + 4;
                                                              while (v2582 != v2587)
                                                              {
                                                                v2608 = *--v2582;
                                                                *((_DWORD *)v2607 - 1) = v2608;
                                                                v2607 -= 4;
                                                              }
                                                              *(_QWORD *)v2581 = v2607;
                                                              *v2583 = v2586;
                                                              *v2585 = &v2592[4 * v2591];
                                                              if (v2587)
                                                                operator delete(v2587);
                                                            }
                                                            else
                                                            {
                                                              *v2582 = 93;
                                                              v2586 = v2582 + 1;
                                                            }
                                                            *v2583 = v2586;
                                                            if (!*v14)
                                                            {
LABEL_4056:
                                                              if ((*((_BYTE *)__p + 11) & 0x40) == 0)
                                                                goto LABEL_4057;
                                                              v2609 = *v12 + 24 * v13;
                                                              v2611 = (_DWORD **)(v2609 + 8);
                                                              v2610 = *(_DWORD **)(v2609 + 8);
                                                              v2613 = (_QWORD *)(v2609 + 16);
                                                              v2612 = *(_QWORD *)(v2609 + 16);
                                                              if ((unint64_t)v2610 >= v2612)
                                                              {
                                                                v2615 = *(_DWORD **)v2609;
                                                                v2616 = ((uint64_t)v2610 - *(_QWORD *)v2609) >> 2;
                                                                v2617 = v2616 + 1;
                                                                if ((unint64_t)(v2616 + 1) >> 62)
                                                                  sub_4074();
                                                                v2618 = v2612 - (_QWORD)v2615;
                                                                if (v2618 >> 1 > v2617)
                                                                  v2617 = v2618 >> 1;
                                                                if ((unint64_t)v2618 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                  v2619 = 0x3FFFFFFFFFFFFFFFLL;
                                                                else
                                                                  v2619 = v2617;
                                                                if (v2619)
                                                                {
                                                                  v2620 = (char *)sub_43B2C((uint64_t)v2613, v2619);
                                                                  v2610 = *v2611;
                                                                  v2615 = *(_DWORD **)v2609;
                                                                }
                                                                else
                                                                {
                                                                  v2620 = 0;
                                                                }
                                                                v2635 = &v2620[4 * v2616];
                                                                *(_DWORD *)v2635 = 94;
                                                                v2614 = v2635 + 4;
                                                                while (v2610 != v2615)
                                                                {
                                                                  v2636 = *--v2610;
                                                                  *((_DWORD *)v2635 - 1) = v2636;
                                                                  v2635 -= 4;
                                                                }
                                                                *(_QWORD *)v2609 = v2635;
                                                                *v2611 = v2614;
                                                                *v2613 = &v2620[4 * v2619];
                                                                if (v2615)
                                                                  operator delete(v2615);
                                                              }
                                                              else
                                                              {
                                                                *v2610 = 94;
                                                                v2614 = v2610 + 1;
                                                              }
                                                              *v2611 = v2614;
                                                              if (!*v14)
                                                              {
LABEL_4057:
                                                                if ((*((_BYTE *)__p + 11) & 0x80) == 0)
                                                                  goto LABEL_4058;
                                                                v2637 = *v12 + 24 * v13;
                                                                v2639 = (_DWORD **)(v2637 + 8);
                                                                v2638 = *(_DWORD **)(v2637 + 8);
                                                                v2641 = (_QWORD *)(v2637 + 16);
                                                                v2640 = *(_QWORD *)(v2637 + 16);
                                                                if ((unint64_t)v2638 >= v2640)
                                                                {
                                                                  v2643 = *(_DWORD **)v2637;
                                                                  v2644 = ((uint64_t)v2638 - *(_QWORD *)v2637) >> 2;
                                                                  v2645 = v2644 + 1;
                                                                  if ((unint64_t)(v2644 + 1) >> 62)
                                                                    sub_4074();
                                                                  v2646 = v2640 - (_QWORD)v2643;
                                                                  if (v2646 >> 1 > v2645)
                                                                    v2645 = v2646 >> 1;
                                                                  if ((unint64_t)v2646 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                    v2647 = 0x3FFFFFFFFFFFFFFFLL;
                                                                  else
                                                                    v2647 = v2645;
                                                                  if (v2647)
                                                                  {
                                                                    v2648 = (char *)sub_43B2C((uint64_t)v2641, v2647);
                                                                    v2638 = *v2639;
                                                                    v2643 = *(_DWORD **)v2637;
                                                                  }
                                                                  else
                                                                  {
                                                                    v2648 = 0;
                                                                  }
                                                                  v2663 = &v2648[4 * v2644];
                                                                  *(_DWORD *)v2663 = 95;
                                                                  v2642 = v2663 + 4;
                                                                  while (v2638 != v2643)
                                                                  {
                                                                    v2664 = *--v2638;
                                                                    *((_DWORD *)v2663 - 1) = v2664;
                                                                    v2663 -= 4;
                                                                  }
                                                                  *(_QWORD *)v2637 = v2663;
                                                                  *v2639 = v2642;
                                                                  *v2641 = &v2648[4 * v2647];
                                                                  if (v2643)
                                                                    operator delete(v2643);
                                                                }
                                                                else
                                                                {
                                                                  *v2638 = 95;
                                                                  v2642 = v2638 + 1;
                                                                }
                                                                *v2639 = v2642;
                                                                if (!*v14)
                                                                {
LABEL_4058:
                                                                  if ((*((_BYTE *)__p + 12) & 1) == 0)
                                                                    goto LABEL_4059;
                                                                  v2665 = *v12 + 24 * v13;
                                                                  v2667 = (_DWORD **)(v2665 + 8);
                                                                  v2666 = *(_DWORD **)(v2665 + 8);
                                                                  v2669 = (_QWORD *)(v2665 + 16);
                                                                  v2668 = *(_QWORD *)(v2665 + 16);
                                                                  if ((unint64_t)v2666 >= v2668)
                                                                  {
                                                                    v2671 = *(_DWORD **)v2665;
                                                                    v2672 = ((uint64_t)v2666 - *(_QWORD *)v2665) >> 2;
                                                                    v2673 = v2672 + 1;
                                                                    if ((unint64_t)(v2672 + 1) >> 62)
                                                                      sub_4074();
                                                                    v2674 = v2668 - (_QWORD)v2671;
                                                                    if (v2674 >> 1 > v2673)
                                                                      v2673 = v2674 >> 1;
                                                                    if ((unint64_t)v2674 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                      v2675 = 0x3FFFFFFFFFFFFFFFLL;
                                                                    else
                                                                      v2675 = v2673;
                                                                    if (v2675)
                                                                    {
                                                                      v2676 = (char *)sub_43B2C((uint64_t)v2669, v2675);
                                                                      v2666 = *v2667;
                                                                      v2671 = *(_DWORD **)v2665;
                                                                    }
                                                                    else
                                                                    {
                                                                      v2676 = 0;
                                                                    }
                                                                    v2691 = &v2676[4 * v2672];
                                                                    *(_DWORD *)v2691 = 96;
                                                                    v2670 = v2691 + 4;
                                                                    while (v2666 != v2671)
                                                                    {
                                                                      v2692 = *--v2666;
                                                                      *((_DWORD *)v2691 - 1) = v2692;
                                                                      v2691 -= 4;
                                                                    }
                                                                    *(_QWORD *)v2665 = v2691;
                                                                    *v2667 = v2670;
                                                                    *v2669 = &v2676[4 * v2675];
                                                                    if (v2671)
                                                                      operator delete(v2671);
                                                                  }
                                                                  else
                                                                  {
                                                                    *v2666 = 96;
                                                                    v2670 = v2666 + 1;
                                                                  }
                                                                  *v2667 = v2670;
                                                                  if (!*v14)
                                                                  {
LABEL_4059:
                                                                    if ((*((_BYTE *)__p + 12) & 2) == 0)
                                                                      goto LABEL_4060;
                                                                    v2693 = *v12 + 24 * v13;
                                                                    v2695 = (_DWORD **)(v2693 + 8);
                                                                    v2694 = *(_DWORD **)(v2693 + 8);
                                                                    v2697 = (_QWORD *)(v2693 + 16);
                                                                    v2696 = *(_QWORD *)(v2693 + 16);
                                                                    if ((unint64_t)v2694 >= v2696)
                                                                    {
                                                                      v2699 = *(_DWORD **)v2693;
                                                                      v2700 = ((uint64_t)v2694 - *(_QWORD *)v2693) >> 2;
                                                                      v2701 = v2700 + 1;
                                                                      if ((unint64_t)(v2700 + 1) >> 62)
                                                                        sub_4074();
                                                                      v2702 = v2696 - (_QWORD)v2699;
                                                                      if (v2702 >> 1 > v2701)
                                                                        v2701 = v2702 >> 1;
                                                                      if ((unint64_t)v2702 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                        v2703 = 0x3FFFFFFFFFFFFFFFLL;
                                                                      else
                                                                        v2703 = v2701;
                                                                      if (v2703)
                                                                      {
                                                                        v2704 = (char *)sub_43B2C((uint64_t)v2697, v2703);
                                                                        v2694 = *v2695;
                                                                        v2699 = *(_DWORD **)v2693;
                                                                      }
                                                                      else
                                                                      {
                                                                        v2704 = 0;
                                                                      }
                                                                      v2719 = &v2704[4 * v2700];
                                                                      *(_DWORD *)v2719 = 97;
                                                                      v2698 = v2719 + 4;
                                                                      while (v2694 != v2699)
                                                                      {
                                                                        v2720 = *--v2694;
                                                                        *((_DWORD *)v2719 - 1) = v2720;
                                                                        v2719 -= 4;
                                                                      }
                                                                      *(_QWORD *)v2693 = v2719;
                                                                      *v2695 = v2698;
                                                                      *v2697 = &v2704[4 * v2703];
                                                                      if (v2699)
                                                                        operator delete(v2699);
                                                                    }
                                                                    else
                                                                    {
                                                                      *v2694 = 97;
                                                                      v2698 = v2694 + 1;
                                                                    }
                                                                    *v2695 = v2698;
                                                                    if (!*v14)
                                                                    {
LABEL_4060:
                                                                      if ((*((_BYTE *)__p + 12) & 4) == 0)
                                                                        goto LABEL_4061;
                                                                      v2721 = *v12 + 24 * v13;
                                                                      v2723 = (_DWORD **)(v2721 + 8);
                                                                      v2722 = *(_DWORD **)(v2721 + 8);
                                                                      v2725 = (_QWORD *)(v2721 + 16);
                                                                      v2724 = *(_QWORD *)(v2721 + 16);
                                                                      if ((unint64_t)v2722 >= v2724)
                                                                      {
                                                                        v2727 = *(_DWORD **)v2721;
                                                                        v2728 = ((uint64_t)v2722 - *(_QWORD *)v2721) >> 2;
                                                                        v2729 = v2728 + 1;
                                                                        if ((unint64_t)(v2728 + 1) >> 62)
                                                                          sub_4074();
                                                                        v2730 = v2724 - (_QWORD)v2727;
                                                                        if (v2730 >> 1 > v2729)
                                                                          v2729 = v2730 >> 1;
                                                                        if ((unint64_t)v2730 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                          v2731 = 0x3FFFFFFFFFFFFFFFLL;
                                                                        else
                                                                          v2731 = v2729;
                                                                        if (v2731)
                                                                        {
                                                                          v2732 = (char *)sub_43B2C((uint64_t)v2725, v2731);
                                                                          v2722 = *v2723;
                                                                          v2727 = *(_DWORD **)v2721;
                                                                        }
                                                                        else
                                                                        {
                                                                          v2732 = 0;
                                                                        }
                                                                        v2747 = &v2732[4 * v2728];
                                                                        *(_DWORD *)v2747 = 98;
                                                                        v2726 = v2747 + 4;
                                                                        while (v2722 != v2727)
                                                                        {
                                                                          v2748 = *--v2722;
                                                                          *((_DWORD *)v2747 - 1) = v2748;
                                                                          v2747 -= 4;
                                                                        }
                                                                        *(_QWORD *)v2721 = v2747;
                                                                        *v2723 = v2726;
                                                                        *v2725 = &v2732[4 * v2731];
                                                                        if (v2727)
                                                                          operator delete(v2727);
                                                                      }
                                                                      else
                                                                      {
                                                                        *v2722 = 98;
                                                                        v2726 = v2722 + 1;
                                                                      }
                                                                      *v2723 = v2726;
                                                                      if (!*v14)
                                                                      {
LABEL_4061:
                                                                        if ((*((_BYTE *)__p + 12) & 8) == 0)
                                                                          goto LABEL_4062;
                                                                        v2749 = *v12 + 24 * v13;
                                                                        v2751 = (_DWORD **)(v2749 + 8);
                                                                        v2750 = *(_DWORD **)(v2749 + 8);
                                                                        v2753 = (_QWORD *)(v2749 + 16);
                                                                        v2752 = *(_QWORD *)(v2749 + 16);
                                                                        if ((unint64_t)v2750 >= v2752)
                                                                        {
                                                                          v2755 = *(_DWORD **)v2749;
                                                                          v2756 = ((uint64_t)v2750 - *(_QWORD *)v2749) >> 2;
                                                                          v2757 = v2756 + 1;
                                                                          if ((unint64_t)(v2756 + 1) >> 62)
                                                                            sub_4074();
                                                                          v2758 = v2752 - (_QWORD)v2755;
                                                                          if (v2758 >> 1 > v2757)
                                                                            v2757 = v2758 >> 1;
                                                                          if ((unint64_t)v2758 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                            v2759 = 0x3FFFFFFFFFFFFFFFLL;
                                                                          else
                                                                            v2759 = v2757;
                                                                          if (v2759)
                                                                          {
                                                                            v2760 = (char *)sub_43B2C((uint64_t)v2753, v2759);
                                                                            v2750 = *v2751;
                                                                            v2755 = *(_DWORD **)v2749;
                                                                          }
                                                                          else
                                                                          {
                                                                            v2760 = 0;
                                                                          }
                                                                          v2775 = &v2760[4 * v2756];
                                                                          *(_DWORD *)v2775 = 99;
                                                                          v2754 = v2775 + 4;
                                                                          while (v2750 != v2755)
                                                                          {
                                                                            v2776 = *--v2750;
                                                                            *((_DWORD *)v2775 - 1) = v2776;
                                                                            v2775 -= 4;
                                                                          }
                                                                          *(_QWORD *)v2749 = v2775;
                                                                          *v2751 = v2754;
                                                                          *v2753 = &v2760[4 * v2759];
                                                                          if (v2755)
                                                                            operator delete(v2755);
                                                                        }
                                                                        else
                                                                        {
                                                                          *v2750 = 99;
                                                                          v2754 = v2750 + 1;
                                                                        }
                                                                        *v2751 = v2754;
                                                                        if (!*v14)
                                                                        {
LABEL_4062:
                                                                          if ((*((_BYTE *)__p + 12) & 0x10) != 0)
                                                                          {
                                                                            v223 = *v12 + 24 * v13;
                                                                            v225 = (int **)(v223 + 8);
                                                                            v224 = *(int **)(v223 + 8);
                                                                            v227 = (_QWORD *)(v223 + 16);
                                                                            v2777 = *(_QWORD *)(v223 + 16);
                                                                            if ((unint64_t)v224 < v2777)
                                                                            {
                                                                              v228 = 100;
                                                                              goto LABEL_2185;
                                                                            }
                                                                            v229 = *(int **)v223;
                                                                            v2778 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                                                                            v2779 = v2778 + 1;
                                                                            if ((unint64_t)(v2778 + 1) >> 62)
                                                                              sub_4074();
                                                                            v2780 = v2777 - (_QWORD)v229;
                                                                            if (v2780 >> 1 > v2779)
                                                                              v2779 = v2780 >> 1;
                                                                            if ((unint64_t)v2780 >= 0x7FFFFFFFFFFFFFFCLL)
                                                                              v233 = 0x3FFFFFFFFFFFFFFFLL;
                                                                            else
                                                                              v233 = v2779;
                                                                            if (v233)
                                                                            {
                                                                              v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                                                                              v224 = *v225;
                                                                              v229 = *(int **)v223;
                                                                            }
                                                                            else
                                                                            {
                                                                              v234 = 0;
                                                                            }
                                                                            v457 = &v234[4 * v2778];
                                                                            *(_DWORD *)v457 = 100;
                                                                            v458 = (int *)(v457 + 4);
                                                                            while (v224 != v229)
                                                                            {
                                                                              v2787 = *--v224;
                                                                              *((_DWORD *)v457 - 1) = v2787;
                                                                              v457 -= 4;
                                                                            }
                                                                            goto LABEL_3707;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 10:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 7) & 0x40) == 0)
              goto LABEL_464;
            v99 = *v12 + 24 * v13;
            v101 = (_DWORD **)(v99 + 8);
            v100 = *(_DWORD **)(v99 + 8);
            v103 = (_QWORD *)(v99 + 16);
            v102 = *(_QWORD *)(v99 + 16);
            if ((unint64_t)v100 >= v102)
            {
              v195 = *(_DWORD **)v99;
              v196 = ((uint64_t)v100 - *(_QWORD *)v99) >> 2;
              v197 = v196 + 1;
              if ((unint64_t)(v196 + 1) >> 62)
                sub_4074();
              v198 = v102 - (_QWORD)v195;
              if (v198 >> 1 > v197)
                v197 = v198 >> 1;
              if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL)
                v199 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v199 = v197;
              if (v199)
              {
                v200 = (char *)sub_43B2C((uint64_t)v103, v199);
                v100 = *v101;
                v195 = *(_DWORD **)v99;
              }
              else
              {
                v200 = 0;
              }
              v403 = &v200[4 * v196];
              *(_DWORD *)v403 = 62;
              v104 = v403 + 4;
              while (v100 != v195)
              {
                v404 = *--v100;
                *((_DWORD *)v403 - 1) = v404;
                v403 -= 4;
              }
              *(_QWORD *)v99 = v403;
              *v101 = v104;
              *v103 = &v200[4 * v199];
              if (v195)
                operator delete(v195);
            }
            else
            {
              *v100 = 62;
              v104 = v100 + 1;
            }
            *v101 = v104;
            if (!*v14)
            {
LABEL_464:
              if ((*(_QWORD *)__p & 0x8000000000000000) == 0)
                goto LABEL_1518;
              v411 = *v12 + 24 * v13;
              v413 = (_DWORD **)(v411 + 8);
              v412 = *(_DWORD **)(v411 + 8);
              v415 = (_QWORD *)(v411 + 16);
              v414 = *(_QWORD *)(v411 + 16);
              if ((unint64_t)v412 >= v414)
              {
                v423 = *(_DWORD **)v411;
                v424 = ((uint64_t)v412 - *(_QWORD *)v411) >> 2;
                v425 = v424 + 1;
                if ((unint64_t)(v424 + 1) >> 62)
                  sub_4074();
                v426 = v414 - (_QWORD)v423;
                if (v426 >> 1 > v425)
                  v425 = v426 >> 1;
                if ((unint64_t)v426 >= 0x7FFFFFFFFFFFFFFCLL)
                  v427 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v427 = v425;
                if (v427)
                {
                  v428 = (char *)sub_43B2C((uint64_t)v415, v427);
                  v412 = *v413;
                  v423 = *(_DWORD **)v411;
                }
                else
                {
                  v428 = 0;
                }
                v656 = &v428[4 * v424];
                *(_DWORD *)v656 = 63;
                v416 = v656 + 4;
                while (v412 != v423)
                {
                  v657 = *--v412;
                  *((_DWORD *)v656 - 1) = v657;
                  v656 -= 4;
                }
                *(_QWORD *)v411 = v656;
                *v413 = v416;
                *v415 = &v428[4 * v427];
                if (v423)
                  operator delete(v423);
              }
              else
              {
                *v412 = 63;
                v416 = v412 + 1;
              }
              *v413 = v416;
              if (!*v14)
              {
LABEL_1518:
                if ((*((_BYTE *)__p + 8) & 1) == 0)
                  goto LABEL_4063;
                v405 = *v12 + 24 * v13;
                v407 = (_DWORD **)(v405 + 8);
                v406 = *(_DWORD **)(v405 + 8);
                v409 = (_QWORD *)(v405 + 16);
                v408 = *(_QWORD *)(v405 + 16);
                if ((unint64_t)v406 >= v408)
                {
                  v417 = *(_DWORD **)v405;
                  v418 = ((uint64_t)v406 - *(_QWORD *)v405) >> 2;
                  v419 = v418 + 1;
                  if ((unint64_t)(v418 + 1) >> 62)
                    sub_4074();
                  v420 = v408 - (_QWORD)v417;
                  if (v420 >> 1 > v419)
                    v419 = v420 >> 1;
                  if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL)
                    v421 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v421 = v419;
                  if (v421)
                  {
                    v422 = (char *)sub_43B2C((uint64_t)v409, v421);
                    v406 = *v407;
                    v417 = *(_DWORD **)v405;
                  }
                  else
                  {
                    v422 = 0;
                  }
                  v642 = &v422[4 * v418];
                  *(_DWORD *)v642 = 64;
                  v410 = v642 + 4;
                  while (v406 != v417)
                  {
                    v643 = *--v406;
                    *((_DWORD *)v642 - 1) = v643;
                    v642 -= 4;
                  }
                  *(_QWORD *)v405 = v642;
                  *v407 = v410;
                  *v409 = &v422[4 * v421];
                  if (v417)
                    operator delete(v417);
                }
                else
                {
                  *v406 = 64;
                  v410 = v406 + 1;
                }
                *v407 = v410;
                if (!*v14)
                {
LABEL_4063:
                  if ((*((_BYTE *)__p + 8) & 2) == 0)
                    goto LABEL_4064;
                  v644 = *v12 + 24 * v13;
                  v646 = (_DWORD **)(v644 + 8);
                  v645 = *(_DWORD **)(v644 + 8);
                  v648 = (_QWORD *)(v644 + 16);
                  v647 = *(_QWORD *)(v644 + 16);
                  if ((unint64_t)v645 >= v647)
                  {
                    v650 = *(_DWORD **)v644;
                    v651 = ((uint64_t)v645 - *(_QWORD *)v644) >> 2;
                    v652 = v651 + 1;
                    if ((unint64_t)(v651 + 1) >> 62)
                      sub_4074();
                    v653 = v647 - (_QWORD)v650;
                    if (v653 >> 1 > v652)
                      v652 = v653 >> 1;
                    if ((unint64_t)v653 >= 0x7FFFFFFFFFFFFFFCLL)
                      v654 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v654 = v652;
                    if (v654)
                    {
                      v655 = (char *)sub_43B2C((uint64_t)v648, v654);
                      v645 = *v646;
                      v650 = *(_DWORD **)v644;
                    }
                    else
                    {
                      v655 = 0;
                    }
                    v838 = &v655[4 * v651];
                    *(_DWORD *)v838 = 65;
                    v649 = v838 + 4;
                    while (v645 != v650)
                    {
                      v839 = *--v645;
                      *((_DWORD *)v838 - 1) = v839;
                      v838 -= 4;
                    }
                    *(_QWORD *)v644 = v838;
                    *v646 = v649;
                    *v648 = &v655[4 * v654];
                    if (v650)
                      operator delete(v650);
                  }
                  else
                  {
                    *v645 = 65;
                    v649 = v645 + 1;
                  }
                  *v646 = v649;
                  if (!*v14)
                  {
LABEL_4064:
                    if ((*((_BYTE *)__p + 8) & 4) == 0)
                      goto LABEL_4065;
                    v840 = *v12 + 24 * v13;
                    v842 = (_DWORD **)(v840 + 8);
                    v841 = *(_DWORD **)(v840 + 8);
                    v844 = (_QWORD *)(v840 + 16);
                    v843 = *(_QWORD *)(v840 + 16);
                    if ((unint64_t)v841 >= v843)
                    {
                      v846 = *(_DWORD **)v840;
                      v847 = ((uint64_t)v841 - *(_QWORD *)v840) >> 2;
                      v848 = v847 + 1;
                      if ((unint64_t)(v847 + 1) >> 62)
                        sub_4074();
                      v849 = v843 - (_QWORD)v846;
                      if (v849 >> 1 > v848)
                        v848 = v849 >> 1;
                      if ((unint64_t)v849 >= 0x7FFFFFFFFFFFFFFCLL)
                        v850 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v850 = v848;
                      if (v850)
                      {
                        v851 = (char *)sub_43B2C((uint64_t)v844, v850);
                        v841 = *v842;
                        v846 = *(_DWORD **)v840;
                      }
                      else
                      {
                        v851 = 0;
                      }
                      v1014 = &v851[4 * v847];
                      *(_DWORD *)v1014 = 66;
                      v845 = v1014 + 4;
                      while (v841 != v846)
                      {
                        v1015 = *--v841;
                        *((_DWORD *)v1014 - 1) = v1015;
                        v1014 -= 4;
                      }
                      *(_QWORD *)v840 = v1014;
                      *v842 = v845;
                      *v844 = &v851[4 * v850];
                      if (v846)
                        operator delete(v846);
                    }
                    else
                    {
                      *v841 = 66;
                      v845 = v841 + 1;
                    }
                    *v842 = v845;
                    if (!*v14)
                    {
LABEL_4065:
                      if ((*((_BYTE *)__p + 8) & 8) == 0)
                        goto LABEL_4066;
                      v1016 = *v12 + 24 * v13;
                      v1018 = (_DWORD **)(v1016 + 8);
                      v1017 = *(_DWORD **)(v1016 + 8);
                      v1020 = (_QWORD *)(v1016 + 16);
                      v1019 = *(_QWORD *)(v1016 + 16);
                      if ((unint64_t)v1017 >= v1019)
                      {
                        v1022 = *(_DWORD **)v1016;
                        v1023 = ((uint64_t)v1017 - *(_QWORD *)v1016) >> 2;
                        v1024 = v1023 + 1;
                        if ((unint64_t)(v1023 + 1) >> 62)
                          sub_4074();
                        v1025 = v1019 - (_QWORD)v1022;
                        if (v1025 >> 1 > v1024)
                          v1024 = v1025 >> 1;
                        if ((unint64_t)v1025 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1026 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1026 = v1024;
                        if (v1026)
                        {
                          v1027 = (char *)sub_43B2C((uint64_t)v1020, v1026);
                          v1017 = *v1018;
                          v1022 = *(_DWORD **)v1016;
                        }
                        else
                        {
                          v1027 = 0;
                        }
                        v1195 = &v1027[4 * v1023];
                        *(_DWORD *)v1195 = 67;
                        v1021 = v1195 + 4;
                        while (v1017 != v1022)
                        {
                          v1196 = *--v1017;
                          *((_DWORD *)v1195 - 1) = v1196;
                          v1195 -= 4;
                        }
                        *(_QWORD *)v1016 = v1195;
                        *v1018 = v1021;
                        *v1020 = &v1027[4 * v1026];
                        if (v1022)
                          operator delete(v1022);
                      }
                      else
                      {
                        *v1017 = 67;
                        v1021 = v1017 + 1;
                      }
                      *v1018 = v1021;
                      if (!*v14)
                      {
LABEL_4066:
                        if ((*((_BYTE *)__p + 8) & 0x10) != 0)
                        {
                          v223 = *v12 + 24 * v13;
                          v225 = (int **)(v223 + 8);
                          v224 = *(int **)(v223 + 8);
                          v227 = (_QWORD *)(v223 + 16);
                          v1197 = *(_QWORD *)(v223 + 16);
                          if ((unint64_t)v224 < v1197)
                          {
                            v228 = 68;
                            goto LABEL_2185;
                          }
                          v229 = *(int **)v223;
                          v1198 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                          v1199 = v1198 + 1;
                          if ((unint64_t)(v1198 + 1) >> 62)
                            sub_4074();
                          v1200 = v1197 - (_QWORD)v229;
                          if (v1200 >> 1 > v1199)
                            v1199 = v1200 >> 1;
                          if ((unint64_t)v1200 >= 0x7FFFFFFFFFFFFFFCLL)
                            v233 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v233 = v1199;
                          if (v233)
                          {
                            v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                            v224 = *v225;
                            v229 = *(int **)v223;
                          }
                          else
                          {
                            v234 = 0;
                          }
                          v457 = &v234[4 * v1198];
                          *(_DWORD *)v457 = 68;
                          v458 = (int *)(v457 + 4);
                          while (v224 != v229)
                          {
                            v1355 = *--v224;
                            *((_DWORD *)v457 - 1) = v1355;
                            v457 -= 4;
                          }
                          goto LABEL_3707;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 11:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 7) & 0x10) == 0)
              goto LABEL_230;
            v27 = *v12 + 24 * v13;
            v29 = (_DWORD **)(v27 + 8);
            v28 = *(_DWORD **)(v27 + 8);
            v31 = (_QWORD *)(v27 + 16);
            v30 = *(_QWORD *)(v27 + 16);
            if ((unint64_t)v28 >= v30)
            {
              v117 = *(_DWORD **)v27;
              v118 = ((uint64_t)v28 - *(_QWORD *)v27) >> 2;
              v119 = v118 + 1;
              if ((unint64_t)(v118 + 1) >> 62)
                sub_4074();
              v120 = v30 - (_QWORD)v117;
              if (v120 >> 1 > v119)
                v119 = v120 >> 1;
              if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
                v121 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v121 = v119;
              if (v121)
              {
                v122 = (char *)sub_43B2C((uint64_t)v31, v121);
                v28 = *v29;
                v117 = *(_DWORD **)v27;
              }
              else
              {
                v122 = 0;
              }
              v221 = &v122[4 * v118];
              *(_DWORD *)v221 = 60;
              v32 = v221 + 4;
              while (v28 != v117)
              {
                v222 = *--v28;
                *((_DWORD *)v221 - 1) = v222;
                v221 -= 4;
              }
              *(_QWORD *)v27 = v221;
              *v29 = v32;
              *v31 = &v122[4 * v121];
              if (v117)
                operator delete(v117);
            }
            else
            {
              *v28 = 60;
              v32 = v28 + 1;
            }
            *v29 = v32;
            if (!*v14)
            {
LABEL_230:
              if ((*((_BYTE *)__p + 7) & 0x20) != 0)
              {
                v223 = *v12 + 24 * v13;
                v225 = (int **)(v223 + 8);
                v224 = *(int **)(v223 + 8);
                v227 = (_QWORD *)(v223 + 16);
                v226 = *(_QWORD *)(v223 + 16);
                if ((unint64_t)v224 < v226)
                {
                  v228 = 61;
                  goto LABEL_2185;
                }
                v229 = *(int **)v223;
                v230 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                v231 = v230 + 1;
                if ((unint64_t)(v230 + 1) >> 62)
                  sub_4074();
                v232 = v226 - (_QWORD)v229;
                if (v232 >> 1 > v231)
                  v231 = v232 >> 1;
                if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL)
                  v233 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v233 = v231;
                if (v233)
                {
                  v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                  v224 = *v225;
                  v229 = *(int **)v223;
                }
                else
                {
                  v234 = 0;
                }
                v457 = &v234[4 * v230];
                *(_DWORD *)v457 = 61;
                v458 = (int *)(v457 + 4);
                while (v224 != v229)
                {
                  v459 = *--v224;
                  *((_DWORD *)v457 - 1) = v459;
                  v457 -= 4;
                }
                goto LABEL_3707;
              }
            }
          }
          break;
        case 12:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 15) & 1) == 0)
              goto LABEL_266;
            v39 = *v12 + 24 * v13;
            v41 = (_DWORD **)(v39 + 8);
            v40 = *(_DWORD **)(v39 + 8);
            v43 = (_QWORD *)(v39 + 16);
            v42 = *(_QWORD *)(v39 + 16);
            if ((unint64_t)v40 >= v42)
            {
              v129 = *(_DWORD **)v39;
              v130 = ((uint64_t)v40 - *(_QWORD *)v39) >> 2;
              v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 62)
                sub_4074();
              v132 = v42 - (_QWORD)v129;
              if (v132 >> 1 > v131)
                v131 = v132 >> 1;
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
                v133 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v133 = v131;
              if (v133)
              {
                v134 = (char *)sub_43B2C((uint64_t)v43, v133);
                v40 = *v41;
                v129 = *(_DWORD **)v39;
              }
              else
              {
                v134 = 0;
              }
              v249 = &v134[4 * v130];
              *(_DWORD *)v249 = 120;
              v44 = v249 + 4;
              while (v40 != v129)
              {
                v250 = *--v40;
                *((_DWORD *)v249 - 1) = v250;
                v249 -= 4;
              }
              *(_QWORD *)v39 = v249;
              *v41 = v44;
              *v43 = &v134[4 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *v40 = 120;
              v44 = v40 + 1;
            }
            *v41 = v44;
            if (!*v14)
            {
LABEL_266:
              if ((*((_BYTE *)__p + 15) & 2) == 0)
                goto LABEL_1764;
              v251 = *v12 + 24 * v13;
              v253 = (_DWORD **)(v251 + 8);
              v252 = *(_DWORD **)(v251 + 8);
              v255 = (_QWORD *)(v251 + 16);
              v254 = *(_QWORD *)(v251 + 16);
              if ((unint64_t)v252 >= v254)
              {
                v257 = *(_DWORD **)v251;
                v258 = ((uint64_t)v252 - *(_QWORD *)v251) >> 2;
                v259 = v258 + 1;
                if ((unint64_t)(v258 + 1) >> 62)
                  sub_4074();
                v260 = v254 - (_QWORD)v257;
                if (v260 >> 1 > v259)
                  v259 = v260 >> 1;
                if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFFCLL)
                  v261 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v261 = v259;
                if (v261)
                {
                  v262 = (char *)sub_43B2C((uint64_t)v255, v261);
                  v252 = *v253;
                  v257 = *(_DWORD **)v251;
                }
                else
                {
                  v262 = 0;
                }
                v474 = &v262[4 * v258];
                *(_DWORD *)v474 = 121;
                v256 = v474 + 4;
                while (v252 != v257)
                {
                  v475 = *--v252;
                  *((_DWORD *)v474 - 1) = v475;
                  v474 -= 4;
                }
                *(_QWORD *)v251 = v474;
                *v253 = v256;
                *v255 = &v262[4 * v261];
                if (v257)
                  operator delete(v257);
              }
              else
              {
                *v252 = 121;
                v256 = v252 + 1;
              }
              *v253 = v256;
              if (!*v14)
              {
LABEL_1764:
                if ((*((_BYTE *)__p + 15) & 4) == 0)
                  goto LABEL_4067;
                v476 = *v12 + 24 * v13;
                v478 = (_DWORD **)(v476 + 8);
                v477 = *(_DWORD **)(v476 + 8);
                v480 = (_QWORD *)(v476 + 16);
                v479 = *(_QWORD *)(v476 + 16);
                if ((unint64_t)v477 >= v479)
                {
                  v482 = *(_DWORD **)v476;
                  v483 = ((uint64_t)v477 - *(_QWORD *)v476) >> 2;
                  v484 = v483 + 1;
                  if ((unint64_t)(v483 + 1) >> 62)
                    sub_4074();
                  v485 = v479 - (_QWORD)v482;
                  if (v485 >> 1 > v484)
                    v484 = v485 >> 1;
                  if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFFCLL)
                    v486 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v486 = v484;
                  if (v486)
                  {
                    v487 = (char *)sub_43B2C((uint64_t)v480, v486);
                    v477 = *v478;
                    v482 = *(_DWORD **)v476;
                  }
                  else
                  {
                    v487 = 0;
                  }
                  v678 = &v487[4 * v483];
                  *(_DWORD *)v678 = 122;
                  v481 = v678 + 4;
                  while (v477 != v482)
                  {
                    v679 = *--v477;
                    *((_DWORD *)v678 - 1) = v679;
                    v678 -= 4;
                  }
                  *(_QWORD *)v476 = v678;
                  *v478 = v481;
                  *v480 = &v487[4 * v486];
                  if (v482)
                    operator delete(v482);
                }
                else
                {
                  *v477 = 122;
                  v481 = v477 + 1;
                }
                *v478 = v481;
                if (!*v14)
                {
LABEL_4067:
                  if ((*((_BYTE *)__p + 15) & 8) == 0)
                    goto LABEL_4068;
                  v680 = *v12 + 24 * v13;
                  v682 = (_DWORD **)(v680 + 8);
                  v681 = *(_DWORD **)(v680 + 8);
                  v684 = (_QWORD *)(v680 + 16);
                  v683 = *(_QWORD *)(v680 + 16);
                  if ((unint64_t)v681 >= v683)
                  {
                    v686 = *(_DWORD **)v680;
                    v687 = ((uint64_t)v681 - *(_QWORD *)v680) >> 2;
                    v688 = v687 + 1;
                    if ((unint64_t)(v687 + 1) >> 62)
                      sub_4074();
                    v689 = v683 - (_QWORD)v686;
                    if (v689 >> 1 > v688)
                      v688 = v689 >> 1;
                    if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFFCLL)
                      v690 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v690 = v688;
                    if (v690)
                    {
                      v691 = (char *)sub_43B2C((uint64_t)v684, v690);
                      v681 = *v682;
                      v686 = *(_DWORD **)v680;
                    }
                    else
                    {
                      v691 = 0;
                    }
                    v867 = &v691[4 * v687];
                    *(_DWORD *)v867 = 123;
                    v685 = v867 + 4;
                    while (v681 != v686)
                    {
                      v868 = *--v681;
                      *((_DWORD *)v867 - 1) = v868;
                      v867 -= 4;
                    }
                    *(_QWORD *)v680 = v867;
                    *v682 = v685;
                    *v684 = &v691[4 * v690];
                    if (v686)
                      operator delete(v686);
                  }
                  else
                  {
                    *v681 = 123;
                    v685 = v681 + 1;
                  }
                  *v682 = v685;
                  if (!*v14)
                  {
LABEL_4068:
                    if ((*((_BYTE *)__p + 15) & 0x10) == 0)
                      goto LABEL_4069;
                    v869 = *v12 + 24 * v13;
                    v871 = (_DWORD **)(v869 + 8);
                    v870 = *(_DWORD **)(v869 + 8);
                    v873 = (_QWORD *)(v869 + 16);
                    v872 = *(_QWORD *)(v869 + 16);
                    if ((unint64_t)v870 >= v872)
                    {
                      v875 = *(_DWORD **)v869;
                      v876 = ((uint64_t)v870 - *(_QWORD *)v869) >> 2;
                      v877 = v876 + 1;
                      if ((unint64_t)(v876 + 1) >> 62)
                        sub_4074();
                      v878 = v872 - (_QWORD)v875;
                      if (v878 >> 1 > v877)
                        v877 = v878 >> 1;
                      if ((unint64_t)v878 >= 0x7FFFFFFFFFFFFFFCLL)
                        v879 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v879 = v877;
                      if (v879)
                      {
                        v880 = (char *)sub_43B2C((uint64_t)v873, v879);
                        v870 = *v871;
                        v875 = *(_DWORD **)v869;
                      }
                      else
                      {
                        v880 = 0;
                      }
                      v1042 = &v880[4 * v876];
                      *(_DWORD *)v1042 = 124;
                      v874 = v1042 + 4;
                      while (v870 != v875)
                      {
                        v1043 = *--v870;
                        *((_DWORD *)v1042 - 1) = v1043;
                        v1042 -= 4;
                      }
                      *(_QWORD *)v869 = v1042;
                      *v871 = v874;
                      *v873 = &v880[4 * v879];
                      if (v875)
                        operator delete(v875);
                    }
                    else
                    {
                      *v870 = 124;
                      v874 = v870 + 1;
                    }
                    *v871 = v874;
                    if (!*v14)
                    {
LABEL_4069:
                      if ((*((_BYTE *)__p + 15) & 0x20) == 0)
                        goto LABEL_4070;
                      v1044 = *v12 + 24 * v13;
                      v1046 = (_DWORD **)(v1044 + 8);
                      v1045 = *(_DWORD **)(v1044 + 8);
                      v1048 = (_QWORD *)(v1044 + 16);
                      v1047 = *(_QWORD *)(v1044 + 16);
                      if ((unint64_t)v1045 >= v1047)
                      {
                        v1050 = *(_DWORD **)v1044;
                        v1051 = ((uint64_t)v1045 - *(_QWORD *)v1044) >> 2;
                        v1052 = v1051 + 1;
                        if ((unint64_t)(v1051 + 1) >> 62)
                          sub_4074();
                        v1053 = v1047 - (_QWORD)v1050;
                        if (v1053 >> 1 > v1052)
                          v1052 = v1053 >> 1;
                        if ((unint64_t)v1053 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1054 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1054 = v1052;
                        if (v1054)
                        {
                          v1055 = (char *)sub_43B2C((uint64_t)v1048, v1054);
                          v1045 = *v1046;
                          v1050 = *(_DWORD **)v1044;
                        }
                        else
                        {
                          v1055 = 0;
                        }
                        v1215 = &v1055[4 * v1051];
                        *(_DWORD *)v1215 = 125;
                        v1049 = v1215 + 4;
                        while (v1045 != v1050)
                        {
                          v1216 = *--v1045;
                          *((_DWORD *)v1215 - 1) = v1216;
                          v1215 -= 4;
                        }
                        *(_QWORD *)v1044 = v1215;
                        *v1046 = v1049;
                        *v1048 = &v1055[4 * v1054];
                        if (v1050)
                          operator delete(v1050);
                      }
                      else
                      {
                        *v1045 = 125;
                        v1049 = v1045 + 1;
                      }
                      *v1046 = v1049;
                      if (!*v14)
                      {
LABEL_4070:
                        if ((*((_BYTE *)__p + 15) & 0x40) == 0)
                          goto LABEL_4071;
                        v1217 = *v12 + 24 * v13;
                        v1219 = (_DWORD **)(v1217 + 8);
                        v1218 = *(_DWORD **)(v1217 + 8);
                        v1221 = (_QWORD *)(v1217 + 16);
                        v1220 = *(_QWORD *)(v1217 + 16);
                        if ((unint64_t)v1218 >= v1220)
                        {
                          v1223 = *(_DWORD **)v1217;
                          v1224 = ((uint64_t)v1218 - *(_QWORD *)v1217) >> 2;
                          v1225 = v1224 + 1;
                          if ((unint64_t)(v1224 + 1) >> 62)
                            sub_4074();
                          v1226 = v1220 - (_QWORD)v1223;
                          if (v1226 >> 1 > v1225)
                            v1225 = v1226 >> 1;
                          if ((unint64_t)v1226 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1227 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1227 = v1225;
                          if (v1227)
                          {
                            v1228 = (char *)sub_43B2C((uint64_t)v1221, v1227);
                            v1218 = *v1219;
                            v1223 = *(_DWORD **)v1217;
                          }
                          else
                          {
                            v1228 = 0;
                          }
                          v1372 = &v1228[4 * v1224];
                          *(_DWORD *)v1372 = 126;
                          v1222 = v1372 + 4;
                          while (v1218 != v1223)
                          {
                            v1373 = *--v1218;
                            *((_DWORD *)v1372 - 1) = v1373;
                            v1372 -= 4;
                          }
                          *(_QWORD *)v1217 = v1372;
                          *v1219 = v1222;
                          *v1221 = &v1228[4 * v1227];
                          if (v1223)
                            operator delete(v1223);
                        }
                        else
                        {
                          *v1218 = 126;
                          v1222 = v1218 + 1;
                        }
                        *v1219 = v1222;
                        if (!*v14)
                        {
LABEL_4071:
                          if ((*((_QWORD *)__p + 1) & 0x8000000000000000) != 0)
                          {
                            v223 = *v12 + 24 * v13;
                            v225 = (int **)(v223 + 8);
                            v224 = *(int **)(v223 + 8);
                            v227 = (_QWORD *)(v223 + 16);
                            v1374 = *(_QWORD *)(v223 + 16);
                            if ((unint64_t)v224 < v1374)
                            {
                              v228 = 127;
                              goto LABEL_2185;
                            }
                            v229 = *(int **)v223;
                            v1375 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                            v1376 = v1375 + 1;
                            if ((unint64_t)(v1375 + 1) >> 62)
                              sub_4074();
                            v1377 = v1374 - (_QWORD)v229;
                            if (v1377 >> 1 > v1376)
                              v1376 = v1377 >> 1;
                            if ((unint64_t)v1377 >= 0x7FFFFFFFFFFFFFFCLL)
                              v233 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v233 = v1376;
                            if (v233)
                            {
                              v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                              v224 = *v225;
                              v229 = *(int **)v223;
                            }
                            else
                            {
                              v234 = 0;
                            }
                            v457 = &v234[4 * v1375];
                            *(_DWORD *)v457 = 127;
                            v458 = (int *)(v457 + 4);
                            while (v224 != v229)
                            {
                              v1644 = *--v224;
                              *((_DWORD *)v457 - 1) = v1644;
                              v457 -= 4;
                            }
                            goto LABEL_3707;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 13:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 12) & 0x20) == 0)
              goto LABEL_428;
            v87 = *v12 + 24 * v13;
            v89 = (_DWORD **)(v87 + 8);
            v88 = *(_DWORD **)(v87 + 8);
            v91 = (_QWORD *)(v87 + 16);
            v90 = *(_QWORD *)(v87 + 16);
            if ((unint64_t)v88 >= v90)
            {
              v183 = *(_DWORD **)v87;
              v184 = ((uint64_t)v88 - *(_QWORD *)v87) >> 2;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62)
                sub_4074();
              v186 = v90 - (_QWORD)v183;
              if (v186 >> 1 > v185)
                v185 = v186 >> 1;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
                v187 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v187 = v185;
              if (v187)
              {
                v188 = (char *)sub_43B2C((uint64_t)v91, v187);
                v88 = *v89;
                v183 = *(_DWORD **)v87;
              }
              else
              {
                v188 = 0;
              }
              v375 = &v188[4 * v184];
              *(_DWORD *)v375 = 101;
              v92 = v375 + 4;
              while (v88 != v183)
              {
                v376 = *--v88;
                *((_DWORD *)v375 - 1) = v376;
                v375 -= 4;
              }
              *(_QWORD *)v87 = v375;
              *v89 = v92;
              *v91 = &v188[4 * v187];
              if (v183)
                operator delete(v183);
            }
            else
            {
              *v88 = 101;
              v92 = v88 + 1;
            }
            *v89 = v92;
            if (!*v14)
            {
LABEL_428:
              if ((*((_BYTE *)__p + 12) & 0x40) == 0)
                goto LABEL_2866;
              v377 = *v12 + 24 * v13;
              v379 = (_DWORD **)(v377 + 8);
              v378 = *(_DWORD **)(v377 + 8);
              v381 = (_QWORD *)(v377 + 16);
              v380 = *(_QWORD *)(v377 + 16);
              if ((unint64_t)v378 >= v380)
              {
                v383 = *(_DWORD **)v377;
                v384 = ((uint64_t)v378 - *(_QWORD *)v377) >> 2;
                v385 = v384 + 1;
                if ((unint64_t)(v384 + 1) >> 62)
                  sub_4074();
                v386 = v380 - (_QWORD)v383;
                if (v386 >> 1 > v385)
                  v385 = v386 >> 1;
                if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFFCLL)
                  v387 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v387 = v385;
                if (v387)
                {
                  v388 = (char *)sub_43B2C((uint64_t)v381, v387);
                  v378 = *v379;
                  v383 = *(_DWORD **)v377;
                }
                else
                {
                  v388 = 0;
                }
                v600 = &v388[4 * v384];
                *(_DWORD *)v600 = 102;
                v382 = v600 + 4;
                while (v378 != v383)
                {
                  v601 = *--v378;
                  *((_DWORD *)v600 - 1) = v601;
                  v600 -= 4;
                }
                *(_QWORD *)v377 = v600;
                *v379 = v382;
                *v381 = &v388[4 * v387];
                if (v383)
                  operator delete(v383);
              }
              else
              {
                *v378 = 102;
                v382 = v378 + 1;
              }
              *v379 = v382;
              if (!*v14)
              {
LABEL_2866:
                if ((*((_BYTE *)__p + 12) & 0x80) == 0)
                  goto LABEL_4072;
                v602 = *v12 + 24 * v13;
                v604 = (_DWORD **)(v602 + 8);
                v603 = *(_DWORD **)(v602 + 8);
                v606 = (_QWORD *)(v602 + 16);
                v605 = *(_QWORD *)(v602 + 16);
                if ((unint64_t)v603 >= v605)
                {
                  v608 = *(_DWORD **)v602;
                  v609 = ((uint64_t)v603 - *(_QWORD *)v602) >> 2;
                  v610 = v609 + 1;
                  if ((unint64_t)(v609 + 1) >> 62)
                    sub_4074();
                  v611 = v605 - (_QWORD)v608;
                  if (v611 >> 1 > v610)
                    v610 = v611 >> 1;
                  if ((unint64_t)v611 >= 0x7FFFFFFFFFFFFFFCLL)
                    v612 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v612 = v610;
                  if (v612)
                  {
                    v613 = (char *)sub_43B2C((uint64_t)v606, v612);
                    v603 = *v604;
                    v608 = *(_DWORD **)v602;
                  }
                  else
                  {
                    v613 = 0;
                  }
                  v796 = &v613[4 * v609];
                  *(_DWORD *)v796 = 103;
                  v607 = v796 + 4;
                  while (v603 != v608)
                  {
                    v797 = *--v603;
                    *((_DWORD *)v796 - 1) = v797;
                    v796 -= 4;
                  }
                  *(_QWORD *)v602 = v796;
                  *v604 = v607;
                  *v606 = &v613[4 * v612];
                  if (v608)
                    operator delete(v608);
                }
                else
                {
                  *v603 = 103;
                  v607 = v603 + 1;
                }
                *v604 = v607;
                if (!*v14)
                {
LABEL_4072:
                  if ((*((_BYTE *)__p + 13) & 1) == 0)
                    goto LABEL_4073;
                  v798 = *v12 + 24 * v13;
                  v800 = (_DWORD **)(v798 + 8);
                  v799 = *(_DWORD **)(v798 + 8);
                  v802 = (_QWORD *)(v798 + 16);
                  v801 = *(_QWORD *)(v798 + 16);
                  if ((unint64_t)v799 >= v801)
                  {
                    v804 = *(_DWORD **)v798;
                    v805 = ((uint64_t)v799 - *(_QWORD *)v798) >> 2;
                    v806 = v805 + 1;
                    if ((unint64_t)(v805 + 1) >> 62)
                      sub_4074();
                    v807 = v801 - (_QWORD)v804;
                    if (v807 >> 1 > v806)
                      v806 = v807 >> 1;
                    if ((unint64_t)v807 >= 0x7FFFFFFFFFFFFFFCLL)
                      v808 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v808 = v806;
                    if (v808)
                    {
                      v809 = (char *)sub_43B2C((uint64_t)v802, v808);
                      v799 = *v800;
                      v804 = *(_DWORD **)v798;
                    }
                    else
                    {
                      v809 = 0;
                    }
                    v980 = &v809[4 * v805];
                    *(_DWORD *)v980 = 104;
                    v803 = v980 + 4;
                    while (v799 != v804)
                    {
                      v981 = *--v799;
                      *((_DWORD *)v980 - 1) = v981;
                      v980 -= 4;
                    }
                    *(_QWORD *)v798 = v980;
                    *v800 = v803;
                    *v802 = &v809[4 * v808];
                    if (v804)
                      operator delete(v804);
                  }
                  else
                  {
                    *v799 = 104;
                    v803 = v799 + 1;
                  }
                  *v800 = v803;
                  if (!*v14)
                  {
LABEL_4073:
                    if ((*((_BYTE *)__p + 13) & 2) == 0)
                      goto LABEL_4074;
                    v982 = *v12 + 24 * v13;
                    v984 = (_DWORD **)(v982 + 8);
                    v983 = *(_DWORD **)(v982 + 8);
                    v986 = (_QWORD *)(v982 + 16);
                    v985 = *(_QWORD *)(v982 + 16);
                    if ((unint64_t)v983 >= v985)
                    {
                      v988 = *(_DWORD **)v982;
                      v989 = ((uint64_t)v983 - *(_QWORD *)v982) >> 2;
                      v990 = v989 + 1;
                      if ((unint64_t)(v989 + 1) >> 62)
                        sub_4074();
                      v991 = v985 - (_QWORD)v988;
                      if (v991 >> 1 > v990)
                        v990 = v991 >> 1;
                      if ((unint64_t)v991 >= 0x7FFFFFFFFFFFFFFCLL)
                        v992 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v992 = v990;
                      if (v992)
                      {
                        v993 = (char *)sub_43B2C((uint64_t)v986, v992);
                        v983 = *v984;
                        v988 = *(_DWORD **)v982;
                      }
                      else
                      {
                        v993 = 0;
                      }
                      v1166 = &v993[4 * v989];
                      *(_DWORD *)v1166 = 105;
                      v987 = v1166 + 4;
                      while (v983 != v988)
                      {
                        v1167 = *--v983;
                        *((_DWORD *)v1166 - 1) = v1167;
                        v1166 -= 4;
                      }
                      *(_QWORD *)v982 = v1166;
                      *v984 = v987;
                      *v986 = &v993[4 * v992];
                      if (v988)
                        operator delete(v988);
                    }
                    else
                    {
                      *v983 = 105;
                      v987 = v983 + 1;
                    }
                    *v984 = v987;
                    if (!*v14)
                    {
LABEL_4074:
                      if ((*((_BYTE *)__p + 13) & 4) == 0)
                        goto LABEL_4075;
                      v1168 = *v12 + 24 * v13;
                      v1170 = (_DWORD **)(v1168 + 8);
                      v1169 = *(_DWORD **)(v1168 + 8);
                      v1172 = (_QWORD *)(v1168 + 16);
                      v1171 = *(_QWORD *)(v1168 + 16);
                      if ((unint64_t)v1169 >= v1171)
                      {
                        v1174 = *(_DWORD **)v1168;
                        v1175 = ((uint64_t)v1169 - *(_QWORD *)v1168) >> 2;
                        v1176 = v1175 + 1;
                        if ((unint64_t)(v1175 + 1) >> 62)
                          sub_4074();
                        v1177 = v1171 - (_QWORD)v1174;
                        if (v1177 >> 1 > v1176)
                          v1176 = v1177 >> 1;
                        if ((unint64_t)v1177 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1178 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1178 = v1176;
                        if (v1178)
                        {
                          v1179 = (char *)sub_43B2C((uint64_t)v1172, v1178);
                          v1169 = *v1170;
                          v1174 = *(_DWORD **)v1168;
                        }
                        else
                        {
                          v1179 = 0;
                        }
                        v1313 = &v1179[4 * v1175];
                        *(_DWORD *)v1313 = 106;
                        v1173 = v1313 + 4;
                        while (v1169 != v1174)
                        {
                          v1314 = *--v1169;
                          *((_DWORD *)v1313 - 1) = v1314;
                          v1313 -= 4;
                        }
                        *(_QWORD *)v1168 = v1313;
                        *v1170 = v1173;
                        *v1172 = &v1179[4 * v1178];
                        if (v1174)
                          operator delete(v1174);
                      }
                      else
                      {
                        *v1169 = 106;
                        v1173 = v1169 + 1;
                      }
                      *v1170 = v1173;
                      if (!*v14)
                      {
LABEL_4075:
                        if ((*((_BYTE *)__p + 13) & 8) == 0)
                          goto LABEL_4076;
                        v1315 = *v12 + 24 * v13;
                        v1317 = (_DWORD **)(v1315 + 8);
                        v1316 = *(_DWORD **)(v1315 + 8);
                        v1319 = (_QWORD *)(v1315 + 16);
                        v1318 = *(_QWORD *)(v1315 + 16);
                        if ((unint64_t)v1316 >= v1318)
                        {
                          v1321 = *(_DWORD **)v1315;
                          v1322 = ((uint64_t)v1316 - *(_QWORD *)v1315) >> 2;
                          v1323 = v1322 + 1;
                          if ((unint64_t)(v1322 + 1) >> 62)
                            sub_4074();
                          v1324 = v1318 - (_QWORD)v1321;
                          if (v1324 >> 1 > v1323)
                            v1323 = v1324 >> 1;
                          if ((unint64_t)v1324 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1325 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1325 = v1323;
                          if (v1325)
                          {
                            v1326 = (char *)sub_43B2C((uint64_t)v1319, v1325);
                            v1316 = *v1317;
                            v1321 = *(_DWORD **)v1315;
                          }
                          else
                          {
                            v1326 = 0;
                          }
                          v1462 = &v1326[4 * v1322];
                          *(_DWORD *)v1462 = 107;
                          v1320 = v1462 + 4;
                          while (v1316 != v1321)
                          {
                            v1463 = *--v1316;
                            *((_DWORD *)v1462 - 1) = v1463;
                            v1462 -= 4;
                          }
                          *(_QWORD *)v1315 = v1462;
                          *v1317 = v1320;
                          *v1319 = &v1326[4 * v1325];
                          if (v1321)
                            operator delete(v1321);
                        }
                        else
                        {
                          *v1316 = 107;
                          v1320 = v1316 + 1;
                        }
                        *v1317 = v1320;
                        if (!*v14)
                        {
LABEL_4076:
                          if ((*((_BYTE *)__p + 13) & 0x10) == 0)
                            goto LABEL_4077;
                          v1464 = *v12 + 24 * v13;
                          v1466 = (_DWORD **)(v1464 + 8);
                          v1465 = *(_DWORD **)(v1464 + 8);
                          v1468 = (_QWORD *)(v1464 + 16);
                          v1467 = *(_QWORD *)(v1464 + 16);
                          if ((unint64_t)v1465 >= v1467)
                          {
                            v1470 = *(_DWORD **)v1464;
                            v1471 = ((uint64_t)v1465 - *(_QWORD *)v1464) >> 2;
                            v1472 = v1471 + 1;
                            if ((unint64_t)(v1471 + 1) >> 62)
                              sub_4074();
                            v1473 = v1467 - (_QWORD)v1470;
                            if (v1473 >> 1 > v1472)
                              v1472 = v1473 >> 1;
                            if ((unint64_t)v1473 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1474 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1474 = v1472;
                            if (v1474)
                            {
                              v1475 = (char *)sub_43B2C((uint64_t)v1468, v1474);
                              v1465 = *v1466;
                              v1470 = *(_DWORD **)v1464;
                            }
                            else
                            {
                              v1475 = 0;
                            }
                            v1602 = &v1475[4 * v1471];
                            *(_DWORD *)v1602 = 108;
                            v1469 = v1602 + 4;
                            while (v1465 != v1470)
                            {
                              v1603 = *--v1465;
                              *((_DWORD *)v1602 - 1) = v1603;
                              v1602 -= 4;
                            }
                            *(_QWORD *)v1464 = v1602;
                            *v1466 = v1469;
                            *v1468 = &v1475[4 * v1474];
                            if (v1470)
                              operator delete(v1470);
                          }
                          else
                          {
                            *v1465 = 108;
                            v1469 = v1465 + 1;
                          }
                          *v1466 = v1469;
                          if (!*v14)
                          {
LABEL_4077:
                            if ((*((_BYTE *)__p + 13) & 0x20) == 0)
                              goto LABEL_4078;
                            v1604 = *v12 + 24 * v13;
                            v1606 = (_DWORD **)(v1604 + 8);
                            v1605 = *(_DWORD **)(v1604 + 8);
                            v1608 = (_QWORD *)(v1604 + 16);
                            v1607 = *(_QWORD *)(v1604 + 16);
                            if ((unint64_t)v1605 >= v1607)
                            {
                              v1610 = *(_DWORD **)v1604;
                              v1611 = ((uint64_t)v1605 - *(_QWORD *)v1604) >> 2;
                              v1612 = v1611 + 1;
                              if ((unint64_t)(v1611 + 1) >> 62)
                                sub_4074();
                              v1613 = v1607 - (_QWORD)v1610;
                              if (v1613 >> 1 > v1612)
                                v1612 = v1613 >> 1;
                              if ((unint64_t)v1613 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1614 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1614 = v1612;
                              if (v1614)
                              {
                                v1615 = (char *)sub_43B2C((uint64_t)v1608, v1614);
                                v1605 = *v1606;
                                v1610 = *(_DWORD **)v1604;
                              }
                              else
                              {
                                v1615 = 0;
                              }
                              v1735 = &v1615[4 * v1611];
                              *(_DWORD *)v1735 = 109;
                              v1609 = v1735 + 4;
                              while (v1605 != v1610)
                              {
                                v1736 = *--v1605;
                                *((_DWORD *)v1735 - 1) = v1736;
                                v1735 -= 4;
                              }
                              *(_QWORD *)v1604 = v1735;
                              *v1606 = v1609;
                              *v1608 = &v1615[4 * v1614];
                              if (v1610)
                                operator delete(v1610);
                            }
                            else
                            {
                              *v1605 = 109;
                              v1609 = v1605 + 1;
                            }
                            *v1606 = v1609;
                            if (!*v14)
                            {
LABEL_4078:
                              if ((*((_BYTE *)__p + 13) & 0x40) == 0)
                                goto LABEL_4079;
                              v1737 = *v12 + 24 * v13;
                              v1739 = (_DWORD **)(v1737 + 8);
                              v1738 = *(_DWORD **)(v1737 + 8);
                              v1741 = (_QWORD *)(v1737 + 16);
                              v1740 = *(_QWORD *)(v1737 + 16);
                              if ((unint64_t)v1738 >= v1740)
                              {
                                v1743 = *(_DWORD **)v1737;
                                v1744 = ((uint64_t)v1738 - *(_QWORD *)v1737) >> 2;
                                v1745 = v1744 + 1;
                                if ((unint64_t)(v1744 + 1) >> 62)
                                  sub_4074();
                                v1746 = v1740 - (_QWORD)v1743;
                                if (v1746 >> 1 > v1745)
                                  v1745 = v1746 >> 1;
                                if ((unint64_t)v1746 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v1747 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v1747 = v1745;
                                if (v1747)
                                {
                                  v1748 = (char *)sub_43B2C((uint64_t)v1741, v1747);
                                  v1738 = *v1739;
                                  v1743 = *(_DWORD **)v1737;
                                }
                                else
                                {
                                  v1748 = 0;
                                }
                                v1843 = &v1748[4 * v1744];
                                *(_DWORD *)v1843 = 110;
                                v1742 = v1843 + 4;
                                while (v1738 != v1743)
                                {
                                  v1844 = *--v1738;
                                  *((_DWORD *)v1843 - 1) = v1844;
                                  v1843 -= 4;
                                }
                                *(_QWORD *)v1737 = v1843;
                                *v1739 = v1742;
                                *v1741 = &v1748[4 * v1747];
                                if (v1743)
                                  operator delete(v1743);
                              }
                              else
                              {
                                *v1738 = 110;
                                v1742 = v1738 + 1;
                              }
                              *v1739 = v1742;
                              if (!*v14)
                              {
LABEL_4079:
                                if ((*((_BYTE *)__p + 13) & 0x80) == 0)
                                  goto LABEL_4080;
                                v1845 = *v12 + 24 * v13;
                                v1847 = (_DWORD **)(v1845 + 8);
                                v1846 = *(_DWORD **)(v1845 + 8);
                                v1849 = (_QWORD *)(v1845 + 16);
                                v1848 = *(_QWORD *)(v1845 + 16);
                                if ((unint64_t)v1846 >= v1848)
                                {
                                  v1851 = *(_DWORD **)v1845;
                                  v1852 = ((uint64_t)v1846 - *(_QWORD *)v1845) >> 2;
                                  v1853 = v1852 + 1;
                                  if ((unint64_t)(v1852 + 1) >> 62)
                                    sub_4074();
                                  v1854 = v1848 - (_QWORD)v1851;
                                  if (v1854 >> 1 > v1853)
                                    v1853 = v1854 >> 1;
                                  if ((unint64_t)v1854 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v1855 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v1855 = v1853;
                                  if (v1855)
                                  {
                                    v1856 = (char *)sub_43B2C((uint64_t)v1849, v1855);
                                    v1846 = *v1847;
                                    v1851 = *(_DWORD **)v1845;
                                  }
                                  else
                                  {
                                    v1856 = 0;
                                  }
                                  v1934 = &v1856[4 * v1852];
                                  *(_DWORD *)v1934 = 111;
                                  v1850 = v1934 + 4;
                                  while (v1846 != v1851)
                                  {
                                    v1935 = *--v1846;
                                    *((_DWORD *)v1934 - 1) = v1935;
                                    v1934 -= 4;
                                  }
                                  *(_QWORD *)v1845 = v1934;
                                  *v1847 = v1850;
                                  *v1849 = &v1856[4 * v1855];
                                  if (v1851)
                                    operator delete(v1851);
                                }
                                else
                                {
                                  *v1846 = 111;
                                  v1850 = v1846 + 1;
                                }
                                *v1847 = v1850;
                                if (!*v14)
                                {
LABEL_4080:
                                  if ((*((_BYTE *)__p + 14) & 1) == 0)
                                    goto LABEL_4081;
                                  v1936 = *v12 + 24 * v13;
                                  v1938 = (_DWORD **)(v1936 + 8);
                                  v1937 = *(_DWORD **)(v1936 + 8);
                                  v1940 = (_QWORD *)(v1936 + 16);
                                  v1939 = *(_QWORD *)(v1936 + 16);
                                  if ((unint64_t)v1937 >= v1939)
                                  {
                                    v1942 = *(_DWORD **)v1936;
                                    v1943 = ((uint64_t)v1937 - *(_QWORD *)v1936) >> 2;
                                    v1944 = v1943 + 1;
                                    if ((unint64_t)(v1943 + 1) >> 62)
                                      sub_4074();
                                    v1945 = v1939 - (_QWORD)v1942;
                                    if (v1945 >> 1 > v1944)
                                      v1944 = v1945 >> 1;
                                    if ((unint64_t)v1945 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v1946 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v1946 = v1944;
                                    if (v1946)
                                    {
                                      v1947 = (char *)sub_43B2C((uint64_t)v1940, v1946);
                                      v1937 = *v1938;
                                      v1942 = *(_DWORD **)v1936;
                                    }
                                    else
                                    {
                                      v1947 = 0;
                                    }
                                    v2019 = &v1947[4 * v1943];
                                    *(_DWORD *)v2019 = 112;
                                    v1941 = v2019 + 4;
                                    while (v1937 != v1942)
                                    {
                                      v2020 = *--v1937;
                                      *((_DWORD *)v2019 - 1) = v2020;
                                      v2019 -= 4;
                                    }
                                    *(_QWORD *)v1936 = v2019;
                                    *v1938 = v1941;
                                    *v1940 = &v1947[4 * v1946];
                                    if (v1942)
                                      operator delete(v1942);
                                  }
                                  else
                                  {
                                    *v1937 = 112;
                                    v1941 = v1937 + 1;
                                  }
                                  *v1938 = v1941;
                                  if (!*v14)
                                  {
LABEL_4081:
                                    if ((*((_BYTE *)__p + 14) & 2) == 0)
                                      goto LABEL_4082;
                                    v2021 = *v12 + 24 * v13;
                                    v2023 = (_DWORD **)(v2021 + 8);
                                    v2022 = *(_DWORD **)(v2021 + 8);
                                    v2025 = (_QWORD *)(v2021 + 16);
                                    v2024 = *(_QWORD *)(v2021 + 16);
                                    if ((unint64_t)v2022 >= v2024)
                                    {
                                      v2027 = *(_DWORD **)v2021;
                                      v2028 = ((uint64_t)v2022 - *(_QWORD *)v2021) >> 2;
                                      v2029 = v2028 + 1;
                                      if ((unint64_t)(v2028 + 1) >> 62)
                                        sub_4074();
                                      v2030 = v2024 - (_QWORD)v2027;
                                      if (v2030 >> 1 > v2029)
                                        v2029 = v2030 >> 1;
                                      if ((unint64_t)v2030 >= 0x7FFFFFFFFFFFFFFCLL)
                                        v2031 = 0x3FFFFFFFFFFFFFFFLL;
                                      else
                                        v2031 = v2029;
                                      if (v2031)
                                      {
                                        v2032 = (char *)sub_43B2C((uint64_t)v2025, v2031);
                                        v2022 = *v2023;
                                        v2027 = *(_DWORD **)v2021;
                                      }
                                      else
                                      {
                                        v2032 = 0;
                                      }
                                      v2103 = &v2032[4 * v2028];
                                      *(_DWORD *)v2103 = 113;
                                      v2026 = v2103 + 4;
                                      while (v2022 != v2027)
                                      {
                                        v2104 = *--v2022;
                                        *((_DWORD *)v2103 - 1) = v2104;
                                        v2103 -= 4;
                                      }
                                      *(_QWORD *)v2021 = v2103;
                                      *v2023 = v2026;
                                      *v2025 = &v2032[4 * v2031];
                                      if (v2027)
                                        operator delete(v2027);
                                    }
                                    else
                                    {
                                      *v2022 = 113;
                                      v2026 = v2022 + 1;
                                    }
                                    *v2023 = v2026;
                                    if (!*v14)
                                    {
LABEL_4082:
                                      if ((*((_BYTE *)__p + 14) & 4) == 0)
                                        goto LABEL_4083;
                                      v2105 = *v12 + 24 * v13;
                                      v2107 = (_DWORD **)(v2105 + 8);
                                      v2106 = *(_DWORD **)(v2105 + 8);
                                      v2109 = (_QWORD *)(v2105 + 16);
                                      v2108 = *(_QWORD *)(v2105 + 16);
                                      if ((unint64_t)v2106 >= v2108)
                                      {
                                        v2111 = *(_DWORD **)v2105;
                                        v2112 = ((uint64_t)v2106 - *(_QWORD *)v2105) >> 2;
                                        v2113 = v2112 + 1;
                                        if ((unint64_t)(v2112 + 1) >> 62)
                                          sub_4074();
                                        v2114 = v2108 - (_QWORD)v2111;
                                        if (v2114 >> 1 > v2113)
                                          v2113 = v2114 >> 1;
                                        if ((unint64_t)v2114 >= 0x7FFFFFFFFFFFFFFCLL)
                                          v2115 = 0x3FFFFFFFFFFFFFFFLL;
                                        else
                                          v2115 = v2113;
                                        if (v2115)
                                        {
                                          v2116 = (char *)sub_43B2C((uint64_t)v2109, v2115);
                                          v2106 = *v2107;
                                          v2111 = *(_DWORD **)v2105;
                                        }
                                        else
                                        {
                                          v2116 = 0;
                                        }
                                        v2187 = &v2116[4 * v2112];
                                        *(_DWORD *)v2187 = 114;
                                        v2110 = v2187 + 4;
                                        while (v2106 != v2111)
                                        {
                                          v2188 = *--v2106;
                                          *((_DWORD *)v2187 - 1) = v2188;
                                          v2187 -= 4;
                                        }
                                        *(_QWORD *)v2105 = v2187;
                                        *v2107 = v2110;
                                        *v2109 = &v2116[4 * v2115];
                                        if (v2111)
                                          operator delete(v2111);
                                      }
                                      else
                                      {
                                        *v2106 = 114;
                                        v2110 = v2106 + 1;
                                      }
                                      *v2107 = v2110;
                                      if (!*v14)
                                      {
LABEL_4083:
                                        if ((*((_BYTE *)__p + 14) & 8) != 0)
                                        {
                                          v223 = *v12 + 24 * v13;
                                          v225 = (int **)(v223 + 8);
                                          v224 = *(int **)(v223 + 8);
                                          v227 = (_QWORD *)(v223 + 16);
                                          v2189 = *(_QWORD *)(v223 + 16);
                                          if ((unint64_t)v224 < v2189)
                                          {
                                            v228 = 115;
                                            goto LABEL_2185;
                                          }
                                          v229 = *(int **)v223;
                                          v2190 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                                          v2191 = v2190 + 1;
                                          if ((unint64_t)(v2190 + 1) >> 62)
                                            sub_4074();
                                          v2192 = v2189 - (_QWORD)v229;
                                          if (v2192 >> 1 > v2191)
                                            v2191 = v2192 >> 1;
                                          if ((unint64_t)v2192 >= 0x7FFFFFFFFFFFFFFCLL)
                                            v233 = 0x3FFFFFFFFFFFFFFFLL;
                                          else
                                            v233 = v2191;
                                          if (v233)
                                          {
                                            v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                                            v224 = *v225;
                                            v229 = *(int **)v223;
                                          }
                                          else
                                          {
                                            v234 = 0;
                                          }
                                          v457 = &v234[4 * v2190];
                                          *(_DWORD *)v457 = 115;
                                          v458 = (int *)(v457 + 4);
                                          while (v224 != v229)
                                          {
                                            v2263 = *--v224;
                                            *((_DWORD *)v457 - 1) = v2263;
                                            v457 -= 4;
                                          }
                                          goto LABEL_3707;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        case 14:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 14) & 0x10) == 0)
              goto LABEL_212;
            v21 = *v12 + 24 * v13;
            v23 = (_DWORD **)(v21 + 8);
            v22 = *(_DWORD **)(v21 + 8);
            v25 = (_QWORD *)(v21 + 16);
            v24 = *(_QWORD *)(v21 + 16);
            if ((unint64_t)v22 >= v24)
            {
              v111 = *(_DWORD **)v21;
              v112 = ((uint64_t)v22 - *(_QWORD *)v21) >> 2;
              v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 62)
                sub_4074();
              v114 = v24 - (_QWORD)v111;
              if (v114 >> 1 > v113)
                v113 = v114 >> 1;
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
                v115 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v115 = v113;
              if (v115)
              {
                v116 = (char *)sub_43B2C((uint64_t)v25, v115);
                v22 = *v23;
                v111 = *(_DWORD **)v21;
              }
              else
              {
                v116 = 0;
              }
              v207 = &v116[4 * v112];
              *(_DWORD *)v207 = 116;
              v26 = v207 + 4;
              while (v22 != v111)
              {
                v208 = *--v22;
                *((_DWORD *)v207 - 1) = v208;
                v207 -= 4;
              }
              *(_QWORD *)v21 = v207;
              *v23 = v26;
              *v25 = &v116[4 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *v22 = 116;
              v26 = v22 + 1;
            }
            *v23 = v26;
            if (!*v14)
            {
LABEL_212:
              if ((*((_BYTE *)__p + 14) & 0x20) == 0)
                goto LABEL_793;
              v209 = *v12 + 24 * v13;
              v211 = (_DWORD **)(v209 + 8);
              v210 = *(_DWORD **)(v209 + 8);
              v213 = (_QWORD *)(v209 + 16);
              v212 = *(_QWORD *)(v209 + 16);
              if ((unint64_t)v210 >= v212)
              {
                v215 = *(_DWORD **)v209;
                v216 = ((uint64_t)v210 - *(_QWORD *)v209) >> 2;
                v217 = v216 + 1;
                if ((unint64_t)(v216 + 1) >> 62)
                  sub_4074();
                v218 = v212 - (_QWORD)v215;
                if (v218 >> 1 > v217)
                  v217 = v218 >> 1;
                if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFFCLL)
                  v219 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v219 = v217;
                if (v219)
                {
                  v220 = (char *)sub_43B2C((uint64_t)v213, v219);
                  v210 = *v211;
                  v215 = *(_DWORD **)v209;
                }
                else
                {
                  v220 = 0;
                }
                v443 = &v220[4 * v216];
                *(_DWORD *)v443 = 117;
                v214 = v443 + 4;
                while (v210 != v215)
                {
                  v444 = *--v210;
                  *((_DWORD *)v443 - 1) = v444;
                  v443 -= 4;
                }
                *(_QWORD *)v209 = v443;
                *v211 = v214;
                *v213 = &v220[4 * v219];
                if (v215)
                  operator delete(v215);
              }
              else
              {
                *v210 = 117;
                v214 = v210 + 1;
              }
              *v211 = v214;
              if (!*v14)
              {
LABEL_793:
                if ((*((_BYTE *)__p + 14) & 0x40) == 0)
                  goto LABEL_4084;
                v445 = *v12 + 24 * v13;
                v447 = (_DWORD **)(v445 + 8);
                v446 = *(_DWORD **)(v445 + 8);
                v449 = (_QWORD *)(v445 + 16);
                v448 = *(_QWORD *)(v445 + 16);
                if ((unint64_t)v446 >= v448)
                {
                  v451 = *(_DWORD **)v445;
                  v452 = ((uint64_t)v446 - *(_QWORD *)v445) >> 2;
                  v453 = v452 + 1;
                  if ((unint64_t)(v452 + 1) >> 62)
                    sub_4074();
                  v454 = v448 - (_QWORD)v451;
                  if (v454 >> 1 > v453)
                    v453 = v454 >> 1;
                  if ((unint64_t)v454 >= 0x7FFFFFFFFFFFFFFCLL)
                    v455 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v455 = v453;
                  if (v455)
                  {
                    v456 = (char *)sub_43B2C((uint64_t)v449, v455);
                    v446 = *v447;
                    v451 = *(_DWORD **)v445;
                  }
                  else
                  {
                    v456 = 0;
                  }
                  v658 = &v456[4 * v452];
                  *(_DWORD *)v658 = 118;
                  v450 = v658 + 4;
                  while (v446 != v451)
                  {
                    v659 = *--v446;
                    *((_DWORD *)v658 - 1) = v659;
                    v658 -= 4;
                  }
                  *(_QWORD *)v445 = v658;
                  *v447 = v450;
                  *v449 = &v456[4 * v455];
                  if (v451)
                    operator delete(v451);
                }
                else
                {
                  *v446 = 118;
                  v450 = v446 + 1;
                }
                *v447 = v450;
                if (!*v14)
                {
LABEL_4084:
                  if ((*((_BYTE *)__p + 14) & 0x80) != 0)
                  {
                    v223 = *v12 + 24 * v13;
                    v225 = (int **)(v223 + 8);
                    v224 = *(int **)(v223 + 8);
                    v227 = (_QWORD *)(v223 + 16);
                    v660 = *(_QWORD *)(v223 + 16);
                    if ((unint64_t)v224 < v660)
                    {
                      v228 = 119;
                      goto LABEL_2185;
                    }
                    v229 = *(int **)v223;
                    v661 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                    v662 = v661 + 1;
                    if ((unint64_t)(v661 + 1) >> 62)
                      sub_4074();
                    v663 = v660 - (_QWORD)v229;
                    if (v663 >> 1 > v662)
                      v662 = v663 >> 1;
                    if ((unint64_t)v663 >= 0x7FFFFFFFFFFFFFFCLL)
                      v233 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v233 = v662;
                    if (v233)
                    {
                      v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                      v224 = *v225;
                      v229 = *(int **)v223;
                    }
                    else
                    {
                      v234 = 0;
                    }
                    v457 = &v234[4 * v661];
                    *(_DWORD *)v457 = 119;
                    v458 = (int *)(v457 + 4);
                    while (v224 != v229)
                    {
                      v852 = *--v224;
                      *((_DWORD *)v457 - 1) = v852;
                      v457 -= 4;
                    }
                    goto LABEL_3707;
                  }
                }
              }
            }
          }
          break;
        case 15:
          if (!*v14)
          {
            if ((*((_BYTE *)__p + 18) & 0x10) == 0)
              goto LABEL_320;
            v57 = *v12 + 24 * v13;
            v59 = (_DWORD **)(v57 + 8);
            v58 = *(_DWORD **)(v57 + 8);
            v61 = (_QWORD *)(v57 + 16);
            v60 = *(_QWORD *)(v57 + 16);
            if ((unint64_t)v58 >= v60)
            {
              v147 = *(_DWORD **)v57;
              v148 = ((uint64_t)v58 - *(_QWORD *)v57) >> 2;
              v149 = v148 + 1;
              if ((unint64_t)(v148 + 1) >> 62)
                sub_4074();
              v150 = v60 - (_QWORD)v147;
              if (v150 >> 1 > v149)
                v149 = v150 >> 1;
              if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
                v151 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v151 = v149;
              if (v151)
              {
                v152 = (char *)sub_43B2C((uint64_t)v61, v151);
                v58 = *v59;
                v147 = *(_DWORD **)v57;
              }
              else
              {
                v152 = 0;
              }
              v291 = &v152[4 * v148];
              *(_DWORD *)v291 = 148;
              v62 = v291 + 4;
              while (v58 != v147)
              {
                v292 = *--v58;
                *((_DWORD *)v291 - 1) = v292;
                v291 -= 4;
              }
              *(_QWORD *)v57 = v291;
              *v59 = v62;
              *v61 = &v152[4 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *v58 = 148;
              v62 = v58 + 1;
            }
            *v59 = v62;
            if (!*v14)
            {
LABEL_320:
              if ((*((_BYTE *)__p + 18) & 0x20) == 0)
                goto LABEL_2182;
              v293 = *v12 + 24 * v13;
              v295 = (_DWORD **)(v293 + 8);
              v294 = *(_DWORD **)(v293 + 8);
              v297 = (_QWORD *)(v293 + 16);
              v296 = *(_QWORD *)(v293 + 16);
              if ((unint64_t)v294 >= v296)
              {
                v299 = *(_DWORD **)v293;
                v300 = ((uint64_t)v294 - *(_QWORD *)v293) >> 2;
                v301 = v300 + 1;
                if ((unint64_t)(v300 + 1) >> 62)
                  sub_4074();
                v302 = v296 - (_QWORD)v299;
                if (v302 >> 1 > v301)
                  v301 = v302 >> 1;
                if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFFCLL)
                  v303 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v303 = v301;
                if (v303)
                {
                  v304 = (char *)sub_43B2C((uint64_t)v297, v303);
                  v294 = *v295;
                  v299 = *(_DWORD **)v293;
                }
                else
                {
                  v304 = 0;
                }
                v516 = &v304[4 * v300];
                *(_DWORD *)v516 = 149;
                v298 = v516 + 4;
                while (v294 != v299)
                {
                  v517 = *--v294;
                  *((_DWORD *)v516 - 1) = v517;
                  v516 -= 4;
                }
                *(_QWORD *)v293 = v516;
                *v295 = v298;
                *v297 = &v304[4 * v303];
                if (v299)
                  operator delete(v299);
              }
              else
              {
                *v294 = 149;
                v298 = v294 + 1;
              }
              *v295 = v298;
              if (!*v14)
              {
LABEL_2182:
                if ((*((_BYTE *)__p + 18) & 0x40) == 0)
                  goto LABEL_4085;
                v518 = *v12 + 24 * v13;
                v520 = (_DWORD **)(v518 + 8);
                v519 = *(_DWORD **)(v518 + 8);
                v522 = (_QWORD *)(v518 + 16);
                v521 = *(_QWORD *)(v518 + 16);
                if ((unint64_t)v519 >= v521)
                {
                  v524 = *(_DWORD **)v518;
                  v525 = ((uint64_t)v519 - *(_QWORD *)v518) >> 2;
                  v526 = v525 + 1;
                  if ((unint64_t)(v525 + 1) >> 62)
                    sub_4074();
                  v527 = v521 - (_QWORD)v524;
                  if (v527 >> 1 > v526)
                    v526 = v527 >> 1;
                  if ((unint64_t)v527 >= 0x7FFFFFFFFFFFFFFCLL)
                    v528 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v528 = v526;
                  if (v528)
                  {
                    v529 = (char *)sub_43B2C((uint64_t)v522, v528);
                    v519 = *v520;
                    v524 = *(_DWORD **)v518;
                  }
                  else
                  {
                    v529 = 0;
                  }
                  v720 = &v529[4 * v525];
                  *(_DWORD *)v720 = 150;
                  v523 = v720 + 4;
                  while (v519 != v524)
                  {
                    v721 = *--v519;
                    *((_DWORD *)v720 - 1) = v721;
                    v720 -= 4;
                  }
                  *(_QWORD *)v518 = v720;
                  *v520 = v523;
                  *v522 = &v529[4 * v528];
                  if (v524)
                    operator delete(v524);
                }
                else
                {
                  *v519 = 150;
                  v523 = v519 + 1;
                }
                *v520 = v523;
                if (!*v14)
                {
LABEL_4085:
                  if ((*((_BYTE *)__p + 18) & 0x80) == 0)
                    goto LABEL_4086;
                  v722 = *v12 + 24 * v13;
                  v724 = (_DWORD **)(v722 + 8);
                  v723 = *(_DWORD **)(v722 + 8);
                  v726 = (_QWORD *)(v722 + 16);
                  v725 = *(_QWORD *)(v722 + 16);
                  if ((unint64_t)v723 >= v725)
                  {
                    v728 = *(_DWORD **)v722;
                    v729 = ((uint64_t)v723 - *(_QWORD *)v722) >> 2;
                    v730 = v729 + 1;
                    if ((unint64_t)(v729 + 1) >> 62)
                      sub_4074();
                    v731 = v725 - (_QWORD)v728;
                    if (v731 >> 1 > v730)
                      v730 = v731 >> 1;
                    if ((unint64_t)v731 >= 0x7FFFFFFFFFFFFFFCLL)
                      v732 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v732 = v730;
                    if (v732)
                    {
                      v733 = (char *)sub_43B2C((uint64_t)v726, v732);
                      v723 = *v724;
                      v728 = *(_DWORD **)v722;
                    }
                    else
                    {
                      v733 = 0;
                    }
                    v909 = &v733[4 * v729];
                    *(_DWORD *)v909 = 151;
                    v727 = v909 + 4;
                    while (v723 != v728)
                    {
                      v910 = *--v723;
                      *((_DWORD *)v909 - 1) = v910;
                      v909 -= 4;
                    }
                    *(_QWORD *)v722 = v909;
                    *v724 = v727;
                    *v726 = &v733[4 * v732];
                    if (v728)
                      operator delete(v728);
                  }
                  else
                  {
                    *v723 = 151;
                    v727 = v723 + 1;
                  }
                  *v724 = v727;
                  if (!*v14)
                  {
LABEL_4086:
                    if ((*((_BYTE *)__p + 19) & 1) == 0)
                      goto LABEL_4087;
                    v911 = *v12 + 24 * v13;
                    v913 = (_DWORD **)(v911 + 8);
                    v912 = *(_DWORD **)(v911 + 8);
                    v915 = (_QWORD *)(v911 + 16);
                    v914 = *(_QWORD *)(v911 + 16);
                    if ((unint64_t)v912 >= v914)
                    {
                      v917 = *(_DWORD **)v911;
                      v918 = ((uint64_t)v912 - *(_QWORD *)v911) >> 2;
                      v919 = v918 + 1;
                      if ((unint64_t)(v918 + 1) >> 62)
                        sub_4074();
                      v920 = v914 - (_QWORD)v917;
                      if (v920 >> 1 > v919)
                        v919 = v920 >> 1;
                      if ((unint64_t)v920 >= 0x7FFFFFFFFFFFFFFCLL)
                        v921 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v921 = v919;
                      if (v921)
                      {
                        v922 = (char *)sub_43B2C((uint64_t)v915, v921);
                        v912 = *v913;
                        v917 = *(_DWORD **)v911;
                      }
                      else
                      {
                        v922 = 0;
                      }
                      v1084 = &v922[4 * v918];
                      *(_DWORD *)v1084 = 152;
                      v916 = v1084 + 4;
                      while (v912 != v917)
                      {
                        v1085 = *--v912;
                        *((_DWORD *)v1084 - 1) = v1085;
                        v1084 -= 4;
                      }
                      *(_QWORD *)v911 = v1084;
                      *v913 = v916;
                      *v915 = &v922[4 * v921];
                      if (v917)
                        operator delete(v917);
                    }
                    else
                    {
                      *v912 = 152;
                      v916 = v912 + 1;
                    }
                    *v913 = v916;
                    if (!*v14)
                    {
LABEL_4087:
                      if ((*((_BYTE *)__p + 19) & 2) == 0)
                        goto LABEL_4088;
                      v1086 = *v12 + 24 * v13;
                      v1088 = (_DWORD **)(v1086 + 8);
                      v1087 = *(_DWORD **)(v1086 + 8);
                      v1090 = (_QWORD *)(v1086 + 16);
                      v1089 = *(_QWORD *)(v1086 + 16);
                      if ((unint64_t)v1087 >= v1089)
                      {
                        v1092 = *(_DWORD **)v1086;
                        v1093 = ((uint64_t)v1087 - *(_QWORD *)v1086) >> 2;
                        v1094 = v1093 + 1;
                        if ((unint64_t)(v1093 + 1) >> 62)
                          sub_4074();
                        v1095 = v1089 - (_QWORD)v1092;
                        if (v1095 >> 1 > v1094)
                          v1094 = v1095 >> 1;
                        if ((unint64_t)v1095 >= 0x7FFFFFFFFFFFFFFCLL)
                          v1096 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v1096 = v1094;
                        if (v1096)
                        {
                          v1097 = (char *)sub_43B2C((uint64_t)v1090, v1096);
                          v1087 = *v1088;
                          v1092 = *(_DWORD **)v1086;
                        }
                        else
                        {
                          v1097 = 0;
                        }
                        v1257 = &v1097[4 * v1093];
                        *(_DWORD *)v1257 = 153;
                        v1091 = v1257 + 4;
                        while (v1087 != v1092)
                        {
                          v1258 = *--v1087;
                          *((_DWORD *)v1257 - 1) = v1258;
                          v1257 -= 4;
                        }
                        *(_QWORD *)v1086 = v1257;
                        *v1088 = v1091;
                        *v1090 = &v1097[4 * v1096];
                        if (v1092)
                          operator delete(v1092);
                      }
                      else
                      {
                        *v1087 = 153;
                        v1091 = v1087 + 1;
                      }
                      *v1088 = v1091;
                      if (!*v14)
                      {
LABEL_4088:
                        if ((*((_BYTE *)__p + 19) & 4) == 0)
                          goto LABEL_4089;
                        v1259 = *v12 + 24 * v13;
                        v1261 = (_DWORD **)(v1259 + 8);
                        v1260 = *(_DWORD **)(v1259 + 8);
                        v1263 = (_QWORD *)(v1259 + 16);
                        v1262 = *(_QWORD *)(v1259 + 16);
                        if ((unint64_t)v1260 >= v1262)
                        {
                          v1265 = *(_DWORD **)v1259;
                          v1266 = ((uint64_t)v1260 - *(_QWORD *)v1259) >> 2;
                          v1267 = v1266 + 1;
                          if ((unint64_t)(v1266 + 1) >> 62)
                            sub_4074();
                          v1268 = v1262 - (_QWORD)v1265;
                          if (v1268 >> 1 > v1267)
                            v1267 = v1268 >> 1;
                          if ((unint64_t)v1268 >= 0x7FFFFFFFFFFFFFFCLL)
                            v1269 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v1269 = v1267;
                          if (v1269)
                          {
                            v1270 = (char *)sub_43B2C((uint64_t)v1263, v1269);
                            v1260 = *v1261;
                            v1265 = *(_DWORD **)v1259;
                          }
                          else
                          {
                            v1270 = 0;
                          }
                          v1406 = &v1270[4 * v1266];
                          *(_DWORD *)v1406 = 154;
                          v1264 = v1406 + 4;
                          while (v1260 != v1265)
                          {
                            v1407 = *--v1260;
                            *((_DWORD *)v1406 - 1) = v1407;
                            v1406 -= 4;
                          }
                          *(_QWORD *)v1259 = v1406;
                          *v1261 = v1264;
                          *v1263 = &v1270[4 * v1269];
                          if (v1265)
                            operator delete(v1265);
                        }
                        else
                        {
                          *v1260 = 154;
                          v1264 = v1260 + 1;
                        }
                        *v1261 = v1264;
                        if (!*v14)
                        {
LABEL_4089:
                          if ((*((_BYTE *)__p + 19) & 8) == 0)
                            goto LABEL_4090;
                          v1408 = *v12 + 24 * v13;
                          v1410 = (_DWORD **)(v1408 + 8);
                          v1409 = *(_DWORD **)(v1408 + 8);
                          v1412 = (_QWORD *)(v1408 + 16);
                          v1411 = *(_QWORD *)(v1408 + 16);
                          if ((unint64_t)v1409 >= v1411)
                          {
                            v1414 = *(_DWORD **)v1408;
                            v1415 = ((uint64_t)v1409 - *(_QWORD *)v1408) >> 2;
                            v1416 = v1415 + 1;
                            if ((unint64_t)(v1415 + 1) >> 62)
                              sub_4074();
                            v1417 = v1411 - (_QWORD)v1414;
                            if (v1417 >> 1 > v1416)
                              v1416 = v1417 >> 1;
                            if ((unint64_t)v1417 >= 0x7FFFFFFFFFFFFFFCLL)
                              v1418 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v1418 = v1416;
                            if (v1418)
                            {
                              v1419 = (char *)sub_43B2C((uint64_t)v1412, v1418);
                              v1409 = *v1410;
                              v1414 = *(_DWORD **)v1408;
                            }
                            else
                            {
                              v1419 = 0;
                            }
                            v1546 = &v1419[4 * v1415];
                            *(_DWORD *)v1546 = 155;
                            v1413 = v1546 + 4;
                            while (v1409 != v1414)
                            {
                              v1547 = *--v1409;
                              *((_DWORD *)v1546 - 1) = v1547;
                              v1546 -= 4;
                            }
                            *(_QWORD *)v1408 = v1546;
                            *v1410 = v1413;
                            *v1412 = &v1419[4 * v1418];
                            if (v1414)
                              operator delete(v1414);
                          }
                          else
                          {
                            *v1409 = 155;
                            v1413 = v1409 + 1;
                          }
                          *v1410 = v1413;
                          if (!*v14)
                          {
LABEL_4090:
                            if ((*((_BYTE *)__p + 19) & 0x10) == 0)
                              goto LABEL_4091;
                            v1548 = *v12 + 24 * v13;
                            v1550 = (_DWORD **)(v1548 + 8);
                            v1549 = *(_DWORD **)(v1548 + 8);
                            v1552 = (_QWORD *)(v1548 + 16);
                            v1551 = *(_QWORD *)(v1548 + 16);
                            if ((unint64_t)v1549 >= v1551)
                            {
                              v1554 = *(_DWORD **)v1548;
                              v1555 = ((uint64_t)v1549 - *(_QWORD *)v1548) >> 2;
                              v1556 = v1555 + 1;
                              if ((unint64_t)(v1555 + 1) >> 62)
                                sub_4074();
                              v1557 = v1551 - (_QWORD)v1554;
                              if (v1557 >> 1 > v1556)
                                v1556 = v1557 >> 1;
                              if ((unint64_t)v1557 >= 0x7FFFFFFFFFFFFFFCLL)
                                v1558 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v1558 = v1556;
                              if (v1558)
                              {
                                v1559 = (char *)sub_43B2C((uint64_t)v1552, v1558);
                                v1549 = *v1550;
                                v1554 = *(_DWORD **)v1548;
                              }
                              else
                              {
                                v1559 = 0;
                              }
                              v1687 = &v1559[4 * v1555];
                              *(_DWORD *)v1687 = 156;
                              v1553 = v1687 + 4;
                              while (v1549 != v1554)
                              {
                                v1688 = *--v1549;
                                *((_DWORD *)v1687 - 1) = v1688;
                                v1687 -= 4;
                              }
                              *(_QWORD *)v1548 = v1687;
                              *v1550 = v1553;
                              *v1552 = &v1559[4 * v1558];
                              if (v1554)
                                operator delete(v1554);
                            }
                            else
                            {
                              *v1549 = 156;
                              v1553 = v1549 + 1;
                            }
                            *v1550 = v1553;
                            if (!*v14)
                            {
LABEL_4091:
                              if ((*((_BYTE *)__p + 19) & 0x20) != 0)
                              {
                                v223 = *v12 + 24 * v13;
                                v225 = (int **)(v223 + 8);
                                v224 = *(int **)(v223 + 8);
                                v227 = (_QWORD *)(v223 + 16);
                                v1689 = *(_QWORD *)(v223 + 16);
                                if ((unint64_t)v224 >= v1689)
                                {
                                  v229 = *(int **)v223;
                                  v1690 = ((uint64_t)v224 - *(_QWORD *)v223) >> 2;
                                  v1691 = v1690 + 1;
                                  if ((unint64_t)(v1690 + 1) >> 62)
                                    sub_4074();
                                  v1692 = v1689 - (_QWORD)v229;
                                  if (v1692 >> 1 > v1691)
                                    v1691 = v1692 >> 1;
                                  if ((unint64_t)v1692 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v233 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v233 = v1691;
                                  if (v233)
                                  {
                                    v234 = (char *)sub_43B2C((uint64_t)v227, v233);
                                    v224 = *v225;
                                    v229 = *(int **)v223;
                                  }
                                  else
                                  {
                                    v234 = 0;
                                  }
                                  v457 = &v234[4 * v1690];
                                  *(_DWORD *)v457 = 157;
                                  v458 = (int *)(v457 + 4);
                                  while (v224 != v229)
                                  {
                                    v1811 = *--v224;
                                    *((_DWORD *)v457 - 1) = v1811;
                                    v457 -= 4;
                                  }
LABEL_3707:
                                  *(_QWORD *)v223 = v457;
                                  *v225 = v458;
                                  *v227 = &v234[4 * v233];
                                  if (v229)
                                    operator delete(v229);
                                }
                                else
                                {
                                  v228 = 157;
LABEL_2185:
                                  *v224 = v228;
                                  v458 = v224 + 1;
                                }
                                *v225 = v458;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        default:
          break;
      }
      ++v13;
    }
    while (v13 != 16);
    v2789 = 1;
  }
  if (__p)
    operator delete(__p);
  return v2789;
}

void sub_3C964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_3CFF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  *(_QWORD *)a1 = off_7218B0;
  if (*(_QWORD *)(a1 + 128))
  {
    sub_F2D60();
    operator delete();
  }
  v2 = a1 + 37616;
  v3 = a1 + 43760;
  do
  {
    v4 = *(void ***)(v3 - 40);
    v5 = *(void ***)(v3 - 32);
    *(_QWORD *)(v3 - 8) = 0;
    v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        v5 = *(void ***)(v3 - 32);
        v4 = (void **)(*(_QWORD *)(v3 - 40) + 8);
        *(_QWORD *)(v3 - 40) = v4;
        v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    v7 = v6 >> 3;
    if (v7 == 1)
    {
      v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      v8 = 512;
LABEL_10:
      *(_QWORD *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      v11 = *(_QWORD *)(v3 - 40);
      v10 = *(_QWORD *)(v3 - 32);
      if (v10 != v11)
        *(_QWORD *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    v13 = *(void **)(v3 - 48);
    v3 -= 48;
    v12 = v13;
    if (v13)
      operator delete(v12);
  }
  while (v3 != v2);
  sub_2D588(a1 + 37568);
  v14 = 29664;
  v15 = 29848;
  do
  {
    if (*(_BYTE *)(a1 + v15))
    {
      v16 = a1 + v14;
      v17 = *(void **)(a1 + v14 + 96);
      if (v17)
      {
        *(_QWORD *)(v16 + 104) = v17;
        operator delete(v17);
      }
      v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(_QWORD *)(a1 + v14 + 80) = v18;
        operator delete(v18);
      }
      v19 = a1 + v14;
      v20 = *(void **)(a1 + v14 + 48);
      if (v20)
      {
        *(_QWORD *)(v19 + 56) = v20;
        operator delete(v20);
      }
      v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(_QWORD *)(a1 + v14 + 32) = v21;
        operator delete(v21);
      }
      v22 = *(void **)v16;
      if (*(_QWORD *)v16)
      {
        *(_QWORD *)(a1 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 232;
    v15 -= 232;
  }
  while (v14 != -32);
  v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_3D1B4(uint64_t a1)
{
  sub_3CFF8(a1);
  operator delete();
}

void sub_3D1D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 264))
  {
    v2 = *(void **)(a1 + 176);
    if (v2)
    {
      *(_QWORD *)(a1 + 184) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 152);
    if (v3)
    {
      *(_QWORD *)(a1 + 160) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)(a1 + 136) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 104);
    if (v5)
    {
      *(_QWORD *)(a1 + 112) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 80);
    if (v6)
    {
      *(_QWORD *)(a1 + 88) = v6;
      operator delete(v6);
    }
  }
}

uint64_t sub_3D254(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 264))
  {
    v2 = *(void **)(a1 + 176);
    if (v2)
    {
      *(_QWORD *)(a1 + 184) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 152);
    if (v3)
    {
      *(_QWORD *)(a1 + 160) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)(a1 + 136) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 104);
    if (v5)
    {
      *(_QWORD *)(a1 + 112) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 80);
    if (v6)
    {
      *(_QWORD *)(a1 + 88) = v6;
      operator delete(v6);
    }
  }
  return a1;
}

void std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<ProfileEvent>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

unint64_t sub_3D360(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4;

  if (!*(_BYTE *)(a1 + 93))
    return a3;
  if (a4 - *(_QWORD *)(a1 + 56) >= (unint64_t)(2 * *(_QWORD *)(a2 + 26032)))
    return *(_QWORD *)(a1 + 72) + a3 % *(_DWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 88);
  if (a3 >= v4)
    return *(_QWORD *)(a1 + 80) + a3 - v4;
  else
    return (~v4 & 0xFFFFF) + (unint64_t)a3 + *(_QWORD *)(a1 + 80) + 1;
}

void sub_3D3D4(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  int v66;

  if (a3 > 0xF)
    return;
  v3 = a1 + 40 * a3 + 30304;
  if (!*(_BYTE *)(a1 + 40 * a3 + 30336))
    return;
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(a1 + 40 * a3 + 30320);
  v66 = *(_DWORD *)(a1 + 40 * a3 + 30328);
  v7 = (uint64_t)(a2 + 24);
  v8 = a2[24];
  v9 = a2[3256];
  v10 = a2[3255];
  v11 = a2[3259];
  v12 = a2[3258];
  v13 = (_QWORD *)a2[23];
  if ((unint64_t)v13 >= v8)
  {
    v15 = (void **)(a2 + 22);
    v16 = a2[22];
    v17 = ((uint64_t)v13 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      goto LABEL_70;
    v18 = v8 - v16;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)sub_40FC(v7, v20);
    else
      v21 = 0;
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v5;
    v14 = v22 + 8;
    v25 = (char *)a2[22];
    v24 = (char *)a2[23];
    if (v24 != v25)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *((_QWORD *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v24 = (char *)*v15;
    }
    a2[22] = v22;
    a2[23] = v14;
    a2[24] = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v13 = v5;
    v14 = v13 + 1;
  }
  v27 = (((v11 - v12) << 29) - 0x100000000) | (((unint64_t)(v9 - v10) >> 3) - 1);
  v28 = a2[27];
  a2[23] = v14;
  v29 = (uint64_t *)a2[26];
  if ((unint64_t)v29 >= v28)
  {
    v31 = a2[25];
    v32 = ((uint64_t)v29 - v31) >> 3;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      v33 = v28 - v31;
      v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1))
        v34 = v32 + 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v36 = (char *)sub_40FC((uint64_t)(a2 + 27), v35);
      else
        v36 = 0;
      v37 = (uint64_t *)&v36[8 * v32];
      v38 = &v36[8 * v35];
      *v37 = v27;
      v30 = v37 + 1;
      v40 = (char *)a2[25];
      v39 = (char *)a2[26];
      if (v39 != v40)
      {
        do
        {
          v41 = *((_QWORD *)v39 - 1);
          v39 -= 8;
          *--v37 = v41;
        }
        while (v39 != v40);
        v39 = (char *)a2[25];
      }
      a2[25] = v37;
      a2[26] = v30;
      a2[27] = v38;
      if (v39)
        operator delete(v39);
      goto LABEL_35;
    }
LABEL_70:
    sub_4074();
  }
  *v29 = v27;
  v30 = v29 + 1;
LABEL_35:
  v42 = a2[30];
  a2[26] = v30;
  v43 = (char *)a2[29];
  if ((unint64_t)v43 >= v42)
  {
    v45 = (char *)a2[28];
    v46 = (v43 - v45) >> 3;
    if ((unint64_t)(v46 + 1) >> 61)
      sub_4074();
    v47 = v42 - (_QWORD)v45;
    v48 = (uint64_t)(v42 - (_QWORD)v45) >> 2;
    if (v48 <= v46 + 1)
      v48 = v46 + 1;
    if (v47 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    if (v49)
    {
      v50 = (char *)sub_40FC((uint64_t)(a2 + 30), v49);
      v45 = (char *)a2[28];
      v43 = (char *)a2[29];
    }
    else
    {
      v50 = 0;
    }
    v51 = &v50[8 * v46];
    v52 = &v50[8 * v49];
    *(_QWORD *)v51 = v6;
    v44 = v51 + 8;
    while (v43 != v45)
    {
      v53 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      *((_QWORD *)v51 - 1) = v53;
      v51 -= 8;
    }
    a2[28] = v51;
    a2[29] = v44;
    a2[30] = v52;
    if (v45)
      operator delete(v45);
  }
  else
  {
    *(_QWORD *)v43 = v6;
    v44 = v43 + 8;
  }
  a2[29] = v44;
  v54 = (char *)a2[32];
  v55 = a2[33];
  if ((unint64_t)v54 >= v55)
  {
    v57 = (char *)a2[31];
    v58 = (v54 - v57) >> 2;
    if ((unint64_t)(v58 + 1) >> 62)
      sub_4074();
    v59 = v55 - (_QWORD)v57;
    v60 = (uint64_t)(v55 - (_QWORD)v57) >> 1;
    if (v60 <= v58 + 1)
      v60 = v58 + 1;
    if (v59 >= 0x7FFFFFFFFFFFFFFCLL)
      v61 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v61 = v60;
    if (v61)
    {
      v62 = (char *)sub_43B2C((uint64_t)(a2 + 33), v61);
      v57 = (char *)a2[31];
      v54 = (char *)a2[32];
    }
    else
    {
      v62 = 0;
    }
    v63 = &v62[4 * v58];
    v64 = &v62[4 * v61];
    *(_DWORD *)v63 = v66;
    v56 = v63 + 4;
    while (v54 != v57)
    {
      v65 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *((_DWORD *)v63 - 1) = v65;
      v63 -= 4;
    }
    a2[31] = v63;
    a2[32] = v56;
    a2[33] = v64;
    if (v57)
      operator delete(v57);
  }
  else
  {
    *(_DWORD *)v54 = v66;
    v56 = v54 + 4;
  }
  a2[32] = v56;
  if (*(_BYTE *)(v3 + 32))
    *(_BYTE *)(v3 + 32) = 0;
}

void sub_3D750(uint64_t a1, _QWORD *a2, unsigned int a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int64x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if ((a3 & 0x80) != 0)
    return;
  v4 = a1 + 232 * a3;
  if (!*(_BYTE *)(v4 + 384))
    return;
  v7 = v4 + 160;
  v8 = *(unsigned __int8 *)(v4 + 196);
  if (v8 >= 0x60)
  {
    if (v8 >= 0x68)
    {
      if (v8 < 0x98)
        goto LABEL_15;
    }
    else if (*(_BYTE *)(v7 + 215))
    {
      goto LABEL_15;
    }
  }
  if ((*(_DWORD *)(v7 + 208) - 3) > 1 || *(_BYTE *)(v7 + 216))
  {
    v9 = a1 + 37616;
    v10 = (int64x2_t *)(a1 + 37616 + 48 * a3);
    if (v10[2].i64[1])
    {
      v11 = *(_QWORD *)(v9 + 48 * a3 + 32);
      v12 = *(_QWORD *)(*(_QWORD *)(v10->i64[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
      if (*(_BYTE *)(v12 + 32))
      {
        sub_4601C(v10);
        if (*(_BYTE *)(v7 + 224))
        {
          *(_QWORD *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3)
                                                                                 - 1);
          *(_BYTE *)(v7 + 212) = a4;
        }
        sub_43B90(v12 + 40, v7);
        goto LABEL_16;
      }
    }
  }
LABEL_15:
  *(_QWORD *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3) - 1);
  *(_BYTE *)(v7 + 212) = a4;
  sub_442AC(a2, v7);
LABEL_16:
  if (*(_BYTE *)(v7 + 224))
  {
    v13 = *(void **)(v7 + 136);
    if (v13)
    {
      *(_QWORD *)(v7 + 144) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v7 + 112);
    if (v14)
    {
      *(_QWORD *)(v7 + 120) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v7 + 88);
    if (v15)
    {
      *(_QWORD *)(v7 + 96) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v7 + 64);
    if (v16)
    {
      *(_QWORD *)(v7 + 72) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v7 + 40);
    if (v17)
    {
      *(_QWORD *)(v7 + 48) = v17;
      operator delete(v17);
    }
    *(_BYTE *)(v7 + 224) = 0;
  }
}

const char *sub_3D918(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char **v3;
  char **v4;

  v2 = a2 - 128;
  if (a2 < 0x80)
  {
    v3 = &off_721908[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    v4 = off_721D08;
LABEL_7:
    v3 = &v4[v2];
    return *v3;
  }
  v2 = a2 - 192;
  if (a2 - 192 < 0xF)
  {
    v4 = off_721F08;
    goto LABEL_7;
  }
  return "Invalid";
}

uint64_t sub_3D974(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *a4 = 1;
  v4 = *a3 & 7;
  v5 = *a3 >> 3;
  if (v4 == 7)
    v6 = *(unsigned __int16 *)(a2 + v5) >> 7;
  else
    v6 = *(unsigned __int8 *)(a2 + v5) >> v4;
  return ((uint64_t (*)(void))((char *)sub_3D9D4 + 4 * byte_4A2C02[v6 & 3]))();
}

uint64_t sub_3D9D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;

  v4 = a4 + 2;
  v5 = v4 >> 3;
  v6 = v4 & 7;
  if (v6)
    v7 = (*(unsigned __int16 *)(a2 + v5) >> v6);
  else
    v7 = *(unsigned __int8 *)(a2 + v5);
  v8 = *(unsigned __int16 *)(result + 8) | v7;
  *(_WORD *)(result + 8) = v8;
  v9 = *a3;
  if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(_BYTE *)a3 + 10) & 7)) & 1) != 0)
  {
    v10 = v9 + 11;
    v11 = (v9 + 11) & 7;
    v12 = v10 >> 3;
    if (v11 > 2)
      v13 = *(_WORD *)(a2 + v12);
    else
      v13 = *(unsigned __int8 *)(a2 + v12);
    v19 = (((v13 >> v11) & 0x3F) << 8) | v8;
    *(_WORD *)(result + 8) = v19;
    if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(_BYTE *)a3 + 17) & 7)) & 1) != 0)
      v20 = v19 | 0x4000;
    else
      v20 = v19 & 0xBFFF;
    *(_WORD *)(result + 8) = v20;
    v21 = 18;
  }
  else
  {
    v14 = v8 & 0xBFFF;
    *(_WORD *)(result + 8) = v14;
    v15 = *a3 + 11;
    v16 = v15 & 7;
    v17 = v15 >> 3;
    if (v16 > 4)
      v18 = *(_WORD *)(a2 + v17);
    else
      v18 = *(unsigned __int8 *)(a2 + v17);
    *(_WORD *)(result + 8) = (((v18 >> v16) & 0xF) << 8) | v14;
    v21 = 15;
  }
  *a3 += v21;
  return result;
}

void *sub_43B2C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_4130();
  return operator new(4 * a2);
}

void *sub_43B60(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_4130();
  return operator new(2 * a2);
}

uint64_t sub_43B90(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_BYTE *)(a1 + 224))
  {
    v4 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 29) = *(_QWORD *)(a2 + 29);
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    sub_43D20(a1 + 40, (__n128 *)(a2 + 40));
    sub_43D20(a1 + 64, (__n128 *)(a2 + 64));
    sub_43D20(a1 + 88, (__n128 *)(a2 + 88));
    sub_43D20(a1 + 112, (__n128 *)(a2 + 112));
    sub_43D20(a1 + 136, (__n128 *)(a2 + 136));
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v6 = *(_OWORD *)(a2 + 168);
    v7 = *(_OWORD *)(a2 + 184);
    v8 = *(_OWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v8;
    *(_OWORD *)(a1 + 184) = v7;
    *(_OWORD *)(a1 + 168) = v6;
  }
  else
  {
    sub_43C40(a1, (__int128 *)a2);
  }
  return a1;
}

__n128 sub_43C40(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 29) = *(_QWORD *)((char *)a2 + 29);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  v4 = *((_QWORD *)a2 + 20);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *(_QWORD *)(a1 + 160) = v4;
  result = *(__n128 *)((char *)a2 + 168);
  v6 = *(__int128 *)((char *)a2 + 184);
  v7 = *(__int128 *)((char *)a2 + 200);
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  *(__n128 *)(a1 + 168) = result;
  *(_BYTE *)(a1 + 224) = 1;
  return result;
}

__n128 sub_43D20(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_43D70(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int64x2_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  char v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;

  v2 = a1 + 37576;
  if (*(_QWORD *)(a1 + 37608))
  {
    v16 = a1 + 160;
    v5 = a1 + 37616;
    v6 = *(_QWORD *)(a1 + 37600);
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      v8 = v6 & 0xF;
      v9 = (char *)(v7 + 272 * (v6 & 0xF));
      if (!v9[32])
        break;
      v19 = a1;
      v17[0] = v9;
      v17[1] = &v19;
      v17[2] = a1;
      v17[3] = &v18;
      v10 = v7 + 272 * v8;
      if (*(_BYTE *)(v10 + 264))
      {
        sub_43FB8((unint64_t)v17, v10 + 40);
        if (!*(_BYTE *)(v10 + 264))
          sub_70A0();
        sub_442AC(a2, v10 + 40);
      }
      else
      {
        v11 = *v9;
        if ((v11 & 0x80000000) == 0)
        {
          v12 = v11;
          sub_43FB8((unint64_t)v17, v16 + 232 * v11);
          v13 = (int64x2_t *)(v5 + 48 * v12);
          if (v13[2].i64[1])
            goto LABEL_14;
          v14 = sub_11FD14();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v21 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            v22 = 1024;
            v23 = 806;
            v24 = 2080;
            v25 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_11FD04())
            sub_11FD0C();
          if (v13[2].i64[1])
LABEL_14:
            sub_4601C(v13);
        }
      }
      sub_3D1D8(*(_QWORD *)(*(_QWORD *)v2 + ((*(_QWORD *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 272 * (*(_QWORD *)(v2 + 24) & 0xFLL));
      v15 = *(_QWORD *)(v2 + 32) - 1;
      v6 = *(_QWORD *)(v2 + 24) + 1;
      *(_QWORD *)(v2 + 24) = v6;
      *(_QWORD *)(v2 + 32) = v15;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(_QWORD *)v2 += 8;
        v15 = *(_QWORD *)(v2 + 32);
        v6 = *(_QWORD *)(v2 + 24) - 16;
        *(_QWORD *)(v2 + 24) = v6;
      }
    }
    while (v15);
  }
}

unint64_t sub_43FB8(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  int32x2_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 4);
  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(unsigned int *)(a2 + 208);
  switch((int)v3)
  {
    case 0:
      result = sub_4483C(*(uint64_t **)(result + 8), *(_QWORD *)(v2 + 20), *(_DWORD *)(v2 + 28), v7, v3);
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v10 = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(_QWORD *)v5 + 16);
      if (v7 <= 7)
      {
        *((_QWORD *)&v11 + 1) = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(_QWORD *)v5 + 16);
        *(_QWORD *)&v11 = v9 & 0xFFFFFFFF00000000;
        v12 = v6 + 16 * v7 + 35264;
        *(_DWORD *)v12 = v9;
        *(int32x2_t *)(v12 + 4) = vzip1_s32((int32x2_t)(v11 >> 32), (int32x2_t)v10);
        *(_BYTE *)(v12 + 12) = 1;
      }
      v14 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(_QWORD *)(v13 - 28) = v10;
      *(_QWORD *)(v13 - 36) = v9;
      *(v13 - 20) = ((v8 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v14)
        goto LABEL_23;
      break;
    case 1:
      result = sub_4483C(*(uint64_t **)(result + 8), *(_QWORD *)(v2 + 12), *(_DWORD *)(v2 + 20), v7, v3);
      v16 = 0;
      v17 = ((HIDWORD(result) & 0x7FF) << 32) | ((v15 & 0x7FF) << 43) | (HIDWORD(v15) << 54);
      if (v7 <= 7)
      {
        v18 = (_DWORD *)(v6 + 16 * v7 + 35264);
        if (*(_BYTE *)(v6 + 16 * v7 + 35276))
        {
          v19 = *(unsigned __int16 *)(*(_QWORD *)v5 + 8);
          v20 = vadd_s32(*(int32x2_t *)(v6 + 16 * v7 + 35268), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          v21 = *v18 + (v19 & 0xF);
          v16 = v21 | ((unint64_t)v20.u32[0] << 32);
          v17 = v20.u32[1] | (unint64_t)v17;
          *v18 = v21;
          *(int32x2_t *)(v6 + 16 * v7 + 35268) = v20;
        }
      }
      v22 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(_QWORD *)(v13 - 28) = v17;
      *(_QWORD *)(v13 - 36) = v16;
      *(v13 - 20) = ((v15 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v22)
        goto LABEL_23;
      break;
    case 2:
      v23 = *(_WORD *)(v2 + 8);
      LODWORD(v24) = ((*(_WORD *)(v2 + 12) & 0x7FF) << 20) | ((*(_WORD *)(v2 + 10) & 0x3FF) << 10) | v23 & 0x3FF;
      v25 = *(uint8x8_t *)(v2 + 15);
      v26 = *(uint8x8_t *)(v2 + 23);
      if ((*(_BYTE *)(v2 + 14) & 1) != 0)
      {
        v31 = v25.u8[0];
        v27.i64[0] = vdupq_n_s16(v25.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v31 + 1).i64[1];
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v26.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        v27 = vmovl_u8(v25);
        v28 = vmovl_u8(v26);
      }
      if (v7 <= 7)
      {
        v32 = v6 + 16 * v7 + 35392;
        *(_DWORD *)v32 = v23 & 0x3FF;
        *(int8x8_t *)(v32 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(_BYTE *)(v32 + 12) = 1;
      }
      goto LABEL_22;
    case 3:
      LODWORD(v24) = *(unsigned __int8 *)(v2 + 8);
      v29 = *(uint8x8_t *)(v2 + 9);
      v30 = *(uint8x8_t *)(v2 + 17);
      if ((v24 & 1) != 0)
      {
        v33 = v29.u8[0];
        v27.i64[0] = vdupq_n_s16(v29.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v33 + 1).i64[1];
        v24 = (uint64_t)&unk_4A4000;
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v30.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        v27 = vmovl_u8(v29);
        v28 = vmovl_u8(v30);
      }
      if (v7 <= 7)
      {
        v24 = v6 + 16 * v7 + 35392;
        if (*(_BYTE *)(v6 + 16 * v7 + 35404))
          LODWORD(v24) = *(_DWORD *)v24 & 0x3FF | ((*(_DWORD *)(v6 + 16 * v7 + 35396) & 0x3FF) << 10) & 0x800FFFFF | ((*(_DWORD *)(v6 + 16 * v7 + 35400) & 0x7FF) << 20);
      }
LABEL_22:
      v34 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(uint16x8_t *)(a2 + 168) = v27;
      *(uint16x8_t *)(a2 + 184) = v28;
      *(_DWORD *)(a2 + 200) = v24;
      if (!v34)
LABEL_23:
        *v13 = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_442AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  size_t v49;
  _BYTE *v50;
  char *v51;
  _BYTE *v52;
  char v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _BYTE *v67;
  char v68;
  char *v69;
  unint64_t v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  int v80;
  _OWORD *v81;
  __int128 v82;
  _OWORD v83[2];
  int v84;
  _OWORD v85[2];
  int v86;

  if (*(_BYTE *)(a2 + 215))
  {
    v4 = (_QWORD *)a1[83];
    v5 = a1[84];
    if ((unint64_t)v4 >= v5)
    {
      v10 = (void **)(a1 + 82);
      v11 = a1[82];
      v12 = ((uint64_t)v4 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_106;
      v13 = v5 - v11;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)sub_40FC((uint64_t)(a1 + 84), v15);
      else
        v16 = 0;
      v23 = &v16[8 * v12];
      v24 = &v16[8 * v15];
      *(_QWORD *)v23 = *(_QWORD *)a2;
      v6 = v23 + 8;
      v25 = (char *)a1[83];
      v26 = (char *)a1[82];
      if (v25 != v26)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *((_QWORD *)v23 - 1) = v27;
          v23 -= 8;
        }
        while (v25 != v26);
        v25 = (char *)*v10;
      }
      a1[82] = v23;
      a1[83] = v6;
      a1[84] = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v4 = *(_QWORD *)a2;
      v6 = v4 + 1;
    }
    a1[83] = v6;
    v28 = (_QWORD *)a1[86];
    v29 = a1[87];
    if ((unint64_t)v28 < v29)
    {
      *v28 = *(_QWORD *)(a2 + 8);
      v30 = v28 + 1;
LABEL_44:
      a1[86] = v30;
      v42 = (_BYTE *)a1[92];
      v43 = a1[93];
      if ((unint64_t)v42 < v43)
      {
        *v42 = *(_BYTE *)(a2 + 36);
        v44 = (uint64_t)(v42 + 1);
LABEL_62:
        a1[92] = v44;
        v54 = (char *)a1[89];
        v55 = a1[90];
        if ((unint64_t)v54 >= v55)
        {
          v57 = (char *)a1[88];
          v58 = (v54 - v57) >> 3;
          if ((unint64_t)(v58 + 1) >> 61)
            sub_4074();
          v59 = v55 - (_QWORD)v57;
          v60 = (uint64_t)(v55 - (_QWORD)v57) >> 2;
          if (v60 <= v58 + 1)
            v60 = v58 + 1;
          if (v59 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v60;
          if (v61)
          {
            v62 = (char *)sub_40FC((uint64_t)(a1 + 90), v61);
            v54 = (char *)a1[89];
            v57 = (char *)a1[88];
          }
          else
          {
            v62 = 0;
          }
          v63 = &v62[8 * v58];
          v64 = &v62[8 * v61];
          *(_QWORD *)v63 = *(_QWORD *)(a2 + 16);
          v56 = v63 + 8;
          while (v54 != v57)
          {
            v65 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *((_QWORD *)v63 - 1) = v65;
            v63 -= 8;
          }
          a1[88] = v63;
          a1[89] = v56;
          a1[90] = v64;
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(_QWORD *)v54 = *(_QWORD *)(a2 + 16);
          v56 = v54 + 8;
        }
        a1[89] = v56;
        sub_44944(a1 + 94, a2 + 40);
        return;
      }
      v45 = a1[91];
      v46 = &v42[-v45];
      v47 = (uint64_t)&v42[-v45 + 1];
      if (v47 >= 0)
      {
        v48 = v43 - v45;
        if (2 * v48 > v47)
          v47 = 2 * v48;
        if (v48 >= 0x3FFFFFFFFFFFFFFFLL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
          v50 = operator new(v49);
        else
          v50 = 0;
        v51 = &v50[v49];
        v46[(_QWORD)v50] = *(_BYTE *)(a2 + 36);
        v44 = (uint64_t)&v46[(_QWORD)v50 + 1];
        if (v42 == (_BYTE *)v45)
        {
          v50 = &v46[(_QWORD)v50];
        }
        else
        {
          v52 = &v42[~v45];
          do
          {
            v53 = *--v42;
            (v52--)[(_QWORD)v50] = v53;
          }
          while (v42 != (_BYTE *)v45);
          v42 = (_BYTE *)a1[91];
        }
        a1[91] = v50;
        a1[92] = v44;
        a1[93] = v51;
        if (v42)
          operator delete(v42);
        goto LABEL_62;
      }
LABEL_107:
      sub_4074();
    }
    v31 = a1[85];
    v32 = ((uint64_t)v28 - v31) >> 3;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      v33 = v29 - v31;
      v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1))
        v34 = v32 + 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v36 = (char *)sub_40FC((uint64_t)(a1 + 87), v35);
      else
        v36 = 0;
      v37 = &v36[8 * v32];
      v38 = &v36[8 * v35];
      *(_QWORD *)v37 = *(_QWORD *)(a2 + 8);
      v30 = v37 + 8;
      v39 = (char *)a1[86];
      v40 = (char *)a1[85];
      if (v39 != v40)
      {
        do
        {
          v41 = *((_QWORD *)v39 - 1);
          v39 -= 8;
          *((_QWORD *)v37 - 1) = v41;
          v37 -= 8;
        }
        while (v39 != v40);
        v39 = (char *)a1[85];
      }
      a1[85] = v37;
      a1[86] = v30;
      a1[87] = v38;
      if (v39)
        operator delete(v39);
      goto LABEL_44;
    }
LABEL_106:
    sub_4074();
  }
  sub_44A54(a1 + 34, (_QWORD *)a2);
  sub_44A54(a1 + 40, (_QWORD *)(a2 + 8));
  v8 = (_BYTE *)a1[62];
  v7 = a1[63];
  if ((unint64_t)v8 >= v7)
  {
    v17 = a1[61];
    v18 = &v8[-v17];
    v19 = (uint64_t)&v8[-v17 + 1];
    if (v19 < 0)
      goto LABEL_107;
    v20 = v7 - v17;
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
      v21 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
      v22 = operator new(v21);
    else
      v22 = 0;
    v66 = &v22[v21];
    v18[(_QWORD)v22] = *(_BYTE *)(a2 + 36);
    v9 = (uint64_t)&v18[(_QWORD)v22 + 1];
    if (v8 == (_BYTE *)v17)
    {
      v22 = &v18[(_QWORD)v22];
    }
    else
    {
      v67 = &v8[~v17];
      do
      {
        v68 = *--v8;
        (v67--)[(_QWORD)v22] = v68;
      }
      while (v8 != (_BYTE *)v17);
      v8 = (_BYTE *)a1[61];
    }
    a1[61] = v22;
    a1[62] = v9;
    a1[63] = v66;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = *(_BYTE *)(a2 + 36);
    v9 = (uint64_t)(v8 + 1);
  }
  a1[62] = v9;
  sub_44ADC(a1 + 76, a2 + 40);
  sub_44B84((uint64_t)(a1 + 64), (_BYTE *)(a2 + 212));
  sub_44C28(a1 + 46, (_QWORD *)(a2 + 16));
  sub_44C28(a1 + 52, (_QWORD *)(a2 + 24));
  v69 = (char *)a1[59];
  v70 = a1[60];
  if ((unint64_t)v69 >= v70)
  {
    v72 = (char *)a1[58];
    v73 = (v69 - v72) >> 2;
    if ((unint64_t)(v73 + 1) >> 62)
      sub_4074();
    v74 = v70 - (_QWORD)v72;
    v75 = (uint64_t)(v70 - (_QWORD)v72) >> 1;
    if (v75 <= v73 + 1)
      v75 = v73 + 1;
    if (v74 >= 0x7FFFFFFFFFFFFFFCLL)
      v76 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v76 = v75;
    if (v76)
    {
      v77 = (char *)sub_43B2C((uint64_t)(a1 + 60), v76);
      v72 = (char *)a1[58];
      v69 = (char *)a1[59];
    }
    else
    {
      v77 = 0;
    }
    v78 = &v77[4 * v73];
    v79 = &v77[4 * v76];
    *(_DWORD *)v78 = *(_DWORD *)(a2 + 32);
    v71 = v78 + 4;
    while (v69 != v72)
    {
      v80 = *((_DWORD *)v69 - 1);
      v69 -= 4;
      *((_DWORD *)v78 - 1) = v80;
      v78 -= 4;
    }
    a1[58] = v78;
    a1[59] = v71;
    a1[60] = v79;
    if (v72)
      operator delete(v72);
  }
  else
  {
    *(_DWORD *)v69 = *(_DWORD *)(a2 + 32);
    v71 = v69 + 4;
  }
  a1[59] = v71;
  v81 = (_OWORD *)(a2 + 168);
  v84 = 0;
  memset(v83, 0, sizeof(v83));
  if (!*(_BYTE *)(a2 + 204))
    v81 = v83;
  v82 = v81[1];
  v85[0] = *v81;
  v85[1] = v82;
  v86 = *((_DWORD *)v81 + 8);
  sub_44CAC(a1 + 67, (uint64_t)v85);
  LOBYTE(v85[0]) = *(_BYTE *)(a2 + 204);
  sub_44B84((uint64_t)(a1 + 73), v85);
}

unint64_t sub_4483C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int *v9;
  NSObject *v11;

  v5 = *a1;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 1)
    {
      v6 = HIDWORD(a2) & 0x1F;
      v7 = HIWORD(a2) >> 12;
      a5 = (HIWORD(a2) & 0xFFF & ~(-1 << v7)) + 1;
      if (a4 <= 7)
      {
        v8 = v5 + 16 * a4 + 35136;
        *(_DWORD *)v8 = a5;
        *(_QWORD *)(v8 + 4) = ((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) & ~(-1 << (a3 & 0xF))) + 1) | ((unint64_t)((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) >> (a3 & 0xF)) + 1) << 32);
        *(_BYTE *)(v8 + 12) = 1;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  else
  {
    v6 = HIDWORD(a2) & 0x1F;
    if (a4 <= 7)
    {
      v9 = (unsigned int *)(v5 + 16 * a4 + 35136);
      if (*((_BYTE *)v9 + 12))
      {
        a5 = *v9;
      }
      else
      {
        v11 = sub_11FD14();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1A73D0(v11);
        if (sub_11FD04())
          sub_11FD0C();
      }
    }
  }
  return v6 | (unint64_t)(a5 << 32);
}

void sub_44944(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (_QWORD *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    v8 = ((uint64_t)v6 - *a1) >> 7;
    if ((unint64_t)(v8 + 1) >> 57)
      sub_4074();
    v9 = v4 - *a1;
    v10 = v9 >> 6;
    if (v9 >> 6 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80)
      v11 = 0x1FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v17 = a1 + 2;
    if (v11)
      v12 = (char *)sub_44E7C((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = v12;
    v14 = &v12[128 * v8];
    v16 = &v12[128 * v11];
    sub_44D60(v5, v14, a2);
    v15 = v14 + 128;
    sub_44E08(a1, &v13);
    v7 = (_QWORD *)a1[1];
    sub_4505C(&v13);
  }
  else
  {
    sub_44D60((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 16;
    a1[1] = (uint64_t)(v6 + 16);
  }
  a1[1] = (uint64_t)v7;
}

void sub_44A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_4505C((void **)va);
  _Unwind_Resume(a1);
}

void sub_44A54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_450D0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_44ADC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4 = a1 + 5;
  v5 = a1[1];
  v6 = a1[2];
  v7 = 4 * (v6 - v5) - 1;
  if (v6 == v5)
    v7 = 0;
  if (v7 == a1[5] + a1[4])
  {
    sub_453E4(a1);
    v5 = a1[1];
    v6 = a1[2];
  }
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v8 = a1[5] + a1[4];
    v9 = (_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v8 & 0x1F) << 7));
  }
  sub_44D60((uint64_t)v4, v9, a2);
  ++*v4;
}

void sub_44B84(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      sub_4074();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    sub_456F8((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void sub_44C28(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_459F4(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

__n128 sub_44CAC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 113 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_45D08(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x71)) + 36 * (v7 % 0x71);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

__n128 sub_44D60(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;
  uint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *((_OWORD *)a2 + 3) = *(_OWORD *)(a3 + 48);
  a2[8] = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)(a3 + 72);
  a2[11] = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  a2[12] = 0;
  a2[13] = 0;
  a2[14] = 0;
  result = *(__n128 *)(a3 + 96);
  *((__n128 *)a2 + 6) = result;
  v4 = *(_QWORD *)(a3 + 120);
  a2[14] = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  a2[15] = v4;
  return result;
}

uint64_t sub_44E08(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_44EB0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_44E7C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    sub_4130();
  return operator new(a2 << 7);
}

uint64_t sub_44EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 128;
      sub_44D60(a1, (_QWORD *)(v7 - 128), v9);
      v7 = *((_QWORD *)&v16 + 1) - 128;
      *((_QWORD *)&v16 + 1) -= 128;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_44F64((uint64_t)v13);
  return v11;
}

uint64_t sub_44F64(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_44F98((uint64_t *)a1);
  return a1;
}

void sub_44F98(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_44FE8(v3, v1);
      v1 += 128;
    }
    while (v1 != v2);
  }
}

void sub_44FE8(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(_QWORD *)(a2 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 72);
  if (v4)
  {
    *(_QWORD *)(a2 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 48);
  if (v5)
  {
    *(_QWORD *)(a2 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a2 + 24);
  if (v6)
  {
    *(_QWORD *)(a2 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
  }
}

void **sub_4505C(void **a1)
{
  sub_4508C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_4508C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 128;
    sub_44FE8(v4, i - 128);
  }
}

void sub_450D0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_2C2D4(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_2C3E8((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_40FC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_2C504(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2C618((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_45398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_453E4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x20;
  v4 = v2 - 32;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_2C2D4(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_2C3E8((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_40FC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_2C504(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2C618((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_456AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_456F8(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_4074();
    v10 = 0;
    v11 = 0uLL;
    sub_457B4(&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    sub_457F8(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_4579C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_457B4(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_4074();
  result = sub_40FC((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_457F8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  sub_45898(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_45898(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  sub_45924((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_45924(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_459F4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_2C2D4(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_2C3E8((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_40FC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_2C504(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2C618((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_45CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_45D08(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x71;
  v4 = v2 - 113;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFE4uLL);
      sub_2C2D4(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFE4uLL);
    sub_2C3E8((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_40FC((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_40FC((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFE4uLL);
  sub_2C504(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_2C618((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_45FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_4601C(int64x2_t *a1)
{
  void **v1;
  int64x2_t v2;

  v1 = (void **)a1->i64[1];
  v2 = vaddq_s64(a1[2], (int64x2_t)xmmword_4A4EE0);
  a1[2] = v2;
  if (v2.i64[0] >= 0x400uLL)
  {
    operator delete(*v1);
    a1->i64[1] += 8;
    a1[2].i64[0] -= 512;
  }
}

void sub_4607C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  void **v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;

  v3 = a2[3259] - a2[3258];
  v4 = (v3 << 29) - 0x100000000;
  v5 = (((a2[3256] - a2[3255]) >> 3) + 0xFFFFFFFFLL) | (v3 << 29);
  v6 = (unint64_t *)a1[9];
  v8 = (unint64_t *)a1[10];
  v7 = (void **)(a1 + 9);
  if (v6 == v8 || *((_DWORD *)v8 - 2) < v5 || *((_DWORD *)v8 - 1) < HIDWORD(v4))
  {
    v9 = (uint64_t)(a1 + 11);
    v10 = a1[11];
    if ((unint64_t)v8 >= v10)
    {
      v12 = v8 - v6;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_4074();
      v13 = v10 - (_QWORD)v6;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)sub_40FC(v9, v15);
      else
        v16 = 0;
      v17 = (unint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v4 & 0xFFFFFFFF00000000 | v5;
      v11 = v17 + 1;
      v20 = (char *)a1[9];
      v19 = (char *)a1[10];
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)*v7;
      }
      a1[9] = v17;
      a1[10] = v11;
      a1[11] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v8 = v4 & 0xFFFFFFFF00000000 | v5;
      v11 = v8 + 1;
    }
    a1[10] = v11;
    sub_461CC((uint64_t)a1);
  }
}

void sub_461CC(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_46208(uint64_t a1, char a2)
{
  _QWORD *v2;
  char v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v3 = a2 & 3;
  v5 = (_BYTE *)v2[13];
  v4 = v2[14];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v2[12];
    v8 = &v5[-v7];
    v9 = (uint64_t)&v5[-v7 + 1];
    if (v9 < 0)
      sub_4074();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v13 = &v12[v11];
    v8[(_QWORD)v12] = v3;
    v6 = (uint64_t)&v8[(_QWORD)v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 = &v8[(_QWORD)v12];
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)v2[12];
    }
    v2[12] = v12;
    v2[13] = v6;
    v2[14] = v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = v3;
    v6 = (uint64_t)(v5 + 1);
  }
  v2[13] = v6;
  ++v2[15];
}

void sub_46330(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  _QWORD *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  uint64_t *v203;
  char *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  char *v222;
  unint64_t v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  _QWORD *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  char *v250;
  unint64_t v251;
  _QWORD *v252;
  char *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  char *v259;
  char *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  char *v264;
  unint64_t v265;
  _QWORD *v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t *v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  unint64_t *v288;
  char *v289;
  unint64_t v290;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    if (*(_DWORD *)(v3 + 48))
      goto LABEL_347;
    v5 = *(_QWORD **)a1[1];
    v6 = *(_WORD *)(a1[2] + 48) & 0x3FFF;
    v7 = (char *)v5[482];
    v8 = v5[483];
    if ((unint64_t)v7 >= v8)
    {
      v15 = (char *)v5[481];
      v16 = (v7 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_339;
      v17 = v8 - (_QWORD)v15;
      v18 = (uint64_t)(v8 - (_QWORD)v15) >> 2;
      if (v18 <= v16 + 1)
        v18 = v16 + 1;
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        v20 = (char *)sub_40FC((uint64_t)(v5 + 483), v19);
        v7 = (char *)v5[482];
        v15 = (char *)v5[481];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *(_QWORD *)v21 = v6;
      v9 = v21 + 8;
      while (v7 != v15)
      {
        v23 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v21 - 1) = v23;
        v21 -= 8;
      }
      v5[481] = v21;
      v5[482] = v9;
      v5[483] = v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[482] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v24 = *(_QWORD **)a1[1];
      v25 = *(_WORD *)(a1[2] + 32) & 0x3FFF;
      v26 = (char *)v24[485];
      v27 = v24[486];
      if ((unint64_t)v26 >= v27)
      {
        v29 = (char *)v24[484];
        v30 = (v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          goto LABEL_339;
        v31 = v27 - (_QWORD)v29;
        v32 = (uint64_t)(v27 - (_QWORD)v29) >> 2;
        if (v32 <= v30 + 1)
          v32 = v30 + 1;
        if (v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
        {
          v34 = (char *)sub_40FC((uint64_t)(v24 + 486), v33);
          v26 = (char *)v24[485];
          v29 = (char *)v24[484];
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[8 * v30];
        v36 = &v34[8 * v33];
        *(_QWORD *)v35 = v25;
        v28 = v35 + 8;
        while (v26 != v29)
        {
          v37 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v35 - 1) = v37;
          v35 -= 8;
        }
        v24[484] = v35;
        v24[485] = v28;
        v24[486] = v36;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v26 = v25;
        v28 = v26 + 8;
      }
      v24[485] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        v38 = *(_QWORD **)a1[1];
        v39 = *(_WORD *)(a1[2] + 50) & 0x3FFF;
        v40 = (char *)v38[488];
        v41 = v38[489];
        if ((unint64_t)v40 >= v41)
        {
          v43 = (char *)v38[487];
          v44 = (v40 - v43) >> 3;
          if ((unint64_t)(v44 + 1) >> 61)
            goto LABEL_339;
          v45 = v41 - (_QWORD)v43;
          v46 = (uint64_t)(v41 - (_QWORD)v43) >> 2;
          if (v46 <= v44 + 1)
            v46 = v44 + 1;
          if (v45 >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          if (v47)
          {
            v48 = (char *)sub_40FC((uint64_t)(v38 + 489), v47);
            v40 = (char *)v38[488];
            v43 = (char *)v38[487];
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[8 * v44];
          v50 = &v48[8 * v47];
          *(_QWORD *)v49 = v39;
          v42 = v49 + 8;
          while (v40 != v43)
          {
            v51 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v49 - 1) = v51;
            v49 -= 8;
          }
          v38[487] = v49;
          v38[488] = v42;
          v38[489] = v50;
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)v40 = v39;
          v42 = v40 + 8;
        }
        v38[488] = v42;
        if (!*(_DWORD *)(v3 + 48))
        {
          v52 = *(_QWORD **)a1[1];
          v53 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
          v54 = (char *)v52[491];
          v55 = v52[492];
          if ((unint64_t)v54 >= v55)
          {
            v57 = (char *)v52[490];
            v58 = (v54 - v57) >> 3;
            if ((unint64_t)(v58 + 1) >> 61)
              goto LABEL_339;
            v59 = v55 - (_QWORD)v57;
            v60 = (uint64_t)(v55 - (_QWORD)v57) >> 2;
            if (v60 <= v58 + 1)
              v60 = v58 + 1;
            if (v59 >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v60;
            if (v61)
            {
              v62 = (char *)sub_40FC((uint64_t)(v52 + 492), v61);
              v54 = (char *)v52[491];
              v57 = (char *)v52[490];
            }
            else
            {
              v62 = 0;
            }
            v63 = &v62[8 * v58];
            v64 = &v62[8 * v61];
            *(_QWORD *)v63 = v53;
            v56 = v63 + 8;
            while (v54 != v57)
            {
              v65 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *((_QWORD *)v63 - 1) = v65;
              v63 -= 8;
            }
            v52[490] = v63;
            v52[491] = v56;
            v52[492] = v64;
            if (v57)
              operator delete(v57);
          }
          else
          {
            *(_QWORD *)v54 = v53;
            v56 = v54 + 8;
          }
          v52[491] = v56;
          if (!*(_DWORD *)(v3 + 48))
          {
            v66 = *(_QWORD **)a1[1];
            v67 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
            v68 = (char *)v66[494];
            v69 = v66[495];
            if ((unint64_t)v68 >= v69)
            {
              v71 = (char *)v66[493];
              v72 = (v68 - v71) >> 3;
              if ((unint64_t)(v72 + 1) >> 61)
                goto LABEL_339;
              v73 = v69 - (_QWORD)v71;
              v74 = (uint64_t)(v69 - (_QWORD)v71) >> 2;
              if (v74 <= v72 + 1)
                v74 = v72 + 1;
              if (v73 >= 0x7FFFFFFFFFFFFFF8)
                v75 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v75 = v74;
              if (v75)
              {
                v76 = (char *)sub_40FC((uint64_t)(v66 + 495), v75);
                v68 = (char *)v66[494];
                v71 = (char *)v66[493];
              }
              else
              {
                v76 = 0;
              }
              v77 = &v76[8 * v72];
              v78 = &v76[8 * v75];
              *(_QWORD *)v77 = v67;
              v70 = v77 + 8;
              while (v68 != v71)
              {
                v79 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *((_QWORD *)v77 - 1) = v79;
                v77 -= 8;
              }
              v66[493] = v77;
              v66[494] = v70;
              v66[495] = v78;
              if (v71)
                operator delete(v71);
            }
            else
            {
              *(_QWORD *)v68 = v67;
              v70 = v68 + 8;
            }
            v66[494] = v70;
            if (!*(_DWORD *)(v3 + 48))
            {
              v80 = *(_QWORD **)a1[1];
              v81 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
              v82 = (char *)v80[497];
              v83 = v80[498];
              if ((unint64_t)v82 >= v83)
              {
                v85 = (char *)v80[496];
                v86 = (v82 - v85) >> 3;
                if ((unint64_t)(v86 + 1) >> 61)
                  goto LABEL_339;
                v87 = v83 - (_QWORD)v85;
                v88 = (uint64_t)(v83 - (_QWORD)v85) >> 2;
                if (v88 <= v86 + 1)
                  v88 = v86 + 1;
                if (v87 >= 0x7FFFFFFFFFFFFFF8)
                  v89 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v89 = v88;
                if (v89)
                {
                  v90 = (char *)sub_40FC((uint64_t)(v80 + 498), v89);
                  v82 = (char *)v80[497];
                  v85 = (char *)v80[496];
                }
                else
                {
                  v90 = 0;
                }
                v91 = &v90[8 * v86];
                v92 = &v90[8 * v89];
                *(_QWORD *)v91 = v81;
                v84 = v91 + 8;
                while (v82 != v85)
                {
                  v93 = *((_QWORD *)v82 - 1);
                  v82 -= 8;
                  *((_QWORD *)v91 - 1) = v93;
                  v91 -= 8;
                }
                v80[496] = v91;
                v80[497] = v84;
                v80[498] = v92;
                if (v85)
                  operator delete(v85);
              }
              else
              {
                *(_QWORD *)v82 = v81;
                v84 = v82 + 8;
              }
              v80[497] = v84;
              if (!*(_DWORD *)(v3 + 48))
              {
                v94 = *(_QWORD **)a1[1];
                v95 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFLL;
                v96 = (uint64_t *)v94[500];
                v97 = v94[501];
                if ((unint64_t)v96 >= v97)
                {
                  v99 = (uint64_t *)v94[499];
                  v100 = v96 - v99;
                  if ((unint64_t)(v100 + 1) >> 61)
                    goto LABEL_339;
                  v101 = v97 - (_QWORD)v99;
                  v102 = (uint64_t)(v97 - (_QWORD)v99) >> 2;
                  if (v102 <= v100 + 1)
                    v102 = v100 + 1;
                  if (v101 >= 0x7FFFFFFFFFFFFFF8)
                    v103 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v103 = v102;
                  if (v103)
                  {
                    v104 = (char *)sub_40FC((uint64_t)(v94 + 501), v103);
                    v96 = (uint64_t *)v94[500];
                    v99 = (uint64_t *)v94[499];
                  }
                  else
                  {
                    v104 = 0;
                  }
                  v105 = (uint64_t *)&v104[8 * v100];
                  v106 = &v104[8 * v103];
                  *v105 = v95;
                  v98 = v105 + 1;
                  while (v96 != v99)
                  {
                    v107 = *--v96;
                    *--v105 = v107;
                  }
                  v94[499] = v105;
                  v94[500] = v98;
                  v94[501] = v106;
                  if (v99)
                    operator delete(v99);
                }
                else
                {
                  *v96 = v95;
                  v98 = v96 + 1;
                }
                v94[500] = v98;
                if (!*(_DWORD *)(v3 + 48))
                {
                  v108 = *(_QWORD **)a1[1];
                  v109 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
                  v110 = (char *)v108[503];
                  v111 = v108[504];
                  if ((unint64_t)v110 >= v111)
                  {
                    v113 = (char *)v108[502];
                    v114 = (v110 - v113) >> 3;
                    if ((unint64_t)(v114 + 1) >> 61)
                      goto LABEL_339;
                    v115 = v111 - (_QWORD)v113;
                    v116 = (uint64_t)(v111 - (_QWORD)v113) >> 2;
                    if (v116 <= v114 + 1)
                      v116 = v114 + 1;
                    if (v115 >= 0x7FFFFFFFFFFFFFF8)
                      v117 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v117 = v116;
                    if (v117)
                    {
                      v118 = (char *)sub_40FC((uint64_t)(v108 + 504), v117);
                      v110 = (char *)v108[503];
                      v113 = (char *)v108[502];
                    }
                    else
                    {
                      v118 = 0;
                    }
                    v119 = &v118[8 * v114];
                    v120 = &v118[8 * v117];
                    *(_QWORD *)v119 = v109;
                    v112 = v119 + 8;
                    while (v110 != v113)
                    {
                      v121 = *((_QWORD *)v110 - 1);
                      v110 -= 8;
                      *((_QWORD *)v119 - 1) = v121;
                      v119 -= 8;
                    }
                    v108[502] = v119;
                    v108[503] = v112;
                    v108[504] = v120;
                    if (v113)
                      operator delete(v113);
                  }
                  else
                  {
                    *(_QWORD *)v110 = v109;
                    v112 = v110 + 8;
                  }
                  v108[503] = v112;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    v122 = *(_QWORD **)a1[1];
                    v123 = *(_WORD *)(a1[2] + 26) & 0x3FFF;
                    v124 = (char *)v122[506];
                    v125 = v122[507];
                    if ((unint64_t)v124 >= v125)
                    {
                      v127 = (char *)v122[505];
                      v128 = (v124 - v127) >> 3;
                      if ((unint64_t)(v128 + 1) >> 61)
                        goto LABEL_339;
                      v129 = v125 - (_QWORD)v127;
                      v130 = (uint64_t)(v125 - (_QWORD)v127) >> 2;
                      if (v130 <= v128 + 1)
                        v130 = v128 + 1;
                      if (v129 >= 0x7FFFFFFFFFFFFFF8)
                        v131 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v131 = v130;
                      if (v131)
                      {
                        v132 = (char *)sub_40FC((uint64_t)(v122 + 507), v131);
                        v124 = (char *)v122[506];
                        v127 = (char *)v122[505];
                      }
                      else
                      {
                        v132 = 0;
                      }
                      v133 = &v132[8 * v128];
                      v134 = &v132[8 * v131];
                      *(_QWORD *)v133 = v123;
                      v126 = v133 + 8;
                      while (v124 != v127)
                      {
                        v135 = *((_QWORD *)v124 - 1);
                        v124 -= 8;
                        *((_QWORD *)v133 - 1) = v135;
                        v133 -= 8;
                      }
                      v122[505] = v133;
                      v122[506] = v126;
                      v122[507] = v134;
                      if (v127)
                        operator delete(v127);
                    }
                    else
                    {
                      *(_QWORD *)v124 = v123;
                      v126 = v124 + 8;
                    }
                    v122[506] = v126;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      v136 = *(_QWORD **)a1[1];
                      v137 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
                      v138 = (char *)v136[509];
                      v139 = v136[510];
                      if ((unint64_t)v138 >= v139)
                      {
                        v141 = (char *)v136[508];
                        v142 = (v138 - v141) >> 3;
                        if ((unint64_t)(v142 + 1) >> 61)
                          goto LABEL_339;
                        v143 = v139 - (_QWORD)v141;
                        v144 = (uint64_t)(v139 - (_QWORD)v141) >> 2;
                        if (v144 <= v142 + 1)
                          v144 = v142 + 1;
                        if (v143 >= 0x7FFFFFFFFFFFFFF8)
                          v145 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v145 = v144;
                        if (v145)
                        {
                          v146 = (char *)sub_40FC((uint64_t)(v136 + 510), v145);
                          v138 = (char *)v136[509];
                          v141 = (char *)v136[508];
                        }
                        else
                        {
                          v146 = 0;
                        }
                        v147 = &v146[8 * v142];
                        v148 = &v146[8 * v145];
                        *(_QWORD *)v147 = v137;
                        v140 = v147 + 8;
                        while (v138 != v141)
                        {
                          v149 = *((_QWORD *)v138 - 1);
                          v138 -= 8;
                          *((_QWORD *)v147 - 1) = v149;
                          v147 -= 8;
                        }
                        v136[508] = v147;
                        v136[509] = v140;
                        v136[510] = v148;
                        if (v141)
                          operator delete(v141);
                      }
                      else
                      {
                        *(_QWORD *)v138 = v137;
                        v140 = v138 + 8;
                      }
                      v136[509] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        v150 = *(_QWORD **)a1[1];
                        v151 = *(_WORD *)(a1[2] + 28) & 0x3FFF;
                        v152 = (char *)v150[512];
                        v153 = v150[513];
                        if ((unint64_t)v152 >= v153)
                        {
                          v155 = (char *)v150[511];
                          v156 = (v152 - v155) >> 3;
                          if ((unint64_t)(v156 + 1) >> 61)
                            goto LABEL_339;
                          v157 = v153 - (_QWORD)v155;
                          v158 = (uint64_t)(v153 - (_QWORD)v155) >> 2;
                          if (v158 <= v156 + 1)
                            v158 = v156 + 1;
                          if (v157 >= 0x7FFFFFFFFFFFFFF8)
                            v159 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v159 = v158;
                          if (v159)
                          {
                            v160 = (char *)sub_40FC((uint64_t)(v150 + 513), v159);
                            v152 = (char *)v150[512];
                            v155 = (char *)v150[511];
                          }
                          else
                          {
                            v160 = 0;
                          }
                          v161 = &v160[8 * v156];
                          v162 = &v160[8 * v159];
                          *(_QWORD *)v161 = v151;
                          v154 = v161 + 8;
                          while (v152 != v155)
                          {
                            v163 = *((_QWORD *)v152 - 1);
                            v152 -= 8;
                            *((_QWORD *)v161 - 1) = v163;
                            v161 -= 8;
                          }
                          v150[511] = v161;
                          v150[512] = v154;
                          v150[513] = v162;
                          if (v155)
                            operator delete(v155);
                        }
                        else
                        {
                          *(_QWORD *)v152 = v151;
                          v154 = v152 + 8;
                        }
                        v150[512] = v154;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          v164 = *(_QWORD **)a1[1];
                          v165 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
                          v166 = (char *)v164[515];
                          v167 = v164[516];
                          if ((unint64_t)v166 >= v167)
                          {
                            v169 = (char *)v164[514];
                            v170 = (v166 - v169) >> 3;
                            if ((unint64_t)(v170 + 1) >> 61)
                              goto LABEL_339;
                            v171 = v167 - (_QWORD)v169;
                            v172 = (uint64_t)(v167 - (_QWORD)v169) >> 2;
                            if (v172 <= v170 + 1)
                              v172 = v170 + 1;
                            if (v171 >= 0x7FFFFFFFFFFFFFF8)
                              v173 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v173 = v172;
                            if (v173)
                            {
                              v174 = (char *)sub_40FC((uint64_t)(v164 + 516), v173);
                              v166 = (char *)v164[515];
                              v169 = (char *)v164[514];
                            }
                            else
                            {
                              v174 = 0;
                            }
                            v175 = &v174[8 * v170];
                            v176 = &v174[8 * v173];
                            *(_QWORD *)v175 = v165;
                            v168 = v175 + 8;
                            while (v166 != v169)
                            {
                              v177 = *((_QWORD *)v166 - 1);
                              v166 -= 8;
                              *((_QWORD *)v175 - 1) = v177;
                              v175 -= 8;
                            }
                            v164[514] = v175;
                            v164[515] = v168;
                            v164[516] = v176;
                            if (v169)
                              operator delete(v169);
                          }
                          else
                          {
                            *(_QWORD *)v166 = v165;
                            v168 = v166 + 8;
                          }
                          v164[515] = v168;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            v178 = *(_QWORD **)a1[1];
                            v179 = *(_WORD *)(a1[2] + 30) & 0x3FFF;
                            v180 = (char *)v178[518];
                            v181 = v178[519];
                            if ((unint64_t)v180 >= v181)
                            {
                              v183 = (char *)v178[517];
                              v184 = (v180 - v183) >> 3;
                              if ((unint64_t)(v184 + 1) >> 61)
                                goto LABEL_339;
                              v185 = v181 - (_QWORD)v183;
                              v186 = (uint64_t)(v181 - (_QWORD)v183) >> 2;
                              if (v186 <= v184 + 1)
                                v186 = v184 + 1;
                              if (v185 >= 0x7FFFFFFFFFFFFFF8)
                                v187 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v187 = v186;
                              if (v187)
                              {
                                v188 = (char *)sub_40FC((uint64_t)(v178 + 519), v187);
                                v180 = (char *)v178[518];
                                v183 = (char *)v178[517];
                              }
                              else
                              {
                                v188 = 0;
                              }
                              v189 = &v188[8 * v184];
                              v190 = &v188[8 * v187];
                              *(_QWORD *)v189 = v179;
                              v182 = v189 + 8;
                              while (v180 != v183)
                              {
                                v191 = *((_QWORD *)v180 - 1);
                                v180 -= 8;
                                *((_QWORD *)v189 - 1) = v191;
                                v189 -= 8;
                              }
                              v178[517] = v189;
                              v178[518] = v182;
                              v178[519] = v190;
                              if (v183)
                                operator delete(v183);
                            }
                            else
                            {
                              *(_QWORD *)v180 = v179;
                              v182 = v180 + 8;
                            }
                            v178[518] = v182;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              v192 = *(_QWORD **)a1[1];
                              v193 = *(_DWORD *)(a1[2] + 16) & 0x3FFFFLL;
                              v194 = (uint64_t *)v192[521];
                              v195 = v192[522];
                              if ((unint64_t)v194 >= v195)
                              {
                                v197 = (uint64_t *)v192[520];
                                v198 = v194 - v197;
                                if ((unint64_t)(v198 + 1) >> 61)
                                  goto LABEL_339;
                                v199 = v195 - (_QWORD)v197;
                                v200 = (uint64_t)(v195 - (_QWORD)v197) >> 2;
                                if (v200 <= v198 + 1)
                                  v200 = v198 + 1;
                                if (v199 >= 0x7FFFFFFFFFFFFFF8)
                                  v201 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v201 = v200;
                                if (v201)
                                {
                                  v202 = (char *)sub_40FC((uint64_t)(v192 + 522), v201);
                                  v194 = (uint64_t *)v192[521];
                                  v197 = (uint64_t *)v192[520];
                                }
                                else
                                {
                                  v202 = 0;
                                }
                                v203 = (uint64_t *)&v202[8 * v198];
                                v204 = &v202[8 * v201];
                                *v203 = v193;
                                v196 = v203 + 1;
                                while (v194 != v197)
                                {
                                  v205 = *--v194;
                                  *--v203 = v205;
                                }
                                v192[520] = v203;
                                v192[521] = v196;
                                v192[522] = v204;
                                if (v197)
                                  operator delete(v197);
                              }
                              else
                              {
                                *v194 = v193;
                                v196 = v194 + 1;
                              }
                              v192[521] = v196;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                v206 = *(_QWORD **)a1[1];
                                v207 = *(_WORD *)(a1[2] + 24) & 0x1FFF;
                                v208 = (char *)v206[524];
                                v209 = v206[525];
                                if ((unint64_t)v208 >= v209)
                                {
                                  v211 = (char *)v206[523];
                                  v212 = (v208 - v211) >> 3;
                                  if ((unint64_t)(v212 + 1) >> 61)
                                    goto LABEL_339;
                                  v213 = v209 - (_QWORD)v211;
                                  v214 = (uint64_t)(v209 - (_QWORD)v211) >> 2;
                                  if (v214 <= v212 + 1)
                                    v214 = v212 + 1;
                                  if (v213 >= 0x7FFFFFFFFFFFFFF8)
                                    v215 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v215 = v214;
                                  if (v215)
                                  {
                                    v216 = (char *)sub_40FC((uint64_t)(v206 + 525), v215);
                                    v208 = (char *)v206[524];
                                    v211 = (char *)v206[523];
                                  }
                                  else
                                  {
                                    v216 = 0;
                                  }
                                  v217 = &v216[8 * v212];
                                  v218 = &v216[8 * v215];
                                  *(_QWORD *)v217 = v207;
                                  v210 = v217 + 8;
                                  while (v208 != v211)
                                  {
                                    v219 = *((_QWORD *)v208 - 1);
                                    v208 -= 8;
                                    *((_QWORD *)v217 - 1) = v219;
                                    v217 -= 8;
                                  }
                                  v206[523] = v217;
                                  v206[524] = v210;
                                  v206[525] = v218;
                                  if (v211)
                                    operator delete(v211);
                                }
                                else
                                {
                                  *(_QWORD *)v208 = v207;
                                  v210 = v208 + 8;
                                }
                                v206[524] = v210;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  v220 = *(_QWORD **)a1[1];
                                  v221 = *(_WORD *)(a1[2] + 54) & 0x1FF;
                                  v222 = (char *)v220[527];
                                  v223 = v220[528];
                                  if ((unint64_t)v222 >= v223)
                                  {
                                    v225 = (char *)v220[526];
                                    v226 = (v222 - v225) >> 3;
                                    if ((unint64_t)(v226 + 1) >> 61)
                                      goto LABEL_339;
                                    v227 = v223 - (_QWORD)v225;
                                    v228 = (uint64_t)(v223 - (_QWORD)v225) >> 2;
                                    if (v228 <= v226 + 1)
                                      v228 = v226 + 1;
                                    if (v227 >= 0x7FFFFFFFFFFFFFF8)
                                      v229 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v229 = v228;
                                    if (v229)
                                    {
                                      v230 = (char *)sub_40FC((uint64_t)(v220 + 528), v229);
                                      v222 = (char *)v220[527];
                                      v225 = (char *)v220[526];
                                    }
                                    else
                                    {
                                      v230 = 0;
                                    }
                                    v231 = &v230[8 * v226];
                                    v232 = &v230[8 * v229];
                                    *(_QWORD *)v231 = v221;
                                    v224 = v231 + 8;
                                    while (v222 != v225)
                                    {
                                      v233 = *((_QWORD *)v222 - 1);
                                      v222 -= 8;
                                      *((_QWORD *)v231 - 1) = v233;
                                      v231 -= 8;
                                    }
                                    v220[526] = v231;
                                    v220[527] = v224;
                                    v220[528] = v232;
                                    if (v225)
                                      operator delete(v225);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v222 = v221;
                                    v224 = v222 + 8;
                                  }
                                  v220[527] = v224;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    v234 = *(_QWORD **)a1[1];
                                    v235 = *(_WORD *)(a1[2] + 38) & 0x1FF;
                                    v236 = (char *)v234[530];
                                    v237 = v234[531];
                                    if ((unint64_t)v236 >= v237)
                                    {
                                      v239 = (char *)v234[529];
                                      v240 = (v236 - v239) >> 3;
                                      if ((unint64_t)(v240 + 1) >> 61)
                                        goto LABEL_339;
                                      v241 = v237 - (_QWORD)v239;
                                      v242 = (uint64_t)(v237 - (_QWORD)v239) >> 2;
                                      if (v242 <= v240 + 1)
                                        v242 = v240 + 1;
                                      if (v241 >= 0x7FFFFFFFFFFFFFF8)
                                        v243 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v243 = v242;
                                      if (v243)
                                      {
                                        v244 = (char *)sub_40FC((uint64_t)(v234 + 531), v243);
                                        v236 = (char *)v234[530];
                                        v239 = (char *)v234[529];
                                      }
                                      else
                                      {
                                        v244 = 0;
                                      }
                                      v245 = &v244[8 * v240];
                                      v246 = &v244[8 * v243];
                                      *(_QWORD *)v245 = v235;
                                      v238 = v245 + 8;
                                      while (v236 != v239)
                                      {
                                        v247 = *((_QWORD *)v236 - 1);
                                        v236 -= 8;
                                        *((_QWORD *)v245 - 1) = v247;
                                        v245 -= 8;
                                      }
                                      v234[529] = v245;
                                      v234[530] = v238;
                                      v234[531] = v246;
                                      if (v239)
                                        operator delete(v239);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v236 = v235;
                                      v238 = v236 + 8;
                                    }
                                    v234[530] = v238;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      v248 = *(_QWORD **)a1[1];
                                      v249 = *(_WORD *)(a1[2] + 56) & 0x1FF;
                                      v250 = (char *)v248[533];
                                      v251 = v248[534];
                                      if ((unint64_t)v250 >= v251)
                                      {
                                        v253 = (char *)v248[532];
                                        v254 = (v250 - v253) >> 3;
                                        if ((unint64_t)(v254 + 1) >> 61)
                                          goto LABEL_339;
                                        v255 = v251 - (_QWORD)v253;
                                        v256 = (uint64_t)(v251 - (_QWORD)v253) >> 2;
                                        if (v256 <= v254 + 1)
                                          v256 = v254 + 1;
                                        if (v255 >= 0x7FFFFFFFFFFFFFF8)
                                          v257 = 0x1FFFFFFFFFFFFFFFLL;
                                        else
                                          v257 = v256;
                                        if (v257)
                                        {
                                          v258 = (char *)sub_40FC((uint64_t)(v248 + 534), v257);
                                          v250 = (char *)v248[533];
                                          v253 = (char *)v248[532];
                                        }
                                        else
                                        {
                                          v258 = 0;
                                        }
                                        v259 = &v258[8 * v254];
                                        v260 = &v258[8 * v257];
                                        *(_QWORD *)v259 = v249;
                                        v252 = v259 + 8;
                                        while (v250 != v253)
                                        {
                                          v261 = *((_QWORD *)v250 - 1);
                                          v250 -= 8;
                                          *((_QWORD *)v259 - 1) = v261;
                                          v259 -= 8;
                                        }
                                        v248[532] = v259;
                                        v248[533] = v252;
                                        v248[534] = v260;
                                        if (v253)
                                          operator delete(v253);
                                      }
                                      else
                                      {
                                        *(_QWORD *)v250 = v249;
                                        v252 = v250 + 8;
                                      }
                                      v248[533] = v252;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        v262 = *(_QWORD **)a1[1];
                                        v263 = *(_WORD *)(a1[2] + 40) & 0x1FF;
                                        v264 = (char *)v262[536];
                                        v265 = v262[537];
                                        if ((unint64_t)v264 >= v265)
                                        {
                                          v267 = (char *)v262[535];
                                          v268 = (v264 - v267) >> 3;
                                          if ((unint64_t)(v268 + 1) >> 61)
                                            goto LABEL_339;
                                          v269 = v265 - (_QWORD)v267;
                                          v270 = (uint64_t)(v265 - (_QWORD)v267) >> 2;
                                          if (v270 <= v268 + 1)
                                            v270 = v268 + 1;
                                          if (v269 >= 0x7FFFFFFFFFFFFFF8)
                                            v271 = 0x1FFFFFFFFFFFFFFFLL;
                                          else
                                            v271 = v270;
                                          if (v271)
                                          {
                                            v272 = (char *)sub_40FC((uint64_t)(v262 + 537), v271);
                                            v264 = (char *)v262[536];
                                            v267 = (char *)v262[535];
                                          }
                                          else
                                          {
                                            v272 = 0;
                                          }
                                          v273 = &v272[8 * v268];
                                          v274 = &v272[8 * v271];
                                          *(_QWORD *)v273 = v263;
                                          v266 = v273 + 8;
                                          while (v264 != v267)
                                          {
                                            v275 = *((_QWORD *)v264 - 1);
                                            v264 -= 8;
                                            *((_QWORD *)v273 - 1) = v275;
                                            v273 -= 8;
                                          }
                                          v262[535] = v273;
                                          v262[536] = v266;
                                          v262[537] = v274;
                                          if (v267)
                                            operator delete(v267);
                                        }
                                        else
                                        {
                                          *(_QWORD *)v264 = v263;
                                          v266 = v264 + 8;
                                        }
                                        v262[536] = v266;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          v276 = a1[2];
                                          v277 = *(_QWORD **)a1[1];
                                          v278 = (unint64_t)*(unsigned int *)(v276 + 20) >> 18;
                                          v279 = (unint64_t *)v277[539];
                                          v280 = v277[540];
                                          if ((unint64_t)v279 < v280)
                                          {
                                            *v279 = v278;
                                            v281 = v279 + 1;
LABEL_346:
                                            v277[539] = v281;
                                            goto LABEL_347;
                                          }
                                          v282 = (unint64_t *)v277[538];
                                          v283 = v279 - v282;
                                          if (!((unint64_t)(v283 + 1) >> 61))
                                          {
                                            v284 = v280 - (_QWORD)v282;
                                            v285 = (uint64_t)(v280 - (_QWORD)v282) >> 2;
                                            if (v285 <= v283 + 1)
                                              v285 = v283 + 1;
                                            if (v284 >= 0x7FFFFFFFFFFFFFF8)
                                              v286 = 0x1FFFFFFFFFFFFFFFLL;
                                            else
                                              v286 = v285;
                                            if (v286)
                                            {
                                              v287 = (char *)sub_40FC((uint64_t)(v277 + 540), v286);
                                              v279 = (unint64_t *)v277[539];
                                              v282 = (unint64_t *)v277[538];
                                            }
                                            else
                                            {
                                              v287 = 0;
                                            }
                                            v288 = (unint64_t *)&v287[8 * v283];
                                            v289 = &v287[8 * v286];
                                            *v288 = v278;
                                            v281 = v288 + 1;
                                            while (v279 != v282)
                                            {
                                              v290 = *--v279;
                                              *--v288 = v290;
                                            }
                                            v277[538] = v288;
                                            v277[539] = v281;
                                            v277[540] = v289;
                                            if (v282)
                                              operator delete(v282);
                                            goto LABEL_346;
                                          }
LABEL_339:
                                          sub_4074();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_347:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v11 = (_QWORD *)a1[1];
    v10 = a1[2];
    v12 = (_QWORD *)*v11;
    *(_QWORD *)(v12[482] - 8) += *(_WORD *)(v10 + 48) & 0x3FFF;
    *(_QWORD *)(v12[485] - 8) += *(_WORD *)(v10 + 32) & 0x3FFF;
    *(_QWORD *)(v12[488] - 8) += *(_WORD *)(v10 + 50) & 0x3FFF;
    *(_QWORD *)(v12[491] - 8) += *(_WORD *)(v10 + 34) & 0x3FFF;
    *(_QWORD *)(v12[494] - 8) += *(_WORD *)(v10 + 52) & 0x3FFF;
    *(_QWORD *)(v12[497] - 8) += *(_WORD *)(v10 + 36) & 0x3FFF;
    *(_QWORD *)(v12[500] - 8) += *(_DWORD *)(v10 + 20) & 0x3FFFF;
    *(_QWORD *)(v12[503] - 8) += *(_WORD *)(v10 + 42) & 0x3FFF;
    *(_QWORD *)(v12[506] - 8) += *(_WORD *)(v10 + 26) & 0x3FFF;
    *(_QWORD *)(v12[509] - 8) += *(_WORD *)(v10 + 44) & 0x3FFF;
    v13 = a1[2];
    v14 = (_QWORD *)*v11;
    *(_QWORD *)(v14[512] - 8) += *(_WORD *)(v13 + 28) & 0x3FFF;
    *(_QWORD *)(v14[515] - 8) += *(_WORD *)(v13 + 46) & 0x3FFF;
    *(_QWORD *)(v14[518] - 8) += *(_WORD *)(v13 + 30) & 0x3FFF;
    *(_QWORD *)(v14[521] - 8) += *(_DWORD *)(v13 + 16) & 0x3FFFF;
    *(_QWORD *)(v14[524] - 8) += *(_WORD *)(v13 + 24) & 0x1FFF;
    *(_QWORD *)(v14[527] - 8) += *(_WORD *)(v13 + 54) & 0x1FF;
    *(_QWORD *)(v14[530] - 8) += *(_WORD *)(v13 + 38) & 0x1FF;
    *(_QWORD *)(v14[533] - 8) += *(_WORD *)(v13 + 56) & 0x1FF;
    *(_QWORD *)(v14[536] - 8) += *(_WORD *)(v13 + 40) & 0x1FF;
    *(_QWORD *)(v14[539] - 8) += (unint64_t)*(unsigned int *)(v13 + 20) >> 18;
  }
}

void sub_475BC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t *v147;
  char *v148;
  uint64_t v149;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    if (*(_DWORD *)(v3 + 48))
      goto LABEL_176;
    v5 = *(_QWORD **)a1[1];
    v6 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
    v7 = (uint64_t *)v5[572];
    v8 = v5[573];
    if ((unint64_t)v7 >= v8)
    {
      v12 = (uint64_t *)v5[571];
      v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_178;
      v14 = v8 - (_QWORD)v12;
      v15 = (uint64_t)(v8 - (_QWORD)v12) >> 2;
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v17 = (char *)sub_40FC((uint64_t)(v5 + 573), v16);
        v7 = (uint64_t *)v5[572];
        v12 = (uint64_t *)v5[571];
      }
      else
      {
        v17 = 0;
      }
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v6;
      v9 = v18 + 1;
      while (v7 != v12)
      {
        v20 = *--v7;
        *--v18 = v20;
      }
      v5[571] = v18;
      v5[572] = v9;
      v5[573] = v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v7 = v6;
      v9 = v7 + 1;
    }
    v5[572] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v21 = *(_QWORD **)a1[1];
      v22 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      v23 = (uint64_t *)v21[575];
      v24 = v21[576];
      if ((unint64_t)v23 >= v24)
      {
        v26 = (uint64_t *)v21[574];
        v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61)
          goto LABEL_178;
        v28 = v24 - (_QWORD)v26;
        v29 = (uint64_t)(v24 - (_QWORD)v26) >> 2;
        if (v29 <= v27 + 1)
          v29 = v27 + 1;
        if (v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          v31 = (char *)sub_40FC((uint64_t)(v21 + 576), v30);
          v23 = (uint64_t *)v21[575];
          v26 = (uint64_t *)v21[574];
        }
        else
        {
          v31 = 0;
        }
        v32 = (uint64_t *)&v31[8 * v27];
        v33 = &v31[8 * v30];
        *v32 = v22;
        v25 = v32 + 1;
        while (v23 != v26)
        {
          v34 = *--v23;
          *--v32 = v34;
        }
        v21[574] = v32;
        v21[575] = v25;
        v21[576] = v33;
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v23 = v22;
        v25 = v23 + 1;
      }
      v21[575] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        v35 = *(_QWORD **)a1[1];
        v36 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
        v37 = (uint64_t *)v35[578];
        v38 = v35[579];
        if ((unint64_t)v37 >= v38)
        {
          v40 = (uint64_t *)v35[577];
          v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61)
            goto LABEL_178;
          v42 = v38 - (_QWORD)v40;
          v43 = (uint64_t)(v38 - (_QWORD)v40) >> 2;
          if (v43 <= v41 + 1)
            v43 = v41 + 1;
          if (v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
          {
            v45 = (char *)sub_40FC((uint64_t)(v35 + 579), v44);
            v37 = (uint64_t *)v35[578];
            v40 = (uint64_t *)v35[577];
          }
          else
          {
            v45 = 0;
          }
          v46 = (uint64_t *)&v45[8 * v41];
          v47 = &v45[8 * v44];
          *v46 = v36;
          v39 = v46 + 1;
          while (v37 != v40)
          {
            v48 = *--v37;
            *--v46 = v48;
          }
          v35[577] = v46;
          v35[578] = v39;
          v35[579] = v47;
          if (v40)
            operator delete(v40);
        }
        else
        {
          *v37 = v36;
          v39 = v37 + 1;
        }
        v35[578] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          v49 = a1[1];
          v50 = *(_QWORD **)v49;
          v51 = *(unsigned __int16 *)(a1[2] + 50);
          v52 = *(char **)(*(_QWORD *)v49 + 4648);
          v53 = *(_QWORD *)(*(_QWORD *)v49 + 4656);
          if ((unint64_t)v52 >= v53)
          {
            v55 = (char *)v50[580];
            v56 = (v52 - v55) >> 3;
            if ((unint64_t)(v56 + 1) >> 61)
              goto LABEL_178;
            v57 = v53 - (_QWORD)v55;
            v58 = (uint64_t)(v53 - (_QWORD)v55) >> 2;
            if (v58 <= v56 + 1)
              v58 = v56 + 1;
            if (v57 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
            {
              v60 = (char *)sub_40FC((uint64_t)(v50 + 582), v59);
              v52 = (char *)v50[581];
              v55 = (char *)v50[580];
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[8 * v56];
            v62 = &v60[8 * v59];
            *(_QWORD *)v61 = v51;
            v54 = v61 + 8;
            while (v52 != v55)
            {
              v63 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *((_QWORD *)v61 - 1) = v63;
              v61 -= 8;
            }
            v50[580] = v61;
            v50[581] = v54;
            v50[582] = v62;
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_QWORD *)v52 = v51;
            v54 = v52 + 8;
          }
          v50[581] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            v64 = a1[1];
            v65 = *(_QWORD **)v64;
            v66 = *(unsigned __int16 *)(a1[2] + 48);
            v67 = *(char **)(*(_QWORD *)v64 + 4672);
            v68 = *(_QWORD *)(*(_QWORD *)v64 + 4680);
            if ((unint64_t)v67 >= v68)
            {
              v70 = (char *)v65[583];
              v71 = (v67 - v70) >> 3;
              if ((unint64_t)(v71 + 1) >> 61)
                goto LABEL_178;
              v72 = v68 - (_QWORD)v70;
              v73 = (uint64_t)(v68 - (_QWORD)v70) >> 2;
              if (v73 <= v71 + 1)
                v73 = v71 + 1;
              if (v72 >= 0x7FFFFFFFFFFFFFF8)
                v74 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v74 = v73;
              if (v74)
              {
                v75 = (char *)sub_40FC((uint64_t)(v65 + 585), v74);
                v67 = (char *)v65[584];
                v70 = (char *)v65[583];
              }
              else
              {
                v75 = 0;
              }
              v76 = &v75[8 * v71];
              v77 = &v75[8 * v74];
              *(_QWORD *)v76 = v66;
              v69 = v76 + 8;
              while (v67 != v70)
              {
                v78 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v76 - 1) = v78;
                v76 -= 8;
              }
              v65[583] = v76;
              v65[584] = v69;
              v65[585] = v77;
              if (v70)
                operator delete(v70);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[584] = v69;
            if (!*(_DWORD *)(v3 + 48))
            {
              v79 = *(_QWORD **)a1[1];
              v80 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
              v81 = (uint64_t *)v79[587];
              v82 = v79[588];
              if ((unint64_t)v81 >= v82)
              {
                v84 = (uint64_t *)v79[586];
                v85 = v81 - v84;
                if ((unint64_t)(v85 + 1) >> 61)
                  goto LABEL_178;
                v86 = v82 - (_QWORD)v84;
                v87 = (uint64_t)(v82 - (_QWORD)v84) >> 2;
                if (v87 <= v85 + 1)
                  v87 = v85 + 1;
                if (v86 >= 0x7FFFFFFFFFFFFFF8)
                  v88 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v88 = v87;
                if (v88)
                {
                  v89 = (char *)sub_40FC((uint64_t)(v79 + 588), v88);
                  v81 = (uint64_t *)v79[587];
                  v84 = (uint64_t *)v79[586];
                }
                else
                {
                  v89 = 0;
                }
                v90 = (uint64_t *)&v89[8 * v85];
                v91 = &v89[8 * v88];
                *v90 = v80;
                v83 = v90 + 1;
                while (v81 != v84)
                {
                  v92 = *--v81;
                  *--v90 = v92;
                }
                v79[586] = v90;
                v79[587] = v83;
                v79[588] = v91;
                if (v84)
                  operator delete(v84);
              }
              else
              {
                *v81 = v80;
                v83 = v81 + 1;
              }
              v79[587] = v83;
              if (!*(_DWORD *)(v3 + 48))
              {
                v93 = *(_QWORD **)a1[1];
                v94 = *(_DWORD *)(a1[2] + 28) & 0xFFFFFLL;
                v95 = (uint64_t *)v93[590];
                v96 = v93[591];
                if ((unint64_t)v95 >= v96)
                {
                  v98 = (uint64_t *)v93[589];
                  v99 = v95 - v98;
                  if ((unint64_t)(v99 + 1) >> 61)
                    goto LABEL_178;
                  v100 = v96 - (_QWORD)v98;
                  v101 = (uint64_t)(v96 - (_QWORD)v98) >> 2;
                  if (v101 <= v99 + 1)
                    v101 = v99 + 1;
                  if (v100 >= 0x7FFFFFFFFFFFFFF8)
                    v102 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v102 = v101;
                  if (v102)
                  {
                    v103 = (char *)sub_40FC((uint64_t)(v93 + 591), v102);
                    v95 = (uint64_t *)v93[590];
                    v98 = (uint64_t *)v93[589];
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = (uint64_t *)&v103[8 * v99];
                  v105 = &v103[8 * v102];
                  *v104 = v94;
                  v97 = v104 + 1;
                  while (v95 != v98)
                  {
                    v106 = *--v95;
                    *--v104 = v106;
                  }
                  v93[589] = v104;
                  v93[590] = v97;
                  v93[591] = v105;
                  if (v98)
                    operator delete(v98);
                }
                else
                {
                  *v95 = v94;
                  v97 = v95 + 1;
                }
                v93[590] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  v107 = *(_QWORD **)a1[1];
                  v108 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
                  v109 = (uint64_t *)v107[593];
                  v110 = v107[594];
                  if ((unint64_t)v109 >= v110)
                  {
                    v112 = (uint64_t *)v107[592];
                    v113 = v109 - v112;
                    if ((unint64_t)(v113 + 1) >> 61)
                      goto LABEL_178;
                    v114 = v110 - (_QWORD)v112;
                    v115 = (uint64_t)(v110 - (_QWORD)v112) >> 2;
                    if (v115 <= v113 + 1)
                      v115 = v113 + 1;
                    if (v114 >= 0x7FFFFFFFFFFFFFF8)
                      v116 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v116 = v115;
                    if (v116)
                    {
                      v117 = (char *)sub_40FC((uint64_t)(v107 + 594), v116);
                      v109 = (uint64_t *)v107[593];
                      v112 = (uint64_t *)v107[592];
                    }
                    else
                    {
                      v117 = 0;
                    }
                    v118 = (uint64_t *)&v117[8 * v113];
                    v119 = &v117[8 * v116];
                    *v118 = v108;
                    v111 = v118 + 1;
                    while (v109 != v112)
                    {
                      v120 = *--v109;
                      *--v118 = v120;
                    }
                    v107[592] = v118;
                    v107[593] = v111;
                    v107[594] = v119;
                    if (v112)
                      operator delete(v112);
                  }
                  else
                  {
                    *v109 = v108;
                    v111 = v109 + 1;
                  }
                  v107[593] = v111;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    v121 = *(_QWORD **)a1[1];
                    v122 = *(_DWORD *)(a1[2] + 16) & 0xFFFFFLL;
                    v123 = (uint64_t *)v121[596];
                    v124 = v121[597];
                    if ((unint64_t)v123 >= v124)
                    {
                      v126 = (uint64_t *)v121[595];
                      v127 = v123 - v126;
                      if ((unint64_t)(v127 + 1) >> 61)
                        goto LABEL_178;
                      v128 = v124 - (_QWORD)v126;
                      v129 = (uint64_t)(v124 - (_QWORD)v126) >> 2;
                      if (v129 <= v127 + 1)
                        v129 = v127 + 1;
                      if (v128 >= 0x7FFFFFFFFFFFFFF8)
                        v130 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v130 = v129;
                      if (v130)
                      {
                        v131 = (char *)sub_40FC((uint64_t)(v121 + 597), v130);
                        v123 = (uint64_t *)v121[596];
                        v126 = (uint64_t *)v121[595];
                      }
                      else
                      {
                        v131 = 0;
                      }
                      v132 = (uint64_t *)&v131[8 * v127];
                      v133 = &v131[8 * v130];
                      *v132 = v122;
                      v125 = v132 + 1;
                      while (v123 != v126)
                      {
                        v134 = *--v123;
                        *--v132 = v134;
                      }
                      v121[595] = v132;
                      v121[596] = v125;
                      v121[597] = v133;
                      if (v126)
                        operator delete(v126);
                    }
                    else
                    {
                      *v123 = v122;
                      v125 = v123 + 1;
                    }
                    v121[596] = v125;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      v135 = a1[2];
                      v136 = *(_QWORD **)a1[1];
                      v137 = *(_DWORD *)(v135 + 20) & 0xFFFFFLL;
                      v138 = (uint64_t *)v136[599];
                      v139 = v136[600];
                      if ((unint64_t)v138 < v139)
                      {
                        *v138 = v137;
                        v140 = v138 + 1;
LABEL_175:
                        v136[599] = v140;
                        goto LABEL_176;
                      }
                      v141 = (uint64_t *)v136[598];
                      v142 = v138 - v141;
                      if (!((unint64_t)(v142 + 1) >> 61))
                      {
                        v143 = v139 - (_QWORD)v141;
                        v144 = (uint64_t)(v139 - (_QWORD)v141) >> 2;
                        if (v144 <= v142 + 1)
                          v144 = v142 + 1;
                        if (v143 >= 0x7FFFFFFFFFFFFFF8)
                          v145 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v145 = v144;
                        if (v145)
                        {
                          v146 = (char *)sub_40FC((uint64_t)(v136 + 600), v145);
                          v138 = (uint64_t *)v136[599];
                          v141 = (uint64_t *)v136[598];
                        }
                        else
                        {
                          v146 = 0;
                        }
                        v147 = (uint64_t *)&v146[8 * v142];
                        v148 = &v146[8 * v145];
                        *v147 = v137;
                        v140 = v147 + 1;
                        while (v138 != v141)
                        {
                          v149 = *--v138;
                          *--v147 = v149;
                        }
                        v136[598] = v147;
                        v136[599] = v140;
                        v136[600] = v148;
                        if (v141)
                          operator delete(v141);
                        goto LABEL_175;
                      }
LABEL_178:
                      sub_4074();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_176:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v10 = a1[2];
    v11 = *(_QWORD **)a1[1];
    *(_QWORD *)(v11[572] - 8) += *(_DWORD *)(v10 + 36) & 0xFFFFF;
    *(_QWORD *)(v11[575] - 8) += *(_DWORD *)(v10 + 40) & 0xFFFFF;
    *(_QWORD *)(v11[578] - 8) += *(_DWORD *)(v10 + 44) & 0xFFFFF;
    *(_QWORD *)(v11[581] - 8) += *(unsigned __int16 *)(v10 + 50);
    *(_QWORD *)(v11[584] - 8) += *(unsigned __int16 *)(v10 + 48);
    *(_QWORD *)(v11[587] - 8) += *(_DWORD *)(v10 + 24) & 0xFFFFF;
    *(_QWORD *)(v11[590] - 8) += *(_DWORD *)(v10 + 28) & 0xFFFFF;
    *(_QWORD *)(v11[593] - 8) += *(_DWORD *)(v10 + 32) & 0xFFFFF;
    *(_QWORD *)(v11[596] - 8) += *(_DWORD *)(v10 + 16) & 0xFFFFF;
    *(_QWORD *)(v11[599] - 8) += *(_DWORD *)(v10 + 20) & 0xFFFFF;
  }
}

void sub_47F4C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  _WORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _WORD *v13;
  _QWORD *v14;
  _WORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  char *v156;
  unint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  _QWORD *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  char *v226;
  unint64_t v227;
  _QWORD *v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  char *v240;
  unint64_t v241;
  _QWORD *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  char *v254;
  unint64_t v255;
  _QWORD *v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  char *v268;
  unint64_t v269;
  _QWORD *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  _QWORD *v284;
  char *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  char *v296;
  unint64_t v297;
  _QWORD *v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  char *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  char *v310;
  unint64_t v311;
  _QWORD *v312;
  char *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  unint64_t v325;
  _QWORD *v326;
  char *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  char *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  char *v338;
  unint64_t v339;
  _QWORD *v340;
  char *v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  char *v352;
  unint64_t v353;
  _QWORD *v354;
  char *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  char *v361;
  char *v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  char *v366;
  unint64_t v367;
  _QWORD *v368;
  char *v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  char *v374;
  char *v375;
  char *v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  char *v380;
  unint64_t v381;
  _QWORD *v382;
  char *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  char *v388;
  char *v389;
  char *v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  char *v394;
  unint64_t v395;
  _QWORD *v396;
  char *v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  char *v408;
  unint64_t v409;
  _QWORD *v410;
  char *v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  char *v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  char *v422;
  unint64_t v423;
  _QWORD *v424;
  char *v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  char *v436;
  unint64_t v437;
  _QWORD *v438;
  char *v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  char *v444;
  char *v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  char *v451;
  unint64_t v452;
  _QWORD *v453;
  char *v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  char *v461;
  uint64_t v462;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    if (*(_DWORD *)(v3 + 48))
      goto LABEL_551;
    v5 = *(_QWORD **)a1[1];
    v6 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
    v7 = (char *)v5[182];
    v8 = v5[183];
    if ((unint64_t)v7 >= v8)
    {
      v19 = (char *)v5[181];
      v20 = (v7 - v19) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_543;
      v21 = v8 - (_QWORD)v19;
      v22 = (uint64_t)(v8 - (_QWORD)v19) >> 2;
      if (v22 <= v20 + 1)
        v22 = v20 + 1;
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)sub_40FC((uint64_t)(v5 + 183), v23);
        v7 = (char *)v5[182];
        v19 = (char *)v5[181];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *(_QWORD *)v25 = v6;
      v9 = v25 + 8;
      while (v7 != v19)
      {
        v27 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v25 - 1) = v27;
        v25 -= 8;
      }
      v5[181] = v25;
      v5[182] = v9;
      v5[183] = v26;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[182] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v28 = *(_QWORD **)a1[1];
      v29 = *(_WORD *)(a1[2] + 18) & 0x7FFF;
      v30 = (char *)v28[185];
      v31 = v28[186];
      if ((unint64_t)v30 >= v31)
      {
        v33 = (char *)v28[184];
        v34 = (v30 - v33) >> 3;
        if ((unint64_t)(v34 + 1) >> 61)
          goto LABEL_543;
        v35 = v31 - (_QWORD)v33;
        v36 = (uint64_t)(v31 - (_QWORD)v33) >> 2;
        if (v36 <= v34 + 1)
          v36 = v34 + 1;
        if (v35 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        if (v37)
        {
          v38 = (char *)sub_40FC((uint64_t)(v28 + 186), v37);
          v30 = (char *)v28[185];
          v33 = (char *)v28[184];
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v34];
        v40 = &v38[8 * v37];
        *(_QWORD *)v39 = v29;
        v32 = v39 + 8;
        while (v30 != v33)
        {
          v41 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v39 - 1) = v41;
          v39 -= 8;
        }
        v28[184] = v39;
        v28[185] = v32;
        v28[186] = v40;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v30 = v29;
        v32 = v30 + 8;
      }
      v28[185] = v32;
      if (!*(_DWORD *)(v3 + 48))
      {
        v42 = *(_QWORD **)a1[1];
        v43 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
        v44 = (char *)v42[188];
        v45 = v42[189];
        if ((unint64_t)v44 >= v45)
        {
          v47 = (char *)v42[187];
          v48 = (v44 - v47) >> 3;
          if ((unint64_t)(v48 + 1) >> 61)
            goto LABEL_543;
          v49 = v45 - (_QWORD)v47;
          v50 = (uint64_t)(v45 - (_QWORD)v47) >> 2;
          if (v50 <= v48 + 1)
            v50 = v48 + 1;
          if (v49 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v51)
          {
            v52 = (char *)sub_40FC((uint64_t)(v42 + 189), v51);
            v44 = (char *)v42[188];
            v47 = (char *)v42[187];
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[8 * v48];
          v54 = &v52[8 * v51];
          *(_QWORD *)v53 = v43;
          v46 = v53 + 8;
          while (v44 != v47)
          {
            v55 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v53 - 1) = v55;
            v53 -= 8;
          }
          v42[187] = v53;
          v42[188] = v46;
          v42[189] = v54;
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_QWORD *)v44 = v43;
          v46 = v44 + 8;
        }
        v42[188] = v46;
        if (!*(_DWORD *)(v3 + 48))
        {
          v56 = *(_QWORD **)a1[1];
          v57 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
          v58 = (char *)v56[191];
          v59 = v56[192];
          if ((unint64_t)v58 >= v59)
          {
            v61 = (char *)v56[190];
            v62 = (v58 - v61) >> 3;
            if ((unint64_t)(v62 + 1) >> 61)
              goto LABEL_543;
            v63 = v59 - (_QWORD)v61;
            v64 = (uint64_t)(v59 - (_QWORD)v61) >> 2;
            if (v64 <= v62 + 1)
              v64 = v62 + 1;
            if (v63 >= 0x7FFFFFFFFFFFFFF8)
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v65 = v64;
            if (v65)
            {
              v66 = (char *)sub_40FC((uint64_t)(v56 + 192), v65);
              v58 = (char *)v56[191];
              v61 = (char *)v56[190];
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[8 * v62];
            v68 = &v66[8 * v65];
            *(_QWORD *)v67 = v57;
            v60 = v67 + 8;
            while (v58 != v61)
            {
              v69 = *((_QWORD *)v58 - 1);
              v58 -= 8;
              *((_QWORD *)v67 - 1) = v69;
              v67 -= 8;
            }
            v56[190] = v67;
            v56[191] = v60;
            v56[192] = v68;
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_QWORD *)v58 = v57;
            v60 = v58 + 8;
          }
          v56[191] = v60;
          if (!*(_DWORD *)(v3 + 48))
          {
            v70 = *(_QWORD **)a1[1];
            v71 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
            v72 = (char *)v70[194];
            v73 = v70[195];
            if ((unint64_t)v72 >= v73)
            {
              v75 = (char *)v70[193];
              v76 = (v72 - v75) >> 3;
              if ((unint64_t)(v76 + 1) >> 61)
                goto LABEL_543;
              v77 = v73 - (_QWORD)v75;
              v78 = (uint64_t)(v73 - (_QWORD)v75) >> 2;
              if (v78 <= v76 + 1)
                v78 = v76 + 1;
              if (v77 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v78;
              if (v79)
              {
                v80 = (char *)sub_40FC((uint64_t)(v70 + 195), v79);
                v72 = (char *)v70[194];
                v75 = (char *)v70[193];
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[8 * v76];
              v82 = &v80[8 * v79];
              *(_QWORD *)v81 = v71;
              v74 = v81 + 8;
              while (v72 != v75)
              {
                v83 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v81 - 1) = v83;
                v81 -= 8;
              }
              v70[193] = v81;
              v70[194] = v74;
              v70[195] = v82;
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[194] = v74;
            if (!*(_DWORD *)(v3 + 48))
            {
              v84 = *(_QWORD **)a1[1];
              v85 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
              v86 = (char *)v84[197];
              v87 = v84[198];
              if ((unint64_t)v86 >= v87)
              {
                v89 = (char *)v84[196];
                v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61)
                  goto LABEL_543;
                v91 = v87 - (_QWORD)v89;
                v92 = (uint64_t)(v87 - (_QWORD)v89) >> 2;
                if (v92 <= v90 + 1)
                  v92 = v90 + 1;
                if (v91 >= 0x7FFFFFFFFFFFFFF8)
                  v93 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v93 = v92;
                if (v93)
                {
                  v94 = (char *)sub_40FC((uint64_t)(v84 + 198), v93);
                  v86 = (char *)v84[197];
                  v89 = (char *)v84[196];
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v94[8 * v90];
                v96 = &v94[8 * v93];
                *(_QWORD *)v95 = v85;
                v88 = v95 + 8;
                while (v86 != v89)
                {
                  v97 = *((_QWORD *)v86 - 1);
                  v86 -= 8;
                  *((_QWORD *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[196] = v95;
                v84[197] = v88;
                v84[198] = v96;
                if (v89)
                  operator delete(v89);
              }
              else
              {
                *(_QWORD *)v86 = v85;
                v88 = v86 + 8;
              }
              v84[197] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                v98 = *(_QWORD **)a1[1];
                v99 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
                v100 = (char *)v98[200];
                v101 = v98[201];
                if ((unint64_t)v100 >= v101)
                {
                  v103 = (char *)v98[199];
                  v104 = (v100 - v103) >> 3;
                  if ((unint64_t)(v104 + 1) >> 61)
                    goto LABEL_543;
                  v105 = v101 - (_QWORD)v103;
                  v106 = (uint64_t)(v101 - (_QWORD)v103) >> 2;
                  if (v106 <= v104 + 1)
                    v106 = v104 + 1;
                  if (v105 >= 0x7FFFFFFFFFFFFFF8)
                    v107 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v107 = v106;
                  if (v107)
                  {
                    v108 = (char *)sub_40FC((uint64_t)(v98 + 201), v107);
                    v100 = (char *)v98[200];
                    v103 = (char *)v98[199];
                  }
                  else
                  {
                    v108 = 0;
                  }
                  v109 = &v108[8 * v104];
                  v110 = &v108[8 * v107];
                  *(_QWORD *)v109 = v99;
                  v102 = v109 + 8;
                  while (v100 != v103)
                  {
                    v111 = *((_QWORD *)v100 - 1);
                    v100 -= 8;
                    *((_QWORD *)v109 - 1) = v111;
                    v109 -= 8;
                  }
                  v98[199] = v109;
                  v98[200] = v102;
                  v98[201] = v110;
                  if (v103)
                    operator delete(v103);
                }
                else
                {
                  *(_QWORD *)v100 = v99;
                  v102 = v100 + 8;
                }
                v98[200] = v102;
                if (!*(_DWORD *)(v3 + 48))
                {
                  v112 = *(_QWORD **)a1[1];
                  v113 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
                  v114 = (char *)v112[203];
                  v115 = v112[204];
                  if ((unint64_t)v114 >= v115)
                  {
                    v117 = (char *)v112[202];
                    v118 = (v114 - v117) >> 3;
                    if ((unint64_t)(v118 + 1) >> 61)
                      goto LABEL_543;
                    v119 = v115 - (_QWORD)v117;
                    v120 = (uint64_t)(v115 - (_QWORD)v117) >> 2;
                    if (v120 <= v118 + 1)
                      v120 = v118 + 1;
                    if (v119 >= 0x7FFFFFFFFFFFFFF8)
                      v121 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v121 = v120;
                    if (v121)
                    {
                      v122 = (char *)sub_40FC((uint64_t)(v112 + 204), v121);
                      v114 = (char *)v112[203];
                      v117 = (char *)v112[202];
                    }
                    else
                    {
                      v122 = 0;
                    }
                    v123 = &v122[8 * v118];
                    v124 = &v122[8 * v121];
                    *(_QWORD *)v123 = v113;
                    v116 = v123 + 8;
                    while (v114 != v117)
                    {
                      v125 = *((_QWORD *)v114 - 1);
                      v114 -= 8;
                      *((_QWORD *)v123 - 1) = v125;
                      v123 -= 8;
                    }
                    v112[202] = v123;
                    v112[203] = v116;
                    v112[204] = v124;
                    if (v117)
                      operator delete(v117);
                  }
                  else
                  {
                    *(_QWORD *)v114 = v113;
                    v116 = v114 + 8;
                  }
                  v112[203] = v116;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    v126 = *(_QWORD **)a1[1];
                    v127 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
                    v128 = (char *)v126[206];
                    v129 = v126[207];
                    if ((unint64_t)v128 >= v129)
                    {
                      v131 = (char *)v126[205];
                      v132 = (v128 - v131) >> 3;
                      if ((unint64_t)(v132 + 1) >> 61)
                        goto LABEL_543;
                      v133 = v129 - (_QWORD)v131;
                      v134 = (uint64_t)(v129 - (_QWORD)v131) >> 2;
                      if (v134 <= v132 + 1)
                        v134 = v132 + 1;
                      if (v133 >= 0x7FFFFFFFFFFFFFF8)
                        v135 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v135 = v134;
                      if (v135)
                      {
                        v136 = (char *)sub_40FC((uint64_t)(v126 + 207), v135);
                        v128 = (char *)v126[206];
                        v131 = (char *)v126[205];
                      }
                      else
                      {
                        v136 = 0;
                      }
                      v137 = &v136[8 * v132];
                      v138 = &v136[8 * v135];
                      *(_QWORD *)v137 = v127;
                      v130 = v137 + 8;
                      while (v128 != v131)
                      {
                        v139 = *((_QWORD *)v128 - 1);
                        v128 -= 8;
                        *((_QWORD *)v137 - 1) = v139;
                        v137 -= 8;
                      }
                      v126[205] = v137;
                      v126[206] = v130;
                      v126[207] = v138;
                      if (v131)
                        operator delete(v131);
                    }
                    else
                    {
                      *(_QWORD *)v128 = v127;
                      v130 = v128 + 8;
                    }
                    v126[206] = v130;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      v140 = *(_QWORD **)a1[1];
                      v141 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
                      v142 = (char *)v140[209];
                      v143 = v140[210];
                      if ((unint64_t)v142 >= v143)
                      {
                        v145 = (char *)v140[208];
                        v146 = (v142 - v145) >> 3;
                        if ((unint64_t)(v146 + 1) >> 61)
                          goto LABEL_543;
                        v147 = v143 - (_QWORD)v145;
                        v148 = (uint64_t)(v143 - (_QWORD)v145) >> 2;
                        if (v148 <= v146 + 1)
                          v148 = v146 + 1;
                        if (v147 >= 0x7FFFFFFFFFFFFFF8)
                          v149 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v149 = v148;
                        if (v149)
                        {
                          v150 = (char *)sub_40FC((uint64_t)(v140 + 210), v149);
                          v142 = (char *)v140[209];
                          v145 = (char *)v140[208];
                        }
                        else
                        {
                          v150 = 0;
                        }
                        v151 = &v150[8 * v146];
                        v152 = &v150[8 * v149];
                        *(_QWORD *)v151 = v141;
                        v144 = v151 + 8;
                        while (v142 != v145)
                        {
                          v153 = *((_QWORD *)v142 - 1);
                          v142 -= 8;
                          *((_QWORD *)v151 - 1) = v153;
                          v151 -= 8;
                        }
                        v140[208] = v151;
                        v140[209] = v144;
                        v140[210] = v152;
                        if (v145)
                          operator delete(v145);
                      }
                      else
                      {
                        *(_QWORD *)v142 = v141;
                        v144 = v142 + 8;
                      }
                      v140[209] = v144;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        v154 = *(_QWORD **)a1[1];
                        v155 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
                        v156 = (char *)v154[212];
                        v157 = v154[213];
                        if ((unint64_t)v156 >= v157)
                        {
                          v159 = (char *)v154[211];
                          v160 = (v156 - v159) >> 3;
                          if ((unint64_t)(v160 + 1) >> 61)
                            goto LABEL_543;
                          v161 = v157 - (_QWORD)v159;
                          v162 = (uint64_t)(v157 - (_QWORD)v159) >> 2;
                          if (v162 <= v160 + 1)
                            v162 = v160 + 1;
                          if (v161 >= 0x7FFFFFFFFFFFFFF8)
                            v163 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v163 = v162;
                          if (v163)
                          {
                            v164 = (char *)sub_40FC((uint64_t)(v154 + 213), v163);
                            v156 = (char *)v154[212];
                            v159 = (char *)v154[211];
                          }
                          else
                          {
                            v164 = 0;
                          }
                          v165 = &v164[8 * v160];
                          v166 = &v164[8 * v163];
                          *(_QWORD *)v165 = v155;
                          v158 = v165 + 8;
                          while (v156 != v159)
                          {
                            v167 = *((_QWORD *)v156 - 1);
                            v156 -= 8;
                            *((_QWORD *)v165 - 1) = v167;
                            v165 -= 8;
                          }
                          v154[211] = v165;
                          v154[212] = v158;
                          v154[213] = v166;
                          if (v159)
                            operator delete(v159);
                        }
                        else
                        {
                          *(_QWORD *)v156 = v155;
                          v158 = v156 + 8;
                        }
                        v154[212] = v158;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          v168 = *(_QWORD **)a1[1];
                          v169 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
                          v170 = (char *)v168[215];
                          v171 = v168[216];
                          if ((unint64_t)v170 >= v171)
                          {
                            v173 = (char *)v168[214];
                            v174 = (v170 - v173) >> 3;
                            if ((unint64_t)(v174 + 1) >> 61)
                              goto LABEL_543;
                            v175 = v171 - (_QWORD)v173;
                            v176 = (uint64_t)(v171 - (_QWORD)v173) >> 2;
                            if (v176 <= v174 + 1)
                              v176 = v174 + 1;
                            if (v175 >= 0x7FFFFFFFFFFFFFF8)
                              v177 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v177 = v176;
                            if (v177)
                            {
                              v178 = (char *)sub_40FC((uint64_t)(v168 + 216), v177);
                              v170 = (char *)v168[215];
                              v173 = (char *)v168[214];
                            }
                            else
                            {
                              v178 = 0;
                            }
                            v179 = &v178[8 * v174];
                            v180 = &v178[8 * v177];
                            *(_QWORD *)v179 = v169;
                            v172 = v179 + 8;
                            while (v170 != v173)
                            {
                              v181 = *((_QWORD *)v170 - 1);
                              v170 -= 8;
                              *((_QWORD *)v179 - 1) = v181;
                              v179 -= 8;
                            }
                            v168[214] = v179;
                            v168[215] = v172;
                            v168[216] = v180;
                            if (v173)
                              operator delete(v173);
                          }
                          else
                          {
                            *(_QWORD *)v170 = v169;
                            v172 = v170 + 8;
                          }
                          v168[215] = v172;
                          if (!*(_DWORD *)(v3 + 48))
                          {
                            v182 = *(_QWORD **)a1[1];
                            v183 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
                            v184 = (char *)v182[218];
                            v185 = v182[219];
                            if ((unint64_t)v184 >= v185)
                            {
                              v187 = (char *)v182[217];
                              v188 = (v184 - v187) >> 3;
                              if ((unint64_t)(v188 + 1) >> 61)
                                goto LABEL_543;
                              v189 = v185 - (_QWORD)v187;
                              v190 = (uint64_t)(v185 - (_QWORD)v187) >> 2;
                              if (v190 <= v188 + 1)
                                v190 = v188 + 1;
                              if (v189 >= 0x7FFFFFFFFFFFFFF8)
                                v191 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v191 = v190;
                              if (v191)
                              {
                                v192 = (char *)sub_40FC((uint64_t)(v182 + 219), v191);
                                v184 = (char *)v182[218];
                                v187 = (char *)v182[217];
                              }
                              else
                              {
                                v192 = 0;
                              }
                              v193 = &v192[8 * v188];
                              v194 = &v192[8 * v191];
                              *(_QWORD *)v193 = v183;
                              v186 = v193 + 8;
                              while (v184 != v187)
                              {
                                v195 = *((_QWORD *)v184 - 1);
                                v184 -= 8;
                                *((_QWORD *)v193 - 1) = v195;
                                v193 -= 8;
                              }
                              v182[217] = v193;
                              v182[218] = v186;
                              v182[219] = v194;
                              if (v187)
                                operator delete(v187);
                            }
                            else
                            {
                              *(_QWORD *)v184 = v183;
                              v186 = v184 + 8;
                            }
                            v182[218] = v186;
                            if (!*(_DWORD *)(v3 + 48))
                            {
                              v196 = *(_QWORD **)a1[1];
                              v197 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
                              v198 = (char *)v196[221];
                              v199 = v196[222];
                              if ((unint64_t)v198 >= v199)
                              {
                                v201 = (char *)v196[220];
                                v202 = (v198 - v201) >> 3;
                                if ((unint64_t)(v202 + 1) >> 61)
                                  goto LABEL_543;
                                v203 = v199 - (_QWORD)v201;
                                v204 = (uint64_t)(v199 - (_QWORD)v201) >> 2;
                                if (v204 <= v202 + 1)
                                  v204 = v202 + 1;
                                if (v203 >= 0x7FFFFFFFFFFFFFF8)
                                  v205 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v205 = v204;
                                if (v205)
                                {
                                  v206 = (char *)sub_40FC((uint64_t)(v196 + 222), v205);
                                  v198 = (char *)v196[221];
                                  v201 = (char *)v196[220];
                                }
                                else
                                {
                                  v206 = 0;
                                }
                                v207 = &v206[8 * v202];
                                v208 = &v206[8 * v205];
                                *(_QWORD *)v207 = v197;
                                v200 = v207 + 8;
                                while (v198 != v201)
                                {
                                  v209 = *((_QWORD *)v198 - 1);
                                  v198 -= 8;
                                  *((_QWORD *)v207 - 1) = v209;
                                  v207 -= 8;
                                }
                                v196[220] = v207;
                                v196[221] = v200;
                                v196[222] = v208;
                                if (v201)
                                  operator delete(v201);
                              }
                              else
                              {
                                *(_QWORD *)v198 = v197;
                                v200 = v198 + 8;
                              }
                              v196[221] = v200;
                              if (!*(_DWORD *)(v3 + 48))
                              {
                                v210 = *(_QWORD **)a1[1];
                                v211 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
                                v212 = (char *)v210[224];
                                v213 = v210[225];
                                if ((unint64_t)v212 >= v213)
                                {
                                  v215 = (char *)v210[223];
                                  v216 = (v212 - v215) >> 3;
                                  if ((unint64_t)(v216 + 1) >> 61)
                                    goto LABEL_543;
                                  v217 = v213 - (_QWORD)v215;
                                  v218 = (uint64_t)(v213 - (_QWORD)v215) >> 2;
                                  if (v218 <= v216 + 1)
                                    v218 = v216 + 1;
                                  if (v217 >= 0x7FFFFFFFFFFFFFF8)
                                    v219 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v219 = v218;
                                  if (v219)
                                  {
                                    v220 = (char *)sub_40FC((uint64_t)(v210 + 225), v219);
                                    v212 = (char *)v210[224];
                                    v215 = (char *)v210[223];
                                  }
                                  else
                                  {
                                    v220 = 0;
                                  }
                                  v221 = &v220[8 * v216];
                                  v222 = &v220[8 * v219];
                                  *(_QWORD *)v221 = v211;
                                  v214 = v221 + 8;
                                  while (v212 != v215)
                                  {
                                    v223 = *((_QWORD *)v212 - 1);
                                    v212 -= 8;
                                    *((_QWORD *)v221 - 1) = v223;
                                    v221 -= 8;
                                  }
                                  v210[223] = v221;
                                  v210[224] = v214;
                                  v210[225] = v222;
                                  if (v215)
                                    operator delete(v215);
                                }
                                else
                                {
                                  *(_QWORD *)v212 = v211;
                                  v214 = v212 + 8;
                                }
                                v210[224] = v214;
                                if (!*(_DWORD *)(v3 + 48))
                                {
                                  v224 = *(_QWORD **)a1[1];
                                  v225 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
                                  v226 = (char *)v224[227];
                                  v227 = v224[228];
                                  if ((unint64_t)v226 >= v227)
                                  {
                                    v229 = (char *)v224[226];
                                    v230 = (v226 - v229) >> 3;
                                    if ((unint64_t)(v230 + 1) >> 61)
                                      goto LABEL_543;
                                    v231 = v227 - (_QWORD)v229;
                                    v232 = (uint64_t)(v227 - (_QWORD)v229) >> 2;
                                    if (v232 <= v230 + 1)
                                      v232 = v230 + 1;
                                    if (v231 >= 0x7FFFFFFFFFFFFFF8)
                                      v233 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v233 = v232;
                                    if (v233)
                                    {
                                      v234 = (char *)sub_40FC((uint64_t)(v224 + 228), v233);
                                      v226 = (char *)v224[227];
                                      v229 = (char *)v224[226];
                                    }
                                    else
                                    {
                                      v234 = 0;
                                    }
                                    v235 = &v234[8 * v230];
                                    v236 = &v234[8 * v233];
                                    *(_QWORD *)v235 = v225;
                                    v228 = v235 + 8;
                                    while (v226 != v229)
                                    {
                                      v237 = *((_QWORD *)v226 - 1);
                                      v226 -= 8;
                                      *((_QWORD *)v235 - 1) = v237;
                                      v235 -= 8;
                                    }
                                    v224[226] = v235;
                                    v224[227] = v228;
                                    v224[228] = v236;
                                    if (v229)
                                      operator delete(v229);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v226 = v225;
                                    v228 = v226 + 8;
                                  }
                                  v224[227] = v228;
                                  if (!*(_DWORD *)(v3 + 48))
                                  {
                                    v238 = *(_QWORD **)a1[1];
                                    v239 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
                                    v240 = (char *)v238[230];
                                    v241 = v238[231];
                                    if ((unint64_t)v240 >= v241)
                                    {
                                      v243 = (char *)v238[229];
                                      v244 = (v240 - v243) >> 3;
                                      if ((unint64_t)(v244 + 1) >> 61)
                                        goto LABEL_543;
                                      v245 = v241 - (_QWORD)v243;
                                      v246 = (uint64_t)(v241 - (_QWORD)v243) >> 2;
                                      if (v246 <= v244 + 1)
                                        v246 = v244 + 1;
                                      if (v245 >= 0x7FFFFFFFFFFFFFF8)
                                        v247 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v247 = v246;
                                      if (v247)
                                      {
                                        v248 = (char *)sub_40FC((uint64_t)(v238 + 231), v247);
                                        v240 = (char *)v238[230];
                                        v243 = (char *)v238[229];
                                      }
                                      else
                                      {
                                        v248 = 0;
                                      }
                                      v249 = &v248[8 * v244];
                                      v250 = &v248[8 * v247];
                                      *(_QWORD *)v249 = v239;
                                      v242 = v249 + 8;
                                      while (v240 != v243)
                                      {
                                        v251 = *((_QWORD *)v240 - 1);
                                        v240 -= 8;
                                        *((_QWORD *)v249 - 1) = v251;
                                        v249 -= 8;
                                      }
                                      v238[229] = v249;
                                      v238[230] = v242;
                                      v238[231] = v250;
                                      if (v243)
                                        operator delete(v243);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v240 = v239;
                                      v242 = v240 + 8;
                                    }
                                    v238[230] = v242;
                                    if (!*(_DWORD *)(v3 + 48))
                                    {
                                      v252 = *(_QWORD **)a1[1];
                                      v253 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
                                      v254 = (char *)v252[233];
                                      v255 = v252[234];
                                      if ((unint64_t)v254 >= v255)
                                      {
                                        v257 = (char *)v252[232];
                                        v258 = (v254 - v257) >> 3;
                                        if ((unint64_t)(v258 + 1) >> 61)
                                          goto LABEL_543;
                                        v259 = v255 - (_QWORD)v257;
                                        v260 = (uint64_t)(v255 - (_QWORD)v257) >> 2;
                                        if (v260 <= v258 + 1)
                                          v260 = v258 + 1;
                                        if (v259 >= 0x7FFFFFFFFFFFFFF8)
                                          v261 = 0x1FFFFFFFFFFFFFFFLL;
                                        else
                                          v261 = v260;
                                        if (v261)
                                        {
                                          v262 = (char *)sub_40FC((uint64_t)(v252 + 234), v261);
                                          v254 = (char *)v252[233];
                                          v257 = (char *)v252[232];
                                        }
                                        else
                                        {
                                          v262 = 0;
                                        }
                                        v263 = &v262[8 * v258];
                                        v264 = &v262[8 * v261];
                                        *(_QWORD *)v263 = v253;
                                        v256 = v263 + 8;
                                        while (v254 != v257)
                                        {
                                          v265 = *((_QWORD *)v254 - 1);
                                          v254 -= 8;
                                          *((_QWORD *)v263 - 1) = v265;
                                          v263 -= 8;
                                        }
                                        v252[232] = v263;
                                        v252[233] = v256;
                                        v252[234] = v264;
                                        if (v257)
                                          operator delete(v257);
                                      }
                                      else
                                      {
                                        *(_QWORD *)v254 = v253;
                                        v256 = v254 + 8;
                                      }
                                      v252[233] = v256;
                                      if (!*(_DWORD *)(v3 + 48))
                                      {
                                        v266 = *(_QWORD **)a1[1];
                                        v267 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
                                        v268 = (char *)v266[236];
                                        v269 = v266[237];
                                        if ((unint64_t)v268 >= v269)
                                        {
                                          v271 = (char *)v266[235];
                                          v272 = (v268 - v271) >> 3;
                                          if ((unint64_t)(v272 + 1) >> 61)
                                            goto LABEL_543;
                                          v273 = v269 - (_QWORD)v271;
                                          v274 = (uint64_t)(v269 - (_QWORD)v271) >> 2;
                                          if (v274 <= v272 + 1)
                                            v274 = v272 + 1;
                                          if (v273 >= 0x7FFFFFFFFFFFFFF8)
                                            v275 = 0x1FFFFFFFFFFFFFFFLL;
                                          else
                                            v275 = v274;
                                          if (v275)
                                          {
                                            v276 = (char *)sub_40FC((uint64_t)(v266 + 237), v275);
                                            v268 = (char *)v266[236];
                                            v271 = (char *)v266[235];
                                          }
                                          else
                                          {
                                            v276 = 0;
                                          }
                                          v277 = &v276[8 * v272];
                                          v278 = &v276[8 * v275];
                                          *(_QWORD *)v277 = v267;
                                          v270 = v277 + 8;
                                          while (v268 != v271)
                                          {
                                            v279 = *((_QWORD *)v268 - 1);
                                            v268 -= 8;
                                            *((_QWORD *)v277 - 1) = v279;
                                            v277 -= 8;
                                          }
                                          v266[235] = v277;
                                          v266[236] = v270;
                                          v266[237] = v278;
                                          if (v271)
                                            operator delete(v271);
                                        }
                                        else
                                        {
                                          *(_QWORD *)v268 = v267;
                                          v270 = v268 + 8;
                                        }
                                        v266[236] = v270;
                                        if (!*(_DWORD *)(v3 + 48))
                                        {
                                          v280 = *(_QWORD **)a1[1];
                                          v281 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
                                          v282 = (char *)v280[239];
                                          v283 = v280[240];
                                          if ((unint64_t)v282 >= v283)
                                          {
                                            v285 = (char *)v280[238];
                                            v286 = (v282 - v285) >> 3;
                                            if ((unint64_t)(v286 + 1) >> 61)
                                              goto LABEL_543;
                                            v287 = v283 - (_QWORD)v285;
                                            v288 = (uint64_t)(v283 - (_QWORD)v285) >> 2;
                                            if (v288 <= v286 + 1)
                                              v288 = v286 + 1;
                                            if (v287 >= 0x7FFFFFFFFFFFFFF8)
                                              v289 = 0x1FFFFFFFFFFFFFFFLL;
                                            else
                                              v289 = v288;
                                            if (v289)
                                            {
                                              v290 = (char *)sub_40FC((uint64_t)(v280 + 240), v289);
                                              v282 = (char *)v280[239];
                                              v285 = (char *)v280[238];
                                            }
                                            else
                                            {
                                              v290 = 0;
                                            }
                                            v291 = &v290[8 * v286];
                                            v292 = &v290[8 * v289];
                                            *(_QWORD *)v291 = v281;
                                            v284 = v291 + 8;
                                            while (v282 != v285)
                                            {
                                              v293 = *((_QWORD *)v282 - 1);
                                              v282 -= 8;
                                              *((_QWORD *)v291 - 1) = v293;
                                              v291 -= 8;
                                            }
                                            v280[238] = v291;
                                            v280[239] = v284;
                                            v280[240] = v292;
                                            if (v285)
                                              operator delete(v285);
                                          }
                                          else
                                          {
                                            *(_QWORD *)v282 = v281;
                                            v284 = v282 + 8;
                                          }
                                          v280[239] = v284;
                                          if (!*(_DWORD *)(v3 + 48))
                                          {
                                            v294 = *(_QWORD **)a1[1];
                                            v295 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
                                            v296 = (char *)v294[242];
                                            v297 = v294[243];
                                            if ((unint64_t)v296 >= v297)
                                            {
                                              v299 = (char *)v294[241];
                                              v300 = (v296 - v299) >> 3;
                                              if ((unint64_t)(v300 + 1) >> 61)
                                                goto LABEL_543;
                                              v301 = v297 - (_QWORD)v299;
                                              v302 = (uint64_t)(v297 - (_QWORD)v299) >> 2;
                                              if (v302 <= v300 + 1)
                                                v302 = v300 + 1;
                                              if (v301 >= 0x7FFFFFFFFFFFFFF8)
                                                v303 = 0x1FFFFFFFFFFFFFFFLL;
                                              else
                                                v303 = v302;
                                              if (v303)
                                              {
                                                v304 = (char *)sub_40FC((uint64_t)(v294 + 243), v303);
                                                v296 = (char *)v294[242];
                                                v299 = (char *)v294[241];
                                              }
                                              else
                                              {
                                                v304 = 0;
                                              }
                                              v305 = &v304[8 * v300];
                                              v306 = &v304[8 * v303];
                                              *(_QWORD *)v305 = v295;
                                              v298 = v305 + 8;
                                              while (v296 != v299)
                                              {
                                                v307 = *((_QWORD *)v296 - 1);
                                                v296 -= 8;
                                                *((_QWORD *)v305 - 1) = v307;
                                                v305 -= 8;
                                              }
                                              v294[241] = v305;
                                              v294[242] = v298;
                                              v294[243] = v306;
                                              if (v299)
                                                operator delete(v299);
                                            }
                                            else
                                            {
                                              *(_QWORD *)v296 = v295;
                                              v298 = v296 + 8;
                                            }
                                            v294[242] = v298;
                                            if (!*(_DWORD *)(v3 + 48))
                                            {
                                              v308 = *(_QWORD **)a1[1];
                                              v309 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
                                              v310 = (char *)v308[245];
                                              v311 = v308[246];
                                              if ((unint64_t)v310 >= v311)
                                              {
                                                v313 = (char *)v308[244];
                                                v314 = (v310 - v313) >> 3;
                                                if ((unint64_t)(v314 + 1) >> 61)
                                                  goto LABEL_543;
                                                v315 = v311 - (_QWORD)v313;
                                                v316 = (uint64_t)(v311 - (_QWORD)v313) >> 2;
                                                if (v316 <= v314 + 1)
                                                  v316 = v314 + 1;
                                                if (v315 >= 0x7FFFFFFFFFFFFFF8)
                                                  v317 = 0x1FFFFFFFFFFFFFFFLL;
                                                else
                                                  v317 = v316;
                                                if (v317)
                                                {
                                                  v318 = (char *)sub_40FC((uint64_t)(v308 + 246), v317);
                                                  v310 = (char *)v308[245];
                                                  v313 = (char *)v308[244];
                                                }
                                                else
                                                {
                                                  v318 = 0;
                                                }
                                                v319 = &v318[8 * v314];
                                                v320 = &v318[8 * v317];
                                                *(_QWORD *)v319 = v309;
                                                v312 = v319 + 8;
                                                while (v310 != v313)
                                                {
                                                  v321 = *((_QWORD *)v310 - 1);
                                                  v310 -= 8;
                                                  *((_QWORD *)v319 - 1) = v321;
                                                  v319 -= 8;
                                                }
                                                v308[244] = v319;
                                                v308[245] = v312;
                                                v308[246] = v320;
                                                if (v313)
                                                  operator delete(v313);
                                              }
                                              else
                                              {
                                                *(_QWORD *)v310 = v309;
                                                v312 = v310 + 8;
                                              }
                                              v308[245] = v312;
                                              if (!*(_DWORD *)(v3 + 48))
                                              {
                                                v322 = *(_QWORD **)a1[1];
                                                v323 = *(_WORD *)(a1[2] + 64) & 0x7FFF;
                                                v324 = (char *)v322[248];
                                                v325 = v322[249];
                                                if ((unint64_t)v324 >= v325)
                                                {
                                                  v327 = (char *)v322[247];
                                                  v328 = (v324 - v327) >> 3;
                                                  if ((unint64_t)(v328 + 1) >> 61)
                                                    goto LABEL_543;
                                                  v329 = v325 - (_QWORD)v327;
                                                  v330 = (uint64_t)(v325 - (_QWORD)v327) >> 2;
                                                  if (v330 <= v328 + 1)
                                                    v330 = v328 + 1;
                                                  if (v329 >= 0x7FFFFFFFFFFFFFF8)
                                                    v331 = 0x1FFFFFFFFFFFFFFFLL;
                                                  else
                                                    v331 = v330;
                                                  if (v331)
                                                  {
                                                    v332 = (char *)sub_40FC((uint64_t)(v322 + 249), v331);
                                                    v324 = (char *)v322[248];
                                                    v327 = (char *)v322[247];
                                                  }
                                                  else
                                                  {
                                                    v332 = 0;
                                                  }
                                                  v333 = &v332[8 * v328];
                                                  v334 = &v332[8 * v331];
                                                  *(_QWORD *)v333 = v323;
                                                  v326 = v333 + 8;
                                                  while (v324 != v327)
                                                  {
                                                    v335 = *((_QWORD *)v324 - 1);
                                                    v324 -= 8;
                                                    *((_QWORD *)v333 - 1) = v335;
                                                    v333 -= 8;
                                                  }
                                                  v322[247] = v333;
                                                  v322[248] = v326;
                                                  v322[249] = v334;
                                                  if (v327)
                                                    operator delete(v327);
                                                }
                                                else
                                                {
                                                  *(_QWORD *)v324 = v323;
                                                  v326 = v324 + 8;
                                                }
                                                v322[248] = v326;
                                                if (!*(_DWORD *)(v3 + 48))
                                                {
                                                  v336 = *(_QWORD **)a1[1];
                                                  v337 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
                                                  v338 = (char *)v336[251];
                                                  v339 = v336[252];
                                                  if ((unint64_t)v338 >= v339)
                                                  {
                                                    v341 = (char *)v336[250];
                                                    v342 = (v338 - v341) >> 3;
                                                    if ((unint64_t)(v342 + 1) >> 61)
                                                      goto LABEL_543;
                                                    v343 = v339 - (_QWORD)v341;
                                                    v344 = (uint64_t)(v339 - (_QWORD)v341) >> 2;
                                                    if (v344 <= v342 + 1)
                                                      v344 = v342 + 1;
                                                    if (v343 >= 0x7FFFFFFFFFFFFFF8)
                                                      v345 = 0x1FFFFFFFFFFFFFFFLL;
                                                    else
                                                      v345 = v344;
                                                    if (v345)
                                                    {
                                                      v346 = (char *)sub_40FC((uint64_t)(v336 + 252), v345);
                                                      v338 = (char *)v336[251];
                                                      v341 = (char *)v336[250];
                                                    }
                                                    else
                                                    {
                                                      v346 = 0;
                                                    }
                                                    v347 = &v346[8 * v342];
                                                    v348 = &v346[8 * v345];
                                                    *(_QWORD *)v347 = v337;
                                                    v340 = v347 + 8;
                                                    while (v338 != v341)
                                                    {
                                                      v349 = *((_QWORD *)v338 - 1);
                                                      v338 -= 8;
                                                      *((_QWORD *)v347 - 1) = v349;
                                                      v347 -= 8;
                                                    }
                                                    v336[250] = v347;
                                                    v336[251] = v340;
                                                    v336[252] = v348;
                                                    if (v341)
                                                      operator delete(v341);
                                                  }
                                                  else
                                                  {
                                                    *(_QWORD *)v338 = v337;
                                                    v340 = v338 + 8;
                                                  }
                                                  v336[251] = v340;
                                                  if (!*(_DWORD *)(v3 + 48))
                                                  {
                                                    v350 = *(_QWORD **)a1[1];
                                                    v351 = *(_WORD *)(a1[2] + 74) & 0x7FFF;
                                                    v352 = (char *)v350[254];
                                                    v353 = v350[255];
                                                    if ((unint64_t)v352 >= v353)
                                                    {
                                                      v355 = (char *)v350[253];
                                                      v356 = (v352 - v355) >> 3;
                                                      if ((unint64_t)(v356 + 1) >> 61)
                                                        goto LABEL_543;
                                                      v357 = v353 - (_QWORD)v355;
                                                      v358 = (uint64_t)(v353 - (_QWORD)v355) >> 2;
                                                      if (v358 <= v356 + 1)
                                                        v358 = v356 + 1;
                                                      if (v357 >= 0x7FFFFFFFFFFFFFF8)
                                                        v359 = 0x1FFFFFFFFFFFFFFFLL;
                                                      else
                                                        v359 = v358;
                                                      if (v359)
                                                      {
                                                        v360 = (char *)sub_40FC((uint64_t)(v350 + 255), v359);
                                                        v352 = (char *)v350[254];
                                                        v355 = (char *)v350[253];
                                                      }
                                                      else
                                                      {
                                                        v360 = 0;
                                                      }
                                                      v361 = &v360[8 * v356];
                                                      v362 = &v360[8 * v359];
                                                      *(_QWORD *)v361 = v351;
                                                      v354 = v361 + 8;
                                                      while (v352 != v355)
                                                      {
                                                        v363 = *((_QWORD *)v352 - 1);
                                                        v352 -= 8;
                                                        *((_QWORD *)v361 - 1) = v363;
                                                        v361 -= 8;
                                                      }
                                                      v350[253] = v361;
                                                      v350[254] = v354;
                                                      v350[255] = v362;
                                                      if (v355)
                                                        operator delete(v355);
                                                    }
                                                    else
                                                    {
                                                      *(_QWORD *)v352 = v351;
                                                      v354 = v352 + 8;
                                                    }
                                                    v350[254] = v354;
                                                    if (!*(_DWORD *)(v3 + 48))
                                                    {
                                                      v364 = *(_QWORD **)a1[1];
                                                      v365 = *(_WORD *)(a1[2] + 66) & 0x7FFF;
                                                      v366 = (char *)v364[257];
                                                      v367 = v364[258];
                                                      if ((unint64_t)v366 >= v367)
                                                      {
                                                        v369 = (char *)v364[256];
                                                        v370 = (v366 - v369) >> 3;
                                                        if ((unint64_t)(v370 + 1) >> 61)
                                                          goto LABEL_543;
                                                        v371 = v367 - (_QWORD)v369;
                                                        v372 = (uint64_t)(v367 - (_QWORD)v369) >> 2;
                                                        if (v372 <= v370 + 1)
                                                          v372 = v370 + 1;
                                                        if (v371 >= 0x7FFFFFFFFFFFFFF8)
                                                          v373 = 0x1FFFFFFFFFFFFFFFLL;
                                                        else
                                                          v373 = v372;
                                                        if (v373)
                                                        {
                                                          v374 = (char *)sub_40FC((uint64_t)(v364 + 258), v373);
                                                          v366 = (char *)v364[257];
                                                          v369 = (char *)v364[256];
                                                        }
                                                        else
                                                        {
                                                          v374 = 0;
                                                        }
                                                        v375 = &v374[8 * v370];
                                                        v376 = &v374[8 * v373];
                                                        *(_QWORD *)v375 = v365;
                                                        v368 = v375 + 8;
                                                        while (v366 != v369)
                                                        {
                                                          v377 = *((_QWORD *)v366 - 1);
                                                          v366 -= 8;
                                                          *((_QWORD *)v375 - 1) = v377;
                                                          v375 -= 8;
                                                        }
                                                        v364[256] = v375;
                                                        v364[257] = v368;
                                                        v364[258] = v376;
                                                        if (v369)
                                                          operator delete(v369);
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)v366 = v365;
                                                        v368 = v366 + 8;
                                                      }
                                                      v364[257] = v368;
                                                      if (!*(_DWORD *)(v3 + 48))
                                                      {
                                                        v378 = *(_QWORD **)a1[1];
                                                        v379 = *(_WORD *)(a1[2] + 76) & 0x7FFF;
                                                        v380 = (char *)v378[260];
                                                        v381 = v378[261];
                                                        if ((unint64_t)v380 >= v381)
                                                        {
                                                          v383 = (char *)v378[259];
                                                          v384 = (v380 - v383) >> 3;
                                                          if ((unint64_t)(v384 + 1) >> 61)
                                                            goto LABEL_543;
                                                          v385 = v381 - (_QWORD)v383;
                                                          v386 = (uint64_t)(v381 - (_QWORD)v383) >> 2;
                                                          if (v386 <= v384 + 1)
                                                            v386 = v384 + 1;
                                                          if (v385 >= 0x7FFFFFFFFFFFFFF8)
                                                            v387 = 0x1FFFFFFFFFFFFFFFLL;
                                                          else
                                                            v387 = v386;
                                                          if (v387)
                                                          {
                                                            v388 = (char *)sub_40FC((uint64_t)(v378 + 261), v387);
                                                            v380 = (char *)v378[260];
                                                            v383 = (char *)v378[259];
                                                          }
                                                          else
                                                          {
                                                            v388 = 0;
                                                          }
                                                          v389 = &v388[8 * v384];
                                                          v390 = &v388[8 * v387];
                                                          *(_QWORD *)v389 = v379;
                                                          v382 = v389 + 8;
                                                          while (v380 != v383)
                                                          {
                                                            v391 = *((_QWORD *)v380 - 1);
                                                            v380 -= 8;
                                                            *((_QWORD *)v389 - 1) = v391;
                                                            v389 -= 8;
                                                          }
                                                          v378[259] = v389;
                                                          v378[260] = v382;
                                                          v378[261] = v390;
                                                          if (v383)
                                                            operator delete(v383);
                                                        }
                                                        else
                                                        {
                                                          *(_QWORD *)v380 = v379;
                                                          v382 = v380 + 8;
                                                        }
                                                        v378[260] = v382;
                                                        if (!*(_DWORD *)(v3 + 48))
                                                        {
                                                          v392 = *(_QWORD **)a1[1];
                                                          v393 = *(_WORD *)(a1[2] + 68) & 0x7FFF;
                                                          v394 = (char *)v392[263];
                                                          v395 = v392[264];
                                                          if ((unint64_t)v394 >= v395)
                                                          {
                                                            v397 = (char *)v392[262];
                                                            v398 = (v394 - v397) >> 3;
                                                            if ((unint64_t)(v398 + 1) >> 61)
                                                              goto LABEL_543;
                                                            v399 = v395 - (_QWORD)v397;
                                                            v400 = (uint64_t)(v395 - (_QWORD)v397) >> 2;
                                                            if (v400 <= v398 + 1)
                                                              v400 = v398 + 1;
                                                            if (v399 >= 0x7FFFFFFFFFFFFFF8)
                                                              v401 = 0x1FFFFFFFFFFFFFFFLL;
                                                            else
                                                              v401 = v400;
                                                            if (v401)
                                                            {
                                                              v402 = (char *)sub_40FC((uint64_t)(v392 + 264), v401);
                                                              v394 = (char *)v392[263];
                                                              v397 = (char *)v392[262];
                                                            }
                                                            else
                                                            {
                                                              v402 = 0;
                                                            }
                                                            v403 = &v402[8 * v398];
                                                            v404 = &v402[8 * v401];
                                                            *(_QWORD *)v403 = v393;
                                                            v396 = v403 + 8;
                                                            while (v394 != v397)
                                                            {
                                                              v405 = *((_QWORD *)v394 - 1);
                                                              v394 -= 8;
                                                              *((_QWORD *)v403 - 1) = v405;
                                                              v403 -= 8;
                                                            }
                                                            v392[262] = v403;
                                                            v392[263] = v396;
                                                            v392[264] = v404;
                                                            if (v397)
                                                              operator delete(v397);
                                                          }
                                                          else
                                                          {
                                                            *(_QWORD *)v394 = v393;
                                                            v396 = v394 + 8;
                                                          }
                                                          v392[263] = v396;
                                                          if (!*(_DWORD *)(v3 + 48))
                                                          {
                                                            v406 = *(_QWORD **)a1[1];
                                                            v407 = *(_WORD *)(a1[2] + 78) & 0x7FFF;
                                                            v408 = (char *)v406[266];
                                                            v409 = v406[267];
                                                            if ((unint64_t)v408 >= v409)
                                                            {
                                                              v411 = (char *)v406[265];
                                                              v412 = (v408 - v411) >> 3;
                                                              if ((unint64_t)(v412 + 1) >> 61)
                                                                goto LABEL_543;
                                                              v413 = v409 - (_QWORD)v411;
                                                              v414 = (uint64_t)(v409 - (_QWORD)v411) >> 2;
                                                              if (v414 <= v412 + 1)
                                                                v414 = v412 + 1;
                                                              if (v413 >= 0x7FFFFFFFFFFFFFF8)
                                                                v415 = 0x1FFFFFFFFFFFFFFFLL;
                                                              else
                                                                v415 = v414;
                                                              if (v415)
                                                              {
                                                                v416 = (char *)sub_40FC((uint64_t)(v406 + 267), v415);
                                                                v408 = (char *)v406[266];
                                                                v411 = (char *)v406[265];
                                                              }
                                                              else
                                                              {
                                                                v416 = 0;
                                                              }
                                                              v417 = &v416[8 * v412];
                                                              v418 = &v416[8 * v415];
                                                              *(_QWORD *)v417 = v407;
                                                              v410 = v417 + 8;
                                                              while (v408 != v411)
                                                              {
                                                                v419 = *((_QWORD *)v408 - 1);
                                                                v408 -= 8;
                                                                *((_QWORD *)v417 - 1) = v419;
                                                                v417 -= 8;
                                                              }
                                                              v406[265] = v417;
                                                              v406[266] = v410;
                                                              v406[267] = v418;
                                                              if (v411)
                                                                operator delete(v411);
                                                            }
                                                            else
                                                            {
                                                              *(_QWORD *)v408 = v407;
                                                              v410 = v408 + 8;
                                                            }
                                                            v406[266] = v410;
                                                            if (!*(_DWORD *)(v3 + 48))
                                                            {
                                                              v420 = *(_QWORD **)a1[1];
                                                              v421 = *(_WORD *)(a1[2] + 70) & 0x7FFF;
                                                              v422 = (char *)v420[269];
                                                              v423 = v420[270];
                                                              if ((unint64_t)v422 >= v423)
                                                              {
                                                                v425 = (char *)v420[268];
                                                                v426 = (v422 - v425) >> 3;
                                                                if ((unint64_t)(v426 + 1) >> 61)
                                                                  goto LABEL_543;
                                                                v427 = v423 - (_QWORD)v425;
                                                                v428 = (uint64_t)(v423 - (_QWORD)v425) >> 2;
                                                                if (v428 <= v426 + 1)
                                                                  v428 = v426 + 1;
                                                                if (v427 >= 0x7FFFFFFFFFFFFFF8)
                                                                  v429 = 0x1FFFFFFFFFFFFFFFLL;
                                                                else
                                                                  v429 = v428;
                                                                if (v429)
                                                                {
                                                                  v430 = (char *)sub_40FC((uint64_t)(v420 + 270), v429);
                                                                  v422 = (char *)v420[269];
                                                                  v425 = (char *)v420[268];
                                                                }
                                                                else
                                                                {
                                                                  v430 = 0;
                                                                }
                                                                v431 = &v430[8 * v426];
                                                                v432 = &v430[8 * v429];
                                                                *(_QWORD *)v431 = v421;
                                                                v424 = v431 + 8;
                                                                while (v422 != v425)
                                                                {
                                                                  v433 = *((_QWORD *)v422 - 1);
                                                                  v422 -= 8;
                                                                  *((_QWORD *)v431 - 1) = v433;
                                                                  v431 -= 8;
                                                                }
                                                                v420[268] = v431;
                                                                v420[269] = v424;
                                                                v420[270] = v432;
                                                                if (v425)
                                                                  operator delete(v425);
                                                              }
                                                              else
                                                              {
                                                                *(_QWORD *)v422 = v421;
                                                                v424 = v422 + 8;
                                                              }
                                                              v420[269] = v424;
                                                              if (!*(_DWORD *)(v3 + 48))
                                                              {
                                                                v434 = *(_QWORD **)a1[1];
                                                                v435 = *(_WORD *)(a1[2] + 80) & 0x7FFF;
                                                                v436 = (char *)v434[272];
                                                                v437 = v434[273];
                                                                if ((unint64_t)v436 >= v437)
                                                                {
                                                                  v439 = (char *)v434[271];
                                                                  v440 = (v436 - v439) >> 3;
                                                                  if ((unint64_t)(v440 + 1) >> 61)
                                                                    goto LABEL_543;
                                                                  v441 = v437 - (_QWORD)v439;
                                                                  v442 = (uint64_t)(v437 - (_QWORD)v439) >> 2;
                                                                  if (v442 <= v440 + 1)
                                                                    v442 = v440 + 1;
                                                                  if (v441 >= 0x7FFFFFFFFFFFFFF8)
                                                                    v443 = 0x1FFFFFFFFFFFFFFFLL;
                                                                  else
                                                                    v443 = v442;
                                                                  if (v443)
                                                                  {
                                                                    v444 = (char *)sub_40FC((uint64_t)(v434 + 273), v443);
                                                                    v436 = (char *)v434[272];
                                                                    v439 = (char *)v434[271];
                                                                  }
                                                                  else
                                                                  {
                                                                    v444 = 0;
                                                                  }
                                                                  v445 = &v444[8 * v440];
                                                                  v446 = &v444[8 * v443];
                                                                  *(_QWORD *)v445 = v435;
                                                                  v438 = v445 + 8;
                                                                  while (v436 != v439)
                                                                  {
                                                                    v447 = *((_QWORD *)v436 - 1);
                                                                    v436 -= 8;
                                                                    *((_QWORD *)v445 - 1) = v447;
                                                                    v445 -= 8;
                                                                  }
                                                                  v434[271] = v445;
                                                                  v434[272] = v438;
                                                                  v434[273] = v446;
                                                                  if (v439)
                                                                    operator delete(v439);
                                                                }
                                                                else
                                                                {
                                                                  *(_QWORD *)v436 = v435;
                                                                  v438 = v436 + 8;
                                                                }
                                                                v434[272] = v438;
                                                                if (!*(_DWORD *)(v3 + 48))
                                                                {
                                                                  v448 = a1[2];
                                                                  v449 = *(_QWORD **)a1[1];
                                                                  v450 = *(_WORD *)(v448 + 72) & 0x7FFF;
                                                                  v451 = (char *)v449[275];
                                                                  v452 = v449[276];
                                                                  if ((unint64_t)v451 < v452)
                                                                  {
                                                                    *(_QWORD *)v451 = v450;
                                                                    v453 = v451 + 8;
LABEL_550:
                                                                    v449[275] = v453;
                                                                    goto LABEL_551;
                                                                  }
                                                                  v454 = (char *)v449[274];
                                                                  v455 = (v451 - v454) >> 3;
                                                                  if (!((unint64_t)(v455 + 1) >> 61))
                                                                  {
                                                                    v456 = v452 - (_QWORD)v454;
                                                                    v457 = (uint64_t)(v452 - (_QWORD)v454) >> 2;
                                                                    if (v457 <= v455 + 1)
                                                                      v457 = v455 + 1;
                                                                    if (v456 >= 0x7FFFFFFFFFFFFFF8)
                                                                      v458 = 0x1FFFFFFFFFFFFFFFLL;
                                                                    else
                                                                      v458 = v457;
                                                                    if (v458)
                                                                    {
                                                                      v459 = (char *)sub_40FC((uint64_t)(v449 + 276), v458);
                                                                      v451 = (char *)v449[275];
                                                                      v454 = (char *)v449[274];
                                                                    }
                                                                    else
                                                                    {
                                                                      v459 = 0;
                                                                    }
                                                                    v460 = &v459[8 * v455];
                                                                    v461 = &v459[8 * v458];
                                                                    *(_QWORD *)v460 = v450;
                                                                    v453 = v460 + 8;
                                                                    while (v451 != v454)
                                                                    {
                                                                      v462 = *((_QWORD *)v451 - 1);
                                                                      v451 -= 8;
                                                                      *((_QWORD *)v460 - 1) = v462;
                                                                      v460 -= 8;
                                                                    }
                                                                    v449[274] = v460;
                                                                    v449[275] = v453;
                                                                    v449[276] = v461;
                                                                    if (v454)
                                                                      operator delete(v454);
                                                                    goto LABEL_550;
                                                                  }
LABEL_543:
                                                                  sub_4074();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_551:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v11 = (_QWORD *)a1[1];
    v10 = (_WORD *)a1[2];
    v12 = (_QWORD *)*v11;
    *(_QWORD *)(v12[182] - 8) += v10[13] & 0x7FFF;
    *(_QWORD *)(v12[185] - 8) += v10[9] & 0x7FFF;
    *(_QWORD *)(v12[188] - 8) += v10[14] & 0x7FFF;
    *(_QWORD *)(v12[191] - 8) += v10[10] & 0x7FFF;
    *(_QWORD *)(v12[194] - 8) += v10[15] & 0x7FFF;
    *(_QWORD *)(v12[197] - 8) += v10[11] & 0x7FFF;
    *(_QWORD *)(v12[200] - 8) += v10[16] & 0x7FFF;
    *(_QWORD *)(v12[203] - 8) += v10[12] & 0x7FFF;
    *(_QWORD *)(v12[206] - 8) += v10[21] & 0x7FFF;
    *(_QWORD *)(v12[209] - 8) += v10[17] & 0x7FFF;
    v13 = (_WORD *)a1[2];
    v14 = *(_QWORD **)a1[1];
    *(_QWORD *)(v14[212] - 8) += v13[22] & 0x7FFF;
    *(_QWORD *)(v14[215] - 8) += v13[18] & 0x7FFF;
    *(_QWORD *)(v14[218] - 8) += v13[23] & 0x7FFF;
    *(_QWORD *)(v14[221] - 8) += v13[19] & 0x7FFF;
    *(_QWORD *)(v14[224] - 8) += v13[24] & 0x7FFF;
    *(_QWORD *)(v14[227] - 8) += v13[20] & 0x7FFF;
    *(_QWORD *)(v14[230] - 8) += v13[29] & 0x7FFF;
    *(_QWORD *)(v14[233] - 8) += v13[25] & 0x7FFF;
    *(_QWORD *)(v14[236] - 8) += v13[30] & 0x7FFF;
    *(_QWORD *)(v14[239] - 8) += v13[26] & 0x7FFF;
    v15 = (_WORD *)a1[2];
    v16 = *(_QWORD **)a1[1];
    *(_QWORD *)(v16[242] - 8) += v15[31] & 0x7FFF;
    *(_QWORD *)(v16[245] - 8) += v15[27] & 0x7FFF;
    *(_QWORD *)(v16[248] - 8) += v15[32] & 0x7FFF;
    *(_QWORD *)(v16[251] - 8) += v15[28] & 0x7FFF;
    *(_QWORD *)(v16[254] - 8) += v15[37] & 0x7FFF;
    *(_QWORD *)(v16[257] - 8) += v15[33] & 0x7FFF;
    *(_QWORD *)(v16[260] - 8) += v15[38] & 0x7FFF;
    *(_QWORD *)(v16[263] - 8) += v15[34] & 0x7FFF;
    *(_QWORD *)(v16[266] - 8) += v15[39] & 0x7FFF;
    *(_QWORD *)(v16[269] - 8) += v15[35] & 0x7FFF;
    v17 = a1[2];
    v18 = (_QWORD *)*v11;
    *(_QWORD *)(v18[272] - 8) += *(_WORD *)(v17 + 80) & 0x7FFF;
    *(_QWORD *)(v18[275] - 8) += *(_WORD *)(v17 + 72) & 0x7FFF;
  }
}

void sub_49C50(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  _QWORD *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    if (*(_DWORD *)(v3 + 48))
      goto LABEL_210;
    v5 = *(_QWORD **)a1[1];
    v6 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
    v7 = (char *)v5[131];
    v8 = v5[132];
    if ((unint64_t)v7 >= v8)
    {
      v15 = (char *)v5[130];
      v16 = (v7 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_212;
      v17 = v8 - (_QWORD)v15;
      v18 = (uint64_t)(v8 - (_QWORD)v15) >> 2;
      if (v18 <= v16 + 1)
        v18 = v16 + 1;
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        v20 = (char *)sub_40FC((uint64_t)(v5 + 132), v19);
        v7 = (char *)v5[131];
        v15 = (char *)v5[130];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *(_QWORD *)v21 = v6;
      v9 = v21 + 8;
      while (v7 != v15)
      {
        v23 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v21 - 1) = v23;
        v21 -= 8;
      }
      v5[130] = v21;
      v5[131] = v9;
      v5[132] = v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v7 = v6;
      v9 = v7 + 8;
    }
    v5[131] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v24 = *(_QWORD **)a1[1];
      v25 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v26 = (char *)v24[134];
      v27 = v24[135];
      if ((unint64_t)v26 >= v27)
      {
        v29 = (char *)v24[133];
        v30 = (v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          goto LABEL_212;
        v31 = v27 - (_QWORD)v29;
        v32 = (uint64_t)(v27 - (_QWORD)v29) >> 2;
        if (v32 <= v30 + 1)
          v32 = v30 + 1;
        if (v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
        {
          v34 = (char *)sub_40FC((uint64_t)(v24 + 135), v33);
          v26 = (char *)v24[134];
          v29 = (char *)v24[133];
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[8 * v30];
        v36 = &v34[8 * v33];
        *(_QWORD *)v35 = v25;
        v28 = v35 + 8;
        while (v26 != v29)
        {
          v37 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v35 - 1) = v37;
          v35 -= 8;
        }
        v24[133] = v35;
        v24[134] = v28;
        v24[135] = v36;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v26 = v25;
        v28 = v26 + 8;
      }
      v24[134] = v28;
      if (!*(_DWORD *)(v3 + 48))
      {
        v38 = a1[1];
        v39 = *(_QWORD **)v38;
        v40 = *(unsigned __int16 *)(a1[2] + 36);
        v41 = *(char **)(*(_QWORD *)v38 + 1096);
        v42 = *(_QWORD *)(*(_QWORD *)v38 + 1104);
        if ((unint64_t)v41 >= v42)
        {
          v44 = (char *)v39[136];
          v45 = (v41 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            goto LABEL_212;
          v46 = v42 - (_QWORD)v44;
          v47 = (uint64_t)(v42 - (_QWORD)v44) >> 2;
          if (v47 <= v45 + 1)
            v47 = v45 + 1;
          if (v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
          {
            v49 = (char *)sub_40FC((uint64_t)(v39 + 138), v48);
            v41 = (char *)v39[137];
            v44 = (char *)v39[136];
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[8 * v45];
          v51 = &v49[8 * v48];
          *(_QWORD *)v50 = v40;
          v43 = v50 + 8;
          while (v41 != v44)
          {
            v52 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *((_QWORD *)v50 - 1) = v52;
            v50 -= 8;
          }
          v39[136] = v50;
          v39[137] = v43;
          v39[138] = v51;
          if (v44)
            operator delete(v44);
        }
        else
        {
          *(_QWORD *)v41 = v40;
          v43 = v41 + 8;
        }
        v39[137] = v43;
        if (!*(_DWORD *)(v3 + 48))
        {
          v53 = a1[1];
          v54 = *(_QWORD **)v53;
          v55 = *(unsigned __int16 *)(a1[2] + 24);
          v56 = *(char **)(*(_QWORD *)v53 + 1120);
          v57 = *(_QWORD *)(*(_QWORD *)v53 + 1128);
          if ((unint64_t)v56 >= v57)
          {
            v59 = (char *)v54[139];
            v60 = (v56 - v59) >> 3;
            if ((unint64_t)(v60 + 1) >> 61)
              goto LABEL_212;
            v61 = v57 - (_QWORD)v59;
            v62 = (uint64_t)(v57 - (_QWORD)v59) >> 2;
            if (v62 <= v60 + 1)
              v62 = v60 + 1;
            if (v61 >= 0x7FFFFFFFFFFFFFF8)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v62;
            if (v63)
            {
              v64 = (char *)sub_40FC((uint64_t)(v54 + 141), v63);
              v56 = (char *)v54[140];
              v59 = (char *)v54[139];
            }
            else
            {
              v64 = 0;
            }
            v65 = &v64[8 * v60];
            v66 = &v64[8 * v63];
            *(_QWORD *)v65 = v55;
            v58 = v65 + 8;
            while (v56 != v59)
            {
              v67 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *((_QWORD *)v65 - 1) = v67;
              v65 -= 8;
            }
            v54[139] = v65;
            v54[140] = v58;
            v54[141] = v66;
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_QWORD *)v56 = v55;
            v58 = v56 + 8;
          }
          v54[140] = v58;
          if (!*(_DWORD *)(v3 + 48))
          {
            v68 = a1[1];
            v69 = *(_QWORD **)v68;
            v70 = *(unsigned __int16 *)(a1[2] + 30);
            v71 = *(char **)(*(_QWORD *)v68 + 1144);
            v72 = *(_QWORD *)(*(_QWORD *)v68 + 1152);
            if ((unint64_t)v71 >= v72)
            {
              v74 = (char *)v69[142];
              v75 = (v71 - v74) >> 3;
              if ((unint64_t)(v75 + 1) >> 61)
                goto LABEL_212;
              v76 = v72 - (_QWORD)v74;
              v77 = (uint64_t)(v72 - (_QWORD)v74) >> 2;
              if (v77 <= v75 + 1)
                v77 = v75 + 1;
              if (v76 >= 0x7FFFFFFFFFFFFFF8)
                v78 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v78 = v77;
              if (v78)
              {
                v79 = (char *)sub_40FC((uint64_t)(v69 + 144), v78);
                v71 = (char *)v69[143];
                v74 = (char *)v69[142];
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[8 * v75];
              v81 = &v79[8 * v78];
              *(_QWORD *)v80 = v70;
              v73 = v80 + 8;
              while (v71 != v74)
              {
                v82 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *((_QWORD *)v80 - 1) = v82;
                v80 -= 8;
              }
              v69[142] = v80;
              v69[143] = v73;
              v69[144] = v81;
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_QWORD *)v71 = v70;
              v73 = v71 + 8;
            }
            v69[143] = v73;
            if (!*(_DWORD *)(v3 + 48))
            {
              v83 = a1[1];
              v84 = *(_QWORD **)v83;
              v85 = *(unsigned __int16 *)(a1[2] + 18);
              v86 = *(char **)(*(_QWORD *)v83 + 1168);
              v87 = *(_QWORD *)(*(_QWORD *)v83 + 1176);
              if ((unint64_t)v86 >= v87)
              {
                v89 = (char *)v84[145];
                v90 = (v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61)
                  goto LABEL_212;
                v91 = v87 - (_QWORD)v89;
                v92 = (uint64_t)(v87 - (_QWORD)v89) >> 2;
                if (v92 <= v90 + 1)
                  v92 = v90 + 1;
                if (v91 >= 0x7FFFFFFFFFFFFFF8)
                  v93 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v93 = v92;
                if (v93)
                {
                  v94 = (char *)sub_40FC((uint64_t)(v84 + 147), v93);
                  v86 = (char *)v84[146];
                  v89 = (char *)v84[145];
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v94[8 * v90];
                v96 = &v94[8 * v93];
                *(_QWORD *)v95 = v85;
                v88 = v95 + 8;
                while (v86 != v89)
                {
                  v97 = *((_QWORD *)v86 - 1);
                  v86 -= 8;
                  *((_QWORD *)v95 - 1) = v97;
                  v95 -= 8;
                }
                v84[145] = v95;
                v84[146] = v88;
                v84[147] = v96;
                if (v89)
                  operator delete(v89);
              }
              else
              {
                *(_QWORD *)v86 = v85;
                v88 = v86 + 8;
              }
              v84[146] = v88;
              if (!*(_DWORD *)(v3 + 48))
              {
                v98 = a1[1];
                v99 = *(_QWORD **)v98;
                v100 = *(unsigned __int16 *)(a1[2] + 32);
                v101 = *(char **)(*(_QWORD *)v98 + 1192);
                v102 = *(_QWORD *)(*(_QWORD *)v98 + 1200);
                if ((unint64_t)v101 >= v102)
                {
                  v104 = (char *)v99[148];
                  v105 = (v101 - v104) >> 3;
                  if ((unint64_t)(v105 + 1) >> 61)
                    goto LABEL_212;
                  v106 = v102 - (_QWORD)v104;
                  v107 = (uint64_t)(v102 - (_QWORD)v104) >> 2;
                  if (v107 <= v105 + 1)
                    v107 = v105 + 1;
                  if (v106 >= 0x7FFFFFFFFFFFFFF8)
                    v108 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v108 = v107;
                  if (v108)
                  {
                    v109 = (char *)sub_40FC((uint64_t)(v99 + 150), v108);
                    v101 = (char *)v99[149];
                    v104 = (char *)v99[148];
                  }
                  else
                  {
                    v109 = 0;
                  }
                  v110 = &v109[8 * v105];
                  v111 = &v109[8 * v108];
                  *(_QWORD *)v110 = v100;
                  v103 = v110 + 8;
                  while (v101 != v104)
                  {
                    v112 = *((_QWORD *)v101 - 1);
                    v101 -= 8;
                    *((_QWORD *)v110 - 1) = v112;
                    v110 -= 8;
                  }
                  v99[148] = v110;
                  v99[149] = v103;
                  v99[150] = v111;
                  if (v104)
                    operator delete(v104);
                }
                else
                {
                  *(_QWORD *)v101 = v100;
                  v103 = v101 + 8;
                }
                v99[149] = v103;
                if (!*(_DWORD *)(v3 + 48))
                {
                  v113 = a1[1];
                  v114 = *(_QWORD **)v113;
                  v115 = *(unsigned __int16 *)(a1[2] + 20);
                  v116 = *(char **)(*(_QWORD *)v113 + 1216);
                  v117 = *(_QWORD *)(*(_QWORD *)v113 + 1224);
                  if ((unint64_t)v116 >= v117)
                  {
                    v119 = (char *)v114[151];
                    v120 = (v116 - v119) >> 3;
                    if ((unint64_t)(v120 + 1) >> 61)
                      goto LABEL_212;
                    v121 = v117 - (_QWORD)v119;
                    v122 = (uint64_t)(v117 - (_QWORD)v119) >> 2;
                    if (v122 <= v120 + 1)
                      v122 = v120 + 1;
                    if (v121 >= 0x7FFFFFFFFFFFFFF8)
                      v123 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v123 = v122;
                    if (v123)
                    {
                      v124 = (char *)sub_40FC((uint64_t)(v114 + 153), v123);
                      v116 = (char *)v114[152];
                      v119 = (char *)v114[151];
                    }
                    else
                    {
                      v124 = 0;
                    }
                    v125 = &v124[8 * v120];
                    v126 = &v124[8 * v123];
                    *(_QWORD *)v125 = v115;
                    v118 = v125 + 8;
                    while (v116 != v119)
                    {
                      v127 = *((_QWORD *)v116 - 1);
                      v116 -= 8;
                      *((_QWORD *)v125 - 1) = v127;
                      v125 -= 8;
                    }
                    v114[151] = v125;
                    v114[152] = v118;
                    v114[153] = v126;
                    if (v119)
                      operator delete(v119);
                  }
                  else
                  {
                    *(_QWORD *)v116 = v115;
                    v118 = v116 + 8;
                  }
                  v114[152] = v118;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    v128 = a1[1];
                    v129 = *(_QWORD **)v128;
                    v130 = *(unsigned __int16 *)(a1[2] + 38);
                    v131 = *(char **)(*(_QWORD *)v128 + 1240);
                    v132 = *(_QWORD *)(*(_QWORD *)v128 + 1248);
                    if ((unint64_t)v131 >= v132)
                    {
                      v134 = (char *)v129[154];
                      v135 = (v131 - v134) >> 3;
                      if ((unint64_t)(v135 + 1) >> 61)
                        goto LABEL_212;
                      v136 = v132 - (_QWORD)v134;
                      v137 = (uint64_t)(v132 - (_QWORD)v134) >> 2;
                      if (v137 <= v135 + 1)
                        v137 = v135 + 1;
                      if (v136 >= 0x7FFFFFFFFFFFFFF8)
                        v138 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v138 = v137;
                      if (v138)
                      {
                        v139 = (char *)sub_40FC((uint64_t)(v129 + 156), v138);
                        v131 = (char *)v129[155];
                        v134 = (char *)v129[154];
                      }
                      else
                      {
                        v139 = 0;
                      }
                      v140 = &v139[8 * v135];
                      v141 = &v139[8 * v138];
                      *(_QWORD *)v140 = v130;
                      v133 = v140 + 8;
                      while (v131 != v134)
                      {
                        v142 = *((_QWORD *)v131 - 1);
                        v131 -= 8;
                        *((_QWORD *)v140 - 1) = v142;
                        v140 -= 8;
                      }
                      v129[154] = v140;
                      v129[155] = v133;
                      v129[156] = v141;
                      if (v134)
                        operator delete(v134);
                    }
                    else
                    {
                      *(_QWORD *)v131 = v130;
                      v133 = v131 + 8;
                    }
                    v129[155] = v133;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      v143 = a1[1];
                      v144 = *(_QWORD **)v143;
                      v145 = *(unsigned __int16 *)(a1[2] + 26);
                      v146 = *(char **)(*(_QWORD *)v143 + 1264);
                      v147 = *(_QWORD *)(*(_QWORD *)v143 + 1272);
                      if ((unint64_t)v146 >= v147)
                      {
                        v149 = (char *)v144[157];
                        v150 = (v146 - v149) >> 3;
                        if ((unint64_t)(v150 + 1) >> 61)
                          goto LABEL_212;
                        v151 = v147 - (_QWORD)v149;
                        v152 = (uint64_t)(v147 - (_QWORD)v149) >> 2;
                        if (v152 <= v150 + 1)
                          v152 = v150 + 1;
                        if (v151 >= 0x7FFFFFFFFFFFFFF8)
                          v153 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v153 = v152;
                        if (v153)
                        {
                          v154 = (char *)sub_40FC((uint64_t)(v144 + 159), v153);
                          v146 = (char *)v144[158];
                          v149 = (char *)v144[157];
                        }
                        else
                        {
                          v154 = 0;
                        }
                        v155 = &v154[8 * v150];
                        v156 = &v154[8 * v153];
                        *(_QWORD *)v155 = v145;
                        v148 = v155 + 8;
                        while (v146 != v149)
                        {
                          v157 = *((_QWORD *)v146 - 1);
                          v146 -= 8;
                          *((_QWORD *)v155 - 1) = v157;
                          v155 -= 8;
                        }
                        v144[157] = v155;
                        v144[158] = v148;
                        v144[159] = v156;
                        if (v149)
                          operator delete(v149);
                      }
                      else
                      {
                        *(_QWORD *)v146 = v145;
                        v148 = v146 + 8;
                      }
                      v144[158] = v148;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        v158 = a1[1];
                        v159 = *(_QWORD **)v158;
                        v160 = *(unsigned __int16 *)(a1[2] + 34);
                        v161 = *(char **)(*(_QWORD *)v158 + 1288);
                        v162 = *(_QWORD *)(*(_QWORD *)v158 + 1296);
                        if ((unint64_t)v161 >= v162)
                        {
                          v164 = (char *)v159[160];
                          v165 = (v161 - v164) >> 3;
                          if ((unint64_t)(v165 + 1) >> 61)
                            goto LABEL_212;
                          v166 = v162 - (_QWORD)v164;
                          v167 = (uint64_t)(v162 - (_QWORD)v164) >> 2;
                          if (v167 <= v165 + 1)
                            v167 = v165 + 1;
                          if (v166 >= 0x7FFFFFFFFFFFFFF8)
                            v168 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v168 = v167;
                          if (v168)
                          {
                            v169 = (char *)sub_40FC((uint64_t)(v159 + 162), v168);
                            v161 = (char *)v159[161];
                            v164 = (char *)v159[160];
                          }
                          else
                          {
                            v169 = 0;
                          }
                          v170 = &v169[8 * v165];
                          v171 = &v169[8 * v168];
                          *(_QWORD *)v170 = v160;
                          v163 = v170 + 8;
                          while (v161 != v164)
                          {
                            v172 = *((_QWORD *)v161 - 1);
                            v161 -= 8;
                            *((_QWORD *)v170 - 1) = v172;
                            v170 -= 8;
                          }
                          v159[160] = v170;
                          v159[161] = v163;
                          v159[162] = v171;
                          if (v164)
                            operator delete(v164);
                        }
                        else
                        {
                          *(_QWORD *)v161 = v160;
                          v163 = v161 + 8;
                        }
                        v159[161] = v163;
                        if (!*(_DWORD *)(v3 + 48))
                        {
                          v173 = a1[1];
                          v174 = a1[2];
                          v175 = *(_QWORD **)v173;
                          v176 = *(unsigned __int16 *)(v174 + 22);
                          v177 = *(char **)(*(_QWORD *)v173 + 1312);
                          v178 = *(_QWORD *)(*(_QWORD *)v173 + 1320);
                          if ((unint64_t)v177 < v178)
                          {
                            *(_QWORD *)v177 = v176;
                            v179 = v177 + 8;
LABEL_209:
                            v175[164] = v179;
                            goto LABEL_210;
                          }
                          v180 = (char *)v175[163];
                          v181 = (v177 - v180) >> 3;
                          if (!((unint64_t)(v181 + 1) >> 61))
                          {
                            v182 = v178 - (_QWORD)v180;
                            v183 = (uint64_t)(v178 - (_QWORD)v180) >> 2;
                            if (v183 <= v181 + 1)
                              v183 = v181 + 1;
                            if (v182 >= 0x7FFFFFFFFFFFFFF8)
                              v184 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v184 = v183;
                            if (v184)
                            {
                              v185 = (char *)sub_40FC((uint64_t)(v175 + 165), v184);
                              v177 = (char *)v175[164];
                              v180 = (char *)v175[163];
                            }
                            else
                            {
                              v185 = 0;
                            }
                            v186 = &v185[8 * v181];
                            v187 = &v185[8 * v184];
                            *(_QWORD *)v186 = v176;
                            v179 = v186 + 8;
                            while (v177 != v180)
                            {
                              v188 = *((_QWORD *)v177 - 1);
                              v177 -= 8;
                              *((_QWORD *)v186 - 1) = v188;
                              v186 -= 8;
                            }
                            v175[163] = v186;
                            v175[164] = v179;
                            v175[165] = v187;
                            if (v180)
                              operator delete(v180);
                            goto LABEL_209;
                          }
LABEL_212:
                          sub_4074();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_210:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v11 = (_QWORD *)a1[1];
    v10 = (unsigned __int16 *)a1[2];
    v12 = (_QWORD *)*v11;
    *(_QWORD *)(v12[131] - 8) += v10[20] & 0x7FFF;
    *(_QWORD *)(v12[134] - 8) += v10[14] & 0x7FFF;
    *(_QWORD *)(v12[137] - 8) += v10[18];
    *(_QWORD *)(v12[140] - 8) += v10[12];
    *(_QWORD *)(v12[143] - 8) += v10[15];
    *(_QWORD *)(v12[146] - 8) += v10[9];
    *(_QWORD *)(v12[149] - 8) += v10[16];
    *(_QWORD *)(v12[152] - 8) += v10[10];
    *(_QWORD *)(v12[155] - 8) += v10[19];
    *(_QWORD *)(v12[158] - 8) += v10[13];
    v13 = a1[2];
    v14 = (_QWORD *)*v11;
    *(_QWORD *)(v14[161] - 8) += *(unsigned __int16 *)(v13 + 34);
    *(_QWORD *)(v14[164] - 8) += *(unsigned __int16 *)(v13 + 22);
  }
}

void sub_4A724(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    if (*(_DWORD *)(v3 + 48))
      goto LABEL_193;
    v5 = *(_QWORD **)a1[1];
    v6 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    v7 = (uint64_t *)v5[98];
    v8 = v5[99];
    if ((unint64_t)v7 >= v8)
    {
      v13 = (uint64_t *)v5[97];
      v14 = v7 - v13;
      if ((unint64_t)(v14 + 1) >> 61)
        goto LABEL_195;
      v15 = v8 - (_QWORD)v13;
      v16 = (uint64_t)(v8 - (_QWORD)v13) >> 2;
      if (v16 <= v14 + 1)
        v16 = v14 + 1;
      if (v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        v18 = (char *)sub_40FC((uint64_t)(v5 + 99), v17);
        v7 = (uint64_t *)v5[98];
        v13 = (uint64_t *)v5[97];
      }
      else
      {
        v18 = 0;
      }
      v19 = (uint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v6;
      v9 = v19 + 1;
      while (v7 != v13)
      {
        v21 = *--v7;
        *--v19 = v21;
      }
      v5[97] = v19;
      v5[98] = v9;
      v5[99] = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v7 = v6;
      v9 = v7 + 1;
    }
    v5[98] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v22 = *(_QWORD **)a1[1];
      v23 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v24 = (uint64_t *)v22[101];
      v25 = v22[102];
      if ((unint64_t)v24 >= v25)
      {
        v27 = (uint64_t *)v22[100];
        v28 = v24 - v27;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_195;
        v29 = v25 - (_QWORD)v27;
        v30 = (uint64_t)(v25 - (_QWORD)v27) >> 2;
        if (v30 <= v28 + 1)
          v30 = v28 + 1;
        if (v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)sub_40FC((uint64_t)(v22 + 102), v31);
          v24 = (uint64_t *)v22[101];
          v27 = (uint64_t *)v22[100];
        }
        else
        {
          v32 = 0;
        }
        v33 = (uint64_t *)&v32[8 * v28];
        v34 = &v32[8 * v31];
        *v33 = v23;
        v26 = v33 + 1;
        while (v24 != v27)
        {
          v35 = *--v24;
          *--v33 = v35;
        }
        v22[100] = v33;
        v22[101] = v26;
        v22[102] = v34;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v24 = v23;
        v26 = v24 + 1;
      }
      v22[101] = v26;
      if (!*(_DWORD *)(v3 + 48))
      {
        v36 = *(_QWORD **)a1[1];
        v37 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFLL;
        v38 = (uint64_t *)v36[104];
        v39 = v36[105];
        if ((unint64_t)v38 >= v39)
        {
          v41 = (uint64_t *)v36[103];
          v42 = v38 - v41;
          if ((unint64_t)(v42 + 1) >> 61)
            goto LABEL_195;
          v43 = v39 - (_QWORD)v41;
          v44 = (uint64_t)(v39 - (_QWORD)v41) >> 2;
          if (v44 <= v42 + 1)
            v44 = v42 + 1;
          if (v43 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
          {
            v46 = (char *)sub_40FC((uint64_t)(v36 + 105), v45);
            v38 = (uint64_t *)v36[104];
            v41 = (uint64_t *)v36[103];
          }
          else
          {
            v46 = 0;
          }
          v47 = (uint64_t *)&v46[8 * v42];
          v48 = &v46[8 * v45];
          *v47 = v37;
          v40 = v47 + 1;
          while (v38 != v41)
          {
            v49 = *--v38;
            *--v47 = v49;
          }
          v36[103] = v47;
          v36[104] = v40;
          v36[105] = v48;
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v38 = v37;
          v40 = v38 + 1;
        }
        v36[104] = v40;
        if (!*(_DWORD *)(v3 + 48))
        {
          v50 = *(_QWORD **)a1[1];
          v51 = ((unint64_t)*(unsigned int *)(a1[2] + 16) >> 1) & 0x3FFFF;
          v52 = (unint64_t *)v50[107];
          v53 = v50[108];
          if ((unint64_t)v52 >= v53)
          {
            v55 = (unint64_t *)v50[106];
            v56 = v52 - v55;
            if ((unint64_t)(v56 + 1) >> 61)
              goto LABEL_195;
            v57 = v53 - (_QWORD)v55;
            v58 = (uint64_t)(v53 - (_QWORD)v55) >> 2;
            if (v58 <= v56 + 1)
              v58 = v56 + 1;
            if (v57 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
            {
              v60 = (char *)sub_40FC((uint64_t)(v50 + 108), v59);
              v52 = (unint64_t *)v50[107];
              v55 = (unint64_t *)v50[106];
            }
            else
            {
              v60 = 0;
            }
            v61 = (unint64_t *)&v60[8 * v56];
            v62 = &v60[8 * v59];
            *v61 = v51;
            v54 = v61 + 1;
            while (v52 != v55)
            {
              v63 = *--v52;
              *--v61 = v63;
            }
            v50[106] = v61;
            v50[107] = v54;
            v50[108] = v62;
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v52 = v51;
            v54 = v52 + 1;
          }
          v50[107] = v54;
          if (!*(_DWORD *)(v3 + 48))
          {
            v64 = *(_QWORD **)a1[1];
            v65 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
            v66 = (uint64_t *)v64[110];
            v67 = v64[111];
            if ((unint64_t)v66 >= v67)
            {
              v69 = (uint64_t *)v64[109];
              v70 = v66 - v69;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_195;
              v71 = v67 - (_QWORD)v69;
              v72 = (uint64_t)(v67 - (_QWORD)v69) >> 2;
              if (v72 <= v70 + 1)
                v72 = v70 + 1;
              if (v71 >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v72;
              if (v73)
              {
                v74 = (char *)sub_40FC((uint64_t)(v64 + 111), v73);
                v66 = (uint64_t *)v64[110];
                v69 = (uint64_t *)v64[109];
              }
              else
              {
                v74 = 0;
              }
              v75 = (uint64_t *)&v74[8 * v70];
              v76 = &v74[8 * v73];
              *v75 = v65;
              v68 = v75 + 1;
              while (v66 != v69)
              {
                v77 = *--v66;
                *--v75 = v77;
              }
              v64[109] = v75;
              v64[110] = v68;
              v64[111] = v76;
              if (v69)
                operator delete(v69);
            }
            else
            {
              *v66 = v65;
              v68 = v66 + 1;
            }
            v64[110] = v68;
            if (!*(_DWORD *)(v3 + 48))
            {
              v78 = *(_QWORD **)a1[1];
              v79 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
              v80 = (uint64_t *)v78[113];
              v81 = v78[114];
              if ((unint64_t)v80 >= v81)
              {
                v83 = (uint64_t *)v78[112];
                v84 = v80 - v83;
                if ((unint64_t)(v84 + 1) >> 61)
                  goto LABEL_195;
                v85 = v81 - (_QWORD)v83;
                v86 = (uint64_t)(v81 - (_QWORD)v83) >> 2;
                if (v86 <= v84 + 1)
                  v86 = v84 + 1;
                if (v85 >= 0x7FFFFFFFFFFFFFF8)
                  v87 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v87 = v86;
                if (v87)
                {
                  v88 = (char *)sub_40FC((uint64_t)(v78 + 114), v87);
                  v80 = (uint64_t *)v78[113];
                  v83 = (uint64_t *)v78[112];
                }
                else
                {
                  v88 = 0;
                }
                v89 = (uint64_t *)&v88[8 * v84];
                v90 = &v88[8 * v87];
                *v89 = v79;
                v82 = v89 + 1;
                while (v80 != v83)
                {
                  v91 = *--v80;
                  *--v89 = v91;
                }
                v78[112] = v89;
                v78[113] = v82;
                v78[114] = v90;
                if (v83)
                  operator delete(v83);
              }
              else
              {
                *v80 = v79;
                v82 = v80 + 1;
              }
              v78[113] = v82;
              if (!*(_DWORD *)(v3 + 48))
              {
                v92 = a1[1];
                v93 = *(_QWORD **)v92;
                v94 = *(unsigned __int16 *)(a1[2] + 54);
                v95 = *(char **)(*(_QWORD *)v92 + 928);
                v96 = *(_QWORD *)(*(_QWORD *)v92 + 936);
                if ((unint64_t)v95 >= v96)
                {
                  v98 = (char *)v93[115];
                  v99 = (v95 - v98) >> 3;
                  if ((unint64_t)(v99 + 1) >> 61)
                    goto LABEL_195;
                  v100 = v96 - (_QWORD)v98;
                  v101 = (uint64_t)(v96 - (_QWORD)v98) >> 2;
                  if (v101 <= v99 + 1)
                    v101 = v99 + 1;
                  if (v100 >= 0x7FFFFFFFFFFFFFF8)
                    v102 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v102 = v101;
                  if (v102)
                  {
                    v103 = (char *)sub_40FC((uint64_t)(v93 + 117), v102);
                    v95 = (char *)v93[116];
                    v98 = (char *)v93[115];
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = &v103[8 * v99];
                  v105 = &v103[8 * v102];
                  *(_QWORD *)v104 = v94;
                  v97 = v104 + 8;
                  while (v95 != v98)
                  {
                    v106 = *((_QWORD *)v95 - 1);
                    v95 -= 8;
                    *((_QWORD *)v104 - 1) = v106;
                    v104 -= 8;
                  }
                  v93[115] = v104;
                  v93[116] = v97;
                  v93[117] = v105;
                  if (v98)
                    operator delete(v98);
                }
                else
                {
                  *(_QWORD *)v95 = v94;
                  v97 = v95 + 8;
                }
                v93[116] = v97;
                if (!*(_DWORD *)(v3 + 48))
                {
                  v107 = *(_QWORD **)a1[1];
                  v108 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
                  v109 = (uint64_t *)v107[119];
                  v110 = v107[120];
                  if ((unint64_t)v109 >= v110)
                  {
                    v112 = (uint64_t *)v107[118];
                    v113 = v109 - v112;
                    if ((unint64_t)(v113 + 1) >> 61)
                      goto LABEL_195;
                    v114 = v110 - (_QWORD)v112;
                    v115 = (uint64_t)(v110 - (_QWORD)v112) >> 2;
                    if (v115 <= v113 + 1)
                      v115 = v113 + 1;
                    if (v114 >= 0x7FFFFFFFFFFFFFF8)
                      v116 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v116 = v115;
                    if (v116)
                    {
                      v117 = (char *)sub_40FC((uint64_t)(v107 + 120), v116);
                      v109 = (uint64_t *)v107[119];
                      v112 = (uint64_t *)v107[118];
                    }
                    else
                    {
                      v117 = 0;
                    }
                    v118 = (uint64_t *)&v117[8 * v113];
                    v119 = &v117[8 * v116];
                    *v118 = v108;
                    v111 = v118 + 1;
                    while (v109 != v112)
                    {
                      v120 = *--v109;
                      *--v118 = v120;
                    }
                    v107[118] = v118;
                    v107[119] = v111;
                    v107[120] = v119;
                    if (v112)
                      operator delete(v112);
                  }
                  else
                  {
                    *v109 = v108;
                    v111 = v109 + 1;
                  }
                  v107[119] = v111;
                  if (!*(_DWORD *)(v3 + 48))
                  {
                    v121 = *(_QWORD **)a1[1];
                    v122 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
                    v123 = (uint64_t *)v121[122];
                    v124 = v121[123];
                    if ((unint64_t)v123 >= v124)
                    {
                      v126 = (uint64_t *)v121[121];
                      v127 = v123 - v126;
                      if ((unint64_t)(v127 + 1) >> 61)
                        goto LABEL_195;
                      v128 = v124 - (_QWORD)v126;
                      v129 = (uint64_t)(v124 - (_QWORD)v126) >> 2;
                      if (v129 <= v127 + 1)
                        v129 = v127 + 1;
                      if (v128 >= 0x7FFFFFFFFFFFFFF8)
                        v130 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v130 = v129;
                      if (v130)
                      {
                        v131 = (char *)sub_40FC((uint64_t)(v121 + 123), v130);
                        v123 = (uint64_t *)v121[122];
                        v126 = (uint64_t *)v121[121];
                      }
                      else
                      {
                        v131 = 0;
                      }
                      v132 = (uint64_t *)&v131[8 * v127];
                      v133 = &v131[8 * v130];
                      *v132 = v122;
                      v125 = v132 + 1;
                      while (v123 != v126)
                      {
                        v134 = *--v123;
                        *--v132 = v134;
                      }
                      v121[121] = v132;
                      v121[122] = v125;
                      v121[123] = v133;
                      if (v126)
                        operator delete(v126);
                    }
                    else
                    {
                      *v123 = v122;
                      v125 = v123 + 1;
                    }
                    v121[122] = v125;
                    if (!*(_DWORD *)(v3 + 48))
                    {
                      v135 = a1[1];
                      v136 = *(_QWORD **)v135;
                      v137 = *(unsigned __int16 *)(a1[2] + 52);
                      v138 = *(char **)(*(_QWORD *)v135 + 1000);
                      v139 = *(_QWORD *)(*(_QWORD *)v135 + 1008);
                      if ((unint64_t)v138 >= v139)
                      {
                        v141 = (char *)v136[124];
                        v142 = (v138 - v141) >> 3;
                        if ((unint64_t)(v142 + 1) >> 61)
                          goto LABEL_195;
                        v143 = v139 - (_QWORD)v141;
                        v144 = (uint64_t)(v139 - (_QWORD)v141) >> 2;
                        if (v144 <= v142 + 1)
                          v144 = v142 + 1;
                        if (v143 >= 0x7FFFFFFFFFFFFFF8)
                          v145 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v145 = v144;
                        if (v145)
                        {
                          v146 = (char *)sub_40FC((uint64_t)(v136 + 126), v145);
                          v138 = (char *)v136[125];
                          v141 = (char *)v136[124];
                        }
                        else
                        {
                          v146 = 0;
                        }
                        v147 = &v146[8 * v142];
                        v148 = &v146[8 * v145];
                        *(_QWORD *)v147 = v137;
                        v140 = v147 + 8;
                        while (v138 != v141)
                        {
                          v149 = *((_QWORD *)v138 - 1);
                          v138 -= 8;
                          *((_QWORD *)v147 - 1) = v149;
                          v147 -= 8;
                        }
                        v136[124] = v147;
                        v136[125] = v140;
                        v136[126] = v148;
                        if (v141)
                          operator delete(v141);
                      }
                      else
                      {
                        *(_QWORD *)v138 = v137;
                        v140 = v138 + 8;
                      }
                      v136[125] = v140;
                      if (!*(_DWORD *)(v3 + 48))
                      {
                        v150 = a1[2];
                        v151 = *(_QWORD **)a1[1];
                        v152 = *(_DWORD *)(v150 + 44) & 0xFFFFFLL;
                        v153 = (uint64_t *)v151[128];
                        v154 = v151[129];
                        if ((unint64_t)v153 < v154)
                        {
                          *v153 = v152;
                          v155 = v153 + 1;
LABEL_192:
                          v151[128] = v155;
                          goto LABEL_193;
                        }
                        v156 = (uint64_t *)v151[127];
                        v157 = v153 - v156;
                        if (!((unint64_t)(v157 + 1) >> 61))
                        {
                          v158 = v154 - (_QWORD)v156;
                          v159 = (uint64_t)(v154 - (_QWORD)v156) >> 2;
                          if (v159 <= v157 + 1)
                            v159 = v157 + 1;
                          if (v158 >= 0x7FFFFFFFFFFFFFF8)
                            v160 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v160 = v159;
                          if (v160)
                          {
                            v161 = (char *)sub_40FC((uint64_t)(v151 + 129), v160);
                            v153 = (uint64_t *)v151[128];
                            v156 = (uint64_t *)v151[127];
                          }
                          else
                          {
                            v161 = 0;
                          }
                          v162 = (uint64_t *)&v161[8 * v157];
                          v163 = &v161[8 * v160];
                          *v162 = v152;
                          v155 = v162 + 1;
                          while (v153 != v156)
                          {
                            v164 = *--v153;
                            *--v162 = v164;
                          }
                          v151[127] = v162;
                          v151[128] = v155;
                          v151[129] = v163;
                          if (v156)
                            operator delete(v156);
                          goto LABEL_192;
                        }
LABEL_195:
                        sub_4074();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_193:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v11 = a1[1];
    v10 = a1[2];
    v12 = *(_QWORD **)v11;
    *(_QWORD *)(v12[98] - 8) += *(_DWORD *)(v10 + 28) & 0x3FFFF;
    *(_QWORD *)(v12[101] - 8) += *(_DWORD *)(v10 + 24) & 0x3FFFF;
    *(_QWORD *)(v12[104] - 8) += *(_DWORD *)(v10 + 20) & 0x3FFFF;
    *(_QWORD *)(v12[107] - 8) += ((unint64_t)*(unsigned int *)(v10 + 16) >> 1) & 0x3FFFF;
    *(_QWORD *)(v12[110] - 8) += *(_DWORD *)(v10 + 36) & 0x3FFFF;
    *(_QWORD *)(v12[113] - 8) += *(_DWORD *)(v10 + 32) & 0x3FFFF;
    *(_QWORD *)(v12[116] - 8) += *(unsigned __int16 *)(v10 + 54);
    *(_QWORD *)(v12[119] - 8) += *(_DWORD *)(v10 + 40) & 0xFFFFF;
    *(_QWORD *)(v12[122] - 8) += *(_DWORD *)(v10 + 48) & 0xFFFFF;
    *(_QWORD *)(v12[125] - 8) += *(unsigned __int16 *)(v10 + 52);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 1024) - 8) += *(_DWORD *)(a1[2] + 44) & 0xFFFFF;
  }
}

void sub_4B154(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  unint64_t v63;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    if (*(_DWORD *)(v3 + 48))
      goto LABEL_74;
    v5 = *(_QWORD **)a1[1];
    v6 = *(_DWORD *)(a1[2] + 28) & 0xFFFFFLL;
    v7 = (uint64_t *)v5[707];
    v8 = v5[708];
    if ((unint64_t)v7 >= v8)
    {
      v12 = (uint64_t *)v5[706];
      v13 = v7 - v12;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_76;
      v14 = v8 - (_QWORD)v12;
      v15 = (uint64_t)(v8 - (_QWORD)v12) >> 2;
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v17 = (char *)sub_40FC((uint64_t)(v5 + 708), v16);
        v7 = (uint64_t *)v5[707];
        v12 = (uint64_t *)v5[706];
      }
      else
      {
        v17 = 0;
      }
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v6;
      v9 = v18 + 1;
      while (v7 != v12)
      {
        v20 = *--v7;
        *--v18 = v20;
      }
      v5[706] = v18;
      v5[707] = v9;
      v5[708] = v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v7 = v6;
      v9 = v7 + 1;
    }
    v5[707] = v9;
    if (!*(_DWORD *)(v3 + 48))
    {
      v21 = *(_QWORD **)a1[1];
      v22 = *(_DWORD *)(a1[2] + 20) & 0x1FFFFLL;
      v23 = (uint64_t *)v21[710];
      v24 = v21[711];
      if ((unint64_t)v23 >= v24)
      {
        v26 = (uint64_t *)v21[709];
        v27 = v23 - v26;
        if ((unint64_t)(v27 + 1) >> 61)
          goto LABEL_76;
        v28 = v24 - (_QWORD)v26;
        v29 = (uint64_t)(v24 - (_QWORD)v26) >> 2;
        if (v29 <= v27 + 1)
          v29 = v27 + 1;
        if (v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          v31 = (char *)sub_40FC((uint64_t)(v21 + 711), v30);
          v23 = (uint64_t *)v21[710];
          v26 = (uint64_t *)v21[709];
        }
        else
        {
          v31 = 0;
        }
        v32 = (uint64_t *)&v31[8 * v27];
        v33 = &v31[8 * v30];
        *v32 = v22;
        v25 = v32 + 1;
        while (v23 != v26)
        {
          v34 = *--v23;
          *--v32 = v34;
        }
        v21[709] = v32;
        v21[710] = v25;
        v21[711] = v33;
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v23 = v22;
        v25 = v23 + 1;
      }
      v21[710] = v25;
      if (!*(_DWORD *)(v3 + 48))
      {
        v35 = *(_QWORD **)a1[1];
        v36 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
        v37 = (uint64_t *)v35[713];
        v38 = v35[714];
        if ((unint64_t)v37 >= v38)
        {
          v40 = (uint64_t *)v35[712];
          v41 = v37 - v40;
          if ((unint64_t)(v41 + 1) >> 61)
            goto LABEL_76;
          v42 = v38 - (_QWORD)v40;
          v43 = (uint64_t)(v38 - (_QWORD)v40) >> 2;
          if (v43 <= v41 + 1)
            v43 = v41 + 1;
          if (v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
          {
            v45 = (char *)sub_40FC((uint64_t)(v35 + 714), v44);
            v37 = (uint64_t *)v35[713];
            v40 = (uint64_t *)v35[712];
          }
          else
          {
            v45 = 0;
          }
          v46 = (uint64_t *)&v45[8 * v41];
          v47 = &v45[8 * v44];
          *v46 = v36;
          v39 = v46 + 1;
          while (v37 != v40)
          {
            v48 = *--v37;
            *--v46 = v48;
          }
          v35[712] = v46;
          v35[713] = v39;
          v35[714] = v47;
          if (v40)
            operator delete(v40);
        }
        else
        {
          *v37 = v36;
          v39 = v37 + 1;
        }
        v35[713] = v39;
        if (!*(_DWORD *)(v3 + 48))
        {
          v49 = a1[2];
          v50 = *(_QWORD **)a1[1];
          v51 = ((unint64_t)*(unsigned int *)(v49 + 16) >> 1) & 0x7FFFF;
          v52 = (unint64_t *)v50[716];
          v53 = v50[717];
          if ((unint64_t)v52 < v53)
          {
            *v52 = v51;
            v54 = v52 + 1;
LABEL_73:
            v50[716] = v54;
            goto LABEL_74;
          }
          v55 = (unint64_t *)v50[715];
          v56 = v52 - v55;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            v57 = v53 - (_QWORD)v55;
            v58 = (uint64_t)(v53 - (_QWORD)v55) >> 2;
            if (v58 <= v56 + 1)
              v58 = v56 + 1;
            if (v57 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
            {
              v60 = (char *)sub_40FC((uint64_t)(v50 + 717), v59);
              v52 = (unint64_t *)v50[716];
              v55 = (unint64_t *)v50[715];
            }
            else
            {
              v60 = 0;
            }
            v61 = (unint64_t *)&v60[8 * v56];
            v62 = &v60[8 * v59];
            *v61 = v51;
            v54 = v61 + 1;
            while (v52 != v55)
            {
              v63 = *--v52;
              *--v61 = v63;
            }
            v50[715] = v61;
            v50[716] = v54;
            v50[717] = v62;
            if (v55)
              operator delete(v55);
            goto LABEL_73;
          }
LABEL_76:
          sub_4074();
        }
      }
    }
LABEL_74:
    *a2 = 1;
    return;
  }
  if (!*(_DWORD *)(v3 + 48))
  {
    v10 = (unsigned int *)a1[2];
    v11 = *(_QWORD **)a1[1];
    *(_QWORD *)(v11[707] - 8) += v10[7] & 0xFFFFF;
    *(_QWORD *)(v11[710] - 8) += v10[5] & 0x1FFFF;
    *(_QWORD *)(v11[713] - 8) += v10[6] & 0xFFFFF;
    *(_QWORD *)(v11[716] - 8) += ((unint64_t)v10[4] >> 1) & 0x7FFFF;
  }
}

